<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fibonacci Benchmarker [C++]</title>
    <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079</link>
    <description>[b]What:[/b]
The benchmarks the time needed to evaluate the Fibonacci sequence over a series of implementations. 

[b]Source:[/b]
[code=c++]/**
	Title: Fibonacci Benchmarker
	Author: t4
*/

#include &lt;iostream&gt;
#include &lt;math.h&gt;
#include &lt;sys/time.h&gt;

/** cbf to type this */
typedef unsigned long long big_num;

/** The nth fib(n) number to calculate */
static const int fib_n = 32;

/** The positive golden ratio constant */
static const float postive_golden_ratio = 1.61803399F;

/** The negative golden ratio constant */
static const float negative_golden_ratio = -0.618033989F;

/** The constant of 1/sqrt(5) */
static const float one_sqrt_fifth = 0.447213595F;
	
/**
	Standard recursive implementation of fibonacci sequence
	@param n the number to fib(n) value to compute
*/
big_num fib_recursive(int n) {
	if(n == 0)
		return 0;
	if(n == 1)
		return 1;
	return fib_recursive(n - 1) + fib_recursive(n - 2);
}

/**
	Recursive implementation of fibonacci sequence w/ memoization
	@param n the number to fib(n) value to compute
	@param 
*/
big_num fib_recursive_memo(int n, big_num* table) {
	if(table[n] != -1)
		return table[n];		
	return fib_recursive_memo(n - 1, table) + fib_recursive_memo(n - 2, table);
}

/**
	Standard closed-form implementation of fibonacci sequence
	@param n the number to fib(n) value to compute
*/
big_num fib_closed(int n) {
	return one_sqrt_fifth * (pow(postive_golden_ratio, n) - pow(negative_golden_ratio, n));
}

/**
	Closed-form implementation of fibonacci sequence w/ rounding
	@param n the number to fib(n) value to compute
*/
big_num fib_closed_est(int n) {
	return (one_sqrt_fifth * pow(postive_golden_ratio, n) + 0.5);
}




void test_fib_recursive() {
	struct timeval start, end;
	long mtime, seconds, useconds;    

	gettimeofday(&amp;start, NULL);
	big_num result = fib_recursive(fib_n);
	gettimeofday(&amp;end, NULL);

	seconds  = end.tv_sec  - start.tv_sec;
	useconds = end.tv_usec - start.tv_usec;

	mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;
	
	std::cout &lt;&lt; &quot;fib_recursive(&quot; &lt;&lt; fib_n &lt;&lt; &quot;) = &quot; &lt;&lt; result &lt;&lt; &quot;, took: &quot; &lt;&lt; mtime &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;
}

void test_fib_recursive_memo() {
	big_num* table = new big_num[fib_n + 1]; //building the memoization map
	std::fill(table, table + (fib_n + 1), -1);
	table[0] = 0;
	table[1] = 1;			
		
	struct timeval start, end;
	long mtime, seconds, useconds;    

	gettimeofday(&amp;start, NULL);
	big_num result = fib_recursive_memo(fib_n, table);
	gettimeofday(&amp;end, NULL);

	seconds  = end.tv_sec  - start.tv_sec;
	useconds = end.tv_usec - start.tv_usec;

	mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;
	delete [] table;
	std::cout &lt;&lt; &quot;fib_recursive_memo(&quot; &lt;&lt; fib_n &lt;&lt; &quot;) = &quot; &lt;&lt; result &lt;&lt; &quot;, took: &quot; &lt;&lt; mtime &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;
}

void test_fib_closed() {
	struct timeval start, end;
	long mtime, seconds, useconds;    

	gettimeofday(&amp;start, NULL);
	big_num result = fib_closed(fib_n);
	gettimeofday(&amp;end, NULL);

	seconds  = end.tv_sec  - start.tv_sec;
	useconds = end.tv_usec - start.tv_usec;

	mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;
	
	std::cout &lt;&lt; &quot;fib_closed(&quot; &lt;&lt; fib_n &lt;&lt; &quot;) = &quot; &lt;&lt; result &lt;&lt; &quot;, took: &quot; &lt;&lt; mtime &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;
}

void test_fib_closed_est() {
	struct timeval start, end;
	long mtime, seconds, useconds;    

	gettimeofday(&amp;start, NULL);
	big_num result = fib_closed_est(fib_n);
	gettimeofday(&amp;end, NULL);

	seconds  = end.tv_sec  - start.tv_sec;
	useconds = end.tv_usec - start.tv_usec;
	mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;
	
	std::cout &lt;&lt; &quot;fib_closed_est(&quot; &lt;&lt; fib_n &lt;&lt; &quot;) = &quot; &lt;&lt; result &lt;&lt; &quot;, took: &quot; &lt;&lt; mtime &lt;&lt; &quot;ms&quot; &lt;&lt; std::endl;
}

/**
	The entry point
*/
int main(int argc, char** argv) {
	test_fib_recursive();
	test_fib_recursive_memo();
	test_fib_closed();
	test_fib_closed_est();
	return 0;
}
[/code]
i guess i could have used macros, but whatever...

[b]Results:[/b]
[tt]
t4@vm:~/cpp$ ./fib 
fib_recursive(32) = 2178309, took: 87ms
fib_recursive_memo(32) = 2178309, took: 100ms
fib_closed(32) = 2178309, took: 0ms
fib_closed_est(32) = 2178310, took: 0ms
[/tt]</description>
    
    <lastBuildDate>Sat, 25 Feb 2012 08:10:01 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>[quote=“Moparisthebest, post:6, topic:433079”]On Linux at least you can pin the program so it can only use specific cores. :)[/quote]Can do that on all the modern operating systems.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/7</link>
        <pubDate>Sat, 25 Feb 2012 08:10:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-7</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>First test out all optimization levels, with gcc that would be ‘-O1’, ‘-O2’, and ‘-O3’.  There are also options to try to unroll loops and such, they might be interesting.</p>
<p>I think with a linear program like this multiple cores shouldn’t make any difference whatsoever, but you could test that too.  On Linux at least you can pin the program so it can only use specific cores. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/6</link>
        <pubDate>Sat, 25 Feb 2012 04:23:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-6</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="433079">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>I wonder if this is something that processor architecture would change drastically.  Also you should test various compiler flags, they should make a big difference.</p>
</blockquote>
</aside>
<p>interesting thought on architecture; my numbers came from a 32bit 1 core virtual machine on a host with an i7. which flags did you have in mind?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/5</link>
        <pubDate>Sat, 25 Feb 2012 02:31:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-5</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I wonder if this is something that processor architecture would change drastically.  Also you should test various compiler flags, they should make a big difference.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/4</link>
        <pubDate>Sat, 25 Feb 2012 00:16:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-4</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“The Enforcer, post:2, topic:433079”]Your memorizing version of it doesn’t actually remember anything except 0 and 1.</p>
<p>[code]<br>
#include <br>
#include <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> </p>
<p>unsigned long long max = std::numeric_limits::max();<br>
unsigned long long fibonacci_numbers[100] = { };</p>
<p>unsigned long long fibonacci(unsigned int n)<br>
{<br>
if (fibonacci_numbers[n] == max)<br>
{<br>
fibonacci_numbers[n] = fibonacci(n - 1) + fibonacci(n - 2);<br>
}</p>
<pre><code>return fibonacci_numbers[n];
</code></pre>
<p>}</p>
<p>int main(void)<br>
{<br>
fibonacci_numbers[0] = 0;<br>
fibonacci_numbers[1] = 1;<br>
std::fill(fibonacci_numbers + 2, fibonacci_numbers + 100, max);</p>
<pre><code>std::clock_t startClocks = std::clock();
unsigned long long fN = fibonacci(93);
std::clock_t clocksTaken = std::clock() - startClocks;
std::cout &lt;&lt; "Result: " &lt;&lt; fN &lt;&lt; ". Time taken: " &lt;&lt; (static_cast&lt;double&gt;(clocksTaken) / CLOCKS_PER_SEC * 1000) &lt;&lt; "ms." &lt;&lt; std::endl;

std::cin.sync();
std::cin.get();
return 0;
</code></pre>
<p>}<br>
[/code][/quote]<br>
and that would be why I was confused why the time complexity was &gt; plain old recursion! I guess I rushed it and forgot a very important line.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/3</link>
        <pubDate>Thu, 16 Feb 2012 14:56:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-3</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>Your memorizing version of it doesn’t actually remember anything except 0 and 1.</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include &lt;algorithm&gt;
#include &lt;limits&gt;
#include &lt;ctime&gt;

unsigned long long max = std::numeric_limits&lt;unsigned long long&gt;::max();
unsigned long long fibonacci_numbers[100] = { };

unsigned long long fibonacci(unsigned int n)
{
	if (fibonacci_numbers[n] == max)
	{
		fibonacci_numbers[n] = fibonacci(n - 1) + fibonacci(n - 2);
	}

	return fibonacci_numbers[n];
}

int main(void)
{
	fibonacci_numbers[0] = 0;
	fibonacci_numbers[1] = 1;
	std::fill(fibonacci_numbers + 2, fibonacci_numbers + 100, max);
	
	std::clock_t startClocks = std::clock();
	unsigned long long fN = fibonacci(93);
	std::clock_t clocksTaken = std::clock() - startClocks;
	std::cout &lt;&lt; "Result: " &lt;&lt; fN &lt;&lt; ". Time taken: " &lt;&lt; (static_cast&lt;double&gt;(clocksTaken) / CLOCKS_PER_SEC * 1000) &lt;&lt; "ms." &lt;&lt; std::endl;

	std::cin.sync();
	std::cin.get();
	return 0;
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/2</link>
        <pubDate>Thu, 16 Feb 2012 12:07:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-2</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker [C++]</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">What:</span><br>
The benchmarks the time needed to evaluate the Fibonacci sequence over a series of implementations.</p>
<p><span class="bbcode-b">Source:</span></p>
<p>[code=c++]/**<br>
Title: Fibonacci Benchmarker<br>
Author: t4<br>
*/</p>
<p><span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> &lt;math.h&gt;<br>
<span class="hashtag">#include</span> &lt;sys/time.h&gt;</p>
<p>/** cbf to type this */<br>
typedef unsigned long long big_num;</p>
<p>/** The nth fib(n) number to calculate */<br>
static const int fib_n = 32;</p>
<p>/** The positive golden ratio constant */<br>
static const float postive_golden_ratio = 1.61803399F;</p>
<p>/** The negative golden ratio constant */<br>
static const float negative_golden_ratio = -0.618033989F;</p>
<p>/** The constant of 1/sqrt(5) */<br>
static const float one_sqrt_fifth = 0.447213595F;</p>
<p>/**<br>
Standard recursive implementation of fibonacci sequence<br>
<a class="mention" href="/u/param">@param</a> n the number to fib(n) value to compute<br>
*/<br>
big_num fib_recursive(int n) {<br>
if(n == 0)<br>
return 0;<br>
if(n == 1)<br>
return 1;<br>
return fib_recursive(n - 1) + fib_recursive(n - 2);<br>
}</p>
<p>/**<br>
Recursive implementation of fibonacci sequence w/ memoization<br>
<a class="mention" href="/u/param">@param</a> n the number to fib(n) value to compute<br>
<a class="mention" href="/u/param">@param</a><br>
<em>/<br>
big_num fib_recursive_memo(int n, big_num</em> table) {<br>
if(table[n] != -1)<br>
return table[n];		<br>
return fib_recursive_memo(n - 1, table) + fib_recursive_memo(n - 2, table);<br>
}</p>
<p>/**<br>
Standard closed-form implementation of fibonacci sequence<br>
<a class="mention" href="/u/param">@param</a> n the number to fib(n) value to compute<br>
*/<br>
big_num fib_closed(int n) {<br>
return one_sqrt_fifth * (pow(postive_golden_ratio, n) - pow(negative_golden_ratio, n));<br>
}</p>
<p>/**<br>
Closed-form implementation of fibonacci sequence w/ rounding<br>
<a class="mention" href="/u/param">@param</a> n the number to fib(n) value to compute<br>
*/<br>
big_num fib_closed_est(int n) {<br>
return (one_sqrt_fifth * pow(postive_golden_ratio, n) + 0.5);<br>
}</p>
<p>void test_fib_recursive() {<br>
struct timeval start, end;<br>
long mtime, seconds, useconds;</p>
<pre><code>gettimeofday(&amp;start, NULL);
big_num result = fib_recursive(fib_n);
gettimeofday(&amp;end, NULL);

seconds  = end.tv_sec  - start.tv_sec;
useconds = end.tv_usec - start.tv_usec;

mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;

std::cout &lt;&lt; "fib_recursive(" &lt;&lt; fib_n &lt;&lt; ") = " &lt;&lt; result &lt;&lt; ", took: " &lt;&lt; mtime &lt;&lt; "ms" &lt;&lt; std::endl;
</code></pre>
<p>}</p>
<p>void test_fib_recursive_memo() {<br>
big_num* table = new big_num[fib_n + 1]; //building the memoization map<br>
std::fill(table, table + (fib_n + 1), -1);<br>
table[0] = 0;<br>
table[1] = 1;</p>
<pre><code>struct timeval start, end;
long mtime, seconds, useconds;    

gettimeofday(&amp;start, NULL);
big_num result = fib_recursive_memo(fib_n, table);
gettimeofday(&amp;end, NULL);

seconds  = end.tv_sec  - start.tv_sec;
useconds = end.tv_usec - start.tv_usec;

mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;
delete [] table;
std::cout &lt;&lt; "fib_recursive_memo(" &lt;&lt; fib_n &lt;&lt; ") = " &lt;&lt; result &lt;&lt; ", took: " &lt;&lt; mtime &lt;&lt; "ms" &lt;&lt; std::endl;
</code></pre>
<p>}</p>
<p>void test_fib_closed() {<br>
struct timeval start, end;<br>
long mtime, seconds, useconds;</p>
<pre><code>gettimeofday(&amp;start, NULL);
big_num result = fib_closed(fib_n);
gettimeofday(&amp;end, NULL);

seconds  = end.tv_sec  - start.tv_sec;
useconds = end.tv_usec - start.tv_usec;

mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;

std::cout &lt;&lt; "fib_closed(" &lt;&lt; fib_n &lt;&lt; ") = " &lt;&lt; result &lt;&lt; ", took: " &lt;&lt; mtime &lt;&lt; "ms" &lt;&lt; std::endl;
</code></pre>
<p>}</p>
<p>void test_fib_closed_est() {<br>
struct timeval start, end;<br>
long mtime, seconds, useconds;</p>
<pre><code>gettimeofday(&amp;start, NULL);
big_num result = fib_closed_est(fib_n);
gettimeofday(&amp;end, NULL);

seconds  = end.tv_sec  - start.tv_sec;
useconds = end.tv_usec - start.tv_usec;
mtime = ((seconds) * 1000 + useconds/1000.0) + 0.5;

std::cout &lt;&lt; "fib_closed_est(" &lt;&lt; fib_n &lt;&lt; ") = " &lt;&lt; result &lt;&lt; ", took: " &lt;&lt; mtime &lt;&lt; "ms" &lt;&lt; std::endl;
</code></pre>
<p>}</p>
<p>/**<br>
The entry point<br>
<em>/<br>
int main(int argc, char</em>* argv) {<br>
test_fib_recursive();<br>
test_fib_recursive_memo();<br>
test_fib_closed();<br>
test_fib_closed_est();<br>
return 0;<br>
}<br>
[/code]<br>
i guess i could have used macros, but whatever…</p>
<p><span class="bbcode-b">Results:</span><br>
[tt]<br>
t4@vm:~/cpp$ ./fib<br>
fib_recursive(32) = 2178309, took: 87ms<br>
fib_recursive_memo(32) = 2178309, took: 100ms<br>
fib_closed(32) = 2178309, took: 0ms<br>
fib_closed_est(32) = 2178310, took: 0ms<br>
[/tt]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079/1</link>
        <pubDate>Wed, 15 Feb 2012 20:08:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433079-1</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker-c/433079.rss">Fibonacci Benchmarker [C++]</source>
      </item>
  </channel>
</rss>
