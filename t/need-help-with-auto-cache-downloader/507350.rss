<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need help with auto cache downloader</title>
    <link>https://forum.moparisthebest.com/t/need-help-with-auto-cache-downloader/507350</link>
    <description>Hey guys 

i&#39;v been making my own RSPS for some time now mainly working on the and sourse side of things. Saving the cache side for last! as its the part that I suck the most at only because of getting the auto cache downloader working again. And personally im quite good at coding sourse and client side. but as I have already said the cache downloader is what I hate. 

 So I have remade my cache and done a lot of updates to it. I already have my &quot;cachedownloader&quot; file all set and ready to go. And it works for my old cache. but I need help uploading my new cache somewhere, Dropbox I think? and getting the link to put into my cachedownloader to download and release to c: drive. If you can help i&#39;d appreciate it a lot! Heres my Skype so you can add me if you want: Cody.way2

 Heres the code that I have for my old cache, I need help uploading and getting another one of these links. (well atleast that&#39;s what I think needs done) haha I sound very nooby at coding. 

 This is the code I have for my cachedownloader. sorry about the huge post. I just really need help 

 import java.io.File;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.io.FileWriter;
 import java.io.BufferedWriter;
 import java.io.BufferedOutputStream;
 import java.io.BufferedInputStream;
 import java.io.FileOutputStream;
 import java.io.FileInputStream;
 import java.io.InputStream;
 import java.net.URLConnection;
 import java.net.URL;
 import java.util.zip.ZipFile;
 import java.util.zip.ZipEntry;
 import java.util.zip.ZipInputStream;
 import java.util.Enumeration;

 import sign.signlink;

 public class CacheDownloader {

 private client client;

 private final int BUFFER = 1024;
 /**
 *This is where the Cache downloader coding starts
 **/
 private final int VERSION = 5;
 private String cacheLink = &quot;https://dl.dropbox.com/u/91577463/TrisidiaX%20Cache/TrisidiaX%20V3%20Release%20Cache.zip&quot;;
 /**
 *Cache Downloader Ends
 **/
 private String fileToExtract = getCacheDir() + getArchivedName();

 public CacheDownloader(client client) {
 this.client = client;
 }

 private void drawLoadingText(String text) {
 client.drawLoadingText(35, text);
 //System.out.println(text);
 }


 private void drawLoadingText(int amount, String text) {
 client.drawLoadingText(amount, text);
 //System.out.println(text);
 }

 private String getCacheDir() {
 return signlink.findcachedir();
 }

 private String getCacheLink() {
 return cacheLink;
 }

 private int getCacheVersion() {
 return VERSION;
 }

 public CacheDownloader downloadCache() {
 try {
 File location = new File(getCacheDir());
 File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);

 if(!location.exists()) {
 //drawLoadingText(&quot;Loading new Updates....&quot;);
 downloadFile(getCacheLink(), getArchivedName());

 unZip();
 //System.out.println(&quot;UNZIP&quot;);

 BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
 versionFile.close();
 deleteZIP(getArchivedName());
 } else {
 if(!version.exists()) {
 //drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
 downloadFile(getCacheLink(), getArchivedName());

 unZip();
 //System.out.println(&quot;UNZIP&quot;);

 BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
 versionFile.close();
 deleteZIP(getArchivedName());

 } else {
 return null;
 }
 }
 } catch(Exception e) {

 }
 return null;
 }

 private void downloadFile(String adress, String localFileName) {
 OutputStream out = null;
 URLConnection conn;
 InputStream in = null;

 try {

 URL url = new URL(adress);
 out = new BufferedOutputStream(
 new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

 conn = url.openConnection();
 in = conn.getInputStream(); 

 byte[] data = new byte[BUFFER]; 

 int numRead;
 long numWritten = 0;
 int length = conn.getContentLength();


 while((numRead = in.read(data)) != -1) {
 out.write(data, 0, numRead);
 numWritten += numRead;

 int percentage = (int)(((double)numWritten / (double)length) * 100D);
 drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%...&quot;);

 }

 System.out.println(localFileName + &quot;\t&quot; + numWritten);
 drawLoadingText(&quot;Unpacking Cache %..&quot;);

 } catch (Exception exception) {
 exception.printStackTrace();
 } finally {
 try {
 if (in != null) {
 in.close();
 }
 if (out != null) {
 out.close();
 }
 } catch (IOException ioe) {
 }
 }

 }

 private String getArchivedName() {
 int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
 if (lastSlashIndex &gt;= 0 
 &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
 return getCacheLink().substring(lastSlashIndex + 1);
 } else {
 //System.err.println(&quot;error retreiving archivaed name.&quot;);
 }
 return &quot;&quot;;
 }




 private void unZip() {

 try {
 InputStream in = 
 new BufferedInputStream(new FileInputStream(fileToExtract));
 ZipInputStream zin = new ZipInputStream(in);
 ZipEntry e;

 while((e=zin.getNextEntry()) != null) {

 if(e.isDirectory()) {
 (new File(getCacheDir() + e.getName())).mkdir();
 } else {

 if (e.getName().equals(fileToExtract)) {
 unzip(zin, fileToExtract);
 break;
 }
 unzip(zin, getCacheDir() + e.getName());
 }
 //System.out.println(&quot;unzipping2 &quot; + e.getName());
 }
 zin.close();

 } catch(Exception e) {
 e.printStackTrace();
 }
 }

 private void deleteZIP(String fileName){
 // A File object to represent the filename
 File f = new File(getCacheDir() + fileName);

 // Make sure the file or directory exists and isn&#39;t write protected
 if (!f.exists())
 throw new IllegalArgumentException(
 &quot;Delete: no such file or directory: &quot; + fileName);

 if (!f.canWrite())
 throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
 + fileName);

 // If it is a directory, make sure it is empty
 if (f.isDirectory()) {
 String[] files = f.list();
 if (files.length &gt; 0)
 throw new IllegalArgumentException(
 &quot;Delete: directory not empty: &quot; + fileName);
 }

 // Attempt to delete it
 boolean success = f.delete();

 if (!success)
 throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

 }

 private void unzip(ZipInputStream zin, String s) 
 throws IOException {

 FileOutputStream out = new FileOutputStream(s);
 //System.out.println(&quot;unzipping &quot; + s);
 byte [] b = new byte[BUFFER];
 int len = 0;

 while ((len = zin.read(b)) != -1) {
 out.write(b,0,len);
 }
 out.close();
 }
 }</description>
    
    <lastBuildDate>Mon, 11 Mar 2013 21:45:14 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-help-with-auto-cache-downloader/507350.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need help with auto cache downloader</title>
        <dc:creator><![CDATA[@Dr_Jig Dr Jig]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dr_jig">@Dr_Jig</a> wrote:</p>
          <blockquote>
              <p>Hey guys</p>
<p>i’v been making my own RSPS for some time now mainly working on the and sourse side of things. Saving the cache side for last! as its the part that I suck the most at only because of getting the auto cache downloader working again. And personally im quite good at coding sourse and client side. but as I have already said the cache downloader is what I hate.</p>
<p>So I have remade my cache and done a lot of updates to it. I already have my “cachedownloader” file all set and ready to go. And it works for my old cache. but I need help uploading my new cache somewhere, Dropbox I think? and getting the link to put into my cachedownloader to download and release to c: drive. If you can help i’d appreciate it a lot! Heres my Skype so you can add me if you want: Cody.way2</p>
<p>Heres the code that I have for my old cache, I need help uploading and getting another one of these links. (well atleast that’s what I think needs done) haha I sound very nooby at coding.</p>
<p>This is the code I have for my cachedownloader. sorry about the huge post. I just really need help</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<p>private client client;</p>
<p>private final int BUFFER = 1024;<br>
/**<br>
*This is where the Cache downloader coding starts<br>
<strong>/<br>
private final int VERSION = 5;<br>
private String cacheLink = “<a href="https://dl.dropbox.com/u/91577463/TrisidiaX%20Cache/TrisidiaX%20V3%20Release%20Cache.zip" rel="nofollow noopener">https://dl.dropbox.com/u/91577463/TrisidiaX%20Cache/TrisidiaX%20V3%20Release%20Cache.zip</a>”;<br>
/</strong><br>
*Cache Downloader Ends<br>
**/<br>
private String fileToExtract = getCacheDir() + getArchivedName();</p>
<p>public CacheDownloader(client client) {<br>
this.client = client;<br>
}</p>
<p>private void drawLoadingText(String text) {<br>
client.drawLoadingText(35, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private void drawLoadingText(int amount, String text) {<br>
client.drawLoadingText(amount, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private String getCacheDir() {<br>
return signlink.findcachedir();<br>
}</p>
<p>private String getCacheLink() {<br>
return cacheLink;<br>
}</p>
<p>private int getCacheVersion() {<br>
return VERSION;<br>
}</p>
<p>public CacheDownloader downloadCache() {<br>
try {<br>
File location = new File(getCacheDir());<br>
File version = new File(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”);</p>
<p>if(!location.exists()) {<br>
//drawLoadingText(“Loading new Updates…”);<br>
downloadFile(getCacheLink(), getArchivedName());</p>
<p>unZip();<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(“UNZIP”);</p>
<p>BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”));<br>
versionFile.close();<br>
deleteZIP(getArchivedName());<br>
} else {<br>
if(!version.exists()) {<br>
//drawLoadingText("~ First Time Installation, Only Once! ~");<br>
downloadFile(getCacheLink(), getArchivedName());</p>
<p>unZip();<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(“UNZIP”);</p>
<p>BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”));<br>
versionFile.close();<br>
deleteZIP(getArchivedName());</p>
<p>} else {<br>
return null;<br>
}<br>
}<br>
} catch(Exception e) {</p>
<p>}<br>
return null;<br>
}</p>
<p>private void downloadFile(String adress, String localFileName) {<br>
OutputStream out = null;<br>
URLConnection conn;<br>
InputStream in = null;</p>
<p>try {</p>
<p>URL url = new URL(adress);<br>
out = new BufferedOutputStream(<br>
new FileOutputStream(getCacheDir() + “/” +localFileName));</p>
<p>conn = url.openConnection();<br>
in = conn.getInputStream();</p>
<p>byte[] data = new byte[BUFFER];</p>
<p>int numRead;<br>
long numWritten = 0;<br>
int length = conn.getContentLength();</p>
<p>while((numRead = in.read(data)) != -1) {<br>
out.write(data, 0, numRead);<br>
numWritten += numRead;</p>
<p>int percentage = (int)(((double)numWritten / (double)length) * 100D);<br>
drawLoadingText(percentage, "Downloading Cache " + percentage + “%…”);</p>
<p>}</p>
<p>System.out.println(localFileName + “\t” + numWritten);<br>
drawLoadingText(“Unpacking Cache %…”);</p>
<p>} catch (Exception exception) {<br>
exception.printStackTrace();<br>
} finally {<br>
try {<br>
if (in != null) {<br>
in.close();<br>
}<br>
if (out != null) {<br>
out.close();<br>
}<br>
} catch (IOException ioe) {<br>
}<br>
}</p>
<p>}</p>
<p>private String getArchivedName() {<br>
int lastSlashIndex = getCacheLink().lastIndexOf(’/’);<br>
if (lastSlashIndex &gt;= 0<br>
&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {<br>
return getCacheLink().substring(lastSlashIndex + 1);<br>
} else {<br>
<a href="//System.err.println" rel="nofollow noopener">//System.err.println</a>(“error retreiving archivaed name.”);<br>
}<br>
return “”;<br>
}</p>
<p>private void unZip() {</p>
<p>try {<br>
InputStream in =<br>
new BufferedInputStream(new FileInputStream(fileToExtract));<br>
ZipInputStream zin = new ZipInputStream(in);<br>
ZipEntry e;</p>
<p>while((e=zin.getNextEntry()) != null) {</p>
<p>if(e.isDirectory()) {<br>
(new File(getCacheDir() + e.getName())).mkdir();<br>
} else {</p>
<p>if (e.getName().equals(fileToExtract)) {<br>
unzip(zin, fileToExtract);<br>
break;<br>
}<br>
unzip(zin, getCacheDir() + e.getName());<br>
}<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>("unzipping2 " + e.getName());<br>
}<br>
zin.close();</p>
<p>} catch(Exception e) {<br>
e.printStackTrace();<br>
}<br>
}</p>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<p>// Make sure the file or directory exists and isn’t write protected<br>
if (!f.exists())<br>
throw new IllegalArgumentException(<br>
"Delete: no such file or directory: " + fileName);</p>
<p>if (!f.canWrite())<br>
throw new IllegalArgumentException("Delete: write protected: "</p>
<ul>
<li>fileName);</li>
</ul>
<p>// If it is a directory, make sure it is empty<br>
if (f.isDirectory()) {<br>
String[] files = f.list();<br>
if (files.length &gt; 0)<br>
throw new IllegalArgumentException(<br>
"Delete: directory not empty: " + fileName);<br>
}</p>
<p>// Attempt to delete it<br>
boolean success = f.delete();</p>
<p>if (!success)<br>
throw new IllegalArgumentException(“Delete: deletion failed”);</p>
<p>}</p>
<p>private void unzip(ZipInputStream zin, String s)<br>
throws IOException {</p>
<p>FileOutputStream out = new FileOutputStream(s);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>("unzipping " + s);<br>
byte [] b = new byte[BUFFER];<br>
int len = 0;</p>
<p>while ((len = zin.read(b)) != -1) {<br>
out.write(b,0,len);<br>
}<br>
out.close();<br>
}<br>
}</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-with-auto-cache-downloader/507350/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-with-auto-cache-downloader/507350/1</link>
        <pubDate>Mon, 11 Mar 2013 21:45:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-507350-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-with-auto-cache-downloader/507350.rss">Need help with auto cache downloader</source>
      </item>
  </channel>
</rss>
