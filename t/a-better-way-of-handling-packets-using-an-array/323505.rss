<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A better way of handling packets [Using an array]</title>
    <link>https://forum.moparisthebest.com/t/a-better-way-of-handling-packets-using-an-array/323505</link>
    <description>Start by making this interface... Aaand I don&#39;t mean those stupid hardcoded client things.

[code]package com.rs2.ecstasy.model.player.packetmanager;

import com.rs2.ecstasy.model.player.ClientHandler;

public interface Packet {
	public void handlePacket(ClientHandler client, int packetType, int packetSize);
}
[/code]

Change the packaging to your source. If your server is not packaged, I suggest packaging it - Or this will look stupid.

Now create another package in that called &#39;packets&#39;

Okay now add this class in the same package as the Packet interface. This will handle all of the packets (So make sure you add them to the array)

[code]/*
 * @Author Ecstasy
 * @Credits Brown, Colby, &amp; Songoty
 * 
 * Clearly much better than using a massive switch statement.
 */
package com.rs2.ecstasy.model.player.packetmanager;

import com.rs2.ecstasy.model.player.ClientHandler;
import com.rs2.ecstasy.model.player.packetmanager.packets.ActionButtons;
import com.rs2.ecstasy.model.player.packetmanager.packets.BuryBones;
import com.rs2.ecstasy.model.player.packetmanager.packets.ClickObject;
import com.rs2.ecstasy.model.player.packetmanager.packets.Command;
import com.rs2.ecstasy.model.player.packetmanager.packets.ItemHandler;
import com.rs2.ecstasy.model.player.packetmanager.packets.Unused;
import com.rs2.ecstasy.model.player.packetmanager.packets.Walk;

public class ManagePackets {
	/*
	 * Add packets here
	 * @param packetId: the id of the packet...
	 * Usage: packetId[packetId] = new PacketClass();
	 * Make sure to import the class.
	 */
	public static Packet packetId[] = new Packet[256];
	static {
		Unused unusedPacket = new Unused();
		packetId[98] = new Walk();
		packetId[164] = new Walk();
		packetId[248] = new Walk();
	}
	public static void handlePacket(ClientHandler client, int type, int size) {
		try {
			if (type &lt; packetId.length)
				packetId[type].handlePacket(client, type, size);
		} catch (Exception e) {
			System.out.println(&quot;Null packet called. [&quot;+type+&quot;]&quot;);
		}
	}
}[/code]

Tbh I&#39;m sure Graham, or blake, or colby could easily come in here and make a 10x better class, but this seems to be pretty good.

Now in that packet package, simply add your packets by doing this:

[code]package com.rs2.ecstasy.model.player.packetmanager.packets;

import com.rs2.ecstasy.model.player.ClientHandler;
import com.rs2.ecstasy.model.player.Player;
import com.rs2.ecstasy.model.player.packetmanager.Packet;
import com.rs2.ecstasy.util.Misc;

/**
 * @author Ecstasy
 * @credits Idk whoever made this walking packet... Probably winterlove.
 */
public class Walk implements Packet {
	public static int MAP_WALK = 248, WALK_ON_COMMAND = 98, REGULAR_WALK = 164;

	@Override
	public void handlePacket(ClientHandler client, int packetType,
			int packetSize) {
		/*
		 * Walk on command &amp; regular walking For walking. Obvious reasons
		 * @PacketId [98, 164, &amp; 248];
		 */
		if(packetType == MAP_WALK) {
			packetSize -= 14;
			packetType = 98;
		}
		if (packetType == WALK_ON_COMMAND || packetType == REGULAR_WALK) {
			Player.newWalkCmdSteps = packetSize - 5;
			if (Player.newWalkCmdSteps % 2 != 0)
				client.println_debug(&quot;Warning: walkTo(&quot; + packetType
						+ &quot;) command malformed: &quot;
						+ Misc.Hex(client.inStream.buffer, 0, packetSize));
			Player.newWalkCmdSteps /= 2;
			if (++Player.newWalkCmdSteps &gt; Player.walkingQueueSize) {
				client.println_debug(&quot;Warning: walkTo(&quot; + packetType
						+ &quot;) command contains too many steps (&quot;
						+ Player.newWalkCmdSteps + &quot;).&quot;);
				Player.newWalkCmdSteps = 0;
			}
			int firstStepX = client.inStream.readSignedWordBigEndianA()
					- client.mapRegionX * 8;
			for (int i = 1; i &lt; Player.newWalkCmdSteps; i++) {
				Player.newWalkCmdX[i] = client.inStream.readSignedByte();
				Player.newWalkCmdY[i] = client.inStream.readSignedByte();
			}
			Player.newWalkCmdX[0] = Player.newWalkCmdY[0] = 0;
			int firstStepY = client.inStream.readSignedWordBigEndian()
					- client.mapRegionY * 8;
			Player.newWalkCmdIsRunning = client.inStream.readSignedByteC() == 1;
			for (int i = 0; i &lt; Player.newWalkCmdSteps; i++) {
				Player.newWalkCmdX[i] += firstStepX;
				Player.newWalkCmdY[i] += firstStepY;
			}
		}
	}
}[/code]

That class will handle walking.

I&#39;ll break this down for you on how to add your own packets...

First start by making the class. Name it PacketName. (Capitalize the first letter, for conventions sake)

Add your imports. Idk which source you&#39;re using but make sure the client class is imported as you&#39;re going to need that. 

Now make the class implement &#39;Packet&#39; and make sure you have that imported...

[code]public ClassName implements Packet {[/code]

Now add the main method.

[code]	public void handlePacket(ClientHandler client, int packetType,
			int packetSize) {
        }[/code]

Now add an Override annotation to that (@Override) for those who don&#39;t know...

Now you&#39;re ready to add the packets. To take these from your client class simply just use

[code]something = client.outStream.whatEverYouWantHere;[/code]

Just put client. in front of it.

God I hate explaining things like these lol...
Now find where the method parseIncomingPackets is being called (most likely in your process method) and replace &quot;parseIncomingPackets();&quot; with...

[code]		ManagePackets.handlePacket(this, packetType,
				packetSize);[/code]

Hope this might have helped a few people.
See a better way to do it? Don&#39;t waste your time flaming, just tell me how it could be better.

I&#39;m expecting a huge reply from someone who is a lot better than me, on how this could be better :p

[I][B][U]Btw, even if you&#39;re using shard and think you have the best packet managing ever, I suggest using this :p If your packets use a switch statement, or a map than this is better. (This doesn&#39;t have as much as a delay). However this will still have your 500ms delay (the process one). Unless you only parse them when a player uses them or w/e, (like hyperion)[/U][/B][/I]</description>
    
    <lastBuildDate>Sat, 02 Jan 2010 02:24:09 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-better-way-of-handling-packets-using-an-array/323505.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A better way of handling packets [Using an array]</title>
        <dc:creator><![CDATA[@Diabolus Diabolus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/diabolus">@Diabolus</a> wrote:</p>
          <blockquote>
              <p>Start by making this interface… Aaand I don’t mean those stupid hardcoded client things.</p>
<p>[code]package com.rs2.ecstasy.model.player.packetmanager;</p>
<p>import com.rs2.ecstasy.model.player.ClientHandler;</p>
<p>public interface Packet {<br>
public void handlePacket(ClientHandler client, int packetType, int packetSize);<br>
}<br>
[/code]</p>
<p>Change the packaging to your source. If your server is not packaged, I suggest packaging it - Or this will look stupid.</p>
<p>Now create another package in that called ‘packets’</p>
<p>Okay now add this class in the same package as the Packet interface. This will handle all of the packets (So make sure you add them to the array)</p>
<p>[code]/*</p>
<ul>
<li>
<span class="mention">@Author</span> Ecstasy</li>
<li>
<span class="mention">@Credits</span> Brown, Colby, &amp; Songoty</li>
<li>
</li>
<li>Clearly much better than using a massive switch statement.<br>
*/<br>
package com.rs2.ecstasy.model.player.packetmanager;</li>
</ul>
<p>import com.rs2.ecstasy.model.player.ClientHandler;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.ActionButtons;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.BuryBones;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.ClickObject;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.Command;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.ItemHandler;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.Unused;<br>
import com.rs2.ecstasy.model.player.packetmanager.packets.Walk;</p>
<p>public class ManagePackets {<br>
/*<br>
* Add packets here<br>
* <a class="mention" href="/u/param">@param</a> packetId: the id of the packet…<br>
* Usage: packetId[packetId] = new PacketClass();<br>
* Make sure to import the class.<br>
*/<br>
public static Packet packetId[] = new Packet[256];<br>
static {<br>
Unused unusedPacket = new Unused();<br>
packetId[98] = new Walk();<br>
packetId[164] = new Walk();<br>
packetId[248] = new Walk();<br>
}<br>
public static void handlePacket(ClientHandler client, int type, int size) {<br>
try {<br>
if (type &lt; packetId.length)<br>
packetId[type].handlePacket(client, type, size);<br>
} catch (Exception e) {<br>
System.out.println(“Null packet called. [”+type+"]");<br>
}<br>
}<br>
}[/code]</p>
<p>Tbh I’m sure Graham, or blake, or colby could easily come in here and make a 10x better class, but this seems to be pretty good.</p>
<p>Now in that packet package, simply add your packets by doing this:</p>
<p>[code]package com.rs2.ecstasy.model.player.packetmanager.packets;</p>
<p>import com.rs2.ecstasy.model.player.ClientHandler;<br>
import com.rs2.ecstasy.model.player.Player;<br>
import com.rs2.ecstasy.model.player.packetmanager.Packet;<br>
import com.rs2.ecstasy.util.Misc;</p>
<p>/**</p>
<ul>
<li>
<p><span class="mention">@author</span> Ecstasy</p>
</li>
<li>
<p><span class="mention">@credits</span> Idk whoever made this walking packet… Probably winterlove.<br>
*/<br>
public class Walk implements Packet {<br>
public static int MAP_WALK = 248, WALK_ON_COMMAND = 98, REGULAR_WALK = 164;</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void handlePacket(ClientHandler client, int packetType,<br>
int packetSize) {<br>
/*<br>
* Walk on command &amp; regular walking For walking. Obvious reasons<br>
* <span class="mention">@PacketId</span> [98, 164, &amp; 248];<br>
*/<br>
if(packetType == MAP_WALK) {<br>
packetSize -= 14;<br>
packetType = 98;<br>
}<br>
if (packetType == WALK_ON_COMMAND || packetType == REGULAR_WALK) {<br>
Player.newWalkCmdSteps = packetSize - 5;<br>
if (Player.newWalkCmdSteps % 2 != 0)<br>
client.println_debug(“Warning: walkTo(” + packetType<br>
+ ") command malformed: "<br>
+ Misc.Hex(client.inStream.buffer, 0, packetSize));<br>
Player.newWalkCmdSteps /= 2;<br>
if (++Player.newWalkCmdSteps &gt; Player.walkingQueueSize) {<br>
client.println_debug(“Warning: walkTo(” + packetType<br>
+ “) command contains too many steps (”<br>
+ Player.newWalkCmdSteps + “).”);<br>
Player.newWalkCmdSteps = 0;<br>
}<br>
int firstStepX = client.inStream.readSignedWordBigEndianA()<br>
- client.mapRegionX * 8;<br>
for (int i = 1; i &lt; Player.newWalkCmdSteps; i++) {<br>
Player.newWalkCmdX[i] = client.inStream.readSignedByte();<br>
Player.newWalkCmdY[i] = client.inStream.readSignedByte();<br>
}<br>
Player.newWalkCmdX[0] = Player.newWalkCmdY[0] = 0;<br>
int firstStepY = client.inStream.readSignedWordBigEndian()<br>
- client.mapRegionY * 8;<br>
Player.newWalkCmdIsRunning = client.inStream.readSignedByteC() == 1;<br>
for (int i = 0; i &lt; Player.newWalkCmdSteps; i++) {<br>
Player.newWalkCmdX[i] += firstStepX;<br>
Player.newWalkCmdY[i] += firstStepY;<br>
}<br>
}<br>
}<br>
}[/code]</p>
</li>
</ul>
<p>That class will handle walking.</p>
<p>I’ll break this down for you on how to add your own packets…</p>
<p>First start by making the class. Name it PacketName. (Capitalize the first letter, for conventions sake)</p>
<p>Add your imports. Idk which source you’re using but make sure the client class is imported as you’re going to need that.</p>
<p>Now make the class implement ‘Packet’ and make sure you have that imported…</p>
<pre><code class="lang-auto">public ClassName implements Packet {</code></pre>
<p>Now add the main method.</p>
<p><code>	public void handlePacket(ClientHandler client, int packetType,
			int packetSize) {
        }</code></p>
<p>Now add an Override annotation to that (<a class="mention" href="/u/override">@Override</a>) for those who don’t know…</p>
<p>Now you’re ready to add the packets. To take these from your client class simply just use</p>
<pre><code class="lang-auto">something = client.outStream.whatEverYouWantHere;</code></pre>
<p>Just put client. in front of it.</p>
<p>God I hate explaining things like these lol…<br>
Now find where the method parseIncomingPackets is being called (most likely in your process method) and replace “parseIncomingPackets();” with…</p>
<p><code>		ManagePackets.handlePacket(this, packetType,
				packetSize);</code></p>
<p>Hope this might have helped a few people.<br>
See a better way to do it? Don’t waste your time flaming, just tell me how it could be better.</p>
<p>I’m expecting a huge reply from someone who is a lot better than me, on how this could be better <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p><span class="bbcode-i"><span class="bbcode-b"><span class="bbcode-u">Btw, even if you’re using shard and think you have the best packet managing ever, I suggest using this <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> If your packets use a switch statement, or a map than this is better. (This doesn’t have as much as a delay). However this will still have your 500ms delay (the process one). Unless you only parse them when a player uses them or w/e, (like hyperion)</span></span></span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-of-handling-packets-using-an-array/323505/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-of-handling-packets-using-an-array/323505/1</link>
        <pubDate>Sat, 02 Jan 2010 02:24:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-323505-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-of-handling-packets-using-an-array/323505.rss">A better way of handling packets [Using an array]</source>
      </item>
  </channel>
</rss>
