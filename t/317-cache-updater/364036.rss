<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>317 Cache updater</title>
    <link>https://forum.moparisthebest.com/t/317-cache-updater/364036</link>
    <description>Hello everyone I need to make the cache in my client updateble for adding new costum islands models animations etc unfortunantly I don&#39;t know how i can do it and I dont get tom&#39;s cache updatzer protocol can someone explain tom me better? I also have an updater file in my client but don&#39;t know how to use it:
 Toms tut on rs-server
== What does it do? ==
The Runescape update server is a quick and effective way of transferring updated files to the runescape cache. It works by checking the crc, and version numbers in each of the client&#39;s cache files against that of the server. Any files that don&#39;t match are then sent to the client to be packed into the cache.

== How does it work? ==
An update session is first initialized by the client. The client creates a connection to the server on port 43594 (The same location and port as the Game Server). The client will then begin checking the checksum of its own files against that of the server. This is done by using the pre-sent &#39;versionlist.jag&#39; file, which is sent before any updating is performed, Via a different protocol. This protocol is commonly referred to as JAGGRAB. [JAGGRAB Protocol docs coming soon] 

Any file checksums that don&#39;t match then must be requested from the server in the form of a 4 byte message, containing the cache, file id, and priority of the request (See Request Priority below). The server will then respond to the request with numerous &#39;chunk&#39; messages, containing a 6 byte header, and up to 500 bytes of the file requested. Once a sucessful transfer has occurred, the client must then reassemble the different chunks, and pack the file into its cache.

== Request Priority ==
Each request comes with a 1 of 3 different priority levels, these values define the urgency of the request.
The different priorities are as follows:
URGENT - This priority occurs when the client is in game, and requires a new model that it has not yet recieved.
LOADUP - This priority is only used when the client is loading
PASSIVE - This priority is used when a file is not needed urgently, but will probably be needed in the future.
Requests should be processed according to their priority, LOADUP being the highest, PASSIVE being the lowest.

== File request format ==
File requests from the client come in the form of a short, 4 byte message. The format is as follows:
Code:
·cache_id:byte    The id of the cache the file is found in
.file_id:short        The id of the file inside the cache to update
.priority:byte       The priority of the request (See Request Priorities above)
== File response format ==
Responses to a File Request message broken up in to a number of chunks. The amount of chunks the server will respond with depends on the size of the file. The file is broken up into 500 byte chunks, which are each prefixed by a 6 byte header. A chunk can also contain less than 500 bytes, if needed (ie. the end of the file). The header contains information about the file the chunk pertains to, and the chunks location in the file.
The format for an entire chunk is as follows:
Code:
.cache_id:byte     The id of the cache the file is found in
.file_id:short        The id of the file inside the cache to update
.file_size:short     The entire file size of the file we&#39;re updating
.chunk_id:byte     The id of this chunk. Chunk ids increment with each new chunk of a file sent.
.data:max. 500 bytes    The data
== Example Request and Response ==
The following is an example of a request for a new file, and the server&#39;s response

Code:
Client Write: 
[Request] Cache id 1; File id 1; Priority 2

Server Write:
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 0; [500 bytes of data]
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 1; [500 bytes of data]
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 2; [128 bytes of data]

I really don&#39;t get it in what files should i put these things to work? :confused:
Please help!</description>
    
    <lastBuildDate>Tue, 12 Oct 2010 16:44:58 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-cache-updater/364036.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>317 Cache updater</title>
        <dc:creator><![CDATA[@artego artego]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/artego">@artego</a> wrote:</p>
          <blockquote>
              <p>Hello everyone I need to make the cache in my client updateble for adding new costum islands models animations etc unfortunantly I don’t know how i can do it and I dont get tom’s cache updatzer protocol can someone explain tom me better? I also have an updater file in my client but don’t know how to use it:<br>
Toms tut on rs-server<br>
== What does it do? ==<br>
The Runescape update server is a quick and effective way of transferring updated files to the runescape cache. It works by checking the crc, and version numbers in each of the client’s cache files against that of the server. Any files that don’t match are then sent to the client to be packed into the cache.</p>
<p>== How does it work? ==<br>
An update session is first initialized by the client. The client creates a connection to the server on port 43594 (The same location and port as the Game Server). The client will then begin checking the checksum of its own files against that of the server. This is done by using the pre-sent ‘versionlist.jag’ file, which is sent before any updating is performed, Via a different protocol. This protocol is commonly referred to as JAGGRAB. [JAGGRAB Protocol docs coming soon]</p>
<p>Any file checksums that don’t match then must be requested from the server in the form of a 4 byte message, containing the cache, file id, and priority of the request (See Request Priority below). The server will then respond to the request with numerous ‘chunk’ messages, containing a 6 byte header, and up to 500 bytes of the file requested. Once a sucessful transfer has occurred, the client must then reassemble the different chunks, and pack the file into its cache.</p>
<p>== Request Priority ==<br>
Each request comes with a 1 of 3 different priority levels, these values define the urgency of the request.<br>
The different priorities are as follows:<br>
URGENT - This priority occurs when the client is in game, and requires a new model that it has not yet recieved.<br>
LOADUP - This priority is only used when the client is loading<br>
PASSIVE - This priority is used when a file is not needed urgently, but will probably be needed in the future.<br>
Requests should be processed according to their priority, LOADUP being the highest, PASSIVE being the lowest.</p>
<p>== File request format ==<br>
File requests from the client come in the form of a short, 4 byte message. The format is as follows:<br>
Code:<br>
·cache_id:byte    The id of the cache the file is found in<br>
.file_id:short        The id of the file inside the cache to update<br>
.priority:byte       The priority of the request (See Request Priorities above)<br>
== File response format ==<br>
Responses to a File Request message broken up in to a number of chunks. The amount of chunks the server will respond with depends on the size of the file. The file is broken up into 500 byte chunks, which are each prefixed by a 6 byte header. A chunk can also contain less than 500 bytes, if needed (ie. the end of the file). The header contains information about the file the chunk pertains to, and the chunks location in the file.<br>
The format for an entire chunk is as follows:<br>
Code:<br>
.cache_id:byte     The id of the cache the file is found in<br>
.file_id:short        The id of the file inside the cache to update<br>
.file_size:short     The entire file size of the file we’re updating<br>
.chunk_id:byte     The id of this chunk. Chunk ids increment with each new chunk of a file sent.<br>
.data:max. 500 bytes    The data<br>
== Example Request and Response ==<br>
The following is an example of a request for a new file, and the server’s response</p>
<p>Code:<br>
Client Write:<br>
[Request] Cache id 1; File id 1; Priority 2</p>
<p>Server Write:<br>
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 0; [500 bytes of data]<br>
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 1; [500 bytes of data]<br>
[Chunk] Cache id 1; File id 1; File size 1128; Chunk id 2; [128 bytes of data]</p>
<p>I really don’t get it in what files should i put these things to work? <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"><br>
Please help!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-cache-updater/364036/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-cache-updater/364036/1</link>
        <pubDate>Tue, 12 Oct 2010 16:44:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364036-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-cache-updater/364036.rss">317 Cache updater</source>
      </item>
  </channel>
</rss>
