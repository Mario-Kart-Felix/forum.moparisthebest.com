<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shop problems, buying and selling</title>
    <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669</link>
    <description>Yeah i know its been done before, but everytime i search button it, it has no results :S

Anyway, when i buy 1 from shop it fills inventory, Buy 5+ buy 10 do not work. Far as i can see there is no bankx,2,5, etc files.

Also, when selling back to shop, cannot sell 5/10, but if you sell 1 it sells the item but does not remove it.


Here are the files :)


Shop assistant
[code]package server.model.shops;

import server.Config;
import server.Server;
import server.model.items.ItemAssistant;
import server.model.items.ItemDefinitions;
import server.model.items.ItemType;
import server.model.players.Client;
import server.model.players.PlayerHandler;

public class ShopAssistant {

	private Client c;

	public ShopAssistant(Client client) {
		c = client;
	}

	/**
	 * Shops
	 **/
	public boolean isShopNpc(int npcType) {
		String name = Server.npcHandler.getNpcListName(npcType);
		if (npcType &lt; 1) {
			return false;
		}
		if (name.equalsIgnoreCase(&quot;shop keeper&quot;)
				|| name.equalsIgnoreCase(&quot;shop assistant&quot;)) {
			return true;
		}
		if (Shop.getShop(npcType) &gt; -1) {
			return true;
		}
		return false;
	}

	public void openNpcShop(int npcType) {
		String name = Server.npcHandler.getNpcListName(npcType);
		if (name.equalsIgnoreCase(&quot;shop keeper&quot;)
				|| name.equalsIgnoreCase(&quot;shop assistant&quot;)) {
			openShop(1);
		}
		if (Shop.getShop(npcType) &gt; -1) {
			openShop(Shop.getShop(npcType));
		}
	}

	public void openShop(int ShopID) {
		c.getActionSender().removeAllWindows();
		c.getItems().resetItems(3823);
		resetShop(ShopID);
		c.isShopping = true;
		c.myShopId = ShopID;
		c.getActionSender().sendFrame248(3824, 3822);
		c.getActionSender().sendFrame126(ShopHandler.ShopName[ShopID], 3901);
	}

	public void updatePlayerShop(int ShopID) {
		for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
			if (PlayerHandler.getPlayers()[d] != null
					&amp;&amp; PlayerHandler.getPlayers()[d].isActive) {
				Client t = (Client) PlayerHandler.getPlayers()[d];
				if (t.isShopping == true &amp;&amp; t.myShopId == ShopID) {
					t.getShops().resetShop(ShopID);
				}
				t.updateShop = true;
			}
		}
	}

	public void resetShop(int ShopID) {
		synchronized (c) {
			int TotalItems = 0;
			for (int i = 0; i &lt; ShopHandler.MaxShopItems; i++) {
				if (ShopHandler.ShopItems[ShopID][i] &gt; 0) {
					TotalItems++;
				}
			}
			if (TotalItems &gt; ShopHandler.MaxShopItems) {
				TotalItems = ShopHandler.MaxShopItems;
			}
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(3900);
			c.getOutStream().writeWord(TotalItems);
			int TotalCount = 0;
			for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
				if (ShopHandler.ShopItems[ShopID][i] &gt; 0
						|| i &lt;= ShopHandler.ShopItemsStandard[ShopID]) {
					int amount = ShopHandler.ShopItemsAmount[ShopID][i];
					if (amount &gt; 254) {
						c.getOutStream().writeByte(255);
						c.getOutStream().writeDWord_v2(amount);
					} else {
						c.getOutStream().writeByte(amount);
					}
					if (ShopHandler.ShopItems[ShopID][i] &gt; Config.ITEM_LIMIT
							|| ShopHandler.ShopItems[ShopID][i] &lt; 0) {
						ShopHandler.ShopItems[ShopID][i] = Config.ITEM_LIMIT;
					}
					c.getOutStream().writeWordBigEndianA(
							ShopHandler.ShopItems[ShopID][i]);
					TotalCount++;
				}
				if (TotalCount &gt; TotalItems) {
					break;
				}
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();
		}
	}

	public int getItemShopValue(int itemId) {
			switch (itemId) {
case 4049:
return 120;
case 315:
return 8;
case 329:
return 15;
case 361:
return 23;
case 359:
return 46;
case 379:
return 65;
case 4053:
return 415;
//Iron
case 1153:
return 170;
case 1115:
return 170;
case 1067:
return 170;
case 1191:
return 170;
//Mith
case 1159:
return 460;
case 1121:
return 460;
case 1071:
return 460;
case 1197:
return 460;
//Addy
case 1161:
return 1160;
case 1123:
return 1160;
case 1073:
return 1160;
case 1199:
return 1160;
//Rune
case 1163:
return 3150;
case 1127:
return 3150;
case 1079:
return 3150;
case 1201:
return 3150;
//Green Dhide
case 1135:
return 785;
case 1099:
return 785;
case 1065:
return 785;
//Blue Dhide
case 2499:
return 1655;
case 2493:
return 1655;
case 2487:
return 1655;
//Red Dhide
case 2501:
return 2445;
case 2495:
return 2445;
case 2489:
return 2445;
//Black Dhide
case 2503:
return 4645;
case 2497:
return 4645;
case 2491:
return 4645;
//Ammys
case 1725:
return 1450;
//Boots
case 3105:
return 460;
//Capes
case 1007:
return 275;
//Weapons

//Scims
case 1321:
return 45;
case 1323:
return 340;
case 1329:
return 789;
case 1331:
return 1650;
case 1333:
return 2650;
case 4587:
return 4300;
//Whip
case 4151:
return 6750;
//Bows
case 841:
return 45;
case 843:
return 235;
case 849:
return 567;
case 853:
return 1198;
case 857:
return 2396;
//Arrows
case 882:
return 4;
case 884:
return 9;
case 888:
return 17;
case 890:
return 29;
case 892:
return 48;
}
return 0;
	}

	public String price(int price) {
		if (price &gt;= 1000000) {
			return &quot; (&quot; + price / 1000000 + &quot; million)&quot;;
		} else if (price &gt;= 1000 &amp;&amp; price &lt; 1000000) {
			return &quot; (&quot; + price / 1000 + &quot;K)&quot;;
		} else {
			return &quot;&quot;;
		}
	}

	/**
	 * Buy item from shop (Shop Price)
	 **/
	 
	public void buyFromShopPrice(int removeId, int removeSlot) {
	int ShopValue = getItemShopValue(removeId);

		ShopValue *= currency() == 995 ? 1.10 : 1;
		if (ShopValue &lt; 2) {
			ShopValue = 2;
		}
		String ShopAdd = &quot;&quot;;
		if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
			ShopAdd = &quot; (&quot; + ShopValue / 1000 + &quot;K)&quot;;
		} else if (ShopValue &gt;= 1000000) {
			ShopAdd = &quot; (&quot; + ShopValue / 1000000 + &quot; million)&quot;;
		}
		c.sendMessage(ItemAssistant.getItemName(removeId)
				+ &quot;: currently costs &quot; + ShopValue +&quot; gold coins.&quot;);
	}

	/**
	 * Sell item to shop (Shop Price)
	 **/
	public void sellToShopPrice(int removeId, int removeSlot) {
		for (int i : Config.UNSELLABLE_ITEMS) {
			if (i == removeId) {
				c.sendMessage(&quot;You can&#39;t sell &quot;
						+ ItemAssistant.getItemName(removeId).toLowerCase()
						+ &quot;.&quot;);
				return;
			}
		}
		if (ShopHandler.ShopSModifier[c.myShopId] == 3) {
			c.sendMessage(&quot;You can&#39;t sell items to this shop.&quot;);
			return;
		}
		boolean IsIn = false;
		if (ShopHandler.ShopSModifier[c.myShopId] &gt; 1) {
			for (int j = 0; j &lt;= ShopHandler.ShopItemsStandard[c.myShopId]; j++) {
				if (removeId == ShopHandler.ShopItems[c.myShopId][j] - 1) {
					IsIn = true;
					break;
				}
			}
		} else {
			IsIn = true;
			for (int i : Config.UNTRADEABLE_ITEMS) {
				if (i == removeId) {
					IsIn = false;
				}
			}
		}
		if (!IsIn) {
			c.sendMessage(&quot;You can&#39;t sell &quot;
					+ ItemAssistant.getItemName(removeId).toLowerCase()
					+ &quot; to this store.&quot;);
			return;
		}
		int ShopValue = getItemShopValue(removeId);
		String ShopAdd = &quot;&quot;;
		if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
			ShopAdd = &quot; (&quot; + ShopValue / 1000 + &quot;K)&quot;;
		} else if (ShopValue &gt;= 1000000) {
			ShopAdd = &quot; (&quot; + ShopValue / 1000000 + &quot; million)&quot;;
		}
		c.sendMessage(ItemAssistant.getItemName(removeId)
				+ &quot;: shop will buy for &quot; + ShopValue + &quot; &quot;
				+ ItemAssistant.getItemName(currency()).toLowerCase() + &quot;&quot;
				+ ShopAdd + &quot;.&quot;);
	}

	public boolean sellItem(int itemID, int fromSlot, int amount) {
		c.getTradeAndDuel().declineAll();
		for (int i : Config.UNDROPPABLE_ITEMS) {
			if (i == itemID) {
				c.sendMessage(&quot;You can&#39;t sell &quot;
						+ ItemAssistant.getItemName(itemID).toLowerCase() + &quot;.&quot;);
				return false;
			}
		}
		if (ShopHandler.ShopSModifier[c.myShopId] == 3) {
			c.sendMessage(&quot;You can&#39;t sell items to this shop.&quot;);
			return false;
		}
		if (!c.getItems().playerHasItem(itemID, amount)) {
			amount = c.getItems().getItemAmount(itemID);
			if (amount &lt; 1) {
				return false;
			}
		}
		boolean IsIn = false;
		if (amount &lt; 1 || itemID != c.playerItems[fromSlot] - 1) {
			return false;
		}
		if (ShopHandler.ShopSModifier[c.myShopId] &gt; 1) {
			for (int i = 0; i &lt;= ShopHandler.ShopItemsStandard[c.myShopId]; i++) {
				if (itemID == ShopHandler.ShopItems[c.myShopId][i] - 1) {
					IsIn = true;
					break;
				}
			}
		} else {
			IsIn = true;
			for (int i : Config.UNTRADEABLE_ITEMS) {
				if (i == itemID) {
					IsIn = false;
				}
			}
		}
		if (!IsIn) {
			c.sendMessage(&quot;You can&#39;t sell &quot;
					+ ItemAssistant.getItemName(itemID).toLowerCase()
					+ &quot; to this store.&quot;);
			return false;
		}
		if (amount &gt; c.playerItemsN[fromSlot]
				&amp;&amp; (ItemType.itemIsNote[(c.playerItems[fromSlot] - 1)] || ItemType.itemStackable[(c.playerItems[fromSlot] - 1)])) {
			amount = c.playerItemsN[fromSlot];
		} else if (amount &gt; c.getItems().getItemAmount(itemID)
				&amp;&amp; !ItemType.itemIsNote[(c.playerItems[fromSlot] - 1)]
				&amp;&amp; !ItemType.itemStackable[(c.playerItems[fromSlot] - 1)]) {
			amount = c.getItems().getItemAmount(itemID);
		}
		int price = amount * getItemShopValue(itemID);
		if (c.getItems().freeSlots() &gt; 0
				|| c.getItems().playerHasItem(currency())
				|| c.getItems().playerHasExactOrLessThan(itemID, amount)) {
			c.goldCoins -= (amount);
			c.getItems().addItem(currency(), price);
			addShopItem(itemID, amount);
		} else {
			c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
			return false;
		}
		c.getItems().resetItems(3823);
		updatePlayerShop(c.myShopId);
		return true;
	}

	public boolean addShopItem(int itemID, int amount) {
		boolean Added = false;
		if (amount &lt;= 0) {
			return false;
		}
		if (ItemType.itemIsNote[itemID] == true) {
			itemID = c.getItems().getUnnotedItem(itemID);
		}
		for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
			if (ShopHandler.ShopItems[c.myShopId][i] - 1 == itemID) {
				ShopHandler.ShopItemsAmount[c.myShopId][i] += amount;
				Added = true;
			}
		}
		if (Added == false) {
			for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
				if (ShopHandler.ShopItems[c.myShopId][i] == 0) {
					ShopHandler.ShopItems[c.myShopId][i] = itemID + 1;
					ShopHandler.ShopItemsAmount[c.myShopId][i] = amount;
					ShopHandler.ShopItemsDelay[c.myShopId][i] = 0;
					break;
				}
			}
		}
		return true;
	}

	public boolean buyItem(int itemID, int fromSlot, int amount) {
		c.getTradeAndDuel().declineAll();
		if (!shopSellsItem(itemID)) {
			return false;
		}
		if (c.getItems().getItemAmount(itemID) + amount &gt; Integer.MAX_VALUE) {
			amount = Integer.MAX_VALUE - c.getItems().getItemAmount(itemID);
		}
		if (amount &gt; ShopHandler.ShopItemsAmount[c.myShopId][fromSlot]) {
			amount = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot];
		}
		int price = (int) (getItemShopValue(itemID));
		if (price &lt; 2) {
			price = 2;
		}
		int amount1 = (int) Math.floor(c.getItems().getItemAmount(currency())
				/ price);
		if (getItemShopValue(itemID) &gt; c.goldCoins) {
			c.sendMessage(&quot;You don&#39;t have enough &quot;
					+ ItemAssistant.getItemName(currency()).toLowerCase()
					+ &quot; to buy that many.&quot;);
			amount = amount1;
		}
		if (amount &lt; 1
				|| ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
			return false;
		}
		if (!ItemType.itemStackable[itemID] &amp;&amp; !ItemType.itemIsNote[itemID]) {
			if (c.getItems().freeSlots() &lt; amount) {
				amount = c.getItems().freeSlots();
				if (c.getItems().getItemAmount(currency()) == price) {
					amount++;
				}
			}
		} else if (!c.getItems().playerHasItem(itemID)) {
			if (c.getItems().freeSlots() &lt; 1
					&amp;&amp; c.getItems().getItemAmount(currency()) != price * amount) {
				amount = 0;
			}
		}
		if (amount &lt; 1) {
			c.sendMessage(&quot;Not enough space in your inventory.&quot;);
			return false;
		}
		c.goldCoins -= getItemShopValue(itemID) * amount;
		if (c.goldCoins &lt;=0) {
		c.goldCoins = 0;
		}
		c.getItems().addItem(ShopHandler.ShopItems[c.myShopId][fromSlot] - 1,
				amount);
		ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] -= amount;
		ShopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
		if (ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
			if (c.myShopId == 1) {
				for (int p = 0; p &lt; 100; p++) {
					ShopHandler.ShopItems[c.myShopId][fromSlot + p] = ShopHandler.ShopItems[c.myShopId][fromSlot
							+ 1 + p];
					ShopHandler.ShopItemsAmount[c.myShopId][fromSlot + p] = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot
							+ 1 + p];
				}
			} else {
				ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] = 0;
			}
		}
		c.getItems().resetItems(3823);
		updatePlayerShop(c.myShopId);
		return true;
	}

	public boolean soldInStore(int itemID, int price) {
		for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
			for (int s = 0; s &lt; 27; s++) {
				if (itemID == ShopHandler.ShopItems[s][i] - 1
						|| ItemType.itemIsNote[itemID]
						&amp;&amp; itemID - 1 == ShopHandler.ShopItems[s][i] - 1) {
					if (getItemShopValue(itemID) &lt; price) {
						return true;
					}
				}
			}
		}
		return false;
	}

	public int currency() {
		return ShopHandler.currency[c.myShopId];
	}

	public boolean shopSellsItem(int itemID) {
		for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
			if (itemID == ShopHandler.ShopItems[c.myShopId][i] - 1) {
				return true;
			}
		}
		return false;
	}
}[/code]



Shophandler:

[code]package server.model.shops;

import server.Config;
import server.model.players.Client;
import server.model.players.PlayerHandler;

/**
 * Shops
 **/

public class ShopHandler {

	public static int MaxShops = 200;
	public static int MaxShopItems = 200;
	public static int MaxInShopItems = 20;
	public static int MaxSpecShowDelay = 100;
	public static int TotalShops = 0;
	public static int[] currency = new int[ShopHandler.MaxShops];
	public static int[][] ShopItems = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
	public static int[][] ShopItemsAmount = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
	public static int[] ShopItemsStandard = new int[ShopHandler.MaxShops];
	public static int[][] ShopItemsStandardAmount = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
	public static int[][] ShopItemsDelay = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
	public static int[] ShopSModifier = new int[ShopHandler.MaxShops];
	public static int[] ShopBModifier = new int[ShopHandler.MaxShops];
	public static int[][] ShopNpcs = new int[ShopHandler.MaxShops][20];
	public static String[] ShopName = new String[ShopHandler.MaxShops];

	public ShopHandler() {
		for (int i = 0; i &lt; ShopHandler.MaxShops; i++) {
			for (int j = 0; j &lt; ShopHandler.MaxShopItems; j++) {
				ResetItem(i, j);
				ShopHandler.ShopItemsStandardAmount[i][j] = 0;
			}
			ShopHandler.ShopItemsStandard[i] = 0;
			ShopHandler.ShopSModifier[i] = 0;
			ShopHandler.ShopBModifier[i] = 0;
			ShopHandler.ShopName[i] = &quot;&quot;;
			ShopHandler.currency[i] = 995;
		}
		ShopHandler.TotalShops = 0;
		Shop.init();
		// loadShops(&quot;shops.cfg&quot;);
	}

	public void process() {
			for (int i = 0; i &lt;= ShopHandler.TotalShops; i++) {
				for (int j = 0; j &lt; ShopHandler.MaxShopItems; j++) {
					if (ShopHandler.ShopItems[i][j] &gt; 0) {
						if (resupplyShopItems(i, j)) {
							for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
								if (PlayerHandler.getPlayers()[d] != null &amp;&amp; PlayerHandler.getPlayers()[d].isActive) {
									Client p = (Client) PlayerHandler.getPlayers()[d];
									if (p.isShopping == true &amp;&amp; p.myShopId == i) {
										p.updateShop = true;
										p.updateshop(i);
									}
								}
							}
						}
					}
				}
			}
	}

	public boolean resupplyShopItems(int i, int j) {
		ShopHandler.ShopItemsDelay[i][j]++;
		if (ShopHandler.ShopItemsDelay[i][j] &gt;= ShopHandler.MaxSpecShowDelay) {
			if (j &lt; ShopHandler.ShopItemsStandard[i]) {
				if (ShopHandler.ShopItemsAmount[i][j] &lt; ShopHandler.ShopItemsStandardAmount[i][j]) {
					ShopHandler.ShopItemsAmount[i][j]++;
					ShopHandler.ShopItemsDelay[i][j] = 0;
					return true;
				} else if (ShopHandler.ShopItemsAmount[i][j] &gt; ShopHandler.ShopItemsStandardAmount[i][j]) {
					ShopHandler.ShopItemsAmount[i][j]--;
					ShopHandler.ShopItemsDelay[i][j] = 0;
					return true;
				}
			} else {
				DiscountItem(i, j);
				ShopHandler.ShopItemsDelay[i][j] = 0;
				return true;
			}
		}
		return false;
	}

	public void DiscountItem(int ShopID, int ArrayID) {
		ShopHandler.ShopItemsAmount[ShopID][ArrayID]--;
		if (ShopHandler.ShopItemsAmount[ShopID][ArrayID] &lt; 1) {
			ShopHandler.ShopItemsAmount[ShopID][ArrayID] = 0;
			ResetItem(ShopID, ArrayID);
		}
	}

	public void ResetItem(int ShopID, int ArrayID) {
		ShopHandler.ShopItems[ShopID][ArrayID] = 0;
		ShopHandler.ShopItemsAmount[ShopID][ArrayID] = 0;
		ShopHandler.ShopItemsDelay[ShopID][ArrayID] = 0;
	}

}[/code]


thankssss</description>
    
    <lastBuildDate>Sat, 16 Feb 2013 17:36:10 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>They gave u the answer. What else is needed?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/6</link>
        <pubDate>Sat, 16 Feb 2013 17:36:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-6</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@cderty cderty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cderty">@cderty</a> wrote:</p>
          <blockquote>
              <p>bump please</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/5</link>
        <pubDate>Sat, 16 Feb 2013 16:49:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-5</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@Ddragonimp Ddragonimp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ddragonimp">@Ddragonimp</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">
Amount equals the number of free slots.

May try commenting that line out.
might have more issues, but that is the most obvious to me.</code></pre>
<p>Amount equals the number of free slots.</p>
<p>May try commenting that line out.<br>
might have more issues, but that is the most obvious to me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/4</link>
        <pubDate>Tue, 05 Feb 2013 19:59:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-4</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@cderty cderty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cderty">@cderty</a> wrote:</p>
          <blockquote>
              <p>cant exactly pinpoint what i need to change exactly, sorry this source confuses me on the simple things haha</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/3</link>
        <pubDate>Tue, 05 Feb 2013 18:56:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-3</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@Ddragonimp Ddragonimp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ddragonimp">@Ddragonimp</a> wrote:</p>
          <blockquote>
              <p>Your buy item statement.</p>
<pre><code class="lang-auto">public boolean buyItem(int itemID, int fromSlot, int amount) {
                c.getTradeAndDuel().declineAll();
                if (!shopSellsItem(itemID)) {
                        return false;
                }
                if (c.getItems().getItemAmount(itemID) + amount &gt; Integer.MAX_VALUE) {
                        amount = Integer.MAX_VALUE - c.getItems().getItemAmount(itemID);
                }
                if (amount &gt; ShopHandler.ShopItemsAmount[c.myShopId][fromSlot]) {
                        amount = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot];
                }
                int price = (int) (getItemShopValue(itemID));
                if (price &lt; 2) {
                        price = 2;
                }
                int amount1 = (int) Math.floor(c.getItems().getItemAmount(currency())
                                / price);
                if (getItemShopValue(itemID) &gt; c.goldCoins) {
                        c.sendMessage("You don't have enough "
                                        + ItemAssistant.getItemName(currency()).toLowerCase()
                                        + " to buy that many.");
                        amount = amount1;
                }
                if (amount &lt; 1
                                || ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
                        return false;
                }
                if (!ItemType.itemStackable[itemID] &amp;&amp; !ItemType.itemIsNote[itemID]) {
                        if (c.getItems().freeSlots() &lt; amount) {
                                amount = c.getItems().freeSlots();
                                if (c.getItems().getItemAmount(currency()) == price) {
                                        amount++;
                                }
                        }
                } else if (!c.getItems().playerHasItem(itemID)) {
                        if (c.getItems().freeSlots() &lt; 1
                                        &amp;&amp; c.getItems().getItemAmount(currency()) != price * amount) {
                                amount = 0;
                        }
                }
                if (amount &lt; 1) {
                        c.sendMessage("Not enough space in your inventory.");
                        return false;
                }
                c.goldCoins -= getItemShopValue(itemID) * amount;
                if (c.goldCoins &lt;=0) {
                c.goldCoins = 0;
                }
                c.getItems().addItem(ShopHandler.ShopItems[c.myShopId][fromSlot] - 1,
                                amount);
                ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] -= amount;
                ShopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
                if (ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
                        if (c.myShopId == 1) {
                                for (int p = 0; p &lt; 100; p++) {
                                        ShopHandler.ShopItems[c.myShopId][fromSlot + p] = ShopHandler.ShopItems[c.myShopId][fromSlot
                                                        + 1 + p];
                                        ShopHandler.ShopItemsAmount[c.myShopId][fromSlot + p] = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot
                                                        + 1 + p];
                                }
                        } else {
                                ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] = 0;
                        }
                }
                c.getItems().resetItems(3823);
                updatePlayerShop(c.myShopId);
                return true;
        }</code></pre>
<p>This here</p>
<pre><code class="lang-auto">                c.getItems().addItem(ShopHandler.ShopItems[c.myShopId][fromSlot] - 1,
                                amount);
                ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] -= amount;</code></pre>
<p>and this</p>
<pre><code class="lang-auto">                        if (c.getItems().freeSlots() &lt; amount) {
                                amount = c.getItems().freeSlots();
                                if (c.getItems().getItemAmount(currency()) == price) {
                                        amount++;
                                }
                        }</code></pre>
<p>Is what is causing you to purchase your entirely inventory worth.</p>
<p>then you’ll just need to go to the other cases and change the amount from 1, to 5, and from 5 to 10 for the other case same purchase statement only a different number in the amount.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/2</link>
        <pubDate>Tue, 05 Feb 2013 17:11:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-2</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
      <item>
        <title>Shop problems, buying and selling</title>
        <dc:creator><![CDATA[@cderty cderty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cderty">@cderty</a> wrote:</p>
          <blockquote>
              <p>Yeah i know its been done before, but everytime i search button it, it has no results :S</p>
<p>Anyway, when i buy 1 from shop it fills inventory, Buy 5+ buy 10 do not work. Far as i can see there is no bankx,2,5, etc files.</p>
<p>Also, when selling back to shop, cannot sell 5/10, but if you sell 1 it sells the item but does not remove it.</p>
<p>Here are the files <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Shop assistant</p>
<p>[code]package server.model.shops;</p>
<p>import server.Config;<br>
import server.Server;<br>
import server.model.items.ItemAssistant;<br>
import server.model.items.ItemDefinitions;<br>
import server.model.items.ItemType;<br>
import server.model.players.Client;<br>
import server.model.players.PlayerHandler;</p>
<p>public class ShopAssistant {</p>
<pre><code>private Client c;

public ShopAssistant(Client client) {
	c = client;
}

/**
 * Shops
 **/
public boolean isShopNpc(int npcType) {
	String name = Server.npcHandler.getNpcListName(npcType);
	if (npcType &lt; 1) {
		return false;
	}
	if (name.equalsIgnoreCase("shop keeper")
			|| name.equalsIgnoreCase("shop assistant")) {
		return true;
	}
	if (Shop.getShop(npcType) &gt; -1) {
		return true;
	}
	return false;
}

public void openNpcShop(int npcType) {
	String name = Server.npcHandler.getNpcListName(npcType);
	if (name.equalsIgnoreCase("shop keeper")
			|| name.equalsIgnoreCase("shop assistant")) {
		openShop(1);
	}
	if (Shop.getShop(npcType) &gt; -1) {
		openShop(Shop.getShop(npcType));
	}
}

public void openShop(int ShopID) {
	c.getActionSender().removeAllWindows();
	c.getItems().resetItems(3823);
	resetShop(ShopID);
	c.isShopping = true;
	c.myShopId = ShopID;
	c.getActionSender().sendFrame248(3824, 3822);
	c.getActionSender().sendFrame126(ShopHandler.ShopName[ShopID], 3901);
}

public void updatePlayerShop(int ShopID) {
	for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
		if (PlayerHandler.getPlayers()[d] != null
				&amp;&amp; PlayerHandler.getPlayers()[d].isActive) {
			Client t = (Client) PlayerHandler.getPlayers()[d];
			if (t.isShopping == true &amp;&amp; t.myShopId == ShopID) {
				t.getShops().resetShop(ShopID);
			}
			t.updateShop = true;
		}
	}
}

public void resetShop(int ShopID) {
	synchronized (c) {
		int TotalItems = 0;
		for (int i = 0; i &lt; ShopHandler.MaxShopItems; i++) {
			if (ShopHandler.ShopItems[ShopID][i] &gt; 0) {
				TotalItems++;
			}
		}
		if (TotalItems &gt; ShopHandler.MaxShopItems) {
			TotalItems = ShopHandler.MaxShopItems;
		}
		c.getOutStream().createFrameVarSizeWord(53);
		c.getOutStream().writeWord(3900);
		c.getOutStream().writeWord(TotalItems);
		int TotalCount = 0;
		for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
			if (ShopHandler.ShopItems[ShopID][i] &gt; 0
					|| i &lt;= ShopHandler.ShopItemsStandard[ShopID]) {
				int amount = ShopHandler.ShopItemsAmount[ShopID][i];
				if (amount &gt; 254) {
					c.getOutStream().writeByte(255);
					c.getOutStream().writeDWord_v2(amount);
				} else {
					c.getOutStream().writeByte(amount);
				}
				if (ShopHandler.ShopItems[ShopID][i] &gt; Config.ITEM_LIMIT
						|| ShopHandler.ShopItems[ShopID][i] &lt; 0) {
					ShopHandler.ShopItems[ShopID][i] = Config.ITEM_LIMIT;
				}
				c.getOutStream().writeWordBigEndianA(
						ShopHandler.ShopItems[ShopID][i]);
				TotalCount++;
			}
			if (TotalCount &gt; TotalItems) {
				break;
			}
		}
		c.getOutStream().endFrameVarSizeWord();
		c.flushOutStream();
	}
}

public int getItemShopValue(int itemId) {
		switch (itemId) {
</code></pre>
<p>case 4049:<br>
return 120;<br>
case 315:<br>
return 8;<br>
case 329:<br>
return 15;<br>
case 361:<br>
return 23;<br>
case 359:<br>
return 46;<br>
case 379:<br>
return 65;<br>
case 4053:<br>
return 415;<br>
//Iron<br>
case 1153:<br>
return 170;<br>
case 1115:<br>
return 170;<br>
case 1067:<br>
return 170;<br>
case 1191:<br>
return 170;<br>
//Mith<br>
case 1159:<br>
return 460;<br>
case 1121:<br>
return 460;<br>
case 1071:<br>
return 460;<br>
case 1197:<br>
return 460;<br>
//Addy<br>
case 1161:<br>
return 1160;<br>
case 1123:<br>
return 1160;<br>
case 1073:<br>
return 1160;<br>
case 1199:<br>
return 1160;<br>
//Rune<br>
case 1163:<br>
return 3150;<br>
case 1127:<br>
return 3150;<br>
case 1079:<br>
return 3150;<br>
case 1201:<br>
return 3150;<br>
//Green Dhide<br>
case 1135:<br>
return 785;<br>
case 1099:<br>
return 785;<br>
case 1065:<br>
return 785;<br>
//Blue Dhide<br>
case 2499:<br>
return 1655;<br>
case 2493:<br>
return 1655;<br>
case 2487:<br>
return 1655;<br>
//Red Dhide<br>
case 2501:<br>
return 2445;<br>
case 2495:<br>
return 2445;<br>
case 2489:<br>
return 2445;<br>
//Black Dhide<br>
case 2503:<br>
return 4645;<br>
case 2497:<br>
return 4645;<br>
case 2491:<br>
return 4645;<br>
//Ammys<br>
case 1725:<br>
return 1450;<br>
//Boots<br>
case 3105:<br>
return 460;<br>
//Capes<br>
case 1007:<br>
return 275;<br>
//Weapons</p>
<p>//Scims<br>
case 1321:<br>
return 45;<br>
case 1323:<br>
return 340;<br>
case 1329:<br>
return 789;<br>
case 1331:<br>
return 1650;<br>
case 1333:<br>
return 2650;<br>
case 4587:<br>
return 4300;<br>
//Whip<br>
case 4151:<br>
return 6750;<br>
//Bows<br>
case 841:<br>
return 45;<br>
case 843:<br>
return 235;<br>
case 849:<br>
return 567;<br>
case 853:<br>
return 1198;<br>
case 857:<br>
return 2396;<br>
//Arrows<br>
case 882:<br>
return 4;<br>
case 884:<br>
return 9;<br>
case 888:<br>
return 17;<br>
case 890:<br>
return 29;<br>
case 892:<br>
return 48;<br>
}<br>
return 0;<br>
}</p>
<pre><code>public String price(int price) {
	if (price &gt;= 1000000) {
		return " (" + price / 1000000 + " million)";
	} else if (price &gt;= 1000 &amp;&amp; price &lt; 1000000) {
		return " (" + price / 1000 + "K)";
	} else {
		return "";
	}
}

/**
 * Buy item from shop (Shop Price)
 **/
 
public void buyFromShopPrice(int removeId, int removeSlot) {
int ShopValue = getItemShopValue(removeId);

	ShopValue *= currency() == 995 ? 1.10 : 1;
	if (ShopValue &lt; 2) {
		ShopValue = 2;
	}
	String ShopAdd = "";
	if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
		ShopAdd = " (" + ShopValue / 1000 + "K)";
	} else if (ShopValue &gt;= 1000000) {
		ShopAdd = " (" + ShopValue / 1000000 + " million)";
	}
	c.sendMessage(ItemAssistant.getItemName(removeId)
			+ ": currently costs " + ShopValue +" gold coins.");
}

/**
 * Sell item to shop (Shop Price)
 **/
public void sellToShopPrice(int removeId, int removeSlot) {
	for (int i : Config.UNSELLABLE_ITEMS) {
		if (i == removeId) {
			c.sendMessage("You can't sell "
					+ ItemAssistant.getItemName(removeId).toLowerCase()
					+ ".");
			return;
		}
	}
	if (ShopHandler.ShopSModifier[c.myShopId] == 3) {
		c.sendMessage("You can't sell items to this shop.");
		return;
	}
	boolean IsIn = false;
	if (ShopHandler.ShopSModifier[c.myShopId] &gt; 1) {
		for (int j = 0; j &lt;= ShopHandler.ShopItemsStandard[c.myShopId]; j++) {
			if (removeId == ShopHandler.ShopItems[c.myShopId][j] - 1) {
				IsIn = true;
				break;
			}
		}
	} else {
		IsIn = true;
		for (int i : Config.UNTRADEABLE_ITEMS) {
			if (i == removeId) {
				IsIn = false;
			}
		}
	}
	if (!IsIn) {
		c.sendMessage("You can't sell "
				+ ItemAssistant.getItemName(removeId).toLowerCase()
				+ " to this store.");
		return;
	}
	int ShopValue = getItemShopValue(removeId);
	String ShopAdd = "";
	if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
		ShopAdd = " (" + ShopValue / 1000 + "K)";
	} else if (ShopValue &gt;= 1000000) {
		ShopAdd = " (" + ShopValue / 1000000 + " million)";
	}
	c.sendMessage(ItemAssistant.getItemName(removeId)
			+ ": shop will buy for " + ShopValue + " "
			+ ItemAssistant.getItemName(currency()).toLowerCase() + ""
			+ ShopAdd + ".");
}

public boolean sellItem(int itemID, int fromSlot, int amount) {
	c.getTradeAndDuel().declineAll();
	for (int i : Config.UNDROPPABLE_ITEMS) {
		if (i == itemID) {
			c.sendMessage("You can't sell "
					+ ItemAssistant.getItemName(itemID).toLowerCase() + ".");
			return false;
		}
	}
	if (ShopHandler.ShopSModifier[c.myShopId] == 3) {
		c.sendMessage("You can't sell items to this shop.");
		return false;
	}
	if (!c.getItems().playerHasItem(itemID, amount)) {
		amount = c.getItems().getItemAmount(itemID);
		if (amount &lt; 1) {
			return false;
		}
	}
	boolean IsIn = false;
	if (amount &lt; 1 || itemID != c.playerItems[fromSlot] - 1) {
		return false;
	}
	if (ShopHandler.ShopSModifier[c.myShopId] &gt; 1) {
		for (int i = 0; i &lt;= ShopHandler.ShopItemsStandard[c.myShopId]; i++) {
			if (itemID == ShopHandler.ShopItems[c.myShopId][i] - 1) {
				IsIn = true;
				break;
			}
		}
	} else {
		IsIn = true;
		for (int i : Config.UNTRADEABLE_ITEMS) {
			if (i == itemID) {
				IsIn = false;
			}
		}
	}
	if (!IsIn) {
		c.sendMessage("You can't sell "
				+ ItemAssistant.getItemName(itemID).toLowerCase()
				+ " to this store.");
		return false;
	}
	if (amount &gt; c.playerItemsN[fromSlot]
			&amp;&amp; (ItemType.itemIsNote[(c.playerItems[fromSlot] - 1)] || ItemType.itemStackable[(c.playerItems[fromSlot] - 1)])) {
		amount = c.playerItemsN[fromSlot];
	} else if (amount &gt; c.getItems().getItemAmount(itemID)
			&amp;&amp; !ItemType.itemIsNote[(c.playerItems[fromSlot] - 1)]
			&amp;&amp; !ItemType.itemStackable[(c.playerItems[fromSlot] - 1)]) {
		amount = c.getItems().getItemAmount(itemID);
	}
	int price = amount * getItemShopValue(itemID);
	if (c.getItems().freeSlots() &gt; 0
			|| c.getItems().playerHasItem(currency())
			|| c.getItems().playerHasExactOrLessThan(itemID, amount)) {
		c.goldCoins -= (amount);
		c.getItems().addItem(currency(), price);
		addShopItem(itemID, amount);
	} else {
		c.sendMessage("You don't have enough space in your inventory.");
		return false;
	}
	c.getItems().resetItems(3823);
	updatePlayerShop(c.myShopId);
	return true;
}

public boolean addShopItem(int itemID, int amount) {
	boolean Added = false;
	if (amount &lt;= 0) {
		return false;
	}
	if (ItemType.itemIsNote[itemID] == true) {
		itemID = c.getItems().getUnnotedItem(itemID);
	}
	for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
		if (ShopHandler.ShopItems[c.myShopId][i] - 1 == itemID) {
			ShopHandler.ShopItemsAmount[c.myShopId][i] += amount;
			Added = true;
		}
	}
	if (Added == false) {
		for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
			if (ShopHandler.ShopItems[c.myShopId][i] == 0) {
				ShopHandler.ShopItems[c.myShopId][i] = itemID + 1;
				ShopHandler.ShopItemsAmount[c.myShopId][i] = amount;
				ShopHandler.ShopItemsDelay[c.myShopId][i] = 0;
				break;
			}
		}
	}
	return true;
}

public boolean buyItem(int itemID, int fromSlot, int amount) {
	c.getTradeAndDuel().declineAll();
	if (!shopSellsItem(itemID)) {
		return false;
	}
	if (c.getItems().getItemAmount(itemID) + amount &gt; Integer.MAX_VALUE) {
		amount = Integer.MAX_VALUE - c.getItems().getItemAmount(itemID);
	}
	if (amount &gt; ShopHandler.ShopItemsAmount[c.myShopId][fromSlot]) {
		amount = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot];
	}
	int price = (int) (getItemShopValue(itemID));
	if (price &lt; 2) {
		price = 2;
	}
	int amount1 = (int) Math.floor(c.getItems().getItemAmount(currency())
			/ price);
	if (getItemShopValue(itemID) &gt; c.goldCoins) {
		c.sendMessage("You don't have enough "
				+ ItemAssistant.getItemName(currency()).toLowerCase()
				+ " to buy that many.");
		amount = amount1;
	}
	if (amount &lt; 1
			|| ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
		return false;
	}
	if (!ItemType.itemStackable[itemID] &amp;&amp; !ItemType.itemIsNote[itemID]) {
		if (c.getItems().freeSlots() &lt; amount) {
			amount = c.getItems().freeSlots();
			if (c.getItems().getItemAmount(currency()) == price) {
				amount++;
			}
		}
	} else if (!c.getItems().playerHasItem(itemID)) {
		if (c.getItems().freeSlots() &lt; 1
				&amp;&amp; c.getItems().getItemAmount(currency()) != price * amount) {
			amount = 0;
		}
	}
	if (amount &lt; 1) {
		c.sendMessage("Not enough space in your inventory.");
		return false;
	}
	c.goldCoins -= getItemShopValue(itemID) * amount;
	if (c.goldCoins &lt;=0) {
	c.goldCoins = 0;
	}
	c.getItems().addItem(ShopHandler.ShopItems[c.myShopId][fromSlot] - 1,
			amount);
	ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] -= amount;
	ShopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
	if (ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] == 0) {
		if (c.myShopId == 1) {
			for (int p = 0; p &lt; 100; p++) {
				ShopHandler.ShopItems[c.myShopId][fromSlot + p] = ShopHandler.ShopItems[c.myShopId][fromSlot
						+ 1 + p];
				ShopHandler.ShopItemsAmount[c.myShopId][fromSlot + p] = ShopHandler.ShopItemsAmount[c.myShopId][fromSlot
						+ 1 + p];
			}
		} else {
			ShopHandler.ShopItemsAmount[c.myShopId][fromSlot] = 0;
		}
	}
	c.getItems().resetItems(3823);
	updatePlayerShop(c.myShopId);
	return true;
}

public boolean soldInStore(int itemID, int price) {
	for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
		for (int s = 0; s &lt; 27; s++) {
			if (itemID == ShopHandler.ShopItems[s][i] - 1
					|| ItemType.itemIsNote[itemID]
					&amp;&amp; itemID - 1 == ShopHandler.ShopItems[s][i] - 1) {
				if (getItemShopValue(itemID) &lt; price) {
					return true;
				}
			}
		}
	}
	return false;
}

public int currency() {
	return ShopHandler.currency[c.myShopId];
}

public boolean shopSellsItem(int itemID) {
	for (int i = 0; i &lt; ShopHandler.ShopItems.length; i++) {
		if (itemID == ShopHandler.ShopItems[c.myShopId][i] - 1) {
			return true;
		}
	}
	return false;
}
</code></pre>
<p>}[/code]</p>
<p>Shophandler:</p>
<p>[code]package server.model.shops;</p>
<p>import server.Config;<br>
import server.model.players.Client;<br>
import server.model.players.PlayerHandler;</p>
<p>/**</p>
<ul>
<li>Shops<br>
**/</li>
</ul>
<p>public class ShopHandler {</p>
<pre><code>public static int MaxShops = 200;
public static int MaxShopItems = 200;
public static int MaxInShopItems = 20;
public static int MaxSpecShowDelay = 100;
public static int TotalShops = 0;
public static int[] currency = new int[ShopHandler.MaxShops];
public static int[][] ShopItems = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
public static int[][] ShopItemsAmount = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
public static int[] ShopItemsStandard = new int[ShopHandler.MaxShops];
public static int[][] ShopItemsStandardAmount = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
public static int[][] ShopItemsDelay = new int[ShopHandler.MaxShops][ShopHandler.MaxShopItems];
public static int[] ShopSModifier = new int[ShopHandler.MaxShops];
public static int[] ShopBModifier = new int[ShopHandler.MaxShops];
public static int[][] ShopNpcs = new int[ShopHandler.MaxShops][20];
public static String[] ShopName = new String[ShopHandler.MaxShops];

public ShopHandler() {
	for (int i = 0; i &lt; ShopHandler.MaxShops; i++) {
		for (int j = 0; j &lt; ShopHandler.MaxShopItems; j++) {
			ResetItem(i, j);
			ShopHandler.ShopItemsStandardAmount[i][j] = 0;
		}
		ShopHandler.ShopItemsStandard[i] = 0;
		ShopHandler.ShopSModifier[i] = 0;
		ShopHandler.ShopBModifier[i] = 0;
		ShopHandler.ShopName[i] = "";
		ShopHandler.currency[i] = 995;
	}
	ShopHandler.TotalShops = 0;
	Shop.init();
	// loadShops("shops.cfg");
}

public void process() {
		for (int i = 0; i &lt;= ShopHandler.TotalShops; i++) {
			for (int j = 0; j &lt; ShopHandler.MaxShopItems; j++) {
				if (ShopHandler.ShopItems[i][j] &gt; 0) {
					if (resupplyShopItems(i, j)) {
						for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
							if (PlayerHandler.getPlayers()[d] != null &amp;&amp; PlayerHandler.getPlayers()[d].isActive) {
								Client p = (Client) PlayerHandler.getPlayers()[d];
								if (p.isShopping == true &amp;&amp; p.myShopId == i) {
									p.updateShop = true;
									p.updateshop(i);
								}
							}
						}
					}
				}
			}
		}
}

public boolean resupplyShopItems(int i, int j) {
	ShopHandler.ShopItemsDelay[i][j]++;
	if (ShopHandler.ShopItemsDelay[i][j] &gt;= ShopHandler.MaxSpecShowDelay) {
		if (j &lt; ShopHandler.ShopItemsStandard[i]) {
			if (ShopHandler.ShopItemsAmount[i][j] &lt; ShopHandler.ShopItemsStandardAmount[i][j]) {
				ShopHandler.ShopItemsAmount[i][j]++;
				ShopHandler.ShopItemsDelay[i][j] = 0;
				return true;
			} else if (ShopHandler.ShopItemsAmount[i][j] &gt; ShopHandler.ShopItemsStandardAmount[i][j]) {
				ShopHandler.ShopItemsAmount[i][j]--;
				ShopHandler.ShopItemsDelay[i][j] = 0;
				return true;
			}
		} else {
			DiscountItem(i, j);
			ShopHandler.ShopItemsDelay[i][j] = 0;
			return true;
		}
	}
	return false;
}

public void DiscountItem(int ShopID, int ArrayID) {
	ShopHandler.ShopItemsAmount[ShopID][ArrayID]--;
	if (ShopHandler.ShopItemsAmount[ShopID][ArrayID] &lt; 1) {
		ShopHandler.ShopItemsAmount[ShopID][ArrayID] = 0;
		ResetItem(ShopID, ArrayID);
	}
}

public void ResetItem(int ShopID, int ArrayID) {
	ShopHandler.ShopItems[ShopID][ArrayID] = 0;
	ShopHandler.ShopItemsAmount[ShopID][ArrayID] = 0;
	ShopHandler.ShopItemsDelay[ShopID][ArrayID] = 0;
}
</code></pre>
<p>}[/code]</p>
<p>thankssss</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669/1</link>
        <pubDate>Tue, 05 Feb 2013 14:21:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-481669-1</guid>
        <source url="https://forum.moparisthebest.com/t/shop-problems-buying-and-selling/481669.rss">Shop problems, buying and selling</source>
      </item>
  </channel>
</rss>
