<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Webclient Help Will Pay If Necessary!</title>
    <link>https://forum.moparisthebest.com/t/webclient-help-will-pay-if-necessary/358731</link>
    <description>So Basically everything on my webclient works perfectly, In every way, Except one.

It downloads the cache, but it DOES NOT UNZIP it.

so basically here are my codes:

Class44 Method67:
[CODE]private Class44 method67(int i, String s, String s1, int j, byte byte0, int k)
          {
            byte abyte0[] = null;
            int l = 5;
            try
            {
              if(aClass14Array970[0] != null)
              {
                abyte0 = aClass14Array970[0].method233(true, i);
              }
              if(abyte0 == null)
                                                      {
                                                        method13(15, (byte)4, &quot;Downloading Cache&quot;);
downloadcache(&quot;http://www.fileden.com/files/2010/6/19/2892012//barragepkzcache.zip&quot;, &quot;barragepkzcache.zip&quot;, &quot;&quot;, &quot;barragepkzcache&quot;);                      
}
if(aClass14Array970[0] != null)
              {
                abyte0 = aClass14Array970[0].method233(true, i);
              }
            }
            catch(Exception exception) { }
            if(abyte0 != null);
            if(abyte0 != null)
            {
              Class44 class44 = new Class44(44820, abyte0);
              return class44;
            }
            int i1 = 0;
            do
            {
              if(abyte0 != null)
              {
                break;
              }
              String s2 = &quot;Unknown error&quot;;
              method13(k, (byte)4, &quot;Client updated - please reload client&quot;);
              //method13(k, (byte)4, (new StringBuilder()).append(&quot;Requesting &quot;).append(s).toString());
              Object obj = null;
              try
              {
                int j1 = 0;
                DataInputStream datainputstream = method132((new StringBuilder()).append(s1).append(j).toString());
                byte abyte1[] = new byte[6];
                datainputstream.readFully(abyte1, 0, 6);
                Class30_Sub2_Sub2 class30_sub2_sub2 = new Class30_Sub2_Sub2(abyte1, 891);
                class30_sub2_sub2.anInt1406 = 3;
                int l1 = class30_sub2_sub2.method412() + 6;
                int i2 = 6;
                abyte0 = new byte[l1];
                for(int j2 = 0; j2 &lt; 6; j2++)
                {
                  abyte0[j2] = abyte1[j2];
                }

                while(i2 &lt; l1)
                {
                  int k2 = l1 - i2;
                  if(k2 &gt; 1000)
                  {
                    k2 = 1000;
                  }
                  int l2 = datainputstream.read(abyte0, i2, k2);
                  if(l2 &lt; 0)
                  {
                    s2 = (new StringBuilder()).append(&quot;Length error: &quot;).append(i2).append(&quot;/&quot;).append(l1).toString();
                    throw new IOException(&quot;EOF&quot;);
                  }
                  i2 += l2;
                  int i3 = (i2 * 100) / l1;
                  if(i3 != j1)
                  {
                    method13(k, (byte)4, (new StringBuilder()).append(&quot;Loading &quot;).append(s).append(&quot; - &quot;).append(i3).append(&quot;%&quot;).toString());
                  }
                  j1 = i3;
                }
                datainputstream.close();
                try
                {
                  if(aClass14Array970[0] != null)
                  {
                    aClass14Array970[0].method234(abyte0.length, abyte0, (byte)2, i);
                  }
                }
                catch(Exception exception3)
                {
                  aClass14Array970[0] = null;
                }
              }
              catch(IOException ioexception)
              {
                if(s2.equals(&quot;Unknown error&quot;))
                {
                  s2 = &quot;Connection error&quot;;
                }
                abyte0 = null;
              }
              catch(NullPointerException nullpointerexception)
              {
                s2 = &quot;Null error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                {
                  return null;
                }
              }
              catch(ArrayIndexOutOfBoundsException arrayindexoutofboundsexception)
              {
                s2 = &quot;Bounds error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                {
                  return null;
                }
              }
              catch(Exception exception1)
              {
                s2 = &quot;Unexpected error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                {
                  return null;
                }
              }
              if(abyte0 == null)
              {
                for(int k1 = l; k1 &gt; 0; k1--)
                {
                  if(i1 &gt;= 3)
                  {
                    method13(k, (byte)4, &quot;Game updated - please reload page&quot;);
                    k1 = 10;
                  } else
                  {
                    method13(k, (byte)4, (new StringBuilder()).append(s2).append(&quot; - Retrying in &quot;).append(k1).toString());
                  }
                  try
                  {
                    Thread.sleep(1000L);
                  }
                  catch(Exception exception2) { }
                }

                l *= 2;
                if(l &gt; 60)
                {
                  l = 60;
                }
                aBoolean872 = !aBoolean872;
              }
            } while(true);
            Class44 class44_1 = new Class44(44820, abyte0);
            if(byte0 != -41)
            {
              throw new NullPointerException();
            } else
            {
              return class44_1;
            }
}[/CODE]

Unzipping Method:
[CODE]    public String name;
    public String dir;

public void downloadcache(String url, String name1, String dir1, String type)
    {
        dir = dir1;
        name = name1;
        try
        {
            URLConnection connection = (new URL(url)).openConnection();
            String f[] = url.split(&quot;/&quot;);
            File file = new File(f[f.length - 1]);
            int length = connection.getContentLength();
            InputStream instream = connection.getInputStream();
            try{new File(signlink.findcachedir()+dir).mkdir();}catch(Exception e){}
            FileOutputStream outstream = new FileOutputStream(signlink.findcachedir()+dir+file);
            int size = 0;
            int copy;
            byte[] buffer = new byte[4096];
            while((copy = instream.read(buffer)) != -1)
            {
                outstream.write(buffer, 0, copy);
                size+= copy;
                int percentage = (int)(((double)size / (double)length) * 100D);
                method13(percentage, (byte)4, &quot;Downloading Cache - &quot;+percentage+&quot;%&quot;);
            }
            if(length != size)
            {
                instream.close();
                outstream.close();
            } else
            {
                method13(5, (byte)4, &quot;Unpacking files...&quot;);
                instream.close();
                outstream.close();
                unZipFile();
                deleteFile();
                method13(10, (byte)4, &quot;Unpacking was complete&quot;);
            }
        }
        catch(Exception e)
        {
            System.err.println(&quot;Error connecting to server.&quot;);
            e.printStackTrace();
        }
    }
    public void writeStream(InputStream In, OutputStream Out) throws IOException
    {
        byte Buffer[] = new byte[4096];
        int Len;
        while((Len = In.read(Buffer)) &gt;= 0)
        {
            Out.write(Buffer, 0, Len);
        }
        In.close();
        Out.close();
    }

    public void unZipFile()
    {
        try
        {
            ZipFile ZipFile = new ZipFile(signlink.findcachedir()+dir+name);
            for(Enumeration Entries = ZipFile.entries(); Entries.hasMoreElements();)
            {
                ZipEntry Entry = (ZipEntry)Entries.nextElement();
                if(Entry.isDirectory())
                {
                    (new File(signlink.findcachedir()+dir+Entry.getName())).mkdir();
                } else
                {
                    writeStream(ZipFile.getInputStream(Entry), new BufferedOutputStream(new FileOutputStream(signlink.findcachedir()+dir+Entry.getName())));
                }
            }
            ZipFile.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public void deleteFile()
    {
        try
        {
            File file = new File(signlink.findcachedir()+dir+name);
            file.delete();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }[/CODE]

And after the cache is fully downloaded this is what I get:
[img]http://i921.photobucket.com/albums/ad56/XTCBunny/not.png[/img]



And this is what it SHOULD be:
[img]http://i921.photobucket.com/albums/ad56/XTCBunny/should.png[/img]


That&#39;s what I get after MANUALLY installing myself...</description>
    
    <lastBuildDate>Sun, 05 Sep 2010 04:30:04 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/webclient-help-will-pay-if-necessary/358731.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Webclient Help Will Pay If Necessary!</title>
        <dc:creator><![CDATA[@xx_DMT_xx xx DMT xx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx_dmt_xx">@xx_DMT_xx</a> wrote:</p>
          <blockquote>
              <p>So Basically everything on my webclient works perfectly, In every way, Except one.</p>
<p>It downloads the cache, but it DOES NOT UNZIP it.</p>
<p>so basically here are my codes:</p>
<p>Class44 Method67:</p>
<p>[CODE]private Class44 method67(int i, String s, String s1, int j, byte byte0, int k)<br>
{<br>
byte abyte0[] = null;<br>
int l = 5;<br>
try<br>
{<br>
if(aClass14Array970[0] != null)<br>
{<br>
abyte0 = aClass14Array970[0].method233(true, i);<br>
}<br>
if(abyte0 == null)<br>
{<br>
method13(15, (byte)4, “Downloading Cache”);<br>
downloadcache(“<a href="http://www.fileden.com/files/2010/6/19/2892012//barragepkzcache.zip" rel="nofollow noopener">http://www.fileden.com/files/2010/6/19/2892012//barragepkzcache.zip</a>”, “barragepkzcache.zip”, “”, “barragepkzcache”);<br>
}<br>
if(aClass14Array970[0] != null)<br>
{<br>
abyte0 = aClass14Array970[0].method233(true, i);<br>
}<br>
}<br>
catch(Exception exception) { }<br>
if(abyte0 != null);<br>
if(abyte0 != null)<br>
{<br>
Class44 class44 = new Class44(44820, abyte0);<br>
return class44;<br>
}<br>
int i1 = 0;<br>
do<br>
{<br>
if(abyte0 != null)<br>
{<br>
break;<br>
}<br>
String s2 = “Unknown error”;<br>
method13(k, (byte)4, “Client updated - please reload client”);<br>
//method13(k, (byte)4, (new StringBuilder()).append("Requesting ").append(s).toString());<br>
Object obj = null;<br>
try<br>
{<br>
int j1 = 0;<br>
DataInputStream datainputstream = method132((new StringBuilder()).append(s1).append(j).toString());<br>
byte abyte1[] = new byte[6];<br>
datainputstream.readFully(abyte1, 0, 6);<br>
Class30_Sub2_Sub2 class30_sub2_sub2 = new Class30_Sub2_Sub2(abyte1, 891);<br>
class30_sub2_sub2.anInt1406 = 3;<br>
int l1 = class30_sub2_sub2.method412() + 6;<br>
int i2 = 6;<br>
abyte0 = new byte[l1];<br>
for(int j2 = 0; j2 &lt; 6; j2++)<br>
{<br>
abyte0[j2] = abyte1[j2];<br>
}</p>
<pre><code>            while(i2 &lt; l1)
            {
              int k2 = l1 - i2;
              if(k2 &gt; 1000)
              {
                k2 = 1000;
              }
              int l2 = datainputstream.read(abyte0, i2, k2);
              if(l2 &lt; 0)
              {
                s2 = (new StringBuilder()).append("Length error: ").append(i2).append("/").append(l1).toString();
                throw new IOException("EOF");
              }
              i2 += l2;
              int i3 = (i2 * 100) / l1;
              if(i3 != j1)
              {
                method13(k, (byte)4, (new StringBuilder()).append("Loading ").append(s).append(" - ").append(i3).append("%").toString());
              }
              j1 = i3;
            }
            datainputstream.close();
            try
            {
              if(aClass14Array970[0] != null)
              {
                aClass14Array970[0].method234(abyte0.length, abyte0, (byte)2, i);
              }
            }
            catch(Exception exception3)
            {
              aClass14Array970[0] = null;
            }
          }
          catch(IOException ioexception)
          {
            if(s2.equals("Unknown error"))
            {
              s2 = "Connection error";
            }
            abyte0 = null;
          }
          catch(NullPointerException nullpointerexception)
          {
            s2 = "Null error";
            abyte0 = null;
            if(!signlink.reporterror)
            {
              return null;
            }
          }
          catch(ArrayIndexOutOfBoundsException arrayindexoutofboundsexception)
          {
            s2 = "Bounds error";
            abyte0 = null;
            if(!signlink.reporterror)
            {
              return null;
            }
          }
          catch(Exception exception1)
          {
            s2 = "Unexpected error";
            abyte0 = null;
            if(!signlink.reporterror)
            {
              return null;
            }
          }
          if(abyte0 == null)
          {
            for(int k1 = l; k1 &gt; 0; k1--)
            {
              if(i1 &gt;= 3)
              {
                method13(k, (byte)4, "Game updated - please reload page");
                k1 = 10;
              } else
              {
                method13(k, (byte)4, (new StringBuilder()).append(s2).append(" - Retrying in ").append(k1).toString());
              }
              try
              {
                Thread.sleep(1000L);
              }
              catch(Exception exception2) { }
            }

            l *= 2;
            if(l &gt; 60)
            {
              l = 60;
            }
            aBoolean872 = !aBoolean872;
          }
        } while(true);
        Class44 class44_1 = new Class44(44820, abyte0);
        if(byte0 != -41)
        {
          throw new NullPointerException();
        } else
        {
          return class44_1;
        }
</code></pre>
<p>}[/CODE]</p>
<p>Unzipping Method:</p>
<p>[CODE]    public String name;<br>
public String dir;</p>
<p>public void downloadcache(String url, String name1, String dir1, String type)<br>
{<br>
dir = dir1;<br>
name = name1;<br>
try<br>
{<br>
URLConnection connection = (new URL(url)).openConnection();<br>
String f[] = url.split("/");<br>
File file = new File(f[f.length - 1]);<br>
int length = connection.getContentLength();<br>
InputStream instream = connection.getInputStream();<br>
try{new File(signlink.findcachedir()+dir).mkdir();}catch(Exception e){}<br>
FileOutputStream outstream = new FileOutputStream(signlink.findcachedir()+dir+file);<br>
int size = 0;<br>
int copy;<br>
byte[] buffer = new byte[4096];<br>
while((copy = instream.read(buffer)) != -1)<br>
{<br>
outstream.write(buffer, 0, copy);<br>
size+= copy;<br>
int percentage = (int)(((double)size / (double)length) * 100D);<br>
method13(percentage, (byte)4, “Downloading Cache - “+percentage+”%”);<br>
}<br>
if(length != size)<br>
{<br>
instream.close();<br>
outstream.close();<br>
} else<br>
{<br>
method13(5, (byte)4, “Unpacking files…”);<br>
instream.close();<br>
outstream.close();<br>
unZipFile();<br>
deleteFile();<br>
method13(10, (byte)4, “Unpacking was complete”);<br>
}<br>
}<br>
catch(Exception e)<br>
{<br>
System.err.println(“Error connecting to server.”);<br>
e.printStackTrace();<br>
}<br>
}<br>
public void writeStream(InputStream In, OutputStream Out) throws IOException<br>
{<br>
byte Buffer[] = new byte[4096];<br>
int Len;<br>
while((Len = In.read(Buffer)) &gt;= 0)<br>
{<br>
Out.write(Buffer, 0, Len);<br>
}<br>
In.close();<br>
Out.close();<br>
}</p>
<pre><code>public void unZipFile()
{
    try
    {
        ZipFile ZipFile = new ZipFile(signlink.findcachedir()+dir+name);
        for(Enumeration Entries = ZipFile.entries(); Entries.hasMoreElements();)
        {
            ZipEntry Entry = (ZipEntry)Entries.nextElement();
            if(Entry.isDirectory())
            {
                (new File(signlink.findcachedir()+dir+Entry.getName())).mkdir();
            } else
            {
                writeStream(ZipFile.getInputStream(Entry), new BufferedOutputStream(new FileOutputStream(signlink.findcachedir()+dir+Entry.getName())));
            }
        }
        ZipFile.close();
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
}

public void deleteFile()
{
    try
    {
        File file = new File(signlink.findcachedir()+dir+name);
        file.delete();
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
}[/CODE]
</code></pre>
<p>And after the cache is fully downloaded this is what I get:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i921.photobucket.com/albums/ad56/XTCBunny/not.png" title="not.png" rel="nofollow noopener"><img src="http://i921.photobucket.com/albums/ad56/XTCBunny/not.png" alt width="651" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">not.png</span><span class="informations">897×688</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>And this is what it SHOULD be:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i921.photobucket.com/albums/ad56/XTCBunny/should.png" title="should.png" rel="nofollow noopener"><img src="http://i921.photobucket.com/albums/ad56/XTCBunny/should.png" alt width="651" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">should.png</span><span class="informations">897×688</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>That’s what I get after MANUALLY installing myself…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/webclient-help-will-pay-if-necessary/358731/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/webclient-help-will-pay-if-necessary/358731/1</link>
        <pubDate>Sun, 05 Sep 2010 04:30:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358731-1</guid>
        <source url="https://forum.moparisthebest.com/t/webclient-help-will-pay-if-necessary/358731.rss">Webclient Help Will Pay If Necessary!</source>
      </item>
  </channel>
</rss>
