<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ItemContainer - Supports every RS container</title>
    <link>https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185</link>
    <description>This should work for any container system you need. It shouldn&#39;t have any dupes, it&#39;s been tested extensively. I&#39;ve been careful to add breaks to shifting containers (like banks), so you don&#39;t loop through every slot for each addition/subtraction.

Let me know if you find it useful.

[CODE]
/**
 * An (@Item) container
 * 
 * @author Michael Sasse
 *
 */
public abstract class ItemContainer {
	
	/**
	 * The amount of items (@Item)s container can hold
	 */
	private final int size;
	
	/**
	 * The type of container this is
	 */
	private final ContainerTypes type;
	
	/**
	 * The (@Item)s this container is holding
	 */
	private Item[] items;
	
	/**
	 * Will this container have gaps between (@Item)s
	 */
	private final boolean shift;
	
	/**
	 * Whether this container will accept noted (@Item)s, or change them to un-noted
	 */
	private final boolean acceptNote;
	
	/**
	 * The amount of elements this container has in it
	 */
	private int contains = 0;
	
	/**
	 * The types of containers
	 */
	public enum ContainerTypes {
		/**
		 * (@Item)s will never stack
		 */
		NEVER_STACK,
		/**
		 * Stack-able (@Item)s with the same id will stack
		 */
		STACK,
		/**
		 * Every (@Item) with the same id must stack
		 */
		ALWAYS_STACK
	}
	
	/**
	 * Updates the container view for the player
	 */
	public abstract void update();
	
	/**
	 * Actions to take when this container has been filled
	 */
	public abstract void onFillContainer();
	
	/**
	 * Actions to take when this stack has reached it&#39;s limit
	 */
	public abstract void onMaxStack();
	
	/**
	 * Is this item allowed to have an amount equal to zero
	 * @param id		
	 * 				the (@Item) id
	 * @return	
	 * 				if the (@Item) amount is allowed to be zero
	 */
	public abstract boolean allowZero(int id);
	
	/**
	 * Creates a new ItemContainer object
	 * @param size
	 * 				the number of (@Item)s this container can hold
	 * @param type
	 * 				the type of container
	 * @param shift
	 * 				will this container allow gaps between (@Item)s
	 */
    public ItemContainer(int size, ContainerTypes type, boolean shift, boolean acceptNote) {
    	this.size = size;
    	this.type = type;
    	this.shift = shift;
    	this.acceptNote = acceptNote;
    	items = new Item[size];
    }
    
    public int add(int id, int amount) {
    	return add(new Item(id, amount), true);
    }
    
    public int add(int id, int amount, boolean update) {
    	return add(new Item(id, amount), update);
    }
    
    public int add(Item item) {
    	return add(item, true);
    }
    
    public void add(Item[] items, boolean update) {
    	for (Item i : items) {
    		add(i, false);
    	}
    	
    	if (update) {
    		update();
    	}
    }
    
    public int insert(int id, int amount) {
    	return insert(new Item(id, amount));
    }
    
    public int insert(Item i) {
    	return add(i, false);
    }
    
    public int add(Item item, boolean update) {
    	if (item.getDefinition().isNote() &amp;&amp; !acceptNote) {
    		item.unNote();
    	}
    	
    	final int id = item.getId();
    	final boolean stackable = isStackable(id);
    	
    	int empty = -1;
    	int amount = item.getAmount();
    	int am = 0;
    	boolean added = false;
    	
    	if (amount == 0) {
    		return 0;
    	}
    	
    	for (int i = 0; i &lt; size; i++) {
    		if (items[i] == null) {
    			if (stackable) {
    				if (empty == -1) {
    					empty = i;
    				}
    				if (shift) {
    					break;
    				}
    			} else {
    				items[i] = new Item(id, 1);
    				amount--;
    				am += 1;
    				contains++;
    				if (amount == 0) {
    					break;
    				}
    				if (contains == size) {
    					onFillContainer();
    					break;
    				}
    			}
    		} else if (type != ContainerTypes.NEVER_STACK) {
    			if (stackable &amp;&amp; items[i].getId() == id) {
    				int newAmount = items[i].getAmount() + amount;
    				
    				if (newAmount &lt; 0) {
    					am += Integer.MAX_VALUE - items[i].getAmount();
    					items[i].setAmount(Integer.MAX_VALUE);
    					onMaxStack();
    				} else {
    					am += amount;
    					items[i].setAmount(newAmount);
    				}
    				added = true;
    				break;
    			}
    		}
    	}
    	
    	if (empty != -1 &amp;&amp; !added) {
    		items[empty] = new Item(id, amount);
    		am += amount;
    		contains++;
    	}
    	
    	if (update) {
    		update();
    	}
    	
    	return am;
    }
    
    public int remove(Item item) {
    	return remove(item, true);
    }
    
    public int remove(int id, int amount, boolean update) {
    	return remove(new Item(id, amount), update);
    }
    
    public int remove(int id, int amount) {
    	return remove(new Item(id, amount), true);
    }
    
    public void remove(Item items[], boolean update) {
    	for (Item i : items) {
    		remove(i, false);
    	}
    	
    	if (update) {
    		update();
    	}
    }
    
    public int remove(Item item, boolean update) {
    	final int id = item.getId();
    	final boolean stackable = isStackable(id);
    	int removed = 0;
    	int amount = item.getAmount();
    	
    	for (int i = 0; i &lt; size; i++) {
    		if (items[i] == null) {
    			if (shift) {
    				return 0;
    			}
    		} else {
    			if (items[i].getId() == id) {
    				if (stackable) {
    					if (items[i].getAmount() &lt;= amount) {
    						removed += items[i].getAmount();
    						amount -= items[i].getAmount();
	    					if (!allowZero(id)) {
	    						items[i] = null;
	    						if (shift) {
	    							shift(i);
	    						}
	    						contains--;
	    					} else {
	    						items[i].setAmount(0);
	    					}
    					} else {
    						removed += amount;
    						items[i].remove(amount);
    						amount = 0;
    					}
    					break;
    				} else {
    					items[i] = null;
    					contains--;
    					amount--;
    					removed++;
    					if (amount == 0) {
    						break;
    					}
    				}
    			}
    		}
    	}
    	
    	if (!stackable &amp;&amp; shift &amp;&amp; removed &gt; 0) {
    		shift();
    	}
    	
    	if (update) {
    		update();
    	}
    	
    	return removed;
    }
    
    public boolean hasSpaceFor(final Item item) {
		boolean stackable = isStackable(item.getId());
		int amount = item.getAmount();

		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (stackable) {
					return true;
				} else {
					amount--;
					if (amount == 0) {
						return true;
					}
				}
				continue;
			}

			if (items[i].getId() == item.getId() &amp;&amp; stackable) {
				int newAmount = items[i].getAmount() + item.getAmount();
				if (newAmount &lt; 0) {
					return false;
				} else {
					return true;
				}
			}
		}

		return false;
	}
    
    public int getItemAmount(final int id) {
		int amount = 0;
		
		boolean stackable = isStackable(id);

		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (shift) {
					break;
				}
				continue;
			}

			if (items[i].getId() == id) {
				amount += items[i].getAmount();
				if (stackable) {
					return amount;
				}
			}
		}

		return amount;
	}
    
    public int hasItems(Item[] delete) {
		main: for (int i = 0; i &lt; delete.length; i++) {
			if (delete[i] == null) {
				continue;
			}

			boolean stackable = isStackable(delete[i].getId());

			for (int j = 0; j &lt; items.length; j++) {
				if (items[j] == null) {
					continue;
				}

				if (items[j].getId() == delete[i].getId()) {
					if (stackable) {
						if (items[j].getAmount() &gt;= delete[i].getAmount()) {
							delete[i] = null;
							continue main;
						} else {
							return delete[i].getId();
						}
					} else {
						delete[i].remove(1);
						if (delete[i].getAmount() &lt;= 0) {
							delete[i] = null;
							continue main;
						}
					}
				}
			}
		}

		for (int i = 0; i &lt; delete.length; i++) {
			if (delete[i] != null) {
				return delete[i].getId();
			}
		}

		return -1;
	}
    
    public boolean hasSpaceOnRemove(Item remove, Item add) {
		Item[] itemsCopy = new Item[items.length];
		final int c = contains;
		
		for (int i = 0; i &lt; items.length; i++) {
			if (items[i] == null) {
				continue;
			}

			itemsCopy[i] = new Item(items[i]);
		}

		remove(remove, false);

		if (hasSpaceFor(add)) {
			items = itemsCopy;
			return true;
		}

		items = itemsCopy;
		contains = c;
		return false;
	}
    
    public boolean hasSpaceFor(Item[] check) {
    	Item[] copy = items.clone();
    	final int c = contains;
		int count = check.length;

		main: for (int i = 0; i &lt; check.length; i++) {
			if (check[i] == null) {
				count--;
				continue;
			}

			final int id = check[i].getId();
			final boolean stackable = isStackable(id);

			int first = -1;

			for (int j = 0; j &lt; copy.length; j++) {
				if (copy[j] == null) {
					if (!stackable) {
						if (check[i].getAmount() == 1) {
							count--;
							copy[j] = check[i];
						} else {
							copy[j] = check[i];
							check[i].setAmount(check[i].getAmount() - 1);
							if (check[i].getAmount() &lt;= 1) {
								count--;
								continue main;
							}
						}
					} else {
						if (first == -1) {
							first = i;
						}
					}
				} else {
					if (stackable &amp;&amp; copy[j].getId() == id) {
						int newAmount = copy[j].getAmount() + check[i].getAmount();
						if (newAmount &lt; 0) {
							return false;
						} else {
							count--;
							continue main;
						}
					}
				}
			}

			if (first != -1) {
				copy[first] = check[i];
				count--;
			}
		}
		
		contains = c;
		return count &lt;= 0;
    }
    
    public boolean hasSpaceFor(Object[] check) {
    	Item[] copy = items.clone();
    	final int c = contains;
		int count = check.length;

		main: for (int i = 0; i &lt; check.length; i++) {
			if (check[i] == null) {
				count--;
				continue;
			}
			
			Item item = (Item) check[i];

			final int id = item.getId();
			final boolean stackable = isStackable(id);

			int first = -1;

			for (int j = 0; j &lt; copy.length; j++) {
				if (copy[j] == null) {
					if (!stackable) {
						if (item.getAmount() == 1) {
							count--;
							copy[j] = item;
						} else {
							copy[j] = item;
							item.setAmount(item.getAmount() - 1);
							if (item.getAmount() &lt;= 1) {
								count--;
								continue main;
							}
						}
					} else {
						if (first == -1) {
							first = i;
						}
					}
				} else {
					if (stackable &amp;&amp; copy[j].getId() == id) {
						int newAmount = copy[j].getAmount() + item.getAmount();
						if (newAmount &lt; 0) {
							return false;
						} else {
							count--;
							continue main;
						}
					}
				}
			}

			if (first != -1) {
				copy[first] = item;
				count--;
			}
		}

		contains = c;
		return count &lt;= 0;
    }
   
    public void shift() {
    	List&lt;Item&gt; all = new ArrayList&lt;Item&gt;();
		
		for (int i = 0; i &lt; size; i++) {
			if (items[i] != null) {
				all.add(items[i]);
			}
		}
		
		items = new Item[size];
		
		int index = 0;
		for (Item i : all) {
			items[index] = i;
			index++;
		}
    }
    
    public void shift(int slot) {
    	for (int i = slot + 1; i &lt; size; i++) {
    		if (items[i] == null) {
                break;
            } else {
            	items[i - 1] = items[i];
                items[i] = null;
            }
    	}
    }
    
    public boolean hasItemId(int id) {
    	return hasItemAmount(new Item(id, 1));
    }
    
    public boolean hasItemAmount(Item item) {
		boolean stackable = isStackable(item.getId());

		while (item.getAmount() &gt; 0) {
			int slot = getItemSlot(item.getId());

			if (slot == -1) {
				return false;
			}

			Item get = items[slot];

			if (stackable) {
				if (get.getAmount() &gt;= item.getAmount()
						|| get.getAmount() == item.getAmount()) {
					return true;
				}

				return false;

			} else {
				item.setAmount(item.getAmount() - 1);
			}
		}

		return true;
	}
    
    public void clear() {
    	items = new Item[size];
    	update();
    	contains = 0;
    }
    
    public int getFreeSlots() {
    	return size - contains;	
	}
    
    public int getItemSlot(final int id) {
		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (shift) {
					break;
				}
				continue;
			}

			if (items[i].getId() == id) {
				return i;
			}
		}

		return -1;
	}
    
    public int getSlotId(int slot) {
    	if (items[slot] == null) {
    		return 0;
    	}
    	
    	return items[slot].getId();
    }
    
    public int getSlotAmount(int slot) {
    	if (items[slot] == null) {
    		return 0;
    	}
    	
    	return items[slot].getAmount();
    }
    
    public void setId(int slot, int id) {
    	if (items[slot] == null) {
    		return;
    	}
    	
    	items[slot].setId(id);
    	update();
    }
    
    public void clear(int slot) {
    	items[slot] = null;
    	update();
    	contains--;
    }
    
    public void swap(final int to, final int from) {
		if ((items[to] == null || items[from] == null) &amp;&amp; shift) {
            return;
        }

        Item item = items[to];
        items[to] = items[from];
        items[from] = item;

        update();
    }
    
    public void setSlotOnLogin(int slot, Item i) {
    	items[slot] = i;
    	contains++;
    }
    
    public boolean isStackable(int id) {
    	return type == ContainerTypes.ALWAYS_STACK 
    			|| Item.getDefinition(id).isStackable() &amp;&amp; type == ContainerTypes.STACK;
    }
    
    public boolean slotHasItem(int slot) {
    	return items[slot] != null;
    }
    
    public boolean slotContainsItem(int slot, int id) {
    	if (items[slot] == null) {
    		return false;
    	}
    	
    	if (items[slot].getId() != id) {
    		return false;
    	}
    	
    	return true;
    }

	public int getSize() {
		return size;
	}

	public ContainerTypes getType() {
		return type;
	}

	public Item[] getItems() {
		return items;
	}

	public boolean isShift() {
		return shift;
	}

	public int getContains() {
		return contains;
	}
}
[/CODE]

[CODE]
public class Item {

    private int id;
    private int amount;

    public Item(int id, int amount) {
        this.id = id;
        this.amount = amount;
    }

    public Item(Item item) {
        id = item.getId();
        amount = item.getAmount();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public void add(Item item) {
        amount += item.getAmount();
    }

    public void add(int amount) {
        this.amount += amount;
    }

    public void remove(Item item) {
        amount -= item.getAmount();
    }

    public void remove(int amount) {
        this.amount -= amount;
    }
    
    @Override
	public String toString() {
		return &quot;Item [id=&quot; + id + &quot;, amount=&quot; + amount + &quot;]&quot;;
	}

	@Override
    public boolean equals(Object obj) {
        if (obj instanceof Item) {
            Item item = (Item) obj;
            return item.getId() == id;
        }
        return false;
    }

    public void note() {
        int noteId = getDefinition().getNoteId();

        if (noteId == -1) {
            return;
        }

        id = noteId;
    }

    public void unNote() {
        int noteId = getDefinition().getNoteId();

        if (noteId == -1) {
            return;
        }

        id = noteId;
    }
}
[/CODE]</description>
    
    <lastBuildDate>Wed, 28 Aug 2013 18:05:53 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ItemContainer - Supports every RS container</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>[quote=“Primadude, post:3, topic:527185”][quote author=wildskiller link=topic=645932.msg4355708#msg4355708 date=1377530101]<br>
What does shift() do? To me it just looks like you’re adding the items to a list and then back into the array.<br>
[/quote]</p>
<p>I’d imagine it’s for banking; when an item is removed from the bank container, the whole container shifts so there are empty item slots.[/quote]<br>
In my container I have a method to refresh, where if there are any items with an amount of 0 or less, then it’s turned into null.</p>
<p>Mikey Sasse, make this container supportive or degradables. It’s not hard if you make a boolean inside of the item class called degradable and use it in the container class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/4</link>
        <pubDate>Wed, 28 Aug 2013 18:05:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527185-4</guid>
        <source url="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185.rss">ItemContainer - Supports every RS container</source>
      </item>
      <item>
        <title>ItemContainer - Supports every RS container</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="527185">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/wildskiller/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> wildskiller:</div>
<blockquote>
<p>What does shift() do? To me it just looks like you’re adding the items to a list and then back into the array.</p>
</blockquote>
</aside>
<p>I’d imagine it’s for banking; when an item is removed from the bank container, the whole container shifts so there are empty item slots.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/3</link>
        <pubDate>Wed, 28 Aug 2013 00:06:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527185-3</guid>
        <source url="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185.rss">ItemContainer - Supports every RS container</source>
      </item>
      <item>
        <title>ItemContainer - Supports every RS container</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>What does shift() do? To me it just looks like you’re adding the items to a list and then back into the array.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/2</link>
        <pubDate>Mon, 26 Aug 2013 15:15:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527185-2</guid>
        <source url="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185.rss">ItemContainer - Supports every RS container</source>
      </item>
      <item>
        <title>ItemContainer - Supports every RS container</title>
        <dc:creator><![CDATA[@Mikey_Sasse Mikey Sasse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mikey_sasse">@Mikey_Sasse</a> wrote:</p>
          <blockquote>
              <p>This should work for any container system you need. It shouldn’t have any dupes, it’s been tested extensively. I’ve been careful to add breaks to shifting containers (like banks), so you don’t loop through every slot for each addition/subtraction.</p>
<p>Let me know if you find it useful.</p>
<pre><code class="lang-auto">/**
 * An (@Item) container
 * 
 * @author Michael Sasse
 *
 */
public abstract class ItemContainer {
	
	/**
	 * The amount of items (@Item)s container can hold
	 */
	private final int size;
	
	/**
	 * The type of container this is
	 */
	private final ContainerTypes type;
	
	/**
	 * The (@Item)s this container is holding
	 */
	private Item[] items;
	
	/**
	 * Will this container have gaps between (@Item)s
	 */
	private final boolean shift;
	
	/**
	 * Whether this container will accept noted (@Item)s, or change them to un-noted
	 */
	private final boolean acceptNote;
	
	/**
	 * The amount of elements this container has in it
	 */
	private int contains = 0;
	
	/**
	 * The types of containers
	 */
	public enum ContainerTypes {
		/**
		 * (@Item)s will never stack
		 */
		NEVER_STACK,
		/**
		 * Stack-able (@Item)s with the same id will stack
		 */
		STACK,
		/**
		 * Every (@Item) with the same id must stack
		 */
		ALWAYS_STACK
	}
	
	/**
	 * Updates the container view for the player
	 */
	public abstract void update();
	
	/**
	 * Actions to take when this container has been filled
	 */
	public abstract void onFillContainer();
	
	/**
	 * Actions to take when this stack has reached it's limit
	 */
	public abstract void onMaxStack();
	
	/**
	 * Is this item allowed to have an amount equal to zero
	 * @param id		
	 * 				the (@Item) id
	 * @return	
	 * 				if the (@Item) amount is allowed to be zero
	 */
	public abstract boolean allowZero(int id);
	
	/**
	 * Creates a new ItemContainer object
	 * @param size
	 * 				the number of (@Item)s this container can hold
	 * @param type
	 * 				the type of container
	 * @param shift
	 * 				will this container allow gaps between (@Item)s
	 */
    public ItemContainer(int size, ContainerTypes type, boolean shift, boolean acceptNote) {
    	this.size = size;
    	this.type = type;
    	this.shift = shift;
    	this.acceptNote = acceptNote;
    	items = new Item[size];
    }
    
    public int add(int id, int amount) {
    	return add(new Item(id, amount), true);
    }
    
    public int add(int id, int amount, boolean update) {
    	return add(new Item(id, amount), update);
    }
    
    public int add(Item item) {
    	return add(item, true);
    }
    
    public void add(Item[] items, boolean update) {
    	for (Item i : items) {
    		add(i, false);
    	}
    	
    	if (update) {
    		update();
    	}
    }
    
    public int insert(int id, int amount) {
    	return insert(new Item(id, amount));
    }
    
    public int insert(Item i) {
    	return add(i, false);
    }
    
    public int add(Item item, boolean update) {
    	if (item.getDefinition().isNote() &amp;&amp; !acceptNote) {
    		item.unNote();
    	}
    	
    	final int id = item.getId();
    	final boolean stackable = isStackable(id);
    	
    	int empty = -1;
    	int amount = item.getAmount();
    	int am = 0;
    	boolean added = false;
    	
    	if (amount == 0) {
    		return 0;
    	}
    	
    	for (int i = 0; i &lt; size; i++) {
    		if (items[i] == null) {
    			if (stackable) {
    				if (empty == -1) {
    					empty = i;
    				}
    				if (shift) {
    					break;
    				}
    			} else {
    				items[i] = new Item(id, 1);
    				amount--;
    				am += 1;
    				contains++;
    				if (amount == 0) {
    					break;
    				}
    				if (contains == size) {
    					onFillContainer();
    					break;
    				}
    			}
    		} else if (type != ContainerTypes.NEVER_STACK) {
    			if (stackable &amp;&amp; items[i].getId() == id) {
    				int newAmount = items[i].getAmount() + amount;
    				
    				if (newAmount &lt; 0) {
    					am += Integer.MAX_VALUE - items[i].getAmount();
    					items[i].setAmount(Integer.MAX_VALUE);
    					onMaxStack();
    				} else {
    					am += amount;
    					items[i].setAmount(newAmount);
    				}
    				added = true;
    				break;
    			}
    		}
    	}
    	
    	if (empty != -1 &amp;&amp; !added) {
    		items[empty] = new Item(id, amount);
    		am += amount;
    		contains++;
    	}
    	
    	if (update) {
    		update();
    	}
    	
    	return am;
    }
    
    public int remove(Item item) {
    	return remove(item, true);
    }
    
    public int remove(int id, int amount, boolean update) {
    	return remove(new Item(id, amount), update);
    }
    
    public int remove(int id, int amount) {
    	return remove(new Item(id, amount), true);
    }
    
    public void remove(Item items[], boolean update) {
    	for (Item i : items) {
    		remove(i, false);
    	}
    	
    	if (update) {
    		update();
    	}
    }
    
    public int remove(Item item, boolean update) {
    	final int id = item.getId();
    	final boolean stackable = isStackable(id);
    	int removed = 0;
    	int amount = item.getAmount();
    	
    	for (int i = 0; i &lt; size; i++) {
    		if (items[i] == null) {
    			if (shift) {
    				return 0;
    			}
    		} else {
    			if (items[i].getId() == id) {
    				if (stackable) {
    					if (items[i].getAmount() &lt;= amount) {
    						removed += items[i].getAmount();
    						amount -= items[i].getAmount();
	    					if (!allowZero(id)) {
	    						items[i] = null;
	    						if (shift) {
	    							shift(i);
	    						}
	    						contains--;
	    					} else {
	    						items[i].setAmount(0);
	    					}
    					} else {
    						removed += amount;
    						items[i].remove(amount);
    						amount = 0;
    					}
    					break;
    				} else {
    					items[i] = null;
    					contains--;
    					amount--;
    					removed++;
    					if (amount == 0) {
    						break;
    					}
    				}
    			}
    		}
    	}
    	
    	if (!stackable &amp;&amp; shift &amp;&amp; removed &gt; 0) {
    		shift();
    	}
    	
    	if (update) {
    		update();
    	}
    	
    	return removed;
    }
    
    public boolean hasSpaceFor(final Item item) {
		boolean stackable = isStackable(item.getId());
		int amount = item.getAmount();

		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (stackable) {
					return true;
				} else {
					amount--;
					if (amount == 0) {
						return true;
					}
				}
				continue;
			}

			if (items[i].getId() == item.getId() &amp;&amp; stackable) {
				int newAmount = items[i].getAmount() + item.getAmount();
				if (newAmount &lt; 0) {
					return false;
				} else {
					return true;
				}
			}
		}

		return false;
	}
    
    public int getItemAmount(final int id) {
		int amount = 0;
		
		boolean stackable = isStackable(id);

		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (shift) {
					break;
				}
				continue;
			}

			if (items[i].getId() == id) {
				amount += items[i].getAmount();
				if (stackable) {
					return amount;
				}
			}
		}

		return amount;
	}
    
    public int hasItems(Item[] delete) {
		main: for (int i = 0; i &lt; delete.length; i++) {
			if (delete[i] == null) {
				continue;
			}

			boolean stackable = isStackable(delete[i].getId());

			for (int j = 0; j &lt; items.length; j++) {
				if (items[j] == null) {
					continue;
				}

				if (items[j].getId() == delete[i].getId()) {
					if (stackable) {
						if (items[j].getAmount() &gt;= delete[i].getAmount()) {
							delete[i] = null;
							continue main;
						} else {
							return delete[i].getId();
						}
					} else {
						delete[i].remove(1);
						if (delete[i].getAmount() &lt;= 0) {
							delete[i] = null;
							continue main;
						}
					}
				}
			}
		}

		for (int i = 0; i &lt; delete.length; i++) {
			if (delete[i] != null) {
				return delete[i].getId();
			}
		}

		return -1;
	}
    
    public boolean hasSpaceOnRemove(Item remove, Item add) {
		Item[] itemsCopy = new Item[items.length];
		final int c = contains;
		
		for (int i = 0; i &lt; items.length; i++) {
			if (items[i] == null) {
				continue;
			}

			itemsCopy[i] = new Item(items[i]);
		}

		remove(remove, false);

		if (hasSpaceFor(add)) {
			items = itemsCopy;
			return true;
		}

		items = itemsCopy;
		contains = c;
		return false;
	}
    
    public boolean hasSpaceFor(Item[] check) {
    	Item[] copy = items.clone();
    	final int c = contains;
		int count = check.length;

		main: for (int i = 0; i &lt; check.length; i++) {
			if (check[i] == null) {
				count--;
				continue;
			}

			final int id = check[i].getId();
			final boolean stackable = isStackable(id);

			int first = -1;

			for (int j = 0; j &lt; copy.length; j++) {
				if (copy[j] == null) {
					if (!stackable) {
						if (check[i].getAmount() == 1) {
							count--;
							copy[j] = check[i];
						} else {
							copy[j] = check[i];
							check[i].setAmount(check[i].getAmount() - 1);
							if (check[i].getAmount() &lt;= 1) {
								count--;
								continue main;
							}
						}
					} else {
						if (first == -1) {
							first = i;
						}
					}
				} else {
					if (stackable &amp;&amp; copy[j].getId() == id) {
						int newAmount = copy[j].getAmount() + check[i].getAmount();
						if (newAmount &lt; 0) {
							return false;
						} else {
							count--;
							continue main;
						}
					}
				}
			}

			if (first != -1) {
				copy[first] = check[i];
				count--;
			}
		}
		
		contains = c;
		return count &lt;= 0;
    }
    
    public boolean hasSpaceFor(Object[] check) {
    	Item[] copy = items.clone();
    	final int c = contains;
		int count = check.length;

		main: for (int i = 0; i &lt; check.length; i++) {
			if (check[i] == null) {
				count--;
				continue;
			}
			
			Item item = (Item) check[i];

			final int id = item.getId();
			final boolean stackable = isStackable(id);

			int first = -1;

			for (int j = 0; j &lt; copy.length; j++) {
				if (copy[j] == null) {
					if (!stackable) {
						if (item.getAmount() == 1) {
							count--;
							copy[j] = item;
						} else {
							copy[j] = item;
							item.setAmount(item.getAmount() - 1);
							if (item.getAmount() &lt;= 1) {
								count--;
								continue main;
							}
						}
					} else {
						if (first == -1) {
							first = i;
						}
					}
				} else {
					if (stackable &amp;&amp; copy[j].getId() == id) {
						int newAmount = copy[j].getAmount() + item.getAmount();
						if (newAmount &lt; 0) {
							return false;
						} else {
							count--;
							continue main;
						}
					}
				}
			}

			if (first != -1) {
				copy[first] = item;
				count--;
			}
		}

		contains = c;
		return count &lt;= 0;
    }
   
    public void shift() {
    	List&lt;Item&gt; all = new ArrayList&lt;Item&gt;();
		
		for (int i = 0; i &lt; size; i++) {
			if (items[i] != null) {
				all.add(items[i]);
			}
		}
		
		items = new Item[size];
		
		int index = 0;
		for (Item i : all) {
			items[index] = i;
			index++;
		}
    }
    
    public void shift(int slot) {
    	for (int i = slot + 1; i &lt; size; i++) {
    		if (items[i] == null) {
                break;
            } else {
            	items[i - 1] = items[i];
                items[i] = null;
            }
    	}
    }
    
    public boolean hasItemId(int id) {
    	return hasItemAmount(new Item(id, 1));
    }
    
    public boolean hasItemAmount(Item item) {
		boolean stackable = isStackable(item.getId());

		while (item.getAmount() &gt; 0) {
			int slot = getItemSlot(item.getId());

			if (slot == -1) {
				return false;
			}

			Item get = items[slot];

			if (stackable) {
				if (get.getAmount() &gt;= item.getAmount()
						|| get.getAmount() == item.getAmount()) {
					return true;
				}

				return false;

			} else {
				item.setAmount(item.getAmount() - 1);
			}
		}

		return true;
	}
    
    public void clear() {
    	items = new Item[size];
    	update();
    	contains = 0;
    }
    
    public int getFreeSlots() {
    	return size - contains;	
	}
    
    public int getItemSlot(final int id) {
		for (int i = 0; i &lt; size; i++) {
			if (items[i] == null) {
				if (shift) {
					break;
				}
				continue;
			}

			if (items[i].getId() == id) {
				return i;
			}
		}

		return -1;
	}
    
    public int getSlotId(int slot) {
    	if (items[slot] == null) {
    		return 0;
    	}
    	
    	return items[slot].getId();
    }
    
    public int getSlotAmount(int slot) {
    	if (items[slot] == null) {
    		return 0;
    	}
    	
    	return items[slot].getAmount();
    }
    
    public void setId(int slot, int id) {
    	if (items[slot] == null) {
    		return;
    	}
    	
    	items[slot].setId(id);
    	update();
    }
    
    public void clear(int slot) {
    	items[slot] = null;
    	update();
    	contains--;
    }
    
    public void swap(final int to, final int from) {
		if ((items[to] == null || items[from] == null) &amp;&amp; shift) {
            return;
        }

        Item item = items[to];
        items[to] = items[from];
        items[from] = item;

        update();
    }
    
    public void setSlotOnLogin(int slot, Item i) {
    	items[slot] = i;
    	contains++;
    }
    
    public boolean isStackable(int id) {
    	return type == ContainerTypes.ALWAYS_STACK 
    			|| Item.getDefinition(id).isStackable() &amp;&amp; type == ContainerTypes.STACK;
    }
    
    public boolean slotHasItem(int slot) {
    	return items[slot] != null;
    }
    
    public boolean slotContainsItem(int slot, int id) {
    	if (items[slot] == null) {
    		return false;
    	}
    	
    	if (items[slot].getId() != id) {
    		return false;
    	}
    	
    	return true;
    }

	public int getSize() {
		return size;
	}

	public ContainerTypes getType() {
		return type;
	}

	public Item[] getItems() {
		return items;
	}

	public boolean isShift() {
		return shift;
	}

	public int getContains() {
		return contains;
	}
}</code></pre>
<pre><code class="lang-auto">public class Item {

    private int id;
    private int amount;

    public Item(int id, int amount) {
        this.id = id;
        this.amount = amount;
    }

    public Item(Item item) {
        id = item.getId();
        amount = item.getAmount();
    }

    public int getId() {
        return id;
    }

    public void setId(int id) {
        this.id = id;
    }

    public int getAmount() {
        return amount;
    }

    public void setAmount(int amount) {
        this.amount = amount;
    }

    public void add(Item item) {
        amount += item.getAmount();
    }

    public void add(int amount) {
        this.amount += amount;
    }

    public void remove(Item item) {
        amount -= item.getAmount();
    }

    public void remove(int amount) {
        this.amount -= amount;
    }
    
    @Override
	public String toString() {
		return "Item [id=" + id + ", amount=" + amount + "]";
	}

	@Override
    public boolean equals(Object obj) {
        if (obj instanceof Item) {
            Item item = (Item) obj;
            return item.getId() == id;
        }
        return false;
    }

    public void note() {
        int noteId = getDefinition().getNoteId();

        if (noteId == -1) {
            return;
        }

        id = noteId;
    }

    public void unNote() {
        int noteId = getDefinition().getNoteId();

        if (noteId == -1) {
            return;
        }

        id = noteId;
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185/1</link>
        <pubDate>Sun, 04 Aug 2013 07:15:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527185-1</guid>
        <source url="https://forum.moparisthebest.com/t/itemcontainer-supports-every-rs-container/527185.rss">ItemContainer - Supports every RS container</source>
      </item>
  </channel>
</rss>
