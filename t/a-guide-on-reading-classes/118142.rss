<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A guide on reading classes</title>
    <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142</link>
    <description>Reading a Class

This &quot;tutorial&quot; isn&#39;t strictly Java; however, it is about the Java class format. Specifically, this is on parsing classes quickly. So, let&#39;s look at the class format:

Class{
int magic
unsigned short minor
unsigned short major
unsigned short constant_pool_length
constant[] constant_pool
unsigned short accessflags
unsigned short this_class_index
unsigned short superclass_index
unsigned short interface_count
unsigned short[] interfaces
unsigned short field_count
field[] fields
unsigned short method_count
method[] methods
unsigned short attribute_count
attribute[] class_attributes
}
The &quot;magic&quot; number is 0xCAFEBABE. Please note, constant_pool[0] is reserved. So, really, you are reading constant_pool_length - 1 constants.
Now, the constant format:

constant{
byte opcode
byte[] bytes
}
The classes such as ConstantUtf8, ConstantLong, etc. are completely unnecessary. Quick constant reading is reading the opcode and assigning the bytes according to the opcode.

Now, let&#39;s skip on to the field and method format, which is the exact same:
field_or_method{
unsigned short access_flags
unsigned short name_index
unsigned short signature_index
unsigned short attribute_count
attribute[] attributes
}
Non-abstract methods all have a Code attribute. If it doesn&#39;t, you have a bug or an invalid class.

Now the thing shared by fields, methods, and classes: attributes
attribute{
unsigned short name_index
int info_length
byte[] info
}
Also, I want to specify on the contents of info for the attribute Code because... that&#39;s the method code and you&#39;ll probably want to edit it:
The first four bytes of info are two unsigned shorts that can be ignored without problem if you are going for speed. Yes, you can still dump it this way.
The next four bytes of info combine to make an int: the number of instructions within this code. 

And finally, the instruction
instruction{
byte opcode
byte[] operand_info
}

There. I have just supplied enough information to read the whole class. No function is lost in this way of reading a class, although it is a bit minimalist, and it is quick. Now, everyone who hasn&#39;t already, go make your own bytecode libraries. It takes all of one hour or less to do so.</description>
    
    <lastBuildDate>Sun, 01 Jul 2007 08:01:37 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@KryptoN KryptoN_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/krypton">@KryptoN</a> wrote:</p>
          <blockquote>
              <p>[quote=“pplsuqbawlz, post:8, topic:118142”][quote author=Silver Lining link=topic=167451.msg1559252#msg1559252 date=1183252948]<br>
Then please explain why 1: reading a short is how all bytecode libs that I’ve seen load a u2 and 2: why, then, no exception is thrown when I call ClassLoader.define(clazz.getName(), clazz.toByteArray(), 0, clazz.toByteArray().length)? I’m not saying you’re wrong, nor am I saying I am right. What I’m getting at is that my way works.<br>
[/quote]</p>
<p>Yours would work but it’s invalid. It’s incorrect because things such as “version_minor” and “version_major”… only sun can define major versions but we can define minor versions from 0-65535! A JAVA SHORT has a range of -32768 to 32767!</p>
<p>32767 &lt; 65535…</p>
<p>That is an inherit truth of 1st grade mathematics… So therefore a short is incapable of holding the value and allowing it to be manipulated… Yes both a short and u2 have 16 bits of information but only 15 bits of short are for numerical value, and u2’s uses all 16 bits for value.</p>
<p>The 16th bit of a short is used for negation, “positive or negative modifier!” basically if bit[0] == 1 then it’s negative… otherwise it’s positive, but without this 16th quantifier the range of the number cannot reach 65535…</p>
<p>I dont know how many times I can explain the same concept before you get it so I hope you understand now why it is FATALLY flawed.</p>
<p>/fail[/quote]</p>
<p>The 16th bit is NOT used for negation, as Java uses two’s compliment, not excess-n. However, if you store the value as a char, it is unsigned. You might also choose to store it as an int, but AND the value read with 0xffff (65535).</p>
<p>/l2number</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/12</link>
        <pubDate>Sun, 01 Jul 2007 08:01:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-12</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Yz85Racer Yz85Racer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yz85racer">@Yz85Racer</a> wrote:</p>
          <blockquote>
              <p>[quote=“lawl, post:1, topic:118468”][quote author=pplsuqbawlz link=topic=167451.msg1559424#msg1559424 date=1183258492]<br>
Very true, but int works fine, and anyway, the specifications say to use anything with the DataInput interface and that means “int readUnsignedShort()” so you should have known to use int anyway :)…<br>
[/quote]<br>
fuck the specification<br>
fight the man[/quote]<br>
Lol. Haha.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/11</link>
        <pubDate>Sun, 01 Jul 2007 05:26:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-11</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <p>Very true, but int works fine, and anyway, the specifications say to use anything with the DataInput interface and that means “int readUnsignedShort()” so you should have known to use int anyway :)…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/10</link>
        <pubDate>Sun, 01 Jul 2007 02:54:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-10</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Silver_Lining Silver Lining]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silver_lining">@Silver_Lining</a> wrote:</p>
          <blockquote>
              <p>Mmmk, thanks for clarifying. Shall I put an ‘unsigned’ in front of every ‘short’? It is kinda annoying that Java has no ‘unsigned’ keyword.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/9</link>
        <pubDate>Sun, 01 Jul 2007 02:47:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-9</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="7" data-topic="118142">
<div class="title">
<div class="quote-controls"></div>
 Silver Lining:</div>
<blockquote>
<p>Then please explain why 1: reading a short is how all bytecode libs that I’ve seen load a u2 and 2: why, then, no exception is thrown when I call ClassLoader.define(clazz.getName(), clazz.toByteArray(), 0, clazz.toByteArray().length)? I’m not saying you’re wrong, nor am I saying I am right. What I’m getting at is that my way works.</p>
</blockquote>
</aside>
<p>Yours would work but it’s invalid. It’s incorrect because things such as “version_minor” and “version_major”… only sun can define major versions but we can define minor versions from 0-65535! A JAVA SHORT has a range of -32768 to 32767!</p>
<p>32767 &lt; 65535…</p>
<p>That is an inherit truth of 1st grade mathematics… So therefore a short is incapable of holding the value and allowing it to be manipulated… Yes both a short and u2 have 16 bits of information but only 15 bits of short are for numerical value, and u2’s uses all 16 bits for value.</p>
<p>The 16th bit of a short is used for negation, “positive or negative modifier!” basically if bit[0] == 1 then it’s negative… otherwise it’s positive, but without this 16th quantifier the range of the number cannot reach 65535…</p>
<p>I dont know how many times I can explain the same concept before you get it so I hope you understand now why it is FATALLY flawed.</p>
<p>/fail</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/8</link>
        <pubDate>Sun, 01 Jul 2007 02:33:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-8</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Silver_Lining Silver Lining]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silver_lining">@Silver_Lining</a> wrote:</p>
          <blockquote>
              <p>Then please explain why 1: reading a short is how all bytecode libs that I’ve seen load a u2 and 2: why, then, no exception is thrown when I call ClassLoader.define(clazz.getName(), clazz.toByteArray(), 0, clazz.toByteArray().length)? I’m not saying you’re wrong, nor am I saying I am right. What I’m getting at is that my way works.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/7</link>
        <pubDate>Sun, 01 Jul 2007 01:22:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-7</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <p>[quote=“Silver Lining, post:1, topic:118142”]Reading a Class</p>
<p>This “tutorial” isn’t strictly Java; however, it is about the Java class format. Specifically, this is on parsing classes quickly. So, let’s look at the class format:</p>
<p>Class{<br>
int magic<br>
short minor<br>
short major<br>
short constant_pool_length<br>
constant[] constant_pool<br>
short accessflags<br>
short this_class_index<br>
short superclass_index<br>
short interface_count<br>
short[] interfaces<br>
short field_count<br>
field[] fields<br>
short method_count<br>
method[] methods<br>
short attribute_count<br>
attribute[] class_attributes<br>
}<br>
The “magic” number is 0xCAFEBABE. Please note, constant_pool[0] is reserved. So, really, you are reading constant_pool_length - 1 constants.<br>
Now, the constant format:</p>
<p>constant{<br>
byte opcode<br>
byte[] bytes<br>
}<br>
The classes such as ConstantUtf8, ConstantLong, etc. are completely unnecessary. Quick constant reading is reading the opcode and assigning the bytes according to the opcode.</p>
<p>Now, let’s skip on to the field and method format, which is the exact same:<br>
field_or_method{<br>
short access_flags<br>
short name_index<br>
short signature_index<br>
short attribute_count<br>
attribute[] attributes<br>
}<br>
Non-abstract methods all have a Code attribute. If it doesn’t, you have a bug or an invalid class.</p>
<p>Now the thing shared by fields, methods, and classes: attributes<br>
attribute{<br>
short name_index<br>
int info_length<br>
byte[] info<br>
}<br>
Also, I want to specify on the contents of info for the attribute Code because… that’s the method code and you’ll probably want to edit it:<br>
The first four bytes of info are two shorts that can be ignored without problem if you are going for speed. Yes, you can still dump it this way.<br>
The next four bytes of info combine to make an int: the number of instructions within this code.</p>
<p>And finally, the instruction<br>
instruction{<br>
byte opcode<br>
byte[] operand_info<br>
}</p>
<p>There. I have just supplied enough information to read the whole class. No function is lost in this way of reading a class, although it is a bit minimalist, and it is quick. Now, everyone who hasn’t already, go make your own bytecode libraries. It takes all of one hour or less to do so.[/quote]</p>
<p>You fail and are so fucking dumb.</p>
<p>U2 is 2 bytes, not short, it’s unsigned 2 bytes which means the first bit is used… Therefore a java <span class="bbcode-b">short</span> is inadequate for storage… as it uses 7 bits for the value and 1 bit for negation…</p>
<p>Therefore this WHOLE info here FAILS. A tutorial should be informative not <span class="bbcode-u">anti-informative</span>.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/6</link>
        <pubDate>Sat, 30 Jun 2007 23:39:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-6</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Silver_Lining Silver Lining]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silver_lining">@Silver_Lining</a> wrote:</p>
          <blockquote>
              <p>Thanks for correcting me k00dr. I’ll edit my post for what you pointed out. As for the thing on constant reading, I meant that you can have a byte array in your constant class that represents the value, e.g. in a ConstantDouble or ConstantLong, it would have a length of 8.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/5</link>
        <pubDate>Sat, 30 Jun 2007 22:53:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-5</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@KryptoN KryptoN_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/krypton">@KryptoN</a> wrote:</p>
          <blockquote>
              <p>Heh, I’ve been working on a Ruby class file analyser, and it’s not nearly as hard as I thought it’d be, but this will help a bit <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/4</link>
        <pubDate>Sat, 30 Jun 2007 21:23:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-4</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@k00dr k00dr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/k00dr">@k00dr</a> wrote:</p>
          <blockquote>
              <p>Thank you for the guide, Silver Lining.<br>
There are few things I noticed:</p>
<p>[quote=“Silver Lining, post:1, topic:118142”]The classes such as ConstantUtf8, ConstantLong, etc. are completely <span class="bbcode-b">unnecessary</span> <a>i</a>[/i].<br>
Quick constant reading is reading the opcode and <span class="bbcode-i">assigning the bytes according to the opcode (???)</span>.[/quote]</p>
<p>The constant pool holds a lot of information and is by no means unnecessary, but if you mean having a separate class for each constant is unnecessary, well, all I can say is that there are million ways to design your code <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<aside class="quote no-group quote-modified" data-post="1" data-topic="118142">
<div class="title">
<div class="quote-controls"></div>
 Silver Lining:</div>
<blockquote>
<p><span class="bbcode-b">Methods all have a Code attribute</span>. If it doesn’t, you have a bug or an invalid class.</p>
</blockquote>
</aside>
<p>Abstract methods don’t have Code.</p>
<p>[quote=“Silver Lining, post:1, topic:118142”]Also, I want to specify on the contents of info for the attribute Code <span class="bbcode-i">… (shortened) …</span><br>
The next four bytes of info combine to make an int: <span class="bbcode-b">the number of instructions</span> within this code.[/quote]</p>
<p>Not the number of instructions, but the number of bytes the instructions are altogether.</p>
<aside class="quote no-group quote-modified" data-post="1" data-topic="118142">
<div class="title">
<div class="quote-controls"></div>
 Silver Lining:</div>
<blockquote>
<p>No function is lost in this way of reading a class, and it is quick.</p>
</blockquote>
</aside>
<p>Well, no functions are lost, but nothing is actually gained by only scratching the surface like this… <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>If you who read this guide found it interesting, I encourage you to read the <a href="http://java.sun.com/docs/books/jvms/second_edition/html/ClassFile.doc.html" data-bbcode="true" rel="nofollow noopener">full VM specification</a>.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/3</link>
        <pubDate>Sat, 30 Jun 2007 16:09:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>very interesting to read. Thanks for the information <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Too bad i wouldn’t be experienced enough to write a bytecode library.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/2</link>
        <pubDate>Sat, 30 Jun 2007 03:30:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
      <item>
        <title>A guide on reading classes</title>
        <dc:creator><![CDATA[@Silver_Lining Silver Lining]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silver_lining">@Silver_Lining</a> wrote:</p>
          <blockquote>
              <p>Reading a Class</p>
<p>This “tutorial” isn’t strictly Java; however, it is about the Java class format. Specifically, this is on parsing classes quickly. So, let’s look at the class format:</p>
<p>Class{<br>
int magic<br>
unsigned short minor<br>
unsigned short major<br>
unsigned short constant_pool_length<br>
constant[] constant_pool<br>
unsigned short accessflags<br>
unsigned short this_class_index<br>
unsigned short superclass_index<br>
unsigned short interface_count<br>
unsigned short[] interfaces<br>
unsigned short field_count<br>
field[] fields<br>
unsigned short method_count<br>
method[] methods<br>
unsigned short attribute_count<br>
attribute[] class_attributes<br>
}<br>
The “magic” number is 0xCAFEBABE. Please note, constant_pool[0] is reserved. So, really, you are reading constant_pool_length - 1 constants.<br>
Now, the constant format:</p>
<p>constant{<br>
byte opcode<br>
byte[] bytes<br>
}<br>
The classes such as ConstantUtf8, ConstantLong, etc. are completely unnecessary. Quick constant reading is reading the opcode and assigning the bytes according to the opcode.</p>
<p>Now, let’s skip on to the field and method format, which is the exact same:<br>
field_or_method{<br>
unsigned short access_flags<br>
unsigned short name_index<br>
unsigned short signature_index<br>
unsigned short attribute_count<br>
attribute[] attributes<br>
}<br>
Non-abstract methods all have a Code attribute. If it doesn’t, you have a bug or an invalid class.</p>
<p>Now the thing shared by fields, methods, and classes: attributes<br>
attribute{<br>
unsigned short name_index<br>
int info_length<br>
byte[] info<br>
}<br>
Also, I want to specify on the contents of info for the attribute Code because… that’s the method code and you’ll probably want to edit it:<br>
The first four bytes of info are two unsigned shorts that can be ignored without problem if you are going for speed. Yes, you can still dump it this way.<br>
The next four bytes of info combine to make an int: the number of instructions within this code.</p>
<p>And finally, the instruction<br>
instruction{<br>
byte opcode<br>
byte[] operand_info<br>
}</p>
<p>There. I have just supplied enough information to read the whole class. No function is lost in this way of reading a class, although it is a bit minimalist, and it is quick. Now, everyone who hasn’t already, go make your own bytecode libraries. It takes all of one hour or less to do so.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142/1</link>
        <pubDate>Sat, 30 Jun 2007 02:17:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-118142-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-guide-on-reading-classes/118142.rss">A guide on reading classes</source>
      </item>
  </channel>
</rss>
