<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Javascript and the DOM</title>
    <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299</link>
    <description>Hello, in this tutorial I&#39;m going to be covering how to manipulate your web page using Javascript and a powerful mechanism called the [i]Document Object Model[/i]. The contents of your webpage are available through the DOM, and can be manipulated and changed. In this tutorial we will be manipulating the DOM with Javascript.
 
This tutorial will not teach the basics of Javascript, if you would like a tutorial on learning Javascript I recommend picking up an ebook or going online for some basic tutorials.
 
The DOM has a special set of variables and objects that represent different aspects of the webpage such as content, location, status and many more.

[size=12pt][b]Common DOM Objects[/b][/size]

[ul][li]document - Represents the (X)HTML page[/li]
[li]location - Represents the current URL[/li]
[li]status - Represents the browser&#39;s status bar[/li]
[li]history - Represents the browser&#39;s history[/li]
[li]navigator - Represents information about the browser[/li][/ul]

You can find many organized DOM objects on this page,
[url=http://www.w3schools.com/jsref/obj_window.asp]http://www.w3schools.com/jsref/obj_window.asp[/url]

You can allow Javascript to manipulate the DOM. We are going to start with a simple example of changing the style of a page;
[code]
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
        &lt;title&gt;Simple DOM Manipulation&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Wat u want foo&lt;/h1&gt;
        &lt;script type=&quot;text/javascript&quot;&gt;
            // Javascript will change the style of the page without CSS
            document.body.style.color = &quot;green&quot;;
            document.body.style.backgroundColor = &quot;blue&quot;;
            document.body.style.textAlign = &quot;center&quot;;
        &lt;/script&gt;
        &lt;p&gt;lol&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;
[/code]
There are some subtle differences in this snippet:
[list]
[li][b]The script is placed in the body tag.[/b] The reason this is placed in the body tag is because it refers to the body on the fly, and I cant place it in the header because while the page is loading, the script will run when there is no body.
[list][li][b]There is no CSS.[/b] As you can see, there is absolutely no CSS here.

[ul][li][b]The DOM is used to change the page.[/b] The syntax goes all the way from the document to the body itself, to its style attributes and finally to its different attributes such as background color and aligning.[/li][/ul]


[ul][li]The document represents the actual page.[/li]
[li]The body represents the [i]body[/i] tag.[/li]
[li]The style represents the style of the previous object. In this case, the [i]body[/i] tag.[/li][/ul]

If you&#39;re familiar with CSS you may notice something slightly different. In CSS, attributes such as [i]font-weight[/i] or [i]background-color[/i] use dashes to seperate words, while the DOM uses capitalization on every other word (otherwis eknown as camel-back notation) such as [i]fontWeight[/i] and [i]backgroundColor[/i] instead.
 
Of course, you can also accomplish this task with events. In this next example, I&#39;m going to show you how to use button events to edit the DOM using javascript functions.
[code]
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Manipulating the DOM through Button Events&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function changeColors(color, bgcolor) {
            document.body.style.color = color;
            document.body.style.backgroundColor = bgcolor;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Edit the DOM through button events and Javascript&lt;/h1&gt;
      &lt;fieldset&gt;
          &lt;input type=&quot;button&quot; onclick=&quot;changeColors(&#39;black&#39;, &#39;white&#39;);&quot;
                 value=&quot;Black and White&quot; /&gt;
          &lt;input type=&quot;button&quot; onclick=&quot;changeColors(&#39;green&#39;, &#39;blue&#39;);&quot;
                 value=&quot;Green and Blue&quot; /&gt;
      &lt;/fieldset&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

[ul][li][b]A button event calls a function which edits the DOM.[/b] A javascript function edits the DOM. A button is used to call this function.[/li]
[li][b]Embedding quotes within quotes.[/b] Take a look at the [i]onclick[/i] lines, you will notice the function parameters are enclosed in single quotes (&#39;). This is the case because if double quotes were used as usual, the browser would nest the quotes as &lt;strong&gt;&quot;changeColors(&quot; and white&quot;)&quot;&lt;/strong&gt;.[/li]
[li][b]Script is placed in the head.[/b] Now that the script isn&#39;t used immediately when the page loads, the script is instead placed in the head tag.[/li][/ul]

That&#39;s some basic DOM manipulation. The DOM isn&#39;t just limited to editting the styles of pages, it can do many other things. 
 
Next, we are going to manipulate forms and different types of input using the [i]getElementById()[/i] function from the document object. In order to use this function, you must specify an id for the element you want to modify. Here is a simple script which takes a specified name from one input field, and prints out a sentence in another.
[code]&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Manipulating the DOM through Button Events&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function submit() {
            var name = document.getElementById(&quot;name&quot;).value;
            var output = document.getElementById(&quot;output&quot;);
            output.value = &quot;Hello &quot; + name + &quot;!&quot;;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;label for=&quot;name&quot;&gt;Name: &lt;/label&gt;
      &lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;
      &lt;br /&gt;
      &lt;input type=&quot;button&quot; id=&quot;name&quot; value=&quot;Submit&quot;
             style=&quot;width:10%&quot; onclick=&quot;submit();&quot; /&gt;
      &lt;br /&gt;
      &lt;label for=&quot;output&quot;&gt;Output: &lt;/label&gt;
      &lt;input type=&quot;text&quot; id=&quot;output&quot; /&gt;
  &lt;/body&gt;
&lt;/html&gt;[/code]

[ul][li][b]The submit button outputs the data.[/b] The submit() function uses two variables: [i]name[/i] and [i]output[/i]. The getElementById() function references the textfield with the specified id and the [i]value[/i] property holds the data inside the textfield.[/li]
[li][b]Both textfields have an id.[/b] Both textfields hold an id, in order to use the getElementById() function, there must always be an id associated with the element the function will reference.[/li][/ul]

That&#39;s useful and all, but what if we want to actually edit a page? A textbox isn&#39;t the best way to output data. So instead, I introduce to you the [i]innerHTML[/i] property. This property describes the HTML data in an element. Take a look at this example; 
[code]&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Using innerHTML&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function submit() {
            var name = document.getElementById(&quot;name&quot;).value;
            var output = document.getElementById(&quot;output&quot;);
            output.innerHTML = &quot;&lt;em&gt;&quot; + name + &quot;&lt;/em&gt;&quot;;
            output.innerHTML += &quot;, welcome to the site!&quot;;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;fieldset&gt;
        &lt;label for=&quot;name&quot;&gt;Name: &lt;/label&gt;
        &lt;input type=&quot;text&quot; id=&quot;name&quot; /&gt;
        &lt;br /&gt;
        &lt;input type=&quot;button&quot; id=&quot;name&quot; value=&quot;Submit&quot;
            style=&quot;width:10%&quot; onclick=&quot;submit();&quot; /&gt;
      &lt;/fieldset&gt;
      &lt;br /&gt;
      &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;[/code]
When dealing with input elements such as a list box, you need to create a variable and use the getElementById() function as usual then loop through the lists contents. Use the [i]selected[/i] property (boolean) to determine whether or not a list item is selected. The [i]checked[/i] property will determine whether or not a checkbox is checked.
 
Radio buttons are quite different. They require a new attribute and manipulating the DOM is slightly different. In order to interpret radio buttons, you would use the getElementsByName() function and the [i]name[/i] attribute.
[code]
&lt;!DOCTYPE HTML PUBLIC &quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Manipulating the DOM through Button Events&lt;/title&gt;
    &lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=UTF-8&quot;&gt;
    &lt;script type=&quot;text/javascript&quot;&gt;
        function submit() {
            var part1 = document.getElementsByName(&quot;part1&quot;);
            var part2 = document.getElementsByName(&quot;part2&quot;);
            var selectedName2 = &quot;&quot;;
 
            for (i = 0; i &lt; part1.length; i++) {
                var name = part1;
                if (name.checked)
                    var selectedName = name.value;
            }
 
            for (i = 0; i &lt; part2.length; i++) {
                var name = part2;
                if (name.checked)
                    selectedName2 = name.value;
            }
            var output = document.getElementById(&quot;output&quot;);
            var outputText = selectedName + selectedName2;
            output.innerHTML = outputText;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Match the proper names...&lt;/h1&gt;
      &lt;fieldset&gt;
        &lt;input type=&quot;radio&quot; name=&quot;part1&quot; id=&quot;rune&quot; value=&quot;Rune&quot; /&gt;
        &lt;label for=&quot;rune&quot;&gt;Rune&lt;/label&gt;
 
        &lt;input type=&quot;radio&quot; name=&quot;part1&quot; id=&quot;tune&quot; value=&quot;Tune&quot; /&gt;
        &lt;label for=&quot;tune&quot;&gt;Tune&lt;/label&gt;
 
        &lt;input type=&quot;radio&quot; name=&quot;part1&quot; id=&quot;dune&quot; value=&quot;Dune&quot; /&gt;
        &lt;label for=&quot;dune&quot;&gt;Dune&lt;/label&gt;
 
        &lt;br /&gt;&lt;br /&gt;
 
        &lt;input type=&quot;radio&quot; name=&quot;part2&quot; id=&quot;mocus&quot; value=&quot;Mocus&quot; /&gt;
        &lt;label for=&quot;mocus&quot;&gt;Mocus&lt;/label&gt;
 
        &lt;input type=&quot;radio&quot; name=&quot;part2&quot; id=&quot;focus&quot; value=&quot;Focus&quot; /&gt;
        &lt;label for=&quot;tune&quot;&gt;Focus&lt;/label&gt;
 
        &lt;input type=&quot;radio&quot; name=&quot;part2&quot; id=&quot;locus&quot; value=&quot;Locus&quot; /&gt;
        &lt;label for=&quot;dune&quot;&gt;Locus&lt;/label&gt;
      &lt;/fieldset&gt;
        &lt;br /&gt;
        &lt;input type=&quot;button&quot; id=&quot;name&quot; value=&quot;Submit&quot;
            style=&quot;width:10%&quot; onclick=&quot;submit();&quot; /&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;div id=&quot;output&quot;&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

[ul][li][b]The getElementsByName() function returns an array of all radio buttons in a group.[/b] This function returned an array of 3 values (the size of all the options).[/li]
[li][b]All choices are iterated.[/b] All radio buttons are iterated through, and the if statement checks whether the button is selcted. If so, a new variable is made to hold the value of that button.[/li]
[li][b]Finally, the output div holds the two values.[/b] Both values from the two radio buttons are concatenated and are printed out using the innerHTML property.[/li]
[li][b]The name attribute is used for each radio button.[/b] This is used to distinguish between the two different radio button groups.[/li][/ul]


Thanks for reading my tutorial on basic manipulation on the DOM with Javascript, if you have any questions please message me here.</description>
    
    <lastBuildDate>Fri, 20 Jul 2012 20:33:58 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Javascript and the DOM</title>
        <dc:creator><![CDATA[@justaguy justaguy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/justaguy">@justaguy</a> wrote:</p>
          <blockquote>
              <p>[quote=“RSCShadow, post:3, topic:450299”]<a href="http://w3fools.com/" rel="nofollow noopener">http://w3fools.com/</a><br>
<a href="https://en.wikipedia.org/wiki/Unobtrusive_JavaScript" rel="nofollow noopener">https://en.wikipedia.org/wiki/Unobtrusive_JavaScript</a></p>
<p>Also, when using buttons purely for handling JavaScript functions, you should use  instead of  as they’re a bit more free in how you can style them.[/quote]</p>
<p><span class="mention">@Unobtrusive</span> JS: Did we not have this discussion before? We did, so please stop posting the same crap on my tutorials.<br>
<span class="mention">@w3Fools</span>: Yes I realize this, but it was linked for the purpose of providing a reference to the DOM API which according to your link shows no actual errors with their documentation. If it was to an HTML or CSS tutorial, I wouldn’t have linked it.</p>
<p>For the button tag instead of input,<br>
<a href="http://particletree.com/features/rediscovering-the-button-element/" class="onebox" target="_blank" rel="nofollow noopener">http://particletree.com/features/rediscovering-the-button-element/</a></p>
<p>I prefer the input tag, and since aesthetics isn’t the subject at hand, using the input tag isn’t a big deal.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/5</link>
        <pubDate>Fri, 20 Jul 2012 20:33:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450299-5</guid>
        <source url="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss">Javascript and the DOM</source>
      </item>
      <item>
        <title>Javascript and the DOM</title>
        <dc:creator><![CDATA[@Team_Rocket Team_Rocket]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/team_rocket">@Team_Rocket</a> wrote:</p>
          <blockquote>
              <p>We need more threads like this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/4</link>
        <pubDate>Fri, 20 Jul 2012 06:12:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450299-4</guid>
        <source url="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss">Javascript and the DOM</source>
      </item>
      <item>
        <title>Javascript and the DOM</title>
        <dc:creator><![CDATA[@RSCShadow RSCShadow]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rscshadow">@RSCShadow</a> wrote:</p>
          <blockquote>
              <p><a href="http://w3fools.com/" class="onebox" target="_blank" rel="nofollow noopener">http://w3fools.com/</a><br>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Unobtrusive_JavaScript" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="https://en.wikipedia.org/wiki/Unobtrusive_JavaScript" target="_blank" rel="nofollow noopener">Unobtrusive JavaScript</a></h3>

<p>See also Unobtrusive JavaScript is a general approach to the use of JavaScript in web pages. Though the term is not formally defined, its basic principles are generally understood to include:  </p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<p>Also, when using buttons purely for handling JavaScript functions, you should use  instead of  as they’re a bit more free in how you can style them.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/3</link>
        <pubDate>Fri, 20 Jul 2012 04:19:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450299-3</guid>
        <source url="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss">Javascript and the DOM</source>
      </item>
      <item>
        <title>Javascript and the DOM</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <p>Pretty good stuff, nice job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/2</link>
        <pubDate>Thu, 19 Jul 2012 18:23:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450299-2</guid>
        <source url="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss">Javascript and the DOM</source>
      </item>
      <item>
        <title>Javascript and the DOM</title>
        <dc:creator><![CDATA[@justaguy justaguy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/justaguy">@justaguy</a> wrote:</p>
          <blockquote>
              <p>Hello, in this tutorial I’m going to be covering how to manipulate your web page using Javascript and a powerful mechanism called the <span class="bbcode-i">Document Object Model</span>. The contents of your webpage are available through the DOM, and can be manipulated and changed. In this tutorial we will be manipulating the DOM with Javascript.</p>
<p>This tutorial will not teach the basics of Javascript, if you would like a tutorial on learning Javascript I recommend picking up an ebook or going online for some basic tutorials.</p>
<p>The DOM has a special set of variables and objects that represent different aspects of the webpage such as content, location, status and many more.</p>
<p>[size=12pt]<span class="bbcode-b">Common DOM Objects</span>[/size]</p>
<p>[ul][li]document - Represents the (X)HTML page[/li]<br>
[li]location - Represents the current URL[/li]<br>
[li]status - Represents the browser’s status bar[/li]<br>
[li]history - Represents the browser’s history[/li]<br>
[li]navigator - Represents information about the browser[/li][/ul]</p>
<p>You can find many organized DOM objects on this page,<br>
<a href="http://www.w3schools.com/jsref/obj_window.asp" data-bbcode="true" rel="nofollow noopener">http://www.w3schools.com/jsref/obj_window.asp</a></p>
<p>You can allow Javascript to manipulate the DOM. We are going to start with a simple example of changing the style of a page;</p>
<pre><code class="lang-auto">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
    &lt;head&gt;
        &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
        &lt;title&gt;Simple DOM Manipulation&lt;/title&gt;
    &lt;/head&gt;
    &lt;body&gt;
        &lt;h1&gt;Wat u want foo&lt;/h1&gt;
        &lt;script type="text/javascript"&gt;
            // Javascript will change the style of the page without CSS
            document.body.style.color = "green";
            document.body.style.backgroundColor = "blue";
            document.body.style.textAlign = "center";
        &lt;/script&gt;
        &lt;p&gt;lol&lt;/p&gt;
    &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>There are some subtle differences in this snippet:<br>
[list]<br>
[li]<span class="bbcode-b">The script is placed in the body tag.</span> The reason this is placed in the body tag is because it refers to the body on the fly, and I cant place it in the header because while the page is loading, the script will run when there is no body.<br>
[list][li]<span class="bbcode-b">There is no CSS.</span> As you can see, there is absolutely no CSS here.</p>
<p>[ul][li]<span class="bbcode-b">The DOM is used to change the page.</span> The syntax goes all the way from the document to the body itself, to its style attributes and finally to its different attributes such as background color and aligning.[/li][/ul]</p>
<p>[ul][li]The document represents the actual page.[/li]<br>
[li]The body represents the <span class="bbcode-i">body</span> tag.[/li]<br>
[li]The style represents the style of the previous object. In this case, the <span class="bbcode-i">body</span> tag.[/li][/ul]</p>
<p>If you’re familiar with CSS you may notice something slightly different. In CSS, attributes such as <span class="bbcode-i">font-weight</span> or <span class="bbcode-i">background-color</span> use dashes to seperate words, while the DOM uses capitalization on every other word (otherwis eknown as camel-back notation) such as <span class="bbcode-i">fontWeight</span> and <span class="bbcode-i">backgroundColor</span> instead.</p>
<p>Of course, you can also accomplish this task with events. In this next example, I’m going to show you how to use button events to edit the DOM using javascript functions.</p>
<pre><code class="lang-auto">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Manipulating the DOM through Button Events&lt;/title&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;script type="text/javascript"&gt;
        function changeColors(color, bgcolor) {
            document.body.style.color = color;
            document.body.style.backgroundColor = bgcolor;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Edit the DOM through button events and Javascript&lt;/h1&gt;
      &lt;fieldset&gt;
          &lt;input type="button" onclick="changeColors('black', 'white');"
                 value="Black and White" /&gt;
          &lt;input type="button" onclick="changeColors('green', 'blue');"
                 value="Green and Blue" /&gt;
      &lt;/fieldset&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>[ul][li]<span class="bbcode-b">A button event calls a function which edits the DOM.</span> A javascript function edits the DOM. A button is used to call this function.[/li]<br>
[li]<span class="bbcode-b">Embedding quotes within quotes.</span> Take a look at the <span class="bbcode-i">onclick</span> lines, you will notice the function parameters are enclosed in single quotes (’). This is the case because if double quotes were used as usual, the browser would nest the quotes as <strong>“changeColors(” and white")"</strong>.[/li]<br>
[li]<span class="bbcode-b">Script is placed in the head.</span> Now that the script isn’t used immediately when the page loads, the script is instead placed in the head tag.[/li][/ul]</p>
<p>That’s some basic DOM manipulation. The DOM isn’t just limited to editting the styles of pages, it can do many other things.</p>
<p>Next, we are going to manipulate forms and different types of input using the <span class="bbcode-i">getElementById()</span> function from the document object. In order to use this function, you must specify an id for the element you want to modify. Here is a simple script which takes a specified name from one input field, and prints out a sentence in another.</p>
<p>[code]</p>

  
    Manipulating the DOM through Button Events
    
    
  
  
      Name: 
      
      <br>
      
      <br>
      Output: 
      
  
[/code]
<p>[ul][li]<span class="bbcode-b">The submit button outputs the data.</span> The submit() function uses two variables: <span class="bbcode-i">name</span> and <span class="bbcode-i">output</span>. The getElementById() function references the textfield with the specified id and the <span class="bbcode-i">value</span> property holds the data inside the textfield.[/li]<br>
[li]<span class="bbcode-b">Both textfields have an id.</span> Both textfields hold an id, in order to use the getElementById() function, there must always be an id associated with the element the function will reference.[/li][/ul]</p>
<p>That’s useful and all, but what if we want to actually edit a page? A textbox isn’t the best way to output data. So instead, I introduce to you the <span class="bbcode-i">innerHTML</span> property. This property describes the HTML data in an element. Take a look at this example;</p>
<p>[code]</p>

  
    Using innerHTML
    
    
  
  
      
        Name: 
        
        <br>
        
      
      <br>
      <div></div>
  
[/code]
When dealing with input elements such as a list box, you need to create a variable and use the getElementById() function as usual then loop through the lists contents. Use the [i]selected[/i] property (boolean) to determine whether or not a list item is selected. The [i]checked[/i] property will determine whether or not a checkbox is checked.
<p>Radio buttons are quite different. They require a new attribute and manipulating the DOM is slightly different. In order to interpret radio buttons, you would use the getElementsByName() function and the <span class="bbcode-i">name</span> attribute.</p>
<pre><code class="lang-auto">&lt;!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN"&gt;
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Manipulating the DOM through Button Events&lt;/title&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=UTF-8"&gt;
    &lt;script type="text/javascript"&gt;
        function submit() {
            var part1 = document.getElementsByName("part1");
            var part2 = document.getElementsByName("part2");
            var selectedName2 = "";
 
            for (i = 0; i &lt; part1.length; i++) {
                var name = part1;
                if (name.checked)
                    var selectedName = name.value;
            }
 
            for (i = 0; i &lt; part2.length; i++) {
                var name = part2;
                if (name.checked)
                    selectedName2 = name.value;
            }
            var output = document.getElementById("output");
            var outputText = selectedName + selectedName2;
            output.innerHTML = outputText;
        }
    &lt;/script&gt;
  &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Match the proper names...&lt;/h1&gt;
      &lt;fieldset&gt;
        &lt;input type="radio" name="part1" id="rune" value="Rune" /&gt;
        &lt;label for="rune"&gt;Rune&lt;/label&gt;
 
        &lt;input type="radio" name="part1" id="tune" value="Tune" /&gt;
        &lt;label for="tune"&gt;Tune&lt;/label&gt;
 
        &lt;input type="radio" name="part1" id="dune" value="Dune" /&gt;
        &lt;label for="dune"&gt;Dune&lt;/label&gt;
 
        &lt;br /&gt;&lt;br /&gt;
 
        &lt;input type="radio" name="part2" id="mocus" value="Mocus" /&gt;
        &lt;label for="mocus"&gt;Mocus&lt;/label&gt;
 
        &lt;input type="radio" name="part2" id="focus" value="Focus" /&gt;
        &lt;label for="tune"&gt;Focus&lt;/label&gt;
 
        &lt;input type="radio" name="part2" id="locus" value="Locus" /&gt;
        &lt;label for="dune"&gt;Locus&lt;/label&gt;
      &lt;/fieldset&gt;
        &lt;br /&gt;
        &lt;input type="button" id="name" value="Submit"
            style="width:10%" onclick="submit();" /&gt;
      &lt;br /&gt;
      &lt;br /&gt;
      &lt;div id="output"&gt;&lt;/div&gt;
  &lt;/body&gt;
&lt;/html&gt;</code></pre>
<p>[ul][li]<span class="bbcode-b">The getElementsByName() function returns an array of all radio buttons in a group.</span> This function returned an array of 3 values (the size of all the options).[/li]<br>
[li]<span class="bbcode-b">All choices are iterated.</span> All radio buttons are iterated through, and the if statement checks whether the button is selcted. If so, a new variable is made to hold the value of that button.[/li]<br>
[li]<span class="bbcode-b">Finally, the output div holds the two values.</span> Both values from the two radio buttons are concatenated and are printed out using the innerHTML property.[/li]<br>
[li]<span class="bbcode-b">The name attribute is used for each radio button.</span> This is used to distinguish between the two different radio button groups.[/li][/ul]</p>
<p>Thanks for reading my tutorial on basic manipulation on the DOM with Javascript, if you have any questions please message me here.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/javascript-and-the-dom/450299/1</link>
        <pubDate>Thu, 19 Jul 2012 16:37:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450299-1</guid>
        <source url="https://forum.moparisthebest.com/t/javascript-and-the-dom/450299.rss">Javascript and the DOM</source>
      </item>
  </channel>
</rss>
