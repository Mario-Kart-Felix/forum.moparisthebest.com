<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] cachedownloader downloading corrupted files</title>
    <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896</link>
    <description>My cachedownloader is downloading corrupt files...
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;LostLegacy.zip&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Unpacking..&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
[/code]
It downloads the files but there all 0kb (corrupted files)...any suggestions or possible help? i&#39;m working on making it back to a client for now until I figure out how to fix this.</description>
    
    <lastBuildDate>Sun, 18 Sep 2011 05:33:11 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] cachedownloader downloading corrupted files</title>
        <dc:creator><![CDATA[@TheCyberMan TheCyberMan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thecyberman">@TheCyberMan</a> wrote:</p>
          <blockquote>
              <p>Make sure you zip the files of the cacheâ€“not the folder the files of the cache are in. Also, set your paths correctly. On a Mac, I had to change the paths to work universally instead of just on Windows.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/5</link>
        <pubDate>Sun, 18 Sep 2011 05:33:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414896-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss">[PI] cachedownloader downloading corrupted files</source>
      </item>
      <item>
        <title>[PI] cachedownloader downloading corrupted files</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="414896">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/dextrell/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Dextrell:</div>
<blockquote>
<p>Agreed I suggest you change yourserver name to just cache and ifthe cache is corrupted just reupload it also go to signlink.java and leave it ./cache/ also in leave the uploaded cache sit just the name cache and check your client.java for cache because it may be set to extract a different file name</p>
</blockquote>
</aside>
<p>Leave.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/4</link>
        <pubDate>Sun, 18 Sep 2011 03:38:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414896-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss">[PI] cachedownloader downloading corrupted files</source>
      </item>
      <item>
        <title>[PI] cachedownloader downloading corrupted files</title>
        <dc:creator><![CDATA[@Dextrell Dextrell]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dextrell">@Dextrell</a> wrote:</p>
          <blockquote>
              <p>Agreed I suggest you change yourserver name to just cache and ifthe cache is corrupted just reupload it also go to signlink.java and leave it ./cache/ also in leave the uploaded cache sit just the name cache and check your client.java for cache because it may be set to extract a different file name</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/3</link>
        <pubDate>Sun, 18 Sep 2011 02:50:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414896-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss">[PI] cachedownloader downloading corrupted files</source>
      </item>
      <item>
        <title>[PI] cachedownloader downloading corrupted files</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>If theyâ€™re 0kb, do you actually think it downloaded the file?<br>
P.S. Iâ€™m 100% positive that somewhere in the tutorial you followed, it stated how you should zip your cache. You did it wrong.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/2</link>
        <pubDate>Sat, 17 Sep 2011 01:40:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414896-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss">[PI] cachedownloader downloading corrupted files</source>
      </item>
      <item>
        <title>[PI] cachedownloader downloading corrupted files</title>
        <dc:creator><![CDATA[@belhelmiel belhelmiel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/belhelmiel">@belhelmiel</a> wrote:</p>
          <blockquote>
              <p>My cachedownloader is downloading corrupt filesâ€¦</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = "LostLegacy.zip"; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
		
		if(!location.exists()) {
			//drawLoadingText("Loading new Updates....");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText("~ First Time Installation, Only Once! ~");
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + "/" +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, "Downloading Cache " + percentage + "%...");

			}

			System.out.println(localFileName + "\t" + numWritten);
			drawLoadingText("Unpacking..");

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf('/');
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println("error retreiving archivaed name.");
		}
		return "";
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println("unzipping2 " + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn't write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          "Delete: no such file or directory: " + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException("Delete: write protected: "
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            "Delete: directory not empty: " + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException("Delete: deletion failed");

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println("unzipping " + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}</code></pre>
<p>It downloads the files but there all 0kb (corrupted files)â€¦any suggestions or possible help? iâ€™m working on making it back to a client for now until I figure out how to fix this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896/1</link>
        <pubDate>Sat, 17 Sep 2011 01:36:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414896-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-cachedownloader-downloading-corrupted-files/414896.rss">[PI] cachedownloader downloading corrupted files</source>
      </item>
  </channel>
</rss>
