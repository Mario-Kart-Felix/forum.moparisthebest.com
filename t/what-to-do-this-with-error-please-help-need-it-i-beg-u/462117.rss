<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What to do this with error? please help need it ! i beg u</title>
    <link>https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117</link>
    <description>src/com/rs/game/player/content/trade.java uses unchecked or unsafe opreation please help :((((

this is my trade.java [code]package com.rs.game.player.content;

import java.io.Serializable;

import com.rs.game.item.Item;
import com.rs.game.item.ItemsContainer;
import com.rs.game.player.Player;
import com.rs.utils.Utils;

/**
 * Represents a trade session
 * 
 * @author Titan
 */
public class Trade implements Serializable {

    /**
     * 
     */
    private static final long serialVersionUID = 4297266601674588915L;
    private final Player trader, partner;
    private TradeState currentState = TradeState.STATE_ONE;
    private ItemsContainer traderItemsOffered = new ItemsContainer(28, false);
    private ItemsContainer partnerItemsOffered = new ItemsContainer(28, false);
    private boolean traderDidAccept, partnerDidAccept;
    private boolean traderDidDecline, partnerDidDecline;

    public void untradeableItems(int itemId) {
        switch (itemId) {
            case 24135:
        }
    }
    /*
     * Some info for the future, 44 = wealth transfer 43 = left limit 45 = right
     * limit
     */

    public Trade(final Player trader, final Player partner) {
        this.trader = trader;
        this.partner = partner;
        trader.getTemporaryAttributtes().put(&quot;didRequestTrade&quot;, Boolean.FALSE);
        partner.getTemporaryAttributtes().put(&quot;didRequestTrade&quot;, Boolean.FALSE);
    }

    public void start() {
        refreshScreen();
        openFirstTradeScreen(trader);
        openFirstTradeScreen(partner);
        refreshScreen();
    }

    public Player getPartner() {
        return partner;
    }

    public void openFirstTradeScreen(Player p) {
        p.getInterfaceManager().sendInventoryInterface(336);
        p.getInterfaceManager().sendInterface(335);
        p.getPackets().sendOptions(p);
        p.getPackets().sendItems(95, false, traderItemsOffered);
        p.getPackets().sendItems(95, true, partnerItemsOffered);
        String name = p.equals(trader) ? partner.getUsername() : trader.getUsername();
        p.getPackets().sendIComponentText(335, 37, &quot;&quot;);
        p.getPackets().sendIComponentText(335, 15, &quot;Trading with: &quot; + Utils.formatPlayerNameForDisplay(name));
        p.getPackets().sendIComponentText(335, 22, Utils.formatPlayerNameForDisplay(name));
    }

    public void openSecondTradeScreen(Player p) {
        traderDidDecline = false;
        partnerDidDecline = false;
        currentState = TradeState.STATE_TWO;
        partnerDidAccept = false;
        traderDidAccept = false;
        p.getInterfaceManager().sendInterface(334);
        p.getPackets().sendIComponentText(334,54,&quot;&lt;col=00FFFF&gt;Trading with:&lt;br&gt;&lt;col=00FFFF&gt;&quot;
                + Utils.formatPlayerNameForDisplay(p.equals(trader) ? partner.getUsername()
                : trader.getUsername()));
        p.getPackets().sendIComponentText(334, 34,
                &quot;Are you sure you want to make this trade?&quot;);
    }

    public void offerItem(Player pl, int slot, int amt) {
        if (currentState.equals(TradeState.STATE_ONE)) {
            if (pl.equals(trader)) {
                if (pl.getInventory().getItem(slot) == null) {
                    return;
                }
                Item item = new Item(pl.getInventory().getItem(slot).getId(),
                        amt);
                if (item != null) {
                    if (!ItemConstants.isTradeable(item)) {
                        pl.sendMessage(&quot;You cannot trade this item!&quot;);
                        return;
                    } else {
                        if (pl.getInventory().getItems().getNumberOf(item.getId()) &lt; amt) {
                            if (item.getDefinitions().isNoted()
                                    || item.getDefinitions().isStackable()) {
                                amt = pl.getInventory().getItems().lookup(item.getId()).getAmount();
                            } else {
                                amt = pl.getInventory().getItems().getNumberOf(item.getId());
                            }
                            item.setAmount(amt);

                        }
                        if (0 &gt;= amt) {
                            return;
                        }
                        if (traderItemsOffered.getFreeSlots() &lt; amt
                                &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isNoted()
                                &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isStackable()) {
                            item.setAmount(traderItemsOffered.getFreeSlots());
                        }
                        traderItemsOffered.add(item);
                        pl.getInventory().deleteItem(
                                pl.getInventory().getItem(slot).getId(), amt);
                        pl.getInventory().refresh(pl.getInventory().getItems());
                    }
                }
            } else if (pl.equals(partner)) {
                Item inventoryItem = pl.getInventory().getItem(slot);
                Item item = inventoryItem != null ? new Item(
                        inventoryItem.getId(), amt) : null;
                if (item != null) {

                    if (!ItemConstants.isTradeable(item)) {
                        pl.sendMessage(&quot;You cannot trade this item!&quot;);
                        return;
                    }

                    if (pl.getInventory().getItems().getNumberOf(item.getId()) &lt; amt) {
                        if (item.getDefinitions().isNoted()
                                || item.getDefinitions().isStackable()) {
                            amt = pl.getInventory().getItems().lookup(item.getId()).getAmount();
                        } else {
                            amt = pl.getInventory().getItems().getNumberOf(item.getId());
                        }
                        item.setAmount(amt);

                    }
                    if (0 &gt;= amt) {
                        return;
                    }
                    if (partnerItemsOffered.getFreeSlots() &lt; amt
                            &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isNoted()
                            &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isStackable()) {
                        item.setAmount(partnerItemsOffered.getFreeSlots());
                    }
                    partnerItemsOffered.add(item);
                    pl.getInventory().deleteItem(item.getId(), item.getAmount());
                    pl.getInventory().refresh(pl.getInventory().getItems());
                }
            }
            refreshScreen();
        }
    }

    public static void TradeIcons(Player player, int slot) {
        Object[] tparams4 = new Object[]{slot, 7, 4, 21954593};
        player.getPackets().sendRunScript(143, tparams4);
    }

    public void removeItem(Player pl, int slot, int amt) {
        if (currentState.equals(TradeState.STATE_ONE)) {
            if (pl.equals(trader)) {
                Item item = new Item(traderItemsOffered.get(slot).getId(), amt);
                if (item != null) {
                    if (traderItemsOffered.getNumberOf(item.getId()) &lt; amt) {
                        if (item.getDefinitions().isNoted()
                                || item.getDefinitions().isStackable()) {
                            amt = traderItemsOffered.lookup(item.getId()).getAmount();
                        } else {
                            amt = traderItemsOffered.getNumberOf(item.getId());
                        }
                        item.setAmount(amt);

                    }
                    if (0 &gt;= amt) {
                        return;
                    }
                    if (pl.getInventory().getFreeSlots() &lt; amt
                            &amp;&amp; !traderItemsOffered.get(slot).getDefinitions().isNoted()
                            &amp;&amp; !traderItemsOffered.get(slot).getDefinitions().isStackable()) {
                        item.setAmount(pl.getInventory().getFreeSlots());
                    }
                    trader.getInventory().addItem(
                            new Item(traderItemsOffered.get(slot).getId(), item.getAmount()));
                    trader.getInventory().refresh(
                            trader.getInventory().getItems());

                    traderItemsOffered.remove(item);
                    TradeIcons(partner, slot);
                    resetAccept();
                }
            } else if (pl.equals(partner)) {

                Item item = new Item(partnerItemsOffered.get(slot).getId(), amt);
                if (item != null) {
                    if (partnerItemsOffered.getNumberOf(item.getId()) &lt; amt) {
                        if (item.getDefinitions().isNoted()
                                || item.getDefinitions().isStackable()) {
                            amt = partnerItemsOffered.lookup(item.getId()).getAmount();
                        } else {
                            amt = partnerItemsOffered.getNumberOf(item.getId());
                        }
                        item.setAmount(amt);

                    }
                    if (0 &gt;= amt) {
                        return;
                    }
                    if (pl.getInventory().getFreeSlots() &lt; amt
                            &amp;&amp; !partnerItemsOffered.get(slot).getDefinitions().isNoted()
                            &amp;&amp; !partnerItemsOffered.get(slot).getDefinitions().isStackable()) {
                        item.setAmount(pl.getInventory().getFreeSlots());
                    }
                    partner.getInventory().addItem(
                            new Item(partnerItemsOffered.get(slot).getId(),
                            item.getAmount()));
                    partner.getInventory().refresh(
                            partner.getInventory().getItems());
                    partnerItemsOffered.remove(item);
                    resetAccept();
                }
            }
            refreshScreen();
        }
    }

    private void refreshScreen() {
        trader.getPackets().sendItems(90, false, traderItemsOffered);
        trader.getPackets().sendItems(90, true, partnerItemsOffered);
        partner.getPackets().sendItems(90, false, partnerItemsOffered);
        partner.getPackets().sendItems(90, true, traderItemsOffered);
        String name = trader.getUsername();
        partner.getPackets().sendIComponentText(335, 22,Utils.formatPlayerNameForDisplay(name));
        String name1 = partner.getUsername();
        trader.getPackets().sendIComponentText(335, 22,Utils.formatPlayerNameForDisplay(name1));
        trader.getPackets().sendIComponentText(335, 21, &quot; has &quot; + partner.getInventory().getFreeSlots() + &quot; free inventory slots.&quot;);
        partner.getPackets().sendIComponentText(335, 21, &quot; has &quot; + trader.getInventory().getFreeSlots() + &quot; free inventory slots.&quot;);
        trader.getPackets().sendGlobalConfig(729, getTradersItemsValue());
        trader.getPackets().sendGlobalConfig(697, getPartnersItemsValue());
        partner.getPackets().sendGlobalConfig(729, getPartnersItemsValue());
        partner.getPackets().sendGlobalConfig(697, getTradersItemsValue());
    }

    private int getTradersItemsValue() {
        int initialPrice = 0;
        for (Item item : traderItemsOffered.toArray()) {
            if (item != null) {
                initialPrice += item.getDefinitions().getValue()
                        * item.getAmount();
            }
        }
        return initialPrice;
    }

    private int getPartnersItemsValue() {
        int initialPrice = 0;
        for (Item item : partnerItemsOffered.toArray()) {
            if (item != null) {
                initialPrice += item.getDefinitions().getValue()
                        * item.getAmount();
            }
        }
        return initialPrice;
    }

    @SuppressWarnings(&quot;unused&quot;)
    private void flashSlot(Player player, int slot) {
        player.getPackets().sendRunScript(
                143,
                new Object[]{slot, 7, 4,
                    player.equals(trader) ? 21954591 : 21954593}); // screens.
    }

    public void acceptPressed(Player pl) {
        if (!traderDidAccept &amp;&amp; pl.equals(trader)) {
            traderDidAccept = true;
        } else if (!partnerDidAccept &amp;&amp; pl.equals(partner)) {
            partnerDidAccept = true;
        }
        switch (currentState) {
            case STATE_ONE:
                if (pl.equals(trader)) {
                    if (partnerDidAccept &amp;&amp; traderDidAccept) {
                        openSecondTradeScreen(trader);
                        openSecondTradeScreen(partner);
                    } else {
                        trader.getPackets().sendIComponentText(335, 37,
                                &quot;Waiting for other player...&quot;);
                        partner.getPackets().sendIComponentText(335, 37,
                                &quot;The other player has accepted&quot;);
                    }
                } else if (pl.equals(partner)) {
                    if (partnerDidAccept &amp;&amp; traderDidAccept) {
                        openSecondTradeScreen(trader);
                        openSecondTradeScreen(partner);
                    } else {
                        partner.getPackets().sendIComponentText(335, 37,
                                &quot;Waiting for other player...&quot;);
                        trader.getPackets().sendIComponentText(335, 37,
                                &quot;The other player has accepted&quot;);
                    }
                }
                break;

            case STATE_TWO:
                if (pl.equals(trader)) {
                    if (partnerDidAccept &amp;&amp; traderDidAccept) {
                        giveItems();
                    } else {
                        trader.getPackets().sendIComponentText(334, 34,
                                &quot;Waiting for other player...&quot;);
                        partner.getPackets().sendIComponentText(334, 34,
                                &quot;The other player has accepted&quot;);
                    }
                } else if (pl.equals(partner)) {
                    if (partnerDidAccept &amp;&amp; traderDidAccept) {
                        giveItems();
                    } else {
                        partner.getPackets().sendIComponentText(334, 34,
                                &quot;Waiting for other player...&quot;);
                        trader.getPackets().sendIComponentText(334, 34,
                                &quot;The other player has accepted&quot;);
                    }
                }
                break;
        }

    }

    public void tradeFailed(Player pl) {
        if (!traderDidDecline &amp;&amp; pl.equals(partner)) {
            trader.sendMessage(&quot;Other player declined trade.&quot;);
        } else if (!partnerDidDecline &amp;&amp; pl.equals(trader)) {
            partner.sendMessage(&quot;Other player declined trade.&quot;);
        }
        trader.getInventory().addAll(traderItemsOffered);
        partner.getInventory().addAll(partnerItemsOffered);
        traderItemsOffered = null;
        partnerItemsOffered = null;
        trader.setTradeSession(null);
        partner.setTradePartner(null);
        endSession();
        trader.getInventory().refresh(trader.getInventory().getItems());
        partner.getInventory().refresh(partner.getInventory().getItems());
    }

    public void endSession() {
        trader.getInterfaceManager().closeScreenInterface();
        trader.getInterfaceManager().closeInventoryInterface();
        partner.getInterfaceManager().closeScreenInterface();
        partner.getInterfaceManager().closeInventoryInterface();
        traderItemsOffered = null;
        partnerItemsOffered = null;
        trader.setTradeSession(null);
        partner.setTradePartner(null);
        partner.setTradeSession(null);
        trader.setTradePartner(null);
        partner.setNextFaceEntity(null);
        trader.setNextFaceEntity(null);
    }
    private void giveItems() {
        if (!trader.getInventory().getItems().hasSpaceFor(partnerItemsOffered)) {
            partner.getPackets().sendGameMessage(
                    &quot;The other player does not have enough space in their inventory.&quot;);
            trader.getPackets().sendGameMessage(
                    &quot;You do not have enough space in your inventory.&quot;);
            tradeFailed(trader);
            return;
        } else if (!partner.getInventory().getItems().hasSpaceFor(traderItemsOffered)) {
            trader.getPackets().sendGameMessage(
                    &quot;The other player does not have enough space in their inventory.&quot;);
            partner.getPackets().sendGameMessage(
                    &quot;You do not have enough space in your inventory.&quot;);
            tradeFailed(partner);
            return;
        }
        for (Item itemAtIndex : traderItemsOffered.toArray()) {
            if (itemAtIndex != null) {
                partner.getInventory().addItem(itemAtIndex.getId(),
                        itemAtIndex.getAmount());
            }
        }
        for (Item itemAtIndex : partnerItemsOffered.toArray()) {
            if (itemAtIndex != null) {
                trader.getInventory().addItem(itemAtIndex.getId(),
                        itemAtIndex.getAmount());
            }
        }
        endSession();
        partner.getInventory().refresh(partner.getInventory().getItems());
        trader.getInventory().refresh(trader.getInventory().getItems());
    }

    @SuppressWarnings(&quot;rawtypes&quot;)
    public ItemsContainer getPlayerItemsOffered(Player p) {
        return (p.equals(trader) ? traderItemsOffered : partnerItemsOffered);
    }

    public enum TradeState {

        STATE_ONE, STATE_TWO
    }

    public void resetAccept() {
        partnerDidAccept = traderDidAccept = false;
        switch (currentState) {
            case STATE_ONE:
                partner.getPackets().sendIComponentText(335, 37, &quot;&quot;);
                trader.getPackets().sendIComponentText(335, 37, &quot;&quot;);
                break;
            case STATE_TWO:
                partner.getPackets().sendIComponentText(334, 34, &quot;&quot;);
                trader.getPackets().sendIComponentText(334, 34, &quot;&quot;);
                break;
        }
    }

    public void setCurrentState(TradeState currentState) {
        this.currentState = currentState;
    }

    public TradeState getState() {
        return currentState;
    }
}
[/code]</description>
    
    <lastBuildDate>Wed, 26 Sep 2012 04:18:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What to do this with error? please help need it ! i beg u</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>I’m positive, that message is displayed when a class uses collections but doesn’t cast whatever it is that’s stored in aforementioned collection.</p>
<p><a href="http://docs.oracle.com/javase/tutorial/reflect/class/classTrouble.html" class="onebox" target="_blank">http://docs.oracle.com/javase/tutorial/reflect/class/classTrouble.html</a></p>
<p>EDIT:</p>
<p>After looking at the source for a few minutes I think I’ve found how to make yourself admin. Open Player class and look for</p>
<pre><code class="lang-auto"></code></pre>
<p>You just need to put your username instead of the current username and it should work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/4</link>
        <pubDate>Wed, 26 Sep 2012 04:18:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462117-4</guid>
        <source url="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117.rss">What to do this with error? please help need it ! i beg u</source>
      </item>
      <item>
        <title>What to do this with error? please help need it ! i beg u</title>
        <dc:creator><![CDATA[@rithwikgopu rithwikgopu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rithwikgopu">@rithwikgopu</a> wrote:</p>
          <blockquote>
              <p>u sure? umm i though thats y why admin wasnt working</p>
<p>its nrs3server v2 all errors fixed but cant become myself admin lolo.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/3</link>
        <pubDate>Wed, 26 Sep 2012 04:11:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462117-3</guid>
        <source url="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117.rss">What to do this with error? please help need it ! i beg u</source>
      </item>
      <item>
        <title>What to do this with error? please help need it ! i beg u</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>That is not an error, that is simply a note. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/2</link>
        <pubDate>Wed, 26 Sep 2012 04:03:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462117-2</guid>
        <source url="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117.rss">What to do this with error? please help need it ! i beg u</source>
      </item>
      <item>
        <title>What to do this with error? please help need it ! i beg u</title>
        <dc:creator><![CDATA[@rithwikgopu rithwikgopu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rithwikgopu">@rithwikgopu</a> wrote:</p>
          <blockquote>
              <p>src/com/rs/game/player/content/trade.java uses unchecked or unsafe opreation please help :((((</p>
<p>this is my trade.java [code]package com.rs.game.player.content;</p>
<p>import java.io.Serializable;</p>
<p>import com.rs.game.item.Item;<br>
import com.rs.game.item.ItemsContainer;<br>
import com.rs.game.player.Player;<br>
import com.rs.utils.Utils;</p>
<p>/**</p>
<ul>
<li>
<p>Represents a trade session</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Titan<br>
*/<br>
public class Trade implements Serializable {</p>
<p>/**<br>
*<br>
*/<br>
private static final long serialVersionUID = 4297266601674588915L;<br>
private final Player trader, partner;<br>
private TradeState currentState = TradeState.STATE_ONE;<br>
private ItemsContainer traderItemsOffered = new ItemsContainer(28, false);<br>
private ItemsContainer partnerItemsOffered = new ItemsContainer(28, false);<br>
private boolean traderDidAccept, partnerDidAccept;<br>
private boolean traderDidDecline, partnerDidDecline;</p>
<p>public void untradeableItems(int itemId) {<br>
switch (itemId) {<br>
case 24135:<br>
}<br>
}<br>
/*</p>
<ul>
<li>Some info for the future, 44 = wealth transfer 43 = left limit 45 = right</li>
<li>limit<br>
*/</li>
</ul>
<p>public Trade(final Player trader, final Player partner) {<br>
this.trader = trader;<br>
this.partner = partner;<br>
trader.getTemporaryAttributtes().put(“didRequestTrade”, Boolean.FALSE);<br>
partner.getTemporaryAttributtes().put(“didRequestTrade”, Boolean.FALSE);<br>
}</p>
<p>public void start() {<br>
refreshScreen();<br>
openFirstTradeScreen(trader);<br>
openFirstTradeScreen(partner);<br>
refreshScreen();<br>
}</p>
<p>public Player getPartner() {<br>
return partner;<br>
}</p>
<p>public void openFirstTradeScreen(Player p) {<br>
p.getInterfaceManager().sendInventoryInterface(336);<br>
p.getInterfaceManager().sendInterface(335);<br>
p.getPackets().sendOptions§;<br>
p.getPackets().sendItems(95, false, traderItemsOffered);<br>
p.getPackets().sendItems(95, true, partnerItemsOffered);<br>
String name = p.equals(trader) ? partner.getUsername() : trader.getUsername();<br>
p.getPackets().sendIComponentText(335, 37, “”);<br>
p.getPackets().sendIComponentText(335, 15, "Trading with: " + Utils.formatPlayerNameForDisplay(name));<br>
p.getPackets().sendIComponentText(335, 22, Utils.formatPlayerNameForDisplay(name));<br>
}</p>
<p>public void openSecondTradeScreen(Player p) {<br>
traderDidDecline = false;<br>
partnerDidDecline = false;<br>
currentState = TradeState.STATE_TWO;<br>
partnerDidAccept = false;<br>
traderDidAccept = false;<br>
p.getInterfaceManager().sendInterface(334);<br>
p.getPackets().sendIComponentText(334,54,"&lt;col=00FFFF&gt;Trading with:<br>&lt;col=00FFFF&gt;"<br>
+ Utils.formatPlayerNameForDisplay(p.equals(trader) ? partner.getUsername()<br>
: trader.getUsername()));<br>
p.getPackets().sendIComponentText(334, 34,<br>
“Are you sure you want to make this trade?”);<br>
}</p>
<p>public void offerItem(Player pl, int slot, int amt) {<br>
if (currentState.equals(TradeState.STATE_ONE)) {<br>
if (pl.equals(trader)) {<br>
if (pl.getInventory().getItem(slot) == null) {<br>
return;<br>
}<br>
Item item = new Item(pl.getInventory().getItem(slot).getId(),<br>
amt);<br>
if (item != null) {<br>
if (!ItemConstants.isTradeable(item)) {<br>
pl.sendMessage(“You cannot trade this item!”);<br>
return;<br>
} else {<br>
if (pl.getInventory().getItems().getNumberOf(item.getId()) &lt; amt) {<br>
if (item.getDefinitions().isNoted()<br>
|| item.getDefinitions().isStackable()) {<br>
amt = pl.getInventory().getItems().lookup(item.getId()).getAmount();<br>
} else {<br>
amt = pl.getInventory().getItems().getNumberOf(item.getId());<br>
}<br>
item.setAmount(amt);</p>
<pre><code>                 }
                 if (0 &gt;= amt) {
                     return;
                 }
                 if (traderItemsOffered.getFreeSlots() &lt; amt
                         &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isNoted()
                         &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isStackable()) {
                     item.setAmount(traderItemsOffered.getFreeSlots());
                 }
                 traderItemsOffered.add(item);
                 pl.getInventory().deleteItem(
                         pl.getInventory().getItem(slot).getId(), amt);
                 pl.getInventory().refresh(pl.getInventory().getItems());
             }
         }
     } else if (pl.equals(partner)) {
         Item inventoryItem = pl.getInventory().getItem(slot);
         Item item = inventoryItem != null ? new Item(
                 inventoryItem.getId(), amt) : null;
         if (item != null) {

             if (!ItemConstants.isTradeable(item)) {
                 pl.sendMessage("You cannot trade this item!");
                 return;
             }

             if (pl.getInventory().getItems().getNumberOf(item.getId()) &lt; amt) {
                 if (item.getDefinitions().isNoted()
                         || item.getDefinitions().isStackable()) {
                     amt = pl.getInventory().getItems().lookup(item.getId()).getAmount();
                 } else {
                     amt = pl.getInventory().getItems().getNumberOf(item.getId());
                 }
                 item.setAmount(amt);

             }
             if (0 &gt;= amt) {
                 return;
             }
             if (partnerItemsOffered.getFreeSlots() &lt; amt
                     &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isNoted()
                     &amp;&amp; !pl.getInventory().getItem(slot).getDefinitions().isStackable()) {
                 item.setAmount(partnerItemsOffered.getFreeSlots());
             }
             partnerItemsOffered.add(item);
             pl.getInventory().deleteItem(item.getId(), item.getAmount());
             pl.getInventory().refresh(pl.getInventory().getItems());
         }
     }
     refreshScreen();
 }
</code></pre>
<p>}</p>
<p>public static void TradeIcons(Player player, int slot) {<br>
Object[] tparams4 = new Object[]{slot, 7, 4, 21954593};<br>
player.getPackets().sendRunScript(143, tparams4);<br>
}</p>
<p>public void removeItem(Player pl, int slot, int amt) {<br>
if (currentState.equals(TradeState.STATE_ONE)) {<br>
if (pl.equals(trader)) {<br>
Item item = new Item(traderItemsOffered.get(slot).getId(), amt);<br>
if (item != null) {<br>
if (traderItemsOffered.getNumberOf(item.getId()) &lt; amt) {<br>
if (item.getDefinitions().isNoted()<br>
|| item.getDefinitions().isStackable()) {<br>
amt = traderItemsOffered.lookup(item.getId()).getAmount();<br>
} else {<br>
amt = traderItemsOffered.getNumberOf(item.getId());<br>
}<br>
item.setAmount(amt);</p>
<pre><code>             }
             if (0 &gt;= amt) {
                 return;
             }
             if (pl.getInventory().getFreeSlots() &lt; amt
                     &amp;&amp; !traderItemsOffered.get(slot).getDefinitions().isNoted()
                     &amp;&amp; !traderItemsOffered.get(slot).getDefinitions().isStackable()) {
                 item.setAmount(pl.getInventory().getFreeSlots());
             }
             trader.getInventory().addItem(
                     new Item(traderItemsOffered.get(slot).getId(), item.getAmount()));
             trader.getInventory().refresh(
                     trader.getInventory().getItems());

             traderItemsOffered.remove(item);
             TradeIcons(partner, slot);
             resetAccept();
         }
     } else if (pl.equals(partner)) {

         Item item = new Item(partnerItemsOffered.get(slot).getId(), amt);
         if (item != null) {
             if (partnerItemsOffered.getNumberOf(item.getId()) &lt; amt) {
                 if (item.getDefinitions().isNoted()
                         || item.getDefinitions().isStackable()) {
                     amt = partnerItemsOffered.lookup(item.getId()).getAmount();
                 } else {
                     amt = partnerItemsOffered.getNumberOf(item.getId());
                 }
                 item.setAmount(amt);

             }
             if (0 &gt;= amt) {
                 return;
             }
             if (pl.getInventory().getFreeSlots() &lt; amt
                     &amp;&amp; !partnerItemsOffered.get(slot).getDefinitions().isNoted()
                     &amp;&amp; !partnerItemsOffered.get(slot).getDefinitions().isStackable()) {
                 item.setAmount(pl.getInventory().getFreeSlots());
             }
             partner.getInventory().addItem(
                     new Item(partnerItemsOffered.get(slot).getId(),
                     item.getAmount()));
             partner.getInventory().refresh(
                     partner.getInventory().getItems());
             partnerItemsOffered.remove(item);
             resetAccept();
         }
     }
     refreshScreen();
 }
</code></pre>
<p>}</p>
<p>private void refreshScreen() {<br>
trader.getPackets().sendItems(90, false, traderItemsOffered);<br>
trader.getPackets().sendItems(90, true, partnerItemsOffered);<br>
partner.getPackets().sendItems(90, false, partnerItemsOffered);<br>
partner.getPackets().sendItems(90, true, traderItemsOffered);<br>
String name = trader.getUsername();<br>
partner.getPackets().sendIComponentText(335, 22,Utils.formatPlayerNameForDisplay(name));<br>
String name1 = partner.getUsername();<br>
trader.getPackets().sendIComponentText(335, 22,Utils.formatPlayerNameForDisplay(name1));<br>
trader.getPackets().sendIComponentText(335, 21, " has " + partner.getInventory().getFreeSlots() + " free inventory slots.");<br>
partner.getPackets().sendIComponentText(335, 21, " has " + trader.getInventory().getFreeSlots() + " free inventory slots.");<br>
trader.getPackets().sendGlobalConfig(729, getTradersItemsValue());<br>
trader.getPackets().sendGlobalConfig(697, getPartnersItemsValue());<br>
partner.getPackets().sendGlobalConfig(729, getPartnersItemsValue());<br>
partner.getPackets().sendGlobalConfig(697, getTradersItemsValue());<br>
}</p>
<p>private int getTradersItemsValue() {<br>
int initialPrice = 0;<br>
for (Item item : traderItemsOffered.toArray()) {<br>
if (item != null) {<br>
initialPrice += item.getDefinitions().getValue()<br>
* item.getAmount();<br>
}<br>
}<br>
return initialPrice;<br>
}</p>
<p>private int getPartnersItemsValue() {<br>
int initialPrice = 0;<br>
for (Item item : partnerItemsOffered.toArray()) {<br>
if (item != null) {<br>
initialPrice += item.getDefinitions().getValue()<br>
* item.getAmount();<br>
}<br>
}<br>
return initialPrice;<br>
}</p>
<p><span class="mention">@SuppressWarnings</span>(“unused”)<br>
private void flashSlot(Player player, int slot) {<br>
player.getPackets().sendRunScript(<br>
143,<br>
new Object[]{slot, 7, 4,<br>
player.equals(trader) ? 21954591 : 21954593}); // screens.<br>
}</p>
<p>public void acceptPressed(Player pl) {<br>
if (!traderDidAccept &amp;&amp; pl.equals(trader)) {<br>
traderDidAccept = true;<br>
} else if (!partnerDidAccept &amp;&amp; pl.equals(partner)) {<br>
partnerDidAccept = true;<br>
}<br>
switch (currentState) {<br>
case STATE_ONE:<br>
if (pl.equals(trader)) {<br>
if (partnerDidAccept &amp;&amp; traderDidAccept) {<br>
openSecondTradeScreen(trader);<br>
openSecondTradeScreen(partner);<br>
} else {<br>
trader.getPackets().sendIComponentText(335, 37,<br>
“Waiting for other player…”);<br>
partner.getPackets().sendIComponentText(335, 37,<br>
“The other player has accepted”);<br>
}<br>
} else if (pl.equals(partner)) {<br>
if (partnerDidAccept &amp;&amp; traderDidAccept) {<br>
openSecondTradeScreen(trader);<br>
openSecondTradeScreen(partner);<br>
} else {<br>
partner.getPackets().sendIComponentText(335, 37,<br>
“Waiting for other player…”);<br>
trader.getPackets().sendIComponentText(335, 37,<br>
“The other player has accepted”);<br>
}<br>
}<br>
break;</p>
<pre><code>     case STATE_TWO:
         if (pl.equals(trader)) {
             if (partnerDidAccept &amp;&amp; traderDidAccept) {
                 giveItems();
             } else {
                 trader.getPackets().sendIComponentText(334, 34,
                         "Waiting for other player...");
                 partner.getPackets().sendIComponentText(334, 34,
                         "The other player has accepted");
             }
         } else if (pl.equals(partner)) {
             if (partnerDidAccept &amp;&amp; traderDidAccept) {
                 giveItems();
             } else {
                 partner.getPackets().sendIComponentText(334, 34,
                         "Waiting for other player...");
                 trader.getPackets().sendIComponentText(334, 34,
                         "The other player has accepted");
             }
         }
         break;
 }
</code></pre>
<p>}</p>
<p>public void tradeFailed(Player pl) {<br>
if (!traderDidDecline &amp;&amp; pl.equals(partner)) {<br>
trader.sendMessage(“Other player declined trade.”);<br>
} else if (!partnerDidDecline &amp;&amp; pl.equals(trader)) {<br>
partner.sendMessage(“Other player declined trade.”);<br>
}<br>
trader.getInventory().addAll(traderItemsOffered);<br>
partner.getInventory().addAll(partnerItemsOffered);<br>
traderItemsOffered = null;<br>
partnerItemsOffered = null;<br>
trader.setTradeSession(null);<br>
partner.setTradePartner(null);<br>
endSession();<br>
trader.getInventory().refresh(trader.getInventory().getItems());<br>
partner.getInventory().refresh(partner.getInventory().getItems());<br>
}</p>
<p>public void endSession() {<br>
trader.getInterfaceManager().closeScreenInterface();<br>
trader.getInterfaceManager().closeInventoryInterface();<br>
partner.getInterfaceManager().closeScreenInterface();<br>
partner.getInterfaceManager().closeInventoryInterface();<br>
traderItemsOffered = null;<br>
partnerItemsOffered = null;<br>
trader.setTradeSession(null);<br>
partner.setTradePartner(null);<br>
partner.setTradeSession(null);<br>
trader.setTradePartner(null);<br>
partner.setNextFaceEntity(null);<br>
trader.setNextFaceEntity(null);<br>
}<br>
private void giveItems() {<br>
if (!trader.getInventory().getItems().hasSpaceFor(partnerItemsOffered)) {<br>
partner.getPackets().sendGameMessage(<br>
“The other player does not have enough space in their inventory.”);<br>
trader.getPackets().sendGameMessage(<br>
“You do not have enough space in your inventory.”);<br>
tradeFailed(trader);<br>
return;<br>
} else if (!partner.getInventory().getItems().hasSpaceFor(traderItemsOffered)) {<br>
trader.getPackets().sendGameMessage(<br>
“The other player does not have enough space in their inventory.”);<br>
partner.getPackets().sendGameMessage(<br>
“You do not have enough space in your inventory.”);<br>
tradeFailed(partner);<br>
return;<br>
}<br>
for (Item itemAtIndex : traderItemsOffered.toArray()) {<br>
if (itemAtIndex != null) {<br>
partner.getInventory().addItem(itemAtIndex.getId(),<br>
itemAtIndex.getAmount());<br>
}<br>
}<br>
for (Item itemAtIndex : partnerItemsOffered.toArray()) {<br>
if (itemAtIndex != null) {<br>
trader.getInventory().addItem(itemAtIndex.getId(),<br>
itemAtIndex.getAmount());<br>
}<br>
}<br>
endSession();<br>
partner.getInventory().refresh(partner.getInventory().getItems());<br>
trader.getInventory().refresh(trader.getInventory().getItems());<br>
}</p>
<p><span class="mention">@SuppressWarnings</span>(“rawtypes”)<br>
public ItemsContainer getPlayerItemsOffered(Player p) {<br>
return (p.equals(trader) ? traderItemsOffered : partnerItemsOffered);<br>
}</p>
<p>public enum TradeState {</p>
<pre><code> STATE_ONE, STATE_TWO
</code></pre>
<p>}</p>
<p>public void resetAccept() {<br>
partnerDidAccept = traderDidAccept = false;<br>
switch (currentState) {<br>
case STATE_ONE:<br>
partner.getPackets().sendIComponentText(335, 37, “”);<br>
trader.getPackets().sendIComponentText(335, 37, “”);<br>
break;<br>
case STATE_TWO:<br>
partner.getPackets().sendIComponentText(334, 34, “”);<br>
trader.getPackets().sendIComponentText(334, 34, “”);<br>
break;<br>
}<br>
}</p>
<p>public void setCurrentState(TradeState currentState) {<br>
this.currentState = currentState;<br>
}</p>
<p>public TradeState getState() {<br>
return currentState;<br>
}<br>
}<br>
[/code]</p>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117/1</link>
        <pubDate>Wed, 26 Sep 2012 04:00:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462117-1</guid>
        <source url="https://forum.moparisthebest.com/t/what-to-do-this-with-error-please-help-need-it-i-beg-u/462117.rss">What to do this with error? please help need it ! i beg u</source>
      </item>
  </channel>
</rss>
