<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Intersections from point to point</title>
    <link>https://forum.moparisthebest.com/t/intersections-from-point-to-point/378776</link>
    <description>I am writing a program, similar to what a gps routing system does.

red = the person
green = waypoint
blue = landmark

what i want to do is to calculate which landmarks i intersect on my journey, what would be the most efficient way for me to do this? currently i work out the angle and keep moving 1px along the line and add any new tiles to the list, however it is quite slow and nasty, any thoughts / comments appreciated.

what i am also now stuck on is drawing the angles and working the angles out from the previous points, ill post my code for working this out in a second.

[img]http://sphotos.ak.fbcdn.net/hphotos-ak-snc6/hs244.snc6/179264_10150354113565184_890865183_16467387_5368487_n.jpg[/img]

[code]
public RobotInstruction move(Tile next) {
		Tile current = getLocation();
		
		System.out.println(&quot;from: &quot; + current + &quot; to &quot; + next);
			
		Line2D line = new Line2D.Double(current.getX(), current.getY(), next.getX(), next.getY());

		for(Landmark l : Simulator.getLandmarkList().getList()) {
			Rectangle landmarkRect = new Rectangle(l.getX(), l.getY(), 20, 20);
			if(line.intersects(landmarkRect)) {
				visited.add(l);
			}
		}
		
		int l1x = next.getX() - current.getX();
		int l1y = next.getY() - current.getY();
		double ang = Math.atan2(l1y, l1x);
		
		double distance = current.distance(next);
		System.out.println(&quot;distance: &quot; + distance + &quot;\n&quot;);
		
		this.distance += distance;		
		this.currentLocation = next;

		return new RobotInstruction(ang, distance);
	}
[/code]

edit:

fixed it with this code:
[code]				double x_difference = next.getX() - current.getX();
				double y_difference = next.getY() - current.getY();
				double angle = previousAngle - (previousAngle = Math.atan2(y_difference, x_difference));
				angle = Math.toDegrees(angle);[/code]</description>
    
    <lastBuildDate>Mon, 17 Jan 2011 16:01:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/intersections-from-point-to-point/378776.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Intersections from point to point</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>I am writing a program, similar to what a gps routing system does.</p>
<p>red = the person<br>
green = waypoint<br>
blue = landmark</p>
<p>what i want to do is to calculate which landmarks i intersect on my journey, what would be the most efficient way for me to do this? currently i work out the angle and keep moving 1px along the line and add any new tiles to the list, however it is quite slow and nasty, any thoughts / comments appreciated.</p>
<p>what i am also now stuck on is drawing the angles and working the angles out from the previous points, ill post my code for working this out in a second.</p>
<p><img src="http://sphotos.ak.fbcdn.net/hphotos-ak-snc6/hs244.snc6/179264_10150354113565184_890865183_16467387_5368487_n.jpg" alt width="" height=""></p>
<pre><code class="lang-auto">public RobotInstruction move(Tile next) {
		Tile current = getLocation();
		
		System.out.println("from: " + current + " to " + next);
			
		Line2D line = new Line2D.Double(current.getX(), current.getY(), next.getX(), next.getY());

		for(Landmark l : Simulator.getLandmarkList().getList()) {
			Rectangle landmarkRect = new Rectangle(l.getX(), l.getY(), 20, 20);
			if(line.intersects(landmarkRect)) {
				visited.add(l);
			}
		}
		
		int l1x = next.getX() - current.getX();
		int l1y = next.getY() - current.getY();
		double ang = Math.atan2(l1y, l1x);
		
		double distance = current.distance(next);
		System.out.println("distance: " + distance + "\n");
		
		this.distance += distance;		
		this.currentLocation = next;

		return new RobotInstruction(ang, distance);
	}</code></pre>
<p>edit:</p>
<p>fixed it with this code:</p>
<p><code>				double x_difference = next.getX() - current.getX();
				double y_difference = next.getY() - current.getY();
				double angle = previousAngle - (previousAngle = Math.atan2(y_difference, x_difference));
				angle = Math.toDegrees(angle);</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/intersections-from-point-to-point/378776/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/intersections-from-point-to-point/378776/1</link>
        <pubDate>Mon, 17 Jan 2011 16:01:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-378776-1</guid>
        <source url="https://forum.moparisthebest.com/t/intersections-from-point-to-point/378776.rss">Intersections from point to point</source>
      </item>
  </channel>
</rss>
