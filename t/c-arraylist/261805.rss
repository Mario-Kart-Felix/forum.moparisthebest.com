<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] &#39;arraylist&#39;</title>
    <link>https://forum.moparisthebest.com/t/c-arraylist/261805</link>
    <description>This linked list acts like Java&#39;s Vector class. When the internal array reaches its limit, it duplicates the maximum storage.

I made this quite a while ago, and I saw it on my computer, so I thought I&#39;d post it:
[code]
#include &lt;stdlib.h&gt;

typedef struct {
    int index;
    int max;
    void **a;
} list;

list arraylist()
{
    list alist;

    alist.a = malloc(10);
    alist.max = 10;
    alist.index = 0;

    return alist;
}

int size(list *l)
{
    return l-&gt;index-1;
}

void add(list *l, void *obj)
{
    if (l-&gt;index &gt; l-&gt;max)
        realloc(&amp;(l-&gt;a), l-&gt;max*2);
 
    l-&gt;max *= 2;
    l-&gt;a[l-&gt;index++] = obj;
}

void delete(list *l, int index)
{
    l-&gt;a[index] = NULL;

    int i = index;
    int a;
    for (a = 0; a &lt; (l-&gt;index - index)-1; a++, i++)
        l-&gt;a[i] = l-&gt;a[i+1];

    l-&gt;index--;

}

void *get(list *l, int index)
{
    return l-&gt;a[index];
}


void clear(list *l)
{
    int i;
    for (i = 0; i &lt; l-&gt;index; i++)
        l-&gt;a[i] = NULL;
}

void dispose(list *l)
{
    free(l-&gt;a);
}
[/code]</description>
    
    <lastBuildDate>Mon, 16 Feb 2009 08:21:11 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-arraylist/261805.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>[quote=“frank_, post:5, topic:261805”][quote author=la­wl link=topic=345741.msg2664899#msg2664899 date=1234479872]<br>
probably would make more sense to have arraylist() return a pointer<br>
[/quote]this</p>
<p>[quote author=la­wl link=topic=345741.msg2664899#msg2664899 date=1234479872]<br>
or just use c++ i dont see why you wouldnt<br>
[/quote]not this[/quote]</p>
<p>No, it would make more sense and be less wasteful to have the struct definition outside of the function, and then a pointer to it passed as an actual argument. That way, you can modify it after dereferencing and have the function (err I forgot if it’s considered a procedure in C at this point or maybe void is thought of as an actual value?) return void. If you just returned a pointer to it, you’ll come across the problem that yakman was thinking of i.e. local variables are allocated on the current stack frame, and once the stack frame returns, all local variables in the store are reclaimed. And like yakman pointed out, to combat that, you’d have to make it static (but that would be retarded in this context.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/9</link>
        <pubDate>Mon, 16 Feb 2009 08:21:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>oh yes, thats right</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/8</link>
        <pubDate>Fri, 13 Feb 2009 14:07:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“yakman, post:6, topic:261805”]the memory for the <span class="bbcode-i">alist</span> variable gets used for other things when the function returns, so you cant just return it like that.<br>
you have to declare it statically or allocate with malloc()[/quote]what.</p>
<p>the struct will be copied, so will the values of its members</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/7</link>
        <pubDate>Fri, 13 Feb 2009 12:31:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>[quote=“abrahm2119, post:1, topic:261805”][code]<br>
list arraylist()<br>
{<br>
list alist;</p>
<pre><code>alist.a = malloc(10);
alist.max = 10;
alist.index = 0;

return alist;
</code></pre>
<p>}<br>
[/code][/quote]</p>
<p>the memory for the <span class="bbcode-i">alist</span> variable gets used for other things when the function returns, so you cant just return it like that.<br>
you have to declare it statically or allocate with malloc()</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/6</link>
        <pubDate>Fri, 13 Feb 2009 11:40:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“la­wl, post:3, topic:261805”]probably would make more sense to have arraylist() return a pointer[/quote]this</p>
<p>[quote=“la­wl, post:3, topic:261805”]or just use c++ i dont see why you wouldnt[/quote]not this</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/5</link>
        <pubDate>Thu, 12 Feb 2009 23:49:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@abrahm2119 abrahm2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abrahm2119">@abrahm2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“yakman, post:2, topic:261805”]are you sure this worked for you?<br>
theres some parts which look like they dont.[/quote]yes, it works perfectly. you can try it out yourself.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/4</link>
        <pubDate>Thu, 12 Feb 2009 23:36:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>probably would make more sense to have arraylist() return a pointer</p>
<p>or just use c++ i dont see why you wouldnt</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/3</link>
        <pubDate>Thu, 12 Feb 2009 23:04:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>are you sure this worked for you?<br>
theres some parts which look like they dont.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/2</link>
        <pubDate>Thu, 12 Feb 2009 23:00:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
      <item>
        <title>[C] &#39;arraylist&#39;</title>
        <dc:creator><![CDATA[@abrahm2119 abrahm2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abrahm2119">@abrahm2119</a> wrote:</p>
          <blockquote>
              <p>This linked list acts like Java’s Vector class. When the internal array reaches its limit, it duplicates the maximum storage.</p>
<p>I made this quite a while ago, and I saw it on my computer, so I thought I’d post it:</p>
<pre><code class="lang-auto">#include &lt;stdlib.h&gt;

typedef struct {
    int index;
    int max;
    void **a;
} list;

list arraylist()
{
    list alist;

    alist.a = malloc(10);
    alist.max = 10;
    alist.index = 0;

    return alist;
}

int size(list *l)
{
    return l-&gt;index-1;
}

void add(list *l, void *obj)
{
    if (l-&gt;index &gt; l-&gt;max)
        realloc(&amp;(l-&gt;a), l-&gt;max*2);
 
    l-&gt;max *= 2;
    l-&gt;a[l-&gt;index++] = obj;
}

void delete(list *l, int index)
{
    l-&gt;a[index] = NULL;

    int i = index;
    int a;
    for (a = 0; a &lt; (l-&gt;index - index)-1; a++, i++)
        l-&gt;a[i] = l-&gt;a[i+1];

    l-&gt;index--;

}

void *get(list *l, int index)
{
    return l-&gt;a[index];
}


void clear(list *l)
{
    int i;
    for (i = 0; i &lt; l-&gt;index; i++)
        l-&gt;a[i] = NULL;
}

void dispose(list *l)
{
    free(l-&gt;a);
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-arraylist/261805/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-arraylist/261805/1</link>
        <pubDate>Thu, 12 Feb 2009 20:48:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261805-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-arraylist/261805.rss">[C] &#39;arraylist&#39;</source>
      </item>
  </channel>
</rss>
