<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Animation - how it works</title>
    <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603</link>
    <description>This is for people that want to know how the animation system works, for hacking the old clients, or for writing their own game engine. 
I put it in this section because there is a general interest in how it works.
(and they wouldn&#39;t understand it on moparscape anyway)

You can either dowload this zip with everything included or just keep reading (or both). The zip includes the animation file specification and further reading.

Zipfile: http://uppit.com/ZH669V

--------------------------

Animation and anim files.

Most animation in the client is done with emotes.
Emotes are numbers that represent a list of frames.
This list of frames is kept in seq.dat, the emote number is a pointer to a list within seq.dat.
Seq.dat also contains variable data which we will ignore for now.

The list of frames in seq.dat is a list of pointers used both to access ANIM_INDEX and the frame within the file. The ANIM_INDEX contains file number data, it is a lookup table used to tell the client which file the frame is in.
  
The anim files themselves contain all of the data used to set up each frame (or pose).
The first part of the anim file contains frame ID&#39;s and a number used to determine how many skin lists to use.

The second part of the file contains a list of flags, the number of flags is the same as the number of skin lists to use.
Each flag uses the first 3 bits to determine wether the x,y,z axis are used. This list of flags is transversed from beginning to end, a set flag triggers an action according to the contents of the skin list at that position. Thus the 4th flag with trigger the action of the 4th  skin list.

The third part of the file contains the rotation/translation/other ammounts for the axes used.

The forth part of the file contains a byte for each of the frames - these are the length of time used to display each pose. 

the fifth part of the file is a control structure used to set up the animation and contains 2 parts, a flag, and a list of skin numbers.

The flag is used to determine the &#39;action&#39; of the skin list. 
Type 0 sets the rotation point. 
Type 1 is used to tell the list is to be used for translations. 
Type 2 is used to tell the list is to be used for rotations.
Type 3 is for scaling. 
Type 5 is used to set the alpha. 
There is no type 4. 
Types 0,1,2,3 use vertex skins. 
Type 5 uses triangle skins.

NOTE:The rotation points can be adjusted by the values loaded from part 3 of the file.

The skin lists simply contains a list where each entry contains a set of vertex skin numbers.

eg.
example of skin list 
Lis_numt= 0 : type= 0 : length= 1 : list = 0
.
.
List_num= 10 : type= 0 : length= 1 : list = 25
List_num= 11 : type= 1 : length= 7 : list = 26 23 22 25 28 24 68
List_num= 12 : type= 2 : length= 7 : list = 26 23 22 25 28 24 68
.
.
List_num= 15 : type= 0 : length= 2 : list = 3 2


example of a list of flags 
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 - list entry
00 00 00 00 00 00 00 00 00 00 01 00 07 00 00 00 - actual flags


If the list of flags is traversed we find that the first flag set is flag 10, The skin list number 10 is type 0, so the rotation point is set to the center of  the vertices with a vertex skin number of 25 (left shoulder).
The second flag that is set is flag 12, the skin list number 12 is type 2, this is a rotation, since the flag is 7 the rotation is in all 3 axes. (the ammounts of rotation were loaded from part 3 of the file).
The list of flags would continue to be traversed to the end.

You will clearly see that the point of rotation is set BEFORE the rotation is performed, and that all the vertices with vertex skin numbers 26 23 22 25 28 24 68 are rotated about the center of the vertices with vertex skin number 25. 
What actually happened was the left arm was rotated at the shoulder.

By creating a list of skin lists in this way, the model can be made to set the rotation points BEFORE the rotation occurs. 
The list could be set up with the elbow rotated before the shoulder or vice versa, but a strict order must be followed to set the rotation points before translations and before rotations occur.

Another thing to point out is that there is no skeleton, the &#39;joints&#39; are simply rotation points that are calculated from the vertex skin numbers and any offsets determined by the flag. (offsets can be 0 and -ve)

ADDITIONAL :-

The skin lists. 
The skin lists are the core of the animation, these are the things that allow you to do/not do things. 

lets take a closer look at the skin lists with an example.
.
List= 3 : type= 0 : length= 2 : 3 2  - set rotation point to neck
List= 4 : type= 2 : length= 2 : 1 3 - rotate head
. 
These 2 are part of the generic skin lists jagex use for character animation. we have a type 0 (set reference point) and a type 2 (rotate parts). 
This allows us to rotate the head (with hats) using the neck as a pivot. 
However the more interesting thing about this is what it can&#39;t do, there is no type 1, we can&#39;t translate the head using the neck as a reference point. Neither can we scale or set the alpha.
So lets add a list that will allow us to giraffe the character, ie translate the head above the model.
Easy we add a new list entry, being careful to put it AFTER the set refernce point.
.
List= 3 : type= 0 : length= 2 : 3 2  - set reference point to neck
List= 4 : type= 1 : length= 2 : 1 3 - translate head
List= 5 : type= 2 : length= 2 : 1 3 - rotate head
. 
We can now make a frame to giraffe the character, just set up the skin flags, translation ammounts and frame duration.
We only translate in one axis so the skin flags would be :-
00 00 00 01 04 00 00 00............
entry 5 is 04 because we translate in the Z axis.

 :)</description>
    
    <lastBuildDate>Fri, 06 Feb 2009 22:49:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Animation - how it works</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>This is from the 317 client, the animation system is as basic as you can get, and I doubt it has changed that much in the current client, if at all.<br>
Why would you change it if the modern GPU’s make it faster? Just use opengl and throw the calculations at the graphics card.</p>
<p>This is one of the simplest methods of animation you’ll find, no need for IK or skinning to bones, and its smaller than md2 style animations.<br>
Quite fast as well, when you precalculate the sin/cos values.</p>
<p>Quite a clever solution to running 3D, in java, on a browser, don’t you think?<br>
The only drawback is the vertex skinning of the models, and we got around that using free software <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Not made a viewer, it’s not on my priority list. You could do it in java and jogl. It wouldn’t take much to turn a viewer into a poser style program so that you could save frames. Make sure you can copy and paste frames to make life simpler, making each pose by moving the original model is a bitch.</p>
<hr>
<p>Had a look at the animation format for October 2007 (post game engine update)<br>
You’ll notice something changed but it’s still the same style.</p>
<pre><code class="lang-auto">03 7A 05
03 7A 0A 
03 7A 0C
03 7A 0C 
03 7A 0C
03 7A 0C 
03 7A 0C
03 7A 0A 
03 7A 0A
03 7A 0C 
03 7A 0C
03 7A 0C 
03 7A 0C
03 7A 0C 
03 7A 0A
03 7A 04 

00 00 00 00 01
00 04 00 04 00 01 00 03 00 03
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 01 01 00 03 00 03 00 04
00 04 00 04 01 01 00 03 00 03 
00 04 00 04 01 01 00 03 00 03
00 04 00 04 01 01 00 03 00 03 00 04 
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03 00 04
00 04 00 04 00 01 00 03 00 03
00 04 00 04


42 
C08C BF74 41 C089 C089 C089 C089 
C09C BF64 42 C092 C092 C092 C092 3F 
C0AB BF55 43 C09B C09B C09B C09B 3E
C0BB BF45 44 C0A5 C0A5 C0A5 C0A5 3D
C0CA BF36 43 C09B C09B C09B C09B 3E
C0DA BF26 41 42 C092 C092 C092 C092 3F 
C0EA BF16 42 41 C089 C089 C089 C089 
4F 31 41 41 C089 C089 C089 C089 
5F 21 41 42 C092 C092 C092 C092 3F 
6E 12 43 C09B C09B C09B C09B 3E 
7E 02 44 C0A5 C0A5 C0A5 C0A5 3D
C04D BFB3 43 C09B C09B C09B C09B 3E
C05D BFA3 42 C092 C092 C092 C092 3F
C06D BF93 41 C089 C089 C089 C089 
C07D BF83 

(is the data below ordered correctly? - dunno)
0000 0003 0000 0000 0000 0000 
0000 0000 0000 0000 0000 0000 
0000 0000 0000 0000 0000 0000 
0000 0000 0000 0000 0000 0000 
0000 0000 0000 0000 0000 0000 
0000 0000 0000 0005 0000 0005 
0000 0002 0000 0000 0000 0000 
0000 0000 0000 0000 FFFF FFFE 
0000 0000 0000 0002 0000 0000 
0000 0000 0000 0000 0000 0000 
FFFF FFFE FFFF FFFA 0000 0001 
0000 000C 0000 0001 0000 0000 
0000 0000 0000 0000 0000 0001 
FFFF FFFF FFFF FFFE 0000 0001 
FFFF FFFF 0000 0000 0000 0002 
0000 0000 FFFF FFFF FFFF FFF7 

03  -- whats this lonely byte do?
</code></pre>
<p>If you understood the 317 format, you’ll notice the flags could have been formated like the file above. They’ve also dumped the frame IDs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/animation-how-it-works/260603/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603/5</link>
        <pubDate>Fri, 06 Feb 2009 22:49:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260603-5</guid>
        <source url="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss">Animation - how it works</source>
      </item>
      <item>
        <title>Animation - how it works</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>Unhandled, i believe this is the latest, MrPotatoHead wrote a animation viewer?<br>
or am i going insane.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/animation-how-it-works/260603/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603/4</link>
        <pubDate>Fri, 06 Feb 2009 12:48:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260603-4</guid>
        <source url="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss">Animation - how it works</source>
      </item>
      <item>
        <title>Animation - how it works</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>you’re a cm frank_, grow the fuck up</p>
<p><a class="mention" href="/u/mrpotatohead">@MrPotatoHead</a>, how old is this information? The system seems somewhat basic compared to some of the animation middleware products currently used in games, but I suppose with the lack of a physics engine it would suit their needs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/animation-how-it-works/260603/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603/3</link>
        <pubDate>Fri, 06 Feb 2009 12:22:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260603-3</guid>
        <source url="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss">Animation - how it works</source>
      </item>
      <item>
        <title>Animation - how it works</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>ugghhh</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/animation-how-it-works/260603/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603/2</link>
        <pubDate>Fri, 06 Feb 2009 03:34:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260603-2</guid>
        <source url="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss">Animation - how it works</source>
      </item>
      <item>
        <title>Animation - how it works</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>This is for people that want to know how the animation system works, for hacking the old clients, or for writing their own game engine.<br>
I put it in this section because there is a general interest in how it works.<br>
(and they wouldn’t understand it on moparscape anyway)</p>
<p>You can either dowload this zip with everything included or just keep reading (or both). The zip includes the animation file specification and further reading.</p>
<p>Zipfile: <a href="http://uppit.com/ZH669V" rel="nofollow noopener">http://uppit.com/ZH669V</a></p>
<hr>
<p>Animation and anim files.</p>
<p>Most animation in the client is done with emotes.<br>
Emotes are numbers that represent a list of frames.<br>
This list of frames is kept in seq.dat, the emote number is a pointer to a list within seq.dat.<br>
Seq.dat also contains variable data which we will ignore for now.</p>
<p>The list of frames in seq.dat is a list of pointers used both to access ANIM_INDEX and the frame within the file. The ANIM_INDEX contains file number data, it is a lookup table used to tell the client which file the frame is in.</p>
<p>The anim files themselves contain all of the data used to set up each frame (or pose).<br>
The first part of the anim file contains frame ID’s and a number used to determine how many skin lists to use.</p>
<p>The second part of the file contains a list of flags, the number of flags is the same as the number of skin lists to use.<br>
Each flag uses the first 3 bits to determine wether the x,y,z axis are used. This list of flags is transversed from beginning to end, a set flag triggers an action according to the contents of the skin list at that position. Thus the 4th flag with trigger the action of the 4th  skin list.</p>
<p>The third part of the file contains the rotation/translation/other ammounts for the axes used.</p>
<p>The forth part of the file contains a byte for each of the frames - these are the length of time used to display each pose.</p>
<p>the fifth part of the file is a control structure used to set up the animation and contains 2 parts, a flag, and a list of skin numbers.</p>
<p>The flag is used to determine the ‘action’ of the skin list.<br>
Type 0 sets the rotation point.<br>
Type 1 is used to tell the list is to be used for translations.<br>
Type 2 is used to tell the list is to be used for rotations.<br>
Type 3 is for scaling.<br>
Type 5 is used to set the alpha.<br>
There is no type 4.<br>
Types 0,1,2,3 use vertex skins.<br>
Type 5 uses triangle skins.</p>
<p>NOTE:The rotation points can be adjusted by the values loaded from part 3 of the file.</p>
<p>The skin lists simply contains a list where each entry contains a set of vertex skin numbers.</p>
<p>eg.<br>
example of skin list<br>
Lis_numt= 0 : type= 0 : length= 1 : list = 0<br>
.<br>
.<br>
List_num= 10 : type= 0 : length= 1 : list = 25<br>
List_num= 11 : type= 1 : length= 7 : list = 26 23 22 25 28 24 68<br>
List_num= 12 : type= 2 : length= 7 : list = 26 23 22 25 28 24 68<br>
.<br>
.<br>
List_num= 15 : type= 0 : length= 2 : list = 3 2</p>
<p>example of a list of flags<br>
0  1  2  3  4  5  6  7  8  9  10 11 12 13 14 15 - list entry<br>
00 00 00 00 00 00 00 00 00 00 01 00 07 00 00 00 - actual flags</p>
<p>If the list of flags is traversed we find that the first flag set is flag 10, The skin list number 10 is type 0, so the rotation point is set to the center of  the vertices with a vertex skin number of 25 (left shoulder).<br>
The second flag that is set is flag 12, the skin list number 12 is type 2, this is a rotation, since the flag is 7 the rotation is in all 3 axes. (the ammounts of rotation were loaded from part 3 of the file).<br>
The list of flags would continue to be traversed to the end.</p>
<p>You will clearly see that the point of rotation is set BEFORE the rotation is performed, and that all the vertices with vertex skin numbers 26 23 22 25 28 24 68 are rotated about the center of the vertices with vertex skin number 25.<br>
What actually happened was the left arm was rotated at the shoulder.</p>
<p>By creating a list of skin lists in this way, the model can be made to set the rotation points BEFORE the rotation occurs.<br>
The list could be set up with the elbow rotated before the shoulder or vice versa, but a strict order must be followed to set the rotation points before translations and before rotations occur.</p>
<p>Another thing to point out is that there is no skeleton, the ‘joints’ are simply rotation points that are calculated from the vertex skin numbers and any offsets determined by the flag. (offsets can be 0 and -ve)</p>
<p>ADDITIONAL :-</p>
<p>The skin lists.<br>
The skin lists are the core of the animation, these are the things that allow you to do/not do things.</p>
<p>lets take a closer look at the skin lists with an example.<br>
.<br>
List= 3 : type= 0 : length= 2 : 3 2  - set rotation point to neck<br>
List= 4 : type= 2 : length= 2 : 1 3 - rotate head<br>
.<br>
These 2 are part of the generic skin lists jagex use for character animation. we have a type 0 (set reference point) and a type 2 (rotate parts).<br>
This allows us to rotate the head (with hats) using the neck as a pivot.<br>
However the more interesting thing about this is what it can’t do, there is no type 1, we can’t translate the head using the neck as a reference point. Neither can we scale or set the alpha.<br>
So lets add a list that will allow us to giraffe the character, ie translate the head above the model.<br>
Easy we add a new list entry, being careful to put it AFTER the set refernce point.<br>
.<br>
List= 3 : type= 0 : length= 2 : 3 2  - set reference point to neck<br>
List= 4 : type= 1 : length= 2 : 1 3 - translate head<br>
List= 5 : type= 2 : length= 2 : 1 3 - rotate head<br>
.<br>
We can now make a frame to giraffe the character, just set up the skin flags, translation ammounts and frame duration.<br>
We only translate in one axis so the skin flags would be :-<br>
00 00 00 01 04 00 00 00…<br>
entry 5 is 04 because we translate in the Z axis.</p>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/animation-how-it-works/260603/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/animation-how-it-works/260603/1</link>
        <pubDate>Fri, 06 Feb 2009 02:21:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260603-1</guid>
        <source url="https://forum.moparisthebest.com/t/animation-how-it-works/260603.rss">Animation - how it works</source>
      </item>
  </channel>
</rss>
