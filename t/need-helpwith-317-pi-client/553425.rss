<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need helpwith 317 pi client</title>
    <link>https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425</link>
    <description>hey guys,
i have a problem with my cache downloader and signlink.
 
When my client download the cache it won&#39;t extract.

Can any 1 help me please??

signlink
[code]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink implements Runnable {

	public static void startpriv(InetAddress inetaddress) {
		threadliveid = (int) (Math.random() * 99999999D);
		if (active) {
			try {
				Thread.sleep(500L);
			} catch (Exception _ex) {
			}
			active = false;
		}
		socketreq = 0;
		threadreq = null;
		dnsreq = null;
		savereq = null;
		urlreq = null;
		socketip = inetaddress;
		Thread thread = new Thread(new signlink());
		thread.setDaemon(true);
		thread.start();
		while (!active)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
	}

	public void run() {
		active = true;
		String s = findcachedir();
		uid = 351241;
		try {
			File file = new File(s + &quot;main_file_cache.dat&quot;);
			if (file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
				file.delete();
			cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
			for (int j = 0; j &lt; 5; j++)
				cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot;
						+ j, &quot;rw&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		}

		for (int i = threadliveid; threadliveid == i;) {
			if (socketreq != 0) {
				try {
					socket = new Socket(socketip, socketreq);
				} catch (Exception _ex) {
					socket = null;
				}
				socketreq = 0;
			} else if (threadreq != null) {
				Thread thread = new Thread(threadreq);
				thread.setDaemon(true);
				thread.start();
				thread.setPriority(threadreqpri);
				threadreq = null;
			} else if (dnsreq != null) {
				try {
					dns = InetAddress.getByName(dnsreq).getHostName();
				} catch (Exception _ex) {
					dns = &quot;unknown&quot;;
				}
				dnsreq = null;
			} else if (savereq != null) {
				if (savebuf != null)
					try {
						FileOutputStream fileoutputstream = new FileOutputStream(
								s + savereq);
						fileoutputstream.write(savebuf, 0, savelen);
						fileoutputstream.close();
					} catch (Exception _ex) {
					}
				if (waveplay) {
					String wave = s + savereq;
					waveplay = false;
				}
				if (midiplay) {
					midi = s + savereq;
					midiplay = false;
				}
				savereq = null;
			} else if (urlreq != null) {
				try {
					System.out.println(&quot;urlstream&quot;);
					urlstream = new DataInputStream((new URL(mainapp
							.getCodeBase(), urlreq)).openStream());
				} catch (Exception _ex) {
					urlstream = null;
				}
				urlreq = null;
			}
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
		}

	}

    public static final String findcachedir() {
        String s;
        String s1;
        File file;
        s = &quot;C:/FPRevived_Cache/&quot;;
        s1 = &quot;&quot;;
        file = new File((new StringBuilder()).append(s1).append(s).toString());
        if(file.exists() || file.mkdir()) {
            return (new StringBuilder()).append(s1).append(s).append(&quot;/&quot;).toString();
        }
            return null;
    }

	private static int getuid(String s) {
		try {
			File file = new File(s + &quot;uid.dat&quot;);
			if (!file.exists() || file.length() &lt; 4L) {
				DataOutputStream dataoutputstream = new DataOutputStream(
						new FileOutputStream(s + &quot;uid.dat&quot;));
				dataoutputstream.writeInt((int) (Math.random() * 99999999D));
				dataoutputstream.close();
			}
		} catch (Exception _ex) {
		}
		try {
			DataInputStream datainputstream = new DataInputStream(
					new FileInputStream(s + &quot;uid.dat&quot;));
			int i = datainputstream.readInt();
			datainputstream.close();
			return i + 1;
		} catch (Exception _ex) {
			return 0;
		}
	}

	public static synchronized Socket opensocket(int i) throws IOException {
		for (socketreq = i; socketreq != 0;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (socket == null)
			throw new IOException(&quot;could not open socket&quot;);
		else
			return socket;
	}

	public static synchronized DataInputStream openurl(String s)
			throws IOException {
		for (urlreq = s; urlreq != null;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (urlstream == null)
			throw new IOException(&quot;could not open: &quot; + s);
		else
			return urlstream;
	}

	public static synchronized void dnslookup(String s) {
		dns = s;
		dnsreq = s;
	}

	public static synchronized void startthread(Runnable runnable, int i) {
		threadreqpri = i;
		threadreq = runnable;
	}

	public static synchronized boolean wavesave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return false;
		if (savereq != null) {
			return false;
		} else {
			wavepos = (wavepos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized boolean wavereplay() {
		if (savereq != null) {
			return false;
		} else {
			savebuf = null;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized void midisave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return;
		if (savereq != null) {
		} else {
			midipos = (midipos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			midiplay = true;
			savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
		}
	}

	public static void reporterror(String s) {
		System.out.println(&quot;Error: &quot; + s);
	}

	private signlink() {
	}

	public static final int clientversion = 317;
	public static int uid;
	public static int storeid = 32;
	public static RandomAccessFile cache_dat = null;
	public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
	public static boolean sunjava;
	public static Applet mainapp = null;
	private static boolean active;
	private static int threadliveid;
	private static InetAddress socketip;
	private static int socketreq;
	private static Socket socket = null;
	private static int threadreqpri = 1;
	private static Runnable threadreq = null;
	private static String dnsreq = null;
	public static String dns = null;
	private static String urlreq = null;
	private static DataInputStream urlstream = null;
	private static int savelen;
	private static String savereq = null;
	private static byte[] savebuf = null;
	private static boolean midiplay;
	private static int midipos;
	public static String midi = null;
	public static int midivol;
	public static int midifade;
	private static boolean waveplay;
	private static int wavepos;
	public static int wavevol;
	public static boolean reporterror = true;
	public static String errorname = &quot;&quot;;
}[/code]

Cachedownloader
[code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import sign.signlink;

public class CacheDownloader {

	private client client;
	private final int BUFFER = 1024;
	private final int VERSION = 5;
	private String cacheLink = &quot;https://dl-web.dropbox.com/s/pazojjwmkzur1r0/.FPRevived_Cache.rar&quot;;
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}

	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		if(!location.exists()) {
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				downloadFile(getCacheLink(), getArchivedName());
				unZip();
				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
			} else {
				return null;
			}
		}
		} catch(Exception e) {
		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
			conn = url.openConnection();
			in = conn.getInputStream(); 
			byte[] data = new byte[BUFFER]; 
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
            int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
			}
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
		}
		return &quot;&quot;;
	}

	private void unZip() {

		try {
    		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;
			while((e=zin.getNextEntry()) != null) {
               	if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               	} else {
				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
					unzip(zin, getCacheDir() + e.getName());
				}
			}
			zin.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len = 0;
		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/code]</description>
    
    <lastBuildDate>Wed, 30 Sep 2015 10:42:38 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need helpwith 317 pi client</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>That cache link is just wrong. First of all it doesn’t even look like a direct download and also why is it in .rar format? The link is supposed to end in .zip.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425/2</link>
        <pubDate>Wed, 30 Sep 2015 10:42:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553425-2</guid>
        <source url="https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425.rss">Need helpwith 317 pi client</source>
      </item>
      <item>
        <title>Need helpwith 317 pi client</title>
        <dc:creator><![CDATA[@sbruinsma77 sbruinsma77]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sbruinsma77">@sbruinsma77</a> wrote:</p>
          <blockquote>
              <p>hey guys,<br>
i have a problem with my cache downloader and signlink.</p>
<p>When my client download the cache it won’t extract.</p>
<p>Can any 1 help me please??</p>
<p>signlink</p>
<p>[code]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink implements Runnable {</p>
<pre><code>public static void startpriv(InetAddress inetaddress) {
	threadliveid = (int) (Math.random() * 99999999D);
	if (active) {
		try {
			Thread.sleep(500L);
		} catch (Exception _ex) {
		}
		active = false;
	}
	socketreq = 0;
	threadreq = null;
	dnsreq = null;
	savereq = null;
	urlreq = null;
	socketip = inetaddress;
	Thread thread = new Thread(new signlink());
	thread.setDaemon(true);
	thread.start();
	while (!active)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}
}

public void run() {
	active = true;
	String s = findcachedir();
	uid = 351241;
	try {
		File file = new File(s + "main_file_cache.dat");
		if (file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
			file.delete();
		cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
		for (int j = 0; j &lt; 5; j++)
			cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx"
					+ j, "rw");

	} catch (Exception exception) {
		exception.printStackTrace();
	}

	for (int i = threadliveid; threadliveid == i;) {
		if (socketreq != 0) {
			try {
				socket = new Socket(socketip, socketreq);
			} catch (Exception _ex) {
				socket = null;
			}
			socketreq = 0;
		} else if (threadreq != null) {
			Thread thread = new Thread(threadreq);
			thread.setDaemon(true);
			thread.start();
			thread.setPriority(threadreqpri);
			threadreq = null;
		} else if (dnsreq != null) {
			try {
				dns = InetAddress.getByName(dnsreq).getHostName();
			} catch (Exception _ex) {
				dns = "unknown";
			}
			dnsreq = null;
		} else if (savereq != null) {
			if (savebuf != null)
				try {
					FileOutputStream fileoutputstream = new FileOutputStream(
							s + savereq);
					fileoutputstream.write(savebuf, 0, savelen);
					fileoutputstream.close();
				} catch (Exception _ex) {
				}
			if (waveplay) {
				String wave = s + savereq;
				waveplay = false;
			}
			if (midiplay) {
				midi = s + savereq;
				midiplay = false;
			}
			savereq = null;
		} else if (urlreq != null) {
			try {
				System.out.println("urlstream");
				urlstream = new DataInputStream((new URL(mainapp
						.getCodeBase(), urlreq)).openStream());
			} catch (Exception _ex) {
				urlstream = null;
			}
			urlreq = null;
		}
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}
	}

}

public static final String findcachedir() {
    String s;
    String s1;
    File file;
    s = "C:/FPRevived_Cache/";
    s1 = "";
    file = new File((new StringBuilder()).append(s1).append(s).toString());
    if(file.exists() || file.mkdir()) {
        return (new StringBuilder()).append(s1).append(s).append("/").toString();
    }
        return null;
}

private static int getuid(String s) {
	try {
		File file = new File(s + "uid.dat");
		if (!file.exists() || file.length() &lt; 4L) {
			DataOutputStream dataoutputstream = new DataOutputStream(
					new FileOutputStream(s + "uid.dat"));
			dataoutputstream.writeInt((int) (Math.random() * 99999999D));
			dataoutputstream.close();
		}
	} catch (Exception _ex) {
	}
	try {
		DataInputStream datainputstream = new DataInputStream(
				new FileInputStream(s + "uid.dat"));
		int i = datainputstream.readInt();
		datainputstream.close();
		return i + 1;
	} catch (Exception _ex) {
		return 0;
	}
}

public static synchronized Socket opensocket(int i) throws IOException {
	for (socketreq = i; socketreq != 0;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (socket == null)
		throw new IOException("could not open socket");
	else
		return socket;
}

public static synchronized DataInputStream openurl(String s)
		throws IOException {
	for (urlreq = s; urlreq != null;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (urlstream == null)
		throw new IOException("could not open: " + s);
	else
		return urlstream;
}

public static synchronized void dnslookup(String s) {
	dns = s;
	dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i) {
	threadreqpri = i;
	threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return false;
	if (savereq != null) {
		return false;
	} else {
		wavepos = (wavepos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized boolean wavereplay() {
	if (savereq != null) {
		return false;
	} else {
		savebuf = null;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized void midisave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return;
	if (savereq != null) {
	} else {
		midipos = (midipos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		midiplay = true;
		savereq = "jingle" + midipos + ".mid";
	}
}

public static void reporterror(String s) {
	System.out.println("Error: " + s);
}

private signlink() {
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/code]</p>
<p>Cachedownloader</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;
private final int BUFFER = 1024;
private final int VERSION = 5;
private String cacheLink = "https://dl-web.dropbox.com/s/pazojjwmkzur1r0/.FPRevived_Cache.rar";
private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}

private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	if(!location.exists()) {
		downloadFile(getCacheLink(), getArchivedName());
		unZip();
		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
		} else {
			return null;
		}
	}
	} catch(Exception e) {
	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" +localFileName)); 
		conn = url.openConnection();
		in = conn.getInputStream(); 
		byte[] data = new byte[BUFFER]; 
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
        int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
		}
		drawLoadingText("Finished downloading "+getArchivedName()+"!");
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
	}
	return "";
}

private void unZip() {

	try {
		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;
		while((e=zin.getNextEntry()) != null) {
           	if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           	} else {
			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
				unzip(zin, getCacheDir() + e.getName());
			}
		}
		zin.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len = 0;
	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425/1</link>
        <pubDate>Sun, 27 Sep 2015 13:51:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553425-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-helpwith-317-pi-client/553425.rss">Need helpwith 317 pi client</source>
      </item>
  </channel>
</rss>
