<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writing a variable byte header packet (I/O - no stream class)</title>
    <link>https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414</link>
    <description>I&#39;ve been trying to figure out how to finish a variable byte packet header with standard I/O for some time now.

PrimitiveDispatcherImpl.java 

The packet headers are close to the bottom.

[code]
package com.runescape.net;

import java.io.IOException;

public class PrimitiveDispatcherImpl extends PrimitiveDispatcher {

	private int lengthPosition = 0;
	
	public PrimitiveDispatcherImpl(RuneScapeSession session) {
		super(session);
	}

	@Override
	public void writeShort(int value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			getSession().getOutput().writeShort(value + 128);
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			writeByte((byte) (value &gt;&gt; 8), WriteType.REGULAR);
			writeByte((byte) (value + 128), WriteType.REGULAR);
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeShort(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeLong(long value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeLong(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeByte(int value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			getSession().getOutput().writeByte(value + 128);
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeByte(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeInteger(int value, WriteType type) throws IOException {
		
	}
	
	public void writeRawPacketHeader(int value) throws IOException {
		writeByte(value + getSession().getOutgoing().getNextValue(), WriteType.REGULAR);
	}
	
	public void writeVariableBytePacketHeader(int value) throws IOException {
		writeRawPacketHeader(value);
		setLengthPosition(getSession().getInput().available());
		writeByte(0, WriteType.REGULAR);
	}

	public void writeVariableShortPacketHeader(int value) throws IOException {
		writeRawPacketHeader(value);
		setLengthPosition(getSession().getInput().available());
		writeShort(0, WriteType.REGULAR);
	}

	public void finishVariableBytePacketHeader() throws IOException {
		writeByte((getSession().getInput().available() - getLengthPosition() - 1), WriteType.REGULAR);
	}

	public void finishVariableShortPacketHeader() throws IOException {
		writeShort(getSession().getInput().available() - getLengthPosition() - 2, WriteType.REGULAR);
	}

	public int getLengthPosition() {
		return lengthPosition;
	}

	public void setLengthPosition(int lengthPosition) {
		this.lengthPosition = lengthPosition;
	}
	
	public void writeString(String string) throws IOException {
		getSession().getOutput().writeBytes(string);
		writeByte(10, WriteType.REGULAR);
	}
}
[/code]

The outgoing packet (Send Message).

[code]
getSession().getDispatcher().writeVariableBytePacketHeader(253);
getSession().getDispatcher().writeString(message);
getSession().getDispatcher().finishVariableBytePacketHeader();
[/code]

It keeps throwing a T2 Error on the send message packet. I&#39;m not sure what i&#39;m doing wrong. Any suggestions? I&#39;m still pretty new to the protocol so it may just be a stupid mistake on my part.</description>
    
    <lastBuildDate>Mon, 21 Oct 2013 04:19:57 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writing a variable byte header packet (I/O - no stream class)</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>that’s really odd, it looks fine to me. did you end up figuring out the issue?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414/2</link>
        <pubDate>Mon, 21 Oct 2013 04:19:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534414-2</guid>
        <source url="https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414.rss">Writing a variable byte header packet (I/O - no stream class)</source>
      </item>
      <item>
        <title>Writing a variable byte header packet (I/O - no stream class)</title>
        <dc:creator><![CDATA[@Vix Vix]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vix">@Vix</a> wrote:</p>
          <blockquote>
              <p>I’ve been trying to figure out how to finish a variable byte packet header with standard I/O for some time now.</p>
<p>PrimitiveDispatcherImpl.java</p>
<p>The packet headers are close to the bottom.</p>
<pre><code class="lang-auto">package com.runescape.net;

import java.io.IOException;

public class PrimitiveDispatcherImpl extends PrimitiveDispatcher {

	private int lengthPosition = 0;
	
	public PrimitiveDispatcherImpl(RuneScapeSession session) {
		super(session);
	}

	@Override
	public void writeShort(int value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			getSession().getOutput().writeShort(value + 128);
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			writeByte((byte) (value &gt;&gt; 8), WriteType.REGULAR);
			writeByte((byte) (value + 128), WriteType.REGULAR);
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeShort(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeLong(long value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeLong(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeByte(int value, WriteType type) throws IOException {
		switch (type) {
		
		case ADDITIONAL:
			getSession().getOutput().writeByte(value + 128);
			break;
			
		case LITTLE_ENDIAN:
			break;
			
		case LITTLE_ENDIAN_ADDITIONAL:
			break;
			
		case NEGATED:
			break;
			
		case REGULAR:
			getSession().getOutput().writeByte(value);
			break;
			
		case SUBTRAHEND:
			break;
		}
	}

	@Override
	public void writeInteger(int value, WriteType type) throws IOException {
		
	}
	
	public void writeRawPacketHeader(int value) throws IOException {
		writeByte(value + getSession().getOutgoing().getNextValue(), WriteType.REGULAR);
	}
	
	public void writeVariableBytePacketHeader(int value) throws IOException {
		writeRawPacketHeader(value);
		setLengthPosition(getSession().getInput().available());
		writeByte(0, WriteType.REGULAR);
	}

	public void writeVariableShortPacketHeader(int value) throws IOException {
		writeRawPacketHeader(value);
		setLengthPosition(getSession().getInput().available());
		writeShort(0, WriteType.REGULAR);
	}

	public void finishVariableBytePacketHeader() throws IOException {
		writeByte((getSession().getInput().available() - getLengthPosition() - 1), WriteType.REGULAR);
	}

	public void finishVariableShortPacketHeader() throws IOException {
		writeShort(getSession().getInput().available() - getLengthPosition() - 2, WriteType.REGULAR);
	}

	public int getLengthPosition() {
		return lengthPosition;
	}

	public void setLengthPosition(int lengthPosition) {
		this.lengthPosition = lengthPosition;
	}
	
	public void writeString(String string) throws IOException {
		getSession().getOutput().writeBytes(string);
		writeByte(10, WriteType.REGULAR);
	}
}</code></pre>
<p>The outgoing packet (Send Message).</p>
<pre><code class="lang-auto">getSession().getDispatcher().writeVariableBytePacketHeader(253);
getSession().getDispatcher().writeString(message);
getSession().getDispatcher().finishVariableBytePacketHeader();</code></pre>
<p>It keeps throwing a T2 Error on the send message packet. I’m not sure what i’m doing wrong. Any suggestions? I’m still pretty new to the protocol so it may just be a stupid mistake on my part.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414/1</link>
        <pubDate>Sun, 20 Oct 2013 18:04:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534414-1</guid>
        <source url="https://forum.moparisthebest.com/t/writing-a-variable-byte-header-packet-i-o-no-stream-class/534414.rss">Writing a variable byte header packet (I/O - no stream class)</source>
      </item>
  </channel>
</rss>
