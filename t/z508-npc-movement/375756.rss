<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Z508 npc movement</title>
    <link>https://forum.moparisthebest.com/t/z508-npc-movement/375756</link>
    <description>Going near an npcs, and making it walk (hostile) while having a summoned npc following you is causing my server disconnection
heres a screen shot of the error causing the disconnection
[img]http://i52.tinypic.com/2lm759y.png[/img]

heres the npc movement.
[code]/*
 * Class NPCMovement
 *
 * Version 1.0
 *
 * Monday, August 18, 2008
 *
 * Created by Palidino76
 */

package net.com.codeusa.npcs.update;

import net.com.codeusa.util.ByteVector;
import net.com.codeusa.util.Misc;
import net.com.codeusa.*;
import net.com.codeusa.model.*;
import net.com.codeusa.npcs.*;

public class NPCMovement {
    /**
     * Tells the client in which direction to move the NPC.
     */
    private byte[] xlateDirectionToClient = new byte[] {1, 2, 4, 7, 6, 5, 3, 0};

    /**
     * Update an NPCs movement.
     * @param n The npc to get the data from.
     * @param str The stream class to write the bytes to.
     */
    public void updateNPCMovement(NPC n, ByteVector str) {
        if (n == null || str == null) {
            return;
        }
        if (n.direction == -1) {
            if (n.updateReq) {
                str.writeBits(1, 1);
                str.writeBits(2, 0);
            } else {
                str.writeBits(1, 0);
            }
        } else {
            str.writeBits(1, 1);
            str.writeBits(2, 1);
            str.writeBits(3, xlateDirectionToClient[n.direction]);
            str.writeBits(1, (n.updateReq) ? 1: 0);
        }
    }

    /**
     * Adds the new positioning onto the NPC.
     * @param n The npc to get the data from.
     */
  public void getNextNPCMovement(NPC n) {
        if (n == null) {
            return;
        }
        if (n.moveX == 0 &amp;&amp; n.moveY == 0) {
            return;
        }
		if(n.freezeTimer &gt; 0){
			return;
		}
        int dir = direction(n.absX, n.absY, (n.absX + n.moveX), (n.absY + n.moveY));
        if (dir == -1) {
            return;
        }
	if(!Engine.noclipHandler.checkPos((n.moveX+n.absX) , (n.absY+n.moveY),n.heightLevel)){
				n.moveX = 0;
				n.moveY = 0;
        if (!Engine.clipInfo.checkPos((n.moveX + n.absX), (n.absY + n.moveY), n.heightLevel, dir)) 
            n.moveX = 0;
            n.moveY = 0;

				return;
	}
        n.updateReq = true;
        dir &gt;&gt;= 1;
        n.direction = dir;
        n.absX += n.moveX;
        n.absY += n.moveY; 
    }

    /**
     * Stops npcs from noclipping on each other.
     */
    void npcPos(NPC n) {
	for (int i = 0; i &lt; 10000; i++) {
		if (Server.engine.npcs[i] == null)
			continue;
		NPC npc = Server.engine.npcs[i];
            	int npcSize = 0;
            	if(npc.size &gt; 1)
                	if(n.absX &lt; npc.absX &amp;&amp; n.absY &gt; npc.absY) {
                    		if(n.absY - npc.absY &gt; 1 &amp;&amp; npc.size &gt;= 3)
                        		npcSize += npc.size;
                    		else
                        		npcSize += npc.size / 2;
                	} else
                	if(n.absX &gt; npc.absX &amp;&amp; n.absY &gt; npc.absY) {
                    		if(n.absY - npc.absY &gt; 1 &amp;&amp; npc.size &gt;= 3)
                       			npcSize += npc.size / 2 + 1;
                    		else
                        		npcSize += npc.size / 2;
                	} else
                	if(n.absX &gt; npc.absX &amp;&amp; n.absY &lt;= npc.absY)
                    		if(n.absX - npc.absX &gt; 1 &amp;&amp; npc.size &gt;= 3)
                        		npcSize += npc.size / 2 + 1;
                    		else
                        		npcSize += npc.size / 2;
		if (n.absX + n.moveX == npc.absX &amp;&amp; n.absY + n.moveY == npc.absY || Misc.getDistance(n.absX + n.moveX, n.absY + n.moveY, npc.absX, npc.absY) == npcSize &amp;&amp; (n.size != -1 || npc.size != -1)) {
			n.moveX = 0;
			n.moveY = 0;
		}
	}
    }

    /**
     * Random movement.
     * @param n The npc to get the data from.
     */
    public void randomWalk(NPC n) {
        if (n == null) {
            return;
        }
        if (n.randomWalk &amp;&amp; doesWalk(n) &amp;&amp; !inRange(n, n.absX, n.absY)) {
            n.moveX = getMove(n.absX, n.makeX);
            n.moveY = getMove(n.absY, n.makeY);
            getNextNPCMovement(n);
        } else if (n.randomWalk &amp;&amp; Misc.random2(getRandomWalking(n)) == 1 &amp;&amp; doesWalk(n)) {
            int moveX = Misc.random(1);
            int moveY = Misc.random(1);
            int rnd = Misc.random2(4);
            if (rnd == 1) {
                moveX = -(moveX);
                moveY = -(moveY);
            } else if (rnd == 2) {
                moveX = -(moveX);
            } else if (rnd == 3) {
                moveY = -(moveY);
            } if (inRange(n, n.absX + moveX, n.absY + moveY)) {
                n.moveX = moveX;
                n.moveY = moveY;
                getNextNPCMovement(n);
            }
        }
    }

    int getRandomWalking(NPC n) {
	switch (n.npcType) {

		case 6729:
			return 2;

		case 6998:
		case 6999:
			return 1;
	}
	return 7;
    }

    /**
     * Resets walking.
     */
    public void resetWalking(NPC n) {
	n.moveX = -1;
	n.moveY = -1;
	n.direction = -1;
	n.updateReq = true;
    }

    /**
     * Returns true if the npcs range isn&#39;t 0.
     * @param n The npc to get the data from.
     * @return Returns if the NPC has a walking range.
     */
    public boolean doesWalk(NPC n) {
        if (n == null) {
            return false;
        }
        return (n.moveRangeX1 &gt; 0 &amp;&amp; n.moveRangeY1 &gt; 0 &amp;&amp; n.moveRangeX2 &gt; 0 &amp;&amp; n.moveRangeY2 &gt; 0);
    }

    /**
     * Check to make sure the new movement is in range.
     * @param n The npc to get the data from.
     * @param moveX The attempted new walking x.
     * @param moveY The attempted new walking y.
     * @return Returns in the NPC is in walking range.
     */
    private boolean inRange(NPC n, int moveX, int moveY) {
        if (n == null) {
            return false;
        }
        if (moveX &lt;= n.moveRangeX1 &amp;&amp; moveX &gt;= n.moveRangeX2 &amp;&amp; moveY &lt;= n.moveRangeY1 &amp;&amp; moveY &gt;= n.moveRangeY2) {
            return true;
        }
        return false;
    }

    /**
     * Get the walking direction.
     */
    private int direction(int srcX, int srcY, int destX, int destY) {
        int dx = destX - srcX, dy = destY - srcY;
        if (dx &lt; 0) {
            if (dy &lt; 0) {
                if (dx &lt; dy)
                    return 11;
                else if (dx &gt; dy)
                    return 9;
                else
                    return 10;
            } else if(dy &gt; 0) {
                if (-dx &lt; dy)
                    return 15;
                else if (-dx &gt; dy)
                    return 13;
                else
                    return 14;
            }
            else
                return 12;
        } else if (dx &gt; 0) {
            if (dy &lt; 0) {
                if (dx &lt; -dy)
                    return 7;
                else if (dx &gt; -dy)
                    return 5;
                else
                    return 6;
            } else if (dy &gt; 0) {
                if (dx &lt; dy)
                    return 1;
                else if (dx &gt; dy)
                    return 3;
                else
                    return 2;
            } else
                return 4;
        } else {
            if (dy &lt; 0)
                return 8;
            else if (dy &gt; 0)
                return 0;
            else
                return -1;
        }
    }

    /**
     * Get the movement for following two coordinates.
     */
    public int getMove(int Place1, int Place2) {
        if ((Place1 - Place2) == 0)
            return 0;
        else if ((Place1 - Place2) &lt; 0)
            return 1;
        else if ((Place1 - Place2) &gt; 0)
            return -1;
        return 0;
    }
}[/code]</description>
    
    <lastBuildDate>Thu, 30 Dec 2010 01:49:16 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/z508-npc-movement/375756.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Z508 npc movement</title>
        <dc:creator><![CDATA[@abatssk8ter abatssk8ter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abatssk8ter">@abatssk8ter</a> wrote:</p>
          <blockquote>
              <p>Going near an npcs, and making it walk (hostile) while having a summoned npc following you is causing my server disconnection<br>
heres a screen shot of the error causing the disconnection<br>
<img src="http://i52.tinypic.com/2lm759y.png" alt width="140" height="120"></p>
<p>heres the npc movement.</p>
<p>[code]/*</p>
<ul>
<li>Class NPCMovement</li>
<li>
</li>
<li>Version 1.0</li>
<li>
</li>
<li>Monday, August 18, 2008</li>
<li>
</li>
<li>Created by Palidino76<br>
*/</li>
</ul>
<p>package net.com.codeusa.npcs.update;</p>
<p>import net.com.codeusa.util.ByteVector;<br>
import net.com.codeusa.util.Misc;<br>
import net.com.codeusa.<em>;<br>
import net.com.codeusa.model.</em>;<br>
import net.com.codeusa.npcs.*;</p>
<p>public class NPCMovement {<br>
/**<br>
* Tells the client in which direction to move the NPC.<br>
*/<br>
private byte[] xlateDirectionToClient = new byte[] {1, 2, 4, 7, 6, 5, 3, 0};</p>
<pre><code>/**
 * Update an NPCs movement.
 * @param n The npc to get the data from.
 * @param str The stream class to write the bytes to.
 */
public void updateNPCMovement(NPC n, ByteVector str) {
    if (n == null || str == null) {
        return;
    }
    if (n.direction == -1) {
        if (n.updateReq) {
            str.writeBits(1, 1);
            str.writeBits(2, 0);
        } else {
            str.writeBits(1, 0);
        }
    } else {
        str.writeBits(1, 1);
        str.writeBits(2, 1);
        str.writeBits(3, xlateDirectionToClient[n.direction]);
        str.writeBits(1, (n.updateReq) ? 1: 0);
    }
}

/**
 * Adds the new positioning onto the NPC.
 * @param n The npc to get the data from.
 */
</code></pre>
<p>public void getNextNPCMovement(NPC n) {<br>
if (n == null) {<br>
return;<br>
}<br>
if (n.moveX == 0 &amp;&amp; n.moveY == 0) {<br>
return;<br>
}<br>
if(n.freezeTimer &gt; 0){<br>
return;<br>
}<br>
int dir = direction(n.absX, n.absY, (n.absX + n.moveX), (n.absY + n.moveY));<br>
if (dir == -1) {<br>
return;<br>
}<br>
if(!Engine.noclipHandler.checkPos((n.moveX+n.absX) , (n.absY+n.moveY),n.heightLevel)){<br>
n.moveX = 0;<br>
n.moveY = 0;<br>
if (!Engine.clipInfo.checkPos((n.moveX + n.absX), (n.absY + n.moveY), n.heightLevel, dir))<br>
n.moveX = 0;<br>
n.moveY = 0;</p>
<pre><code>			return;
}
    n.updateReq = true;
    dir &gt;&gt;= 1;
    n.direction = dir;
    n.absX += n.moveX;
    n.absY += n.moveY; 
}

/**
 * Stops npcs from noclipping on each other.
 */
void npcPos(NPC n) {
for (int i = 0; i &lt; 10000; i++) {
	if (Server.engine.npcs[i] == null)
		continue;
	NPC npc = Server.engine.npcs[i];
        	int npcSize = 0;
        	if(npc.size &gt; 1)
            	if(n.absX &lt; npc.absX &amp;&amp; n.absY &gt; npc.absY) {
                		if(n.absY - npc.absY &gt; 1 &amp;&amp; npc.size &gt;= 3)
                    		npcSize += npc.size;
                		else
                    		npcSize += npc.size / 2;
            	} else
            	if(n.absX &gt; npc.absX &amp;&amp; n.absY &gt; npc.absY) {
                		if(n.absY - npc.absY &gt; 1 &amp;&amp; npc.size &gt;= 3)
                   			npcSize += npc.size / 2 + 1;
                		else
                    		npcSize += npc.size / 2;
            	} else
            	if(n.absX &gt; npc.absX &amp;&amp; n.absY &lt;= npc.absY)
                		if(n.absX - npc.absX &gt; 1 &amp;&amp; npc.size &gt;= 3)
                    		npcSize += npc.size / 2 + 1;
                		else
                    		npcSize += npc.size / 2;
	if (n.absX + n.moveX == npc.absX &amp;&amp; n.absY + n.moveY == npc.absY || Misc.getDistance(n.absX + n.moveX, n.absY + n.moveY, npc.absX, npc.absY) == npcSize &amp;&amp; (n.size != -1 || npc.size != -1)) {
		n.moveX = 0;
		n.moveY = 0;
	}
}
}

/**
 * Random movement.
 * @param n The npc to get the data from.
 */
public void randomWalk(NPC n) {
    if (n == null) {
        return;
    }
    if (n.randomWalk &amp;&amp; doesWalk(n) &amp;&amp; !inRange(n, n.absX, n.absY)) {
        n.moveX = getMove(n.absX, n.makeX);
        n.moveY = getMove(n.absY, n.makeY);
        getNextNPCMovement(n);
    } else if (n.randomWalk &amp;&amp; Misc.random2(getRandomWalking(n)) == 1 &amp;&amp; doesWalk(n)) {
        int moveX = Misc.random(1);
        int moveY = Misc.random(1);
        int rnd = Misc.random2(4);
        if (rnd == 1) {
            moveX = -(moveX);
            moveY = -(moveY);
        } else if (rnd == 2) {
            moveX = -(moveX);
        } else if (rnd == 3) {
            moveY = -(moveY);
        } if (inRange(n, n.absX + moveX, n.absY + moveY)) {
            n.moveX = moveX;
            n.moveY = moveY;
            getNextNPCMovement(n);
        }
    }
}

int getRandomWalking(NPC n) {
switch (n.npcType) {

	case 6729:
		return 2;

	case 6998:
	case 6999:
		return 1;
}
return 7;
}

/**
 * Resets walking.
 */
public void resetWalking(NPC n) {
n.moveX = -1;
n.moveY = -1;
n.direction = -1;
n.updateReq = true;
}

/**
 * Returns true if the npcs range isn't 0.
 * @param n The npc to get the data from.
 * @return Returns if the NPC has a walking range.
 */
public boolean doesWalk(NPC n) {
    if (n == null) {
        return false;
    }
    return (n.moveRangeX1 &gt; 0 &amp;&amp; n.moveRangeY1 &gt; 0 &amp;&amp; n.moveRangeX2 &gt; 0 &amp;&amp; n.moveRangeY2 &gt; 0);
}

/**
 * Check to make sure the new movement is in range.
 * @param n The npc to get the data from.
 * @param moveX The attempted new walking x.
 * @param moveY The attempted new walking y.
 * @return Returns in the NPC is in walking range.
 */
private boolean inRange(NPC n, int moveX, int moveY) {
    if (n == null) {
        return false;
    }
    if (moveX &lt;= n.moveRangeX1 &amp;&amp; moveX &gt;= n.moveRangeX2 &amp;&amp; moveY &lt;= n.moveRangeY1 &amp;&amp; moveY &gt;= n.moveRangeY2) {
        return true;
    }
    return false;
}

/**
 * Get the walking direction.
 */
private int direction(int srcX, int srcY, int destX, int destY) {
    int dx = destX - srcX, dy = destY - srcY;
    if (dx &lt; 0) {
        if (dy &lt; 0) {
            if (dx &lt; dy)
                return 11;
            else if (dx &gt; dy)
                return 9;
            else
                return 10;
        } else if(dy &gt; 0) {
            if (-dx &lt; dy)
                return 15;
            else if (-dx &gt; dy)
                return 13;
            else
                return 14;
        }
        else
            return 12;
    } else if (dx &gt; 0) {
        if (dy &lt; 0) {
            if (dx &lt; -dy)
                return 7;
            else if (dx &gt; -dy)
                return 5;
            else
                return 6;
        } else if (dy &gt; 0) {
            if (dx &lt; dy)
                return 1;
            else if (dx &gt; dy)
                return 3;
            else
                return 2;
        } else
            return 4;
    } else {
        if (dy &lt; 0)
            return 8;
        else if (dy &gt; 0)
            return 0;
        else
            return -1;
    }
}

/**
 * Get the movement for following two coordinates.
 */
public int getMove(int Place1, int Place2) {
    if ((Place1 - Place2) == 0)
        return 0;
    else if ((Place1 - Place2) &lt; 0)
        return 1;
    else if ((Place1 - Place2) &gt; 0)
        return -1;
    return 0;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/z508-npc-movement/375756/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/z508-npc-movement/375756/1</link>
        <pubDate>Thu, 30 Dec 2010 01:49:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-375756-1</guid>
        <source url="https://forum.moparisthebest.com/t/z508-npc-movement/375756.rss">Z508 npc movement</source>
      </item>
  </channel>
</rss>
