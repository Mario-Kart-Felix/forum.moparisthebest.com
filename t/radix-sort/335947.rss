<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Radix Sort</title>
    <link>https://forum.moparisthebest.com/t/radix-sort/335947</link>
    <description>Could barely find any useful links online for a Radix Sort in Java so thought I&#39;d post mine here. Constructive criticism is appreciated.

Only supports base 10 but can easily be converted to support any base by changing like three things (initialization of the queues, remainder, quotient, etc.)
[code]class Radix {

	public static int[] radixSort(int[] array) {
		Queue[] q = new Queue[10];

		for (int i = 0; i &lt; 10; i++)
			q[i] = new Queue(array.length);

		int digit = 10;
		while(true) // Loops continuously until broken
		{
			boolean allZero = true;
			for(int i: array)
			{
				int remainder = (i % digit) / (digit / 10); // Set remainder equal to the last digit in the number
				int quotient = i / digit;
				q[remainder].insert(i); // Add the number to the corresponding queue based on the remainder
				if(quotient != 0) // If quotient is 0, allZero stays true so we will eventually break from the loop
					allZero = false;
			}
			digit = digit * 10; // Increment digit by multiples of 10
			int i = 0;
			for(Queue queue: q)
				while(!queue.isEmpty())
					array[i++] = queue.remove();
			if(allZero) // Breaks from the loop
				break;
		}
		return array;
	}
}[/code]
[code]class Queue {
	private int[] queueArray; // Holds our values
	private int nElems; // Number of elements
	private int front; // Index of the front
	private int rear; // Index of the rear
	private int maxSize; // Maximum size

	public Queue(int sz) {
		queueArray = new int[sz];
		nElems = 0;
		front = 0;
		rear = -1;
		maxSize = sz;
	}

	public void insert(int value) {
		// 0. Do nothing if the queue is full
		if (isFull())
			return;
		
		// 1. Increment rear by 1
		rear++;
		
		// 2. If rear goes out of bounds,
		//	  wrap around to 0.
		if (rear &gt; maxSize - 1)
			rear = 0;
		
		// 3. Put the element at position rear.
		queueArray[rear] = value;
		
		// 4. One more element
		nElems++;
	}

	public int remove() {
		// 0. Do nothing if empty
		if (isEmpty())
			return -1;

		// 1. Store the current front
		int temp = queueArray[front];
		
		// 2. Increment front by 1
		front++;
		
		// 3. If we go out of bounds, wrap around
		if (front &gt; maxSize - 1)
			front = 0;
		
		// 4. One less element
		nElems--;
		
		// 5. Return what we removed.
		return temp;
		
	}

	public boolean isEmpty() {
		return (nElems == 0);
	}

	public boolean isFull() {
		return (nElems == maxSize);
	}
	
	public void display() {
		if (isEmpty()) {
			System.out.println( &quot;The queue is empty.&quot; );
			return;
		}

		if (front != 0) {
			for (int i = front; i &lt; maxSize; i++)
				System.out.print(queueArray[i] + &quot; &quot;);
			for (int h = 0; h &lt; front; h++)
				System.out.print(queueArray[h] + &quot; &quot;);
		} else if (front == 0)
			for (int i = front; i &lt; rear; i++)
				System.out.print(queueArray[i] + &quot; &quot;);
	}
}[/code]
[code]class RadixApp {

	public static void main(String[] args) {
		int[] array = new int[] {21, 13, 35, 33, 11,
				56, 67, 72, 93, 83, 1, 100};
		
		for(int i : array)
			System.out.print(i + &quot; &quot;);
		System.out.println();
		
		Radix.radixSort(array);
		
		for(int i : array)
			System.out.print(i + &quot; &quot;);
		System.out.println();
	}

}[/code]</description>
    
    <lastBuildDate>Thu, 08 Apr 2010 04:00:10 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/radix-sort/335947.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@Mod_Adam Adam]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_adam">@Mod_Adam</a> wrote:</p>
          <blockquote>
              <p>I created the queue class for my Data Structures class like 2 months ago.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/6</link>
        <pubDate>Thu, 08 Apr 2010 04:00:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-6</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@nueb35 Nueb35]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nueb35">@nueb35</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:4, topic:335947”][quote author=Nueb35 link=topic=432329.msg3174249#msg3174249 date=1270683555]</p>
<aside class="quote no-group">
<blockquote>
<p>why would you even bother making your own implementation of a queue when there are like 9999999 better ones in the collections api</p>
</blockquote>
</aside>
<p>for the experience idiot.</p>
<p>its best to know how a thing works than simply using it so that when you get an error you know how to fix<br>
[/quote]what the fuck is so hard about resizing a fucking array in java[/quote]</p>
<p>the second part</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/5</link>
        <pubDate>Thu, 08 Apr 2010 01:43:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-5</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“Nueb35, post:3, topic:335947”][quote author=abraham2119 link=topic=432329.msg3174181#msg3174181 date=1270679284]<br>
why would you even bother making your own implementation of a queue when there are like 9999999 better ones in the collections api<br>
[/quote]</p>
<p>for the experience idiot.</p>
<p>its best to know how a thing works than simply using it so that when you get an error you know how to fix[/quote]what the fuck is so hard about resizing a fucking array in java</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/4</link>
        <pubDate>Thu, 08 Apr 2010 00:24:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-4</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@nueb35 Nueb35]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nueb35">@nueb35</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="335947">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>why would you even bother making your own implementation of a queue when there are like 9999999 better ones in the collections api</p>
</blockquote>
</aside>
<p>for the experience idiot.</p>
<p>its best to know how a thing works than simply using it so that when you get an error you know how to fix</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/3</link>
        <pubDate>Wed, 07 Apr 2010 23:39:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-3</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>why would you even bother making your own implementation of a queue when there are like 9999999 better ones in the collections api</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/2</link>
        <pubDate>Wed, 07 Apr 2010 22:28:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-2</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
      <item>
        <title>Radix Sort</title>
        <dc:creator><![CDATA[@Mod_Adam Adam]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_adam">@Mod_Adam</a> wrote:</p>
          <blockquote>
              <p>Could barely find any useful links online for a Radix Sort in Java so thought I’d post mine here. Constructive criticism is appreciated.</p>
<p>Only supports base 10 but can easily be converted to support any base by changing like three things (initialization of the queues, remainder, quotient, etc.)</p>
<p>[code]class Radix {</p>
<pre><code>public static int[] radixSort(int[] array) {
	Queue[] q = new Queue[10];

	for (int i = 0; i &lt; 10; i++)
		q[i] = new Queue(array.length);

	int digit = 10;
	while(true) // Loops continuously until broken
	{
		boolean allZero = true;
		for(int i: array)
		{
			int remainder = (i % digit) / (digit / 10); // Set remainder equal to the last digit in the number
			int quotient = i / digit;
			q[remainder].insert(i); // Add the number to the corresponding queue based on the remainder
			if(quotient != 0) // If quotient is 0, allZero stays true so we will eventually break from the loop
				allZero = false;
		}
		digit = digit * 10; // Increment digit by multiples of 10
		int i = 0;
		for(Queue queue: q)
			while(!queue.isEmpty())
				array[i++] = queue.remove();
		if(allZero) // Breaks from the loop
			break;
	}
	return array;
}
</code></pre>
<p>}[/code]</p>
<p>[code]class Queue {<br>
private int[] queueArray; // Holds our values<br>
private int nElems; // Number of elements<br>
private int front; // Index of the front<br>
private int rear; // Index of the rear<br>
private int maxSize; // Maximum size</p>
<pre><code>public Queue(int sz) {
	queueArray = new int[sz];
	nElems = 0;
	front = 0;
	rear = -1;
	maxSize = sz;
}

public void insert(int value) {
	// 0. Do nothing if the queue is full
	if (isFull())
		return;
	
	// 1. Increment rear by 1
	rear++;
	
	// 2. If rear goes out of bounds,
	//	  wrap around to 0.
	if (rear &gt; maxSize - 1)
		rear = 0;
	
	// 3. Put the element at position rear.
	queueArray[rear] = value;
	
	// 4. One more element
	nElems++;
}

public int remove() {
	// 0. Do nothing if empty
	if (isEmpty())
		return -1;

	// 1. Store the current front
	int temp = queueArray[front];
	
	// 2. Increment front by 1
	front++;
	
	// 3. If we go out of bounds, wrap around
	if (front &gt; maxSize - 1)
		front = 0;
	
	// 4. One less element
	nElems--;
	
	// 5. Return what we removed.
	return temp;
	
}

public boolean isEmpty() {
	return (nElems == 0);
}

public boolean isFull() {
	return (nElems == maxSize);
}

public void display() {
	if (isEmpty()) {
		System.out.println( "The queue is empty." );
		return;
	}

	if (front != 0) {
		for (int i = front; i &lt; maxSize; i++)
			System.out.print(queueArray[i] + " ");
		for (int h = 0; h &lt; front; h++)
			System.out.print(queueArray[h] + " ");
	} else if (front == 0)
		for (int i = front; i &lt; rear; i++)
			System.out.print(queueArray[i] + " ");
}
</code></pre>
<p>}[/code]</p>
<p>[code]class RadixApp {</p>
<pre><code>public static void main(String[] args) {
	int[] array = new int[] {21, 13, 35, 33, 11,
			56, 67, 72, 93, 83, 1, 100};
	
	for(int i : array)
		System.out.print(i + " ");
	System.out.println();
	
	Radix.radixSort(array);
	
	for(int i : array)
		System.out.print(i + " ");
	System.out.println();
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/radix-sort/335947/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/radix-sort/335947/1</link>
        <pubDate>Wed, 07 Apr 2010 16:45:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335947-1</guid>
        <source url="https://forum.moparisthebest.com/t/radix-sort/335947.rss">Radix Sort</source>
      </item>
  </channel>
</rss>
