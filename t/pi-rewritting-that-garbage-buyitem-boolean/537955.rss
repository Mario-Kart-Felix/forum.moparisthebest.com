<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
    <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955</link>
    <description>Okay, first, I called it a boolean simply because Insanity make the buyItem [b]method[/b] a boolean, instead of, well, a method.

There are a lot of things done horribly in this, and as each source gets passed to a new owner, more bad code follows. I&#39;m here to help you clean up your buyItem. I&#39;m currently co-owner on a friend of mines&#39; server, and I&#39;m helping out with a lot of the code. I added buy and sell x into his server, and shit went haywire. I took a look at the buyItem method, and realized that&#39;s where the problem was. I assume a lot of PI&#39;s also have the same buyItem, or hell of a lot similar.

[b]Warning: this code was tailored to his server in specific, you&#39;re almost guaranteed to get errors, you may want to read some of the code. Also! You&#39;re going to want to take note of what shops use what form of currency, as the first few Strings and ints will apply to that.[/b]

Remove your entire buyItem method, replace it with:
[code=java]	//How much money does the user have?
	public int getCurrency(int currency){
		switch(currency){
			case 1:
				return c.getItems().getItemAmount(995);//GP
			case 2:
				return c.getItems().getItemAmount(6529);//Tokkul
			case 3:
				return c.pkPoints;//Pking Points
			case 4:
				return c.votePoints;//Vote points
			case 5:
				return c.dungPoints;//Dungeoneering points
			case 6:
				return c.SPoints;//Slayer points
			default:
				return 0;
		}
	}
	
	public String getNameForCurrency(int currency){
		switch(currency){
			case 1:
				return &quot;coins&quot;;//GP
			case 2:
				return &quot;tokkul&quot;;//Tokkul
			case 3:
				return &quot;pkPoints&quot;;//Pking Points
			case 4:
				return &quot;vote points&quot;;//Vote points
			case 5:
				return &quot;dungeoneering points&quot;;//Dungeoneering points
			case 6:
				return &quot;slayer points&quot;;//Slayer points
			default:
				return &quot;unknown&quot;;
		}
	}
	
	//Need to find a way to handle point remove.. A bit high :P
	public void handleCurrency(int currencyNumber,int amountToRemove){
		switch(currencyNumber){
			case 1:
				c.getItems().deleteItem(995, c.getItems().getItemSlot(995), amountToRemove);//Coins
				break;
			case 2:
				c.getItems().deleteItem(6529, c.getItems().getItemSlot(6529), amountToRemove);//Tokkul
				break;
			case 3:
				c.pkPoints -= amountToRemove;//Pking Points
				break;
			case 4:
				c.votePoints -= amountToRemove;//Vote points
				break;
			case 5:
				c.dungPoints -= amountToRemove;//Dungeoneering points
				break;
			case 6:
				c.SPoints -= amountToRemove;//Slayer points
				break;
		}
	}
        public void buyItem(int itemID, int fromSlot, int amount) {
                //This should be essentially equal how much money the player will spend. PI originally handled this separately.
                int totalPrice = ((int)Math.floor(getItemShopValue(itemID, 0, fromSlot)) * amount);
                int currNum = 1;//default currency is 1, which is gp.
                //Don&#39;t be a jackass when using this switch statement, it&#39;s very straightforward.
                switch(c.myShopId){
                        case 18:
                        case 73:
                        case 74:
                                currNum = 3;//Pk points
                                break;
                        case 29:
                        case 30:
                        case 31:
                                currNum = 2;//Tokkul
                                break;
                        case 48:
                                currNum = 6;//Slayer Points
                                break;
                        case 78:
                                currNum = 4;//Vote points
                                break;
                        case 79:
                                currNum = 5;//Dungeoneering points
                                break;
                        default:
                                currNum = 1;//Coins
                                break;
                }
               
                if(amount == 0){//If you somehow try and buy 0 of something...
                        c.sendMessage(&quot;Buy something you jackass.&quot;);
                }
               
                //If the currency is not coins, set the price to special items
                if(currNum &gt; 1){
                        totalPrice = ((int)Math.floor(getSpecialItemValue(itemID) * amount));
                }
               
                if (c.myShopId == 14) {//Buying skillcapes - Will do something for this later...
                        skillBuy(itemID);
                        return;
                }
               
                if(itemID != itemID) {//Leaving this because somehow this stops a dupe?
                        c.sendMessage(&quot;Don&#39;t dupe or you will be IP Banned&quot;);
                        return;
                }
 
                if(!shopSellsItem(itemID))//Dupe prevention I assume
                        return;
 
                if (amount &gt; Server.shopHandler.ShopItemsN[c.myShopId][fromSlot]) {//Just in case they go for more than the shop has.
                        amount = Server.shopHandler.ShopItemsN[c.myShopId][fromSlot];
                }
                c.sendMessage(&quot;Curr:&quot;+getCurrency(currNum)+&quot; Price:&quot;+totalPrice);
                if (getCurrency(currNum) &gt;= totalPrice) {//Checking if they have enough.
                        if((c.getItems().freeSlots() &gt; amount) || (c.getItems().freeSlots() &gt;= 0 &amp;&amp; Item.itemStackable[itemID])){//Making sure they have enough spaces.
                                handleCurrency(currNum, totalPrice);//removing currency for item
                                if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
                                        Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
                                }
                        } else {
                                c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
                                return;
                        }
                } else {
                        c.sendMessage(&quot;You don&#39;t have enough &quot;+getNameForCurrency(currNum)+&quot; to buy this.&quot;);
                        return;
                }
                //These happen regardless...
                c.getItems().addItem(itemID, amount);
                Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= amount;
                Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
                //Resetting the shop
                c.getItems().resetItems(3823);
                resetShop(c.myShopId);
                //updatePlayerShop();//Pretty sure we don&#39;t have player shops....
        }[/code]


What this code should do:

It no longer loops though all items when buying, making buying faster and doesn&#39;t slow the server down (Older PI&#39;s loop through each &#39;amount&#39; until it hits 0, and takes a minute to give you your entire stock).

Makes it 100% easier to make a shop accept a new form of currency.

Isn&#39;t full of complete crap (I left a couple of if statements in because apparently they prevent some form of dupes)


[hr]
How to add a new form of currency you ask? Simple.

in getCurrency, after the switch add:
[code=java]case 7:
return yourCurrency;
[/code]
in getNameForCurrency, after that switch add:
[code=java]
case 7:
return &quot;your currency name&quot;;
[/code]
In handleCurrency, after that switch add:
[code=java]case = 7:
c.yourcurrency -= amountToRemove;//If an item, copy case 1 and 2.
break;[/code]
finally, in buyItem, after switch(c.myShopId){ add:
[code=java]
case yourshopid;
currNum = 7;
break;[/code]


I wrote this rather fast, but it&#39;s still better than the old one. Which can be found here: http://pastebin.com/iTmZ0Mjt</description>
    
    <lastBuildDate>Fri, 17 Jan 2014 01:42:29 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“Clawz fury, post:27, topic:537955”][quote author=AtomicInt_ link=topic=656781.msg4398644#msg4398644 date=1389918402]<br>
You’re thinking of a HashTable. They’re slower because they are synchronized.</p>
<p>A HashMap is not <span class="bbcode-i">much</span> slower than an array. A HashMap’s lookup time is typically O(1) (worst case being O(logn))<br>
[/quote]<br>
really? fu<span class="bbcode-b"></span>ck you learn something every day lol[/quote]</p>
<p>Also I forgot to mention that a HashMap is backed by an array and an arrays lookup speed is O(n), sooo do the math</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/28">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/28</link>
        <pubDate>Fri, 17 Jan 2014 01:42:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-28</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:26, topic:537955”]You’re thinking of a HashTable. They’re slower because they are synchronized.</p>
<p>A HashMap is not <span class="bbcode-i">much</span> slower than an array. A HashMap’s lookup time is typically O(1) (worst case being O(logn))[/quote]<br>
really? fu<span class="bbcode-b"></span>ck you learn something every day lol</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/27">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/27</link>
        <pubDate>Fri, 17 Jan 2014 01:10:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-27</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>You’re thinking of a HashTable. They’re slower because they are synchronized.</p>
<p>A HashMap is not <span class="bbcode-i">much</span> slower than an array. A HashMap’s lookup time is typically O(1) (worst case being O(logn))</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/26">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/26</link>
        <pubDate>Fri, 17 Jan 2014 00:26:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-26</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>I took a more on demand approach to writing shops. I don’t know why Sanity or whatever the dude’s name is decided to loop through the shops every tick, when it isn’t even needed a majority of the time (unless the shop is restocking). What I did was just assign each shop it’s own task, then when a player buys an item from the shop it checks how much of that item is left. If it’s out of stock then it starts the restocking task, which continues to restock ANY items that are out of stock about every 3 seconds or so (if a restocking task is already running when another item goes out of stock then it just does nothing and the restocking task already running will take care of the new item that’s out of stock). Once the items are fully restocked at the appropriate amounts the task is stopped.</p>
<p>I think that way is better mainly because you are only creating slight overhead when needed, and even then it isn’t as bad as constantly looping every 600 ms (as the task only executes the restocking logic every 3 or so seconds). I tried this out on Asteria and it seems to be working great so far, so idk just a suggestion.</p>
<p><span class="mention">@ryley</span>: for your code wouldn’t it be faster to just use a primitive array and use the indexes as the ids? iirc hashmaps are slow?</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/25">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/25</link>
        <pubDate>Thu, 16 Jan 2014 08:46:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-25</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:23, topic:537955”]You made it a tad better. Now get rid of those nested if statements and work on your conventions.</p>
<p><a href="http://www.beenishkhan.net/2012/05/27/if-statements-are-bad-for-code-avoid-them/" class="onebox" target="_blank" rel="nofollow noopener">http://www.beenishkhan.net/2012/05/27/if-statements-are-bad-for-code-avoid-them/</a></p>
<p>edit: I decided to rewrite shopping on a PI as well, I was pretty bored</p>
<pre><code class="lang-auto">
package org.frostiescape.content.shops;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.frostiescape.Config;
import org.frostiescape.content.shops.Shop.Currency;
import org.frostiescape.content.shops.Shop.ShopType;
import org.frostiescape.content.shops.currency.ItemCurrency;
import org.frostiescape.model.items.Item;
import org.frostiescape.model.players.Client;

public final class ShopAssistant
{

	private static final int MAX_SHOP_ITEMS = 101;
	private static final int MAX_SHOW_DELAY = 20;
	private static final int MAX_SPECIALTY_SHOW_DELAY = 60;

	private static final Map&lt;Integer, Shop&gt; shops = new HashMap&lt;&gt;();


	public static void process()
	{
		for( int id: shops.keySet() ) {
			Shop shop = shops.get( id );
			if( shop == null ) {
				break;
			}
			boolean updated = false;
			for( int slot = 0; slot &lt; MAX_SHOP_ITEMS; slot ++ ) {
				if( shop.getItems()[slot] &lt;= 0 ) {
					continue;
				}
				if( shop.getShopDelay()[slot] &gt;= MAX_SHOW_DELAY ) {
					if( ( slot &lt;= shop.getNumberOfDefaultItems() ) &amp;&amp; ( shop.getAmounts()[slot] &lt;= shop.getInitialStockAmounts()[slot] ) ) {
						if( shop.getAmounts()[slot] &lt; shop.getInitialStockAmounts()[slot] ) {
							shop.getAmounts()[slot] += 1;
							shop.getShopDelay()[slot] = 1;
							shop.getShopDelay()[slot] = 0;
							updated = true;
						}
					} else if( shop.getShopDelay()[slot] &gt;= MAX_SPECIALTY_SHOW_DELAY ) {
						shop.getAmounts()[slot] -= 1;
						if( shop.getAmounts()[slot] &lt;= 0 ) {
							shop.getAmounts()[slot] = 0;
							shop.getItems()[slot] = 0;
							shop.getAmounts()[slot] = 0;
							shop.getShopDelay()[slot] = 0;
						}
						shop.getShopDelay()[slot] = 0;
						updated = true;
					}
				}
				shop.getShopDelay()[slot] ++ ;
			}
			Iterator&lt;Client&gt; iterator = shop.getShoppingPlayers().iterator();
			while( iterator.hasNext() ) {
				Client client = iterator.next();
				if( client.myShopId == id ) {
					continue;
				}
				iterator.remove();
			}
			if( updated ) {
				refreshForAll( shop );
			}
		}
	}


	@SuppressWarnings( "unchecked" )
	public static void loadShops( String file ) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException
	{
		BufferedReader reader = new BufferedReader( new FileReader( "./data/" + file ) );

		String line;
		while( ( line = reader.readLine() ) != null ) {
			int index = line.indexOf( '=' );
			if( index &lt; 0 ) {
				continue;
			}

			String entry = line.substring( index + 1 );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.trim();

			String[] entries = entry.split( "\t" );

			int id = Integer.parseInt( entries[0] );
			String name = entries[1].replaceAll( "_", " " );
			String type = entries[2];
			Class&lt;Currency&gt; currencyClass = ( Class&lt;Currency&gt; )Class.forName( "org.frostiescape.content.shops.currency." + entries[3] );
			Currency currency = currencyClass.newInstance();
			int[] items = new int[MAX_SHOP_ITEMS];
			int[] amounts = new int[MAX_SHOP_ITEMS];
			int[] initialAmounts = new int[MAX_SHOP_ITEMS];
			int[] delay = new int[MAX_SHOP_ITEMS];
			int stockItems = 0;
			for( int i = 0; i &lt; ( ( entries.length - 4 ) / 2 ); i ++ ) {
				if( entries[( 4 + ( i * 2 ) )] == null ) {
					break;
				}
				items[i] = ( Integer.parseInt( entries[( 4 + ( i * 2 ) )] ) + 1 );
				amounts[i] = Integer.parseInt( entries[( 5 + ( i * 2 ) )] );
				initialAmounts[i] = Integer.parseInt( entries[( 5 + ( i * 2 ) )] );
				stockItems ++ ;
			}
			shops.put( id, new Shop( name, ShopType.create( type ), currency, items, amounts, initialAmounts, delay, stockItems ) );
		}
		reader.close();
	}


	public static void openShop( Client client, int id )
	{
		Shop shop = shops.get( id );
		if( shop == null ) {
			return;
		}
		client.getItems().resetItems( 3823 );
		refresh( client, shop );
		client.myShopId = id;
		client.getPA().sendFrame248( 3824, 3822 );
		client.getPA().sendFrame126( shop.getName(), 3901 );
		shop.getShoppingPlayers().add( client );
	}


	private static void refreshForAll( Shop shop )
	{
		for( Client player: shop.getShoppingPlayers() ) {
			refresh( player, shop );
		}
	}


	public static void refresh( Client client, Shop shop )
	{
		int totalItems = 0;
		for( int i = 0; i &lt; MAX_SHOP_ITEMS; i ++ ) {
			if( shop.getItems()[i] &gt; 0 &amp;&amp; shop.getAmounts()[i] &gt; 0 || i &lt;= shop.getNumberOfDefaultItems() ) {
				totalItems ++ ;
			}
		}
		if( totalItems &gt; MAX_SHOP_ITEMS ) {
			totalItems = MAX_SHOP_ITEMS;
		}
		client.getOutStream().createFrameVarSizeWord( 53 );
		client.getOutStream().writeWord( 3900 );
		client.getOutStream().writeWord( totalItems );
		int iterations = 0;
		for( int i = 0; i &lt; shop.getItems().length; i ++ ) {
			if( ( shop.getItems()[i] &gt; 0 ) || ( i &lt;= shop.getNumberOfDefaultItems() ) ) {
				if( shop.getAmounts()[i] &gt; 254 ) {
					client.getOutStream().writeByte( 255 );
					client.getOutStream().writeDWord_v2( shop.getAmounts()[i] );
				} else {
					client.getOutStream().writeByte( shop.getAmounts()[i] );
				}
				if( ( shop.getItems()[i] &gt; Config.ITEM_LIMIT ) || ( shop.getItems()[i] &lt; 0 ) ) {
					shop.getItems()[i] = Config.ITEM_LIMIT;
				}
				client.getOutStream().writeWordBigEndianA( shop.getItems()[i] );
				iterations ++ ;
			}
			if( iterations &gt; totalItems ) {
				break;
			}
		}
		client.getOutStream().endFrameVarSizeWord();
		client.flushOutStream();
	}


	public static void sendBuyPrice( Client client, int item )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		client.sendMessage( client.getItems().getItemName( item ) + ": currently costs " + shop.getCurrency().getSellPrice( item ) + "x " + shop.getCurrency().getName() + "." );
	}


	public static void sendSellPrice( Client client, int item )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( ! shopBuysItem( client, item ) ) {
			client.sendMessage( "You cannot sell this here!" );
			return;
		}
		client.sendMessage( client.getItems().getItemName( item ) + ": the store will currently buy this for " + shop.getCurrency().getBuyPrice( item ) + "x " + shop.getCurrency().getName() + "." );
	}


	public static void sellItem( Client client, int item, int slot, int amount )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( ! shopBuysItem( client, item ) ) {
			client.sendMessage( "You cannot sell this here!" );
			return;
		}
		if( ( amount &gt; 0 ) &amp;&amp; ( item == ( client.playerItems[slot] - 1 ) ) ) {
			if( ( amount &gt; client.playerItemsN[slot] ) &amp;&amp; ( Item.itemIsNote[( client.playerItems[slot] - 1 )] || Item.itemStackable[( client.playerItems[slot] - 1 )] ) ) {
				amount = client.playerItemsN[slot];
			} else if( ( amount &gt; client.getItems().getItemAmount( item ) ) &amp;&amp; ! Item.itemIsNote[( client.playerItems[slot] - 1 )] &amp;&amp; ! Item.itemStackable[( client.playerItems[slot] - 1 )] ) {
				amount = client.getItems().getItemAmount( item );
			}
			if( shop.getCurrency().getClass().getName().equals( ItemCurrency.class.getName() ) &amp;&amp;
					( shop.getCurrency().getAmount( client ) &lt;= 0 ) &amp;&amp; ( client.getItems().freeSlots() &lt;= 0 ) &amp;&amp;
					Item.itemStackable[client.playerItems[slot] - 1] &amp;&amp; ( client.playerItemsN[slot] &gt; 0 ) ) {
				client.sendMessage( "You don't have enough space in your inventory." );
				return;
			}
			client.getItems().deleteItem2( item, amount );
			int price = shop.getCurrency().getBuyPrice( item ) * amount;
			shop.getCurrency().add( client, price );
			addShopItem( client, item, amount );
			client.getItems().resetItems( 3823 );
			refreshForAll( shop );
		}
	}


	private static void addShopItem( Client client, int item, int amount )
	{
		boolean added = false;
		if( amount &lt;= 0 ) {
			return;
		}
		if( Item.itemIsNote[item] == true ) {
			item = client.getItems().getUnnotedItem( item );
		}
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		for( int slot = 0; slot &lt; shop.getItems().length; slot ++ ) {
			if( ( shop.getItems()[slot] - 1 ) == item ) {
				shop.getAmounts()[slot] += amount;
				added = true;
			}
		}
		if( ! added ) {
			for( int slot = 0; slot &lt; shop.getItems().length; slot ++ ) {
				if( shop.getItems()[slot] == 0 ) {
					shop.getItems()[slot] = ( item + 1 );
					shop.getAmounts()[slot] = amount;
					shop.getShopDelay()[slot] = 0;
					break;
				}
			}
		}
	}


	private static boolean shopBuysItem( Client client, int inventoryItem )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return false;
		}
		if( Arrays.asList( Config.ITEM_SELLABLE ).contains( inventoryItem ) ) {
			return false;
		}
		// we do this check here to prevent non-sellables from being sold even if the shop type is
		// general.
		if( shop.getType() == ShopType.GENERAL ) {
			return true;
		}
		for( int shopItem: shop.getItems() ) {
			if( ( inventoryItem == ( shopItem - 1 ) ) || ( Item.itemIsNote[inventoryItem] &amp;&amp; ( shopItem == inventoryItem ) ) ) {
				return true;
			}
		}
		return false;
	}


	public static void buyItem( Client client, int item, int slot, int amount )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( item != shop.getItems()[slot] - 1 || amount &lt;= 0 ) {
			return;
		}
		int freeSlots = client.getItems().freeSlots();
		if( freeSlots == 0 || freeSlots &lt; amount &amp;&amp; ! Item.itemStackable[item] ) {
			amount = freeSlots;
		}
		if( amount &gt; shop.getAmounts()[slot] ) {
			amount = shop.getAmounts()[slot];
		}
		int playerCurrencyAmount = shop.getCurrency().getAmount( client );
		int value = amount * shop.getCurrency().getSellPrice( item );
		if( value &gt; Integer.MAX_VALUE ) {
			value = Integer.MAX_VALUE;
		}
		if( playerCurrencyAmount &lt; value ) {
			amount = ( int )Math.floor( ( playerCurrencyAmount * amount ) / value );
			value = amount * shop.getCurrency().getSellPrice( item );
			client.sendMessage( "You do not have enough " + shop.getCurrency().getName() + " to purchase that amount." );
			if( amount &lt;= 0 ) {
				// checking to see if they can buy any, if not then return from the function.
				return;
			}		
		}
		if (Item.itemStackable[item]) {
			if (!client.getItems().playerHasItem( item ) &amp;&amp; freeSlots &lt;= 0) {
				client.sendMessage("You do not have enough space in your inventory.");
				return;
			}
		} else {
			if (amount &gt; freeSlots) {
				amount = freeSlots;
			}
		}
		if (!Item.itemStackable[item] &amp;&amp; amount &gt; freeSlots) {
			amount = freeSlots;
		}
		shop.getCurrency().delete( client, value );
		client.getItems().addItem( item, amount );
		shop.getAmounts()[slot] -= amount;
		shop.getShopDelay()[slot] = 0;
		client.getItems().resetItems( 3823 );
		refreshForAll( shop );
	}

}</code></pre>
<pre><code class="lang-auto">
package org.frostiescape.content.shops;

import java.util.HashSet;
import java.util.Set;

import org.frostiescape.model.players.Client;

public class Shop
{

	public enum ShopType {
		// A general store, can sell and buy any item even if the stop doesn't have it in stock
		GENERAL,
		// A general stock store, can only buy and sell the items that the shop has in stock
		GENERAL_STOCK;

		public static ShopType create( String value )
		{
			switch( value.toLowerCase() ) {
				case "general":
					return GENERAL;
				case "general_stock":
					return GENERAL_STOCK;
				default:
					throw new IllegalArgumentException();
			}
		}
	}

	private final String name;

	private final ShopType type;

	private final Currency currency;

	private final int[] items;

	private final int[] amounts;

	private final int[] initialStockAmounts;

	private final int[] shopDelay;

	private final int numberOfDefaultItems;

	private final Set&lt;Client&gt; shoppingPlayers;


	public Shop( String name, ShopType type, Currency currency, int[] items, int[] amounts, int[] initialStockAmounts, int[] shopDelay, int numberOfDefaultItems, Set&lt;Client&gt; shoppingPlayers )
	{
		if( items.length != amounts.length ) {
			throw new IllegalArgumentException();
		}
		this.name = name;
		this.type = type;
		this.currency = currency;
		this.items = items;
		this.amounts = amounts;
		this.initialStockAmounts = initialStockAmounts;
		this.shopDelay = shopDelay;
		this.numberOfDefaultItems = numberOfDefaultItems;
		this.shoppingPlayers = shoppingPlayers;
	}


	public Shop( String name, ShopType type, Currency currency, int[] items, int[] amounts, int[] initialStockAmounts, int[] shopDelay, int numberOfDefaultItems )
	{
		this( name, type, currency, items, amounts, initialStockAmounts, shopDelay, numberOfDefaultItems, new HashSet&lt;Client&gt;() );
	}


	public String getName()
	{
		return name;
	}


	public ShopType getType()
	{
		return type;
	}


	public int[] getItems()
	{
		return items;
	}


	public int[] getAmounts()
	{
		return amounts;
	}


	public int[] getInitialStockAmounts()
	{
		return initialStockAmounts;
	}


	public int[] getShopDelay()
	{
		return shopDelay;
	}


	public int getNumberOfDefaultItems()
	{
		return numberOfDefaultItems;
	}


	public Set&lt;Client&gt; getShoppingPlayers()
	{
		return shoppingPlayers;
	}

	public Currency getCurrency()
	{
		return currency;
	}

	public static interface Currency
	{

		public String getName();


		public int getAmount( Client client );


		public void delete( Client client, int amount );


		public void add( Client client, int amount );


		public int getSellPrice( int item );


		public int getBuyPrice( int item );

	}

}</code></pre>
<p>it’s still pretty inconsistent and rushed in some places (didn’t really want to spend a ton of time on it). Oh and I tested it everything is working swell, so feel free to rip/use/whatever</p>
<p>edit2: fixed 2 bugs with this, one being able to purchase as long as you ahad gp in inv and other being that the entire item was removed from the shop if you bought one and the stack was higher than that[/quote]<br>
I haven’t looked at your code, but I most definitely will. I’m sure it’ll be great compared to what I did.</p>
<p>I was in a hurry writing mine (yeah, it’s an excuse but still) since I was trying to patch a buy-x bug on a server.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/24">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/24</link>
        <pubDate>Thu, 16 Jan 2014 04:49:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-24</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>You made it a tad better. Now get rid of those nested if statements and work on your conventions.</p>
<p><a href="http://www.beenishkhan.net/2012/05/27/if-statements-are-bad-for-code-avoid-them/" class="onebox" target="_blank" rel="nofollow noopener">http://www.beenishkhan.net/2012/05/27/if-statements-are-bad-for-code-avoid-them/</a></p>
<p>edit: I decided to rewrite shopping on a PI as well, I was pretty bored</p>
<pre><code class="lang-auto">
package org.frostiescape.content.shops;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Map;

import org.frostiescape.Config;
import org.frostiescape.content.shops.Shop.Currency;
import org.frostiescape.content.shops.Shop.ShopType;
import org.frostiescape.content.shops.currency.ItemCurrency;
import org.frostiescape.model.items.Item;
import org.frostiescape.model.players.Client;

public final class ShopAssistant
{

	private static final int MAX_SHOP_ITEMS = 101;
	private static final int MAX_SHOW_DELAY = 20;
	private static final int MAX_SPECIALTY_SHOW_DELAY = 60;

	private static final Map&lt;Integer, Shop&gt; shops = new HashMap&lt;&gt;();


	public static void process()
	{
		for( int id: shops.keySet() ) {
			Shop shop = shops.get( id );
			if( shop == null ) {
				break;
			}
			boolean updated = false;
			for( int slot = 0; slot &lt; MAX_SHOP_ITEMS; slot ++ ) {
				if( shop.getItems()[slot] &lt;= 0 ) {
					continue;
				}
				if( shop.getShopDelay()[slot] &gt;= MAX_SHOW_DELAY ) {
					if( ( slot &lt;= shop.getNumberOfDefaultItems() ) &amp;&amp; ( shop.getAmounts()[slot] &lt;= shop.getInitialStockAmounts()[slot] ) ) {
						if( shop.getAmounts()[slot] &lt; shop.getInitialStockAmounts()[slot] ) {
							shop.getAmounts()[slot] += 1;
							shop.getShopDelay()[slot] = 1;
							shop.getShopDelay()[slot] = 0;
							updated = true;
						}
					} else if( shop.getShopDelay()[slot] &gt;= MAX_SPECIALTY_SHOW_DELAY ) {
						shop.getAmounts()[slot] -= 1;
						if( shop.getAmounts()[slot] &lt;= 0 ) {
							shop.getAmounts()[slot] = 0;
							shop.getItems()[slot] = 0;
							shop.getAmounts()[slot] = 0;
							shop.getShopDelay()[slot] = 0;
						}
						shop.getShopDelay()[slot] = 0;
						updated = true;
					}
				}
				shop.getShopDelay()[slot] ++ ;
			}
			Iterator&lt;Client&gt; iterator = shop.getShoppingPlayers().iterator();
			while( iterator.hasNext() ) {
				Client client = iterator.next();
				if( client.myShopId == id ) {
					continue;
				}
				iterator.remove();
			}
			if( updated ) {
				refreshForAll( shop );
			}
		}
	}


	@SuppressWarnings( "unchecked" )
	public static void loadShops( String file ) throws IOException, InstantiationException, IllegalAccessException, ClassNotFoundException
	{
		BufferedReader reader = new BufferedReader( new FileReader( "./data/" + file ) );

		String line;
		while( ( line = reader.readLine() ) != null ) {
			int index = line.indexOf( '=' );
			if( index &lt; 0 ) {
				continue;
			}

			String entry = line.substring( index + 1 );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.replace( "\t\t", "\t" );
			entry = entry.trim();

			String[] entries = entry.split( "\t" );

			int id = Integer.parseInt( entries[0] );
			String name = entries[1].replaceAll( "_", " " );
			String type = entries[2];
			Class&lt;Currency&gt; currencyClass = ( Class&lt;Currency&gt; )Class.forName( "org.frostiescape.content.shops.currency." + entries[3] );
			Currency currency = currencyClass.newInstance();
			int[] items = new int[MAX_SHOP_ITEMS];
			int[] amounts = new int[MAX_SHOP_ITEMS];
			int[] initialAmounts = new int[MAX_SHOP_ITEMS];
			int[] delay = new int[MAX_SHOP_ITEMS];
			int stockItems = 0;
			for( int i = 0; i &lt; ( ( entries.length - 4 ) / 2 ); i ++ ) {
				if( entries[( 4 + ( i * 2 ) )] == null ) {
					break;
				}
				items[i] = ( Integer.parseInt( entries[( 4 + ( i * 2 ) )] ) + 1 );
				amounts[i] = Integer.parseInt( entries[( 5 + ( i * 2 ) )] );
				initialAmounts[i] = Integer.parseInt( entries[( 5 + ( i * 2 ) )] );
				stockItems ++ ;
			}
			shops.put( id, new Shop( name, ShopType.create( type ), currency, items, amounts, initialAmounts, delay, stockItems ) );
		}
		reader.close();
	}


	public static void openShop( Client client, int id )
	{
		Shop shop = shops.get( id );
		if( shop == null ) {
			return;
		}
		client.getItems().resetItems( 3823 );
		refresh( client, shop );
		client.myShopId = id;
		client.getPA().sendFrame248( 3824, 3822 );
		client.getPA().sendFrame126( shop.getName(), 3901 );
		shop.getShoppingPlayers().add( client );
	}


	private static void refreshForAll( Shop shop )
	{
		for( Client player: shop.getShoppingPlayers() ) {
			refresh( player, shop );
		}
	}


	public static void refresh( Client client, Shop shop )
	{
		int totalItems = 0;
		for( int i = 0; i &lt; MAX_SHOP_ITEMS; i ++ ) {
			if( shop.getItems()[i] &gt; 0 &amp;&amp; shop.getAmounts()[i] &gt; 0 || i &lt;= shop.getNumberOfDefaultItems() ) {
				totalItems ++ ;
			}
		}
		if( totalItems &gt; MAX_SHOP_ITEMS ) {
			totalItems = MAX_SHOP_ITEMS;
		}
		client.getOutStream().createFrameVarSizeWord( 53 );
		client.getOutStream().writeWord( 3900 );
		client.getOutStream().writeWord( totalItems );
		int iterations = 0;
		for( int i = 0; i &lt; shop.getItems().length; i ++ ) {
			if( ( shop.getItems()[i] &gt; 0 ) || ( i &lt;= shop.getNumberOfDefaultItems() ) ) {
				if( shop.getAmounts()[i] &gt; 254 ) {
					client.getOutStream().writeByte( 255 );
					client.getOutStream().writeDWord_v2( shop.getAmounts()[i] );
				} else {
					client.getOutStream().writeByte( shop.getAmounts()[i] );
				}
				if( ( shop.getItems()[i] &gt; Config.ITEM_LIMIT ) || ( shop.getItems()[i] &lt; 0 ) ) {
					shop.getItems()[i] = Config.ITEM_LIMIT;
				}
				client.getOutStream().writeWordBigEndianA( shop.getItems()[i] );
				iterations ++ ;
			}
			if( iterations &gt; totalItems ) {
				break;
			}
		}
		client.getOutStream().endFrameVarSizeWord();
		client.flushOutStream();
	}


	public static void sendBuyPrice( Client client, int item )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		client.sendMessage( client.getItems().getItemName( item ) + ": currently costs " + shop.getCurrency().getSellPrice( item ) + "x " + shop.getCurrency().getName() + "." );
	}


	public static void sendSellPrice( Client client, int item )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( ! shopBuysItem( client, item ) ) {
			client.sendMessage( "You cannot sell this here!" );
			return;
		}
		client.sendMessage( client.getItems().getItemName( item ) + ": the store will currently buy this for " + shop.getCurrency().getBuyPrice( item ) + "x " + shop.getCurrency().getName() + "." );
	}


	public static void sellItem( Client client, int item, int slot, int amount )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( ! shopBuysItem( client, item ) ) {
			client.sendMessage( "You cannot sell this here!" );
			return;
		}
		if( ( amount &gt; 0 ) &amp;&amp; ( item == ( client.playerItems[slot] - 1 ) ) ) {
			if( ( amount &gt; client.playerItemsN[slot] ) &amp;&amp; ( Item.itemIsNote[( client.playerItems[slot] - 1 )] || Item.itemStackable[( client.playerItems[slot] - 1 )] ) ) {
				amount = client.playerItemsN[slot];
			} else if( ( amount &gt; client.getItems().getItemAmount( item ) ) &amp;&amp; ! Item.itemIsNote[( client.playerItems[slot] - 1 )] &amp;&amp; ! Item.itemStackable[( client.playerItems[slot] - 1 )] ) {
				amount = client.getItems().getItemAmount( item );
			}
			if( shop.getCurrency().getClass().getName().equals( ItemCurrency.class.getName() ) &amp;&amp;
					( shop.getCurrency().getAmount( client ) &lt;= 0 ) &amp;&amp; ( client.getItems().freeSlots() &lt;= 0 ) &amp;&amp;
					Item.itemStackable[client.playerItems[slot] - 1] &amp;&amp; ( client.playerItemsN[slot] &gt; 0 ) ) {
				client.sendMessage( "You don't have enough space in your inventory." );
				return;
			}
			client.getItems().deleteItem2( item, amount );
			int price = shop.getCurrency().getBuyPrice( item ) * amount;
			shop.getCurrency().add( client, price );
			addShopItem( client, item, amount );
			client.getItems().resetItems( 3823 );
			refreshForAll( shop );
		}
	}


	private static void addShopItem( Client client, int item, int amount )
	{
		boolean added = false;
		if( amount &lt;= 0 ) {
			return;
		}
		if( Item.itemIsNote[item] == true ) {
			item = client.getItems().getUnnotedItem( item );
		}
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		for( int slot = 0; slot &lt; shop.getItems().length; slot ++ ) {
			if( ( shop.getItems()[slot] - 1 ) == item ) {
				shop.getAmounts()[slot] += amount;
				added = true;
			}
		}
		if( ! added ) {
			for( int slot = 0; slot &lt; shop.getItems().length; slot ++ ) {
				if( shop.getItems()[slot] == 0 ) {
					shop.getItems()[slot] = ( item + 1 );
					shop.getAmounts()[slot] = amount;
					shop.getShopDelay()[slot] = 0;
					break;
				}
			}
		}
	}


	private static boolean shopBuysItem( Client client, int inventoryItem )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return false;
		}
		if( Arrays.asList( Config.ITEM_SELLABLE ).contains( inventoryItem ) ) {
			return false;
		}
		// we do this check here to prevent non-sellables from being sold even if the shop type is
		// general.
		if( shop.getType() == ShopType.GENERAL ) {
			return true;
		}
		for( int shopItem: shop.getItems() ) {
			if( ( inventoryItem == ( shopItem - 1 ) ) || ( Item.itemIsNote[inventoryItem] &amp;&amp; ( shopItem == inventoryItem ) ) ) {
				return true;
			}
		}
		return false;
	}


	public static void buyItem( Client client, int item, int slot, int amount )
	{
		Shop shop = shops.get( client.myShopId );
		if( shop == null ) {
			return;
		}
		if( item != shop.getItems()[slot] - 1 || amount &lt;= 0 ) {
			return;
		}
		int freeSlots = client.getItems().freeSlots();
		if( freeSlots == 0 || freeSlots &lt; amount &amp;&amp; ! Item.itemStackable[item] ) {
			amount = freeSlots;
		}
		if( amount &gt; shop.getAmounts()[slot] ) {
			amount = shop.getAmounts()[slot];
		}
		int playerCurrencyAmount = shop.getCurrency().getAmount( client );
		int value = amount * shop.getCurrency().getSellPrice( item );
		if( value &gt; Integer.MAX_VALUE ) {
			value = Integer.MAX_VALUE;
		}
		if( playerCurrencyAmount &lt; value ) {
			amount = ( int )Math.floor( ( playerCurrencyAmount * amount ) / value );
			value = amount * shop.getCurrency().getSellPrice( item );
			client.sendMessage( "You do not have enough " + shop.getCurrency().getName() + " to purchase that amount." );
			if( amount &lt;= 0 ) {
				// checking to see if they can buy any, if not then return from the function.
				return;
			}		
		}
		if (Item.itemStackable[item]) {
			if (!client.getItems().playerHasItem( item ) &amp;&amp; freeSlots &lt;= 0) {
				client.sendMessage("You do not have enough space in your inventory.");
				return;
			}
		} else {
			if (amount &gt; freeSlots) {
				amount = freeSlots;
			}
		}
		if (!Item.itemStackable[item] &amp;&amp; amount &gt; freeSlots) {
			amount = freeSlots;
		}
		shop.getCurrency().delete( client, value );
		client.getItems().addItem( item, amount );
		shop.getAmounts()[slot] -= amount;
		shop.getShopDelay()[slot] = 0;
		client.getItems().resetItems( 3823 );
		refreshForAll( shop );
	}

}</code></pre>
<pre><code class="lang-auto">
package org.frostiescape.content.shops;

import java.util.HashSet;
import java.util.Set;

import org.frostiescape.model.players.Client;

public class Shop
{

	public enum ShopType {
		// A general store, can sell and buy any item even if the stop doesn't have it in stock
		GENERAL,
		// A general stock store, can only buy and sell the items that the shop has in stock
		GENERAL_STOCK;

		public static ShopType create( String value )
		{
			switch( value.toLowerCase() ) {
				case "general":
					return GENERAL;
				case "general_stock":
					return GENERAL_STOCK;
				default:
					throw new IllegalArgumentException();
			}
		}
	}

	private final String name;

	private final ShopType type;

	private final Currency currency;

	private final int[] items;

	private final int[] amounts;

	private final int[] initialStockAmounts;

	private final int[] shopDelay;

	private final int numberOfDefaultItems;

	private final Set&lt;Client&gt; shoppingPlayers;


	public Shop( String name, ShopType type, Currency currency, int[] items, int[] amounts, int[] initialStockAmounts, int[] shopDelay, int numberOfDefaultItems, Set&lt;Client&gt; shoppingPlayers )
	{
		if( items.length != amounts.length ) {
			throw new IllegalArgumentException();
		}
		this.name = name;
		this.type = type;
		this.currency = currency;
		this.items = items;
		this.amounts = amounts;
		this.initialStockAmounts = initialStockAmounts;
		this.shopDelay = shopDelay;
		this.numberOfDefaultItems = numberOfDefaultItems;
		this.shoppingPlayers = shoppingPlayers;
	}


	public Shop( String name, ShopType type, Currency currency, int[] items, int[] amounts, int[] initialStockAmounts, int[] shopDelay, int numberOfDefaultItems )
	{
		this( name, type, currency, items, amounts, initialStockAmounts, shopDelay, numberOfDefaultItems, new HashSet&lt;Client&gt;() );
	}


	public String getName()
	{
		return name;
	}


	public ShopType getType()
	{
		return type;
	}


	public int[] getItems()
	{
		return items;
	}


	public int[] getAmounts()
	{
		return amounts;
	}


	public int[] getInitialStockAmounts()
	{
		return initialStockAmounts;
	}


	public int[] getShopDelay()
	{
		return shopDelay;
	}


	public int getNumberOfDefaultItems()
	{
		return numberOfDefaultItems;
	}


	public Set&lt;Client&gt; getShoppingPlayers()
	{
		return shoppingPlayers;
	}

	public Currency getCurrency()
	{
		return currency;
	}

	public static interface Currency
	{

		public String getName();


		public int getAmount( Client client );


		public void delete( Client client, int amount );


		public void add( Client client, int amount );


		public int getSellPrice( int item );


		public int getBuyPrice( int item );

	}

}</code></pre>
<p>it’s still pretty inconsistent and rushed in some places (didn’t really want to spend a ton of time on it). Oh and I tested it everything is working swell, so feel free to rip/use/whatever</p>
<p>edit2: fixed 2 bugs with this, one being able to purchase as long as you ahad gp in inv and other being that the entire item was removed from the shop if you bought one and the stack was higher than that</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/23</link>
        <pubDate>Wed, 15 Jan 2014 05:24:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-23</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“HcoJustin, post:21, topic:537955”][quote author=sk8rdude461 link=topic=656781.msg4398214#msg4398214 date=1389757472]</p>
<aside class="quote">
<blockquote>
<p>I’m pretty sure that it was a boolean for a reason.</p>
</blockquote>
</aside>
<p>I’m not seeing the point of it being one.<br>
[/quote]<br>
If a method has a chance to fail, the caller needs to have the ability to know. Wouldn’t you be pissed if Collection.add failed didn’t tell you? It could be hell to try and debug why your program randomly stopped working properly. Just because you personally don’t use it in your code doesn’t mean someone in the future won’t.[/quote]<br>
I see your point, but imo I thought this would do better as a method instead of a boolean.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/22</link>
        <pubDate>Wed, 15 Jan 2014 05:08:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-22</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>[quote=“sk8rdude461, post:20, topic:537955”][quote author=wildskiller link=topic=656781.msg4398072#msg4398072 date=1389724038]<br>
I’m pretty sure that it was a boolean for a reason.<br>
[/quote]<br>
I’m not seeing the point of it being one.[/quote]<br>
If a method has a chance to fail, the caller needs to have the ability to know. Wouldn’t you be pissed if Collection.add failed didn’t tell you? It could be hell to try and debug why your program randomly stopped working properly. Just because you personally don’t use it in your code doesn’t mean someone in the future won’t.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/21</link>
        <pubDate>Wed, 15 Jan 2014 03:56:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-21</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="19" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/wildskiller/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> wildskiller:</div>
<blockquote>
<p>I’m pretty sure that it was a boolean for a reason.</p>
</blockquote>
</aside>
<p>I’m not seeing the point of it being one.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/20</link>
        <pubDate>Wed, 15 Jan 2014 03:44:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-20</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I’m pretty sure that it was a boolean for a reason.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/19</link>
        <pubDate>Tue, 14 Jan 2014 18:27:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-19</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ambokile, post:17, topic:537955”][quote author=sk8rdude461 link=topic=656781.msg4395080#msg4395080 date=1388874610]</p>
<aside class="quote">
<blockquote>
<p>[quote author=sk8rdude461 link=topic=656781.msg4394931#msg4394931 date=1388821897]I actually meant to make it so if you tried to buy more than you could afford, it’d change the price to however many you could. I completely spaced it.<br>
that feature.</p>
<p>As for writing in better conventions, I have always wrote like that, first time it’s been said to me that it’s bad. Oops.</p>
</blockquote>
</aside>
<p>What do you mean? I don’t quite understand.</p>
<p>I think that Java aims to be nice and spaced out.<br>
[/quote]<br>
I didn’t say java.<br>
I said I spaced writing a feature.<br>
I also said I have always wrote my code like that.<br>
Had nothing to do with java[/quote]</p>
<p>Regardless of whether you said Java, the code you wrote is in Java. Therefore it should follow the conventions for <span class="bbcode-b">Java</span>, not your own conventions that you use for every single language. Writing your code for every language following the exact same conventions is wrong - conventions exist for a reason! Theoretically, every piece of code written for any language should be styled the same as every other piece of code written for that language.</p>
<p>What does “I spaced writing a feature” mean? You wrote it badly? You wrote it well? You didn’t write it intentionally? You forgot to write it? My “Java aims to be nice and spaced out” wasn’t linked to your “I completely spaced it. that feature.”, it was to do with the fact that you seem to avoid spaces in your code styling.[/quote]<br>
Yes, I forgot to write the feature in. That’s what I meant. I couldn’t tell if you were confused by that statement originally or not.</p>
<p>And I haven’t fully read up on all java conventions, and that was my bad. I will go take another read on them and fix mine, sorry.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/18</link>
        <pubDate>Sat, 04 Jan 2014 23:30:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-18</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Ambokile Ambokile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ambokile">@Ambokile</a> wrote:</p>
          <blockquote>
              <p>[quote=“sk8rdude461, post:16, topic:537955”][quote author=Ambokile link=topic=656781.msg4395061#msg4395061 date=1388871444]</p>
<p>[quote author=sk8rdude461 link=topic=656781.msg4394931#msg4394931 date=1388821897]I actually meant to make it so if you tried to buy more than you could afford, it’d change the price to however many you could. I completely spaced it.<br>
that feature.</p>
<p>As for writing in better conventions, I have always wrote like that, first time it’s been said to me that it’s bad. Oops.<br>
[/quote]</p>
<p>What do you mean? I don’t quite understand.</p>
<p>I think that Java aims to be nice and spaced out.<br>
[/quote]<br>
I didn’t say java.<br>
I said I spaced writing a feature.<br>
I also said I have always wrote my code like that.<br>
Had nothing to do with java[/quote]</p>
<p>Regardless of whether you said Java, the code you wrote is in Java. Therefore it should follow the conventions for <span class="bbcode-b">Java</span>, not your own conventions that you use for every single language. Writing your code for every language following the exact same conventions is wrong - conventions exist for a reason! Theoretically, every piece of code written for any language should be styled the same as every other piece of code written for that language.</p>
<p>What does “I spaced writing a feature” mean? You wrote it badly? You wrote it well? You didn’t write it intentionally? You forgot to write it? My “Java aims to be nice and spaced out” wasn’t linked to your “I completely spaced it. that feature.”, it was to do with the fact that you seem to avoid spaces in your code styling.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/17</link>
        <pubDate>Sat, 04 Jan 2014 23:07:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-17</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ambokile, post:14, topic:537955”][quote author=sk8rdude461 link=topic=656781.msg4394931#msg4394931 date=1388821897]I actually meant to make it so if you tried to buy more than you could afford, it’d change the price to however many you could. I completely spaced it.<br>
that feature.</p>
<p>As for writing in better conventions, I have always wrote like that, first time it’s been said to me that it’s bad. Oops.<br>
[/quote]</p>
<p>What do you mean? I don’t quite understand.</p>
<p>I think that Java aims to be nice and spaced out.[/quote]<br>
I didn’t say java.<br>
I said I spaced writing a feature.<br>
I also said I have always wrote my code like that.<br>
Had nothing to do with java</p>
<aside class="quote" data-post="15" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/strucker/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Strucker:</div>
<blockquote>
<p>nice to see you’re trying to improve pi</p>
</blockquote>
</aside>
<p>Thnx bby</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/16</link>
        <pubDate>Sat, 04 Jan 2014 22:30:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-16</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>nice to see you’re trying to improve pi</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/15</link>
        <pubDate>Sat, 04 Jan 2014 21:50:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-15</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Ambokile Ambokile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ambokile">@Ambokile</a> wrote:</p>
          <blockquote>
              <p>[quote=“sk8rdude461, post:9, topic:537955”]I actually meant to make it so if you tried to buy more than you could afford, it’d change the price to however many you could. I completely spaced it.<br>
that feature.</p>
<p>As for writing in better conventions, I have always wrote like that, first time it’s been said to me that it’s bad. Oops.[/quote]</p>
<p>What do you mean? I don’t quite understand.</p>
<p>I think that Java aims to be nice and spaced out.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/14</link>
        <pubDate>Sat, 04 Jan 2014 21:37:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-14</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>[quote=“sk8rdude461, post:11, topic:537955”][quote author=HcoJustin link=topic=656781.msg4394932#msg4394932 date=1388822241]<br>
I guess you guys have never heard of a method returning success on completion. Whether or not the server actually used it is on the developer, but there is nothing wrong with it before.<br>
[/quote]<br>
Except that the code was nasty and some parts were repeated 8 times.[/quote]<br>
I never said it was well written, but returning success is perfectly valid and can be quite useful. I was directing it at: [quote=“sk8rdude461, post:1, topic:537955”]Okay, first, I called it a boolean simply because Insanity make the buyItem <span class="bbcode-b">method</span> a boolean, instead of, well, a method.[/quote]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/13</link>
        <pubDate>Sat, 04 Jan 2014 19:00:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-13</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/hcojustin/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> HcoJustin:</div>
<blockquote>
<p>I guess you guys have never heard of a method returning success on completion. Whether or not the server actually used it is on the developer, but there is nothing wrong with it before.</p>
</blockquote>
</aside>
<p>If you see code and you know that you can shorten it/improve it why not?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/12</link>
        <pubDate>Sat, 04 Jan 2014 08:20:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-12</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/hcojustin/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> HcoJustin:</div>
<blockquote>
<p>I guess you guys have never heard of a method returning success on completion. Whether or not the server actually used it is on the developer, but there is nothing wrong with it before.</p>
</blockquote>
</aside>
<p>Except that the code was nasty and some parts were repeated 8 times.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/11</link>
        <pubDate>Sat, 04 Jan 2014 08:03:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-11</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>I guess you guys have never heard of a method returning success on completion. Whether or not the server actually used it is on the developer, but there is nothing wrong with it before.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/10</link>
        <pubDate>Sat, 04 Jan 2014 07:57:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-10</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ambokile, post:8, topic:537955”]I made a few modifications to your main buyItem method.</p>
<p>[ul][<em>]Created a getCurrencyForShop method for increased readability. No need to have it in the buyItem method.<br>
[</em>]Used the getCurrencyForShop method, assigned the value to currNum.<br>
[<em>]Added a more professional message if they attempt to buy less than 1 item.<br>
[</em>]Checked that they’re not buying a negative amount of items.<br>
[<em>]Removed your “if (itemId != itemId)”… that will never be true. itemId will always equal itself… use some programming common sense, sk8rdude!<br>
[</em>]Used a ternary statement to set the maximum amount instead of a big if statement.<br>
[<em>]Fixed your space-checking. It’s all good checking if the item is stackable, but if they have no spaces and the item is stackable, they may not have space for the item (if they don’t already have said item in their inventory).<br>
[</em>]If the item is stackable, check that they can hold that many items (if they have 2,000,000,000 arrows, they can’t buy 1,000,000,000 more.)[/ul]</p>
<p>[code=Java]	public int getCurrencyForShop(int shopId) {<br>
switch(shopId) {<br>
case 18:<br>
case 73:<br>
case 74:<br>
// PK Points<br>
return 3;<br>
case 29:<br>
case 30:<br>
case 31:<br>
// Tokkul<br>
return 2;<br>
case 48:<br>
// Slayer points<br>
return 6;<br>
case 78:<br>
// Vote points<br>
return 4;<br>
case 79:<br>
// Dungeoneering points<br>
return 5;<br>
default:<br>
// Coins<br>
return 1;<br>
}<br>
}</p>
<pre><code>public void buyItem(int itemID, int fromSlot, int amount) {
	int totalPrice = ((int) Math.floor(getItemShopValue(itemID, 0, fromSlot)) * amount);
	int currNum = getCurrencyForShop(c.myShopId);
		   
	if(amount &lt; 1) {
		c.sendMessage("You must buy at least one item.");
	}
	
	//If the currency is not coins, set the price to special items
	if(currNum != 1) {
		totalPrice = ((int)Math.floor(getSpecialItemValue(itemID) * amount));
	}
	
	//Buying skillcapes - Will do something for this later...
	if (c.myShopId == 14) {
		skillBuy(itemID);
		return;
	}
	
	// Dupe prevention
	if(!shopSellsItem(itemID))
		return;

	// If they attempt to buy more than the shop's stock, make them buy the shop's stock.
	int amountInShop = Server.shopHandler.ShopItemsN[c.myShopId][fromSlot];
	amount = ((amount &gt; amountInShop) ? amountInShop : amount);
	
	// Check that they have enough money
	if (getCurrency(currNum) &gt;= totalPrice) {
		// Check that they have enough space
		if((c.getItems().freeSlots() &gt; amount) || (Item.itemStackable[itemID] &amp;&amp; c.getItems().playerHasItem(itemID) &amp;&amp; ((c.getItems().getItemAmount(itemID) + amount) &lt; Integer.MAX_VALUE))) {
			// Remove currency for item
			handleCurrency(currNum, totalPrice);
			if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
				Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
			}
		} else {
			c.sendMessage("You don't have enough space in your inventory.");
			return;
		}
	} else {
		c.sendMessage("You don't have enough " + getNameForCurrency(currNum) + " to buy this.");
		return;
	}
	
	// If we got this far, the trade was successful!
	c.getItems().addItem(itemID, amount);
	Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= amount;
	Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
	
	// Reset the shop and the player's inventory
	c.getItems().resetItems(3823);
	resetShop(c.myShopId);
}[/code]
</code></pre>
<p>Please consider revising the Code Conventions for the Java Programming language. These include some really useful tips such as leaving a space after “//” in comments in order to make your comments more readable, leaving a space in between “if” and the opening bracket, and then between the closing bracket and the “{”. Another convention-related tip would be to leave a space before and after “+” when it’s used in something such as ““Curr:”+getCurrency(currNum)+” Price:"". You can find the conventions <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html" data-bbcode="true" rel="nofollow noopener">here</a>.[/quote]</p>
<p>I actually meant to make it so if you tried to buy more than you could afford, it’d change the price to however many you could. I completely spaced it.<br>
that feature.</p>
<p>As for writing in better conventions, I have always wrote like that, first time it’s been said to me that it’s bad. Oops.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/9</link>
        <pubDate>Sat, 04 Jan 2014 07:51:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-9</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Ambokile Ambokile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ambokile">@Ambokile</a> wrote:</p>
          <blockquote>
              <p>I made a few modifications to your main buyItem method.</p>
<p>[ul][<em>]Created a getCurrencyForShop method for increased readability. No need to have it in the buyItem method.<br>
[</em>]Used the getCurrencyForShop method, assigned the value to currNum.<br>
[<em>]Added a more professional message if they attempt to buy less than 1 item.<br>
[</em>]Checked that they’re not buying a negative amount of items.<br>
[<em>]Removed your “if (itemId != itemId)”… that will never be true. itemId will always equal itself… use some programming common sense, sk8rdude!<br>
[</em>]Used a ternary statement to set the maximum amount instead of a big if statement.<br>
[<em>]Fixed your space-checking. It’s all good checking if the item is stackable, but if they have no spaces and the item is stackable, they may not have space for the item (if they don’t already have said item in their inventory).<br>
[</em>]If the item is stackable, check that they can hold that many items (if they have 2,000,000,000 arrows, they can’t buy 1,000,000,000 more.)[/ul]</p>
<p>[code=Java]	public int getCurrencyForShop(int shopId) {<br>
switch(shopId) {<br>
case 18:<br>
case 73:<br>
case 74:<br>
// PK Points<br>
return 3;<br>
case 29:<br>
case 30:<br>
case 31:<br>
// Tokkul<br>
return 2;<br>
case 48:<br>
// Slayer points<br>
return 6;<br>
case 78:<br>
// Vote points<br>
return 4;<br>
case 79:<br>
// Dungeoneering points<br>
return 5;<br>
default:<br>
// Coins<br>
return 1;<br>
}<br>
}</p>
<pre><code>public void buyItem(int itemID, int fromSlot, int amount) {
	int totalPrice = ((int) Math.floor(getItemShopValue(itemID, 0, fromSlot)) * amount);
	int currNum = getCurrencyForShop(c.myShopId);
		   
	if(amount &lt; 1) {
		c.sendMessage("You must buy at least one item.");
	}
	
	//If the currency is not coins, set the price to special items
	if(currNum != 1) {
		totalPrice = ((int)Math.floor(getSpecialItemValue(itemID) * amount));
	}
	
	//Buying skillcapes - Will do something for this later...
	if (c.myShopId == 14) {
		skillBuy(itemID);
		return;
	}
	
	// Dupe prevention
	if(!shopSellsItem(itemID))
		return;

	// If they attempt to buy more than the shop's stock, make them buy the shop's stock.
	int amountInShop = Server.shopHandler.ShopItemsN[c.myShopId][fromSlot];
	amount = ((amount &gt; amountInShop) ? amountInShop : amount);
	
	// Check that they have enough money
	if (getCurrency(currNum) &gt;= totalPrice) {
		// Check that they have enough space
		if((c.getItems().freeSlots() &gt; amount) || (Item.itemStackable[itemID] &amp;&amp; c.getItems().playerHasItem(itemID) &amp;&amp; ((c.getItems().getItemAmount(itemID) + amount) &lt; Integer.MAX_VALUE))) {
			// Remove currency for item
			handleCurrency(currNum, totalPrice);
			if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
				Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
			}
		} else {
			c.sendMessage("You don't have enough space in your inventory.");
			return;
		}
	} else {
		c.sendMessage("You don't have enough " + getNameForCurrency(currNum) + " to buy this.");
		return;
	}
	
	// If we got this far, the trade was successful!
	c.getItems().addItem(itemID, amount);
	Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= amount;
	Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
	
	// Reset the shop and the player's inventory
	c.getItems().resetItems(3823);
	resetShop(c.myShopId);
}[/code]
</code></pre>
<p>Please consider revising the Code Conventions for the Java Programming language. These include some really useful tips such as leaving a space after “//” in comments in order to make your comments more readable, leaving a space in between “if” and the opening bracket, and then between the closing bracket and the “{”. Another convention-related tip would be to leave a space before and after “+” when it’s used in something such as ““Curr:”+getCurrency(currNum)+” Price:"". You can find the conventions <a href="http://www.oracle.com/technetwork/java/javase/documentation/codeconvtoc-136057.html" data-bbcode="true" rel="nofollow noopener">here</a>.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/8</link>
        <pubDate>Sat, 04 Jan 2014 02:27:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-8</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/dan0194/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> DAn0194:</div>
<blockquote>
<p>The default should be coins because that’s always what most of them are going to use. You can use an enum here if you are not going to have a lot of different shop currencies but if you are then just load them externally.</p>
</blockquote>
</aside>
<p>Again, I’m not the best at enums.<br>
I didn’t set the default return to 1 simply because the int I used for currency is set to 1 by default and won’t change unless they are in another shop.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/7</link>
        <pubDate>Sat, 04 Jan 2014 00:32:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-7</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <p>The default should be coins because that’s always what most of them are going to use. You can use an enum here if you are not going to have a lot of different shop currencies but if you are then just load them externally.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/6</link>
        <pubDate>Fri, 03 Jan 2014 23:35:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>itemID! = itemID</p>
<p>Yeah no that doesn’t stop a dupe</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/5</link>
        <pubDate>Fri, 03 Jan 2014 21:07:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
      <item>
        <title>[PI] Rewritting that garbage buyItem &#39;boolean&#39;</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="1" data-topic="537955">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sk8rdude461/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sk8rdude461:</div>
<blockquote>
<p>I called it a boolean simply because Insanity make the buyItem <span class="bbcode-b">method</span> a boolean, instead of, well, a method.</p>
</blockquote>
</aside>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
<p>I think you mean you used a function returning a boolean type because Insanity does as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955/4</link>
        <pubDate>Fri, 03 Jan 2014 21:03:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-537955-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-rewritting-that-garbage-buyitem-boolean/537955.rss">[PI] Rewritting that garbage buyItem &#39;boolean&#39;</source>
      </item>
  </channel>
</rss>
