<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dementhium PvP tokens rep++</title>
    <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766</link>
    <description>i know this a dumb question but i have a PvP token system and when i get a kill the person that dies gets the tokena not me i have put it on the wrong method so where should i put it instead?

skills.java:
[code]package org.dementhium.model.player;

import org.dementhium.content.misc.GraveStoneManager;
import org.dementhium.content.skills.Prayer;
import org.dementhium.model.Mob;
import org.dementhium.model.World;
import org.dementhium.model.mask.Animation;
import org.dementhium.net.ActionSender;
import org.dementhium.tickable.Tick;

public class Skills {

	public static final int SKILL_COUNT = 25;
	public static final double MAXIMUM_EXP = 200000000;

	private final Player player;
	private final int level[] = new int[SKILL_COUNT];
	private final double xp[] = new double[SKILL_COUNT];
	private int hitPoints;
	private int hitPointsRaised;
	private int experienceCounter;


	private boolean dead = false;

	//1801
	private double prayerPoints; //for flashing or w.e it&#39;s called

	public static final String[] SKILL_NAME = {&quot;Attack&quot;, &quot;Defence&quot;,
		&quot;Strength&quot;, &quot;Hitpoints&quot;, &quot;Range&quot;, &quot;Prayer&quot;, &quot;Magic&quot;, &quot;Cooking&quot;,
		&quot;Woodcutting&quot;, &quot;Fletching&quot;, &quot;Fishing&quot;, &quot;Firemaking&quot;, &quot;Crafting&quot;,
		&quot;Smithing&quot;, &quot;Mining&quot;, &quot;Herblore&quot;, &quot;Agility&quot;, &quot;Thieving&quot;, &quot;Slayer&quot;,
		&quot;Farming&quot;, &quot;Runecrafting&quot;, &quot;Hunter&quot;, &quot;Construction&quot;, &quot;Summoning&quot;,
	&quot;Dungeoneering&quot;};

	// 0 - 1, 1 - 4, 2 - 2,

	public static final int ATTACK = 0, DEFENCE = 1, STRENGTH = 2,
	HITPOINTS = 3, RANGE = 4, PRAYER = 5, MAGIC = 6, COOKING = 7,
	WOODCUTTING = 8, FLETCHING = 9, FISHING = 10, FIREMAKING = 11,
	CRAFTING = 12, SMITHING = 13, MINING = 14, HERBLORE = 15,
	AGILITY = 16, THIEVING = 17, SLAYER = 18, FARMING = 19,
	RUNECRAFTING = 20, CONSTRUCTION = 22, HUNTER = 21, SUMMONING = 23,
	DUNGEONEERING = 23;

	public static final int[] COMBAT_SKILLS =
	{
		ATTACK, DEFENCE, STRENGTH, HITPOINTS, RANGE, PRAYER, MAGIC, SUMMONING
	};


	public Skills(Player player) {
		this.player = player;
		for (int i = 0; i &lt; SKILL_COUNT; i++) {
			level[i] = 1;
			xp[i] = 0;
		}
		level[3] = 10;
		xp[3] = 1184;
		hitPoints = 100;
		prayerPoints = 1;
	}

	public void hit(int hitDiff) {
		if (hitDiff &gt; hitPoints)
			hitDiff = hitPoints;
		hitPoints -= hitDiff;
		if (hitPoints &lt; 1)
			sendDead();
		if (hitPoints &gt; getMaxHitpoints()) {
			hitPoints = getMaxHitpoints();
		}
		ActionSender.sendConfig(player, 1240, hitPoints * 2);
	}

	public boolean isDead() {
		return hitPoints &lt;= 0;
	}

	public int getMaxHitpoints() {
		return (getLevelForExperience(Skills.HITPOINTS) * 10) + hitPointsRaised;
	}

	//@SuppressWarnings(&quot;unused&quot;)
	public void sendDead() {
		/*if (true) {
              hitPoints = 990;
              return;
          }*/
          if (dead) {
        	  return;
          }
          dead = true;
          Mob last = player.getCombatExecutor().getLastAttacker();
          if (last != null) {
          		last.setAttribute(&quot;combatTicks&quot;, 0);
          }
          World.getWorld().submit(new Tick(1) {
        	  public void execute() {
        		  stop();
        		  if (!player.isOnline() || player.destroyed()) {
        			  return;
        		  }
        		  player.animate(9055);
        		  Prayer.wrathEffect(player, player.getCombatExecutor().getLastAttacker());
        		  Prayer.retributionEffect(player, player.getCombatExecutor().getLastAttacker());
        		  player.removeTick(&quot;nex_virus&quot;);
        		  player.submitTick(&quot;death_tick&quot;, new Tick(4) {
        			  @Override
        			  public void execute() {
        				  stop();
        				  dead = false;
        				  for (int i = 0; i &lt; SKILL_COUNT; i++) {
        					  set(i, getLevelForExperience(i));
        				  }
        				  hitPoints = getMaxHitpoints();
        				  player.animate(Animation.RESET);
        				  player.getPrayer().closeAllPrayers();
        				  player.sendMessage(&quot;Oh dear, you have died.&quot;);
        				  ActionSender.sendConfig(player, 1240, hitPoints * 2);
        				  player.setSpecialAmount(1000);
        				  player.resetCombat();
        				  player.getPoisonManager().removePoison();
        				  player.setAttribute(&quot;teleblock&quot;, 0);
        				  player.setAttribute(&quot;freezeTime&quot;, 0);
        				  Mob killer = player.getDamageManager().getKiller();
				if (player.getLocation().homesafepk(player)) {//In a safe activity we don&#39;t drop items or teleport to the DEFAULT_LOCATION, this will be done in the onDeath method.
							player.teleport(Mob.DEFAULT);
				}
        				if (!player.getActivity().onDeath(player)) { //In a safe activity we don&#39;t drop items or teleport to the DEFAULT_LOCATION, this will be done in the onDeath method.
        					  if (killer != null &amp;&amp; killer != player) {
        						  if (player.getRights() != 2) {
        							  GraveStoneManager.appendDeath(player, killer);
								player.getInventory().addItem(12852, 10);
									player.sendMessage(&quot;You are rewarded 10 PvP tokens.&quot;);
        						  }
        					  }
        					  player.teleport(Mob.DEFAULT);
        				  }
        			  }

        		  }, true);
        	  }
          });
	}

	public void heal(int hitDiff) {
		if (isDead()) {
			sendDead();
			return;
		}
		hitPoints += hitDiff;
		int max = getMaxHitpoints();
		if (hitPoints &gt; max) {
			hitPoints = max;
		}
		ActionSender.sendConfig(player, 1240, hitPoints * 2);
	}


	public void healRocktail(int healAmount) {
		hitPoints += healAmount;
		int max = getMaxHitpoints() + 100;
		if (hitPoints &gt; max) {
			hitPoints = max;
		}
		ActionSender.sendConfig(player, 1240, hitPoints * 2);
	}


	public void heal(int hitDiff, int type) {
		hitPoints += hitDiff;
		int max = type;
		if (hitPoints &gt; max) {
			hitPoints = max;
		}
		ActionSender.sendConfig(player, 1240, hitPoints * 2);
	}

	public void raiseTotalHp(int raise) {
		hitPointsRaised += raise;

		heal(0);
	}

	public void lowerTotalHp(int lower) {
		hitPointsRaised -= lower;

		if (hitPoints &lt;= 0) {
			hitPoints = 1;
		}
		heal(0);
	}

	public void restorePray(double restore) {
		setPrayerPoints(prayerPoints + restore, true);
		int max = getLevelForExperience(5);
		if (prayerPoints &gt; max) {
			prayerPoints = max;
		}
		ActionSender.sendSkillLevel(player, 5);
	}

	public void drainPray(double drain) {
		setPrayerPoints(prayerPoints - drain, true);
		if (prayerPoints &lt; 1) {
			prayerPoints = 0;
		}
		ActionSender.sendSkillLevel(player, 5);
	}

	public void reset() {
		for (int i = 0; i &lt; SKILL_COUNT; i++) {
			level[i] = 1;
			xp[i] = 0;
		}
		level[3] = 10;
		xp[3] = 1184;
		hitPoints = 100;
		prayerPoints = 1;
		refresh();
	}

	public int getCombatLevel() {
		int attack = getLevelForExperience(0);
		int defence = getLevelForExperience(1);
		int strength = getLevelForExperience(2);
		int hp = getLevelForExperience(3);
		int prayer = getLevelForExperience(5);
		int ranged = getLevelForExperience(4);
		int magic = getLevelForExperience(6);
		int combatLevel = 3;
		combatLevel = (int) ((defence + hp + Math.floor(prayer / 2)) * 0.25) + 1;
		double melee = (attack + strength) * 0.325;
		double ranger = Math.floor(ranged * 1.5) * 0.325;
		double mage = Math.floor(magic * 1.5) * 0.325;
		if (melee &gt;= ranger &amp;&amp; melee &gt;= mage) {
			combatLevel += melee;
		} else if (ranger &gt;= melee &amp;&amp; ranger &gt;= mage) {
			combatLevel += ranger;
		} else if (mage &gt;= melee &amp;&amp; mage &gt;= ranger) {
			combatLevel += mage;
		}
		int summoning = getLevelForExperience(Skills.SUMMONING);
		summoning /= 8;
		return combatLevel + summoning;
	}

	public int getLevel(int skill) {
		return level[skill];
	}

	public double getXp(int skill) {
		return xp[skill];
	}

	public int getXPForLevel(int level) {
		int points = 0;
		int output = 0;
		for (int lvl = 1; lvl &lt;= level; lvl++) {
			points += Math.floor(lvl + 300.0
					* Math.pow(2.0, lvl / 7.0));
			if (lvl &gt;= level) {
				return output;
			}
			output = (int) Math.floor(points / 4);
		}
		return 0;
	}

	public int getLevelForExperience(int skill) {
		double exp = xp[skill];
		int points = 0;
		int output = 0;
		for (int lvl = 1; lvl &lt; (skill == 24 ? 121 : 100); lvl++) {
			points += Math.floor(lvl + 300.0
					* Math.pow(2.0, lvl / 7.0));
			output = (int) Math.floor(points / 4);
			if ((output - 1) &gt;= exp) {
				return lvl;
			}
		}
		return skill == 24 ? 120 : 99;
	}

	public void setXp(int skill, double exp) {
		xp[skill] = exp;
		ActionSender.sendSkillLevel(player, skill);
	}

	public static final double XP_MODIFIER = 50.0;

	public void addExperience(int skill, double exp) {
		int oldLevel = getLevelForExperience(skill);
		int oldCombat = getCombatLevel();
		double experience;
		if (skill == ATTACK || skill == DEFENCE || skill == STRENGTH || skill == RANGE || skill == MAGIC || skill == HITPOINTS) {
			experience = exp * XP_MODIFIER * 2;
		} else {
			experience = exp * (player.isDoubleXP() ? (XP_MODIFIER * 1.5) : (XP_MODIFIER));
		}
		xp[skill] += experience;
		experienceCounter += experience;
		if (xp[skill] &gt; MAXIMUM_EXP) {
			xp[skill] = MAXIMUM_EXP;
		}
		int newLevel = getLevelForExperience(skill);
		int levelDiff = newLevel - oldLevel;
		if (newLevel &gt; oldLevel) {
			level[skill] += levelDiff;
			player.getSettings().getLeveledUp()[skill] = true;
			player.setAttribute(&quot;leveledUp&quot;, Boolean.TRUE);
			if (skill == HITPOINTS) {
				heal(levelDiff * 10);
			}
			if(skill == PRAYER) {
				restorePray(levelDiff);
			}
			if (oldCombat != getCombatLevel()) {
				player.getMask().setApperanceUpdate(true);
			}
		}
		ActionSender.sendSkillLevel(player, skill);
	}


	public void set(int skill, int val) {
		if (skill == Skills.PRAYER) {
			prayerPoints = val;
		}
		if (val &lt; 0) {
			val = 0;
		}
		level[skill] = val;
		ActionSender.sendSkillLevel(player, skill);
	}

	public void setLevelAndXP(int skill, int level, double xp) {
		if (skill == Skills.PRAYER) {
			prayerPoints = level;
		}
		this.level[skill] = level;
		this.xp[skill] = xp;
	}

	public void sendSkillLevels() {
		for (int i = 0; i &lt; Skills.SKILL_COUNT; i++)
			ActionSender.sendSkillLevel(player, i);
	}

	public void refresh() {
		sendSkillLevels();
		ActionSender.sendConfig(player, 1240, hitPoints * 2);
		this.player.getMask().setApperanceUpdate(true);
	}

	public boolean isLevelBelowOriginal(int skill) {
		return level[skill] &lt; getLevelForExperience(skill);
	}

	public boolean isLevelBelowOriginalModification(int skill, int modification) {
		return level[skill] &lt; (getLevelForExperience(skill) + modification);
	}

	public void increaseLevelToMaximum(int skill, int modification) {
		if (isLevelBelowOriginal(skill)) {
			setLevel(skill, level[skill] + modification &gt;= getLevelForExperience(skill) ? getLevelForExperience(skill) : level[skill] + modification);
		}
	}

	public void increaseLevelToMaximumModification(int skill, int modification) {
		if (isLevelBelowOriginalModification(skill, modification)) {
			setLevel(skill, level[skill] + modification &gt;= (getLevelForExperience(skill) + modification) ? (getLevelForExperience(skill) + modification) : level[skill] + modification);
		}
	}

	public void decreaseLevelToMinimum(int skill, int modification) {
		if (level[skill] &gt; 1) {
			setLevel(skill, level[skill] - modification &lt;= 1 ? 1 : level[skill] - modification);
		}
	}

	public void decreaseLevelToZero(int skill, int modification) {
		if (level[skill] &gt; 0) {
			setLevel(skill, level[skill] - modification &lt;= 0 ? 0 : level[skill] - modification);
		}
	}

	public void decreaseLevelOnce(int skill, int amount) {
		if (level[skill] &gt; (getLevelForExperience(skill) - amount)) { //this stops resetting levels. EG if I have 87/95 str and it decreases 5, normally it would reset it to 90/95, however this line prevents it!
			if (level[skill] - amount &lt;= (getLevelForExperience(skill) - amount)) {
				level[skill] = (getLevelForExperience(skill) - amount);
			} else {
				level[skill] -= amount;
			}
			ActionSender.sendSkillLevel(player, skill);
		}
	}

	public void setLevel(int skill, int level) {
		this.level[skill] = level;
		ActionSender.sendSkillLevel(player, skill);
	}

	public void setHitPoints(int hitPoints) {
		this.hitPoints = hitPoints;
	}

	public int getHitPoints() {
		return hitPoints;
	}

	public double getPrayerPoints() {
		return prayerPoints;
	}

	public void setPrayerPoints(double prayerPoints, boolean update) {
		int lvlBefore = (int) Math.ceil(this.prayerPoints);
		this.prayerPoints = prayerPoints;
		int lvlAfter = (int) Math.ceil(this.prayerPoints);
		if (update &amp;&amp; (lvlBefore - lvlAfter &gt;= 1 || lvlAfter - lvlBefore &gt;= 1)) {
			ActionSender.sendSkillLevel(player, Skills.PRAYER);
		}
	}

	public int getExperienceCounter() {
		return experienceCounter;
	}

	public void setExperienceCounter(int experienceCounter) {
		this.experienceCounter = experienceCounter;
	}

	public void completeRestore() {
		for (int i = 0; i &lt; SKILL_COUNT; i++) {
			set(i, getLevelForExperience(i));
		}
		hitPoints = getMaxHitpoints();
		//		for (int i = 0; i &lt; level.length; i++) {
			//			level[i] = getLevelForExperience(i);
			//			ActionSender.sendSkillLevel(player, i);
		//		}
		//		heal(990);
	}

	public void setHitpointsRaised(int amount) {
		this.hitPointsRaised = amount;
	}

	/**
	 * Drains a skill and returns the amount that couldn&#39;t be drained.
	 * @param skill The skill id.
	 * @param drain The value to decrease.
	 * @return The amount left to decrease. (ex. if attackLevel - drain &lt; 0,
	 * &lt;br&gt;		we return drain - attackLevel)
	 */
	public int drainLevel(int skill, int drain) {
		int drainLeft = drain - level[skill];
		if (drainLeft &lt; 0) {
			drainLeft = 0;
		}
		level[skill] -= drain;
		if (level[skill] &lt; 0) {
			level[skill] = 0;
		}
		ActionSender.sendSkillLevel(player, skill);
		return drainLeft;
	}


}
[/code]
thanks.</description>
    
    <lastBuildDate>Sat, 02 Jun 2012 16:50:42 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@owns_reece owns reece]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/owns_reece">@owns_reece</a> wrote:</p>
          <blockquote>
              <p>what tut ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/7</link>
        <pubDate>Sat, 02 Jun 2012 16:50:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-7</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@kthillman kthillman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kthillman">@kthillman</a> wrote:</p>
          <blockquote>
              <p>You should just do a points system… like the tut shows</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/6</link>
        <pubDate>Sat, 02 Jun 2012 16:46:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-6</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@owns_reece owns reece]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/owns_reece">@owns_reece</a> wrote:</p>
          <blockquote>
              <p>yeah im having tokens so i can have people trading them no scamming</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/5</link>
        <pubDate>Sat, 02 Jun 2012 15:40:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-5</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@kthillman kthillman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kthillman">@kthillman</a> wrote:</p>
          <blockquote>
              <p>Your pk points system is an item?<br>
Because there is:</p>
<pre><code class="lang-auto">                                                                player.getInventory().addItem(12852, 10);</code></pre>
<p>Also… here is link to setup an ACTUAL pk system… with “points” instead of an “item” of some sort.<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://forum.moparisthebest.com/uploads/default/original/2X/1/1f0dc167bcf798bdbd70b03bf0fd1bc836e54e1a.png" class="site-icon" width="32" height="32">
      <a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://forum.moparisthebest.com/uploads/default/original/2X/4/41fecb6185fddc2758aeba68c3f8c9c78e26e4ff.png" class="thumbnail onebox-avatar" width="500" height="500">

<h3><a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a></h3>

<p>programming, irc, cars</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/4</link>
        <pubDate>Sat, 02 Jun 2012 15:21:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-4</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@owns_reece owns reece]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/owns_reece">@owns_reece</a> wrote:</p>
          <blockquote>
              <p>I KNOW. SO WHERE DO I PUT IT INSTEAD?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/3</link>
        <pubDate>Sat, 02 Jun 2012 14:52:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-3</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@kthillman kthillman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kthillman">@kthillman</a> wrote:</p>
          <blockquote>
              <p>IN YOUR:</p>
<pre><code class="lang-auto"></code></pre>
<p>METHOD… YOU ARE BASICALLY SAYING WHEN THEY DIE… THEY WILL BE AWARDED “10” PK POINTS.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/2</link>
        <pubDate>Sat, 02 Jun 2012 14:45:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-2</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
      <item>
        <title>Dementhium PvP tokens rep++</title>
        <dc:creator><![CDATA[@owns_reece owns reece]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/owns_reece">@owns_reece</a> wrote:</p>
          <blockquote>
              <p>i know this a dumb question but i have a PvP token system and when i get a kill the person that dies gets the tokena not me i have put it on the wrong method so where should i put it instead?</p>
<p>skills.java:</p>
<p>[code]package org.dementhium.model.player;</p>
<p>import org.dementhium.content.misc.GraveStoneManager;<br>
import org.dementhium.content.skills.Prayer;<br>
import org.dementhium.model.Mob;<br>
import org.dementhium.model.World;<br>
import org.dementhium.model.mask.Animation;<br>
import org.dementhium.net.ActionSender;<br>
import org.dementhium.tickable.Tick;</p>
<p>public class Skills {</p>
<pre><code>public static final int SKILL_COUNT = 25;
public static final double MAXIMUM_EXP = 200000000;

private final Player player;
private final int level[] = new int[SKILL_COUNT];
private final double xp[] = new double[SKILL_COUNT];
private int hitPoints;
private int hitPointsRaised;
private int experienceCounter;


private boolean dead = false;

//1801
private double prayerPoints; //for flashing or w.e it's called

public static final String[] SKILL_NAME = {"Attack", "Defence",
	"Strength", "Hitpoints", "Range", "Prayer", "Magic", "Cooking",
	"Woodcutting", "Fletching", "Fishing", "Firemaking", "Crafting",
	"Smithing", "Mining", "Herblore", "Agility", "Thieving", "Slayer",
	"Farming", "Runecrafting", "Hunter", "Construction", "Summoning",
"Dungeoneering"};

// 0 - 1, 1 - 4, 2 - 2,

public static final int ATTACK = 0, DEFENCE = 1, STRENGTH = 2,
HITPOINTS = 3, RANGE = 4, PRAYER = 5, MAGIC = 6, COOKING = 7,
WOODCUTTING = 8, FLETCHING = 9, FISHING = 10, FIREMAKING = 11,
CRAFTING = 12, SMITHING = 13, MINING = 14, HERBLORE = 15,
AGILITY = 16, THIEVING = 17, SLAYER = 18, FARMING = 19,
RUNECRAFTING = 20, CONSTRUCTION = 22, HUNTER = 21, SUMMONING = 23,
DUNGEONEERING = 23;

public static final int[] COMBAT_SKILLS =
{
	ATTACK, DEFENCE, STRENGTH, HITPOINTS, RANGE, PRAYER, MAGIC, SUMMONING
};


public Skills(Player player) {
	this.player = player;
	for (int i = 0; i &lt; SKILL_COUNT; i++) {
		level[i] = 1;
		xp[i] = 0;
	}
	level[3] = 10;
	xp[3] = 1184;
	hitPoints = 100;
	prayerPoints = 1;
}

public void hit(int hitDiff) {
	if (hitDiff &gt; hitPoints)
		hitDiff = hitPoints;
	hitPoints -= hitDiff;
	if (hitPoints &lt; 1)
		sendDead();
	if (hitPoints &gt; getMaxHitpoints()) {
		hitPoints = getMaxHitpoints();
	}
	ActionSender.sendConfig(player, 1240, hitPoints * 2);
}

public boolean isDead() {
	return hitPoints &lt;= 0;
}

public int getMaxHitpoints() {
	return (getLevelForExperience(Skills.HITPOINTS) * 10) + hitPointsRaised;
}

//@SuppressWarnings("unused")
public void sendDead() {
	/*if (true) {
          hitPoints = 990;
          return;
      }*/
      if (dead) {
    	  return;
      }
      dead = true;
      Mob last = player.getCombatExecutor().getLastAttacker();
      if (last != null) {
      		last.setAttribute("combatTicks", 0);
      }
      World.getWorld().submit(new Tick(1) {
    	  public void execute() {
    		  stop();
    		  if (!player.isOnline() || player.destroyed()) {
    			  return;
    		  }
    		  player.animate(9055);
    		  Prayer.wrathEffect(player, player.getCombatExecutor().getLastAttacker());
    		  Prayer.retributionEffect(player, player.getCombatExecutor().getLastAttacker());
    		  player.removeTick("nex_virus");
    		  player.submitTick("death_tick", new Tick(4) {
    			  @Override
    			  public void execute() {
    				  stop();
    				  dead = false;
    				  for (int i = 0; i &lt; SKILL_COUNT; i++) {
    					  set(i, getLevelForExperience(i));
    				  }
    				  hitPoints = getMaxHitpoints();
    				  player.animate(Animation.RESET);
    				  player.getPrayer().closeAllPrayers();
    				  player.sendMessage("Oh dear, you have died.");
    				  ActionSender.sendConfig(player, 1240, hitPoints * 2);
    				  player.setSpecialAmount(1000);
    				  player.resetCombat();
    				  player.getPoisonManager().removePoison();
    				  player.setAttribute("teleblock", 0);
    				  player.setAttribute("freezeTime", 0);
    				  Mob killer = player.getDamageManager().getKiller();
			if (player.getLocation().homesafepk(player)) {//In a safe activity we don't drop items or teleport to the DEFAULT_LOCATION, this will be done in the onDeath method.
						player.teleport(Mob.DEFAULT);
			}
    				if (!player.getActivity().onDeath(player)) { //In a safe activity we don't drop items or teleport to the DEFAULT_LOCATION, this will be done in the onDeath method.
    					  if (killer != null &amp;&amp; killer != player) {
    						  if (player.getRights() != 2) {
    							  GraveStoneManager.appendDeath(player, killer);
							player.getInventory().addItem(12852, 10);
								player.sendMessage("You are rewarded 10 PvP tokens.");
    						  }
    					  }
    					  player.teleport(Mob.DEFAULT);
    				  }
    			  }

    		  }, true);
    	  }
      });
}

public void heal(int hitDiff) {
	if (isDead()) {
		sendDead();
		return;
	}
	hitPoints += hitDiff;
	int max = getMaxHitpoints();
	if (hitPoints &gt; max) {
		hitPoints = max;
	}
	ActionSender.sendConfig(player, 1240, hitPoints * 2);
}


public void healRocktail(int healAmount) {
	hitPoints += healAmount;
	int max = getMaxHitpoints() + 100;
	if (hitPoints &gt; max) {
		hitPoints = max;
	}
	ActionSender.sendConfig(player, 1240, hitPoints * 2);
}


public void heal(int hitDiff, int type) {
	hitPoints += hitDiff;
	int max = type;
	if (hitPoints &gt; max) {
		hitPoints = max;
	}
	ActionSender.sendConfig(player, 1240, hitPoints * 2);
}

public void raiseTotalHp(int raise) {
	hitPointsRaised += raise;

	heal(0);
}

public void lowerTotalHp(int lower) {
	hitPointsRaised -= lower;

	if (hitPoints &lt;= 0) {
		hitPoints = 1;
	}
	heal(0);
}

public void restorePray(double restore) {
	setPrayerPoints(prayerPoints + restore, true);
	int max = getLevelForExperience(5);
	if (prayerPoints &gt; max) {
		prayerPoints = max;
	}
	ActionSender.sendSkillLevel(player, 5);
}

public void drainPray(double drain) {
	setPrayerPoints(prayerPoints - drain, true);
	if (prayerPoints &lt; 1) {
		prayerPoints = 0;
	}
	ActionSender.sendSkillLevel(player, 5);
}

public void reset() {
	for (int i = 0; i &lt; SKILL_COUNT; i++) {
		level[i] = 1;
		xp[i] = 0;
	}
	level[3] = 10;
	xp[3] = 1184;
	hitPoints = 100;
	prayerPoints = 1;
	refresh();
}

public int getCombatLevel() {
	int attack = getLevelForExperience(0);
	int defence = getLevelForExperience(1);
	int strength = getLevelForExperience(2);
	int hp = getLevelForExperience(3);
	int prayer = getLevelForExperience(5);
	int ranged = getLevelForExperience(4);
	int magic = getLevelForExperience(6);
	int combatLevel = 3;
	combatLevel = (int) ((defence + hp + Math.floor(prayer / 2)) * 0.25) + 1;
	double melee = (attack + strength) * 0.325;
	double ranger = Math.floor(ranged * 1.5) * 0.325;
	double mage = Math.floor(magic * 1.5) * 0.325;
	if (melee &gt;= ranger &amp;&amp; melee &gt;= mage) {
		combatLevel += melee;
	} else if (ranger &gt;= melee &amp;&amp; ranger &gt;= mage) {
		combatLevel += ranger;
	} else if (mage &gt;= melee &amp;&amp; mage &gt;= ranger) {
		combatLevel += mage;
	}
	int summoning = getLevelForExperience(Skills.SUMMONING);
	summoning /= 8;
	return combatLevel + summoning;
}

public int getLevel(int skill) {
	return level[skill];
}

public double getXp(int skill) {
	return xp[skill];
}

public int getXPForLevel(int level) {
	int points = 0;
	int output = 0;
	for (int lvl = 1; lvl &lt;= level; lvl++) {
		points += Math.floor(lvl + 300.0
				* Math.pow(2.0, lvl / 7.0));
		if (lvl &gt;= level) {
			return output;
		}
		output = (int) Math.floor(points / 4);
	}
	return 0;
}

public int getLevelForExperience(int skill) {
	double exp = xp[skill];
	int points = 0;
	int output = 0;
	for (int lvl = 1; lvl &lt; (skill == 24 ? 121 : 100); lvl++) {
		points += Math.floor(lvl + 300.0
				* Math.pow(2.0, lvl / 7.0));
		output = (int) Math.floor(points / 4);
		if ((output - 1) &gt;= exp) {
			return lvl;
		}
	}
	return skill == 24 ? 120 : 99;
}

public void setXp(int skill, double exp) {
	xp[skill] = exp;
	ActionSender.sendSkillLevel(player, skill);
}

public static final double XP_MODIFIER = 50.0;

public void addExperience(int skill, double exp) {
	int oldLevel = getLevelForExperience(skill);
	int oldCombat = getCombatLevel();
	double experience;
	if (skill == ATTACK || skill == DEFENCE || skill == STRENGTH || skill == RANGE || skill == MAGIC || skill == HITPOINTS) {
		experience = exp * XP_MODIFIER * 2;
	} else {
		experience = exp * (player.isDoubleXP() ? (XP_MODIFIER * 1.5) : (XP_MODIFIER));
	}
	xp[skill] += experience;
	experienceCounter += experience;
	if (xp[skill] &gt; MAXIMUM_EXP) {
		xp[skill] = MAXIMUM_EXP;
	}
	int newLevel = getLevelForExperience(skill);
	int levelDiff = newLevel - oldLevel;
	if (newLevel &gt; oldLevel) {
		level[skill] += levelDiff;
		player.getSettings().getLeveledUp()[skill] = true;
		player.setAttribute("leveledUp", Boolean.TRUE);
		if (skill == HITPOINTS) {
			heal(levelDiff * 10);
		}
		if(skill == PRAYER) {
			restorePray(levelDiff);
		}
		if (oldCombat != getCombatLevel()) {
			player.getMask().setApperanceUpdate(true);
		}
	}
	ActionSender.sendSkillLevel(player, skill);
}


public void set(int skill, int val) {
	if (skill == Skills.PRAYER) {
		prayerPoints = val;
	}
	if (val &lt; 0) {
		val = 0;
	}
	level[skill] = val;
	ActionSender.sendSkillLevel(player, skill);
}

public void setLevelAndXP(int skill, int level, double xp) {
	if (skill == Skills.PRAYER) {
		prayerPoints = level;
	}
	this.level[skill] = level;
	this.xp[skill] = xp;
}

public void sendSkillLevels() {
	for (int i = 0; i &lt; Skills.SKILL_COUNT; i++)
		ActionSender.sendSkillLevel(player, i);
}

public void refresh() {
	sendSkillLevels();
	ActionSender.sendConfig(player, 1240, hitPoints * 2);
	this.player.getMask().setApperanceUpdate(true);
}

public boolean isLevelBelowOriginal(int skill) {
	return level[skill] &lt; getLevelForExperience(skill);
}

public boolean isLevelBelowOriginalModification(int skill, int modification) {
	return level[skill] &lt; (getLevelForExperience(skill) + modification);
}

public void increaseLevelToMaximum(int skill, int modification) {
	if (isLevelBelowOriginal(skill)) {
		setLevel(skill, level[skill] + modification &gt;= getLevelForExperience(skill) ? getLevelForExperience(skill) : level[skill] + modification);
	}
}

public void increaseLevelToMaximumModification(int skill, int modification) {
	if (isLevelBelowOriginalModification(skill, modification)) {
		setLevel(skill, level[skill] + modification &gt;= (getLevelForExperience(skill) + modification) ? (getLevelForExperience(skill) + modification) : level[skill] + modification);
	}
}

public void decreaseLevelToMinimum(int skill, int modification) {
	if (level[skill] &gt; 1) {
		setLevel(skill, level[skill] - modification &lt;= 1 ? 1 : level[skill] - modification);
	}
}

public void decreaseLevelToZero(int skill, int modification) {
	if (level[skill] &gt; 0) {
		setLevel(skill, level[skill] - modification &lt;= 0 ? 0 : level[skill] - modification);
	}
}

public void decreaseLevelOnce(int skill, int amount) {
	if (level[skill] &gt; (getLevelForExperience(skill) - amount)) { //this stops resetting levels. EG if I have 87/95 str and it decreases 5, normally it would reset it to 90/95, however this line prevents it!
		if (level[skill] - amount &lt;= (getLevelForExperience(skill) - amount)) {
			level[skill] = (getLevelForExperience(skill) - amount);
		} else {
			level[skill] -= amount;
		}
		ActionSender.sendSkillLevel(player, skill);
	}
}

public void setLevel(int skill, int level) {
	this.level[skill] = level;
	ActionSender.sendSkillLevel(player, skill);
}

public void setHitPoints(int hitPoints) {
	this.hitPoints = hitPoints;
}

public int getHitPoints() {
	return hitPoints;
}

public double getPrayerPoints() {
	return prayerPoints;
}

public void setPrayerPoints(double prayerPoints, boolean update) {
	int lvlBefore = (int) Math.ceil(this.prayerPoints);
	this.prayerPoints = prayerPoints;
	int lvlAfter = (int) Math.ceil(this.prayerPoints);
	if (update &amp;&amp; (lvlBefore - lvlAfter &gt;= 1 || lvlAfter - lvlBefore &gt;= 1)) {
		ActionSender.sendSkillLevel(player, Skills.PRAYER);
	}
}

public int getExperienceCounter() {
	return experienceCounter;
}

public void setExperienceCounter(int experienceCounter) {
	this.experienceCounter = experienceCounter;
}

public void completeRestore() {
	for (int i = 0; i &lt; SKILL_COUNT; i++) {
		set(i, getLevelForExperience(i));
	}
	hitPoints = getMaxHitpoints();
	//		for (int i = 0; i &lt; level.length; i++) {
		//			level[i] = getLevelForExperience(i);
		//			ActionSender.sendSkillLevel(player, i);
	//		}
	//		heal(990);
}

public void setHitpointsRaised(int amount) {
	this.hitPointsRaised = amount;
}

/**
 * Drains a skill and returns the amount that couldn't be drained.
 * @param skill The skill id.
 * @param drain The value to decrease.
 * @return The amount left to decrease. (ex. if attackLevel - drain &lt; 0,
 * &lt;br&gt;		we return drain - attackLevel)
 */
public int drainLevel(int skill, int drain) {
	int drainLeft = drain - level[skill];
	if (drainLeft &lt; 0) {
		drainLeft = 0;
	}
	level[skill] -= drain;
	if (level[skill] &lt; 0) {
		level[skill] = 0;
	}
	ActionSender.sendSkillLevel(player, skill);
	return drainLeft;
}
</code></pre>
<p>}<br>
[/code]<br>
thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766/1</link>
        <pubDate>Sat, 02 Jun 2012 14:32:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443766-1</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-pvp-tokens-rep/443766.rss">Dementhium PvP tokens rep++</source>
      </item>
  </channel>
</rss>
