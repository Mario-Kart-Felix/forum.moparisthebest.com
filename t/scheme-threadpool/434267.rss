<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Scheme threadpool</title>
    <link>https://forum.moparisthebest.com/t/scheme-threadpool/434267</link>
    <description>bored, decided to fiddle. works with Chicken Scheme, and apparently Scheme syntax highlighting here is borked. suggestions welcome, i know i should really be separating the worker function but i&#39;m not too sure it will play well with my mutex.

[code=Lisp](use srfi-18)
(use data-structures)

(define (vector-map! f v)
  (let loop ((i 0))
    (when (&lt; i (vector-length v))
      (vector-set! v i (f (vector-ref v i)))
      (loop (+ i 1)))))

(define (make-threadpool n)
  (let ((threads &#39;#())
        (mutex (make-mutex))
        (queue (make-queue))
        (terminate? #f))
    (letrec ((threadpool-worker (lambda ()
               (let loop ()
                 (mutex-lock! mutex)
                 (cond ((not (queue-empty? queue))
                        (let ((task (queue-remove! queue)))
                          (when (procedure? task)
                            (mutex-unlock! mutex)
                            (task))))
                       (else (mutex-unlock! mutex)))
                 (if (not terminate?)
                   (loop)
                   (begin
                     (mutex-unlock! mutex)
                     (thread-terminate! (current-thread))))))))
      (set! threads (make-vector n))
      (vector-map! (lambda (t)
                     (thread-start! (make-thread threadpool-worker)))
                   threads)
      (lambda (msg . args)
        (case msg
          ((has-workers?) (not (eq? (vector-length threads) 0)))
          ((has-tasks?) (not (queue-empty? queue)))
          ((execute!) (queue-add! queue (car args)))
          ((terminate!) (set! terminate? #t))
          ((terminated?) (let loop ((i 0))
                           (if (&lt; i (vector-length threads))
                             (if (eq? (thread-state (vector-ref threads i)) &#39;terminated)
                               (loop (+ i 1))
                               #f)
                             #t)))
          ((populate!) (begin
                         (set! terminate? #f)
                         (set! threads (make-vector (car args)))
                         (vector-map! (lambda (t)
                                        (thread-start! (make-thread threadpool-worker)))
                                      threads))))))))

(define (threadpool-execute! tp thunk)
  (tp &#39;execute! thunk))

(define (threadpool-terminate! tp)
  (tp &#39;terminate!))

(define (threadpool-terminated? tp)
  (tp &#39;terminated?))

(define (threadpool-populate! tp n)
  (tp &#39;populate! n))

(define (threadpool-has-workers? tp)
  (tp &#39;has-workers?))

(define (threadpool-has-tasks? tp)
  (tp &#39;has-tasks?))

(define (threadpool-repopulate! tp n)
  (tp &#39;terminate!)
  (let loop ()
    (if (not (tp &#39;terminated?))
      (loop)
      (tp &#39;populate! n))))
[/code]

usage:

[code=Lisp]
(let ((tp (make-threadpool 4)))
  (threadpool-execute! tp (lambda () (thread-sleep! 1) (display &quot;123&quot;)))
  (threadpool-execute! tp (lambda () (display &quot;testing&quot;) (newline)))
  (threadpool-terminate! tp))[/code]

[url=https://github.com/kk-/scheme-stuff/blob/master/threadpool.scm]github[/url]</description>
    
    <lastBuildDate>Sun, 26 Feb 2012 05:00:03 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/scheme-threadpool/434267.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Scheme threadpool</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>bored, decided to fiddle. works with Chicken Scheme, and apparently Scheme syntax highlighting here is borked. suggestions welcome, i know i should really be separating the worker function but iâ€™m not too sure it will play well with my mutex.</p>
<p>[code=Lisp](use srfi-18)<br>
(use data-structures)</p>
<p>(define (vector-map! f v)<br>
(let loop ((i 0))<br>
(when (&lt; i (vector-length v))<br>
(vector-set! v i (f (vector-ref v i)))<br>
(loop (+ i 1)))))</p>
<p>(define (make-threadpool n)<br>
(let ((threads '#())<br>
(mutex (make-mutex))<br>
(queue (make-queue))<br>
(terminate? <span class="hashtag">#f</span>))<br>
(letrec ((threadpool-worker (lambda ()<br>
(let loop ()<br>
(mutex-lock! mutex)<br>
(cond ((not (queue-empty? queue))<br>
(let ((task (queue-remove! queue)))<br>
(when (procedure? task)<br>
(mutex-unlock! mutex)<br>
(task))))<br>
(else (mutex-unlock! mutex)))<br>
(if (not terminate?)<br>
(loop)<br>
(begin<br>
(mutex-unlock! mutex)<br>
(thread-terminate! (current-thread))))))))<br>
(set! threads (make-vector n))<br>
(vector-map! (lambda (t)<br>
(thread-start! (make-thread threadpool-worker)))<br>
threads)<br>
(lambda (msg . args)<br>
(case msg<br>
((has-workers?) (not (eq? (vector-length threads) 0)))<br>
((has-tasks?) (not (queue-empty? queue)))<br>
((execute!) (queue-add! queue (car args)))<br>
((terminate!) (set! terminate? <span class="hashtag">#t</span>))<br>
((terminated?) (let loop ((i 0))<br>
(if (&lt; i (vector-length threads))<br>
(if (eq? (thread-state (vector-ref threads i)) 'terminated)<br>
(loop (+ i 1))<br>
<span class="hashtag">#f</span>)<br>
<span class="hashtag">#t</span>)))<br>
((populate!) (begin<br>
(set! terminate? <span class="hashtag">#f</span>)<br>
(set! threads (make-vector (car args)))<br>
(vector-map! (lambda (t)<br>
(thread-start! (make-thread threadpool-worker)))<br>
threads))))))))</p>
<p>(define (threadpool-execute! tp thunk)<br>
(tp 'execute! thunk))</p>
<p>(define (threadpool-terminate! tp)<br>
(tp 'terminate!))</p>
<p>(define (threadpool-terminated? tp)<br>
(tp 'terminated?))</p>
<p>(define (threadpool-populate! tp n)<br>
(tp 'populate! n))</p>
<p>(define (threadpool-has-workers? tp)<br>
(tp 'has-workers?))</p>
<p>(define (threadpool-has-tasks? tp)<br>
(tp 'has-tasks?))</p>
<p>(define (threadpool-repopulate! tp n)<br>
(tp 'terminate!)<br>
(let loop ()<br>
(if (not (tp 'terminated?))<br>
(loop)<br>
(tp 'populate! n))))<br>
[/code]</p>
<p>usage:</p>
<p><code>
(let ((tp (make-threadpool 4)))
  (threadpool-execute! tp (lambda () (thread-sleep! 1) (display "123")))
  (threadpool-execute! tp (lambda () (display "testing") (newline)))
  (threadpool-terminate! tp))</code></p>
<p><a href="https://github.com/kk-/scheme-stuff/blob/master/threadpool.scm" data-bbcode="true" rel="nofollow noopener">github</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/scheme-threadpool/434267/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/scheme-threadpool/434267/1</link>
        <pubDate>Sun, 26 Feb 2012 05:00:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-434267-1</guid>
        <source url="https://forum.moparisthebest.com/t/scheme-threadpool/434267.rss">Scheme threadpool</source>
      </item>
  </channel>
</rss>
