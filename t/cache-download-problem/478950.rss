<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache Download Problem</title>
    <link>https://forum.moparisthebest.com/t/cache-download-problem/478950</link>
    <description>iv been trying to get auto cache download on galkons 317 deob,  but i keep getting &quot; requesting title screen&quot; &quot;connecting error # &quot; 

Heres my Cachedownload file 

[QUOTE]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

        private client client;

        private final int BUFFER = 1024;

        /*
         * Only things you need to change
         *
         */
        private final int VERSION = 1; // Version of cache
        private String cacheLink = &quot;https://dl.dropbox.com/u/6057978/cache.zip&quot;; // Link to cache

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
               
                if(!location.exists()) {
                        //drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                        downloadFile(getCacheLink(), getArchivedName());

                        unZip();
                        System.out.println(&quot;UNZIP&quot;);

                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
                                //drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                                downloadFile(getCacheLink(), getArchivedName());

                                unZip();
                                System.out.println(&quot;UNZIP&quot;);

                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
       
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
               
                try {

                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName));

                        conn = url.openConnection();
                        in = conn.getInputStream();
               
                        byte[] data = new byte[BUFFER];
       
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();

       
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;

                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

                        }

                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }



        private void unZip() {

                try {
                            InputStream in =
                                new BufferedInputStream(new FileInputStream(fileToExtract));
                        ZipInputStream zin = new ZipInputStream(in);
                        ZipEntry e;

                        while((e=zin.getNextEntry()) != null) {


                                if (e.getName().equals(fileToExtract)) {
                                        unzip(zin, fileToExtract);
                                        break;
                                }
                                       unzip(zin, getCacheDir() + e.getName());
                                //unzip(zin, getCacheDir() + e.getName());
                                System.out.println(&quot;unzipping2 &quot; + e.getName());
                        }
                        zin.close();

                } catch(Exception e) {
                        e.printStackTrace();
                }
        }

        private void unzip(ZipInputStream zin, String s)
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                //System.out.println(&quot;unzipping &quot; + s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
}[/QUOTE]

Here&#39;s my startup void bit

[QUOTE]void startUp()
	{
		drawLoadingText(20, &quot;Starting up&quot;);
		new CacheDownloader(this).downloadCache();
		if(signlink.sunjava)
			super.minDelay = 5;
		if(aBoolean993)[/QUOTE]

Heres the error&#39;s in my run.bat[QUOTE]RS2 user client - release #317
java.io.FileNotFoundException: .\cache\main_file_cache.dat (The system cannot fi
nd the path specified)
        at java.io.RandomAccessFile.open(Native Method)
        at java.io.RandomAccessFile.&lt;init&gt;(Unknown Source)
        at java.io.RandomAccessFile.&lt;init&gt;(Unknown Source)
        at sign.signlink.run(signlink.java:55)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: .\cache\cache.zip (The system cannot find the pat
h specified)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.downloadFile(CacheDownloader.java:105)
        at CacheDownloader.downloadCache(CacheDownloader.java:69)
        at client.startUp(client.java:6621)
        at RSApplet.run(RSApplet.java:41)
        at client.run(client.java:4317)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: .\cache\cache.zip (The system cannot find the pat
h specified)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.unZip(CacheDownloader.java:162)
        at CacheDownloader.downloadCache(CacheDownloader.java:71)
        at client.startUp(client.java:6621)
        at RSApplet.run(RSApplet.java:41)
        at client.run(client.java:4317)
        at java.lang.Thread.run(Unknown Source)
UNZIP[/QUOTE]</description>
    
    <lastBuildDate>Sun, 27 Jan 2013 23:39:54 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-download-problem/478950.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache Download Problem</title>
        <dc:creator><![CDATA[@KingClay KingClay]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kingclay">@KingClay</a> wrote:</p>
          <blockquote>
              <p>It is not loading the Cache from the area you have it set on… same problem with me!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-download-problem/478950/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-download-problem/478950/2</link>
        <pubDate>Sun, 27 Jan 2013 23:39:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-478950-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-download-problem/478950.rss">Cache Download Problem</source>
      </item>
      <item>
        <title>Cache Download Problem</title>
        <dc:creator><![CDATA[@The_Unholy The Unholy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_unholy">@The_Unholy</a> wrote:</p>
          <blockquote>
              <p>iv been trying to get auto cache download on galkons 317 deob,  but i keep getting " requesting title screen" "connecting error # "</p>
<p>Heres my Cachedownload file</p>
<p>[QUOTE]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;

    private final int BUFFER = 1024;

    /*
     * Only things you need to change
     *
     */
    private final int VERSION = 1; // Version of cache
    private String cacheLink = "https://dl.dropbox.com/u/6057978/cache.zip"; // Link to cache

    private String fileToExtract = getCacheDir() + getArchivedName();

    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
            System.out.println(text);
    }


    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
            System.out.println(text);
    }

    private String getCacheDir() {
            return signlink.findcachedir();
    }

    private String getCacheLink() {
            return cacheLink;
    }

    private int getCacheVersion() {
            return VERSION;
    }

    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
           
            if(!location.exists()) {
                    //drawLoadingText("Downloading Cache Please wait...");
                    downloadFile(getCacheLink(), getArchivedName());

                    unZip();
                    System.out.println("UNZIP");

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
                            //drawLoadingText("Downloading Cache Please wait...");
                            downloadFile(getCacheLink(), getArchivedName());

                            unZip();
                            System.out.println("UNZIP");

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
   
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
           
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + "/" +localFileName));

                    conn = url.openConnection();
                    in = conn.getInputStream();
           
                    byte[] data = new byte[BUFFER];
   
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

   
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

                    }

                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }

    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }



    private void unZip() {

            try {
                        InputStream in =
                            new BufferedInputStream(new FileInputStream(fileToExtract));
                    ZipInputStream zin = new ZipInputStream(in);
                    ZipEntry e;

                    while((e=zin.getNextEntry()) != null) {


                            if (e.getName().equals(fileToExtract)) {
                                    unzip(zin, fileToExtract);
                                    break;
                            }
                                   unzip(zin, getCacheDir() + e.getName());
                            //unzip(zin, getCacheDir() + e.getName());
                            System.out.println("unzipping2 " + e.getName());
                    }
                    zin.close();

            } catch(Exception e) {
                    e.printStackTrace();
            }
    }

    private void unzip(ZipInputStream zin, String s)
            throws IOException {

            FileOutputStream out = new FileOutputStream(s);
            //System.out.println("unzipping " + s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
            }
            out.close();
    }
</code></pre>
<p>}[/QUOTE]</p>
<p>Here’s my startup void bit</p>
<p>[QUOTE]void startUp()<br>
{<br>
drawLoadingText(20, “Starting up”);<br>
new CacheDownloader(this).downloadCache();<br>
if(signlink.sunjava)<br>
super.minDelay = 5;<br>
if(aBoolean993)[/QUOTE]</p>
<p>Heres the error’s in my run.bat[QUOTE]RS2 user client - release <span class="hashtag">#317</span><br>
java.io.FileNotFoundException: .\cache\main_file_cache.dat (The system cannot fi<br>
nd the path specified)<br>
at java.io.RandomAccessFile.open(Native Method)<br>
at java.io.RandomAccessFile.(Unknown Source)<br>
at java.io.RandomAccessFile.(Unknown Source)<br>
at sign.signlink.run(signlink.java:55)<br>
at java.lang.Thread.run(Unknown Source)<br>
java.io.FileNotFoundException: .\cache\cache.zip (The system cannot find the pat<br>
h specified)<br>
at java.io.FileOutputStream.open(Native Method)<br>
at java.io.FileOutputStream.(Unknown Source)<br>
at java.io.FileOutputStream.(Unknown Source)<br>
at CacheDownloader.downloadFile(CacheDownloader.java:105)<br>
at CacheDownloader.downloadCache(CacheDownloader.java:69)<br>
at client.startUp(client.java:6621)<br>
at RSApplet.run(RSApplet.java:41)<br>
at client.run(client.java:4317)<br>
at java.lang.Thread.run(Unknown Source)<br>
java.io.FileNotFoundException: .\cache\cache.zip (The system cannot find the pat<br>
h specified)<br>
at java.io.FileInputStream.open(Native Method)<br>
at java.io.FileInputStream.(Unknown Source)<br>
at java.io.FileInputStream.(Unknown Source)<br>
at CacheDownloader.unZip(CacheDownloader.java:162)<br>
at CacheDownloader.downloadCache(CacheDownloader.java:71)<br>
at client.startUp(client.java:6621)<br>
at RSApplet.run(RSApplet.java:41)<br>
at client.run(client.java:4317)<br>
at java.lang.Thread.run(Unknown Source)<br>
UNZIP[/QUOTE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-download-problem/478950/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-download-problem/478950/1</link>
        <pubDate>Mon, 21 Jan 2013 19:24:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-478950-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-download-problem/478950.rss">Cache Download Problem</source>
      </item>
  </channel>
</rss>
