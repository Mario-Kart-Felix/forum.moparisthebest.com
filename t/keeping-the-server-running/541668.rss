<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Keeping the Server Running</title>
    <link>https://forum.moparisthebest.com/t/keeping-the-server-running/541668</link>
    <description>So I decided to branch out of basic programming and work with a little bit of networking (servers/clients). I have the client connecting to the server fine. I just have one problem. My server&#39;s run thread ends basically closes connection with the client when the program is done. That sounds pretty obvious and I know that there should be some type of loop to keep the connection, but I don&#39;t know of  way to end the loop. Sorry if i&#39;m not explaining all that well... here&#39;s the run method:  

[code=java]	public void run() {

		String client = s.getInetAddress().toString();
		System.out.println(&quot;Connected to: &quot; + client);
		try {

			out = new PrintWriter(s.getOutputStream(), true);
			out.println(&quot;Welcome to Tyler&#39;s Yard Manager!&quot;);
			UserFiles.getLoginInfo();

		} catch (Exception e){
			e.printStackTrace();
		}
		System.out.println(&quot;Closed connection to &quot; + client);

	}[/code]

After it runs the &quot;getLoginInfo()&quot; method, it disconnects with the client. How would I prevent it from disconnecting?</description>
    
    <lastBuildDate>Sun, 30 Mar 2014 00:27:44 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/keeping-the-server-running/541668.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Keeping the Server Running</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Using blocking IO you need 1 thread for accepting sockets, 1 thread for reading available input. Using non-blocking IO you can do all that on a single thread (or multiple if thats your preference).</p>
<p>So,</p>
<pre><code class="lang-auto">new Thread(new Runnable() { public void run() { while(true) { socket.accept(); // Pass to other thread } } });
new Thread(new Runnable() { public void run() { while(true) { // Read available input from socket } } });</code></pre>
<p>Edit: Could technically have a thread for writing data (but I don’t see why you would have to do that and I can’t remember if outputstream has a return value for if the entire byte array was written because I know there is a limit to the size of the queue buffer).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/keeping-the-server-running/541668/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/keeping-the-server-running/541668/3</link>
        <pubDate>Sun, 30 Mar 2014 00:27:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541668-3</guid>
        <source url="https://forum.moparisthebest.com/t/keeping-the-server-running/541668.rss">Keeping the Server Running</source>
      </item>
      <item>
        <title>Keeping the Server Running</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p><code>while (condition) {
  // process server logic
}</code></p>
<p>You can also set your socket to keep connected, perhaps pick up a networking library along the way.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/keeping-the-server-running/541668/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/keeping-the-server-running/541668/2</link>
        <pubDate>Sun, 30 Mar 2014 00:14:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541668-2</guid>
        <source url="https://forum.moparisthebest.com/t/keeping-the-server-running/541668.rss">Keeping the Server Running</source>
      </item>
      <item>
        <title>Keeping the Server Running</title>
        <dc:creator><![CDATA[@Devinhdl Devinhdl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/devinhdl">@Devinhdl</a> wrote:</p>
          <blockquote>
              <p>So I decided to branch out of basic programming and work with a little bit of networking (servers/clients). I have the client connecting to the server fine. I just have one problem. My server’s run thread ends basically closes connection with the client when the program is done. That sounds pretty obvious and I know that there should be some type of loop to keep the connection, but I don’t know of  way to end the loop. Sorry if i’m not explaining all that well… here’s the run method:</p>
<p>[code=java]	public void run() {</p>
<pre><code>	String client = s.getInetAddress().toString();
	System.out.println("Connected to: " + client);
	try {

		out = new PrintWriter(s.getOutputStream(), true);
		out.println("Welcome to Tyler's Yard Manager!");
		UserFiles.getLoginInfo();

	} catch (Exception e){
		e.printStackTrace();
	}
	System.out.println("Closed connection to " + client);

}[/code]
</code></pre>
<p>After it runs the “getLoginInfo()” method, it disconnects with the client. How would I prevent it from disconnecting?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/keeping-the-server-running/541668/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/keeping-the-server-running/541668/1</link>
        <pubDate>Sat, 29 Mar 2014 23:03:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541668-1</guid>
        <source url="https://forum.moparisthebest.com/t/keeping-the-server-running/541668.rss">Keeping the Server Running</source>
      </item>
  </channel>
</rss>
