<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Array vs ArrayList vs HashMap Java</title>
    <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958</link>
    <description>So I&#39;m learning about generics now and I decided to do an efficiency test.

[code]
import java.util.*;

/**
*
* MapTest.java
*
* Testing efficiency of arrays, lists, and maps.
*
*/

public class MapTest
{
	public static final int LENGTH = 1000;
	public static final int REPETITIONS = 10;

	public static void main(String[] args)
	{

		long[][] times = new long[3][REPETITIONS];


		System.out.println(&quot;\n\n\n&quot;);
		for (int i = 0; i &lt; 3; i++)
		{
			for (int j = 0; j &lt; REPETITIONS; j++)
			{
				times[i][j] = efficiency(i);
			}
		}

		System.out.println(&quot;\n\n&quot;);

		for (int i = 0; i &lt; 3; i++)
		{
			long total = 0;
			for (int j = 0; j &lt; REPETITIONS; j++)
			{
				total += times[i][j];
			}
			long average = total/REPETITIONS;
			System.out.println(&quot;Total Time Taken For Method &quot; + i + &quot;: &quot; + total + &quot;&quot;);
			System.out.println(&quot;Average Time Taken For Method &quot; + i + &quot;: &quot; + average + &quot;\n&quot;);
		}
	}

	public static long efficiency(int type)
	{
		System.out.println(&quot;&quot;);
		long time = System.currentTimeMillis();
		switch (type)
		{
			case 0: //ARRAYS
				System.out.println(&quot;\nArrays:\n&quot;);
				int[] anArray = new int[LENGTH];
				for (int i = 0; i &lt; LENGTH; i++)
				{
					anArray[i] = i*2;
				}
				for (int i = 0; i &lt; anArray.length; i++)
				{
					System.out.print(anArray[i] + &quot;, &quot;);
				}
				break;
			case 1: //ARRAYLISTS
				System.out.println(&quot;\nArrayList:\n&quot;);
				List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
				for (int i = 0; i &lt; LENGTH; i++)
				{
					list.add(i*2);
				}
				for (int i = 0; i &lt; list.size(); i++)
				{
					System.out.print(list.get(i) + &quot;, &quot;);
				}
				break;
			case 2: //HASHMAPS
				System.out.println(&quot;\nHashmap:\n&quot;);
				Map&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;();
				for (int i = 0; i &lt; LENGTH; i++)
				{
					map.put(i, i*2);
				}
				//System.out.println(map);
				for (int i = 0; i &lt; map.size(); i++)
				{
					System.out.print(map.get(i) + &quot;, &quot;);
				}
			default:
				break;
		}
		long time2 = System.currentTimeMillis();
		return (time2-time);
	}

				
}
[/code]

I initially ran the test that checked the process time of only one lookup of 1k values, and concluded that hashmaps &gt; arraylists &gt; arrays at a map storage system (1 : 1).

But as I modified the program to perform multiple repetitions with returning the averages, it seems that the time taken to process became more similar to one another, with arraylists sometimes outspeeding hashmaps. Is there an obvious problem with my code which I have overlooked, or is there a valid reason why they all seem to balance out when done with multiple tests?

If there isn&#39;t a problem with my code, why are maps more efficient than arraylists, and arraylists more efficient than arrays for map style storage in general?</description>
    
    <lastBuildDate>Wed, 21 Mar 2012 01:17:51 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>or just wiki the data structures…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/6</link>
        <pubDate>Wed, 21 Mar 2012 01:17:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-6</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>HashMap has a higher performance loss on mutating it, in exchanging for quicker lookups. There are many other collections to choose from, too. Given that HashMap is used for a mapping situation, you should expect it to have a worse performance than some more native, like an array. Once you establish what you want to do (such as <span class="bbcode-i">doing</span> a mapping), then you can look at all the different collections other than hashmap that supports mapping, and look at what the documentation says regarding their performance. You should also consider concurrency and thread-safeness, which is a massive part of the collections API many people fail to realize.</p>
<p>There’s also LinkedLists, by the way. Larger memory cost than ArrayList, but much faster to mutate. Adding something to an linked list is O(1), and looking something up is still just O(n). It should be noteworthy that you can’t sort it easily, though. I mean really, I could go on for several paragraphs explaining all this. You’re better off just looking through the documentation and API package summary.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/5</link>
        <pubDate>Tue, 20 Mar 2012 15:50:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-5</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>Well looking at average case exampes, you can say that for a static array:<br>
Lookup: O(1)<br>
Edit: O(1)<br>
Add/Delete (no such things, but setting to null is O(1)<br>
Linear Search: O(n)<br>
Binary Search : O(log n) (but you’ll have to order it which is costly!!)</p>
<p>For an Arraylist:<br>
Lookup: O(1)<br>
Add: O(N)<br>
Add to back: O(1)<br>
Delete: O(n)<br>
Linear Search: O(n)<br>
Binary Search : O(log n)</p>
<p>HashMap should be:<br>
Lookup: O(1)<br>
Add: O(1)<br>
Search: O(1)<br>
Delete: O(1)</p>
<p>(Probably made some mistakes there)</p>
<p>Anyway you can’t really conclude anything because each data structure has it’s strengths and weaknesses. Even though on paper, HashMaps look great, they are impractical for many things. I’m aware that memory is cheap nowadays, however you’ll notice when you start storing many many elements the overhead of both HashMaps and Arraylists may be too large!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/4</link>
        <pubDate>Tue, 20 Mar 2012 15:13:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-4</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Got it. I’m still concerned about the processing times. The results that I have mentioned earlier were performed in school (dualcore 4 GB RAM laptops). At home (old, slow computer), I actually get the opposite effect even through a series of ten trials. Arrays have the least process time, array lists being the slowest, and maps in the middle. Any ideas of why this is the case?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/3</link>
        <pubDate>Tue, 20 Mar 2012 09:20:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-3</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Performing efficiency tests on objects that are literally made to do different tasks is pointless.</p>
<p>You may as well throw the set and queue types in there as well, or any sort of collection.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/2</link>
        <pubDate>Tue, 20 Mar 2012 06:51:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-2</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
      <item>
        <title>Array vs ArrayList vs HashMap Java</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>So I’m learning about generics now and I decided to do an efficiency test.</p>
<pre><code class="lang-auto">import java.util.*;

/**
*
* MapTest.java
*
* Testing efficiency of arrays, lists, and maps.
*
*/

public class MapTest
{
	public static final int LENGTH = 1000;
	public static final int REPETITIONS = 10;

	public static void main(String[] args)
	{

		long[][] times = new long[3][REPETITIONS];


		System.out.println("\n\n\n");
		for (int i = 0; i &lt; 3; i++)
		{
			for (int j = 0; j &lt; REPETITIONS; j++)
			{
				times[i][j] = efficiency(i);
			}
		}

		System.out.println("\n\n");

		for (int i = 0; i &lt; 3; i++)
		{
			long total = 0;
			for (int j = 0; j &lt; REPETITIONS; j++)
			{
				total += times[i][j];
			}
			long average = total/REPETITIONS;
			System.out.println("Total Time Taken For Method " + i + ": " + total + "");
			System.out.println("Average Time Taken For Method " + i + ": " + average + "\n");
		}
	}

	public static long efficiency(int type)
	{
		System.out.println("");
		long time = System.currentTimeMillis();
		switch (type)
		{
			case 0: //ARRAYS
				System.out.println("\nArrays:\n");
				int[] anArray = new int[LENGTH];
				for (int i = 0; i &lt; LENGTH; i++)
				{
					anArray[i] = i*2;
				}
				for (int i = 0; i &lt; anArray.length; i++)
				{
					System.out.print(anArray[i] + ", ");
				}
				break;
			case 1: //ARRAYLISTS
				System.out.println("\nArrayList:\n");
				List&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();
				for (int i = 0; i &lt; LENGTH; i++)
				{
					list.add(i*2);
				}
				for (int i = 0; i &lt; list.size(); i++)
				{
					System.out.print(list.get(i) + ", ");
				}
				break;
			case 2: //HASHMAPS
				System.out.println("\nHashmap:\n");
				Map&lt;Integer,Integer&gt; map = new HashMap&lt;Integer,Integer&gt;();
				for (int i = 0; i &lt; LENGTH; i++)
				{
					map.put(i, i*2);
				}
				//System.out.println(map);
				for (int i = 0; i &lt; map.size(); i++)
				{
					System.out.print(map.get(i) + ", ");
				}
			default:
				break;
		}
		long time2 = System.currentTimeMillis();
		return (time2-time);
	}

				
}</code></pre>
<p>I initially ran the test that checked the process time of only one lookup of 1k values, and concluded that hashmaps &gt; arraylists &gt; arrays at a map storage system (1 : 1).</p>
<p>But as I modified the program to perform multiple repetitions with returning the averages, it seems that the time taken to process became more similar to one another, with arraylists sometimes outspeeding hashmaps. Is there an obvious problem with my code which I have overlooked, or is there a valid reason why they all seem to balance out when done with multiple tests?</p>
<p>If there isn’t a problem with my code, why are maps more efficient than arraylists, and arraylists more efficient than arrays for map style storage in general?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958/1</link>
        <pubDate>Tue, 20 Mar 2012 06:31:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436958-1</guid>
        <source url="https://forum.moparisthebest.com/t/array-vs-arraylist-vs-hashmap-java/436958.rss">Array vs ArrayList vs HashMap Java</source>
      </item>
  </channel>
</rss>
