<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Linux] [Git] How to set up version control for your server</title>
    <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285</link>
    <description>Hello all,

I guess the the first thing I should say, 
is version control is a whole new concept for many of the users in the rsps community, it&#39;s an amazing concept and works wonders.

[b]Story:[/b]
I&#39;ve been a fullstack perl  developer for about 2 years, (that means I develop in Perl, MySQL, and Front end Languages, Html, CSS)
and between then and now we&#39;ve used 2 separate version control softwares, CVS, and Git.

When we swapped to Git I didn&#39;t like it, and this reason was simply familiarity, and understanding the different concepts between Git and CVS.
I&#39;ve been using git daily for about a year, and I feel like it is so far advanced compared to it&#39;s successor, CVS. 
I highly recommend Git for your version control software. It allows branches, as well as control of multiple files, in a single commit.


[b]So I&#39;m going to be explaining two concepts, an alpha, staging, and live environment, as well as a version control and how to use them together.[/b]

[hr]
[size=24pt]Note: [/size][size=18pt]This article assumes you have basic knowledge of how to move around linux via command line, and have very basic administrative skills with linux, and that you perhaps have some version of a linux environment set up.[/size]
[hr]

[hr]
[b]Is this a copy paste article[/b]
Certainly not, it&#39;s very much a higher level concept

[b]What is an Ideal setup?[/b]
There is so many ways to set up git and because of this it&#39;s hard to say what a standard should be for runescape private server, so here is a few options for your server.
[hr]

[size=24pt][b]1:[/b] [/size]here is the Ideal case
[b]To Owners[/b]
    You have 3 &quot;servers&quot;, a &quot;master&quot;, &quot;beta&quot; and an &quot;alpha&quot; server.
    Have your developers work from their alpha environment, an alpha environment can be their own space on your server, on their own server, or it can be their computer. Ideally, it is not on the same server as the live server, you don&#39;t want your beta or alpha environments to affect your live environment.
    Developers Work on code on their alpha, test it themselves, move it to a beta environment for more thorough testing, and then finally to live in front of the players.

[b]To Developers: [/b]
    When you&#39;ve decided a feature is &quot;Code Complete&quot;, and you as a developer has tested it on your &quot;alpha&quot;, then you&#39;ll commit the code to your branch, when your &quot;tester&quot; is ready someone (the tester or the dev) can merge it in to beta, if it fails you can roll back the beta changes and continue development on your &quot;alpha&quot; or if your &quot;tester&quot; has decided that it is &quot;live&quot; ready, someone can merge it to live.

[b]What this means to me:[/b]
3 servers is simply 1 VPS, with 2 virtualized systems, with a single server on each, the beta server runs on a separate port than the live server,
and the alpha system is my own personal computer, keeps the systems from the chance to crash each other for any reason, and if there are memory leaks it&#39;s easier to find.


[b]Pros:[/b]

[ul][li]Less bugs make it to live[/li][/ul]
[b]Cons:[/b]

[ul][li]Code gets to live slower.[/li][/ul]
If you don&#39;t have a tester, you as the developer is the tester and gate keeper between beta and live, test the code more fully.
Owners can be the tester.
[hr]
[size=24pt][b]2:[/b][/size] [b]Next best thing[/b]
You the owner have 1 developer with little experience in development and want to try.
You&#39;ll have a live server, and an alpha, you trust your developers to test their code before releasing it.

[b]Pros:[/b]

[ul][li]Owners don&#39;t blame developers for potential bugs, if they wanted it tested they should have found a tester[/li][/ul]
[b]Cons:[/b]

[ul][li]players abuse bugs until they are fixed[/li][/ul]

[hr]
[size=24pt][b]3:[/b][/size] [b]Worse case scenario[/b]
This unfortunately is the majority of the RSPS, What most people in the runescape private server community do.

Code in the live environment, test to see if the function they made works.
[b]Pros:[/b]

[ul][li]Code gets out very quickly[/li][/ul]
[b]Cons:[/b]

[ul][li]Lots of bugs make it to production[/li]
	[li]players abuse bugs until while developers are actively working creating the new feature[/li]
	[li]Often time this causes often but brief down time[/li]
	[li]Code gets out very quickly, often times untested.[/li][/ul]

[hr]
[size=18pt]QA:[/size]
[size=18pt]What is version control software?[/size]
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.

[size=18pt]What is git?[/size]
Unless you are not ready to read 5 pages to understand git conceptually, you are going to have a hard time understanding some of the more natural concepts.
History, Branches, Repositories, Commits, Merges, 
[url=https://www.sbf5.com/~cduan/technical/git/]https://www.sbf5.com/~cduan/technical/git/[/url]

[size=18pt]How will it be beneficial to my server?[/size]
There are a lot of benefits from using git,
1: All version control software keeps a history of file changes, you can view the diff from the previous versions and once built out you&#39;ll have a history
 to help you decide your servers future.
2: Your developers don&#39;t need to log in to your server to be able to make changes to your code.

[size=18pt]Will it make my server faster?[/size]
No, but it will help keep your server&#39;s maintained.


It also has the hidden benefit of less bugs.


In short, you will be spending more time figuring out git, once you&#39;ve learned git you will speed up your process significantly.

[size=18pt]what if we have multiple developers? how does this affect their work flow?[/size]
In theory you would be working out of your own branches, and directory structures, either on your own computer, or in a separate folder path than the actual server, this allows you to make changes without affecting your &quot;Live&quot; environment. This way only the work you are ready to actually get to live will ever affect the other developers, you won&#39;t have to worry about stepping on each others toes.

Also there is a huge benefit from having a second developer, before merging your commit to beta have the second developer look at your code and decide if there are any changes that need to be made.

[size=18pt]Conflicts[/size]
In most cases, git will provide a way to view the difference between the conflicting versions, allowing you to make a choice. You can either edit the files manually to merge the options, or allow one revision to win over the other. You may want to collaborate with your other developer to make sure you’re not undoing their important work!


[size=18pt]Creating your git repo[/size]
If you don&#39;t have git installed, They have instructions for Linux, Mac, and Windows.
[url=https://git-scm.com/book/en/v1/Getting-Started-Installing-Git]https://git-scm.com/book/en/v1/Getting-Started-Installing-Git[/url]

Fairly straight forward to set up your first git repo,
[url=https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/]https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/[/url]


Once set up you can clone it to your own computer, 

This is my mac
[code=bash]$ git clone ssh://username@hidden-hostname.com/home/user/full-path-to/git-repo
Cloning into &#39;server&#39;...
remote: Counting objects: 9, done.
remote: Compressing objects: 100% (3/3), done.
remote: Total 9 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (9/9), done.
Checking connectivity... done

MacBook-Pro:server username$ ls git-repo
README.md[/code]

[hr]
In your .gitignore file, you should probably put your character files, you don&#39;t need to be committing your players every time you commit,[code=bash]Data/characters/[/code]Also if you have any logs, you can put those logs in the .gitignore file as well[code=bash]Logs/trade.log[/code]
[hr]

from here you can add new files, commit files and push them to the server, and when you are ready merge in master.


git status to see what files changes you have, and even what branch you are on
[code=bash]

$ git branch
  master
* new-server
[/code][code=bash]

$ git checkout new-server
Switched to branch &#39;new-server&#39;
[/code]


Add your files
[code=bash]


$ git status


# On branch new-server
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#	.classpath
#	.project
#	.settings/
#	Compiler - Copy.bat
#	Compiler.bat
#	Data/
#	Server.zip
#	bin/
#	build/
#	compile.2.bat
#	compiler.sh
#	deps/
#	linux-run.sh
#	run.2.bat
#	run.bat
#	src/
nothing added to commit but untracked files present (use &quot;git add&quot; to track)[/code][code=bash]

$ git add .project
$ git status


# On branch new-server
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#	new file:   .project
#
# Untracked files:
#   (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)
#
#	.classpath
#	.settings/
#	Compiler - Copy.bat
#	Compiler.bat
#	Data/
#	Server.zip
#	bin/
#	build/
#	compile.2.bat
#	compiler.sh
#	deps/
#	linux-run.sh
#	run.2.bat
#	run.bat
#	src/
[/code]
be sure to add each of your files an directories or for short 
[code=bash]
git add * .*
[/code]


and you&#39;ll see a very very long list
[code=bash]

$ git status
# On branch new-server
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#	new file:   .project
#	new file:   Compiler - Copy.bat
#	new file:   Compiler.bat
#	new file:   Data/1. Run.bat
#	new file:   Data/2. Compiler.bat
#	new file:   Data/ClipMap.bin
#	new file:   Data/Data.txt
[/code]


Type git commit will come up with a visual interface which you can type your commit message
[code=bash]
$ git commit

|
# Please enter the commit message for your changes. Lines starting
# with &#39;#&#39; will be ignored, and an empty message aborts the commit.
# On branch new-server
# Changes to be committed:
#   (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)
#
#       new file:   .classpath
#       new file:   .project
#       new file:   .settings/org.eclipse.jdt.core.prefs
#       new file:   .settings/org.eclipse.jpt.core.prefs
[/code]


once committed you can push


[code=bash]

$ git push origin new-server


Counting objects: 2226, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2125/2125), done.
Writing objects: 100% (2225/2225), 47.43 MiB | 6.29 MiB/s, done.
Total 2225 (delta 218), reused 0 (delta 0)
To git@github.com:jlabranche/server.git
 * [new branch]      new-server -&gt; new-server
[/code]





[hr]
Here are a list of commands you&#39;ll likely need to work with your new git repo
[code=bash]
#used to clone an initialized repo
git clone

#used for listing branches
git branch
#used for creating a new branch
git branch $new-branch-name
#used to delete a branch
git branch -D
#used for switching to a specific branch
git checkout $existing-branch

#used to see which files were changed and what those changes were
git diff
#used to see which files were changed by file name
git diff --name-only

#used to delete files from your repo, you&#39;ll still need to commit and push
git rm $file-you-already-deleted
#used to add files changes
git add $file
#used to rename files changes
git mv $file $renamed-file

#used to create a commit message once you have
git commit
#used to pushed your current branch to the remote branch
git push

#used to pull data from one branch in to your current working branch
#when you are ready you checkout master and merge in your branch.
#or if you are getting out of date compared to master, you can merge master in to your current branch.
#you&#39;ll need to commit and push again once a merge has happened, merged will only affect your current branch.
git merge $branch
[/code]






[hr]
[size=18pt]Things I learned[/size]
[b]There is a perfect saying for this.[/b]
[i]measure twice cut once[/i]
[hr]

To get colors to work add this to your ~/.gitconfig file
[code=bash]
[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true
[/code]

I really like tab autocomplete in git, especially when working with other developers who like long names for their branches
[url=https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks]https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks[/url]

[code=bash]
$ git branch &lt;tab&gt;&lt;tab&gt;
README.md
[/code]
I prefer
[code=bash]
$ git branch &lt;tab&gt;&lt;tab&gt;
HEAD            master          new-branch      origin/HEAD     origin/master
[/code]

An amazing command that I use regularly is to check the difference from this branch to master
[code=bash]git diff $(git merge-base master HEAD) HEAD[/code]





[b]In short:[/b]
Do what ever you want, but if you want to be truely successful you&#39;ll use version control software.</description>
    
    <lastBuildDate>Thu, 28 Apr 2016 16:37:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Linux] [Git] How to set up version control for your server</title>
        <dc:creator><![CDATA[@my-swagger my-swagger]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/my-swagger">@my-swagger</a> wrote:</p>
          <blockquote>
              <p><a href="https://guides.github.com/" rel="nofollow noopener">https://guides.github.com/</a> will give you a more simple and informative guide on using git and github.</p>
<p>You did a good job though relating this to rsps though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/5</link>
        <pubDate>Thu, 28 Apr 2016 16:37:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555285-5</guid>
        <source url="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss">[Linux] [Git] How to set up version control for your server</source>
      </item>
      <item>
        <title>[Linux] [Git] How to set up version control for your server</title>
        <dc:creator><![CDATA[@penguinimp penguinimp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/penguinimp">@penguinimp</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="555285">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ruby/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Ruby:</div>
<blockquote>
<p>Why perl?</p>
</blockquote>
</aside>
<p>Just what the company I work uses, haha I know other languages, I need to pickup Ruby and Python still at some point.</p>
<p>I have no formal development training, I basically moved up in the company from a technical support position, and when they hired me they said we know you don’t have schooling, but you are more qualified then the other people we interviewed.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/4</link>
        <pubDate>Thu, 28 Apr 2016 15:21:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555285-4</guid>
        <source url="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss">[Linux] [Git] How to set up version control for your server</source>
      </item>
      <item>
        <title>[Linux] [Git] How to set up version control for your server</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <p>Why perl?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/3</link>
        <pubDate>Thu, 28 Apr 2016 07:57:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555285-3</guid>
        <source url="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss">[Linux] [Git] How to set up version control for your server</source>
      </item>
      <item>
        <title>[Linux] [Git] How to set up version control for your server</title>
        <dc:creator><![CDATA[@_nova1 _nova]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_nova1">@_nova1</a> wrote:</p>
          <blockquote>
              <p>Neat</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/2</link>
        <pubDate>Thu, 28 Apr 2016 02:49:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555285-2</guid>
        <source url="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss">[Linux] [Git] How to set up version control for your server</source>
      </item>
      <item>
        <title>[Linux] [Git] How to set up version control for your server</title>
        <dc:creator><![CDATA[@penguinimp penguinimp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/penguinimp">@penguinimp</a> wrote:</p>
          <blockquote>
              <p>Hello all,</p>
<p>I guess the the first thing I should say,<br>
is version control is a whole new concept for many of the users in the rsps community, it’s an amazing concept and works wonders.</p>
<p><span class="bbcode-b">Story:</span><br>
I’ve been a fullstack perl  developer for about 2 years, (that means I develop in Perl, MySQL, and Front end Languages, Html, CSS)<br>
and between then and now we’ve used 2 separate version control softwares, CVS, and Git.</p>
<p>When we swapped to Git I didn’t like it, and this reason was simply familiarity, and understanding the different concepts between Git and CVS.<br>
I’ve been using git daily for about a year, and I feel like it is so far advanced compared to it’s successor, CVS.<br>
I highly recommend Git for your version control software. It allows branches, as well as control of multiple files, in a single commit.</p>
<p><span class="bbcode-b">So I’m going to be explaining two concepts, an alpha, staging, and live environment, as well as a version control and how to use them together.</span></p>
<p>[hr]<br>
[size=24pt]Note: [/size][size=18pt]This article assumes you have basic knowledge of how to move around linux via command line, and have very basic administrative skills with linux, and that you perhaps have some version of a linux environment set up.[/size]<br>
[hr]</p>
<p>[hr]<br>
<span class="bbcode-b">Is this a copy paste article</span><br>
Certainly not, it’s very much a higher level concept</p>
<p><span class="bbcode-b">What is an Ideal setup?</span><br>
There is so many ways to set up git and because of this it’s hard to say what a standard should be for runescape private server, so here is a few options for your server.<br>
[hr]</p>
<p>[size=24pt]<span class="bbcode-b">1:</span> [/size]here is the Ideal case<br>
<span class="bbcode-b">To Owners</span><br>
You have 3 “servers”, a “master”, “beta” and an “alpha” server.<br>
Have your developers work from their alpha environment, an alpha environment can be their own space on your server, on their own server, or it can be their computer. Ideally, it is not on the same server as the live server, you don’t want your beta or alpha environments to affect your live environment.<br>
Developers Work on code on their alpha, test it themselves, move it to a beta environment for more thorough testing, and then finally to live in front of the players.</p>
<p><span class="bbcode-b">To Developers: </span><br>
When you’ve decided a feature is “Code Complete”, and you as a developer has tested it on your “alpha”, then you’ll commit the code to your branch, when your “tester” is ready someone (the tester or the dev) can merge it in to beta, if it fails you can roll back the beta changes and continue development on your “alpha” or if your “tester” has decided that it is “live” ready, someone can merge it to live.</p>
<p><span class="bbcode-b">What this means to me:</span><br>
3 servers is simply 1 VPS, with 2 virtualized systems, with a single server on each, the beta server runs on a separate port than the live server,<br>
and the alpha system is my own personal computer, keeps the systems from the chance to crash each other for any reason, and if there are memory leaks it’s easier to find.</p>
<p><span class="bbcode-b">Pros:</span></p>
<p>[ul][li]Less bugs make it to live[/li][/ul]<br>
<span class="bbcode-b">Cons:</span></p>
<p>[ul][li]Code gets to live slower.[/li][/ul]<br>
If you don’t have a tester, you as the developer is the tester and gate keeper between beta and live, test the code more fully.<br>
Owners can be the tester.<br>
[hr]<br>
[size=24pt]<span class="bbcode-b">2:</span>[/size] <span class="bbcode-b">Next best thing</span><br>
You the owner have 1 developer with little experience in development and want to try.<br>
You’ll have a live server, and an alpha, you trust your developers to test their code before releasing it.</p>
<p><span class="bbcode-b">Pros:</span></p>
<p>[ul][li]Owners don’t blame developers for potential bugs, if they wanted it tested they should have found a tester[/li][/ul]<br>
<span class="bbcode-b">Cons:</span></p>
<p>[ul][li]players abuse bugs until they are fixed[/li][/ul]</p>
<p>[hr]<br>
[size=24pt]<span class="bbcode-b">3:</span>[/size] <span class="bbcode-b">Worse case scenario</span><br>
This unfortunately is the majority of the RSPS, What most people in the runescape private server community do.</p>
<p>Code in the live environment, test to see if the function they made works.<br>
<span class="bbcode-b">Pros:</span></p>
<p>[ul][li]Code gets out very quickly[/li][/ul]<br>
<span class="bbcode-b">Cons:</span></p>
<p>[ul][li]Lots of bugs make it to production[/li]<br>
[li]players abuse bugs until while developers are actively working creating the new feature[/li]<br>
[li]Often time this causes often but brief down time[/li]<br>
[li]Code gets out very quickly, often times untested.[/li][/ul]</p>
<p>[hr]<br>
[size=18pt]QA:[/size]<br>
[size=18pt]What is version control software?[/size]<br>
Version control is a system that records changes to a file or set of files over time so that you can recall specific versions later.</p>
<p>[size=18pt]What is git?[/size]<br>
Unless you are not ready to read 5 pages to understand git conceptually, you are going to have a hard time understanding some of the more natural concepts.<br>
History, Branches, Repositories, Commits, Merges,<br>
<a href="https://www.sbf5.com/~cduan/technical/git/" data-bbcode="true" rel="nofollow noopener">https://www.sbf5.com/~cduan/technical/git/</a></p>
<p>[size=18pt]How will it be beneficial to my server?[/size]<br>
There are a lot of benefits from using git,<br>
1: All version control software keeps a history of file changes, you can view the diff from the previous versions and once built out you’ll have a history<br>
to help you decide your servers future.<br>
2: Your developers don’t need to log in to your server to be able to make changes to your code.</p>
<p>[size=18pt]Will it make my server faster?[/size]<br>
No, but it will help keep your server’s maintained.</p>
<p>It also has the hidden benefit of less bugs.</p>
<p>In short, you will be spending more time figuring out git, once you’ve learned git you will speed up your process significantly.</p>
<p>[size=18pt]what if we have multiple developers? how does this affect their work flow?[/size]<br>
In theory you would be working out of your own branches, and directory structures, either on your own computer, or in a separate folder path than the actual server, this allows you to make changes without affecting your “Live” environment. This way only the work you are ready to actually get to live will ever affect the other developers, you won’t have to worry about stepping on each others toes.</p>
<p>Also there is a huge benefit from having a second developer, before merging your commit to beta have the second developer look at your code and decide if there are any changes that need to be made.</p>
<p>[size=18pt]Conflicts[/size]<br>
In most cases, git will provide a way to view the difference between the conflicting versions, allowing you to make a choice. You can either edit the files manually to merge the options, or allow one revision to win over the other. You may want to collaborate with your other developer to make sure you’re not undoing their important work!</p>
<p>[size=18pt]Creating your git repo[/size]<br>
If you don’t have git installed, They have instructions for Linux, Mac, and Windows.<br>
<a href="https://git-scm.com/book/en/v1/Getting-Started-Installing-Git" data-bbcode="true" rel="nofollow noopener">https://git-scm.com/book/en/v1/Getting-Started-Installing-Git</a></p>
<p>Fairly straight forward to set up your first git repo,<br>
<a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/" data-bbcode="true" rel="nofollow noopener">https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/</a></p>
<p>Once set up you can clone it to your own computer,</p>
<p>This is my mac</p>
<p>[code=bash]$ git clone ssh://username@hidden-hostname.com/home/user/full-path-to/git-repo<br>
Cloning into ‘server’…<br>
remote: Counting objects: 9, done.<br>
remote: Compressing objects: 100% (3/3), done.<br>
remote: Total 9 (delta 0), reused 0 (delta 0)<br>
Receiving objects: 100% (9/9), done.<br>
Checking connectivity… done</p>
<p>MacBook-Pro:server username$ ls git-repo<br>
README.md[/code]</p>
<p>[hr]<br>
In your .gitignore file, you should probably put your character files, you don’t need to be committing your players every time you commit,<code>Data/characters/</code>Also if you have any logs, you can put those logs in the .gitignore file as well<code>Logs/trade.log</code><br>
[hr]</p>
<p>from here you can add new files, commit files and push them to the server, and when you are ready merge in master.</p>
<p>git status to see what files changes you have, and even what branch you are on</p>
<pre><code class="lang-auto">
$ git branch
  master
* new-server
[/code][code=bash]

$ git checkout new-server
Switched to branch 'new-server'</code></pre>
<p>Add your files</p>
<pre><code class="lang-auto">

$ git status


# On branch new-server
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#	.classpath
#	.project
#	.settings/
#	Compiler - Copy.bat
#	Compiler.bat
#	Data/
#	Server.zip
#	bin/
#	build/
#	compile.2.bat
#	compiler.sh
#	deps/
#	linux-run.sh
#	run.2.bat
#	run.bat
#	src/
nothing added to commit but untracked files present (use "git add" to track)[/code][code=bash]

$ git add .project
$ git status


# On branch new-server
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	new file:   .project
#
# Untracked files:
#   (use "git add &lt;file&gt;..." to include in what will be committed)
#
#	.classpath
#	.settings/
#	Compiler - Copy.bat
#	Compiler.bat
#	Data/
#	Server.zip
#	bin/
#	build/
#	compile.2.bat
#	compiler.sh
#	deps/
#	linux-run.sh
#	run.2.bat
#	run.bat
#	src/</code></pre>
<p>be sure to add each of your files an directories or for short</p>
<pre><code class="lang-auto">git add * .*</code></pre>
<p>and you’ll see a very very long list</p>
<pre><code class="lang-auto">
$ git status
# On branch new-server
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#	new file:   .project
#	new file:   Compiler - Copy.bat
#	new file:   Compiler.bat
#	new file:   Data/1. Run.bat
#	new file:   Data/2. Compiler.bat
#	new file:   Data/ClipMap.bin
#	new file:   Data/Data.txt</code></pre>
<p>Type git commit will come up with a visual interface which you can type your commit message</p>
<pre><code class="lang-auto">$ git commit

|
# Please enter the commit message for your changes. Lines starting
# with '#' will be ignored, and an empty message aborts the commit.
# On branch new-server
# Changes to be committed:
#   (use "git reset HEAD &lt;file&gt;..." to unstage)
#
#       new file:   .classpath
#       new file:   .project
#       new file:   .settings/org.eclipse.jdt.core.prefs
#       new file:   .settings/org.eclipse.jpt.core.prefs</code></pre>
<p>once committed you can push</p>
<pre><code class="lang-auto">
$ git push origin new-server


Counting objects: 2226, done.
Delta compression using up to 8 threads.
Compressing objects: 100% (2125/2125), done.
Writing objects: 100% (2225/2225), 47.43 MiB | 6.29 MiB/s, done.
Total 2225 (delta 218), reused 0 (delta 0)
To git@github.com:jlabranche/server.git
 * [new branch]      new-server -&gt; new-server</code></pre>
<p>[hr]<br>
Here are a list of commands you’ll likely need to work with your new git repo</p>
<pre><code class="lang-auto">#used to clone an initialized repo
git clone

#used for listing branches
git branch
#used for creating a new branch
git branch $new-branch-name
#used to delete a branch
git branch -D
#used for switching to a specific branch
git checkout $existing-branch

#used to see which files were changed and what those changes were
git diff
#used to see which files were changed by file name
git diff --name-only

#used to delete files from your repo, you'll still need to commit and push
git rm $file-you-already-deleted
#used to add files changes
git add $file
#used to rename files changes
git mv $file $renamed-file

#used to create a commit message once you have
git commit
#used to pushed your current branch to the remote branch
git push

#used to pull data from one branch in to your current working branch
#when you are ready you checkout master and merge in your branch.
#or if you are getting out of date compared to master, you can merge master in to your current branch.
#you'll need to commit and push again once a merge has happened, merged will only affect your current branch.
git merge $branch</code></pre>
<p>[hr]<br>
[size=18pt]Things I learned[/size]<br>
<span class="bbcode-b">There is a perfect saying for this.</span><br>
<span class="bbcode-i">measure twice cut once</span><br>
[hr]</p>
<p>To get colors to work add this to your ~/.gitconfig file</p>
<pre><code class="lang-auto">[color]
  diff = auto
  status = auto
  branch = auto
  interactive = auto
  ui = true
  pager = true</code></pre>
<p>I really like tab autocomplete in git, especially when working with other developers who like long names for their branches<br>
<a href="https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks" data-bbcode="true" rel="nofollow noopener">https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks</a></p>
<pre><code class="lang-auto">$ git branch &lt;tab&gt;&lt;tab&gt;
README.md</code></pre>
<p>I prefer</p>
<pre><code class="lang-auto">$ git branch &lt;tab&gt;&lt;tab&gt;
HEAD            master          new-branch      origin/HEAD     origin/master</code></pre>
<p>An amazing command that I use regularly is to check the difference from this branch to master</p>
<pre><code class="lang-auto"></code></pre>
<p><span class="bbcode-b">In short:</span><br>
Do what ever you want, but if you want to be truely successful you’ll use version control software.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285/1</link>
        <pubDate>Wed, 27 Apr 2016 22:58:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555285-1</guid>
        <source url="https://forum.moparisthebest.com/t/linux-git-how-to-set-up-version-control-for-your-server/555285.rss">[Linux] [Git] How to set up version control for your server</source>
      </item>
  </channel>
</rss>
