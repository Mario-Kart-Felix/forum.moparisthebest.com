<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Memory leak</title>
    <link>https://forum.moparisthebest.com/t/the-memory-leak/425651</link>
    <description>Nothing new, but should be fixed in moparrsc, unless u want it to eat up ur RAM.
I&#39;m going to fix it myself soon though. After other bugs are fixed.

This picture is after 20 mins AFKing. with 1 player online.
[img]http://img545.imageshack.us/img545/3997/leaks.png[/img]</description>
    
    <lastBuildDate>Fri, 06 Jan 2012 23:19:24 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>Yeah, Tile is only used within the Sector class, and Sector is only used within the WorldLoader class. They exist purely for loading purposes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/23</link>
        <pubDate>Fri, 06 Jan 2012 23:19:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-23</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote=“imthenull, post:21, topic:425651”][quote author=-Nothing link=topic=528304.msg3878419#msg3878419 date=1325822935]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>Why not just make a region system to fix the ActiveTile issue.<br>
[/quote]Because that’s a small portion of what the region system should be solving…</p>
</blockquote>
</aside>
<p>I know, why not make it if it’s good thing to do? I would have done it if I wasn’t so lazy.</p>
</blockquote>
</aside>
<p>Whats the difference between a ‘region system’ and the current ‘sector system’…?[/quote]Sectors are really only being used for the landscape, and nothing else.</p>
<p>Regions will encompass all aspects.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/22</link>
        <pubDate>Fri, 06 Jan 2012 06:08:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-22</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>[quote="-Nothing, post:20, topic:425651"][quote author=CodeForFame link=topic=528304.msg3872546#msg3872546 date=1325452124]</p>
<aside class="quote">
<blockquote>
<p>Why not just make a region system to fix the ActiveTile issue.<br>
[/quote]Because that’s a small portion of what the region system should be solving…</p>
</blockquote>
</aside>
<p>I know, why not make it if it’s good thing to do? I would have done it if I wasn’t so lazy.[/quote]<br>
Whats the difference between a ‘region system’ and the current ‘sector system’…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/21</link>
        <pubDate>Fri, 06 Jan 2012 06:00:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-21</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Nothing1 -Nothing]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nothing1">@Nothing1</a> wrote:</p>
          <blockquote>
              <p>[quote=“CodeForFame, post:19, topic:425651”][quote author=-Nothing link=topic=528304.msg3872397#msg3872397 date=1325445177]<br>
Why not just make a region system to fix the ActiveTile issue.<br>
[/quote]Because that’s a small portion of what the region system should be solving…[/quote]<br>
I know, why not make it if it’s good thing to do? I would have done it if I wasn’t so lazy.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/20</link>
        <pubDate>Fri, 06 Jan 2012 04:08:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-20</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote="-Nothing, post:18, topic:425651"]Why not just make a region system to fix the ActiveTile issue.[/quote]Because that’s a small portion of what the region system should be solving…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/19</link>
        <pubDate>Sun, 01 Jan 2012 21:08:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-19</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Nothing1 -Nothing]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nothing1">@Nothing1</a> wrote:</p>
          <blockquote>
              <p>Why not just make a region system to fix the ActiveTile issue.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/18</link>
        <pubDate>Sun, 01 Jan 2012 19:12:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-18</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>That is probably true, perhaps ‘always when dealing with this particular problem’, where it is always going to be hosted on a server where the bottleneck is going to be CPU speed and/or IO, but never RAM.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/17</link>
        <pubDate>Sun, 01 Jan 2012 17:36:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-17</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="15" data-topic="425651">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>With the current computers of today, you should be picking option 1 every time when talking about RAM.</p>
</blockquote>
</aside>
<p>Sorry, but I’m going to have to pick on that statement. “Always” is a strong word - you should be picking a data structure that offers a suitable trade-off between the two. The suitable trade-off is defined by both the problem you are solving and the hardware you have available.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/16</link>
        <pubDate>Sun, 01 Jan 2012 17:08:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-16</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>When you use something like a BitSet, whether you use the existing Java class or roll your own functionality, it boils down to a standard computer science time/space trade-off.  These are the choices:</p>
<ol>
<li>Use more storage space (in this case RAM) and less CPU cycles.</li>
<li>Use less storage space, but you have to do at least one mathematical calculation for each value you retrieve or set, so more CPU cycles.</li>
</ol>
<p>With the current computers of today, you should be picking option 1 every time when talking about RAM.</p>
<p>As others have said, the issue lies in the how the caching system is currently implemented, and using an idea similar to BitSet will ever-so-slightly lower the RAM usage, but the ‘memory leak’ will still be there, and you will hurt performance by using CPU cycles that would be better put to use other places.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/15</link>
        <pubDate>Sun, 01 Jan 2012 16:53:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-15</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <p>[quote=“CodeForFame, post:13, topic:425651”]1) The BitSet implementation uses a long, so unless you’re writing your own implementation you have that overhead, plus the header as a minimum.</p>
<ol start="2">
<li>
<p>Using a single BitSet adds quite a bit of complexity as well.</p>
</li>
<li>
<p>Also, is there a hit to memory for primitives similar to object headers?</p>
</li>
<li>
<p>Anyway, we’re arguing over very, very minimal memory.  It’s also extreme micro and premature to be optimizing this.  We first need to see what it’s like after implementing intelligent regions.[/quote]</p>
</li>
</ol>
<p><span class="mention">@1</span> : It actually uses an array of longs:</p>
<pre><code class="lang-auto">    /**
     * The internal field corresponding to the serialField "bits".
     */
    private long[] words;</code></pre>
<p><span class="mention">@2</span> : Yes, it does. But once you spend the time figuring out how to access your data, you’re done with it.</p>
<p><span class="mention">@3</span> : Yes, and this is the point where both you and Lothy are confused.</p>
<p>Example:<br>
A single byte variable inside of a class definition takes up 1 byte of memory upon instantiation, and then there is additional padding (7 bytes) added to that field to round to the nearest 8-byte boundary. Assuming the class header’s size is 8 bytes, this object will have a size of 16 bytes. If there are 9 byte variables within a class definition, the 9th one is padded to the nearest 8 byte boundary, resulting in an object size of 24 bytes.</p>
<p><span class="mention">@4</span> : Yes, which is why I suggested trying this only if you are unhappy with the results of proper memory management (as opposed to reducing the size required to simply store everything in memory).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/14</link>
        <pubDate>Sun, 01 Jan 2012 14:13:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-14</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote=“Vrunk, post:12, topic:425651”]@ java.util.BitSet : emphasis on ‘depending on how you implement it’</p>
<p>It would be silly to use a single BitSet per TileValue (the size of each object would still be 16-24 bytes), but you could potentially store all of the data as a single BitSet, and only incur the class header overhead once.[/quote]The BitSet implementation uses a long, so unless you’re writing your own implementation you have that overhead, plus the header as a minimum.</p>
<p>BitSet + int = 12 bytes minimum.<br>
6 bytes + int = 10 bytes minimum.</p>
<p>Using a single BitSet adds quite a bit of complexity as well.</p>
<p>Also, is there a hit to memory for primitives similar to object headers?</p>
<p>Anyway, we’re arguing over very, very minimal memory.  It’s also extreme micro and premature to be optimizing this.  We first need to see what it’s like after implementing intelligent regions.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/13</link>
        <pubDate>Sun, 01 Jan 2012 03:22:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-13</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <p>@ java.util.BitSet : emphasis on ‘depending on how you implement it’</p>
<p>It would be silly to use a single BitSet per TileValue (the size of each object would still be 16-24 bytes), but you could potentially store all of the data as a single BitSet, and only incur the class header overhead once.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/12</link>
        <pubDate>Sun, 01 Jan 2012 02:13:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-12</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote=“Vrunk, post:9, topic:425651”][quote author=CodeForFame link=topic=528304.msg3871368#msg3871368 date=1325365600]<br>
In summation, the solution is to intelligently and dynamically reduce the number of objects in memory; not reduce the amount of memory per object as that is smaller factor.<br>
[/quote]</p>
<p>That is the solution that will have the most impact. If you are unhappy with the results of that, and still want to grind down the memory usage, give one of these a try:</p>
<ul>
<li>
<p>Some form of data compression (you have to spend the CPU to compress/decompress). A simple example of this: how many TileValues are equal to each other (all of their fields have the same value?) There is no need to create a separate TileValue Object for each one. Create an instance of each unique TileValue, and store the objects in a lookup table.</p>
</li>
<li>
<p>java.util.BitSet (you might be able to store everything in memory at once with this, depending on how you implement it)[/quote]BitSets take as much as a long (maybe a bit more seeing longs are primitives, but IDK much about the differences in memory usage between them).</p>
</li>
</ul>
<p>To come up with a compression scheme we’d need to analyze the values themselves, and I really don’t see there being a need for that at all…  As it stands it’s 83.5mB, which is trivial these days, and the development time would be better spent on the rest of the program.<br>
[hr][quote=“Zilent, post:10, topic:425651”]It’s been a while since I’ve popped in here…but why aren’t you caching the tiles by using the java.lang.ref package?  Wouldn’t it be better to let the GC decide (by itself) when to clean up dead tiles?  That’s how I have it set up in my base.  No matter how you handle it, the heap will still become fragmented over time and will require a non-concurrent GC cleanup that will pause your server (yes, even if you’re using the concurrent collector).</p>
<p>On another note, TileValues should not be leaking, as they are instantiated when a World instance is created, and never again unless you’re doing something very, very wrong.</p>
<ul>
<li>Also, an event driven approach decreases the tiles involved in an update by a magnitude of 15 - 30 times, as I counted.[/quote]They’re not leaking.  In addition, we’ve already covered using that package probably a year or so ago, and in this topic; we’ve also narrowed it down to which reference type.</li>
</ul>
<p>Here is some more discussion on the topic, and profiling:<br>
<aside class="onebox githubissue">
  <header class="source">
      <a href="https://github.com/MoparClassic/MoparClassic/issues/28" target="_blank" rel="nofollow noopener">github.com/MoparClassic/MoparClassic</a>
  </header>
  <article class="onebox-body">
    <a href="https://github.com/CodeForFame" rel="nofollow noopener">
<img src="https://avatars1.githubusercontent.com/u/785526?v=2&amp;s=96" class="thumbnail onebox-avatar" width="96" height="96">
</a>

<h4><a href="https://github.com/MoparClassic/MoparClassic/issues/28" target="_blank" rel="nofollow noopener">Issue: Memory Leak</a></h4>

<div class="date" style="margin-top:10px;">
	<div class="user" style="margin-top:10px;">
	opened by <a href="https://github.com/CodeForFame" target="_blank" rel="nofollow noopener">CodeForFame</a>
	on <a href="https://github.com/MoparClassic/MoparClassic/issues/28" target="_blank" rel="nofollow noopener">2011-12-17</a>
	</div>
	<div class="user">
	closed by <a href="https://github.com/CodeForFame" target="_blank" rel="nofollow noopener">CodeForFame</a>
	on <a href="https://github.com/MoparClassic/MoparClassic/issues/28" target="_blank" rel="nofollow noopener">2011-12-19</a>
	</div>
</div>

<pre class="content" style="white-space: pre-wrap;">"Nothing new, but should be fixed in moparrsc, unless u want it to eat up ur RAM.
I'm going to fix it...</pre>

<div class="labels">
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/11</link>
        <pubDate>Sun, 01 Jan 2012 01:20:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-11</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Zilent Zilent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zilent">@Zilent</a> wrote:</p>
          <blockquote>
              <p>It’s been a while since I’ve popped in here…but why aren’t you caching the tiles by using the java.lang.ref package?  Wouldn’t it be better to let the GC decide (by itself) when to clean up dead tiles?  That’s how I have it set up in my base.  No matter how you handle it, the heap will still become fragmented over time and will require a non-concurrent GC cleanup that will pause your server (yes, even if you’re using the concurrent collector).</p>
<p>On another note, TileValues should not be leaking, as they are instantiated when a World instance is created, and never again unless you’re doing something very, very wrong.</p>
<ul>
<li>Also, an event driven approach decreases the tiles involved in an update by a magnitude of 15 - 30 times, as I counted.</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/10</link>
        <pubDate>Sun, 01 Jan 2012 01:14:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-10</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="425651">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/codeforfame/40/3743_1.png" class="avatar"> CodeForFame:</div>
<blockquote>
<p>In summation, the solution is to intelligently and dynamically reduce the number of objects in memory; not reduce the amount of memory per object as that is smaller factor.</p>
</blockquote>
</aside>
<p>That is the solution that will have the most impact. If you are unhappy with the results of that, and still want to grind down the memory usage, give one of these a try:</p>
<ul>
<li>
<p>Some form of data compression (you have to spend the CPU to compress/decompress). A simple example of this: how many TileValues are equal to each other (all of their fields have the same value?) There is no need to create a separate TileValue Object for each one. Create an instance of each unique TileValue, and store the objects in a lookup table.</p>
</li>
<li>
<p>java.util.BitSet (you might be able to store everything in memory at once with this, depending on how you implement it)</p>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/9</link>
        <pubDate>Sat, 31 Dec 2011 21:28:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-9</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lothy, post:5, topic:425651”][code]<br>
package org.moparscape.msc.gs.model;</p>
<p>public class TileValue {</p>
<pre><code>public int diagWallVal = 0;

public byte horizontalWallVal = 0;

public byte mapValue = 0;

public byte objectValue = 0;

public byte overlay = 0;

public byte verticalWallVal = 0;

public byte elevation = 0;
</code></pre>
<p>}<br>
[/code]<br>
One of the reasons that class probably uses so much memory is the number of variables it contains. They’re only bytes as far as the java language is concerned, but AFAIK they each take up the space of a 32 bit integer in the JVM.<br>
If the maximum value of diagWallVal will fit in a short then one solution would be to declare a single long field, and then use bitmasking to obtain the values.<br>
Make sure the mask variables are static and final, and not instance fields.</p>
<p>As for ActiveTile instances, make use of a collection that supports weak references or simply don’t create/cache tiles in the first place unless they have some kind of entity on them or being added immediately after creation.<br>
Failing this, try using lazy initialisation for the three LinkedList objects that each ActiveTile contains. The overhead when adding an entity is minimal, but the memory footprint will be substantially smaller despite the current implementation’s approach to caching.[/quote]I’m fairly certain that’s not true.  I know booleans behave that way, and I believe bytes will only behave that way when applying binary operations to it. Edit: The amount of bytes per object is 24, so you must be wrong.</p>
<p>Using a single long adds quite a bit of complexity, and wouldn’t really make an observable impact.</p>
<p>ActiveTiles should be loaded in regions to prevent lag due to IO operations for every time a player moves.  Regions should persist themselves intelligently, to reduce the memory footprint yet still act as a form of cache.</p>
<p>Also, I’m fairly certain it’s already been decided (in a previous thread) that soft references need to be used here, with the current implementation.</p>
<p>In summation, the solution is to intelligently and dynamically reduce the number of objects in memory; not reduce the amount of memory per object as that is smaller factor.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/8</link>
        <pubDate>Sat, 31 Dec 2011 21:06:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-8</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I think it’s possible you guys are over-exaggerating the problem.  Since it appears that running the garbage collector fixes the issue temporarily, the problem isn’t the amount of memory being used (RAM is very cheap), but rather that what is used is not disposed of properly.</p>
<p>Note that all my knowledge on this subject comes from reading this thread.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/7</link>
        <pubDate>Sat, 31 Dec 2011 20:22:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-7</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <p>Also, keep in mind that each Object has some additional memory overhead associated with the object header / array header. This is the realm of 8-16 bytes per Object (depending on the JVM implementation, and a few other things). There is also some padding added to primitive fields within Objects. For example:</p>
<pre><code class="lang-auto">class TileValue {
  byte example;
}</code></pre>
<p>new TileValue(); // 16-24 bytes in size, depending on the class header size. (1 + 7 == 8) bytes for the ‘example’ primitive</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/6</link>
        <pubDate>Sat, 31 Dec 2011 18:29:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-6</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">package org.moparscape.msc.gs.model;



public class TileValue {

	public int diagWallVal = 0;

	public byte horizontalWallVal = 0;

	public byte mapValue = 0;

	public byte objectValue = 0;

	public byte overlay = 0;

	public byte verticalWallVal = 0;

	public byte elevation = 0;

}</code></pre>
<p>One of the reasons that class probably uses so much memory is the number of variables it contains. They’re only bytes as far as the java language is concerned, but AFAIK they each take up the space of a 32 bit integer in the JVM.<br>
If the maximum value of diagWallVal will fit in a short then one solution would be to declare a single long field, and then use bitmasking to obtain the values.<br>
Make sure the mask variables are static and final, and not instance fields.</p>
<p>As for ActiveTile instances, make use of a collection that supports weak references or simply don’t create/cache tiles in the first place unless they have some kind of entity on them or being added immediately after creation.<br>
Failing this, try using lazy initialisation for the three LinkedList objects that each ActiveTile contains. The overhead when adding an entity is minimal, but the memory footprint will be substantially smaller despite the current implementation’s approach to caching.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/5</link>
        <pubDate>Sat, 31 Dec 2011 17:43:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-5</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Peter Peeter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/peter">@Peter</a> wrote:</p>
          <blockquote>
              <p>[quote="-Nothing, post:3, topic:425651"][quote author=Rodgerwilco link=topic=528304.msg3852479#msg3852479 date=1324142604]</p>

<p>6000000</p>
<p>I am under the impression there is a shit fix for this…?<br>
[/quote]<br>
Yes, indeed a shit fix. They did it so it clears the tiles every 100 mins, instead of even trying to fix it completely.[/quote]</p>
<p>Blame xEnt.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/4</link>
        <pubDate>Fri, 30 Dec 2011 12:28:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-4</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Nothing1 -Nothing]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nothing1">@Nothing1</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rodgerwilco, post:2, topic:425651”]<br>
6000000</p>
<p>I am under the impression there is a shit fix for this…?[/quote]<br>
Yes, indeed a shit fix. They did it so it clears the tiles every 100 mins, instead of even trying to fix it completely.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/3</link>
        <pubDate>Sat, 17 Dec 2011 17:41:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-3</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Rodgerwilco Rodgerwilco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodgerwilco">@Rodgerwilco</a> wrote:</p>
          <blockquote>
              <p>6000000</p>
<p>I am under the impression there is a shit fix for this…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/2</link>
        <pubDate>Sat, 17 Dec 2011 17:23:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-2</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
      <item>
        <title>The Memory leak</title>
        <dc:creator><![CDATA[@Nothing1 -Nothing]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nothing1">@Nothing1</a> wrote:</p>
          <blockquote>
              <p>Nothing new, but should be fixed in moparrsc, unless u want it to eat up ur RAM.<br>
I’m going to fix it myself soon though. After other bugs are fixed.</p>
<p>This picture is after 20 mins AFKing. with 1 player online.<br>
<img src="http://img545.imageshack.us/img545/3997/leaks.png" alt width="" height=""></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-memory-leak/425651/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-memory-leak/425651/1</link>
        <pubDate>Sat, 17 Dec 2011 17:14:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425651-1</guid>
        <source url="https://forum.moparisthebest.com/t/the-memory-leak/425651.rss">The Memory leak</source>
      </item>
  </channel>
</rss>
