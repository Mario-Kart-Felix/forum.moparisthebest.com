<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>639 Unban not working</title>
    <link>https://forum.moparisthebest.com/t/639-unban-not-working/547407</link>
    <description>Every time I try unip or unban it seems to go through but not delete it out the XML? If I manually remove it, it comes back when they try to join? I&#39;m really quite stumpt by this?

Help appreciated :)

The &quot;banned_ips.xml&quot;
[code]
&lt;list&gt;
  &lt;ban&gt;81.***.***.***&lt;/ban&gt;
&lt;/list&gt;
[/code]

The unip &amp; unban command
[code]
		if (command[0].equals(&quot;unip&quot;)) {
			Player p = new Player(null, new PlayerDefinition(getCompleteString(
					command, 1).replaceAll(&quot;_&quot;,
					&quot; &quot;), null));
			World.getWorld().getPlayerLoader().load(p);
			World.getWorld().getPunishHandler().unBan(p, true);
			World.getWorld().getPunishHandler().save();
		}


		if (command[0].equals(&quot;unban&quot;)) {
			String name = getCompleteString(command, 1).toLowerCase();
			World.getWorld().getPlayerInServer(name);
			World.getWorld().getPunishHandler().unBan(name, false);
			World.getWorld().getPunishHandler().save();
			World.getWorld().getPunishHandler().load();
			//saveChatMessage8(player, name);
			//System.out.println(&quot;&quot; +Misc.formatPlayerNameForDisplay(name)+&quot; has been unbanned by &quot;+Misc.formatPlayerNameForDisplay(player.getUsername())+&quot;&quot;);
			player.sendMessage(&quot;You have successfully unbanned &quot;+Misc.formatPlayerNameForDisplay(name)+&quot;.&quot;);


				}
[/code]

The &quot;PunishHandler&quot;
[code]
package org.dementhium.content.misc;

import org.dementhium.io.XMLHandler;
import org.dementhium.model.player.Player;
import java.io.IOException;
import java.util.ArrayList;

public class PunishHandler {

    private ArrayList&lt;String&gt; mutedPlayers = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; mutedIps = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; bannedPlayers = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; bannedIps = new ArrayList&lt;String&gt;();

    public boolean isMuted(Player p) {
        boolean muted = false;
        if (mutedPlayers.contains(p.getUsername())) {
            muted = true;
      } else if (mutedIps.contains(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()))) {
            muted = true;
        }
        return muted;
    }

    public boolean isBanned(Player p) {
        boolean banned = false;
        if (bannedPlayers.contains(p.getUsername())) {
            banned = true;
        } else if (bannedIps.contains(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()))) {
            banned = true;
        }
        return banned;
    }

    public void addMuted(Player p, boolean ipMute) {
        if (mutedPlayers == null) {
            mutedPlayers = new ArrayList&lt;String&gt;();
        }
        if (mutedIps == null) {
            mutedIps = new ArrayList&lt;String&gt;();
        }
        if (ipMute) {
            mutedIps.add(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()));
        } else {
            mutedPlayers.add(p.getUsername());
        }
    }

    public void addBan(Player p, boolean ipBan) {
        if (bannedPlayers == null) {
            bannedPlayers = new ArrayList&lt;String&gt;();
        }
        if (bannedIps == null) {
            bannedIps = new ArrayList&lt;String&gt;();
        }
        if (ipBan) {
            bannedIps.add(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()));
        } else {
            bannedPlayers.add(p.getUsername());
        }
    }

    public void unMute(Player p, boolean ipMute) {
        if (ipMute) {
            String ip = formatIp(p.getConnection().getChannel().getRemoteAddress().toString());
            for (String s : mutedIps) {
                if (mutedIps.equals(ip)) {
                    mutedIps.remove(s);
                }
            }
        } else {
            mutedPlayers.remove(p.getUsername());
        }
    }

    public void unMute(String user, boolean ipMute) {
        if (ipMute) {
            mutedIps.remove(user);
        } else {
            mutedPlayers.remove(user);
        }
    }

    public void unBan(Player p, boolean ipBan) {
        if (ipBan) {
            String ip = p.getLastConnectIp();
            for (String s : bannedIps) {
                if (bannedIps.equals(ip)) {
                    bannedIps.remove(s);
                }
            }
        } else {
            bannedPlayers.remove(p.getUsername());
        }
    }

    public void unBan(String p, boolean ipBan) {
        if (ipBan) {
            bannedIps.remove(p);
        } else {
            bannedPlayers.remove(p);
        }
    }

    public static final String DIRECTORY =&quot;data/xml/&quot;;

    public void save() {
        try {
            XMLHandler.toXML(DIRECTORY + &quot;ipmutes.xml&quot;, mutedIps);
            XMLHandler.toXML(DIRECTORY + &quot;mutes.xml&quot;, mutedPlayers);
            XMLHandler.toXML(DIRECTORY + &quot;banned_users.xml&quot;, bannedPlayers);
            XMLHandler.toXML(DIRECTORY + &quot;banned_ips.xml&quot;, bannedIps);
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    public void load() {
        try {
            mutedIps = XMLHandler.fromXML(DIRECTORY + &quot;ipmutes.xml&quot;);
            mutedPlayers = XMLHandler.fromXML(DIRECTORY + &quot;mutes.xml&quot;);
            bannedIps = XMLHandler.fromXML(DIRECTORY + &quot;banned_ips.xml&quot;);
            bannedPlayers = XMLHandler.fromXML(DIRECTORY + &quot;banned_users.xml&quot;);
        } catch (IOException e) {
        }

    }

    /**
     * Formats the IP-Address.
     *
     * @param unformatted The unformatted IP.
     * @return The formatted IP.
     */
    public static final String formatIp(String unformatted) {
        String ipAddress = unformatted;
        ipAddress = ipAddress.replaceAll(&quot;/&quot;, &quot;&quot;);
        ipAddress = ipAddress.replaceAll(&quot; &quot;, &quot;&quot;);
        ipAddress = ipAddress.substring(0, ipAddress.indexOf(&quot;:&quot;));
        return ipAddress;
    }

    public void addBan(String name) {
        bannedPlayers.add(name);
    }
}
[/code]</description>
    
    <lastBuildDate>Thu, 23 Oct 2014 16:48:35 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/639-unban-not-working/547407.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>639 Unban not working</title>
        <dc:creator><![CDATA[@dillo1000 dillo1000]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dillo1000">@dillo1000</a> wrote:</p>
          <blockquote>
              <p>Every time I try unip or unban it seems to go through but not delete it out the XML? If I manually remove it, it comes back when they try to join? I’m really quite stumpt by this?</p>
<p>Help appreciated <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>The “banned_ips.xml”</p>
<pre><code class="lang-auto">&lt;list&gt;
  &lt;ban&gt;81.***.***.***&lt;/ban&gt;
&lt;/list&gt;</code></pre>
<p>The unip &amp; unban command</p>
<pre><code class="lang-auto">		if (command[0].equals("unip")) {
			Player p = new Player(null, new PlayerDefinition(getCompleteString(
					command, 1).replaceAll("_",
					" "), null));
			World.getWorld().getPlayerLoader().load(p);
			World.getWorld().getPunishHandler().unBan(p, true);
			World.getWorld().getPunishHandler().save();
		}


		if (command[0].equals("unban")) {
			String name = getCompleteString(command, 1).toLowerCase();
			World.getWorld().getPlayerInServer(name);
			World.getWorld().getPunishHandler().unBan(name, false);
			World.getWorld().getPunishHandler().save();
			World.getWorld().getPunishHandler().load();
			//saveChatMessage8(player, name);
			//System.out.println("" +Misc.formatPlayerNameForDisplay(name)+" has been unbanned by "+Misc.formatPlayerNameForDisplay(player.getUsername())+"");
			player.sendMessage("You have successfully unbanned "+Misc.formatPlayerNameForDisplay(name)+".");


				}</code></pre>
<p>The “PunishHandler”</p>
<pre><code class="lang-auto">package org.dementhium.content.misc;

import org.dementhium.io.XMLHandler;
import org.dementhium.model.player.Player;
import java.io.IOException;
import java.util.ArrayList;

public class PunishHandler {

    private ArrayList&lt;String&gt; mutedPlayers = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; mutedIps = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; bannedPlayers = new ArrayList&lt;String&gt;();
    private ArrayList&lt;String&gt; bannedIps = new ArrayList&lt;String&gt;();

    public boolean isMuted(Player p) {
        boolean muted = false;
        if (mutedPlayers.contains(p.getUsername())) {
            muted = true;
      } else if (mutedIps.contains(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()))) {
            muted = true;
        }
        return muted;
    }

    public boolean isBanned(Player p) {
        boolean banned = false;
        if (bannedPlayers.contains(p.getUsername())) {
            banned = true;
        } else if (bannedIps.contains(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()))) {
            banned = true;
        }
        return banned;
    }

    public void addMuted(Player p, boolean ipMute) {
        if (mutedPlayers == null) {
            mutedPlayers = new ArrayList&lt;String&gt;();
        }
        if (mutedIps == null) {
            mutedIps = new ArrayList&lt;String&gt;();
        }
        if (ipMute) {
            mutedIps.add(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()));
        } else {
            mutedPlayers.add(p.getUsername());
        }
    }

    public void addBan(Player p, boolean ipBan) {
        if (bannedPlayers == null) {
            bannedPlayers = new ArrayList&lt;String&gt;();
        }
        if (bannedIps == null) {
            bannedIps = new ArrayList&lt;String&gt;();
        }
        if (ipBan) {
            bannedIps.add(formatIp(p.getConnection().getChannel().getRemoteAddress().toString()));
        } else {
            bannedPlayers.add(p.getUsername());
        }
    }

    public void unMute(Player p, boolean ipMute) {
        if (ipMute) {
            String ip = formatIp(p.getConnection().getChannel().getRemoteAddress().toString());
            for (String s : mutedIps) {
                if (mutedIps.equals(ip)) {
                    mutedIps.remove(s);
                }
            }
        } else {
            mutedPlayers.remove(p.getUsername());
        }
    }

    public void unMute(String user, boolean ipMute) {
        if (ipMute) {
            mutedIps.remove(user);
        } else {
            mutedPlayers.remove(user);
        }
    }

    public void unBan(Player p, boolean ipBan) {
        if (ipBan) {
            String ip = p.getLastConnectIp();
            for (String s : bannedIps) {
                if (bannedIps.equals(ip)) {
                    bannedIps.remove(s);
                }
            }
        } else {
            bannedPlayers.remove(p.getUsername());
        }
    }

    public void unBan(String p, boolean ipBan) {
        if (ipBan) {
            bannedIps.remove(p);
        } else {
            bannedPlayers.remove(p);
        }
    }

    public static final String DIRECTORY ="data/xml/";

    public void save() {
        try {
            XMLHandler.toXML(DIRECTORY + "ipmutes.xml", mutedIps);
            XMLHandler.toXML(DIRECTORY + "mutes.xml", mutedPlayers);
            XMLHandler.toXML(DIRECTORY + "banned_users.xml", bannedPlayers);
            XMLHandler.toXML(DIRECTORY + "banned_ips.xml", bannedIps);
        } catch (Throwable e) {
            e.printStackTrace();
        }
    }

    public void load() {
        try {
            mutedIps = XMLHandler.fromXML(DIRECTORY + "ipmutes.xml");
            mutedPlayers = XMLHandler.fromXML(DIRECTORY + "mutes.xml");
            bannedIps = XMLHandler.fromXML(DIRECTORY + "banned_ips.xml");
            bannedPlayers = XMLHandler.fromXML(DIRECTORY + "banned_users.xml");
        } catch (IOException e) {
        }

    }

    /**
     * Formats the IP-Address.
     *
     * @param unformatted The unformatted IP.
     * @return The formatted IP.
     */
    public static final String formatIp(String unformatted) {
        String ipAddress = unformatted;
        ipAddress = ipAddress.replaceAll("/", "");
        ipAddress = ipAddress.replaceAll(" ", "");
        ipAddress = ipAddress.substring(0, ipAddress.indexOf(":"));
        return ipAddress;
    }

    public void addBan(String name) {
        bannedPlayers.add(name);
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/639-unban-not-working/547407/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/639-unban-not-working/547407/1</link>
        <pubDate>Thu, 23 Oct 2014 16:48:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547407-1</guid>
        <source url="https://forum.moparisthebest.com/t/639-unban-not-working/547407.rss">639 Unban not working</source>
      </item>
  </channel>
</rss>
