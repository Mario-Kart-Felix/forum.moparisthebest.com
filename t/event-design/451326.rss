<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Event Design</title>
    <link>https://forum.moparisthebest.com/t/event-design/451326</link>
    <description>Just had an idea while I was at work, that I would like to get your opinions on. It&#39;s basically a way to handle consume events (eat a fish, drink a potion, etc).

Consumable.java
[code=Java]
public interface Consumable {
    public void onConsume(final Consumer c);
}
[/code]

Consumer.java
[code=Java]
public interface Consumer {
    public void consume(final Consumable c);
}
[/code]

Example
[code=Java]
public enum CombatPotion implements Consumable {
    BOOST_ATTACK() {
        @Override
        public void onConsume(final Consumable c) {
            // temporarily boost the attack skill
        }
    };
}
[/code]

Now, you can probably see a few problems that I&#39;d like your opinion on.

The first drawback is the lack of delegates in Java (which i&#39;ve come to enjoy with my tinkering in C#), which is what drew me to the interface method.
The second is is needing to pass the Consumer to the Consumable, which just kind of looks messy.
[code=Java]
public class Player implements Consumer {
    @Override
    public void consume(final Consumable c) {
        c.onConsume(this);
    }
}
[/code]

The third is allowing end-users to define how they want things to interact dynamically. In the example of Potions, each different potion would require a new implementation of the effects (obviously). However, creating entire objects just to implement one method has always seemed a bit wasteful.

I am open to all suggestions and ideas in order to improve the design.</description>
    
    <lastBuildDate>Thu, 26 Jul 2012 04:51:25 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/event-design/451326.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>the consume listener should be implemented on the consumer</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/8</link>
        <pubDate>Thu, 26 Jul 2012 04:51:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-8</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Visitor_pattern" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:690/220;"><img src="//upload.wikimedia.org/wikipedia/commons/0/00/W3sDesign_Visitor_Design_Pattern_UML.jpg" class="thumbnail"></div>

<h3><a href="https://en.wikipedia.org/wiki/Visitor_pattern" target="_blank" rel="nofollow noopener">Visitor pattern</a></h3>

<p>In object-oriented programming and software engineering, the visitor design pattern is a way of separating an algorithm from an object structure on which it operates. A practical result of this separation is the ability to add new operations to existent object structures without modifying the structures. It is one way to follow the open/closed principle. In essence, the visitor allows adding new virtual functions to a family of classes, without modifying the classes. Instead, a visitor class is c...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/7</link>
        <pubDate>Thu, 26 Jul 2012 04:48:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-7</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>nevermind i misread a consumer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/6</link>
        <pubDate>Thu, 26 Jul 2012 04:47:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-6</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:4, topic:451326”][quote author=AtomicInt_ link=topic=554217.msg4059287#msg4059287 date=1343275883]</p>
<pre><code class="lang-auto">public class Player implements Consumer {
    @Override
    public void consume(final Consumable c) {
        c.onConsume(this);
    }
}</code></pre>
<p>I’m not liking this part, the rest looks good.</p>
<p>Looks like it could get confusing, quickly.<br>
[/quote]</p>
<p>Exactly. That’s the problem. It becomes a bit of a back-and-forth between the Consumer and the Consumable.</p>
<p>The only alternative I can think of is to implement an event and handler system, like</p>
<pre><code class="lang-auto">public class Event {
    private Object source;

    protected Event(final Object source) {
        this.source = source;
    }
}</code></pre>
<pre><code class="lang-auto">public interface EventHandler&lt;E implements Event&gt; {
    public void handle(final E event);
}</code></pre>
<p>Then</p>
<pre><code class="lang-auto">public class ConsumeEvent extends Event {
    private int itemId;

    public ConsumeEvent(final Object source, final int itemId) {
        super(source);
        this.itemId = itemId;
    }

    // ...
}</code></pre>
<p>Perhaps if I knew how other frameworks accomplish this, I could understand it more clearly.</p>
<p>Are there dozens-hundreds of different classes for all of the events and other such dynamic content?[/quote]</p>
<p>No, they do it mm, not very smart. (If I understood what you meant.)</p>
<p>In most wL based servers consumables are done</p>
<pre><code class="lang-auto">public static void consume(final Player player, final int itemId, final int itemSlot) {
     if (itemId == ATTACK_POTION_4) {
        drinkAttackPotion(player, itemId, itemSlot);
        // replace item, consume timer, etc.
    } else if (...) {
       ....
    }
}</code></pre>
<p>In a giant switch / if-else block statement for all the consumables, potions, food, etc.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/5</link>
        <pubDate>Thu, 26 Jul 2012 04:39:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-5</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:3, topic:451326”]<code>
public class Player implements Consumer {
    @Override
    public void consume(final Consumable c) {
        c.onConsume(this);
    }
}
</code></p>
<p>I’m not liking this part, the rest looks good.</p>
<p>Looks like it could get confusing, quickly.[/quote]</p>
<p>Exactly. That’s the problem. It becomes a bit of a back-and-forth between the Consumer and the Consumable.</p>
<p>The only alternative I can think of is to implement an event and handler system, like</p>
<pre><code class="lang-auto">public class Event {
    private Object source;

    protected Event(final Object source) {
        this.source = source;
    }
}</code></pre>
<pre><code class="lang-auto">public interface EventHandler&lt;E implements Event&gt; {
    public void handle(final E event);
}</code></pre>
<p>Then</p>
<pre><code class="lang-auto">public class ConsumeEvent extends Event {
    private int itemId;

    public ConsumeEvent(final Object source, final int itemId) {
        super(source);
        this.itemId = itemId;
    }

    // ...
}</code></pre>
<p>Perhaps if I knew how other frameworks accomplish this, I could understand it more clearly.</p>
<p>Are there dozens-hundreds of different classes for all of the events and other such dynamic content?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/4</link>
        <pubDate>Thu, 26 Jul 2012 04:27:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-4</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">public class Player implements Consumer {
    @Override
    public void consume(final Consumable c) {
        c.onConsume(this);
    }
}</code></pre>
<p>I’m not liking this part, the rest looks good.</p>
<p>Looks like it could get confusing, quickly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/3</link>
        <pubDate>Thu, 26 Jul 2012 04:11:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-3</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@tyb97 tyb97]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tyb97">@tyb97</a> wrote:</p>
          <blockquote>
              <p>I like it, I would try to attempt to improve it, but I’m to stupid too do so.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/2</link>
        <pubDate>Thu, 26 Jul 2012 04:00:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-2</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
      <item>
        <title>Event Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Just had an idea while I was at work, that I would like to get your opinions on. It’s basically a way to handle consume events (eat a fish, drink a potion, etc).</p>
<p>Consumable.java</p>
<pre><code class="lang-auto">public interface Consumable {
    public void onConsume(final Consumer c);
}</code></pre>
<p>Consumer.java</p>
<pre><code class="lang-auto">public interface Consumer {
    public void consume(final Consumable c);
}</code></pre>
<p>Example</p>
<pre><code class="lang-auto">public enum CombatPotion implements Consumable {
    BOOST_ATTACK() {
        @Override
        public void onConsume(final Consumable c) {
            // temporarily boost the attack skill
        }
    };
}</code></pre>
<p>Now, you can probably see a few problems that I’d like your opinion on.</p>
<p>The first drawback is the lack of delegates in Java (which i’ve come to enjoy with my tinkering in C#), which is what drew me to the interface method.<br>
The second is is needing to pass the Consumer to the Consumable, which just kind of looks messy.</p>
<pre><code class="lang-auto">public class Player implements Consumer {
    @Override
    public void consume(final Consumable c) {
        c.onConsume(this);
    }
}</code></pre>
<p>The third is allowing end-users to define how they want things to interact dynamically. In the example of Potions, each different potion would require a new implementation of the effects (obviously). However, creating entire objects just to implement one method has always seemed a bit wasteful.</p>
<p>I am open to all suggestions and ideas in order to improve the design.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-design/451326/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-design/451326/1</link>
        <pubDate>Thu, 26 Jul 2012 03:31:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451326-1</guid>
        <source url="https://forum.moparisthebest.com/t/event-design/451326.rss">Event Design</source>
      </item>
  </channel>
</rss>
