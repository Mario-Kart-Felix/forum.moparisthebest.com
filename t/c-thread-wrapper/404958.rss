<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C++ Thread Wrapper</title>
    <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958</link>
    <description>What functionality am I missing, besides join? And am I using the correct win32 call to create the thread? Going off of an article I found, don&#39;t really have an easily accessible way to test on Windows.

[code=cpp]#ifndef THREAD_H_
#define THREAD_H_

#ifdef _WIN32

#include &lt;process.h&gt;
#include &lt;windows.h&gt;

#define thread_t HANDLE

#else

#include &lt;pthread.h&gt;

#define thread_t pthread_t

#endif

class Thread {

public:
	Thread(void* (*routine)());

	void create();

	thread_t handle() {
		return m_thread;
	}

private:
	static void* start(void*);

	void* (*m_routine)();
	thread_t m_thread;
	int m_pid;

};

#endif
[/code]

[code=cpp]
#include &lt;iostream&gt;

#include &quot;Thread.h&quot;

Thread::Thread(void* (*routine)()) {
	m_routine = routine;
}

void Thread::create() {
#ifdef _WIN32
	m_thread = reinterpret_cast&lt;HANDLE&gt;(_beginthread(start, 0, static_cast&lt;void*&gt;(this)));

	if(m_thread == 0) {
		std::cerr &lt;&lt; &quot;Error creating thread&quot; &lt;&lt; std::endl;
	}
#else
	int ret = pthread_create(&amp;m_thread, 0, start, static_cast&lt;void*&gt;(this));

	if(ret) {
		std::cerr &lt;&lt; &quot;Error creating thread, code: &quot; &lt;&lt; ret &lt;&lt; std::endl;
	}
#endif
}

void* Thread::start(void* thread) {
	Thread* pthread = static_cast&lt;Thread*&gt;(thread);
	return pthread-&gt;m_routine();
}
[/code]</description>
    
    <lastBuildDate>Tue, 19 Jul 2011 14:44:52 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="404958">
<div class="title">
<div class="quote-controls"></div>
 Fat Cookies:</div>
<blockquote>
<p>inb4 just use MFC.</p>
</blockquote>
</aside>
<p>Last I checked VS Express didn’t include the MFC libraries, and I was trying to keep it open for all.</p>
<aside class="quote quote-modified" data-post="7" data-topic="404958">
<div class="title">
<div class="quote-controls"></div>
 The Enforcer:</div>
<blockquote>
<p>C++0x has std::thread so I really see no point in creating your own wrappers, gcc already supports it. I use VC++2010 myself and I don’t know of any other compilers than gcc to implement it. In this case the options are just::thread and TinyThread++ which are decent implementations of std::thread, boost::thread is similar but differs in some ways.</p>
</blockquote>
</aside>
<p>I know about std::thread, but I wanted to keep it usable by all compilers. I’ll just use boost since I already needed it elsewhere</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/8</link>
        <pubDate>Tue, 19 Jul 2011 14:44:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>C++0x has std::thread so I really see no point in creating your own wrappers, gcc already supports it. I use VC++2010 myself and I don’t know of any other compilers than gcc to implement it. In this case the options are just::thread and TinyThread++ which are decent implementations of std::thread, boost::thread is similar but differs in some ways.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/7</link>
        <pubDate>Tue, 19 Jul 2011 11:35:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>inb4 just use MFC.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/6</link>
        <pubDate>Tue, 19 Jul 2011 11:06:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>teh pre pro ses sor</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/5</link>
        <pubDate>Mon, 18 Jul 2011 23:05:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>You’re using C++, use namespaces.</p>
<p>And quit using the preprocessor ‘define’ when a typedef is in order. ty.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/4</link>
        <pubDate>Mon, 18 Jul 2011 22:56:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>needs more join</p>
<p>also make a mutex class to compliment (pthread_mutex_t &amp; CRITICAL_SECTION etc.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/3</link>
        <pubDate>Mon, 18 Jul 2011 22:42:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>You can reference C++0x’s  to see what else you could do.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/2</link>
        <pubDate>Mon, 18 Jul 2011 20:18:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
      <item>
        <title>C++ Thread Wrapper</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>What functionality am I missing, besides join? And am I using the correct win32 call to create the thread? Going off of an article I found, don’t really have an easily accessible way to test on Windows.</p>
<p>[code=cpp]<span class="hashtag">#ifndef</span> THREAD_H_<br>
<span class="hashtag">#define</span> THREAD_H_</p>
<p><span class="hashtag">#ifdef</span> _WIN32</p>
<p><span class="hashtag">#include</span> &lt;process.h&gt;<br>
<span class="hashtag">#include</span> &lt;windows.h&gt;</p>
<p><span class="hashtag">#define</span> thread_t HANDLE</p>
<p><span class="hashtag">#else</span></p>
<p><span class="hashtag">#include</span> &lt;pthread.h&gt;</p>
<p><span class="hashtag">#define</span> thread_t pthread_t</p>
<p><span class="hashtag">#endif</span></p>
<p>class Thread {</p>
<p>public:<br>
Thread(void* (*routine)());</p>
<pre><code>void create();

thread_t handle() {
	return m_thread;
}
</code></pre>
<p>private:<br>
static void* start(void*);</p>
<pre><code>void* (*m_routine)();
thread_t m_thread;
int m_pid;
</code></pre>
<p>};</p>
<p><span class="hashtag">#endif</span><br>
[/code]</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;

#include "Thread.h"

Thread::Thread(void* (*routine)()) {
	m_routine = routine;
}

void Thread::create() {
#ifdef _WIN32
	m_thread = reinterpret_cast&lt;HANDLE&gt;(_beginthread(start, 0, static_cast&lt;void*&gt;(this)));

	if(m_thread == 0) {
		std::cerr &lt;&lt; "Error creating thread" &lt;&lt; std::endl;
	}
#else
	int ret = pthread_create(&amp;m_thread, 0, start, static_cast&lt;void*&gt;(this));

	if(ret) {
		std::cerr &lt;&lt; "Error creating thread, code: " &lt;&lt; ret &lt;&lt; std::endl;
	}
#endif
}

void* Thread::start(void* thread) {
	Thread* pthread = static_cast&lt;Thread*&gt;(thread);
	return pthread-&gt;m_routine();
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-thread-wrapper/404958/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-thread-wrapper/404958/1</link>
        <pubDate>Mon, 18 Jul 2011 19:41:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404958-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-thread-wrapper/404958.rss">C++ Thread Wrapper</source>
      </item>
  </channel>
</rss>
