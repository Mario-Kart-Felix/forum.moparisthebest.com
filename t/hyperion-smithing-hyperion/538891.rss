<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Hyperion] Smithing [Hyperion]</title>
    <link>https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891</link>
    <description>Has everything Smithing has except you need to add in level checking.

So to start off make a new class and name it SmithingInterface and in it put 

[code=java]/**
 * SmithingInterface
 * 
 * January 20th, 2014
 * 
 * Dan0194
 */
package org.hyperion.rs2.action.impl.smithing;

import java.util.HashMap;
import java.util.Map;

import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Player;

/**
 * Everything to do with Smithing interface
 */
public class SmithingInterface {
	
	/**
	 * Setter for smithing interface
	 */
	private static final SmithingInterface smithingInterface = new SmithingInterface();
	
	/**
	 * Holds all the enums on the interface ids, slots and which item to place there
	 */
	public static enum SmithingData{
		/**
		 * Holds all information on dagger
		 */
		DAGGER(1125, 1, 1, 0, 1119, new short[] {1205, 1203, 1207, 1209, 1211, 1213}),
		/**
		 * Holds all information on axes
		 */
		AXE(1126, 1, 1, 0, 1120, new short[] {1351, 1349, 1353, 1355, 1357, 1359}),
		/**
		 * Holds all information on chainbodies
		 */
		CHAINBODY(1109, 3, 1, 0, 1121, new short[] {1103, 1101, 1105, 1109, 1111, 1113}),
		/**
		 * Holds all information on medium helm
		 */
		MEDIUM_HELM(1127, 1, 1, 0, 1122, new short[] {1139, 1137, 1141, 1143, 1145, 1147}),
		/**
		 * Holds all information on dart tips
		 */
		DART_TIPS(1128, 1, 5, 0, 1123, new short[] {819, 820, 821, 822, 823, 824}),
		/**
		 * Holds all information on swords
		 */
		SWORD(1124, 1, 1, 1, 1119, new short[] {1277, 1279, 1281, 1285, 1287, 1289}),
		/**
		 * Holds all information on maces
		 */
		MACE(1129, 1, 1, 1, 1120, new short[] {1422, 1420, 1424, 1428, 1430, 1432}),
		/**
		 * Holds all information on platelegs
		 */
		PLATELEGS(1110, 3, 1, 1, 1121, new short[] {1075, 1067, 1069, 1071, 1073, 1079}),
		/**
		 * Holds all information on full helms
		 */
		FULL_HELM(1113, 2, 1, 1, 1122, new short[] {1155, 1153, 1157, 1159, 1161, 1163}),
		/**
		 * Holds all information on arrow tips
		 */
		ARROW_TIPS(1130, 1, 5, 1, 1123, new short[] {39, 40, 41, 42, 43, 44}),
		/**
		 * Holds all information on scimitars
		 */
		SCIMITAR(1116, 2, 1, 2, 1119, new short[] {1321, 1323, 1325, 1329, 1331, 1333}),
		/**
		 * Holds all information on warhammers
		 */
		WARHAMMER(1118, 3, 1, 2, 1120, new short[] {1337, 1335, 1339, 1343, 1345, 1347}),
		/**
		 * Holds all information on plate skirts
		 */
		PLATE_SKIRT(1111, 3, 1, 2, 1121, new short[] {1087, 1081, 1083, 1085, 1091, 1093}),
		/**
		 * Holds all information on square shields
		 */
		SQUARE_SHIELD(1114, 2, 1, 2, 1122, new short[] {1173, 1175, 1177, 1181, 1183, 1185}),
		/**
		 * Holds all information on throwing knives
		 */
		THROWING_KIVES(1131, 1, 5, 2, 1123, new short[] {864, 863, 865, 866, 867, 868}),
		/**
		 * Holds all information on longsword
		 */
		LONGSWORD(1089, 2, 1, 3, 1119, new short[] {1291, 1293, 1295, 1299, 1301, 1303}),
		/**
		 * Holds all information on battleaxes
		 */
		BATTLEAXE(1095, 3, 1, 3, 1120, new short[] {1375, 1363, 1365, 1369, 1371, 1373}),
		/**
		 * Holds all information on platebodiess
		 */
		PLATEBODY(1112, 5, 1, 3, 1121, new short[] {1117, 1115, 1119, 1121, 1123, 1127}),
		/**
		 * Holds all information on kiteshields
		 */
		KITESHIELD(1115, 3, 1, 3, 1122, new short[] {1189, 1191, 1193, 1197, 1199, 1201}),
		/**
		 * Holds all information on two handed swords
		 */
		TWO_HANDEDSWORD(1090, 3, 1, 4, 1119, new short[] {1307, 1309, 1311, 1315, 1317, 1319}),
		/**
		 * Holds all information on claws
		 */
		CLAWS(8428, 2, 1, 4, 1120, new short[] {3095, 3096, 3097, 3099, 3100, 3101}),
		/**
		 * Holds all information on oil lantern frame
		 */
		OIL_LANTERN_FRAME(11459, 1, 1, 4, 1121, new short[] {4540, 4540, 4540, 4540, 4540, 4540}),
		/**
		 * Holds all information on nails
		 */
		NAILS(13357, 1, 15, 4, 1122, new short[] {4819, 4820, 1539, 4822, 4823, 4824});
		
	
		
		/**
		 * The lineId and the amount of bars needed
		 * The interfaceId and the slot
		 */
		private int lineId, amount, quantity, interfaceId, slot;
		/**
		 * the itemId (e.x bronze, iron, steel etc.)
		 */
		private short itemId[];
		
		/**
		 * @param lineId
		 * @param amount
		 * @param slot
		 * @param interfaceId
		 * @param itemId
		 */
		SmithingData(int lineId, int amount, int quantity, int slot, int interfaceId, short itemId[]) {
			this.lineId = lineId;
			this.amount = amount;
			this.slot = slot;
			this.quantity = quantity;
			this.interfaceId = interfaceId;
			this.itemId = itemId;
		}
		
		private static Map&lt;Short, SmithingData&gt; smithingData = new HashMap&lt;Short, SmithingData&gt;();
		
		/**
		 * Gets a SmithingData by a itemId
		 * @param item
		 * @return The smithingData, or &lt;code&gt;null&lt;/code&gt; if the item is not smithingData.
		 */
		public static SmithingData forId(short item) {
			return smithingData.get(item);
		}
		
		/**
		 * Populates the smithingData map.
		 */
		static {
			for(SmithingData smithing : SmithingData.values()) {
				for(short i = 0; i &lt; smithing.itemId.length; i++) {
				smithingData.put(smithing.itemId[i], smithing);
				}
			}
		}
		
		
		/**
		 * @return lineId
		 */
		public int getLineId() {
			return lineId;
		}
		
		/**
		 * @return amount
		 */
		public int getAmount() {
			return amount;
		}
		
		/**
		 * @return quantity
		 */
		public int getQuantity() {
			return quantity;
		}
		
		/**
		 * @return slot
		 */
		public int getSlot() {
			return slot;
		}
		
		/**
		 * @return interfaceId
		 */
		public int getInterfaceId() {
			return interfaceId;
		}
		
	}
	
	/**
	 * the barId
	 */
	private int barId;
	
	/**
	 * Handles everything to do with smithing interface
	 * All the pictures, text
	 */
	public SmithingInterface sendSmithingInterface(Player player, Item item) {
		final int itemId = item.getId() &gt;= 2355 ? item.getId() - 4: item.getId();
		final int itemSlot = itemId - 2349 - ((itemId - 2349) / 2);
		for(SmithingData smithingData : SmithingData.values()) {
			player.getActionSender().sendUpdateItem(smithingData.getInterfaceId(), smithingData.getSlot(), new Item(smithingData.itemId[itemSlot], smithingData.getQuantity()));
			player.getActionSender().sendString(smithingData.getLineId(), (player.getInventory().contains(item, smithingData.getAmount()) ? &quot;@gre@&quot; : &quot;@red@&quot;) + smithingData.getAmount()+&quot; Bars&quot;);
		}
		player.getActionSender().sendInterface(994);
		this.barId = item.getId();
		return this;
	}
	
	/**
	 * @return smithingInterface
	 */
	public static final SmithingInterface getSmithingInterface() {
		return smithingInterface;
	}
	
	/**
	 * @return barId
	 */
	public int getBarId() {
		return barId;
	}
}[/code]

And then make the class SmithingAction and put inside

[code=java]/**
 * SmithingAction
 * 
 * January 21, 2014
 * 
 * Dan0194
 */
package org.hyperion.rs2.action.impl.smithing;

import org.hyperion.rs2.action.impl.ProducingAction;
import org.hyperion.rs2.action.impl.smithing.SmithingInterface.SmithingData;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Player;

/**
 * All of the action in smithing
 */
public class SmithingAction extends ProducingAction {
	
	/**
	 * the itemId of the item you want to make
	 */
	private int itemId;
	/**
	 * the slot of the item
	 */
	private int slot;
	/**
	 * the data that corresponds to the item
	 */
	private SmithingData smithingData;
	/**
	 * how much of the production to make
	 */
	private int productionNumber;
	
	/**
	 * @param player
	 * @param slot
	 * @param itemId
	 * @param productionNumber
	 */
	public SmithingAction(Player player, final int slot, final int itemId, final int productionNumber) {
		super(player, slot, itemId);
		this.slot = slot;
		this.itemId = itemId;
		this.smithingData = SmithingData.forId((short) itemId); 
		this.productionNumber = productionNumber;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionDelay()
	 */
	@Override
	public long getProductionDelay() {
		return 3;
	}
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionNumber()
	 */
	@Override
	public int getProductionNumber() {
		return getProductionTimes();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionMessage()
	 */
	@Override
	public String getProductionMessage() {
		return &quot;You make a &quot; + new Item(itemId).getDefinition().getName();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getAnimation()
	 */
	@Override
	public Animation getAnimation() {
		return Animation.create(898);
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getPrimaryItem()
	 */
	@Override
	public int getPrimaryItem() {
		return SmithingInterface.getSmithingInterface().getBarId();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProducedItem()
	 */
	@Override
	public int getProducedItem() {
		return itemId;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getSkill()
	 */
	@Override
	public int getSkill() {
		return 12;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getLevelRequirement()
	 */
	@Override
	public int getLevelRequirement() {
		return 1;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getExperience()
	 */
	@Override
	public double getExperience() {
		return 10;
	}
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getAmount()
	 */
	@Override
	public int getAmount() {
		return smithingData.getQuantity();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#init()
	 * This method is called every single time a new item is made
	 */
	@Override
	public void init() {
        getPlayer().getActionSender().sendRemoveAllInterfaces();
        if(!getPlayer().getInventory().contains(2347)) {
			getPlayer().getActionSender().sendMessage(&quot;You need a hammer to smith!&quot;);
			stop();
			return;
        }
		if(!getPlayer().getInventory().contains(new Item(SmithingInterface.getSmithingInterface().getBarId()), getSmithingData().getAmount())) {
			getPlayer().getActionSender().sendMessage(&quot;You don&#39;t have enough bars to make this item.&quot;);
			stop();
			return;
		}
		getPlayer().getInventory().remove(new Item(getPrimaryItem(), getSmithingData().getAmount()));
        getPlayer().playAnimation(getAnimation());
        giveReward();
	}
	
	/**
	 * @return itemId
	 */
	public int getId() {
		return itemId;
	}
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getSlot()
	 * @return slot
	 */
	public int getSlot() {
		return slot;
	}
	
	/**
	 * @return productionNumber
	 */
	public int getProductionTimes() {
		return productionNumber;
	}
	
	/**
	 * @return smithingData
	 */
	public SmithingData getSmithingData() {
		return smithingData;
	}
}[/code]

Now in your ItemOnObject packet add 

[code=java]SmithingInterface.getSmithingInterface().sendSmithingInterface(player, new Item(itemId)); [/code]

Now in your InterfaceClickOption packet

[b]First Option:[/b]
[code=java]player.getActionQueue().addAction(new SmithingAction(player, slot, id, 1));[/code]

[b]Second Option:[/b]
[code=java]player.getActionQueue().addAction(new SmithingAction(player, slot, id, 5));[/code]

[b]Third Option:[/b]
[code=java]player.getActionQueue().addAction(new SmithingAction(player, slot, id, 10));[/code]

And if you don&#39;t have the ProducingAction class (I adjusted it a bit but mainly made by Graham and Shawn)
[code=java]
package org.hyperion.rs2.action.impl;

import org.hyperion.rs2.action.Action;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Player;


/**
 * &lt;p&gt; A producing action is an action where on item is transformed into
 * another, typically this is in skills such as smithing and crafting. &lt;/p&gt; &lt;p&gt;
 * This class implements code related to all production-type skills, such as
 * dealing with the action itself, replacing the items and checking levels. &lt;/p&gt;
 * &lt;p&gt; The individual crafting, smithing, and other skills implement
 * functionality specific to them such as random events. &lt;/p&gt;
 * 
 * @author Shawn 
 * @author Graham 
 * 
 */
public abstract class ProducingAction extends Action {

    /**
     * The slot of the item.
     */
    private int slot;

    /**
     * The item.
     */
    private int item;

    
    /**
     * Gets the slot of the item.
     * 
     * @return The slot.
     */
    public int getSlot() {
        return slot;
    }
  
    
    /**
     * Sets the slot of the item.
     * 
     * @param slot The slot.
     */
    public void setSlot(int slot) {
        this.slot = slot;
    }
    
    /**
     * Gets the item.
     * 
     * @return The item.
     */
    public int getItem() {
        return item;
    }
    
    /**
     * Sets the item.
     * 
     * @param item The item.
     */
    public void setItem(int item) {
        this.item = item;
    }

    /**
     * Creates the producing action for the specified player.
     * 
     * @param player The player to create the action for.
     */
    public ProducingAction(Player player, int slot, int item) {
        super(player, 0);
        this.setSlot(slot);
        this.setItem(item);
    }

    @Override
    public QueuePolicy getQueuePolicy() {
        return QueuePolicy.NEVER;
    }

    @Override
    public WalkablePolicy getWalkablePolicy() {
        return WalkablePolicy.WALKABLE;
    }

    /**
     * Gets the delay of this action.
     * 
     * @return The delay.
     */
    public abstract long getProductionDelay();
    
    /**
     * Gets the number of times this action is ran
     * 
     * @return the number of times the action is ran
     */
    public abstract int getProductionNumber();

    /**
     * Gets the production message.
     * 
     * @return The message.
     */
    public abstract String getProductionMessage();

    /**
     * Gets the animation of this action. 
     * 
     * @return The animation.
     */
    public abstract Animation getAnimation();

    /**
     * Gets the primary item.
     * 
     * @return The item.
     */
    public abstract int getPrimaryItem();
    
    /**
     * Gets the produced item.
     * 
     * @return The item.
     */
    public abstract int getProducedItem();

    /**
     * Gets the skill this action is corresponding with.
     * 
     * @return The skill.
     */
    public abstract int getSkill();
    
    /**
     * Gets the level requirement of this action.
     * 
     * @return The level requirement.
     */
    public abstract int getLevelRequirement();
   
    /**
     * Gets the experience to add.
     * 
     * @return The experience.
     */
    public abstract double getExperience();
    
    /**
     * Initializes this action.
     */
    public abstract void init();
    
    
    /**
     * How many of the item to give
     */
    public abstract int getAmount();
    
    /**
     * How many times the production needs to be ran
     */
    private int productionNumber;
    
	protected void giveReward() {
        getPlayer().getInventory().add(new Item(getProducedItem(), getAmount()));
        getPlayer().getSkills().addExperience(getSkill(), getExperience());
        getPlayer().getActionSender().sendMessage(getProductionMessage());
	}
    
    
    @Override
    public void execute() {
    	int timesRan = getProductionNumber() + productionNumber;
    	if(timesRan != 0) {
    	init();
    	productionNumber--;
    	this.setDelay(getProductionDelay() * 1000);
    	} else {
    		stop();
    	}
    }
}
        [/code]</description>
    
    <lastBuildDate>Tue, 21 Jan 2014 23:49:56 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Hyperion] Smithing [Hyperion]</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <p>[quote=“Clawz fury, post:2, topic:538891”]you are good way too fast man slow down <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
<p>great snippet, could use the data here :)[/quote]<br>
Thanks bro you’ve helped a lot.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/3</link>
        <pubDate>Tue, 21 Jan 2014 23:49:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538891-3</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891.rss">[Hyperion] Smithing [Hyperion]</source>
      </item>
      <item>
        <title>[Hyperion] Smithing [Hyperion]</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>you are getting good way too fast man slow down <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
<p>great snippet, could use the data here <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/2</link>
        <pubDate>Tue, 21 Jan 2014 21:30:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538891-2</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891.rss">[Hyperion] Smithing [Hyperion]</source>
      </item>
      <item>
        <title>[Hyperion] Smithing [Hyperion]</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <p>Has everything Smithing has except you need to add in level checking.</p>
<p>So to start off make a new class and name it SmithingInterface and in it put</p>
<p>[code=java]/**</p>
<ul>
<li>SmithingInterface</li>
<li>
</li>
<li>January 20th, 2014</li>
<li>
</li>
<li>Dan0194<br>
*/<br>
package org.hyperion.rs2.action.impl.smithing;</li>
</ul>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>
<p>Everything to do with Smithing interface<br>
*/<br>
public class SmithingInterface {</p>
<p>/**</p>
<ul>
<li>Setter for smithing interface<br>
*/<br>
private static final SmithingInterface smithingInterface = new SmithingInterface();</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Holds all the enums on the interface ids, slots and which item to place there<br>
<em>/<br>
public static enum SmithingData{<br>
/</em>*</p>
<ul>
<li>Holds all information on dagger<br>
<em>/<br>
DAGGER(1125, 1, 1, 0, 1119, new short[] {1205, 1203, 1207, 1209, 1211, 1213}),<br>
/</em>*</li>
<li>Holds all information on axes<br>
<em>/<br>
AXE(1126, 1, 1, 0, 1120, new short[] {1351, 1349, 1353, 1355, 1357, 1359}),<br>
/</em>*</li>
<li>Holds all information on chainbodies<br>
<em>/<br>
CHAINBODY(1109, 3, 1, 0, 1121, new short[] {1103, 1101, 1105, 1109, 1111, 1113}),<br>
/</em>*</li>
<li>Holds all information on medium helm<br>
<em>/<br>
MEDIUM_HELM(1127, 1, 1, 0, 1122, new short[] {1139, 1137, 1141, 1143, 1145, 1147}),<br>
/</em>*</li>
<li>Holds all information on dart tips<br>
<em>/<br>
DART_TIPS(1128, 1, 5, 0, 1123, new short[] {819, 820, 821, 822, 823, 824}),<br>
/</em>*</li>
<li>Holds all information on swords<br>
<em>/<br>
SWORD(1124, 1, 1, 1, 1119, new short[] {1277, 1279, 1281, 1285, 1287, 1289}),<br>
/</em>*</li>
<li>Holds all information on maces<br>
<em>/<br>
MACE(1129, 1, 1, 1, 1120, new short[] {1422, 1420, 1424, 1428, 1430, 1432}),<br>
/</em>*</li>
<li>Holds all information on platelegs<br>
<em>/<br>
PLATELEGS(1110, 3, 1, 1, 1121, new short[] {1075, 1067, 1069, 1071, 1073, 1079}),<br>
/</em>*</li>
<li>Holds all information on full helms<br>
<em>/<br>
FULL_HELM(1113, 2, 1, 1, 1122, new short[] {1155, 1153, 1157, 1159, 1161, 1163}),<br>
/</em>*</li>
<li>Holds all information on arrow tips<br>
<em>/<br>
ARROW_TIPS(1130, 1, 5, 1, 1123, new short[] {39, 40, 41, 42, 43, 44}),<br>
/</em>*</li>
<li>Holds all information on scimitars<br>
<em>/<br>
SCIMITAR(1116, 2, 1, 2, 1119, new short[] {1321, 1323, 1325, 1329, 1331, 1333}),<br>
/</em>*</li>
<li>Holds all information on warhammers<br>
<em>/<br>
WARHAMMER(1118, 3, 1, 2, 1120, new short[] {1337, 1335, 1339, 1343, 1345, 1347}),<br>
/</em>*</li>
<li>Holds all information on plate skirts<br>
<em>/<br>
PLATE_SKIRT(1111, 3, 1, 2, 1121, new short[] {1087, 1081, 1083, 1085, 1091, 1093}),<br>
/</em>*</li>
<li>Holds all information on square shields<br>
<em>/<br>
SQUARE_SHIELD(1114, 2, 1, 2, 1122, new short[] {1173, 1175, 1177, 1181, 1183, 1185}),<br>
/</em>*</li>
<li>Holds all information on throwing knives<br>
<em>/<br>
THROWING_KIVES(1131, 1, 5, 2, 1123, new short[] {864, 863, 865, 866, 867, 868}),<br>
/</em>*</li>
<li>Holds all information on longsword<br>
<em>/<br>
LONGSWORD(1089, 2, 1, 3, 1119, new short[] {1291, 1293, 1295, 1299, 1301, 1303}),<br>
/</em>*</li>
<li>Holds all information on battleaxes<br>
<em>/<br>
BATTLEAXE(1095, 3, 1, 3, 1120, new short[] {1375, 1363, 1365, 1369, 1371, 1373}),<br>
/</em>*</li>
<li>Holds all information on platebodiess<br>
<em>/<br>
PLATEBODY(1112, 5, 1, 3, 1121, new short[] {1117, 1115, 1119, 1121, 1123, 1127}),<br>
/</em>*</li>
<li>Holds all information on kiteshields<br>
<em>/<br>
KITESHIELD(1115, 3, 1, 3, 1122, new short[] {1189, 1191, 1193, 1197, 1199, 1201}),<br>
/</em>*</li>
<li>Holds all information on two handed swords<br>
<em>/<br>
TWO_HANDEDSWORD(1090, 3, 1, 4, 1119, new short[] {1307, 1309, 1311, 1315, 1317, 1319}),<br>
/</em>*</li>
<li>Holds all information on claws<br>
<em>/<br>
CLAWS(8428, 2, 1, 4, 1120, new short[] {3095, 3096, 3097, 3099, 3100, 3101}),<br>
/</em>*</li>
<li>Holds all information on oil lantern frame<br>
<em>/<br>
OIL_LANTERN_FRAME(11459, 1, 1, 4, 1121, new short[] {4540, 4540, 4540, 4540, 4540, 4540}),<br>
/</em>*</li>
<li>Holds all information on nails<br>
*/<br>
NAILS(13357, 1, 15, 4, 1122, new short[] {4819, 4820, 1539, 4822, 4823, 4824});</li>
</ul>
<p>/**</p>
<ul>
<li>The lineId and the amount of bars needed</li>
<li>The interfaceId and the slot<br>
<em>/<br>
private int lineId, amount, quantity, interfaceId, slot;<br>
/</em>*</li>
<li>the itemId (e.x bronze, iron, steel etc.)<br>
*/<br>
private short itemId[];</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> lineId</li>
<li>
<a class="mention" href="/u/param">@param</a> amount</li>
<li>
<a class="mention" href="/u/param">@param</a> slot</li>
<li>
<a class="mention" href="/u/param">@param</a> interfaceId</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId<br>
*/<br>
SmithingData(int lineId, int amount, int quantity, int slot, int interfaceId, short itemId[]) {<br>
this.lineId = lineId;<br>
this.amount = amount;<br>
this.slot = slot;<br>
this.quantity = quantity;<br>
this.interfaceId = interfaceId;<br>
this.itemId = itemId;<br>
}</li>
</ul>
<p>private static Map&lt;Short, SmithingData&gt; smithingData = new HashMap&lt;Short, SmithingData&gt;();</p>
<p>/**</p>
<ul>
<li>Gets a SmithingData by a itemId</li>
<li>
<a class="mention" href="/u/param">@param</a> item</li>
<li>
<a class="mention" href="/u/return">@return</a> The smithingData, or <code>null</code> if the item is not smithingData.<br>
*/<br>
public static SmithingData forId(short item) {<br>
return smithingData.get(item);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Populates the smithingData map.<br>
*/<br>
static {<br>
for(SmithingData smithing : SmithingData.values()) {<br>
for(short i = 0; i &lt; smithing.itemId.length; i++) {<br>
smithingData.put(smithing.itemId[i], smithing);<br>
}<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> lineId<br>
*/<br>
public int getLineId() {<br>
return lineId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> amount<br>
*/<br>
public int getAmount() {<br>
return amount;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> quantity<br>
*/<br>
public int getQuantity() {<br>
return quantity;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> slot<br>
*/<br>
public int getSlot() {<br>
return slot;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> interfaceId<br>
*/<br>
public int getInterfaceId() {<br>
return interfaceId;<br>
}</li>
</ul>
</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>the barId<br>
*/<br>
private int barId;</li>
</ul>
<p>/**</p>
<ul>
<li>Handles everything to do with smithing interface</li>
<li>All the pictures, text<br>
*/<br>
public SmithingInterface sendSmithingInterface(Player player, Item item) {<br>
final int itemId = item.getId() &gt;= 2355 ? item.getId() - 4: item.getId();<br>
final int itemSlot = itemId - 2349 - ((itemId - 2349) / 2);<br>
for(SmithingData smithingData : SmithingData.values()) {<br>
player.getActionSender().sendUpdateItem(smithingData.getInterfaceId(), smithingData.getSlot(), new Item(smithingData.itemId[itemSlot], smithingData.getQuantity()));<br>
player.getActionSender().sendString(smithingData.getLineId(), (player.getInventory().contains(item, smithingData.getAmount()) ? “<span class="mention">@gre</span>@” : “<a class="mention" href="/u/red">@red</a>@”) + smithingData.getAmount()+" Bars");<br>
}<br>
player.getActionSender().sendInterface(994);<br>
this.barId = item.getId();<br>
return this;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> smithingInterface<br>
*/<br>
public static final SmithingInterface getSmithingInterface() {<br>
return smithingInterface;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> barId<br>
*/<br>
public int getBarId() {<br>
return barId;<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>And then make the class SmithingAction and put inside</p>
<p>[code=java]/**</p>
<ul>
<li>SmithingAction</li>
<li>
</li>
<li>January 21, 2014</li>
<li>
</li>
<li>Dan0194<br>
*/<br>
package org.hyperion.rs2.action.impl.smithing;</li>
</ul>
<p>import org.hyperion.rs2.action.impl.ProducingAction;<br>
import org.hyperion.rs2.action.impl.smithing.SmithingInterface.SmithingData;<br>
import org.hyperion.rs2.model.Animation;<br>
import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>
<p>All of the action in smithing<br>
*/<br>
public class SmithingAction extends ProducingAction {</p>
<p>/**</p>
<ul>
<li>the itemId of the item you want to make<br>
<em>/<br>
private int itemId;<br>
/</em>*</li>
<li>the slot of the item<br>
<em>/<br>
private int slot;<br>
/</em>*</li>
<li>the data that corresponds to the item<br>
<em>/<br>
private SmithingData smithingData;<br>
/</em>*</li>
<li>how much of the production to make<br>
*/<br>
private int productionNumber;</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> player</li>
<li>
<a class="mention" href="/u/param">@param</a> slot</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId</li>
<li>
<a class="mention" href="/u/param">@param</a> productionNumber<br>
*/<br>
public SmithingAction(Player player, final int slot, final int itemId, final int productionNumber) {<br>
super(player, slot, itemId);<br>
this.slot = slot;<br>
this.itemId = itemId;<br>
this.smithingData = SmithingData.forId((short) itemId);<br>
this.productionNumber = productionNumber;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionDelay()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public long getProductionDelay() {<br>
return 3;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionNumber()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getProductionNumber() {<br>
return getProductionTimes();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionMessage()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public String getProductionMessage() {<br>
return "You make a " + new Item(itemId).getDefinition().getName();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getAnimation()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return Animation.create(898);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getPrimaryItem()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getPrimaryItem() {<br>
return SmithingInterface.getSmithingInterface().getBarId();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProducedItem()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getProducedItem() {<br>
return itemId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getSkill()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getSkill() {<br>
return 12;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getLevelRequirement()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getLevelRequirement() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getExperience()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public double getExperience() {<br>
return 10;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getAmount()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getAmount() {<br>
return smithingData.getQuantity();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#init()</li>
<li>This method is called every single time a new item is made<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void init() {<br>
getPlayer().getActionSender().sendRemoveAllInterfaces();<br>
if(!getPlayer().getInventory().contains(2347)) {<br>
getPlayer().getActionSender().sendMessage(“You need a hammer to smith!”);<br>
stop();<br>
return;<br>
}<br>
if(!getPlayer().getInventory().contains(new Item(SmithingInterface.getSmithingInterface().getBarId()), getSmithingData().getAmount())) {<br>
getPlayer().getActionSender().sendMessage(“You don’t have enough bars to make this item.”);<br>
stop();<br>
return;<br>
}<br>
getPlayer().getInventory().remove(new Item(getPrimaryItem(), getSmithingData().getAmount()));<br>
getPlayer().playAnimation(getAnimation());<br>
giveReward();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> itemId<br>
*/<br>
public int getId() {<br>
return itemId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getSlot()</li>
<li>
<a class="mention" href="/u/return">@return</a> slot<br>
*/<br>
public int getSlot() {<br>
return slot;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> productionNumber<br>
*/<br>
public int getProductionTimes() {<br>
return productionNumber;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> smithingData<br>
*/<br>
public SmithingData getSmithingData() {<br>
return smithingData;<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>Now in your ItemOnObject packet add</p>
<pre><code class="lang-auto"></code></pre>
<p>Now in your InterfaceClickOption packet</p>
<p><span class="bbcode-b">First Option:</span></p>
<pre><code class="lang-auto"></code></pre>
<p><span class="bbcode-b">Second Option:</span></p>
<pre><code class="lang-auto"></code></pre>
<p><span class="bbcode-b">Third Option:</span></p>
<pre><code class="lang-auto"></code></pre>
<p>And if you don’t have the ProducingAction class (I adjusted it a bit but mainly made by Graham and Shawn)</p>
<p>[code=java]<br>
package org.hyperion.rs2.action.impl;</p>
<p>import org.hyperion.rs2.action.Action;<br>
import org.hyperion.rs2.model.Animation;<br>
import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>
<p> A producing action is an action where on item is transformed into
</p>
</li>
<li>another, typically this is in skills such as smithing and crafting.  <p></p>
</li>
<li>This class implements code related to all production-type skills, such as</li>
<li>dealing with the action itself, replacing the items and checking levels. </li>
<li>
<p> The individual crafting, smithing, and other skills implement
</p>
</li>
<li>functionality specific to them such as random events. </li>
<li>
</li>
<li>
<span class="mention">@author</span> Shawn</li>
<li>
<span class="mention">@author</span> Graham</li>
<li>
</li>
</ul>
<p>*/<br>
public abstract class ProducingAction extends Action {</p>
<pre><code>/**
 * The slot of the item.
 */
private int slot;

/**
 * The item.
 */
private int item;


/**
 * Gets the slot of the item.
 * 
 * @return The slot.
 */
public int getSlot() {
    return slot;
}


/**
 * Sets the slot of the item.
 * 
 * @param slot The slot.
 */
public void setSlot(int slot) {
    this.slot = slot;
}

/**
 * Gets the item.
 * 
 * @return The item.
 */
public int getItem() {
    return item;
}

/**
 * Sets the item.
 * 
 * @param item The item.
 */
public void setItem(int item) {
    this.item = item;
}

/**
 * Creates the producing action for the specified player.
 * 
 * @param player The player to create the action for.
 */
public ProducingAction(Player player, int slot, int item) {
    super(player, 0);
    this.setSlot(slot);
    this.setItem(item);
}

@Override
public QueuePolicy getQueuePolicy() {
    return QueuePolicy.NEVER;
}

@Override
public WalkablePolicy getWalkablePolicy() {
    return WalkablePolicy.WALKABLE;
}

/**
 * Gets the delay of this action.
 * 
 * @return The delay.
 */
public abstract long getProductionDelay();

/**
 * Gets the number of times this action is ran
 * 
 * @return the number of times the action is ran
 */
public abstract int getProductionNumber();

/**
 * Gets the production message.
 * 
 * @return The message.
 */
public abstract String getProductionMessage();

/**
 * Gets the animation of this action. 
 * 
 * @return The animation.
 */
public abstract Animation getAnimation();

/**
 * Gets the primary item.
 * 
 * @return The item.
 */
public abstract int getPrimaryItem();

/**
 * Gets the produced item.
 * 
 * @return The item.
 */
public abstract int getProducedItem();

/**
 * Gets the skill this action is corresponding with.
 * 
 * @return The skill.
 */
public abstract int getSkill();

/**
 * Gets the level requirement of this action.
 * 
 * @return The level requirement.
 */
public abstract int getLevelRequirement();

/**
 * Gets the experience to add.
 * 
 * @return The experience.
 */
public abstract double getExperience();

/**
 * Initializes this action.
 */
public abstract void init();


/**
 * How many of the item to give
 */
public abstract int getAmount();

/**
 * How many times the production needs to be ran
 */
private int productionNumber;

protected void giveReward() {
    getPlayer().getInventory().add(new Item(getProducedItem(), getAmount()));
    getPlayer().getSkills().addExperience(getSkill(), getExperience());
    getPlayer().getActionSender().sendMessage(getProductionMessage());
}


@Override
public void execute() {
	int timesRan = getProductionNumber() + productionNumber;
	if(timesRan != 0) {
	init();
	productionNumber--;
	this.setDelay(getProductionDelay() * 1000);
	} else {
		stop();
	}
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891/1</link>
        <pubDate>Tue, 21 Jan 2014 17:33:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538891-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-smithing-hyperion/538891.rss">[Hyperion] Smithing [Hyperion]</source>
      </item>
  </channel>
</rss>
