<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Custom minigame - Onslaught</title>
    <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084</link>
    <description>You&#39;ll have to configure this yourself and change things around to your likings. I will not help you with errors because this is simply a base and you have to work from it, not straight up leech it. If you can get this working you deserve it!

This is basically zombies from cod. Buncha fucking waves of bitches trying to eat your brains.

[b]NOTE: YOU&#39;RE GOING TO HAVE TO CHANGE AROUND THE IMPORTS AND THE PACKAGE AT THE TOP OF THIS CLASS! ALSO, THIS WAS CREATED ON A HIGHLY ADVANCED PROJECT INSANITY. ALOT OF THINGS WILL BE DIFFERENT.[/B]

[code]package server.rs2.content.minigames;

import java.util.Iterator;
import java.util.concurrent.CopyOnWriteArrayList;

import server.Server;
import server.rs2.content.Location;
import server.rs2.npcs.NPCHandler;
import server.rs2.players.Client;
import server.util.Misc;

public class Onslaught {
	
	/**
	 * Holds all of the player&#39;s in-game names.
	 */
	public static CopyOnWriteArrayList&lt;Client&gt; players = new CopyOnWriteArrayList&lt;Client&gt;();
	
	public static CopyOnWriteArrayList&lt;Integer&gt; npcs = new CopyOnWriteArrayList&lt;Integer&gt;();
		
	/**
	 * The wave the game is on.
	 */
	public static int WAVE = 1;
	
	/**
	 * How many zombies are left.
	 */
	public static int ZOMBIES = 0;
	
	/**
	 * The cycle of the game takes this long to end.
	 */
	public static int CYCLE = 500; //5 mins
	
	/**
	 * For waiting room time.
	 */
	public static int TIME = 60; //1 min
	
	/**
	 * Is the game started or not.
	 */
	public static boolean STARTED;
	
	public static void killAllZombies() {
		for(int i : npcs) {
			if(i != -1) {
				NPCHandler.npcs[i].HP = 0;
			}
		}
	}
	
	/**
	 * Will transfer the players to the zombie room and startup the game.
	 */
	public static void transferToGame() {
		spawnZombies(WAVE);
	}
	
	public static void moveFromGame(Client p) {
		players.remove(p);
		p.setTeleportTarget(Location.create(2834, 3336, 0));
	}
	
	public static void spawnZombies(int wave) {
		switch(wave) {
			case 1:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				break;
			case 2:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				break;
			case 3:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				break;
			case 4:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				break;
			case 5:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				break;
			case 6:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				createNPC(76, 2799, 10068);
				createNPC(76, 2801, 10064);
				createNPC(76, 2798, 10060);
				createNPC(75, 2789, 10058);
				createNPC(76, 2774, 10055);
				break;
			case 7:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				createNPC(76, 2799, 10068);
				createNPC(76, 2801, 10064);
				createNPC(76, 2798, 10060);
				createNPC(75, 2789, 10058);
				createNPC(76, 2774, 10055);
				break;
			case 8:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				createNPC(76, 2799, 10068);
				createNPC(76, 2801, 10064);
				createNPC(76, 2798, 10060);
				createNPC(75, 2789, 10058);
				createNPC(76, 2774, 10055);
				createNPC(74, 2772, 10076);
				createNPC(75, 2783, 10103);
				createNPC(76, 2780, 10103);
				break;
			case 9:
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				createNPC(76, 2799, 10068);
				createNPC(76, 2801, 10064);
				createNPC(76, 2798, 10060);
				createNPC(75, 2789, 10058);
				createNPC(76, 2774, 10055);
				createNPC(74, 2772, 10076);
				createNPC(75, 2783, 10103);
				createNPC(76, 2780, 10103);
				createNPC(2058, 2773, 10088);
				createNPC(2058, 2775, 10084);
				createNPC(2058, 2779, 10074);
				createNPC(2058, 2793, 10069);
				createNPC(2058, 2788, 10084);
				break;
			case 10: //Boss
				createNPC(73, 2779, 10092);
				createNPC(73, 2773, 10094);
				createNPC(73, 2771, 10090);
				createNPC(73, 2776, 10088);
				createNPC(73, 2783, 10087);
				createNPC(73, 2786, 10075);
				createNPC(73, 2788, 10069);
				createNPC(73, 2785, 10061);
				createNPC(73, 2780, 10064);
				createNPC(73, 2777, 10071);
				createNPC(75, 2769, 10084);
				createNPC(75, 2771, 10078);
				createNPC(74, 2775, 10077);
				createNPC(74, 2780, 10074);
				createNPC(74, 2783, 10068);
				createNPC(75, 2789, 10082);
				createNPC(75, 2787, 10086);
				createNPC(75, 2782, 10070);
				createNPC(75, 2785, 10066);
				createNPC(76, 2790, 10063);
				createNPC(75, 2789, 10080);
				createNPC(75, 2774, 10079);
				createNPC(76, 2770, 10098);
				createNPC(76, 2770, 10083);
				createNPC(76, 2799, 10068);
				createNPC(76, 2801, 10064);
				createNPC(76, 2798, 10060);
				createNPC(75, 2789, 10058);
				createNPC(76, 2774, 10055);
				createNPC(74, 2772, 10076);
				createNPC(75, 2783, 10103);
				createNPC(76, 2780, 10103);
				createNPC(2058, 2773, 10088);
				createNPC(2058, 2775, 10084);
				createNPC(2058, 2779, 10074);
				createNPC(2058, 2793, 10069);
				createNPC(2058, 2788, 10084);
				createNPC(2843, 2777, 10078);
				break;
			default:
				System.out.println(&quot;Unhandled wave: &quot; + wave);
				break;
		}
	}
	
	/**
	 * Adds a player to the game.
	 * @param p The player to add.
	 */
	public static void addToGame(Client p) {
		players.add(p);
		if(Misc.random(1) == 1) {
			p.setTeleportTarget(Location.create(2807, 10105, 0));
		} else {
			p.setTeleportTarget(Location.create(2759, 10064, 0));
		}
		p.teleBlockDelay = 999999;
	}
	
	public static void death(Client p) {
		if(players.contains(p)) {
			p.sendMessage(&quot;Oh dear, you are dead!&quot;);
			p.setTeleportTarget(Location.create(2834, 3336, 0));
			players.remove(p);
			p.teleBlockDelay = 0;
			p.zombieKills = 0;
		}
	}
	
	public static void interfaceSend(Client c) {
		if(Onslaught.players.size() &gt;= 3) {
			if(Onslaught.STARTED) {
				c.getPA().sendFrame126(&quot;Ending game in: &quot;+Integer.toString(Onslaught.CYCLE), 18051);	
			} else {
				c.getPA().sendFrame126(&quot;Starting game in: &quot;+Integer.toString(Onslaught.CYCLE), 18051);	
			}
		} else {
			c.getPA().sendFrame126(&quot;Need 3+ Players&quot;, 18051);	
		}		
		c.getPA().sendFrame126(&quot;Total players: @gre@&quot; + Integer.toString(Onslaught.players.size()), 18052);
		c.getPA().sendFrame126(&quot;Wave: @gre@&quot; + Integer.toString(Onslaught.WAVE), 18053);
		c.getPA().sendFrame126(Onslaught.STARTED ? &quot;Wave: @gre@&quot; + Integer.toString(Onslaught.WAVE)+&quot;&quot; : &quot;Points: @gre@&quot; + Integer.toString(c.pcPoints), 18054);
	}
	
	/**
	 * Creates a new NPC for the minigame.
	 * @param id NPC type.
	 * @param x The X tile coordinate.
	 * @param y The Y tile coordinate.
	 */
    public static void createNPC(int id, int x, int y) {
        int slot = Server.npcHandler.spawnNpc(id, x, y, 0, 2, WAVE*15, WAVE*2, WAVE*3, WAVE*5).slot;
        npcs.add(slot);
        ZOMBIES++;
    }
	
	public static void endGame(boolean won) {
		Iterator&lt;Client&gt; it = players.iterator();
		while(it.hasNext()) {
			Client c = it.next();
			if (c != null) {
				c.zombieKills = 0;
				c.teleBlockDelay = 0;
				c.setTeleportTarget(Location.create(2834, 3336, 0));
				if(won) {
					c.pcPoints += WAVE;
					c.getDH().sendStartInfo(&quot;You defeated the zombies and you won!&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Congratulations!&quot;);
				} else {
					c.getDH().sendStartInfo(&quot;The zombies took over and you lost!&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Defeat...&quot;);
				}				
			}
		}
		players.clear();
		WAVE = 1;
		ZOMBIES = 0;
		CYCLE = 500;
		TIME = 60;
		STARTED = false;
		killAllZombies();
	}
	
	/**
	 * Ticks down for timing tasks.
	 */
	public static void tick() {
		if(!STARTED) {
			TIME--;
			if(TIME &lt; 1) {
				transferToGame();
				TIME = 500;
				CYCLE = 500;
				STARTED = true;
			}
		}
		if(STARTED) {
			CYCLE--;
			if(WAVE &gt; 10) {
				CYCLE = 500;
				TIME = 60;
				STARTED = false;
				endGame(true);
			}
			if(players.size() &lt; 3) {
				CYCLE = 500;
				TIME = 60;
				STARTED = false;
				endGame(false);
			}
			if(ZOMBIES &lt; 1) {
				CYCLE += (WAVE * 50);
				Iterator&lt;Client&gt; it = players.iterator();
				while(it.hasNext()) {
					Client c = it.next();
					if (c != null) {
						if(c.zombieKills &gt; 0) {
							c.pcPoints += (WAVE);
						} else {
							c.sendMessage(&quot;You receive no points for inactivity!&quot;);
						}					
					}
				}
				WAVE++;
				transferToGame();
			}
			if(CYCLE &lt; 1) {
				CYCLE = 500;
				TIME = 60;
				STARTED = false;
				endGame(false);
			}
		}
	}
}
[/code]

LEECHAS GON LEECH YO.</description>
    
    <lastBuildDate>Tue, 07 Jun 2011 03:50:31 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="398084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/zyle1992/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> zyle1992:</div>
<blockquote>
<p>This is not a tutorial.</p>
</blockquote>
</aside>
<p>This, I guess you can post it in the snippets topic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/11</link>
        <pubDate>Tue, 07 Jun 2011 03:50:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-11</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>This is not a tutorial.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/10</link>
        <pubDate>Tue, 07 Jun 2011 02:25:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-10</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="7" data-topic="398084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>CopyOnWrite array lists are very resource costly, why are you using them?</p>
</blockquote>
</aside>
<p>This was just an experiment/for release, I wasn’t aiming for the most efficient and clean code.</p>
<aside class="quote" data-post="8" data-topic="398084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/uncalled/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Uncalled:</div>
<blockquote>
<p>Nice job, prick munch. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
</blockquote>
</aside>
<p>y u mad tho?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/9</link>
        <pubDate>Mon, 06 Jun 2011 23:55:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-9</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>Nice job, prick munch. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/8</link>
        <pubDate>Mon, 06 Jun 2011 21:51:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-8</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>CopyOnWrite array lists are very resource costly, why are you using them?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/7</link>
        <pubDate>Mon, 06 Jun 2011 18:13:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-7</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@runewings317 runewings317]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/runewings317">@runewings317</a> wrote:</p>
          <blockquote>
              <p>[quote=“James-RevolutionX, post:5, topic:398084”]Snip buddy :P.[/quote]He has it explained in the code. Anyway, very good job <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/6</link>
        <pubDate>Mon, 06 Jun 2011 18:11:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@James-RevolutionX James-RevolutionX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/james-revolutionx">@James-RevolutionX</a> wrote:</p>
          <blockquote>
              <p>Snip buddy :P.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/5</link>
        <pubDate>Mon, 06 Jun 2011 17:29:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@pot_up_pls pot up pls]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pot_up_pls">@pot_up_pls</a> wrote:</p>
          <blockquote>
              <p>[quote=“asshole_rule, post:3, topic:398084”][quote author=pot up pls link=topic=495215.msg3620552#msg3620552 date=1307377659]</p>
<aside class="quote">
<blockquote>
<p>You’ll have to configure this yourself and change things around to your likings. I will not help you with errors because this is simply a base and you have to work from it, not straight up leech it. If you can get this working you deserve it!</p>
<p>This is basically zombies from cod. Buncha fucking waves of bitches trying to eat your brains.</p>
<p><span class="bbcode-b">NOTE: YOU’RE GOING TO HAVE TO CHANGE AROUND THE IMPORTS AND THE PACKAGE AT THE TOP OF THIS CLASS! ALSO, THIS WAS CREATED ON A HIGHLY ADVANCED PROJECT INSANITY. ALOT OF THINGS WILL BE DIFFERENT.</span></p>
<p>[code]package server.rs2.content.minigames;</p>
<p>import java.util.Iterator;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>import server.Server;<br>
import server.rs2.content.Location;<br>
import server.rs2.npcs.NPCHandler;<br>
import server.rs2.players.Client;<br>
import server.util.Misc;</p>
<p>public class Onslaught {</p>
<pre><code>/**
 * Holds all of the player's in-game names.
 */
public static CopyOnWriteArrayList&lt;Client&gt; players = new CopyOnWriteArrayList&lt;Client&gt;();

public static CopyOnWriteArrayList&lt;Integer&gt; npcs = new CopyOnWriteArrayList&lt;Integer&gt;();
	
/**
 * The wave the game is on.
 */
public static int WAVE = 1;

/**
 * How many zombies are left.
 */
public static int ZOMBIES = 0;

/**
 * The cycle of the game takes this long to end.
 */
public static int CYCLE = 500; //5 mins

/**
 * For waiting room time.
 */
public static int TIME = 60; //1 min

/**
 * Is the game started or not.
 */
public static boolean STARTED;

public static void killAllZombies() {
	for(int i : npcs) {
		if(i != -1) {
			NPCHandler.npcs[i].HP = 0;
		}
	}
}

/**
 * Will transfer the players to the zombie room and startup the game.
 */
public static void transferToGame() {
	spawnZombies(WAVE);
}

public static void moveFromGame(Client p) {
	players.remove(p);
	p.setTeleportTarget(Location.create(2834, 3336, 0));
}

public static void spawnZombies(int wave) {
	switch(wave) {
		case 1:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			break;
		case 2:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			break;
		case 3:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			break;
		case 4:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 5:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 6:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 7:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 8:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			break;
		case 9:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			break;
		case 10: //Boss
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			createNPC(2843, 2777, 10078);
			break;
		default:
			System.out.println("Unhandled wave: " + wave);
			break;
	}
}

/**
 * Adds a player to the game.
 * @param p The player to add.
 */
public static void addToGame(Client p) {
	players.add(p);
	if(Misc.random(1) == 1) {
		p.setTeleportTarget(Location.create(2807, 10105, 0));
	} else {
		p.setTeleportTarget(Location.create(2759, 10064, 0));
	}
	p.teleBlockDelay = 999999;
}

public static void death(Client p) {
	if(players.contains(p)) {
		p.sendMessage("Oh dear, you are dead!");
		p.setTeleportTarget(Location.create(2834, 3336, 0));
		players.remove(p);
		p.teleBlockDelay = 0;
		p.zombieKills = 0;
	}
}

public static void interfaceSend(Client c) {
	if(Onslaught.players.size() &gt;= 3) {
		if(Onslaught.STARTED) {
			c.getPA().sendFrame126("Ending game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		} else {
			c.getPA().sendFrame126("Starting game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		}
	} else {
		c.getPA().sendFrame126("Need 3+ Players", 18051);	
	}		
	c.getPA().sendFrame126("Total players: @gre@" + Integer.toString(Onslaught.players.size()), 18052);
	c.getPA().sendFrame126("Wave: @gre@" + Integer.toString(Onslaught.WAVE), 18053);
	c.getPA().sendFrame126(Onslaught.STARTED ? "Wave: @gre@" + Integer.toString(Onslaught.WAVE)+"" : "Points: @gre@" + Integer.toString(c.pcPoints), 18054);
}

/**
 * Creates a new NPC for the minigame.
 * @param id NPC type.
 * @param x The X tile coordinate.
 * @param y The Y tile coordinate.
 */
public static void createNPC(int id, int x, int y) {
    int slot = Server.npcHandler.spawnNpc(id, x, y, 0, 2, WAVE*15, WAVE*2, WAVE*3, WAVE*5).slot;
    npcs.add(slot);
    ZOMBIES++;
}

public static void endGame(boolean won) {
	Iterator&lt;Client&gt; it = players.iterator();
	while(it.hasNext()) {
		Client c = it.next();
		if (c != null) {
			c.zombieKills = 0;
			c.teleBlockDelay = 0;
			c.setTeleportTarget(Location.create(2834, 3336, 0));
			if(won) {
				c.pcPoints += WAVE;
				c.getDH().sendStartInfo("You defeated the zombies and you won!", "", "", "", "Congratulations!");
			} else {
				c.getDH().sendStartInfo("The zombies took over and you lost!", "", "", "", "Defeat...");
			}				
		}
	}
	players.clear();
	WAVE = 1;
	ZOMBIES = 0;
	CYCLE = 500;
	TIME = 60;
	STARTED = false;
	killAllZombies();
}

/**
 * Ticks down for timing tasks.
 */
public static void tick() {
	if(!STARTED) {
		TIME--;
		if(TIME &lt; 1) {
			transferToGame();
			TIME = 500;
			CYCLE = 500;
			STARTED = true;
		}
	}
	if(STARTED) {
		CYCLE--;
		if(WAVE &gt; 10) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(true);
		}
		if(players.size() &lt; 3) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
		if(ZOMBIES &lt; 1) {
			CYCLE += (WAVE * 50);
			Iterator&lt;Client&gt; it = players.iterator();
			while(it.hasNext()) {
				Client c = it.next();
				if (c != null) {
					if(c.zombieKills &gt; 0) {
						c.pcPoints += (WAVE);
					} else {
						c.sendMessage("You receive no points for inactivity!");
					}					
				}
			}
			WAVE++;
			transferToGame();
		}
		if(CYCLE &lt; 1) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>LEECHAS GON LEECH YO.</p>
</blockquote>
</aside>
<p>Very good job man.<br>
[/quote]</p>
<p>Thanks. I bet when all the kids click on this thread and see “You’ll have to configure it yourself” they click back, lol.[/quote]<br>
Yeah haha.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/4</link>
        <pubDate>Mon, 06 Jun 2011 17:08:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>[quote=“pot up pls, post:2, topic:398084”][quote author=asshole_rule link=topic=495215.msg3620544#msg3620544 date=1307377201]<br>
You’ll have to configure this yourself and change things around to your likings. I will not help you with errors because this is simply a base and you have to work from it, not straight up leech it. If you can get this working you deserve it!</p>
<p>This is basically zombies from cod. Buncha fucking waves of bitches trying to eat your brains.</p>
<p><span class="bbcode-b">NOTE: YOU’RE GOING TO HAVE TO CHANGE AROUND THE IMPORTS AND THE PACKAGE AT THE TOP OF THIS CLASS! ALSO, THIS WAS CREATED ON A HIGHLY ADVANCED PROJECT INSANITY. ALOT OF THINGS WILL BE DIFFERENT.</span></p>
<p>[code]package server.rs2.content.minigames;</p>
<p>import java.util.Iterator;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>import server.Server;<br>
import server.rs2.content.Location;<br>
import server.rs2.npcs.NPCHandler;<br>
import server.rs2.players.Client;<br>
import server.util.Misc;</p>
<p>public class Onslaught {</p>
<pre><code>/**
 * Holds all of the player's in-game names.
 */
public static CopyOnWriteArrayList&lt;Client&gt; players = new CopyOnWriteArrayList&lt;Client&gt;();

public static CopyOnWriteArrayList&lt;Integer&gt; npcs = new CopyOnWriteArrayList&lt;Integer&gt;();
	
/**
 * The wave the game is on.
 */
public static int WAVE = 1;

/**
 * How many zombies are left.
 */
public static int ZOMBIES = 0;

/**
 * The cycle of the game takes this long to end.
 */
public static int CYCLE = 500; //5 mins

/**
 * For waiting room time.
 */
public static int TIME = 60; //1 min

/**
 * Is the game started or not.
 */
public static boolean STARTED;

public static void killAllZombies() {
	for(int i : npcs) {
		if(i != -1) {
			NPCHandler.npcs[i].HP = 0;
		}
	}
}

/**
 * Will transfer the players to the zombie room and startup the game.
 */
public static void transferToGame() {
	spawnZombies(WAVE);
}

public static void moveFromGame(Client p) {
	players.remove(p);
	p.setTeleportTarget(Location.create(2834, 3336, 0));
}

public static void spawnZombies(int wave) {
	switch(wave) {
		case 1:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			break;
		case 2:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			break;
		case 3:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			break;
		case 4:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 5:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 6:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 7:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 8:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			break;
		case 9:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			break;
		case 10: //Boss
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			createNPC(2843, 2777, 10078);
			break;
		default:
			System.out.println("Unhandled wave: " + wave);
			break;
	}
}

/**
 * Adds a player to the game.
 * @param p The player to add.
 */
public static void addToGame(Client p) {
	players.add(p);
	if(Misc.random(1) == 1) {
		p.setTeleportTarget(Location.create(2807, 10105, 0));
	} else {
		p.setTeleportTarget(Location.create(2759, 10064, 0));
	}
	p.teleBlockDelay = 999999;
}

public static void death(Client p) {
	if(players.contains(p)) {
		p.sendMessage("Oh dear, you are dead!");
		p.setTeleportTarget(Location.create(2834, 3336, 0));
		players.remove(p);
		p.teleBlockDelay = 0;
		p.zombieKills = 0;
	}
}

public static void interfaceSend(Client c) {
	if(Onslaught.players.size() &gt;= 3) {
		if(Onslaught.STARTED) {
			c.getPA().sendFrame126("Ending game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		} else {
			c.getPA().sendFrame126("Starting game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		}
	} else {
		c.getPA().sendFrame126("Need 3+ Players", 18051);	
	}		
	c.getPA().sendFrame126("Total players: @gre@" + Integer.toString(Onslaught.players.size()), 18052);
	c.getPA().sendFrame126("Wave: @gre@" + Integer.toString(Onslaught.WAVE), 18053);
	c.getPA().sendFrame126(Onslaught.STARTED ? "Wave: @gre@" + Integer.toString(Onslaught.WAVE)+"" : "Points: @gre@" + Integer.toString(c.pcPoints), 18054);
}

/**
 * Creates a new NPC for the minigame.
 * @param id NPC type.
 * @param x The X tile coordinate.
 * @param y The Y tile coordinate.
 */
public static void createNPC(int id, int x, int y) {
    int slot = Server.npcHandler.spawnNpc(id, x, y, 0, 2, WAVE*15, WAVE*2, WAVE*3, WAVE*5).slot;
    npcs.add(slot);
    ZOMBIES++;
}

public static void endGame(boolean won) {
	Iterator&lt;Client&gt; it = players.iterator();
	while(it.hasNext()) {
		Client c = it.next();
		if (c != null) {
			c.zombieKills = 0;
			c.teleBlockDelay = 0;
			c.setTeleportTarget(Location.create(2834, 3336, 0));
			if(won) {
				c.pcPoints += WAVE;
				c.getDH().sendStartInfo("You defeated the zombies and you won!", "", "", "", "Congratulations!");
			} else {
				c.getDH().sendStartInfo("The zombies took over and you lost!", "", "", "", "Defeat...");
			}				
		}
	}
	players.clear();
	WAVE = 1;
	ZOMBIES = 0;
	CYCLE = 500;
	TIME = 60;
	STARTED = false;
	killAllZombies();
}

/**
 * Ticks down for timing tasks.
 */
public static void tick() {
	if(!STARTED) {
		TIME--;
		if(TIME &lt; 1) {
			transferToGame();
			TIME = 500;
			CYCLE = 500;
			STARTED = true;
		}
	}
	if(STARTED) {
		CYCLE--;
		if(WAVE &gt; 10) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(true);
		}
		if(players.size() &lt; 3) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
		if(ZOMBIES &lt; 1) {
			CYCLE += (WAVE * 50);
			Iterator&lt;Client&gt; it = players.iterator();
			while(it.hasNext()) {
				Client c = it.next();
				if (c != null) {
					if(c.zombieKills &gt; 0) {
						c.pcPoints += (WAVE);
					} else {
						c.sendMessage("You receive no points for inactivity!");
					}					
				}
			}
			WAVE++;
			transferToGame();
		}
		if(CYCLE &lt; 1) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>LEECHAS GON LEECH YO.<br>
[/quote]</p>
<p>Very good job man.[/quote]</p>
<p>Thanks. I bet when all the kids click on this thread and see “You’ll have to configure it yourself” they click back, lol.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/3</link>
        <pubDate>Mon, 06 Jun 2011 17:04:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@pot_up_pls pot up pls]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pot_up_pls">@pot_up_pls</a> wrote:</p>
          <blockquote>
              <p>[quote=“asshole_rule, post:1, topic:398084”]You’ll have to configure this yourself and change things around to your likings. I will not help you with errors because this is simply a base and you have to work from it, not straight up leech it. If you can get this working you deserve it!</p>
<p>This is basically zombies from cod. Buncha fucking waves of bitches trying to eat your brains.</p>
<p><span class="bbcode-b">NOTE: YOU’RE GOING TO HAVE TO CHANGE AROUND THE IMPORTS AND THE PACKAGE AT THE TOP OF THIS CLASS! ALSO, THIS WAS CREATED ON A HIGHLY ADVANCED PROJECT INSANITY. ALOT OF THINGS WILL BE DIFFERENT.</span></p>
<p>[code]package server.rs2.content.minigames;</p>
<p>import java.util.Iterator;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>import server.Server;<br>
import server.rs2.content.Location;<br>
import server.rs2.npcs.NPCHandler;<br>
import server.rs2.players.Client;<br>
import server.util.Misc;</p>
<p>public class Onslaught {</p>
<pre><code>/**
 * Holds all of the player's in-game names.
 */
public static CopyOnWriteArrayList&lt;Client&gt; players = new CopyOnWriteArrayList&lt;Client&gt;();

public static CopyOnWriteArrayList&lt;Integer&gt; npcs = new CopyOnWriteArrayList&lt;Integer&gt;();
	
/**
 * The wave the game is on.
 */
public static int WAVE = 1;

/**
 * How many zombies are left.
 */
public static int ZOMBIES = 0;

/**
 * The cycle of the game takes this long to end.
 */
public static int CYCLE = 500; //5 mins

/**
 * For waiting room time.
 */
public static int TIME = 60; //1 min

/**
 * Is the game started or not.
 */
public static boolean STARTED;

public static void killAllZombies() {
	for(int i : npcs) {
		if(i != -1) {
			NPCHandler.npcs[i].HP = 0;
		}
	}
}

/**
 * Will transfer the players to the zombie room and startup the game.
 */
public static void transferToGame() {
	spawnZombies(WAVE);
}

public static void moveFromGame(Client p) {
	players.remove(p);
	p.setTeleportTarget(Location.create(2834, 3336, 0));
}

public static void spawnZombies(int wave) {
	switch(wave) {
		case 1:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			break;
		case 2:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			break;
		case 3:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			break;
		case 4:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 5:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 6:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 7:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 8:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			break;
		case 9:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			break;
		case 10: //Boss
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			createNPC(2843, 2777, 10078);
			break;
		default:
			System.out.println("Unhandled wave: " + wave);
			break;
	}
}

/**
 * Adds a player to the game.
 * @param p The player to add.
 */
public static void addToGame(Client p) {
	players.add(p);
	if(Misc.random(1) == 1) {
		p.setTeleportTarget(Location.create(2807, 10105, 0));
	} else {
		p.setTeleportTarget(Location.create(2759, 10064, 0));
	}
	p.teleBlockDelay = 999999;
}

public static void death(Client p) {
	if(players.contains(p)) {
		p.sendMessage("Oh dear, you are dead!");
		p.setTeleportTarget(Location.create(2834, 3336, 0));
		players.remove(p);
		p.teleBlockDelay = 0;
		p.zombieKills = 0;
	}
}

public static void interfaceSend(Client c) {
	if(Onslaught.players.size() &gt;= 3) {
		if(Onslaught.STARTED) {
			c.getPA().sendFrame126("Ending game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		} else {
			c.getPA().sendFrame126("Starting game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		}
	} else {
		c.getPA().sendFrame126("Need 3+ Players", 18051);	
	}		
	c.getPA().sendFrame126("Total players: @gre@" + Integer.toString(Onslaught.players.size()), 18052);
	c.getPA().sendFrame126("Wave: @gre@" + Integer.toString(Onslaught.WAVE), 18053);
	c.getPA().sendFrame126(Onslaught.STARTED ? "Wave: @gre@" + Integer.toString(Onslaught.WAVE)+"" : "Points: @gre@" + Integer.toString(c.pcPoints), 18054);
}

/**
 * Creates a new NPC for the minigame.
 * @param id NPC type.
 * @param x The X tile coordinate.
 * @param y The Y tile coordinate.
 */
public static void createNPC(int id, int x, int y) {
    int slot = Server.npcHandler.spawnNpc(id, x, y, 0, 2, WAVE*15, WAVE*2, WAVE*3, WAVE*5).slot;
    npcs.add(slot);
    ZOMBIES++;
}

public static void endGame(boolean won) {
	Iterator&lt;Client&gt; it = players.iterator();
	while(it.hasNext()) {
		Client c = it.next();
		if (c != null) {
			c.zombieKills = 0;
			c.teleBlockDelay = 0;
			c.setTeleportTarget(Location.create(2834, 3336, 0));
			if(won) {
				c.pcPoints += WAVE;
				c.getDH().sendStartInfo("You defeated the zombies and you won!", "", "", "", "Congratulations!");
			} else {
				c.getDH().sendStartInfo("The zombies took over and you lost!", "", "", "", "Defeat...");
			}				
		}
	}
	players.clear();
	WAVE = 1;
	ZOMBIES = 0;
	CYCLE = 500;
	TIME = 60;
	STARTED = false;
	killAllZombies();
}

/**
 * Ticks down for timing tasks.
 */
public static void tick() {
	if(!STARTED) {
		TIME--;
		if(TIME &lt; 1) {
			transferToGame();
			TIME = 500;
			CYCLE = 500;
			STARTED = true;
		}
	}
	if(STARTED) {
		CYCLE--;
		if(WAVE &gt; 10) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(true);
		}
		if(players.size() &lt; 3) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
		if(ZOMBIES &lt; 1) {
			CYCLE += (WAVE * 50);
			Iterator&lt;Client&gt; it = players.iterator();
			while(it.hasNext()) {
				Client c = it.next();
				if (c != null) {
					if(c.zombieKills &gt; 0) {
						c.pcPoints += (WAVE);
					} else {
						c.sendMessage("You receive no points for inactivity!");
					}					
				}
			}
			WAVE++;
			transferToGame();
		}
		if(CYCLE &lt; 1) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>LEECHAS GON LEECH YO.[/quote]</p>
<p>Very good job man.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/2</link>
        <pubDate>Mon, 06 Jun 2011 16:27:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
      <item>
        <title>[PI] Custom minigame - Onslaught</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>You’ll have to configure this yourself and change things around to your likings. I will not help you with errors because this is simply a base and you have to work from it, not straight up leech it. If you can get this working you deserve it!</p>
<p>This is basically zombies from cod. Buncha fucking waves of bitches trying to eat your brains.</p>
<p><span class="bbcode-b">NOTE: YOU’RE GOING TO HAVE TO CHANGE AROUND THE IMPORTS AND THE PACKAGE AT THE TOP OF THIS CLASS! ALSO, THIS WAS CREATED ON A HIGHLY ADVANCED PROJECT INSANITY. ALOT OF THINGS WILL BE DIFFERENT.</span></p>
<p>[code]package server.rs2.content.minigames;</p>
<p>import java.util.Iterator;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>import server.Server;<br>
import server.rs2.content.Location;<br>
import server.rs2.npcs.NPCHandler;<br>
import server.rs2.players.Client;<br>
import server.util.Misc;</p>
<p>public class Onslaught {</p>
<pre><code>/**
 * Holds all of the player's in-game names.
 */
public static CopyOnWriteArrayList&lt;Client&gt; players = new CopyOnWriteArrayList&lt;Client&gt;();

public static CopyOnWriteArrayList&lt;Integer&gt; npcs = new CopyOnWriteArrayList&lt;Integer&gt;();
	
/**
 * The wave the game is on.
 */
public static int WAVE = 1;

/**
 * How many zombies are left.
 */
public static int ZOMBIES = 0;

/**
 * The cycle of the game takes this long to end.
 */
public static int CYCLE = 500; //5 mins

/**
 * For waiting room time.
 */
public static int TIME = 60; //1 min

/**
 * Is the game started or not.
 */
public static boolean STARTED;

public static void killAllZombies() {
	for(int i : npcs) {
		if(i != -1) {
			NPCHandler.npcs[i].HP = 0;
		}
	}
}

/**
 * Will transfer the players to the zombie room and startup the game.
 */
public static void transferToGame() {
	spawnZombies(WAVE);
}

public static void moveFromGame(Client p) {
	players.remove(p);
	p.setTeleportTarget(Location.create(2834, 3336, 0));
}

public static void spawnZombies(int wave) {
	switch(wave) {
		case 1:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			break;
		case 2:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			break;
		case 3:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			break;
		case 4:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 5:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			break;
		case 6:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 7:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			break;
		case 8:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			break;
		case 9:
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			break;
		case 10: //Boss
			createNPC(73, 2779, 10092);
			createNPC(73, 2773, 10094);
			createNPC(73, 2771, 10090);
			createNPC(73, 2776, 10088);
			createNPC(73, 2783, 10087);
			createNPC(73, 2786, 10075);
			createNPC(73, 2788, 10069);
			createNPC(73, 2785, 10061);
			createNPC(73, 2780, 10064);
			createNPC(73, 2777, 10071);
			createNPC(75, 2769, 10084);
			createNPC(75, 2771, 10078);
			createNPC(74, 2775, 10077);
			createNPC(74, 2780, 10074);
			createNPC(74, 2783, 10068);
			createNPC(75, 2789, 10082);
			createNPC(75, 2787, 10086);
			createNPC(75, 2782, 10070);
			createNPC(75, 2785, 10066);
			createNPC(76, 2790, 10063);
			createNPC(75, 2789, 10080);
			createNPC(75, 2774, 10079);
			createNPC(76, 2770, 10098);
			createNPC(76, 2770, 10083);
			createNPC(76, 2799, 10068);
			createNPC(76, 2801, 10064);
			createNPC(76, 2798, 10060);
			createNPC(75, 2789, 10058);
			createNPC(76, 2774, 10055);
			createNPC(74, 2772, 10076);
			createNPC(75, 2783, 10103);
			createNPC(76, 2780, 10103);
			createNPC(2058, 2773, 10088);
			createNPC(2058, 2775, 10084);
			createNPC(2058, 2779, 10074);
			createNPC(2058, 2793, 10069);
			createNPC(2058, 2788, 10084);
			createNPC(2843, 2777, 10078);
			break;
		default:
			System.out.println("Unhandled wave: " + wave);
			break;
	}
}

/**
 * Adds a player to the game.
 * @param p The player to add.
 */
public static void addToGame(Client p) {
	players.add(p);
	if(Misc.random(1) == 1) {
		p.setTeleportTarget(Location.create(2807, 10105, 0));
	} else {
		p.setTeleportTarget(Location.create(2759, 10064, 0));
	}
	p.teleBlockDelay = 999999;
}

public static void death(Client p) {
	if(players.contains(p)) {
		p.sendMessage("Oh dear, you are dead!");
		p.setTeleportTarget(Location.create(2834, 3336, 0));
		players.remove(p);
		p.teleBlockDelay = 0;
		p.zombieKills = 0;
	}
}

public static void interfaceSend(Client c) {
	if(Onslaught.players.size() &gt;= 3) {
		if(Onslaught.STARTED) {
			c.getPA().sendFrame126("Ending game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		} else {
			c.getPA().sendFrame126("Starting game in: "+Integer.toString(Onslaught.CYCLE), 18051);	
		}
	} else {
		c.getPA().sendFrame126("Need 3+ Players", 18051);	
	}		
	c.getPA().sendFrame126("Total players: @gre@" + Integer.toString(Onslaught.players.size()), 18052);
	c.getPA().sendFrame126("Wave: @gre@" + Integer.toString(Onslaught.WAVE), 18053);
	c.getPA().sendFrame126(Onslaught.STARTED ? "Wave: @gre@" + Integer.toString(Onslaught.WAVE)+"" : "Points: @gre@" + Integer.toString(c.pcPoints), 18054);
}

/**
 * Creates a new NPC for the minigame.
 * @param id NPC type.
 * @param x The X tile coordinate.
 * @param y The Y tile coordinate.
 */
public static void createNPC(int id, int x, int y) {
    int slot = Server.npcHandler.spawnNpc(id, x, y, 0, 2, WAVE*15, WAVE*2, WAVE*3, WAVE*5).slot;
    npcs.add(slot);
    ZOMBIES++;
}

public static void endGame(boolean won) {
	Iterator&lt;Client&gt; it = players.iterator();
	while(it.hasNext()) {
		Client c = it.next();
		if (c != null) {
			c.zombieKills = 0;
			c.teleBlockDelay = 0;
			c.setTeleportTarget(Location.create(2834, 3336, 0));
			if(won) {
				c.pcPoints += WAVE;
				c.getDH().sendStartInfo("You defeated the zombies and you won!", "", "", "", "Congratulations!");
			} else {
				c.getDH().sendStartInfo("The zombies took over and you lost!", "", "", "", "Defeat...");
			}				
		}
	}
	players.clear();
	WAVE = 1;
	ZOMBIES = 0;
	CYCLE = 500;
	TIME = 60;
	STARTED = false;
	killAllZombies();
}

/**
 * Ticks down for timing tasks.
 */
public static void tick() {
	if(!STARTED) {
		TIME--;
		if(TIME &lt; 1) {
			transferToGame();
			TIME = 500;
			CYCLE = 500;
			STARTED = true;
		}
	}
	if(STARTED) {
		CYCLE--;
		if(WAVE &gt; 10) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(true);
		}
		if(players.size() &lt; 3) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
		if(ZOMBIES &lt; 1) {
			CYCLE += (WAVE * 50);
			Iterator&lt;Client&gt; it = players.iterator();
			while(it.hasNext()) {
				Client c = it.next();
				if (c != null) {
					if(c.zombieKills &gt; 0) {
						c.pcPoints += (WAVE);
					} else {
						c.sendMessage("You receive no points for inactivity!");
					}					
				}
			}
			WAVE++;
			transferToGame();
		}
		if(CYCLE &lt; 1) {
			CYCLE = 500;
			TIME = 60;
			STARTED = false;
			endGame(false);
		}
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>LEECHAS GON LEECH YO.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084/1</link>
        <pubDate>Mon, 06 Jun 2011 16:20:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398084-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-custom-minigame-onslaught/398084.rss">[PI] Custom minigame - Onslaught</source>
      </item>
  </channel>
</rss>
