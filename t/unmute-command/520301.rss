<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Unmute command</title>
    <link>https://forum.moparisthebest.com/t/unmute-command/520301</link>
    <description>[size=18pt][b]Connection.Java[/b][/size]
[CODE]package server;

import java.io.BufferedReader;

import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import server.game.players.Client;

/**
 * Connection Check Class
 * 
 * [MENTION=52317]auth[/MENTION]or Ryan / Lmctruck30
 *
 */

public class Connection {

	public static ArrayList &lt;String&gt;bannedIps = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;bannedNames = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;mutedIps = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;mutedNames = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;loginLimitExceeded = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;starterReceived1 = new ArrayList&lt;String&gt; ();
	
	
	/**
	* Adds the banned usernames and ips from the text file to the ban list
	**/
	public static void initialize() {
		banUsers();
		banIps();
		muteUsers();
		muteIps();
		appendStarters();
	}	
	
	/**
	* Handles 2 starters per IP
	**/
	public static boolean hasReceived1stStarter(String IP) {
		if(starterReceived1.contains(IP)) {
			return true;
		}
		return false;
	}

	public static void addIpToStarter1(String IP) {
		starterReceived1.add(IP);
		addIpToStarterList1(IP);
	}
	
	public static void appendStarters() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./Data/starters/FirstStarterRecieved.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					starterReceived1.add(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void addIpToStarterList1(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./Data/starters/FirstStarterRecieved.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Adding Name To List
	 */
	public static void addIpToLoginList(String IP) {
		loginLimitExceeded.add(IP);
	}
	
	/**
	 * Remove Ip From List
	 */
	public static void removeIpFromLoginList(String IP) {
		loginLimitExceeded.remove(IP);
	}
	
	/**
	 * Clear Name List
	 */
	public static void clearLoginList() {
		loginLimitExceeded.clear();
	}
	
	public static boolean checkLoginList(String IP) {
		loginLimitExceeded.add(IP);
		int num = 0;
		for(String ips : loginLimitExceeded) {
			if(IP.equals(ips)) {
				num++;
			}
		}
		if(num &gt; 5) {
			return true;
		}
		return false;
	}
	
	public static void unMuteUser(String name) {
		mutedNames.remove(name);
		deleteFromFile(&quot;./Data/bans/UsersMuted.txt&quot;, name);	
	}
	
	public static void unIPMuteUser(String name) {
		mutedIps.remove(name);
		deleteFromFile(&quot;./Data/bans/IpsMuted.txt&quot;, name);	
	}
	
	public static void unIPBanUser(String name) {
		bannedIps.remove(name);
		deleteFromFile(&quot;./Data/bans/IpsBanned.txt&quot;, name);	
	}
	
	/**
	* Adding Ban IP
	**/
	public static void addIpToBanList(String IP) {
		bannedIps.add(IP);
	}
	
	public static void addIpToMuteList(String IP) {
		mutedIps.add(IP);
		addIpToMuteFile(IP);
	}
	
	
	/**
	* Removing Ban IP
	**/
	public static void removeIpFromBanList(String IP) {
		bannedIps.remove(IP);
	}
	
	/**
	* Contains Ban IP
	**/
	public static boolean isIpBanned(String IP) {
		if(bannedIps.contains(IP)) {
			return true;
		}
		return false;
	}
	

	/**
	* Adding banned username
	**/
	public static void addNameToBanList(String name) {
		bannedNames.add(name.toLowerCase());
	}
	
	public static void addNameToMuteList(String name) {
		mutedNames.add(name.toLowerCase());
		addUserToFile(name);
	}
	
	
	/**
	* Removing banned username
	**/
	public static void removeNameFromBanList(String name) {
		bannedNames.remove(name.toLowerCase());
		deleteFromFile(&quot;./Data/bans/UsersBanned.txt&quot;, name);
	}
	
	public static void removeNameFromMuteList(String name) {
		mutedNames.remove(name.toLowerCase());
		deleteFromFile(&quot;./Data/bans/UsersMuted.txt&quot;, name);
	}
	public static void deleteFromFile(String file, String name) {
		try {
			BufferedReader r = new BufferedReader(new FileReader(file));
			ArrayList&lt;String&gt; contents = new ArrayList&lt;String&gt;();
			while(true) {
				String line = r.readLine();
				if(line == null) {
					break;
				} else {
					line = line.trim();
				}
				if(!line.equalsIgnoreCase(name)) {
					contents.add(line);
				}
			}
			r.close();
			BufferedWriter w = new BufferedWriter(new FileWriter(file));
			for(String line : contents) {
				w.write(line, 0, line.length());
				w.newLine();
			}
			w.flush();
			w.close();
		} catch (Exception e) {}
	}
	
	/**
	* Contains banned username
	**/
	public static boolean isNamedBanned(String name) {
		if(bannedNames.contains(name.toLowerCase())) {
			return true;
		}
		return false;
	}
	
	
	/**
	* Reads all usernames from text file then adds them all to the ban list
	**/
	public static void banUsers() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./Data/bans/UsersBanned.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					addNameToBanList(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void muteUsers() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./Data/bans/UsersMuted.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					mutedNames.add(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	* Reads all the Ips from text file then adds them all to ban list
	**/
	public static void banIps() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./Data/bans/IpsBanned.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					addIpToBanList(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void muteIps() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./Data/bans/IpsMuted.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					mutedIps.add(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	/**
	* Writes the username into the text file - when using the ::ban playername command
	**/
	public static void addNameToFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./Data/bans/UsersBanned.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void addUserToFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./Data/bans/UsersMuted.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	

	
	
	/**
	* Writes the IP into the text file - use ::ipban username
	**/
	public static void addIpToFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./Data/bans/IpsBanned.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static void addIpToMuteFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./Data/bans/IpsMuted.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	public static boolean isMuted(Client c) {
		return mutedNames.contains(c.playerName) || mutedIps.contains(c.connectedFrom);	
	}
	

}[/CODE]

[size=18pt][b]Unmute command[/b][/size]
[CODE]if (playerCommand.startsWith(&quot;unmute&quot;)) {
						   try {
								String playerToBan = playerCommand.substring(7);
								Connection.unMuteUser(playerToBan);
							    c.sendMessage(&quot;Unmuted.&quot;);
								} catch (Exception e) {
								c.sendMessage(&quot;Player probably is offline.&quot;);
								}
								}
								}[/CODE]

[b][size=14pt]Yes, you&#39;ve probably heard this a lot. And yes, I&#39;ve also searched, but I couldn&#39;t get the fix. Problem is, for others that don&#39;t know, it&#39;s that they don&#39;t get removed from unmute list. So, they can&#39;t get unmuted in game.[/size][/b]</description>
    
    <lastBuildDate>Wed, 29 May 2013 03:34:22 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/unmute-command/520301.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Unmute command</title>
        <dc:creator><![CDATA[@EnviousFaith EnviousFaith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/enviousfaith">@EnviousFaith</a> wrote:</p>
          <blockquote>
              <p>[size=18pt]<span class="bbcode-b">Connection.Java</span>[/size]</p>
<p>[CODE]package server;</p>
<p>import java.io.BufferedReader;</p>
<p>import java.io.BufferedWriter;<br>
import java.io.FileReader;<br>
import java.io.FileWriter;<br>
import java.io.IOException;<br>
import java.util.ArrayList;<br>
import server.game.players.Client;</p>
<p>/**</p>
<ul>
<li>Connection Check Class</li>
<li>
</li>
<li>[MENTION=52317]auth[/MENTION]or Ryan / Lmctruck30</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class Connection {</p>
<pre><code>public static ArrayList &lt;String&gt;bannedIps = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;bannedNames = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;mutedIps = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;mutedNames = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;loginLimitExceeded = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;starterReceived1 = new ArrayList&lt;String&gt; ();


/**
* Adds the banned usernames and ips from the text file to the ban list
**/
public static void initialize() {
	banUsers();
	banIps();
	muteUsers();
	muteIps();
	appendStarters();
}	

/**
* Handles 2 starters per IP
**/
public static boolean hasReceived1stStarter(String IP) {
	if(starterReceived1.contains(IP)) {
		return true;
	}
	return false;
}

public static void addIpToStarter1(String IP) {
	starterReceived1.add(IP);
	addIpToStarterList1(IP);
}

public static void appendStarters() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./Data/starters/FirstStarterRecieved.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				starterReceived1.add(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static void addIpToStarterList1(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./Data/starters/FirstStarterRecieved.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}

/**
 * Adding Name To List
 */
public static void addIpToLoginList(String IP) {
	loginLimitExceeded.add(IP);
}

/**
 * Remove Ip From List
 */
public static void removeIpFromLoginList(String IP) {
	loginLimitExceeded.remove(IP);
}

/**
 * Clear Name List
 */
public static void clearLoginList() {
	loginLimitExceeded.clear();
}

public static boolean checkLoginList(String IP) {
	loginLimitExceeded.add(IP);
	int num = 0;
	for(String ips : loginLimitExceeded) {
		if(IP.equals(ips)) {
			num++;
		}
	}
	if(num &gt; 5) {
		return true;
	}
	return false;
}

public static void unMuteUser(String name) {
	mutedNames.remove(name);
	deleteFromFile("./Data/bans/UsersMuted.txt", name);	
}

public static void unIPMuteUser(String name) {
	mutedIps.remove(name);
	deleteFromFile("./Data/bans/IpsMuted.txt", name);	
}

public static void unIPBanUser(String name) {
	bannedIps.remove(name);
	deleteFromFile("./Data/bans/IpsBanned.txt", name);	
}

/**
* Adding Ban IP
**/
public static void addIpToBanList(String IP) {
	bannedIps.add(IP);
}

public static void addIpToMuteList(String IP) {
	mutedIps.add(IP);
	addIpToMuteFile(IP);
}


/**
* Removing Ban IP
**/
public static void removeIpFromBanList(String IP) {
	bannedIps.remove(IP);
}

/**
* Contains Ban IP
**/
public static boolean isIpBanned(String IP) {
	if(bannedIps.contains(IP)) {
		return true;
	}
	return false;
}


/**
* Adding banned username
**/
public static void addNameToBanList(String name) {
	bannedNames.add(name.toLowerCase());
}

public static void addNameToMuteList(String name) {
	mutedNames.add(name.toLowerCase());
	addUserToFile(name);
}


/**
* Removing banned username
**/
public static void removeNameFromBanList(String name) {
	bannedNames.remove(name.toLowerCase());
	deleteFromFile("./Data/bans/UsersBanned.txt", name);
}

public static void removeNameFromMuteList(String name) {
	mutedNames.remove(name.toLowerCase());
	deleteFromFile("./Data/bans/UsersMuted.txt", name);
}
public static void deleteFromFile(String file, String name) {
	try {
		BufferedReader r = new BufferedReader(new FileReader(file));
		ArrayList&lt;String&gt; contents = new ArrayList&lt;String&gt;();
		while(true) {
			String line = r.readLine();
			if(line == null) {
				break;
			} else {
				line = line.trim();
			}
			if(!line.equalsIgnoreCase(name)) {
				contents.add(line);
			}
		}
		r.close();
		BufferedWriter w = new BufferedWriter(new FileWriter(file));
		for(String line : contents) {
			w.write(line, 0, line.length());
			w.newLine();
		}
		w.flush();
		w.close();
	} catch (Exception e) {}
}

/**
* Contains banned username
**/
public static boolean isNamedBanned(String name) {
	if(bannedNames.contains(name.toLowerCase())) {
		return true;
	}
	return false;
}


/**
* Reads all usernames from text file then adds them all to the ban list
**/
public static void banUsers() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./Data/bans/UsersBanned.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				addNameToBanList(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static void muteUsers() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./Data/bans/UsersMuted.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				mutedNames.add(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}
/**
* Reads all the Ips from text file then adds them all to ban list
**/
public static void banIps() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./Data/bans/IpsBanned.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				addIpToBanList(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static void muteIps() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./Data/bans/IpsMuted.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				mutedIps.add(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}
/**
* Writes the username into the text file - when using the ::ban playername command
**/
public static void addNameToFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./Data/bans/UsersBanned.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static void addUserToFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./Data/bans/UsersMuted.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}





/**
* Writes the IP into the text file - use ::ipban username
**/
public static void addIpToFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./Data/bans/IpsBanned.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static void addIpToMuteFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./Data/bans/IpsMuted.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}

public static boolean isMuted(Client c) {
	return mutedNames.contains(c.playerName) || mutedIps.contains(c.connectedFrom);	
}
</code></pre>
<p>}[/CODE]</p>
<p>[size=18pt]<span class="bbcode-b">Unmute command</span>[/size]</p>
<p><code>if (playerCommand.startsWith("unmute")) {
						   try {
								String playerToBan = playerCommand.substring(7);
								Connection.unMuteUser(playerToBan);
							    c.sendMessage("Unmuted.");
								} catch (Exception e) {
								c.sendMessage("Player probably is offline.");
								}
								}
								}</code></p>
<p><span class="bbcode-b">[size=14pt]Yes, you’ve probably heard this a lot. And yes, I’ve also searched, but I couldn’t get the fix. Problem is, for others that don’t know, it’s that they don’t get removed from unmute list. So, they can’t get unmuted in game.[/size]</span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/unmute-command/520301/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/unmute-command/520301/1</link>
        <pubDate>Wed, 29 May 2013 03:34:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-520301-1</guid>
        <source url="https://forum.moparisthebest.com/t/unmute-command/520301.rss">Unmute command</source>
      </item>
  </channel>
</rss>
