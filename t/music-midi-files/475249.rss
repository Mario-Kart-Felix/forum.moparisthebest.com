<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Music MIDI files</title>
    <link>https://forum.moparisthebest.com/t/music-midi-files/475249</link>
    <description>How do I create a Directory for a midi file location?
Basically, how could I add a directory to the music in my cache.
Say this is the directory, &quot;Cache/Sprites/Music&quot;

How could I make this work, this is the code I have.
[code]
package sign;

import java.io.File;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Receiver;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Synthesizer;

/**
 * Midi file playing.
 * @author Primadude &amp;&amp; Gara494
 *
 * Gara494 additions:
 * QuickMidi, and modified the start midi method for custom midis
 */
public class Midi {

        /**
         * The name of the midi file.
         */
        String midiFileName;

        /**
         * The dir of the midi file.
         */
        String midiSaveDir;

        /**
         * The Sequence object.
         */
        public Sequence sequence;

        /**
         * The Sequencer object.
         */
        Sequencer sequencer;

        /**
         * The Synthesizer object.
         */
        Synthesizer synthesizer;

        /**
         * Gets the name of the midi file.
         * @return The midiFileName variable.
         */
        public String getMidiFileName() {
                return midiFileName;
        }

        /**
         * Gets the midi file directory.
         * @return The midiSaveDir variable.
         */
        public String getMidiSaveDir() {
                return midiSaveDir;
        }

        /**
         * Sets the midi file name.
         * @param midiFileName The String to set the file name to.
         */
        public void setMidiFileName(String midiFileName) {
                this.midiFileName = midiFileName;
        }

        /**
         * Sets the midi directory.
         * @param midiFileName The String to set the file directory to.
         */
        public void setMidiSaveDir(String midiSaveDir) {
                this.midiSaveDir = midiSaveDir;
        }

        /**
         * Sets the volume of the midi that is playing.
         * @param volume The volume of the midi sound.
         * @return True or false.
         */
        public boolean setVolume(double value) {
                try {
                        Receiver receiver = MidiSystem.getReceiver();
                        ShortMessage volumeMessage= new ShortMessage();

                        for (int i = 0; i &lt; 16; i++) {
                                volumeMessage.setMessage(ShortMessage.CONTROL_CHANGE, i, 7, (int)(value * 127.0));
                                receiver.send(volumeMessage, -1);
                        }
                        return true;
                } catch (Exception e) {
                        e.printStackTrace();
                        return false;
                }
        }

        /**
         * Fades the volume of the midi out.
         * Stops the current midi playing.
         */
        public void fadeOut() {
                double volume = 0.6;

                for (;;) {
                        if (((volume - 0.05) &lt; 0) || !setVolume(volume)) {
                                break;
                        }
                        try {
                                Thread.sleep(150);
                        } catch (Exception exception) {
                        }
                        volume -= 0.025;
                }
                if (synthesizer != null) {
                        synthesizer.close();
                        synthesizer = null;
                }
                if (sequencer != null) {
                        if (sequencer.isOpen()) {
                                sequencer.stop();
                        }
                        sequencer.close();
                }
        }
        public void quickMidi(String Midiname) {
           

            try {
                   
                            if (synthesizer != null) {
                            synthesizer.close();
                            synthesizer = null;
                    }
                    if (sequencer != null) {
                            if (sequencer.isOpen()) {
                                    sequencer.stop();
                            }
                            sequencer.close();
                    }
                    sequencer = null;
                    sequence = null;
                    File file = new File(Midiname);

                    if (file.exists()) {
                            sequence = MidiSystem.getSequence(file);
                    }
                    sequencer = MidiSystem.getSequencer();
                    sequencer.setSequence(sequence);
                    synthesizer = MidiSystem.getSynthesizer();
                    synthesizer.open();

                    if (synthesizer.getDefaultSoundbank() == null) {
                            sequencer.getTransmitter().setReceiver(MidiSystem.getReceiver());
                    } else {
                            sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                    }
                    sequencer.open();
                    sequencer.start();
             
                    }catch (Exception exception) {
                    exception.printStackTrace();
            }
    }
        /**
         * Starts playing the midi.
         */
        public void startMidi(String midiname) {
             
                try {
                        if (sequencer != null) {
                                fadeOut();
                        }
                        sequencer = null;
                        sequence = null;
                        File file = new File(midiname);

                        if (file.exists()) {
                                sequence = MidiSystem.getSequence(file);
                        }
                        sequencer = MidiSystem.getSequencer();
                        sequencer.setSequence(sequence);
                        synthesizer = MidiSystem.getSynthesizer();
                        synthesizer.open();

                        if (synthesizer.getDefaultSoundbank() == null) {
                                sequencer.getTransmitter().setReceiver(MidiSystem.getReceiver());
                        } else {
                                sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                        }
                        sequencer.open();
                        sequencer.start();
                } catch (Exception exception) {
                        exception.printStackTrace();
                }
        }
}
[/code]</description>
    
    <lastBuildDate>Sat, 22 Dec 2012 21:52:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/music-midi-files/475249.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Music MIDI files</title>
        <dc:creator><![CDATA[@Trade_Me Trade Me]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/trade_me">@Trade_Me</a> wrote:</p>
          <blockquote>
              <p>How do I create a Directory for a midi file location?<br>
Basically, how could I add a directory to the music in my cache.<br>
Say this is the directory, “Cache/Sprites/Music”</p>
<p>How could I make this work, this is the code I have.</p>
<pre><code class="lang-auto">package sign;

import java.io.File;
import javax.sound.midi.MidiSystem;
import javax.sound.midi.Receiver;
import javax.sound.midi.Sequence;
import javax.sound.midi.Sequencer;
import javax.sound.midi.ShortMessage;
import javax.sound.midi.Synthesizer;

/**
 * Midi file playing.
 * @author Primadude &amp;&amp; Gara494
 *
 * Gara494 additions:
 * QuickMidi, and modified the start midi method for custom midis
 */
public class Midi {

        /**
         * The name of the midi file.
         */
        String midiFileName;

        /**
         * The dir of the midi file.
         */
        String midiSaveDir;

        /**
         * The Sequence object.
         */
        public Sequence sequence;

        /**
         * The Sequencer object.
         */
        Sequencer sequencer;

        /**
         * The Synthesizer object.
         */
        Synthesizer synthesizer;

        /**
         * Gets the name of the midi file.
         * @return The midiFileName variable.
         */
        public String getMidiFileName() {
                return midiFileName;
        }

        /**
         * Gets the midi file directory.
         * @return The midiSaveDir variable.
         */
        public String getMidiSaveDir() {
                return midiSaveDir;
        }

        /**
         * Sets the midi file name.
         * @param midiFileName The String to set the file name to.
         */
        public void setMidiFileName(String midiFileName) {
                this.midiFileName = midiFileName;
        }

        /**
         * Sets the midi directory.
         * @param midiFileName The String to set the file directory to.
         */
        public void setMidiSaveDir(String midiSaveDir) {
                this.midiSaveDir = midiSaveDir;
        }

        /**
         * Sets the volume of the midi that is playing.
         * @param volume The volume of the midi sound.
         * @return True or false.
         */
        public boolean setVolume(double value) {
                try {
                        Receiver receiver = MidiSystem.getReceiver();
                        ShortMessage volumeMessage= new ShortMessage();

                        for (int i = 0; i &lt; 16; i++) {
                                volumeMessage.setMessage(ShortMessage.CONTROL_CHANGE, i, 7, (int)(value * 127.0));
                                receiver.send(volumeMessage, -1);
                        }
                        return true;
                } catch (Exception e) {
                        e.printStackTrace();
                        return false;
                }
        }

        /**
         * Fades the volume of the midi out.
         * Stops the current midi playing.
         */
        public void fadeOut() {
                double volume = 0.6;

                for (;;) {
                        if (((volume - 0.05) &lt; 0) || !setVolume(volume)) {
                                break;
                        }
                        try {
                                Thread.sleep(150);
                        } catch (Exception exception) {
                        }
                        volume -= 0.025;
                }
                if (synthesizer != null) {
                        synthesizer.close();
                        synthesizer = null;
                }
                if (sequencer != null) {
                        if (sequencer.isOpen()) {
                                sequencer.stop();
                        }
                        sequencer.close();
                }
        }
        public void quickMidi(String Midiname) {
           

            try {
                   
                            if (synthesizer != null) {
                            synthesizer.close();
                            synthesizer = null;
                    }
                    if (sequencer != null) {
                            if (sequencer.isOpen()) {
                                    sequencer.stop();
                            }
                            sequencer.close();
                    }
                    sequencer = null;
                    sequence = null;
                    File file = new File(Midiname);

                    if (file.exists()) {
                            sequence = MidiSystem.getSequence(file);
                    }
                    sequencer = MidiSystem.getSequencer();
                    sequencer.setSequence(sequence);
                    synthesizer = MidiSystem.getSynthesizer();
                    synthesizer.open();

                    if (synthesizer.getDefaultSoundbank() == null) {
                            sequencer.getTransmitter().setReceiver(MidiSystem.getReceiver());
                    } else {
                            sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                    }
                    sequencer.open();
                    sequencer.start();
             
                    }catch (Exception exception) {
                    exception.printStackTrace();
            }
    }
        /**
         * Starts playing the midi.
         */
        public void startMidi(String midiname) {
             
                try {
                        if (sequencer != null) {
                                fadeOut();
                        }
                        sequencer = null;
                        sequence = null;
                        File file = new File(midiname);

                        if (file.exists()) {
                                sequence = MidiSystem.getSequence(file);
                        }
                        sequencer = MidiSystem.getSequencer();
                        sequencer.setSequence(sequence);
                        synthesizer = MidiSystem.getSynthesizer();
                        synthesizer.open();

                        if (synthesizer.getDefaultSoundbank() == null) {
                                sequencer.getTransmitter().setReceiver(MidiSystem.getReceiver());
                        } else {
                                sequencer.getTransmitter().setReceiver(synthesizer.getReceiver());
                        }
                        sequencer.open();
                        sequencer.start();
                } catch (Exception exception) {
                        exception.printStackTrace();
                }
        }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/music-midi-files/475249/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/music-midi-files/475249/1</link>
        <pubDate>Sat, 22 Dec 2012 21:52:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-475249-1</guid>
        <source url="https://forum.moparisthebest.com/t/music-midi-files/475249.rss">Music MIDI files</source>
      </item>
  </channel>
</rss>
