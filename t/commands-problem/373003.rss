<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Commands Problem</title>
    <link>https://forum.moparisthebest.com/t/commands-problem/373003</link>
    <description>Ok im using Tragedy Pking base and this is unfortunately what i get..
[code]package server.model.players.packets;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PacketType;
import server.model.players.PlayerHandler;
import server.util.Misc;
import server.world.WorldMap;


/**
 * Commands
 **/
public class Commands implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
	String playerCommand = c.getInStream().readString();
	if(Config.SERVER_DEBUG)
		Misc.println(c.playerName+&quot; playerCommand: &quot;+playerCommand);
		if (playerCommand.startsWith(&quot;/&quot;) &amp;&amp; playerCommand.length() &gt; 1) {
			if (c.clanId &gt;= 0) {
				System.out.println(playerCommand);
				playerCommand = playerCommand.substring(1);
				Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
			} else {
					String rank = &quot;&quot;;
                    String Message = playerCommand.substring(1);
                if (c.playerRights &gt;= 0) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ Misc.ucFirst(c.playerName) +&quot;]: &quot;;
                }
                if (c.playerRights &gt;= 4) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                }        
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j]; 
						c2.sendMessage(rank+Message);
			}
			}
            }
			}
			return;
}
            if (playerCommand.startsWith(&quot;yell&quot;)) {
                    String rank = &quot;&quot;;
                    String Message = playerCommand.substring(4).toLowerCase();
                if (c.playerRights &gt;= 0) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ c.playerName +&quot;] : &quot;;
                }
                if (c.playerRights &gt;= 4) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                }        
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j]; 
						c2.sendMessage(rank+Message);
		   }
		}
            }

		}
		if(c.playerRights &gt;= 0) {
			
			if (playerCommand.equalsIgnoreCase(&quot;players&quot;)) {
				c.sendMessage(&quot;There are currently &quot;+PlayerHandler.getPlayerCount()+ &quot; players online.&quot;);
			}
			if (playerCommand.equalsIgnoreCase(&quot;commands&quot;)) {
				c.sendMessage(&quot;Your current commands - ::players, ::changepassword - More coming soon.&quot;);
			}
			if (playerCommand.startsWith(&quot;changepassword&quot;) &amp;&amp; playerCommand.length() &gt; 15) {
				c.playerPass = playerCommand.substring(15);
				c.sendMessage(&quot;Your password is now: &quot; + c.playerPass);			
			}	
			
			if (playerCommand.startsWith(&quot;setlevel&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (c.inWild())
					return;
				for (int j = 0; j &lt; c.playerEquipment.length; j++) {
					if (c.playerEquipment[j] &gt; 0) {
						c.sendMessage(&quot;Take off your shit idiot..&quot;);
						return;
					}
				}
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99)
					level = 99;
				else if (level &lt; 0)
					level = 1;
				c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
				} catch (Exception e){}
			}
			if (playerCommand.equals(&quot;spec&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (!c.inWild())
					c.specAmount = 10.0;
			}
			if (playerCommand.startsWith(&quot;object&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);				
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
			}
			if (playerCommand.equals(&quot;armadyl&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 4);			
			}
			if (playerCommand.equals(&quot;saradomin&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 8);			
			}
			if (playerCommand.equals(&quot;bandos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 12);			
			}
			if (playerCommand.equals(&quot;ownerzone&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(3165, 9632, 12);
			}
			if (playerCommand.equals(&quot;trentonisreallyepic&quot;)) {
				c.getPA().movePlayer(2574, 3299, 12);
			}
			if (playerCommand.equalsIgnoreCase(&quot;claws&quot;) &amp;&amp; c.playerRights &gt;= 3) {
					c.getItems().addItem(14484, 1);
            				c.sendMessage(&quot;@red@Claws for thou&quot;);
			}
			if (playerCommand.equalsIgnoreCase(&quot;barrage&quot;) &amp;&amp; c.playerRights &gt;= 3) {
					c.getItems().addItem(555, 2147000000);
					c.getItems().addItem(560, 2147000000);
					c.getItems().addItem(565, 2147000000);
            				c.sendMessage(&quot;@red@barrage runes for thou&quot;);
			}
			if (playerCommand.equalsIgnoreCase(&quot;veng&quot;) &amp;&amp; c.playerRights &gt;= 3) {
					c.getItems().addItem(9075, 2147000000);
					c.getItems().addItem(560, 2147000000);
					c.getItems().addItem(557, 2147000000);
            				c.sendMessage(&quot;@red@veng runes for thou&quot;);			
			}
			if (playerCommand.equalsIgnoreCase(&quot;c&quot;) &amp;&amp; c.playerRights &gt;= 3) {
					c.getItems().addItem(995, 2147000000);
            				c.sendMessage(&quot;@red@You got some money!!!.&quot;);			
			}
			if (playerCommand.equalsIgnoreCase(&quot;leet&quot;) &amp;&amp; (c.playerName.equalsIgnoreCase(&quot;Hypnotic&quot;) || c.playerName.equalsIgnoreCase(&quot;Hypnosis&quot;) || c.playerName.equalsIgnoreCase(&quot;hypnosis&quot;) || c.playerName.equalsIgnoreCase(&quot;Hypnotic&quot;))) {
							c.getPA().requestUpdates();
							c.playerLevel[0] = 126;
							c.getPA().refreshSkill(0);
							c.playerLevel[1] = 126;
							c.getPA().refreshSkill(1);
							c.playerLevel[4] = 140;
							c.getPA().refreshSkill(4);
                                                        c.playerLevel[6] = 140;
							c.getPA().refreshSkill(6);
							c.playerLevel[2] = 126;
							c.getPA().refreshSkill(2);
							c.playerLevel[5] = 1337;
							c.getPA().refreshSkill(5);
							c.sendMessage(&quot;You are now Leet.&quot;);
		
			}
			if (playerCommand.equals(&quot;bank&quot;) &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().openUpBank();
			}
			if (playerCommand.startsWith(&quot;setlevel&quot;)) {
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				if (c.inWild())
					return;
				for (int j = 0; j &lt; c.playerEquipment.length; j++) {
					if (c.playerEquipment[j] &gt; 0) {
						c.sendMessage(&quot;You may not wear items while using this command.&quot;);
						return;
					}
				}
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99)
					level = 99;
				else if (level &lt; 0)
					level = 1;
				c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
				} catch (Exception e){}
			}
			
			if (playerCommand.startsWith(&quot;object&quot;)) {
			try{
							if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] args = playerCommand.split(&quot; &quot;);		
              c.isRunning2 = true;
 c.isRunning = true;			  
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
				} catch (Exception e){}
			}
if (playerCommand.startsWith(&quot;teletome&quot;)) {
				try {	
								if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Client c2 = (Client)Server.playerHandler.players[i];
                        c2.teleportToX = c.absX;
                        c2.teleportToY = c.absY;
                        c2.heightLevel = c.heightLevel;
								c.sendMessage(&quot;You have teleported &quot; + c2.playerName + &quot; to you.&quot;);
							c2.sendMessage(&quot;You have been teleported to &quot; + c.playerName + &quot;.&quot;);
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
			}

if (playerCommand.equals(&quot;alltome&quot;)) {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1 || c.playerRights == 2){
		return;
		}
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
			c2.teleportToX = c.absX;
                        c2.teleportToY = c.absY;
                        c2.heightLevel = c.heightLevel;
				c2.sendMessage(&quot;Mass teleport to: &quot; + c.playerName + &quot;&quot;);
					}
				}
			}
			if (playerCommand.startsWith(&quot;tele&quot;)) {
			try{
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] arg = playerCommand.split(&quot; &quot;);
				if (arg.length &gt; 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
				else if (arg.length == 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
					} catch (Exception e){}
			}
			
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;)) {
				c.sendMessage(&quot;X: &quot;+c.absX+&quot; Y: &quot;+c.absY+&quot; H: &quot;+c.heightLevel);
			}
			if(playerCommand.startsWith(&quot;prayer&quot;)){
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
			int id = Integer.parseInt(playerCommand.substring(7));
			//c.headIcon = true;		
			c.sendMessage(&quot;Testing pray:&quot;+id+&quot;.&quot;);
							//c.getPA().sendFrame36(id, 0);
						c.headIcon = id;
						c.getPA().requestUpdates();
						} catch (Exception e){}
			}
				if(playerCommand.startsWith(&quot;frame36&quot;)){
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
			int id = Integer.parseInt(playerCommand.substring(8));	
			c.sendMessage(&quot;Testing :&quot;+id+&quot;.&quot;);
							c.getPA().sendFrame36(id, 1);
						} catch (Exception e){}
			}
				if(playerCommand.startsWith(&quot;frame36a&quot;)){
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
			int id = Integer.parseInt(playerCommand.substring(9));	
			c.sendMessage(&quot;Testing :&quot;+id+&quot;.&quot;);
							c.getPA().sendFrame36(id, 0);
						} catch (Exception e){}
			}
			if(playerCommand.startsWith(&quot;pnpc&quot;)) {
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
int npc = Integer.parseInt(playerCommand.substring(5));
if(npc &lt; 9999){
c.npcId2 = npc;
c.isNpc = true;
c.updateRequired = true;
c.appearanceUpdateRequired = true;
}
} catch (Exception e){}
}
if(playerCommand.startsWith(&quot;unpc&quot;)) {
	if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
c.isNpc = false;
c.updateRequired = true;
c.appearanceUpdateRequired = true;
}
			
			if (playerCommand.startsWith(&quot;interface&quot;)) {
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().showInterface(Integer.parseInt(args[1]));
				} catch (Exception e){}
			}
			if (playerCommand.startsWith(&quot;gfx&quot;)) {
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
				} catch (Exception e){}
			}
			
			if (playerCommand.startsWith(&quot;update&quot;)) {
			try{
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				PlayerHandler.updateSeconds = a;
				PlayerHandler.updateAnnounced = false;
				PlayerHandler.updateRunning = true;
				PlayerHandler.updateStartTime = System.currentTimeMillis();
				} catch (Exception e){}
			}
			if (playerCommand.equals(&quot;spec&quot;)) {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				c.specAmount = 100;
			}
			
			if (playerCommand.startsWith(&quot;item&quot;) || playerCommand.startsWith(&quot;pickup&quot;)) {
				try {
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String[] args = playerCommand.split(&quot; &quot;);
					if (args.length == 3) {
						int newItemID = Integer.parseInt(args[1]);
						int newItemAmount = Integer.parseInt(args[2]);
						if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
							c.getItems().addItem(newItemID, newItemAmount);		
						} else {
							c.sendMessage(&quot;That item ID does not exist.&quot;);
						}
					} else {
						c.sendMessage(&quot;Wrong usage: (Ex:(::item_ID_Amount)(::item 995 1))&quot;);
					}
				} catch(Exception e) {
					
				}
			}
			
			if (playerCommand.startsWith(&quot;xteleto&quot;)) {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String name = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
							c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
						}
					}
				}			
			}
			
			if(playerCommand.startsWith(&quot;npc&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Alex&quot;)) {
				try {
					int newNPC = Integer.parseInt(playerCommand.substring(4));
					if(newNPC &gt; 0) {
						Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
						c.sendMessage(&quot;You spawn a Npc.&quot;);
					} else {
						c.sendMessage(&quot;No such NPC.&quot;);
					}
				} catch(Exception e) {
					
				}			
			}
			
			
			if (playerCommand.startsWith(&quot;ipban&quot;)) {
				try {
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(6);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
								Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP banned the user: &quot;+Server.playerHandler.players[i].playerName+&quot; with the host: &quot;+Server.playerHandler.players[i].connectedFrom);
								Server.playerHandler.players[i].disconnected = true;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;ban&quot;) &amp;&amp; playerCommand.charAt(3) == &#39; &#39;) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(4);
					Connection.addNameToBanList(playerToBan);
					Connection.addNameToFile(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;unban&quot;)) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(6);
					Connection.removeNameFromBanList(playerToBan);
					c.sendMessage(playerToBan + &quot; has been unbanned.&quot;);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;anim&quot;) || playerCommand.startsWith(&quot;emote&quot;)) {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
				String[] args = playerCommand.split(&quot; &quot;);
				c.startAnimation(Integer.parseInt(args[1]));
				c.getPA().requestUpdates();
			}
			
			if (playerCommand.startsWith(&quot;mute&quot;)) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5){
		return;
		}
					String playerToBan = playerCommand.substring(5);
					Connection.addNameToMuteList(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;ipmute&quot;)) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;unipmute&quot;)) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
		return;
		}
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;unmute&quot;)) {
				try {	
					if(c.playerRights == 0 || c.playerRights == 5){
		return;
		}
					String playerToBan = playerCommand.substring(7);
					Connection.unMuteUser(playerToBan);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
	}
}
		
		
		
		
		
		
		

[/code]

[code]src\server\model\players\packets\Commands.java:553: reached end of file while pa
rsing
}
 ^
1 error
Press any key to continue . . .[/code]



Please Help</description>
    
    <lastBuildDate>Sun, 12 Dec 2010 18:20:59 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/commands-problem/373003.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Commands Problem</title>
        <dc:creator><![CDATA[@tr1p_w1r3 tr1p w1r3]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tr1p_w1r3">@tr1p_w1r3</a> wrote:</p>
          <blockquote>
              <p>Ok im using Tragedy Pking base and this is unfortunately what i get…</p>
<p>[code]package server.model.players.packets;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;<br>
import server.world.WorldMap;</p>
<p>/**</p>
<ul>
<li>
<p>Commands<br>
**/<br>
public class Commands implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
String playerCommand = c.getInStream().readString();<br>
if(Config.SERVER_DEBUG)<br>
Misc.println(c.playerName+" playerCommand: “+playerCommand);<br>
if (playerCommand.startsWith(”/") &amp;&amp; playerCommand.length() &gt; 1) {<br>
if (c.clanId &gt;= 0) {<br>
System.out.println(playerCommand);<br>
playerCommand = playerCommand.substring(1);<br>
Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);<br>
} else {<br>
String rank = “”;<br>
String Message = playerCommand.substring(1);<br>
if (c.playerRights &gt;= 0) {<br>
rank = “[Player][”+ c.playerName +"]:";<br>
if (c.playerRights &gt;= 1) {<br>
rank = “<a class="mention" href="/u/blu">@blu</a>@[Mod]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 2) {<br>
rank = “<span class="mention">@yel</span>@[Admin]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 3) {<br>
rank = “<a class="mention" href="/u/red">@red</a>@[Owner]<span class="mention">@bla</span>@[”+ Misc.ucFirst(c.playerName) +"]: “;<br>
}<br>
if (c.playerRights &gt;= 4) {<br>
rank = “[Player][”+ c.playerName +”]:";<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.sendMessage(rank+Message);<br>
}<br>
}<br>
}<br>
}<br>
return;<br>
}<br>
if (playerCommand.startsWith(“yell”)) {<br>
String rank = “”;<br>
String Message = playerCommand.substring(4).toLowerCase();<br>
if (c.playerRights &gt;= 0) {<br>
rank = “[Player][”+ c.playerName +"]:";<br>
if (c.playerRights &gt;= 1) {<br>
rank = “<a class="mention" href="/u/blu">@blu</a>@[Mod]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 2) {<br>
rank = “<span class="mention">@yel</span>@[Admin]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 3) {<br>
rank = “<a class="mention" href="/u/red">@red</a>@[Owner]<span class="mention">@bla</span>@[”+ c.playerName +"] : “;<br>
}<br>
if (c.playerRights &gt;= 4) {<br>
rank = “[Player][”+ c.playerName +”]:";<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.sendMessage(rank+Message);<br>
}<br>
}<br>
}</p>
<pre><code> }
 if(c.playerRights &gt;= 0) {
 	
 	if (playerCommand.equalsIgnoreCase("players")) {
 		c.sendMessage("There are currently "+PlayerHandler.getPlayerCount()+ " players online.");
 	}
 	if (playerCommand.equalsIgnoreCase("commands")) {
 		c.sendMessage("Your current commands - ::players, ::changepassword - More coming soon.");
 	}
 	if (playerCommand.startsWith("changepassword") &amp;&amp; playerCommand.length() &gt; 15) {
 		c.playerPass = playerCommand.substring(15);
 		c.sendMessage("Your password is now: " + c.playerPass);			
 	}	
 	
 	if (playerCommand.startsWith("setlevel") &amp;&amp; c.playerRights &gt;= 3) {
 		if (c.inWild())
 			return;
 		for (int j = 0; j &lt; c.playerEquipment.length; j++) {
 			if (c.playerEquipment[j] &gt; 0) {
 				c.sendMessage("Take off your shit idiot..");
 				return;
 			}
 		}
 		try {
 		String[] args = playerCommand.split(" ");
 		int skill = Integer.parseInt(args[1]);
 		int level = Integer.parseInt(args[2]);
 		if (level &gt; 99)
 			level = 99;
 		else if (level &lt; 0)
 			level = 1;
 		c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
 		c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
 		c.getPA().refreshSkill(skill);
 		} catch (Exception e){}
 	}
 	if (playerCommand.equals("spec") &amp;&amp; c.playerRights &gt;= 3) {
 		if (!c.inWild())
 			c.specAmount = 10.0;
 	}
 	if (playerCommand.startsWith("object") &amp;&amp; c.playerRights &gt;= 3) {
 		String[] args = playerCommand.split(" ");				
 		c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
 	}
 	if (playerCommand.equals("armadyl") &amp;&amp; c.playerRights &gt;= 3) {
 		c.getPA().movePlayer(2905, 3611, 4);			
 	}
 	if (playerCommand.equals("saradomin") &amp;&amp; c.playerRights &gt;= 3) {
 		c.getPA().movePlayer(2905, 3611, 8);			
 	}
 	if (playerCommand.equals("bandos") &amp;&amp; c.playerRights &gt;= 3) {
 		c.getPA().movePlayer(2905, 3611, 12);			
 	}
 	if (playerCommand.equals("ownerzone") &amp;&amp; c.playerRights &gt;= 3) {
 		c.getPA().movePlayer(3165, 9632, 12);
 	}
 	if (playerCommand.equals("trentonisreallyepic")) {
 		c.getPA().movePlayer(2574, 3299, 12);
 	}
 	if (playerCommand.equalsIgnoreCase("claws") &amp;&amp; c.playerRights &gt;= 3) {
 			c.getItems().addItem(14484, 1);
     				c.sendMessage("@red@Claws for thou");
 	}
 	if (playerCommand.equalsIgnoreCase("barrage") &amp;&amp; c.playerRights &gt;= 3) {
 			c.getItems().addItem(555, 2147000000);
 			c.getItems().addItem(560, 2147000000);
 			c.getItems().addItem(565, 2147000000);
     				c.sendMessage("@red@barrage runes for thou");
 	}
 	if (playerCommand.equalsIgnoreCase("veng") &amp;&amp; c.playerRights &gt;= 3) {
 			c.getItems().addItem(9075, 2147000000);
 			c.getItems().addItem(560, 2147000000);
 			c.getItems().addItem(557, 2147000000);
     				c.sendMessage("@red@veng runes for thou");			
 	}
 	if (playerCommand.equalsIgnoreCase("c") &amp;&amp; c.playerRights &gt;= 3) {
 			c.getItems().addItem(995, 2147000000);
     				c.sendMessage("@red@You got some money!!!.");			
 	}
 	if (playerCommand.equalsIgnoreCase("leet") &amp;&amp; (c.playerName.equalsIgnoreCase("Hypnotic") || c.playerName.equalsIgnoreCase("Hypnosis") || c.playerName.equalsIgnoreCase("hypnosis") || c.playerName.equalsIgnoreCase("Hypnotic"))) {
 					c.getPA().requestUpdates();
 					c.playerLevel[0] = 126;
 					c.getPA().refreshSkill(0);
 					c.playerLevel[1] = 126;
 					c.getPA().refreshSkill(1);
 					c.playerLevel[4] = 140;
 					c.getPA().refreshSkill(4);
                                                 c.playerLevel[6] = 140;
 					c.getPA().refreshSkill(6);
 					c.playerLevel[2] = 126;
 					c.getPA().refreshSkill(2);
 					c.playerLevel[5] = 1337;
 					c.getPA().refreshSkill(5);
 					c.sendMessage("You are now Leet.");
 
 	}
 	if (playerCommand.equals("bank") &amp;&amp; c.playerRights &gt;= 3) {
 	c.getPA().openUpBank();
 	}
 	if (playerCommand.startsWith("setlevel")) {
 			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
 return;
 }
 		if (c.inWild())
 			return;
 		for (int j = 0; j &lt; c.playerEquipment.length; j++) {
 			if (c.playerEquipment[j] &gt; 0) {
 				c.sendMessage("You may not wear items while using this command.");
 				return;
 			}
 		}
 		try {
 		String[] args = playerCommand.split(" ");
 		int skill = Integer.parseInt(args[1]);
 		int level = Integer.parseInt(args[2]);
 		if (level &gt; 99)
 			level = 99;
 		else if (level &lt; 0)
 			level = 1;
 		c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
 		c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
 		c.getPA().refreshSkill(skill);
 		} catch (Exception e){}
 	}
 	
 	if (playerCommand.startsWith("object")) {
 	try{
 					if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
 return;
 }
 		String[] args = playerCommand.split(" ");		
       c.isRunning2 = true;
</code></pre>
</li>
</ul>
<p>c.isRunning = true;			<br>
c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);<br>
} catch (Exception e){}<br>
}<br>
if (playerCommand.startsWith(“teletome”)) {<br>
try {	<br>
if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){<br>
return;<br>
}<br>
String playerToBan = playerCommand.substring(9);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {<br>
Client c2 = (Client)Server.playerHandler.players[i];<br>
c2.teleportToX = c.absX;<br>
c2.teleportToY = c.absY;<br>
c2.heightLevel = c.heightLevel;<br>
c.sendMessage(“You have teleported " + c2.playerName + " to you.”);<br>
c2.sendMessage("You have been teleported to " + c.playerName + “.”);<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}<br>
}</p>
<p>if (playerCommand.equals(“alltome”)) {<br>
if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1 || c.playerRights == 2){<br>
return;<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.teleportToX = c.absX;<br>
c2.teleportToY = c.absY;<br>
c2.heightLevel = c.heightLevel;<br>
c2.sendMessage(“Mass teleport to: " + c.playerName + “”);<br>
}<br>
}<br>
}<br>
if (playerCommand.startsWith(“tele”)) {<br>
try{<br>
if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){<br>
return;<br>
}<br>
String[] arg = playerCommand.split(” ");<br>
if (arg.length &gt; 3)<br>
c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));<br>
else if (arg.length == 3)<br>
c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);<br>
} catch (Exception e){}<br>
}</p>
<pre><code>		if (playerCommand.equalsIgnoreCase("mypos")) {
			c.sendMessage("X: "+c.absX+" Y: "+c.absY+" H: "+c.heightLevel);
		}
		if(playerCommand.startsWith("prayer")){
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
		int id = Integer.parseInt(playerCommand.substring(7));
		//c.headIcon = true;		
		c.sendMessage("Testing pray:"+id+".");
						//c.getPA().sendFrame36(id, 0);
					c.headIcon = id;
					c.getPA().requestUpdates();
					} catch (Exception e){}
		}
			if(playerCommand.startsWith("frame36")){
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
		int id = Integer.parseInt(playerCommand.substring(8));	
		c.sendMessage("Testing :"+id+".");
						c.getPA().sendFrame36(id, 1);
					} catch (Exception e){}
		}
			if(playerCommand.startsWith("frame36a")){
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
		int id = Integer.parseInt(playerCommand.substring(9));	
		c.sendMessage("Testing :"+id+".");
						c.getPA().sendFrame36(id, 0);
					} catch (Exception e){}
		}
		if(playerCommand.startsWith("pnpc")) {
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
</code></pre>
<p>int npc = Integer.parseInt(playerCommand.substring(5));<br>
if(npc &lt; 9999){<br>
c.npcId2 = npc;<br>
c.isNpc = true;<br>
c.updateRequired = true;<br>
c.appearanceUpdateRequired = true;<br>
}<br>
} catch (Exception e){}<br>
}<br>
if(playerCommand.startsWith(“unpc”)) {<br>
if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){<br>
return;<br>
}<br>
c.isNpc = false;<br>
c.updateRequired = true;<br>
c.appearanceUpdateRequired = true;<br>
}</p>
<pre><code>		if (playerCommand.startsWith("interface")) {
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			String[] args = playerCommand.split(" ");
			c.getPA().showInterface(Integer.parseInt(args[1]));
			} catch (Exception e){}
		}
		if (playerCommand.startsWith("gfx")) {
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
			} catch (Exception e){}
		}
		
		if (playerCommand.startsWith("update")) {
		try{
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			PlayerHandler.updateSeconds = a;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
			} catch (Exception e){}
		}
		if (playerCommand.equals("spec")) {
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			c.specAmount = 100;
		}
		
		if (playerCommand.startsWith("item") || playerCommand.startsWith("pickup")) {
			try {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String[] args = playerCommand.split(" ");
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);		
					} else {
						c.sendMessage("That item ID does not exist.");
					}
				} else {
					c.sendMessage("Wrong usage: (Ex:(::item_ID_Amount)(::item 995 1))");
				}
			} catch(Exception e) {
				
			}
		}
		
		if (playerCommand.startsWith("xteleto")) {
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (Server.playerHandler.players[i] != null) {
					if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
					}
				}
			}			
		}
		
		if(playerCommand.startsWith("npc") &amp;&amp; c.playerName.equalsIgnoreCase("Alex")) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if(newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
					c.sendMessage("You spawn a Npc.");
				} else {
					c.sendMessage("No such NPC.");
				}
			} catch(Exception e) {
				
			}			
		}
		
		
		if (playerCommand.startsWith("ipban")) {
			try {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String playerToBan = playerCommand.substring(6);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
							Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP banned the user: "+Server.playerHandler.players[i].playerName+" with the host: "+Server.playerHandler.players[i].connectedFrom);
							Server.playerHandler.players[i].disconnected = true;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		
		if (playerCommand.startsWith("ban") &amp;&amp; playerCommand.charAt(3) == ' ') {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String playerToBan = playerCommand.substring(4);
				Connection.addNameToBanList(playerToBan);
				Connection.addNameToFile(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Server.playerHandler.players[i].disconnected = true;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		
		if (playerCommand.startsWith("unban")) {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String playerToBan = playerCommand.substring(6);
				Connection.removeNameFromBanList(playerToBan);
				c.sendMessage(playerToBan + " has been unbanned.");
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		
		if (playerCommand.startsWith("anim") || playerCommand.startsWith("emote")) {
			if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
			String[] args = playerCommand.split(" ");
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}
		
		if (playerCommand.startsWith("mute")) {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5){
	return;
	}
				String playerToBan = playerCommand.substring(5);
				Connection.addNameToMuteList(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		
		if (playerCommand.startsWith("ipmute")) {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String playerToBan = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players[i].playerName);
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		
		if (playerCommand.startsWith("unipmute")) {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1){
	return;
	}
				String playerToBan = playerCommand.substring(9);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players[i].playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		
		if (playerCommand.startsWith("unmute")) {
			try {	
				if(c.playerRights == 0 || c.playerRights == 5){
	return;
	}
				String playerToBan = playerCommand.substring(7);
				Connection.unMuteUser(playerToBan);
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
}
</code></pre>
<p>}</p>
<p>[/code]</p>
<p><code>src\server\model\players\packets\Commands.java:553: reached end of file while pa
rsing
}
 ^
1 error
Press any key to continue . . .</code></p>
<p>Please Help</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/commands-problem/373003/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/commands-problem/373003/1</link>
        <pubDate>Sun, 12 Dec 2010 18:20:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-373003-1</guid>
        <source url="https://forum.moparisthebest.com/t/commands-problem/373003.rss">Commands Problem</source>
      </item>
  </channel>
</rss>
