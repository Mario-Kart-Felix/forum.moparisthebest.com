<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>SRP-6 Implementation</title>
    <link>https://forum.moparisthebest.com/t/srp-6-implementation/394538</link>
    <description>I&#39;m trying to implement the SRP-6 Protocol in Java. However, I&#39;m having a slight calculation error, and I can&#39;t seem to figure out what it is. I&#39;ve contacted the person who wrote it (Tom Wu @ Stanford), but have yet to receive a reply. Since the protocol was last updated in 2002, it&#39;s possible that he&#39;s switched professions since then.

The design specifications are found at http://srp.stanford.edu/design.html

I have combined the client and server code into one class.

[code=Java]
import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Main {
    public static final BigInteger MODULUS = new BigInteger(
        &quot;115b8b692e0e045692cf280b436735c77a5a9e8a9e7ed56c965f87db5b2a2ece3&quot;, 16);
    public static final BigInteger GENERATOR = new BigInteger(&quot;2&quot;, 10);
    public static final BigInteger MULTIPLIER = new BigInteger(&quot;3&quot;, 10);

    public static void main(String[] args) {
        String username = &quot;zymus&quot;;
        System.out.println(&quot;username:\t&quot; + username);

        String sPassword = &quot;password&quot;;
        System.out.println(&quot;sPassword:\t&quot; + sPassword);

        SecureRandom random = new SecureRandom();
        byte[] rawSeed = random.generateSeed(256);
        BigInteger seed = new BigInteger(rawSeed);
        System.out.println(&quot;seed:\t&quot; + seed.toString(16));

        MessageDigest hashFunction = null;
        try {
            hashFunction = MessageDigest.getInstance(&quot;SHA-1&quot;);
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return;
        }

        hashFunction.update((username + &quot;:&quot; + sPassword).getBytes());
        byte[] credentials = hashFunction.digest();

        hashFunction.update(seed.toByteArray());
        hashFunction.update(credentials);
        BigInteger privateKey = new BigInteger(hashFunction.digest());
        System.out.println(&quot;privateKey:\t&quot; + privateKey.toString(16));

        BigInteger verifier = GENERATOR.modPow(privateKey, MODULUS);
        System.out.println(&quot;verifier:\t&quot; + verifier.toString(16));

        BigInteger cPrivate = new BigInteger(random.generateSeed(256));
        System.out.println(&quot;cPrivate:\t&quot; + cPrivate.toString(16));
        BigInteger cPublic = GENERATOR.modPow(cPrivate, MODULUS);
        System.out.println(&quot;cPublic:\t&quot; + cPublic.toString(16));

        BigInteger sPrivate = new BigInteger(random.generateSeed(256));
        System.out.println(&quot;sPrivate:\t&quot; + sPrivate.toString(16));
        BigInteger kv = MULTIPLIER.multiply(verifier);
        BigInteger gb = GENERATOR.modPow(sPrivate, MODULUS);
        BigInteger sPublic = kv.add(gb).mod(MODULUS);
        System.out.println(&quot;sPublic:\t&quot; + sPublic.toString(16));

        BigInteger u = new BigInteger(random.generateSeed(256));
        System.out.println(&quot;u:\t&quot; + u.toString(16));

        BigInteger sSession1 = cPublic.multiply(verifier.modPow(u, MODULUS));
        BigInteger sSession = sSession1.modPow(sPrivate, MODULUS);
        System.out.println(&quot;sSession:\t&quot; + sSession.toString(16));

        BigInteger cSession1 = sPublic.subtract(MULTIPLIER.multiply(GENERATOR
            .modPow(privateKey, MODULUS)));
        BigInteger cSession2 = cPrivate.add(u.multiply(privateKey));
        BigInteger cSession = cSession1.modPow(cSession2, MODULUS);

        System.out.println(&quot;cSession:\t&quot; + cSession.toString(16));

        BigInteger sShared = new BigInteger(hashFunction.digest(sSession
            .toByteArray()));
        System.out.println(&quot;sShared:\t&quot; + sShared.toString(16));

        BigInteger cShared = new BigInteger(hashFunction.digest(cSession
            .toByteArray()));
        System.out.println(&quot;cShared:\t&quot; + cShared.toString(16));

        // Generate client proof
        // M = H(H(N) xor H(g), H(I), s, A, B, K)
        // proof = hash(hash(Mod) xor hash(Gen), hashUser, seed, cPublic,
        // sPublic, cShared)
        BigInteger hashedMod = new BigInteger(hashFunction.digest(MODULUS
            .toByteArray()));
        BigInteger hashedGen = new BigInteger(hashFunction.digest(GENERATOR
            .toByteArray()));
        byte[] hashedUser = hashFunction.digest(username.getBytes());

        hashFunction.update(hashedMod.xor(hashedGen).toByteArray());
        hashFunction.update(hashedUser);
        hashFunction.update(seed.toByteArray());
        hashFunction.update(cPublic.toByteArray());
        hashFunction.update(sPublic.toByteArray());
        hashFunction.update(cShared.toByteArray());
        BigInteger clientProof = new BigInteger(hashFunction.digest());
        System.out.println(&quot;clientProof:\t&quot; + clientProof.toString(16));

        // Generate server proof
        // H(A, M, K)
        hashFunction.update(cPublic.toByteArray());
        hashFunction.update(clientProof.toByteArray());
        hashFunction.update(sShared.toByteArray());
        BigInteger serverProof = new BigInteger(hashFunction.digest());
        System.out.println(&quot;serverProof:\t&quot; + serverProof.toString(16));
    }
}
[/code]

[code]
username:    zymus
sPassword:    password
seed:    4e37ab64700d69b28017daaea4cc6fe6e58e86b4c85e2c0abda98574f4820c737f76c4f3e75244530be6701f5acb7caaaedac691cbd9981297bef404908bf576f3f8f482700825783f7af53fa5a3319f73fef6e5126f259c5a0b28e576a04987467582c899b0cfb1275da320d1fd4c702ca8ae50bb857b58d46ba777e6d062f4d9bfdf77147f5219f139a31c6904a458f771071c51f592f5bb584f2b293cee80701b9267dfe044f5e4902a9e3c4258b9401a2439ec98577ad8e1ba49dfe94cc21eeff28eb20a88a2e9b679ffddb9940d889e9e6b6699a8b8d65b100f18364c47f975aca07277be890becbaa0ff2ea77e283ac5ff4aa6c479f6e1f1f21b0cbcc
privateKey:    -b2175b465d7951a82003bf30ea8e0ebdbbecfaa
verifier:    2e744f4e979ecdc94e5c7f0730e7f5033316c5635380491d8b1ed15d0005859e
cPrivate:    1f17b6f28b0d50099c8c0e1be6697f25e0713419db4d82f333d1ebd36e92d0ac46deccc1f1be02ba30ea91b62fbb70fb2021aee4c79acd8e6e46f5b6f4607eff77bd2395c43b98bc9b9314e35f2c5d3e382e99a4558982651c9774e9040d45db566c5683713f2a089a11ba3321597493348cb35f84644355137e86661efa26b0c21750a7e0bdf233c01e1db3777a1b63351864d7e9b871253260deed65b7edb1252633c1dbc6a9782f7e8eac6718e36964c5cf2f74e42f6d55c99b5ce6516b0868f5ebbd0f9da38b9297eda7ccaf103ee2cda67f7b69cc7a0cf6ffcafaceed746abd300b8646b5757ba77e45a1e6bd6c443e1f4abe15512fcf26779359bccf83
cPublic:    36cd6d36584ee8920346fa1fc306b5d30d201b6f3858f74761a6f1a143bc1256
sPrivate:    350cd0512891d617d7871f3e850be26adaac48681a2e62154927120dccfe561e5ddf4b20731a963501874b6093ea5e54438a8ae9deb3db83d0ae341faa7245d68a529cde95a2fd8fd237474ad850bcdd5215dac0efef9cd5892ab04d458d9925cfcd8161f481030da173587628c50b7f0ad9d3719f0cf7e4d181196a3b8b2488854784a69a742d1123da3c347ad8cf3d818fe214a2f9cf7d12a4ded82fddb19440618b5d99216fadb69d1e2884664941765cb0b7a9af94880de9102a9d59fd41f4f9b5b421cc3aae1b74e0f2f27560521a923f972512e39b9b0b273a0b58192f7f13cf18bd852765ce981990664efb9ab6ab64cdba9f5ec62da3085a69075f07
sPublic:    c7041df2fc725f61f6a4c7025470f2d3be5b4370ce4887505ab20515845c01cd
u:    696dda8c312b50e797d3e56cd7e8abec7507a5eeef9dab24522a1f9006e96b9abb0e5e70a40cb0c07a239a186cf5219544809957188dc72f647d5977399f3c11584a495c95983d37a2431d5d04eb5d2321ed534d3dcbf8e55c2c7d007fda9cd0c3749a11b2606ca7780831c6317ca7af1fccfc42f45aaa3a3a9048ae970fe201ea64a1927b0df2fd3b18b836f5a5731f6a12b22ce8609c14e1d82f4250e651b117232ff0e643f7fb79403f0934755620d01b16272dd68a5af2ccd3d03b250884fad7803c34f41a90339489bd5cf37e418e0f6d68ca60f421bbc60792ed650daa5cb8d120f36e5f59d97170896ff311dd30340404fd82ee21f13034f14d973e2b
sSession:    b7e36649c9f89a22850d2bee83e9a4ed5f8999923d1735574ad31a6d8d45acd3
cSession:    b7e36649c9f89a22850d2bee83e9a4ed5f8999923d1735574ad31a6d8d45acd3
sShared:    -2bbdef141bc1dc5951f3980a904a8cce3693494f
cShared:    -2bbdef141bc1dc5951f3980a904a8cce3693494f
clientProof:    -4f7288d0dbe73b4a4e26de8cbb14d2db46c0b7df
serverProof:    3fa7a53ea1468c8a7b07d03f63fbdbfc87c0932
[/code]

Everything is generated correctly, up until generating the client and server proof. I confirmed this with the creator&#39;s demonstration at http://srp.stanford.edu/demo/demo.html

Note: I can reduce the bit number from 256 to something smaller if needed.</description>
    
    <lastBuildDate>Tue, 10 May 2011 21:52:04 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/srp-6-implementation/394538.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>SRP-6 Implementation</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>I’m trying to implement the SRP-6 Protocol in Java. However, I’m having a slight calculation error, and I can’t seem to figure out what it is. I’ve contacted the person who wrote it (Tom Wu @ Stanford), but have yet to receive a reply. Since the protocol was last updated in 2002, it’s possible that he’s switched professions since then.</p>
<p>The design specifications are found at <a href="http://srp.stanford.edu/design.html">http://srp.stanford.edu/design.html</a></p>
<p>I have combined the client and server code into one class.</p>
<pre><code class="lang-auto">import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;

public class Main {
    public static final BigInteger MODULUS = new BigInteger(
        "115b8b692e0e045692cf280b436735c77a5a9e8a9e7ed56c965f87db5b2a2ece3", 16);
    public static final BigInteger GENERATOR = new BigInteger("2", 10);
    public static final BigInteger MULTIPLIER = new BigInteger("3", 10);

    public static void main(String[] args) {
        String username = "zymus";
        System.out.println("username:\t" + username);

        String sPassword = "password";
        System.out.println("sPassword:\t" + sPassword);

        SecureRandom random = new SecureRandom();
        byte[] rawSeed = random.generateSeed(256);
        BigInteger seed = new BigInteger(rawSeed);
        System.out.println("seed:\t" + seed.toString(16));

        MessageDigest hashFunction = null;
        try {
            hashFunction = MessageDigest.getInstance("SHA-1");
        }
        catch (NoSuchAlgorithmException e) {
            e.printStackTrace();
            return;
        }

        hashFunction.update((username + ":" + sPassword).getBytes());
        byte[] credentials = hashFunction.digest();

        hashFunction.update(seed.toByteArray());
        hashFunction.update(credentials);
        BigInteger privateKey = new BigInteger(hashFunction.digest());
        System.out.println("privateKey:\t" + privateKey.toString(16));

        BigInteger verifier = GENERATOR.modPow(privateKey, MODULUS);
        System.out.println("verifier:\t" + verifier.toString(16));

        BigInteger cPrivate = new BigInteger(random.generateSeed(256));
        System.out.println("cPrivate:\t" + cPrivate.toString(16));
        BigInteger cPublic = GENERATOR.modPow(cPrivate, MODULUS);
        System.out.println("cPublic:\t" + cPublic.toString(16));

        BigInteger sPrivate = new BigInteger(random.generateSeed(256));
        System.out.println("sPrivate:\t" + sPrivate.toString(16));
        BigInteger kv = MULTIPLIER.multiply(verifier);
        BigInteger gb = GENERATOR.modPow(sPrivate, MODULUS);
        BigInteger sPublic = kv.add(gb).mod(MODULUS);
        System.out.println("sPublic:\t" + sPublic.toString(16));

        BigInteger u = new BigInteger(random.generateSeed(256));
        System.out.println("u:\t" + u.toString(16));

        BigInteger sSession1 = cPublic.multiply(verifier.modPow(u, MODULUS));
        BigInteger sSession = sSession1.modPow(sPrivate, MODULUS);
        System.out.println("sSession:\t" + sSession.toString(16));

        BigInteger cSession1 = sPublic.subtract(MULTIPLIER.multiply(GENERATOR
            .modPow(privateKey, MODULUS)));
        BigInteger cSession2 = cPrivate.add(u.multiply(privateKey));
        BigInteger cSession = cSession1.modPow(cSession2, MODULUS);

        System.out.println("cSession:\t" + cSession.toString(16));

        BigInteger sShared = new BigInteger(hashFunction.digest(sSession
            .toByteArray()));
        System.out.println("sShared:\t" + sShared.toString(16));

        BigInteger cShared = new BigInteger(hashFunction.digest(cSession
            .toByteArray()));
        System.out.println("cShared:\t" + cShared.toString(16));

        // Generate client proof
        // M = H(H(N) xor H(g), H(I), s, A, B, K)
        // proof = hash(hash(Mod) xor hash(Gen), hashUser, seed, cPublic,
        // sPublic, cShared)
        BigInteger hashedMod = new BigInteger(hashFunction.digest(MODULUS
            .toByteArray()));
        BigInteger hashedGen = new BigInteger(hashFunction.digest(GENERATOR
            .toByteArray()));
        byte[] hashedUser = hashFunction.digest(username.getBytes());

        hashFunction.update(hashedMod.xor(hashedGen).toByteArray());
        hashFunction.update(hashedUser);
        hashFunction.update(seed.toByteArray());
        hashFunction.update(cPublic.toByteArray());
        hashFunction.update(sPublic.toByteArray());
        hashFunction.update(cShared.toByteArray());
        BigInteger clientProof = new BigInteger(hashFunction.digest());
        System.out.println("clientProof:\t" + clientProof.toString(16));

        // Generate server proof
        // H(A, M, K)
        hashFunction.update(cPublic.toByteArray());
        hashFunction.update(clientProof.toByteArray());
        hashFunction.update(sShared.toByteArray());
        BigInteger serverProof = new BigInteger(hashFunction.digest());
        System.out.println("serverProof:\t" + serverProof.toString(16));
    }
}</code></pre>
<pre><code class="lang-auto">username:    zymus
sPassword:    password
seed:    4e37ab64700d69b28017daaea4cc6fe6e58e86b4c85e2c0abda98574f4820c737f76c4f3e75244530be6701f5acb7caaaedac691cbd9981297bef404908bf576f3f8f482700825783f7af53fa5a3319f73fef6e5126f259c5a0b28e576a04987467582c899b0cfb1275da320d1fd4c702ca8ae50bb857b58d46ba777e6d062f4d9bfdf77147f5219f139a31c6904a458f771071c51f592f5bb584f2b293cee80701b9267dfe044f5e4902a9e3c4258b9401a2439ec98577ad8e1ba49dfe94cc21eeff28eb20a88a2e9b679ffddb9940d889e9e6b6699a8b8d65b100f18364c47f975aca07277be890becbaa0ff2ea77e283ac5ff4aa6c479f6e1f1f21b0cbcc
privateKey:    -b2175b465d7951a82003bf30ea8e0ebdbbecfaa
verifier:    2e744f4e979ecdc94e5c7f0730e7f5033316c5635380491d8b1ed15d0005859e
cPrivate:    1f17b6f28b0d50099c8c0e1be6697f25e0713419db4d82f333d1ebd36e92d0ac46deccc1f1be02ba30ea91b62fbb70fb2021aee4c79acd8e6e46f5b6f4607eff77bd2395c43b98bc9b9314e35f2c5d3e382e99a4558982651c9774e9040d45db566c5683713f2a089a11ba3321597493348cb35f84644355137e86661efa26b0c21750a7e0bdf233c01e1db3777a1b63351864d7e9b871253260deed65b7edb1252633c1dbc6a9782f7e8eac6718e36964c5cf2f74e42f6d55c99b5ce6516b0868f5ebbd0f9da38b9297eda7ccaf103ee2cda67f7b69cc7a0cf6ffcafaceed746abd300b8646b5757ba77e45a1e6bd6c443e1f4abe15512fcf26779359bccf83
cPublic:    36cd6d36584ee8920346fa1fc306b5d30d201b6f3858f74761a6f1a143bc1256
sPrivate:    350cd0512891d617d7871f3e850be26adaac48681a2e62154927120dccfe561e5ddf4b20731a963501874b6093ea5e54438a8ae9deb3db83d0ae341faa7245d68a529cde95a2fd8fd237474ad850bcdd5215dac0efef9cd5892ab04d458d9925cfcd8161f481030da173587628c50b7f0ad9d3719f0cf7e4d181196a3b8b2488854784a69a742d1123da3c347ad8cf3d818fe214a2f9cf7d12a4ded82fddb19440618b5d99216fadb69d1e2884664941765cb0b7a9af94880de9102a9d59fd41f4f9b5b421cc3aae1b74e0f2f27560521a923f972512e39b9b0b273a0b58192f7f13cf18bd852765ce981990664efb9ab6ab64cdba9f5ec62da3085a69075f07
sPublic:    c7041df2fc725f61f6a4c7025470f2d3be5b4370ce4887505ab20515845c01cd
u:    696dda8c312b50e797d3e56cd7e8abec7507a5eeef9dab24522a1f9006e96b9abb0e5e70a40cb0c07a239a186cf5219544809957188dc72f647d5977399f3c11584a495c95983d37a2431d5d04eb5d2321ed534d3dcbf8e55c2c7d007fda9cd0c3749a11b2606ca7780831c6317ca7af1fccfc42f45aaa3a3a9048ae970fe201ea64a1927b0df2fd3b18b836f5a5731f6a12b22ce8609c14e1d82f4250e651b117232ff0e643f7fb79403f0934755620d01b16272dd68a5af2ccd3d03b250884fad7803c34f41a90339489bd5cf37e418e0f6d68ca60f421bbc60792ed650daa5cb8d120f36e5f59d97170896ff311dd30340404fd82ee21f13034f14d973e2b
sSession:    b7e36649c9f89a22850d2bee83e9a4ed5f8999923d1735574ad31a6d8d45acd3
cSession:    b7e36649c9f89a22850d2bee83e9a4ed5f8999923d1735574ad31a6d8d45acd3
sShared:    -2bbdef141bc1dc5951f3980a904a8cce3693494f
cShared:    -2bbdef141bc1dc5951f3980a904a8cce3693494f
clientProof:    -4f7288d0dbe73b4a4e26de8cbb14d2db46c0b7df
serverProof:    3fa7a53ea1468c8a7b07d03f63fbdbfc87c0932</code></pre>
<p>Everything is generated correctly, up until generating the client and server proof. I confirmed this with the creator’s demonstration at <a href="http://srp.stanford.edu/demo/demo.html">http://srp.stanford.edu/demo/demo.html</a></p>
<p>Note: I can reduce the bit number from 256 to something smaller if needed.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/srp-6-implementation/394538/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/srp-6-implementation/394538/1</link>
        <pubDate>Tue, 10 May 2011 21:52:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-394538-1</guid>
        <source url="https://forum.moparisthebest.com/t/srp-6-implementation/394538.rss">SRP-6 Implementation</source>
      </item>
  </channel>
</rss>
