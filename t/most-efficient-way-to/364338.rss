<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Most efficient way to</title>
    <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338</link>
    <description>So I&#39;m faced with this programming problem,

You need to create a list of [i]n[/i] unique integers. That is, no integer can be in the list more than once and as such every integer from 1..n must appear in the list. Here&#39;s the catch: the only way to create an element is by calling a function that gives you a random integer 1..n.

There are some obvious brute force methods but I&#39;m interested to see what you guys can come up with.

btw: I have an efficient solution to this problem, just curious as to what others can think of.</description>
    
    <lastBuildDate>Wed, 27 Oct 2010 20:35:26 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:23, topic:364338”][quote author=super_ link=topic=460556.msg3373871#msg3373871 date=1287441232]</p>
<aside class="quote no-group">
<blockquote>
<p>ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending</p>
</blockquote>
</aside>
<p>Wow thanks Genius I never UnderStood How PRNGs worked… Now i Do<br>
[/quote]fuck off imbecile[/quote]<br>
are you kidding me? you’re the one who just tried to inform people that psuedorandom number generators are psuedorandom</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/25">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/25</link>
        <pubDate>Wed, 27 Oct 2010 20:35:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-25</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@noidea noidea]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/noidea">@noidea</a> wrote:</p>
          <blockquote>
              <p>[code=python]def randlist(n):<br>
time1 = time.time()<br>
count = 0<br>
held = []<br>
while count &lt; n-1:<br>
x = random.randrange(1, n)<br>
if not x in held:<br>
count += 1<br>
held.append(x)<br>
print ‘took’, time.time() - time1, ‘seconds’<br>
print held</p>
<p>if <strong>name</strong> == ‘<strong>main</strong>’:<br>
randlist(10000)[/code]</p>
<p>[code=python]<br>
import random<br>
import time</p>
<p>def randlist(n):<br>
time1 = time.time()<br>
count = 0<br>
held = []<br>
lowest = time1<br>
while True:<br>
time1 = time.time()<br>
while count &lt; n-1:<br>
x = random.randrange(1, n)<br>
if not x in held:<br>
count += 1<br>
held.append(x)<br>
total = (time.time() - time1)<br>
if lowest &gt; total:<br>
lowest = total<br>
print ‘took’, total, ‘second, lowest is’, lowest<br>
held = []<br>
count = 0</p>
<p>if <strong>name</strong> == ‘<strong>main</strong>’:<br>
randlist(10000)[/code]<br>
if you want it to keep looping</p>
<p>lowest is 7.35721302032</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/24">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/24</link>
        <pubDate>Wed, 27 Oct 2010 00:36:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-24</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“super_, post:22, topic:364338”][quote author=abraham2119 link=topic=460556.msg3370120#msg3370120 date=1287171953]<br>
ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending<br>
[/quote]<br>
Wow thanks Genius I never UnderStood How PRNGs worked… Now i Do[/quote]fuck off imbecile</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/23</link>
        <pubDate>Mon, 18 Oct 2010 23:12:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-23</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:9, topic:364338”]ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending[/quote]<br>
Wow thanks Genius I never UnderStood How PRNGs worked… Now i Do</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/22</link>
        <pubDate>Mon, 18 Oct 2010 22:33:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-22</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:19, topic:364338”][quote author=Bowser jr link=topic=460556.msg3370263#msg3370263 date=1287181106]</p>
<aside class="quote no-group">
<blockquote>
<p>basically i would have a list of available numbers between 1-n (which weren’t in the list) and i ‘trimmed’ the list to fit its size, so i would just generate a random number between 0 and the list’s size and i would pop that value and trim the list once again</p>
</blockquote>
</aside>
<p>We both have different interpretation of the rules, would say your way is against the rules, as your random number is not from 1 to n for very long. But why argue, both ways works. Ollie knows what he is doing, he didn’t the the “Java guru” award for nothing.<br>
[/quote][quote author=Moparisthebest link=topic=460556.msg3370359#msg3370359 date=1287188570]<br>
I also agree that abraham’s method doesn’t really follow the rules of the contest.  The function gives you a random number between 1 and n, not 1 and whatever-you-specify.</p>
<p>The only way I can think of to do it and follow the rules is exactly what Bowser/Ollie did.<br>
[/quote]</p>
<p>the rules never state that EVERY TIME the rng is ran it has to produce a value between 1-n, it just says it has to be a random value without being repeated…so that’s exactly what it does[/quote]<br>
Actually the rule does state that:</p>
<aside class="quote no-group quote-modified" data-post="1" data-topic="364338">
<div class="title">
<div class="quote-controls"></div>
 la­wl:</div>
<blockquote>
<p>Here’s the catch: the <span class="bbcode-u"><span class="bbcode-b">only</span></span> way to create an element is by calling a function that gives you a random integer <span class="bbcode-u"><span class="bbcode-b">1…n</span></span>.</p>
</blockquote>
</aside>
<p>Regardless, if the rule is as I think then bowser’s way is the only way.  If it is as you think, then of course yours is better.  So one isn’t better than the other, each is a different solution for two different problems.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/21</link>
        <pubDate>Sun, 17 Oct 2010 02:28:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-21</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:19, topic:364338”][quote author=Bowser jr link=topic=460556.msg3370263#msg3370263 date=1287181106]</p>
<aside class="quote no-group">
<blockquote>
<p>basically i would have a list of available numbers between 1-n (which weren’t in the list) and i ‘trimmed’ the list to fit its size, so i would just generate a random number between 0 and the list’s size and i would pop that value and trim the list once again</p>
</blockquote>
</aside>
<p>We both have different interpretation of the rules, would say your way is against the rules, as your random number is not from 1 to n for very long. But why argue, both ways works. Ollie knows what he is doing, he didn’t the the “Java guru” award for nothing.<br>
[/quote][quote author=Moparisthebest link=topic=460556.msg3370359#msg3370359 date=1287188570]<br>
I also agree that abraham’s method doesn’t really follow the rules of the contest.  The function gives you a random number between 1 and n, not 1 and whatever-you-specify.</p>
<p>The only way I can think of to do it and follow the rules is exactly what Bowser/Ollie did.<br>
[/quote]</p>
<p>the rules never state that EVERY TIME the rng is ran it has to produce a value between 1-n, it just says it has to be a random value without being repeated…so that’s exactly what it does[/quote]rep–</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/20</link>
        <pubDate>Sun, 17 Oct 2010 01:20:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-20</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“Bowser jr, post:15, topic:364338”][quote author=abraham2119 link=topic=460556.msg3370208#msg3370208 date=1287177234]<br>
basically i would have a list of available numbers between 1-n (which weren’t in the list) and i ‘trimmed’ the list to fit its size, so i would just generate a random number between 0 and the list’s size and i would pop that value and trim the list once again<br>
[/quote]<br>
We both have different interpretation of the rules, would say your way is against the rules, as your random number is not from 1 to n for very long. But why argue, both ways works. Ollie knows what he is doing, he didn’t the the “Java guru” award for nothing.[/quote][quote=“Moparisthebest, post:16, topic:364338”]I also agree that abraham’s method doesn’t really follow the rules of the contest.  The function gives you a random number between 1 and n, not 1 and whatever-you-specify.</p>
<p>The only way I can think of to do it and follow the rules is exactly what Bowser/Ollie did.[/quote]</p>
<p>the rules never state that EVERY TIME the rng is ran it has to produce a value between 1-n, it just says it has to be a random value without being repeated…so that’s exactly what it does</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/19</link>
        <pubDate>Sun, 17 Oct 2010 00:08:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-19</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Here it is in C:</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;time.h&gt;

short random_n(short n){
  return rand() % n + 1;
}

main() {
short n = 10000;
srand(time(NULL));
short store[n];
// initialize array
short x;
for(x = 0; x &lt; n; ++x)
  store[x] = 0;
clock_t start = clock();
x = 0;
short rand = 0;
while(x &lt; n){
  rand = random_n(n);
  //printf("x: %d rand: %d store[rand]: %d\n", x, rand, store[rand]);
  if(store[rand] == 0){
    store[rand] = rand;
    ++x;
  }
}
// not perfect time, but close enough I suppose
printf("execution time: %f\n", ((double)clock() - start) / CLOCKS_PER_SEC);
 }
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/18</link>
        <pubDate>Sat, 16 Oct 2010 02:26:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-18</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@cruel cruel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cruel">@cruel</a> wrote:</p>
          <blockquote>
              <p>Not much variety possible for this problem lol. Here’s a php solution for shit n giggles.</p>
<p><code>$count = 10000;
$arr = array();
$rndval = rand(1, $count);
while(count($arr) &lt; $count){
   if (!in_array($rndval, $arr)) $arr[] = $rndval;
   $rndval = rand(1, $count);
}</code><br>
cbf to test or add execution time indicator, but should work.<br>
But getting the array length on loop would obviously go slower in most cases depending on the language, dunno how php manages arrays. Using a variable like the above solutions is generally faster.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/17</link>
        <pubDate>Sat, 16 Oct 2010 00:51:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-17</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I also agree that abraham’s method doesn’t really follow the rules of the contest.  The function gives you a random number between 1 and n, not 1 and whatever-you-specify.</p>
<p>The only way I can think of to do it and follow the rules is exactly what Bowser/Ollie did.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/16</link>
        <pubDate>Sat, 16 Oct 2010 00:22:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-16</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@bowserjr2 Bowser jr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bowserjr2">@bowserjr2</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="14" data-topic="364338">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_1887921562df0dabfae55079ddabeb03.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>basically i would have a list of available numbers between 1-n (which weren’t in the list) and i ‘trimmed’ the list to fit its size, so i would just generate a random number between 0 and the list’s size and i would pop that value and trim the list once again</p>
</blockquote>
</aside>
<p>We both have different interpretation of the rules, would say your way is against the rules, as your random number is not from 1 to n for very long. But why argue, both ways works. Ollie knows what he is doing, he didn’t the the “Java guru” award for nothing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/15</link>
        <pubDate>Fri, 15 Oct 2010 22:18:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-15</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“Bowser jr, post:11, topic:364338”][quote author=abraham2119 link=topic=460556.msg3370120#msg3370120 date=1287171953]<br>
ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending<br>
[/quote]<br>
According to the rules, we MUST use a random number generator, so there is no way to avoid the problem you are stating.<br>
Took a little test with Ollie’s program, got from 7 to 20 ms with n = 10000, but usually around 13 ms.<br>
And mine, much slower, a test with 10 execution gave from 26 to 38 ms.<br>
It is not the same, but pretty consistent.</p>
<p>Lawl: Your method?[/quote]not true. i did it similar to how lawl stated, but the results were much slower</p>
<p>basically i would have a list of available numbers between 1-n (which weren’t in the list) and i ‘trimmed’ the list to fit its size, so i would just generate a random number between 0 and the list’s size and i would pop that value and trim the list once again</p>
<p>of course, because of the constant need to accommodate the list it ends up being slower. but yeah, that’s the proper way of doing it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/14</link>
        <pubDate>Fri, 15 Oct 2010 21:13:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-14</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@bowserjr2 Bowser jr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bowserjr2">@bowserjr2</a> wrote:</p>
          <blockquote>
              <p>[quote=“la­wl, post:12, topic:364338”][quote author=Bowser jr link=topic=460556.msg3370151#msg3370151 date=1287173241]</p>
<aside class="quote no-group">
<blockquote>
<p>ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending</p>
</blockquote>
</aside>
<p>According to the rules, we MUST use a random number generator, so there is no way to avoid the problem you are stating.<br>
Took a little test with Ollie’s program, got from 7 to 20 ms with n = 10000, but usually around 13 ms.<br>
And mine, much slower, a test with 10 execution gave from 26 to 38 ms.<br>
It is not the same, but pretty consistent.</p>
<p>Lawl: Your method?<br>
[/quote]<br>
would rather not paste it as i used it for my assignment. but essentially i would get a random number, check if its in a set, discard it if its in the set, otherwise add it to the list.[/quote]<br>
Similar to my and Ollie’s code, or are you going through the list for every number?<br>
Just curious, what are the time your code are running at, for an n at 10000?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/13</link>
        <pubDate>Fri, 15 Oct 2010 20:39:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-13</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>[quote=“Bowser jr, post:11, topic:364338”][quote author=abraham2119 link=topic=460556.msg3370120#msg3370120 date=1287171953]<br>
ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending<br>
[/quote]<br>
According to the rules, we MUST use a random number generator, so there is no way to avoid the problem you are stating.<br>
Took a little test with Ollie’s program, got from 7 to 20 ms with n = 10000, but usually around 13 ms.<br>
And mine, much slower, a test with 10 execution gave from 26 to 38 ms.<br>
It is not the same, but pretty consistent.</p>
<p>Lawl: Your method?[/quote]<br>
would rather not paste it as i used it for my assignment. but essentially i would get a random number, check if its in a set, discard it if its in the set, otherwise add it to the list.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/12</link>
        <pubDate>Fri, 15 Oct 2010 20:35:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-12</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@bowserjr2 Bowser jr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bowserjr2">@bowserjr2</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:9, topic:364338”]ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending[/quote]<br>
According to the rules, we MUST use a random number generator, so there is no way to avoid the problem you are stating.<br>
Took a little test with Ollie’s program, got from 7 to 20 ms with n = 10000, but usually around 13 ms.<br>
And mine, much slower, a test with 10 execution gave from 26 to 38 ms.<br>
It is not the same, but pretty consistent.</p>
<p>Lawl: Your method?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/11</link>
        <pubDate>Fri, 15 Oct 2010 20:07:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-11</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>Yeah I guess you guys win. Seems it’s a lot different/harder doing it in a functional programming language.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/10</link>
        <pubDate>Fri, 15 Oct 2010 20:01:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-10</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>ollie’s and browser jr’s way of doing it is horrible…it will return different execution times every time it’s ran…</p>
<p>considering the numbers generated are (pseudo) random, they can theoretically end up producing the same repeated values forever and the program thus never ending</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/9</link>
        <pubDate>Fri, 15 Oct 2010 19:45:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-9</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>I just realised this is exactly the same as Browser jr, oops</p>
<p><code>C:\Users\oliver\Desktop&gt;java RandomN 10000
took 29ms
C:\Users\oliver\Desktop&gt;java RandomN 999999
took 1300ms</code></p>
<p>[code]public class RandomN {</p>
<pre><code>private static int n;

private static int[] check, fill;

public static void main(String[] argv) {
	RandomN.n = Integer.parseInt(argv[0]);
	RandomN.check = new int[n];
	RandomN.fill = new int[n];
	long start = System.currentTimeMillis();
	for(int i = 0; i &lt; n; i++) {
		int random = random();
		if(check[random] == 1) {
			i--;
		} else {
			check[random] = 1;
			fill[i] = random;
		}
	}
	System.out.println("took " + (System.currentTimeMillis() - start) + "ms");
}

public static int random() {
	return (int)(Math.random() * n);
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/8</link>
        <pubDate>Fri, 15 Oct 2010 18:41:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-8</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@bowserjr2 Bowser jr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bowserjr2">@bowserjr2</a> wrote:</p>
          <blockquote>
              <p>Don’t really know the rules, so maybe my method is considered cheating.<br>
My code isn’t great, I know.</p>
<p>It is Actionscript 3, so everything may not be allowed in racket, and please tell me what of the rules I misunderstood, since it felt to easy to be correct.</p>
<p>[code=actionscript3]<br>
function rand(n)<br>
{<br>
return Math.ceil(Math.random()*n);<br>
}<br>
// The function doing the job.<br>
function run(n)<br>
{<br>
var thelist = new Array(); // The list with ints from 1 - n.<br>
var alist = new Array();<br>
var temp;<br>
var date = new Date();<br>
var i = 0;<br>
while (i &lt; n)<br>
{<br>
temp = rand(n);<br>
if (alist[temp] == undefined){<br>
alist[temp] = i;<br>
thelist[i] = temp;<br>
i++;<br>
}<br>
}<br>
var date2 = new Date();<br>
trace(date2.valueOf() - date.valueOf());</p>
<p>}<br>
run(10000); // Sets n and run the function.</p>
<p>// It does not give any output, but find the easiest way to output thelist in racket.[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/7</link>
        <pubDate>Fri, 15 Oct 2010 17:56:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-7</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Cheese_Police c|p]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheese_police">@Cheese_Police</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="4" data-topic="364338">
<div class="title">
<div class="quote-controls"></div>
 Fat Cookies:</div>
<blockquote>
<p>I don’t understand the problem completely, but am i right in saying is that you just have to write a random shuffle?</p>
</blockquote>
</aside>
<p>no, each element you append to the list must come from a function that returns a random integer between 1 and n<br>
you need to add every (unique) integer from 1 to n to the list using that function</p>
<aside class="quote no-group" data-post="5" data-topic="364338">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ollie/40/5_1887921562df0dabfae55079ddabeb03.png" class="avatar"> Ollie:</div>
<blockquote>
<p>what language did you implement this in?</p>
</blockquote>
</aside>
<p>racket</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/6</link>
        <pubDate>Fri, 15 Oct 2010 16:24:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-6</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>what language did you implement this in?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/5</link>
        <pubDate>Fri, 15 Oct 2010 16:21:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-5</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>I don’t understand the problem completely, but am i right in saying is that you just have to write a random shuffle?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/4</link>
        <pubDate>Fri, 15 Oct 2010 16:14:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-4</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>The requirement was n=10000 in &lt; 10 seconds. n=999999 seems to take quite a long time</p>
<p>Keep in mind this is in scheme so it would probably be many times faster in something like c.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/3</link>
        <pubDate>Fri, 15 Oct 2010 03:36:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-3</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>how fast exactly is your method?</p>
<p>for instance, how fast does it generate/add-to-the-list when n=999999</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/2</link>
        <pubDate>Fri, 15 Oct 2010 03:11:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-2</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
      <item>
        <title>Most efficient way to</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>So I’m faced with this programming problem,</p>
<p>You need to create a list of <span class="bbcode-i">n</span> unique integers. That is, no integer can be in the list more than once and as such every integer from 1…n must appear in the list. Here’s the catch: the only way to create an element is by calling a function that gives you a random integer 1…n.</p>
<p>There are some obvious brute force methods but I’m interested to see what you guys can come up with.</p>
<p>btw: I have an efficient solution to this problem, just curious as to what others can think of.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-efficient-way-to/364338/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-efficient-way-to/364338/1</link>
        <pubDate>Thu, 14 Oct 2010 22:51:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-364338-1</guid>
        <source url="https://forum.moparisthebest.com/t/most-efficient-way-to/364338.rss">Most efficient way to</source>
      </item>
  </channel>
</rss>
