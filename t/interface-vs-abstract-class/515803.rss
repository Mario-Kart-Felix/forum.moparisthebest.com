<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Interface vs. Abstract class</title>
    <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803</link>
    <description>I&#39;m getting back into programming as some of you might know. So I decided to start learning the basics. I have a question about abstraction. What is the REAL difference of an INTERFACE vs. an ABSTRACT class. What is the pros and cons of both? Why should one be used over another? Would someone mind explaining this to me?</description>
    
    <lastBuildDate>Thu, 09 May 2013 20:49:07 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="16" data-topic="515803">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>An interface is a pure virtual abstract class, meaning that all functions within the interface must be defined by the children.</p>
</blockquote>
</aside>
<p>More specifically, a fully pure virtual class, leading to complete abstraction. And in Java terms, that’s not 100% accurate, either, since only functions follow that concept and there are other rules in Java interfaces you didn’t mention. These include the lack of being able to declare or define constructors in a Java interface plus the difference in handling of fields in interfaces. The inheritance model is also slightly altered, since interfaces extend other interfaces and may have no relationships to classes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/18</link>
        <pubDate>Thu, 09 May 2013 20:49:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-18</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="16" data-topic="515803">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>An interface is a pure virtual abstract class</p>
</blockquote>
</aside>
<p> ::= “interface” | “pure” | “virtual” | “abstract” | “class”<br>
 ::= "An "  " is a "    </p>
<p>have fun, post funny conforming sentences</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/17</link>
        <pubDate>Thu, 25 Apr 2013 23:07:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-17</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>An interface is a pure virtual abstract class, meaning that all functions within the interface must be defined by the children.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/16</link>
        <pubDate>Wed, 24 Apr 2013 01:25:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-16</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@tigerclan tigerclan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tigerclan">@tigerclan</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="12" data-topic="515803">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/xxxtilllyxxx/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> xxxtilllyxxx:</div>
<blockquote>
<p>What the love are you talking about Cyberus?</p>
</blockquote>
</aside>
<p><a href="http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html</a></p>
<blockquote>If an abstract class contains only abstract method declarations, it should be declared as an interface instead.</blockquote>
<p>Meaning if none of the methods in your abstract class do anything, then it should be declared an interface, because it leaves the subclass open to extend another class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/15</link>
        <pubDate>Tue, 16 Apr 2013 08:39:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-15</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@bowserjr2 Bowser jr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bowserjr2">@bowserjr2</a> wrote:</p>
          <blockquote>
              <p>You can only extend one class, so you would in most cases want an interface. And in many cases you would also implement the functions yourself.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/14</link>
        <pubDate>Sun, 14 Apr 2013 17:02:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-14</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@Cyberus Cyberus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cyberus">@Cyberus</a> wrote:</p>
          <blockquote>
              <p>when you should use an interface over an abstract class</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/13</link>
        <pubDate>Sun, 14 Apr 2013 16:51:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-13</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@xxxtilllyxxx xxxtilllyxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxxtilllyxxx">@xxxtilllyxxx</a> wrote:</p>
          <blockquote>
              <p>What the fuck are you talking about Cyberus?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/12</link>
        <pubDate>Sun, 14 Apr 2013 16:47:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-12</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@Cyberus Cyberus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cyberus">@Cyberus</a> wrote:</p>
          <blockquote>
              <p>when the class only contains abstract methods you should use an interface instead</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/11</link>
        <pubDate>Sun, 14 Apr 2013 03:52:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-11</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="9" data-topic="515803">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/imthenull/40/1273_1.png" class="avatar"> imthenull:</div>
<blockquote>
<p>Let’s go back to your statement, how does a partially implemented class make any difference to the scenario?</p>
</blockquote>
</aside>
<p>Perhaps all entities share a base update. Each tick they all progress their cycle around the entity they orbit. That is a standard formula that would be shared by all, so why re-implement it? You can’t do that with an interface.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/10</link>
        <pubDate>Sun, 14 Apr 2013 03:49:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-10</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>[quote=“HcoJustin, post:8, topic:515803”][quote author=imthenull link=topic=634058.msg4282424#msg4282424 date=1365875726]<br>
Cres, you can do the same thing with classes that share the same interface.<br>
[/quote]<br>
Yea but abstract classes allow you to implement partial functionality… Which is something you’d probably want to do in that example[/quote]No… it actually doesn’t make a difference. Each of those classes (Star, Planet, Moon, etc.) can all implement the interface MapEntity. For example, say that MapEntity is an actual interface.</p>
<p><code>public interface MapEntity {
    public void render();
}</code></p>
<p>From here you would want to actually implement this interface into all of your entity classes, like so.</p>
<p><code>public class Planet implements MapEntity {
    public void render() { /* implementation */ }
    // other planet-like stuff here
}</code></p>
<p>Cool, now we can add these to a list, exactly like Cres did. Let’s go back to your statement, how does a partially implemented class make any difference to the scenario?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/9</link>
        <pubDate>Sun, 14 Apr 2013 02:31:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-9</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="515803">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/imthenull/40/1273_1.png" class="avatar"> imthenull:</div>
<blockquote>
<p>Cres, you can do the same thing with classes that share the same interface.</p>
</blockquote>
</aside>
<p>Yea but abstract classes allow you to implement partial functionality… Which is something you’d probably want to do in that example</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/8</link>
        <pubDate>Sun, 14 Apr 2013 01:46:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-8</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@xxxtilllyxxx xxxtilllyxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxxtilllyxxx">@xxxtilllyxxx</a> wrote:</p>
          <blockquote>
              <p>Thanks, it’s a little bit more clearer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/7</link>
        <pubDate>Sun, 14 Apr 2013 01:38:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-7</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@vortex vortex]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vortex">@vortex</a> wrote:</p>
          <blockquote>
              <aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/761194/interface-vs-abstract-class-general-oo/761342#761342" target="_blank" rel="nofollow noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/12711/michael-burr" target="_blank" rel="nofollow noopener">
    <img alt="Michael Burr" src="https://www.gravatar.com/avatar/c330bdee507c95c603a93ca91d9145a9?s=128&amp;d=identicon&amp;r=PG" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/761194/interface-vs-abstract-class-general-oo/761342#761342" target="_blank" rel="nofollow noopener">Interface vs Abstract Class (general OO)</a>
</h4>

<div class="tags">
  <strong>oop, interface, abstract-class</strong>
</div>

<div class="date">
  
  answered by
  <a href="https://stackoverflow.com/users/12711/michael-burr" target="_blank" rel="nofollow noopener">
    Michael Burr
  </a>
  on <a href="https://stackoverflow.com/questions/761194/interface-vs-abstract-class-general-oo/761342#761342" target="_blank" rel="nofollow noopener">05:18PM - 17 Apr 09</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/6</link>
        <pubDate>Sat, 13 Apr 2013 18:37:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-6</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>Cres, you can do the same thing with classes that share the same interface.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/5</link>
        <pubDate>Sat, 13 Apr 2013 17:55:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-5</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@Cres Cres]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cres">@Cres</a> wrote:</p>
          <blockquote>
              <p>Abstract objects help when you want to add alot of different classes (with the same super class) into the same list.<br>
This is especially usefull in games where you could have different things in a map like</p>
<p>Asteroid extends MapEntity<br>
Planet extends MapEntity<br>
Moon extends MapEntity<br>
Star extends MapEntity<br>
GasCloud extends MapEntity</p>
<p>where MapEntity is your abstract class.<br>
And then finally, this allows you to do the following:</p>
<p><code>ArrayList&lt;MapEntity&gt; entities = new ArrayList&lt;MapEntity&gt;();
entities.add(new Star());
entities.add(new Planet());
entities.add(new Moon());
entities.add(new Asteroid());
entities.add(new GasCloud());</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/4</link>
        <pubDate>Sat, 13 Apr 2013 09:55:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-4</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>I’m up for discussion and questions in this board, but when the topics are such broad questions like these that can be answered with Google I get really annoyed because you’re just asking us to do your dirty work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/3</link>
        <pubDate>Fri, 12 Apr 2013 13:01:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-3</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <ol>
<li>
<p>You can only extend one class, whereas you can implement a lot of interfaces (there is a limit as to how many interfaces you can implement, but I don’t think you’ll ever reach it, so don’t worry about that).</p>
</li>
<li>
<p>An interface is fully unimplemented, whereas an abstract class may be partially implemented. So if you have a complex type with some methods that will never vary, and a few that may, then an abstract class could very well be used. You can also have an interface as the contract and provide an abstract class that implements the methods that will never vary. Then let all concrete classes (preferrably final classes) implement the rest of the methods.</p>
</li>
<li>
<p>As of yet, extending an interface will break your clients code. This is especially important if you have released your API to the public. Extending means adding methods. You can, however, add non-abstract methods to classes without breaking your clients code.</p>
</li>
<li>
<p>You can only use Javas Dynamic Proxy API with interfaces, not classes.</p>
</li>
<li>
<p>Using an interface as the contract for some type used in a seemingly immutable class may be problematic. Then it actually is not immutable. For example, if someone creates a new interface extending that contract interface. This new interface could very well have a setter method as part of its contract. If it does, its contract practically states it is mutable. Adding an implementation of this new interface to a new instance of the immutable class, makes it possible to change the state of the immutable class indirectly.</p>
</li>
</ol>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/2</link>
        <pubDate>Fri, 12 Apr 2013 07:36:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-2</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
      <item>
        <title>Interface vs. Abstract class</title>
        <dc:creator><![CDATA[@xxxtilllyxxx xxxtilllyxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxxtilllyxxx">@xxxtilllyxxx</a> wrote:</p>
          <blockquote>
              <p>I’m getting back into programming as some of you might know. So I decided to start learning the basics. I have a question about abstraction. What is the REAL difference of an INTERFACE vs. an ABSTRACT class. What is the pros and cons of both? Why should one be used over another? Would someone mind explaining this to me?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803/1</link>
        <pubDate>Fri, 12 Apr 2013 01:37:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515803-1</guid>
        <source url="https://forum.moparisthebest.com/t/interface-vs-abstract-class/515803.rss">Interface vs. Abstract class</source>
      </item>
  </channel>
</rss>
