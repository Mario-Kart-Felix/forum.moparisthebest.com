<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Varied minigame</title>
    <link>https://forum.moparisthebest.com/t/varied-minigame/518387</link>
    <description>Basicals, this minigame changes mini-game types during the minigame (that made sense ;D).

Naming&#39;s a bit shit + this isn&#39;t finished:
[code]import java.util.HashMap;
import java.util.Map;

import org.game.npcs.NPCHandler;
import org.game.players.Client;

/**
 * 
 * @author Rhubarb/Int Bauk
 *
 */
public class Fighter {

	/**
	 * Stores the player in a map.
	 */
	private static Map&lt;Client, String&gt; playerHash = Collections.synchronizedMap(new HashMap&lt;Client, String&gt;());

    /**
     * Waiting room x coordinate.
     */
	private static final int WAITING_ROOM_X = 2500;
	/**
	 * Waiting room y coordinate.
	 */
	private static final int WAITING_ROOM_Y = 2500;
	/**
	 * Waiting room z coordinate.
	 */
	private static final int WAITING_ROOM_HEIGHT = 0;
	
	/**
	 * Reward given for winning.
	 */
	private static final int REWARD = 4151;
	/**
	 * Amount of reward given for winning.
	 */
	private static final int REWARD_AMOUNT = 5500000;
	
	/**
	 * Won message.
	 */
	private String WON_MESSAGE = &quot;Congratulations, you&#39;ve won!&quot;;
	
	/**
	 * The game state.
	 * 
	 *
	 */
	public enum GAME_STATE {
		NOT_PLAYING, PLAYING;
	}
	
	/**
	 * The game modes.
	 * 
	 *
	 */
	public enum MODES {
		FREE_FOR_ALL, KILL_NPCS, WILDERNESS;
		
		public String getFFA() {
			return &quot;KILL EVERYTHING: &quot;;
		}
		
		public String getKN() {
			return &quot;KILL ALL NPCS: &quot;;
		}
		
		public String getWilderness() {
			return &quot;KILL ALL PLAYERS: &quot;;
		}
		
	}
	
	/**
	 * Gets the specified modes: 
	 * FREE_FOR_ALL, KILL_NPCS, WILDERNESS; 
	 * @param client
	 */
	public static void getModes(Client client) {
		for (MODES modes : MODES.values()) {
			if(modes.FREE_FOR_ALL != null) {
				client.getPA().sendFrame126(modes.getFFA(), 4536);
			} else if(modes.KILL_NPCS != null) {
				client.getPA().sendFrame126(modes.getKN(), 4536);
			} else if(modes.WILDERNESS != null) {
				client.getPA().sendFrame126(modes.getWilderness(), 4536);
			}	
		}
	}

	/**
	 * Handles the modes via MODES enum.
	 * @param client
	 * @param mode
	 */
	public static void handleModes(Client client, MODES mode) {
		switch(mode) {
		case FREE_FOR_ALL:
			/**
			 * To do.
			 */
			break;
		case KILL_NPCS:
			getNPC(client);
			break;
		case WILDERNESS:
			client.inWild();
			break;
		}
	}
	
	/**
	 * Gets the player count.
	 * @param state
	 * @return
	 */
    public static int getListCount(String state) {
    	int count = 0;
    	for (String s: playerHash.values()) {
    		if(state == s) {
    			count++;
    			
    		}
    	}
    	return count;
    }
	
	/**
	 * Removes player from the minigame.
	 * @param client
	 * @param remove
	 */
	public static void removePlayer(Client client, boolean remove) {
		String state = playerHash.get(client);
		if(state == null) {
			client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
			return;
		}
		if(remove) {
			client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
			playerHash.remove(client);
			return;
		}
		if(state.equals(GAME_STATE.NOT_PLAYING)) {
			client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
		}
	}	
	
	/**
	 * Gets the winner.
	 * @param client
	 */
	public void getWinner(Client client) {
		String state = playerHash.get(client);
		if(state.equals(GAME_STATE.PLAYING)) {
			if (getListCount(state) - 1 == 0) {
				client.getItems().addItem(REWARD, REWARD_AMOUNT);
				client.sendMessage(WON_MESSAGE);
            }
		}
	}
	
	/**
	 * Spawns the npcs.
	 * @param client
	 */
	public static void getNPC(Client client) {
		NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
		NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
		NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
	}

}[/code]</description>
    
    <lastBuildDate>Mon, 06 May 2013 17:52:36 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/varied-minigame/518387.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Varied minigame</title>
        <dc:creator><![CDATA[@Cruel_Truth Cruel Truth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cruel_truth">@Cruel_Truth</a> wrote:</p>
          <blockquote>
              <p>I like the concept your trying to design, and enums only make it even more beautiful &lt;3</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/varied-minigame/518387/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/varied-minigame/518387/4</link>
        <pubDate>Mon, 06 May 2013 17:52:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518387-4</guid>
        <source url="https://forum.moparisthebest.com/t/varied-minigame/518387.rss">Varied minigame</source>
      </item>
      <item>
        <title>Varied minigame</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>looks so sofisticated for me but ty for contributing even if i dont understand a shit i knw its good</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/varied-minigame/518387/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/varied-minigame/518387/3</link>
        <pubDate>Thu, 02 May 2013 22:31:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518387-3</guid>
        <source url="https://forum.moparisthebest.com/t/varied-minigame/518387.rss">Varied minigame</source>
      </item>
      <item>
        <title>Varied minigame</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <p>Looks good <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/varied-minigame/518387/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/varied-minigame/518387/2</link>
        <pubDate>Thu, 02 May 2013 20:19:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518387-2</guid>
        <source url="https://forum.moparisthebest.com/t/varied-minigame/518387.rss">Varied minigame</source>
      </item>
      <item>
        <title>Varied minigame</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <p>Basicals, this minigame changes mini-game types during the minigame (that made sense ;D).</p>
<p>Naming’s a bit shit + this isn’t finished:</p>
<p>[code]import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.game.npcs.NPCHandler;<br>
import org.game.players.Client;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Rhubarb/Int Bauk</li>
<li>
</li>
</ul>
<p>*/<br>
public class Fighter {</p>
<pre><code>/**
 * Stores the player in a map.
 */
private static Map&lt;Client, String&gt; playerHash = Collections.synchronizedMap(new HashMap&lt;Client, String&gt;());

/**
 * Waiting room x coordinate.
 */
private static final int WAITING_ROOM_X = 2500;
/**
 * Waiting room y coordinate.
 */
private static final int WAITING_ROOM_Y = 2500;
/**
 * Waiting room z coordinate.
 */
private static final int WAITING_ROOM_HEIGHT = 0;

/**
 * Reward given for winning.
 */
private static final int REWARD = 4151;
/**
 * Amount of reward given for winning.
 */
private static final int REWARD_AMOUNT = 5500000;

/**
 * Won message.
 */
private String WON_MESSAGE = "Congratulations, you've won!";

/**
 * The game state.
 * 
 *
 */
public enum GAME_STATE {
	NOT_PLAYING, PLAYING;
}

/**
 * The game modes.
 * 
 *
 */
public enum MODES {
	FREE_FOR_ALL, KILL_NPCS, WILDERNESS;
	
	public String getFFA() {
		return "KILL EVERYTHING: ";
	}
	
	public String getKN() {
		return "KILL ALL NPCS: ";
	}
	
	public String getWilderness() {
		return "KILL ALL PLAYERS: ";
	}
	
}

/**
 * Gets the specified modes: 
 * FREE_FOR_ALL, KILL_NPCS, WILDERNESS; 
 * @param client
 */
public static void getModes(Client client) {
	for (MODES modes : MODES.values()) {
		if(modes.FREE_FOR_ALL != null) {
			client.getPA().sendFrame126(modes.getFFA(), 4536);
		} else if(modes.KILL_NPCS != null) {
			client.getPA().sendFrame126(modes.getKN(), 4536);
		} else if(modes.WILDERNESS != null) {
			client.getPA().sendFrame126(modes.getWilderness(), 4536);
		}	
	}
}

/**
 * Handles the modes via MODES enum.
 * @param client
 * @param mode
 */
public static void handleModes(Client client, MODES mode) {
	switch(mode) {
	case FREE_FOR_ALL:
		/**
		 * To do.
		 */
		break;
	case KILL_NPCS:
		getNPC(client);
		break;
	case WILDERNESS:
		client.inWild();
		break;
	}
}

/**
 * Gets the player count.
 * @param state
 * @return
 */
public static int getListCount(String state) {
	int count = 0;
	for (String s: playerHash.values()) {
		if(state == s) {
			count++;
			
		}
	}
	return count;
}

/**
 * Removes player from the minigame.
 * @param client
 * @param remove
 */
public static void removePlayer(Client client, boolean remove) {
	String state = playerHash.get(client);
	if(state == null) {
		client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
		return;
	}
	if(remove) {
		client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
		playerHash.remove(client);
		return;
	}
	if(state.equals(GAME_STATE.NOT_PLAYING)) {
		client.getPA().movePlayer(WAITING_ROOM_X, WAITING_ROOM_Y, WAITING_ROOM_HEIGHT);
	}
}	

/**
 * Gets the winner.
 * @param client
 */
public void getWinner(Client client) {
	String state = playerHash.get(client);
	if(state.equals(GAME_STATE.PLAYING)) {
		if (getListCount(state) - 1 == 0) {
			client.getItems().addItem(REWARD, REWARD_AMOUNT);
			client.sendMessage(WON_MESSAGE);
        }
	}
}

/**
 * Spawns the npcs.
 * @param client
 */
public static void getNPC(Client client) {
	NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
	NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
	NPCHandler.spawnNpc(client, 20, 2500, 2500, 0, 0, 100, 25, 250, 125, true, false);	
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/varied-minigame/518387/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/varied-minigame/518387/1</link>
        <pubDate>Thu, 02 May 2013 18:09:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518387-1</guid>
        <source url="https://forum.moparisthebest.com/t/varied-minigame/518387.rss">Varied minigame</source>
      </item>
  </channel>
</rss>
