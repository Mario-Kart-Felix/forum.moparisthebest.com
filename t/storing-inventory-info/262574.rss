<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Storing Inventory Info</title>
    <link>https://forum.moparisthebest.com/t/storing-inventory-info/262574</link>
    <description>Hello, I was just wondering if there was something similar to a Hashtable, or HashMap that can be used to story the inventory items, and amounts. I don&#39;t want to have to use int[]&#39;s. The problem with the HashMap or Hashtable, is that if you have an Item that doesn&#39;t stack, then you would have two different items, with the same ID, and the Hashmap interprets that as one item, and the last one, over writes the first. Like this:

[code]
HashTable&lt;Integer, Integer&gt; inventory = ...;

...

inventory.put(995, 999999999);
inventory.put(1175, 1);//Single chisel
inventory.put(1176, 999);//Staked chisels(perfectly fine)
inventory.put(1175, 1);//Another chisel
[/code]

what will happen is that instead of having 2 seperate chisels, the second would over write the first. So is there something similar to that, that doesn&#39;t have this issue?</description>
    
    <lastBuildDate>Tue, 17 Feb 2009 00:22:19 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/storing-inventory-info/262574.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Storing Inventory Info</title>
        <dc:creator><![CDATA[@xx_qwertyuiop_xx xx qwertyuiop xx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx_qwertyuiop_xx">@xx_qwertyuiop_xx</a> wrote:</p>
          <blockquote>
              <p>ArrayList&lt;ArrayList&gt;<br>
I don’t know. It’s all I can think of.<br>
The two inner ArrayLists can store the item ids and amounts respectively.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/storing-inventory-info/262574/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/storing-inventory-info/262574/2</link>
        <pubDate>Tue, 17 Feb 2009 00:22:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-262574-2</guid>
        <source url="https://forum.moparisthebest.com/t/storing-inventory-info/262574.rss">Storing Inventory Info</source>
      </item>
      <item>
        <title>Storing Inventory Info</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Hello, I was just wondering if there was something similar to a Hashtable, or HashMap that can be used to story the inventory items, and amounts. I don’t want to have to use int[]'s. The problem with the HashMap or Hashtable, is that if you have an Item that doesn’t stack, then you would have two different items, with the same ID, and the Hashmap interprets that as one item, and the last one, over writes the first. Like this:</p>
<pre><code class="lang-auto">HashTable&lt;Integer, Integer&gt; inventory = ...;

...

inventory.put(995, 999999999);
inventory.put(1175, 1);//Single chisel
inventory.put(1176, 999);//Staked chisels(perfectly fine)
inventory.put(1175, 1);//Another chisel</code></pre>
<p>what will happen is that instead of having 2 seperate chisels, the second would over write the first. So is there something similar to that, that doesn’t have this issue?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/storing-inventory-info/262574/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/storing-inventory-info/262574/1</link>
        <pubDate>Mon, 16 Feb 2009 20:14:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-262574-1</guid>
        <source url="https://forum.moparisthebest.com/t/storing-inventory-info/262574.rss">Storing Inventory Info</source>
      </item>
  </channel>
</rss>
