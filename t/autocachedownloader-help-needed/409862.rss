<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AutoCacheDownloader - Help Needed</title>
    <link>https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862</link>
    <description>Hello, well to load my client i need a cache right ? Im using ErasedPkz, And ive re-uploaded it to dl.dropbox.com and changed the links around but nothing seems to be happening it still doesn&#39;t download it. So if someone could help me it would be much apreciated here is my .java file named &quot;CacheDownloader&quot;

[code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 5; // Version of cache
	private String cacheLink = &quot;http://dl.dropbox.com/u/37988621/ErasedPkzcache1.zip&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/code]

I have also added the code you need to add to Client.java in the client.sided folder ?</description>
    
    <lastBuildDate>Sat, 13 Aug 2011 08:34:09 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>AutoCacheDownloader - Help Needed</title>
        <dc:creator><![CDATA[@DefinateX DefinateX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/definatex">@DefinateX</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="409862">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/aerialx/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> AerialX:</div>
<blockquote>
<p>Just download and extract it and put the folder in your C:\</p>
</blockquote>
</aside>
<p>Are you retarded ? Do you even know what a CacheDownloader does ???</p>
<p>It’s so you don’t have to do that. I need this to work so i can release the client to my players…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/3</link>
        <pubDate>Sat, 13 Aug 2011 08:34:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409862-3</guid>
        <source url="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862.rss">AutoCacheDownloader - Help Needed</source>
      </item>
      <item>
        <title>AutoCacheDownloader - Help Needed</title>
        <dc:creator><![CDATA[@AerialX AerialX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aerialx">@AerialX</a> wrote:</p>
          <blockquote>
              <p>Just download and extract it and put the folder in your C:\</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/2</link>
        <pubDate>Sat, 13 Aug 2011 08:28:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409862-2</guid>
        <source url="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862.rss">AutoCacheDownloader - Help Needed</source>
      </item>
      <item>
        <title>AutoCacheDownloader - Help Needed</title>
        <dc:creator><![CDATA[@DefinateX DefinateX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/definatex">@DefinateX</a> wrote:</p>
          <blockquote>
              <p>Hello, well to load my client i need a cache right ? Im using ErasedPkz, And ive re-uploaded it to <a href="http://dl.dropbox.com" rel="nofollow noopener">dl.dropbox.com</a> and changed the links around but nothing seems to be happening it still doesn’t download it. So if someone could help me it would be much apreciated here is my .java file named “CacheDownloader”</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

/*
 * Only things you need to change
 *
 */
private final int VERSION = 5; // Version of cache
private String cacheLink = "http://dl.dropbox.com/u/37988621/ErasedPkzcache1.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Downloading Cache Please wait...");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			//drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Finished downloading "+getArchivedName()+"!");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]</p>
<p>I have also added the code you need to add to Client.java in the client.sided folder ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862/1</link>
        <pubDate>Sat, 13 Aug 2011 08:26:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409862-1</guid>
        <source url="https://forum.moparisthebest.com/t/autocachedownloader-help-needed/409862.rss">AutoCacheDownloader - Help Needed</source>
      </item>
  </channel>
</rss>
