<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NPChandler blank source</title>
    <link>https://forum.moparisthebest.com/t/npchandler-blank-source/165493</link>
    <description>Ok so this is my NPChandle.java
[code]import java.io.*;
public class NPCHandler {
	public static int maxNPCs = 10000;
	public static int maxListedNPCs = 10000;
	public static int maxNPCDrops = 10000;
	public static NPC npcs[] = new NPC[maxNPCs];
	public static NPCList NpcList[] = new NPCList[maxListedNPCs];

	NPCHandler() {
		for(int i = 0; i &lt; maxNPCs; i++) {
			npcs[i] = null;
		}
		for(int i = 0; i &lt; maxListedNPCs; i++) {
			NpcList[i] = null;
		}

		loadNPCList(&quot;/CFG/npc.cfg&quot;);
		loadAutoSpawn(&quot;/CFG/autospawn.cfg&quot;);
	}
	public void newNPC(int npcType, int x, int y, int heightLevel, int rangex1, int rangey1, int rangex2, int rangey2, int WalkingType, int HP) {
		// first, search for a free slot
		int slot = -1;
		for (int i = 1; i &lt; maxNPCs; i++) {
			if (npcs[i] == null) {
				slot = i;
				break;
			}
		}

		if(slot == -1) return;		// no free slot found

		NPC newNPC = new NPC(slot, npcType);
		newNPC.absX = x;
		newNPC.absY = y;
		newNPC.makeX = x;
		newNPC.makeY = y;
		newNPC.moverangeX1 = rangex1;
		newNPC.moverangeY1 = rangey1;
		newNPC.moverangeX2 = rangex2;
		newNPC.moverangeY2 = rangey2;
		newNPC.walkingType = WalkingType;
		newNPC.HP = HP;
		newNPC.MaxHP = HP;
		newNPC.MaxHit = (int)Math.floor((HP / 10));
		if (newNPC.MaxHit &lt; 1) {
			newNPC.MaxHit = 1;
		}
		newNPC.heightLevel = heightLevel;
		npcs[slot] = newNPC;
	}
	public void newNPCList(int npcType, String npcName, int combat, int HP) {
		// first, search for a free slot
		int slot = -1;
		for (int i = 0; i &lt; maxListedNPCs; i++) {
			if (NpcList[i] == null) {
				slot = i;
				break;
			}
		}

		if(slot == -1) return;		// no free slot found

		NPCList newNPCList = new NPCList(npcType);
		newNPCList.npcName = npcName;
		newNPCList.npcCombat = combat;
		newNPCList.npcHealth = HP;
		NpcList[slot] = newNPCList;
	}
	 public boolean IsInWorldMap(int coordX, int coordY) {

                return true;

    }
    public boolean IsInWorldMap2(int coordX, int coordY) {

                return false;

    }
	public void process() {
		for (int i = 0; i &lt; maxNPCs; i++) {
			if (npcs[i] == null) continue;
			npcs[i].clearUpdateFlags();

		}
		for (int i = 0; i &lt; maxNPCs; i++) {
			if (npcs[i] != null) {
				if (npcs[i].actionTimer &gt; 0) {
					npcs[i].actionTimer--;
				}
				if (npcs[i].IsDead == false) {
					if (npcs[i].npcType == 1268 || npcs[i].npcType == 1266) {
						for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
							if (server.playerHandler.players[j] != null) {
								if (GoodDistance(npcs[i].absX, npcs[i].absY, server.playerHandler.players[j].absX, server.playerHandler.players[j].absY, 2) == true &amp;&amp; npcs[i].IsClose == false) {
									npcs[i].actionTimer = 10;
									npcs[i].IsClose = true;
								}
							}
						}
						if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].IsClose == true) {
							for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
								if (server.playerHandler.players[j] != null) {
									server.playerHandler.players[j].RebuildNPCList = true;
								}
							}
							int old1 = (npcs[i].npcType - 1);
							int old2 = npcs[i].makeX;
							int old3 = npcs[i].makeY;
							int old4 = npcs[i].heightLevel;
							int old5 = npcs[i].moverangeX1;
							int old6 = npcs[i].moverangeY1;
							int old7 = npcs[i].moverangeX2;
							int old8 = npcs[i].moverangeY2;
							int old9 = npcs[i].walkingType;
							int old10 = npcs[i].MaxHP;
							npcs[i] = null;
							newNPC(old1, old2, old3, old4, old5, old6, old7, old8, old9, old10);
						}

					}

				} else if (npcs[i].IsDead == true) {
					if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].DeadApply == false &amp;&amp; npcs[i].NeedRespawn == false) {

						npcs[i].updateRequired = true;
						npcs[i].animUpdateRequired = true;
						npcs[i].DeadApply = true;
						npcs[i].actionTimer = 10;
					} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].DeadApply == true &amp;&amp; npcs[i].NeedRespawn == false) {

						npcs[i].NeedRespawn = true;
						npcs[i].actionTimer = 60;
						npcs[i].absX = npcs[i].makeX;
						npcs[i].absY = npcs[i].makeY;
						npcs[i].HP = npcs[i].MaxHP;
						npcs[i].animNumber = 0x328;
						npcs[i].updateRequired = true;
						npcs[i].animUpdateRequired = true;
					} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].NeedRespawn == true) {
						for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
							if (server.playerHandler.players[j] != null) {
								server.playerHandler.players[j].RebuildNPCList = true;
							}
						}
						int old1 = npcs[i].npcType;
						if (old1 == 1267 ||old1 == 1265) {
							old1 += 1;
						}
						int old2 = npcs[i].makeX;
						int old3 = npcs[i].makeY;
						int old4 = npcs[i].heightLevel;
						int old5 = npcs[i].moverangeX1;
						int old6 = npcs[i].moverangeY1;
						int old7 = npcs[i].moverangeX2;
						int old8 = npcs[i].moverangeY2;
						int old9 = npcs[i].walkingType;
						int old10 = npcs[i].MaxHP;
						npcs[i] = null;
						newNPC(old1, old2, old3, old4, old5, old6, old7, old8, old9, old10);
					}
				}
			}
		}
	}
	public int GetNpcKiller(int NPCID) {
		int Killer = 0;
		int Count = 0;
		for (int i = 1; i &lt; server.playerHandler.maxPlayers; i++) {
			if (Killer == 0) {
				Killer = i;
				Count = 1;
			} else {
				if (npcs[NPCID].Killing[i] &gt; npcs[NPCID].Killing[Killer]) {
					Killer = i;
					Count = 1;
				} else if (npcs[NPCID].Killing[i] == npcs[NPCID].Killing[Killer]) {
					Count++;
				}
			}
		}
		if (Count &gt; 1 &amp;&amp; npcs[NPCID].Killing[npcs[NPCID].StartKilling] == npcs[NPCID].Killing[Killer]) {
			Killer = npcs[NPCID].StartKilling;
		}
		return Killer;
	}
	public int getLevelForXP(int exp) {
		int points = 0;
		int output = 0;

		for (int lvl = 1; lvl &lt;= 99; lvl++) {
			points += Math.floor((double)lvl + 300.0 * Math.pow(2.0, (double)lvl / 7.0));
			output = (int)Math.floor(points / 4);
			if (output &gt;= exp)
				return lvl;
		}
		return 0;
	}
	public boolean GoodDistance(int objectX, int objectY, int playerX, int playerY, int distance) {
		for (int i = 0; i &lt;= distance; i++) {
		  for (int j = 0; j &lt;= distance; j++) {
			if ((objectX + i) == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
				return true;
			} else if ((objectX - i) == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
				return true;
			} else if (objectX == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
				return true;
			}
		  }
		}
		return false;
	}
	public boolean loadAutoSpawn(String FileName) {
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String token2_2 = &quot;&quot;;
		String[] token3 = new String[10];
		boolean EndOfFile = false;
		int ReadMode = 0;
		BufferedReader characterfile = null;
		try {
			characterfile = new BufferedReader(new FileReader(&quot;./&quot;+FileName));
		} catch(FileNotFoundException fileex) {
			misc.println(FileName+&quot;: file not found.&quot;);
			return false;
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception) {
			misc.println(FileName+&quot;: error loading file.&quot;);
			return false;
		}
		while(EndOfFile == false &amp;&amp; line != null) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token3 = token2_2.split(&quot;\t&quot;);
				if (token.equals(&quot;spawn&quot;)) {
					newNPC(Integer.parseInt(token3[0]), Integer.parseInt(token3[1]), Integer.parseInt(token3[2]), Integer.parseInt(token3[3]), Integer.parseInt(token3[4]), Integer.parseInt(token3[5]), Integer.parseInt(token3[6]), Integer.parseInt(token3[7]), Integer.parseInt(token3[8]), GetNpcListHP(Integer.parseInt(token3[0])));
				}
			} else {
				if (line.equals(&quot;[ENDOFSPAWNLIST]&quot;)) {
					try { characterfile.close(); } catch(IOException ioexception) { }
					return true;
				}
			}
			try {
				line = characterfile.readLine();
			} catch(IOException ioexception1) { EndOfFile = true; }
		}
		try { characterfile.close(); } catch(IOException ioexception) { }
		return false;
	}

	public int GetNpcListHP(int NpcID) {
		for (int i = 0; i &lt; maxListedNPCs; i++) {
			if (NpcList[i] != null) {
				if (NpcList[i].npcId == NpcID) {
					return NpcList[i].npcHealth;
				}
			}
		}
		return 0;
	}
	public boolean loadNPCList(String FileName) {
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String token2_2 = &quot;&quot;;
		String[] token3 = new String[10];
		boolean EndOfFile = false;
		int ReadMode = 0;
		BufferedReader characterfile = null;
		try {
			characterfile = new BufferedReader(new FileReader(&quot;./&quot;+FileName));
		} catch(FileNotFoundException fileex) {
			misc.println(FileName+&quot;: file not found.&quot;);
			return false;
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception) {
			misc.println(FileName+&quot;: error loading file.&quot;);
			return false;
		}
		while(EndOfFile == false &amp;&amp; line != null) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token3 = token2_2.split(&quot;\t&quot;);
				if (token.equals(&quot;npc&quot;)) {
					newNPCList(Integer.parseInt(token3[0]), token3[1], Integer.parseInt(token3[2]), Integer.parseInt(token3[3]));
				}
			} else {
				if (line.equals(&quot;[ENDOFNPCLIST]&quot;)) {
					try { characterfile.close(); } catch(IOException ioexception) { }
					return true;
				}
			}
			try {
				line = characterfile.readLine();
			} catch(IOException ioexception1) { EndOfFile = true; }
		}
		try { characterfile.close(); } catch(IOException ioexception) { }
		return false;
	}
}[/code]
I have an autospawn for NPC 1552 (santa). I need to know where to put the code to make him talk and I need to know what the code is. Its entirely a blank source besides the server. Its Project ID</description>
    
    <lastBuildDate>Mon, 17 Dec 2007 22:35:11 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/npchandler-blank-source/165493.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NPChandler blank source</title>
        <dc:creator><![CDATA[@Amerks5 Amerks5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/amerks5">@Amerks5</a> wrote:</p>
          <blockquote>
              <p>Hmm I get 21 errors…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npchandler-blank-source/165493/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npchandler-blank-source/165493/3</link>
        <pubDate>Mon, 17 Dec 2007 22:35:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-165493-3</guid>
        <source url="https://forum.moparisthebest.com/t/npchandler-blank-source/165493.rss">NPChandler blank source</source>
      </item>
      <item>
        <title>NPChandler blank source</title>
        <dc:creator><![CDATA[@Coder_X Coder X]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coder_x">@Coder_X</a> wrote:</p>
          <blockquote>
              <p>(Not 100% sure on this, but worth a shot)</p>
<p>After,     slot = i;<br>
break;</p>
<p>Add:</p>
<p><code>}
											else if (npcs[i].npcType == 1552)
					{
						if (misc.random2(50) &lt;= 3) //this is the time delay
						{
							npcs[i].updateRequired = true;
							npcs[i].textUpdateRequired = true;
							npcs[i].textUpdate = "sell rares woot!!!!!";
							}</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npchandler-blank-source/165493/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npchandler-blank-source/165493/2</link>
        <pubDate>Mon, 17 Dec 2007 22:26:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-165493-2</guid>
        <source url="https://forum.moparisthebest.com/t/npchandler-blank-source/165493.rss">NPChandler blank source</source>
      </item>
      <item>
        <title>NPChandler blank source</title>
        <dc:creator><![CDATA[@Amerks5 Amerks5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/amerks5">@Amerks5</a> wrote:</p>
          <blockquote>
              <p>Ok so this is my NPChandle.java</p>
<p>[code]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
public class NPCHandler {<br>
public static int maxNPCs = 10000;<br>
public static int maxListedNPCs = 10000;<br>
public static int maxNPCDrops = 10000;<br>
public static NPC npcs[] = new NPC[maxNPCs];<br>
public static NPCList NpcList[] = new NPCList[maxListedNPCs];</p>
<pre><code>NPCHandler() {
	for(int i = 0; i &lt; maxNPCs; i++) {
		npcs[i] = null;
	}
	for(int i = 0; i &lt; maxListedNPCs; i++) {
		NpcList[i] = null;
	}

	loadNPCList("/CFG/npc.cfg");
	loadAutoSpawn("/CFG/autospawn.cfg");
}
public void newNPC(int npcType, int x, int y, int heightLevel, int rangex1, int rangey1, int rangex2, int rangey2, int WalkingType, int HP) {
	// first, search for a free slot
	int slot = -1;
	for (int i = 1; i &lt; maxNPCs; i++) {
		if (npcs[i] == null) {
			slot = i;
			break;
		}
	}

	if(slot == -1) return;		// no free slot found

	NPC newNPC = new NPC(slot, npcType);
	newNPC.absX = x;
	newNPC.absY = y;
	newNPC.makeX = x;
	newNPC.makeY = y;
	newNPC.moverangeX1 = rangex1;
	newNPC.moverangeY1 = rangey1;
	newNPC.moverangeX2 = rangex2;
	newNPC.moverangeY2 = rangey2;
	newNPC.walkingType = WalkingType;
	newNPC.HP = HP;
	newNPC.MaxHP = HP;
	newNPC.MaxHit = (int)Math.floor((HP / 10));
	if (newNPC.MaxHit &lt; 1) {
		newNPC.MaxHit = 1;
	}
	newNPC.heightLevel = heightLevel;
	npcs[slot] = newNPC;
}
public void newNPCList(int npcType, String npcName, int combat, int HP) {
	// first, search for a free slot
	int slot = -1;
	for (int i = 0; i &lt; maxListedNPCs; i++) {
		if (NpcList[i] == null) {
			slot = i;
			break;
		}
	}

	if(slot == -1) return;		// no free slot found

	NPCList newNPCList = new NPCList(npcType);
	newNPCList.npcName = npcName;
	newNPCList.npcCombat = combat;
	newNPCList.npcHealth = HP;
	NpcList[slot] = newNPCList;
}
 public boolean IsInWorldMap(int coordX, int coordY) {

            return true;

}
public boolean IsInWorldMap2(int coordX, int coordY) {

            return false;

}
public void process() {
	for (int i = 0; i &lt; maxNPCs; i++) {
		if (npcs[i] == null) continue;
		npcs[i].clearUpdateFlags();

	}
	for (int i = 0; i &lt; maxNPCs; i++) {
		if (npcs[i] != null) {
			if (npcs[i].actionTimer &gt; 0) {
				npcs[i].actionTimer--;
			}
			if (npcs[i].IsDead == false) {
				if (npcs[i].npcType == 1268 || npcs[i].npcType == 1266) {
					for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
						if (server.playerHandler.players[j] != null) {
							if (GoodDistance(npcs[i].absX, npcs[i].absY, server.playerHandler.players[j].absX, server.playerHandler.players[j].absY, 2) == true &amp;&amp; npcs[i].IsClose == false) {
								npcs[i].actionTimer = 10;
								npcs[i].IsClose = true;
							}
						}
					}
					if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].IsClose == true) {
						for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
							if (server.playerHandler.players[j] != null) {
								server.playerHandler.players[j].RebuildNPCList = true;
							}
						}
						int old1 = (npcs[i].npcType - 1);
						int old2 = npcs[i].makeX;
						int old3 = npcs[i].makeY;
						int old4 = npcs[i].heightLevel;
						int old5 = npcs[i].moverangeX1;
						int old6 = npcs[i].moverangeY1;
						int old7 = npcs[i].moverangeX2;
						int old8 = npcs[i].moverangeY2;
						int old9 = npcs[i].walkingType;
						int old10 = npcs[i].MaxHP;
						npcs[i] = null;
						newNPC(old1, old2, old3, old4, old5, old6, old7, old8, old9, old10);
					}

				}

			} else if (npcs[i].IsDead == true) {
				if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].DeadApply == false &amp;&amp; npcs[i].NeedRespawn == false) {

					npcs[i].updateRequired = true;
					npcs[i].animUpdateRequired = true;
					npcs[i].DeadApply = true;
					npcs[i].actionTimer = 10;
				} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].DeadApply == true &amp;&amp; npcs[i].NeedRespawn == false) {

					npcs[i].NeedRespawn = true;
					npcs[i].actionTimer = 60;
					npcs[i].absX = npcs[i].makeX;
					npcs[i].absY = npcs[i].makeY;
					npcs[i].HP = npcs[i].MaxHP;
					npcs[i].animNumber = 0x328;
					npcs[i].updateRequired = true;
					npcs[i].animUpdateRequired = true;
				} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].NeedRespawn == true) {
					for (int j = 1; j &lt; server.playerHandler.maxPlayers; j++) {
						if (server.playerHandler.players[j] != null) {
							server.playerHandler.players[j].RebuildNPCList = true;
						}
					}
					int old1 = npcs[i].npcType;
					if (old1 == 1267 ||old1 == 1265) {
						old1 += 1;
					}
					int old2 = npcs[i].makeX;
					int old3 = npcs[i].makeY;
					int old4 = npcs[i].heightLevel;
					int old5 = npcs[i].moverangeX1;
					int old6 = npcs[i].moverangeY1;
					int old7 = npcs[i].moverangeX2;
					int old8 = npcs[i].moverangeY2;
					int old9 = npcs[i].walkingType;
					int old10 = npcs[i].MaxHP;
					npcs[i] = null;
					newNPC(old1, old2, old3, old4, old5, old6, old7, old8, old9, old10);
				}
			}
		}
	}
}
public int GetNpcKiller(int NPCID) {
	int Killer = 0;
	int Count = 0;
	for (int i = 1; i &lt; server.playerHandler.maxPlayers; i++) {
		if (Killer == 0) {
			Killer = i;
			Count = 1;
		} else {
			if (npcs[NPCID].Killing[i] &gt; npcs[NPCID].Killing[Killer]) {
				Killer = i;
				Count = 1;
			} else if (npcs[NPCID].Killing[i] == npcs[NPCID].Killing[Killer]) {
				Count++;
			}
		}
	}
	if (Count &gt; 1 &amp;&amp; npcs[NPCID].Killing[npcs[NPCID].StartKilling] == npcs[NPCID].Killing[Killer]) {
		Killer = npcs[NPCID].StartKilling;
	}
	return Killer;
}
public int getLevelForXP(int exp) {
	int points = 0;
	int output = 0;

	for (int lvl = 1; lvl &lt;= 99; lvl++) {
		points += Math.floor((double)lvl + 300.0 * Math.pow(2.0, (double)lvl / 7.0));
		output = (int)Math.floor(points / 4);
		if (output &gt;= exp)
			return lvl;
	}
	return 0;
}
public boolean GoodDistance(int objectX, int objectY, int playerX, int playerY, int distance) {
	for (int i = 0; i &lt;= distance; i++) {
	  for (int j = 0; j &lt;= distance; j++) {
		if ((objectX + i) == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
			return true;
		} else if ((objectX - i) == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
			return true;
		} else if (objectX == playerX &amp;&amp; ((objectY + j) == playerY || (objectY - j) == playerY || objectY == playerY)) {
			return true;
		}
	  }
	}
	return false;
}
public boolean loadAutoSpawn(String FileName) {
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[10];
	boolean EndOfFile = false;
	int ReadMode = 0;
	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader("./"+FileName));
	} catch(FileNotFoundException fileex) {
		misc.println(FileName+": file not found.");
		return false;
	}
	try {
		line = characterfile.readLine();
	} catch(IOException ioexception) {
		misc.println(FileName+": error loading file.");
		return false;
	}
	while(EndOfFile == false &amp;&amp; line != null) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("spawn")) {
				newNPC(Integer.parseInt(token3[0]), Integer.parseInt(token3[1]), Integer.parseInt(token3[2]), Integer.parseInt(token3[3]), Integer.parseInt(token3[4]), Integer.parseInt(token3[5]), Integer.parseInt(token3[6]), Integer.parseInt(token3[7]), Integer.parseInt(token3[8]), GetNpcListHP(Integer.parseInt(token3[0])));
			}
		} else {
			if (line.equals("[ENDOFSPAWNLIST]")) {
				try { characterfile.close(); } catch(IOException ioexception) { }
				return true;
			}
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception1) { EndOfFile = true; }
	}
	try { characterfile.close(); } catch(IOException ioexception) { }
	return false;
}

public int GetNpcListHP(int NpcID) {
	for (int i = 0; i &lt; maxListedNPCs; i++) {
		if (NpcList[i] != null) {
			if (NpcList[i].npcId == NpcID) {
				return NpcList[i].npcHealth;
			}
		}
	}
	return 0;
}
public boolean loadNPCList(String FileName) {
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[10];
	boolean EndOfFile = false;
	int ReadMode = 0;
	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader("./"+FileName));
	} catch(FileNotFoundException fileex) {
		misc.println(FileName+": file not found.");
		return false;
	}
	try {
		line = characterfile.readLine();
	} catch(IOException ioexception) {
		misc.println(FileName+": error loading file.");
		return false;
	}
	while(EndOfFile == false &amp;&amp; line != null) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("npc")) {
				newNPCList(Integer.parseInt(token3[0]), token3[1], Integer.parseInt(token3[2]), Integer.parseInt(token3[3]));
			}
		} else {
			if (line.equals("[ENDOFNPCLIST]")) {
				try { characterfile.close(); } catch(IOException ioexception) { }
				return true;
			}
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception1) { EndOfFile = true; }
	}
	try { characterfile.close(); } catch(IOException ioexception) { }
	return false;
}
</code></pre>
<p>}[/code]<br>
I have an autospawn for NPC 1552 (santa). I need to know where to put the code to make him talk and I need to know what the code is. Its entirely a blank source besides the server. Its Project ID</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npchandler-blank-source/165493/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npchandler-blank-source/165493/1</link>
        <pubDate>Mon, 17 Dec 2007 22:11:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-165493-1</guid>
        <source url="https://forum.moparisthebest.com/t/npchandler-blank-source/165493.rss">NPChandler blank source</source>
      </item>
  </channel>
</rss>
