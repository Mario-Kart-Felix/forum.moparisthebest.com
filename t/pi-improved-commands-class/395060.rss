<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI]Improved Commands Class</title>
    <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060</link>
    <description>[b]Difficulty:[/b] -10/10
[b]Knowledge:[/b] The ability to copy &amp; paste, the ability to click buttons, the ability to open files.

First, replace your commands class with this:
[code]package server.model.players.packets;

import java.io.*;
import java.*;
import java.util.*;
import java.lang.*;
import java.text.*;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PacketType;
import server.model.players.Player;
import server.model.players.PlayerHandler;
import server.model.players.PlayerSave;
import server.model.players.PlayerAssistant;
import server.event.*;
import server.util.Misc;
import server.util.FileUtil;
import server.util.ScriptManager;

/**
 * Commands
 **/
public class Commands implements PacketType 
{

    
    @Override
    public void processPacket(Client c, int packetType, int packetSize) 
    {
    String playerCommand = c.getInStream().readString();
    if (Config.SERVER_DEBUG)
        Misc.println(c.playerName+&quot; playerCommand: &quot;+playerCommand);
    
    if (c.playerRights &gt;= 0)
        playerCommands(c, playerCommand);
    if (isModerator(c.playerName) || isAdministrator(c.playerName) || isOwner(c.playerName))
        moderatorCommands(c, playerCommand);
    if(isAdministrator(c.playerName) || isOwner(c.playerName))
        administratorCommands(c, playerCommand);
    if(isOwner(c.playerName))
        ownerCommands(c, playerCommand);
    }
	
	public boolean isModerator (String name) {
		for(String s: Config.MODERATORS)
		if(s.equalsIgnoreCase(name))
		return true;
		return false;
	}
	
	public boolean isAdministrator(String name) {
		for(String s: Config.ADMINISTRATORS)
		if(s.equalsIgnoreCase(name))
		return true;
		return false;
	}
	
	public boolean isOwner(String name) {
		for(String s: Config.OWNER)
		if(s.equalsIgnoreCase(name))
		return true;
		return false;
	}


    
    public void playerCommands(Client c, String playerCommand)
    {
	/*
	 * Basic Player Commands - Players, Changepassword, Yell
	 **/
	if (playerCommand.equalsIgnoreCase(&quot;players&quot;)) 
	{
		c.sendMessage(&quot;There are currently &quot;+PlayerHandler.getPlayerCount()+ &quot; players online.&quot;);
	}

	if (playerCommand.startsWith(&quot;changepassword&quot;) &amp;&amp; playerCommand.length() &gt; 15) 
	{
		c.playerPass = playerCommand.substring(15);
		c.sendMessage(&quot;Your password is now: &quot; + c.playerPass);			
	}
	
			/*if (playerCommand.startsWith(&quot;yell&quot;)) {
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						
							
							if (c.isDonator == 1 &amp;&amp; (c.playerRights &lt; 1 || c.playerRights &gt; 3)){
								c2.sendMessage(&quot;&lt;shad=6081134&gt;[Donator]&lt;/col&gt;&lt;img=0&gt;&quot;+ Misc.optimizeText(c.playerName) +&quot;: &quot;
												+ Misc.optimizeText(playerCommand.substring(5)) +&quot;&quot;);
							}else if (c.playerRights == 1){
								c2.sendMessage(&quot;&lt;col=255&gt;[Mod]&lt;/col&gt;&lt;img=1&gt;&quot;+ Misc.optimizeText(c.playerName) +&quot;: &quot;
												+ Misc.optimizeText(playerCommand.substring(5)) +&quot;&quot;);
							}else if (c.playerRights == 2){
								c2.sendMessage(&quot;&lt;col=255&gt;[Admin]&lt;/col&gt;&lt;img=2&gt;&quot;+ Misc.optimizeText(c.playerName) +&quot;: &quot;
												+ Misc.optimizeText(playerCommand.substring(5)) +&quot;&quot;);
							}else if (c.playerRights == 3){
								c2.sendMessage(&quot;&lt;shad=15695415&gt;[Owner]&lt;/col&gt;&lt;img=2&gt;&quot;+ Misc.optimizeText(c.playerName) +&quot;: &quot;
												+ Misc.optimizeText(playerCommand.substring(5)) +&quot;&quot;);
							}else if (c.playerRights == 0 &amp;&amp; c.isDonator == 0){
								c.sendMessage(&quot;You must be a donator to use this command!&quot;);
									
							}
						}
					}
				}*/
    }
    
    public void moderatorCommands(Client c, String playerCommand)
    {
	/*
	 * Basic Staff Commands - Ban, Mute, Kick, Un-Ban, Un-Mute
	 **/
	 		if (playerCommand.startsWith(&quot;ban&quot;) &amp;&amp; playerCommand.charAt(3) == &#39; &#39;) 
			{
				try {	
					String playerToBan = playerCommand.substring(4);
					Connection.addNameToBanList(playerToBan);
					Connection.addNameToFile(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
						Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot; &quot; +c2.playerName+ &quot; Got Banned By &quot; + c.playerName+ &quot;.&quot;);
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;mute&quot;)) 
			{
				try {	
					String playerToMute = playerCommand.substring(5);
					if(!Connection.isNameMuted(playerToMute)) {
						Connection.addNameToMuteList(playerToMute);
						Connection.addUserToFile(playerToMute);
						c.sendMessage(&quot;You have muted &quot;+playerToMute+&quot;.&quot;);
						int id = PlayerHandler.getPlayerID(playerToMute);
						Client client = (Client) Server.playerHandler.players[id];
						client.sendMessage(&quot;You have been temporarily muted for breaking the rules.&quot;);
					} else {
						c.sendMessage(playerToMute+&quot; is already muted.&quot;);
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;kick&quot;) &amp;&amp; playerCommand.charAt(4) == &#39; &#39;) 
			{
				try {	
					String playerToBan = playerCommand.substring(5);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

			if (playerCommand.startsWith(&quot;unban&quot;)) 
			{
				try {	
					String playerToBan = playerCommand.substring(6);
					Connection.removeNameFromBanList(playerToBan);
					c.sendMessage(playerToBan + &quot; has been unbanned.&quot;);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

			if(playerCommand.startsWith(&quot;unmute&quot;)) 
			{
				try {
					String unmute = playerCommand.substring(7);
					if(Connection.isNameMuted(unmute)) {
						Connection.removeNameFromMuteList(unmute);
						c.sendMessage(&quot;You have unmuted &quot;+unmute+&quot;.&quot;);
						FileUtil util = new FileUtil();
						util.removeLineFromFile(&quot;./Data/mutes/mutes.txt&quot;, unmute);
						int id = PlayerHandler.getPlayerID(unmute);
						Client client = (Client) Server.playerHandler.players[id];
						client.sendMessage(&quot;You have been unmuted, please take the time to re-read&quot;);
						client.sendMessage(&quot;the rules so this doesn&#39;t happen again.&quot;);
					} else {
						c.sendMessage(unmute+&quot; is not muted.&quot;);
					}
				} catch (Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
        
    }
    
    public void administratorCommands(Client c, String playerCommand)
    {
	/*
	 * Staff Commands - Ipmute, Ipban, Un-Ipmute,
	 **/
    	if (playerCommand.startsWith(&quot;ipmute&quot;)) 
			{
				try {	
				String playerToBan = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if(Server.playerHandler.players[i] != null) {
				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
				Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
				c.sendMessage(&quot;You have IP Muted the user: &quot;+Server.playerHandler.players[i].playerName);
				Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								c2.sendMessage(&quot; &quot; +c2.playerName+ &quot; Got IpMuted By &quot; + c.playerName+ &quot;.&quot;);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}	
			}
			
			if (playerCommand.startsWith(&quot;ipban&quot;)) 
			{
				try {
					String playerToBan = playerCommand.substring(6);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
								Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP banned the user: &quot;+Server.playerHandler.players[i].playerName+&quot; with the host: &quot;+Server.playerHandler.players[i].connectedFrom);
						Client c2 = (Client)Server.playerHandler.players[i];
								Server.playerHandler.players[i].disconnected = true;
								c2.sendMessage(&quot; &quot; +c2.playerName+ &quot; Got IpBanned By &quot; + c.playerName+ &quot;.&quot;);
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
	
			if (playerCommand.startsWith(&quot;unipmute&quot;)) 
			{
				try {	
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
						}			
			}
			
	/*
	 * Staff Teleportation Commands - Tele, Xteleto, Xteletome, Alltome
	 **/
			
			if (playerCommand.startsWith(&quot;tele&quot;)) 
			{
				String[] arg = playerCommand.split(&quot; &quot;);
				if (arg.length &gt; 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
				else if (arg.length == 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
			}
			
			if (playerCommand.startsWith(&quot;xteleto&quot;)) 
			{
				String name = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
							c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
						}
					}
				}			
			}
			
			if (playerCommand.startsWith(&quot;xteletome&quot;)) 
			{
				try {	
					String playerToTele = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToTele)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been teleported to &quot; + c.playerName);
								c2.getPA().movePlayer(c.getX(), c.getY(), c.heightLevel);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.equals(&quot;alltome&quot;)) 
			{
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
					c2.teleportToX = c.absX;
                        		c2.teleportToY = c.absY;
                        		c2.heightLevel = c.heightLevel;
				c2.sendMessage(&quot;Mass teleport to: &quot; + c.playerName + &quot;&quot;);
					}
				}
			}
			
	/*
	 * Other Staff Commands - Object, Npc, Anim, Gfx, Interface, Mypos
	 **/
			
			if (playerCommand.startsWith(&quot;object&quot;)) 
			{
				String[] args = playerCommand.split(&quot; &quot;);				
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
			}
			
			if(playerCommand.startsWith(&quot;npc&quot;)) 
			{
				try {
					int newNPC = Integer.parseInt(playerCommand.substring(4));
					if(newNPC &gt; 0) {
						Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
						c.sendMessage(&quot;You spawn a Npc.&quot;);
					} else {
						c.sendMessage(&quot;No such NPC.&quot;);
					}
				} catch(Exception e) {
					
				}			
			}
			
			if (playerCommand.startsWith(&quot;anim&quot;)) 
			{
				String[] args = playerCommand.split(&quot; &quot;);
				c.startAnimation(Integer.parseInt(args[1]));
				c.getPA().requestUpdates();
			}
			
			if (playerCommand.startsWith(&quot;gfx&quot;)) 
			{
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
			}
			
			if (playerCommand.startsWith(&quot;interface&quot;)) 
			{
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().showInterface(Integer.parseInt(args[1]));
			}	
			
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;)) 
			{
				c.sendMessage(&quot;X: &quot;+c.absX+&quot; Y: &quot;+c.absY+&quot; H: &quot;+c.heightLevel);
			}	

	/*
	 * Other Staff Commands - Master, Item, Special, Bank
	 **/
	 
	 		if (playerCommand.equalsIgnoreCase(&quot;master&quot;)) 
			{
				for (int i = 0; i &lt; 22; i++) {
					c.playerLevel[i] = 99;
					c.playerXP[i] = c.getPA().getXPForLevel(100);
					c.getPA().refreshSkill(i);	
				}
				c.getPA().requestUpdates();
			}
			
			if (playerCommand.startsWith(&quot;item&quot;)) 
			{
				try {
					String[] args = playerCommand.split(&quot; &quot;);
					if (args.length == 3) {
						int newItemID = Integer.parseInt(args[1]);
						int newItemAmount = Integer.parseInt(args[2]);
						if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
							c.getItems().addItem(newItemID, newItemAmount);		
						} else {
							c.sendMessage(&quot;That item ID does not exist.&quot;);
						}
					} else {
						c.sendMessage(&quot;Wrong usage: (Ex:(::pickup_ID_Amount)(::item 995 1))&quot;);
					}
				} catch(Exception e) {
					
				}
			} 
			
			if (playerCommand.startsWith(&quot;spec&quot;)) 
			{
				c.specAmount = 500.0;
			}
			
			if (playerCommand.equalsIgnoreCase(&quot;bank&quot;)) 
			{
				c.getPA().openUpBank();
			}
			
    }
    
    public void ownerCommands(Client c, String playerCommand)
    {
	/*
	 * Owner Givestaff Commands - Givedonator, Givemod, Giveadmin, Demote
	 **/

	 		if (playerCommand.startsWith(&quot;givedonor&quot;)) 
			{
				try {	
					String playerToMod = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given donator status by &quot; + c.playerName);
								c2.playerRights = 4;
								c2.logout();
								
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;givemod&quot;)) 
			{
				try {	
					String playerToMod = playerCommand.substring(8);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given mod status by &quot; + c.playerName);
								c2.playerRights = 1;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;giveadmin&quot;)) 
			{
				try {	
					String playerToAdmin = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToAdmin)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given admin status by &quot; + c.playerName);
								c2.playerRights = 2;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
			if (playerCommand.startsWith(&quot;demote&quot;)) 
			{
				try {	
					String playerToDemote = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToDemote)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been demoted by &quot; + c.playerName);
								c2.playerRights = 0;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			
	/*
	 * Owner Server Commands - Update, Reloadspawns
	 **/     

			if (playerCommand.startsWith(&quot;update&quot;)) 
			{
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				PlayerHandler.updateSeconds = a;
				PlayerHandler.updateAnnounced = false;
				PlayerHandler.updateRunning = true;
				PlayerHandler.updateStartTime = System.currentTimeMillis();
			}

			if (playerCommand.startsWith(&quot;reloadspawns&quot;)) 
			{
				Server.npcHandler = null;
				Server.npcHandler = new server.model.npcs.NPCHandler();
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(&quot;&lt;shad=15695415&gt;[&quot; + c.playerName + &quot;] &quot; + &quot;NPC Spawns have been reloaded.&lt;/col&gt;&quot;);
					}
				}

			}
			
	}
	/*
	 * End of Commands Class
	 **/
}[/code]
This is just the cleaned class, better conventions, and instead of loading via player rights it loads whether or not you are declared a staff in Config class.

Then go into Config class and add these somewhere:
[code]	public static final String[] MODERATORS = {&quot;Demension&quot;};
	public static final String[] ADMINISTRATORS = {&quot;D B 0 W Z&quot;,&quot;Typoerased&quot;};
	public static final String[] OWNER = {&quot;Chris&quot;,&quot;Matt123337&quot;};[/code]
This is what the Command class loads, instead of player rights you have to be declared in here.
If you want what I did explained ask me.

[b]Credits:[/b]
100% Flying Spaghetti Monster</description>
    
    <lastBuildDate>Sun, 29 May 2011 15:20:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>Nice job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/10</link>
        <pubDate>Sun, 29 May 2011 15:20:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-10</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@lover854 lover854]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lover854">@lover854</a> wrote:</p>
          <blockquote>
              <p><code>src\server\model\players\packets\Commands.java:20: cannot find symbol
symbol  : class FileUtil
location: package server.util
import server.util.FileUtil;
                  ^
src\server\model\players\packets\Commands.java:142: cannot find symbol
symbol  : method isNameMuted(java.lang.String)
location: class server.Connection
                                        if(!Connection.isNameMuted(playerToMute)
) {
                                                      ^
src\server\model\players\packets\Commands.java:146: cannot find symbol
symbol  : method getPlayerID(java.lang.String)
location: class server.model.players.PlayerHandler
                                                int id = PlayerHandler.getPlayer
ID(playerToMute);
                                                                      ^
src\server\model\players\packets\Commands.java:188: cannot find symbol
symbol  : method isNameMuted(java.lang.String)
location: class server.Connection
                                        if(Connection.isNameMuted(unmute)) {
                                                     ^
src\server\model\players\packets\Commands.java:191: cannot find symbol
symbol  : class FileUtil
location: class server.model.players.packets.Commands
                                                FileUtil util = new FileUtil();
                                                ^
src\server\model\players\packets\Commands.java:191: cannot find symbol
symbol  : class FileUtil
location: class server.model.players.packets.Commands
                                                FileUtil util = new FileUtil();
                                                                    ^
src\server\model\players\packets\Commands.java:193: cannot find symbol
symbol  : method getPlayerID(java.lang.String)
location: class server.model.players.PlayerHandler
                                                int id = PlayerHandler.getPlayer
ID(unmute);
                                                                      ^
Note: Some input files use unchecked or unsafe operations.
Note: Recompile with -Xlint:unchecked for details.
7 errors
Druk op een toets om door te gaan. . .</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/9</link>
        <pubDate>Sun, 29 May 2011 14:37:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-9</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@Mill Mill]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mill">@Mill</a> wrote:</p>
          <blockquote>
              <p>I have good commands. I have Donor, hidden, and VIP</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/8</link>
        <pubDate>Fri, 27 May 2011 22:25:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-8</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>Isn’t this just the design from Hybrid Pvp or did the guy in credits give to Hybrid Pvp?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/7</link>
        <pubDate>Fri, 27 May 2011 21:35:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-7</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@Mill Mill]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mill">@Mill</a> wrote:</p>
          <blockquote>
              <p>What is the big difference?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/6</link>
        <pubDate>Fri, 27 May 2011 21:32:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“itai, post:4, topic:395060”][quote author=ExtremeX-Scape™ link=topic=492250.msg3599556#msg3599556 date=1305429274]<br>
Not bad, could be better, but instead of replacing all of our commands, why don’t you only give the imports, and this</p>
<p>[code=java]    if (c.playerRights &gt;= 0)<br>
playerCommands(c, playerCommand);<br>
if (isModerator(c.playerName) || isAdministrator(c.playerName) || isOwner(c.playerName))<br>
moderatorCommands(c, playerCommand);<br>
if(isAdministrator(c.playerName) || isOwner(c.playerName))<br>
administratorCommands(c, playerCommand);<br>
if(isOwner(c.playerName))<br>
ownerCommands(c, playerCommand);<br>
}</p>
<pre><code>    public boolean isModerator (String name) {
            for(String s: Config.MODERATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isAdministrator(String name) {
            for(String s: Config.ADMINISTRATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isOwner(String name) {
            for(String s: Config.OWNER)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }[/code]
</code></pre>
<p>&amp; not the voids<code>public void playerCommands(Client c, String playerCommand)</code><br>
so people actually learn something by figuring out what void they need to put over what command,<br>
also Snippet.<br>
[/quote]<br>
Because if someone gets errors they can fix, if they only want that they can only use that. But I released the whole thing because some will find uses for parts of it, others will find uses for all of it, and thanks :P[/quote]<br>
You’re welcome.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/5</link>
        <pubDate>Sun, 15 May 2011 03:18:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@itai itai]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/itai">@itai</a> wrote:</p>
          <blockquote>
              <p>[quote=“ExtremeX-Scape™, post:3, topic:395060”]Not bad, could be better, but instead of replacing all of our commands, why don’t you only give the imports, and this</p>
<p>[code=java]    if (c.playerRights &gt;= 0)<br>
playerCommands(c, playerCommand);<br>
if (isModerator(c.playerName) || isAdministrator(c.playerName) || isOwner(c.playerName))<br>
moderatorCommands(c, playerCommand);<br>
if(isAdministrator(c.playerName) || isOwner(c.playerName))<br>
administratorCommands(c, playerCommand);<br>
if(isOwner(c.playerName))<br>
ownerCommands(c, playerCommand);<br>
}</p>
<pre><code>    public boolean isModerator (String name) {
            for(String s: Config.MODERATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isAdministrator(String name) {
            for(String s: Config.ADMINISTRATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isOwner(String name) {
            for(String s: Config.OWNER)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }[/code]
</code></pre>
<p>&amp; not the voids<code>public void playerCommands(Client c, String playerCommand)</code><br>
so people actually learn something by figuring out what void they need to put over what command,<br>
also Snippet.[/quote]<br>
Because if someone gets errors they can fix, if they only want that they can only use that. But I released the whole thing because some will find uses for parts of it, others will find uses for all of it, and thanks <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/4</link>
        <pubDate>Sun, 15 May 2011 03:16:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Not bad, could be better, but instead of replacing all of our commands, why don’t you only give the imports, and this</p>
<p>[code=java]    if (c.playerRights &gt;= 0)<br>
playerCommands(c, playerCommand);<br>
if (isModerator(c.playerName) || isAdministrator(c.playerName) || isOwner(c.playerName))<br>
moderatorCommands(c, playerCommand);<br>
if(isAdministrator(c.playerName) || isOwner(c.playerName))<br>
administratorCommands(c, playerCommand);<br>
if(isOwner(c.playerName))<br>
ownerCommands(c, playerCommand);<br>
}</p>
<pre><code>    public boolean isModerator (String name) {
            for(String s: Config.MODERATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isAdministrator(String name) {
            for(String s: Config.ADMINISTRATORS)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }
    
    public boolean isOwner(String name) {
            for(String s: Config.OWNER)
            if(s.equalsIgnoreCase(name))
            return true;
            return false;
    }[/code]
</code></pre>
<p>&amp; not the voids<code>public void playerCommands(Client c, String playerCommand)</code><br>
so people actually learn something by figuring out what void they need to put over what command,<br>
also Snippet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/3</link>
        <pubDate>Sun, 15 May 2011 03:14:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@owner_nitro owner nitro]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/owner_nitro">@owner_nitro</a> wrote:</p>
          <blockquote>
              <p>Very nice I mite use thanks! Rep++<br>
FIRST POST WOOT! <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/2</link>
        <pubDate>Sun, 15 May 2011 03:07:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
      <item>
        <title>[PI]Improved Commands Class</title>
        <dc:creator><![CDATA[@itai itai]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/itai">@itai</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">Difficulty:</span> -10/10<br>
<span class="bbcode-b">Knowledge:</span> The ability to copy &amp; paste, the ability to click buttons, the ability to open files.</p>
<p>First, replace your commands class with this:</p>
<p>[code]package server.model.players.packets;</p>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import java.</em>;<br>
import java.util.<em>;<br>
import java.lang.</em>;<br>
import java.text.*;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.Player;<br>
import server.model.players.PlayerHandler;<br>
import server.model.players.PlayerSave;<br>
import server.model.players.PlayerAssistant;<br>
import server.event.*;<br>
import server.util.Misc;<br>
import server.util.FileUtil;<br>
import server.util.ScriptManager;</p>
<p>/**</p>
<ul>
<li>
<p>Commands<br>
**/<br>
public class Commands implements PacketType<br>
{</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize)<br>
{<br>
String playerCommand = c.getInStream().readString();<br>
if (Config.SERVER_DEBUG)<br>
Misc.println(c.playerName+" playerCommand: "+playerCommand);</p>
<p>if (c.playerRights &gt;= 0)<br>
playerCommands(c, playerCommand);<br>
if (isModerator(c.playerName) || isAdministrator(c.playerName) || isOwner(c.playerName))<br>
moderatorCommands(c, playerCommand);<br>
if(isAdministrator(c.playerName) || isOwner(c.playerName))<br>
administratorCommands(c, playerCommand);<br>
if(isOwner(c.playerName))<br>
ownerCommands(c, playerCommand);<br>
}</p>
<p>public boolean isModerator (String name) {<br>
for(String s: Config.MODERATORS)<br>
if(s.equalsIgnoreCase(name))<br>
return true;<br>
return false;<br>
}</p>
<p>public boolean isAdministrator(String name) {<br>
for(String s: Config.ADMINISTRATORS)<br>
if(s.equalsIgnoreCase(name))<br>
return true;<br>
return false;<br>
}</p>
<p>public boolean isOwner(String name) {<br>
for(String s: Config.OWNER)<br>
if(s.equalsIgnoreCase(name))<br>
return true;<br>
return false;<br>
}</p>
<p>public void playerCommands(Client c, String playerCommand)<br>
{<br>
/*</p>
<ul>
<li>Basic Player Commands - Players, Changepassword, Yell<br>
**/<br>
if (playerCommand.equalsIgnoreCase(“players”))<br>
{<br>
c.sendMessage("There are currently “+PlayerHandler.getPlayerCount()+ " players online.”);<br>
}</li>
</ul>
<p>if (playerCommand.startsWith(“changepassword”) &amp;&amp; playerCommand.length() &gt; 15)<br>
{<br>
c.playerPass = playerCommand.substring(15);<br>
c.sendMessage("Your password is now: " + c.playerPass);			<br>
}</p>
<pre><code> 	/*if (playerCommand.startsWith("yell")) {
 		for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
 			if (Server.playerHandler.players[j] != null) {
 				Client c2 = (Client)Server.playerHandler.players[j];
 				
 					
 					if (c.isDonator == 1 &amp;&amp; (c.playerRights &lt; 1 || c.playerRights &gt; 3)){
 						c2.sendMessage("&lt;shad=6081134&gt;[Donator]&lt;/col&gt;&lt;img=0&gt;"+ Misc.optimizeText(c.playerName) +": "
 										+ Misc.optimizeText(playerCommand.substring(5)) +"");
 					}else if (c.playerRights == 1){
 						c2.sendMessage("&lt;col=255&gt;[Mod]&lt;/col&gt;&lt;img=1&gt;"+ Misc.optimizeText(c.playerName) +": "
 										+ Misc.optimizeText(playerCommand.substring(5)) +"");
 					}else if (c.playerRights == 2){
 						c2.sendMessage("&lt;col=255&gt;[Admin]&lt;/col&gt;&lt;img=2&gt;"+ Misc.optimizeText(c.playerName) +": "
 										+ Misc.optimizeText(playerCommand.substring(5)) +"");
 					}else if (c.playerRights == 3){
 						c2.sendMessage("&lt;shad=15695415&gt;[Owner]&lt;/col&gt;&lt;img=2&gt;"+ Misc.optimizeText(c.playerName) +": "
 										+ Misc.optimizeText(playerCommand.substring(5)) +"");
 					}else if (c.playerRights == 0 &amp;&amp; c.isDonator == 0){
 						c.sendMessage("You must be a donator to use this command!");
 							
 					}
 				}
 			}
 		}*/
</code></pre>
<p>}</p>
<p>public void moderatorCommands(Client c, String playerCommand)<br>
{<br>
/*</p>
<ul>
<li>
<p>Basic Staff Commands - Ban, Mute, Kick, Un-Ban, Un-Mute<br>
**/<br>
if (playerCommand.startsWith(“ban”) &amp;&amp; playerCommand.charAt(3) == ’ ')<br>
{<br>
try {	<br>
String playerToBan = playerCommand.substring(4);<br>
Connection.addNameToBanList(playerToBan);<br>
Connection.addNameToFile(playerToBan);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {<br>
Server.playerHandler.players[i].disconnected = true;<br>
Client c2 = (Client)Server.playerHandler.players[i];<br>
c2.sendMessage(" " +c2.playerName+ " Got Banned By " + c.playerName+ “.”);<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}<br>
}</p>
<pre><code> if (playerCommand.startsWith("mute")) 
 {
 	try {	
 		String playerToMute = playerCommand.substring(5);
 		if(!Connection.isNameMuted(playerToMute)) {
 			Connection.addNameToMuteList(playerToMute);
 			Connection.addUserToFile(playerToMute);
 			c.sendMessage("You have muted "+playerToMute+".");
 			int id = PlayerHandler.getPlayerID(playerToMute);
 			Client client = (Client) Server.playerHandler.players[id];
 			client.sendMessage("You have been temporarily muted for breaking the rules.");
 		} else {
 			c.sendMessage(playerToMute+" is already muted.");
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}
 }
 
 if (playerCommand.startsWith("kick") &amp;&amp; playerCommand.charAt(4) == ' ') 
 {
 	try {	
 		String playerToBan = playerCommand.substring(5);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
 					Server.playerHandler.players[i].disconnected = true;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}
 }

 if (playerCommand.startsWith("unban")) 
 {
 	try {	
 		String playerToBan = playerCommand.substring(6);
 		Connection.removeNameFromBanList(playerToBan);
 		c.sendMessage(playerToBan + " has been unbanned.");
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}
 }

 if(playerCommand.startsWith("unmute")) 
 {
 	try {
 		String unmute = playerCommand.substring(7);
 		if(Connection.isNameMuted(unmute)) {
 			Connection.removeNameFromMuteList(unmute);
 			c.sendMessage("You have unmuted "+unmute+".");
 			FileUtil util = new FileUtil();
 			util.removeLineFromFile("./Data/mutes/mutes.txt", unmute);
 			int id = PlayerHandler.getPlayerID(unmute);
 			Client client = (Client) Server.playerHandler.players[id];
 			client.sendMessage("You have been unmuted, please take the time to re-read");
 			client.sendMessage("the rules so this doesn't happen again.");
 		} else {
 			c.sendMessage(unmute+" is not muted.");
 		}
 	} catch (Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}
 }
</code></pre>
</li>
</ul>
<p>}</p>
<p>public void administratorCommands(Client c, String playerCommand)<br>
{<br>
/*</p>
<ul>
<li>
<p>Staff Commands - Ipmute, Ipban, Un-Ipmute,<br>
**/<br>
if (playerCommand.startsWith(“ipmute”))<br>
{<br>
try {	<br>
String playerToBan = playerCommand.substring(7);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {<br>
Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);<br>
c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players[i].playerName);<br>
Client c2 = (Client)Server.playerHandler.players[i];<br>
c2.sendMessage(“You have been muted by: " + c.playerName);<br>
c2.sendMessage(” " +c2.playerName+ " Got IpMuted By " + c.playerName+ “.”);<br>
break;<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}	<br>
}</p>
<pre><code> if (playerCommand.startsWith("ipban")) 
 {
 	try {
 		String playerToBan = playerCommand.substring(6);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
 					Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
 					Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
 					c.sendMessage("You have IP banned the user: "+Server.playerHandler.players[i].playerName+" with the host: "+Server.playerHandler.players[i].connectedFrom);
 			Client c2 = (Client)Server.playerHandler.players[i];
 					Server.playerHandler.players[i].disconnected = true;
 					c2.sendMessage(" " +c2.playerName+ " Got IpBanned By " + c.playerName+ ".");
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}
 }

 if (playerCommand.startsWith("unipmute")) 
 {
 	try {	
 		String playerToBan = playerCommand.substring(9);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
 					Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
 					c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players[i].playerName);
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 			}			
 }
</code></pre>
</li>
</ul>
<p>/*</p>
<ul>
<li>
<p>Staff Teleportation Commands - Tele, Xteleto, Xteletome, Alltome<br>
**/</p>
<pre><code> if (playerCommand.startsWith("tele")) 
 {
 	String[] arg = playerCommand.split(" ");
 	if (arg.length &gt; 3)
 		c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
 	else if (arg.length == 3)
 		c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
 }
 
 if (playerCommand.startsWith("xteleto")) 
 {
 	String name = playerCommand.substring(8);
 	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 		if (Server.playerHandler.players[i] != null) {
 			if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
 				c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
 			}
 		}
 	}			
 }
 
 if (playerCommand.startsWith("xteletome")) 
 {
 	try {	
 		String playerToTele = playerCommand.substring(10);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToTele)) {
 					Client c2 = (Client)Server.playerHandler.players[i];
 					c2.sendMessage("You have been teleported to " + c.playerName);
 					c2.getPA().movePlayer(c.getX(), c.getY(), c.heightLevel);
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}			
 }
 
 if (playerCommand.equals("alltome")) 
 {
 	for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
 		if (Server.playerHandler.players[j] != null) {
 			Client c2 = (Client)Server.playerHandler.players[j];
 		c2.teleportToX = c.absX;
             		c2.teleportToY = c.absY;
             		c2.heightLevel = c.heightLevel;
 	c2.sendMessage("Mass teleport to: " + c.playerName + "");
 		}
 	}
 }
</code></pre>
</li>
</ul>
<p>/*</p>
<ul>
<li>
<p>Other Staff Commands - Object, Npc, Anim, Gfx, Interface, Mypos<br>
**/</p>
<pre><code> if (playerCommand.startsWith("object")) 
 {
 	String[] args = playerCommand.split(" ");				
 	c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
 }
 
 if(playerCommand.startsWith("npc")) 
 {
 	try {
 		int newNPC = Integer.parseInt(playerCommand.substring(4));
 		if(newNPC &gt; 0) {
 			Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
 			c.sendMessage("You spawn a Npc.");
 		} else {
 			c.sendMessage("No such NPC.");
 		}
 	} catch(Exception e) {
 		
 	}			
 }
 
 if (playerCommand.startsWith("anim")) 
 {
 	String[] args = playerCommand.split(" ");
 	c.startAnimation(Integer.parseInt(args[1]));
 	c.getPA().requestUpdates();
 }
 
 if (playerCommand.startsWith("gfx")) 
 {
 	String[] args = playerCommand.split(" ");
 	c.gfx0(Integer.parseInt(args[1]));
 }
 
 if (playerCommand.startsWith("interface")) 
 {
 	String[] args = playerCommand.split(" ");
 	c.getPA().showInterface(Integer.parseInt(args[1]));
 }	
 
 if (playerCommand.equalsIgnoreCase("mypos")) 
 {
 	c.sendMessage("X: "+c.absX+" Y: "+c.absY+" H: "+c.heightLevel);
 }	
</code></pre>
</li>
</ul>
<p>/*</p>
<ul>
<li>
<p>Other Staff Commands - Master, Item, Special, Bank<br>
**/</p>
<pre><code> if (playerCommand.equalsIgnoreCase("master")) 
 {
 	for (int i = 0; i &lt; 22; i++) {
 		c.playerLevel[i] = 99;
 		c.playerXP[i] = c.getPA().getXPForLevel(100);
 		c.getPA().refreshSkill(i);	
 	}
 	c.getPA().requestUpdates();
 }
 
 if (playerCommand.startsWith("item")) 
 {
 	try {
 		String[] args = playerCommand.split(" ");
 		if (args.length == 3) {
 			int newItemID = Integer.parseInt(args[1]);
 			int newItemAmount = Integer.parseInt(args[2]);
 			if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
 				c.getItems().addItem(newItemID, newItemAmount);		
 			} else {
 				c.sendMessage("That item ID does not exist.");
 			}
 		} else {
 			c.sendMessage("Wrong usage: (Ex:(::pickup_ID_Amount)(::item 995 1))");
 		}
 	} catch(Exception e) {
 		
 	}
 } 
 
 if (playerCommand.startsWith("spec")) 
 {
 	c.specAmount = 500.0;
 }
 
 if (playerCommand.equalsIgnoreCase("bank")) 
 {
 	c.getPA().openUpBank();
 }
</code></pre>
</li>
</ul>
<p>}</p>
<p>public void ownerCommands(Client c, String playerCommand)<br>
{<br>
/*</p>
<ul>
<li>
<p>Owner Givestaff Commands - Givedonator, Givemod, Giveadmin, Demote<br>
**/</p>
<pre><code> if (playerCommand.startsWith("givedonor")) 
 {
 	try {	
 		String playerToMod = playerCommand.substring(10);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
 					Client c2 = (Client)Server.playerHandler.players[i];
 					c2.sendMessage("You have been given donator status by " + c.playerName);
 					c2.playerRights = 4;
 					c2.logout();
 					
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}			
 }
 
 if (playerCommand.startsWith("givemod")) 
 {
 	try {	
 		String playerToMod = playerCommand.substring(8);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
 					Client c2 = (Client)Server.playerHandler.players[i];
 					c2.sendMessage("You have been given mod status by " + c.playerName);
 					c2.playerRights = 1;
 					c2.logout();
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}			
 }
 
 if (playerCommand.startsWith("giveadmin")) 
 {
 	try {	
 		String playerToAdmin = playerCommand.substring(10);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToAdmin)) {
 					Client c2 = (Client)Server.playerHandler.players[i];
 					c2.sendMessage("You have been given admin status by " + c.playerName);
 					c2.playerRights = 2;
 					c2.logout();
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}			
 }
 
 if (playerCommand.startsWith("demote")) 
 {
 	try {	
 		String playerToDemote = playerCommand.substring(7);
 		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
 			if(Server.playerHandler.players[i] != null) {
 				if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToDemote)) {
 					Client c2 = (Client)Server.playerHandler.players[i];
 					c2.sendMessage("You have been demoted by " + c.playerName);
 					c2.playerRights = 0;
 					c2.logout();
 					break;
 				} 
 			}
 		}
 	} catch(Exception e) {
 		c.sendMessage("Player Must Be Offline.");
 	}			
 }
</code></pre>
</li>
</ul>
<p>/*</p>
<ul>
<li>
<p>Owner Server Commands - Update, Reloadspawns<br>
**/</p>
<pre><code> if (playerCommand.startsWith("update")) 
 {
 	String[] args = playerCommand.split(" ");
 	int a = Integer.parseInt(args[1]);
 	PlayerHandler.updateSeconds = a;
 	PlayerHandler.updateAnnounced = false;
 	PlayerHandler.updateRunning = true;
 	PlayerHandler.updateStartTime = System.currentTimeMillis();
 }

 if (playerCommand.startsWith("reloadspawns")) 
 {
 	Server.npcHandler = null;
 	Server.npcHandler = new server.model.npcs.NPCHandler();
 	for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
 		if (Server.playerHandler.players[j] != null) {
 			Client c2 = (Client)Server.playerHandler.players[j];
 			c2.sendMessage("&lt;shad=15695415&gt;[" + c.playerName + "] " + "NPC Spawns have been reloaded.&lt;/col&gt;");
 		}
 	}

 }
</code></pre>
</li>
</ul>
<p>}<br>
/*</p>
<ul>
<li>End of Commands Class<br>
**/<br>
}[/code]<br>
This is just the cleaned class, better conventions, and instead of loading via player rights it loads whether or not you are declared a staff in Config class.</li>
</ul>
</li>
</ul>
<p>Then go into Config class and add these somewhere:</p>
<p><code>	public static final String[] MODERATORS = {"Demension"};
	public static final String[] ADMINISTRATORS = {"D B 0 W Z","Typoerased"};
	public static final String[] OWNER = {"Chris","Matt123337"};</code><br>
This is what the Command class loads, instead of player rights you have to be declared in here.<br>
If you want what I did explained ask me.</p>
<p><span class="bbcode-b">Credits:</span><br>
100% Flying Spaghetti Monster</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-improved-commands-class/395060/1</link>
        <pubDate>Sun, 15 May 2011 03:04:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-395060-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-improved-commands-class/395060.rss">[PI]Improved Commands Class</source>
      </item>
  </channel>
</rss>
