<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Java Interfaces</title>
    <link>https://forum.moparisthebest.com/t/java-interfaces/443841</link>
    <description>I recently returned from a three month break from Java so I&#39;m trying to refresh my memory. I came across an interface today and I was wondering what is the actual concept of this? I know that it has empty method bodies, but what exactly is the end goal of an interface. Is it used for some type of data encapsulation, to where only one reference of something can be accessed? If someone would be so nice to elaborate on Interfaces, I would be very thankful.</description>
    
    <lastBuildDate>Mon, 04 Jun 2012 20:46:02 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-interfaces/443841.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:13, topic:443841"][quote author=t4 link=topic=546520.msg4007797#msg4007797 date=1338842381]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>note: you can inherit as many interfaces as you wish, however you can only inherit one abstract class in Java.<br>
[/quote]try to distinguish between interface implementation and class inheritance</p>
</blockquote>
</aside>
<p>sry there’s no difference in type in c++ <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
</blockquote>
</aside>
<p>well yeah, Java’s interfaces were effectively introduced as an answer to adding something like C++'s multiple inheritance.[/quote]<br>
but without the chance of having a triangle of death!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/14</link>
        <pubDate>Mon, 04 Jun 2012 20:46:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-14</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:12, topic:443841”][quote author=_s link=topic=546520.msg4007479#msg4007479 date=1338811314]</p>
<aside class="quote">
<blockquote>
<p>note: you can inherit as many interfaces as you wish, however you can only inherit one abstract class in Java.<br>
[/quote]try to distinguish between interface implementation and class inheritance</p>
</blockquote>
</aside>
<p>sry there’s no difference in type in c++ :P[/quote]<br>
well yeah, Java’s interfaces were effectively introduced as an answer to adding something like C++'s multiple inheritance.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/13</link>
        <pubDate>Mon, 04 Jun 2012 20:43:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-13</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:9, topic:443841"][quote author=t4 link=topic=546520.msg4007040#msg4007040 date=1338758767]<br>
note: you can inherit as many interfaces as you wish, however you can only inherit one abstract class in Java.<br>
[/quote]try to distinguish between interface implementation and class inheritance[/quote]<br>
sry there’s no difference in type in c++ <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>[quote=“eyeownyew, post:10, topic:443841”][quote author=Receptor link=topic=546520.msg4007524#msg4007524 date=1338818330]</p>
<aside class="quote">
<blockquote>
<p>My bad. Actually, I was correct, but you have to use the ‘extends’ keyword rather than ‘implements’.</p>
<p>[code]<br>
public class ChannelHandler extends SimpleChannelHandler {</p>
<pre><code>private Session session = null;

@Override
public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
	/*if (e.getCause() instanceof ReadTimeoutException) {
		if (session.getClient() != null) {
			System.out.println("Player " + session.getClient().playerName + " timed out!");
		}
	} else if(!(e.getCause() instanceof java.io.IOException)){
		e.getCause().printStackTrace();
	}*/
	ctx.getChannel().close();
}

@Override
public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
	if (e.getMessage() instanceof Client) {
		session.setClient((Client) e.getMessage());
	} else if (e.getMessage() instanceof Packet) {
		if (session.getClient() != null) {
			session.getClient().queueMessage((Packet) e.getMessage());
		}
	}
}

@Override
public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {
	if (session == null)
		session = new Session(ctx.getChannel());
	if(session.getClient() == null)
		Server.getcH().addClient(ctx.getChannel());
}

@Override
public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
	if (session != null) {
		Client client = session.getClient();
		Server.getcH().removeClient(client);
		session = null;
	}
}
</code></pre>
<p>}[/code]<br>
:hurr:</p>
</blockquote>
</aside>
<p>Hi. It appears that you’re an idiot. Actually, you were wrong, again.</p>
<p>Interfaces can only contain member function declarations and static final data members. All members of an interface are implicitly public. All member function declarations are implicitly abstract. All data members are implicitly static final.</p>
<p>You can only inherit(extend) another interface from a base interface, that new interface too has to abide with the rules of interfaces.</p>
<p>What you have illustrated there is inheriting from a base class which doesn’t relate to the current topic. Furthermore you assumed that the base class is an interface (which it is not), this makes you a real big idiot.<br>
[/quote]<br>
My bad. And also, I remember when calling someone an idiot made you seem cool.<br>
That time is not now, nor has it been within our lifetimes. Or the past generation’s. Or the previous… Extend that as many times as you want, bitch[/quote]<br>
don’t help people if you’re just as clueless - it’s what breeds ignorance.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/12</link>
        <pubDate>Mon, 04 Jun 2012 20:39:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-12</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@xxxtilllyxxx xxxtilllyxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxxtilllyxxx">@xxxtilllyxxx</a> wrote:</p>
          <blockquote>
              <p>[quote=“Receptor, post:1, topic:443961”][quote author=eyeownyew link=topic=546520.msg4007024#msg4007024 date=1338757756]<br>
My bad. Actually, I was correct, but you have to use the ‘extends’ keyword rather than ‘implements’.</p>
<p>[code]<br>
public class ChannelHandler extends SimpleChannelHandler {</p>
<pre><code>private Session session = null;

@Override
public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
	/*if (e.getCause() instanceof ReadTimeoutException) {
		if (session.getClient() != null) {
			System.out.println("Player " + session.getClient().playerName + " timed out!");
		}
	} else if(!(e.getCause() instanceof java.io.IOException)){
		e.getCause().printStackTrace();
	}*/
	ctx.getChannel().close();
}

@Override
public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
	if (e.getMessage() instanceof Client) {
		session.setClient((Client) e.getMessage());
	} else if (e.getMessage() instanceof Packet) {
		if (session.getClient() != null) {
			session.getClient().queueMessage((Packet) e.getMessage());
		}
	}
}

@Override
public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {
	if (session == null)
		session = new Session(ctx.getChannel());
	if(session.getClient() == null)
		Server.getcH().addClient(ctx.getChannel());
}

@Override
public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
	if (session != null) {
		Client client = session.getClient();
		Server.getcH().removeClient(client);
		session = null;
	}
}
</code></pre>
<p>}[/code]<br>
:hurr:<br>
[/quote]</p>
<p>Hi. It appears that you’re an idiot. Actually, you were wrong, again.</p>
<p>Interfaces can only contain member function declarations and static final data members. All members of an interface are implicitly public. All member function declarations are implicitly abstract. All data members are implicitly static final.</p>
<p>You can only inherit(extend) another interface from a base interface, that new interface too has to abide with the rules of interfaces.</p>
<p>What you have illustrated there is inheriting from a base class which doesn’t relate to the current topic. Furthermore you assumed that the base class is an interface (which it is not), this makes you a real big idiot.[/quote]</p>
<p>OOOHHHHOHHHH!@!@! Do you need some aloe vera? Cus you just got BURNED!@!@!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/11</link>
        <pubDate>Mon, 04 Jun 2012 19:19:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-11</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>[quote=“Receptor, post:1, topic:443961”][quote author=eyeownyew link=topic=546520.msg4007024#msg4007024 date=1338757756]<br>
My bad. Actually, I was correct, but you have to use the ‘extends’ keyword rather than ‘implements’.</p>
<p>[code]<br>
public class ChannelHandler extends SimpleChannelHandler {</p>
<pre><code>private Session session = null;

@Override
public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
	/*if (e.getCause() instanceof ReadTimeoutException) {
		if (session.getClient() != null) {
			System.out.println("Player " + session.getClient().playerName + " timed out!");
		}
	} else if(!(e.getCause() instanceof java.io.IOException)){
		e.getCause().printStackTrace();
	}*/
	ctx.getChannel().close();
}

@Override
public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
	if (e.getMessage() instanceof Client) {
		session.setClient((Client) e.getMessage());
	} else if (e.getMessage() instanceof Packet) {
		if (session.getClient() != null) {
			session.getClient().queueMessage((Packet) e.getMessage());
		}
	}
}

@Override
public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {
	if (session == null)
		session = new Session(ctx.getChannel());
	if(session.getClient() == null)
		Server.getcH().addClient(ctx.getChannel());
}

@Override
public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
	if (session != null) {
		Client client = session.getClient();
		Server.getcH().removeClient(client);
		session = null;
	}
}
</code></pre>
<p>}[/code]<br>
:hurr:<br>
[/quote]</p>
<p>Hi. It appears that you’re an idiot. Actually, you were wrong, again.</p>
<p>Interfaces can only contain member function declarations and static final data members. All members of an interface are implicitly public. All member function declarations are implicitly abstract. All data members are implicitly static final.</p>
<p>You can only inherit(extend) another interface from a base interface, that new interface too has to abide with the rules of interfaces.</p>
<p>What you have illustrated there is inheriting from a base class which doesn’t relate to the current topic. Furthermore you assumed that the base class is an interface (which it is not), this makes you a real big idiot.[/quote]<br>
My bad. And also, I remember when calling someone an idiot made you seem cool.<br>
That time is not now, nor has it been within our lifetimes. Or the past generation’s. Or the previous… Extend that as many times as you want, bitch</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/10</link>
        <pubDate>Mon, 04 Jun 2012 17:58:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-10</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:8, topic:443841”]note: you can inherit as many interfaces as you wish, however you can only inherit one abstract class in Java.[/quote]try to distinguish between interface implementation and class inheritance</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/9</link>
        <pubDate>Mon, 04 Jun 2012 12:01:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-9</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>note: you can inherit as many interfaces as you wish, however you can only inherit one abstract class in Java.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/8</link>
        <pubDate>Sun, 03 Jun 2012 21:26:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-8</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@Krim Krim]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/krim">@Krim</a> wrote:</p>
          <blockquote>
              <p>[quote=“eyeownyew, post:6, topic:443841”]My bad. Actually, I was correct, but you have to use the ‘extends’ keyword rather than ‘implements’.</p>
<p>[code]<br>
public class ChannelHandler extends SimpleChannelHandler {</p>
<pre><code>private Session session = null;

@Override
public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
	/*if (e.getCause() instanceof ReadTimeoutException) {
		if (session.getClient() != null) {
			System.out.println("Player " + session.getClient().playerName + " timed out!");
		}
	} else if(!(e.getCause() instanceof java.io.IOException)){
		e.getCause().printStackTrace();
	}*/
	ctx.getChannel().close();
}

@Override
public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
	if (e.getMessage() instanceof Client) {
		session.setClient((Client) e.getMessage());
	} else if (e.getMessage() instanceof Packet) {
		if (session.getClient() != null) {
			session.getClient().queueMessage((Packet) e.getMessage());
		}
	}
}

@Override
public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {
	if (session == null)
		session = new Session(ctx.getChannel());
	if(session.getClient() == null)
		Server.getcH().addClient(ctx.getChannel());
}

@Override
public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
	if (session != null) {
		Client client = session.getClient();
		Server.getcH().removeClient(client);
		session = null;
	}
}
</code></pre>
<p>}/code]<br>
:hurr:[/code][/quote]<br>
Classes that use interfaces use the implements keyword, right? Extends is just used for inheritance between a superclass and subclass.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/7</link>
        <pubDate>Sun, 03 Jun 2012 21:24:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-7</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>My bad. Actually, I was correct, but you have to use the ‘extends’ keyword rather than ‘implements’.</p>
<p>[code]<br>
public class ChannelHandler extends SimpleChannelHandler {</p>
<pre><code>private Session session = null;

@Override
public void exceptionCaught(ChannelHandlerContext ctx, ExceptionEvent e) throws Exception {
	/*if (e.getCause() instanceof ReadTimeoutException) {
		if (session.getClient() != null) {
			System.out.println("Player " + session.getClient().playerName + " timed out!");
		}
	} else if(!(e.getCause() instanceof java.io.IOException)){
		e.getCause().printStackTrace();
	}*/
	ctx.getChannel().close();
}

@Override
public void messageReceived(ChannelHandlerContext ctx, MessageEvent e) throws Exception {
	if (e.getMessage() instanceof Client) {
		session.setClient((Client) e.getMessage());
	} else if (e.getMessage() instanceof Packet) {
		if (session.getClient() != null) {
			session.getClient().queueMessage((Packet) e.getMessage());
		}
	}
}

@Override
public void channelConnected(ChannelHandlerContext ctx, ChannelStateEvent e) {
	if (session == null)
		session = new Session(ctx.getChannel());
	if(session.getClient() == null)
		Server.getcH().addClient(ctx.getChannel());
}

@Override
public void channelClosed(ChannelHandlerContext ctx, ChannelStateEvent e) throws Exception {
	if (session != null) {
		Client client = session.getClient();
		Server.getcH().removeClient(client);
		session = null;
	}
}
</code></pre>
<p>}[/code]<br>
:hurr:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/6</link>
        <pubDate>Sun, 03 Jun 2012 21:09:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-6</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“eyeownyew, post:3, topic:443841”]Interfaces are really used to cut down on amount of programming required. What I mean is, you can have certain methods in an interface that you wish to leave <span class="bbcode-b">or</span> override. There’s much more depth to it than how I am describing it, but you know, it’s the basics.</p>
<p>Example:<br>
Instead of having a class for every single type of material, you can have a superclass.</p>
<pre><code class="lang-auto">public interface Material {
     int hardness = 0;

     String type = "";

     public String toString() {
          System.out.println(Material.getClass().getName() +"type:"+type+" hardness:"+hardness);
     }
}</code></pre>
<p>In the subclass:</p>
<pre><code class="lang-auto">public class Metal implements Material {
     
     @Override
     public String toString() {
          System.out.println("Hee, you'll see this, not the other one.");
     }
}</code></pre>
<p>If you were to take out the whole toString method, it would go back to being the original from the Material class</p>
<p>Interfaces are really used for convenience. Obviously this is just a quick rundown of how they’re used, but imagine it like this:</p>
<pre><code class="lang-auto">-Material
---Wood
---Metal
---Ceramic

==

-Main Type
---Subtype
---Subtype two
---Subtype three</code></pre>
<p>Interfaces are commonly used for packet handling and quest handling in private servers[/quote]</p>
<p>That’s more of the behaviour of an abstract class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/5</link>
        <pubDate>Sun, 03 Jun 2012 20:12:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-5</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“eyeownyew, post:3, topic:443841”]Interfaces are really used to cut down on amount of programming required. What I mean is, you can have certain methods in an interface that you wish to leave <span class="bbcode-b">or</span> override. There’s much more depth to it than how I am describing it, but you know, it’s the basics.</p>
<p>Example:<br>
Instead of having a class for every single type of material, you can have a superclass.</p>
<pre><code class="lang-auto">public interface Material {
     int hardness = 0;

     String type = "";

     public String toString() {
          System.out.println(Material.getClass().getName() +"type:"+type+" hardness:"+hardness);
     }
}</code></pre>
<p>In the subclass:</p>
<pre><code class="lang-auto">public class Metal implements Material {
     
     @Override
     public String toString() {
          System.out.println("Hee, you'll see this, not the other one.");
     }
}</code></pre>
<p>If you were to take out the whole toString method, it would go back to being the original from the Material class</p>
<p>Interfaces are really used for convenience. Obviously this is just a quick rundown of how they’re used, but imagine it like this:</p>
<pre><code class="lang-auto">-Material
---Wood
---Metal
---Ceramic

==

-Main Type
---Subtype
---Subtype two
---Subtype three</code></pre>
<p>Interfaces are commonly used for packet handling and quest handling in private servers[/quote]<br>
your example of an interface is incorrect since interfaces cannot have fields or method bodies. also, your reasoning for using interfaces is also incorrect - the main use for interfaces is inheritance thus having generalization of similar objects.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/4</link>
        <pubDate>Sun, 03 Jun 2012 19:17:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-4</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>Interfaces are really used to cut down on amount of programming required. What I mean is, you can have certain methods in an interface that you wish to leave <span class="bbcode-b">or</span> override. There’s much more depth to it than how I am describing it, but you know, it’s the basics.</p>
<p>Example:<br>
Instead of having a class for every single type of material, you can have a superclass.</p>
<pre><code class="lang-auto">public interface Material {
     int hardness = 0;

     String type = "";

     public String toString() {
          System.out.println(Material.getClass().getName() +"type:"+type+" hardness:"+hardness);
     }
}</code></pre>
<p>In the subclass:</p>
<pre><code class="lang-auto">public class Metal implements Material {
     
     @Override
     public String toString() {
          System.out.println("Hee, you'll see this, not the other one.");
     }
}</code></pre>
<p>If you were to take out the whole toString method, it would go back to being the original from the Material class</p>
<p>Interfaces are really used for convenience. Obviously this is just a quick rundown of how they’re used, but imagine it like this:</p>
<pre><code class="lang-auto">-Material
---Wood
---Metal
---Ceramic

==

-Main Type
---Subtype
---Subtype two
---Subtype three</code></pre>
<p>Interfaces are commonly used for packet handling and quest handling in private servers</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/3</link>
        <pubDate>Sun, 03 Jun 2012 07:32:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-3</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@Rodgerwilco Rodgerwilco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodgerwilco">@Rodgerwilco</a> wrote:</p>
          <blockquote>
              <p>Think of it as a template…</p>
<p><a href="http://docs.oracle.com/javase/tutorial/java/concepts/interface.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/java/concepts/interface.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/2</link>
        <pubDate>Sun, 03 Jun 2012 07:32:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-2</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
      <item>
        <title>Java Interfaces</title>
        <dc:creator><![CDATA[@Krim Krim]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/krim">@Krim</a> wrote:</p>
          <blockquote>
              <p>I recently returned from a three month break from Java so I’m trying to refresh my memory. I came across an interface today and I was wondering what is the actual concept of this? I know that it has empty method bodies, but what exactly is the end goal of an interface. Is it used for some type of data encapsulation, to where only one reference of something can be accessed? If someone would be so nice to elaborate on Interfaces, I would be very thankful.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-interfaces/443841/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-interfaces/443841/1</link>
        <pubDate>Sun, 03 Jun 2012 06:34:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443841-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-interfaces/443841.rss">Java Interfaces</source>
      </item>
  </channel>
</rss>
