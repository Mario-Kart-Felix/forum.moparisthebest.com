<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Designing a File System</title>
    <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352</link>
    <description>I&#39;ve been looking into compression and storage lately, for a game I&#39;m working on, and I&#39;ve come up with a few ideas on how to create a virtual file system. By file system, I mean something similar to the RuneScape cache. The goal is to compress (probably gzip) multiple files into a few large ones that can be efficiently transferred and accessed. I&#39;m aware I&#39;m reinventing the wheel, but this is something I would like to learn more about, so consider it an academic exercise for now.
I&#39;ve come up with two ideas so far. Both will start with my own non-gzip header.
[code]
magic : u1
version : u1
[/code]
Idea #1
[code]
dircount : u4
dir
{
    path : string
    filecount : u4
    file
    {
		name : string
		length : u4
		file : byte[length]
    }
}
[/code]
As you can see it will be recursive to support theoretically limitless directory depth
Then I thought, why not have the metadata at the beginning of the file, then a large blob of the data.
Idea #2
[code]
tablecount : u4
dirlist : string[]
filelist : string[]
table
{
	op
	{
		opcode : u1 // 0 = pushdir, 1 = pushfile
		name : string // the file or directory name
                dirptr : u4 // only if pushfile, index on dirlist
		fileptr : u8 // only if pushfile, index on filesdata
                filelen : u4 // only if pushfile, length of file in bytes
	}
}
filesdata : byte[totalfileslength]
[/code]
Of course this option limits the total length of all files to the max value of an unsigned long which could be avoided by adding blocks or something (probably not necessary, I don&#39;t intend on having huge files).

Hopefully my representations make some sense, if not, is there a standard for describing file formats? The only file format spec I&#39;ve really read is for the JVM.
As you can probably see, I know shit all about this kind of stuff so any input you may have will be valuable.

Another thing I was wondering about is doing integrity checks, CRC32 is probably good, but how to use it...Store the hash in the file then calculate and check against the one in the file? Or send the hash separately from the file and check against that. Or perhaps do both?</description>
    
    <lastBuildDate>Tue, 25 Aug 2009 05:16:37 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>OK so it works (left out hash checks), here are some unit test methods:</p>
<pre><code class="lang-auto">[TestMethod]
public void TestCacheCreation()
{
	int rootDirFileCount = new DirectoryInfo("../../TestDataFiles/").GetFiles().Length
	IFileSystem fs = new NxFileSystem();
	Cache c = new Cache(fs, "../../TestDataFiles/");
	Stream output = new FileStream("UnitTestData.nx", FileMode.Create);
	c.Serialize(output);
	Assert.IsNotNull(c.RootDirectory);
	Assert.AreEqual(rootDirFileCount, c.RootDirectory.Files.Count);
}
[TestMethod]
public void TestCacheLoading()
{
	Cache c = new Cache();
	Stream input = new FileStream("UnitTestData.nx", FileMode.Open);
	c.Deserialize(input);
	int rootDirFileCount = new DirectoryInfo("../../TestDataFiles/").GetFiles().Length
	Assert.IsNotNull(c.RootDirectory);
	Assert.AreEqual(rootDirFileCount, c.RootDirectory.Files.Count);

	PrintDiretoryRecursive(c.RootDirectory);
}
private static void PrintDiretoryRecursive(SEDirectory dir)
{
	Console.WriteLine(dir.Name);
	foreach(SEFile f in dir.Files)
	{
		Console.WriteLine(f.Name);
	}
	foreach(SEDirectory d in dir.Directories)
	{
		PrintDiretoryRecursive(d);
	}
}</code></pre>
<p>That was fun. I’ll now remove it all and just use ICSharpCode.SharpZipLib.</p>
<p>Thanks for your help frank_.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/17</link>
        <pubDate>Tue, 25 Aug 2009 05:16:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-17</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>stop arguing ladies, he will have the length of the file from the header and only read that many bytes</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/16</link>
        <pubDate>Tue, 25 Aug 2009 04:41:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-16</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>Appears we had some miscommunication. But that doesn’t change the fact you’re acting like a moron.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/15</link>
        <pubDate>Tue, 25 Aug 2009 03:06:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-15</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“oksuper_, post:13, topic:297352”][quote author=abraham2119 link=topic=393392.msg2929063#msg2929063 date=1251161643]<br>
i knew what EOF was, and in order to check for an EOF marking, you would have to read signed bytes.</p>
<p>banned for what? proving you wrong?<br>
[/quote][/quote]<br>
once again i say: he never stated he is using c or cpp. and as i said before, he wont depend on the input stream’s return value to recognize an EOF marking no matter what language he is using, seeing as there is more than one file archived in the file he is reading.</p>
<p>being a general moron? rifk, u get mad once someone proves you wrong.</p>
<p>edit: i never flamed, and if i did, i apologize.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/14</link>
        <pubDate>Tue, 25 Aug 2009 01:02:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-14</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:12, topic:297352”]i knew what EOF was, and in order to check for an EOF marking, you would have to read signed bytes.</p>
<p>banned for what? proving you wrong?[/quote]</p>
<p>EOF is -1 because fgetc() returns unsigned bytes, and so a negative value would be impossible for a legitimate read byte.</p>
<p>And no, you would be banned for:</p>
<p>[ul][li]Being a general moron[/li]<br>
[li]Flaming consistently[/li]<br>
[li]And more![/li][/ul]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/13</link>
        <pubDate>Tue, 25 Aug 2009 00:57:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-13</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>i knew what EOF was, and in order to check for an EOF marking, you would have to read signed bytes.</p>
<p>banned for what? proving you wrong?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/12</link>
        <pubDate>Tue, 25 Aug 2009 00:54:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-12</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:10, topic:297352”][quote author=oksuper_ link=topic=393392.msg2929011#msg2929011 date=1251159295]</p>
<p>[quote author=abraham2119 link=topic=393392.msg2929008#msg2929008 date=1251159142]</p>
<p>[quote author=oksuper_ link=topic=393392.msg2929006#msg2929006 date=1251158953]</p>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.<br>
[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.</p>
</blockquote>
</aside>
<p>… Do you know what unsigned bytes are?<br>
[/quote]how is he supposed to read an EOF marking (assuming its -1) if hes reading only unsigned bytes?</p>
</blockquote>
</aside>
<p>Are you a troll? Or are you seriously that dumb? EOF isn’t ‘read’, it’s returned by fgetc() when the end of the file has been reached. Hence why it returns int and not unsigned char.<br>
[/quote]…<br>
who said he was EVEN using c or cpp? THIS IS HIS FILE STRUCTURE. + he suggested that he wanted most of his files to be stored in a couple of big ones. which means that when finished reading the contents of one of many files in the compressed file, it does not necessarily mean it has read the end of the compressed file. the EOF markings will be written by his file packer</p>
<p>pretty fucking funny how you love to assume shit[/quote]</p>
<p>Nobody said he was using C you moron. It’s just fgetc() tells you what EOF is… /facepalm. Sure looks like you’re going to get banned very soon.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/11</link>
        <pubDate>Tue, 25 Aug 2009 00:32:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-11</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“oksuper_, post:9, topic:297352”][quote author=abraham2119 link=topic=393392.msg2929008#msg2929008 date=1251159142]</p>
<p>[quote author=oksuper_ link=topic=393392.msg2929006#msg2929006 date=1251158953]</p>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.<br>
[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.</p>
</blockquote>
</aside>
<p>… Do you know what unsigned bytes are?<br>
[/quote]how is he supposed to read an EOF marking (assuming its -1) if hes reading only unsigned bytes?</p>
</blockquote>
</aside>
<p>Are you a troll? Or are you seriously that dumb? EOF isn’t ‘read’, it’s returned by fgetc() when the end of the file has been reached. Hence why it returns int and not unsigned char.[/quote]…<br>
who said he was EVEN using c or cpp? THIS IS HIS FILE STRUCTURE. + he suggested that he wanted most of his files to be stored in a couple of big ones. which means that when finished reading the contents of one of many files in the compressed file, it does not necessarily mean it has read the end of the compressed file. the EOF markings will be written by his file packer</p>
<p>pretty fucking funny how you love to assume shit</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/10</link>
        <pubDate>Tue, 25 Aug 2009 00:27:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-10</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:8, topic:297352”][quote author=oksuper_ link=topic=393392.msg2929006#msg2929006 date=1251158953]</p>
<p>[quote author=abraham2119 link=topic=393392.msg2928977#msg2928977 date=1251157439]</p>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.<br>
[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.</p>
</blockquote>
</aside>
<p>… Do you know what unsigned bytes are?<br>
[/quote]how is he supposed to read an EOF marking (assuming its -1) if hes reading only unsigned bytes?[/quote]</p>
<p>Are you a troll? Or are you seriously that dumb? EOF isn’t ‘read’, it’s returned by fgetc() when the end of the file has been reached. Hence why it returns int and not unsigned char.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/9</link>
        <pubDate>Tue, 25 Aug 2009 00:14:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-9</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“oksuper_, post:7, topic:297352”][quote author=abraham2119 link=topic=393392.msg2928977#msg2928977 date=1251157439]</p>
<aside class="quote no-group">
<blockquote>
<aside class="quote no-group">
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.<br>
[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.</p>
</blockquote>
</aside>
<p>… Do you know what unsigned bytes are?[/quote]how is he supposed to read an EOF marking (assuming its -1) if hes reading only unsigned bytes?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/8</link>
        <pubDate>Tue, 25 Aug 2009 00:12:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-8</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:6, topic:297352”][quote author=Unhandled link=topic=393392.msg2928973#msg2928973 date=1251157126]</p>
<aside class="quote no-group">
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.<br>
[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.[/quote]</p>
<p>… Do you know what unsigned bytes are?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/7</link>
        <pubDate>Tue, 25 Aug 2009 00:09:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-7</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“Unhandled, post:5, topic:297352”][quote author=abraham2119 link=topic=393392.msg2928645#msg2928645 date=1251148641]<br>
in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)<br>
[/quote]<br>
Why not just read to the end of the block until you find an EOF marking.[/quote]if by an “EOF marking” you mean -1, then there may be a byte that is -1 throughout the file’s data, yet it is not meant to indicate an EOF marking.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/6</link>
        <pubDate>Mon, 24 Aug 2009 23:43:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-6</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="4" data-topic="297352">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
</blockquote>
</aside>
<p>Why not just read to the end of the block until you find an EOF marking.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/5</link>
        <pubDate>Mon, 24 Aug 2009 23:38:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-5</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>in the file structure, you would also need a “block offset” which would refer to until what index in the last block the file occupies. since naturally, you cannot expect the length of the file to be divisible by your block’s length (1024)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/4</link>
        <pubDate>Mon, 24 Aug 2009 21:17:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-4</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">// the file on disk
struct filesystem
{
	byte magic;
	byte version;
	byte[] checksum;
	block[] blocks;
	cache cache;
}
// represents a constant length byte array of data
struct block
{
	byte[] data; // 1024 (8kb)?
}
// sits above the filesystem
struct cache
{
	directory[] directories;
}
// tree structure of directories, containing files
struct directory
{
	string name;
	file[] files;
	directory[] sub_directories;
}
// represents a series of blocks
struct file
{
	string name;
	int directory; // pointer to an entry in the cache's directory table
	int start_block; // pointer to an entry in the filesystem's block table
	int block_count; // number of blocks the file occupies
	byte[] checksum;
}</code></pre>
<p>EDIT: changed dependency between filesystem and cache.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/3</link>
        <pubDate>Mon, 24 Aug 2009 07:09:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-3</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>c-like structs tend to be a standard way of describing data formats</p>
<p>in your fileheader i would store the checksum, the id of whatever compression/encoding you use for that file, permissions, etc.</p>
<p>i would be more inclined to use blocks than a contiguous stream of bytes for the storage of the data</p>
<p>keep in mind you would also need a checksum for the entire cache</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/2</link>
        <pubDate>Mon, 24 Aug 2009 06:23:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-2</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
      <item>
        <title>Designing a File System</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>I’ve been looking into compression and storage lately, for a game I’m working on, and I’ve come up with a few ideas on how to create a virtual file system. By file system, I mean something similar to the RuneScape cache. The goal is to compress (probably gzip) multiple files into a few large ones that can be efficiently transferred and accessed. I’m aware I’m reinventing the wheel, but this is something I would like to learn more about, so consider it an academic exercise for now.<br>
I’ve come up with two ideas so far. Both will start with my own non-gzip header.</p>
<pre><code class="lang-auto">magic : u1
version : u1</code></pre>
<p>Idea <span class="hashtag">#1</span></p>
<pre><code class="lang-auto">dircount : u4
dir
{
    path : string
    filecount : u4
    file
    {
		name : string
		length : u4
		file : byte[length]
    }
}</code></pre>
<p>As you can see it will be recursive to support theoretically limitless directory depth<br>
Then I thought, why not have the metadata at the beginning of the file, then a large blob of the data.<br>
Idea <span class="hashtag">#2</span></p>
<pre><code class="lang-auto">tablecount : u4
dirlist : string[]
filelist : string[]
table
{
	op
	{
		opcode : u1 // 0 = pushdir, 1 = pushfile
		name : string // the file or directory name
                dirptr : u4 // only if pushfile, index on dirlist
		fileptr : u8 // only if pushfile, index on filesdata
                filelen : u4 // only if pushfile, length of file in bytes
	}
}
filesdata : byte[totalfileslength]</code></pre>
<p>Of course this option limits the total length of all files to the max value of an unsigned long which could be avoided by adding blocks or something (probably not necessary, I don’t intend on having huge files).</p>
<p>Hopefully my representations make some sense, if not, is there a standard for describing file formats? The only file format spec I’ve really read is for the JVM.<br>
As you can probably see, I know shit all about this kind of stuff so any input you may have will be valuable.</p>
<p>Another thing I was wondering about is doing integrity checks, CRC32 is probably good, but how to use it…Store the hash in the file then calculate and check against the one in the file? Or send the hash separately from the file and check against that. Or perhaps do both?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/designing-a-file-system/297352/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/designing-a-file-system/297352/1</link>
        <pubDate>Mon, 24 Aug 2009 06:04:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-297352-1</guid>
        <source url="https://forum.moparisthebest.com/t/designing-a-file-system/297352.rss">Designing a File System</source>
      </item>
  </channel>
</rss>
