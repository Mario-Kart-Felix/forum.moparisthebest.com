<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A simple music system</title>
    <link>https://forum.moparisthebest.com/t/a-simple-music-system/466352</link>
    <description>This method is probably outdated but I thought I&#39;d share since I thought it was a nice concept I learned in class.

[code]import javax.swing.*;
import java.applet.*;
import java.net.*;

public class AudioPlayer
{

   private URL url, myURL;
   private AudioClip current, myCurrent;

   public AudioPlayer(String soundFileName)
   {
      
      try
      {
	url = new URL (&quot;file&quot;, &quot;localhost&quot;, soundFileName);
      }
      catch (Exception exception){};

      current = JApplet.newAudioClip (url);

   }

   public AudioPlayer(){}

   public void play()
   {
		current.play();
   }

   public void playFromFile (String soundFileName)
   {

      try
      {
        myURL = new URL (&quot;file&quot;, &quot;localhost&quot;, soundFileName);
      }
      catch (Exception exception){};
	   if (myCurrent != null){myCurrent.stop();}
      myCurrent = JApplet.newAudioClip (myURL);
      myCurrent.play();
   }

	public void stop()
	{
		if (myCurrent != null){myCurrent.stop();}
	}


}
[/code]

Usage:
[code]
AudioPlayer object = new AudioPlayer(String);
object.play()
//or
AudioPlayer object = new AudioPlayer();
object.playFromFile(String);

//usable types: .wav, .au, .mp3, and probably more
[/code]

The only problem with this is that sometimes the reading of certain .wav or .mp3 files will cause errors and not play at all. In which I found a nice workaround that people might find interesting (if they didn&#39;t know about it).

Converting .mp3 to .au (you can sometimes just rename .wav to .mp3 to convert the file type) in Audacity.

The process is simple.

Load the file -&gt; Export -&gt; Filetype to &quot;Other uncompressed files&quot; -&gt; Options button under cancel -&gt; Header = AU (Sun/NeXT) -&gt; Encoding = U-Law -&gt; Rename file (e.g. song.au)

Done.

I&#39;ve noticed that an AU file is a lot bigger than an .mp3 or .wav file but having the music files completely compatible with Java makes it easier for me.

Honestly, I can&#39;t wait to get into the higher computer science levels. While the concepts in this class is interesting, I&#39;m not learning much.

So... post your alternatives! This method feels a bit outdated anyway.</description>
    
    <lastBuildDate>Thu, 08 Nov 2012 21:55:56 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-simple-music-system/466352.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A simple music system</title>
        <dc:creator><![CDATA[@LilXCj LilXCj]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lilxcj">@LilXCj</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:2, topic:466352”]The applet package should be used for just that – applets.</p>
<p>If you want to play music, use the sound package :P[/quote]</p>
<p>Yeah, I’m asking my professor why we’re using applet library for sounds and not the actual sound library. Awaiting results…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-simple-music-system/466352/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-simple-music-system/466352/3</link>
        <pubDate>Thu, 08 Nov 2012 21:55:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466352-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-simple-music-system/466352.rss">A simple music system</source>
      </item>
      <item>
        <title>A simple music system</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>The applet package should be used for just that – applets.</p>
<p>If you want to play music, use the sound package <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-simple-music-system/466352/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-simple-music-system/466352/2</link>
        <pubDate>Thu, 08 Nov 2012 06:26:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466352-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-simple-music-system/466352.rss">A simple music system</source>
      </item>
      <item>
        <title>A simple music system</title>
        <dc:creator><![CDATA[@LilXCj LilXCj]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lilxcj">@LilXCj</a> wrote:</p>
          <blockquote>
              <p>This method is probably outdated but I thought I’d share since I thought it was a nice concept I learned in class.</p>
<p>[code]import javax.swing.<em>;<br>
import java.applet.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.*;</p>
<p>public class AudioPlayer<br>
{</p>
<p>private URL url, myURL;<br>
private AudioClip current, myCurrent;</p>
<p>public AudioPlayer(String soundFileName)<br>
{</p>
<pre><code>  try
  {
url = new URL ("file", "localhost", soundFileName);
  }
  catch (Exception exception){};

  current = JApplet.newAudioClip (url);
</code></pre>
<p>}</p>
<p>public AudioPlayer(){}</p>
<p>public void play()<br>
{<br>
current.play();<br>
}</p>
<p>public void playFromFile (String soundFileName)<br>
{</p>
<pre><code>  try
  {
    myURL = new URL ("file", "localhost", soundFileName);
  }
  catch (Exception exception){};
   if (myCurrent != null){myCurrent.stop();}
  myCurrent = JApplet.newAudioClip (myURL);
  myCurrent.play();
</code></pre>
<p>}</p>
<pre><code>public void stop()
{
	if (myCurrent != null){myCurrent.stop();}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>Usage:</p>
<pre><code class="lang-auto">AudioPlayer object = new AudioPlayer(String);
object.play()
//or
AudioPlayer object = new AudioPlayer();
object.playFromFile(String);

//usable types: .wav, .au, .mp3, and probably more</code></pre>
<p>The only problem with this is that sometimes the reading of certain .wav or .mp3 files will cause errors and not play at all. In which I found a nice workaround that people might find interesting (if they didn’t know about it).</p>
<p>Converting .mp3 to .au (you can sometimes just rename .wav to .mp3 to convert the file type) in Audacity.</p>
<p>The process is simple.</p>
<p>Load the file -&gt; Export -&gt; Filetype to “Other uncompressed files” -&gt; Options button under cancel -&gt; Header = AU (Sun/NeXT) -&gt; Encoding = U-Law -&gt; Rename file (e.g. song.au)</p>
<p>Done.</p>
<p>I’ve noticed that an AU file is a lot bigger than an .mp3 or .wav file but having the music files completely compatible with Java makes it easier for me.</p>
<p>Honestly, I can’t wait to get into the higher computer science levels. While the concepts in this class is interesting, I’m not learning much.</p>
<p>So… post your alternatives! This method feels a bit outdated anyway.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-simple-music-system/466352/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-simple-music-system/466352/1</link>
        <pubDate>Thu, 08 Nov 2012 05:57:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466352-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-simple-music-system/466352.rss">A simple music system</source>
      </item>
  </channel>
</rss>
