<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Big-O Notation</title>
    <link>https://forum.moparisthebest.com/t/big-o-notation/477268</link>
    <description>I&#39;ve seen some people like t4, super_, Graham, etc. say that certain things are an O(1) or O(n) operation. I had no clue what this was so I did a quick google search, but I&#39;m still not fully understanding it?

Something like O(1) is constants so no matter the size it takes the same amount of time 

and 

O(n) is like the bigger the size the longer it will take?

I&#39;m just confused.</description>
    
    <lastBuildDate>Tue, 01 Jan 2013 19:23:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/big-o-notation/477268.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Big-O Notation</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Big-O notation reflects on the time complexity of an algorithm.</p>
<p>O(1) will typically represent an operation which happens immediately, rather than an operation on a set of items. You don’t use something like O(2) or O(3), because the 1 is just a placeholder for constance. If you have O(n), you can think of it as n O(1) operations, which means we are generally iterating over a set of items. This means a variable time complexity, since how long the algorithm takes to run depends on the number of items in the set we are iterating over. Say you know the set always has 5 items, if you were to unravel the loop, you now have an algorithm with time complexity O(1). O(1) does not indicate how long the algorithm takes to run, it just essentially states its complexity does not change with varying inputs.</p>
<p>The idea of big-o is to find a mathematical model to <span class="bbcode-i">approximate</span> the time complexity of an algorithm. You may have varying polynomial models, such as O(n^2), which would be a loop within a loop, or O(n^3), a triple loop, and so on. You may use O(logn), where the model is the logarithm base two of n. This model increased much slower than O(n), therefore it’s better. This time complexity model would be seen in some algorithms such as binary search, since binary search is specifically designed to cut the dataset in half every time it does not find a match (try modeling this behavior on a calculator and graph it compared to the log2(n) curve).</p>
<p>O(1) &lt; O(logn) &lt; O(n) &lt; O(n^k) &lt; O(2^n) &lt; O(n!)</p>
<p>where k is an integer &gt; 1, to indicate a growing polynomial of n. You generally want the smallest mathematical model you can have for an algorithm, depending on what sort of data sets you are giving it. An algorithm with O(n!) complexity may not take very long to operate on a small data set, but it could take literally years to complete on a large data set. Simple optimizations could bring it down to O(2^n) or maybe something even better, significantly speeding up its operations on large data sets.</p>
<p>That’s just a rough overview, but it should be enough to understand big-o.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/big-o-notation/477268/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/big-o-notation/477268/3</link>
        <pubDate>Tue, 01 Jan 2013 19:23:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477268-3</guid>
        <source url="https://forum.moparisthebest.com/t/big-o-notation/477268.rss">Big-O Notation</source>
      </item>
      <item>
        <title>Big-O Notation</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>just replace the () with ^ if you want to get the GENERAL idea (not mathematically correct or anything, but its the general idea)</p>
<p>O^1 is constant with O<br>
O^2 is larger than O^1 but still consistent<br>
O^n grows larger as n grows larger (n usually indicating the size of an array)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/big-o-notation/477268/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/big-o-notation/477268/2</link>
        <pubDate>Tue, 01 Jan 2013 18:22:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477268-2</guid>
        <source url="https://forum.moparisthebest.com/t/big-o-notation/477268.rss">Big-O Notation</source>
      </item>
      <item>
        <title>Big-O Notation</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>I’ve seen some people like t4, super_, Graham, etc. say that certain things are an O(1) or O(n) operation. I had no clue what this was so I did a quick google search, but I’m still not fully understanding it?</p>
<p>Something like O(1) is constants so no matter the size it takes the same amount of time</p>
<p>and</p>
<p>O(n) is like the bigger the size the longer it will take?</p>
<p>I’m just confused.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/big-o-notation/477268/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/big-o-notation/477268/1</link>
        <pubDate>Tue, 01 Jan 2013 16:56:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477268-1</guid>
        <source url="https://forum.moparisthebest.com/t/big-o-notation/477268.rss">Big-O Notation</source>
      </item>
  </channel>
</rss>
