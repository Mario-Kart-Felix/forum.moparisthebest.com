<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Trading</title>
    <link>https://forum.moparisthebest.com/t/pi-trading/413549</link>
    <description>I&#39;m having a few problems, 1. trading works, but accepting/declining will not finalize, 2. there is a trade limit i&#39;d like to get rid of, I don&#39;t care much for balanced trading. I believe these are all the files, except for the clientside interface file.
It&#39;s something to do with like the first 5 cases or something in each java i believe. If i were wanting to add this to the server, i&#39;ve found a tutorial on it, but i&#39;m wanting to do the exact opposite.

I&#39;m using a 317 PI server



Bank5.java
[CODE]package server.model.players.packets;

import server.model.players.Client;
import server.model.players.PacketType;
/**
 * Bank 5 Items
 **/
public class Bank5 implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
	int interfaceId = c.getInStream().readSignedWordBigEndianA();
	int removeId = c.getInStream().readSignedWordBigEndianA();
	int removeSlot = c.getInStream().readSignedWordBigEndian();
	
		switch(interfaceId){

			case 3900:
			c.getShops().buyItem(removeId, removeSlot, 1);
			break;
			
			case 3823:
			c.getShops().sellItem(removeId, removeSlot, 1);
			break;
			
			case 5064:
			if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t store items while trading!&quot;);
				return;
			}
			if(c.storing) {
				
				return;
			}
			c.getItems().bankItem(removeId, removeSlot, 5);
			break;
			
			case 5382:
			if(c.storing) {
				
				return;
			}
			c.getItems().fromBank(removeId, removeSlot, 5);
			break;
			
			case 3322:
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
                c.getTradeAndDuel().tradeItem(removeId, removeSlot, 5);
           	} else {
				c.getTradeAndDuel().stakeItem(removeId, removeSlot, 5);
			}	
			break;
			
			case 3415:
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
				c.getTradeAndDuel().fromTrade(removeId, removeSlot, 5);
			}
			break;
			
			case 6669:
			if(c.storing) {
				
				return;
			}
			c.getTradeAndDuel().fromDuel(removeId, removeSlot, 5);
			break;
			
			case 1119:
			case 1120:
			case 1121:
			case 1122:
			case 1123:
				c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 5);
			break;
			
		}
	}

}
[/CODE]


bank10.java
[CODE]package server.model.players.packets;

import server.model.players.Client;
import server.model.players.PacketType;
/**
 * Bank 10 Items
 **/
public class Bank10 implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
	int interfaceId = c.getInStream().readUnsignedWordBigEndian();
	int removeId = c.getInStream().readUnsignedWordA();
	int removeSlot = c.getInStream().readUnsignedWordA();
					
		switch(interfaceId){
			case 1688:
				c.getPA().useOperate(removeId);
			break;
			case 3900:
			c.getShops().buyItem(removeId, removeSlot, 5);
			break;
			
			case 3823:
			c.getShops().sellItem(removeId, removeSlot, 5);
			break;	

			case 5064:
				if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t store items while trading!&quot;);
				return;
			}
			if(c.storing) {
				
				return;
			}
			c.getItems().bankItem(removeId, removeSlot, 10);
			break;
			
			case 5382:
			if(c.storing) {
				
				return;
			}
			c.getItems().fromBank(removeId, removeSlot, 10);
			break;
			
			case 3322:
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
                c.getTradeAndDuel().tradeItem(removeId, removeSlot, 10);
           	} else {
				c.getTradeAndDuel().stakeItem(removeId, removeSlot, 10);
			}	
			break;
			
			case 3415:
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
				c.getTradeAndDuel().fromTrade(removeId, removeSlot, 10);
           	} 
			break;
			
			case 6669:
			c.getTradeAndDuel().fromDuel(removeId, removeSlot, 10);
			break;
			
			case 1119:
			case 1120:
			case 1121:
			case 1122:
			case 1123:
				c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 5);
			break;
		}	
	}

}
[/CODE]

bankAll.java
[CODE]package server.model.players.packets;

import server.model.items.GameItem;
import server.model.items.Item;
import server.model.players.Client;
import server.model.players.PacketType;

/**
 * Bank All Items
 **/
public class BankAll implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
	int removeSlot = c.getInStream().readUnsignedWordA();
	int interfaceId = c.getInStream().readUnsignedWord();
	int removeId = c.getInStream().readUnsignedWordA();
	
		switch(interfaceId){			
			case 3900:
			c.getShops().buyItem(removeId, removeSlot, 10);
			break;
			
			case 3823:
			if(c.storing) {
				
				return;
			}
			if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t sell items while trading!&quot;);
				return;
			}
			c.getShops().sellItem(removeId, removeSlot, 10);
			break;
			
			case 5064:
			if(c.storing) {
				
				return;
			}
			if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t bank items while trading!&quot;);
				return;
			}
			if(c.storing) {
				
				return;
			}
			if (Item.itemStackable[removeId]) {
				c.getItems().bankItem(c.playerItems[removeSlot] , removeSlot, c.playerItemsN[removeSlot]);
			} else {
				c.getItems().bankItem(c.playerItems[removeSlot] , removeSlot, c.getItems().itemAmount(c.playerItems[removeSlot]));
			}
			break;
			
			case 5382:
			if(c.storing) {
				
				return;
			}
			c.getItems().fromBank(c.bankItems[removeSlot] , removeSlot, c.bankItemsN[removeSlot]);
			break;	
			
			case 3322:
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
				if(Item.itemStackable[removeId]){
					c.getTradeAndDuel().tradeItem(removeId, removeSlot, c.playerItemsN[removeSlot]);
		    	} else {
					c.getTradeAndDuel().tradeItem(removeId, removeSlot, 28);  
				}
			} else {
				if(Item.itemStackable[removeId] || Item.itemIsNote[removeId]) {
					c.getTradeAndDuel().stakeItem(removeId, removeSlot, c.playerItemsN[removeSlot]);
				} else {
					c.getTradeAndDuel().stakeItem(removeId, removeSlot, 28);
				}
			}
			break;
			
			case 3415: 
			if(c.storing) {
				
				return;
			}
			if(c.duelStatus &lt;= 0) { 
				if(Item.itemStackable[removeId]) {
					for (GameItem item : c.getTradeAndDuel().offeredItems) {
						if(item.id == removeId) {
							c.getTradeAndDuel().fromTrade(removeId, removeSlot, c.getTradeAndDuel().offeredItems.get(removeSlot).amount);
						}
					}
				} else {
					for (GameItem item : c.getTradeAndDuel().offeredItems) {
						if(item.id == removeId) {
							c.getTradeAndDuel().fromTrade(removeId, removeSlot, 28);
						}
					}
				}
            } 
			break;
			
			case 6669:
			if(c.storing) {
				
				return;
			}
			if(Item.itemStackable[removeId] || Item.itemIsNote[removeId]) {
				for (GameItem item : c.getTradeAndDuel().stakedItems) {
					if(item.id == removeId) {
						c.getTradeAndDuel().fromDuel(removeId, removeSlot, c.getTradeAndDuel().stakedItems.get(removeSlot).amount);
					}
				}
						
			} else {
				c.getTradeAndDuel().fromDuel(removeId, removeSlot, 28);
			}
			break;

		}
	}

}
[/CODE]

bankX1.java
[CODE]package server.model.players.packets;

import server.model.players.Client;
import server.model.players.PacketType;
/**
 * Bank X Items
 **/
public class BankX1 implements PacketType {

	public static final int PART1 = 135;
	public static final int	PART2 = 208;
	public int XremoveSlot, XinterfaceID, XremoveID, Xamount;
	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
		if (packetType == 135) {
			if(c.storing) {
				
				return;
			}
			c.xRemoveSlot = c.getInStream().readSignedWordBigEndian();
			c.xInterfaceId = c.getInStream().readUnsignedWordA();
			c.xRemoveId = c.getInStream().readSignedWordBigEndian();
		}
		if (c.xInterfaceId == 3900) {
			c.getShops().buyItem(c.xRemoveId, c.xRemoveSlot, 50);//buy 20
			c.xRemoveSlot = 0;
			c.xInterfaceId = 0;
			c.xRemoveId = 0;
			return;
		}
			if(c.storing) {
				
				return;
			}

		if(packetType == PART1) {
			synchronized(c) {
			if(c.storing) {
				
				return;
			}
				c.getOutStream().createFrame(27);
			}			
		}
	
	}
}
[/CODE]

bankX2.java
[CODE]package server.model.players.packets;

import server.model.players.Client;
import server.model.players.PacketType;

/**
 * Bank X Items
 **/

public class BankX2 implements PacketType {
	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
		int Xamount = c.getInStream().readDWord();
		if (Xamount == 0)
			Xamount = 1;
		if(c.getGamble().betting) {
			c.getGamble().playerBet = Xamount;
			c.getGamble().blackJack(c);
		}
		switch (c.xInterfaceId) {
			case 5064:
			if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t store items while trading!&quot;);
				return;
			}
			c.getItems().bankItem(c.playerItems[c.xRemoveSlot] , c.xRemoveSlot, Xamount);
			break;
				
			case 5382:
			c.getItems().fromBank(c.bankItems[c.xRemoveSlot] , c.xRemoveSlot, Xamount);
			break;

			case 3322:
			if(c.duelStatus &lt;= 0) {
            	c.getTradeAndDuel().tradeItem(c.xRemoveId, c.xRemoveSlot, Xamount);
            } else {				
				c.getTradeAndDuel().stakeItem(c.xRemoveId, c.xRemoveSlot, Xamount);
			}  
			break;
				
			case 3415: 
			if(c.duelStatus &lt;= 0) { 
            	c.getTradeAndDuel().fromTrade(c.xRemoveId, c.xRemoveSlot, Xamount);
			} 
			break;
				
			case 6669:
			c.getTradeAndDuel().fromDuel(c.xRemoveId, c.xRemoveSlot, Xamount);
			break;			
		}
	}
}[/CODE]

removeitem.java
[CODE]package server.model.players.packets;

import server.model.players.Client;
import server.model.players.PacketType;


/**
 * Remove Item
 **/
public class RemoveItem implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
		int interfaceId = c.getInStream().readUnsignedWordA();
		int removeSlot = c.getInStream().readUnsignedWordA();
		int removeId = c.getInStream().readUnsignedWordA();
		int shop = 0;
		int value = 0;
		String name = &quot;null&quot;;
	
		switch(interfaceId) {
case 7423:
if(c.occupied[removeSlot] == true &amp;&amp; c.storeditems[removeSlot] == removeId) 
{
c.getPA().Frame34(7423, -1, removeSlot, 1);
c.getItems().addItem(removeId, 1);
c.occupied[removeSlot] = false;
c.storeditems[removeSlot] = 0;
						c.getItems().resetTempItems();
						c.getItems().resetBank();
c.totalstored -= 1;
}



break;
						case 1688:
			if(c.inTrade) {
				c.getTradeAndDuel().declineTrade(true);
				return;
			}
			c.getItems().removeItem(removeId, removeSlot);
			break;
		
			case 5064:
			if(c.inTrade) {
				c.getTradeAndDuel().declineTrade(true);
				return;
			}
			c.getItems().bankItem(removeId, removeSlot, 1);
			break;
			
						case 5382:
			if(c.inTrade) {
				c.getTradeAndDuel().declineTrade(true);
				return;
			}
			c.getItems().fromBank(removeId, removeSlot, 1);
			break;
			
			case 3900:
			if(c.inTrade) {
				c.getTradeAndDuel().declineTrade(true);
				return;
			}
			c.getShops().buyFromShopPrice(removeId, removeSlot);
			break;
			
			case 3823:
			if(c.inTrade) {
				c.getTradeAndDuel().declineTrade(true);
				return;
			}
			c.getShops().sellToShopPrice(removeId, removeSlot);
			break;
			
			case 3322:
			if(c.duelStatus &lt;= 0) { 
                c.getTradeAndDuel().tradeItem(removeId, removeSlot, 1);
           	} else {
				c.getTradeAndDuel().stakeItem(removeId, removeSlot, 1);
			}
			break;
			
			case 3415:
			if(c.duelStatus &lt;= 0) { 
				c.getTradeAndDuel().fromTrade(removeId, removeSlot, 1);
           	} 
			break;
			
			case 6669:
			c.getTradeAndDuel().fromDuel(removeId, removeSlot, 1);
			break;
			
			case 1119:
			case 1120:
			case 1121:
			case 1122:
			case 1123:
				c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 1);
			break;
		}
	}
			
}
[/CODE]</description>
    
    <lastBuildDate>Mon, 05 Sep 2011 16:51:29 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-trading/413549.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Trading</title>
        <dc:creator><![CDATA[@t0n_t1n t0n t1n]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t0n_t1n">@t0n_t1n</a> wrote:</p>
          <blockquote>
              <p>I’m having a few problems, 1. trading works, but accepting/declining will not finalize, 2. there is a trade limit i’d like to get rid of, I don’t care much for balanced trading. I believe these are all the files, except for the clientside interface file.<br>
It’s something to do with like the first 5 cases or something in each java i believe. If i were wanting to add this to the server, i’ve found a tutorial on it, but i’m wanting to do the exact opposite.</p>
<p>I’m using a 317 PI server</p>
<p>Bank5.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
/**</p>
<ul>
<li>
<p>Bank 5 Items<br>
**/<br>
public class Bank5 implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
int interfaceId = c.getInStream().readSignedWordBigEndianA();<br>
int removeId = c.getInStream().readSignedWordBigEndianA();<br>
int removeSlot = c.getInStream().readSignedWordBigEndian();</p>
<pre><code> switch(interfaceId){

 	case 3900:
 	c.getShops().buyItem(removeId, removeSlot, 1);
 	break;
 	
 	case 3823:
 	c.getShops().sellItem(removeId, removeSlot, 1);
 	break;
 	
 	case 5064:
 	if(c.inTrade) {
 		c.sendMessage("You can't store items while trading!");
 		return;
 	}
 	if(c.storing) {
 		
 		return;
 	}
 	c.getItems().bankItem(removeId, removeSlot, 5);
 	break;
 	
 	case 5382:
 	if(c.storing) {
 		
 		return;
 	}
 	c.getItems().fromBank(removeId, removeSlot, 5);
 	break;
 	
 	case 3322:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
         c.getTradeAndDuel().tradeItem(removeId, removeSlot, 5);
    	} else {
 		c.getTradeAndDuel().stakeItem(removeId, removeSlot, 5);
 	}	
 	break;
 	
 	case 3415:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
 		c.getTradeAndDuel().fromTrade(removeId, removeSlot, 5);
 	}
 	break;
 	
 	case 6669:
 	if(c.storing) {
 		
 		return;
 	}
 	c.getTradeAndDuel().fromDuel(removeId, removeSlot, 5);
 	break;
 	
 	case 1119:
 	case 1120:
 	case 1121:
 	case 1122:
 	case 1123:
 		c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 5);
 	break;
 	
 }
</code></pre>
<p>}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
<p>bank10.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
/**</p>
<ul>
<li>
<p>Bank 10 Items<br>
**/<br>
public class Bank10 implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
int interfaceId = c.getInStream().readUnsignedWordBigEndian();<br>
int removeId = c.getInStream().readUnsignedWordA();<br>
int removeSlot = c.getInStream().readUnsignedWordA();</p>
<pre><code> switch(interfaceId){
 	case 1688:
 		c.getPA().useOperate(removeId);
 	break;
 	case 3900:
 	c.getShops().buyItem(removeId, removeSlot, 5);
 	break;
 	
 	case 3823:
 	c.getShops().sellItem(removeId, removeSlot, 5);
 	break;	

 	case 5064:
 		if(c.inTrade) {
 		c.sendMessage("You can't store items while trading!");
 		return;
 	}
 	if(c.storing) {
 		
 		return;
 	}
 	c.getItems().bankItem(removeId, removeSlot, 10);
 	break;
 	
 	case 5382:
 	if(c.storing) {
 		
 		return;
 	}
 	c.getItems().fromBank(removeId, removeSlot, 10);
 	break;
 	
 	case 3322:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
         c.getTradeAndDuel().tradeItem(removeId, removeSlot, 10);
    	} else {
 		c.getTradeAndDuel().stakeItem(removeId, removeSlot, 10);
 	}	
 	break;
 	
 	case 3415:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
 		c.getTradeAndDuel().fromTrade(removeId, removeSlot, 10);
    	} 
 	break;
 	
 	case 6669:
 	c.getTradeAndDuel().fromDuel(removeId, removeSlot, 10);
 	break;
 	
 	case 1119:
 	case 1120:
 	case 1121:
 	case 1122:
 	case 1123:
 		c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 5);
 	break;
 }	
</code></pre>
<p>}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
<p>bankAll.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.items.GameItem;<br>
import server.model.items.Item;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;</p>
<p>/**</p>
<ul>
<li>
<p>Bank All Items<br>
**/<br>
public class BankAll implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
int removeSlot = c.getInStream().readUnsignedWordA();<br>
int interfaceId = c.getInStream().readUnsignedWord();<br>
int removeId = c.getInStream().readUnsignedWordA();</p>
<pre><code> switch(interfaceId){			
 	case 3900:
 	c.getShops().buyItem(removeId, removeSlot, 10);
 	break;
 	
 	case 3823:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.inTrade) {
 		c.sendMessage("You can't sell items while trading!");
 		return;
 	}
 	c.getShops().sellItem(removeId, removeSlot, 10);
 	break;
 	
 	case 5064:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.inTrade) {
 		c.sendMessage("You can't bank items while trading!");
 		return;
 	}
 	if(c.storing) {
 		
 		return;
 	}
 	if (Item.itemStackable[removeId]) {
 		c.getItems().bankItem(c.playerItems[removeSlot] , removeSlot, c.playerItemsN[removeSlot]);
 	} else {
 		c.getItems().bankItem(c.playerItems[removeSlot] , removeSlot, c.getItems().itemAmount(c.playerItems[removeSlot]));
 	}
 	break;
 	
 	case 5382:
 	if(c.storing) {
 		
 		return;
 	}
 	c.getItems().fromBank(c.bankItems[removeSlot] , removeSlot, c.bankItemsN[removeSlot]);
 	break;	
 	
 	case 3322:
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
 		if(Item.itemStackable[removeId]){
 			c.getTradeAndDuel().tradeItem(removeId, removeSlot, c.playerItemsN[removeSlot]);
     	} else {
 			c.getTradeAndDuel().tradeItem(removeId, removeSlot, 28);  
 		}
 	} else {
 		if(Item.itemStackable[removeId] || Item.itemIsNote[removeId]) {
 			c.getTradeAndDuel().stakeItem(removeId, removeSlot, c.playerItemsN[removeSlot]);
 		} else {
 			c.getTradeAndDuel().stakeItem(removeId, removeSlot, 28);
 		}
 	}
 	break;
 	
 	case 3415: 
 	if(c.storing) {
 		
 		return;
 	}
 	if(c.duelStatus &lt;= 0) { 
 		if(Item.itemStackable[removeId]) {
 			for (GameItem item : c.getTradeAndDuel().offeredItems) {
 				if(item.id == removeId) {
 					c.getTradeAndDuel().fromTrade(removeId, removeSlot, c.getTradeAndDuel().offeredItems.get(removeSlot).amount);
 				}
 			}
 		} else {
 			for (GameItem item : c.getTradeAndDuel().offeredItems) {
 				if(item.id == removeId) {
 					c.getTradeAndDuel().fromTrade(removeId, removeSlot, 28);
 				}
 			}
 		}
     } 
 	break;
 	
 	case 6669:
 	if(c.storing) {
 		
 		return;
 	}
 	if(Item.itemStackable[removeId] || Item.itemIsNote[removeId]) {
 		for (GameItem item : c.getTradeAndDuel().stakedItems) {
 			if(item.id == removeId) {
 				c.getTradeAndDuel().fromDuel(removeId, removeSlot, c.getTradeAndDuel().stakedItems.get(removeSlot).amount);
 			}
 		}
 				
 	} else {
 		c.getTradeAndDuel().fromDuel(removeId, removeSlot, 28);
 	}
 	break;

 }
</code></pre>
<p>}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
<p>bankX1.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
/**</p>
<ul>
<li>
<p>Bank X Items<br>
**/<br>
public class BankX1 implements PacketType {</p>
<p>public static final int PART1 = 135;<br>
public static final int	PART2 = 208;<br>
public int XremoveSlot, XinterfaceID, XremoveID, Xamount;<br>
<a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
if (packetType == 135) {<br>
if(c.storing) {</p>
<pre><code> 		return;
 	}
 	c.xRemoveSlot = c.getInStream().readSignedWordBigEndian();
 	c.xInterfaceId = c.getInStream().readUnsignedWordA();
 	c.xRemoveId = c.getInStream().readSignedWordBigEndian();
 }
 if (c.xInterfaceId == 3900) {
 	c.getShops().buyItem(c.xRemoveId, c.xRemoveSlot, 50);//buy 20
 	c.xRemoveSlot = 0;
 	c.xInterfaceId = 0;
 	c.xRemoveId = 0;
 	return;
 }
 	if(c.storing) {
 		
 		return;
 	}

 if(packetType == PART1) {
 	synchronized(c) {
 	if(c.storing) {
 		
 		return;
 	}
 		c.getOutStream().createFrame(27);
 	}			
 }
</code></pre>
<p>}<br>
}<br>
[/CODE]</p>
</li>
</ul>
<p>bankX2.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.players.Client;<br>
import server.model.players.PacketType;</p>
<p>/**</p>
<ul>
<li>Bank X Items<br>
**/</li>
</ul>
<p>public class BankX2 implements PacketType {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
int Xamount = c.getInStream().readDWord();<br>
if (Xamount == 0)<br>
Xamount = 1;<br>
if(c.getGamble().betting) {<br>
c.getGamble().playerBet = Xamount;<br>
c.getGamble().blackJack©;<br>
}<br>
switch (c.xInterfaceId) {<br>
case 5064:<br>
if(c.inTrade) {<br>
c.sendMessage(“You can’t store items while trading!”);<br>
return;<br>
}<br>
c.getItems().bankItem(c.playerItems[c.xRemoveSlot] , c.xRemoveSlot, Xamount);<br>
break;</p>
<pre><code>		case 5382:
		c.getItems().fromBank(c.bankItems[c.xRemoveSlot] , c.xRemoveSlot, Xamount);
		break;

		case 3322:
		if(c.duelStatus &lt;= 0) {
        	c.getTradeAndDuel().tradeItem(c.xRemoveId, c.xRemoveSlot, Xamount);
        } else {				
			c.getTradeAndDuel().stakeItem(c.xRemoveId, c.xRemoveSlot, Xamount);
		}  
		break;
			
		case 3415: 
		if(c.duelStatus &lt;= 0) { 
        	c.getTradeAndDuel().fromTrade(c.xRemoveId, c.xRemoveSlot, Xamount);
		} 
		break;
			
		case 6669:
		c.getTradeAndDuel().fromDuel(c.xRemoveId, c.xRemoveSlot, Xamount);
		break;			
	}
}
</code></pre>
<p>}[/CODE]</p>
<p>removeitem.java</p>
<p>[CODE]package server.model.players.packets;</p>
<p>import server.model.players.Client;<br>
import server.model.players.PacketType;</p>
<p>/**</p>
<ul>
<li>
<p>Remove Item<br>
**/<br>
public class RemoveItem implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
int interfaceId = c.getInStream().readUnsignedWordA();<br>
int removeSlot = c.getInStream().readUnsignedWordA();<br>
int removeId = c.getInStream().readUnsignedWordA();<br>
int shop = 0;<br>
int value = 0;<br>
String name = “null”;</p>
<pre><code> switch(interfaceId) {
</code></pre>
</li>
</ul>
<p>case 7423:<br>
if(c.occupied[removeSlot] == true &amp;&amp; c.storeditems[removeSlot] == removeId)<br>
{<br>
c.getPA().Frame34(7423, -1, removeSlot, 1);<br>
c.getItems().addItem(removeId, 1);<br>
c.occupied[removeSlot] = false;<br>
c.storeditems[removeSlot] = 0;<br>
c.getItems().resetTempItems();<br>
c.getItems().resetBank();<br>
c.totalstored -= 1;<br>
}</p>
<p>break;<br>
case 1688:<br>
if(c.inTrade) {<br>
c.getTradeAndDuel().declineTrade(true);<br>
return;<br>
}<br>
c.getItems().removeItem(removeId, removeSlot);<br>
break;</p>
<pre><code>		case 5064:
		if(c.inTrade) {
			c.getTradeAndDuel().declineTrade(true);
			return;
		}
		c.getItems().bankItem(removeId, removeSlot, 1);
		break;
		
					case 5382:
		if(c.inTrade) {
			c.getTradeAndDuel().declineTrade(true);
			return;
		}
		c.getItems().fromBank(removeId, removeSlot, 1);
		break;
		
		case 3900:
		if(c.inTrade) {
			c.getTradeAndDuel().declineTrade(true);
			return;
		}
		c.getShops().buyFromShopPrice(removeId, removeSlot);
		break;
		
		case 3823:
		if(c.inTrade) {
			c.getTradeAndDuel().declineTrade(true);
			return;
		}
		c.getShops().sellToShopPrice(removeId, removeSlot);
		break;
		
		case 3322:
		if(c.duelStatus &lt;= 0) { 
            c.getTradeAndDuel().tradeItem(removeId, removeSlot, 1);
       	} else {
			c.getTradeAndDuel().stakeItem(removeId, removeSlot, 1);
		}
		break;
		
		case 3415:
		if(c.duelStatus &lt;= 0) { 
			c.getTradeAndDuel().fromTrade(removeId, removeSlot, 1);
       	} 
		break;
		
		case 6669:
		c.getTradeAndDuel().fromDuel(removeId, removeSlot, 1);
		break;
		
		case 1119:
		case 1120:
		case 1121:
		case 1122:
		case 1123:
			c.getSmithing().readInput(c.playerLevel[c.playerSmithing], Integer.toString(removeId), c, 1);
		break;
	}
}
</code></pre>
<p>}<br>
[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-trading/413549/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-trading/413549/1</link>
        <pubDate>Mon, 05 Sep 2011 16:51:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-413549-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-trading/413549.rss">[PI] Trading</source>
      </item>
  </channel>
</rss>
