<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Running and adding RSPS Server Applet</title>
    <link>https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535</link>
    <description>Could someone help me with my Runescape Private Server Bot please?

Im trying to get the Applet, Run it, and add it to the JFrame I have.

Having trouble though, But i dont know whats wrong. Searched all over google. :/

[code]package bot.co.uk.main;

import java.applet.Applet;
import java.applet.AppletContext;
import java.applet.AppletStub;
import java.awt.BorderLayout;
import java.awt.Component;
import java.awt.Desktop;
import java.awt.Dimension;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.awt.event.MouseListener;
import java.io.File;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.HashMap;
import java.util.Timer;
import java.util.TimerTask;

import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JPanel;
import javax.swing.JSeparator;

public class Main extends JFrame implements AppletStub {

        HashMap&lt;String, String&gt; parametrs = new HashMap&lt;String, String&gt;();

        private static final long serialVersionUID = 1L;

        static Main window = new Main(&quot;Bot&quot;);
        private JMenuBar menuBar = new JMenuBar();
        public Applet gameApplet;
        public ClassLoader theClassLoader;

        public static Main getWindow() {
                return window;
        }

        public ClassLoader getClassLoader() {
                return theClassLoader;
        }

        public Main(String title) {
                parametrs.put(&quot;java_arguments&quot;, &quot;-Xmx512m&quot;);

                getApplet();
                System.out.println(&quot;Adding applet to frame&quot;);
                //getContentPane().add(gameApplet);
                add(getApplet());
                pack();
                setVisible(true);
                setTitle(title);
                setSize(765, 555);
                setResizable(false);
                setDefaultCloseOperation(EXIT_ON_CLOSE);

                setJMenuBar(menuBar);
                JMenu fileMenu = new JMenu(&quot;File&quot;);
                menuBar.add(fileMenu);
                fileMenu.add(&quot;Start Script&quot;);
                fileMenu.add(&quot;Stop Script&quot;);

                fileMenu.add(new JSeparator());

                fileMenu.add(&quot;Close&quot;);

                JMenu editMenu = new JMenu(&quot;Edit&quot;);
                menuBar.add(editMenu);
                editMenu.add(&quot;Accounts&quot;);

                editMenu.add(new JSeparator());

                editMenu.add(&quot;Block User Input&quot;);
                editMenu.add(&quot;Use Less CPU&quot;);

                editMenu.add(new JSeparator());

                editMenu.add(&quot;Disable Randoms&quot;);
                editMenu.add(&quot;Break Handler&quot;);

                JMenu helpMenu = new JMenu(&quot;Help&quot;);
                menuBar.add(helpMenu);
                helpMenu.add(&quot;Site&quot;);
               
                JCheckBoxMenuItem userInput = new JCheckBoxMenuItem(&quot;User input&quot;);
                menuBar.add(userInput).addMouseListener(new MouseListener() {
                        public void mouseClicked(MouseEvent arg0) {
                        }

                        public void mouseEntered(MouseEvent arg0) {
                        }

                        public void mouseExited(MouseEvent arg0) {
                        }

                        public void mousePressed(MouseEvent arg0) {
                                System.out.println(&quot;Not Allowing User Input&quot;);
                        }

                        public void mouseReleased(MouseEvent arg0) {
                        }
                });

                for (Component c : fileMenu.getMenuComponents()) {
                        if (c instanceof JMenuItem) {
                                JMenuItem ji = (JMenuItem) c;
                                ji.addActionListener(new ActionListener() {
                                        public void actionPerformed(ActionEvent e) {
                                                fileMenuActionPerformed(e);
                                        }

                                        private void fileMenuActionPerformed(ActionEvent e) {
                                                String names = ((JMenuItem) e.getSource()).getText();
                                                if (names.equals(&quot;Start Script&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Stop Script&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Close&quot;)) {
                                                        window.dispose();
                                                }
                                        }
                                });
                        }
                }

                for (Component c : editMenu.getMenuComponents()) {
                        if (c instanceof JMenuItem) {
                                JMenuItem ji = (JMenuItem) c;
                                ji.addActionListener(new ActionListener() {
                                        public void actionPerformed(ActionEvent e) {
                                                fileMenuActionPerformed(e);
                                        }

                                        private void fileMenuActionPerformed(ActionEvent e) {
                                                String names = ((JMenuItem) e.getSource()).getText();
                                                if (names.equals(&quot;Accounts&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Block User Input&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Use Less CPU&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Disable Randoms&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                } else if (names.equals(&quot;Break Handler&quot;)) {
                                                        System.out.println(e.getActionCommand());
                                                }
                                        }
                                });
                        }
                }

                for (Component c : helpMenu.getMenuComponents()) {
                        if (c instanceof JMenuItem) {
                                JMenuItem ji = (JMenuItem) c;
                                ji.addActionListener(new ActionListener() {
                                        public void actionPerformed(ActionEvent e) {
                                                fileMenuActionPerformed(e);
                                        }

                                        private void fileMenuActionPerformed(ActionEvent e) {
                                                String names = ((JMenuItem) e.getSource()).getText();
                                                if (names.equals(&quot;Site&quot;)) {
                                                        try {
                                                                Desktop desk = Desktop.getDesktop();
                                                                desk.browse(new URI(
                                                                                &quot;&quot;));
                                                        } catch (Exception f) {

                                                        }
                                                }
                                        }
                                });
                        }
                }
        }

        public Applet getApplet(){
                try {
                    
                    gameApplet = (Applet)(new URLClassLoader(new URL[] {
                            (new File(&quot;client.jar&quot;)).toURI().toURL()
                        })).loadClass(&quot;client&quot;).newInstance();
                      gameApplet.setStub(this);
                      gameApplet.init();
                      gameApplet.start();
                } catch (MalformedURLException e) {
                        e.printStackTrace();
                } catch (InstantiationException e) {
                    e.printStackTrace();
                } catch (IllegalAccessException e) {
                    e.printStackTrace();
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
                return gameApplet;
        }

        public static void main(String[] args) {
                window.setVisible(true);
        }

        public AppletContext getAppletContext() {
                return null;
        }

        public URL getCodeBase() {
                try {
                        return new URL(&quot;http://www.runedeath.com/client.jar&quot;);
                } catch (MalformedURLException e) {
                        e.printStackTrace();
                }
                return null;
        }

        public URL getDocumentBase() {
                try {
                        return new URL(&quot;http://runedeath.com/play.html&quot;);
                } catch (MalformedURLException e) {
                        e.printStackTrace();
                }
                return null;
        }

        public String getParameter(String arg0) {
                return parametrs.get(arg0);
        }

        public void appletResize(int width, int height) {
        }
}[/code]</description>
    
    <lastBuildDate>Wed, 18 Jun 2014 05:48:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Running and adding RSPS Server Applet</title>
        <dc:creator><![CDATA[@greatpea greatpea]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/greatpea">@greatpea</a> wrote:</p>
          <blockquote>
              <p><code>        public Main(String title) {
                parametrs.put("java_arguments", "-Xmx512m");</code></p>
<p>idk if that is actually doing anything</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535/2</link>
        <pubDate>Wed, 18 Jun 2014 05:48:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543535-2</guid>
        <source url="https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535.rss">Running and adding RSPS Server Applet</source>
      </item>
      <item>
        <title>Running and adding RSPS Server Applet</title>
        <dc:creator><![CDATA[@changed changed]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/changed">@changed</a> wrote:</p>
          <blockquote>
              <p>Could someone help me with my Runescape Private Server Bot please?</p>
<p>Im trying to get the Applet, Run it, and add it to the JFrame I have.</p>
<p>Having trouble though, But i dont know whats wrong. Searched all over google. <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
<p>[code]package bot.co.uk.main;</p>
<p>import java.applet.Applet;<br>
import java.applet.AppletContext;<br>
import java.applet.AppletStub;<br>
import java.awt.BorderLayout;<br>
import java.awt.Component;<br>
import java.awt.Desktop;<br>
import java.awt.Dimension;<br>
import java.awt.event.ActionEvent;<br>
import java.awt.event.ActionListener;<br>
import java.awt.event.MouseEvent;<br>
import java.awt.event.MouseListener;<br>
import java.io.File;<br>
import java.net.MalformedURLException;<br>
import java.net.URI;<br>
import java.net.URL;<br>
import java.net.URLClassLoader;<br>
import java.util.HashMap;<br>
import java.util.Timer;<br>
import java.util.TimerTask;</p>
<p>import javax.swing.JCheckBoxMenuItem;<br>
import javax.swing.JFrame;<br>
import javax.swing.JMenu;<br>
import javax.swing.JMenuBar;<br>
import javax.swing.JMenuItem;<br>
import javax.swing.JPanel;<br>
import javax.swing.JSeparator;</p>
<p>public class Main extends JFrame implements AppletStub {</p>
<pre><code>    HashMap&lt;String, String&gt; parametrs = new HashMap&lt;String, String&gt;();

    private static final long serialVersionUID = 1L;

    static Main window = new Main("Bot");
    private JMenuBar menuBar = new JMenuBar();
    public Applet gameApplet;
    public ClassLoader theClassLoader;

    public static Main getWindow() {
            return window;
    }

    public ClassLoader getClassLoader() {
            return theClassLoader;
    }

    public Main(String title) {
            parametrs.put("java_arguments", "-Xmx512m");

            getApplet();
            System.out.println("Adding applet to frame");
            //getContentPane().add(gameApplet);
            add(getApplet());
            pack();
            setVisible(true);
            setTitle(title);
            setSize(765, 555);
            setResizable(false);
            setDefaultCloseOperation(EXIT_ON_CLOSE);

            setJMenuBar(menuBar);
            JMenu fileMenu = new JMenu("File");
            menuBar.add(fileMenu);
            fileMenu.add("Start Script");
            fileMenu.add("Stop Script");

            fileMenu.add(new JSeparator());

            fileMenu.add("Close");

            JMenu editMenu = new JMenu("Edit");
            menuBar.add(editMenu);
            editMenu.add("Accounts");

            editMenu.add(new JSeparator());

            editMenu.add("Block User Input");
            editMenu.add("Use Less CPU");

            editMenu.add(new JSeparator());

            editMenu.add("Disable Randoms");
            editMenu.add("Break Handler");

            JMenu helpMenu = new JMenu("Help");
            menuBar.add(helpMenu);
            helpMenu.add("Site");
           
            JCheckBoxMenuItem userInput = new JCheckBoxMenuItem("User input");
            menuBar.add(userInput).addMouseListener(new MouseListener() {
                    public void mouseClicked(MouseEvent arg0) {
                    }

                    public void mouseEntered(MouseEvent arg0) {
                    }

                    public void mouseExited(MouseEvent arg0) {
                    }

                    public void mousePressed(MouseEvent arg0) {
                            System.out.println("Not Allowing User Input");
                    }

                    public void mouseReleased(MouseEvent arg0) {
                    }
            });

            for (Component c : fileMenu.getMenuComponents()) {
                    if (c instanceof JMenuItem) {
                            JMenuItem ji = (JMenuItem) c;
                            ji.addActionListener(new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                            fileMenuActionPerformed(e);
                                    }

                                    private void fileMenuActionPerformed(ActionEvent e) {
                                            String names = ((JMenuItem) e.getSource()).getText();
                                            if (names.equals("Start Script")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Stop Script")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Close")) {
                                                    window.dispose();
                                            }
                                    }
                            });
                    }
            }

            for (Component c : editMenu.getMenuComponents()) {
                    if (c instanceof JMenuItem) {
                            JMenuItem ji = (JMenuItem) c;
                            ji.addActionListener(new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                            fileMenuActionPerformed(e);
                                    }

                                    private void fileMenuActionPerformed(ActionEvent e) {
                                            String names = ((JMenuItem) e.getSource()).getText();
                                            if (names.equals("Accounts")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Block User Input")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Use Less CPU")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Disable Randoms")) {
                                                    System.out.println(e.getActionCommand());
                                            } else if (names.equals("Break Handler")) {
                                                    System.out.println(e.getActionCommand());
                                            }
                                    }
                            });
                    }
            }

            for (Component c : helpMenu.getMenuComponents()) {
                    if (c instanceof JMenuItem) {
                            JMenuItem ji = (JMenuItem) c;
                            ji.addActionListener(new ActionListener() {
                                    public void actionPerformed(ActionEvent e) {
                                            fileMenuActionPerformed(e);
                                    }

                                    private void fileMenuActionPerformed(ActionEvent e) {
                                            String names = ((JMenuItem) e.getSource()).getText();
                                            if (names.equals("Site")) {
                                                    try {
                                                            Desktop desk = Desktop.getDesktop();
                                                            desk.browse(new URI(
                                                                            ""));
                                                    } catch (Exception f) {

                                                    }
                                            }
                                    }
                            });
                    }
            }
    }

    public Applet getApplet(){
            try {
                
                gameApplet = (Applet)(new URLClassLoader(new URL[] {
                        (new File("client.jar")).toURI().toURL()
                    })).loadClass("client").newInstance();
                  gameApplet.setStub(this);
                  gameApplet.init();
                  gameApplet.start();
            } catch (MalformedURLException e) {
                    e.printStackTrace();
            } catch (InstantiationException e) {
                e.printStackTrace();
            } catch (IllegalAccessException e) {
                e.printStackTrace();
            } catch (ClassNotFoundException e) {
                e.printStackTrace();
            }
            return gameApplet;
    }

    public static void main(String[] args) {
            window.setVisible(true);
    }

    public AppletContext getAppletContext() {
            return null;
    }

    public URL getCodeBase() {
            try {
                    return new URL("http://www.runedeath.com/client.jar");
            } catch (MalformedURLException e) {
                    e.printStackTrace();
            }
            return null;
    }

    public URL getDocumentBase() {
            try {
                    return new URL("http://runedeath.com/play.html");
            } catch (MalformedURLException e) {
                    e.printStackTrace();
            }
            return null;
    }

    public String getParameter(String arg0) {
            return parametrs.get(arg0);
    }

    public void appletResize(int width, int height) {
    }
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535/1</link>
        <pubDate>Sat, 31 May 2014 15:25:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543535-1</guid>
        <source url="https://forum.moparisthebest.com/t/running-and-adding-rsps-server-applet/543535.rss">Running and adding RSPS Server Applet</source>
      </item>
  </channel>
</rss>
