<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Crossbow</title>
    <link>https://forum.moparisthebest.com/t/crossbow/551925</link>
    <description>I was adding armadyl crossbow which works perfectly fine, only thing wrong is it only attacks when im beside the npc/person just like melee.</description>
    
    <lastBuildDate>Wed, 10 Jun 2015 19:41:58 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/crossbow/551925.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Crossbow</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>[quote=“tank nation, post:3, topic:551925”][quote author=runescape sucks link=topic=670841.msg4485851#msg4485851 date=1433953717]<br>
There’s probably a method in one of your combat files that checks how far away you can be, and by default returns 1 block. Find that, and change it to whatever a crossbow is supposed to be for your crossbow’s ID.<br>
[/quote]</p>
<p>That’s the problem i don’t think it’s in combatass… look [code]package ardi.model.players;</p>
<p>import ardi.model.npcs.NPCHandler;<br>
import ardi.model.players.combat.AttackNPC;<br>
import ardi.model.players.combat.AttackPlayer;<br>
import ardi.model.players.combat.magic.MagicData;<br>
import ardi.model.players.combat.magic.MagicExtras;<br>
import ardi.model.players.combat.magic.MagicMaxHit;<br>
import ardi.model.players.combat.magic.MagicRequirements;<br>
import ardi.model.players.combat.melee.CombatPrayer;<br>
import ardi.model.players.combat.melee.MeleeData;<br>
import ardi.model.players.combat.melee.MeleeExtras;<br>
import ardi.model.players.combat.melee.MeleeMaxHit;<br>
import ardi.model.players.combat.melee.MeleeRequirements;<br>
import ardi.model.players.combat.melee.MeleeSpecial;<br>
import ardi.model.players.combat.range.RangeData;<br>
import ardi.model.players.combat.range.RangeExtras;<br>
import ardi.model.players.combat.range.RangeMaxHit;</p>
<p>public class CombatAssistant {</p>
<pre><code>private Client c;

public CombatAssistant(Client Client) {
	this.c = Client;
}
</code></pre>
<p>private int combatExp() {<br>
int amount = 0;<br>
if (c.easyMode) {<br>
amount = 5000;<br>
} else if (c.mediumMode) {<br>
amount = 500;<br>
} else if (c.hardMode) {<br>
amount = 50;<br>
} else if (c.extremeMode) {<br>
amount = 10;<br>
}<br>
return amount;<br>
}</p>
<pre><code>public int[][] slayerReqs = {
	{1648,5},{1612,15},{1643,45},{1618,50},
	{1624,65},{1610,75},{1613,80},{1615,85},
	{2783,90}
};


public boolean goodSlayer(int i) {
	for (int j = 0; j &lt; slayerReqs.length; j++) {
		if (slayerReqs[j][0] == NPCHandler.npcs[i].npcType) {
			if (slayerReqs[j][1] &gt; c.playerLevel[c.playerSlayer]) {
				c.sendMessage("You need a slayer level of " + slayerReqs[j][1] + " to harm this NPC.");
				return false;
			}
		}
	}
	return true;
}

public boolean kalphite1(int i) {
	switch (NPCHandler.npcs[i].npcType) {
		case 1158:
		return true;	
	}
	return false;	
}

public boolean kalphite2(int i) {
	switch (NPCHandler.npcs[i].npcType) {
		case 1160:
		return true;	
	}
return false;	}

public void resetPlayerAttack() {
	MeleeData.resetPlayerAttack(c);
}		

public int getCombatDifference(int combat1, int combat2) {
	return MeleeRequirements.getCombatDifference(combat1, combat2);
}

public int getKillerId(int playerId) {
	return MeleeRequirements.getKillerId(c, playerId);
}

public boolean checkReqs() {
	return MeleeRequirements.checkReqs(c);
}

public boolean checkMultiBarrageReqs(int i) {
	return MagicExtras.checkMultiBarrageReqs(c, i);
}

public int getRequiredDistance() {
	return MeleeRequirements.getRequiredDistance(c);
}

public void multiSpellEffectNPC(int npcId, int damage) {
	MagicExtras.multiSpellEffectNPC(c, npcId, damage);
}

public boolean checkMultiBarrageReqsNPC(int i) {
	return MagicExtras.checkMultiBarrageReqsNPC(i);
}

public void appendMultiBarrageNPC(int npcId, boolean splashed) {
	MagicExtras.appendMultiBarrageNPC(c, npcId, splashed);
}

public void attackNpc(int i) {
	AttackNPC.attackNpc(c, i);
}

public void delayedHit(final Client c, final int i) {
	AttackNPC.delayedHit(c, i);
}

public void applyNpcMeleeDamage(int i, int damageMask, int damage) {
	AttackNPC.applyNpcMeleeDamage(c, i, damageMask, damage);
}

public void attackPlayer(int i) {
	AttackPlayer.attackPlayer(c, i);
}

public void playerDelayedHit(final Client c, final int i) {
	AttackPlayer.playerDelayedHit(c, i);
}

public void applyPlayerMeleeDamage(int i, int damageMask, int damage){
	AttackPlayer.applyPlayerMeleeDamage(c, i, damageMask, damage);
}

public void addNPCHit(int i, Client c){
	AttackNPC.addNPCHit(i, c);
}

public void applyPlayerHit(Client c, final int i) {
	AttackPlayer.applyPlayerHit(c, i);
}

public void fireProjectileNpc() {
	RangeData.fireProjectileNpc(c);
}

public void fireProjectilePlayer() {
	RangeData.fireProjectilePlayer(c);
}

public boolean usingCrystalBow() {
	return c.playerEquipment[c.playerWeapon] &gt;= 4212 &amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223;	
}

public boolean multis() {
	return MagicData.multiSpells(c);
}

public void appendMultiBarrage(int playerId, boolean splashed) {
	MagicExtras.appendMultiBarrage(c, playerId, splashed);
}

public void multiSpellEffect(int playerId, int damage) {					
	MagicExtras.multiSpellEffect(c, playerId, damage);
}

public void applySmite(int index, int damage) {
	MeleeExtras.applySmite(c, index, damage);
}

public boolean usingDbow() {
	return c.playerEquipment[c.playerWeapon] == 11235;
}

public boolean usingHally() {
	return MeleeData.usingHally(c);
}

public void getPlayerAnimIndex(String weaponName){
	MeleeData.getPlayerAnimIndex(c, weaponName);
}

public int getWepAnim(String weaponName) {
	return MeleeData.getWepAnim(c, weaponName);
}

public int getBlockEmote() {
	return MeleeData.getBlockEmote(c);
}

public int getAttackDelay(String s) {
	return MeleeData.getAttackDelay(c, s);
}

public int getHitDelay(int i, String weaponName) {
	return MeleeData.getHitDelay(c, i, weaponName);
}

public int npcDefenceAnim(int i) {
	return MeleeData.npcDefenceAnim(i);
}

public int calculateMeleeAttack() {
	return MeleeMaxHit.calculateMeleeAttack(c);
}

public int bestMeleeAtk() {
	return MeleeMaxHit.bestMeleeAtk(c);
}

public int calculateMeleeMaxHit() {
	return (int)MeleeMaxHit.calculateBaseDamage(c, c.usingSpecial);
}

public int calculateMeleeDefence() {
	return MeleeMaxHit.calculateMeleeDefence(c);
}

public int bestMeleeDef() {
	return MeleeMaxHit.bestMeleeDef(c);
}

public void addCharge() {
	MeleeExtras.addCharge(c);
}

public void handleDfs(final Client c) {
	MeleeExtras.handleDragonFireShield(c);				
}

public void handleDfsNPC(final Client c) {
	MeleeExtras.handleDragonFireShieldNPC(c);
}

public void appendVengeanceNPC(int otherPlayer, int damage) {
	MeleeExtras.appendVengeanceNPC(c, otherPlayer, damage);
}

public void appendVengeance(int otherPlayer, int damage) {
	MeleeExtras.appendVengeance(c, otherPlayer, damage);
}

public void applyRecoilNPC(int damage, int i) {
	MeleeExtras.applyRecoilNPC(c, damage, i);
}

public void applyRecoil(int damage, int i) {
	MeleeExtras.applyRecoil(c, damage, i);
}

public void removeRecoil(Client c) {
	MeleeExtras.removeRecoil(c);
}

public void handleGmaulPlayer() {
	MeleeExtras.graniteMaulSpecial(c);
	c.gfx100(340);
}

public void activateSpecial(int weapon, int i){
	MeleeSpecial.activateSpecial(c, weapon, i);
}

public boolean checkSpecAmount(int weapon) {
	return MeleeSpecial.checkSpecAmount(c, weapon);
}

public int calculateRangeAttack() {
	return RangeMaxHit.calculateRangeAttack(c);
}

public int calculateRangeDefence() {
	return RangeMaxHit.calculateRangeDefence(c);
}

public int rangeMaxHit() {
	return RangeMaxHit.maxHit(c);
}

public int getRangeStr(int i) {
	return RangeData.getRangeStr(i);
}

public int getRangeStartGFX() {
	return RangeData.getRangeStartGFX(c);
}

public int getRangeProjectileGFX() {
	return RangeData.getRangeProjectileGFX(c);
}

public int correctBowAndArrows() {
	return RangeData.correctBowAndArrows(c);
}

public int getProjectileShowDelay() {
	return RangeData.getProjectileShowDelay(c);
}

public int getProjectileSpeed() {
	return RangeData.getProjectileSpeed(c);
}

public void crossbowSpecial(Client c, int i) {
	RangeExtras.crossbowSpecial(c, i);
}

public void appendMutliChinchompa(int npcId) {
	RangeExtras.appendMutliChinchompa(c, npcId);
}

public boolean properBolts() {
	return usingBolts(c.playerEquipment[c.playerArrows]);
}

public boolean usingBolts(int i) {
	return (i &gt;= 9140 &amp;&amp; i &lt;= 9145) || (i &gt;= 9236 &amp;&amp; i &lt;= 9245);
}

public int mageAtk() {
	return MagicMaxHit.mageAttack(c);
}

public int mageDef() {
	return MagicMaxHit.mageDefefence(c);
}

public int magicMaxHit() {
	return MagicMaxHit.magiMaxHit(c);
}

public boolean wearingStaff(int runeId) {
	return MagicRequirements.wearingStaff(c, runeId);
}

public boolean checkMagicReqs(int spell) {
	return MagicRequirements.checkMagicReqs(c, spell);
}

public int getMagicGraphic(Client c, int i) {
	return MagicData.getMagicGraphic(c, i);
}

public int getFreezeTime() {
	return MagicData.getFreezeTime(c);
}

public int getStartHeight() {
	return MagicData.getStartHeight(c);
}

public int getEndHeight() {
	return MagicData.getEndHeight(c);
}

public int getStartDelay() {
	return MagicData.getStartDelay(c);
}

public int getStaffNeeded() {
	return MagicData.getStaffNeeded(c);
}

public boolean godSpells() {
	return MagicData.godSpells(c);
}
	
public int getEndGfxHeight() {
	return MagicData.getEndGfxHeight(c);
}

public int getStartGfxHeight() {
	return MagicData.getStartGfxHeight(c);
}

public void handlePrayerDrain() {
	CombatPrayer.handlePrayerDrain(c);
}

public void reducePrayerLevel() {
	CombatPrayer.reducePrayerLevel(c);
}

public void resetPrayers() {
	CombatPrayer.resetPrayers(c);
}

public void activatePrayer(int i) {
	CombatPrayer.activatePrayer(c, i);
}
</code></pre>
<p>}[/code][/quote]</p>
<p>How about stop expecting somebody to spoonfeed you and actually do the work for you, and instead either learn Java or learn to use the current help people provide you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/crossbow/551925/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/crossbow/551925/4</link>
        <pubDate>Wed, 10 Jun 2015 19:41:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551925-4</guid>
        <source url="https://forum.moparisthebest.com/t/crossbow/551925.rss">Crossbow</source>
      </item>
      <item>
        <title>Crossbow</title>
        <dc:creator><![CDATA[@tank_nation tank nation]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tank_nation">@tank_nation</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="551925">
<div class="title">
<div class="quote-controls"></div>
 runescape sucks:</div>
<blockquote>
<p>There’s probably a method in one of your combat files that checks how far away you can be, and by default returns 1 block. Find that, and change it to whatever a crossbow is supposed to be for your crossbow’s ID.</p>
</blockquote>
</aside>
<p>That’s the problem i don’t think it’s in combatass… look [code]package ardi.model.players;</p>
<p>import ardi.model.npcs.NPCHandler;<br>
import ardi.model.players.combat.AttackNPC;<br>
import ardi.model.players.combat.AttackPlayer;<br>
import ardi.model.players.combat.magic.MagicData;<br>
import ardi.model.players.combat.magic.MagicExtras;<br>
import ardi.model.players.combat.magic.MagicMaxHit;<br>
import ardi.model.players.combat.magic.MagicRequirements;<br>
import ardi.model.players.combat.melee.CombatPrayer;<br>
import ardi.model.players.combat.melee.MeleeData;<br>
import ardi.model.players.combat.melee.MeleeExtras;<br>
import ardi.model.players.combat.melee.MeleeMaxHit;<br>
import ardi.model.players.combat.melee.MeleeRequirements;<br>
import ardi.model.players.combat.melee.MeleeSpecial;<br>
import ardi.model.players.combat.range.RangeData;<br>
import ardi.model.players.combat.range.RangeExtras;<br>
import ardi.model.players.combat.range.RangeMaxHit;</p>
<p>public class CombatAssistant {</p>
<pre><code>private Client c;

public CombatAssistant(Client Client) {
	this.c = Client;
}
</code></pre>
<p>private int combatExp() {<br>
int amount = 0;<br>
if (c.easyMode) {<br>
amount = 5000;<br>
} else if (c.mediumMode) {<br>
amount = 500;<br>
} else if (c.hardMode) {<br>
amount = 50;<br>
} else if (c.extremeMode) {<br>
amount = 10;<br>
}<br>
return amount;<br>
}</p>
<pre><code>public int[][] slayerReqs = {
	{1648,5},{1612,15},{1643,45},{1618,50},
	{1624,65},{1610,75},{1613,80},{1615,85},
	{2783,90}
};


public boolean goodSlayer(int i) {
	for (int j = 0; j &lt; slayerReqs.length; j++) {
		if (slayerReqs[j][0] == NPCHandler.npcs[i].npcType) {
			if (slayerReqs[j][1] &gt; c.playerLevel[c.playerSlayer]) {
				c.sendMessage("You need a slayer level of " + slayerReqs[j][1] + " to harm this NPC.");
				return false;
			}
		}
	}
	return true;
}

public boolean kalphite1(int i) {
	switch (NPCHandler.npcs[i].npcType) {
		case 1158:
		return true;	
	}
	return false;	
}

public boolean kalphite2(int i) {
	switch (NPCHandler.npcs[i].npcType) {
		case 1160:
		return true;	
	}
return false;	}

public void resetPlayerAttack() {
	MeleeData.resetPlayerAttack(c);
}		

public int getCombatDifference(int combat1, int combat2) {
	return MeleeRequirements.getCombatDifference(combat1, combat2);
}

public int getKillerId(int playerId) {
	return MeleeRequirements.getKillerId(c, playerId);
}

public boolean checkReqs() {
	return MeleeRequirements.checkReqs(c);
}

public boolean checkMultiBarrageReqs(int i) {
	return MagicExtras.checkMultiBarrageReqs(c, i);
}

public int getRequiredDistance() {
	return MeleeRequirements.getRequiredDistance(c);
}

public void multiSpellEffectNPC(int npcId, int damage) {
	MagicExtras.multiSpellEffectNPC(c, npcId, damage);
}

public boolean checkMultiBarrageReqsNPC(int i) {
	return MagicExtras.checkMultiBarrageReqsNPC(i);
}

public void appendMultiBarrageNPC(int npcId, boolean splashed) {
	MagicExtras.appendMultiBarrageNPC(c, npcId, splashed);
}

public void attackNpc(int i) {
	AttackNPC.attackNpc(c, i);
}

public void delayedHit(final Client c, final int i) {
	AttackNPC.delayedHit(c, i);
}

public void applyNpcMeleeDamage(int i, int damageMask, int damage) {
	AttackNPC.applyNpcMeleeDamage(c, i, damageMask, damage);
}

public void attackPlayer(int i) {
	AttackPlayer.attackPlayer(c, i);
}

public void playerDelayedHit(final Client c, final int i) {
	AttackPlayer.playerDelayedHit(c, i);
}

public void applyPlayerMeleeDamage(int i, int damageMask, int damage){
	AttackPlayer.applyPlayerMeleeDamage(c, i, damageMask, damage);
}

public void addNPCHit(int i, Client c){
	AttackNPC.addNPCHit(i, c);
}

public void applyPlayerHit(Client c, final int i) {
	AttackPlayer.applyPlayerHit(c, i);
}

public void fireProjectileNpc() {
	RangeData.fireProjectileNpc(c);
}

public void fireProjectilePlayer() {
	RangeData.fireProjectilePlayer(c);
}

public boolean usingCrystalBow() {
	return c.playerEquipment[c.playerWeapon] &gt;= 4212 &amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223;	
}

public boolean multis() {
	return MagicData.multiSpells(c);
}

public void appendMultiBarrage(int playerId, boolean splashed) {
	MagicExtras.appendMultiBarrage(c, playerId, splashed);
}

public void multiSpellEffect(int playerId, int damage) {					
	MagicExtras.multiSpellEffect(c, playerId, damage);
}

public void applySmite(int index, int damage) {
	MeleeExtras.applySmite(c, index, damage);
}

public boolean usingDbow() {
	return c.playerEquipment[c.playerWeapon] == 11235;
}

public boolean usingHally() {
	return MeleeData.usingHally(c);
}

public void getPlayerAnimIndex(String weaponName){
	MeleeData.getPlayerAnimIndex(c, weaponName);
}

public int getWepAnim(String weaponName) {
	return MeleeData.getWepAnim(c, weaponName);
}

public int getBlockEmote() {
	return MeleeData.getBlockEmote(c);
}

public int getAttackDelay(String s) {
	return MeleeData.getAttackDelay(c, s);
}

public int getHitDelay(int i, String weaponName) {
	return MeleeData.getHitDelay(c, i, weaponName);
}

public int npcDefenceAnim(int i) {
	return MeleeData.npcDefenceAnim(i);
}

public int calculateMeleeAttack() {
	return MeleeMaxHit.calculateMeleeAttack(c);
}

public int bestMeleeAtk() {
	return MeleeMaxHit.bestMeleeAtk(c);
}

public int calculateMeleeMaxHit() {
	return (int)MeleeMaxHit.calculateBaseDamage(c, c.usingSpecial);
}

public int calculateMeleeDefence() {
	return MeleeMaxHit.calculateMeleeDefence(c);
}

public int bestMeleeDef() {
	return MeleeMaxHit.bestMeleeDef(c);
}

public void addCharge() {
	MeleeExtras.addCharge(c);
}

public void handleDfs(final Client c) {
	MeleeExtras.handleDragonFireShield(c);				
}

public void handleDfsNPC(final Client c) {
	MeleeExtras.handleDragonFireShieldNPC(c);
}

public void appendVengeanceNPC(int otherPlayer, int damage) {
	MeleeExtras.appendVengeanceNPC(c, otherPlayer, damage);
}

public void appendVengeance(int otherPlayer, int damage) {
	MeleeExtras.appendVengeance(c, otherPlayer, damage);
}

public void applyRecoilNPC(int damage, int i) {
	MeleeExtras.applyRecoilNPC(c, damage, i);
}

public void applyRecoil(int damage, int i) {
	MeleeExtras.applyRecoil(c, damage, i);
}

public void removeRecoil(Client c) {
	MeleeExtras.removeRecoil(c);
}

public void handleGmaulPlayer() {
	MeleeExtras.graniteMaulSpecial(c);
	c.gfx100(340);
}

public void activateSpecial(int weapon, int i){
	MeleeSpecial.activateSpecial(c, weapon, i);
}

public boolean checkSpecAmount(int weapon) {
	return MeleeSpecial.checkSpecAmount(c, weapon);
}

public int calculateRangeAttack() {
	return RangeMaxHit.calculateRangeAttack(c);
}

public int calculateRangeDefence() {
	return RangeMaxHit.calculateRangeDefence(c);
}

public int rangeMaxHit() {
	return RangeMaxHit.maxHit(c);
}

public int getRangeStr(int i) {
	return RangeData.getRangeStr(i);
}

public int getRangeStartGFX() {
	return RangeData.getRangeStartGFX(c);
}

public int getRangeProjectileGFX() {
	return RangeData.getRangeProjectileGFX(c);
}

public int correctBowAndArrows() {
	return RangeData.correctBowAndArrows(c);
}

public int getProjectileShowDelay() {
	return RangeData.getProjectileShowDelay(c);
}

public int getProjectileSpeed() {
	return RangeData.getProjectileSpeed(c);
}

public void crossbowSpecial(Client c, int i) {
	RangeExtras.crossbowSpecial(c, i);
}

public void appendMutliChinchompa(int npcId) {
	RangeExtras.appendMutliChinchompa(c, npcId);
}

public boolean properBolts() {
	return usingBolts(c.playerEquipment[c.playerArrows]);
}

public boolean usingBolts(int i) {
	return (i &gt;= 9140 &amp;&amp; i &lt;= 9145) || (i &gt;= 9236 &amp;&amp; i &lt;= 9245);
}

public int mageAtk() {
	return MagicMaxHit.mageAttack(c);
}

public int mageDef() {
	return MagicMaxHit.mageDefefence(c);
}

public int magicMaxHit() {
	return MagicMaxHit.magiMaxHit(c);
}

public boolean wearingStaff(int runeId) {
	return MagicRequirements.wearingStaff(c, runeId);
}

public boolean checkMagicReqs(int spell) {
	return MagicRequirements.checkMagicReqs(c, spell);
}

public int getMagicGraphic(Client c, int i) {
	return MagicData.getMagicGraphic(c, i);
}

public int getFreezeTime() {
	return MagicData.getFreezeTime(c);
}

public int getStartHeight() {
	return MagicData.getStartHeight(c);
}

public int getEndHeight() {
	return MagicData.getEndHeight(c);
}

public int getStartDelay() {
	return MagicData.getStartDelay(c);
}

public int getStaffNeeded() {
	return MagicData.getStaffNeeded(c);
}

public boolean godSpells() {
	return MagicData.godSpells(c);
}
	
public int getEndGfxHeight() {
	return MagicData.getEndGfxHeight(c);
}

public int getStartGfxHeight() {
	return MagicData.getStartGfxHeight(c);
}

public void handlePrayerDrain() {
	CombatPrayer.handlePrayerDrain(c);
}

public void reducePrayerLevel() {
	CombatPrayer.reducePrayerLevel(c);
}

public void resetPrayers() {
	CombatPrayer.resetPrayers(c);
}

public void activatePrayer(int i) {
	CombatPrayer.activatePrayer(c, i);
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/crossbow/551925/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/crossbow/551925/3</link>
        <pubDate>Wed, 10 Jun 2015 17:26:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551925-3</guid>
        <source url="https://forum.moparisthebest.com/t/crossbow/551925.rss">Crossbow</source>
      </item>
      <item>
        <title>Crossbow</title>
        <dc:creator><![CDATA[@runescape_sucks runescape sucks]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/runescape_sucks">@runescape_sucks</a> wrote:</p>
          <blockquote>
              <p>There’s probably a method in one of your combat files that checks how far away you can be, and by default returns 1 block. Find that, and change it to whatever a crossbow is supposed to be for your crossbow’s ID.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/crossbow/551925/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/crossbow/551925/2</link>
        <pubDate>Wed, 10 Jun 2015 16:28:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551925-2</guid>
        <source url="https://forum.moparisthebest.com/t/crossbow/551925.rss">Crossbow</source>
      </item>
      <item>
        <title>Crossbow</title>
        <dc:creator><![CDATA[@tank_nation tank nation]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tank_nation">@tank_nation</a> wrote:</p>
          <blockquote>
              <p>I was adding armadyl crossbow which works perfectly fine, only thing wrong is it only attacks when im beside the npc/person just like melee.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/crossbow/551925/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/crossbow/551925/1</link>
        <pubDate>Wed, 10 Jun 2015 09:10:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551925-1</guid>
        <source url="https://forum.moparisthebest.com/t/crossbow/551925.rss">Crossbow</source>
      </item>
  </channel>
</rss>
