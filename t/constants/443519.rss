<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Constants</title>
    <link>https://forum.moparisthebest.com/t/constants/443519</link>
    <description>This is something I&#39;ve been trying to find for a while now. I&#39;ve seen and used different methods for defining constants, but none of them really seem appropriate. Let&#39;s take constants for Runecrafting.

[code=Java]
public static final int FIRE_RUNE = 554;
public static final int WATER_RUNE = 555;
public static final int AIR_RUNE = 556;
public static final int EARTH_RUNE = 557;
public static final int MIND_RUNE = 558;
public static final int BODY_RUNE = 559;
public static final int DEATH_RUNE = 560;
public static final int NATURE_RUNE = 561;
public static final int CHAOS_RUNE = 562;
public static final int LAW_RUNE = 563;
public static final int COSMIC_RUNE = 564;
public static final int BLOOD_RUNE = 565;
public static final int SOUL_RUNE = 566;
[/code]

Now, most people would make a &quot;Constants&quot; class and define them in there. However, there can be hundreds of constants (for organized programming). Classes should represent objects, so defining a &quot;Constants&quot; object doesn&#39;t make much sense. The same rule applies for interfaces, but in that case you don&#39;t have to worry about instantiation, and you can easily implement the interface.

This still doesn&#39;t solve the problem because interfaces provide a layer for behavior, not properties. The only other way I could think of is creating a Map of the constants, but that still does not seem like the most appropriate solution. I could use a static import, but that only solves half of the problem.

Does anyone have any other ideas?</description>
    
    <lastBuildDate>Fri, 01 Jun 2012 01:22:01 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/constants/443519.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>tibdit vs tidbit <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> very close though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/28">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/28</link>
        <pubDate>Fri, 01 Jun 2012 01:22:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-28</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="26" data-topic="443519">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>You can be redundant in terms of static if you wish, but you can’t declare it final because by definition, an enum is a subclass of java.lang.Enum, and having a final class means you can’t create a subclass of it. At least that’s how I think the logic behind it works <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
</blockquote>
</aside>
<p>Ah, I see. I kept thinking of it as more of a primitive, and completely forgot about that tidbit.</p>
<p>Also: I just realized that “tidbit” is a pseudo-palindrome.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/27">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/27</link>
        <pubDate>Fri, 01 Jun 2012 01:20:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-27</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>You can be redundant in terms of static if you wish, but you can’t declare it final because by definition, an enum is a subclass of java.lang.Enum, and having a final class means you can’t create a subclass of it. At least that’s how I think the logic behind it works <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>[quote=“veer, post:24, topic:443519”]Personally, I would prefer a solution akin to what object said, with providing some context to constants:</p>
<pre><code class="lang-auto">public class RunecraftingAction extends ... {

    /* Xs.lookup() will generally defer to a hidden repository */
    private static final ItemDefinition FIRE_RUNE = ItemDefinitions.lookup(554);
    private static final ItemDefinition WATER_RUNE = ItemDefinitions.lookup(555);
    ...

    private static final ItemDefinition RUNE_ESSENCE = ItemDefinitions.lookup(...);
    private static final ItemDefinition PURE_ESSENCE = ItemDefinitions.lookup(...);

    private static final ItemDefinition AIR_TIARA = ItemDefinitions.lookup(...);
    ...

    private static final ItemDefinition AIR_TALISMAN = ItemDefinitions.lookup(...);
    ...

    private static final ObjectDefinition AIR_ALTAR = ObjectDefinitions.lookup(...);
    ...

    private static class CraftingRule {
        /* implement a DSL here */
        ...
    }

    /* using() is a keyword in Java 7 */
    private static final CraftingRule[] RULES = new CraftingRule[] {
        CraftingRule.using(AIR_TIARA, AIR_TALISMAN).at(AIR_ALTAR).provided(RUNE_ESSENCE).produce(AIR_RUNE).reward(10),
        ...
    };

    ...
}</code></pre>
<p>… or something to that effect. Honestly, it would be wiser to implement in a more flexible scripting language like Ruby.<br>
Note, however, that object may deem this approach inferior to a more domain-driven one… ;)[/quote]Personally I never understood why you would do that (in terms of your final variable declaration). You could do the same thing inside an enumeration. I guess it just depends which you would consider ‘prettier’ code, as you could just change your method signatures to take enums constants and have the enums themselves hold the itemdefinition instances. I guess I just prefer the way using enums groups everything up so simply</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/26">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/26</link>
        <pubDate>Fri, 01 Jun 2012 01:17:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-26</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:23, topic:443519”]Both good questions, and both technically true – it was just when I was adapting my new server base to my new content, I ran into synchronization issues, which is why I created a new instance for each player, just never got around to changing it back.</p>
<p>Enums are by default static though, so no worries there. But I have mine private either way, so it’s somewhat irrelevant :P[/quote]</p>
<p>They are? Then how come declaring</p>
<pre><code class="lang-auto">public static enum Something {

}</code></pre>
<p>Doesn’t result in an error, but declaring it final does?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/25">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/25</link>
        <pubDate>Fri, 01 Jun 2012 00:56:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-25</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:10, topic:443519”]Static constants mostly. I’m trying to make it more of a habit to make variables more descriptive, instead of throwing around arbitrary number that someone not familiar with the API would know. For example, a normal person, who doesn’t know the ids of ever item, wouldn’t know that 995 is for coins. And things like the runes, tiaras, talismans, etc. From a “blind” standpoint, this</p>
<pre><code class="lang-auto">inventory.add(AIR_RUNE, 5);</code></pre>
<p>Is much clearer than</p>
<p><code>
inventory.add(556, 5);
</code>[/quote]</p>
<p>Instead of using plain constants, then, why not try using references to value objects to item definitions instead?</p>
<p>[quote=“object, post:12, topic:443519”]If you have a constant, you should have some context (a model perhaps) to which you can apply this constant. Be it a single class or multiple classes (an enum is actually a class-type - and may be very well suited for this, just as Taharok said), an abstraction or just some concrete concept. Whatever you have, you may add it to the least specific type of your context, in which it still applies. Not in some rather general “Constants” class (or interface which, as veer said, is considered an anti-pattern) in some common package.</p>
<p>If your constant refers to something that can be used by an implementation of an interface, create a class with the name of the least specific interface to which it still applies, with an “s” concatenated to the end. Just as java.util.Collections has been created for java.util.Collection. This class should preferrably be final and have a private constructor, so you cannot create an instance of it (although you can using Reflection).</p>
<p>It’s called high cohesion. Read up on it if you already havn’t. This principle, together with low coupling, separation of concerns (SoC) and divide and conquer (D&amp;C), are good principles to know and follow.[/quote]</p>
<p>I would personally avoid using an enum unless it is a logical representation of the type… for example, I would disagree with using an enum for items like so:</p>
<pre><code class="lang-auto">enum Item {
    GOLD(995), AIR_RUNE(556);

    private int id;

    Item(int id) {
        this.id = id;
    }

    public int id() {
        return id;
    }
}</code></pre>
<p>… on the grounds that an enumeration type is meant to encompass the whole broad range of acceptable values of the type – air runes and gold are only 2 of thousands of various types of items.<br>
Now, if instead you used enums in a fashion like so:</p>
<p>[code=java]<br>
enum Rune {<br>
FIRE, WATER, EARTH, MIND, …;</p>
<pre><code>String itemName() {
    return super.name().toLowerCase().concat(" rune");
}

public int itemId() {
    return 554 + super.ordinal();
}
</code></pre>
<p>}[/code]<br>
This, on the other hand, makes more sense… I believe Hyperion has much of its code done in this manner.</p>
<p>Personally, I would prefer a solution akin to what object said, with providing some context to constants:</p>
<pre><code class="lang-auto">public class RunecraftingAction extends ... {

    /* Xs.lookup() will generally defer to a hidden repository */
    private static final ItemDefinition FIRE_RUNE = ItemDefinitions.lookup(554);
    private static final ItemDefinition WATER_RUNE = ItemDefinitions.lookup(555);
    ...

    private static final ItemDefinition RUNE_ESSENCE = ItemDefinitions.lookup(...);
    private static final ItemDefinition PURE_ESSENCE = ItemDefinitions.lookup(...);

    private static final ItemDefinition AIR_TIARA = ItemDefinitions.lookup(...);
    ...

    private static final ItemDefinition AIR_TALISMAN = ItemDefinitions.lookup(...);
    ...

    private static final ObjectDefinition AIR_ALTAR = ObjectDefinitions.lookup(...);
    ...

    private static class CraftingRule {
        /* implement a DSL here */
        ...
    }

    private static final CraftingRule[] RULES = new CraftingRule[] {
        CraftingRule.using(AIR_TIARA, AIR_TALISMAN).at(AIR_ALTAR).provided(RUNE_ESSENCE).produce(AIR_RUNE).reward(10),
        ...
    };

    ...
}</code></pre>
<p>… or something to that effect. Honestly, it would be wiser to implement in a more flexible scripting language like Ruby.<br>
Note, however, that object may deem this approach inferior to a more domain-driven one… <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/24">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/24</link>
        <pubDate>Fri, 01 Jun 2012 00:55:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-24</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Both good questions, and both technically true – it was just when I was adapting my new server base to my new content, I ran into synchronization issues, which is why I created a new instance for each player, just never got around to changing it back.</p>
<p>Enums are by default static though, so no worries there. But I have mine private either way, so it’s somewhat irrelevant <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/23</link>
        <pubDate>Fri, 01 Jun 2012 00:48:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-23</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:21, topic:443519”][code=java]package net.championsrealm.entity.player.skills;</p>
<p>import net.championsrealm.entity.player.Player;</p>
<p>public class Runecrafting {</p>
<pre><code>private Player p;

private static final int PURE_ESS = 7936;

private enum RuneType {
	AIR(2478, 556, 1, 5, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 120),
	WATER(2480, 555, 5, 6, 19, 38, 57, 76, 95, 114),
	EARTH(2481, 557, 9, 6.5, 26, 52, 78, 104),
	FIRE(2482, 554, 14, 7, 35, 70, 105),

	//Battle
	MIND(2479, 558, 2, 5.5, 14, 28, 42, 56, 70, 85, 98, 112),
	CHAOS(2487, 562, 35, 8.5, 74),
	DEATH(2488, 560, 65, 10),
	BLOOD(-1, 565, 77, 10.5),

	//Special
	BODY(2483, 559, 20, 7.5, 46, 92),
	COSMIC(2484, 564, 27, 8, 59, 108),
	LAW(2485, 563, 54, 9.5, 110),
	NATURE(2486, 561, 44, 9, 91),
	ASTRAL(-1, 9075, 40, 8.75, 82),
	SOUL(2489, 566, 90, 11);

	private RuneType(int altarID, int id, int level, double xp, int ... multiples) {
		this.altarID = altarID;
		this.id = id;
		this.level = level;
		this.xp = xp;
		this.multiples = multiples;
	}

	private int altarID, id, level;
	private double xp;
	private int[] multiples;

	public int getAltarID() {
		return altarID;
	}
	
	public int getRuneID() {
		return id;
	}

	public int getLevel() {
		return level;
	}

	public double getCraftXP() {
		return xp;
	}

	public int[] getMultiples() {
		return multiples;
	}
}

public Runecrafting(Player p) {
	this.p = p;
}

public boolean craftRunes(int objectID) {
	RuneType type = null;
	for(RuneType t : RuneType.values()) {
		if(t.getAltarID() == objectID) {
			type = t;
			break;
		}
	}
	if(type == null) {
		return false;
	}
	if(canRunecraft(type)) {
		int multiplier = getMultiplier(type);
		int essCount = p.getItems().getItemCount(PURE_ESS);
		p.getItems().deleteItem(PURE_ESS, essCount);
		p.getItems().addItem(type.getRuneID(), essCount * multiplier);
		p.getSkills().addXp(Skills.RUNECRAFTING, type.getCraftXP() * essCount);
		p.getFrames().sendMessage("You craft some runes.");
		p.requestAnim(791, 0);
		p.requestGFX(186, 100);
	}
	return true;
}

private boolean canRunecraft(RuneType type) {
	if(p.getSkills().getLevel(Skills.RUNECRAFTING) &lt; type.getLevel()) {
		p.getFrames().sendMessage("You need a Runecrafting level of " + type.getLevel() + " to craft this rune.");
		return false;
	}
	if(p.getItems().getItemCount(PURE_ESS) &lt; 1) {
		p.getFrames().sendMessage("You do not have any essence with which to craft runes.");
		return false;
	}
	return true;
}

private int getMultiplier(RuneType type) {
	int multiplier = 1;
	for(int level : type.getMultiples()) {
		if(p.getSkills().getLevel(Skills.RUNECRAFTING) &gt;= level) {
			multiplier++;
		}
	}
	return multiplier;
}
</code></pre>
<p>}[/code][/quote]</p>
<p>How come you’re creating a new instance of Runecrafting for each Player? Couldn’t you just send the Player as an argument to the methods? Also, can’t RuneType be made static, so that it’s not created each time there’s a new instance?</p>
<p>I’m not criticizing, I’m just curious.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/22</link>
        <pubDate>Fri, 01 Jun 2012 00:40:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-22</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>I like to use enums whenever there is the possibility of hitting more than two birds with one stone. In the case of Runecrafting this is certainly true:</p>
<p>[code=java]package net.championsrealm.entity.player.skills;</p>
<p>import net.championsrealm.entity.player.Player;</p>
<p>public class Runecrafting {</p>
<pre><code>private Player p;

private static final int PURE_ESS = 7936;

private enum RuneType {
	AIR(2478, 556, 1, 5, 11, 22, 33, 44, 55, 66, 77, 88, 99, 110, 120),
	WATER(2480, 555, 5, 6, 19, 38, 57, 76, 95, 114),
	EARTH(2481, 557, 9, 6.5, 26, 52, 78, 104),
	FIRE(2482, 554, 14, 7, 35, 70, 105),

	//Battle
	MIND(2479, 558, 2, 5.5, 14, 28, 42, 56, 70, 85, 98, 112),
	CHAOS(2487, 562, 35, 8.5, 74),
	DEATH(2488, 560, 65, 10),
	BLOOD(-1, 565, 77, 10.5),

	//Special
	BODY(2483, 559, 20, 7.5, 46, 92),
	COSMIC(2484, 564, 27, 8, 59, 108),
	LAW(2485, 563, 54, 9.5, 110),
	NATURE(2486, 561, 44, 9, 91),
	ASTRAL(-1, 9075, 40, 8.75, 82),
	SOUL(2489, 566, 90, 11);

	private RuneType(int altarID, int id, int level, double xp, int ... multiples) {
		this.altarID = altarID;
		this.id = id;
		this.level = level;
		this.xp = xp;
		this.multiples = multiples;
	}

	private int altarID, id, level;
	private double xp;
	private int[] multiples;

	public int getAltarID() {
		return altarID;
	}
	
	public int getRuneID() {
		return id;
	}

	public int getLevel() {
		return level;
	}

	public double getCraftXP() {
		return xp;
	}

	public int[] getMultiples() {
		return multiples;
	}
}

public Runecrafting(Player p) {
	this.p = p;
}

public boolean craftRunes(int objectID) {
	RuneType type = null;
	for(RuneType t : RuneType.values()) {
		if(t.getAltarID() == objectID) {
			type = t;
			break;
		}
	}
	if(type == null) {
		return false;
	}
	if(canRunecraft(type)) {
		int multiplier = getMultiplier(type);
		int essCount = p.getItems().getItemCount(PURE_ESS);
		p.getItems().deleteItem(PURE_ESS, essCount);
		p.getItems().addItem(type.getRuneID(), essCount * multiplier);
		p.getSkills().addXp(Skills.RUNECRAFTING, type.getCraftXP() * essCount);
		p.getFrames().sendMessage("You craft some runes.");
		p.requestAnim(791, 0);
		p.requestGFX(186, 100);
	}
	return true;
}

private boolean canRunecraft(RuneType type) {
	if(p.getSkills().getLevel(Skills.RUNECRAFTING) &lt; type.getLevel()) {
		p.getFrames().sendMessage("You need a Runecrafting level of " + type.getLevel() + " to craft this rune.");
		return false;
	}
	if(p.getItems().getItemCount(PURE_ESS) &lt; 1) {
		p.getFrames().sendMessage("You do not have any essence with which to craft runes.");
		return false;
	}
	return true;
}

private int getMultiplier(RuneType type) {
	int multiplier = 1;
	for(int level : type.getMultiples()) {
		if(p.getSkills().getLevel(Skills.RUNECRAFTING) &gt;= level) {
			multiplier++;
		}
	}
	return multiplier;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/21</link>
        <pubDate>Fri, 01 Jun 2012 00:34:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-21</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rodgerwilco, post:8, topic:443519”][quote author=veer link=topic=546199.msg4004182#msg4004182 date=1338428027]<br>
This is <span class="bbcode-i">not</span> a good solution.<br>
[/quote]</p>
<p>Why not?[/quote]</p>
<p>Why on earth would you use an separate configuration file for <span class="bbcode-b">constants</span>? Configuration is for <span class="bbcode-i">configurable</span> initial settings.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/20</link>
        <pubDate>Thu, 31 May 2012 23:45:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-20</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Ideally, he’s right in saying the best solution is to directly use the item definition file. The lookup for an item based on name is nontrivial for linear time. If you use a hashmap, it’s much faster and will allow for realistic item lookup in realtime without concerns as to the number (granted, this is a more memory-intensive solution, but that’s not a big deal).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/19</link>
        <pubDate>Thu, 31 May 2012 16:52:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-19</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“imsuperman05, post:17, topic:443519”][quote author=zyle1992 link=topic=546199.msg4004583#msg4004583 date=1338482182]<br>
I was considering using enums, but I’ve always been conflicted in representing “simple” ideas in an enum (like creating an entire enum for one integer value).</p>
<p>I was thinking of using a lookup table, like</p>
<pre><code class="lang-auto">public final class Constants {
    public static final HashMap&lt;String, String&gt; CONSTANTS = new HashMap&lt;String, String&gt;();

    // load

    public static String get(final String name) {
        return CONSTANTS.get(name);
    }
}</code></pre>
<p>And then do</p>
<pre><code class="lang-auto">final int airRune = Integer.parseInt(Constants.get("air.rune"));
inventory.add(airRune, 5);</code></pre>
<p>So it’s still clear as to the intent, while providing a cohesive way of accessing constants.<br>
[/quote]<br>
Instead of creating a new list, why don’t you use the item list (that you must have in all servers) dumped from the cache?  You could just call the item id from the item name… then again you would have to modify the way you call it, so that you call the correct item id[/quote]</p>
<p>It would be more appropriate for an Item list in that point, and just look up from there. However, there are more constants than that.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/18</link>
        <pubDate>Thu, 31 May 2012 16:48:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-18</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:16, topic:443519”]I was considering using enums, but I’ve always been conflicted in representing “simple” ideas in an enum (like creating an entire enum for one integer value).</p>
<p>I was thinking of using a lookup table, like</p>
<pre><code class="lang-auto">public final class Constants {
    public static final HashMap&lt;String, String&gt; CONSTANTS = new HashMap&lt;String, String&gt;();

    // load

    public static String get(final String name) {
        return CONSTANTS.get(name);
    }
}</code></pre>
<p>And then do</p>
<pre><code class="lang-auto">final int airRune = Integer.parseInt(Constants.get("air.rune"));
inventory.add(airRune, 5);</code></pre>
<p>So it’s still clear as to the intent, while providing a cohesive way of accessing constants.[/quote]<br>
Instead of creating a new list, why don’t you use the item list (that you must have in all servers) dumped from the cache?  You could just call the item id from the item name… then again you would have to modify the way you call it, so that you call the correct item id</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/17</link>
        <pubDate>Thu, 31 May 2012 16:38:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-17</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>I was considering using enums, but I’ve always been conflicted in representing “simple” ideas in an enum (like creating an entire enum for one integer value).</p>
<p>I was thinking of using a lookup table, like</p>
<pre><code class="lang-auto">public final class Constants {
    public static final HashMap&lt;String, String&gt; CONSTANTS = new HashMap&lt;String, String&gt;();

    // load

    public static String get(final String name) {
        return CONSTANTS.get(name);
    }
}</code></pre>
<p>And then do</p>
<pre><code class="lang-auto">final int airRune = Integer.parseInt(Constants.get("air.rune"));
inventory.add(airRune, 5);</code></pre>
<p>So it’s still clear as to the intent, while providing a cohesive way of accessing constants.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/16</link>
        <pubDate>Thu, 31 May 2012 16:36:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-16</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>[quote=“sinisoul, post:11, topic:443519”]Why not create a separate constants file like ‘RuneConstants.java’? It’d be one of the cleanest implementations.</p>
<p><code>
public final class RuneConstants {
    ...
    private RuneConstants() {}
}
</code>[/quote]<br>
Yeah, do something like this.  And if you wanted to get more into depth and did not want all the confusing you can just do:</p>
<pre><code class="lang-auto">public final class RuneConstants {

	private RuneContstants() {
	}
	
	public final class ElementalRunes {
	
	}
	
	public final class CombatRunes {
	
	}
}</code></pre>
<p>That’s what I did for my farming patches information, it’s in the snippets topic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/15</link>
        <pubDate>Thu, 31 May 2012 16:31:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-15</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>And it is worth mentioning, if you are not already familiar with enums, that you can store explicit integers instead of just using an enum’s ordinal. Thus, you’d be able to store a whole mess of information for each “instance” of the enum (that is, each constant/item) such as its textual name, cache lookup id, etc.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/14</link>
        <pubDate>Thu, 31 May 2012 14:41:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-14</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>ENUM is perfect for the example howuever I think you need to redesign the way you are using item constants in your server. for example if you wanted to spawn an item it would be far easier to just do something like Item I = item.createItemFromName(“Air Rune”,32); - the server can then do a quick lookup of the itemdef xml and create the object with the correct def rather than createItem(ITEM_ENUM,32);</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/13</link>
        <pubDate>Thu, 31 May 2012 06:52:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-13</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>If you have a constant, you should have some context (a model perhaps) to which you can apply this constant. Be it a single class or multiple classes (an enum is actually a class-type - and may be very well suited for this, just as Taharok said), an abstraction or just some concrete concept. Whatever you have, you may add it to the least specific type of your context, in which it still applies. Not in some rather general “Constants” class (or interface which, as veer said, is considered an anti-pattern) in some common package.</p>
<p>If your constant refers to something that can be used by an implementation of an interface, create a class with the name of the least specific interface to which it still applies, with an “s” concatenated to the end. Just as java.util.Collections has been created for java.util.Collection. This class should preferrably be final and have a private constructor, so you cannot create an instance of it (although you can using Reflection).</p>
<p>It’s called high cohesion. Read up on it if you already havn’t. This principle, together with low coupling, separation of concerns (SoC) and divide and conquer (D&amp;C), are good principles to know and follow.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/12</link>
        <pubDate>Thu, 31 May 2012 06:29:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-12</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Why not create a separate constants file like ‘RuneConstants.java’? It’d be one of the cleanest implementations.</p>
<pre><code class="lang-auto">public final class RuneConstants {
    ...
    private RuneConstants() {}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/11</link>
        <pubDate>Thu, 31 May 2012 06:28:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-11</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Static constants mostly. I’m trying to make it more of a habit to make variables more descriptive, instead of throwing around arbitrary number that someone not familiar with the API would know. For example, a normal person, who doesn’t know the ids of ever item, wouldn’t know that 995 is for coins. And things like the runes, tiaras, talismans, etc. From a “blind” standpoint, this</p>
<pre><code class="lang-auto">inventory.add(AIR_RUNE, 5);</code></pre>
<p>Is much clearer than</p>
<pre><code class="lang-auto">inventory.add(556, 5);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/10</link>
        <pubDate>Thu, 31 May 2012 05:04:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-10</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rodgerwilco, post:8, topic:443519”][quote author=veer link=topic=546199.msg4004182#msg4004182 date=1338428027]<br>
This is <span class="bbcode-i">not</span> a good solution.<br>
[/quote]</p>
<p>Why not?[/quote]</p>
<p>Reading the rest of his post helps. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
<p><span class="mention">@OP</span>: Are we talking about static or dynamic constants? In most cases, a simple enum to map static constants will be far more flexible than any other solution, unless you are using bitmasks. As far as dynamic constants are concerned, there are many solutions to choose from, depending on your project’s parameters.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/9</link>
        <pubDate>Thu, 31 May 2012 04:40:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-9</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@Rodgerwilco Rodgerwilco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodgerwilco">@Rodgerwilco</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="443519">
<div class="title">
<div class="quote-controls"></div>
 veer:</div>
<blockquote>
<p>This is <span class="bbcode-i">not</span> a good solution.</p>
</blockquote>
</aside>
<p>Why not?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/8</link>
        <pubDate>Thu, 31 May 2012 03:27:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-8</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@Sinned Sinned]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinned">@Sinned</a> wrote:</p>
          <blockquote>
              <p>I think whatever anyone does, someone else is going to disagree with it, so who’s to say what and what not to do. Just do what you feel comfortable/happy with.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/7</link>
        <pubDate>Thu, 31 May 2012 02:27:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-7</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>I also used to store constants in their own class, it’s dumb when you come to think of it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/6</link>
        <pubDate>Thu, 31 May 2012 02:19:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-6</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:4, topic:443519”]“Constants” interfaces are <span class="bbcode-b">evil</span>, and one of the typical antipatterns you’ll find in most Java projects (along with bad accessors). Read more <a href="http://c2.com/cgi/wiki?InterfacesForDefiningConstants" data-bbcode="true" rel="nofollow noopener">here, at the C2 Wiki</a>.<br>
In addition, you may find it useful to manage references to some item definition over fiddling with the raw integer IDs corresponding to items.</p>
<aside class="quote">
<blockquote>
<p>store in XML or something similar and parse and load through a static constructor.</p>
</blockquote>
</aside>
<p>This is <span class="bbcode-i">not</span> a good solution.[/quote]<br>
you’re always so informing. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/5</link>
        <pubDate>Thu, 31 May 2012 01:56:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-5</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
      <item>
        <title>Constants</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>“Constants” interfaces are <span class="bbcode-b">evil</span>, and one of the typical antipatterns you’ll find in most Java projects (along with bad accessors). Read more <a href="http://c2.com/cgi/wiki?InterfacesForDefiningConstants" data-bbcode="true" rel="nofollow noopener">here, at the C2 Wiki</a>.<br>
In addition, you may find it useful to manage references to some item definition over fiddling with the raw integer IDs corresponding to items.</p>
<aside class="quote" data-post="2" data-topic="443519">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>store in XML or something similar and parse and load through a static constructor.</p>
</blockquote>
</aside>
<p>This is <span class="bbcode-i">not</span> a good solution.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/constants/443519/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/constants/443519/4</link>
        <pubDate>Thu, 31 May 2012 01:33:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443519-4</guid>
        <source url="https://forum.moparisthebest.com/t/constants/443519.rss">Constants</source>
      </item>
  </channel>
</rss>
