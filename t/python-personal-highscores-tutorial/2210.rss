<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Python Personal HighScores Tutorial</title>
    <link>https://forum.moparisthebest.com/t/python-personal-highscores-tutorial/2210</link>
    <description>Okay, this is my first attempt ever a t a tutorial so bear with me it is mostly going to be a template...

First off their are some things your going to need to Download
ActiveSTate Python [url=http://www.activestate.com/Products/ActivePython/]http://www.activestate.com/Products/ActivePython/[/url]
and an IDE ActiveState comes with one but you might want to check out Komodo

Okai now that you have that we can get done to the coding.

Okai First thing you have to do is import Tkinter this is the module for our GUI tkmessagebox is used to open a text box where our highscores will be stored
You also need to import ftplib our highscores table is going to be ftp based
the import section shoulsd now look like this

[code]from Tkinter import *
import Tkinter
import tkMessageBox
from ftplib import FTP
import ftplib[/code]

Okai you now have all of your libraries imported i&#39;ts time to make your GUI
remember in python indentation is of the GREATEST importance.
Place this a few lines down from the imports...[code]    def __init__( self, master ):
        Frame.__init__( self, master )
        self.grid()
        self.create_widgets()[/code] this calls upon variables that you will set later on

now we have to declare that we are opening an application so add this right below the import section and above the def __init  [code]class Application( Frame ):[/code]
Okai go down a couple lines and place this[code]    def create_widgets( self ):
        # This will make your GUI with one button inside.
 
        # It wont do anything right now we still have to define self.recieve
        self.bttn1 = Button( self, text = &quot;Check HighScores&quot; )
        self.bttn1.grid();
        self.bttn1[&quot;command&quot;] = self.recieve
 [/code]

Okai now to make the script runnable scroll down to the bottom of the script and put this code in as you can tell it defines the name and size of the highscore window (you can edit as you wish without harming anything)
[code]if __name__ == &#39;__main__&#39;:
 
    root = Tk()
    root.title( &quot;HighScores&quot; )
    root.geometry( &quot;200x100&quot; )
    myApp = Application( root )
    root.mainloop()[/code]
Now your window will open when you run it but were not ready for that yet.

Now for the Ftp section of the code (this part was not made by me credit goes to  Matt Croydon)
[code]# This will handle the data being downloaded
# It will be explained shortly
def handleDownload( block, self ):
    file.write(block)
    print &quot;.&quot;,
    
# Create an instance of the FTP object
# Optionally, you could specify username and password:
# FTP(&#39;hostname&#39;, &#39;username&#39;, &#39;password&#39;)
ftp = FTP(&#39;ftp.cdrom.com&#39;)


# Log in to the server
print &#39;Logging in.&#39;
# You can specify username and password here if you like:
# ftp.login(&#39;username&#39;, &#39;password&#39;)
# Otherwise, it defaults to Anonymous
print ftp.login()

# This is the directory that we want to go to
directory = &#39;pub/simtelnet/trumpet/winsock&#39;
# Let&#39;s change to that directory.  You kids might call these &#39;folders&#39;
print &#39;Changing to &#39; + directory
ftp.cwd(directory)

# Print the contents of the directory
ftp.retrlines(&#39;LIST&#39;)

# Here&#39;s a file for us to play with.  Remember Trumpet Winsock?
filename = &#39;Your file here&quot;

# Open the file for writing in binary mode
print &#39;Opening local file &#39; + filename
file = open(filename, &#39;wb&#39;)

# Download the file a chunk at a time
# Each chunk is sent to handleDownload
# We append the chunk to the file and then print a &#39;.&#39; for progress
# RETR is an FTP command
print &#39;Getting &#39; + filename
ftp.retrbinary(&#39;RETR &#39; + filename, handleDownload)
#this part of the code is mine :P it opens the txt file in a window.
        s=file.read()
        textwidget=Tkinter.Text()
        textwidget.insert(1.0,s)
        root = Tk()
        root.title( &quot;Received&quot; )
        root.geometry( &quot;500x500&quot; )
        myApp = Application( root )
        textwidget.pack()
        Tkinter.mainloop()

# Clean up time
print &#39;Closing file &#39; + filename
file.close()

print &#39;Closing FTP connection&#39;
print ftp.close()
[/code]

Heres what it should look like when its done
[code]from Tkinter import *
import Tkinter
import tkMessageBox
from ftplib import FTP
class Application( Frame ):


def __init__( self, master ):
        Frame.__init__( self, master )
        self.grid()
        self.create_widgets()


# This will handle the data being downloaded
# It will be explained shortly
def handleDownload(block):
    file.write(block)
    print &quot;.&quot;,
    
# Create an instance of the FTP object
# Optionally, you could specify username and password:
# FTP(&#39;hostname&#39;, &#39;username&#39;, &#39;password&#39;)
ftp = FTP(&#39;ftp.cdrom.com&#39;)


# Log in to the server
print &#39;Logging in.&#39;
# You can specify username and password here if you like:
# ftp.login(&#39;username&#39;, &#39;password&#39;)
# Otherwise, it defaults to Anonymous
print ftp.login()

# This is the directory that we want to go to
directory = &#39;pub/simtelnet/trumpet/winsock&#39;
# Let&#39;s change to that directory.  You kids might call these &#39;folders&#39;
print &#39;Changing to &#39; + directory
ftp.cwd(directory)

# Print the contents of the directory
ftp.retrlines(&#39;LIST&#39;)

# Here&#39;s a file for us to play with.  Remember Trumpet Winsock?
filename = &#39;Your file here&quot;

# Open the file for writing in binary mode
print &#39;Opening local file &#39; + filename
file = open(filename, &#39;wb&#39;)

# Download the file a chunk at a time
# Each chunk is sent to handleDownload
# We append the chunk to the file and then print a &#39;.&#39; for progress
# RETR is an FTP command
print &#39;Getting &#39; + filename
ftp.retrbinary(&#39;RETR &#39; + filename, handleDownload)
#this part of the code is mine :P it opens the txt file in a window.
        s=file.read()
        textwidget=Tkinter.Text()
        textwidget.insert(1.0,s)
        root = Tk()
        root.title( &quot;Received&quot; )
        root.geometry( &quot;500x500&quot; )
        myApp = Application( root )
        textwidget.pack()
        Tkinter.mainloop()

# Clean up time
print &#39;Closing file &#39; + filename
file.close()

print &#39;Closing FTP connection&#39;
print ftp.close()



def create_widgets( self ):
        # This will make your GUI with one button inside.
 
        # It wont do anything right now we still have to define self.recieve
        self.bttn1 = Button( self, text = &quot;Check HighScores&quot; )
        self.bttn1.grid();
        self.bttn1[&quot;command&quot;] = self.handleDownload




if __name__ == &#39;__main__&#39;:
 
    root = Tk()
    root.title( &quot;HighScores&quot; )
    root.geometry( &quot;200x100&quot; )
    myApp = Application( root )
    root.mainloop()
[/code]

If their are any mistakes they will be minor and i appolgize for them i just wrote this up now

And their you have it you may have noticed that their is no ftp set in that script i will setup a public ftp later on and will post it in here  Also this only opens an existing highscores list and thier isnt one at the moment. i will post another tutorial on how to make that if you guys liked this one, so just reply saying you want me to write the creation of a highscores list

EDIT: you can then convert this to java using jython wich can be found on sourceforge.net and run it in aryan but you will need some knowledge with java but nothing you cant copy and paste from someone elses script but im not covering that in this tutorial</description>
    
    <lastBuildDate>Sun, 30 Apr 2006 21:13:23 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/python-personal-highscores-tutorial/2210.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Python Personal HighScores Tutorial</title>
        <dc:creator><![CDATA[@sh4d0ws sh4d0ws]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sh4d0ws">@sh4d0ws</a> wrote:</p>
          <blockquote>
              <p>Okay, this is my first attempt ever a t a tutorial so bear with me it is mostly going to be a template...</p>

<p>First off their are some things your going to need to Download<br>ActiveSTate Python <a href="http://www.activestate.com/Products/ActivePython/" rel="nofollow"></a><a href="http://www.activestate.com/Products/ActivePython/" rel="nofollow">http://www.activestate.com/Products/ActivePython/</a><br>and an IDE ActiveState comes with one but you might want to check out Komodo</p>

<p>Okai now that you have that we can get done to the coding.</p>

<p>Okai First thing you have to do is import Tkinter this is the module for our GUI tkmessagebox is used to open a text box where our highscores will be stored<br>You also need to import ftplib our highscores table is going to be ftp based<br>the import section shoulsd now look like this</p>

<p></p><pre><code class="lang-auto">from Tkinter import *
import Tkinter
import tkMessageBox
from ftplib import FTP
import ftplib</code></pre>

<p>Okai you now have all of your libraries imported i'ts time to make your GUI<br>remember in python indentation is of the GREATEST importance.<br>Place this a few lines down from the imports...</p>

<p></p><pre><code class="lang-auto">    def __init__( self, master ):
        Frame.__init__( self, master )
        self.grid()
        self.create_widgets()</code></pre>

<p> this calls upon variables that you will set later on</p>

<p>now we have to declare that we are opening an application so add this right below the import section and above the def __init  </p>

<p></p><pre><code class="lang-auto">class Application( Frame ):</code></pre>

<p>Okai go down a couple lines and place this</p>

<p></p><pre><code class="lang-auto">    def create_widgets( self ):
        # This will make your GUI with one button inside.
        # It wont do anything right now we still have to define self.recieve
        self.bttn1 = Button( self, text = "Check HighScores" )
        self.bttn1.grid();
        self.bttn1["command"] = self.recieve
</code></pre>

<p>Okai now to make the script runnable scroll down to the bottom of the script and put this code in as you can tell it defines the name and size of the highscore window (you can edit as you wish without harming anything)<br></p>

<p></p><pre><code class="lang-auto">if __name__ == '__main__':
    root = Tk()
    root.title( "HighScores" )
    root.geometry( "200x100" )
    myApp = Application( root )
    root.mainloop()</code></pre>

<p>Now your window will open when you run it but were not ready for that yet.</p>

<p>Now for the Ftp section of the code (this part was not made by me credit goes to  Matt Croydon)<br></p>

<p></p><pre><code class="lang-auto"># This will handle the data being downloaded
# It will be explained shortly
def handleDownload( block, self ):
    file.write(block)
    print ".",
# Create an instance of the FTP object
# Optionally, you could specify username and password:
# FTP('hostname', 'username', 'password')
ftp = FTP('ftp.cdrom.com')
# Log in to the server
print 'Logging in.'
# You can specify username and password here if you like:
# ftp.login('username', 'password')
# Otherwise, it defaults to Anonymous
print ftp.login()
# This is the directory that we want to go to
directory = 'pub/simtelnet/trumpet/winsock'
# Let's change to that directory.  You kids might call these 'folders'
print 'Changing to ' + directory
ftp.cwd(directory)
# Print the contents of the directory
ftp.retrlines('LIST')
# Here's a file for us to play with.  Remember Trumpet Winsock?
filename = 'Your file here"
# Open the file for writing in binary mode
print 'Opening local file ' + filename
file = open(filename, 'wb')
# Download the file a chunk at a time
# Each chunk is sent to handleDownload
# We append the chunk to the file and then print a '.' for progress
# RETR is an FTP command
print 'Getting ' + filename
ftp.retrbinary('RETR ' + filename, handleDownload)
#this part of the code is mine :P it opens the txt file in a window.
        s=file.read()
        textwidget=Tkinter.Text()
        textwidget.insert(1.0,s)
        root = Tk()
        root.title( "Received" )
        root.geometry( "500x500" )
        myApp = Application( root )
        textwidget.pack()
        Tkinter.mainloop()
# Clean up time
print 'Closing file ' + filename
file.close()
print 'Closing FTP connection'
print ftp.close()</code></pre>

<p>Heres what it should look like when its done<br></p>

<p></p><pre><code class="lang-auto">from Tkinter import *
import Tkinter
import tkMessageBox
from ftplib import FTP
class Application( Frame ):
def __init__( self, master ):
        Frame.__init__( self, master )
        self.grid()
        self.create_widgets()
# This will handle the data being downloaded
# It will be explained shortly
def handleDownload(block):
    file.write(block)
    print ".",
# Create an instance of the FTP object
# Optionally, you could specify username and password:
# FTP('hostname', 'username', 'password')
ftp = FTP('ftp.cdrom.com')
# Log in to the server
print 'Logging in.'
# You can specify username and password here if you like:
# ftp.login('username', 'password')
# Otherwise, it defaults to Anonymous
print ftp.login()
# This is the directory that we want to go to
directory = 'pub/simtelnet/trumpet/winsock'
# Let's change to that directory.  You kids might call these 'folders'
print 'Changing to ' + directory
ftp.cwd(directory)
# Print the contents of the directory
ftp.retrlines('LIST')
# Here's a file for us to play with.  Remember Trumpet Winsock?
filename = 'Your file here"
# Open the file for writing in binary mode
print 'Opening local file ' + filename
file = open(filename, 'wb')
# Download the file a chunk at a time
# Each chunk is sent to handleDownload
# We append the chunk to the file and then print a '.' for progress
# RETR is an FTP command
print 'Getting ' + filename
ftp.retrbinary('RETR ' + filename, handleDownload)
#this part of the code is mine :P it opens the txt file in a window.
        s=file.read()
        textwidget=Tkinter.Text()
        textwidget.insert(1.0,s)
        root = Tk()
        root.title( "Received" )
        root.geometry( "500x500" )
        myApp = Application( root )
        textwidget.pack()
        Tkinter.mainloop()
# Clean up time
print 'Closing file ' + filename
file.close()
print 'Closing FTP connection'
print ftp.close()
def create_widgets( self ):
        # This will make your GUI with one button inside.
        # It wont do anything right now we still have to define self.recieve
        self.bttn1 = Button( self, text = "Check HighScores" )
        self.bttn1.grid();
        self.bttn1["command"] = self.handleDownload
if __name__ == '__main__':
    root = Tk()
    root.title( "HighScores" )
    root.geometry( "200x100" )
    myApp = Application( root )
    root.mainloop()</code></pre>

<p>If their are any mistakes they will be minor and i appolgize for them i just wrote this up now</p>

<p>And their you have it you may have noticed that their is no ftp set in that script i will setup a public ftp later on and will post it in here  Also this only opens an existing highscores list and thier isnt one at the moment. i will post another tutorial on how to make that if you guys liked this one, so just reply saying you want me to write the creation of a highscores list</p>

<p>EDIT: you can then convert this to java using jython wich can be found on sourceforge.net and run it in aryan but you will need some knowledge with java but nothing you cant copy and paste from someone elses script but im not covering that in this tutorial</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/python-personal-highscores-tutorial/2210/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/python-personal-highscores-tutorial/2210/1</link>
        <pubDate>Sun, 30 Apr 2006 21:13:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2210-1</guid>
        <source url="https://forum.moparisthebest.com/t/python-personal-highscores-tutorial/2210.rss">Python Personal HighScores Tutorial</source>
      </item>
  </channel>
</rss>
