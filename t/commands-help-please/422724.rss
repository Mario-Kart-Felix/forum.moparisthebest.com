<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Commands Help Please</title>
    <link>https://forum.moparisthebest.com/t/commands-help-please/422724</link>
    <description>Hey, Im currently using Hybrid PvP v3, and i want admins to be able to spawn. I tried changing it in Commands.java from OwnerCmmands to AdminCommands section thing, but it just had errors on compiler. Anyway to do it without errors? Heres my Commands.java code for Owners and Admins :
[code]    public void administratorCommands(Client c, String playerCommand)
    {
			if (playerCommand.startsWith(&quot;alert&quot;) &amp;&amp; c.playerRights &gt; 1) {
				String msg = playerCommand.substring(6);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						 Client c2 = (Client)Server.playerHandler.players[i];
						c2.sendMessage(&quot;Alert##Notification##&quot; + msg + &quot;##By: &quot; + c.playerName);

					}
				}
			}
			if (playerCommand.startsWith(&quot;ipmute&quot;)) {
				try {	
					String playerToBan = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								c2.sendMessage(&quot; &quot; +c2.playerName+ &quot; Got IpMuted By &quot; + c.playerName+ &quot;.&quot;);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}	
				}	



			if (playerCommand.startsWith(&quot;object&quot;)) {
				String[] args = playerCommand.split(&quot; &quot;);				
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
			}
			
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;)) {
				c.sendMessage(&quot;X: &quot;+c.absX+&quot; Y: &quot;+c.absY+&quot; H: &quot;+c.heightLevel);
			}

			if (playerCommand.startsWith(&quot;interface&quot;)) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().showInterface(Integer.parseInt(args[1]));
			}

			if (playerCommand.startsWith(&quot;gfx&quot;)) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
			}
			if (playerCommand.startsWith(&quot;tele&quot;)) {
				String[] arg = playerCommand.split(&quot; &quot;);
				if (arg.length &gt; 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
				else if (arg.length == 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
			}

			if (playerCommand.startsWith(&quot;xteletome&quot;)) {
				try {	
					String playerToTele = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToTele)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been teleported to &quot; + c.playerName);
								c2.getPA().movePlayer(c.getX(), c.getY(), c.heightLevel);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}		


			if (playerCommand.startsWith(&quot;xteleto&quot;)) {
				String name = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
							c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
						}
					}
				}			
			}
			if (playerCommand.equalsIgnoreCase(&quot;bank&quot;)) {
				c.getPA().openUpBank();
			}
			if (playerCommand.startsWith(&quot;unipmute&quot;)) {
				try {	
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
						}			
					}
			if (playerCommand.startsWith(&quot;ipban&quot;)) {
				try {
					String playerToBan = playerCommand.substring(6);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
								Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP banned the user: &quot;+Server.playerHandler.players[i].playerName+&quot; with the host: &quot;+Server.playerHandler.players[i].connectedFrom);
						Client c2 = (Client)Server.playerHandler.players[i];
								Server.playerHandler.players[i].disconnected = true;
								c2.sendMessage(&quot; &quot; +c2.playerName+ &quot; Got IpBanned By &quot; + c.playerName+ &quot;.&quot;);
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

        
    }
    
    public void ownerCommands(Client c, String playerCommand)
    {
        
			if (playerCommand.startsWith(&quot;update&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Phil&quot;)) {
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				PlayerHandler.updateSeconds = a;
				PlayerHandler.updateAnnounced = false;
				PlayerHandler.updateRunning = true;
				PlayerHandler.updateStartTime = System.currentTimeMillis();
			}
			

			if(playerCommand.startsWith(&quot;npc&quot;)) {
				try {
					int newNPC = Integer.parseInt(playerCommand.substring(4));
					if(newNPC &gt; 0) {
						Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
						c.sendMessage(&quot;You spawn a Npc.&quot;);
					} else {
						c.sendMessage(&quot;No such NPC.&quot;);
					}
				} catch(Exception e) {
					
				}			
			}

			if (playerCommand.startsWith(&quot;anim&quot;)) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.startAnimation(Integer.parseInt(args[1]));
				c.getPA().requestUpdates();
			}

			if (playerCommand.startsWith(&quot;spec&quot;)) {
				c.specAmount = 500.0;
			}

			if (playerCommand.startsWith(&quot;giveadmin&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Phil&quot;)) {
				try {	
					String playerToAdmin = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToAdmin)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given admin status by &quot; + c.playerName);
								c2.playerRights = 2;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}

			if (playerCommand.startsWith(&quot;givemod&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Phil&quot;)) {
				try {	
					String playerToMod = playerCommand.substring(8);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given mod status by &quot; + c.playerName);
								c2.playerRights = 1;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}

            if (playerCommand.startsWith(&quot;pnpc&quot;))
                {
                try {
                    int newNPC = Integer.parseInt(playerCommand.substring(5));
                    if (newNPC &lt;= 200000 &amp;&amp; newNPC &gt;= 0) {
                        c.npcId2 = newNPC;
                        c.isNpc = true;
                        c.updateRequired = true;
                        c.setAppearanceUpdateRequired(true);
                    } 
                    else {
                        c.sendMessage(&quot;No such P-NPC.&quot;);
                    }
                } catch(Exception e) {
                    c.sendMessage(&quot;Wrong Syntax! Use as ::pnpc #&quot;);
                }
            }

			
				if (playerCommand.startsWith(&quot;givedonor&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Phil&quot;)) {
				try {	
					String playerToMod = playerCommand.substring(10);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been given donator status by &quot; + c.playerName);
								c2.playerRights = 4;
								c2.isDonator = 1;
								c2.logout();
								
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}

			
			if (playerCommand.startsWith(&quot;demote&quot;) &amp;&amp; c.playerName.equalsIgnoreCase(&quot;Phil&quot;)) {
				try {	
					String playerToDemote = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToDemote)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been demoted by &quot; + c.playerName);
								c2.playerRights = 0;
								c2.logout();
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
						if (playerCommand.startsWith(&quot;reloadspawns&quot;)) {
				Server.npcHandler = null;
				Server.npcHandler = new server.model.npcs.NPCHandler();
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(&quot;&lt;shad=15695415&gt;[&quot; + c.playerName + &quot;] &quot; + &quot;NPC Spawns have been reloaded.&lt;/col&gt;&quot;);
					}
				}

			}
			if (playerCommand.startsWith(&quot;item&quot;)) {
				try {
					String[] args = playerCommand.split(&quot; &quot;);
					if (args.length == 3) {
						int newItemID = Integer.parseInt(args[1]);
						int newItemAmount = Integer.parseInt(args[2]);
						if ((newItemID &lt;= 20500) &amp;&amp; (newItemID &gt;= 0)) {
							c.getItems().addItem(newItemID, newItemAmount);		
						} else {
							c.sendMessage(&quot;That item ID does not exist.&quot;);
						}
					} else {
						c.sendMessage(&quot;Wrong usage: (Ex:(::pickup_ID_Amount)(::item 995 1))&quot;);
					}
				} catch(Exception e) {


					
				} // HERE?
				} // HERE?
				
				if (playerCommand.equals(&quot;alltome&quot;)) {
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
			c2.teleportToX = c.absX;
                        c2.teleportToY = c.absY;
                        c2.heightLevel = c.heightLevel;
				c2.sendMessage(&quot;Mass teleport to: &quot; + c.playerName + &quot;&quot;);
					}
				}
			}
			
						if (playerCommand.equalsIgnoreCase(&quot;master&quot;)) {
				for (int i = 0; i &lt; 22; i++) {
					c.playerLevel[i] = 99;
					c.playerXP[i] = c.getPA().getXPForLevel(100);
					c.getPA().refreshSkill(i);	
				}
				c.getPA().requestUpdates();
			}
    
    }

    public void DonatorCommands(Client c, String playerCommand)
    {
        
}
}
[/code]
Rep++ for people who help!</description>
    
    <lastBuildDate>Thu, 24 Nov 2011 00:56:46 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/commands-help-please/422724.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Commands Help Please</title>
        <dc:creator><![CDATA[@bend_over_and_spell bend over and spell run]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bend_over_and_spell">@bend_over_and_spell</a> wrote:</p>
          <blockquote>
              <p>Simple! heres the problem:<br>
&amp;&amp; c.playerRights &gt; 1)<br>
[size=12pt]&amp;&amp; c.playerRights &gt; 1)[/size]<br>
[size=14pt]&amp;&amp; c.playerRights &gt; 1)[/size]<br>
[size=18pt]&amp;&amp; c.playerRights &gt; 1)[/size]</p>
<p>You need to put &amp;&amp; c.playerRights &gt;=1)</p>
<p>That’s what was wrong as far as I know ^.^</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/commands-help-please/422724/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/commands-help-please/422724/3</link>
        <pubDate>Thu, 24 Nov 2011 00:56:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-422724-3</guid>
        <source url="https://forum.moparisthebest.com/t/commands-help-please/422724.rss">Commands Help Please</source>
      </item>
      <item>
        <title>Commands Help Please</title>
        <dc:creator><![CDATA[@sk8rdude462 sk8rdude462]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude462">@sk8rdude462</a> wrote:</p>
          <blockquote>
              <p>Erm show the errors you get from that code?<br>
And it would be helpful to show the file they are saved in, possibly another working code that’s in the same .java as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/commands-help-please/422724/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/commands-help-please/422724/2</link>
        <pubDate>Wed, 23 Nov 2011 22:31:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-422724-2</guid>
        <source url="https://forum.moparisthebest.com/t/commands-help-please/422724.rss">Commands Help Please</source>
      </item>
      <item>
        <title>Commands Help Please</title>
        <dc:creator><![CDATA[@kingsolona kingsolona]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kingsolona">@kingsolona</a> wrote:</p>
          <blockquote>
              <p>Hey, Im currently using Hybrid PvP v3, and i want admins to be able to spawn. I tried changing it in Commands.java from OwnerCmmands to AdminCommands section thing, but it just had errors on compiler. Anyway to do it without errors? Heres my Commands.java code for Owners and Admins :</p>
<p>[code]    public void administratorCommands(Client c, String playerCommand)<br>
{<br>
if (playerCommand.startsWith(“alert”) &amp;&amp; c.playerRights &gt; 1) {<br>
String msg = playerCommand.substring(6);<br>
for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if (Server.playerHandler.players[i] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[i];<br>
c2.sendMessage(“Alert#<span class="hashtag">#Notification</span>##” + msg + "#<span class="hashtag">#By:</span> " + c.playerName);</p>
<pre><code>				}
			}
		}
		if (playerCommand.startsWith("ipmute")) {
			try {	
				String playerToBan = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players[i].playerName);
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							c2.sendMessage(" " +c2.playerName+ " Got IpMuted By " + c.playerName+ ".");
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}	
			}	



		if (playerCommand.startsWith("object")) {
			String[] args = playerCommand.split(" ");				
			c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
		}
		
		if (playerCommand.equalsIgnoreCase("mypos")) {
			c.sendMessage("X: "+c.absX+" Y: "+c.absY+" H: "+c.heightLevel);
		}

		if (playerCommand.startsWith("interface")) {
			String[] args = playerCommand.split(" ");
			c.getPA().showInterface(Integer.parseInt(args[1]));
		}

		if (playerCommand.startsWith("gfx")) {
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("tele")) {
			String[] arg = playerCommand.split(" ");
			if (arg.length &gt; 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
			else if (arg.length == 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
		}

		if (playerCommand.startsWith("xteletome")) {
			try {	
				String playerToTele = playerCommand.substring(10);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToTele)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been teleported to " + c.playerName);
							c2.getPA().movePlayer(c.getX(), c.getY(), c.heightLevel);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}		


		if (playerCommand.startsWith("xteleto")) {
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (Server.playerHandler.players[i] != null) {
					if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
					}
				}
			}			
		}
		if (playerCommand.equalsIgnoreCase("bank")) {
			c.getPA().openUpBank();
		}
		if (playerCommand.startsWith("unipmute")) {
			try {	
				String playerToBan = playerCommand.substring(9);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players[i].playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
					}			
				}
		if (playerCommand.startsWith("ipban")) {
			try {
				String playerToBan = playerCommand.substring(6);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
							Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP banned the user: "+Server.playerHandler.players[i].playerName+" with the host: "+Server.playerHandler.players[i].connectedFrom);
					Client c2 = (Client)Server.playerHandler.players[i];
							Server.playerHandler.players[i].disconnected = true;
							c2.sendMessage(" " +c2.playerName+ " Got IpBanned By " + c.playerName+ ".");
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

    
}

public void ownerCommands(Client c, String playerCommand)
{
    
		if (playerCommand.startsWith("update") &amp;&amp; c.playerName.equalsIgnoreCase("Phil")) {
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			PlayerHandler.updateSeconds = a;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
		}
		

		if(playerCommand.startsWith("npc")) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if(newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
					c.sendMessage("You spawn a Npc.");
				} else {
					c.sendMessage("No such NPC.");
				}
			} catch(Exception e) {
				
			}			
		}

		if (playerCommand.startsWith("anim")) {
			String[] args = playerCommand.split(" ");
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}

		if (playerCommand.startsWith("spec")) {
			c.specAmount = 500.0;
		}

		if (playerCommand.startsWith("giveadmin") &amp;&amp; c.playerName.equalsIgnoreCase("Phil")) {
			try {	
				String playerToAdmin = playerCommand.substring(10);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToAdmin)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been given admin status by " + c.playerName);
							c2.playerRights = 2;
							c2.logout();
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}

		if (playerCommand.startsWith("givemod") &amp;&amp; c.playerName.equalsIgnoreCase("Phil")) {
			try {	
				String playerToMod = playerCommand.substring(8);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been given mod status by " + c.playerName);
							c2.playerRights = 1;
							c2.logout();
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}

        if (playerCommand.startsWith("pnpc"))
            {
            try {
                int newNPC = Integer.parseInt(playerCommand.substring(5));
                if (newNPC &lt;= 200000 &amp;&amp; newNPC &gt;= 0) {
                    c.npcId2 = newNPC;
                    c.isNpc = true;
                    c.updateRequired = true;
                    c.setAppearanceUpdateRequired(true);
                } 
                else {
                    c.sendMessage("No such P-NPC.");
                }
            } catch(Exception e) {
                c.sendMessage("Wrong Syntax! Use as ::pnpc #");
            }
        }

		
			if (playerCommand.startsWith("givedonor") &amp;&amp; c.playerName.equalsIgnoreCase("Phil")) {
			try {	
				String playerToMod = playerCommand.substring(10);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToMod)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been given donator status by " + c.playerName);
							c2.playerRights = 4;
							c2.isDonator = 1;
							c2.logout();
							
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}

		
		if (playerCommand.startsWith("demote") &amp;&amp; c.playerName.equalsIgnoreCase("Phil")) {
			try {	
				String playerToDemote = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToDemote)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been demoted by " + c.playerName);
							c2.playerRights = 0;
							c2.logout();
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
					if (playerCommand.startsWith("reloadspawns")) {
			Server.npcHandler = null;
			Server.npcHandler = new server.model.npcs.NPCHandler();
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.sendMessage("&lt;shad=15695415&gt;[" + c.playerName + "] " + "NPC Spawns have been reloaded.&lt;/col&gt;");
				}
			}

		}
		if (playerCommand.startsWith("item")) {
			try {
				String[] args = playerCommand.split(" ");
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 20500) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);		
					} else {
						c.sendMessage("That item ID does not exist.");
					}
				} else {
					c.sendMessage("Wrong usage: (Ex:(::pickup_ID_Amount)(::item 995 1))");
				}
			} catch(Exception e) {


				
			} // HERE?
			} // HERE?
			
			if (playerCommand.equals("alltome")) {
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
		c2.teleportToX = c.absX;
                    c2.teleportToY = c.absY;
                    c2.heightLevel = c.heightLevel;
			c2.sendMessage("Mass teleport to: " + c.playerName + "");
				}
			}
		}
		
					if (playerCommand.equalsIgnoreCase("master")) {
			for (int i = 0; i &lt; 22; i++) {
				c.playerLevel[i] = 99;
				c.playerXP[i] = c.getPA().getXPForLevel(100);
				c.getPA().refreshSkill(i);	
			}
			c.getPA().requestUpdates();
		}

}

public void DonatorCommands(Client c, String playerCommand)
{
</code></pre>
<p>}<br>
}<br>
[/code]<br>
Rep++ for people who help!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/commands-help-please/422724/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/commands-help-please/422724/1</link>
        <pubDate>Wed, 23 Nov 2011 21:54:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-422724-1</guid>
        <source url="https://forum.moparisthebest.com/t/commands-help-please/422724.rss">Commands Help Please</source>
      </item>
  </channel>
</rss>
