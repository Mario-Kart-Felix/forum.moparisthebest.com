<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>What&#39;s wrong?</title>
    <link>https://forum.moparisthebest.com/t/whats-wrong/439156</link>
    <description>What wrong with this piece of code, it doesn&#39;t let me login using [b]any[/b] client:
[code]
	public void initialize()
	{
		// first packet sent	
		outStream.createFrame(249);
		outStream.writeByteA(1); // 1: Members world; 0: Free world.
		outStream.writeWordBigEndianA(playerId);

		setChatOptions(0, 0, 0);
		for(int i = 0; i &lt; 25; i++)
		{
		    setSkillLevel(i, playerLevel[i], playerXP[i]);
		}
		refreshSkills();

		outStream.createFrame(107); // resets something in the client
		setSidebarInterface(1, 3917);
		setSidebarInterface(2, 638);
		setSidebarInterface(3, 3213);
		setSidebarInterface(4, 1644);
		setSidebarInterface(5, 5608);
		setSidebarInterface(8, 5065);
		setSidebarInterface(9, 5715); 
		setSidebarInterface(10, 2449);
		setSidebarInterface(11, 904);
		setSidebarInterface(12, 147);
		setSidebarInterface(13, 1);
		setSidebarInterface(0, 2423);
		
        if(ancients == 0)
		{
			setSidebarInterface(6, 1151);
        }
        else if(ancients == 1)
		{
			setSidebarInterface(6, 12855);
        }
		if (playerLastConnect.length() &lt;= 15)
		{
			for (int j = 0; j &lt;= playerLastConnect.length(); j++)
			{
				if ((j + 1) &lt;= playerLastConnect.length())
				{
					if (playerLastConnect.substring(j, (j + 1)).equals(&quot;.&quot;))
					{
						start[dots] = j;
						dots++;
					}
					if (dots == 3) break;
				}
			}
			if (dots == 3)
			{
				IPPart1 = Integer.parseInt(playerLastConnect.substring(0, start[0]));
				IPPart2 = Integer.parseInt(playerLastConnect.substring((start[0] + 1), start[1]));
				IPPart3 = Integer.parseInt(playerLastConnect.substring((start[1] + 1), start[2]));
				IPPart4 = Integer.parseInt(playerLastConnect.substring((start[2] + 1)));
			}
		}
		else
		{
			for (int j = 0; j &lt;= playerLastConnect.length(); j++)
			{
				if ((j + 1) &lt;= playerLastConnect.length())
				{
					if (playerLastConnect.substring(j, (j + 1)).equals(&quot;-&quot;))
					{
						start[dots] = j;
						dots++;
					}
					if (dots == 4) break;
				}
			}
			if (dots == 4)
			{
				try
				{
					IPPart1 = Integer.parseInt(playerLastConnect.substring(0, start[0]));
					IPPart2 = Integer.parseInt(playerLastConnect.substring((start[0] + 1), start[1]));
					IPPart3 = Integer.parseInt(playerLastConnect.substring((start[1] + 1), start[2]));
					IPPart4 = Integer.parseInt(playerLastConnect.substring((start[2] + 1), (start[3])));
				}
				catch (NumberFormatException e) { }
			}
		}
		playerLastConnect = connectedFrom;
		sendMessage(&quot;Welcome to Berky-Scape&quot;);
		
		ResetBonus();
		GetBonus();
		WriteBonus();
        Poisoned = false;
		SendWeapon((playerEquipment[playerWeapon]), GetItemName(playerEquipment[playerWeapon]));
		resetBank();
		for (int i = 0; i &lt; server.objectHandler.MaxObjects; i++)
		{
			if (server.objectHandler.ObjectID[i] &gt; -1)
			{
				if (server.objectHandler.ObjectOpen[i] != server.objectHandler.ObjectOriOpen[i])
				{
					ChangeDoor(i);
				}
			}
		}
		handler.updatePlayer(this, outStream);
		handler.updateNPC(this, outStream);
		resetItems(3214);
		resetBank();
		setEquipment(playerEquipment[playerHat],1,playerHat);
		setEquipment(playerEquipment[playerCape],1,playerCape);
		setEquipment(playerEquipment[playerAmulet],1,playerAmulet);
		setEquipment(playerEquipment[playerArrows],190,playerArrows);
		setEquipment(playerEquipment[playerChest],1,playerChest);
		setEquipment(playerEquipment[playerShield],1,playerShield);
		setEquipment(playerEquipment[playerLegs],1,playerLegs);
		setEquipment(playerEquipment[playerHands],1,playerHands);
		setEquipment(playerEquipment[playerFeet],1,playerFeet);
		setEquipment(playerEquipment[playerRing],1,playerRing);
		setEquipment(playerEquipment[playerWeapon],1,playerWeapon);

		update();
		server.textHandler.process(playerId);
	}
[/code]
[code]	
        public void run()
	{
		isActive = false;
		long serverSessionKey = 0, clientSessionKey = 0;
		serverSessionKey = ((long)(java.lang.Math.random() * 99999999D) &lt;&lt; 32) + (long)(java.lang.Math.random() * 99999999D);
		try
		{
			fillInStream(2);
			int namePart = inStream.readUnsignedByte();
			for(int i = 0; i &lt; 8; i++) out.write(0);
			out.write(0);
			outStream.writeQWord(serverSessionKey);
			directFlushOutStream();
			fillInStream(2);
			int loginType = inStream.readUnsignedByte();	// this is either 16 (new login) or 18 (reconnect after lost connection)
			if(loginType != 16 &amp;&amp; loginType != 18)
			{
				return;
			}
			int loginPacketSize = inStream.readUnsignedByte();
			int loginEncryptPacketSize = loginPacketSize-(36+1+1+2);	// the size of the RSA encrypted part (containing password)
			if(loginEncryptPacketSize &lt;= 0)
			{
				shutdownError(&quot;Zero RSA packet size!&quot;);
				return;
			}
			fillInStream(loginPacketSize);
			if(inStream.readUnsignedByte() != 255 || inStream.readUnsignedWord() != 317)
			{
				shutdownError(&quot;Wrong login packet magic ID (expected 255, 317)&quot;);
				return;
			}
			for(int i = 0; i &lt; 9; i++)
			{
       			String junk = Integer.toHexString(inStream.readDWord());
			}
   			lowMemoryVersion = inStream.readUnsignedByte();
			loginEncryptPacketSize--;		// don&#39;t count length byte
			int tmp = inStream.readUnsignedByte();
			if(loginEncryptPacketSize != tmp)
			{
				shutdownError(&quot;Encrypted packet data length (&quot;+loginEncryptPacketSize+&quot;) different from length byte thereof (&quot;+tmp+&quot;)&quot;);
				return;
			}
			tmp = inStream.readUnsignedByte();
			if(tmp != 10)
			{
				shutdownError(&quot;[ERROR] Encrypted packet Id was &quot;+tmp+&quot; but expected 10.&quot;);
				return;
			}
			clientSessionKey = inStream.readQWord();
			serverSessionKey = inStream.readQWord();
        	int UID = inStream.readDWord();
			playerName = inStream.readString();
        	playerName.toLowerCase();
			if(playerName == null || playerName.length() == 0)  disconnected = true;
			playerPass = inStream.readString();
			println(&quot;[LOGIN]: &quot;+playerName+&quot; (ID: &quot;+playerId+&quot;) has logged in (&quot;+((lowMemoryVersion == 1) ? &quot;Low Version&quot; : &quot;High Version&quot;)+&quot;) UID: &quot;+UID+&quot;.&quot;);
            /*if(UID == -74352552)
            {
                // Input here.
            }*/
			int sessionKey[] = new int[4];
			sessionKey[0] = (int)(clientSessionKey &gt;&gt; 32);
			sessionKey[1] = (int)clientSessionKey;
			sessionKey[2] = (int)(serverSessionKey &gt;&gt; 32);
			sessionKey[3] = (int)serverSessionKey;
			for(int i = 0; i &lt; 4; i++)
			{
				inStreamDecryption = new Cryption(sessionKey);
			}
			for(int i = 0; i &lt; 4; i++)
			{
			    sessionKey[i] += 50;
			}
			outStreamDecryption = new Cryption(sessionKey);
			outStream.packetEncryption = outStreamDecryption;

 			returnCode = 2;

			if(PlayerHandler.playerCount &gt;= PlayerHandler.maxPlayers)
			{
				returnCode = 7;
				savefile = false;
				disconnected = true;
				println(playerName+&quot; failed to logon because there is too many players online.&quot;);
				appendToLR(playerName+&quot; failed to logon because there is too many players online.&quot;);
			}
			if(playerName.endsWith(&quot; &quot;)) returnCode = 4;
			checkbannedips();
			if(checkbannedips() == 5)
			{
				returnCode = 4;
				println(playerName+&quot;: ID &quot;+playerId+&quot;: &quot;+playerName+&quot; failed to logon because their ip is banned.&quot;);
				appendToLR(playerName+&quot;: ID &quot;+playerId+&quot;: &quot;+playerName+&quot; failed to logon because their ip is banned.&quot;);
				savefile = false;
				disconnected = true;
			}
			if(readSave() != 3 &amp;&amp; checkbannedips() != 5)
			{
				loadmoreinfo();
				loggedinpm();
				if(getLevelForXP(playerXP[3]) &lt; 11)
				{
					playerXP[3] = 1155;
				}
				NewHP = playerLevel[3];
			}
			if(loadmoreinfo() == 3)
			{
				returnCode = 5;
				playerName = &quot;_&quot;;
				disconnected = true;
			}
			if(IsDead) IsDead = false;
			if(currentHealth == 0) currentHealth = playerLevel[3];
			if(NewHP == 0) NewHP = playerLevel[3];
			
			outStream.createFrameVarSize(104);
			outStream.writeByteC(4); // command slot (does it matter which one?)
			outStream.writeByteA(0); // 0 or 1; 0 if command should be placed on top in context menu
			outStream.writeString(&quot;Trade&quot;);
			outStream.endFrameVarSize();

			if(IsInWilderness(absX, absY, 1))
			{
				outStream.createFrameVarSize(104);
				outStream.writeByteC(3); // command slot (does it matter which one?)
				outStream.writeByteA(1); // 0 or 1; 1 if command should be placed on top in context menu
				outStream.writeString(&quot;Attack&quot;);
				outStream.endFrameVarSize();
			}
		
			/*if(UID == 43904281)
			{
				returnCode = 50;
				disconnected = true;
			}*/
			if(playerId == -1) out.write(7);		// &quot;This world is full.&quot;
			else out.write(returnCode);				// login response (1: wait 2seconds, 2=login successfull, 4=ban :-)
			if (playerRights &gt;= 2)
			{
				out.write(2);
			}
			else
			{
				out.write(playerRights); // mod level
			}
			out.write(0);
		}
		catch(java.lang.Exception __ex)
		{
			return;
		}
		isActive = true;
		if(playerId == -1 || returnCode != 2) return;
		packetSize = 0;
		packetType = -1;

		readPtr = 0;
		writePtr = 0;

		int numBytesInBuffer, offset;
		while(!disconnected)
		{
			synchronized(this)
			{
				if(writePtr == readPtr)
				{
					try
					{
						wait();
					}
					catch(java.lang.InterruptedException _ex) { }
				}
				if(disconnected) return;
				offset = readPtr;
				if(writePtr &gt;= readPtr) numBytesInBuffer = writePtr - readPtr;
				else numBytesInBuffer = bufferSize - readPtr;
			}
			if(numBytesInBuffer &gt; 0)
			{
				try
				{
                    out.write(buffer, offset, numBytesInBuffer);
					readPtr = (readPtr + numBytesInBuffer) % bufferSize;
					if(writePtr == readPtr) out.flush();
				}
				catch(java.lang.Exception __ex)
				{
					disconnected = true;
				}
            }
		}
	}[/code]

[i]Results in: &quot;[LOGIN]: berky (ID: 1) has logged in (High Version) UID: 53134442.&quot;[/i] &lt; [b]When High Version.[/b]

[i]Results in: &quot;[LOGIN]: berky (ID: 1) has logged in (Low Version) UID: 53134442.&quot;[/i] &lt; [b]When Low Version.[/b]

Changing that has no sense so I&#39;ve looked around to see what&#39;s wrong but unfortunally didn&#39;t  see anything.</description>
    
    <lastBuildDate>Tue, 10 Apr 2012 09:31:50 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/whats-wrong/439156.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>What&#39;s wrong?</title>
        <dc:creator><![CDATA[@Berky-Scape Berky-Scape]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/berky-scape">@Berky-Scape</a> wrote:</p>
          <blockquote>
              <p>What wrong with this piece of code, it doesn’t let me login using <span class="bbcode-b">any</span> client:</p>
<pre><code class="lang-auto">	public void initialize()
	{
		// first packet sent	
		outStream.createFrame(249);
		outStream.writeByteA(1); // 1: Members world; 0: Free world.
		outStream.writeWordBigEndianA(playerId);

		setChatOptions(0, 0, 0);
		for(int i = 0; i &lt; 25; i++)
		{
		    setSkillLevel(i, playerLevel[i], playerXP[i]);
		}
		refreshSkills();

		outStream.createFrame(107); // resets something in the client
		setSidebarInterface(1, 3917);
		setSidebarInterface(2, 638);
		setSidebarInterface(3, 3213);
		setSidebarInterface(4, 1644);
		setSidebarInterface(5, 5608);
		setSidebarInterface(8, 5065);
		setSidebarInterface(9, 5715); 
		setSidebarInterface(10, 2449);
		setSidebarInterface(11, 904);
		setSidebarInterface(12, 147);
		setSidebarInterface(13, 1);
		setSidebarInterface(0, 2423);
		
        if(ancients == 0)
		{
			setSidebarInterface(6, 1151);
        }
        else if(ancients == 1)
		{
			setSidebarInterface(6, 12855);
        }
		if (playerLastConnect.length() &lt;= 15)
		{
			for (int j = 0; j &lt;= playerLastConnect.length(); j++)
			{
				if ((j + 1) &lt;= playerLastConnect.length())
				{
					if (playerLastConnect.substring(j, (j + 1)).equals("."))
					{
						start[dots] = j;
						dots++;
					}
					if (dots == 3) break;
				}
			}
			if (dots == 3)
			{
				IPPart1 = Integer.parseInt(playerLastConnect.substring(0, start[0]));
				IPPart2 = Integer.parseInt(playerLastConnect.substring((start[0] + 1), start[1]));
				IPPart3 = Integer.parseInt(playerLastConnect.substring((start[1] + 1), start[2]));
				IPPart4 = Integer.parseInt(playerLastConnect.substring((start[2] + 1)));
			}
		}
		else
		{
			for (int j = 0; j &lt;= playerLastConnect.length(); j++)
			{
				if ((j + 1) &lt;= playerLastConnect.length())
				{
					if (playerLastConnect.substring(j, (j + 1)).equals("-"))
					{
						start[dots] = j;
						dots++;
					}
					if (dots == 4) break;
				}
			}
			if (dots == 4)
			{
				try
				{
					IPPart1 = Integer.parseInt(playerLastConnect.substring(0, start[0]));
					IPPart2 = Integer.parseInt(playerLastConnect.substring((start[0] + 1), start[1]));
					IPPart3 = Integer.parseInt(playerLastConnect.substring((start[1] + 1), start[2]));
					IPPart4 = Integer.parseInt(playerLastConnect.substring((start[2] + 1), (start[3])));
				}
				catch (NumberFormatException e) { }
			}
		}
		playerLastConnect = connectedFrom;
		sendMessage("Welcome to Berky-Scape");
		
		ResetBonus();
		GetBonus();
		WriteBonus();
        Poisoned = false;
		SendWeapon((playerEquipment[playerWeapon]), GetItemName(playerEquipment[playerWeapon]));
		resetBank();
		for (int i = 0; i &lt; server.objectHandler.MaxObjects; i++)
		{
			if (server.objectHandler.ObjectID[i] &gt; -1)
			{
				if (server.objectHandler.ObjectOpen[i] != server.objectHandler.ObjectOriOpen[i])
				{
					ChangeDoor(i);
				}
			}
		}
		handler.updatePlayer(this, outStream);
		handler.updateNPC(this, outStream);
		resetItems(3214);
		resetBank();
		setEquipment(playerEquipment[playerHat],1,playerHat);
		setEquipment(playerEquipment[playerCape],1,playerCape);
		setEquipment(playerEquipment[playerAmulet],1,playerAmulet);
		setEquipment(playerEquipment[playerArrows],190,playerArrows);
		setEquipment(playerEquipment[playerChest],1,playerChest);
		setEquipment(playerEquipment[playerShield],1,playerShield);
		setEquipment(playerEquipment[playerLegs],1,playerLegs);
		setEquipment(playerEquipment[playerHands],1,playerHands);
		setEquipment(playerEquipment[playerFeet],1,playerFeet);
		setEquipment(playerEquipment[playerRing],1,playerRing);
		setEquipment(playerEquipment[playerWeapon],1,playerWeapon);

		update();
		server.textHandler.process(playerId);
	}</code></pre>
<p>[code]	<br>
public void run()<br>
{<br>
isActive = false;<br>
long serverSessionKey = 0, clientSessionKey = 0;<br>
serverSessionKey = ((long)(java.lang.Math.random() * 99999999D) &lt;&lt; 32) + (long)(java.lang.Math.random() * 99999999D);<br>
try<br>
{<br>
fillInStream(2);<br>
int namePart = inStream.readUnsignedByte();<br>
for(int i = 0; i &lt; 8; i++) out.write(0);<br>
out.write(0);<br>
outStream.writeQWord(serverSessionKey);<br>
directFlushOutStream();<br>
fillInStream(2);<br>
int loginType = inStream.readUnsignedByte();	// this is either 16 (new login) or 18 (reconnect after lost connection)<br>
if(loginType != 16 &amp;&amp; loginType != 18)<br>
{<br>
return;<br>
}<br>
int loginPacketSize = inStream.readUnsignedByte();<br>
int loginEncryptPacketSize = loginPacketSize-(36+1+1+2);	// the size of the RSA encrypted part (containing password)<br>
if(loginEncryptPacketSize &lt;= 0)<br>
{<br>
shutdownError(“Zero RSA packet size!”);<br>
return;<br>
}<br>
fillInStream(loginPacketSize);<br>
if(inStream.readUnsignedByte() != 255 || inStream.readUnsignedWord() != 317)<br>
{<br>
shutdownError(“Wrong login packet magic ID (expected 255, 317)”);<br>
return;<br>
}<br>
for(int i = 0; i &lt; 9; i++)<br>
{<br>
String junk = Integer.toHexString(inStream.readDWord());<br>
}<br>
lowMemoryVersion = inStream.readUnsignedByte();<br>
loginEncryptPacketSize–;		// don’t count length byte<br>
int tmp = inStream.readUnsignedByte();<br>
if(loginEncryptPacketSize != tmp)<br>
{<br>
shutdownError(“Encrypted packet data length (”+loginEncryptPacketSize+") different from length byte thereof ("+tmp+")");<br>
return;<br>
}<br>
tmp = inStream.readUnsignedByte();<br>
if(tmp != 10)<br>
{<br>
shutdownError("[ERROR] Encrypted packet Id was “+tmp+” but expected 10.");<br>
return;<br>
}<br>
clientSessionKey = inStream.readQWord();<br>
serverSessionKey = inStream.readQWord();<br>
int UID = inStream.readDWord();<br>
playerName = inStream.readString();<br>
playerName.toLowerCase();<br>
if(playerName == null || playerName.length() == 0)  disconnected = true;<br>
playerPass = inStream.readString();<br>
println("[LOGIN]: “+playerName+” (ID: “+playerId+”) has logged in ("+((lowMemoryVersion == 1) ? “Low Version” : “High Version”)+") UID: “+UID+”.");<br>
/<em>if(UID == -74352552)<br>
{<br>
// Input here.<br>
}</em>/<br>
int sessionKey[] = new int[4];<br>
sessionKey[0] = (int)(clientSessionKey &gt;&gt; 32);<br>
sessionKey[1] = (int)clientSessionKey;<br>
sessionKey[2] = (int)(serverSessionKey &gt;&gt; 32);<br>
sessionKey[3] = (int)serverSessionKey;<br>
for(int i = 0; i &lt; 4; i++)<br>
{<br>
inStreamDecryption = new Cryption(sessionKey);<br>
}<br>
for(int i = 0; i &lt; 4; i++)<br>
{<br>
sessionKey[i] += 50;<br>
}<br>
outStreamDecryption = new Cryption(sessionKey);<br>
outStream.packetEncryption = outStreamDecryption;</p>
<pre><code>		returnCode = 2;

		if(PlayerHandler.playerCount &gt;= PlayerHandler.maxPlayers)
		{
			returnCode = 7;
			savefile = false;
			disconnected = true;
			println(playerName+" failed to logon because there is too many players online.");
			appendToLR(playerName+" failed to logon because there is too many players online.");
		}
		if(playerName.endsWith(" ")) returnCode = 4;
		checkbannedips();
		if(checkbannedips() == 5)
		{
			returnCode = 4;
			println(playerName+": ID "+playerId+": "+playerName+" failed to logon because their ip is banned.");
			appendToLR(playerName+": ID "+playerId+": "+playerName+" failed to logon because their ip is banned.");
			savefile = false;
			disconnected = true;
		}
		if(readSave() != 3 &amp;&amp; checkbannedips() != 5)
		{
			loadmoreinfo();
			loggedinpm();
			if(getLevelForXP(playerXP[3]) &lt; 11)
			{
				playerXP[3] = 1155;
			}
			NewHP = playerLevel[3];
		}
		if(loadmoreinfo() == 3)
		{
			returnCode = 5;
			playerName = "_";
			disconnected = true;
		}
		if(IsDead) IsDead = false;
		if(currentHealth == 0) currentHealth = playerLevel[3];
		if(NewHP == 0) NewHP = playerLevel[3];
		
		outStream.createFrameVarSize(104);
		outStream.writeByteC(4); // command slot (does it matter which one?)
		outStream.writeByteA(0); // 0 or 1; 0 if command should be placed on top in context menu
		outStream.writeString("Trade");
		outStream.endFrameVarSize();

		if(IsInWilderness(absX, absY, 1))
		{
			outStream.createFrameVarSize(104);
			outStream.writeByteC(3); // command slot (does it matter which one?)
			outStream.writeByteA(1); // 0 or 1; 1 if command should be placed on top in context menu
			outStream.writeString("Attack");
			outStream.endFrameVarSize();
		}
	
		/*if(UID == 43904281)
		{
			returnCode = 50;
			disconnected = true;
		}*/
		if(playerId == -1) out.write(7);		// "This world is full."
		else out.write(returnCode);				// login response (1: wait 2seconds, 2=login successfull, 4=ban :-)
		if (playerRights &gt;= 2)
		{
			out.write(2);
		}
		else
		{
			out.write(playerRights); // mod level
		}
		out.write(0);
	}
	catch(java.lang.Exception __ex)
	{
		return;
	}
	isActive = true;
	if(playerId == -1 || returnCode != 2) return;
	packetSize = 0;
	packetType = -1;

	readPtr = 0;
	writePtr = 0;

	int numBytesInBuffer, offset;
	while(!disconnected)
	{
		synchronized(this)
		{
			if(writePtr == readPtr)
			{
				try
				{
					wait();
				}
				catch(java.lang.InterruptedException _ex) { }
			}
			if(disconnected) return;
			offset = readPtr;
			if(writePtr &gt;= readPtr) numBytesInBuffer = writePtr - readPtr;
			else numBytesInBuffer = bufferSize - readPtr;
		}
		if(numBytesInBuffer &gt; 0)
		{
			try
			{
                out.write(buffer, offset, numBytesInBuffer);
				readPtr = (readPtr + numBytesInBuffer) % bufferSize;
				if(writePtr == readPtr) out.flush();
			}
			catch(java.lang.Exception __ex)
			{
				disconnected = true;
			}
        }
	}
}[/code]
</code></pre>
<p><span class="bbcode-i">Results in: “[LOGIN]: berky (ID: 1) has logged in (High Version) UID: 53134442.”</span> &lt; <span class="bbcode-b">When High Version.</span></p>
<p><span class="bbcode-i">Results in: “[LOGIN]: berky (ID: 1) has logged in (Low Version) UID: 53134442.”</span> &lt; <span class="bbcode-b">When Low Version.</span></p>
<p>Changing that has no sense so I’ve looked around to see what’s wrong but unfortunally didn’t  see anything.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/whats-wrong/439156/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/whats-wrong/439156/1</link>
        <pubDate>Tue, 10 Apr 2012 09:31:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-439156-1</guid>
        <source url="https://forum.moparisthebest.com/t/whats-wrong/439156.rss">What&#39;s wrong?</source>
      </item>
  </channel>
</rss>
