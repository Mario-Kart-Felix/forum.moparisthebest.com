<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Slick2D] Simple Pong Game</title>
    <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882</link>
    <description>[b][size=12pt]Pong with Slick2D [i](author: Triton)[/i][/size][/b]
[i][size=6pt](translated and rewritten from https://docs.google.com/View?id=dg7tmwbk_35cqpmrrgd)[/size][/i]

In this tutorial, we learn to use a simple library for 2D games called Slick. This library is fairly simple to use, and abstracts the developer of the more boring aspects of game development, such as the implementation of the main cycle of play and communication with the operating system. Slick is a 2D gaming library built atop of LWJGL (Lightweight Java Gaming Library), which has native bindings for OpenGL, OpenAL, and supports the usage of JInput. For where to find Slick, please refer to the bottom of this post.

I&#39;ll explain the code of my implementation,  as well as the fundamental concepts in developing any game. To begin, we study the fundamental structure of any interactive application.

A game, in a more abstract level, is an application that receives and responds to events. These events can be external (keystrokes, mouse movements, etc) or internal (such as detecting collision against a wall in a racecar game). In terms of code, this translates into something like this:

[size=10pt][tt][b]boolean[/b] gameIsRunning = true;

[b]while[/b] (gameIsRunning) {
	update();
	render();

	[b]if[/b] (userWantsToQuit())
		gameIsRunning = false;
}[/tt][/size]

The game is continually executed so long as the variable indicating the game is not over ([tt]gameIsRunning[/tt]) remains [tt]true[/tt]. In each cycle, we update the state of the game and draw the world to the screen. However, if you close the window or press a key-predefined for exiting, the function [tt]userWantsToQuit[/tt] returns [tt]true[/tt] and the cycle ends, thereby ending the game.

It is important to understand this concept, as it is the basis and core of any game. In a more complex application, there are more details to keep in mind, but for Pong, Slick abstracts many of these details.

[url=http://slick.cokeandcode.com/][img]http://slick.cokeandcode.com/themes/slick2d/images/logo.gif[/img][/url]

To begin, let&#39;s create a new file in Java and import the Slick library. The library can be located at [url=http://slick.cokeandcode.com/]http://slick.cokeandcode.com/[/url], or you can click on the above logo. I will use the library in the Eclipse environment, but you should have no problems with any other development environment.

To use the library Slick, let&#39;s create a class to represent the game. I, in a moment of great originality, named the class &#39;Game.&#39; We also define some methods in our class, which will be called by the library at appropriate times.

[size=10pt][tt]
[b]package[/b] org.moparscape.gamedev;

[b]import[/b] org.newdawn.slick.*;

[b]public class[/b] Game [b]extends[/b] BasicGame
{
	[b]public[/b] Game(String title) {
		[b]super[/b](title);
	}
	[b]public void[/b] init(GameContainer gc) {[i] /* To implement */[/i] }
	[b]public void[/b] update(GameContainer gc, [b]int[/b] delta) {[i] /* To implement */[/i] }
	[b]public void[/b] render(GameContainer gc, Graphics g) {[i] /* To implement */[/i] }
	[b]public static void[/b] main(String[] args) {[i] /* To implement--application starting point*/[/i] }
}
[/tt][/size]

The main class will extend the class [tt]BasicGame[/tt], provided by the library. This structure is the basis for any game developed with Slick. Now, we have to write code to initialize the library and use the main game loop. We can do this by implementing our application entry point:

[size=10pt][tt]
[b]public static void[/b] main(String[] args) [b]throws[/b] SlickException {
	AppGameContainer app = [b]new[/b] AppGameContainer([b]new[/b] Game(title));
	app.setDisplayMode(width, height, fullscreen);
	app.setTargetFrameRate(fpsLimit);
	app.start();
}
[/tt][/size]

This code creates a new instance of the application and passes the corresponding class in game manufacturer. The title you want (we want to appear in the window) is passed as an argument of the constructor of [tt]Game[/tt]. After initializing the window with the desired width and height, and choose whether the window will occupy the entire screen, we also choose the rate at which the main game cycle will be executed (based on frames per seconds, or number of times the cycle will be executed in a single second). Finally, we execute the method that will initialize the main game loop. As you can see from the code, the values were defined as static variables of the class, as to facilitate future changes:

[size=10pt][tt]
[b]static int[/b] width = 640;
[b]static int[/b] height = 480;
[b]static boolean[/b] fullscreen = false;
[b]static[/b] String title = &quot;Mongo&quot;;
[b]static int[/b] fpsLimit = 60;
[/tt][/size]

We have defined the basic structure of the application, but running it will show a window with no content. To display content, we need to implement the other methods in the [tt]Game[/tt] class, the ones corresponding to the cycle of updating and rendering the application.

Let us consider how to model the game of Pong. This game was an early videogame and is a simulation of a field (table tennis), where a ball is thrown from one side to the other. The game is usually played by two players, but our version will also have a second option where the opponent is controlled by the computer.

To represent the two rackets, we can use images. But as an example to facilitate the implementation, we will use two rectangles. For the ball, we will use a simple circle. Slick2D already provides these primitives:

[size=10pt][tt]
Circle ball;
Rectangle paddlePlayer;
Rectangle paddleCPU;
[/tt][/size]

To move the ball around the screen, we have to manipulate its speed. Quantities of speed are usually represented by vectors of two dimensions. The Slick library also provides math classes with vector primitives implemented. Let&#39;s define some variables for speed and storing the scores obtained by each player:

[size=10pt][tt]
Vector2f ballVelocity;
[b]int[/b] scorePlayer;
[b]int[/b] scoreCPU;
[/tt][/size]

We now have everything we need to save the game state. Now we need to implement the various methods that were left blank in the [tt]Game[/tt] class. Let&#39;s start with the boo method, which is called by the library when the game starts. This method has a parameter of [tt]GameContainer[/tt], through which we can access other classes which offer various services for our game, such as system input, the context of the 2D graphics system, the sound system, and more.

[size=10pt][tt]
[b]public void[/b] init(GameContainer gc) {
	gc.getInput().enableKeyRepeat();
	paddlePlayer = [b]new[/b] RoundedRectangle(5, height / 2, 10, 80, 3);
	paddleCPU = [b]new[/b] RoundedRectangle(width - 15, height / 2, 10, 80, 3);
	ball = [b]new[/b] Circle(width / 2, height / 2, 6);
	ballVelocity = [b]new[/b] Vector2f(-3, 1);
}
[/tt][/size]

This method configures the input system to support repeat keys (while a key is being pressed, Slick will continually send input events). We also initialize the geometry variables declared earlier. The constructor for [tt]RoundRectangle[/tt] requires us to define the position and size of the rectangles in the window. Both rackets are created on the left and right sides of the screen, and the ball is created at the center of the screen. The initial velocity of the ball is also defined, with a decreasing x factor of -3 and increasing y factor of 1.

After initialization, we need to implement the rendering aspect of the game:

[size=10pt][tt]
[b]public void[/b] render(GameContainer gc, Graphics g) {
	g.fill(paddlePlayer);
	g.fill(paddleCPU);
	g.fill(ball);
}
[/tt][/size]

The code above is very simple and only draws the geometry to represent the players and the ball. With the code written so far, the game can be started and the figures are drawn from the game. Nevertheless, the game lacks life. We need to add the tennis simulation aspect while updating the game logic.

The parameter [tt]delta[/tt] in the [tt]update[/tt] method can be used for the simulation aspect, as a means of making the timing in the game independent from the rendering speed. Typically, the game engine will try to cycle (update and render) at the desired frame rate we specified earlier. If the game engine can&#39;t render the game at that speed, it should make extra efforts to update at that speed. The [tt]delta[/tt] variable can be used as a timing mechanism independent of any of the frame rate or game speed information. It should always be precise enough for basic game logic. Nevertheless, due to the simplicity of this game, we aren&#39;t going to use the [tt]delta[/tt] variable. (for more information, look at the Slick Javadocs).

First, let&#39;s think about what might happen in Pong. If the user presses the directional keys, their paddle needs to move up or down:

[size=10pt][tt][b]if[/b] (gc.getInput().isKeyDown(Input.KEY_UP)) {
	[b]if[/b] (paddlePlayer.getMinY() &gt; 0)
		paddlePlayer.setY(paddlePlayer.getY() - 10.0f);
} [b]else[/b] [b]if[/b] (gc.getInput().isKeyDown(Input.KEY_DOWN)) {
	[b]if[/b] (paddlePlayer.getMaxY() &lt; height)
		paddlePlayer.setY(paddlePlayer.getY() + 10.0f);
}[/tt][/size]

We also need to update the position of the ball with their speed:

[size=10pt][tt]ball.setLocation(ball.getX() + ballVelocity.getX(), ball.getY() + ballVelocity.getY());[/tt][/size]

Now we detect collisions that can happen when the ball hits the edge of the playing field. In horizontal terms, if the ball leaves the screen on the left or right side, we have to change the horizontal speed and update the scores.

[size=10pt][tt][b]if[/b] (ball.getMinX() &lt;= 0) {
	ballVelocity.x = -ballVelocity.getX();
	scoreCPU++;
}
[b]if[/b] (ball.getMaxX() &gt;= width) {
	ballVelocity.x = -ballVelocity.getX();
	scorePlayer++;
}[/tt][/size]

Now in vertical terms, we just have to change the speed in the Y component of the velocity vector.

[size=10pt][tt][b]if[/b] (ball.getMinY() &lt;= 0)
	ballVelocity.y = -ballVelocity.getY();
[b]if[/b] (ball.getMaxY() &gt;= height)
	ballVelocity.y = -ballVelocity.getY();[/tt][/size]

Now we need to check of the ball collides with the player&#39;s racket. If it does, just change the speed component of X.

[size=10pt][tt][b]if[/b] (ball.[b]int[/b]ersects(paddlePlayer) || ball.[b]int[/b]ersects(paddleCPU)) {
	ballVelocity.x = -ballVelocity.getX();
}[/tt][/size]

Try running the game. We already have something that resembles the game of Pong! But we do have one big flaw: the racket of the opponent is not simulated by the computer. Let&#39;s add this to the game, so we can play against the computer. My implementation of &quot;artificial intelligence&quot; is very simple. The racket of the opponent always follows the vertical position of the ball, making it impossible to beat the computer:

[size=10pt][tt][b]float[/b] ypos = ball.getCenterY() - paddleCPU.getHeight() / 2;
paddleCPU.setY(ypos);[/tt][/size]

Very simple! The algorithm can be improved through the use of random numbers. Try changing the game and adding new features.

Original:
[img]http://img691.imageshack.us/img691/8066/f5e2d44c019e0130204914d.png[/img]

Rewrite (me exploiting a bug I found giving the cpu tons of points):
[img]http://img33.imageshack.us/img33/8466/pongowned.png[/img]

Resources
[url=http://slick.cokeandcode.com/downloads/slick.jar]Download Slick2D[/url]
[url=http://slick.cokeandcode.com/wiki]Slick2D Wiki[/url]
[url=http://slick.cokeandcode.com/javadoc]Slick2D Javadocs[/url]
[url=http://lwjgl.org/download.php]LWJGL Downloads Page[/url]
[url=http://lwjgl.org/wiki/index.php?title=Main_Page#Getting_started]LWJGL Documentation[/url]
[url=http://lwjgl.org/javadoc/]LWJGL Javadocs[/url]
[url=https://docs.google.com/View?id=dg7tmwbk_35cqpmrrgd]Original article written by Triton (in portuguese)[/url]

Attached is the project source. [url=http://up.ht/qPM7rP]Click here to play pong[/url]. If the jar file doesn&#39;t work for you, let me know your OS and architecture. I added another class, LoadLWJGL, which is designed to dynamically load LWJGL and Slick2D in basically any environment supported by LWJGL.

Post your feedback, questions, and customizations to this tutorial. :)</description>
    
    <lastBuildDate>Thu, 25 Aug 2011 20:31:46 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>[quote=“Racist Turtle, post:6, topic:411882”][quote author=Speljohan link=topic=513140.msg3725865#msg3725865 date=1314258468]</p>
<aside class="quote">
<blockquote>
<p>Very good tutorial, very well explained. Is Slick commonly used? Because I’ve never heard of it.<br>
[/quote]Java itself isn’t commonly used, which is why you haven’t heard of it.</p>
</blockquote>
</aside>
<p>Java as in a programming correct? (because I heard somewhere that there is 1 billion+, or some big number, Java enabled devices around the world.) Is there any programming language that IS commonly used?[/quote]For games development i mean.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/7</link>
        <pubDate>Thu, 25 Aug 2011 20:31:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-7</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@Racist_Turtle Racist Turtle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/racist_turtle">@Racist_Turtle</a> wrote:</p>
          <blockquote>
              <p>[quote=“Speljohan, post:5, topic:411882”][quote author=Racist Turtle link=topic=513140.msg3725839#msg3725839 date=1314254031]<br>
Very good tutorial, very well explained. Is Slick commonly used? Because I’ve never heard of it.<br>
[/quote]Java itself isn’t commonly used, which is why you haven’t heard of it.[/quote]</p>
<p>Java as in a programming correct? (because I heard somewhere that there is 1 billion+, or some big number, Java enabled devices around the world.) Is there any programming language that IS commonly used?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/6</link>
        <pubDate>Thu, 25 Aug 2011 19:19:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-6</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>[quote=“Racist Turtle, post:4, topic:411882”]  Very good tutorial, very well explained. Is Slick commonly used? Because I’ve never heard of it.[/quote]Java itself isn’t commonly used, which is why you haven’t heard of it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/5</link>
        <pubDate>Thu, 25 Aug 2011 07:47:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-5</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@Racist_Turtle Racist Turtle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/racist_turtle">@Racist_Turtle</a> wrote:</p>
          <blockquote>
              <p>Very good tutorial, very well explained. Is Slick commonly used? Because I’ve never heard of it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/4</link>
        <pubDate>Thu, 25 Aug 2011 06:33:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-4</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@ripzone Triton]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ripzone">@ripzone</a> wrote:</p>
          <blockquote>
              <p>Nice to see this being put to good use.</p>
<p>It might be a nice challenge to make a better AI logic <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/3</link>
        <pubDate>Wed, 24 Aug 2011 20:56:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-3</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>I, too will post some slick-related stuff eventually. I use it for all my projects nowadays, much less effort than using lwjgl and reinventing the wheel for 2d-rendering.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/2</link>
        <pubDate>Wed, 24 Aug 2011 20:34:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-2</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
      <item>
        <title>[Slick2D] Simple Pong Game</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">[size=12pt]Pong with Slick2D <span class="bbcode-i">(author: Triton)</span>[/size]</span><br>
<span class="bbcode-i">[size=6pt](translated and rewritten from <a href="https://docs.google.com/View?id=dg7tmwbk_35cqpmrrgd" rel="nofollow noopener">https://docs.google.com/View?id=dg7tmwbk_35cqpmrrgd</a>)[/size]</span></p>
<p>In this tutorial, we learn to use a simple library for 2D games called Slick. This library is fairly simple to use, and abstracts the developer of the more boring aspects of game development, such as the implementation of the main cycle of play and communication with the operating system. Slick is a 2D gaming library built atop of LWJGL (Lightweight Java Gaming Library), which has native bindings for OpenGL, OpenAL, and supports the usage of JInput. For where to find Slick, please refer to the bottom of this post.</p>
<p>I’ll explain the code of my implementation,  as well as the fundamental concepts in developing any game. To begin, we study the fundamental structure of any interactive application.</p>
<p>A game, in a more abstract level, is an application that receives and responds to events. These events can be external (keystrokes, mouse movements, etc) or internal (such as detecting collision against a wall in a racecar game). In terms of code, this translates into something like this:</p>
<p>[size=10pt][tt]<span class="bbcode-b">boolean</span> gameIsRunning = true;</p>
<p><span class="bbcode-b">while</span> (gameIsRunning) {<br>
update();<br>
render();</p>
<pre><code>[b]if[/b] (userWantsToQuit())
	gameIsRunning = false;
</code></pre>
<p>}[/tt][/size]</p>
<p>The game is continually executed so long as the variable indicating the game is not over ([tt]gameIsRunning[/tt]) remains [tt]true[/tt]. In each cycle, we update the state of the game and draw the world to the screen. However, if you close the window or press a key-predefined for exiting, the function [tt]userWantsToQuit[/tt] returns [tt]true[/tt] and the cycle ends, thereby ending the game.</p>
<p>It is important to understand this concept, as it is the basis and core of any game. In a more complex application, there are more details to keep in mind, but for Pong, Slick abstracts many of these details.</p>
<p><a href="http://slick.cokeandcode.com/" data-bbcode="true" rel="nofollow noopener"><img src="http://slick.cokeandcode.com/themes/slick2d/images/logo.gif" alt width="" height=""></a></p>
<p>To begin, let’s create a new file in Java and import the Slick library. The library can be located at <a href="http://slick.cokeandcode.com/" data-bbcode="true" rel="nofollow noopener">http://slick.cokeandcode.com/</a>, or you can click on the above logo. I will use the library in the Eclipse environment, but you should have no problems with any other development environment.</p>
<p>To use the library Slick, let’s create a class to represent the game. I, in a moment of great originality, named the class ‘Game.’ We also define some methods in our class, which will be called by the library at appropriate times.</p>
<p>[size=10pt][tt]<br>
<span class="bbcode-b">package</span> org.moparscape.gamedev;</p>
<p><span class="bbcode-b">import</span> org.newdawn.slick.*;</p>
<p><span class="bbcode-b">public class</span> Game <span class="bbcode-b">extends</span> BasicGame<br>
{<br>
<span class="bbcode-b">public</span> Game(String title) {<br>
[b]super<a>/b</a>;<br>
}<br>
<span class="bbcode-b">public void</span> init(GameContainer gc) {<span class="bbcode-i"> /* To implement */</span> }<br>
<span class="bbcode-b">public void</span> update(GameContainer gc, <span class="bbcode-b">int</span> delta) {<span class="bbcode-i"> /* To implement */</span> }<br>
<span class="bbcode-b">public void</span> render(GameContainer gc, Graphics g) {<span class="bbcode-i"> /* To implement */</span> }<br>
<span class="bbcode-b">public static void</span> main(String[] args) {<span class="bbcode-i"> /* To implement–application starting point*/</span> }<br>
}<br>
[/tt][/size]</p>
<p>The main class will extend the class [tt]BasicGame[/tt], provided by the library. This structure is the basis for any game developed with Slick. Now, we have to write code to initialize the library and use the main game loop. We can do this by implementing our application entry point:</p>
<p>[size=10pt][tt]<br>
<span class="bbcode-b">public static void</span> main(String[] args) <span class="bbcode-b">throws</span> SlickException {<br>
AppGameContainer app = <span class="bbcode-b">new</span> AppGameContainer(<span class="bbcode-b">new</span> Game(title));<br>
app.setDisplayMode(width, height, fullscreen);<br>
app.setTargetFrameRate(fpsLimit);<br>
app.start();<br>
}<br>
[/tt][/size]</p>
<p>This code creates a new instance of the application and passes the corresponding class in game manufacturer. The title you want (we want to appear in the window) is passed as an argument of the constructor of [tt]Game[/tt]. After initializing the window with the desired width and height, and choose whether the window will occupy the entire screen, we also choose the rate at which the main game cycle will be executed (based on frames per seconds, or number of times the cycle will be executed in a single second). Finally, we execute the method that will initialize the main game loop. As you can see from the code, the values were defined as static variables of the class, as to facilitate future changes:</p>
<p>[size=10pt][tt]<br>
<span class="bbcode-b">static int</span> width = 640;<br>
<span class="bbcode-b">static int</span> height = 480;<br>
<span class="bbcode-b">static boolean</span> fullscreen = false;<br>
<span class="bbcode-b">static</span> String title = “Mongo”;<br>
<span class="bbcode-b">static int</span> fpsLimit = 60;<br>
[/tt][/size]</p>
<p>We have defined the basic structure of the application, but running it will show a window with no content. To display content, we need to implement the other methods in the [tt]Game[/tt] class, the ones corresponding to the cycle of updating and rendering the application.</p>
<p>Let us consider how to model the game of Pong. This game was an early videogame and is a simulation of a field (table tennis), where a ball is thrown from one side to the other. The game is usually played by two players, but our version will also have a second option where the opponent is controlled by the computer.</p>
<p>To represent the two rackets, we can use images. But as an example to facilitate the implementation, we will use two rectangles. For the ball, we will use a simple circle. Slick2D already provides these primitives:</p>
<p>[size=10pt][tt]<br>
Circle ball;<br>
Rectangle paddlePlayer;<br>
Rectangle paddleCPU;<br>
[/tt][/size]</p>
<p>To move the ball around the screen, we have to manipulate its speed. Quantities of speed are usually represented by vectors of two dimensions. The Slick library also provides math classes with vector primitives implemented. Let’s define some variables for speed and storing the scores obtained by each player:</p>
<p>[size=10pt][tt]<br>
Vector2f ballVelocity;<br>
<span class="bbcode-b">int</span> scorePlayer;<br>
<span class="bbcode-b">int</span> scoreCPU;<br>
[/tt][/size]</p>
<p>We now have everything we need to save the game state. Now we need to implement the various methods that were left blank in the [tt]Game[/tt] class. Let’s start with the boo method, which is called by the library when the game starts. This method has a parameter of [tt]GameContainer[/tt], through which we can access other classes which offer various services for our game, such as system input, the context of the 2D graphics system, the sound system, and more.</p>
<p>[size=10pt][tt]<br>
<span class="bbcode-b">public void</span> init(GameContainer gc) {<br>
gc.getInput().enableKeyRepeat();<br>
paddlePlayer = <span class="bbcode-b">new</span> RoundedRectangle(5, height / 2, 10, 80, 3);<br>
paddleCPU = <span class="bbcode-b">new</span> RoundedRectangle(width - 15, height / 2, 10, 80, 3);<br>
ball = <span class="bbcode-b">new</span> Circle(width / 2, height / 2, 6);<br>
ballVelocity = <span class="bbcode-b">new</span> Vector2f(-3, 1);<br>
}<br>
[/tt][/size]</p>
<p>This method configures the input system to support repeat keys (while a key is being pressed, Slick will continually send input events). We also initialize the geometry variables declared earlier. The constructor for [tt]RoundRectangle[/tt] requires us to define the position and size of the rectangles in the window. Both rackets are created on the left and right sides of the screen, and the ball is created at the center of the screen. The initial velocity of the ball is also defined, with a decreasing x factor of -3 and increasing y factor of 1.</p>
<p>After initialization, we need to implement the rendering aspect of the game:</p>
<p>[size=10pt][tt]<br>
<span class="bbcode-b">public void</span> render(GameContainer gc, Graphics g) {<br>
g.fill(paddlePlayer);<br>
g.fill(paddleCPU);<br>
g.fill(ball);<br>
}<br>
[/tt][/size]</p>
<p>The code above is very simple and only draws the geometry to represent the players and the ball. With the code written so far, the game can be started and the figures are drawn from the game. Nevertheless, the game lacks life. We need to add the tennis simulation aspect while updating the game logic.</p>
<p>The parameter [tt]delta[/tt] in the [tt]update[/tt] method can be used for the simulation aspect, as a means of making the timing in the game independent from the rendering speed. Typically, the game engine will try to cycle (update and render) at the desired frame rate we specified earlier. If the game engine can’t render the game at that speed, it should make extra efforts to update at that speed. The [tt]delta[/tt] variable can be used as a timing mechanism independent of any of the frame rate or game speed information. It should always be precise enough for basic game logic. Nevertheless, due to the simplicity of this game, we aren’t going to use the [tt]delta[/tt] variable. (for more information, look at the Slick Javadocs).</p>
<p>First, let’s think about what might happen in Pong. If the user presses the directional keys, their paddle needs to move up or down:</p>
<p>[size=10pt][tt]<span class="bbcode-b">if</span> (gc.getInput().isKeyDown(Input.KEY_UP)) {<br>
<span class="bbcode-b">if</span> (paddlePlayer.getMinY() &gt; 0)<br>
paddlePlayer.setY(paddlePlayer.getY() - 10.0f);<br>
} <span class="bbcode-b">else</span> <span class="bbcode-b">if</span> (gc.getInput().isKeyDown(Input.KEY_DOWN)) {<br>
<span class="bbcode-b">if</span> (paddlePlayer.getMaxY() &lt; height)<br>
paddlePlayer.setY(paddlePlayer.getY() + 10.0f);<br>
}[/tt][/size]</p>
<p>We also need to update the position of the ball with their speed:</p>
<p>[size=10pt][tt]ball.setLocation(ball.getX() + ballVelocity.getX(), ball.getY() + ballVelocity.getY());[/tt][/size]</p>
<p>Now we detect collisions that can happen when the ball hits the edge of the playing field. In horizontal terms, if the ball leaves the screen on the left or right side, we have to change the horizontal speed and update the scores.</p>
<p>[size=10pt][tt]<span class="bbcode-b">if</span> (ball.getMinX() &lt;= 0) {<br>
ballVelocity.x = -ballVelocity.getX();<br>
scoreCPU++;<br>
}<br>
<span class="bbcode-b">if</span> (ball.getMaxX() &gt;= width) {<br>
ballVelocity.x = -ballVelocity.getX();<br>
scorePlayer++;<br>
}[/tt][/size]</p>
<p>Now in vertical terms, we just have to change the speed in the Y component of the velocity vector.</p>
<p>[size=10pt][tt]<span class="bbcode-b">if</span> (ball.getMinY() &lt;= 0)<br>
ballVelocity.y = -ballVelocity.getY();<br>
<span class="bbcode-b">if</span> (ball.getMaxY() &gt;= height)<br>
ballVelocity.y = -ballVelocity.getY();[/tt][/size]</p>
<p>Now we need to check of the ball collides with the player’s racket. If it does, just change the speed component of X.</p>
<p>[size=10pt][tt]<span class="bbcode-b">if</span> (ball.<span class="bbcode-b">int</span>ersects(paddlePlayer) || ball.<span class="bbcode-b">int</span>ersects(paddleCPU)) {<br>
ballVelocity.x = -ballVelocity.getX();<br>
}[/tt][/size]</p>
<p>Try running the game. We already have something that resembles the game of Pong! But we do have one big flaw: the racket of the opponent is not simulated by the computer. Let’s add this to the game, so we can play against the computer. My implementation of “artificial intelligence” is very simple. The racket of the opponent always follows the vertical position of the ball, making it impossible to beat the computer:</p>
<p>[size=10pt][tt]<span class="bbcode-b">float</span> ypos = ball.getCenterY() - paddleCPU.getHeight() / 2;<br>
paddleCPU.setY(ypos);[/tt][/size]</p>
<p>Very simple! The algorithm can be improved through the use of random numbers. Try changing the game and adding new features.</p>
<p>Original:<br>
<img src="http://img691.imageshack.us/img691/8066/f5e2d44c019e0130204914d.png" alt width="" height=""></p>
<p>Rewrite (me exploiting a bug I found giving the cpu tons of points):<br>
<img src="http://img33.imageshack.us/img33/8466/pongowned.png" alt width="" height=""></p>
<p>Resources<br>
<a href="http://slick.cokeandcode.com/downloads/slick.jar" data-bbcode="true" rel="nofollow noopener">Download Slick2D</a><br>
<a href="http://slick.cokeandcode.com/wiki" data-bbcode="true" rel="nofollow noopener">Slick2D Wiki</a><br>
<a href="http://slick.cokeandcode.com/javadoc" data-bbcode="true" rel="nofollow noopener">Slick2D Javadocs</a><br>
<a href="http://lwjgl.org/download.php" data-bbcode="true" rel="nofollow noopener">LWJGL Downloads Page</a><br>
<a href="http://lwjgl.org/wiki/index.php?title=Main_Page#Getting_started" data-bbcode="true" rel="nofollow noopener">LWJGL Documentation</a><br>
<a href="http://lwjgl.org/javadoc/" data-bbcode="true" rel="nofollow noopener">LWJGL Javadocs</a><br>
<a href="https://docs.google.com/View?id=dg7tmwbk_35cqpmrrgd" data-bbcode="true" rel="nofollow noopener">Original article written by Triton (in portuguese)</a></p>
<p>Attached is the project source. <a href="http://up.ht/qPM7rP" data-bbcode="true" rel="nofollow noopener">Click here to play pong</a>. If the jar file doesn’t work for you, let me know your OS and architecture. I added another class, LoadLWJGL, which is designed to dynamically load LWJGL and Slick2D in basically any environment supported by LWJGL.</p>
<p>Post your feedback, questions, and customizations to this tutorial. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882/1</link>
        <pubDate>Wed, 24 Aug 2011 20:16:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411882-1</guid>
        <source url="https://forum.moparisthebest.com/t/slick2d-simple-pong-game/411882.rss">[Slick2D] Simple Pong Game</source>
      </item>
  </channel>
</rss>
