<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Azure/Runesource] Dialogues</title>
    <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277</link>
    <description>From learning how to do this just about a month ago, I think I have full understanding on how to create fully operational dialogues for NPC&#39;s.

[b]Difficulty: 6/10 (Might be kind of hard to understand at first glance.)[/b]

So let&#39;s get started.


BEFORE YOU START ADDING DIALOGUES, YOU SHOULD HAVE THIS IN YOUR DIALOGUES.JAVA:

[code] 	public static final int HAPPY = 588, CALM = 589, CALM_CONTINUED = 590, CONTENT = 591, EVIL = 592, EVIL_CONTINUED = 593, DELIGHTED_EVIL = 594, ANNOYED = 595, DISTRESSED = 596, DISTRESSED_CONTINUED = 597, NEAR_TEARS = 598, SAD = 599, DISORIENTED_LEFT = 600, DISORIENTED_RIGHT = 601, UNINTERESTED = 602, SLEEPY = 603, PLAIN_EVIL = 604, LAUGHING = 605, LONGER_LAUGHING = 606, LONGER_LAUGHING_2 = 607, LAUGHING_2 = 608, EVIL_LAUGH_SHORT = 609, SLIGHTLY_SAD = 610, VERY_SAD = 611, OTHER = 612, NEAR_TEARS_2 = 613, ANGRY_1 = 614, ANGRY_2 = 615, ANGRY_3 = 616, ANGRY_4 = 617;

	public static boolean startDialogue(Player player, int id) {
		player.getDialogue().resetDialogue();
		return sendDialogue(player, id, 1, 0);
	}

	public static boolean sendDialogue(Player player, int id, int chatId, int optionId) {
		return sendDialogue(player, id, chatId, optionId, id);
	}

	public static void setNextDialogue(Player player, int id, int chatId) {
		player.getDialogue().setDialogueId(id);
		player.getDialogue().setNextChatId(chatId);
	}
[/code]

Under that, add:

[code]	public static boolean sendDialogue(Player player, int id, int chatId, int optionId, int npcChatId) {
		player.getDialogue().setChatId(chatId);
		player.getDialogue().setDialogueId(id);
		player.getDialogue().setLastNpcTalk(npcChatId);
		switch(id) {
}
[/code]

And in player.java, add this:

[code]
	public DialogueManager getDialogue() {
		return dialogue;
	}
[/code]

[b]1. Starting off.[/b]
[b]NPC ID[/b]

In almost any base, you use a line called a [b]case[/b].

Cases declare a certain NPC or Object id, depending on what method you are putting it under.

In the case of Dialogues, you use an NPC ID in the case.

Ex:
[code]case 1:[/code]

Case 1 would be the NPC ID of a Man in-game.
[b]2. Ending the case.[/b]
Now that you have the NPC ID declared, you&#39;re going to want to make sure to end the statement. (Once you have this done you can add as much dialogue as you want.)

To end a case, use this code:
[code]}
break;[/code]

Now that you have these steps done, your code should look like this:

[code]case 1:

}
break;[/code]

[b]3. Switching.[/b]

Now it&#39;s time to add a switch so we can actually add some dialogue.

When you&#39;re starting a dialogue, you always have to add a switch statement.
The statement next to your switch statement should already declared.

Adding a switch statement should look like this:

[code]				switch(player.getDialogue().getChatId()) {[/code]

This may be hard to understand at first glance, but it&#39;s simple. 
Under the case, you&#39;re [b]switching[/b] the case to [b]get the dialogue[/b] from the player class. 
From there, you&#39;re getting the [b]chat ID[/b] from the getDialogue method we grabbed from the player class.

Your code should look like this now:

[code]case 1:
switch(player.getDialogue().getChatId()) {
}
break;[/code]

[b]4. Adding dialogue.[/b]

After the switch statement, it&#39;s time to add some dialogue.
When you add dialogue, you add another [b]case[/b] for the dialogue to go under.
Since you added a switch statement, it is pretty much a new array to add things under
Dialogues are always added under a new case number, so that&#39;s what you&#39;re going to want to do.

[code] case 1:
player.getDialogue().sendNpcChat(&quot;Hello!&quot;, CONTENT);
return true;
[/code]

Again, this MIGHT be hard to swallow, but again, it&#39;s quite simple.
From the getDialogue that&#39;s in the player class, it states that you&#39;re starting that statement.
From there, it [b]sends an NPC chat(dialogue)[/b] which is &quot;Hello!&quot;
The &quot;CONTENT&quot; means his emotion, and using CONTENT generally means he&#39;s normal.

[b]YOU MUST ALWAYS[/b] put &quot;return true;&quot; under the dialogue, or it will [b]NOT[/b] work.
Return true is self explanatory, meaning it makes the statement to be true (allows it to happen) 

Here&#39;s what you code should look like:
[code]case 1:
				switch(player.getDialogue().getChatId()) {
case 1:
player.getDialogue().sendNpcChat(&quot;Hello!&quot;, CONTENT);
return true;
}
break;
[/code]

[b]5. Sending to the next dialogue.[/b]

To send another dialogue, you must set the Click to continue button to the next chat ID.

It&#39;s a pretty simple concept, so let&#39;s get right into it.

[code]player.getDialogue().setNextChatId(CASE NUMBER);[/code]

Again, I don&#39;t expect anyone to get lost with this.
[b]setNextChatId[/b] sets the next dialogue to a certain case number.

Say, you&#39;re adding another Dialogue for YOU to say.
Your code would look like this.

[code]case 1:
				switch(player.getDialogue().getChatId()) {
case 1:
player.getDialogue().sendNpcChat(&quot;Hello!&quot;, CONTENT);
player.getDialogue().setNextChatId(2);
return true;

case 2:
player.getDialogue().sendPlayerChat(&quot;Hello, how are you?&quot;, CONTENT);
return true;
}
break;[/code]

[b]sendPlayerChat[/b] is self explanatory aswell, sends a player dialogue.

As you can see, the setNextChatId() has [b]2[/b] in between the parentheses.

This sends the next dialogue to [b]case 2[/b].

[b]6. Options.[/b]

I&#39;m going to create a new example for an option system.

To make options, you&#39;re going to need a new [b]switch[/b] statement.
BEFORE  you create the switch statement, you&#39;re going to want to send a dialogue with the options inside of it.
The dialogue would look like this.
[code]case 1:
player.getDialogue().sendOption(&quot;Yes&quot;, &quot;No.&quot;);
return true;
[/code]

Pretty self-explanatory again, it sends the Option as a dialogue in the getDialogue() boolean, and it returns the dialogue to be true.

Now, for this, you [b]don&#39;t[/b] need a setNextChatId() statement, because it&#39;s going to move right on to the next case of the dialogue.

The dialogue will move right onto the next case, as it&#39;s an option statement.

Time for the switching. 

Following the case 1 that I made, there will be a case 2.

Your case 2 will contain the switch for the options, so here it is:

[code]
case 2:
switch (optionId()) {
case 1:
player.getDialogue().sendNpcChat(&quot;Great!&quot;, HAPPY);
player.getDialogue().endDialogue();
return true;
case 2:
player.getDialogue().sendNpcChat(&quot;Okay..&quot;, SAD);
player.getDialogue().endDialogue();
return true;
}
}
break;
[/code]

This is a pretty weird thing, as we are now using a new set of cases, but let me explain.

[b]case 1[/b], under the new switch statement, is what the [b]FIRST[/b] dialogue that you added will be the result of.
In the first option, you said &quot;Yes&quot;, and in the case 1 of the new option switch, it replied with &quot;Great!&quot;, and his emotion was &quot;HAPPY&quot;.

In case 2, you had the option &quot;No.&quot;, and he replied with &quot;Okay..&quot;, and his emotion was &quot;SAD&quot;.

[b]7. Importing methods from other classes.[/b]

This is also a pretty simple thing to do, but still requires some work.
This is mainly used in making [b]quests[/b], and giving xp/new interfaces.

And example I&#39;m going to give is giving the player an item if he selects an option.

[code]case 1: //man
switch(player.getDialogue().getChatId()) {
case 1:
player.getDialogue().sendNpcChat(&quot;Would you like 1 million gold or a White Partyhat?&quot;, CONTENT);
player.getDialogue().setNextChatId(2);
return true;
case 2:
player.getDialogue().sendOption(&quot;1 Million gold please!&quot;, &quot;White partyhat, please!&quot;);
case 3:
switch(getOptionId()) {
case 1:
player.getDialogue().sendPlayerChat(&quot;1 Million gold please!&quot;, CONTENT);
player.getDialogue().setNextChatId(4);
return true;
case 2:
player.getDialogue().sendPlayerChat(&quot;White partyhat, please!&quot;, CONTENT);
player.getDialogue().setNextChatId(5);
return true;
}
case 4:
player.getInventory().addItem(new Item(995, 1000000));
player.getDialogue().endDialogue();
return true;
case 5:
player.getInventory().addItem(new Item(1048));
player.getDialogue().endDialogue();
return true;
}
break;[/code]

Those are the main basics of creating effective dialogues in Azure/Runesource.

If you have any suggestions for me to add onto this guide, please tell me in a PM or in the comments.

This was my first guide, so any feedback would be greatly appreciated.</description>
    
    <lastBuildDate>Mon, 17 Mar 2014 11:47:40 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Azure/Runesource] Dialogues</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>pretty non-oop way to do things but meh nice job</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/5</link>
        <pubDate>Mon, 17 Mar 2014 11:47:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541277-5</guid>
        <source url="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss">[Azure/Runesource] Dialogues</source>
      </item>
      <item>
        <title>[Azure/Runesource] Dialogues</title>
        <dc:creator><![CDATA[@sorecheeny sorecheeny]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sorecheeny">@sorecheeny</a> wrote:</p>
          <blockquote>
              <p>Thanks for the feedback.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/4</link>
        <pubDate>Mon, 17 Mar 2014 02:30:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541277-4</guid>
        <source url="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss">[Azure/Runesource] Dialogues</source>
      </item>
      <item>
        <title>[Azure/Runesource] Dialogues</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>Woah what the hell? You’re wrong about a lot of this…</p>
<p>[quote=“sorecheeny, post:1, topic:541277”]<span class="bbcode-b">1. Starting off.</span><br>
<span class="bbcode-b">NPC ID</span></p>
<p>In almost any base, you use a line called a <span class="bbcode-b">case</span>.</p>
<p>Cases declare a certain NPC or Object id, depending on what method you are putting it under.</p>
<p>In the case of Dialogues, you use an NPC ID in the case.</p>
<p>Ex:</p>
<pre><code class="lang-auto"></code></pre>
<p>Case 1 would be the NPC ID of a Man in-game.<br>
<span class="bbcode-b">2. Ending the case.</span><br>
Now that you have the NPC ID declared, you’re going to want to make sure to end the statement. (Once you have this done you can add as much dialogue as you want.)</p>
<p>To end a case, use this code:</p>
<p><code>}
break;</code>[/quote]</p>
<p>First, you’re giving them the wrong information on what a case is. A case is used in a switch block in replacement of a series of if statements.<br>
See <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html" data-bbcode="true" rel="nofollow noopener">this guide</a> for more information.<br>
Second, a case with an int for the switch would look like this (Without any code, of course):</p>
<pre><code class="lang-auto">case 1:
     // Do stuff
     break;</code></pre>
<p>Cases can also return primitive datatypes:</p>
<pre><code class="lang-auto">public int thisIntIsCool(int anInt1) {
     switch(anInt1) {
          case 1:
               return 45;
     }</code></pre>
<p>Notice how the braces are used at the start/end of the switch block and not the case.<br>
You do not need to add an ending brace to a case to end the case.</p>
<p>I understand you said that because how you add the next steps, but you shouldn’t giving them false information.</p>
<p>Also, please learn at least some form of conventions. Your code is extremely unreadable. You also don’t explain much at all.<br>
Example, for step 4, you don’t say why it has to return true. Seeing as I’ve never touched runesource/azure, I wouldn’t begin to know if the method you are in is returning a boolean or not, and if it doesn’t return a boolean, it shouldn’t need to return true.</p>
<p>I’d say 4/10 at most. You should really format that code and use:</p>
<p>[code]</p>
<pre><code class="lang-auto">// Your code would go here, and look better
[ /code] (Remove that space)</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/3</link>
        <pubDate>Mon, 17 Mar 2014 02:28:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541277-3</guid>
        <source url="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss">[Azure/Runesource] Dialogues</source>
      </item>
      <item>
        <title>[Azure/Runesource] Dialogues</title>
        <dc:creator><![CDATA[@Fluby Fluby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fluby">@Fluby</a> wrote:</p>
          <blockquote>
              <p>Thank you so much for this, extremely helpful! good job!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/2</link>
        <pubDate>Sun, 16 Mar 2014 23:04:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541277-2</guid>
        <source url="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss">[Azure/Runesource] Dialogues</source>
      </item>
      <item>
        <title>[Azure/Runesource] Dialogues</title>
        <dc:creator><![CDATA[@sorecheeny sorecheeny]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sorecheeny">@sorecheeny</a> wrote:</p>
          <blockquote>
              <p>From learning how to do this just about a month ago, I think I have full understanding on how to create fully operational dialogues for NPC’s.</p>
<p><span class="bbcode-b">Difficulty: 6/10 (Might be kind of hard to understand at first glance.)</span></p>
<p>So let’s get started.</p>
<p>BEFORE YOU START ADDING DIALOGUES, YOU SHOULD HAVE THIS IN YOUR DIALOGUES.JAVA:</p>
<p>[code] 	public static final int HAPPY = 588, CALM = 589, CALM_CONTINUED = 590, CONTENT = 591, EVIL = 592, EVIL_CONTINUED = 593, DELIGHTED_EVIL = 594, ANNOYED = 595, DISTRESSED = 596, DISTRESSED_CONTINUED = 597, NEAR_TEARS = 598, SAD = 599, DISORIENTED_LEFT = 600, DISORIENTED_RIGHT = 601, UNINTERESTED = 602, SLEEPY = 603, PLAIN_EVIL = 604, LAUGHING = 605, LONGER_LAUGHING = 606, LONGER_LAUGHING_2 = 607, LAUGHING_2 = 608, EVIL_LAUGH_SHORT = 609, SLIGHTLY_SAD = 610, VERY_SAD = 611, OTHER = 612, NEAR_TEARS_2 = 613, ANGRY_1 = 614, ANGRY_2 = 615, ANGRY_3 = 616, ANGRY_4 = 617;</p>
<pre><code>public static boolean startDialogue(Player player, int id) {
	player.getDialogue().resetDialogue();
	return sendDialogue(player, id, 1, 0);
}

public static boolean sendDialogue(Player player, int id, int chatId, int optionId) {
	return sendDialogue(player, id, chatId, optionId, id);
}

public static void setNextDialogue(Player player, int id, int chatId) {
	player.getDialogue().setDialogueId(id);
	player.getDialogue().setNextChatId(chatId);
}
</code></pre>
<p>[/code]</p>
<p>Under that, add:</p>
<p><code>	public static boolean sendDialogue(Player player, int id, int chatId, int optionId, int npcChatId) {
		player.getDialogue().setChatId(chatId);
		player.getDialogue().setDialogueId(id);
		player.getDialogue().setLastNpcTalk(npcChatId);
		switch(id) {
}
</code></p>
<p>And in player.java, add this:</p>
<pre><code class="lang-auto">	public DialogueManager getDialogue() {
		return dialogue;
	}</code></pre>
<p><span class="bbcode-b">1. Starting off.</span><br>
<span class="bbcode-b">NPC ID</span></p>
<p>In almost any base, you use a line called a <span class="bbcode-b">case</span>.</p>
<p>Cases declare a certain NPC or Object id, depending on what method you are putting it under.</p>
<p>In the case of Dialogues, you use an NPC ID in the case.</p>
<p>Ex:</p>
<pre><code class="lang-auto"></code></pre>
<p>Case 1 would be the NPC ID of a Man in-game.<br>
<span class="bbcode-b">2. Ending the case.</span><br>
Now that you have the NPC ID declared, you’re going to want to make sure to end the statement. (Once you have this done you can add as much dialogue as you want.)</p>
<p>To end a case, use this code:</p>
<p><code>}
break;</code></p>
<p>Now that you have these steps done, your code should look like this:</p>
<p>[code]case 1:</p>
<p>}<br>
break;[/code]</p>
<p><span class="bbcode-b">3. Switching.</span></p>
<p>Now it’s time to add a switch so we can actually add some dialogue.</p>
<p>When you’re starting a dialogue, you always have to add a switch statement.<br>
The statement next to your switch statement should already declared.</p>
<p>Adding a switch statement should look like this:</p>
<pre><code class="lang-auto"></code></pre>
<p>This may be hard to understand at first glance, but it’s simple.<br>
Under the case, you’re <span class="bbcode-b">switching</span> the case to <span class="bbcode-b">get the dialogue</span> from the player class.<br>
From there, you’re getting the <span class="bbcode-b">chat ID</span> from the getDialogue method we grabbed from the player class.</p>
<p>Your code should look like this now:</p>
<p><code>case 1:
switch(player.getDialogue().getChatId()) {
}
break;</code></p>
<p><span class="bbcode-b">4. Adding dialogue.</span></p>
<p>After the switch statement, it’s time to add some dialogue.<br>
When you add dialogue, you add another <span class="bbcode-b">case</span> for the dialogue to go under.<br>
Since you added a switch statement, it is pretty much a new array to add things under<br>
Dialogues are always added under a new case number, so that’s what you’re going to want to do.</p>
<p><code> case 1:
player.getDialogue().sendNpcChat("Hello!", CONTENT);
return true;
</code></p>
<p>Again, this MIGHT be hard to swallow, but again, it’s quite simple.<br>
From the getDialogue that’s in the player class, it states that you’re starting that statement.<br>
From there, it <span class="bbcode-b">sends an NPC chat(dialogue)</span> which is "Hello!"<br>
The “CONTENT” means his emotion, and using CONTENT generally means he’s normal.</p>
<p><span class="bbcode-b">YOU MUST ALWAYS</span> put “return true;” under the dialogue, or it will <span class="bbcode-b">NOT</span> work.<br>
Return true is self explanatory, meaning it makes the statement to be true (allows it to happen)</p>
<p>Here’s what you code should look like:</p>
<p><code>case 1:
				switch(player.getDialogue().getChatId()) {
case 1:
player.getDialogue().sendNpcChat("Hello!", CONTENT);
return true;
}
break;
</code></p>
<p><span class="bbcode-b">5. Sending to the next dialogue.</span></p>
<p>To send another dialogue, you must set the Click to continue button to the next chat ID.</p>
<p>It’s a pretty simple concept, so let’s get right into it.</p>
<pre><code class="lang-auto"></code></pre>
<p>Again, I don’t expect anyone to get lost with this.<br>
<span class="bbcode-b">setNextChatId</span> sets the next dialogue to a certain case number.</p>
<p>Say, you’re adding another Dialogue for YOU to say.<br>
Your code would look like this.</p>
<p>[code]case 1:<br>
switch(player.getDialogue().getChatId()) {<br>
case 1:<br>
player.getDialogue().sendNpcChat(“Hello!”, CONTENT);<br>
player.getDialogue().setNextChatId(2);<br>
return true;</p>
<p>case 2:<br>
player.getDialogue().sendPlayerChat(“Hello, how are you?”, CONTENT);<br>
return true;<br>
}<br>
break;[/code]</p>
<p><span class="bbcode-b">sendPlayerChat</span> is self explanatory aswell, sends a player dialogue.</p>
<p>As you can see, the setNextChatId() has <span class="bbcode-b">2</span> in between the parentheses.</p>
<p>This sends the next dialogue to <span class="bbcode-b">case 2</span>.</p>
<p><span class="bbcode-b">6. Options.</span></p>
<p>I’m going to create a new example for an option system.</p>
<p>To make options, you’re going to need a new <span class="bbcode-b">switch</span> statement.<br>
BEFORE  you create the switch statement, you’re going to want to send a dialogue with the options inside of it.<br>
The dialogue would look like this.</p>
<p><code>case 1:
player.getDialogue().sendOption("Yes", "No.");
return true;
</code></p>
<p>Pretty self-explanatory again, it sends the Option as a dialogue in the getDialogue() boolean, and it returns the dialogue to be true.</p>
<p>Now, for this, you <span class="bbcode-b">don’t</span> need a setNextChatId() statement, because it’s going to move right on to the next case of the dialogue.</p>
<p>The dialogue will move right onto the next case, as it’s an option statement.</p>
<p>Time for the switching.</p>
<p>Following the case 1 that I made, there will be a case 2.</p>
<p>Your case 2 will contain the switch for the options, so here it is:</p>
<pre><code class="lang-auto">case 2:
switch (optionId()) {
case 1:
player.getDialogue().sendNpcChat("Great!", HAPPY);
player.getDialogue().endDialogue();
return true;
case 2:
player.getDialogue().sendNpcChat("Okay..", SAD);
player.getDialogue().endDialogue();
return true;
}
}
break;</code></pre>
<p>This is a pretty weird thing, as we are now using a new set of cases, but let me explain.</p>
<p><span class="bbcode-b">case 1</span>, under the new switch statement, is what the <span class="bbcode-b">FIRST</span> dialogue that you added will be the result of.<br>
In the first option, you said “Yes”, and in the case 1 of the new option switch, it replied with “Great!”, and his emotion was “HAPPY”.</p>
<p>In case 2, you had the option “No.”, and he replied with “Okay…”, and his emotion was “SAD”.</p>
<p><span class="bbcode-b">7. Importing methods from other classes.</span></p>
<p>This is also a pretty simple thing to do, but still requires some work.<br>
This is mainly used in making <span class="bbcode-b">quests</span>, and giving xp/new interfaces.</p>
<p>And example I’m going to give is giving the player an item if he selects an option.</p>
<p><code>case 1: //man
switch(player.getDialogue().getChatId()) {
case 1:
player.getDialogue().sendNpcChat("Would you like 1 million gold or a White Partyhat?", CONTENT);
player.getDialogue().setNextChatId(2);
return true;
case 2:
player.getDialogue().sendOption("1 Million gold please!", "White partyhat, please!");
case 3:
switch(getOptionId()) {
case 1:
player.getDialogue().sendPlayerChat("1 Million gold please!", CONTENT);
player.getDialogue().setNextChatId(4);
return true;
case 2:
player.getDialogue().sendPlayerChat("White partyhat, please!", CONTENT);
player.getDialogue().setNextChatId(5);
return true;
}
case 4:
player.getInventory().addItem(new Item(995, 1000000));
player.getDialogue().endDialogue();
return true;
case 5:
player.getInventory().addItem(new Item(1048));
player.getDialogue().endDialogue();
return true;
}
break;</code></p>
<p>Those are the main basics of creating effective dialogues in Azure/Runesource.</p>
<p>If you have any suggestions for me to add onto this guide, please tell me in a PM or in the comments.</p>
<p>This was my first guide, so any feedback would be greatly appreciated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277/1</link>
        <pubDate>Sun, 16 Mar 2014 22:46:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541277-1</guid>
        <source url="https://forum.moparisthebest.com/t/azure-runesource-dialogues/541277.rss">[Azure/Runesource] Dialogues</source>
      </item>
  </channel>
</rss>
