<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache problem</title>
    <link>https://forum.moparisthebest.com/t/cache-problem/539741</link>
    <description>Im using Sinatra v3. Iv added new models and such and updated maps. it all works and when i zip the cache (i do it in the folder not the folder it self) it doesnt load a folder and it say cant find path. and when i searched thru the codes to see were the path is going it never shows up. Heres my code 
 
The file that doesnt load is called cModels

heres a link to the cache [url=https://dl.dropboxusercontent.com/u/76331637/ds2.zip]https://dl.dropboxusercontent.com/u/76331637/ds2.zip[/url]
Signlink.java
[code]package com.cache;

import java.applet.Applet;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;

import com.constants.Configuration;

public final class SignLink implements Runnable {

	public static void startpriv(InetAddress inetaddress) {
		threadliveid = (int) (Math.random() * 99999999D);
		if (active) {
			try {
				Thread.sleep(500L);
			} catch (Exception _ex) {
			}
			active = false;
		}
		socketreq = 0;
		threadreq = null;
		dnsreq = null;
		savereq = null;
		urlreq = null;
		socketip = inetaddress;
		Thread thread = new Thread(new SignLink());
		thread.setDaemon(true);
		thread.start();
		while (!active)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
	}

	@Override
	public void run() {
		active = true;
		String s = findcachedir();
		uid = getuid(s);
		try {
			File file = new File(s + &quot;main_file_cache.dat&quot;);
			cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
			for (int j = 0; j &lt; 5; j++)
				cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot;
						+ j, &quot;rw&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		}
		for (int i = threadliveid; threadliveid == i;) {
			if (socketreq != 0) {
				try {
					socket = new Socket(socketip, socketreq);
				} catch (Exception _ex) {
					socket = null;
				}
				socketreq = 0;
			} else if (threadreq != null) {
				Thread thread = new Thread(threadreq);
				thread.setDaemon(true);
				thread.start();
				thread.setPriority(threadreqpri);
				threadreq = null;
			} else if (dnsreq != null) {
				try {
					dns = InetAddress.getByName(dnsreq).getHostName();
				} catch (Exception _ex) {
					dns = &quot;unknown&quot;;
				}
				dnsreq = null;
			} else if (savereq != null) {
				if (savebuf != null)
					try {
						FileOutputStream fileoutputstream = new FileOutputStream(
								s + savereq);
						fileoutputstream.write(savebuf, 0, savelen);
						fileoutputstream.close();
					} catch (Exception _ex) {
					}
				if (waveplay) {
					@SuppressWarnings(&quot;unused&quot;)
					String wave = s + savereq;
					waveplay = false;
				}
				if (midiplay) {
					midi = s + savereq;
					midiplay = false;
				}
				savereq = null;
			} else if (urlreq != null) {
				try {
					System.out.println(&quot;urlstream&quot;);
					urlstream = new DataInputStream((new URL(
							mainapp.getCodeBase(), urlreq)).openStream());
				} catch (Exception _ex) {
					urlstream = null;
				}
				urlreq = null;
			}
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
		}

	}

	public static String findcachedir() {
		boolean exists = (new File(System.getProperty(&quot;user.home&quot;)
				+ &quot;/ds2/&quot;)).exists();
		if (exists) {
			return System.getProperty(&quot;user.home&quot;)
					+ Configuration.cacheDirectory;
		} else {
			File f = new File(System.getProperty(&quot;user.home&quot;)
					+ Configuration.cacheDirectory);
			f.mkdir();
			System.out.println(&quot;Directory doesnt exist, making directory&quot;);
			return System.getProperty(&quot;user.home&quot;)
					+ Configuration.cacheDirectory;
		}
	}

	public static String findcachedirORIG() {
		String as[] = { &quot;c:/windows/&quot;, &quot;c:/winnt/&quot;, &quot;d:/windows/&quot;, &quot;d:/winnt/&quot;,
				&quot;e:/windows/&quot;, &quot;e:/winnt/&quot;, &quot;f:/windows/&quot;, &quot;f:/winnt/&quot;, &quot;c:/&quot;,
				&quot;~/&quot;, &quot;/tmp/&quot;, &quot;&quot;, &quot;c:/rscache&quot;, &quot;/rscache&quot; };
		if (storeid &lt; 32 || storeid &gt; 34)
			storeid = 32;
		String s = &quot;.file_store_&quot; + storeid;
		for (int i = 0; i &lt; as.length; i++)
			try {
				String s1 = as[i];
				if (s1.length() &gt; 0) {
					File file = new File(s1);
					if (!file.exists())
						continue;
				}
				File file1 = new File(s1 + s);
				if (file1.exists() || file1.mkdir())
					return s1 + s + &quot;/&quot;;
			} catch (Exception _ex) {
			}

		return null;

	}

	private static int getuid(String s) {
		try {
			File file = new File(s + &quot;uid.dat&quot;);
			if (!file.exists() || file.length() &lt; 4L) {
				DataOutputStream dataoutputstream = new DataOutputStream(
						new FileOutputStream(s + &quot;uid.dat&quot;));
				dataoutputstream.writeInt((int) (Math.random() * 99999999D));
				dataoutputstream.close();
			}
		} catch (Exception _ex) {
		}
		try {
			DataInputStream datainputstream = new DataInputStream(
					new FileInputStream(s + &quot;uid.dat&quot;));
			int i = datainputstream.readInt();
			datainputstream.close();
			return i + 1;
		} catch (Exception _ex) {
			return 0;
		}
	}

	public static synchronized Socket opensocket(int i) throws IOException {
		for (socketreq = i; socketreq != 0;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (socket == null)
			throw new IOException(&quot;could not open socket&quot;);
		else
			return socket;
	}

	public static synchronized DataInputStream openurl(String s)
			throws IOException {
		for (urlreq = s; urlreq != null;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (urlstream == null)
			throw new IOException(&quot;could not open: &quot; + s);
		else
			return urlstream;
	}

	public static synchronized void dnslookup(String s) {
		dns = s;
		dnsreq = s;
	}

	public static synchronized void startthread(Runnable runnable, int i) {
		threadreqpri = i;
		threadreq = runnable;
	}

	public static synchronized boolean wavesave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return false;
		if (savereq != null) {
			return false;
		} else {
			wavepos = (wavepos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized boolean wavereplay() {
		if (savereq != null) {
			return false;
		} else {
			savebuf = null;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized void midisave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return;
		if (savereq != null) {
		} else {
			midipos = (midipos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			midiplay = true;
			savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
		}
	}

	public static void reporterror(String s) {
		System.out.println(&quot;Error: &quot; + s);
	}

	private SignLink() {
	}

	public static final int clientversion = 317;
	public static int uid;
	public static int storeid = 32;
	public static RandomAccessFile cache_dat = null;
	public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
	public static boolean sunjava;
	public static Applet mainapp = null;
	private static boolean active;
	private static int threadliveid;
	private static InetAddress socketip;
	private static int socketreq;
	private static Socket socket = null;
	private static int threadreqpri = 1;
	private static Runnable threadreq = null;
	private static String dnsreq = null;
	public static String dns = null;
	private static String urlreq = null;
	private static DataInputStream urlstream = null;
	private static int savelen;
	private static String savereq = null;
	private static byte[] savebuf = null;
	private static boolean midiplay;
	private static int midipos;
	public static String midi = null;
	public static int midivol;
	public static int midifade;
	private static boolean waveplay;
	private static int wavepos;
	public static int wavevol;
	public static boolean reporterror = true;
	public static String errorname = &quot;&quot;;

}
[/code]

UpdateCache.java
[code]package com.cache;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import javax.swing.JOptionPane;

import com.Client;

public class UpdateCache implements Runnable {

	public static final String ZIP_URL = &quot;https://dl.dropboxusercontent.com/u/76331637/ds2.zip&quot;;
	public static final String VERSION_URL = &quot;https://dl.dropboxusercontent.com/u/76331637/cacheVersion.txt&quot;;
	public static final String VERSION_FILE = SignLink.findcachedir()
			+ &quot;cacheVersion.dat&quot;;
	private Client client;
	Client frame;

	public UpdateCache(Client client) {
		this.client = client;
	}

	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	public double getCurrentVersion() {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(
					new FileInputStream(VERSION_FILE)));
			return Double.parseDouble(br.readLine());
		} catch (Exception e) {
			return 0.1;
		}
	}

	public double getNewestVersion() {
		try {
			URL tmp = new URL(VERSION_URL);
			BufferedReader br = new BufferedReader(new InputStreamReader(
					tmp.openStream()));
			return Double.parseDouble(br.readLine());
		} catch (Exception e) {
			handleException(e);
			return -1;
		}
	}

	private void handleException(Exception e) {
		StringBuilder strBuff = new StringBuilder();
		strBuff.append(&quot;Please check the Abyss forums for a newer client!\r\n\r\n&quot;);
		StringBuilder append = strBuff.append(e.getClass().getName())
				.append(&quot; \&quot;&quot;).append(e.getMessage()).append(&quot;\&quot;\r\n&quot;);
		for (StackTraceElement s : e.getStackTrace())
			strBuff.append(s.toString()).append(&quot;\r\n&quot;);
		alert(&quot;Exception [&quot; + e.getClass().getSimpleName() + &quot;]&quot;,
				strBuff.toString(), true);
	}

	private void alert(String msg) {
		alert(&quot;Message&quot;, msg, false);
	}

	private void alert(String title, String msg, boolean error) {
		JOptionPane
				.showMessageDialog(null, msg, title,
						(error ? JOptionPane.ERROR_MESSAGE
								: JOptionPane.PLAIN_MESSAGE));
	}

	@Override
	public void run() {
		drawLoadingText(0, &quot;Checking Versions&quot;);
		try {
			double newest = getNewestVersion();
			if (newest &gt; this.getCurrentVersion()) {
				int n = JOptionPane.showConfirmDialog(null,
						&quot;There is an update to version &quot; + newest + &quot;\n&quot;
								+ &quot;Would you like to update?&quot;,
						&quot;Current version: &quot; + getCurrentVersion(),
						JOptionPane.YES_NO_OPTION);
				if (n == 0) {
					updateClient();
					drawLoadingText(0,
							&quot;Cache has been updated, please restart the client!&quot;);
					alert(&quot;Cache has been updated, please restart the client!&quot;);
					OutputStream out = new FileOutputStream(VERSION_FILE);
					out.write(String.valueOf(newest).getBytes());
					;
					System.exit(0);
					out.close();
				} else {
					alert(&quot; Your client may not load correct &quot;
							+ getCurrentVersion());
					// System.exit(0);
				}
			}
		} catch (Exception e) {
			handleException(e);
		}
	}

	private void updateClient() {
		File clientZip = downloadClient();
		if (clientZip != null) {
			unZip(clientZip);
		}
	}

	private void unZip(File clientZip) {
		try {
			unZipFile(clientZip, new File(SignLink.findcachedir()));
			clientZip.delete();
		} catch (IOException e) {
			handleException(e);
		}
	}

	private void unZipFile(File zipFile, File outFile) throws IOException {
		ZipInputStream zin = new ZipInputStream(new BufferedInputStream(
				new FileInputStream(zipFile)));
		ZipEntry e;
		long max = 0;
		long curr = 0;
		while ((e = zin.getNextEntry()) != null)
			max += e.getSize();
		zin.close();
		ZipInputStream in = new ZipInputStream(new BufferedInputStream(
				new FileInputStream(zipFile)));
		while ((e = in.getNextEntry()) != null) {
			if (e.isDirectory())
				new File(outFile, e.getName()).mkdirs();
			else {
				FileOutputStream out = new FileOutputStream(new File(outFile,
						e.getName()));
				byte[] b = new byte[1024];
				int len;
				while ((len = in.read(b, 0, b.length)) &gt; -1) {
					curr += len;
					out.write(b, 0, len);
					setUnzipPercent((int) ((curr * 100) / max));
				}
				out.flush();
				out.close();
			}
		}
		in.close();
	}

	public int percent = 0;

	public void setDownloadPercent(int amount) {
		percent = amount;
		drawLoadingText(amount, &quot;Downloading Cache&quot; + &quot; - &quot; + amount + &quot;%&quot;);
	}

	public int percent2 = 0;

	public void setUnzipPercent(int amount2) {
		percent2 = amount2;
		drawLoadingText(amount2, &quot;Extracting Cache&quot; + &quot; - &quot; + amount2 + &quot;%&quot;);
	}

	private File downloadClient() {
		File ret = new File(SignLink.findcachedir() + &quot;cache.zip&quot;);
		try {
			OutputStream out = new FileOutputStream(ret);
			URLConnection conn = new URL(ZIP_URL).openConnection();
			InputStream in = conn.getInputStream();
			long max = conn.getContentLength();
			long curr = 0;
			byte[] b = new byte[1024];
			int len;
			while ((len = in.read(b, 0, b.length)) &gt; -1) {
				out.write(b, 0, len);
				curr += len;
				setDownloadPercent((int) ((curr * 100) / max));
			}
			out.flush();
			out.close();
			in.close();
			return ret;
		} catch (Exception e) {
			handleException(e);
			ret.delete();
			return null;
		}
	}
}[/code]

Configuration.jave
[code]package com.constants;

public class Configuration {

	/**
	 * Index repacking booleans
	 */

	public static boolean repackModels = false;
	public static boolean repackAnimations = false;
	public static boolean repackMusic = false;
	public static boolean repackMaps = false;

	/**
	 * Debugging booleans
	 */

	public static boolean debugModels = false;
	public static boolean debugNpcs = false;
	public static boolean debugFloors = false;
	public static boolean debugTextures = false;

	/**
	 * Dumping booleans
	 */

	public static boolean dumpItemModels = false;

	/**
	 * Server Details
	 */

	public static String cacheDirectory = &quot;/ds2/&quot;;
	public static String frameTitle = &quot;Deathsoul v2&quot;;
	//public static String serverIp = &quot;&quot;;
	public static String serverIp = &quot;0.0.0.0&quot;;
	//public static String serverIp = &quot;&quot;;
	//ublic static String serverIp = &quot;&quot;;
	public static int serverPort = 43594;

}
[/code]</description>
    
    <lastBuildDate>Fri, 07 Feb 2014 21:43:38 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-problem/539741.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache problem</title>
        <dc:creator><![CDATA[@JCor9 JCor9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jcor9">@JCor9</a> wrote:</p>
          <blockquote>
              <p>the cache works if u do it manually, it errors loading cache after the one file doesnt find it path (cdModels) i believe</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-problem/539741/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-problem/539741/3</link>
        <pubDate>Fri, 07 Feb 2014 21:43:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-539741-3</guid>
        <source url="https://forum.moparisthebest.com/t/cache-problem/539741.rss">Cache problem</source>
      </item>
      <item>
        <title>Cache problem</title>
        <dc:creator><![CDATA[@Sessy_Pk3r Sessy Pk3r]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sessy_pk3r">@Sessy_Pk3r</a> wrote:</p>
          <blockquote>
              <p>So what you’re saying is that the client is not loading you’re updated cache? Just trying to clarify the situation</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-problem/539741/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-problem/539741/2</link>
        <pubDate>Fri, 07 Feb 2014 16:06:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-539741-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-problem/539741.rss">Cache problem</source>
      </item>
      <item>
        <title>Cache problem</title>
        <dc:creator><![CDATA[@JCor9 JCor9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jcor9">@JCor9</a> wrote:</p>
          <blockquote>
              <p>Im using Sinatra v3. Iv added new models and such and updated maps. it all works and when i zip the cache (i do it in the folder not the folder it self) it doesnt load a folder and it say cant find path. and when i searched thru the codes to see were the path is going it never shows up. Heres my code</p>
<p>The file that doesnt load is called cModels</p>
<p>heres a link to the cache <a href="https://dl.dropboxusercontent.com/u/76331637/ds2.zip" data-bbcode="true" rel="nofollow noopener">https://dl.dropboxusercontent.com/u/76331637/ds2.zip</a><br>
Signlink.java</p>
<p>[code]package com.cache;</p>
<p>import java.applet.Applet;<br>
import java.io.DataInputStream;<br>
import java.io.DataOutputStream;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.io.RandomAccessFile;<br>
import java.net.InetAddress;<br>
import java.net.Socket;<br>
import java.net.URL;</p>
<p>import com.constants.Configuration;</p>
<p>public final class SignLink implements Runnable {</p>
<pre><code>public static void startpriv(InetAddress inetaddress) {
	threadliveid = (int) (Math.random() * 99999999D);
	if (active) {
		try {
			Thread.sleep(500L);
		} catch (Exception _ex) {
		}
		active = false;
	}
	socketreq = 0;
	threadreq = null;
	dnsreq = null;
	savereq = null;
	urlreq = null;
	socketip = inetaddress;
	Thread thread = new Thread(new SignLink());
	thread.setDaemon(true);
	thread.start();
	while (!active)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}
}

@Override
public void run() {
	active = true;
	String s = findcachedir();
	uid = getuid(s);
	try {
		File file = new File(s + "main_file_cache.dat");
		cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
		for (int j = 0; j &lt; 5; j++)
			cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx"
					+ j, "rw");

	} catch (Exception exception) {
		exception.printStackTrace();
	}
	for (int i = threadliveid; threadliveid == i;) {
		if (socketreq != 0) {
			try {
				socket = new Socket(socketip, socketreq);
			} catch (Exception _ex) {
				socket = null;
			}
			socketreq = 0;
		} else if (threadreq != null) {
			Thread thread = new Thread(threadreq);
			thread.setDaemon(true);
			thread.start();
			thread.setPriority(threadreqpri);
			threadreq = null;
		} else if (dnsreq != null) {
			try {
				dns = InetAddress.getByName(dnsreq).getHostName();
			} catch (Exception _ex) {
				dns = "unknown";
			}
			dnsreq = null;
		} else if (savereq != null) {
			if (savebuf != null)
				try {
					FileOutputStream fileoutputstream = new FileOutputStream(
							s + savereq);
					fileoutputstream.write(savebuf, 0, savelen);
					fileoutputstream.close();
				} catch (Exception _ex) {
				}
			if (waveplay) {
				@SuppressWarnings("unused")
				String wave = s + savereq;
				waveplay = false;
			}
			if (midiplay) {
				midi = s + savereq;
				midiplay = false;
			}
			savereq = null;
		} else if (urlreq != null) {
			try {
				System.out.println("urlstream");
				urlstream = new DataInputStream((new URL(
						mainapp.getCodeBase(), urlreq)).openStream());
			} catch (Exception _ex) {
				urlstream = null;
			}
			urlreq = null;
		}
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}
	}

}

public static String findcachedir() {
	boolean exists = (new File(System.getProperty("user.home")
			+ "/ds2/")).exists();
	if (exists) {
		return System.getProperty("user.home")
				+ Configuration.cacheDirectory;
	} else {
		File f = new File(System.getProperty("user.home")
				+ Configuration.cacheDirectory);
		f.mkdir();
		System.out.println("Directory doesnt exist, making directory");
		return System.getProperty("user.home")
				+ Configuration.cacheDirectory;
	}
}

public static String findcachedirORIG() {
	String as[] = { "c:/windows/", "c:/winnt/", "d:/windows/", "d:/winnt/",
			"e:/windows/", "e:/winnt/", "f:/windows/", "f:/winnt/", "c:/",
			"~/", "/tmp/", "", "c:/rscache", "/rscache" };
	if (storeid &lt; 32 || storeid &gt; 34)
		storeid = 32;
	String s = ".file_store_" + storeid;
	for (int i = 0; i &lt; as.length; i++)
		try {
			String s1 = as[i];
			if (s1.length() &gt; 0) {
				File file = new File(s1);
				if (!file.exists())
					continue;
			}
			File file1 = new File(s1 + s);
			if (file1.exists() || file1.mkdir())
				return s1 + s + "/";
		} catch (Exception _ex) {
		}

	return null;

}

private static int getuid(String s) {
	try {
		File file = new File(s + "uid.dat");
		if (!file.exists() || file.length() &lt; 4L) {
			DataOutputStream dataoutputstream = new DataOutputStream(
					new FileOutputStream(s + "uid.dat"));
			dataoutputstream.writeInt((int) (Math.random() * 99999999D));
			dataoutputstream.close();
		}
	} catch (Exception _ex) {
	}
	try {
		DataInputStream datainputstream = new DataInputStream(
				new FileInputStream(s + "uid.dat"));
		int i = datainputstream.readInt();
		datainputstream.close();
		return i + 1;
	} catch (Exception _ex) {
		return 0;
	}
}

public static synchronized Socket opensocket(int i) throws IOException {
	for (socketreq = i; socketreq != 0;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (socket == null)
		throw new IOException("could not open socket");
	else
		return socket;
}

public static synchronized DataInputStream openurl(String s)
		throws IOException {
	for (urlreq = s; urlreq != null;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (urlstream == null)
		throw new IOException("could not open: " + s);
	else
		return urlstream;
}

public static synchronized void dnslookup(String s) {
	dns = s;
	dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i) {
	threadreqpri = i;
	threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return false;
	if (savereq != null) {
		return false;
	} else {
		wavepos = (wavepos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized boolean wavereplay() {
	if (savereq != null) {
		return false;
	} else {
		savebuf = null;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized void midisave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return;
	if (savereq != null) {
	} else {
		midipos = (midipos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		midiplay = true;
		savereq = "jingle" + midipos + ".mid";
	}
}

public static void reporterror(String s) {
	System.out.println("Error: " + s);
}

private SignLink() {
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}<br>
[/code]</p>
<p>UpdateCache.java</p>
<p>[code]package com.cache;</p>
<p>import java.io.BufferedInputStream;<br>
import java.io.BufferedReader;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.io.InputStreamReader;<br>
import java.io.OutputStream;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>import javax.swing.JOptionPane;</p>
<p>import com.Client;</p>
<p>public class UpdateCache implements Runnable {</p>
<pre><code>public static final String ZIP_URL = "https://dl.dropboxusercontent.com/u/76331637/ds2.zip";
public static final String VERSION_URL = "https://dl.dropboxusercontent.com/u/76331637/cacheVersion.txt";
public static final String VERSION_FILE = SignLink.findcachedir()
		+ "cacheVersion.dat";
private Client client;
Client frame;

public UpdateCache(Client client) {
	this.client = client;
}

private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

public double getCurrentVersion() {
	try {
		BufferedReader br = new BufferedReader(new InputStreamReader(
				new FileInputStream(VERSION_FILE)));
		return Double.parseDouble(br.readLine());
	} catch (Exception e) {
		return 0.1;
	}
}

public double getNewestVersion() {
	try {
		URL tmp = new URL(VERSION_URL);
		BufferedReader br = new BufferedReader(new InputStreamReader(
				tmp.openStream()));
		return Double.parseDouble(br.readLine());
	} catch (Exception e) {
		handleException(e);
		return -1;
	}
}

private void handleException(Exception e) {
	StringBuilder strBuff = new StringBuilder();
	strBuff.append("Please check the Abyss forums for a newer client!\r\n\r\n");
	StringBuilder append = strBuff.append(e.getClass().getName())
			.append(" \"").append(e.getMessage()).append("\"\r\n");
	for (StackTraceElement s : e.getStackTrace())
		strBuff.append(s.toString()).append("\r\n");
	alert("Exception [" + e.getClass().getSimpleName() + "]",
			strBuff.toString(), true);
}

private void alert(String msg) {
	alert("Message", msg, false);
}

private void alert(String title, String msg, boolean error) {
	JOptionPane
			.showMessageDialog(null, msg, title,
					(error ? JOptionPane.ERROR_MESSAGE
							: JOptionPane.PLAIN_MESSAGE));
}

@Override
public void run() {
	drawLoadingText(0, "Checking Versions");
	try {
		double newest = getNewestVersion();
		if (newest &gt; this.getCurrentVersion()) {
			int n = JOptionPane.showConfirmDialog(null,
					"There is an update to version " + newest + "\n"
							+ "Would you like to update?",
					"Current version: " + getCurrentVersion(),
					JOptionPane.YES_NO_OPTION);
			if (n == 0) {
				updateClient();
				drawLoadingText(0,
						"Cache has been updated, please restart the client!");
				alert("Cache has been updated, please restart the client!");
				OutputStream out = new FileOutputStream(VERSION_FILE);
				out.write(String.valueOf(newest).getBytes());
				;
				System.exit(0);
				out.close();
			} else {
				alert(" Your client may not load correct "
						+ getCurrentVersion());
				// System.exit(0);
			}
		}
	} catch (Exception e) {
		handleException(e);
	}
}

private void updateClient() {
	File clientZip = downloadClient();
	if (clientZip != null) {
		unZip(clientZip);
	}
}

private void unZip(File clientZip) {
	try {
		unZipFile(clientZip, new File(SignLink.findcachedir()));
		clientZip.delete();
	} catch (IOException e) {
		handleException(e);
	}
}

private void unZipFile(File zipFile, File outFile) throws IOException {
	ZipInputStream zin = new ZipInputStream(new BufferedInputStream(
			new FileInputStream(zipFile)));
	ZipEntry e;
	long max = 0;
	long curr = 0;
	while ((e = zin.getNextEntry()) != null)
		max += e.getSize();
	zin.close();
	ZipInputStream in = new ZipInputStream(new BufferedInputStream(
			new FileInputStream(zipFile)));
	while ((e = in.getNextEntry()) != null) {
		if (e.isDirectory())
			new File(outFile, e.getName()).mkdirs();
		else {
			FileOutputStream out = new FileOutputStream(new File(outFile,
					e.getName()));
			byte[] b = new byte[1024];
			int len;
			while ((len = in.read(b, 0, b.length)) &gt; -1) {
				curr += len;
				out.write(b, 0, len);
				setUnzipPercent((int) ((curr * 100) / max));
			}
			out.flush();
			out.close();
		}
	}
	in.close();
}

public int percent = 0;

public void setDownloadPercent(int amount) {
	percent = amount;
	drawLoadingText(amount, "Downloading Cache" + " - " + amount + "%");
}

public int percent2 = 0;

public void setUnzipPercent(int amount2) {
	percent2 = amount2;
	drawLoadingText(amount2, "Extracting Cache" + " - " + amount2 + "%");
}

private File downloadClient() {
	File ret = new File(SignLink.findcachedir() + "cache.zip");
	try {
		OutputStream out = new FileOutputStream(ret);
		URLConnection conn = new URL(ZIP_URL).openConnection();
		InputStream in = conn.getInputStream();
		long max = conn.getContentLength();
		long curr = 0;
		byte[] b = new byte[1024];
		int len;
		while ((len = in.read(b, 0, b.length)) &gt; -1) {
			out.write(b, 0, len);
			curr += len;
			setDownloadPercent((int) ((curr * 100) / max));
		}
		out.flush();
		out.close();
		in.close();
		return ret;
	} catch (Exception e) {
		handleException(e);
		ret.delete();
		return null;
	}
}
</code></pre>
<p>}[/code]</p>
<p>Configuration.jave</p>
<p>[code]package com.constants;</p>
<p>public class Configuration {</p>
<pre><code>/**
 * Index repacking booleans
 */

public static boolean repackModels = false;
public static boolean repackAnimations = false;
public static boolean repackMusic = false;
public static boolean repackMaps = false;

/**
 * Debugging booleans
 */

public static boolean debugModels = false;
public static boolean debugNpcs = false;
public static boolean debugFloors = false;
public static boolean debugTextures = false;

/**
 * Dumping booleans
 */

public static boolean dumpItemModels = false;

/**
 * Server Details
 */

public static String cacheDirectory = "/ds2/";
public static String frameTitle = "Deathsoul v2";
//public static String serverIp = "";
public static String serverIp = "0.0.0.0";
//public static String serverIp = "";
//ublic static String serverIp = "";
public static int serverPort = 43594;
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-problem/539741/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-problem/539741/1</link>
        <pubDate>Thu, 06 Feb 2014 18:50:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-539741-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-problem/539741.rss">Cache problem</source>
      </item>
  </channel>
</rss>
