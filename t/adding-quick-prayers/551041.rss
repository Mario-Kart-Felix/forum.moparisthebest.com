<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Adding quick prayers</title>
    <link>https://forum.moparisthebest.com/t/adding-quick-prayers/551041</link>
    <description>Hello, moparscape! I have follow a tut on adding quick prayers ([url=http://www.rune-server.org/runescape-development/rs2-server/snippets/388205-quick-prayers-curses-pi-100-a.html]http://www.rune-server.org/runescape-development/rs2-server/snippets/388205-quick-prayers-curses-pi-100-a.html[/url]), I have converted everything both client and server side, but when I draw the interface (ID: 20000 regular prayers / 22000 curse prayers) I get this nullpointer!

[code]Exception in thread &quot;Thread-4&quot; java.lang.NullPointerException
	at underworld.client.drawInterface(client.java:9842)
	at underworld.client.drawTabArea(client.java:2311)
	at underworld.client.drawGameScreen(client.java:9697)
	at underworld.client.processDrawing(client.java:10562)
	at underworld.RSApplet.run(RSApplet.java:190)
	at underworld.client.run(client.java:5575)
	at java.lang.Thread.run(Unknown Source)
[/code]

Here is my drawInterface method:

[code]private void drawInterface(int something, int k, RSInterface rsinterface, int l) {
		if(rsinterface.type != 0 || rsinterface.children == null)
			return;
		if(rsinterface.isMouseoverTriggered &amp;&amp; anInt1026 != rsinterface.id &amp;&amp; anInt1048 != rsinterface.id &amp;&amp; anInt1039 != rsinterface.id)
			return;
		int i1 = DrawingArea.topX;
		int j1 = DrawingArea.topY;
		int k1 = DrawingArea.bottomX;
		int l1 = DrawingArea.bottomY;
		DrawingArea.setDrawingArea(l + rsinterface.height, k, k + rsinterface.width, l);
		int i2 = rsinterface.children.length;
		for(int j2 = 0; j2 &lt; i2; j2++) 	{
			int k2 = rsinterface.childX[j2] + k;
			int l2 = (rsinterface.childY[j2] + l) - something;
			RSInterface interfaceCache = RSInterface.interfaceCache[rsinterface.children[j2]];
			k2 += interfaceCache.anInt263; //Right here is teh nullpointer! error!
			l2 += interfaceCache.anInt265;
			if(interfaceCache.contentType &gt; 0)
				drawFriendsListOrWelcomeScreen(interfaceCache);
			//here
			int[] IDs = {
				1196, 1199, 1206, 1215, 1224, 1231, 1240, 1249, 1258, 1267, 1274, 1283, 1573,
				1290, 1299, 1308, 1315, 1324, 1333, 1340, 1349, 1358, 1367, 1374, 1381, 1388,
				1397, 1404, 1583, 12038, 1414, 1421, 1430, 1437, 1446, 1453, 1460, 1469, 15878,
				1602, 1613, 1624, 7456, 1478, 1485, 1494, 1503, 1512, 1521, 1530, 1544, 1553,
				1563, 1593, 1635, 12426, 12436, 12446, 12456, 6004, 18471,
				/* Ancients */
				12940, 12988, 13036, 12902, 12862, 13046, 12964, 13012, 13054, 12920, 12882, 13062,
				12952, 13000, 13070, 12912, 12872, 13080, 12976, 13024, 13088, 12930, 12892, 13096
			};
			for(int m5 = 0; m5 &lt; IDs.length; m5++) {
				if(interfaceCache.id == IDs[m5] + 1) {
					if(m5 &gt; 61)
						drawBlackBox(k2 + 1, l2);
					else
						drawBlackBox(k2, l2 + 1);
				}
			}
			int[] runeChildren = {
				1202, 1203, 1209, 1210, 1211, 1218, 1219, 1220, 1227, 1228, 1234, 1235, 1236, 1243, 1244, 1245,
				1252, 1253, 1254, 1261, 1262, 1263, 1270, 1271, 1277, 1278, 1279, 1286, 1287, 1293, 1294, 1295,
				1302, 1303, 1304, 1311, 1312, 1318, 1319, 1320, 1327, 1328, 1329, 1336, 1337, 1343, 1344, 1345,
				1352, 1353, 1354, 1361, 1362, 1363, 1370, 1371, 1377, 1378, 1384, 1385, 1391, 1392, 1393, 1400,
				1401, 1407, 1408, 1410, 1417, 1418, 1424, 1425, 1426, 1433, 1434, 1440, 1441, 1442, 1449, 1450,
				1456, 1457, 1463, 1464, 1465, 1472, 1473, 1474, 1481, 1482, 1488, 1489, 1490, 1497, 1498, 1499,
				1506, 1507, 1508, 1515, 1516, 1517, 1524, 1525, 1526, 1533, 1534, 1535, 1547, 1548, 1549, 1556,
				1557, 1558, 1566, 1567, 1568, 1576, 1577, 1578, 1586, 1587, 1588, 1596, 1597, 1598, 1605, 1606,
				1607, 1616, 1617, 1618, 1627, 1628, 1629, 1638, 1639, 1640, 6007, 6008, 6011, 8673, 8674, 12041,
				12042, 12429, 12430, 12431, 12439, 12440, 12441, 12449, 12450, 12451, 12459, 12460, 15881, 15882,
				15885, 18474, 18475, 18478
			};
			for(int r = 0; r &lt; runeChildren.length; r++)
				if(interfaceCache.id == runeChildren[r])
					interfaceCache.modelZoom = 775;
			if(interfaceCache.type == 0) {
				if(interfaceCache.scrollPosition &gt; interfaceCache.scrollMax - interfaceCache.height)
					interfaceCache.scrollPosition = interfaceCache.scrollMax - interfaceCache.height;
				if(interfaceCache.scrollPosition &lt; 0)
					interfaceCache.scrollPosition = 0;
				drawInterface(interfaceCache.scrollPosition, k2, interfaceCache, l2);
				if(interfaceCache.scrollMax &gt; interfaceCache.height)
					drawScrollbar(interfaceCache.height, interfaceCache.scrollPosition, l2, k2 + interfaceCache.width, interfaceCache.scrollMax);
			} else if(interfaceCache.type != 1)
				if(interfaceCache.type == 2) {
					int i3 = 0;
					for(int l3 = 0; l3 &lt; interfaceCache.height; l3++) {
						for(int l4 = 0; l4 &lt; interfaceCache.width; l4++) {
							int k5 = k2 + l4 * (32 + interfaceCache.invSpritePadX);
							int j6 = l2 + l3 * (32 + interfaceCache.invSpritePadY);
							if(i3 &lt; 20) {
								k5 += interfaceCache.spritesX[i3];
								j6 += interfaceCache.spritesY[i3];
							}
							if(interfaceCache.inv[i3] &gt; 0) {
								int k6 = 0;
								int j7 = 0;
								int j9 = interfaceCache.inv[i3] - 1;
								if(k5 &gt; DrawingArea.topX - 32 &amp;&amp; k5 &lt; DrawingArea.bottomX &amp;&amp; j6 &gt; DrawingArea.topY - 32 &amp;&amp; j6 &lt; DrawingArea.bottomY || activeInterfaceType != 0 &amp;&amp; anInt1085 == i3) {
									int l9 = 0;
									if(itemSelected == 1 &amp;&amp; anInt1283 == i3 &amp;&amp; anInt1284 == interfaceCache.id)
										l9 = 0xffffff;
									Sprite updateSprite = ItemDef.getSprite(j9, interfaceCache.invStackSizes[i3], l9);
									if(updateSprite != null) {
										if(activeInterfaceType != 0 &amp;&amp; anInt1085 == i3 &amp;&amp; anInt1084 == interfaceCache.id) {
											k6 = super.mouseX - anInt1087;
											j7 = super.mouseY - anInt1088;
											if(k6 &lt; 5 &amp;&amp; k6 &gt; -5)
												k6 = 0;
											if(j7 &lt; 5 &amp;&amp; j7 &gt; -5)
												j7 = 0;
											if(anInt989 &lt; 10) {
												k6 = 0;
												j7 = 0;
											}
											updateSprite.drawSprite1(k5 + k6, j6 + j7);
											if(j6 + j7 &lt; DrawingArea.topY &amp;&amp; rsinterface.scrollPosition &gt; 0) {
												int i10 = (anInt945 * (DrawingArea.topY - j6 - j7)) / 3;
												if(i10 &gt; anInt945 * 10)
													i10 = anInt945 * 10;
												if(i10 &gt; rsinterface.scrollPosition)
													i10 = rsinterface.scrollPosition;
												rsinterface.scrollPosition -= i10;
												anInt1088 += i10;
											}
											if(j6 + j7 + 32 &gt; DrawingArea.bottomY &amp;&amp; rsinterface.scrollPosition &lt; rsinterface.scrollMax - rsinterface.height) {
												int j10 = (anInt945 * ((j6 + j7 + 32) - DrawingArea.bottomY)) / 3;
												if(j10 &gt; anInt945 * 10)
													j10 = anInt945 * 10;
												if(j10 &gt; rsinterface.scrollMax - rsinterface.height - rsinterface.scrollPosition)
													j10 = rsinterface.scrollMax - rsinterface.height - rsinterface.scrollPosition;
												rsinterface.scrollPosition += j10;
												anInt1088 -= j10;
											}
										} else if(atInventoryInterfaceType != 0 &amp;&amp; atInventoryIndex == i3 &amp;&amp; atInventoryInterface == interfaceCache.id)
											updateSprite.drawSprite1(k5, j6);
										else
											updateSprite.drawSprite(k5, j6);
										if(updateSprite.anInt1444 == 33 || interfaceCache.invStackSizes[i3] != 1)
										{
											int k10 = interfaceCache.invStackSizes[i3];
											if(k10 &gt;= 1)
												smallText.method385(0xFFFF00, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);
											if(k10 &gt;= 100000)
												smallText.method385(0xFFFFFF, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);
											if(k10 &gt;= 10000000)
												smallText.method385(0x49E20E, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);

											/*smallText.method385(0, intToKOrMil(k10), j6 + 10 + j7, k5 + 1 + k6);
											smallText.method385(0xffff00, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);*/
										}
									}
								}
							} else if(interfaceCache.sprites != null &amp;&amp; i3 &lt; 20) {
								Sprite class30_sub2_sub1_sub1_1 = interfaceCache.sprites[i3];
								if(class30_sub2_sub1_sub1_1 != null)
									class30_sub2_sub1_sub1_1.drawSprite(k5, j6);
							}
							i3++;
						}
					}
				} else if(interfaceCache.type == 3) {
					boolean flag = false;
					if(anInt1039 == interfaceCache.id || anInt1048 == interfaceCache.id || anInt1026 == interfaceCache.id)
						flag = true;
					int j3;
					if(interfaceIsSelected(interfaceCache)) {
						j3 = interfaceCache.anInt219;
						if(flag &amp;&amp; interfaceCache.anInt239 != 0)
							j3 = interfaceCache.anInt239;
					} else {
						j3 = interfaceCache.textColor;
						if(flag &amp;&amp; interfaceCache.anInt216 != 0)
							j3 = interfaceCache.anInt216;
					}
					if(interfaceCache.aByte254 == 0) {
						if(interfaceCache.aBoolean227)
							DrawingArea.drawPixels(interfaceCache.height, l2, k2, j3, interfaceCache.width);
						else
							DrawingArea.fillPixels(k2, interfaceCache.width, interfaceCache.height, j3, l2);
					} else if(interfaceCache.aBoolean227)
						DrawingArea.method335(j3, l2, interfaceCache.width, interfaceCache.height, 256 - (interfaceCache.aByte254 &amp; 0xff), k2);
					else
						DrawingArea.method338(l2, interfaceCache.height, 256 - (interfaceCache.aByte254 &amp; 0xff), j3, interfaceCache.width, k2);
				} else if(interfaceCache.type == 4) {
					TextDrawingArea textDrawingArea = interfaceCache.textDrawingAreas;
					String s = interfaceCache.message;
					boolean flag1 = false;
					if(anInt1039 == interfaceCache.id || anInt1048 == interfaceCache.id || anInt1026 == interfaceCache.id)
						flag1 = true;
					int i4;
					if(interfaceIsSelected(interfaceCache)) {
						i4 = interfaceCache.anInt219;
						if(flag1 &amp;&amp; interfaceCache.anInt239 != 0)
							i4 = interfaceCache.anInt239;
						if(interfaceCache.enabledText.length() &gt; 0)
							s = interfaceCache.enabledText;
					} else {
						i4 = interfaceCache.textColor;
						if(flag1 &amp;&amp; interfaceCache.anInt216 != 0)
							i4 = interfaceCache.anInt216;
					}
					if(interfaceCache.atActionType == 6 &amp;&amp; aBoolean1149) {
						s = &quot;Please wait...&quot;;
						i4 = interfaceCache.textColor;
					}
					if(DrawingArea.width == 516) {
						if(i4 == 0xffff00)
							i4 = 255;
						if(i4 == 49152)
							i4 = 0xffffff;
					}
					if((interfaceCache.parentID == 1151) || (interfaceCache.parentID == 12855)) {
						switch (i4) {
							case 16773120: i4 = 0xFE981F; break;
							case 7040819: i4 = 0xAF6A1A; break;
						}
					}
					for(int l6 = l2 + textDrawingArea.anInt1497; s.length() &gt; 0; l6 += textDrawingArea.anInt1497)
					{
						if(s.indexOf(&quot;%&quot;) != -1)
						{
							do
							{
								int k7 = s.indexOf(&quot;%1&quot;);
								if(k7 == -1)
									break;
								if(interfaceCache.id &lt; 4000 || interfaceCache.id &gt; 5000 &amp;&amp; interfaceCache.id !=13921 &amp;&amp; interfaceCache.id !=13922 &amp;&amp; interfaceCache.id !=12171 &amp;&amp; interfaceCache.id !=12172)
									s = s.substring(0, k7) + methodR(extractInterfaceValues(interfaceCache, 0)) + s.substring(k7 + 2);
								else
									s = s.substring(0, k7) + interfaceIntToString(extractInterfaceValues(interfaceCache, 0)) + s.substring(k7 + 2);
							} while(true);
							do
							{
								int l7 = s.indexOf(&quot;%2&quot;);
								if(l7 == -1)
									break;
								s = s.substring(0, l7) + interfaceIntToString(extractInterfaceValues(interfaceCache, 1)) + s.substring(l7 + 2);
							} while(true);
							do
							{
								int i8 = s.indexOf(&quot;%3&quot;);
								if(i8 == -1)
									break;
								s = s.substring(0, i8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 2)) + s.substring(i8 + 2);
							} while(true);
							do
							{
								int j8 = s.indexOf(&quot;%4&quot;);
								if(j8 == -1)
									break;
								s = s.substring(0, j8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 3)) + s.substring(j8 + 2);
							} while(true);
							do
							{
								int k8 = s.indexOf(&quot;%5&quot;);
								if(k8 == -1)
									break;
								s = s.substring(0, k8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 4)) + s.substring(k8 + 2);
							} while(true);
						}
						int l8 = s.indexOf(&quot;\\n&quot;);
						String s1;
						if(l8 != -1)
						{
							s1 = s.substring(0, l8);
							s = s.substring(l8 + 2);
						} else
						{
							s1 = s;
							s = &quot;&quot;;
						}
						if(interfaceCache.centerText)
							textDrawingArea.method382(i4, k2 + interfaceCache.width / 2, s1, l6, interfaceCache.textShadow);
						else
							textDrawingArea.method389(interfaceCache.textShadow, k2, i4, s1, l6);
					}
				} else if(interfaceCache.type == 5) {
					//whats this?

					Sprite sprite;					
					if(interfaceIsSelected(interfaceCache))
                        sprite = interfaceCache.onSprite;
                    else
                        sprite = interfaceCache.offSprite;
					if(spellSelected == 1 &amp;&amp; interfaceCache.id == spellID &amp;&amp; spellID != 0 &amp;&amp; sprite != null) { 
						sprite.drawSprite(k2, l2, 0xffffff);
					} else {
						if(Autocast &amp;&amp; interfaceCache.id == autocastId)
						magicAuto.drawSprite(k2-3, l2-3);
						if (sprite != null)
							if(interfaceCache.drawsTransparent) {
								sprite.drawTransparent(k2, l2, 0xffffff);
							} else {
								sprite.drawSprite(k2, l2);
							}
					}
					
                    if(sprite != null)
                        sprite.drawSprite(k2, l2);
				} else if(interfaceCache.type == 6) {
					int k3 = Texture.textureInt1;
					int j4 = Texture.textureInt2;
					Texture.textureInt1 = k2 + interfaceCache.width / 2;
					Texture.textureInt2 = l2 + interfaceCache.height / 2;
					int i5 = Texture.anIntArray1470[interfaceCache.modelRotation1] * interfaceCache.modelZoom &gt;&gt; 16;
					int l5 = Texture.anIntArray1471[interfaceCache.modelRotation1] * interfaceCache.modelZoom &gt;&gt; 16;
					boolean flag2 = interfaceIsSelected(interfaceCache);
					int i7;
					if(flag2)
						i7 = interfaceCache.anInt258;
					else
						i7 = interfaceCache.anInt257;
					Model model;
					if(i7 == -1) {
						model = interfaceCache.method209(-1, -1, flag2);
					} else {
						Animation animation = Animation.anims[i7];
						model = interfaceCache.method209(animation.anIntArray354[interfaceCache.anInt246], animation.anIntArray353[interfaceCache.anInt246], flag2);
					}
					if(model != null)
						model.method482(interfaceCache.modelRotation2, 0, interfaceCache.modelRotation1, 0, i5, l5);
					Texture.textureInt1 = k3;
					Texture.textureInt2 = j4;
				} else if(interfaceCache.type == 7) {
					TextDrawingArea textDrawingArea_1 = interfaceCache.textDrawingAreas;
					int k4 = 0;
					for(int j5 = 0; j5 &lt; interfaceCache.height; j5++) {
						for(int i6 = 0; i6 &lt; interfaceCache.width; i6++) {
							if(interfaceCache.inv[k4] &gt; 0) {
								ItemDef itemDef = ItemDef.forID(interfaceCache.inv[k4] - 1);
								String s2 = itemDef.name;
								if(itemDef.stackable || interfaceCache.invStackSizes[k4] != 1)
									s2 = s2 + &quot; x&quot; + intToKOrMilLongName(interfaceCache.invStackSizes[k4]);
								int i9 = k2 + i6 * (115 + interfaceCache.invSpritePadX);
								int k9 = l2 + j5 * (12 + interfaceCache.invSpritePadY);
								if(interfaceCache.centerText)
									textDrawingArea_1.method382(interfaceCache.textColor, i9 + interfaceCache.width / 2, s2, k9, interfaceCache.textShadow);
								else
									textDrawingArea_1.method389(interfaceCache.textShadow, i9, interfaceCache.textColor, s2, k9);
							}
							k4++;
						}
					}
				} if (interfaceCache.type == 8 &amp;&amp; (anInt1500 == interfaceCache.id || anInt1044 == interfaceCache.id || anInt1129 == interfaceCache.id) &amp;&amp; anInt1501 == 100) {
                    
					int boxWidth = 0;
                    int boxHeight = 0;
                    TextDrawingArea textDrawingArea_2 = aTextDrawingArea_1271;
                    for (String s1 = interfaceCache.message; s1.length() &gt; 0;) {
                        int l7 = s1.indexOf(&quot;\\n&quot;);
                        String s4;
                        if (l7 != -1) {
                            s4 = s1.substring(0, l7);
                            s1 = s1.substring(l7 + 2);
                        } else {
                            s4 = s1;
                            s1 = &quot;&quot;;
                        }
                        int j10 = textDrawingArea_2.getTextWidth(s4);
                        if (j10 &gt; boxWidth) {
                            boxWidth = j10;
                        }
                        boxHeight += textDrawingArea_2.anInt1497 + 1;
                    }
                    boxWidth += 6;
                    boxHeight += 7;
                    int xPos = (k2 + interfaceCache.width) - 5 - boxWidth;
                    int yPos = l2 + interfaceCache.height + 5;
                    if (xPos &lt; k2 + 5) {
                        xPos = k2 + 5;
                    }
                    if (xPos + boxWidth &gt; k + rsinterface.width) {
                        xPos = (k + rsinterface.width) - boxWidth;
                    }
                    if (yPos + boxHeight &gt; l + rsinterface.height) {
                        yPos = (l + rsinterface.height) - boxHeight;
                    }
					if(interfaceCache.inventoryhover){
						if(xPos + boxWidth+k &gt; 249){
							xPos = 251 - boxWidth-k;
						}
						if(yPos+boxHeight+l &gt;261 ){
							yPos = 245 - boxHeight - l;
						}
					}
					switch (interfaceCache.id) {
					case 9217:
					case 9220:
					case 9223:
					case 9226:
					case 9229:
					case 9232:
					case 9235:
					case 9238:
						xPos -= 80;
						break;
					case 9239:
						yPos -= 100;
						break;
					}
                    DrawingArea.method336(boxHeight, yPos, xPos, 0xFFFFA0, boxWidth);
                    DrawingArea.fillPixels(xPos, boxWidth, boxHeight, 0, yPos);
                    String s2 = interfaceCache.message;
                    for (int j11 = yPos + textDrawingArea_2.anInt1497 + 2; s2.length() &gt; 0; j11 += textDrawingArea_2.anInt1497 + 1) {//anInt1497
                        int l11 = s2.indexOf(&quot;\\n&quot;);
                        String s5;
                        if (l11 != -1) {
                            s5 = s2.substring(0, l11);
                            s2 = s2.substring(l11 + 2);
                        } else {
                            s5 = s2;
                            s2 = &quot;&quot;;
                        }
                        textDrawingArea_2.method389(false, xPos + 3, 0, s5, j11);
                    }
		//}
		DrawingArea.setDrawingArea(l1, i1, k1, j1);
	}
				if(interfaceCache.type == 12) {
               					Sprite sprite;
                			if(interfaceIsSelected(interfaceCache))
                   	 			sprite = interfaceCache.onSprite;
                			else
                   	 			sprite = interfaceCache.offSprite;
               	 			if(sprite != null)
                   	 			sprite.drawAdvancedSprite(k2, l2);
                		} else if (interfaceCache.type == 9) {
					drawHoverBox(k2, l2, interfaceCache.popupString);
				}
		}
		DrawingArea.setDrawingArea(l1, i1, k1, j1);
	}[/code]</description>
    
    <lastBuildDate>Mon, 13 Apr 2015 23:11:49 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/adding-quick-prayers/551041.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Adding quick prayers</title>
        <dc:creator><![CDATA[@runescape_sucks runescape sucks]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/runescape_sucks">@runescape_sucks</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="551041">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/boi_jx/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> boi_jx:</div>
<blockquote>
<p>maybe the rsinterface icon buttons are already beeing used in ur client</p>
</blockquote>
</aside>
<p>Let me correct you. Now I don’t know anything about making custom interfaces, and buttons, rather. So this isn’t a solution, obviously.</p>
<p>But a nullpointer would not be thrown if it was already being used by something else. What’s more than likely happening is that the client has a type of array or set that it is trying to grab the custom button from, and the button that is set to that ID is returning null because nothing is set to ID.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/adding-quick-prayers/551041/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/adding-quick-prayers/551041/3</link>
        <pubDate>Mon, 13 Apr 2015 23:11:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551041-3</guid>
        <source url="https://forum.moparisthebest.com/t/adding-quick-prayers/551041.rss">Adding quick prayers</source>
      </item>
      <item>
        <title>Adding quick prayers</title>
        <dc:creator><![CDATA[@boi_jx boi_jx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boi_jx">@boi_jx</a> wrote:</p>
          <blockquote>
              <p>maybe the rsinterface icon buttons are already beeing used in ur client</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/adding-quick-prayers/551041/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/adding-quick-prayers/551041/2</link>
        <pubDate>Mon, 13 Apr 2015 22:18:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551041-2</guid>
        <source url="https://forum.moparisthebest.com/t/adding-quick-prayers/551041.rss">Adding quick prayers</source>
      </item>
      <item>
        <title>Adding quick prayers</title>
        <dc:creator><![CDATA[@Lordabyssal Lordabyssal]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lordabyssal">@Lordabyssal</a> wrote:</p>
          <blockquote>
              <p>Hello, moparscape! I have follow a tut on adding quick prayers (<a href="http://www.rune-server.org/runescape-development/rs2-server/snippets/388205-quick-prayers-curses-pi-100-a.html" data-bbcode="true" rel="nofollow noopener">http://www.rune-server.org/runescape-development/rs2-server/snippets/388205-quick-prayers-curses-pi-100-a.html</a>), I have converted everything both client and server side, but when I draw the interface (ID: 20000 regular prayers / 22000 curse prayers) I get this nullpointer!</p>
<p><code>Exception in thread "Thread-4" java.lang.NullPointerException
	at underworld.client.drawInterface(client.java:9842)
	at underworld.client.drawTabArea(client.java:2311)
	at underworld.client.drawGameScreen(client.java:9697)
	at underworld.client.processDrawing(client.java:10562)
	at underworld.RSApplet.run(RSApplet.java:190)
	at underworld.client.run(client.java:5575)
	at java.lang.Thread.run(Unknown Source)
</code></p>
<p>Here is my drawInterface method:</p>
<p>[code]private void drawInterface(int something, int k, RSInterface rsinterface, int l) {<br>
if(rsinterface.type != 0 || rsinterface.children == null)<br>
return;<br>
if(rsinterface.isMouseoverTriggered &amp;&amp; anInt1026 != rsinterface.id &amp;&amp; anInt1048 != rsinterface.id &amp;&amp; anInt1039 != rsinterface.id)<br>
return;<br>
int i1 = DrawingArea.topX;<br>
int j1 = DrawingArea.topY;<br>
int k1 = DrawingArea.bottomX;<br>
int l1 = DrawingArea.bottomY;<br>
DrawingArea.setDrawingArea(l + rsinterface.height, k, k + rsinterface.width, l);<br>
int i2 = rsinterface.children.length;<br>
for(int j2 = 0; j2 &lt; i2; j2++) 	{<br>
int k2 = rsinterface.childX[j2] + k;<br>
int l2 = (rsinterface.childY[j2] + l) - something;<br>
RSInterface interfaceCache = RSInterface.interfaceCache[rsinterface.children[j2]];<br>
k2 += interfaceCache.anInt263; //Right here is teh nullpointer! error!<br>
l2 += interfaceCache.anInt265;<br>
if(interfaceCache.contentType &gt; 0)<br>
drawFriendsListOrWelcomeScreen(interfaceCache);<br>
//here<br>
int[] IDs = {<br>
1196, 1199, 1206, 1215, 1224, 1231, 1240, 1249, 1258, 1267, 1274, 1283, 1573,<br>
1290, 1299, 1308, 1315, 1324, 1333, 1340, 1349, 1358, 1367, 1374, 1381, 1388,<br>
1397, 1404, 1583, 12038, 1414, 1421, 1430, 1437, 1446, 1453, 1460, 1469, 15878,<br>
1602, 1613, 1624, 7456, 1478, 1485, 1494, 1503, 1512, 1521, 1530, 1544, 1553,<br>
1563, 1593, 1635, 12426, 12436, 12446, 12456, 6004, 18471,<br>
/* Ancients */<br>
12940, 12988, 13036, 12902, 12862, 13046, 12964, 13012, 13054, 12920, 12882, 13062,<br>
12952, 13000, 13070, 12912, 12872, 13080, 12976, 13024, 13088, 12930, 12892, 13096<br>
};<br>
for(int m5 = 0; m5 &lt; IDs.length; m5++) {<br>
if(interfaceCache.id == IDs[m5] + 1) {<br>
if(m5 &gt; 61)<br>
drawBlackBox(k2 + 1, l2);<br>
else<br>
drawBlackBox(k2, l2 + 1);<br>
}<br>
}<br>
int[] runeChildren = {<br>
1202, 1203, 1209, 1210, 1211, 1218, 1219, 1220, 1227, 1228, 1234, 1235, 1236, 1243, 1244, 1245,<br>
1252, 1253, 1254, 1261, 1262, 1263, 1270, 1271, 1277, 1278, 1279, 1286, 1287, 1293, 1294, 1295,<br>
1302, 1303, 1304, 1311, 1312, 1318, 1319, 1320, 1327, 1328, 1329, 1336, 1337, 1343, 1344, 1345,<br>
1352, 1353, 1354, 1361, 1362, 1363, 1370, 1371, 1377, 1378, 1384, 1385, 1391, 1392, 1393, 1400,<br>
1401, 1407, 1408, 1410, 1417, 1418, 1424, 1425, 1426, 1433, 1434, 1440, 1441, 1442, 1449, 1450,<br>
1456, 1457, 1463, 1464, 1465, 1472, 1473, 1474, 1481, 1482, 1488, 1489, 1490, 1497, 1498, 1499,<br>
1506, 1507, 1508, 1515, 1516, 1517, 1524, 1525, 1526, 1533, 1534, 1535, 1547, 1548, 1549, 1556,<br>
1557, 1558, 1566, 1567, 1568, 1576, 1577, 1578, 1586, 1587, 1588, 1596, 1597, 1598, 1605, 1606,<br>
1607, 1616, 1617, 1618, 1627, 1628, 1629, 1638, 1639, 1640, 6007, 6008, 6011, 8673, 8674, 12041,<br>
12042, 12429, 12430, 12431, 12439, 12440, 12441, 12449, 12450, 12451, 12459, 12460, 15881, 15882,<br>
15885, 18474, 18475, 18478<br>
};<br>
for(int r = 0; r &lt; runeChildren.length; r++)<br>
if(interfaceCache.id == runeChildren[r])<br>
interfaceCache.modelZoom = 775;<br>
if(interfaceCache.type == 0) {<br>
if(interfaceCache.scrollPosition &gt; interfaceCache.scrollMax - interfaceCache.height)<br>
interfaceCache.scrollPosition = interfaceCache.scrollMax - interfaceCache.height;<br>
if(interfaceCache.scrollPosition &lt; 0)<br>
interfaceCache.scrollPosition = 0;<br>
drawInterface(interfaceCache.scrollPosition, k2, interfaceCache, l2);<br>
if(interfaceCache.scrollMax &gt; interfaceCache.height)<br>
drawScrollbar(interfaceCache.height, interfaceCache.scrollPosition, l2, k2 + interfaceCache.width, interfaceCache.scrollMax);<br>
} else if(interfaceCache.type != 1)<br>
if(interfaceCache.type == 2) {<br>
int i3 = 0;<br>
for(int l3 = 0; l3 &lt; interfaceCache.height; l3++) {<br>
for(int l4 = 0; l4 &lt; interfaceCache.width; l4++) {<br>
int k5 = k2 + l4 * (32 + interfaceCache.invSpritePadX);<br>
int j6 = l2 + l3 * (32 + interfaceCache.invSpritePadY);<br>
if(i3 &lt; 20) {<br>
k5 += interfaceCache.spritesX[i3];<br>
j6 += interfaceCache.spritesY[i3];<br>
}<br>
if(interfaceCache.inv[i3] &gt; 0) {<br>
int k6 = 0;<br>
int j7 = 0;<br>
int j9 = interfaceCache.inv[i3] - 1;<br>
if(k5 &gt; DrawingArea.topX - 32 &amp;&amp; k5 &lt; DrawingArea.bottomX &amp;&amp; j6 &gt; DrawingArea.topY - 32 &amp;&amp; j6 &lt; DrawingArea.bottomY || activeInterfaceType != 0 &amp;&amp; anInt1085 == i3) {<br>
int l9 = 0;<br>
if(itemSelected == 1 &amp;&amp; anInt1283 == i3 &amp;&amp; anInt1284 == interfaceCache.id)<br>
l9 = 0xffffff;<br>
Sprite updateSprite = ItemDef.getSprite(j9, interfaceCache.invStackSizes[i3], l9);<br>
if(updateSprite != null) {<br>
if(activeInterfaceType != 0 &amp;&amp; anInt1085 == i3 &amp;&amp; anInt1084 == interfaceCache.id) {<br>
k6 = super.mouseX - anInt1087;<br>
j7 = super.mouseY - anInt1088;<br>
if(k6 &lt; 5 &amp;&amp; k6 &gt; -5)<br>
k6 = 0;<br>
if(j7 &lt; 5 &amp;&amp; j7 &gt; -5)<br>
j7 = 0;<br>
if(anInt989 &lt; 10) {<br>
k6 = 0;<br>
j7 = 0;<br>
}<br>
updateSprite.drawSprite1(k5 + k6, j6 + j7);<br>
if(j6 + j7 &lt; DrawingArea.topY &amp;&amp; rsinterface.scrollPosition &gt; 0) {<br>
int i10 = (anInt945 * (DrawingArea.topY - j6 - j7)) / 3;<br>
if(i10 &gt; anInt945 * 10)<br>
i10 = anInt945 * 10;<br>
if(i10 &gt; rsinterface.scrollPosition)<br>
i10 = rsinterface.scrollPosition;<br>
rsinterface.scrollPosition -= i10;<br>
anInt1088 += i10;<br>
}<br>
if(j6 + j7 + 32 &gt; DrawingArea.bottomY &amp;&amp; rsinterface.scrollPosition &lt; rsinterface.scrollMax - rsinterface.height) {<br>
int j10 = (anInt945 * ((j6 + j7 + 32) - DrawingArea.bottomY)) / 3;<br>
if(j10 &gt; anInt945 * 10)<br>
j10 = anInt945 * 10;<br>
if(j10 &gt; rsinterface.scrollMax - rsinterface.height - rsinterface.scrollPosition)<br>
j10 = rsinterface.scrollMax - rsinterface.height - rsinterface.scrollPosition;<br>
rsinterface.scrollPosition += j10;<br>
anInt1088 -= j10;<br>
}<br>
} else if(atInventoryInterfaceType != 0 &amp;&amp; atInventoryIndex == i3 &amp;&amp; atInventoryInterface == interfaceCache.id)<br>
updateSprite.drawSprite1(k5, j6);<br>
else<br>
updateSprite.drawSprite(k5, j6);<br>
if(updateSprite.anInt1444 == 33 || interfaceCache.invStackSizes[i3] != 1)<br>
{<br>
int k10 = interfaceCache.invStackSizes[i3];<br>
if(k10 &gt;= 1)<br>
smallText.method385(0xFFFF00, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);<br>
if(k10 &gt;= 100000)<br>
smallText.method385(0xFFFFFF, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);<br>
if(k10 &gt;= 10000000)<br>
smallText.method385(0x49E20E, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);</p>
<pre><code>										/*smallText.method385(0, intToKOrMil(k10), j6 + 10 + j7, k5 + 1 + k6);
										smallText.method385(0xffff00, intToKOrMil(k10), j6 + 9 + j7, k5 + k6);*/
									}
								}
							}
						} else if(interfaceCache.sprites != null &amp;&amp; i3 &lt; 20) {
							Sprite class30_sub2_sub1_sub1_1 = interfaceCache.sprites[i3];
							if(class30_sub2_sub1_sub1_1 != null)
								class30_sub2_sub1_sub1_1.drawSprite(k5, j6);
						}
						i3++;
					}
				}
			} else if(interfaceCache.type == 3) {
				boolean flag = false;
				if(anInt1039 == interfaceCache.id || anInt1048 == interfaceCache.id || anInt1026 == interfaceCache.id)
					flag = true;
				int j3;
				if(interfaceIsSelected(interfaceCache)) {
					j3 = interfaceCache.anInt219;
					if(flag &amp;&amp; interfaceCache.anInt239 != 0)
						j3 = interfaceCache.anInt239;
				} else {
					j3 = interfaceCache.textColor;
					if(flag &amp;&amp; interfaceCache.anInt216 != 0)
						j3 = interfaceCache.anInt216;
				}
				if(interfaceCache.aByte254 == 0) {
					if(interfaceCache.aBoolean227)
						DrawingArea.drawPixels(interfaceCache.height, l2, k2, j3, interfaceCache.width);
					else
						DrawingArea.fillPixels(k2, interfaceCache.width, interfaceCache.height, j3, l2);
				} else if(interfaceCache.aBoolean227)
					DrawingArea.method335(j3, l2, interfaceCache.width, interfaceCache.height, 256 - (interfaceCache.aByte254 &amp; 0xff), k2);
				else
					DrawingArea.method338(l2, interfaceCache.height, 256 - (interfaceCache.aByte254 &amp; 0xff), j3, interfaceCache.width, k2);
			} else if(interfaceCache.type == 4) {
				TextDrawingArea textDrawingArea = interfaceCache.textDrawingAreas;
				String s = interfaceCache.message;
				boolean flag1 = false;
				if(anInt1039 == interfaceCache.id || anInt1048 == interfaceCache.id || anInt1026 == interfaceCache.id)
					flag1 = true;
				int i4;
				if(interfaceIsSelected(interfaceCache)) {
					i4 = interfaceCache.anInt219;
					if(flag1 &amp;&amp; interfaceCache.anInt239 != 0)
						i4 = interfaceCache.anInt239;
					if(interfaceCache.enabledText.length() &gt; 0)
						s = interfaceCache.enabledText;
				} else {
					i4 = interfaceCache.textColor;
					if(flag1 &amp;&amp; interfaceCache.anInt216 != 0)
						i4 = interfaceCache.anInt216;
				}
				if(interfaceCache.atActionType == 6 &amp;&amp; aBoolean1149) {
					s = "Please wait...";
					i4 = interfaceCache.textColor;
				}
				if(DrawingArea.width == 516) {
					if(i4 == 0xffff00)
						i4 = 255;
					if(i4 == 49152)
						i4 = 0xffffff;
				}
				if((interfaceCache.parentID == 1151) || (interfaceCache.parentID == 12855)) {
					switch (i4) {
						case 16773120: i4 = 0xFE981F; break;
						case 7040819: i4 = 0xAF6A1A; break;
					}
				}
				for(int l6 = l2 + textDrawingArea.anInt1497; s.length() &gt; 0; l6 += textDrawingArea.anInt1497)
				{
					if(s.indexOf("%") != -1)
					{
						do
						{
							int k7 = s.indexOf("%1");
							if(k7 == -1)
								break;
							if(interfaceCache.id &lt; 4000 || interfaceCache.id &gt; 5000 &amp;&amp; interfaceCache.id !=13921 &amp;&amp; interfaceCache.id !=13922 &amp;&amp; interfaceCache.id !=12171 &amp;&amp; interfaceCache.id !=12172)
								s = s.substring(0, k7) + methodR(extractInterfaceValues(interfaceCache, 0)) + s.substring(k7 + 2);
							else
								s = s.substring(0, k7) + interfaceIntToString(extractInterfaceValues(interfaceCache, 0)) + s.substring(k7 + 2);
						} while(true);
						do
						{
							int l7 = s.indexOf("%2");
							if(l7 == -1)
								break;
							s = s.substring(0, l7) + interfaceIntToString(extractInterfaceValues(interfaceCache, 1)) + s.substring(l7 + 2);
						} while(true);
						do
						{
							int i8 = s.indexOf("%3");
							if(i8 == -1)
								break;
							s = s.substring(0, i8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 2)) + s.substring(i8 + 2);
						} while(true);
						do
						{
							int j8 = s.indexOf("%4");
							if(j8 == -1)
								break;
							s = s.substring(0, j8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 3)) + s.substring(j8 + 2);
						} while(true);
						do
						{
							int k8 = s.indexOf("%5");
							if(k8 == -1)
								break;
							s = s.substring(0, k8) + interfaceIntToString(extractInterfaceValues(interfaceCache, 4)) + s.substring(k8 + 2);
						} while(true);
					}
					int l8 = s.indexOf("\\n");
					String s1;
					if(l8 != -1)
					{
						s1 = s.substring(0, l8);
						s = s.substring(l8 + 2);
					} else
					{
						s1 = s;
						s = "";
					}
					if(interfaceCache.centerText)
						textDrawingArea.method382(i4, k2 + interfaceCache.width / 2, s1, l6, interfaceCache.textShadow);
					else
						textDrawingArea.method389(interfaceCache.textShadow, k2, i4, s1, l6);
				}
			} else if(interfaceCache.type == 5) {
				//whats this?

				Sprite sprite;					
				if(interfaceIsSelected(interfaceCache))
                    sprite = interfaceCache.onSprite;
                else
                    sprite = interfaceCache.offSprite;
				if(spellSelected == 1 &amp;&amp; interfaceCache.id == spellID &amp;&amp; spellID != 0 &amp;&amp; sprite != null) { 
					sprite.drawSprite(k2, l2, 0xffffff);
				} else {
					if(Autocast &amp;&amp; interfaceCache.id == autocastId)
					magicAuto.drawSprite(k2-3, l2-3);
					if (sprite != null)
						if(interfaceCache.drawsTransparent) {
							sprite.drawTransparent(k2, l2, 0xffffff);
						} else {
							sprite.drawSprite(k2, l2);
						}
				}
				
                if(sprite != null)
                    sprite.drawSprite(k2, l2);
			} else if(interfaceCache.type == 6) {
				int k3 = Texture.textureInt1;
				int j4 = Texture.textureInt2;
				Texture.textureInt1 = k2 + interfaceCache.width / 2;
				Texture.textureInt2 = l2 + interfaceCache.height / 2;
				int i5 = Texture.anIntArray1470[interfaceCache.modelRotation1] * interfaceCache.modelZoom &gt;&gt; 16;
				int l5 = Texture.anIntArray1471[interfaceCache.modelRotation1] * interfaceCache.modelZoom &gt;&gt; 16;
				boolean flag2 = interfaceIsSelected(interfaceCache);
				int i7;
				if(flag2)
					i7 = interfaceCache.anInt258;
				else
					i7 = interfaceCache.anInt257;
				Model model;
				if(i7 == -1) {
					model = interfaceCache.method209(-1, -1, flag2);
				} else {
					Animation animation = Animation.anims[i7];
					model = interfaceCache.method209(animation.anIntArray354[interfaceCache.anInt246], animation.anIntArray353[interfaceCache.anInt246], flag2);
				}
				if(model != null)
					model.method482(interfaceCache.modelRotation2, 0, interfaceCache.modelRotation1, 0, i5, l5);
				Texture.textureInt1 = k3;
				Texture.textureInt2 = j4;
			} else if(interfaceCache.type == 7) {
				TextDrawingArea textDrawingArea_1 = interfaceCache.textDrawingAreas;
				int k4 = 0;
				for(int j5 = 0; j5 &lt; interfaceCache.height; j5++) {
					for(int i6 = 0; i6 &lt; interfaceCache.width; i6++) {
						if(interfaceCache.inv[k4] &gt; 0) {
							ItemDef itemDef = ItemDef.forID(interfaceCache.inv[k4] - 1);
							String s2 = itemDef.name;
							if(itemDef.stackable || interfaceCache.invStackSizes[k4] != 1)
								s2 = s2 + " x" + intToKOrMilLongName(interfaceCache.invStackSizes[k4]);
							int i9 = k2 + i6 * (115 + interfaceCache.invSpritePadX);
							int k9 = l2 + j5 * (12 + interfaceCache.invSpritePadY);
							if(interfaceCache.centerText)
								textDrawingArea_1.method382(interfaceCache.textColor, i9 + interfaceCache.width / 2, s2, k9, interfaceCache.textShadow);
							else
								textDrawingArea_1.method389(interfaceCache.textShadow, i9, interfaceCache.textColor, s2, k9);
						}
						k4++;
					}
				}
			} if (interfaceCache.type == 8 &amp;&amp; (anInt1500 == interfaceCache.id || anInt1044 == interfaceCache.id || anInt1129 == interfaceCache.id) &amp;&amp; anInt1501 == 100) {
                
				int boxWidth = 0;
                int boxHeight = 0;
                TextDrawingArea textDrawingArea_2 = aTextDrawingArea_1271;
                for (String s1 = interfaceCache.message; s1.length() &gt; 0;) {
                    int l7 = s1.indexOf("\\n");
                    String s4;
                    if (l7 != -1) {
                        s4 = s1.substring(0, l7);
                        s1 = s1.substring(l7 + 2);
                    } else {
                        s4 = s1;
                        s1 = "";
                    }
                    int j10 = textDrawingArea_2.getTextWidth(s4);
                    if (j10 &gt; boxWidth) {
                        boxWidth = j10;
                    }
                    boxHeight += textDrawingArea_2.anInt1497 + 1;
                }
                boxWidth += 6;
                boxHeight += 7;
                int xPos = (k2 + interfaceCache.width) - 5 - boxWidth;
                int yPos = l2 + interfaceCache.height + 5;
                if (xPos &lt; k2 + 5) {
                    xPos = k2 + 5;
                }
                if (xPos + boxWidth &gt; k + rsinterface.width) {
                    xPos = (k + rsinterface.width) - boxWidth;
                }
                if (yPos + boxHeight &gt; l + rsinterface.height) {
                    yPos = (l + rsinterface.height) - boxHeight;
                }
				if(interfaceCache.inventoryhover){
					if(xPos + boxWidth+k &gt; 249){
						xPos = 251 - boxWidth-k;
					}
					if(yPos+boxHeight+l &gt;261 ){
						yPos = 245 - boxHeight - l;
					}
				}
				switch (interfaceCache.id) {
				case 9217:
				case 9220:
				case 9223:
				case 9226:
				case 9229:
				case 9232:
				case 9235:
				case 9238:
					xPos -= 80;
					break;
				case 9239:
					yPos -= 100;
					break;
				}
                DrawingArea.method336(boxHeight, yPos, xPos, 0xFFFFA0, boxWidth);
                DrawingArea.fillPixels(xPos, boxWidth, boxHeight, 0, yPos);
                String s2 = interfaceCache.message;
                for (int j11 = yPos + textDrawingArea_2.anInt1497 + 2; s2.length() &gt; 0; j11 += textDrawingArea_2.anInt1497 + 1) {//anInt1497
                    int l11 = s2.indexOf("\\n");
                    String s5;
                    if (l11 != -1) {
                        s5 = s2.substring(0, l11);
                        s2 = s2.substring(l11 + 2);
                    } else {
                        s5 = s2;
                        s2 = "";
                    }
                    textDrawingArea_2.method389(false, xPos + 3, 0, s5, j11);
                }
	//}
	DrawingArea.setDrawingArea(l1, i1, k1, j1);
}
			if(interfaceCache.type == 12) {
           					Sprite sprite;
            			if(interfaceIsSelected(interfaceCache))
               	 			sprite = interfaceCache.onSprite;
            			else
               	 			sprite = interfaceCache.offSprite;
           	 			if(sprite != null)
               	 			sprite.drawAdvancedSprite(k2, l2);
            		} else if (interfaceCache.type == 9) {
				drawHoverBox(k2, l2, interfaceCache.popupString);
			}
	}
	DrawingArea.setDrawingArea(l1, i1, k1, j1);
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/adding-quick-prayers/551041/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/adding-quick-prayers/551041/1</link>
        <pubDate>Sat, 11 Apr 2015 21:58:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551041-1</guid>
        <source url="https://forum.moparisthebest.com/t/adding-quick-prayers/551041.rss">Adding quick prayers</source>
      </item>
  </channel>
</rss>
