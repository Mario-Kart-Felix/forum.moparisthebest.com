<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Chat client/server help</title>
    <link>https://forum.moparisthebest.com/t/chat-client-server-help/200325</link>
    <description>ok i made a client/server out of java and made it have multiple threads (because if its a single thread then the person would have to wait for another and it gets annoying) heres my client/server

client:
[code]
/*
Author:Blitz_9100
Date:4/16/08
Comments:Don&#39;t leach or else :P
Client ~ sends Data to the server and it accepts all outputs~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatClient
{

	public static void main(String[] Cmd)
	{
	LoginClient log = new LoginClient();
	log.login();
	}

}

class LoginClient extends Thread
{
	protected static InetAddress host;
	protected static final int PORT = 5054;
	protected static Socket link = null;
	public void login()
	{
		System.out.print(&quot;Attempting to Login...&quot;);
		try
		{
			host = InetAddress.getLocalHost();
		}
		catch(Exception E)
		{
		}
		run();
	}
	public void run()
	{
		try
		{
			link = new Socket(host,PORT);
			MessageClient msg = new MessageClient();
			System.out.print(&quot;Logged In!\n&quot;);
			msg.run();
		}
		catch(Exception E)
		{
			System.out.println(&quot;Host Not Found!&quot;);
			System.exit(1);
		}

	}

}

class MessageClient extends Thread
{

	public void run()
	{
		try
		{
			Scanner networkInput = new Scanner(LoginClient.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginClient.link.getOutputStream(),true);
			Scanner userEntry = new Scanner(System.in);
			String message = &quot;&quot;, response;
			do
			{
				System.out.print(&quot;Please Enter Message:&quot;);
				message = userEntry.nextLine();
				output.println(message);
				response = networkInput.nextLine();
				System.out.println(response);
			}
			while(!message.equals(&quot;***ShutDown***&quot;));
		}
		catch(Exception E)
		{
			E.printStackTrace();
		}
		finally
		{
			try
			{
			System.out.println(&quot;Closing Connection&quot;);
			LoginClient.link.close();
			}
			catch(Exception E)
			{
			System.out.println(&quot;Unable To Disconnect!&quot;);
			System.exit(1);
			}
		}
	}

}

[/code]

Server:
[code]
/*
Author:Blitz_9100
Date:4/16/08
Comments:Don&#39;t leach or else :P
Server ~ Handles incoming data and reoutputs it ~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer
{
	public static void main(String[] Cmd)
	{
	LoginServer Serv = new LoginServer();
	Serv.openSocket();
	}

}

class LoginServer extends Thread
{
	protected static ServerSocket serverSocket;
	protected static final int PORT = 5054;
	protected static Socket link = null;

	public void openSocket()
	{
		System.out.print(&quot;Trying To Open Socket..&quot;);
		try
		{
		serverSocket = new ServerSocket(PORT);
		System.out.print(&quot;Opened!\n&quot;);
		}
		catch(Exception E)
		{
			System.out.println(&quot;Couldn&#39;t Open Socket&quot;);
			System.exit(1);
		}
		do
		{
			run();
		}
		while(true);
	}

	public void run()
	{

		try
		{
		link = serverSocket.accept();
		MessageServer Sent = new MessageServer();
		Sent.start();
		}
		catch(Exception E)
		{

		}
	}

}

class MessageServer extends Thread
{

	public void run()
	{
		try
		{
			Scanner input = new Scanner(LoginServer.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginServer.link.getOutputStream(),true);
			String message = input.nextLine();
			int messageNumber = 0;
			while(!message.equals(&quot;***ShutDown***&quot;))
			{
				messageNumber++;
				System.out.println(messageNumber+&quot;:&quot;+message);
				output.println(&quot;:&quot;+message);
				messageNumber++;
				message = input.nextLine();
			}
			output.println(&quot;ShuttingDown&quot;);
			input.close();
			output.close();
		}
		catch(Exception E)
		{
			System.out.println(&quot;Error!&quot;);
		}
		finally
		{
			try
			{
				System.out.println(&quot;Closing Connection&quot;);
				LoginServer.link.close();
			}
			catch(Exception E)
			{
				System.out.println(&quot;Unable to Disconnect!&quot;);
				System.exit(1);
			}
		}
	}

}
[/code]
yes i know my programming is a little messy but please work with me here,Alright i figured my problem out i need to have the client connect to the thread could someone help me figure this out?</description>
    
    <lastBuildDate>Wed, 16 Apr 2008 18:00:42 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/chat-client-server-help/200325.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Chat client/server help</title>
        <dc:creator><![CDATA[@k00dr k00dr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/k00dr">@k00dr</a> wrote:</p>
          <blockquote>
              <p>You’re misusing Thread.<br>
A new thread begins execution when you call start(), implementing Thread and calling run() isn’t going to start a new thread.</p>
<p>Here’s an example for you:</p>
<pre><code class="lang-auto">public final class ThreadTest extends Thread {

  public final static void main(String[] argv) {

    System.out.print("Main thread is: ");
    Thread thisThread = Thread.currentThread();
    System.out.println(thisThread.getName());

    Thread newThread = new ThreadTest("Our own thread");

    System.out.print("When we run(), the execution happens in thread: ");
    newThread.run();

    System.out.print("When we start(), the execution happens in thread: ");
    newThread.start();
  }

  private ThreadTest(String name) {
    super(name);
  }

  public final void run() {
    Thread thisThread = Thread.currentThread();
    System.out.println(thisThread.getName());
  }

}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/chat-client-server-help/200325/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/chat-client-server-help/200325/3</link>
        <pubDate>Wed, 16 Apr 2008 18:00:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-200325-3</guid>
        <source url="https://forum.moparisthebest.com/t/chat-client-server-help/200325.rss">Chat client/server help</source>
      </item>
      <item>
        <title>Chat client/server help</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>/clean’d</p>
<p>Client:</p>
<pre><code class="lang-auto">/*
Author:Blitz_9100
Date:4/16/08
Comments:Don't leach or else :P
Client ~ sends Data to the server and it accepts all outputs~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatClient {
	public static void main(String[] Cmd){
		LoginClient log = new LoginClient();
		log.login();
	}
}

class LoginClient extends Thread {
	protected static InetAddress host;
	protected static final int PORT = 5054;
	protected static Socket link = null;
	public void login(){
		System.out.print("Attempting to Login...");
		try {
			host = InetAddress.getLocalHost();
		}
		catch(Exception E){
		}
		run();
	}
	public void run(){
		try {
			link = new Socket(host,PORT);
			MessageClient msg = new MessageClient();
			System.out.print("Logged In!\n");
			msg.run();
		}
		catch(Exception E){
			System.out.println("Host Not Found!");
			System.exit(1);
		}
	}
}

class MessageClient extends Thread {
	public void run(){
		try {
			Scanner networkInput = new Scanner(LoginClient.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginClient.link.getOutputStream(),true);
			Scanner userEntry = new Scanner(System.in);
			String message = "", response;
			do {
				System.out.print("Please Enter Message:");
				message = userEntry.nextLine();
				output.println(message);
				response = networkInput.nextLine();
				System.out.println(response);
			}
			while(!message.equals("***ShutDown***"));
		}
		catch(Exception E){
			E.printStackTrace();
		}
		finally {
			try {
				System.out.println("Closing Connection");
				LoginClient.link.close();
			}
			catch(Exception E){
				System.out.println("Unable To Disconnect!");
				System.exit(1);
			}
		}
	}
}</code></pre>
<p>Server:</p>
<pre><code class="lang-auto">/*
Author:Blitz_9100
Date:4/16/08
Comments:Don't leach or else :P
Server ~ Handles incoming data and reoutputs it ~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer {
	public static void main(String[] Cmd){
		LoginServer Serv = new LoginServer();
		Serv.openSocket();
	}
}

class LoginServer extends Thread {
	protected static ServerSocket serverSocket;
	protected static final int PORT = 5054;
	protected static Socket link = null;

	public void openSocket(){
		System.out.print("Trying To Open Socket..");
		try {
			serverSocket = new ServerSocket(PORT);
			System.out.print("Opened!\n");
		}
		catch(Exception E){
			System.out.println("Couldn't Open Socket");
			System.exit(1);
		}
		do {
			run();
		}
		while(true);
	}

	public void run(){
		try {
			link = serverSocket.accept();
			MessageServer Sent = new MessageServer();
			Sent.start();
		}
		catch(Exception E){}
	}
}

class MessageServer extends Thread {
	public void run(){
		try {
			Scanner input = new Scanner(LoginServer.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginServer.link.getOutputStream(),true);
			String message = input.nextLine();
			int messageNumber = 0;
			while(!message.equals("***ShutDown***")){
				messageNumber++;
				System.out.println(messageNumber+":"+message);
				output.println(":"+message);
				messageNumber++;
				message = input.nextLine();
			}
			output.println("ShuttingDown");
			input.close();
			output.close();
		}
		catch(Exception E){
			System.out.println("Error!");
		}
		finally {
			try {
				System.out.println("Closing Connection");
				LoginServer.link.close();
			}
			catch(Exception E){
				System.out.println("Unable to Disconnect!");
				System.exit(1);
			}
		}
	}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/chat-client-server-help/200325/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/chat-client-server-help/200325/2</link>
        <pubDate>Wed, 16 Apr 2008 12:34:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-200325-2</guid>
        <source url="https://forum.moparisthebest.com/t/chat-client-server-help/200325.rss">Chat client/server help</source>
      </item>
      <item>
        <title>Chat client/server help</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>ok i made a client/server out of java and made it have multiple threads (because if its a single thread then the person would have to wait for another and it gets annoying) heres my client/server</p>
<p>client:</p>
<pre><code class="lang-auto">/*
Author:Blitz_9100
Date:4/16/08
Comments:Don't leach or else :P
Client ~ sends Data to the server and it accepts all outputs~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatClient
{

	public static void main(String[] Cmd)
	{
	LoginClient log = new LoginClient();
	log.login();
	}

}

class LoginClient extends Thread
{
	protected static InetAddress host;
	protected static final int PORT = 5054;
	protected static Socket link = null;
	public void login()
	{
		System.out.print("Attempting to Login...");
		try
		{
			host = InetAddress.getLocalHost();
		}
		catch(Exception E)
		{
		}
		run();
	}
	public void run()
	{
		try
		{
			link = new Socket(host,PORT);
			MessageClient msg = new MessageClient();
			System.out.print("Logged In!\n");
			msg.run();
		}
		catch(Exception E)
		{
			System.out.println("Host Not Found!");
			System.exit(1);
		}

	}

}

class MessageClient extends Thread
{

	public void run()
	{
		try
		{
			Scanner networkInput = new Scanner(LoginClient.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginClient.link.getOutputStream(),true);
			Scanner userEntry = new Scanner(System.in);
			String message = "", response;
			do
			{
				System.out.print("Please Enter Message:");
				message = userEntry.nextLine();
				output.println(message);
				response = networkInput.nextLine();
				System.out.println(response);
			}
			while(!message.equals("***ShutDown***"));
		}
		catch(Exception E)
		{
			E.printStackTrace();
		}
		finally
		{
			try
			{
			System.out.println("Closing Connection");
			LoginClient.link.close();
			}
			catch(Exception E)
			{
			System.out.println("Unable To Disconnect!");
			System.exit(1);
			}
		}
	}

}
</code></pre>
<p>Server:</p>
<pre><code class="lang-auto">/*
Author:Blitz_9100
Date:4/16/08
Comments:Don't leach or else :P
Server ~ Handles incoming data and reoutputs it ~
*/
import java.io.*;
import java.net.*;
import java.util.*;

public class ChatServer
{
	public static void main(String[] Cmd)
	{
	LoginServer Serv = new LoginServer();
	Serv.openSocket();
	}

}

class LoginServer extends Thread
{
	protected static ServerSocket serverSocket;
	protected static final int PORT = 5054;
	protected static Socket link = null;

	public void openSocket()
	{
		System.out.print("Trying To Open Socket..");
		try
		{
		serverSocket = new ServerSocket(PORT);
		System.out.print("Opened!\n");
		}
		catch(Exception E)
		{
			System.out.println("Couldn't Open Socket");
			System.exit(1);
		}
		do
		{
			run();
		}
		while(true);
	}

	public void run()
	{

		try
		{
		link = serverSocket.accept();
		MessageServer Sent = new MessageServer();
		Sent.start();
		}
		catch(Exception E)
		{

		}
	}

}

class MessageServer extends Thread
{

	public void run()
	{
		try
		{
			Scanner input = new Scanner(LoginServer.link.getInputStream());
			PrintWriter output = new PrintWriter(LoginServer.link.getOutputStream(),true);
			String message = input.nextLine();
			int messageNumber = 0;
			while(!message.equals("***ShutDown***"))
			{
				messageNumber++;
				System.out.println(messageNumber+":"+message);
				output.println(":"+message);
				messageNumber++;
				message = input.nextLine();
			}
			output.println("ShuttingDown");
			input.close();
			output.close();
		}
		catch(Exception E)
		{
			System.out.println("Error!");
		}
		finally
		{
			try
			{
				System.out.println("Closing Connection");
				LoginServer.link.close();
			}
			catch(Exception E)
			{
				System.out.println("Unable to Disconnect!");
				System.exit(1);
			}
		}
	}

}</code></pre>
<p>yes i know my programming is a little messy but please work with me here,Alright i figured my problem out i need to have the client connect to the thread could someone help me figure this out?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/chat-client-server-help/200325/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/chat-client-server-help/200325/1</link>
        <pubDate>Wed, 16 Apr 2008 10:25:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-200325-1</guid>
        <source url="https://forum.moparisthebest.com/t/chat-client-server-help/200325.rss">Chat client/server help</source>
      </item>
  </channel>
</rss>
