<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ClientScript2 Info</title>
    <link>https://forum.moparisthebest.com/t/clientscript2-info/264041</link>
    <description>This is from the RuneShiver Wikipedia Article i wrote

File Format

First the runtime loads the last two bytes of the file, which contain the footer length, after these bytes are read it seeks to the following position of the file

(file.length - 2) - (data_length + 12)

Then it reads the script footer

Script length in instructions - DWord;
Integer variable count - Word
String variable count -Word
Integer Argument Count - Word
String Argument Count - Word

And a resource table:

Resource table length in nodelist&#39;s - Byte
For each nodelist : 
    List length in entry&#39;s - Word
    For each node :
        Key - DWord
        Value - DWord

Then it seeks to the file start and reads the script name as a null terminated string, after this the opcode&#39;s and operands come : 

For each instruction:
     Opcode - Word
     For opcode 3:
         Operand - String
     For opcode&#39;s 21 , 38 , 39 and opcode&#39;s &gt; 100
         Operand - Word
     For all other opcode&#39;s
         Operand - Byte

Script Architecture

The ClientScript2 system uses a stack and a variable pool for storage.
There are two stacks :
* The integer stack
* The string stack

There are also three variable pools:

* The integer variable pool - Used for arguments and local variables , size set in footer
* The string variable pool - Used for arguments and local variables , size set in footer
* The integer array pool - Used for arrays with a length up to 5000 , fixed-size : 5
The basic instruction set:
* 0 - Push Operand onto Integer Stack
* 1 - Push Client configuration onto Integer Stack
* 2 - Pop a value from the Integer Stack to the client configuration array
* 3 - Push String Operand onto String Stack
* NO OPCODES EXIST IN RUNESCAPE #508 HERE
* 6 - Jump to position given as operand
* 7 - Branch if not equal - Stack values , operand jump
* 8 - Branch if equal - Stack values , operand jump
* 9 - Branch if smaller than - Stack values , operand jump
* 10 - Branch if bigger than - Stack values , operand jump
* 21 - Return , stops script execution or if script is called by gosub, go back to call point
* 25 - Push Varbit value
* 27 - Pop Varbit value
* 31 - Branch if smaller than or equal - Stack values , operand jump
* 32 - Branch if bigger than or equal - Stack values , operand jump
* 33 - Push Integer Variable onto Integer Stack
* 34 - Pop Integer Variable off the Integer Stack
* 35 - Push String Variable onto the String Stack
* 36 - Pop String Variable off the String Stack
* 37 - Merge String Stack from stSC to stSC-operand
* 38 - Decrease StackCounter(SC) by one
* 39 - Decrease String StackCounter(stSC) by one 
* 40 - Gosub - Excecutes the script given as operand, the arguments of the script are popped from the stacks
* 42 - Push secondary client configuration onto integer stack
* 43 - Pop secondary client configuration off integer stack
* 44 - Define array - Defines the array given in the first 16 bytes of the operand, and pops the size from the integer stack, also this sets all array values to -1 or zero depending on the second 16 bytes of the operand
* 45 - Push array value of the array given as operand and slot from the stack onto the integer stack
* 46 - Pop array value of the array given as operand and slot from the stack off the integer stack
* 47 - Push string client configuration value onto string stack
* 48 - Pop string client configuration value off string stack
* 51 - Jump to value of nodemap given as operand, and the entry of it given as stack value

Advanced Instruction Set

These are the instructions to manipulate interfaces and players , there are around 3000 instructions under this category</description>
    
    <lastBuildDate>Sun, 01 Mar 2009 01:14:40 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/clientscript2-info/264041.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ClientScript2 Info</title>
        <dc:creator><![CDATA[@CheatoX CheatoX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheatox">@CheatoX</a> wrote:</p>
          <blockquote>
              <p>very interesting stuff!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clientscript2-info/264041/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clientscript2-info/264041/4</link>
        <pubDate>Sun, 01 Mar 2009 01:14:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-264041-4</guid>
        <source url="https://forum.moparisthebest.com/t/clientscript2-info/264041.rss">ClientScript2 Info</source>
      </item>
      <item>
        <title>ClientScript2 Info</title>
        <dc:creator><![CDATA[@Kosaki Kosaki]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kosaki">@Kosaki</a> wrote:</p>
          <blockquote>
              <p>Interesting <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
Good work!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clientscript2-info/264041/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clientscript2-info/264041/3</link>
        <pubDate>Wed, 25 Feb 2009 18:28:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-264041-3</guid>
        <source url="https://forum.moparisthebest.com/t/clientscript2-info/264041.rss">ClientScript2 Info</source>
      </item>
      <item>
        <title>ClientScript2 Info</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>Pretty interesting stuff there. I’m too lazy to analyze the clientscript stuff myself (lack of motivation) so great work!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clientscript2-info/264041/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clientscript2-info/264041/2</link>
        <pubDate>Wed, 25 Feb 2009 18:23:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-264041-2</guid>
        <source url="https://forum.moparisthebest.com/t/clientscript2-info/264041.rss">ClientScript2 Info</source>
      </item>
      <item>
        <title>ClientScript2 Info</title>
        <dc:creator><![CDATA[@peterbjornx peterbjornx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/peterbjornx">@peterbjornx</a> wrote:</p>
          <blockquote>
              <p>This is from the RuneShiver Wikipedia Article i wrote</p>
<p>File Format</p>
<p>First the runtime loads the last two bytes of the file, which contain the footer length, after these bytes are read it seeks to the following position of the file</p>
<p>(file.length - 2) - (data_length + 12)</p>
<p>Then it reads the script footer</p>
<p>Script length in instructions - DWord;<br>
Integer variable count - Word<br>
String variable count -Word<br>
Integer Argument Count - Word<br>
String Argument Count - Word</p>
<p>And a resource table:</p>
<p>Resource table length in nodelist’s - Byte<br>
For each nodelist :<br>
List length in entry’s - Word<br>
For each node :<br>
Key - DWord<br>
Value - DWord</p>
<p>Then it seeks to the file start and reads the script name as a null terminated string, after this the opcode’s and operands come :</p>
<p>For each instruction:<br>
Opcode - Word<br>
For opcode 3:<br>
Operand - String<br>
For opcode’s 21 , 38 , 39 and opcode’s &gt; 100<br>
Operand - Word<br>
For all other opcode’s<br>
Operand - Byte</p>
<p>Script Architecture</p>
<p>The ClientScript2 system uses a stack and a variable pool for storage.<br>
There are two stacks :</p>
<ul>
<li>The integer stack</li>
<li>The string stack</li>
</ul>
<p>There are also three variable pools:</p>
<ul>
<li>The integer variable pool - Used for arguments and local variables , size set in footer</li>
<li>The string variable pool - Used for arguments and local variables , size set in footer</li>
<li>The integer array pool - Used for arrays with a length up to 5000 , fixed-size : 5<br>
The basic instruction set:</li>
<li>0 - Push Operand onto Integer Stack</li>
<li>1 - Push Client configuration onto Integer Stack</li>
<li>2 - Pop a value from the Integer Stack to the client configuration array</li>
<li>3 - Push String Operand onto String Stack</li>
<li>NO OPCODES EXIST IN RUNESCAPE <span class="hashtag">#508</span> HERE</li>
<li>6 - Jump to position given as operand</li>
<li>7 - Branch if not equal - Stack values , operand jump</li>
<li>8 - Branch if equal - Stack values , operand jump</li>
<li>9 - Branch if smaller than - Stack values , operand jump</li>
<li>10 - Branch if bigger than - Stack values , operand jump</li>
<li>21 - Return , stops script execution or if script is called by gosub, go back to call point</li>
<li>25 - Push Varbit value</li>
<li>27 - Pop Varbit value</li>
<li>31 - Branch if smaller than or equal - Stack values , operand jump</li>
<li>32 - Branch if bigger than or equal - Stack values , operand jump</li>
<li>33 - Push Integer Variable onto Integer Stack</li>
<li>34 - Pop Integer Variable off the Integer Stack</li>
<li>35 - Push String Variable onto the String Stack</li>
<li>36 - Pop String Variable off the String Stack</li>
<li>37 - Merge String Stack from stSC to stSC-operand</li>
<li>38 - Decrease StackCounter(SC) by one</li>
<li>39 - Decrease String StackCounter(stSC) by one</li>
<li>40 - Gosub - Excecutes the script given as operand, the arguments of the script are popped from the stacks</li>
<li>42 - Push secondary client configuration onto integer stack</li>
<li>43 - Pop secondary client configuration off integer stack</li>
<li>44 - Define array - Defines the array given in the first 16 bytes of the operand, and pops the size from the integer stack, also this sets all array values to -1 or zero depending on the second 16 bytes of the operand</li>
<li>45 - Push array value of the array given as operand and slot from the stack onto the integer stack</li>
<li>46 - Pop array value of the array given as operand and slot from the stack off the integer stack</li>
<li>47 - Push string client configuration value onto string stack</li>
<li>48 - Pop string client configuration value off string stack</li>
<li>51 - Jump to value of nodemap given as operand, and the entry of it given as stack value</li>
</ul>
<p>Advanced Instruction Set</p>
<p>These are the instructions to manipulate interfaces and players , there are around 3000 instructions under this category</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clientscript2-info/264041/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clientscript2-info/264041/1</link>
        <pubDate>Mon, 23 Feb 2009 19:27:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-264041-1</guid>
        <source url="https://forum.moparisthebest.com/t/clientscript2-info/264041.rss">ClientScript2 Info</source>
      </item>
  </channel>
</rss>
