<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rics webclient prob</title>
    <link>https://forum.moparisthebest.com/t/rics-webclient-prob/278346</link>
    <description>im getting this error,after it downloads the cache.
[HTML]java.io.FileNotFoundException: C:\Elite_file_store_32\Elite_file_store_32\code.d
at (The system cannot find the path specified)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at client.unZipFile(client.java:3362)
        at client.downloadcache(client.java:3326)
        at client.method67(client.java:3398)
        at client.method6(client.java:6856)
        at Applet_Sub1.run(Applet_Sub1.java:47)
        at client.run(client.java:4481)
        at java.lang.Thread.run(Unknown Source)[/HTML]
my signlink.java code is
[CODE]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;
import javax.sound.midi.*;
import javax.sound.sampled.*;

public final class signlink
    implements Runnable
{

    public static final void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }


	enum Position {
		LEFT, RIGHT, NORMAL
	};

private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb
private Position curPosition;
public static boolean music = true;
 
    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
//cache_idx[4] = new RandomAccessFile(&quot;C:\\filll\\aam.dat&quot;,&quot;rw&quot;);
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {

                    String wave = s + savereq;
                    waveplay = false;




System.out.println(&quot;WAVE &quot;+wave);
		AudioInputStream audioInputStream = null;
		try {
			audioInputStream = AudioSystem.getAudioInputStream(new File(wave/*soundFile*/));
		} catch (UnsupportedAudioFileException e1) {
			e1.printStackTrace();
			return;
		} catch (IOException e1) {
			e1.printStackTrace();
			return;
		}
 
		AudioFormat format = audioInputStream.getFormat();
		SourceDataLine auline = null;
		DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
 
		try {
			auline = (SourceDataLine) AudioSystem.getLine(info);
			auline.open(format);
		} catch (LineUnavailableException e) {
			e.printStackTrace();
			return;
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
 
		if (auline.isControlSupported(FloatControl.Type.PAN)) {
			FloatControl pan = (FloatControl) auline
					.getControl(FloatControl.Type.PAN);
			if (curPosition == Position.RIGHT)
				pan.setValue(1.0f);
			else if (curPosition == Position.LEFT)
				pan.setValue(-1.0f);
		} 
 
		auline.start();
		int nBytesRead = 0;
		byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];
 
		try {
			while (nBytesRead != -1) {
				nBytesRead = audioInputStream.read(abData, 0, abData.length);
				if (nBytesRead &gt;= 0)
					auline.write(abData, 0, nBytesRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
			return;
		} finally {
			auline.drain();
			auline.close();
		}
 
	
 


                }
                if(midiplay)
                {

                    midi = s + savereq;
                                try {
                                    //System.out.println(&quot;Play MIDI &quot; + midi);
                                    if (musicSr != null)
                                    {
                                        musicSr.stop();
                                        musicSr.close();
                                    }
                                    musicSr = null;
                                    musicS = null;
                                    
                                    File music = new File(midi);
                                    if(music.exists())
                                    {
                                        musicS = MidiSystem.getSequence(music);
                                    }
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                    
                    
                    midiplay = false;
                
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

public static Sequencer musicSr = null;
Sequence musicS = null;

    private static String findcachedir2()
    {
        return &quot;&quot;;
    }

    public static String findcachedirORIG()
    {
        String as[] = {
            &quot;./&quot;
        };
        //String as[] = {
        //    &quot;c:/windows/&quot;, &quot;c:/winnt/&quot;, &quot;d:/windows/&quot;, &quot;d:/winnt/&quot;, &quot;e:/windows/&quot;, &quot;e:/winnt/&quot;, &quot;f:/windows/&quot;, &quot;f:/winnt/&quot;, &quot;c:/&quot;, &quot;~/&quot;,
        //    &quot;/tmp/&quot;, &quot;&quot;, &quot;c:/rscache&quot;, &quot;/rscache&quot;
        //};
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = &quot;.file_store_&quot; + storeid;
        for(int i = 0; i &lt; as.length; i++)
            try
            {
                String s1 = as[i];
                if(s1.length() &gt; 0)
                {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }
     
        return null;
 
    }



 public static final String findcachedir()
{
String s;
String s1;
File file;
s = &quot;C:/Elite_file_store_32/&quot;;
s1 = &quot;&quot;;
file = new File((new StringBuilder()).append(s1).append(s).toString());
if(file.exists() || file.mkdir())
{
return (new StringBuilder()).append(s1).append(s).append(&quot;/&quot;).toString();
}
return null;
}

    private static int getuid(String s)
    {
        try
        {
            File file = new File(s + &quot;uid.dat&quot;);
            if(!file.exists() || file.length() &lt; 4L)
            {
                DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + &quot;uid.dat&quot;));
                dataoutputstream.writeInt((int)(Math.random() * 99999999D));
                dataoutputstream.close();
            }
        }
        catch(Exception _ex) { }
        try
        {
            DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + &quot;uid.dat&quot;));
            int i = datainputstream.readInt();
            datainputstream.close();
            return i + 1;
        }
        catch(Exception _ex)
        {
            return 0;
        }
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static  Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}[/CODE]</description>
    
    <lastBuildDate>Thu, 14 May 2009 10:09:47 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/rics-webclient-prob/278346.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rics webclient prob</title>
        <dc:creator><![CDATA[@macuser macuser]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/macuser">@macuser</a> wrote:</p>
          <blockquote>
              <p>im getting this error,after it downloads the cache.<br>
[HTML]java.io.FileNotFoundException: C:\Elite_file_store_32\Elite_file_store_32\code.d<br>
at (The system cannot find the path specified)<br>
at java.io.FileOutputStream.open(Native Method)<br>
at java.io.FileOutputStream.(Unknown Source)<br>
at java.io.FileOutputStream.(Unknown Source)<br>
at client.unZipFile(client.java:3362)<br>
at client.downloadcache(client.java:3326)<br>
at client.method67(client.java:3398)<br>
at client.method6(client.java:6856)<br>
at Applet_Sub1.run(Applet_Sub1.java:47)<br>
at client.run(client.java:4481)<br>
at java.lang.Thread.run(Unknown Source)[/HTML]<br>
my signlink.java code is</p>
<p>[CODE]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import javax.sound.midi.<em>;<br>
import javax.sound.sampled.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static final void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}


enum Position {
	LEFT, RIGHT, NORMAL
};
</code></pre>
<p>private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb<br>
private Position curPosition;<br>
public static boolean music = true;</p>
<pre><code>public void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
            file.delete();
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");
</code></pre>
<p>//cache_idx[4] = new RandomAccessFile(“C:\filll\aam.dat”,“rw”);<br>
}<br>
catch(Exception exception)<br>
{<br>
exception.printStackTrace();<br>
}<br>
for(int i = threadliveid; threadliveid == i;)<br>
{<br>
if(socketreq != 0)<br>
{<br>
try<br>
{<br>
socket = new Socket(socketip, socketreq);<br>
}<br>
catch(Exception _ex)<br>
{<br>
socket = null;<br>
}<br>
socketreq = 0;<br>
} else<br>
if(threadreq != null)<br>
{<br>
Thread thread = new Thread(threadreq);<br>
thread.setDaemon(true);<br>
thread.start();<br>
thread.setPriority(threadreqpri);<br>
threadreq = null;<br>
} else<br>
if(dnsreq != null)<br>
{<br>
try<br>
{<br>
dns = InetAddress.getByName(dnsreq).getHostName();<br>
}<br>
catch(Exception _ex)<br>
{<br>
dns = “unknown”;<br>
}<br>
dnsreq = null;<br>
} else<br>
if(savereq != null)<br>
{<br>
if(savebuf != null)<br>
try<br>
{<br>
FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);<br>
fileoutputstream.write(savebuf, 0, savelen);<br>
fileoutputstream.close();<br>
}<br>
catch(Exception _ex) { }<br>
if(waveplay)<br>
{</p>
<pre><code>                String wave = s + savereq;
                waveplay = false;
</code></pre>
<p>System.out.println("WAVE "+wave);<br>
AudioInputStream audioInputStream = null;<br>
try {<br>
audioInputStream = AudioSystem.getAudioInputStream(new File(wave/<em>soundFile</em>/));<br>
} catch (UnsupportedAudioFileException e1) {<br>
e1.printStackTrace();<br>
return;<br>
} catch (IOException e1) {<br>
e1.printStackTrace();<br>
return;<br>
}</p>
<pre><code>	AudioFormat format = audioInputStream.getFormat();
	SourceDataLine auline = null;
	DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);

	try {
		auline = (SourceDataLine) AudioSystem.getLine(info);
		auline.open(format);
	} catch (LineUnavailableException e) {
		e.printStackTrace();
		return;
	} catch (Exception e) {
		e.printStackTrace();
		return;
	}

	if (auline.isControlSupported(FloatControl.Type.PAN)) {
		FloatControl pan = (FloatControl) auline
				.getControl(FloatControl.Type.PAN);
		if (curPosition == Position.RIGHT)
			pan.setValue(1.0f);
		else if (curPosition == Position.LEFT)
			pan.setValue(-1.0f);
	} 

	auline.start();
	int nBytesRead = 0;
	byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];

	try {
		while (nBytesRead != -1) {
			nBytesRead = audioInputStream.read(abData, 0, abData.length);
			if (nBytesRead &gt;= 0)
				auline.write(abData, 0, nBytesRead);
		}
	} catch (IOException e) {
		e.printStackTrace();
		return;
	} finally {
		auline.drain();
		auline.close();
	}





            }
            if(midiplay)
            {

                midi = s + savereq;
                            try {
                                //System.out.println("Play MIDI " + midi);
                                if (musicSr != null)
                                {
                                    musicSr.stop();
                                    musicSr.close();
                                }
                                musicSr = null;
                                musicS = null;
                                
                                File music = new File(midi);
                                if(music.exists())
                                {
                                    musicS = MidiSystem.getSequence(music);
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                
                
                midiplay = false;
            
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}
</code></pre>
<p>public static Sequencer musicSr = null;<br>
Sequence musicS = null;</p>
<pre><code>private static String findcachedir2()
{
    return "";
}

public static String findcachedirORIG()
{
    String as[] = {
        "./"
    };
    //String as[] = {
    //    "c:/windows/", "c:/winnt/", "d:/windows/", "d:/winnt/", "e:/windows/", "e:/winnt/", "f:/windows/", "f:/winnt/", "c:/", "~/",
    //    "/tmp/", "", "c:/rscache", "/rscache"
    //};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = ".file_store_" + storeid;
    for(int i = 0; i &lt; as.length; i++)
        try
        {
            String s1 = as[i];
            if(s1.length() &gt; 0)
            {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + "/";
        }
        catch(Exception _ex) { }
 
    return null;

}
</code></pre>
<p>public static final String findcachedir()<br>
{<br>
String s;<br>
String s1;<br>
File file;<br>
s = “C:/Elite_file_store_32/”;<br>
s1 = “”;<br>
file = new File((new StringBuilder()).append(s1).append(s).toString());<br>
if(file.exists() || file.mkdir())<br>
{<br>
return (new StringBuilder()).append(s1).append(s).append("/").toString();<br>
}<br>
return null;<br>
}</p>
<pre><code>private static int getuid(String s)
{
    try
    {
        File file = new File(s + "uid.dat");
        if(!file.exists() || file.length() &lt; 4L)
        {
            DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + "uid.dat"));
            dataoutputstream.writeInt((int)(Math.random() * 99999999D));
            dataoutputstream.close();
        }
    }
    catch(Exception _ex) { }
    try
    {
        DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + "uid.dat"));
        int i = datainputstream.readInt();
        datainputstream.close();
        return i + 1;
    }
    catch(Exception _ex)
    {
        return 0;
    }
}

public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static  Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rics-webclient-prob/278346/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rics-webclient-prob/278346/1</link>
        <pubDate>Thu, 14 May 2009 10:09:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-278346-1</guid>
        <source url="https://forum.moparisthebest.com/t/rics-webclient-prob/278346.rss">Rics webclient prob</source>
      </item>
  </channel>
</rss>
