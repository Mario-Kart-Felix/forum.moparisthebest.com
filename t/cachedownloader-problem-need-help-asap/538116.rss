<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cachedownloader problem! NEED HELP ASAP!</title>
    <link>https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116</link>
    <description>So i was wondering whats wrong with my client coz&#39; it keeps saying &#39;Error connecting to server...retrying in 10&#39;&#39; And shit like that, Then i checked the cache and it had only downloaded IDX3 and .dat files.
(Not even all of those files either)

Heres my CacheDownloader;

[CODE]import java.io.*;
import java.net.*;
import java.util.zip.*;
import java.util.Enumeration;
import sign.signlink;

public class CacheDownloader {

	public client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 2;
	//public String cacheLink = &quot;http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip&quot;;
	public String cacheLink = &quot;https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip?dl=1&amp;token_hash=AAGGNWN2GU5ubqvRnFz901DjZjlEz_Nq67hwhGAuWDKPkA&quot;;
	public String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	public void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}

	public void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	public String getCacheDir() {
		return signlink.findcachedir();
	}

	public String getCacheLink() {
		return cacheLink;
	}

	public int getCacheVersion() {
		return VERSION;
	}
	
	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;);
		if(!location.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			if(!version.exists()) {
				//delete(getCacheDir());
				downloadFile(getCacheLink(), getArchivedName());
				unZip();
				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteDownloadedZipFile(getArchivedName());
			} else {
				return null;
			}
		}
		} catch(Exception e) {
		}
		return null;
	}
	
	public void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
			conn = url.openConnection();
			in = conn.getInputStream(); 
			byte[] data = new byte[BUFFER]; 
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
            int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
			}
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	public String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
		}
		return &quot;&quot;;
	}
	
	public void deleteDownloadedZipFile(String fileName) {
		File f = new File(getCacheDir() + fileName);
		if (!f.exists())
			throw new IllegalArgumentException(&quot;Delete: no such file or directory: &quot; + fileName);
		if (!f.canWrite())
			throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + fileName);
		if (f.isDirectory()) {
			String[] files = f.list();
		if (files.length &gt; 0)
			throw new IllegalArgumentException(&quot;Delete: directory not empty: &quot; + fileName);
		}
		boolean success = f.delete();
		if (!success)
			throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
	}
	
	public static boolean delete( String path ) {
		if (path == null || path.trim().length() == 0) 
		return false;
		return delete(new File(path));
	}

	public static boolean delete( File fileOrDirectory ) {
		if (fileOrDirectory == null) return false;
		if (!fileOrDirectory.exists()) return false;
		if (fileOrDirectory.isDirectory()) {
			for (File childFile : fileOrDirectory.listFiles()) {
				delete(childFile);
			}
		}
		return fileOrDirectory.delete();
	}

	public void unZip() {
		try {
    		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;
			while((e=zin.getNextEntry()) != null) {
               	if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               	} else {
				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
					unzip(zin, getCacheDir() + e.getName());
				}
			}
			zin.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void unzip(ZipInputStream zin, String s) throws IOException {
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len = 0;
		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/CODE]


Cache is Deathlypvpz v3 Cache, The one you can download [url=https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip?dl=1&amp;token_hash=AAGGNWN2GU5ubqvRnFz901DjZjlEz_Nq67hwhGAuWDKPkA]Here.  [/url]</description>
    
    <lastBuildDate>Sun, 05 Jan 2014 04:39:47 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cachedownloader problem! NEED HELP ASAP!</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>You should just use the direct link instead of the link for the button:<br>
<a href="https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip" class="onebox" target="_blank" rel="nofollow noopener">https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip</a><br>
This is also client sided</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/3</link>
        <pubDate>Sun, 05 Jan 2014 04:39:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538116-3</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116.rss">Cachedownloader problem! NEED HELP ASAP!</source>
      </item>
      <item>
        <title>Cachedownloader problem! NEED HELP ASAP!</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>try reuploading your cache (check if everything is still in there) to a different host</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/2</link>
        <pubDate>Sun, 05 Jan 2014 04:05:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538116-2</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116.rss">Cachedownloader problem! NEED HELP ASAP!</source>
      </item>
      <item>
        <title>Cachedownloader problem! NEED HELP ASAP!</title>
        <dc:creator><![CDATA[@Cuber317 Cuber317]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cuber317">@Cuber317</a> wrote:</p>
          <blockquote>
              <p>So i was wondering whats wrong with my client coz’ it keeps saying ‘Error connecting to server…retrying in 10’’ And shit like that, Then i checked the cache and it had only downloaded IDX3 and .dat files.<br>
(Not even all of those files either)</p>
<p>Heres my CacheDownloader;</p>
<p>[CODE]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import java.util.zip.*;<br>
import java.util.Enumeration;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>public client client;
public final int BUFFER = 1024;
public static final int VERSION = 2;
//public String cacheLink = "http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip";
public String cacheLink = "https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip?dl=1&amp;token_hash=AAGGNWN2GU5ubqvRnFz901DjZjlEz_Nq67hwhGAuWDKPkA";
public String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

public void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}

public void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

public String getCacheDir() {
	return signlink.findcachedir();
}

public String getCacheLink() {
	return cacheLink;
}

public int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat");
	if(!location.exists()) {
		//delete(getCacheDir());
		downloadFile(getCacheLink(), getArchivedName());
		unZip();
		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteDownloadedZipFile(getArchivedName());
	} else {
		if(!version.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			return null;
		}
	}
	} catch(Exception e) {
	}
	return null;
}

public void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" +localFileName)); 
		conn = url.openConnection();
		in = conn.getInputStream(); 
		byte[] data = new byte[BUFFER]; 
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
        int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
		}
		drawLoadingText("Finished downloading "+getArchivedName()+"!");
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

public String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
	}
	return "";
}

public void deleteDownloadedZipFile(String fileName) {
	File f = new File(getCacheDir() + fileName);
	if (!f.exists())
		throw new IllegalArgumentException("Delete: no such file or directory: " + fileName);
	if (!f.canWrite())
		throw new IllegalArgumentException("Delete: write protected: " + fileName);
	if (f.isDirectory()) {
		String[] files = f.list();
	if (files.length &gt; 0)
		throw new IllegalArgumentException("Delete: directory not empty: " + fileName);
	}
	boolean success = f.delete();
	if (!success)
		throw new IllegalArgumentException("Delete: deletion failed");
}

public static boolean delete( String path ) {
	if (path == null || path.trim().length() == 0) 
	return false;
	return delete(new File(path));
}

public static boolean delete( File fileOrDirectory ) {
	if (fileOrDirectory == null) return false;
	if (!fileOrDirectory.exists()) return false;
	if (fileOrDirectory.isDirectory()) {
		for (File childFile : fileOrDirectory.listFiles()) {
			delete(childFile);
		}
	}
	return fileOrDirectory.delete();
}

public void unZip() {
	try {
		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;
		while((e=zin.getNextEntry()) != null) {
           	if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           	} else {
			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
				unzip(zin, getCacheDir() + e.getName());
			}
		}
		zin.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public void unzip(ZipInputStream zin, String s) throws IOException {
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len = 0;
	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/CODE]</p>
<p>Cache is Deathlypvpz v3 Cache, The one you can download <a href="https://dl.dropboxusercontent.com/s/ayc1momur4r8u6h/Deathlypvpz%20V3.zip?dl=1&amp;token_hash=AAGGNWN2GU5ubqvRnFz901DjZjlEz_Nq67hwhGAuWDKPkA" data-bbcode="true" rel="nofollow noopener">Here.  </a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116/1</link>
        <pubDate>Sat, 04 Jan 2014 23:39:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538116-1</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-problem-need-help-asap/538116.rss">Cachedownloader problem! NEED HELP ASAP!</source>
      </item>
  </channel>
</rss>
