<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CachedObjects?</title>
    <link>https://forum.moparisthebest.com/t/cachedobjects/546503</link>
    <description>I was roaming through my source files trying to find out how to load walls etc. and i found this. does anyone have any clue what these two files do?

cachedobject.java
[spoiler]


[code]package server.clip;

public class CachedObject {

	private int objectId;
	private int objectType;
	private int objectOrientation;

	public CachedObject(int objectId, int objectType, int objectOrientation)
	{
		this.objectId = objectId;
		this.objectType = objectType;
		this.objectOrientation = objectOrientation;
	}
	
	public int getId()
	{
		return objectId;
	}
	
	public int getType()
	{
		return objectType;
	}
	
	public int getOrientation()
	{
		return objectOrientation;
	}
	
	public void changeOrientation(int o)
	{
		objectOrientation = o;
	}
	
}
























[/code]

[/spoiler]


heres the objectmanager.java
[spoiler]

[code]package server.clip;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class ObjectManager {

	private static List&lt;StateObject&gt; stateChanges = new ArrayList&lt;StateObject&gt;();
	private static Map&lt;Integer, CachedObject&gt; cachedObjects = new HashMap&lt;Integer, CachedObject&gt;();
	private static Map&lt;Integer, int[]&gt; objectSizes = new HashMap&lt;Integer, int[]&gt;();
	private static List&lt;VariableObject&gt; varObjects = new ArrayList&lt;VariableObject&gt;();

	public static void appendStateChange(int objectType, int objectX, int objectY, int objectHeight, int objectFace, int objectChangeState, int objectVType)
	{
		stateChanges.add(new StateObject(objectType, objectX, objectY, objectFace, objectHeight, objectChangeState, objectVType));
	}

	public static void appendVarObject(int objectType, int objectX, int objectY, int objectHeight, int objectFace)
	{
		varObjects.add(new VariableObject(objectType, objectX, objectY, objectFace, objectHeight));
	}

	public static void removeStateChange(int objectType, int objectX, int objectY, int objectHeight)
	{
		for (int index = 0; index &lt; stateChanges.size(); index++)
		{
			StateObject so = stateChanges.get(index);
			if(so == null)
				continue;
			if((so.getX() == objectX &amp;&amp; so.getY() == objectY &amp;&amp; so.getHeight() == objectHeight) &amp;&amp; so.getType() == objectType || so.getStatedObject() == objectType)
			{
				stateChanges.remove(index);
				break;
			}
		}
	}

	public static void removeVarObject(int objectType, int objectX, int objectY, int objectHeight)
	{
		for (int index = 0; index &lt; varObjects.size(); index++)
		{
			VariableObject vo = varObjects.get(index);
			if(vo == null)
				continue;
			if(vo.getType() == objectType &amp;&amp; vo.getX() == objectX &amp;&amp; vo.getY() == objectY &amp;&amp; vo.getHeight() == objectHeight)
			{
				varObjects.remove(index);
				break;
			}
		}
	}

	public static boolean varObjectExists(int objectX, int objectY, int objectHeight)
	{
		for (VariableObject vo : varObjects)
		{
			if(vo.getHeight() != objectHeight)
				continue;
			if(vo.getX() == objectX &amp;&amp; vo.getY() == objectY)
				return true;
		}
		return false;
	}
	
	public static boolean stateHasChanged(int objectType, int objectX, int objectY, int objectHeight)
	{
		for (StateObject so : stateChanges)
		{
			if(so.getHeight() != objectHeight)
				continue;
			if(so.getX() == objectX &amp;&amp; so.getY() == objectY &amp;&amp; so.getType() == objectType)
				return true;
		}
		return false;
	}
	
	private static void loadCachedObjects()
	{
		try {
			java.io.File f = new java.io.File(&quot;./deps/Data/object_data&quot;);
			java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.FileInputStream(f));
			int length = ((int) f.length() / 8);
			for (int index = 0; index &lt; length; index++)
				cachedObjects.put(dis.readInt(), new CachedObject(dis.readUnsignedShort(), dis.readByte(), dis.readByte()));
			dis.close();
			int key = (0 &lt;&lt; 30) + (2658 &lt;&lt; 15) + (2639);//2658 2639
			cachedObjects.put(key, new CachedObject(14315, 10, 0));
			key = (0 &lt;&lt; 30) + (3091 &lt;&lt; 15) + (3504);
			cachedObjects.put(key, new CachedObject(4388, 10, 0));
			key = (0 &lt;&lt; 30) + (3094 &lt;&lt; 15) + (3504);
			cachedObjects.put(key, new CachedObject(4408, 10, 0));
			key = (0 &lt;&lt; 30) + (3097 &lt;&lt; 15) + (3504);
			cachedObjects.put(key, new CachedObject(2387, 10, 0));
			key = (0 &lt;&lt; 30) + (3092 &lt;&lt; 15) + (3487);
			cachedObjects.put(key, new CachedObject(6552, 10, 0));
			key = (1 &lt;&lt; 30) + (3094 &lt;&lt; 15) + (3269);
			cachedObjects.put(key, new CachedObject(1585, 0, 0));
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static int getOrientation(int objectX, int objectY, int objectHeight)
	{
		if(cachedObjects.size() == 0)
			loadCachedObjects();
		int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
		return (cachedObjects.get(key) != null ? cachedObjects.get(key).getOrientation() : 0);
	}
	
	public static void changeOrientation(int objectX, int objectY, int objectHeight, int newO)
	{
		if(cachedObjects.size() == 0)
			loadCachedObjects();
		int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
		if(cachedObjects.get(key) != null)
			cachedObjects.get(key).changeOrientation(newO);
	}
	
	public static boolean isCachedObject(int objectX, int objectY, int objectHeight, int objectId)
	{
		for (StateObject so : stateChanges)
		{
			if(so == null)
				continue;
			if(so.getHeight() != objectHeight)
				continue;
			if(so.getStatedObject() == objectId &amp;&amp; so.getX() == objectX &amp;&amp; so.getY() == objectY)
				return true;
		}
		return false;
	}
	
	public static StateObject getStateObject(int objectX, int objectY, int objectHeight, int objectId)
	{
		for (StateObject so : stateChanges)
		{
			if(so == null)
				continue;
			if(so.getHeight() != objectHeight)
				continue;
			if(so.getStatedObject() == objectId &amp;&amp; so.getX() == objectX &amp;&amp; so.getY() == objectY)
				return so;
		}
		return null;
	}
	
	public static boolean objectExists(int objectX, int objectY, int objectHeight, int objectId)
	{
		if(cachedObjects.size() == 0)
			loadCachedObjects();
		int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
		return (cachedObjects.get(key) != null ? cachedObjects.get(key).getId() == objectId : false);
	}
	
	public static boolean objectExists(int objectX, int objectY, int objectHeight)
	{
		if(cachedObjects.size() == 0)
			loadCachedObjects();
		int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
		return (cachedObjects.get(key) != null);
	}
	
	public static int getType(int objectX, int objectY, int objectHeight)
	{
		if(cachedObjects.size() == 0)
			loadCachedObjects();
		int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
		return (cachedObjects.get(key) != null ? cachedObjects.get(key).getType() : 10);
	}
	
	public static void loadObjectSizes()
	{
		try {
			java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.FileInputStream(&quot;./deps/Data/object_size_config&quot;));
			int size = (int) (new java.io.File(&quot;./deps/Data/object_size_config&quot;).length() / 2);
			for (int index = 0; index &lt; size; index++)
			{
				int bitPart = dis.readShort();
				objectSizes.put(index, new int[] { ((bitPart &gt;&gt; 8) &amp; 0xff), ((bitPart) &amp; 0xff) });
			}
			dis.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}
	
	public static boolean withinRange(int objectType, int objectX, int objectY, int playerX, int playerY, int atHeight)
	{
		if(objectSizes.size() == 0)
			loadObjectSizes();
		int sizeX = 1;
		int sizeY = 1;
		if(objectSizes.get(objectType) != null)
		{
			sizeX = objectSizes.get(objectType)[0];
			sizeY = objectSizes.get(objectType)[1];
		}
		int face = getOrientation(objectX, objectY, atHeight);
		if(face == 1 || face == 3)
		{
			int tempX = sizeX;
			sizeX = sizeY;
			sizeY = tempX;
		}
		java.awt.Rectangle objectField = new java.awt.Rectangle(objectX, objectY, sizeX, sizeY);
		java.awt.Rectangle playerField = new java.awt.Rectangle(objectX - 1, (objectY - 1), (sizeX + 2), (sizeY + 2));
		return playerField.contains(playerX, playerY) &amp;&amp; !objectField.contains(playerX, playerY);
	}
	
	public static boolean withinDoorRange(int objectType, int objectX, int objectY, int playerX, int playerY, int atHeight)
	{
		if(objectSizes.size() == 0)
			loadObjectSizes();
		boolean isOpen = isCachedObject(objectX, objectY, atHeight, objectType);
		if(isOpen)
		{
			StateObject so = getStateObject(objectX, objectY, atHeight, objectType);
			int face = so.getFace();
			if(face == 1 || face == 3)
				return playerX &gt;= objectX - 1 &amp;&amp; playerX &lt;= objectX + 1 &amp;&amp; playerY == objectY;
			else
				return playerY &gt;= objectY - 1 &amp;&amp; playerY &lt;= objectY + 1 &amp;&amp; playerX == objectX;
		} else
		{
			int face = getOrientation(objectX, objectY, atHeight);
			if(face == 1 || face == 3)
				return playerX &gt;= objectX - 1 &amp;&amp; playerX &lt;= objectX + 1 &amp;&amp; playerY == objectY;
			else
				return playerY &gt;= objectY - 1 &amp;&amp; playerY &lt;= objectY + 1 &amp;&amp; playerX == objectX;
		}
	}
}[/code]

[/spoiler]</description>
    
    <lastBuildDate>Fri, 05 Sep 2014 06:00:18 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cachedobjects/546503.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CachedObjects?</title>
        <dc:creator><![CDATA[@hadlich4 hadlich4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hadlich4">@hadlich4</a> wrote:</p>
          <blockquote>
              <p>I was roaming through my source files trying to find out how to load walls etc. and i found this. does anyone have any clue what these two files do?</p>
<p>cachedobject.java<br>
[spoiler]</p>
<p>[code]package server.clip;</p>
<p>public class CachedObject {</p>
<pre><code>private int objectId;
private int objectType;
private int objectOrientation;

public CachedObject(int objectId, int objectType, int objectOrientation)
{
	this.objectId = objectId;
	this.objectType = objectType;
	this.objectOrientation = objectOrientation;
}

public int getId()
{
	return objectId;
}

public int getType()
{
	return objectType;
}

public int getOrientation()
{
	return objectOrientation;
}

public void changeOrientation(int o)
{
	objectOrientation = o;
}
</code></pre>
<p>}</p>
<p>[/code]</p>
<p>[/spoiler]</p>
<p>heres the objectmanager.java<br>
[spoiler]</p>
<p>[code]package server.clip;</p>
<p>import java.util.ArrayList;<br>
import java.util.HashMap;<br>
import java.util.List;<br>
import java.util.Map;</p>
<p>public class ObjectManager {</p>
<pre><code>private static List&lt;StateObject&gt; stateChanges = new ArrayList&lt;StateObject&gt;();
private static Map&lt;Integer, CachedObject&gt; cachedObjects = new HashMap&lt;Integer, CachedObject&gt;();
private static Map&lt;Integer, int[]&gt; objectSizes = new HashMap&lt;Integer, int[]&gt;();
private static List&lt;VariableObject&gt; varObjects = new ArrayList&lt;VariableObject&gt;();

public static void appendStateChange(int objectType, int objectX, int objectY, int objectHeight, int objectFace, int objectChangeState, int objectVType)
{
	stateChanges.add(new StateObject(objectType, objectX, objectY, objectFace, objectHeight, objectChangeState, objectVType));
}

public static void appendVarObject(int objectType, int objectX, int objectY, int objectHeight, int objectFace)
{
	varObjects.add(new VariableObject(objectType, objectX, objectY, objectFace, objectHeight));
}

public static void removeStateChange(int objectType, int objectX, int objectY, int objectHeight)
{
	for (int index = 0; index &lt; stateChanges.size(); index++)
	{
		StateObject so = stateChanges.get(index);
		if(so == null)
			continue;
		if((so.getX() == objectX &amp;&amp; so.getY() == objectY &amp;&amp; so.getHeight() == objectHeight) &amp;&amp; so.getType() == objectType || so.getStatedObject() == objectType)
		{
			stateChanges.remove(index);
			break;
		}
	}
}

public static void removeVarObject(int objectType, int objectX, int objectY, int objectHeight)
{
	for (int index = 0; index &lt; varObjects.size(); index++)
	{
		VariableObject vo = varObjects.get(index);
		if(vo == null)
			continue;
		if(vo.getType() == objectType &amp;&amp; vo.getX() == objectX &amp;&amp; vo.getY() == objectY &amp;&amp; vo.getHeight() == objectHeight)
		{
			varObjects.remove(index);
			break;
		}
	}
}

public static boolean varObjectExists(int objectX, int objectY, int objectHeight)
{
	for (VariableObject vo : varObjects)
	{
		if(vo.getHeight() != objectHeight)
			continue;
		if(vo.getX() == objectX &amp;&amp; vo.getY() == objectY)
			return true;
	}
	return false;
}

public static boolean stateHasChanged(int objectType, int objectX, int objectY, int objectHeight)
{
	for (StateObject so : stateChanges)
	{
		if(so.getHeight() != objectHeight)
			continue;
		if(so.getX() == objectX &amp;&amp; so.getY() == objectY &amp;&amp; so.getType() == objectType)
			return true;
	}
	return false;
}

private static void loadCachedObjects()
{
	try {
		java.io.File f = new java.io.File("./deps/Data/object_data");
		java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.FileInputStream(f));
		int length = ((int) f.length() / 8);
		for (int index = 0; index &lt; length; index++)
			cachedObjects.put(dis.readInt(), new CachedObject(dis.readUnsignedShort(), dis.readByte(), dis.readByte()));
		dis.close();
		int key = (0 &lt;&lt; 30) + (2658 &lt;&lt; 15) + (2639);//2658 2639
		cachedObjects.put(key, new CachedObject(14315, 10, 0));
		key = (0 &lt;&lt; 30) + (3091 &lt;&lt; 15) + (3504);
		cachedObjects.put(key, new CachedObject(4388, 10, 0));
		key = (0 &lt;&lt; 30) + (3094 &lt;&lt; 15) + (3504);
		cachedObjects.put(key, new CachedObject(4408, 10, 0));
		key = (0 &lt;&lt; 30) + (3097 &lt;&lt; 15) + (3504);
		cachedObjects.put(key, new CachedObject(2387, 10, 0));
		key = (0 &lt;&lt; 30) + (3092 &lt;&lt; 15) + (3487);
		cachedObjects.put(key, new CachedObject(6552, 10, 0));
		key = (1 &lt;&lt; 30) + (3094 &lt;&lt; 15) + (3269);
		cachedObjects.put(key, new CachedObject(1585, 0, 0));
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public static int getOrientation(int objectX, int objectY, int objectHeight)
{
	if(cachedObjects.size() == 0)
		loadCachedObjects();
	int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
	return (cachedObjects.get(key) != null ? cachedObjects.get(key).getOrientation() : 0);
}

public static void changeOrientation(int objectX, int objectY, int objectHeight, int newO)
{
	if(cachedObjects.size() == 0)
		loadCachedObjects();
	int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
	if(cachedObjects.get(key) != null)
		cachedObjects.get(key).changeOrientation(newO);
}

public static boolean isCachedObject(int objectX, int objectY, int objectHeight, int objectId)
{
	for (StateObject so : stateChanges)
	{
		if(so == null)
			continue;
		if(so.getHeight() != objectHeight)
			continue;
		if(so.getStatedObject() == objectId &amp;&amp; so.getX() == objectX &amp;&amp; so.getY() == objectY)
			return true;
	}
	return false;
}

public static StateObject getStateObject(int objectX, int objectY, int objectHeight, int objectId)
{
	for (StateObject so : stateChanges)
	{
		if(so == null)
			continue;
		if(so.getHeight() != objectHeight)
			continue;
		if(so.getStatedObject() == objectId &amp;&amp; so.getX() == objectX &amp;&amp; so.getY() == objectY)
			return so;
	}
	return null;
}

public static boolean objectExists(int objectX, int objectY, int objectHeight, int objectId)
{
	if(cachedObjects.size() == 0)
		loadCachedObjects();
	int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
	return (cachedObjects.get(key) != null ? cachedObjects.get(key).getId() == objectId : false);
}

public static boolean objectExists(int objectX, int objectY, int objectHeight)
{
	if(cachedObjects.size() == 0)
		loadCachedObjects();
	int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
	return (cachedObjects.get(key) != null);
}

public static int getType(int objectX, int objectY, int objectHeight)
{
	if(cachedObjects.size() == 0)
		loadCachedObjects();
	int key = (objectHeight &lt;&lt; 30) + (objectX &lt;&lt; 15) + (objectY);
	return (cachedObjects.get(key) != null ? cachedObjects.get(key).getType() : 10);
}

public static void loadObjectSizes()
{
	try {
		java.io.DataInputStream dis = new java.io.DataInputStream(new java.io.FileInputStream("./deps/Data/object_size_config"));
		int size = (int) (new java.io.File("./deps/Data/object_size_config").length() / 2);
		for (int index = 0; index &lt; size; index++)
		{
			int bitPart = dis.readShort();
			objectSizes.put(index, new int[] { ((bitPart &gt;&gt; 8) &amp; 0xff), ((bitPart) &amp; 0xff) });
		}
		dis.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public static boolean withinRange(int objectType, int objectX, int objectY, int playerX, int playerY, int atHeight)
{
	if(objectSizes.size() == 0)
		loadObjectSizes();
	int sizeX = 1;
	int sizeY = 1;
	if(objectSizes.get(objectType) != null)
	{
		sizeX = objectSizes.get(objectType)[0];
		sizeY = objectSizes.get(objectType)[1];
	}
	int face = getOrientation(objectX, objectY, atHeight);
	if(face == 1 || face == 3)
	{
		int tempX = sizeX;
		sizeX = sizeY;
		sizeY = tempX;
	}
	java.awt.Rectangle objectField = new java.awt.Rectangle(objectX, objectY, sizeX, sizeY);
	java.awt.Rectangle playerField = new java.awt.Rectangle(objectX - 1, (objectY - 1), (sizeX + 2), (sizeY + 2));
	return playerField.contains(playerX, playerY) &amp;&amp; !objectField.contains(playerX, playerY);
}

public static boolean withinDoorRange(int objectType, int objectX, int objectY, int playerX, int playerY, int atHeight)
{
	if(objectSizes.size() == 0)
		loadObjectSizes();
	boolean isOpen = isCachedObject(objectX, objectY, atHeight, objectType);
	if(isOpen)
	{
		StateObject so = getStateObject(objectX, objectY, atHeight, objectType);
		int face = so.getFace();
		if(face == 1 || face == 3)
			return playerX &gt;= objectX - 1 &amp;&amp; playerX &lt;= objectX + 1 &amp;&amp; playerY == objectY;
		else
			return playerY &gt;= objectY - 1 &amp;&amp; playerY &lt;= objectY + 1 &amp;&amp; playerX == objectX;
	} else
	{
		int face = getOrientation(objectX, objectY, atHeight);
		if(face == 1 || face == 3)
			return playerX &gt;= objectX - 1 &amp;&amp; playerX &lt;= objectX + 1 &amp;&amp; playerY == objectY;
		else
			return playerY &gt;= objectY - 1 &amp;&amp; playerY &lt;= objectY + 1 &amp;&amp; playerX == objectX;
	}
}
</code></pre>
<p>}[/code]</p>
<p>[/spoiler]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedobjects/546503/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedobjects/546503/1</link>
        <pubDate>Fri, 05 Sep 2014 06:00:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546503-1</guid>
        <source url="https://forum.moparisthebest.com/t/cachedobjects/546503.rss">CachedObjects?</source>
      </item>
  </channel>
</rss>
