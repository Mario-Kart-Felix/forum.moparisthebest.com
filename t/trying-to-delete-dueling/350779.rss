<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Trying to delete dueling</title>
    <link>https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779</link>
    <description>The dueling i have on my source is really buggy, and nobody uses it anyways, so its not worth the trouble, every time i try to remove it i get tons of errors... could be a misplaced bracket, but all i did was remove something

Heres my entire Dueling Code... [code]
	public void RemoveAllDuelItems() {
		for (int i = 0; i &lt; duelItems.length; i++) {
			if (duelItems[i] &gt; 0) {
				fromDuel((duelItems[i] - 1), i, duelItemsN[i]);
			}
		}
	}

	public void Duelfinish() {
		refreshSkills();
		currentHealth = playerLevel[playerHitpoints];
		playerLevel[0] = getLevelForXP(playerXP[0]);
		playerLevel[1] = getLevelForXP(playerXP[1]);
		playerLevel[2] = getLevelForXP(playerXP[2]);
		playerLevel[4] = getLevelForXP(playerXP[4]);
		playerLevel[5] = getLevelForXP(playerXP[5]);
		playerLevel[6] = getLevelForXP(playerXP[6]);
		sendFrame126(&quot;Prayer: &quot;+playerLevel[5]+&quot;/&quot;+getLevelForXP(playerXP[5])+&quot;&quot;, 687);
		resetfollowers();
		refreshSkills();
		}
	
	public void resetDuel() {
		println(&quot;duel reset&quot;);
		closeInterface();
		canOffer = true;
		duel_with = 0;
		duelRequested = false;
		duelConfirmed = false;
		duelConfirmed2 = false;
		offeredItems.clear();
		otherOfferedItems.clear();
		duelFight = false;
		inDuel = false;
		duelRule = new boolean[] { false, false, false, false, false, true,
				false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true };
	}

	 public void setDuelEquipment(int i, int j, int k)
    {
        PlayerHandler _tmp = server.playerHandler;
        if(PlayerHandler.players[playerId] == null || disconnected || in == null || out == null)
        {

        }
        outStream.createFrameVarSizeWord(34);
        outStream.writeWord(13824);
        outStream.writeByte(k);
        outStream.writeWord(i + 1);
        if(j &gt; 254)
        {
            outStream.writeByte(255);
            outStream.writeDWord(j);
        } else
        {
            outStream.writeByte(j);
        }
        outStream.endFrameVarSizeWord();
        updateRequired = true;
        appearanceUpdateRequired = true;
    }
public int HeadWear = 1;
public int TorsoWear = 1;
public int LegsWear = 1;
public int GlovesWear = 1;
public int BootsWear = 1;
public int WeaponWear = 1;
public int dbowspec = 0;
public int ShieldWear = 1;
public int CapeWear = 1;
public int ArrowsWear = 1;
public int AmuletWear = 1;
public int RingWear = 1;
	public boolean stakeItem(int itemID, int fromSlot, int amount) {
		if (System.currentTimeMillis() - lastButton &lt; 800) {
			return false;
		}
		lastButton = System.currentTimeMillis();
		if (!Item.itemStackable[itemID] &amp;&amp; !Item.itemIsNote[itemID]
				&amp;&amp; (amount &gt; 1)) {
			for (int a = 1; a &lt;= amount; a++) {
				int slot = findItem(itemID, playerItems, playerItemsN);
				if (slot &gt;= 0) {
					stakeItem(itemID, slot, 1);
				}
			}
		}
		for (int element : noTrade) {
			if ((itemID == element) || (itemID == element + 1)) {
				sM(&quot;You can&#39;t trade that item&quot;);
				// declineDuel();
				return false;
			}
		}
		client other = getClient(duel_with);
		if (!inDuel || !validClient(duel_with)) {
			declineDuel();
			return false;
		}
		if (!canOffer) {
			return false;
		}
		if (!playerHasItem(itemID, amount)) {
			return false;
		}
		if (Item.itemStackable[itemID] || Item.itemIsNote[itemID]) {
			boolean inTrade = false;
			for (GameItem item : offeredItems) {
				if (item.id == itemID) {
					inTrade = true;
					item.amount += amount;
					break;
				}
			}
			if (!inTrade) {
				offeredItems.add(new GameItem(itemID, amount));
			}
		} else {
			offeredItems.add(new GameItem(itemID, 1));
		}
		deleteItem(itemID, fromSlot, amount);
		resetItems(3214);
		resetItems(3322);
		other.resetItems(3214);
		other.resetItems(3322);
		refreshDuelScreen();
		other.refreshDuelScreen();
		sendFrame126(&quot;&quot;, 6684);
		other.sendFrame126(&quot;&quot;, 6684);
		return true;
	}

	
	public void startDuel() {
	RemoveAllWindows();
	duelFight = true;
	toX = 3345+misc.random(6);
	toY = 3251+misc.random(6);
	teleblock = true;
plrText = &quot;FIGHT!&quot;;
plrTextUpdateRequired = true;
updateRequired = true;
			AtkPray = 0;
			StrPrayer = 0;
			DefPray = 0;
			RangePray = 0;
			MagePray = 0;
			PrayHeal = false;
			ProtItem = false;
			ProtMage = false;
			ProtRange = false;
			ProtMelee = false;
			Redemption = false;
			Retribution = false;
			Smite = false;
			Chivalry = false;
			Piety = false;
			currentHealth = playerLevel[playerHitpoints];
			playerLevel[0] = getLevelForXP(playerXP[0]);
			playerLevel[1] = getLevelForXP(playerXP[1]);
			playerLevel[2] = getLevelForXP(playerXP[2]);
			playerLevel[4] = getLevelForXP(playerXP[4]);
			playerLevel[5] = getLevelForXP(playerXP[5]);
			playerLevel[6] = getLevelForXP(playerXP[6]);
			sendFrame126(&quot;Prayer: &quot;+playerLevel[5]+&quot;/&quot;+getLevelForXP(playerXP[5])+&quot;&quot;, 687);
			resetfollowers();
		closeInterface();
		client other = getClient(duel_with);
		for (GameItem item : other.offeredItems) {
			otherOfferedItems.add(new GameItem(item.id, item.amount));
		}
}

	
			public void declineDuel() {
		client other = getClient(duel_with);
		inDuel = false;
		if (validClient(duel_with) &amp;&amp; other.inDuel) {
			other.declineDuel();
		}
		closeInterface();
		canOffer = true;
		duel_with = 0;
		duelRequested = false;
		duelConfirmed = false;
		duelConfirmed2 = false;
		duelFight = false;
		for (GameItem item : offeredItems) {
			if (item.amount &lt; 1)
				continue;
			if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
				addItem(item.id, item.amount);
			} else {
				addItem(item.id, 1);
			}
		}
		offeredItems.clear();
	}

	public boolean DeclineDuel() {
		declineDuel();
		return true;
	}
		public boolean duelButton(int button) {
		client other = getClient(duel_with);
		boolean found = false;
		if (System.currentTimeMillis() - lastButton &lt; 800) {
			return false;
		}
		if (inDuel &amp;&amp; !duelFight &amp;&amp; !duelConfirmed2 &amp;&amp; !other.duelConfirmed2) {
			for (int i = 0; i &lt; duelButtons.length; i++) {
				if (button == duelButtons[i]) {
					found = true;
					if (duelRule[i]) {
						duelRule[i] = false;
						other.duelRule[i] = false;
					} else {
						duelRule[i] = true;
						other.duelRule[i] = true;
					}
				}
			}
			if (found) {
				lastButton = System.currentTimeMillis();
				duelConfirmed = false;
				other.duelConfirmed = false;
				sendQuest(&quot;&quot;, 6684);
				other.sendQuest(&quot;&quot;, 6684);
				other.duelRule[i] = duelRule[i];
				RefreshDuelRules();
				other.RefreshDuelRules();
			}
		}
		return found;
	}
	public void duelPlayer(int pIndex) {
		try {
			if (!(pIndex &gt;= 2047)) {
				client duelPlayer = (client) server.playerHandler.players[pIndex];

				sM(&quot;Sending duel request...&quot;);
sM(&quot;DUELING can be glitchy&quot;);
				duelPlayer.sM(playerName + &quot;:duelreq:&quot;);
			} else {
				sM(&quot;Dueling is currently disabled&quot;);
			}
		} catch (Exception e) {
			sM(&quot;attackPlayer: Invalid player index&quot;);
		}
	}

	public void duelReq(int pid) {
		if (!server.dueling) {
			sM(&quot;Dueling has been temporarily disabled&quot;);
			return;
		}
		duel_with = pid;
		duelRequested = true;
		if (!validClient(duel_with))
			return;
		client other = getClient(duel_with);
		if (inTrade || inDuel || other.inDuel || other.inTrade
				|| other.duelFight || other.duelConfirmed
				|| other.duelConfirmed2) {
			sM(&quot;Other player is busy at the moment&quot;);
			duelRequested = false;
			return;
		}
		if (duelRequested &amp;&amp; other.duelRequested
				&amp;&amp; (duel_with == other.playerId)
				&amp;&amp; (other.duel_with == playerId)) {
			openDuel();
			other.openDuel();
		} else {
			sM(&quot;Sending duel request...&quot;);
			other.sM(playerName + &quot;:duelreq:&quot;);
		}
	}

	public void DuelVictory() {
		client other = getClient(duel_with);
		if (validClient(duel_with)) {
			toX = 3367+misc.random(7);
			toY = 3276+misc.random(1);
			sM(&quot;You have defeated &quot; + other.playerName + &quot;!&quot;);
			sendQuest(&quot;&quot; + other.combatLevel, 6839);
			sendQuest(other.playerName, 6840);
			currentHealth = playerLevel[playerHitpoints];
			playerLevel[0] = getLevelForXP(playerXP[0]);
			playerLevel[1] = getLevelForXP(playerXP[1]);
			playerLevel[2] = getLevelForXP(playerXP[2]);
			playerLevel[4] = getLevelForXP(playerXP[4]);
			playerLevel[5] = getLevelForXP(playerXP[5]);
			playerLevel[6] = getLevelForXP(playerXP[6]);
			sendFrame126(&quot;Prayer: &quot;+playerLevel[5]+&quot;/&quot;+getLevelForXP(playerXP[5])+&quot;&quot;, 687);
			resetfollowers();
			refreshSkills();
			Duelfinish();
			poisoned = false;
			poisonDmg = false;
			fighting = false;
			wonDuel = true;
			AtkPray = 0;
			StrPrayer = 0;
			DefPray = 0;
			RangePray = 0;
			MagePray = 0;
			PrayHeal = false;
			ProtItem = false;
			ProtMage = false;
			ProtRange = false;
			ProtMelee = false;
			Redemption = false;
			Retribution = false;
			Smite = false;
			Chivalry = false;
			Piety = false;
			isSkulled = false;
			lastSkull = 0;
			headIcon = 0;
			turnpray();


		}

	public boolean fromDuel(int itemID, int fromSlot, int amount) {
		if (System.currentTimeMillis() - lastButton &lt; 800) {
			return false;
		}
		lastButton = System.currentTimeMillis();
		client other = getClient(duel_with);
		if (!inDuel || !validClient(duel_with) || !canOffer) {
			declineDuel();
			return false;
		}
		if (!Item.itemStackable[itemID] &amp;&amp; (amount &gt; 1)) {
			for (int a = 1; a &lt;= amount; a++) {
				int slot = findItem(itemID, playerItems, playerItemsN);
				if (slot &gt;= 0) {
					fromDuel(itemID, 0, 1);
				}
			}
		}
		boolean found = false;
		for (GameItem item : offeredItems) {
			if (item.id == itemID) {
				if (!item.stackable) {
					offeredItems.remove(item);
					found = true;
				} else {
					if (item.amount &gt; amount) {
						item.amount -= amount;
						found = true;
					} else {
						amount = item.amount;
						found = true;
						offeredItems.remove(item);
					}
				}
				break;
			}
		}
		if (found)
			addItem(itemID, amount);
		duelConfirmed = false;
		other.duelConfirmed = false;
		resetItems(3214);
		other.resetItems(3214);
		resetItems(3322);
		other.resetItems(3322);
		refreshDuelScreen();
		other.refreshDuelScreen();
		other.sendFrame126(&quot;&quot;, 6684);

		return true;
	}

	
		public void confirmDuel() {
		client other = getClient(duel_with);
		if (!validClient(duel_with))
			declineDuel();
		String out = &quot;&quot;;
		for (GameItem item : offeredItems) {
			if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
				out += getItemName(item.id) + &quot; x &quot; + misc.format(item.amount)
						+ &quot;, &quot;;
			} else {
				out += getItemName(item.id) + &quot;, &quot;;
			}
		}
		sendQuest(out, 6516);
		out = &quot;&quot;;
		for (GameItem item : other.offeredItems) {
			if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
				out += getItemName(item.id) + &quot; x &quot; + misc.format(item.amount)
						+ &quot;, &quot;;
			} else {
				out += getItemName(item.id) + &quot;, &quot;;
			}
		}
		sendQuest(out, 6517);
		sendQuest(&quot;Movement will be disabled&quot;, 8242);
		for (int i = 8243; i &lt;= 8253; i++) {
			sendQuest(&quot;&quot;, i);
		}
		sendQuest(&quot;Hitpoints will be restored&quot;, 8250);
		sendQuest(&quot;&quot;, 6571);
		showInterface(6412);
	}
	
	public boolean isInDuelArena(int coordX, int coordY, int Type) {
			if ((coordY &gt;= 3279) &amp;&amp; (coordY &lt;= 3279) &amp;&amp; (coordX &lt;= 3355) &amp;&amp; (coordX &gt;= 3379)) {
		outStream.createFrameVarSize(104);
		outStream.writeByteC(2);
		outStream.writeByteA(0);
		outStream.writeString(&quot;Challenge&quot;);
		outStream.endFrameVarSize();
				return true;
			} else {

		outStream.createFrameVarSize(104);
		outStream.writeByteC(2);
		outStream.writeByteA(0);
		outStream.writeString(&quot;null&quot;);
		outStream.endFrameVarSize();
				return true;
		}
	}
	public void openDuel() {
		RefreshDuelRules();
		refreshDuelScreen();
		inDuel = true;
		client other = getClient(duel_with);
		sendQuest(&quot;Dueling with: &quot; + other.playerName + &quot; (level-&quot;
				+ other.combatLevel + &quot;)&quot;, 6671);
		sendQuest(&quot;&quot;, 6684);
		sendFrame248(6575, 3321);
		resetItems(3322);
	}

	
			public void refreshDuelScreen() {
		client other = getClient(duel_with);
		if (!validClient(duel_with))
			return;
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6669);
		outStream.writeWord(offeredItems.toArray().length);
		int current = 0;
		for (GameItem item : offeredItems) {
			if (item.amount &gt; 254) {
				outStream.writeByte(255); // item&#39;s stack count. if over 254,
				// write byte 255
				outStream.writeDWord_v2(item.amount); // and then the real
				// value with
				// writeDWord_v2
			} else {
				outStream.writeByte(item.amount);
			}
			if ((item.id &gt; 20000) || (item.id &lt; 0)) {
				item.id = 20000;
			}
			outStream.writeWordBigEndianA(item.id + 1); // item id
			current++;
		}
		if (current &lt; 27) {
			for (int i = current; i &lt; 28; i++) {
				outStream.writeByte(1);
				outStream.writeWordBigEndianA(-1);
			}
		}
		outStream.endFrameVarSizeWord();
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6670);
		outStream.writeWord(other.offeredItems.toArray().length);
		current = 0;
		for (GameItem item : other.offeredItems) {
			if (item.amount &gt; 254) {
				outStream.writeByte(255); // item&#39;s stack count. if over 254,
				// write byte 255
				outStream.writeDWord_v2(item.amount); // and then the real
				// value with
				// writeDWord_v2
			} else {
				outStream.writeByte(item.amount);
			}
			if ((item.id &gt; 20000) || (item.id &lt; 0)) {
				item.id = 20000;
			}
			outStream.writeWordBigEndianA(item.id + 1); // item id
			current++;
		}
		if (current &lt; 27) {
			for (int i = current; i &lt; 28; i++) {
				outStream.writeByte(1);
				outStream.writeWordBigEndianA(-1);
			}
		}
		outStream.endFrameVarSizeWord();
	}

	public void RefreshDuelRules() {
		for (int i = 0; i &lt; duelLine.length; i++) {
			if (duelRule[i]) {
				sendQuest(&quot;@red@&quot; + duelNames[i], duelLine[i]);
			} else {
				sendQuest(&quot;@cya@&quot; + duelNames[i], duelLine[i]);
			}
		}
	}
		public void itemsToVScreen(int x, int y) {
		Player p = handler.players[duelWith];
		if ((p != null) &amp;&amp; (p.playerId == playerId))
			return;
		for (int i = 0; i &lt; otherDuelItems.length; i++) {
			if ((otherDuelItems[i] &gt; 0) &amp;&amp; (otherDuelItemsN[i] &gt; 0)) {
				if (Item.itemStackable[otherDuelItems[i] - 1]) {
					ItemHandler.addItem(otherDuelItems[i] - 1, enemyX, enemyY,
							otherDuelItemsN[i], playerId, false);
				} else {
					int amount = otherDuelItemsN[i];
					for (int a = 1; a &lt;= amount; a++) {
						ItemHandler.addItem(otherDuelItems[i] - 1, enemyX,
								enemyY, 1, playerId, false);
					}
				}
			}

		}
		for (int i1 = 0; i1 &lt; duelItems.length; i1++) {
			if ((duelItems[i] &gt; 0) &amp;&amp; (duelItemsN[i] &gt; 0))
				addItem(duelItems[i1] - 1, duelItemsN[i1]);
		}
		// resetDuel();
	}

	public void itemsToVScreen_old() {
		outStream.createFrameVarSizeWord(53);
		outStream.writeWord(6822);
		outStream.writeWord(otherOfferedItems.toArray().length);
		for (GameItem item : otherOfferedItems) {
			if (item.amount &gt; 254) {
				outStream.writeByte(255); // item&#39;s stack count. if over 254,
				// write byte 255
				outStream.writeDWord_v2(item.amount); // and then the real
				// value with
				// writeDWord_v2
			} else {
				outStream.writeByte(item.amount);
			}
			if ((item.id &gt; 20000) || (item.id &lt; 0)) {
				item.id = 20000;
			}
			outStream.writeWordBigEndianA(item.id + 1); // item id
		}
		outStream.endFrameVarSizeWord();
	}

	public int GetDuelItemSlots() {
		int Slots = 0;
		for (int element : duelItems) {
			if (element &gt; 0) {
				Slots++;
			}
		}
		for (int element : otherDuelItems) {
			if (element &gt; 0) {
				Slots++;
			}
		}
		return Slots;
	}

			
	public void rightClickCheck() {
		if(!isInDuel()) {
			outStream.createFrameVarSize(104);
			outStream.writeByteC(2);
			outStream.writeByteA(0);
			outStream.writeString(&quot;Challenge&quot;);
			outStream.endFrameVarSize();
}
[/code]

This is what im left with after i delete it. 
[code]	public int randomLowTask() 
	{
		return lowTask[(int) (Math.random() * lowTask.length)];
	}

	public int randomMediumTask() 
	{
		return mediumTask[(int) (Math.random() * mediumTask.length)];
	}

	public int randomHighTask() 
	{
		return highTask[(int) (Math.random() * highTask.length)];
	}
		
	if(isInWilderness(absX, absY, 1) || isInPitGame()) {
			outStream.createFrameVarSize(104);
			outStream.writeByteC(3);		
			outStream.writeByteA(0);		
			outStream.writeString(&quot;Attack&quot;);
			outStream.endFrameVarSize();
		}	
else
{
			outStream.createFrameVarSize(104);
			outStream.writeByteC(3);
			outStream.writeByteA(0);
			outStream.writeString(&quot;null&quot;);
			outStream.endFrameVarSize();
	}
}
[/code]

Sorry the post is kind of long, ive tried multiple times, would post errors but the post is too long. Also its a delta.</description>
    
    <lastBuildDate>Fri, 23 Jul 2010 21:20:11 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Trying to delete dueling</title>
        <dc:creator><![CDATA[@usman555 usman555]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/usman555">@usman555</a> wrote:</p>
          <blockquote>
              <p>and it is a misplaced bracket then.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/4</link>
        <pubDate>Fri, 23 Jul 2010 21:20:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350779-4</guid>
        <source url="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779.rss">Trying to delete dueling</source>
      </item>
      <item>
        <title>Trying to delete dueling</title>
        <dc:creator><![CDATA[@josh1993nhs josh1993nhs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/josh1993nhs">@josh1993nhs</a> wrote:</p>
          <blockquote>
              <p>Heres my errors, 100 so it seems like a misplaced bracket - <code>                                       ^
client.java:198: &lt;identifier&gt; expected
        if(isInWilderness(absX, absY, 1) || isInPitGame()) {
                                        ^
client.java:198: ';' expected
        if(isInWilderness(absX, absY, 1) || isInPitGame()) {
                                           ^
client.java:198: illegal start of type
        if(isInWilderness(absX, absY, 1) || isInPitGame()) {
                                                       ^
client.java:198: &lt;identifier&gt; expected
        if(isInWilderness(absX, absY, 1) || isInPitGame()) {
                                                        ^
client.java:198: ';' expected
        if(isInWilderness(absX, absY, 1) || isInPitGame()) {
                                                         ^
client.java:205: illegal start of type
else
^
client.java:205: ';' expected
else
    ^
client.java:207: &lt;identifier&gt; expected
                        outStream.createFrameVarSize(104);
                                                    ^
client.java:207: illegal start of type
                        outStream.createFrameVarSize(104);
                                                     ^
client.java:208: &lt;identifier&gt; expected
                        outStream.writeByteC(3);
                                            ^
client.java:208: illegal start of type
                        outStream.writeByteC(3);
                                             ^
client.java:209: &lt;identifier&gt; expected
                        outStream.writeByteA(0);
                                            ^
client.java:209: illegal start of type
                        outStream.writeByteA(0);
                                             ^
client.java:210: &lt;identifier&gt; expected
                        outStream.writeString("null");
                                             ^
client.java:210: illegal start of type
                        outStream.writeString("null");
                                              ^
client.java:211: &lt;identifier&gt; expected
                        outStream.endFrameVarSize();
                                                 ^
client.java:213: class, interface, or enum expected
}
^
client.java:215: class, interface, or enum expected
        public void easyer(){
               ^
client.java:218: class, interface, or enum expected
        } else {
        ^
client.java:220: class, interface, or enum expected
        }
        ^
client.java:223: class, interface, or enum expected
        public void sendFrame34(int frame,int item,int slot,int amount){
               ^
client.java:225: class, interface, or enum expected
        outStream.writeWord(frame);
        ^
client.java:226: class, interface, or enum expected
        outStream.writeByte(slot);
        ^
client.java:227: class, interface, or enum expected
        outStream.writeWord(item+1);
        ^
client.java:228: class, interface, or enum expected
        outStream.writeByte(255);
        ^
client.java:229: class, interface, or enum expected
        outStream.writeDWord(amount);
        ^
client.java:230: class, interface, or enum expected
        outStream.endFrameVarSizeWord();
        ^
client.java:231: class, interface, or enum expected
        }
        ^
client.java:233: class, interface, or enum expected
         public void resetKeepItem()
                ^
client.java:236: class, interface, or enum expected
            itemKept1Slot = itemKept2Slot = itemKept3Slot = itemKept4Slot = -1
            ^
client.java:237: class, interface, or enum expected
         itemLose1 = itemLose2 = itemLose3 = itemLose4 = itemLose5 = itemLose6
 itemLose7 = itemLose8 = itemLose9 = itemLose10 = itemLose11 = itemLose12 = it
Lose13 = itemLose14 = itemLose15 = itemLose16 = itemLose17 = itemLose18 = item
se19 = itemLose20 = itemLose21 = itemLose22 = itemLose23 = itemLose24 = itemLo
25 = itemLose26 = itemLose27 = itemLose28 = itemLose29 = itemLose30 = itemLose
 = itemLose32 = itemLose33 = itemLose34 = itemLose35 = itemLose36 = itemLose37
 itemLose38 = itemLose39 = -1;
         ^
client.java:238: class, interface, or enum expected
         itemLose1Slot = itemLose2Slot = itemLose3Slot = itemLose4Slot = itemL
e5Slot = itemLose6Slot = itemLose7Slot = itemLose8Slot = itemLose9Slot = itemL
e10Slot = itemLose11Slot = itemLose12Slot = itemLose13Slot = itemLose14Slot =
emLose15Slot = itemLose16Slot = itemLose17Slot = itemLose18Slot = itemLose19Sl
 = itemLose20Slot = itemLose21Slot = itemLose22Slot = itemLose23Slot = itemLos
4Slot = itemLose25Slot = itemLose26Slot = itemLose27Slot = itemLose28Slot = it
Lose29Slot = itemLose30Slot = itemLose31Slot = itemLose32Slot = itemLose33Slot
 itemLose34Slot = itemLose35Slot = itemLose36Slot = itemLose37Slot = itemLose3
lot = itemLose39Slot = -1;
         ^
client.java:239: class, interface, or enum expected
         }
         ^
client.java:241: class, interface, or enum expected
         public void loseItem1()
                ^
client.java:244: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
        ^
client.java:244: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                        ^
client.java:244: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                                                ^
client.java:249: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                ^
client.java:252: class, interface, or enum expected
                    itemLose1 = playerItems[i]-1;
                    ^
client.java:253: class, interface, or enum expected
                    itemLose1Slot = i;
                    ^
client.java:254: class, interface, or enum expected
                }
                ^
client.java:257: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                        ^
client.java:257: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                                                    ^
client.java:262: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                ^
client.java:265: class, interface, or enum expected
                    itemLose1 = playerEquipment[i];
                    ^
client.java:266: class, interface, or enum expected
                    itemLose1Slot = i;
                    ^
client.java:267: class, interface, or enum expected
                }
                ^
client.java:271: class, interface, or enum expected
    public void loseItem2()
           ^
client.java:274: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
        ^
client.java:274: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                        ^
client.java:274: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                                                ^
client.java:279: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                ^
client.java:282: class, interface, or enum expected
                    itemLose2 = playerItems[i]-1;
                    ^
client.java:283: class, interface, or enum expected
                    itemLose2Slot = i;
                    ^
client.java:284: class, interface, or enum expected
                }
                ^
client.java:287: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                        ^
client.java:287: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                                                    ^
client.java:292: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                ^
client.java:295: class, interface, or enum expected
                    itemLose2 = playerEquipment[i];
                    ^
client.java:296: class, interface, or enum expected
                    itemLose2Slot = i;
                    ^
client.java:297: class, interface, or enum expected
                }
                ^
client.java:301: class, interface, or enum expected
    public void loseItem3()
           ^
client.java:304: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
        ^
client.java:304: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                        ^
client.java:304: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                                                ^
client.java:309: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                ^
client.java:312: class, interface, or enum expected
                    itemLose3 = playerItems[i]-1;
                    ^
client.java:313: class, interface, or enum expected
                    itemLose3Slot = i;
                    ^
client.java:314: class, interface, or enum expected
                }
                ^
client.java:317: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                        ^
client.java:317: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                                                    ^
client.java:322: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                ^
client.java:325: class, interface, or enum expected
                    itemLose3 = playerEquipment[i];
                    ^
client.java:326: class, interface, or enum expected
                    itemLose3Slot = i;
                    ^
client.java:327: class, interface, or enum expected
                }
                ^
client.java:331: class, interface, or enum expected
    public void loseItem4()
           ^
client.java:334: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
        ^
client.java:334: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                        ^
client.java:334: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                                                ^
client.java:339: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                ^
client.java:342: class, interface, or enum expected
                    itemLose4 = playerItems[i]-1;
                    ^
client.java:343: class, interface, or enum expected
                    itemLose4Slot = i;
                    ^
client.java:344: class, interface, or enum expected
                }
                ^
client.java:347: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                        ^
client.java:347: class, interface, or enum expected
        for (int i = 0; i &lt; playerEquipment.length; i++)
                                                    ^
client.java:352: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                ^
client.java:355: class, interface, or enum expected
                    itemLose4 = playerEquipment[i];
                    ^
client.java:356: class, interface, or enum expected
                    itemLose4Slot = i;
                    ^
client.java:357: class, interface, or enum expected
                }
                ^
client.java:361: class, interface, or enum expected
    public void loseItem5()
           ^
client.java:364: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
        ^
client.java:364: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                        ^
client.java:364: class, interface, or enum expected
        for (int i = 0; i &lt; playerItems.length; i++)
                                                ^
client.java:369: class, interface, or enum expected
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                ^
100 errors
Finished!
Press any key to continue . . .</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/3</link>
        <pubDate>Fri, 23 Jul 2010 21:19:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350779-3</guid>
        <source url="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779.rss">Trying to delete dueling</source>
      </item>
      <item>
        <title>Trying to delete dueling</title>
        <dc:creator><![CDATA[@usman555 usman555]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/usman555">@usman555</a> wrote:</p>
          <blockquote>
              <p>it doesnt matter if the post is to long, post the errors.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/2</link>
        <pubDate>Fri, 23 Jul 2010 21:17:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350779-2</guid>
        <source url="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779.rss">Trying to delete dueling</source>
      </item>
      <item>
        <title>Trying to delete dueling</title>
        <dc:creator><![CDATA[@josh1993nhs josh1993nhs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/josh1993nhs">@josh1993nhs</a> wrote:</p>
          <blockquote>
              <p>The dueling i have on my source is really buggy, and nobody uses it anyways, so its not worth the trouble, every time i try to remove it i get tons of errors… could be a misplaced bracket, but all i did was remove something</p>
<p>Heres my entire Dueling Code… [code]<br>
public void RemoveAllDuelItems() {<br>
for (int i = 0; i &lt; duelItems.length; i++) {<br>
if (duelItems[i] &gt; 0) {<br>
fromDuel((duelItems[i] - 1), i, duelItemsN[i]);<br>
}<br>
}<br>
}</p>
<pre><code>public void Duelfinish() {
	refreshSkills();
	currentHealth = playerLevel[playerHitpoints];
	playerLevel[0] = getLevelForXP(playerXP[0]);
	playerLevel[1] = getLevelForXP(playerXP[1]);
	playerLevel[2] = getLevelForXP(playerXP[2]);
	playerLevel[4] = getLevelForXP(playerXP[4]);
	playerLevel[5] = getLevelForXP(playerXP[5]);
	playerLevel[6] = getLevelForXP(playerXP[6]);
	sendFrame126("Prayer: "+playerLevel[5]+"/"+getLevelForXP(playerXP[5])+"", 687);
	resetfollowers();
	refreshSkills();
	}

public void resetDuel() {
	println("duel reset");
	closeInterface();
	canOffer = true;
	duel_with = 0;
	duelRequested = false;
	duelConfirmed = false;
	duelConfirmed2 = false;
	offeredItems.clear();
	otherOfferedItems.clear();
	duelFight = false;
	inDuel = false;
	duelRule = new boolean[] { false, false, false, false, false, true,
			false, true, false, true, false, true, true, true, true, true, true, true, true, true, true, true };
}

 public void setDuelEquipment(int i, int j, int k)
{
    PlayerHandler _tmp = server.playerHandler;
    if(PlayerHandler.players[playerId] == null || disconnected || in == null || out == null)
    {

    }
    outStream.createFrameVarSizeWord(34);
    outStream.writeWord(13824);
    outStream.writeByte(k);
    outStream.writeWord(i + 1);
    if(j &gt; 254)
    {
        outStream.writeByte(255);
        outStream.writeDWord(j);
    } else
    {
        outStream.writeByte(j);
    }
    outStream.endFrameVarSizeWord();
    updateRequired = true;
    appearanceUpdateRequired = true;
}
</code></pre>
<p>public int HeadWear = 1;<br>
public int TorsoWear = 1;<br>
public int LegsWear = 1;<br>
public int GlovesWear = 1;<br>
public int BootsWear = 1;<br>
public int WeaponWear = 1;<br>
public int dbowspec = 0;<br>
public int ShieldWear = 1;<br>
public int CapeWear = 1;<br>
public int ArrowsWear = 1;<br>
public int AmuletWear = 1;<br>
public int RingWear = 1;<br>
public boolean stakeItem(int itemID, int fromSlot, int amount) {<br>
if (System.currentTimeMillis() - lastButton &lt; 800) {<br>
return false;<br>
}<br>
lastButton = System.currentTimeMillis();<br>
if (!Item.itemStackable[itemID] &amp;&amp; !Item.itemIsNote[itemID]<br>
&amp;&amp; (amount &gt; 1)) {<br>
for (int a = 1; a &lt;= amount; a++) {<br>
int slot = findItem(itemID, playerItems, playerItemsN);<br>
if (slot &gt;= 0) {<br>
stakeItem(itemID, slot, 1);<br>
}<br>
}<br>
}<br>
for (int element : noTrade) {<br>
if ((itemID == element) || (itemID == element + 1)) {<br>
sM(“You can’t trade that item”);<br>
// declineDuel();<br>
return false;<br>
}<br>
}<br>
client other = getClient(duel_with);<br>
if (!inDuel || !validClient(duel_with)) {<br>
declineDuel();<br>
return false;<br>
}<br>
if (!canOffer) {<br>
return false;<br>
}<br>
if (!playerHasItem(itemID, amount)) {<br>
return false;<br>
}<br>
if (Item.itemStackable[itemID] || Item.itemIsNote[itemID]) {<br>
boolean inTrade = false;<br>
for (GameItem item : offeredItems) {<br>
if (item.id == itemID) {<br>
inTrade = true;<br>
item.amount += amount;<br>
break;<br>
}<br>
}<br>
if (!inTrade) {<br>
offeredItems.add(new GameItem(itemID, amount));<br>
}<br>
} else {<br>
offeredItems.add(new GameItem(itemID, 1));<br>
}<br>
deleteItem(itemID, fromSlot, amount);<br>
resetItems(3214);<br>
resetItems(3322);<br>
other.resetItems(3214);<br>
other.resetItems(3322);<br>
refreshDuelScreen();<br>
other.refreshDuelScreen();<br>
sendFrame126("", 6684);<br>
other.sendFrame126("", 6684);<br>
return true;<br>
}</p>
<pre><code>public void startDuel() {
RemoveAllWindows();
duelFight = true;
toX = 3345+misc.random(6);
toY = 3251+misc.random(6);
teleblock = true;
</code></pre>
<p>plrText = “FIGHT!”;<br>
plrTextUpdateRequired = true;<br>
updateRequired = true;<br>
AtkPray = 0;<br>
StrPrayer = 0;<br>
DefPray = 0;<br>
RangePray = 0;<br>
MagePray = 0;<br>
PrayHeal = false;<br>
ProtItem = false;<br>
ProtMage = false;<br>
ProtRange = false;<br>
ProtMelee = false;<br>
Redemption = false;<br>
Retribution = false;<br>
Smite = false;<br>
Chivalry = false;<br>
Piety = false;<br>
currentHealth = playerLevel[playerHitpoints];<br>
playerLevel[0] = getLevelForXP(playerXP[0]);<br>
playerLevel[1] = getLevelForXP(playerXP[1]);<br>
playerLevel[2] = getLevelForXP(playerXP[2]);<br>
playerLevel[4] = getLevelForXP(playerXP[4]);<br>
playerLevel[5] = getLevelForXP(playerXP[5]);<br>
playerLevel[6] = getLevelForXP(playerXP[6]);<br>
sendFrame126(“Prayer: “+playerLevel[5]+”/”+getLevelForXP(playerXP[5])+"", 687);<br>
resetfollowers();<br>
closeInterface();<br>
client other = getClient(duel_with);<br>
for (GameItem item : other.offeredItems) {<br>
otherOfferedItems.add(new GameItem(item.id, item.amount));<br>
}<br>
}</p>
<pre><code>		public void declineDuel() {
	client other = getClient(duel_with);
	inDuel = false;
	if (validClient(duel_with) &amp;&amp; other.inDuel) {
		other.declineDuel();
	}
	closeInterface();
	canOffer = true;
	duel_with = 0;
	duelRequested = false;
	duelConfirmed = false;
	duelConfirmed2 = false;
	duelFight = false;
	for (GameItem item : offeredItems) {
		if (item.amount &lt; 1)
			continue;
		if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
			addItem(item.id, item.amount);
		} else {
			addItem(item.id, 1);
		}
	}
	offeredItems.clear();
}

public boolean DeclineDuel() {
	declineDuel();
	return true;
}
	public boolean duelButton(int button) {
	client other = getClient(duel_with);
	boolean found = false;
	if (System.currentTimeMillis() - lastButton &lt; 800) {
		return false;
	}
	if (inDuel &amp;&amp; !duelFight &amp;&amp; !duelConfirmed2 &amp;&amp; !other.duelConfirmed2) {
		for (int i = 0; i &lt; duelButtons.length; i++) {
			if (button == duelButtons[i]) {
				found = true;
				if (duelRule[i]) {
					duelRule[i] = false;
					other.duelRule[i] = false;
				} else {
					duelRule[i] = true;
					other.duelRule[i] = true;
				}
			}
		}
		if (found) {
			lastButton = System.currentTimeMillis();
			duelConfirmed = false;
			other.duelConfirmed = false;
			sendQuest("", 6684);
			other.sendQuest("", 6684);
			other.duelRule[i] = duelRule[i];
			RefreshDuelRules();
			other.RefreshDuelRules();
		}
	}
	return found;
}
public void duelPlayer(int pIndex) {
	try {
		if (!(pIndex &gt;= 2047)) {
			client duelPlayer = (client) server.playerHandler.players[pIndex];

			sM("Sending duel request...");
</code></pre>
<p>sM(“DUELING can be glitchy”);<br>
duelPlayer.sM(playerName + “:duelreq:”);<br>
} else {<br>
sM(“Dueling is currently disabled”);<br>
}<br>
} catch (Exception e) {<br>
sM(“attackPlayer: Invalid player index”);<br>
}<br>
}</p>
<pre><code>public void duelReq(int pid) {
	if (!server.dueling) {
		sM("Dueling has been temporarily disabled");
		return;
	}
	duel_with = pid;
	duelRequested = true;
	if (!validClient(duel_with))
		return;
	client other = getClient(duel_with);
	if (inTrade || inDuel || other.inDuel || other.inTrade
			|| other.duelFight || other.duelConfirmed
			|| other.duelConfirmed2) {
		sM("Other player is busy at the moment");
		duelRequested = false;
		return;
	}
	if (duelRequested &amp;&amp; other.duelRequested
			&amp;&amp; (duel_with == other.playerId)
			&amp;&amp; (other.duel_with == playerId)) {
		openDuel();
		other.openDuel();
	} else {
		sM("Sending duel request...");
		other.sM(playerName + ":duelreq:");
	}
}

public void DuelVictory() {
	client other = getClient(duel_with);
	if (validClient(duel_with)) {
		toX = 3367+misc.random(7);
		toY = 3276+misc.random(1);
		sM("You have defeated " + other.playerName + "!");
		sendQuest("" + other.combatLevel, 6839);
		sendQuest(other.playerName, 6840);
		currentHealth = playerLevel[playerHitpoints];
		playerLevel[0] = getLevelForXP(playerXP[0]);
		playerLevel[1] = getLevelForXP(playerXP[1]);
		playerLevel[2] = getLevelForXP(playerXP[2]);
		playerLevel[4] = getLevelForXP(playerXP[4]);
		playerLevel[5] = getLevelForXP(playerXP[5]);
		playerLevel[6] = getLevelForXP(playerXP[6]);
		sendFrame126("Prayer: "+playerLevel[5]+"/"+getLevelForXP(playerXP[5])+"", 687);
		resetfollowers();
		refreshSkills();
		Duelfinish();
		poisoned = false;
		poisonDmg = false;
		fighting = false;
		wonDuel = true;
		AtkPray = 0;
		StrPrayer = 0;
		DefPray = 0;
		RangePray = 0;
		MagePray = 0;
		PrayHeal = false;
		ProtItem = false;
		ProtMage = false;
		ProtRange = false;
		ProtMelee = false;
		Redemption = false;
		Retribution = false;
		Smite = false;
		Chivalry = false;
		Piety = false;
		isSkulled = false;
		lastSkull = 0;
		headIcon = 0;
		turnpray();


	}

public boolean fromDuel(int itemID, int fromSlot, int amount) {
	if (System.currentTimeMillis() - lastButton &lt; 800) {
		return false;
	}
	lastButton = System.currentTimeMillis();
	client other = getClient(duel_with);
	if (!inDuel || !validClient(duel_with) || !canOffer) {
		declineDuel();
		return false;
	}
	if (!Item.itemStackable[itemID] &amp;&amp; (amount &gt; 1)) {
		for (int a = 1; a &lt;= amount; a++) {
			int slot = findItem(itemID, playerItems, playerItemsN);
			if (slot &gt;= 0) {
				fromDuel(itemID, 0, 1);
			}
		}
	}
	boolean found = false;
	for (GameItem item : offeredItems) {
		if (item.id == itemID) {
			if (!item.stackable) {
				offeredItems.remove(item);
				found = true;
			} else {
				if (item.amount &gt; amount) {
					item.amount -= amount;
					found = true;
				} else {
					amount = item.amount;
					found = true;
					offeredItems.remove(item);
				}
			}
			break;
		}
	}
	if (found)
		addItem(itemID, amount);
	duelConfirmed = false;
	other.duelConfirmed = false;
	resetItems(3214);
	other.resetItems(3214);
	resetItems(3322);
	other.resetItems(3322);
	refreshDuelScreen();
	other.refreshDuelScreen();
	other.sendFrame126("", 6684);

	return true;
}


	public void confirmDuel() {
	client other = getClient(duel_with);
	if (!validClient(duel_with))
		declineDuel();
	String out = "";
	for (GameItem item : offeredItems) {
		if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
			out += getItemName(item.id) + " x " + misc.format(item.amount)
					+ ", ";
		} else {
			out += getItemName(item.id) + ", ";
		}
	}
	sendQuest(out, 6516);
	out = "";
	for (GameItem item : other.offeredItems) {
		if (Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
			out += getItemName(item.id) + " x " + misc.format(item.amount)
					+ ", ";
		} else {
			out += getItemName(item.id) + ", ";
		}
	}
	sendQuest(out, 6517);
	sendQuest("Movement will be disabled", 8242);
	for (int i = 8243; i &lt;= 8253; i++) {
		sendQuest("", i);
	}
	sendQuest("Hitpoints will be restored", 8250);
	sendQuest("", 6571);
	showInterface(6412);
}

public boolean isInDuelArena(int coordX, int coordY, int Type) {
		if ((coordY &gt;= 3279) &amp;&amp; (coordY &lt;= 3279) &amp;&amp; (coordX &lt;= 3355) &amp;&amp; (coordX &gt;= 3379)) {
	outStream.createFrameVarSize(104);
	outStream.writeByteC(2);
	outStream.writeByteA(0);
	outStream.writeString("Challenge");
	outStream.endFrameVarSize();
			return true;
		} else {

	outStream.createFrameVarSize(104);
	outStream.writeByteC(2);
	outStream.writeByteA(0);
	outStream.writeString("null");
	outStream.endFrameVarSize();
			return true;
	}
}
public void openDuel() {
	RefreshDuelRules();
	refreshDuelScreen();
	inDuel = true;
	client other = getClient(duel_with);
	sendQuest("Dueling with: " + other.playerName + " (level-"
			+ other.combatLevel + ")", 6671);
	sendQuest("", 6684);
	sendFrame248(6575, 3321);
	resetItems(3322);
}


		public void refreshDuelScreen() {
	client other = getClient(duel_with);
	if (!validClient(duel_with))
		return;
	outStream.createFrameVarSizeWord(53);
	outStream.writeWord(6669);
	outStream.writeWord(offeredItems.toArray().length);
	int current = 0;
	for (GameItem item : offeredItems) {
		if (item.amount &gt; 254) {
			outStream.writeByte(255); // item's stack count. if over 254,
			// write byte 255
			outStream.writeDWord_v2(item.amount); // and then the real
			// value with
			// writeDWord_v2
		} else {
			outStream.writeByte(item.amount);
		}
		if ((item.id &gt; 20000) || (item.id &lt; 0)) {
			item.id = 20000;
		}
		outStream.writeWordBigEndianA(item.id + 1); // item id
		current++;
	}
	if (current &lt; 27) {
		for (int i = current; i &lt; 28; i++) {
			outStream.writeByte(1);
			outStream.writeWordBigEndianA(-1);
		}
	}
	outStream.endFrameVarSizeWord();
	outStream.createFrameVarSizeWord(53);
	outStream.writeWord(6670);
	outStream.writeWord(other.offeredItems.toArray().length);
	current = 0;
	for (GameItem item : other.offeredItems) {
		if (item.amount &gt; 254) {
			outStream.writeByte(255); // item's stack count. if over 254,
			// write byte 255
			outStream.writeDWord_v2(item.amount); // and then the real
			// value with
			// writeDWord_v2
		} else {
			outStream.writeByte(item.amount);
		}
		if ((item.id &gt; 20000) || (item.id &lt; 0)) {
			item.id = 20000;
		}
		outStream.writeWordBigEndianA(item.id + 1); // item id
		current++;
	}
	if (current &lt; 27) {
		for (int i = current; i &lt; 28; i++) {
			outStream.writeByte(1);
			outStream.writeWordBigEndianA(-1);
		}
	}
	outStream.endFrameVarSizeWord();
}

public void RefreshDuelRules() {
	for (int i = 0; i &lt; duelLine.length; i++) {
		if (duelRule[i]) {
			sendQuest("@red@" + duelNames[i], duelLine[i]);
		} else {
			sendQuest("@cya@" + duelNames[i], duelLine[i]);
		}
	}
}
	public void itemsToVScreen(int x, int y) {
	Player p = handler.players[duelWith];
	if ((p != null) &amp;&amp; (p.playerId == playerId))
		return;
	for (int i = 0; i &lt; otherDuelItems.length; i++) {
		if ((otherDuelItems[i] &gt; 0) &amp;&amp; (otherDuelItemsN[i] &gt; 0)) {
			if (Item.itemStackable[otherDuelItems[i] - 1]) {
				ItemHandler.addItem(otherDuelItems[i] - 1, enemyX, enemyY,
						otherDuelItemsN[i], playerId, false);
			} else {
				int amount = otherDuelItemsN[i];
				for (int a = 1; a &lt;= amount; a++) {
					ItemHandler.addItem(otherDuelItems[i] - 1, enemyX,
							enemyY, 1, playerId, false);
				}
			}
		}

	}
	for (int i1 = 0; i1 &lt; duelItems.length; i1++) {
		if ((duelItems[i] &gt; 0) &amp;&amp; (duelItemsN[i] &gt; 0))
			addItem(duelItems[i1] - 1, duelItemsN[i1]);
	}
	// resetDuel();
}

public void itemsToVScreen_old() {
	outStream.createFrameVarSizeWord(53);
	outStream.writeWord(6822);
	outStream.writeWord(otherOfferedItems.toArray().length);
	for (GameItem item : otherOfferedItems) {
		if (item.amount &gt; 254) {
			outStream.writeByte(255); // item's stack count. if over 254,
			// write byte 255
			outStream.writeDWord_v2(item.amount); // and then the real
			// value with
			// writeDWord_v2
		} else {
			outStream.writeByte(item.amount);
		}
		if ((item.id &gt; 20000) || (item.id &lt; 0)) {
			item.id = 20000;
		}
		outStream.writeWordBigEndianA(item.id + 1); // item id
	}
	outStream.endFrameVarSizeWord();
}

public int GetDuelItemSlots() {
	int Slots = 0;
	for (int element : duelItems) {
		if (element &gt; 0) {
			Slots++;
		}
	}
	for (int element : otherDuelItems) {
		if (element &gt; 0) {
			Slots++;
		}
	}
	return Slots;
}

		
public void rightClickCheck() {
	if(!isInDuel()) {
		outStream.createFrameVarSize(104);
		outStream.writeByteC(2);
		outStream.writeByteA(0);
		outStream.writeString("Challenge");
		outStream.endFrameVarSize();
</code></pre>
<p>}<br>
[/code]</p>
<p>This is what im left with after i delete it.</p>
<p>[code]	public int randomLowTask()<br>
{<br>
return lowTask[(int) (Math.random() * lowTask.length)];<br>
}</p>
<pre><code>public int randomMediumTask() 
{
	return mediumTask[(int) (Math.random() * mediumTask.length)];
}

public int randomHighTask() 
{
	return highTask[(int) (Math.random() * highTask.length)];
}
	
if(isInWilderness(absX, absY, 1) || isInPitGame()) {
		outStream.createFrameVarSize(104);
		outStream.writeByteC(3);		
		outStream.writeByteA(0);		
		outStream.writeString("Attack");
		outStream.endFrameVarSize();
	}	
</code></pre>
<p>else<br>
{<br>
outStream.createFrameVarSize(104);<br>
outStream.writeByteC(3);<br>
outStream.writeByteA(0);<br>
outStream.writeString(“null”);<br>
outStream.endFrameVarSize();<br>
}<br>
}<br>
[/code]</p>
<p>Sorry the post is kind of long, ive tried multiple times, would post errors but the post is too long. Also its a delta.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779/1</link>
        <pubDate>Fri, 23 Jul 2010 21:15:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350779-1</guid>
        <source url="https://forum.moparisthebest.com/t/trying-to-delete-dueling/350779.rss">Trying to delete dueling</source>
      </item>
  </channel>
</rss>
