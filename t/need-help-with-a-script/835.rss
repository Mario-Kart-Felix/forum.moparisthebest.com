<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need help with a script</title>
    <link>https://forum.moparisthebest.com/t/need-help-with-a-script/835</link>
    <description>This script is supposed to go through the maze, the paths are stolen from sbot3.  There is one door (its commented next to in the code) that will not open.  It appears to have the same type as the other doors, but the closest door found is always some other door.  I also know that my code is poorly formatted and dosen&#39;t use the cool new java stuff, please don&#39;t remind me.

Also if it helps, i got the objects instance and used instanceof to find that it is of type Object3, where it seems that the other doors were of the Object1 class.  I also don&#39;t have a character in the maze to test this now.

[code]public class Maze extends RandomHandler{

       private static final int SHRINE = 3634;
       private static final int DOOR = 3628;

       private static final long WAITINCREMENT = 20000; //in ms, bigger number = less processing

       private static final Tile[] PATH1 = new Tile[]{
               new Tile(2928, 4597),
               new Tile(2921, 4599),
               new Tile(2914, 4600),
               new Tile(2910, 4598),
               new Tile(2915, 4596),
               new Tile(2903, 4594),
               new Tile(2908, 4592), //evil door that fucks up my script.
               new Tile(2898, 4585),
               new Tile(2903, 4588),
               new Tile(2902, 4575),
               new Tile(2906, 4585)
       };

       private static final Tile[] PATH2 = new Tile[] {
               new Tile(2924,4555),
               new Tile(2916,4553),
               new Tile(2926,4551),
               new Tile(2936,4560),
               new Tile(2934,4565),
               new Tile(2932,4561),
               new Tile(2930,4573),
               new Tile(2929,4582),
               new Tile(2930,4586),
               new Tile(2928,4588),
               new Tile(2926,4578),
               new Tile(2924,4583)
       };
       
       /*
        * Don&#39;t really understand this path - Stinky Keys
        *
       private static final Tile[] PATH3 = new Tile[] {
               new Tile(1,2);
       };
       */
       
       private static final Tile[] END = new Tile[]{
                new Tile(2916,4586),
                new Tile(2912,4584),
                new Tile(2918,4576),
                new Tile(2912,4572),
                new Tile(2910,4576)
       };

       private long waitUntil = 0;
       private boolean inMaze = false, testingDoor = false;
       private Tile[] currentPath;
       private int pathIndex = 0;
       
       
       
       public long run(long ticks)
       {
         if(inMaze)
         {
           if(isMoving())
             return 1000;
		   
		   if(findObject(SHRINE) &lt; 0)
		   {
		   	  log(&quot;Not really in the maze, apparently.&quot;);
		   	  inMaze = false;
		   	  return -1;
		   }
		   
		   
           if(testingDoor)
           {
             if((testingDoor = isMoving()) == false)
             {
               if(distanceTo(currentPath[pathIndex]) &lt;= 1)
               {
                 int closestDoor = findObject(DOOR);
           		 if(closestDoor &gt; 0)
             	 {
             	   if(distanceTo(objectPos(closestDoor)) &lt;= 1)
                   {
                     atObject(closestDoor, 1);
                     log(&quot;Found Door, Opening.&quot;);
                     pathIndex++;
                     return 2500; 
                   }
                 }
               }    
               if(pathIndex &gt; 0) {
                   pathIndex--;
                 log(&quot;Going back a tile in the path&quot;);
               }
               
               else
               {
                 if(java.util.Arrays.equals(currentPath, PATH1)) {
                   currentPath = PATH2;
                   pathIndex = PATH2.length - 1;
                   log(&quot;Switching to path2.&quot;);
                 }  
                 else if(java.util.Arrays.equals(currentPath, PATH2)){
                   log(&quot;Switching to path1&quot;);
                   currentPath = PATH1;
                   pathIndex = PATH1.length - 1;
                 }  
                 else
                 {
                   log(&quot;Something messed up on end path&quot;);
                   pathIndex = currentPath.length - 1;
                 }      
               }
             }                   
           return 1000;
           }  
           
           if(currentPath == null)
           {
                       if(myPlayer().x == 2933 &amp;&amp; myPlayer().y == 4597)
                       {
                          currentPath = PATH1;
                          log(&quot;Found Path1 by location.&quot;);
                       }  
                       else if(inArea(2932,4560,2933,4555) || inArea(2915,4556,2933,4555))
                       {
                          currentPath = PATH2;
                          log(&quot;Found Path2 by location.&quot;);
                       }   
                       else
                       {
                           log(&quot;Trying to walk on path1.&quot;);
                           currentPath = PATH1;
                           pathIndex = PATH1.length - 1;
                       }
           }

              
           if(myPlayer().x == 2910 &amp;&amp; myPlayer().y == 4576)
           {
	           atObject(findObject(SHRINE), 1);
	           log(&quot;Maze Solved.&quot;);
			   inMaze = false;
	           return 7500;
           }
           if(pathIndex == currentPath.length)
           {
             currentPath = END;
             pathIndex = 0;
           }
           log(&quot;Walking current path.&quot;);
           walk(currentPath[pathIndex]);
           testingDoor = true;
           return 4000;  
         }

         if(ticks &gt; waitUntil)
         {
                //log(WAITINCREMENT/1000 + &quot; seconds passed, checking for maze&quot;);
                if(findObject(SHRINE) &gt; 0)
                {
                   log(&quot;In Maze, trying to solve.&quot;);
	       		   inMaze = true;
                   currentPath = null;
                   return 100;
                }
                waitUntil = ticks + WAITINCREMENT;
         }
         return -1;
  }
}[/code]</description>
    
    <lastBuildDate>Mon, 27 Mar 2006 01:33:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-help-with-a-script/835.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need help with a script</title>
        <dc:creator><![CDATA[@Stinky_Keys Stinky Keys]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/stinky_keys">@Stinky_Keys</a> wrote:</p>
          <blockquote>
              <p>This script is supposed to go through the maze, the paths are stolen from sbot3.  There is one door (its commented next to in the code) that will not open.  It appears to have the same type as the other doors, but the closest door found is always some other door.  I also know that my code is poorly formatted and dosen’t use the cool new java stuff, please don’t remind me.</p>
<p>Also if it helps, i got the objects instance and used instanceof to find that it is of type Object3, where it seems that the other doors were of the Object1 class.  I also don’t have a character in the maze to test this now.</p>
<p>[code]public class Maze extends RandomHandler{</p>
<pre><code>   private static final int SHRINE = 3634;
   private static final int DOOR = 3628;

   private static final long WAITINCREMENT = 20000; //in ms, bigger number = less processing

   private static final Tile[] PATH1 = new Tile[]{
           new Tile(2928, 4597),
           new Tile(2921, 4599),
           new Tile(2914, 4600),
           new Tile(2910, 4598),
           new Tile(2915, 4596),
           new Tile(2903, 4594),
           new Tile(2908, 4592), //evil door that fucks up my script.
           new Tile(2898, 4585),
           new Tile(2903, 4588),
           new Tile(2902, 4575),
           new Tile(2906, 4585)
   };

   private static final Tile[] PATH2 = new Tile[] {
           new Tile(2924,4555),
           new Tile(2916,4553),
           new Tile(2926,4551),
           new Tile(2936,4560),
           new Tile(2934,4565),
           new Tile(2932,4561),
           new Tile(2930,4573),
           new Tile(2929,4582),
           new Tile(2930,4586),
           new Tile(2928,4588),
           new Tile(2926,4578),
           new Tile(2924,4583)
   };
   
   /*
    * Don't really understand this path - Stinky Keys
    *
   private static final Tile[] PATH3 = new Tile[] {
           new Tile(1,2);
   };
   */
   
   private static final Tile[] END = new Tile[]{
            new Tile(2916,4586),
            new Tile(2912,4584),
            new Tile(2918,4576),
            new Tile(2912,4572),
            new Tile(2910,4576)
   };

   private long waitUntil = 0;
   private boolean inMaze = false, testingDoor = false;
   private Tile[] currentPath;
   private int pathIndex = 0;
   
   
   
   public long run(long ticks)
   {
     if(inMaze)
     {
       if(isMoving())
         return 1000;
	   
	   if(findObject(SHRINE) &lt; 0)
	   {
	   	  log("Not really in the maze, apparently.");
	   	  inMaze = false;
	   	  return -1;
	   }
	   
	   
       if(testingDoor)
       {
         if((testingDoor = isMoving()) == false)
         {
           if(distanceTo(currentPath[pathIndex]) &lt;= 1)
           {
             int closestDoor = findObject(DOOR);
       		 if(closestDoor &gt; 0)
         	 {
         	   if(distanceTo(objectPos(closestDoor)) &lt;= 1)
               {
                 atObject(closestDoor, 1);
                 log("Found Door, Opening.");
                 pathIndex++;
                 return 2500; 
               }
             }
           }    
           if(pathIndex &gt; 0) {
               pathIndex--;
             log("Going back a tile in the path");
           }
           
           else
           {
             if(java.util.Arrays.equals(currentPath, PATH1)) {
               currentPath = PATH2;
               pathIndex = PATH2.length - 1;
               log("Switching to path2.");
             }  
             else if(java.util.Arrays.equals(currentPath, PATH2)){
               log("Switching to path1");
               currentPath = PATH1;
               pathIndex = PATH1.length - 1;
             }  
             else
             {
               log("Something messed up on end path");
               pathIndex = currentPath.length - 1;
             }      
           }
         }                   
       return 1000;
       }  
       
       if(currentPath == null)
       {
                   if(myPlayer().x == 2933 &amp;&amp; myPlayer().y == 4597)
                   {
                      currentPath = PATH1;
                      log("Found Path1 by location.");
                   }  
                   else if(inArea(2932,4560,2933,4555) || inArea(2915,4556,2933,4555))
                   {
                      currentPath = PATH2;
                      log("Found Path2 by location.");
                   }   
                   else
                   {
                       log("Trying to walk on path1.");
                       currentPath = PATH1;
                       pathIndex = PATH1.length - 1;
                   }
       }

          
       if(myPlayer().x == 2910 &amp;&amp; myPlayer().y == 4576)
       {
           atObject(findObject(SHRINE), 1);
           log("Maze Solved.");
		   inMaze = false;
           return 7500;
       }
       if(pathIndex == currentPath.length)
       {
         currentPath = END;
         pathIndex = 0;
       }
       log("Walking current path.");
       walk(currentPath[pathIndex]);
       testingDoor = true;
       return 4000;  
     }

     if(ticks &gt; waitUntil)
     {
            //log(WAITINCREMENT/1000 + " seconds passed, checking for maze");
            if(findObject(SHRINE) &gt; 0)
            {
               log("In Maze, trying to solve.");
       		   inMaze = true;
               currentPath = null;
               return 100;
            }
            waitUntil = ticks + WAITINCREMENT;
     }
     return -1;
</code></pre>
<p>}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-with-a-script/835/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-with-a-script/835/1</link>
        <pubDate>Mon, 27 Mar 2006 01:33:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-835-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-with-a-script/835.rss">Need help with a script</source>
      </item>
  </channel>
</rss>
