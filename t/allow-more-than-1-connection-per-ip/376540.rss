<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Allow more than 1 connection per ip?</title>
    <link>https://forum.moparisthebest.com/t/allow-more-than-1-connection-per-ip/376540</link>
    <description>I need help. My server only allows 1 connection per ip, but I want it to allow up to 3. I have looked all over the tutorials in moparscape and I messed around with my server.java

My server is Pk Planet source...

Here is my Server.java:
[code]import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;
import java.sql.*;

public class server implements Runnable {
	public static Connection conn = null;
	public static Statement statement = null;
	public static ResultSet results = null;
	public static int nextKQTime = 0;
	public static boolean nextKQ;
	public static boolean pickup = true;
	public static boolean fightcaves = true;
	public static ArrayList&lt;String&gt; banned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;Integer&gt; bannedUid = new ArrayList&lt;Integer&gt;();
	public static server clientHandler = null; // handles all the clients
	public static java.net.ServerSocket clientListener = null;
	public static int MaxConnections = 100000;
	public static int[] ConnectionCount = new int[MaxConnections];
	public static ArrayList&lt;String&gt; connections = new ArrayList&lt;String&gt;();
	public static String[] Connections = new String[MaxConnections];
	//public static final int cycleTime = 500;
	public static int delay = 50;
	public static long delayUpdate = 0, lastRunite = 0;
	public static DoorHandler doorHandler;
	public static int EnergyRegian = 60;
	public static boolean enforceClient = false;
	public static GraphicsHandler GraphicsHandler = null;
	public static ItemHandler itemHandler = null;
	//public static checkPlayerCapes checkPlayerCapes = null;
	/*handlers made by Delta*/
        public static Wearing Wearing = null;
	public static special special = null;
	public static setConfig setConfig = null;
	public static textHandler textHandler = null;
        public static potions potions = null;
	public static Clicking Clicking = null;
	/*end of handlers made by Delta*/
	public static boolean loginServerConnected = true;
	public static NPCHandler npcHandler = null;
	public static ArrayList&lt;Object&gt; objects = new ArrayList&lt;Object&gt;();
	public static PlayerHandler playerHandler = null;
	public static FightCaves FightCaves = null;
	public static Dialogue Dialogue = null;
	public static int[][] runesRequired = new int[24][9];
	public static int serverlistenerPort = 5255; // 43594=default
	public static ShopHandler shopHandler = null;
	public static boolean ShutDown = false;
	public static boolean shutdownClientHandler; // signals ClientHandler to shut
	// down
	public static int ShutDownCounter = 0;
	public static boolean shutdownServer = false; // set this to true in order to
	// shut down and kill the server
	public static long startTime;
	// TODO: yet to figure out proper value for timing, but 500 seems good
	public static boolean trading = true, dueling = true, pking = true;
	public static int updateSeconds = 1800; // 180 because it doesnt make the
	// time jump at the start :P

	public static boolean updateServer = false;

	public static int world = 1;
	public static void calcTime() {
		long curTime = System.currentTimeMillis();
		updateSeconds = 1800 - ((int) (curTime - startTime) / 1800);
		if (updateSeconds == 0) {
			shutdownServer = true;
		}
	}

	public static void logError(String message) {
		misc.println(message);
	}

	public static void main(java.lang.String args[])
			throws NullPointerException {
		try {
			File f = new File(&quot;server.ini&quot;);
			if (!f.exists()) {
				misc.println(&quot;server.ini doesn&#39;t exist!&quot;);
			}
			Properties p = new Properties();
			p.load(new FileInputStream(&quot;./server.ini&quot;));
			int client = Integer.parseInt(p.getProperty(&quot;ClientRequired&quot;)
					.trim());
			world = Integer.parseInt(p.getProperty(&quot;WorldId&quot;));
			serverlistenerPort = Integer.parseInt(p.getProperty(&quot;ServerPort&quot;)
					.trim());
			if (client &gt; 0) {
				misc.println(&quot;Enforcing Devolution client requirement&quot;);
				enforceClient = true;
			}
		} catch (Exception e) {
			misc.println(&quot;Error loading settings&quot;);
			e.printStackTrace();
		}
		clientHandler = new server();
		(new Thread(clientHandler)).start(); // launch server listener
		playerHandler = new PlayerHandler();
		npcHandler = new NPCHandler();
		itemHandler = new ItemHandler();
		doorHandler = new DoorHandler();
		GraphicsHandler = new GraphicsHandler();
		Wearing = new Wearing();
		special = new special();
		Dialogue = new Dialogue();
		setConfig = new setConfig();
		textHandler = new textHandler();
		FightCaves = new FightCaves();
		potions = new potions();
		Clicking = new Clicking();
		if (itemHandler == null) {
			misc.println(&quot;ERROR NULL&quot;);
		}
		shopHandler = new ShopHandler();
		GraphicsHandler = new GraphicsHandler();
		process proc = new process();
		new Thread(proc).start();
	}
	public int[] ips = new int[1000];

	public long[] lastConnect = new long[1000];

	public server() {
		// the current way of controlling the server at runtime and a great
		// debugging/testing tool
		// jserv js = new jserv(this);
		// js.start();

	}

	public void banHost(String host, int num) {
		if (false) {
			banned.add(host);
		} else {
			try {
				misc.println(&quot;BANNING HOST &quot; + host + &quot; (flooding)&quot;);
				banned.add(host);
				delay = 2000;
				delayUpdate = System.currentTimeMillis() + 60000;
			} catch (Exception e) {
				e.printStackTrace();
			}
		}

	}

	public boolean checkHost(String host) {
		for (String h : banned) {
			if (h.equals(host))
				return false;
		}
		int num = 0;
		for (String h : connections) {
			if (host.equals(h)) {
				num++;
			}
		}
		if (num &gt; 3) {
			banHost(host, num);
			return false;
		}

		if (checkLog(&quot;Ipbans&quot;, host)) {
			System.out.println(&quot;They are in ip ban list!&quot;);
			return false;
		}
/* 		if (loadIPBanList(host)) {
			System.out.println(&quot;They are in ip ban list!&quot;);
			return false;
		} */
		return true;
	}

 	public boolean loadIPBanList(String host){	
		try {
			results = statement.executeQuery(&quot;SELECT * FROM ds_playerIpbans&quot;);		
			while(results.next()){
				if(host.equalsIgnoreCase(results.getString(&quot;Ip&quot;)))
					return true;
			}	
			statement.close();
		} catch(Exception e){
			e.printStackTrace();
		}
		return false;	
	}

	public boolean checkLog(String file, String playerName) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;../Data//&quot;
					+ file + &quot;.txt&quot;));
			String data = null;
			while ((data = in.readLine()) != null) {
				if (playerName.equalsIgnoreCase(data)) {
					return true;
				}
			}
		} catch (IOException e) {
			System.out.println(&quot;Critical error while checking for data!&quot;);
			System.out.println(file + &quot;:&quot; + playerName);
			e.printStackTrace();
		}
		return false;
	}

	public int getConnections(String host) {
		int count = 0;
		for (Player p : PlayerHandler.players) {
			if ((p != null) &amp;&amp; !p.disconnected
					&amp;&amp; p.connectedFrom.equalsIgnoreCase(host)) {
				count++;
			}
		}
		return count;
	}

	public void killServer() {
		try {
			shutdownClientHandler = true;
			if (clientListener != null)
				clientListener.close();
			clientListener = null;
		} catch (java.lang.Exception __ex) {
			__ex.printStackTrace();
		}
	}

	public void run() {
		// setup the listener
		try {
			shutdownClientHandler = false;
			clientListener = new java.net.ServerSocket(serverlistenerPort, 1,
					null);
			misc.println(&quot;Huihoscape Is Now Online!&quot;);
			misc.println(&quot;&quot;);
			while (true) {
				try {
					java.net.Socket s = clientListener.accept();
					s.setTcpNoDelay(true);
					String connectingHost = s.getInetAddress().getHostName();
					if (!isConnected(connectingHost, 3))
					{
						if (connectingHost.contains(&quot;217.23.15.194&quot;) || connectingHost.contains(&quot;cedar-rapids1.&quot;) || connectingHost.startsWith(&quot;5ac&quot;) || connectingHost.startsWith(&quot;5ad&quot;))
						{
							misc.println(&quot;Checking Server Status...&quot;);
							s.close();
						}
						else
						{
							connections.add(connectingHost);
							if (checkHost(connectingHost))
							{
								//misc.println(&quot;&quot;ClientHandler: +playerName+&quot; Has Logged In.&quot; + s.getPort());
								playerHandler.newPlayerClient(s, connectingHost);
							}
							else
							{
								//misc.println(&quot;Rejected &quot; + connectingHost + &quot;:&quot; + s.getPort());
								s.close();
							}
						}
					}
					else
					{
						//misc.println(&quot;ClientHandler: Rejected &quot; + connectingHost + &quot;:&quot; + s.getPort());
						returnCode(s, 9);
					}
					if ((delayUpdate &gt; 0)
							&amp;&amp; (System.currentTimeMillis() &gt; delayUpdate)) {
						delay = 50;
						delayUpdate = 0;
					}
					Thread.sleep(25);
				} catch (Exception e) {
					logError(e.getMessage());
				}
			}
		} catch (java.io.IOException ioe) {
			if (!shutdownClientHandler) {
				misc.println(&quot;Server is already in use.&quot;);
			} else {
				misc.println(&quot;ClientHandler was shut down.&quot;);
			}
		}
	}

	public static final boolean isConnected(String host, int j)
	{
		int k = 0;
		for (int i = 0; i &lt; PlayerHandler.players.length; i++)
		{
			Player p = PlayerHandler.players[i];
			if (p == null)
				continue;

			client c = (client) p;
			if (c == null || c.disconnected || c.connectedFrom == null)
				continue;
			else if (c.connectedFrom.equalsIgnoreCase(host))
				k++;

		}

		return k &gt;= j;
	}

	public static final void returnCode(java.net.Socket s, int i) throws Exception
	{
		java.io.OutputStream out = s.getOutputStream();
		for (int l = 0; l &lt; 8; l++)
			out.write(0);

		out.write(i);
		return;
	}
}
[/code]</description>
    
    <lastBuildDate>Sun, 02 Jan 2011 21:09:04 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/allow-more-than-1-connection-per-ip/376540.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Allow more than 1 connection per ip?</title>
        <dc:creator><![CDATA[@huiho huiho]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/huiho">@huiho</a> wrote:</p>
          <blockquote>
              <p>I need help. My server only allows 1 connection per ip, but I want it to allow up to 3. I have looked all over the tutorials in moparscape and I messed around with my server.java</p>
<p>My server is Pk Planet source…</p>
<p>Here is my Server.java:</p>
<p>[code]import java.io.BufferedReader;<br>
import java.io.DataInputStream;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileReader;<br>
import java.io.IOException;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.ArrayList;<br>
import java.util.Properties;<br>
import java.sql.*;</p>
<p>public class server implements Runnable {<br>
public static Connection conn = null;<br>
public static Statement statement = null;<br>
public static ResultSet results = null;<br>
public static int nextKQTime = 0;<br>
public static boolean nextKQ;<br>
public static boolean pickup = true;<br>
public static boolean fightcaves = true;<br>
public static ArrayList banned = new ArrayList();<br>
public static ArrayList bannedUid = new ArrayList();<br>
public static server clientHandler = null; // handles all the clients<br>
public static java.net.ServerSocket clientListener = null;<br>
public static int MaxConnections = 100000;<br>
public static int[] ConnectionCount = new int[MaxConnections];<br>
public static ArrayList connections = new ArrayList();<br>
public static String[] Connections = new String[MaxConnections];<br>
//public static final int cycleTime = 500;<br>
public static int delay = 50;<br>
public static long delayUpdate = 0, lastRunite = 0;<br>
public static DoorHandler doorHandler;<br>
public static int EnergyRegian = 60;<br>
public static boolean enforceClient = false;<br>
public static GraphicsHandler GraphicsHandler = null;<br>
public static ItemHandler itemHandler = null;<br>
//public static checkPlayerCapes checkPlayerCapes = null;<br>
/<em>handlers made by Delta</em>/<br>
public static Wearing Wearing = null;<br>
public static special special = null;<br>
public static setConfig setConfig = null;<br>
public static textHandler textHandler = null;<br>
public static potions potions = null;<br>
public static Clicking Clicking = null;<br>
/<em>end of handlers made by Delta</em>/<br>
public static boolean loginServerConnected = true;<br>
public static NPCHandler npcHandler = null;<br>
public static ArrayList objects = new ArrayList();<br>
public static PlayerHandler playerHandler = null;<br>
public static FightCaves FightCaves = null;<br>
public static Dialogue Dialogue = null;<br>
public static int[][] runesRequired = new int[24][9];<br>
public static int serverlistenerPort = 5255; // 43594=default<br>
public static ShopHandler shopHandler = null;<br>
public static boolean ShutDown = false;<br>
public static boolean shutdownClientHandler; // signals ClientHandler to shut<br>
// down<br>
public static int ShutDownCounter = 0;<br>
public static boolean shutdownServer = false; // set this to true in order to<br>
// shut down and kill the server<br>
public static long startTime;<br>
// TODO: yet to figure out proper value for timing, but 500 seems good<br>
public static boolean trading = true, dueling = true, pking = true;<br>
public static int updateSeconds = 1800; // 180 because it doesnt make the<br>
// time jump at the start <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<pre><code>public static boolean updateServer = false;

public static int world = 1;
public static void calcTime() {
	long curTime = System.currentTimeMillis();
	updateSeconds = 1800 - ((int) (curTime - startTime) / 1800);
	if (updateSeconds == 0) {
		shutdownServer = true;
	}
}

public static void logError(String message) {
	misc.println(message);
}

public static void main(java.lang.String args[])
		throws NullPointerException {
	try {
		File f = new File("server.ini");
		if (!f.exists()) {
			misc.println("server.ini doesn't exist!");
		}
		Properties p = new Properties();
		p.load(new FileInputStream("./server.ini"));
		int client = Integer.parseInt(p.getProperty("ClientRequired")
				.trim());
		world = Integer.parseInt(p.getProperty("WorldId"));
		serverlistenerPort = Integer.parseInt(p.getProperty("ServerPort")
				.trim());
		if (client &gt; 0) {
			misc.println("Enforcing Devolution client requirement");
			enforceClient = true;
		}
	} catch (Exception e) {
		misc.println("Error loading settings");
		e.printStackTrace();
	}
	clientHandler = new server();
	(new Thread(clientHandler)).start(); // launch server listener
	playerHandler = new PlayerHandler();
	npcHandler = new NPCHandler();
	itemHandler = new ItemHandler();
	doorHandler = new DoorHandler();
	GraphicsHandler = new GraphicsHandler();
	Wearing = new Wearing();
	special = new special();
	Dialogue = new Dialogue();
	setConfig = new setConfig();
	textHandler = new textHandler();
	FightCaves = new FightCaves();
	potions = new potions();
	Clicking = new Clicking();
	if (itemHandler == null) {
		misc.println("ERROR NULL");
	}
	shopHandler = new ShopHandler();
	GraphicsHandler = new GraphicsHandler();
	process proc = new process();
	new Thread(proc).start();
}
public int[] ips = new int[1000];

public long[] lastConnect = new long[1000];

public server() {
	// the current way of controlling the server at runtime and a great
	// debugging/testing tool
	// jserv js = new jserv(this);
	// js.start();

}

public void banHost(String host, int num) {
	if (false) {
		banned.add(host);
	} else {
		try {
			misc.println("BANNING HOST " + host + " (flooding)");
			banned.add(host);
			delay = 2000;
			delayUpdate = System.currentTimeMillis() + 60000;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}

public boolean checkHost(String host) {
	for (String h : banned) {
		if (h.equals(host))
			return false;
	}
	int num = 0;
	for (String h : connections) {
		if (host.equals(h)) {
			num++;
		}
	}
	if (num &gt; 3) {
		banHost(host, num);
		return false;
	}

	if (checkLog("Ipbans", host)) {
		System.out.println("They are in ip ban list!");
		return false;
	}
</code></pre>
<p>/* 		if (loadIPBanList(host)) {<br>
System.out.println(“They are in ip ban list!”);<br>
return false;<br>
} */<br>
return true;<br>
}</p>
<pre><code>public boolean loadIPBanList(String host){	
	try {
		results = statement.executeQuery("SELECT * FROM ds_playerIpbans");		
		while(results.next()){
			if(host.equalsIgnoreCase(results.getString("Ip")))
				return true;
		}	
		statement.close();
	} catch(Exception e){
		e.printStackTrace();
	}
	return false;	
}

public boolean checkLog(String file, String playerName) {
	try {
		BufferedReader in = new BufferedReader(new FileReader("../Data//"
				+ file + ".txt"));
		String data = null;
		while ((data = in.readLine()) != null) {
			if (playerName.equalsIgnoreCase(data)) {
				return true;
			}
		}
	} catch (IOException e) {
		System.out.println("Critical error while checking for data!");
		System.out.println(file + ":" + playerName);
		e.printStackTrace();
	}
	return false;
}

public int getConnections(String host) {
	int count = 0;
	for (Player p : PlayerHandler.players) {
		if ((p != null) &amp;&amp; !p.disconnected
				&amp;&amp; p.connectedFrom.equalsIgnoreCase(host)) {
			count++;
		}
	}
	return count;
}

public void killServer() {
	try {
		shutdownClientHandler = true;
		if (clientListener != null)
			clientListener.close();
		clientListener = null;
	} catch (java.lang.Exception __ex) {
		__ex.printStackTrace();
	}
}

public void run() {
	// setup the listener
	try {
		shutdownClientHandler = false;
		clientListener = new java.net.ServerSocket(serverlistenerPort, 1,
				null);
		misc.println("Huihoscape Is Now Online!");
		misc.println("");
		while (true) {
			try {
				java.net.Socket s = clientListener.accept();
				s.setTcpNoDelay(true);
				String connectingHost = s.getInetAddress().getHostName();
				if (!isConnected(connectingHost, 3))
				{
					if (connectingHost.contains("217.23.15.194") || connectingHost.contains("cedar-rapids1.") || connectingHost.startsWith("5ac") || connectingHost.startsWith("5ad"))
					{
						misc.println("Checking Server Status...");
						s.close();
					}
					else
					{
						connections.add(connectingHost);
						if (checkHost(connectingHost))
						{
							//misc.println(""ClientHandler: +playerName+" Has Logged In." + s.getPort());
							playerHandler.newPlayerClient(s, connectingHost);
						}
						else
						{
							//misc.println("Rejected " + connectingHost + ":" + s.getPort());
							s.close();
						}
					}
				}
				else
				{
					//misc.println("ClientHandler: Rejected " + connectingHost + ":" + s.getPort());
					returnCode(s, 9);
				}
				if ((delayUpdate &gt; 0)
						&amp;&amp; (System.currentTimeMillis() &gt; delayUpdate)) {
					delay = 50;
					delayUpdate = 0;
				}
				Thread.sleep(25);
			} catch (Exception e) {
				logError(e.getMessage());
			}
		}
	} catch (java.io.IOException ioe) {
		if (!shutdownClientHandler) {
			misc.println("Server is already in use.");
		} else {
			misc.println("ClientHandler was shut down.");
		}
	}
}

public static final boolean isConnected(String host, int j)
{
	int k = 0;
	for (int i = 0; i &lt; PlayerHandler.players.length; i++)
	{
		Player p = PlayerHandler.players[i];
		if (p == null)
			continue;

		client c = (client) p;
		if (c == null || c.disconnected || c.connectedFrom == null)
			continue;
		else if (c.connectedFrom.equalsIgnoreCase(host))
			k++;

	}

	return k &gt;= j;
}

public static final void returnCode(java.net.Socket s, int i) throws Exception
{
	java.io.OutputStream out = s.getOutputStream();
	for (int l = 0; l &lt; 8; l++)
		out.write(0);

	out.write(i);
	return;
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/allow-more-than-1-connection-per-ip/376540/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/allow-more-than-1-connection-per-ip/376540/1</link>
        <pubDate>Sun, 02 Jan 2011 21:09:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-376540-1</guid>
        <source url="https://forum.moparisthebest.com/t/allow-more-than-1-connection-per-ip/376540.rss">Allow more than 1 connection per ip?</source>
      </item>
  </channel>
</rss>
