<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache Downloading BAR</title>
    <link>https://forum.moparisthebest.com/t/cache-downloading-bar/554636</link>
    <description>[center]Hello guys i am having some trouble with my cache downloader... I do not understand it..

Ok so I added cache downloader, and I know how to do it because i have done it 1000 times...

But for some reason the little downloading bar wont work.. This is what it looks like..

[IMG]http://i.imgur.com/TIwvMpr.png[/img][/center]

[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;https://dl.dropbox.com/s/3g8pjkhp2z1nw68/Innovation.zip&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}

[/code]

Anyone know how to fix?</description>
    
    <lastBuildDate>Thu, 25 Feb 2016 18:28:08 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-downloading-bar/554636.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache Downloading BAR</title>
        <dc:creator><![CDATA[@shamu308 shamu308]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shamu308">@shamu308</a> wrote:</p>
          <blockquote>
              <p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;

    private final int BUFFER = 1024;

    /*
     * Only things you need to change
     *
     */
    private final int VERSION = 1; // Version of cache
    private String cacheLink = "https://dl.dropboxusercontent.com/u/18230376/fusionexpertpr_cache.zip"; // Link to cache

    private String fileToExtract = getCacheDir() + getArchivedName();

    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
            System.out.println(text);
    }


    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
            System.out.println(text);
    }

    private String getCacheDir() {
            return signlink.findcachedir();
    }

    private String getCacheLink() {
            return cacheLink;
    }

    private int getCacheVersion() {
            return VERSION;
    }

    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            
            if(!location.exists()) {
                    drawLoadingText("Downloading Cache Please wait...");
                    downloadFile(getCacheLink(), getArchivedName());

                    unZip();
                    System.out.println("UNZIP");

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
                            drawLoadingText("Downloading Cache Please wait...");
                            downloadFile(getCacheLink(), getArchivedName());

                            unZip();
                            System.out.println("UNZIP");

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
    
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
            
                    byte[] data = new byte[BUFFER]; 
    
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

    
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "FusionExpertPR: Downloading Cache [" + percentage + "%]");

                    }

                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("FusionExpertPR: Unzipping...");

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }

    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }



    private void unZip() {

        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;

            while((e=zin.getNextEntry()) != null) {

                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {

                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
                System.out.println("unzipping2 " + e.getName());
            }
            zin.close();

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void unzip(ZipInputStream zin, String s) 
            throws IOException {

            FileOutputStream out = new FileOutputStream(s);
            //System.out.println("unzipping " + s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
            }
            out.close();
    }
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloading-bar/554636/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloading-bar/554636/2</link>
        <pubDate>Thu, 25 Feb 2016 18:28:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554636-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloading-bar/554636.rss">Cache Downloading BAR</source>
      </item>
      <item>
        <title>Cache Downloading BAR</title>
        <dc:creator><![CDATA[@mattadog18 mattadog18]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mattadog18">@mattadog18</a> wrote:</p>
          <blockquote>
              <p>[center]Hello guys i am having some trouble with my cache downloader… I do not understand it…</p>
<p>Ok so I added cache downloader, and I know how to do it because i have done it 1000 times…</p>
<p>But for some reason the little downloading bar wont work… This is what it looks like…</p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="http://i.imgur.com/TIwvMpr.png" title="TIwvMpr.png" rel="nofollow noopener"><img src="http://i.imgur.com/TIwvMpr.png" alt width="690" height="467"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">TIwvMpr.png</span><span class="informations">771×522</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div>[/center]</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 1; // Version of cache
	private String cacheLink = "https://dl.dropbox.com/s/3g8pjkhp2z1nw68/Innovation.zip"; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
		
		if(!location.exists()) {
			drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
		} else {
			if(!version.exists()) {
				drawLoadingText("Downloading Cache Please wait...");
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + "/" +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

			}

			System.out.println(localFileName + "\t" + numWritten);
			drawLoadingText("Finished downloading "+getArchivedName()+"!");

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf('/');
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println("error retreiving archivaed name.");
		}
		return "";
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println("unzipping2 " + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println("unzipping " + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
</code></pre>
<p>Anyone know how to fix?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloading-bar/554636/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloading-bar/554636/1</link>
        <pubDate>Thu, 04 Feb 2016 03:08:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554636-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloading-bar/554636.rss">Cache Downloading BAR</source>
      </item>
  </channel>
</rss>
