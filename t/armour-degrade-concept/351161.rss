<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Armour Degrade [Concept]</title>
    <link>https://forum.moparisthebest.com/t/armour-degrade-concept/351161</link>
    <description>So.. I&#39;m sure people have completed methods of degrading armour(armor) pieces for barrows. As of the moment I am working on a method to do so.

Info: Degrade.class

This is what I have so far. Is there anything that could make this more efficient than creating multiple arrays. If so please inform me.
[code=java]/*
 * Degrading handler
 * @author Corey
 * @time 5:46am
 * @date 7/10/10
 */


package com.CScape.player;

public class Degrade {

	public boolean headDeg;
	public boolean bodyDeg;
	public boolean legDeg;
	public boolean weaponDeg;

	/*
	 * [0]Head, [1]Body, [2]Leg, [3]Weapon
	 */
	public int currentHits[] = { 0, 0, 0, 0 };


	/*
	 * The array for completely fixed pieces
	 */
	public int fixedPieces[][] { { 4708, 4710, 4712, 4714 }, //Ahrim Fixed
					{ 4716, 4718, 4720, 4722 }, //Dharok Fixed
					{ 4724, 4726, 4728, 4730 }, //Guthan Fixed
					{ 4732, 4734, 4736, 4738 }, //Karil Fixed
					{ 4745, 4747, 4749, 4751 }, //Torag Fixed
					{ 4753, 4755, 4757, 4759 } //Verac Fixed
	};

	/*
	 * The array for almost new pieces
	 */
	public int 100Pieces[][] { { }, //Ahrim 100
				{ }, //Dharok 100
				{ }, //Guthan 100
				{ }, //Karil 100
				{ }, //Torag 100
				{ } //Verac 100
	};

	/*
	 * The array for semi-broken pieces
	 */
	public int 75Pieces[][] { { }, //Ahrim 75
				{ }, //Dharok 75
				{ }, //Guthan 75
				{ }, //Karil 75
				{ }, //Torag 75
				{ } //Verac 75
	};

	/*
	 * The array for half broken pieces
	 */
	public int 50Pieces[][] { { }, //Ahrim 50
				{ }, //Dharok 50
				{ }, //Guthan 50
				{ }, //Karil 50
				{ }, //Torag 50
				{ } //Verac 50
	};

	/*
	 * The array for nearly broken pieces
	 */
	public int 25Pieces[][] { { }, //Ahrim 25
				{ }, //Dharok 25
				{ }, //Guthan 25
				{ }, //Karil 25
				{ }, //Torag 25
				{ } //Verac 25
	};

	/*
	 * The array for broken pieces
	 */
	public int 0Pieces[][] { { }, //Ahrim 0
				{ }, //Dharok 0
				{ }, //Guthan 0
				{ }, //Karil 0
				{ }, //Torag 0
				{ } //Verac 0
	};

	/*
	 * Where we begin degrading
	 */
	public void degrade(clientHandler p) {

	}

}[/code]</description>
    
    <lastBuildDate>Mon, 26 Jul 2010 00:49:45 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/armour-degrade-concept/351161.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Armour Degrade [Concept]</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“LilXCj, post:1, topic:351161”]So… I’m sure people have completed methods of degrading armour(armor) pieces for barrows. As of the moment I am working on a method to do so.</p>
<p>Info: Degrade.class</p>
<p>This is what I have so far. Is there anything that could make this more efficient than creating multiple arrays. If so please inform me.</p>
<p>[code=java]/*</p>
<ul>
<li>Degrading handler</li>
<li>
<span class="mention">@author</span> Corey</li>
<li>
<a class="mention" href="/u/time">@time</a> 5:46am</li>
<li>
<a class="mention" href="/u/date">@date</a> 7/10/10<br>
*/</li>
</ul>
<p>package com.CScape.player;</p>
<p>public class Degrade {</p>
<pre><code>public boolean headDeg;
public boolean bodyDeg;
public boolean legDeg;
public boolean weaponDeg;

/*
 * [0]Head, [1]Body, [2]Leg, [3]Weapon
 */
public int currentHits[] = { 0, 0, 0, 0 };


/*
 * The array for completely fixed pieces
 */
public int fixedPieces[][] { { 4708, 4710, 4712, 4714 }, //Ahrim Fixed
				{ 4716, 4718, 4720, 4722 }, //Dharok Fixed
				{ 4724, 4726, 4728, 4730 }, //Guthan Fixed
				{ 4732, 4734, 4736, 4738 }, //Karil Fixed
				{ 4745, 4747, 4749, 4751 }, //Torag Fixed
				{ 4753, 4755, 4757, 4759 } //Verac Fixed
};

/*
 * The array for almost new pieces
 */
public int 100Pieces[][] { { }, //Ahrim 100
			{ }, //Dharok 100
			{ }, //Guthan 100
			{ }, //Karil 100
			{ }, //Torag 100
			{ } //Verac 100
};

/*
 * The array for semi-broken pieces
 */
public int 75Pieces[][] { { }, //Ahrim 75
			{ }, //Dharok 75
			{ }, //Guthan 75
			{ }, //Karil 75
			{ }, //Torag 75
			{ } //Verac 75
};

/*
 * The array for half broken pieces
 */
public int 50Pieces[][] { { }, //Ahrim 50
			{ }, //Dharok 50
			{ }, //Guthan 50
			{ }, //Karil 50
			{ }, //Torag 50
			{ } //Verac 50
};

/*
 * The array for nearly broken pieces
 */
public int 25Pieces[][] { { }, //Ahrim 25
			{ }, //Dharok 25
			{ }, //Guthan 25
			{ }, //Karil 25
			{ }, //Torag 25
			{ } //Verac 25
};

/*
 * The array for broken pieces
 */
public int 0Pieces[][] { { }, //Ahrim 0
			{ }, //Dharok 0
			{ }, //Guthan 0
			{ }, //Karil 0
			{ }, //Torag 0
			{ } //Verac 0
};

/*
 * Where we begin degrading
 */
public void degrade(clientHandler p) {

}
</code></pre>
<p>}[/code][/quote]</p>
<p>HashMap&lt;Integer, Integer&gt; armors = new HashMap&lt;Integer, Integer&gt;();//The key is the original item, the value is the result from degredation. So if item  A Turns into item C after degrading, you would just do ‘armors.put(A, C);’, etc.</p>
<p>Something like this should be close to what you desire:</p>
<p>[code]<br>
public class ArmorDegradation {<br>
public static final long DEGRADE_HITS = 250;//Number of attacks the armor can withstand.<br>
private static HashMap&lt;Integer, Integer&gt; degradeable = new HashMap&lt;Integer, Integer&gt;();</p>
<pre><code>static {
	//degradeable.put(veracHelm100, veracHelm75);
	//...
}

public static int getDegradedItem(int orig) {
	return degradeable.get(orig);
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/armour-degrade-concept/351161/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/armour-degrade-concept/351161/2</link>
        <pubDate>Mon, 26 Jul 2010 00:49:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351161-2</guid>
        <source url="https://forum.moparisthebest.com/t/armour-degrade-concept/351161.rss">Armour Degrade [Concept]</source>
      </item>
      <item>
        <title>Armour Degrade [Concept]</title>
        <dc:creator><![CDATA[@LilXCj LilXCj]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lilxcj">@LilXCj</a> wrote:</p>
          <blockquote>
              <p>So… I’m sure people have completed methods of degrading armour(armor) pieces for barrows. As of the moment I am working on a method to do so.</p>
<p>Info: Degrade.class</p>
<p>This is what I have so far. Is there anything that could make this more efficient than creating multiple arrays. If so please inform me.</p>
<p>[code=java]/*</p>
<ul>
<li>Degrading handler</li>
<li>
<span class="mention">@author</span> Corey</li>
<li>
<a class="mention" href="/u/time">@time</a> 5:46am</li>
<li>
<a class="mention" href="/u/date">@date</a> 7/10/10<br>
*/</li>
</ul>
<p>package com.CScape.player;</p>
<p>public class Degrade {</p>
<pre><code>public boolean headDeg;
public boolean bodyDeg;
public boolean legDeg;
public boolean weaponDeg;

/*
 * [0]Head, [1]Body, [2]Leg, [3]Weapon
 */
public int currentHits[] = { 0, 0, 0, 0 };


/*
 * The array for completely fixed pieces
 */
public int fixedPieces[][] { { 4708, 4710, 4712, 4714 }, //Ahrim Fixed
				{ 4716, 4718, 4720, 4722 }, //Dharok Fixed
				{ 4724, 4726, 4728, 4730 }, //Guthan Fixed
				{ 4732, 4734, 4736, 4738 }, //Karil Fixed
				{ 4745, 4747, 4749, 4751 }, //Torag Fixed
				{ 4753, 4755, 4757, 4759 } //Verac Fixed
};

/*
 * The array for almost new pieces
 */
public int 100Pieces[][] { { }, //Ahrim 100
			{ }, //Dharok 100
			{ }, //Guthan 100
			{ }, //Karil 100
			{ }, //Torag 100
			{ } //Verac 100
};

/*
 * The array for semi-broken pieces
 */
public int 75Pieces[][] { { }, //Ahrim 75
			{ }, //Dharok 75
			{ }, //Guthan 75
			{ }, //Karil 75
			{ }, //Torag 75
			{ } //Verac 75
};

/*
 * The array for half broken pieces
 */
public int 50Pieces[][] { { }, //Ahrim 50
			{ }, //Dharok 50
			{ }, //Guthan 50
			{ }, //Karil 50
			{ }, //Torag 50
			{ } //Verac 50
};

/*
 * The array for nearly broken pieces
 */
public int 25Pieces[][] { { }, //Ahrim 25
			{ }, //Dharok 25
			{ }, //Guthan 25
			{ }, //Karil 25
			{ }, //Torag 25
			{ } //Verac 25
};

/*
 * The array for broken pieces
 */
public int 0Pieces[][] { { }, //Ahrim 0
			{ }, //Dharok 0
			{ }, //Guthan 0
			{ }, //Karil 0
			{ }, //Torag 0
			{ } //Verac 0
};

/*
 * Where we begin degrading
 */
public void degrade(clientHandler p) {

}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/armour-degrade-concept/351161/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/armour-degrade-concept/351161/1</link>
        <pubDate>Sun, 25 Jul 2010 23:06:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351161-1</guid>
        <source url="https://forum.moparisthebest.com/t/armour-degrade-concept/351161.rss">Armour Degrade [Concept]</source>
      </item>
  </channel>
</rss>
