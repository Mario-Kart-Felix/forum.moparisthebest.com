<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Multi-Revision Server Help</title>
    <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237</link>
    <description>I&#39;m trying to get my server to connect to a 562 (first time ever programming anything higher than a 317 so forgive me if I made a mistake) client but for some reason the return code that&#39;s being sent is &quot;Unexpected server response. Please try using a different world.&quot; I&#39;m almost certain that I&#39;m sending the correct return code (2). Sometimes it sends different return codes such as &quot;Invalid username&quot; and whatnot. Any ideas? Thanks!

EDIT: I debugged my server and the name and password won&#39;t show up when printing them out.

[CODE]
	/*
	 * (non-Javadoc)
	 * @see java.lang.Runnable#run()
	 */
	@Override
	public void run() {
		this.setOutStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));
		this.getOutStream().setCurrentOffset(0);
		this.setInStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));
		this.getInStream().setCurrentOffset(0);
		long serverSessionKey = ((long) (Math.random() * 99999999D) &lt;&lt; 32) + (long) (Math.random() * 99999999D);
		long clientSessionKey = 0;
		this.fillInStream(2);
		this.setLoginStage(LoginStage.FIRST);
		System.out.println(&quot;First stage.&quot;);
		if (this.getLoginStage() == LoginStage.FIRST) {
			System.out.println(&quot;First Call: &quot; + Main.getMain().getRevisionType().getRevisionID());
			this.setLoginStage(LoginStage.FOURTH);
			final byte opcodeUpdate = (byte) this.getInStream().readUnsignedByte();
			if (opcodeUpdate == 15) {
				System.out.println(&quot;Opcode is 15!&quot;);
				this.setLoginStage(LoginStage.SECOND);
			}
			this.getInStream().readUnsignedByte();
		}
		if (this.getLoginStage() == LoginStage.SECOND) {
			System.out.println(&quot;Second stage.&quot;);
			@SuppressWarnings(&quot;unused&quot;)
			final short clientRevision = (short) this.getInStream().readUnsignedWord();
			try {
				this.getOutputStream().write(0);
				this.setLoginStage(LoginStage.THIRD);
			} catch (final IOException ioe) {
				ioe.printStackTrace();
			}
		}
		if (this.getLoginStage() == LoginStage.THIRD) {
			System.out.println(&quot;Third stage.&quot;);
			Main.getMain().setRevisionType(RevisionType.FIVE_SIXTY_TWO);
			System.out.println(&quot;Second Call: &quot; + Main.getMain().getRevisionType().getRevisionID());
			for (int i = 0; i &lt; Constants.UPDATE_KEYS.length; i++) {
				try {
					this.getOutputStream().write(Constants.UPDATE_KEYS[i]);
				} catch (final IOException ioe) {
					ioe.printStackTrace();
				}
			}
		}
		if (this.getLoginStage() == LoginStage.FOURTH) {
			System.out.println(&quot;Fourth stage.&quot;);
			System.out.println(&quot;Sending an unsigned byte!&quot;);
			this.getInStream().readUnsignedByte();
			System.out.println(&quot;Sending a for loop.&quot;);
			for (int i = 0; i &lt; 8; i++) {
				try {
					this.getOutputStream().write(0);
				} catch (final IOException ioe) {
					ioe.printStackTrace();
				}
			}
			System.out.println(&quot;Sent a for loop.&quot;);
			try {
				this.getOutputStream().write(0);
			} catch (final IOException ioe) {
				ioe.printStackTrace();
			}
			System.out.println(&quot;Sending server session key.&quot;);
			this.getOutStream().writeQWord(serverSessionKey);
			this.flushOutStream();
			this.fillInStream(2);
			System.out.println(&quot;Sending login type.&quot;);
			final int loginType = this.getInStream().readUnsignedByte();
			if ((loginType != 16) &amp;&amp; (loginType != 18)) {
				System.out.println(&quot;Login type is not 16 and 18&quot;);
				return;
			}
			System.out.println(&quot;Sending login packet size.&quot;);
			final int loginPacketSize = this.getInStream().readUnsignedByte();
			int loginEncryptPacketSize = loginPacketSize - 40;
			System.out.println(&quot;Third Call: &quot; + Main.getMain().getRevisionType().getRevisionID());
			if (Main.getMain().getRevisionType().getRevisionID() == 317) {
				this.fillInStream(loginPacketSize);
				System.out.println(&quot;Sending magic numer.&quot;);
				if (this.getInStream().readUnsignedByte() != 255) {
					System.out.println(&quot;Magic number is not 255.&quot;);
					return;
				}
			}
			System.out.println(&quot;Sending revision.&quot;);
			this.getInStream().readUnsignedWord();
			if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {
				System.out.println(&quot;Printing out memory.&quot;);
				this.getInStream().readUnsignedByte(); // memory.
			}
			if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {
				for (int i = 0; i &lt; 9; i++) {
					Integer.toHexString(this.getInStream().readDWord());
				}
				loginEncryptPacketSize--;
				int tmp = this.getInStream().readUnsignedByte();
				if (loginEncryptPacketSize != tmp) {
					return;
				}
				tmp = this.getInStream().readUnsignedByte();
				if (tmp != 10) {
					return;
				}
			}
			if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
				this.getInStream().readString();
			}
			System.out.println(&quot;Printing out client and server session keys.&quot;);
			clientSessionKey = this.getInStream().readQWord();
			serverSessionKey = this.getInStream().readQWord();
			long nameLong = 0;
			@SuppressWarnings(&quot;unused&quot;)
			final int hash;
			if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
				nameLong = this.getInStream().readQWord();
				hash = (int) (31 &amp; (nameLong &gt;&gt; 16));
			}
			if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {
				@SuppressWarnings(&quot;unused&quot;)
				final int userID = this.getInStream().readDWord();
			}
			final String name = Misc.longToName(nameLong);
			System.out.println(&quot;Name: &quot; + name);
			final String password = this.getInStream().readString();
			System.out.println(&quot;Password: &quot; + password);
			System.out.println(&quot;Printed out username, user id, and password.&quot;);
			final int[] sessionKey = new int[4];
			sessionKey[0] = (int) (clientSessionKey &gt;&gt; 32);
			sessionKey[1] = (int) clientSessionKey;
			sessionKey[2] = (int) (serverSessionKey &gt;&gt; 32);
			sessionKey[3] = (int) serverSessionKey;
			for (int i = 0; i &lt; 4; i++) {
				Integer.toHexString(sessionKey[i]);
			}
			this.setInStreamDecryption(new ISAACRandomGen(sessionKey));
			for (byte i = 0; i &lt; 4; i++) {
				sessionKey[i] += 50;
			}
			for (byte i = 0; i &lt; 4; i++) {
				Integer.toHexString(sessionKey[i]);
			}
			this.setOutStreamDecryption(new ISAACRandomGen(sessionKey));
			this.getOutStream().setPacketEncryption(this.getOutStreamDecryption());
			final Entity player = new Player(name, null);
			try {
				System.out.println(&quot;Sending return code of 2.&quot;);
				this.getOutputStream().write(2); // return code
				if (player.getName().equals(&quot;Josh&quot;)) {
					System.out.println(&quot;Sending player rights of 2 for &quot; + player.getName());
					this.getOutputStream().write(2); // rights
				} else {
					this.getOutputStream().write(0); // rights
				}
				this.getOutStream().writeByte(0);
				if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
					System.out.println(&quot;Sending login bytes.&quot;);
					this.getOutStream().writeByte((byte) 0);
					this.getOutStream().writeByte((byte) 0);
					this.getOutStream().writeByte((byte) 0);
					this.getOutStream().writeByte((byte) 0);
					this.getOutStream().writeByte((byte) 0);
					this.getOutStream().writeWord(1); // slot (playerID - same thing?)
					this.getOutStream().writeByte((byte) 1);
					this.getOutStream().writeByte((byte) 1); // members
					this.flushOutStream();
				}
			} catch (final IOException ioe) {
				ioe.printStackTrace();
			}
			if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {
				this.getOutStream().createFrame(249);
				this.getOutStream().writeByteA(1);
				this.getOutStream().writeWordA(1);
				this.getOutStream().createFrame(107);
				this.getOutStream().createFrameVarSize(253);
				this.getOutStream().writeString(&quot;Welcome to RS3 Newstart!&quot;);
				this.getOutStream().endFrameVarSize();
				this.flushOutStream();
				for (byte b = 0; b &lt; 25; b++) {
					this.setSkillLevel(b, (byte) 0, (byte) 0);
				}
				this.setChatOptions((byte) 0, (byte) 0, (byte) 0); // reset private messaging options
				final short[] tabInterfaces = {
						2423, 3917, 638, 3213, 1644, 5608, 1151, 1, 5065, 5715, // modern
						2449, 4445, 147, 6299
				};
				for (byte b = 0; b &lt; 14; b++) {
					this.setTabInterface(b, tabInterfaces[b]);
				}
				// this.setSidebarInterface(6, 12855); // ancient

				// this.getPA().showInterface(3559);
				// this.newPlayer = false;
				this.showMenuOption(4, 0, &quot;Trade With&quot;);
				this.showMenuOption(5, 0, &quot;Follow&quot;);
				this.showMenuOption(6, 0, &quot;Ban&quot;);
				this.showMenuOption(7, 0, &quot;Kick&quot;);
				this.showMenuOption(8, 0, &quot;Mute&quot;);

				this.getOutStream().createFrame(73);
				this.getOutStream().writeWordA(player.getLocation().getRegionX() + 6);
				this.getOutStream().writeWord(player.getLocation().getRegionY() + 6);
				this.flushOutStream();
				this.getOutStream().createFrame(81);
				this.getOutStream().writeWord(0); 		// placeholder for size of this packet.
				final int ofs = this.getOutStream().getCurrentOffset();
				this.getOutStream().initBitAccess();

				// update this player
				this.getOutStream().writeBits(1, 1);		// set to true if updating thisPlayer
				this.getOutStream().writeBits(2, 3);		// updateType - 3=jump to pos
				// the following applies to type 3 only
				this.getOutStream().writeBits(2, 0);		// height level (0-3)
				this.getOutStream().writeBits(1, 1);		// set to true, if discarding walking queue (after teleport e.g.)
				this.getOutStream().writeBits(1, 1);		// set to true, if this player is not in local list yet???
				this.getOutStream().writeBits(7, 0x20);	// y-position
				this.getOutStream().writeBits(7, 0x20);	// x-position

				// update other players...?!
				this.getOutStream().writeBits(8, 0);		// number of players to add

				// add new players???
				this.getOutStream().writeBits(11, 2047);	// magic EOF
				this.getOutStream().finishBitAccess();

				this.getOutStream().writeByte(0);		// ???? needed that to stop client from crashing

				this.getOutStream().writeFrameSizeWord(this.getOutStream().getCurrentOffset() - ofs);
			}
			if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
				this.getOutStream().createFrameVarSizeWord(76);
				this.getOutStream().writeWordBigEndianA(player.getLocation().getRegionX());
				this.getOutStream().writeWord(player.getLocation().getLocalY());
				this.getOutStream().writeByte(0);
				this.getOutStream().writeByteA(0);
				boolean forceRegion = (((player.getLocation().getRegionX() / 8) == 48) || ((player.getLocation().getRegionX() / 8) == 49)) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 48);
				if (((player.getLocation().getRegionX() / 8) == 48) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 148)) {
					forceRegion = true;
				}
				for (int xCalc = (player.getLocation().getRegionX() - 6) / 8; xCalc &lt;= ((player.getLocation().getRegionX() + 6) / 8); xCalc++) {
					for (int yCalc = (player.getLocation().getRegionY() - 6) / 8; yCalc &lt;= ((player.getLocation().getRegionY() + 6) / 8); yCalc++) {
						final int region = yCalc + (xCalc &lt;&lt; 8);
						final int[] mapData = Main.getMain().getMapData().getRegionData(region);
						if (forceRegion &amp;&amp; ((yCalc == 49) || (yCalc == 149) || (yCalc == 147) || (xCalc == 50) || ((xCalc == 49) &amp;&amp; (yCalc == 47)))) {
							this.getOutStream().writeDWord(-1);
							this.getOutStream().writeDWord(-1);
							this.getOutStream().writeDWord(-1);
							this.getOutStream().writeDWord(-1);
						} else {
							this.getOutStream().writeDWord(mapData[0]);
							this.getOutStream().writeDWord(mapData[1]);
							this.getOutStream().writeDWord(mapData[2]);
							this.getOutStream().writeDWord(mapData[3]);
						}
					}
				}
				this.getOutStream().writeByteA(player.getLocation().getZ());
				this.getOutStream().writeWord(player.getLocation().getLocalX());
				this.getOutStream().writeWord(player.getLocation().getRegionY());
				this.getOutStream().endFrameVarSizeWord();


				this.getOutStream().createFrameVarSizeWord(107);
				this.getOutStream().writeWord(0); 		// placeholder for size of this packet.
				final int ofs = this.getOutStream().getCurrentOffset();
				this.getOutStream().initBitAccess();

				// update this player
				this.getOutStream().writeBits(1, 1);		// set to true if updating thisPlayer
				this.getOutStream().writeBits(2, 3);		// updateType - 3=jump to pos
				// the following applies to type 3 only
				this.getOutStream().writeBits(2, 0);		// height level (0-3)
				this.getOutStream().writeBits(1, 1);		// set to true, if discarding walking queue (after teleport e.g.)
				this.getOutStream().writeBits(1, 1);		// set to true, if this player is not in local list yet???
				this.getOutStream().writeBits(7, 0x20);	// y-position
				this.getOutStream().writeBits(7, 0x20);	// x-position

				// update other players...?!
				this.getOutStream().writeBits(8, 0);		// number of players to add

				// add new players???
				this.getOutStream().writeBits(11, 2047);	// magic EOF
				this.getOutStream().finishBitAccess();

				this.getOutStream().writeByte(0);		// ???? needed that to stop client from crashing

				this.getOutStream().writeFrameSizeWord(this.getOutStream().getCurrentOffset() - ofs);
			}
			this.flushOutStream();
			this.setClientConnected(true);
			// new TaskSystem(player, this.getOutStream(), this.getOutputStream());
			final GameEngine gameEngine = new GameEngine((Player) player);
			gameEngine.getPlayerList().add((Player) player);
		}
	}
[/CODE]


This is what the console in Eclipse shows:
[CODE]
Loading map data!
Networking Frame started in 445ms.
Loaded mapdata.
RuneScape Server started in 1024ms.
IO started in 18ms.
First stage.
First Call: 317
Opcode is 15!
Second stage.
Third stage.
Second Call: 562
First stage.
First Call: 562
Fourth stage.
Sending an unsigned byte!
Sending a for loop.
Sent a for loop.
Sending server session key.
Sending login type.
Sending login packet size.
Third Call: 562
Sending revision.
Printing out client and server session keys.
Name: 
Password: 
Printed out username, user id, and password.
Sending return code of 2.
Sending login bytes.
[/CODE]

*Took this straight from rune-server since I didn&#39;t feel like retyping it.

EDIT #2: I get the following error after changing my server up a bit.
[CODE]
Error: fm.U({...},-91) T3 - true,261,4720,-1234525018,1516466596,1516466596,1130748942 qj.BA({...},104,0,261) qj.O({...},261,8610,0) uj.B(false) client.M(77) | Class23_Sub4_Sub3.method377:201 Class158.method2357:335 Class158.method2360:522 Class202.method2723:90 client.method43:682 Applet_Sub1.method41:317 Applet_Sub1.run:799 java.lang.Thread.run | java.lang.RuntimeException
error_game_crash
[/CODE]

Also, what is the difference between XTEA keys vs Update keys? Are they the same thing or no?

EDIT #3: I found out that T3 errors deal with mapdata. Is this correct? If so, would it mean that I&#39;m missing mapdata and that&#39;s the problem?</description>
    
    <lastBuildDate>Wed, 21 May 2014 20:46:00 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Multi-Revision Server Help</title>
        <dc:creator><![CDATA[@Rodrigues Rodrigues]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodrigues">@Rodrigues</a> wrote:</p>
          <blockquote>
              <p>Much better - I have a better understanding now of XTEA keys so thanks. I’m still having trouble with this T3 error. Anybody know why the client is causing a T3 error?</p>
<p>[CODE]<br>
/*<br>
* (non-Javadoc)<br>
* <span class="mention">@see</span> java.lang.Runnable#run()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void run() {<br>
this.setOutStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));<br>
this.getOutStream().setCurrentOffset(0);<br>
this.setInStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));<br>
this.getInStream().setCurrentOffset(0);<br>
long serverSessionKey = ((long) (Math.random() * 99999999D) &lt;&lt; 32) + (long) (Math.random() * 99999999D);<br>
long clientSessionKey = 0;<br>
this.fillInStream(2);<br>
this.setLoginStage(LoginStage.FIRST);<br>
System.out.println(“First stage.”);<br>
if (this.getLoginStage() == LoginStage.FIRST) {<br>
System.out.println("First Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
this.setLoginStage(LoginStage.FOURTH);<br>
final byte opcodeUpdate = (byte) this.getInStream().readUnsignedByte();<br>
if (opcodeUpdate == 15) {<br>
System.out.println(“Opcode is 15!”);<br>
this.setLoginStage(LoginStage.SECOND);<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final int nameHash = this.getInStream().readUnsignedByte();<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
this.getOutStream().writeByte(0);<br>
this.getOutStream().writeQWord(0);<br>
this.flushOutStream();<br>
this.getInStream().setCurrentOffset(0);<br>
}<br>
}<br>
if (this.getLoginStage() == LoginStage.SECOND) {<br>
System.out.println(“Second stage.”);<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final short clientRevision = (short) this.getInStream().readUnsignedWord();<br>
try {<br>
this.getOutputStream().write(0);<br>
this.setLoginStage(LoginStage.THIRD);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
if (this.getLoginStage() == LoginStage.THIRD) {<br>
System.out.println(“Third stage.”);<br>
Main.getMain().setRevisionType(RevisionType.FIVE_SIXTY_TWO);<br>
System.out.println("Second Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
for (int i = 0; i &lt; Constants.UPDATE_KEYS.length; i++) {<br>
try {<br>
this.getOutputStream().write(Constants.UPDATE_KEYS[i]);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
}<br>
if (this.getLoginStage() == LoginStage.FOURTH) {<br>
System.out.println(“Fourth stage.”);<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Sending an unsigned byte!”);<br>
this.getInStream().readUnsignedByte();<br>
System.out.println(“Sending a for loop.”);<br>
for (int i = 0; i &lt; 9; i++) {<br>
try {<br>
this.getOutputStream().write(0);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
System.out.println(“Sent a for loop.”);<br>
}<br>
// this.getOutStream().writeByte(0);<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Sending server session key.”);<br>
this.getOutStream().writeQWord(serverSessionKey);<br>
}<br>
this.flushOutStream(); //////<br>
this.fillInStream(2); //////<br>
System.out.println(“Sending login type.”);<br>
final int loginType = this.getInStream().readUnsignedByte();<br>
if ((loginType != 16) &amp;&amp; (loginType != 18)) {<br>
System.out.println("Login type is not 16 and 18 - " + loginType);<br>
return;<br>
}<br>
int loginPacketSize = 0;<br>
int loginEncryptPacketSize = 0;<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Sending login packet size.”);<br>
loginPacketSize = this.getInStream().readUnsignedByte(); /////<br>
loginEncryptPacketSize = loginPacketSize - 40; /////<br>
System.out.println("Third Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
this.fillInStream(loginPacketSize);<br>
System.out.println(“Sending magic numer.”);<br>
if (this.getInStream().readUnsignedByte() != 255) {<br>
System.out.println(“Magic number is not 255.”);<br>
return;<br>
}<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
this.getInStream().readSkip(2);<br>
}<br>
System.out.println(“Sending revision.”);<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
short revision = 0;<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
revision = (short) this.getInStream().readUnsignedWord();<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
revision = (short) this.getInStream().readDWord();<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Printing out memory.”);<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final int memory = this.getInStream().readUnsignedByte(); // memory.<br>
for (int i = 0; i &lt; 9; i++) {<br>
Integer.toHexString(this.getInStream().readDWord());<br>
}<br>
loginEncryptPacketSize–;<br>
int tmp = this.getInStream().readUnsignedByte();<br>
if (loginEncryptPacketSize != tmp) {<br>
return;<br>
}<br>
tmp = this.getInStream().readUnsignedByte();<br>
if (tmp != 10) {<br>
return;<br>
}<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
this.getInStream().readSkip(30);<br>
this.getInStream().readString();<br>
this.getInStream().readSkip(143);<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Printing out client and server session keys.”); // PRINT OUT FOR 317 ONLY? 562 ALSO?<br>
clientSessionKey = this.getInStream().readQWord(); // PRINT OUT FOR 317 ONLY? 562 ALSO?<br>
serverSessionKey = this.getInStream().readQWord(); // PRINT OUT FOR 317 ONLY? 562 ALSO?<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final int userID = this.getInStream().readDWord();<br>
}<br>
long username = 0;<br>
String name = null;<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
username = this.getInStream().readQWord();<br>
name = Text.fixName(Text.longToString(username)).trim();<br>
System.out.println("Name: " + name);<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
name = this.getInStream().readString();<br>
System.out.println("Name: " + name);<br>
}<br>
final String password = this.getInStream().readString();<br>
System.out.println("Password: " + password);<br>
System.out.println(“Printed out username, user id, and password.”);<br>
final int[] sessionKey = new int[4];<br>
sessionKey[0] = (int) (clientSessionKey &gt;&gt; 32);<br>
sessionKey[1] = (int) clientSessionKey;<br>
sessionKey[2] = (int) (serverSessionKey &gt;&gt; 32);<br>
sessionKey[3] = (int) serverSessionKey;<br>
for (int i = 0; i &lt; 4; i++) {<br>
Integer.toHexString(sessionKey[i]);<br>
}<br>
this.setInStreamDecryption(new ISAACRandomGen(sessionKey));<br>
for (byte i = 0; i &lt; 4; i++) {<br>
sessionKey[i] += 50;<br>
}<br>
for (byte i = 0; i &lt; 4; i++) {<br>
Integer.toHexString(sessionKey[i]);<br>
}<br>
this.setOutStreamDecryption(new ISAACRandomGen(sessionKey));<br>
this.getOutStream().setPacketEncryption(this.getOutStreamDecryption());<br>
final Entity player = new Player(name, null);<br>
try {<br>
System.out.println(“Sending return code of 2.”);<br>
this.getOutputStream().write(2); // return code<br>
if (player.getName().equals(“Josh”)) {<br>
System.out.println("Sending player rights of 2 for " + player.getName());<br>
this.getOutputStream().write(2); // rights<br>
} else {<br>
this.getOutputStream().write(0); // rights<br>
}<br>
this.getOutStream().writeByte(0);<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
System.out.println(“Sending login bytes.”);<br>
this.getOutputStream().write((byte) 0);<br>
this.getOutputStream().write((byte) 0);<br>
this.getOutputStream().write((byte) 0);<br>
this.getOutputStream().write((byte) 0);<br>
this.getOutputStream().write((byte) 0);<br>
this.getOutStream().writeWord(1); // slot (playerID - same thing?)<br>
this.getOutputStream().write((byte) 1);<br>
this.getOutputStream().write((byte) 1); // members<br>
this.flushOutStream();<br>
}<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
this.getOutStream().createFrame(249);<br>
this.getOutStream().writeByteA(1);<br>
this.getOutStream().writeWordA(1);<br>
this.getOutStream().createFrame(107);<br>
this.getOutStream().createFrameVarSize(253);<br>
this.getOutStream().writeString(“Welcome to RS3 Newstart!”);<br>
this.getOutStream().endFrameVarSize();<br>
this.flushOutStream();<br>
for (byte b = 0; b &lt; 25; b++) {<br>
this.setSkillLevel(b, (byte) 0, (byte) 0);<br>
}<br>
this.setChatOptions((byte) 0, (byte) 0, (byte) 0); // reset private messaging options<br>
final short[] tabInterfaces = {<br>
2423, 3917, 638, 3213, 1644, 5608, 1151, 1, 5065, 5715, // modern<br>
2449, 4445, 147, 6299<br>
};<br>
for (byte b = 0; b &lt; 14; b++) {<br>
this.setTabInterface(b, tabInterfaces[b]);<br>
}<br>
// this.setSidebarInterface(6, 12855); // ancient</p>
<pre><code>			// this.getPA().showInterface(3559);
			// this.newPlayer = false;
			this.showMenuOption(4, 0, "Trade With");
			this.showMenuOption(5, 0, "Follow");
			this.showMenuOption(6, 0, "Ban");
			this.showMenuOption(7, 0, "Kick");
			this.showMenuOption(8, 0, "Mute");

			this.getOutStream().createFrame(73);
			this.getOutStream().writeWordA(player.getLocation().getRegionX() + 6);
			this.getOutStream().writeWord(player.getLocation().getRegionY() + 6);
			this.flushOutStream();
			this.getOutStream().createFrame(81);
			this.getOutStream().writeWord(0); 		// placeholder for size of this packet.
			final int ofs = this.getOutStream().getCurrentOffset();
			this.getOutStream().initBitAccess();

			// update this player
			this.getOutStream().writeBits(1, 1);		// set to true if updating thisPlayer
			this.getOutStream().writeBits(2, 3);		// updateType - 3=jump to pos
			// the following applies to type 3 only
			this.getOutStream().writeBits(2, 0);		// height level (0-3)
			this.getOutStream().writeBits(1, 1);		// set to true, if discarding walking queue (after teleport e.g.)
			this.getOutStream().writeBits(1, 1);		// set to true, if this player is not in local list yet???
			this.getOutStream().writeBits(7, 0x20);	// y-position
			this.getOutStream().writeBits(7, 0x20);	// x-position

			// update other players...?!
			this.getOutStream().writeBits(8, 0);		// number of players to add

			// add new players???
			this.getOutStream().writeBits(11, 2047);	// magic EOF
			this.getOutStream().finishBitAccess();

			this.getOutStream().writeByte(0);		// ???? needed that to stop client from crashing

			this.getOutStream().writeFrameSizeWord(this.getOutStream().getCurrentOffset() - ofs);
		}
		if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
			System.out.println("Sending map region packet.");
			this.getOutStream().createFrameVarSizeWord(76);
			this.getOutStream().writeWordBigEndianA(player.getLocation().getRegionX());
			this.getOutStream().writeWord(player.getLocation().getLocalY());
			this.getOutStream().writeByte(0);
			this.getOutStream().writeByteA(0);
			boolean forceRegion = (((player.getLocation().getRegionX() / 8) == 48) || ((player.getLocation().getRegionX() / 8) == 49)) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 48);
			if (((player.getLocation().getRegionX() / 8) == 48) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 148)) {
				forceRegion = true;
			}
			for (int xCalc = (player.getLocation().getRegionX() - 6) / 8; xCalc &lt;= ((player.getLocation().getRegionX() + 6) / 8); xCalc++) {
				for (int yCalc = (player.getLocation().getRegionY() - 6) / 8; yCalc &lt;= ((player.getLocation().getRegionY() + 6) / 8); yCalc++) {
					final int region = yCalc + (xCalc &lt;&lt; 8);
					final int[] mapData = Main.getMain().getMapData().getRegionData(region);
					if (forceRegion &amp;&amp; ((yCalc == 49) || (yCalc == 149) || (yCalc == 147) || (xCalc == 50) || ((xCalc == 49) &amp;&amp; (yCalc == 47)))) {
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
					} else {
						this.getOutStream().writeDWord(mapData[0]);
						this.getOutStream().writeDWord(mapData[1]);
						this.getOutStream().writeDWord(mapData[2]);
						this.getOutStream().writeDWord(mapData[3]);
					}
				}
			}
			this.getOutStream().writeByteA(player.getLocation().getZ());
			this.getOutStream().writeWord(player.getLocation().getLocalX());
			this.getOutStream().writeWord(player.getLocation().getRegionY());
			this.getOutStream().endFrameVarSizeWord();

			this.getOutStream().createFrame(50);
			this.getOutStream().writeWordA(548);
			this.getOutStream().writeWord(0);
			this.getOutStream().writeByteS(0);

			this.getOutStream().createFrame(50);
			this.getOutStream().writeWordA(549);
			this.getOutStream().writeWord(0);
			this.getOutStream().writeByteS(0);
		}
		this.flushOutStream();
		this.setClientConnected(true);
		// new TaskSystem(player, this.getOutStream(), this.getOutputStream());
		final GameEngine gameEngine = new GameEngine((Player) player);
		gameEngine.getPlayerList().add((Player) player);
	}
}
</code></pre>
<p>[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237/5</link>
        <pubDate>Wed, 21 May 2014 20:46:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543237-5</guid>
        <source url="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss">Multi-Revision Server Help</source>
      </item>
      <item>
        <title>Multi-Revision Server Help</title>
        <dc:creator><![CDATA[@Vain1 Vain_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vain1">@Vain1</a> wrote:</p>
          <blockquote>
              <p>may be wrong in posting this, but this is how I understand it.</p>
<p>the entire game map data is stored in the cache located on the update server. the map data is only downloaded and stored to the users computer when the map data is loaded in game, this on demand downloads.</p>
<p>XTEA keys are not actual map data, but essentially key values to where that data is in the cache.</p>
<p>this is why the key generators are possible but not fully accurate.</p>
<p>[hr]<br>
again this is how I believe for it to work, so I may be wrong.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237/4</link>
        <pubDate>Wed, 21 May 2014 16:10:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543237-4</guid>
        <source url="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss">Multi-Revision Server Help</source>
      </item>
      <item>
        <title>Multi-Revision Server Help</title>
        <dc:creator><![CDATA[@Rodrigues Rodrigues]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodrigues">@Rodrigues</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="543237">
<div class="title">
<div class="quote-controls"></div>
 Vain_:</div>
<blockquote>
<p>the login protocol between the revisions differ greatly.  I can’t really help you with that, but I can tell you that the update keys (uKeys or crcs) are not the same as XTEAs (map data)</p>
</blockquote>
</aside>
<p>I’m a little confused about XTEAs. Do you just load the mapdata.dat (or packed.dat - whichever one) or do you load XTEA keys some other way? Are XTEA keys actually different than mapdata.dat or are they both the same exact thing?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237/3</link>
        <pubDate>Wed, 21 May 2014 12:24:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543237-3</guid>
        <source url="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss">Multi-Revision Server Help</source>
      </item>
      <item>
        <title>Multi-Revision Server Help</title>
        <dc:creator><![CDATA[@Vain1 Vain_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vain1">@Vain1</a> wrote:</p>
          <blockquote>
              <p>the login protocol between the revisions differ greatly.  I can’t really help you with that, but I can tell you that the update keys (uKeys or crcs) are not the same as XTEAs (map data)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237/2</link>
        <pubDate>Wed, 21 May 2014 01:08:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543237-2</guid>
        <source url="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss">Multi-Revision Server Help</source>
      </item>
      <item>
        <title>Multi-Revision Server Help</title>
        <dc:creator><![CDATA[@Rodrigues Rodrigues]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodrigues">@Rodrigues</a> wrote:</p>
          <blockquote>
              <p>I’m trying to get my server to connect to a 562 (first time ever programming anything higher than a 317 so forgive me if I made a mistake) client but for some reason the return code that’s being sent is “Unexpected server response. Please try using a different world.” I’m almost certain that I’m sending the correct return code (2). Sometimes it sends different return codes such as “Invalid username” and whatnot. Any ideas? Thanks!</p>
<p>EDIT: I debugged my server and the name and password won’t show up when printing them out.</p>
<p>[CODE]<br>
/*<br>
* (non-Javadoc)<br>
* <span class="mention">@see</span> java.lang.Runnable#run()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void run() {<br>
this.setOutStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));<br>
this.getOutStream().setCurrentOffset(0);<br>
this.setInStream(new IOPacketBuffer(new byte[Constants.BUFFER_SIZE]));<br>
this.getInStream().setCurrentOffset(0);<br>
long serverSessionKey = ((long) (Math.random() * 99999999D) &lt;&lt; 32) + (long) (Math.random() * 99999999D);<br>
long clientSessionKey = 0;<br>
this.fillInStream(2);<br>
this.setLoginStage(LoginStage.FIRST);<br>
System.out.println(“First stage.”);<br>
if (this.getLoginStage() == LoginStage.FIRST) {<br>
System.out.println("First Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
this.setLoginStage(LoginStage.FOURTH);<br>
final byte opcodeUpdate = (byte) this.getInStream().readUnsignedByte();<br>
if (opcodeUpdate == 15) {<br>
System.out.println(“Opcode is 15!”);<br>
this.setLoginStage(LoginStage.SECOND);<br>
}<br>
this.getInStream().readUnsignedByte();<br>
}<br>
if (this.getLoginStage() == LoginStage.SECOND) {<br>
System.out.println(“Second stage.”);<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final short clientRevision = (short) this.getInStream().readUnsignedWord();<br>
try {<br>
this.getOutputStream().write(0);<br>
this.setLoginStage(LoginStage.THIRD);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
if (this.getLoginStage() == LoginStage.THIRD) {<br>
System.out.println(“Third stage.”);<br>
Main.getMain().setRevisionType(RevisionType.FIVE_SIXTY_TWO);<br>
System.out.println("Second Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
for (int i = 0; i &lt; Constants.UPDATE_KEYS.length; i++) {<br>
try {<br>
this.getOutputStream().write(Constants.UPDATE_KEYS[i]);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
}<br>
if (this.getLoginStage() == LoginStage.FOURTH) {<br>
System.out.println(“Fourth stage.”);<br>
System.out.println(“Sending an unsigned byte!”);<br>
this.getInStream().readUnsignedByte();<br>
System.out.println(“Sending a for loop.”);<br>
for (int i = 0; i &lt; 8; i++) {<br>
try {<br>
this.getOutputStream().write(0);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
}<br>
System.out.println(“Sent a for loop.”);<br>
try {<br>
this.getOutputStream().write(0);<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
System.out.println(“Sending server session key.”);<br>
this.getOutStream().writeQWord(serverSessionKey);<br>
this.flushOutStream();<br>
this.fillInStream(2);<br>
System.out.println(“Sending login type.”);<br>
final int loginType = this.getInStream().readUnsignedByte();<br>
if ((loginType != 16) &amp;&amp; (loginType != 18)) {<br>
System.out.println(“Login type is not 16 and 18”);<br>
return;<br>
}<br>
System.out.println(“Sending login packet size.”);<br>
final int loginPacketSize = this.getInStream().readUnsignedByte();<br>
int loginEncryptPacketSize = loginPacketSize - 40;<br>
System.out.println("Third Call: " + Main.getMain().getRevisionType().getRevisionID());<br>
if (Main.getMain().getRevisionType().getRevisionID() == 317) {<br>
this.fillInStream(loginPacketSize);<br>
System.out.println(“Sending magic numer.”);<br>
if (this.getInStream().readUnsignedByte() != 255) {<br>
System.out.println(“Magic number is not 255.”);<br>
return;<br>
}<br>
}<br>
System.out.println(“Sending revision.”);<br>
this.getInStream().readUnsignedWord();<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
System.out.println(“Printing out memory.”);<br>
this.getInStream().readUnsignedByte(); // memory.<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
for (int i = 0; i &lt; 9; i++) {<br>
Integer.toHexString(this.getInStream().readDWord());<br>
}<br>
loginEncryptPacketSize–;<br>
int tmp = this.getInStream().readUnsignedByte();<br>
if (loginEncryptPacketSize != tmp) {<br>
return;<br>
}<br>
tmp = this.getInStream().readUnsignedByte();<br>
if (tmp != 10) {<br>
return;<br>
}<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
this.getInStream().readString();<br>
}<br>
System.out.println(“Printing out client and server session keys.”);<br>
clientSessionKey = this.getInStream().readQWord();<br>
serverSessionKey = this.getInStream().readQWord();<br>
long nameLong = 0;<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final int hash;<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
nameLong = this.getInStream().readQWord();<br>
hash = (int) (31 &amp; (nameLong &gt;&gt; 16));<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
<span class="mention">@SuppressWarnings</span>(“unused”)<br>
final int userID = this.getInStream().readDWord();<br>
}<br>
final String name = Misc.longToName(nameLong);<br>
System.out.println("Name: " + name);<br>
final String password = this.getInStream().readString();<br>
System.out.println("Password: " + password);<br>
System.out.println(“Printed out username, user id, and password.”);<br>
final int[] sessionKey = new int[4];<br>
sessionKey[0] = (int) (clientSessionKey &gt;&gt; 32);<br>
sessionKey[1] = (int) clientSessionKey;<br>
sessionKey[2] = (int) (serverSessionKey &gt;&gt; 32);<br>
sessionKey[3] = (int) serverSessionKey;<br>
for (int i = 0; i &lt; 4; i++) {<br>
Integer.toHexString(sessionKey[i]);<br>
}<br>
this.setInStreamDecryption(new ISAACRandomGen(sessionKey));<br>
for (byte i = 0; i &lt; 4; i++) {<br>
sessionKey[i] += 50;<br>
}<br>
for (byte i = 0; i &lt; 4; i++) {<br>
Integer.toHexString(sessionKey[i]);<br>
}<br>
this.setOutStreamDecryption(new ISAACRandomGen(sessionKey));<br>
this.getOutStream().setPacketEncryption(this.getOutStreamDecryption());<br>
final Entity player = new Player(name, null);<br>
try {<br>
System.out.println(“Sending return code of 2.”);<br>
this.getOutputStream().write(2); // return code<br>
if (player.getName().equals(“Josh”)) {<br>
System.out.println("Sending player rights of 2 for " + player.getName());<br>
this.getOutputStream().write(2); // rights<br>
} else {<br>
this.getOutputStream().write(0); // rights<br>
}<br>
this.getOutStream().writeByte(0);<br>
if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {<br>
System.out.println(“Sending login bytes.”);<br>
this.getOutStream().writeByte((byte) 0);<br>
this.getOutStream().writeByte((byte) 0);<br>
this.getOutStream().writeByte((byte) 0);<br>
this.getOutStream().writeByte((byte) 0);<br>
this.getOutStream().writeByte((byte) 0);<br>
this.getOutStream().writeWord(1); // slot (playerID - same thing?)<br>
this.getOutStream().writeByte((byte) 1);<br>
this.getOutStream().writeByte((byte) 1); // members<br>
this.flushOutStream();<br>
}<br>
} catch (final IOException ioe) {<br>
ioe.printStackTrace();<br>
}<br>
if (Main.getMain().getRevisionType() == RevisionType.THREE_ONE_SEVEN) {<br>
this.getOutStream().createFrame(249);<br>
this.getOutStream().writeByteA(1);<br>
this.getOutStream().writeWordA(1);<br>
this.getOutStream().createFrame(107);<br>
this.getOutStream().createFrameVarSize(253);<br>
this.getOutStream().writeString(“Welcome to RS3 Newstart!”);<br>
this.getOutStream().endFrameVarSize();<br>
this.flushOutStream();<br>
for (byte b = 0; b &lt; 25; b++) {<br>
this.setSkillLevel(b, (byte) 0, (byte) 0);<br>
}<br>
this.setChatOptions((byte) 0, (byte) 0, (byte) 0); // reset private messaging options<br>
final short[] tabInterfaces = {<br>
2423, 3917, 638, 3213, 1644, 5608, 1151, 1, 5065, 5715, // modern<br>
2449, 4445, 147, 6299<br>
};<br>
for (byte b = 0; b &lt; 14; b++) {<br>
this.setTabInterface(b, tabInterfaces[b]);<br>
}<br>
// this.setSidebarInterface(6, 12855); // ancient</p>
<pre><code>			// this.getPA().showInterface(3559);
			// this.newPlayer = false;
			this.showMenuOption(4, 0, "Trade With");
			this.showMenuOption(5, 0, "Follow");
			this.showMenuOption(6, 0, "Ban");
			this.showMenuOption(7, 0, "Kick");
			this.showMenuOption(8, 0, "Mute");

			this.getOutStream().createFrame(73);
			this.getOutStream().writeWordA(player.getLocation().getRegionX() + 6);
			this.getOutStream().writeWord(player.getLocation().getRegionY() + 6);
			this.flushOutStream();
			this.getOutStream().createFrame(81);
			this.getOutStream().writeWord(0); 		// placeholder for size of this packet.
			final int ofs = this.getOutStream().getCurrentOffset();
			this.getOutStream().initBitAccess();

			// update this player
			this.getOutStream().writeBits(1, 1);		// set to true if updating thisPlayer
			this.getOutStream().writeBits(2, 3);		// updateType - 3=jump to pos
			// the following applies to type 3 only
			this.getOutStream().writeBits(2, 0);		// height level (0-3)
			this.getOutStream().writeBits(1, 1);		// set to true, if discarding walking queue (after teleport e.g.)
			this.getOutStream().writeBits(1, 1);		// set to true, if this player is not in local list yet???
			this.getOutStream().writeBits(7, 0x20);	// y-position
			this.getOutStream().writeBits(7, 0x20);	// x-position

			// update other players...?!
			this.getOutStream().writeBits(8, 0);		// number of players to add

			// add new players???
			this.getOutStream().writeBits(11, 2047);	// magic EOF
			this.getOutStream().finishBitAccess();

			this.getOutStream().writeByte(0);		// ???? needed that to stop client from crashing

			this.getOutStream().writeFrameSizeWord(this.getOutStream().getCurrentOffset() - ofs);
		}
		if (Main.getMain().getRevisionType() == RevisionType.FIVE_SIXTY_TWO) {
			this.getOutStream().createFrameVarSizeWord(76);
			this.getOutStream().writeWordBigEndianA(player.getLocation().getRegionX());
			this.getOutStream().writeWord(player.getLocation().getLocalY());
			this.getOutStream().writeByte(0);
			this.getOutStream().writeByteA(0);
			boolean forceRegion = (((player.getLocation().getRegionX() / 8) == 48) || ((player.getLocation().getRegionX() / 8) == 49)) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 48);
			if (((player.getLocation().getRegionX() / 8) == 48) &amp;&amp; ((player.getLocation().getRegionY() / 8) == 148)) {
				forceRegion = true;
			}
			for (int xCalc = (player.getLocation().getRegionX() - 6) / 8; xCalc &lt;= ((player.getLocation().getRegionX() + 6) / 8); xCalc++) {
				for (int yCalc = (player.getLocation().getRegionY() - 6) / 8; yCalc &lt;= ((player.getLocation().getRegionY() + 6) / 8); yCalc++) {
					final int region = yCalc + (xCalc &lt;&lt; 8);
					final int[] mapData = Main.getMain().getMapData().getRegionData(region);
					if (forceRegion &amp;&amp; ((yCalc == 49) || (yCalc == 149) || (yCalc == 147) || (xCalc == 50) || ((xCalc == 49) &amp;&amp; (yCalc == 47)))) {
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
						this.getOutStream().writeDWord(-1);
					} else {
						this.getOutStream().writeDWord(mapData[0]);
						this.getOutStream().writeDWord(mapData[1]);
						this.getOutStream().writeDWord(mapData[2]);
						this.getOutStream().writeDWord(mapData[3]);
					}
				}
			}
			this.getOutStream().writeByteA(player.getLocation().getZ());
			this.getOutStream().writeWord(player.getLocation().getLocalX());
			this.getOutStream().writeWord(player.getLocation().getRegionY());
			this.getOutStream().endFrameVarSizeWord();


			this.getOutStream().createFrameVarSizeWord(107);
			this.getOutStream().writeWord(0); 		// placeholder for size of this packet.
			final int ofs = this.getOutStream().getCurrentOffset();
			this.getOutStream().initBitAccess();

			// update this player
			this.getOutStream().writeBits(1, 1);		// set to true if updating thisPlayer
			this.getOutStream().writeBits(2, 3);		// updateType - 3=jump to pos
			// the following applies to type 3 only
			this.getOutStream().writeBits(2, 0);		// height level (0-3)
			this.getOutStream().writeBits(1, 1);		// set to true, if discarding walking queue (after teleport e.g.)
			this.getOutStream().writeBits(1, 1);		// set to true, if this player is not in local list yet???
			this.getOutStream().writeBits(7, 0x20);	// y-position
			this.getOutStream().writeBits(7, 0x20);	// x-position

			// update other players...?!
			this.getOutStream().writeBits(8, 0);		// number of players to add

			// add new players???
			this.getOutStream().writeBits(11, 2047);	// magic EOF
			this.getOutStream().finishBitAccess();

			this.getOutStream().writeByte(0);		// ???? needed that to stop client from crashing

			this.getOutStream().writeFrameSizeWord(this.getOutStream().getCurrentOffset() - ofs);
		}
		this.flushOutStream();
		this.setClientConnected(true);
		// new TaskSystem(player, this.getOutStream(), this.getOutputStream());
		final GameEngine gameEngine = new GameEngine((Player) player);
		gameEngine.getPlayerList().add((Player) player);
	}
}
</code></pre>
<p>[/CODE]</p>
<p>This is what the console in Eclipse shows:</p>
<p><code>
Loading map data!
Networking Frame started in 445ms.
Loaded mapdata.
RuneScape Server started in 1024ms.
IO started in 18ms.
First stage.
First Call: 317
Opcode is 15!
Second stage.
Third stage.
Second Call: 562
First stage.
First Call: 562
Fourth stage.
Sending an unsigned byte!
Sending a for loop.
Sent a for loop.
Sending server session key.
Sending login type.
Sending login packet size.
Third Call: 562
Sending revision.
Printing out client and server session keys.
Name: 
Password: 
Printed out username, user id, and password.
Sending return code of 2.
Sending login bytes.
</code></p>
<p>*Took this straight from rune-server since I didn’t feel like retyping it.</p>
<p>EDIT <span class="hashtag">#2:</span> I get the following error after changing my server up a bit.</p>
<p><code>
Error: fm.U({...},-91) T3 - true,261,4720,-1234525018,1516466596,1516466596,1130748942 qj.BA({...},104,0,261) qj.O({...},261,8610,0) uj.B(false) client.M(77) | Class23_Sub4_Sub3.method377:201 Class158.method2357:335 Class158.method2360:522 Class202.method2723:90 client.method43:682 Applet_Sub1.method41:317 Applet_Sub1.run:799 java.lang.Thread.run | java.lang.RuntimeException
error_game_crash
</code></p>
<p>Also, what is the difference between XTEA keys vs Update keys? Are they the same thing or no?</p>
<p>EDIT <span class="hashtag">#3:</span> I found out that T3 errors deal with mapdata. Is this correct? If so, would it mean that I’m missing mapdata and that’s the problem?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/multi-revision-server-help/543237/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/multi-revision-server-help/543237/1</link>
        <pubDate>Tue, 20 May 2014 21:26:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543237-1</guid>
        <source url="https://forum.moparisthebest.com/t/multi-revision-server-help/543237.rss">Multi-Revision Server Help</source>
      </item>
  </channel>
</rss>
