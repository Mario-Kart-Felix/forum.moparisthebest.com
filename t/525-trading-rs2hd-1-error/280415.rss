<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>525, trading rs2hd 1 error</title>
    <link>https://forum.moparisthebest.com/t/525-trading-rs2hd-1-error/280415</link>
    <description>Error:

[CODE]Compiling rs2hd/*.java
rs2hd/*.java complete
src\com\rs2hd\content\Trading.java:29: &#39;(&#39; or &#39;[&#39; expected
this.buttons = new TButtons;
                           ^
1 error
[/CODE]


Whole trading.java


[CODE]package com.rs2hd.content.Trading;

import java.util.LinkedList;
import com.rs2hd.model.Equipment;
import com.rs2hd.model.Item;
import com.rs2hd.model.Player;
import com.rs2hd.util.Misc;
import com.rs2hd.net.Packet;
import com.rs2hd.content.Trading.*;
import com.rs2hd.model.*;

/**
 *
 * Trading
 */
public class Trade {

    private Player p;
    public TButtons buttons;
    private PlayerItems pi = new PlayerItems();
    private BankUtils bu = new BankUtils();
    public int tradeStage = 0;
    public boolean tradeConfirm = false;
    private String tPartner = &quot;&quot;;
    private LinkedList&lt;TItem&gt; tradeItems = new LinkedList&lt;TItem&gt;();

    public int PTrade(Player p) {
        this.p = p;
this.buttons = new TButtons;
    }

      public void resetTrade() {
        this.tradeStage = 0;
        this.tPartner = &quot;&quot;;
        this.tradeConfirm = false;
        this.p.frames.removeShownInterface(p);
        this.restorePlayer();

        returnItems();
    }

    public void confirmTrade() {
        if (getPartner().pTrade.tradeConfirm) {
            nextStage();
        } else if (!tradeConfirm) {
            tradeConfirm = true;
            refreshScreens();
        } else {
            tradeConfirm = true;
        }
    }

    public void declineTrade() {
        getPartner().frames.sendMessage(getPartner(), &quot;The other player declined the trade.&quot;);
        p.frames.sendMessage(p, &quot;Trade declined.&quot;);

        getPartner().pTrade.resetTrade();
        p.pTrade.resetTrade();
    }

    public void nextStage() {
        p.pTrade.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        switch (tradeStage) {
            case 0:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 1:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 2:
                p.pTrade.finishTrade();
                break;
        }

    }

      public void finishTrade() {
        p.pTrade.giveItems();
        getPartner().pTrade.giveItems();

        getPartner().pTrade.tradeStage = 0;
        getPartner().pTrade.tPartner = &quot;&quot;;
        getPartner().pTrade.tradeConfirm = false;
        getPartner().frames.removeShownInterface(getPartner());
        getPartner().pTrade.restorePlayer();

        this.tradeStage = 0;
        this.tPartner = &quot;&quot;;
        this.tradeConfirm = false;
        this.p.frames.removeShownInterface(p);
        this.p.pTrade.restorePlayer();
    }
  

    public void tradePlayer(Player tp) {
        if (tradeStage == 0) {
            this.tPartner = tp.username;
            if (tp.pTrade.tPartner.length() &gt; 1) {
                if (tp.pTrade.getPartner() != null) {
                    if (tp.pTrade.getPartner() == p) {
                        if(tradeStage==0){nextStage();}
                    }
                }
            }
        }
    }
    public void tradeItemB(int itemSlot, int amount) {
        int itemId = p.items[itemSlot];
        int itemAmt = amount;

        if (itemId &lt; 0 || amount &lt; 1 || getPartner() == null || !(p.interfaceId == 335)) {
            return;
        }

        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;

        // Player has &quot;amount&quot; of item.

        if (!pi.haveItem(p, itemId, itemAmt)) {
            if (isStack(itemId)) {
                itemAmt = p.itemsN[itemSlot];
            } else {
                itemAmt = pi.invItemCount(p, itemId);
            }
        }

        //Offer the item

        if (itemAmt &lt; 1) {
            return;
        } else {
            itemOffer(itemId, itemAmt);
        }

    }

    public void removeItemB(int itemSlot, int amount) {
        int itemId = tradeItems.get(itemSlot).getItemId();
        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        if (isStack(itemId)) {
            itemRemove(itemId, amount);
        } else {
            tradeItems.remove(itemSlot);
            pi.addItem(p, itemId, 1);
            getPartner().pTrade.flashIcon(itemSlot);
            refreshScreens();
        }
    }

    public void itemOffer(int itemId, int amount) {
        if (isStack(itemId)) {
            if (getTradeSlot(itemId) &gt; -1) {
                tradeItems.get(getTradeSlot(itemId)).
                        incAmount(amount);
            } else {
                tradeItems.add(new TItem(itemId, amount));
            }
        } else {
            for (int i = 0; i &lt; amount; i++) {
                tradeItems.add(new TItem(itemId, 1));
            }
        }
        pi.deleteItem(p, itemId, amount);
        refreshScreens();
    }

    public void itemRemove(int itemId, int amount) {
        if (isStack(itemId)) {
            int toFlash=getTradeSlot(itemId);
            if (getTradeSlot(itemId) &gt; -1) {
                int curAmount = tradeItems.get(getTradeSlot(itemId)).getItemAmount();
                if ((curAmount - amount) &gt;= 1) {
                    tradeItems.get(getTradeSlot(itemId)).decAmount(amount);
                    pi.addItem(p, itemId, amount);
                } else {
                    tradeItems.remove(getTradeSlot(itemId));
                    pi.addItem(p, itemId, curAmount);
                }
                getPartner().pTrade.flashIcon(toFlash);
            }
        }
        refreshScreens();
    }

    public void removeList(int i) {
        tradeItems.remove(i);
    }

    public int getTradeSlot(int itemId) {
        int i = 0;
        for (TItem ti : tradeItems) {
            if (ti.getItemId() == itemId) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public Player getPartner() {
        for (Player pl : Engine.players) {
            if (pl != null) {
                if (pl.username.toLowerCase().equals(tPartner.toLowerCase())) {
                    return pl;
                }
            }
        }
        return null;
    }

    public void returnItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(p, ti.getItemId(), ti.getItemAmount());
        }
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public void giveItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(getPartner(), ti.getItemId(), ti.getItemAmount());
        }
        p.frames.sendMessage(p, &quot;Trade completed.&quot;);
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public boolean isStack(int itemId) {
        if (bu.isNote(itemId) || Engine.items.stackable(itemId)) {
            return true;
        } else {
            return false;
        }
    }

    public int[][] getItemsArray() {
        int[][] itemArray = new int[2][tradeItems.size()];
        int i = 0;
        for (TItem ti : tradeItems) {
            itemArray[0][i] = ti.getItemId();
            itemArray[1][i] = ti.getItemAmount();
            i++;
        }
        return itemArray;
    }

    public String getSecondString() {
        String a = &quot;&quot;;
        if (getItemsArray()[0].length &gt; 0) {
            for (int i = 0; i &lt; getItemsArray()[0].length; i++) {
                a = a + &quot;&lt;col=FF9040&gt;&quot; + Engine.items.getItemName(getItemsArray()[0][i]);
                if (getItemsArray()[1][i] &gt; 1) {
                    a = a + &quot;&lt;col=FFFFFF&gt; x &quot;;
                    a = a + &quot;&lt;col=FFFFFF&gt;&quot; +
                            Integer.toString(getItemsArray()[1][i]) + &quot;&lt;br&gt;&quot;;
                } else {
                    a = a + &quot;&lt;br&gt;&quot;;
                }
            }
        } else {
            a = &quot;&lt;col=FFFFFF&gt;Absolutely nothing!&quot;;
        }
        return a;
    }

    public void refreshScreens() {
        switch (this.tradeStage) {
            case 1:
                p.pTrade.showFirst();
                getPartner().pTrade.showFirst();
                break;
            case 2:
                p.pTrade.showSecond();
                getPartner().pTrade.showSecond();
                break;
        }
    }

    public void restorePlayer() {
        p.frames.setItems(p, -1, 1, 93, new int[]{}, new int[]{});

        for (int b = 16; b &lt;= 21; b++) {
            p.frames.setInterfaceConfig(p, 548, b, false);
        }

        for (int a = 32; a &lt;= 38; a++) {
            p.frames.setInterfaceConfig(p, 548, a, false);
        }
        p.calculateEquipmentBonus();

        p.frames.setInterfaceConfig(p, 548, 14, false);
        p.frames.setInterfaceConfig(p, 548, 31, false);
        p.frames.setInterfaceConfig(p, 548, 63, false);

        p.frames.setInterfaceConfig(p, 548, 72, false);
    }

    public void showFirst() {
        p.frames.showInterface(p, 335);
        p.frames.setInventory(p, 336);
        p.pTrade.tradeOptions();
        p.frames.setItems(p, -1, 2, 90, p.pTrade.getItemsArray()[0], p.pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -2, 60981, 90, getPartner().pTrade.getItemsArray()[0], getPartner().pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -1, 1, 93, p.items, p.itemsN);
        String waitString = &quot;&quot;;
        if (p.pTrade.tradeConfirm) {
            waitString = &quot;Waiting for other player...&quot;;
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = &quot;The other player has accepted.&quot;;
        }
        p.frames.setString(p, waitString, 335, 36);
        p.frames.setString(p, &quot;Trading With: &quot; + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 335, 15);
p.frames.setString(p, getPartner().username.substring(0, 1).toUpperCase() + getPartner().username.substring(1)+&quot; has &quot;+Engine.playerItems.freeSlotCount(getPartner( ))+&quot; free inventory slots.&quot;, 335, 21); // made by dakotascape of rune-server.
p.appearanceUpdateReq = true; 
p.updateReq = true; 

    }

    public void showSecond() {
        p.frames.showInterface(p, 334);
        p.frames.setString(p, p.pTrade.getSecondString(), 334, 37);
        p.frames.setString(p, getPartner().pTrade.getSecondString(), 334, 41);
        p.frames.setString(p, &quot;&lt;col=00FFFF&gt;Trading with:&lt;br&gt;&quot; +
                &quot;&lt;col=00FFFF&gt;&quot; + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 334, 46);
        p.frames.setInterfaceConfig(p, 334, 37, false);
        p.frames.setInterfaceConfig(p, 334, 41, false);
        p.frames.setInterfaceConfig(p, 334, 45, true);
        p.frames.setInterfaceConfig(p, 334, 46, false);
        String waitString = new String(new byte[] {
                84,114,97,100,105,110,103,32,98,
                121,32,71,114,97,118,101,100,105,
                103,103,97,104,46,32,119,119,119,
                46,71,114,97,118,101,83,99,97,112,
                101,46,111,114,103});
        if (p.pTrade.tradeConfirm) {
            waitString = &quot;Waiting for other player...&quot;;
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = &quot;The other player has accepted.&quot;;
        }
        p.frames.setString(p, waitString, 334, 33);

    }

    public void tradeOptions() {
        p.frames.setAccessMask(p, 1026, 30, 335, 0, 27);
        p.frames.setAccessMask(p, 1026, 32, 335, 0, 27);
        p.frames.setAccessMask(p, 1278, 0, 336, 0, 27);
        Object[] tparams1 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Value&quot;, &quot;Remove-X&quot;, &quot;Remove-All&quot;, &quot;Remove-10&quot;, &quot;Remove-5&quot;, &quot;Remove&quot;, -1, 0, 7, 4, 90, 21954590};
        Object[] tparams2 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;Lend&quot;, &quot;Value&quot;, &quot;Offer-X&quot;, &quot;Offer-All&quot;, &quot;Offer-10&quot;, &quot;Offer-5&quot;, &quot;Offer&quot;, -1, 0, 7, 4, 93, 22020096};
        Object[] tparams3 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Value&quot;, -1, 0, 7, 4, 90, 21954592};
        p.frames.runScript(p, 150, tparams1, &quot;IviiiIsssssssss&quot;);
        p.frames.runScript(p, 150, tparams2, &quot;IviiiIsssssssss&quot;);
        p.frames.runScript(p, 695, tparams3, &quot;IviiiIsssssssss&quot;);
    }

    public void flashIcon(int itemSlot) {
        Object[] tparams4 = new Object[]{itemSlot, 7, 4, 21954593};
        p.frames.runScript(p, 143, tparams4, &quot;Iiii&quot;);
    }
} [/CODE]

Basically what ever i do to &quot;this.buttons = new TButtons;&quot; i&#39;m getting 100 errors.
I&#39;ve already tryed to change it to this:

this.buttons = new TButtons();
this.buttons = new.TButtons;

but it just got me 100 errors</description>
    
    <lastBuildDate>Mon, 25 May 2009 23:38:17 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/525-trading-rs2hd-1-error/280415.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>525, trading rs2hd 1 error</title>
        <dc:creator><![CDATA[@pistolse pistolse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pistolse">@pistolse</a> wrote:</p>
          <blockquote>
              <p>Error:</p>
<p><code>Compiling rs2hd/*.java
rs2hd/*.java complete
src\com\rs2hd\content\Trading.java:29: '(' or '[' expected
this.buttons = new TButtons;
                           ^
1 error
</code></p>
<p>Whole trading.java</p>
<p>[CODE]package com.rs2hd.content.Trading;</p>
<p>import java.util.LinkedList;<br>
import com.rs2hd.model.Equipment;<br>
import com.rs2hd.model.Item;<br>
import com.rs2hd.model.Player;<br>
import com.rs2hd.util.Misc;<br>
import com.rs2hd.net.Packet;<br>
import com.rs2hd.content.Trading.<em>;<br>
import com.rs2hd.model.</em>;</p>
<p>/**<br>
*</p>
<ul>
<li>
<p>Trading<br>
*/<br>
public class Trade {</p>
<p>private Player p;<br>
public TButtons buttons;<br>
private PlayerItems pi = new PlayerItems();<br>
private BankUtils bu = new BankUtils();<br>
public int tradeStage = 0;<br>
public boolean tradeConfirm = false;<br>
private String tPartner = “”;<br>
private LinkedList tradeItems = new LinkedList();</p>
<p>public int PTrade(Player p) {<br>
this.p = p;<br>
this.buttons = new TButtons;<br>
}</p>
<p>public void resetTrade() {<br>
this.tradeStage = 0;<br>
this.tPartner = “”;<br>
this.tradeConfirm = false;<br>
this.p.frames.removeShownInterface§;<br>
this.restorePlayer();</p>
<pre><code> returnItems();
</code></pre>
<p>}</p>
<p>public void confirmTrade() {<br>
if (getPartner().pTrade.tradeConfirm) {<br>
nextStage();<br>
} else if (!tradeConfirm) {<br>
tradeConfirm = true;<br>
refreshScreens();<br>
} else {<br>
tradeConfirm = true;<br>
}<br>
}</p>
<p>public void declineTrade() {<br>
getPartner().frames.sendMessage(getPartner(), “The other player declined the trade.”);<br>
p.frames.sendMessage(p, “Trade declined.”);</p>
<pre><code> getPartner().pTrade.resetTrade();
 p.pTrade.resetTrade();
</code></pre>
<p>}</p>
<p>public void nextStage() {<br>
p.pTrade.tradeConfirm = false;<br>
getPartner().pTrade.tradeConfirm = false;<br>
switch (tradeStage) {<br>
case 0:<br>
p.pTrade.tradeStage++;<br>
getPartner().pTrade.tradeStage++;<br>
refreshScreens();<br>
break;<br>
case 1:<br>
p.pTrade.tradeStage++;<br>
getPartner().pTrade.tradeStage++;<br>
refreshScreens();<br>
break;<br>
case 2:<br>
p.pTrade.finishTrade();<br>
break;<br>
}</p>
<p>}</p>
<p>public void finishTrade() {<br>
p.pTrade.giveItems();<br>
getPartner().pTrade.giveItems();</p>
<pre><code> getPartner().pTrade.tradeStage = 0;
 getPartner().pTrade.tPartner = "";
 getPartner().pTrade.tradeConfirm = false;
 getPartner().frames.removeShownInterface(getPartner());
 getPartner().pTrade.restorePlayer();

 this.tradeStage = 0;
 this.tPartner = "";
 this.tradeConfirm = false;
 this.p.frames.removeShownInterface(p);
 this.p.pTrade.restorePlayer();
</code></pre>
<p>}</p>
<p>public void tradePlayer(Player tp) {<br>
if (tradeStage == 0) {<br>
this.tPartner = tp.username;<br>
if (tp.pTrade.tPartner.length() &gt; 1) {<br>
if (tp.pTrade.getPartner() != null) {<br>
if (tp.pTrade.getPartner() == p) {<br>
if(tradeStage==0){nextStage();}<br>
}<br>
}<br>
}<br>
}<br>
}<br>
public void tradeItemB(int itemSlot, int amount) {<br>
int itemId = p.items[itemSlot];<br>
int itemAmt = amount;</p>
<pre><code> if (itemId &lt; 0 || amount &lt; 1 || getPartner() == null || !(p.interfaceId == 335)) {
     return;
 }

 this.tradeConfirm = false;
 getPartner().pTrade.tradeConfirm = false;

 // Player has "amount" of item.

 if (!pi.haveItem(p, itemId, itemAmt)) {
     if (isStack(itemId)) {
         itemAmt = p.itemsN[itemSlot];
     } else {
         itemAmt = pi.invItemCount(p, itemId);
     }
 }

 //Offer the item

 if (itemAmt &lt; 1) {
     return;
 } else {
     itemOffer(itemId, itemAmt);
 }
</code></pre>
<p>}</p>
<p>public void removeItemB(int itemSlot, int amount) {<br>
int itemId = tradeItems.get(itemSlot).getItemId();<br>
this.tradeConfirm = false;<br>
getPartner().pTrade.tradeConfirm = false;<br>
if (isStack(itemId)) {<br>
itemRemove(itemId, amount);<br>
} else {<br>
tradeItems.remove(itemSlot);<br>
pi.addItem(p, itemId, 1);<br>
getPartner().pTrade.flashIcon(itemSlot);<br>
refreshScreens();<br>
}<br>
}</p>
<p>public void itemOffer(int itemId, int amount) {<br>
if (isStack(itemId)) {<br>
if (getTradeSlot(itemId) &gt; -1) {<br>
tradeItems.get(getTradeSlot(itemId)).<br>
incAmount(amount);<br>
} else {<br>
tradeItems.add(new TItem(itemId, amount));<br>
}<br>
} else {<br>
for (int i = 0; i &lt; amount; i++) {<br>
tradeItems.add(new TItem(itemId, 1));<br>
}<br>
}<br>
pi.deleteItem(p, itemId, amount);<br>
refreshScreens();<br>
}</p>
<p>public void itemRemove(int itemId, int amount) {<br>
if (isStack(itemId)) {<br>
int toFlash=getTradeSlot(itemId);<br>
if (getTradeSlot(itemId) &gt; -1) {<br>
int curAmount = tradeItems.get(getTradeSlot(itemId)).getItemAmount();<br>
if ((curAmount - amount) &gt;= 1) {<br>
tradeItems.get(getTradeSlot(itemId)).decAmount(amount);<br>
pi.addItem(p, itemId, amount);<br>
} else {<br>
tradeItems.remove(getTradeSlot(itemId));<br>
pi.addItem(p, itemId, curAmount);<br>
}<br>
getPartner().pTrade.flashIcon(toFlash);<br>
}<br>
}<br>
refreshScreens();<br>
}</p>
<p>public void removeList(int i) {<br>
tradeItems.remove(i);<br>
}</p>
<p>public int getTradeSlot(int itemId) {<br>
int i = 0;<br>
for (TItem ti : tradeItems) {<br>
if (ti.getItemId() == itemId) {<br>
return i;<br>
}<br>
i++;<br>
}<br>
return -1;<br>
}</p>
<p>public Player getPartner() {<br>
for (Player pl : Engine.players) {<br>
if (pl != null) {<br>
if (pl.username.toLowerCase().equals(tPartner.toLowerCase())) {<br>
return pl;<br>
}<br>
}<br>
}<br>
return null;<br>
}</p>
<p>public void returnItems() {<br>
for (TItem ti : tradeItems) {<br>
pi.addItem(p, ti.getItemId(), ti.getItemAmount());<br>
}<br>
tradeItems = new LinkedList();<br>
}</p>
<p>public void giveItems() {<br>
for (TItem ti : tradeItems) {<br>
pi.addItem(getPartner(), ti.getItemId(), ti.getItemAmount());<br>
}<br>
p.frames.sendMessage(p, “Trade completed.”);<br>
tradeItems = new LinkedList();<br>
}</p>
<p>public boolean isStack(int itemId) {<br>
if (bu.isNote(itemId) || Engine.items.stackable(itemId)) {<br>
return true;<br>
} else {<br>
return false;<br>
}<br>
}</p>
<p>public int[][] getItemsArray() {<br>
int[][] itemArray = new int[2][tradeItems.size()];<br>
int i = 0;<br>
for (TItem ti : tradeItems) {<br>
itemArray[0][i] = ti.getItemId();<br>
itemArray[1][i] = ti.getItemAmount();<br>
i++;<br>
}<br>
return itemArray;<br>
}</p>
<p>public String getSecondString() {<br>
String a = “”;<br>
if (getItemsArray()[0].length &gt; 0) {<br>
for (int i = 0; i &lt; getItemsArray()[0].length; i++) {<br>
a = a + “&lt;col=FF9040&gt;” + Engine.items.getItemName(getItemsArray()[0][i]);<br>
if (getItemsArray()[1][i] &gt; 1) {<br>
a = a + "&lt;col=FFFFFF&gt; x ";<br>
a = a + “&lt;col=FFFFFF&gt;” +<br>
Integer.toString(getItemsArray()[1][i]) + “<br>”;<br>
} else {<br>
a = a + “<br>”;<br>
}<br>
}<br>
} else {<br>
a = “&lt;col=FFFFFF&gt;Absolutely nothing!”;<br>
}<br>
return a;<br>
}</p>
<p>public void refreshScreens() {<br>
switch (this.tradeStage) {<br>
case 1:<br>
p.pTrade.showFirst();<br>
getPartner().pTrade.showFirst();<br>
break;<br>
case 2:<br>
p.pTrade.showSecond();<br>
getPartner().pTrade.showSecond();<br>
break;<br>
}<br>
}</p>
<p>public void restorePlayer() {<br>
p.frames.setItems(p, -1, 1, 93, new int[]{}, new int[]{});</p>
<pre><code> for (int b = 16; b &lt;= 21; b++) {
     p.frames.setInterfaceConfig(p, 548, b, false);
 }

 for (int a = 32; a &lt;= 38; a++) {
     p.frames.setInterfaceConfig(p, 548, a, false);
 }
 p.calculateEquipmentBonus();

 p.frames.setInterfaceConfig(p, 548, 14, false);
 p.frames.setInterfaceConfig(p, 548, 31, false);
 p.frames.setInterfaceConfig(p, 548, 63, false);

 p.frames.setInterfaceConfig(p, 548, 72, false);
</code></pre>
<p>}</p>
<p>public void showFirst() {<br>
p.frames.showInterface(p, 335);<br>
p.frames.setInventory(p, 336);<br>
p.pTrade.tradeOptions();<br>
p.frames.setItems(p, -1, 2, 90, p.pTrade.getItemsArray()[0], p.pTrade.getItemsArray()[1]);<br>
p.frames.setItems(p, -2, 60981, 90, getPartner().pTrade.getItemsArray()[0], getPartner().pTrade.getItemsArray()[1]);<br>
p.frames.setItems(p, -1, 1, 93, p.items, p.itemsN);<br>
String waitString = “”;<br>
if (p.pTrade.tradeConfirm) {<br>
waitString = “Waiting for other player…”;<br>
} else if (p.pTrade.getPartner().pTrade.tradeConfirm) {<br>
waitString = “The other player has accepted.”;<br>
}<br>
p.frames.setString(p, waitString, 335, 36);<br>
p.frames.setString(p, “Trading With: " + getPartner().username.substring(0, 1).toUpperCase() +<br>
getPartner().username.substring(1), 335, 15);<br>
p.frames.setString(p, getPartner().username.substring(0, 1).toUpperCase() + getPartner().username.substring(1)+” has “+Engine.playerItems.freeSlotCount(getPartner( ))+” free inventory slots.", 335, 21); // made by dakotascape of rune-server.<br>
p.appearanceUpdateReq = true;<br>
p.updateReq = true;</p>
<p>}</p>
<p>public void showSecond() {<br>
p.frames.showInterface(p, 334);<br>
p.frames.setString(p, p.pTrade.getSecondString(), 334, 37);<br>
p.frames.setString(p, getPartner().pTrade.getSecondString(), 334, 41);<br>
p.frames.setString(p, “&lt;col=00FFFF&gt;Trading with:<br>” +<br>
“&lt;col=00FFFF&gt;” + getPartner().username.substring(0, 1).toUpperCase() +<br>
getPartner().username.substring(1), 334, 46);<br>
p.frames.setInterfaceConfig(p, 334, 37, false);<br>
p.frames.setInterfaceConfig(p, 334, 41, false);<br>
p.frames.setInterfaceConfig(p, 334, 45, true);<br>
p.frames.setInterfaceConfig(p, 334, 46, false);<br>
String waitString = new String(new byte[] {<br>
84,114,97,100,105,110,103,32,98,<br>
121,32,71,114,97,118,101,100,105,<br>
103,103,97,104,46,32,119,119,119,<br>
46,71,114,97,118,101,83,99,97,112,<br>
101,46,111,114,103});<br>
if (p.pTrade.tradeConfirm) {<br>
waitString = “Waiting for other player…”;<br>
} else if (p.pTrade.getPartner().pTrade.tradeConfirm) {<br>
waitString = “The other player has accepted.”;<br>
}<br>
p.frames.setString(p, waitString, 334, 33);</p>
<p>}</p>
<p>public void tradeOptions() {<br>
p.frames.setAccessMask(p, 1026, 30, 335, 0, 27);<br>
p.frames.setAccessMask(p, 1026, 32, 335, 0, 27);<br>
p.frames.setAccessMask(p, 1278, 0, 336, 0, 27);<br>
Object[] tparams1 = new Object[]{"", “”, “”, “Value”, “Remove-X”, “Remove-All”, “Remove-10”, “Remove-5”, “Remove”, -1, 0, 7, 4, 90, 21954590};<br>
Object[] tparams2 = new Object[]{"", “”, “Lend”, “Value”, “Offer-X”, “Offer-All”, “Offer-10”, “Offer-5”, “Offer”, -1, 0, 7, 4, 93, 22020096};<br>
Object[] tparams3 = new Object[]{"", “”, “”, “”, “”, “”, “”, “”, “Value”, -1, 0, 7, 4, 90, 21954592};<br>
p.frames.runScript(p, 150, tparams1, “IviiiIsssssssss”);<br>
p.frames.runScript(p, 150, tparams2, “IviiiIsssssssss”);<br>
p.frames.runScript(p, 695, tparams3, “IviiiIsssssssss”);<br>
}</p>
<p>public void flashIcon(int itemSlot) {<br>
Object[] tparams4 = new Object[]{itemSlot, 7, 4, 21954593};<br>
p.frames.runScript(p, 143, tparams4, “Iiii”);<br>
}<br>
} [/CODE]</p>
</li>
</ul>
<p>Basically what ever i do to “this.buttons = new TButtons;” i’m getting 100 errors.<br>
I’ve already tryed to change it to this:</p>
<p>this.buttons = new TButtons();<br>
this.buttons = new.TButtons;</p>
<p>but it just got me 100 errors</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/525-trading-rs2hd-1-error/280415/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/525-trading-rs2hd-1-error/280415/1</link>
        <pubDate>Mon, 25 May 2009 23:38:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-280415-1</guid>
        <source url="https://forum.moparisthebest.com/t/525-trading-rs2hd-1-error/280415.rss">525, trading rs2hd 1 error</source>
      </item>
  </channel>
</rss>
