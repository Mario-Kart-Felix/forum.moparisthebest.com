<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help with my varrock yew chopper</title>
    <link>https://forum.moparisthebest.com/t/help-with-my-varrock-yew-chopper/2065</link>
    <description>ive not been able to find a yew chopper that chops the yews north west of varrock, start in varrock east bank, it walks there, then screws up... i based this off the faladorYews, so i dont need a comment on that :)

[code]/*
 * Copyright 2005 David Bern: Edited By: bobert5696
 */

import javax.swing.*;

public class VarrockYews extends Script
		implements ServerMessageListener {

	public static String[] commands = { &quot;varrockYews&quot; };

	private static final Tile[] TREES_TO_BANK = new Tile[] {
		new Tile(3269,3471), new Tile(3269,3471), new Tile(3269,3465), 
		new Tile(3270,3458), new Tile(3270,3447), new Tile(3271,3440), 
		new Tile(3275,3436), new Tile(3266,3430), new Tile(3258,3429), 
		new Tile(3253,3426), new Tile(3254,3420)
	};
	private static final Tile[] TO_TREE_1 = new Tile[] {
		new Tile(3254,3420), new Tile(3254,3420), new Tile(3254,3428), 
		new Tile(3269,3470)
	};
	private static final Tile[] TO_TREE_3 = new Tile[] {
		new Tile(3269,3470), new Tile(3265,3483), new Tile(3266,3490)

	};
	private static final Tile TILE_GATE = new Tile(3282,3480);
	private static final Tile TILE_BANK = new Tile(3254,3420);
	private static final Tile TILE_MIDDLE_PATH = new Tile(3282,3480);
	private static final Tile[] YEW_TREES = new Tile[] {
					new Tile(2996,3311), new Tile(3019,3315), new Tile(3041,3319) };

	private static final int OBJECT_BANK_BOOTH = 2213;
	private static final int YEW = 1309;

	
	private boolean runFromCombat, toTree1, toTree3;
	
	private long startTime, treeTimeOut;

	private int treeCount, bankCount;

	private Tile treePos;

	public boolean start(String cmd, String[] args) {
		EventManager.addServerMessageListener(this);
		startTime = System.currentTimeMillis();
		treeTimeOut = 0;
		treeCount = bankCount = 0;
		runFromCombat = toTree1 = toTree3 = false;
		return true;
	}

	public void serverMessage(String message) {
		if (message.indexOf(&quot;you are dead&quot;) != -1) {
			log(&quot;You died, shutting down&quot;);
			shutdown();
		} else if (message.indexOf(&quot;some yew logs&quot;) != -1)
			treeCount++;
	}

	public long run(long lastExecuted) {
		runProgress();
		long rez = runCombat();
		if (rez != 0)
			return rez;

		rez = runBank();
		if (rez != 0)
			return rez;

		rez = runWalk();
		if (rez != 0)
			return rez;
		
		rez = checkTree();
		if (rez != 0)
			return rez;

		return runChop();
	}

	private void runProgress() {
		long workTime = System.currentTimeMillis() - startTime;
		int treesAnHour = 0;
		if (workTime &gt; 0)
			treesAnHour = (int)( (((float)treeCount) / ((float)workTime)) * 3600000);
		String[] trees = new String[] { &quot; &quot;, &quot; &quot;, &quot; &quot; };
		String[] me = new String[] { &quot; &quot;, &quot; &quot;, &quot; &quot; };
		for (int i = 0; i &lt; YEW_TREES.length; i++) {
			if (objectType(getObjectAt(YEW_TREES[i])) == YEW)
				trees[i] = &quot;T&quot;;
			if (distanceTo(YEW_TREES[i]) &gt; 20)
				trees[i] = &quot;?&quot;;
		}
		int whTree = whichTree();
		if ((inventoryCount() != 28) &amp;&amp; (whTree != -1)
					&amp;&amp; (trees[whTree].equals(&quot;T&quot;)))
			me[whTree] = &quot;C&quot;;
		
		String currently = &quot;chopping trees&quot;;
		if (getPosition(myPlayer()).y &gt; 3323)
			currently = &quot;walking to trees&quot;;
		if (toTree1)
			currently = &quot;walking to tree 1&quot;;
		if (toTree3)
			currently = &quot;walking to tree 3&quot;;
		if (inventoryCount() == 28)
			currently = &quot;walking to bank&quot;;
		if (getInterface() == Constants.INTERFACE_BANK)
			currently = &quot;banking&quot;;
		if (runFromCombat)
			currently = &quot;running from combat&quot;;
		System.out.println(&quot;&quot;);
		System.out.println(&quot;&quot;);
		System.out.println(&quot;=== You have cut &quot; + treeCount + &quot; trees&quot;);
		System.out.println(&quot;=== You have banked &quot; + bankCount + &quot; times&quot;);
		System.out.println(&quot;=== Since &quot; + ((workTime) / 60000) + &quot; minutes ago&quot;);
		System.out.println(&quot;=== Chopping &quot; + treesAnHour + &quot; trees/hour&quot;);
		System.out.println(&quot;-- Currently &quot; + currently);
		System.out.println(&quot;             _____/-----------&quot;);
		System.out.println(&quot;        __ _/&quot;);
		System.out.println(&quot;     __/                  &quot; + me[2] + &quot;(&quot; + trees[2] + &quot;) &quot;);
		System.out.println(&quot;  __/          &quot; + me[1] + &quot;(&quot; + trees[1] + &quot;) ________ &quot;);
		System.out.println(&quot; / &quot; + me[0] + &quot;(&quot; + trees[0] + &quot;)      -----/         \\/&quot;);
		System.out.println(&quot;/            |    |          |&quot;);
	}

	private long runCombat() {
		if (runFromCombat) {
			if (distanceTo(TILE_GATE) &gt; 3) {
				walk(TILE_GATE);
				return random(3000,3500);
			} else
				runFromCombat = false;
		}
		if (inCombat(myPlayer()) &amp;&amp; getPosition(myPlayer()).y &lt; 3322) {
			runFromCombat = true;
			treePos = null;
			return 1;
		}
		return 0;
	}

	private long runBank() {
		if (distanceTo(TILE_BANK) &lt; 3) {
			if (inventoryCount() == 28 &amp;&amp; getInterface() != Constants.INTERFACE_BANK) {
				int booth = findObject(OBJECT_BANK_BOOTH);
				if (booth != -1) {
					atObject(booth, 2);
					return random(3000, 4000);
				}
			}
			if (getInterface() == Constants.INTERFACE_BANK) {
				long rez = bankLogs();
				if (rez != 0)
					return rez;
				bankCount++;
				treePos = null;
				closeInterface();
				return random(500,1000);
			}
		}
		return 0;
	}

	private long bankLogs() {
		int[] inv = getInventory();
		for (int i = 0; i &lt; inv.length; i++)
			if (inv[i] != -1 &amp;&amp; !getItemName(inv[i]).toLowerCase().endsWith(&quot; axe&quot;)) {
				depositAll(inv[i], getInventoryIndex(inv[i]));
				return random(2000, 3000);
			}
		return 0;
	}
	
	private long runWalk() {
		if (inventoryCount() == 28) {
			Tile[] path = TREES_TO_BANK;
			walkPath(path);
			return random(3000, 4000);
		} else {
			Tile[] path = reversePath(TREES_TO_BANK);
			if (getPosition(myPlayer()).y &gt; 3323) {
				walkPath(path);
				return random(3000, 4000);
			}
		}
		return 0;
	}
	
	private int whichTree() {
		for (int i = 0; i &lt; YEW_TREES.length; i++)
			if(distanceTo(YEW_TREES[i]) &lt; 3)
				return i;
		return -1;
	}
	
	private int[] getIds(int id, Tile[] tilelist) {
		int num = 0;
		for (int i = 0; i &lt; tilelist.length; i++)
			if (objectType(getObjectAt(tilelist[i])) == id)
				num++;
		int[] result = new int[num];
		num = 0;
		for (int i = 0; i &lt; tilelist.length; i++)
			if (objectType(getObjectAt(tilelist[i])) == id)
				result[num++] = getObjectAt(tilelist[i]);
		return result;
	}
	
	private int getClosest(int[] ids) {
		int result = ids[0];
		for (int i = 1; i &lt; ids.length; i++)
			if (distanceTo(objectPos(ids[i])) &lt; distanceTo(objectPos(result)))
				result = ids[i];
		return result;
	}

	private long runChop() {
		int[] treeIDS = getIds(YEW, YEW_TREES);
		if (treeIDS.length &gt; 0) {
			if (isMoving())
				return random(150,250);
			toTree1 = toTree3 = false;
			int treeID = getClosest(treeIDS);
			Tile pos = objectPos(treeID);
			if (distanceTo(pos) &gt; 5) {
				walk(pos);
				return random(2500, 3500);
			}
			treePos = pos;
			atObject(treeID, 1);
			return 1;
		}
		if (distanceTo(TO_TREE_1[TO_TREE_1.length - 1]) &lt; 3)
			toTree1 = false;
		if (distanceTo(TO_TREE_3[TO_TREE_3.length - 1]) &lt; 3)
			toTree3 = false;
		if (toTree1 || (getPosition(myPlayer()).x &gt;= 3010 &amp;&amp; !toTree3)) {
			toTree1 = true;
			walkPath(TO_TREE_1);
			return random(2500,3500);
		}
		if (toTree3 || (getPosition(myPlayer()).x &lt; 3010 &amp;&amp; !toTree1)) {
			toTree3 = true;
			walkPath(TO_TREE_3);
			return random(2500,3500);
		}
		return random(100,200);
	}

	private long checkTree() {
		if (treePos != null) {
			if (treeTimeOut == 0)
				treeTimeOut = System.currentTimeMillis() + random(35000,55000);
			if (objectType(getObjectAt(treePos)) != YEW) {
				walk(getPosition(myPlayer()));
				treePos = null;
				treeTimeOut = 0;
				return random(150,250);
			}
			if (System.currentTimeMillis() &gt; treeTimeOut) {
				treeTimeOut = 0;
				treePos = null;
				return random(150,250);
			}
			return 100;
		}
		treeTimeOut = 0;
		return 0;
	}

}
[/code]</description>
    
    <lastBuildDate>Fri, 28 Apr 2006 02:38:09 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-with-my-varrock-yew-chopper/2065.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help with my varrock yew chopper</title>
        <dc:creator><![CDATA[@bobert5696 bobert5696]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bobert5696">@bobert5696</a> wrote:</p>
          <blockquote>
              <p>ive not been able to find a yew chopper that chops the yews north west of varrock, start in varrock east bank, it walks there, then screws upâ€¦ i based this off the faladorYews, so i dont need a comment on that <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[code]/*</p>
<ul>
<li>Copyright 2005 David Bern: Edited By: bobert5696<br>
*/</li>
</ul>
<p>import javax.swing.*;</p>
<p>public class VarrockYews extends Script<br>
implements ServerMessageListener {</p>
<pre><code>public static String[] commands = { "varrockYews" };

private static final Tile[] TREES_TO_BANK = new Tile[] {
	new Tile(3269,3471), new Tile(3269,3471), new Tile(3269,3465), 
	new Tile(3270,3458), new Tile(3270,3447), new Tile(3271,3440), 
	new Tile(3275,3436), new Tile(3266,3430), new Tile(3258,3429), 
	new Tile(3253,3426), new Tile(3254,3420)
};
private static final Tile[] TO_TREE_1 = new Tile[] {
	new Tile(3254,3420), new Tile(3254,3420), new Tile(3254,3428), 
	new Tile(3269,3470)
};
private static final Tile[] TO_TREE_3 = new Tile[] {
	new Tile(3269,3470), new Tile(3265,3483), new Tile(3266,3490)

};
private static final Tile TILE_GATE = new Tile(3282,3480);
private static final Tile TILE_BANK = new Tile(3254,3420);
private static final Tile TILE_MIDDLE_PATH = new Tile(3282,3480);
private static final Tile[] YEW_TREES = new Tile[] {
				new Tile(2996,3311), new Tile(3019,3315), new Tile(3041,3319) };

private static final int OBJECT_BANK_BOOTH = 2213;
private static final int YEW = 1309;


private boolean runFromCombat, toTree1, toTree3;

private long startTime, treeTimeOut;

private int treeCount, bankCount;

private Tile treePos;

public boolean start(String cmd, String[] args) {
	EventManager.addServerMessageListener(this);
	startTime = System.currentTimeMillis();
	treeTimeOut = 0;
	treeCount = bankCount = 0;
	runFromCombat = toTree1 = toTree3 = false;
	return true;
}

public void serverMessage(String message) {
	if (message.indexOf("you are dead") != -1) {
		log("You died, shutting down");
		shutdown();
	} else if (message.indexOf("some yew logs") != -1)
		treeCount++;
}

public long run(long lastExecuted) {
	runProgress();
	long rez = runCombat();
	if (rez != 0)
		return rez;

	rez = runBank();
	if (rez != 0)
		return rez;

	rez = runWalk();
	if (rez != 0)
		return rez;
	
	rez = checkTree();
	if (rez != 0)
		return rez;

	return runChop();
}

private void runProgress() {
	long workTime = System.currentTimeMillis() - startTime;
	int treesAnHour = 0;
	if (workTime &gt; 0)
		treesAnHour = (int)( (((float)treeCount) / ((float)workTime)) * 3600000);
	String[] trees = new String[] { " ", " ", " " };
	String[] me = new String[] { " ", " ", " " };
	for (int i = 0; i &lt; YEW_TREES.length; i++) {
		if (objectType(getObjectAt(YEW_TREES[i])) == YEW)
			trees[i] = "T";
		if (distanceTo(YEW_TREES[i]) &gt; 20)
			trees[i] = "?";
	}
	int whTree = whichTree();
	if ((inventoryCount() != 28) &amp;&amp; (whTree != -1)
				&amp;&amp; (trees[whTree].equals("T")))
		me[whTree] = "C";
	
	String currently = "chopping trees";
	if (getPosition(myPlayer()).y &gt; 3323)
		currently = "walking to trees";
	if (toTree1)
		currently = "walking to tree 1";
	if (toTree3)
		currently = "walking to tree 3";
	if (inventoryCount() == 28)
		currently = "walking to bank";
	if (getInterface() == Constants.INTERFACE_BANK)
		currently = "banking";
	if (runFromCombat)
		currently = "running from combat";
	System.out.println("");
	System.out.println("");
	System.out.println("=== You have cut " + treeCount + " trees");
	System.out.println("=== You have banked " + bankCount + " times");
	System.out.println("=== Since " + ((workTime) / 60000) + " minutes ago");
	System.out.println("=== Chopping " + treesAnHour + " trees/hour");
	System.out.println("-- Currently " + currently);
	System.out.println("             _____/-----------");
	System.out.println("        __ _/");
	System.out.println("     __/                  " + me[2] + "(" + trees[2] + ") ");
	System.out.println("  __/          " + me[1] + "(" + trees[1] + ") ________ ");
	System.out.println(" / " + me[0] + "(" + trees[0] + ")      -----/         \\/");
	System.out.println("/            |    |          |");
}

private long runCombat() {
	if (runFromCombat) {
		if (distanceTo(TILE_GATE) &gt; 3) {
			walk(TILE_GATE);
			return random(3000,3500);
		} else
			runFromCombat = false;
	}
	if (inCombat(myPlayer()) &amp;&amp; getPosition(myPlayer()).y &lt; 3322) {
		runFromCombat = true;
		treePos = null;
		return 1;
	}
	return 0;
}

private long runBank() {
	if (distanceTo(TILE_BANK) &lt; 3) {
		if (inventoryCount() == 28 &amp;&amp; getInterface() != Constants.INTERFACE_BANK) {
			int booth = findObject(OBJECT_BANK_BOOTH);
			if (booth != -1) {
				atObject(booth, 2);
				return random(3000, 4000);
			}
		}
		if (getInterface() == Constants.INTERFACE_BANK) {
			long rez = bankLogs();
			if (rez != 0)
				return rez;
			bankCount++;
			treePos = null;
			closeInterface();
			return random(500,1000);
		}
	}
	return 0;
}

private long bankLogs() {
	int[] inv = getInventory();
	for (int i = 0; i &lt; inv.length; i++)
		if (inv[i] != -1 &amp;&amp; !getItemName(inv[i]).toLowerCase().endsWith(" axe")) {
			depositAll(inv[i], getInventoryIndex(inv[i]));
			return random(2000, 3000);
		}
	return 0;
}

private long runWalk() {
	if (inventoryCount() == 28) {
		Tile[] path = TREES_TO_BANK;
		walkPath(path);
		return random(3000, 4000);
	} else {
		Tile[] path = reversePath(TREES_TO_BANK);
		if (getPosition(myPlayer()).y &gt; 3323) {
			walkPath(path);
			return random(3000, 4000);
		}
	}
	return 0;
}

private int whichTree() {
	for (int i = 0; i &lt; YEW_TREES.length; i++)
		if(distanceTo(YEW_TREES[i]) &lt; 3)
			return i;
	return -1;
}

private int[] getIds(int id, Tile[] tilelist) {
	int num = 0;
	for (int i = 0; i &lt; tilelist.length; i++)
		if (objectType(getObjectAt(tilelist[i])) == id)
			num++;
	int[] result = new int[num];
	num = 0;
	for (int i = 0; i &lt; tilelist.length; i++)
		if (objectType(getObjectAt(tilelist[i])) == id)
			result[num++] = getObjectAt(tilelist[i]);
	return result;
}

private int getClosest(int[] ids) {
	int result = ids[0];
	for (int i = 1; i &lt; ids.length; i++)
		if (distanceTo(objectPos(ids[i])) &lt; distanceTo(objectPos(result)))
			result = ids[i];
	return result;
}

private long runChop() {
	int[] treeIDS = getIds(YEW, YEW_TREES);
	if (treeIDS.length &gt; 0) {
		if (isMoving())
			return random(150,250);
		toTree1 = toTree3 = false;
		int treeID = getClosest(treeIDS);
		Tile pos = objectPos(treeID);
		if (distanceTo(pos) &gt; 5) {
			walk(pos);
			return random(2500, 3500);
		}
		treePos = pos;
		atObject(treeID, 1);
		return 1;
	}
	if (distanceTo(TO_TREE_1[TO_TREE_1.length - 1]) &lt; 3)
		toTree1 = false;
	if (distanceTo(TO_TREE_3[TO_TREE_3.length - 1]) &lt; 3)
		toTree3 = false;
	if (toTree1 || (getPosition(myPlayer()).x &gt;= 3010 &amp;&amp; !toTree3)) {
		toTree1 = true;
		walkPath(TO_TREE_1);
		return random(2500,3500);
	}
	if (toTree3 || (getPosition(myPlayer()).x &lt; 3010 &amp;&amp; !toTree1)) {
		toTree3 = true;
		walkPath(TO_TREE_3);
		return random(2500,3500);
	}
	return random(100,200);
}

private long checkTree() {
	if (treePos != null) {
		if (treeTimeOut == 0)
			treeTimeOut = System.currentTimeMillis() + random(35000,55000);
		if (objectType(getObjectAt(treePos)) != YEW) {
			walk(getPosition(myPlayer()));
			treePos = null;
			treeTimeOut = 0;
			return random(150,250);
		}
		if (System.currentTimeMillis() &gt; treeTimeOut) {
			treeTimeOut = 0;
			treePos = null;
			return random(150,250);
		}
		return 100;
	}
	treeTimeOut = 0;
	return 0;
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-my-varrock-yew-chopper/2065/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-my-varrock-yew-chopper/2065/1</link>
        <pubDate>Fri, 28 Apr 2006 02:38:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2065-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-my-varrock-yew-chopper/2065.rss">Help with my varrock yew chopper</source>
      </item>
  </channel>
</rss>
