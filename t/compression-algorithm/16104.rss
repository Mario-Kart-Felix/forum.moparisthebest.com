<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compression Algorithm</title>
    <link>https://forum.moparisthebest.com/t/compression-algorithm/16104</link>
    <description>Aha, this is quite a joke. It takes forever to compress shit. I haven&#39;t written the decompressor yet, but its easy. Heres the code anyway, if someone is interested in it:

[code]package org.rln.compression;

import java.util.ArrayList;

public class Compress {

	byte[] compressedByte;
	int uncompressedOffset;

	public Compress() {
		uncompressedOffset = 0;
	}

	public byte[] compress(byte[] uncompressedByte) {
		AdjacentByte bytes = new AdjacentByte();
		for(int i = 0; i &lt; uncompressedByte.length; i++)
			bytes.put(uncompressedByte[i], i);
		bytes.organizeAdjacents();
		compressedByte = new byte[(6 + (bytes.adjacents * 3) + (bytes.writingSize))];
		writeWord(bytes.adjacents);
		for(int i = 0; i &lt; bytes.adjacents; i++) {
			if(bytes.getAdjacents().get(i).occurences &gt; 0) {
				writeWord(bytes.getBytes().get(i).startIndex);
				writeByte(bytes.getBytes().get(i).occurences);
			}
		}
		writeDWord(bytes.writingSize);
		for(int i = 0; i &lt; bytes.writingSize; i++)
			writeByte(bytes.getBytes().get(i).value);

		return compressedByte;
	}

	public void writeByte(int i) {
		compressedByte[uncompressedOffset++] = (byte)i;
	}

	public void writeWord(int i) {
		compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 8);
		compressedByte[uncompressedOffset++] = (byte)i;
	}

	public void writeDWord(int i) {
		compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 24);
		compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 16);
		compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 8);
		compressedByte[uncompressedOffset++] = (byte)i;
	}
}[/code]
[code]package org.rln.compression;

import java.util.ArrayList;

public class AdjacentByte {

	ArrayList&lt;ByteSequence&gt; byteValues = new ArrayList&lt;ByteSequence&gt;();
	ArrayList&lt;ByteSequence&gt; adjacent = new ArrayList&lt;ByteSequence&gt;();
	int writingSize = 0;
	int adjacents = 0;

	public boolean containsValue(int b) {
		for(int i = 0; i &lt; byteValues.size(); i++)	
			if(b == byteValues.get(i).value)
				return true;

		return false;
	}

	public void put(int value, int index) {
		for(int i = 0; i &lt; byteValues.size(); i++)
			if(containsValue(value))
				if(isGroupedWith(byteValues.get(i), value, index)) {
					byteValues.get(i).addOccurence();
					return;
				}

		byteValues.add(new ByteSequence(value, index));
		writingSize++;
	}

	public boolean isGroupedWith(ByteSequence wrapper, int value, int index) {
		if((index - wrapper.currentIndex) == 1 &amp;&amp; value == wrapper.value)
			return true;

		return false;
	}
	
	public void organizeAdjacents() {
		for(int i = 0; i &lt; byteValues.size(); i++)
			if(byteValues.get(i).occurences &gt; 0) {
				adjacent.add(byteValues.get(i));
				adjacents++;
			}
	}
	
	public ArrayList&lt;ByteSequence&gt; getBytes() {
		return byteValues;
	}
	
	public ArrayList&lt;ByteSequence&gt; getAdjacents() {
		return adjacent;
	}
}[/code]
[code]package org.rln.compression;

public class ByteSequence {

	int value;
	int startIndex;
	int currentIndex;
	int occurences;

	public ByteSequence(int byteValue, int index) {
		value = byteValue;
		startIndex = index;
		occurences = 0;
		currentIndex = startIndex;
	}

	public void addOccurence() {
		currentIndex++;
		occurences++;
	}

}[/code]
Here is the dl link if you want everything packaged for you and shit - it includes an implementation:
http://upit.be/download.php?filename=compression7777.rar</description>
    
    <lastBuildDate>Fri, 29 Sep 2006 02:42:04 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>[quote=“RLN, post:5, topic:16104”][quote author=iwasinmoparseas101class link=topic=24075.msg276014#msg276014 date=1159422798]<br>
there was a compression algorithm in one of Dr. Dobb’s Journal (don’t know of any of you get that magazine). It was less code than this one.<br>
[/quote]Less code means what?[/quote]Smallor package.</p>
<p>Maybe he was just saying it was smaller.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/6</link>
        <pubDate>Fri, 29 Sep 2006 02:42:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-6</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@RLN RLN]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rln">@RLN</a> wrote:</p>
          <blockquote>
              <p>[quote=“iwasinmoparseas101class, post:4, topic:16104”]there was a compression algorithm in one of Dr. Dobb’s Journal (don’t know of any of you get that magazine). It was less code than this one.[/quote]Less code means what?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/5</link>
        <pubDate>Fri, 29 Sep 2006 02:38:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-5</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@iwasinmoparseas101cl iwasinmoparseas101class]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iwasinmoparseas101cl">@iwasinmoparseas101cl</a> wrote:</p>
          <blockquote>
              <p>there was a compression algorithm in one of Dr. Dobb’s Journal (don’t know of any of you get that magazine). It was less code than this one.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/4</link>
        <pubDate>Thu, 28 Sep 2006 05:53:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-4</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@BobDole81 BobDole81]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bobdole81">@BobDole81</a> wrote:</p>
          <blockquote>
              <p>GJ (I’ve already given you all my comments, but now you get another post) <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:">  I’ll give you my revision that we spoke about yesteday later this evening.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/3</link>
        <pubDate>Tue, 26 Sep 2006 04:03:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-3</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I will give you a post RLN, looks good <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/2</link>
        <pubDate>Mon, 25 Sep 2006 04:21:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-2</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
      <item>
        <title>Compression Algorithm</title>
        <dc:creator><![CDATA[@RLN RLN]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rln">@RLN</a> wrote:</p>
          <blockquote>
              <p>Aha, this is quite a joke. It takes forever to compress shit. I haven’t written the decompressor yet, but its easy. Heres the code anyway, if someone is interested in it:</p>
<p>[code]package org.rln.compression;</p>
<p>import java.util.ArrayList;</p>
<p>public class Compress {</p>
<pre><code>byte[] compressedByte;
int uncompressedOffset;

public Compress() {
	uncompressedOffset = 0;
}

public byte[] compress(byte[] uncompressedByte) {
	AdjacentByte bytes = new AdjacentByte();
	for(int i = 0; i &lt; uncompressedByte.length; i++)
		bytes.put(uncompressedByte[i], i);
	bytes.organizeAdjacents();
	compressedByte = new byte[(6 + (bytes.adjacents * 3) + (bytes.writingSize))];
	writeWord(bytes.adjacents);
	for(int i = 0; i &lt; bytes.adjacents; i++) {
		if(bytes.getAdjacents().get(i).occurences &gt; 0) {
			writeWord(bytes.getBytes().get(i).startIndex);
			writeByte(bytes.getBytes().get(i).occurences);
		}
	}
	writeDWord(bytes.writingSize);
	for(int i = 0; i &lt; bytes.writingSize; i++)
		writeByte(bytes.getBytes().get(i).value);

	return compressedByte;
}

public void writeByte(int i) {
	compressedByte[uncompressedOffset++] = (byte)i;
}

public void writeWord(int i) {
	compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 8);
	compressedByte[uncompressedOffset++] = (byte)i;
}

public void writeDWord(int i) {
	compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 24);
	compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 16);
	compressedByte[uncompressedOffset++] = (byte)(i &gt;&gt; 8);
	compressedByte[uncompressedOffset++] = (byte)i;
}
</code></pre>
<p>}[/code]</p>
<p>[code]package org.rln.compression;</p>
<p>import java.util.ArrayList;</p>
<p>public class AdjacentByte {</p>
<pre><code>ArrayList&lt;ByteSequence&gt; byteValues = new ArrayList&lt;ByteSequence&gt;();
ArrayList&lt;ByteSequence&gt; adjacent = new ArrayList&lt;ByteSequence&gt;();
int writingSize = 0;
int adjacents = 0;

public boolean containsValue(int b) {
	for(int i = 0; i &lt; byteValues.size(); i++)	
		if(b == byteValues.get(i).value)
			return true;

	return false;
}

public void put(int value, int index) {
	for(int i = 0; i &lt; byteValues.size(); i++)
		if(containsValue(value))
			if(isGroupedWith(byteValues.get(i), value, index)) {
				byteValues.get(i).addOccurence();
				return;
			}

	byteValues.add(new ByteSequence(value, index));
	writingSize++;
}

public boolean isGroupedWith(ByteSequence wrapper, int value, int index) {
	if((index - wrapper.currentIndex) == 1 &amp;&amp; value == wrapper.value)
		return true;

	return false;
}

public void organizeAdjacents() {
	for(int i = 0; i &lt; byteValues.size(); i++)
		if(byteValues.get(i).occurences &gt; 0) {
			adjacent.add(byteValues.get(i));
			adjacents++;
		}
}

public ArrayList&lt;ByteSequence&gt; getBytes() {
	return byteValues;
}

public ArrayList&lt;ByteSequence&gt; getAdjacents() {
	return adjacent;
}
</code></pre>
<p>}[/code]</p>
<p>[code]package org.rln.compression;</p>
<p>public class ByteSequence {</p>
<pre><code>int value;
int startIndex;
int currentIndex;
int occurences;

public ByteSequence(int byteValue, int index) {
	value = byteValue;
	startIndex = index;
	occurences = 0;
	currentIndex = startIndex;
}

public void addOccurence() {
	currentIndex++;
	occurences++;
}
</code></pre>
<p>}[/code]<br>
Here is the dl link if you want everything packaged for you and shit - it includes an implementation:<br>
<a href="http://upit.be/download.php?filename=compression7777.rar" class="onebox" target="_blank" rel="nofollow noopener">http://upit.be/download.php?filename=compression7777.rar</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compression-algorithm/16104/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compression-algorithm/16104/1</link>
        <pubDate>Mon, 25 Sep 2006 02:13:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16104-1</guid>
        <source url="https://forum.moparisthebest.com/t/compression-algorithm/16104.rss">Compression Algorithm</source>
      </item>
  </channel>
</rss>
