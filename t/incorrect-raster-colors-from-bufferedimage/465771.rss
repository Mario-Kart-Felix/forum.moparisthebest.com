<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Incorrect Raster colors from BufferedImage</title>
    <link>https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771</link>
    <description>I&#39;m experimenting with images, and am trying to read an image file (which looks fine) and duplicate it on a larger scale (16x) and output that file. The problem I&#39;m having is that the output colors don&#39;t match the input colors.

[code=Java]
final int mapWidth = 16;
final int mapHeight = 16;
final File imageFile = new File(&quot;C:/Users/Zymus/Pictures/tiles/4.png&quot;);
final BufferedImage srcImage = ImageIO.read(imageFile);
final BufferedImage result = new BufferedImage(mapWidth * 16, mapHeight * 16, srcImage.getType());
for (int x = 0; x &lt; 16; x++) {
    for (int y = 0; y &lt; 16; y++) {
        result.getRaster().setRect(x * 16, y * 16, srcImage.getData());
    }
}
ImageIO.write(result, &quot;png&quot;, new File(&quot;C:/Users/Zymus/Pictures/tiles/4-out.png&quot;));
[/code]

I want the output image to basically by 16 of the input image in length and width.

Here&#39;s the input image (note: it&#39;s only 16x16)
[IMG]http://i1060.photobucket.com/albums/t459/moore_zyle/4.png[/img]

And the output
[IMG]http://i1060.photobucket.com/albums/t459/moore_zyle/4-out.png[/img]

At first I thought it was the image type, so I went from TYPE_INT_RGB to TYPE_INT_ARGB because the input is a PNG which supports an alpha channel, but ArrayIndexOutOfBounds exceptions were thrown, then I changed the type to the source image&#39;s type (BufferedImage.TYPE_BYTE_INDEXED) in hopes that that would solve it, but it ended up blue instead of yellow. I believe it may have something to do with the fact it&#39;s stored in a byte, instead of an integer, but saving it differently and reloading doesn&#39;t help.

Then I thought that it might be the ColorModel that&#39;s different, but I found that they were the same.


EDIT: I fixed it. I had to use the following code when converting it
[code=Java]
BufferedImage result = new BufferedImage(src.getWidth(), src.getHeight(), BufferedImage.TYPE_INT_ARGB);
result.getGraphics().drawImage(src, 0, 0, null);
[/code]

It turns out as expected now. Does anyone know of a &quot;cleaner&quot; way of doing it though? Without having to call drawImage? I was trying with the get/setData/Pixels but to no avail.</description>
    
    <lastBuildDate>Sat, 03 Nov 2012 17:31:45 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Incorrect Raster colors from BufferedImage</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="465771">
<div class="title">
<div class="quote-controls"></div>
 veer:</div>
<blockquote>
<p>As I guessed, your input image uses a palette (i.e. indexed color model), hence why it’s only 8-bit. The reason your colors turn out strange is due to the treatment of indices into the source image’s palette (which are what BufferedImage.getData really is) as colors; the mapping treats the indices as colors. The indices are low, so the lower bits are what really change, hence the resultant shades of green and blue.</p>
</blockquote>
</aside>
<p>Yup, figured that out after setting the output type to the input resulted in the same bluish tint.</p>
<p>Do you know of a better way to convert it instead of calling the <span class="bbcode-i">drawImage</span> function? Other than going pixel by pixel and converting it?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/3</link>
        <pubDate>Sat, 03 Nov 2012 17:31:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-465771-3</guid>
        <source url="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771.rss">Incorrect Raster colors from BufferedImage</source>
      </item>
      <item>
        <title>Incorrect Raster colors from BufferedImage</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>As I guessed, your input image uses a palette (i.e. indexed color model), hence why it’s only 8-bit. The reason your colors turn out strange is due to the treatment of indices into the source image’s palette (which are what BufferedImage.getData really is) as colors; the mapping treats the indices as colors. The indices are low, so the lower bits are what really change, hence the resultant shades of green and blue.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/2</link>
        <pubDate>Sat, 03 Nov 2012 15:00:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-465771-2</guid>
        <source url="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771.rss">Incorrect Raster colors from BufferedImage</source>
      </item>
      <item>
        <title>Incorrect Raster colors from BufferedImage</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>I’m experimenting with images, and am trying to read an image file (which looks fine) and duplicate it on a larger scale (16x) and output that file. The problem I’m having is that the output colors don’t match the input colors.</p>
<pre><code class="lang-auto">final int mapWidth = 16;
final int mapHeight = 16;
final File imageFile = new File("C:/Users/Zymus/Pictures/tiles/4.png");
final BufferedImage srcImage = ImageIO.read(imageFile);
final BufferedImage result = new BufferedImage(mapWidth * 16, mapHeight * 16, srcImage.getType());
for (int x = 0; x &lt; 16; x++) {
    for (int y = 0; y &lt; 16; y++) {
        result.getRaster().setRect(x * 16, y * 16, srcImage.getData());
    }
}
ImageIO.write(result, "png", new File("C:/Users/Zymus/Pictures/tiles/4-out.png"));</code></pre>
<p>I want the output image to basically by 16 of the input image in length and width.</p>
<p>Here’s the input image (note: it’s only 16x16)<br>
<img src="http://i1060.photobucket.com/albums/t459/moore_zyle/4.png" alt width="16" height="16"></p>
<p>And the output<br>
<img src="http://i1060.photobucket.com/albums/t459/moore_zyle/4-out.png" alt width="256" height="256"></p>
<p>At first I thought it was the image type, so I went from TYPE_INT_RGB to TYPE_INT_ARGB because the input is a PNG which supports an alpha channel, but ArrayIndexOutOfBounds exceptions were thrown, then I changed the type to the source image’s type (BufferedImage.TYPE_BYTE_INDEXED) in hopes that that would solve it, but it ended up blue instead of yellow. I believe it may have something to do with the fact it’s stored in a byte, instead of an integer, but saving it differently and reloading doesn’t help.</p>
<p>Then I thought that it might be the ColorModel that’s different, but I found that they were the same.</p>
<p>EDIT: I fixed it. I had to use the following code when converting it</p>
<pre><code class="lang-auto">BufferedImage result = new BufferedImage(src.getWidth(), src.getHeight(), BufferedImage.TYPE_INT_ARGB);
result.getGraphics().drawImage(src, 0, 0, null);</code></pre>
<p>It turns out as expected now. Does anyone know of a “cleaner” way of doing it though? Without having to call drawImage? I was trying with the get/setData/Pixels but to no avail.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771/1</link>
        <pubDate>Fri, 02 Nov 2012 02:36:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-465771-1</guid>
        <source url="https://forum.moparisthebest.com/t/incorrect-raster-colors-from-bufferedimage/465771.rss">Incorrect Raster colors from BufferedImage</source>
      </item>
  </channel>
</rss>
