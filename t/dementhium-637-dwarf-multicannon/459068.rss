<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dementhium 637 Dwarf MultiCannon</title>
    <link>https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068</link>
    <description>[code=java]package org.dementhium.event.impl.interfaces;

import java.util.ArrayList;

import org.dementhium.event.EventListener;
import org.dementhium.event.EventManager;
import org.dementhium.model.World;
import org.dementhium.model.player.Player;
import org.dementhium.model.npc.NPC;
import org.dementhium.model.map.GameObject;
import org.dementhium.model.map.ObjectManager;
import org.dementhium.model.Location;
import org.dementhium.tickable.Tick;
import org.dementhium.model.Mob;
import org.dementhium.model.definition.WeaponInterface;
import org.dementhium.model.misc.DamageManager.DamageType;
import org.dementhium.model.misc.ProjectileManager;
import org.dementhium.net.ActionSender;
import org.dementhium.model.combat.CombatMovement;
import org.dementhium.model.map.Region;
import org.dementhium.util.Misc;
import org.dementhium.model.combat.Damage;
import org.dementhium.model.combat.ExtraTarget;

/**
 * Handles the Dwarf Multicannon
 * @author Wildking72
 *
 */ 
public class DwarfMultiCannonListener extends EventListener {

	private int cannonBalls = 0;
	private int[] CANNON_PIECES = {6, 8, 10, 12};
	private int[] CANNON_OBJECTS = {7, 8, 9, 6};
	private String[] CANNON_MESSAGES = {
		&quot;You place the cannon base on the ground.&quot;, &quot;You add the stand.&quot;,
		&quot;You add the barrel.&quot;, &quot;You add the furnace.&quot;
	};
	public boolean stopRotation;
	public GameObject cannonObject;
	public int cannonDirection;
	private Player owner;
	
	public final Player getOwner() {
		return owner;
	}
	public final void setOwner(Player owner) {
		this.owner = owner;
	}
	public void setCannonBalls(int amount) {
		this.cannonBalls = amount;
	}
	public int getCannonBalls() {
		return cannonBalls;
	}
	
	public void loadCannon(GameObject object) {
		int amountTaken = 0;
		if (cannonBalls == 30) {
			owner.sendMessage(&quot;Your cannon is already loaded.&quot;);
			return;
		}
		if (!owner.getInventory().contains(2)) {
			owner.sendMessage(&quot;You need cannonballs to fire the Dwarf Multicannon.&quot;);
			return;
		}
		owner.sendMessage(&quot;You load the cannon with &quot; + amountTaken + &quot; cannon balls.&quot;);
		startRotating(object);
	}
	
	public boolean fireCannon(GameObject object) {
		boolean hit = false;
		for (NPC n : Region.getLocalNPCs(owner.getCannonLocation())) {
			int nX = n.getLocation().getX();
			int nY = n.getLocation().getY();

			int cX = owner.getCannonLocation().getX();
			int cY = owner.getCannonLocation().getY();
			
			if (n == null || n.isDead() || !n.isAttackable()) {
				continue;
			}
			switch (cannonDirection) {
				case 0:
					if (nX &gt;= (cX - 1) &amp;&amp; nX &lt;= (cX + 1) &amp;&amp; nY &lt;= (cY + 8) &amp;&amp; nY &gt;= cY) {
						hit = true;
					} else {
						hit = false;
					}
					break;
				case 1:
					hit = false;
					break;
				case 2:
					if (nX &lt;= (cX + 8) &amp;&amp; nX &gt;= cX &amp;&amp; nY &gt;= (cY - 1) &amp;&amp; nY &lt;= (cY + 1)) {
						hit = true;
					} else {
						hit = false;
					}
					break;
				case 3:
					hit = false;
					break;
				case 4:
					if (nX &gt;= (cX - 1) &amp;&amp; nX &lt;= (cX + 1) &amp;&amp; nY &gt;= (cY - 8) &amp;&amp; nY &lt;= cY) {
						hit = true;
					} else {
						hit = false;
					}
					break;
				case 5:
					hit = false;
					break;
				case 6:
					if ( nX &gt;= (cX - 8) &amp;&amp; nX &lt;= cX &amp;&amp; nY &gt;= (cY - 1) &amp;&amp; nY &lt;= (cY + 1)) {
						hit = true;
					} else {
						hit = false;
					}
					break;
				case 7:
					hit = false;
					break;
				}
			}
			if (hit) {
				ProjectileManager.sendGlobalProjectile(owner.getCannonLocation(), n.getLocation(), 53, 38, 38, 30);
				n.getDamageManager().damage(owner, Misc.random(300), 300, DamageType.RANGE, 0);
				n.getCombatExecutor().setVictim(getOwner());
				return true;
			}
		}
		return false;
	}
	
	public void startRotating(final GameObject object) {
		World.getWorld().submit(new Tick(2) {
			int step = 0;
			public void execute() {
				if (stopRotation) {
					this.stop();
				} else if (step == 0 &amp;&amp; cannonDirection != 0) {
					ActionSender.sendAnimateObject(owner, object, 516);
				} else if (step == 1) {
					ActionSender.sendAnimateObject(owner, object, 517);
				} else if (step == 2) {
					ActionSender.sendAnimateObject(owner, object, 518);
				} else if (step == 3) {
					ActionSender.sendAnimateObject(owner, object, 519);
				} else if (step == 4) {
					ActionSender.sendAnimateObject(owner, object, 520);
				} else if (step == 5) {
					ActionSender.sendAnimateObject(owner, object, 521);
				} else if (step == 6) {
					ActionSender.sendAnimateObject(owner, object, 514);
				} else if (step == 7) {
					ActionSender.sendAnimateObject(owner, object, 515);
					step = -1;
					cannonDirection = 0;
				}
				if (fireCannon(object)) {
					cannonBalls--;
					if (!hasCannonBalls()) {
						owner.sendMessage(&quot;Your cannon has ran out of ammo!&quot;);
						this.stop();
					}
				}
				cannonDirection++;
				step++;
			} 
		});
	}
	
	public void pickupCannon(GameObject object) {
		if (owner.getInventory().getFreeSlots() &lt; (hasCannonBalls() ? 5 : 4)) {
			owner.sendMessage(&quot;You need atleast &quot;+(hasCannonBalls() ? &quot;5&quot; : &quot;4&quot;)+&quot; inventory spots to pickup your cannon.&quot;);
			return;
		}
		stopRotation = true;
		ObjectManager.removeCustomObject(owner.getCannonLocation(), 10);
		for (int item : CANNON_PIECES) {
			owner.getInventory().addItem(item, 1);
		}
		if (hasCannonBalls()) { 
			owner.getInventory().addItem(2, cannonBalls);
			cannonBalls = 0;
		}
	}

	@Override
	public void register(EventManager manager) {
		manager.registerInterfaceListener(149, this);
		manager.registerObjectListener(5, this);
		manager.registerObjectListener(6, this);
	}

	public boolean objectOption(final Player player, int objectId, GameObject gameObject, Location location, ClickOption option) {
		switch (objectId) {
			case 6:
				switch (option) {
					case FIRST:
						if (getOwner() != player) {
							player.sendMessage(&quot;This is not yours.&quot;);
							return false;
						}
						loadCannon(gameObject);
						return true;
					case SECOND:
						if (getOwner() != player) {
							player.sendMessage(&quot;This is not yours.&quot;);
							return false;
						}
						pickupCannon(gameObject);
						return true;
					}
				return true;
			case 5:
				if (getOwner() != player) {
					player.sendMessage(&quot;This is not yours.&quot;);
					return false;
				}
				return true;
		}
		return false;
	}
	
    public boolean interfaceOption(final Player player, int interfaceId, int buttonId, int slot, int itemId, int opcode) {
		if (interfaceId != 149) {
			return false;
		}
			if (opcode == 6) {
				if (itemId == 6) {
					if (!(player.getInventory().contains(6) &amp;&amp; player.getInventory().contains(8) &amp;&amp; 
						player.getInventory().contains(10) &amp;&amp; player.getInventory().contains(12))) {
						player.sendMessage(&quot;You don&#39;t have all of the pieces for the Dwarf Multicannon.&quot;);
						return false;
					}
					setOwner(player);
					owner.setAttribute(&quot;cantMove&quot;, Boolean.TRUE);
					owner.setCannonLocation(Location.locate(owner.getLocation().getX(), owner.getLocation().getY(), owner.getLocation().getZ()));
					World.getWorld().submit(new Tick(2) {
						int count = 0;
						public void execute() {
							if (count &gt;= 4) {
								owner.removeAttribute(&quot;cantMove&quot;);
								this.stop();
							}
							if (count &gt; 0) {
								ObjectManager.removeCustomObject(owner.getCannonLocation(), 10);
							}
							owner.animate(827);
							ObjectManager.addCustomObject(owner, CANNON_OBJECTS[count], owner.getLocation().getX(), 
								owner.getLocation().getY(), owner.getLocation().getZ(), 10, 0
							);
							owner.getInventory().deleteItem(CANNON_PIECES[count], 1);
							owner.sendMessage(CANNON_MESSAGES[count]);
							count++;
						}
					});
					return true;
				}
				return true;
			}
			return true;
		}
	
	public boolean hasCannonBalls() {
		return cannonBalls &gt; 0;
	}
	
}[/code]</description>
    
    <lastBuildDate>Tue, 11 Sep 2012 14:09:35 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dementhium 637 Dwarf MultiCannon</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="459068">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/vyre-scape/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> vyre-scape:</div>
<blockquote>
<p>Cool. Did you take it from 2^1?</p>
</blockquote>
</aside>
<p>I used his ideas.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/3</link>
        <pubDate>Tue, 11 Sep 2012 14:09:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459068-3</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068.rss">Dementhium 637 Dwarf MultiCannon</source>
      </item>
      <item>
        <title>Dementhium 637 Dwarf MultiCannon</title>
        <dc:creator><![CDATA[@vyre-scape vyre-scape]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vyre-scape">@vyre-scape</a> wrote:</p>
          <blockquote>
              <p>Cool. Did you take it from 2^1?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/2</link>
        <pubDate>Tue, 11 Sep 2012 07:15:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459068-2</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068.rss">Dementhium 637 Dwarf MultiCannon</source>
      </item>
      <item>
        <title>Dementhium 637 Dwarf MultiCannon</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>[code=java]package org.dementhium.event.impl.interfaces;</p>
<p>import java.util.ArrayList;</p>
<p>import org.dementhium.event.EventListener;<br>
import org.dementhium.event.EventManager;<br>
import org.dementhium.model.World;<br>
import org.dementhium.model.player.Player;<br>
import org.dementhium.model.npc.NPC;<br>
import org.dementhium.model.map.GameObject;<br>
import org.dementhium.model.map.ObjectManager;<br>
import org.dementhium.model.Location;<br>
import org.dementhium.tickable.Tick;<br>
import org.dementhium.model.Mob;<br>
import org.dementhium.model.definition.WeaponInterface;<br>
import org.dementhium.model.misc.DamageManager.DamageType;<br>
import org.dementhium.model.misc.ProjectileManager;<br>
import org.dementhium.net.ActionSender;<br>
import org.dementhium.model.combat.CombatMovement;<br>
import org.dementhium.model.map.Region;<br>
import org.dementhium.util.Misc;<br>
import org.dementhium.model.combat.Damage;<br>
import org.dementhium.model.combat.ExtraTarget;</p>
<p>/**</p>
<ul>
<li>Handles the Dwarf Multicannon</li>
<li>
<span class="mention">@author</span> Wildking72</li>
<li>
</li>
</ul>
<p>*/<br>
public class DwarfMultiCannonListener extends EventListener {</p>
<pre><code>private int cannonBalls = 0;
private int[] CANNON_PIECES = {6, 8, 10, 12};
private int[] CANNON_OBJECTS = {7, 8, 9, 6};
private String[] CANNON_MESSAGES = {
	"You place the cannon base on the ground.", "You add the stand.",
	"You add the barrel.", "You add the furnace."
};
public boolean stopRotation;
public GameObject cannonObject;
public int cannonDirection;
private Player owner;

public final Player getOwner() {
	return owner;
}
public final void setOwner(Player owner) {
	this.owner = owner;
}
public void setCannonBalls(int amount) {
	this.cannonBalls = amount;
}
public int getCannonBalls() {
	return cannonBalls;
}

public void loadCannon(GameObject object) {
	int amountTaken = 0;
	if (cannonBalls == 30) {
		owner.sendMessage("Your cannon is already loaded.");
		return;
	}
	if (!owner.getInventory().contains(2)) {
		owner.sendMessage("You need cannonballs to fire the Dwarf Multicannon.");
		return;
	}
	owner.sendMessage("You load the cannon with " + amountTaken + " cannon balls.");
	startRotating(object);
}

public boolean fireCannon(GameObject object) {
	boolean hit = false;
	for (NPC n : Region.getLocalNPCs(owner.getCannonLocation())) {
		int nX = n.getLocation().getX();
		int nY = n.getLocation().getY();

		int cX = owner.getCannonLocation().getX();
		int cY = owner.getCannonLocation().getY();
		
		if (n == null || n.isDead() || !n.isAttackable()) {
			continue;
		}
		switch (cannonDirection) {
			case 0:
				if (nX &gt;= (cX - 1) &amp;&amp; nX &lt;= (cX + 1) &amp;&amp; nY &lt;= (cY + 8) &amp;&amp; nY &gt;= cY) {
					hit = true;
				} else {
					hit = false;
				}
				break;
			case 1:
				hit = false;
				break;
			case 2:
				if (nX &lt;= (cX + 8) &amp;&amp; nX &gt;= cX &amp;&amp; nY &gt;= (cY - 1) &amp;&amp; nY &lt;= (cY + 1)) {
					hit = true;
				} else {
					hit = false;
				}
				break;
			case 3:
				hit = false;
				break;
			case 4:
				if (nX &gt;= (cX - 1) &amp;&amp; nX &lt;= (cX + 1) &amp;&amp; nY &gt;= (cY - 8) &amp;&amp; nY &lt;= cY) {
					hit = true;
				} else {
					hit = false;
				}
				break;
			case 5:
				hit = false;
				break;
			case 6:
				if ( nX &gt;= (cX - 8) &amp;&amp; nX &lt;= cX &amp;&amp; nY &gt;= (cY - 1) &amp;&amp; nY &lt;= (cY + 1)) {
					hit = true;
				} else {
					hit = false;
				}
				break;
			case 7:
				hit = false;
				break;
			}
		}
		if (hit) {
			ProjectileManager.sendGlobalProjectile(owner.getCannonLocation(), n.getLocation(), 53, 38, 38, 30);
			n.getDamageManager().damage(owner, Misc.random(300), 300, DamageType.RANGE, 0);
			n.getCombatExecutor().setVictim(getOwner());
			return true;
		}
	}
	return false;
}

public void startRotating(final GameObject object) {
	World.getWorld().submit(new Tick(2) {
		int step = 0;
		public void execute() {
			if (stopRotation) {
				this.stop();
			} else if (step == 0 &amp;&amp; cannonDirection != 0) {
				ActionSender.sendAnimateObject(owner, object, 516);
			} else if (step == 1) {
				ActionSender.sendAnimateObject(owner, object, 517);
			} else if (step == 2) {
				ActionSender.sendAnimateObject(owner, object, 518);
			} else if (step == 3) {
				ActionSender.sendAnimateObject(owner, object, 519);
			} else if (step == 4) {
				ActionSender.sendAnimateObject(owner, object, 520);
			} else if (step == 5) {
				ActionSender.sendAnimateObject(owner, object, 521);
			} else if (step == 6) {
				ActionSender.sendAnimateObject(owner, object, 514);
			} else if (step == 7) {
				ActionSender.sendAnimateObject(owner, object, 515);
				step = -1;
				cannonDirection = 0;
			}
			if (fireCannon(object)) {
				cannonBalls--;
				if (!hasCannonBalls()) {
					owner.sendMessage("Your cannon has ran out of ammo!");
					this.stop();
				}
			}
			cannonDirection++;
			step++;
		} 
	});
}

public void pickupCannon(GameObject object) {
	if (owner.getInventory().getFreeSlots() &lt; (hasCannonBalls() ? 5 : 4)) {
		owner.sendMessage("You need atleast "+(hasCannonBalls() ? "5" : "4")+" inventory spots to pickup your cannon.");
		return;
	}
	stopRotation = true;
	ObjectManager.removeCustomObject(owner.getCannonLocation(), 10);
	for (int item : CANNON_PIECES) {
		owner.getInventory().addItem(item, 1);
	}
	if (hasCannonBalls()) { 
		owner.getInventory().addItem(2, cannonBalls);
		cannonBalls = 0;
	}
}

@Override
public void register(EventManager manager) {
	manager.registerInterfaceListener(149, this);
	manager.registerObjectListener(5, this);
	manager.registerObjectListener(6, this);
}

public boolean objectOption(final Player player, int objectId, GameObject gameObject, Location location, ClickOption option) {
	switch (objectId) {
		case 6:
			switch (option) {
				case FIRST:
					if (getOwner() != player) {
						player.sendMessage("This is not yours.");
						return false;
					}
					loadCannon(gameObject);
					return true;
				case SECOND:
					if (getOwner() != player) {
						player.sendMessage("This is not yours.");
						return false;
					}
					pickupCannon(gameObject);
					return true;
				}
			return true;
		case 5:
			if (getOwner() != player) {
				player.sendMessage("This is not yours.");
				return false;
			}
			return true;
	}
	return false;
}

public boolean interfaceOption(final Player player, int interfaceId, int buttonId, int slot, int itemId, int opcode) {
	if (interfaceId != 149) {
		return false;
	}
		if (opcode == 6) {
			if (itemId == 6) {
				if (!(player.getInventory().contains(6) &amp;&amp; player.getInventory().contains(8) &amp;&amp; 
					player.getInventory().contains(10) &amp;&amp; player.getInventory().contains(12))) {
					player.sendMessage("You don't have all of the pieces for the Dwarf Multicannon.");
					return false;
				}
				setOwner(player);
				owner.setAttribute("cantMove", Boolean.TRUE);
				owner.setCannonLocation(Location.locate(owner.getLocation().getX(), owner.getLocation().getY(), owner.getLocation().getZ()));
				World.getWorld().submit(new Tick(2) {
					int count = 0;
					public void execute() {
						if (count &gt;= 4) {
							owner.removeAttribute("cantMove");
							this.stop();
						}
						if (count &gt; 0) {
							ObjectManager.removeCustomObject(owner.getCannonLocation(), 10);
						}
						owner.animate(827);
						ObjectManager.addCustomObject(owner, CANNON_OBJECTS[count], owner.getLocation().getX(), 
							owner.getLocation().getY(), owner.getLocation().getZ(), 10, 0
						);
						owner.getInventory().deleteItem(CANNON_PIECES[count], 1);
						owner.sendMessage(CANNON_MESSAGES[count]);
						count++;
					}
				});
				return true;
			}
			return true;
		}
		return true;
	}

public boolean hasCannonBalls() {
	return cannonBalls &gt; 0;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068/1</link>
        <pubDate>Sat, 08 Sep 2012 22:17:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459068-1</guid>
        <source url="https://forum.moparisthebest.com/t/dementhium-637-dwarf-multicannon/459068.rss">Dementhium 637 Dwarf MultiCannon</source>
      </item>
  </channel>
</rss>
