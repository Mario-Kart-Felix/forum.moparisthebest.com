<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C# delegate and event tutorial</title>
    <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679</link>
    <description>Well I recently started learning C#, and to be quite honest I&#39;m already in love with it lol.  It has so many great features! One of the things I really loved was Delegates and Events it really makes making an event driven system EASY!

You declare an event like this:
[code=csharp]public event &lt;delegate&gt; EventName;[/code]

Well to use that you must make a delegate (like a function pointer)

You declare a delegate like this:
[code=csharp]public delegate &lt;type&gt; &lt;name&gt;(params);[/code]

This is a sample class to show how you may use this:
[code=csharp]
class DelegateExample
{
    public delegate void IrcCommandHandler(String command, String args);
    public event IrcCommandHandler IrcCommandEvent;

    public static void Main()
    {
        DelegateExample de = new DelegateExample();
        
        // Register a new event handler
        IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand);

        // To fire the event:
        IrcCommandEvent(&quot;say&quot;, &quot;hello world&quot;);        
    }

    public void handleIrcCommand(String command, String args)
    {
        System.Console.WriteLine(&quot;Command: {0} Args: {1}&quot;);
    }       
}
[/code]

I don&#39;t believe I missed anything I am typing this up on my iPhone.

Anyway the comments show tell you a lot about it but to explain a little more:

[code=csharp]
public delegate void IrcCommandHandler(String command, String args);
    public event IrcCommandHandler IrcCommandEvent;[/code]

This declares the delegate (meaning the way a function of this type should look basically) and also the event which needs a delegate to say what all the handlers of this event should expect to receive as arguments.


[code=csharp]
IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand);[/code]. 

This adds the event handler (handleIrcCommand) to the events list of handlers to fire off.  You can remove it by using -= in the same format as used to add.

[code=csharp]
IrcCommandEvent(&quot;say&quot;, &quot;hello world&quot;);[/code]

This fires the event, which calls all the handlers with the specified args. 

If I left out something in this, or you think I should explain something better, please, let me know.  I typed all of this out on my iPhone lol.

Hope you guys liked this, and hopefully learned something XD</description>
    
    <lastBuildDate>Tue, 09 Feb 2010 05:16:19 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>Oh never mind, I thought delegates could store multiple types (I didn’t know how the callback methods were invoked until reading this thread again).</p>
<p>Anyways, I made the small implementation in C:</p>
<p>event.h</p>
<pre><code class="lang-auto">/* event.h */
#ifndef _EVENT

#define _EVENT

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

typedef struct {
    int handlerc;
    int size;
    void **handlers;
} event;

extern void invoke_handlers(event *); /*Have user iterate through 'handlers', cast to respective function type and invoke*/
void init_event(event *);
void add_handler(event *, void *);
void remove_handler(event *, int);
void dispose_event(event *);

#endif</code></pre>
<p>event.c</p>
<pre><code class="lang-auto">/* event.c */
#include "event.h"

void init_event(event *e)
{
    e-&gt;handlerc = 0;
    e-&gt;size = 10;
    e-&gt;handlers = malloc(sizeof(void *) * 10);
}

void add_handler(event *e, void *handler)
{
    if (e-&gt;handlerc &gt;= e-&gt;size) {
        e-&gt;size += 10;
        e-&gt;handlers = realloc(e-&gt;handlers, sizeof(void *) * e-&gt;size);
        if (e-&gt;handlers == NULL) {
            perror("Couldn't allocate enough memory..");
            exit(1);
        }
    }
    e-&gt;handlers[e-&gt;handlerc++] = handler;
}

void remove_handler(event *e, int index)
{
    e-&gt;handlers[index] = NULL;
    for (; index &lt; (e-&gt;handlerc - 1); index++) {
        e-&gt;handlers[index] = e-&gt;handlers[index + 1];
    }
    e-&gt;handlerc--;
}

void dispose_event(event *e)
{
    free(e-&gt;handlers);
}</code></pre>
<p>Usage:</p>
<p>main.c</p>
<pre><code class="lang-auto">/* main.c */
#include &lt;stdio.h&gt;
#include "event.h"

void test_func(void)
{
    printf("Test\n");
}

void test_func2(void)
{
    printf("Test2\n");
}

void invoke_handlers(event *e)
{
    int i;
    for (i = 0; i &lt; e-&gt;handlerc; i++) {
        ((void (*)(void)) e-&gt;handlers[i]) ();
    }
}

int main(int argc, char **argv)
{
    event e;
    init_event(&amp;e);
    add_handler(&amp;e, &amp;test_func);
    add_handler(&amp;e, &amp;test_func2);
    invoke_handlers(&amp;e);
    dispose_event(&amp;e);
    
    return 0;
}</code></pre>
<p>It’s much cleaner in C++ though and obviously not type safe. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/22</link>
        <pubDate>Tue, 09 Feb 2010 05:16:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-22</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:19, topic:328679”][quote author=oksuper_ link=topic=425076.msg3122200#msg3122200 date=1265637228]</p>
<pre><code class="lang-auto">template &lt;typename hndlr_type&gt;
class event {
    private:
        std::vector&lt;hndlr_type&gt; handlers;
    public:
        void operator()(int arg_cnt, ...) {
            ... do da rest  ...
        }

        void operator+=(hndlr_type&amp; hndlr) {
            handlers.push_back(hndlr);
        }
};
...
typedef void (* irc_msg_listener)(irc_user&amp;, std::string);
event&lt;irc_msg_listener&gt; evt;
...
evt += my_msg_listener;
...
evt(sender, "gay");</code></pre>
<p>something like that… baddabing<br>
ps that is prolly wrong seeing as i did it all in my head and i am a nerd<br>
[/quote]That obviously does not provide the same functionality as C# delegates mainly because with your design, you cannot store pointers to functions that are not of the same type within the same ‘event’ object. Unless you either use inline assembly or use a ‘void *’ to store the address of any function and have the user cast to its respective type, I don’t see a way of properly achieving this.[/quote]<br>
no shit you can only add a single type… afaik that is the fucking point.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/21</link>
        <pubDate>Tue, 09 Feb 2010 03:37:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-21</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="18" data-topic="328679">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/mopman/40/33_1.png" class="avatar"> Mopman:</div>
<blockquote>
<p>surely 2) is not a delegate feature its just a side effect of your language supporting anonymous functions</p>
</blockquote>
</aside>
<p>Maybe, I just consider them to be particularly related, as anonymous methods use and require delegates (in C#) <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/20</link>
        <pubDate>Tue, 09 Feb 2010 01:24:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-20</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“oksuper_, post:12, topic:328679”][code]<br>
template <br>
class event {<br>
private:<br>
std::vector&lt;hndlr_type&gt; handlers;<br>
public:<br>
void operator()(int arg_cnt, …) {<br>
… do da rest  …<br>
}</p>
<pre><code>    void operator+=(hndlr_type&amp; hndlr) {
        handlers.push_back(hndlr);
    }
</code></pre>
<p>};<br>
…<br>
typedef void (* irc_msg_listener)(irc_user&amp;, std::string);<br>
event&lt;irc_msg_listener&gt; evt;<br>
…<br>
evt += my_msg_listener;<br>
…<br>
evt(sender, “gay”);<br>
[/code]</p>
<p>something like that… baddabing<br>
ps that is prolly wrong seeing as i did it all in my head and i am a nerd[/quote]That obviously does not provide the same functionality as C# delegates mainly because with your design, you cannot store pointers to functions that are not of the same type within the same ‘event’ object. Unless you either use inline assembly or use a ‘void *’ to store the address of any function and have the user cast to its respective type, I don’t see a way of properly achieving this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/19</link>
        <pubDate>Tue, 09 Feb 2010 01:14:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-19</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>surely 2) is not a delegate feature its just a side effect of your language supporting anonymous functions</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/18</link>
        <pubDate>Tue, 09 Feb 2010 00:43:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-18</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>The programs that have been posted so far can’t actually replicate delegates’ functionality either, because</p>
<ol>
<li>
<p>They only support free functions by themselves, whereas delegates support methods automagically (You’d kinda need to use std::bind1st / {boost/tr1}::bind and the like to overcome this, or simply use {boost/tr1}::function.</p>
</li>
<li>
<p>They do not support anonymous delegates (lambda / closure), which let you do things such as this one:</p>
</li>
</ol>
<pre><code class="lang-auto">mInstance.OnWhatever += delegate(WhateverEventArgs args)
                   { System.Console.WriteLine("Yay" + args); };</code></pre>
<p>C++ will, however, support lambdas soon (C++0x), along with an std::function, though it’s still not the same.</p>
<p>Note that with C++ lambdas / closures you’ll be able to do, among other things:</p>
<pre><code class="lang-auto">int main()
{
  auto f = [](int n1, int n2) { return n1 + n2; };
  std::cout &lt;&lt; f(2, 3); 
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/17</link>
        <pubDate>Mon, 08 Feb 2010 23:43:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-17</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>Except the C# one is a standardized language construct…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/16</link>
        <pubDate>Mon, 08 Feb 2010 21:43:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-16</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>yeah i hate them too</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/15</link>
        <pubDate>Mon, 08 Feb 2010 20:40:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-15</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:13, topic:328679”]i hate you for your use of overloading in that class, i really do</p>
<p>SIR, YOU ARE THE REASON OPERATOR OVERLOADING GETS A BAD RAP :P[/quote]<br>
how so? isnt that how the c# one works?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/14</link>
        <pubDate>Mon, 08 Feb 2010 20:37:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-14</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>i hate you for your use of overloading in that class, i really do</p>
<p>SIR, YOU ARE THE REASON OPERATOR OVERLOADING GETS A BAD RAP <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/13</link>
        <pubDate>Mon, 08 Feb 2010 15:48:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-13</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">template &lt;typename hndlr_type&gt;
class event {
    private:
        std::vector&lt;hndlr_type&gt; handlers;
    public:
        void operator()(void *first, ...) {
            std::vector&lt;hndlr_type&gt;::const_iterator it;
            for (it = handlers.begin(); it != handlers.end(); ++it) {
                 (*(*it))(&amp;first);
            }
        }

        void operator+=(const hndlr_type hndlr) {
            handlers.push_back(hndlr);
        }
};
...
typedef void (* irc_msg_listener)(irc_user const &amp;, std::string const &amp;);
event&lt;irc_msg_listener&gt; evt;
...
evt += my_msg_listener;
...
evt(sender, "gay");</code></pre>
<p>something like that… <span class="bbcode-b">bad</span>dabing<br>
ps that is prolly wrong seeing as i did it all in my head and i am a nerd. NOW A PROPER HACK</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/12</link>
        <pubDate>Mon, 08 Feb 2010 13:53:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-12</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>You can’t really do the same in C or C++ without using a library such as boost.function, mostly because func ptrs don’t directly support OOP (and hence the this pointer isn’t handled automagically). C# also supports full closures through anon delegates (which C doesn’t support and which C++ will eventually kinda support through lambdas)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/11</link>
        <pubDate>Mon, 08 Feb 2010 11:19:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-11</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>simpler? perhaps not.</p>
<p>type safe? yes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/10</link>
        <pubDate>Mon, 08 Feb 2010 05:27:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-10</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>Cause now I’m a C# fan boy =]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/9</link>
        <pubDate>Mon, 08 Feb 2010 03:53:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>how is it simpler in c#? you could easily write a class to do it exactly the same way in c++</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/8</link>
        <pubDate>Mon, 08 Feb 2010 02:47:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>C*</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/7</link>
        <pubDate>Mon, 08 Feb 2010 01:38:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>Yea you can do it in C++ but it’s so much simpler in C#</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/6</link>
        <pubDate>Mon, 08 Feb 2010 01:05:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>unhandled, sure you can <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[code=c]<span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;</p>
<p>void (*callback[3]) (char *, char *);</p>
<p>void handle_irc_command(char *command, char *args)<br>
{<br>
printf(“Command: %s Args: %s\n”, command, args);<br>
}</p>
<p>void handle_irc_command2(char *command, char *args)<br>
{<br>
printf(“Command 2: %s Args: %s\n”, command, args);<br>
}</p>
<p>void handle_irc_command3(char *command, char *args)<br>
{<br>
printf(“Command 3: %s Args: %s\n”, command, args);<br>
}</p>
<p>int main(int argc, char **argv)<br>
{<br>
callback[0] = &amp;handle_irc_command;<br>
callback[1] = &amp;handle_irc_command2;<br>
callback[2] = &amp;handle_irc_command3;</p>
<pre><code>int i;
for (i = 0; i &lt; 3; i++) {
    (*callback[i]) ("say", "hello world");
}
return 0;
</code></pre>
<p>}[/code]</p>
<p>edit: you can obviously implement your own expandable list and store them there</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/5</link>
        <pubDate>Mon, 08 Feb 2010 00:07:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>Good job.</p>
<p>If you haven’t already, check out LINQ.</p>
<p><a class="mention" href="/u/abraham2119">@abraham2119</a>, can you add multiple callbacks using that?</p>
<p>e.g</p>
<pre><code class="lang-auto">class DelegateExample
{
    public delegate void IrcCommandHandler(String command, String args);
    public event IrcCommandHandler IrcCommandEvent;

    public static void Main()
    {
        DelegateExample de = new DelegateExample();
        
        // Register a new event handler
        IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand);
        IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand2);
        IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand3);

        // Calls all the event handlers.
        IrcCommandEvent("say", "hello world");        
    }

    public void handleIrcCommand(String command, String args)
    {
        System.Console.WriteLine("Command: {0} Args: {1}");
    } 
    public void handleIrcCommand2(String command, String args)
    {
        System.Console.WriteLine("Command 2: {0} Args: {1}");
    }     
    public void handleIrcCommand3(String command, String args)
    {
        System.Console.WriteLine("Command 3: {0} Args: {1}");
    }       
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/4</link>
        <pubDate>Sun, 07 Feb 2010 23:56:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>mines better:</p>
<p>[code=c]<br>
<span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;</p>
<p>void (*callback) (char *, char *) = NULL;</p>
<p>void handle_irc_command(char *command, char *args)<br>
{<br>
printf(“Command: %s Args: %s\n”, command, args);<br>
}</p>
<p>int main(int argc, char **argv)<br>
{<br>
callback = &amp;handle_irc_command;<br>
(*callback) (“say”, “hello world”);<br>
return 0;<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/3</link>
        <pubDate>Sun, 07 Feb 2010 23:51:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="1" data-topic="328679">
<div class="title">
<div class="quote-controls"></div>
 Evil_:</div>
<blockquote>
<p>I don’t believe I missed anything I am typing this up on my iPhone.</p>
</blockquote>
</aside>
<p>You missed a ‘t’ in event in the first paragraph.<br>
<img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/2</link>
        <pubDate>Sun, 07 Feb 2010 23:20:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
      <item>
        <title>C# delegate and event tutorial</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>Well I recently started learning C#, and to be quite honest I’m already in love with it lol.  It has so many great features! One of the things I really loved was Delegates and Events it really makes making an event driven system EASY!</p>
<p>You declare an event like this:</p>
<pre><code class="lang-auto">public event &lt;delegate&gt; EventName;</code></pre>
<p>Well to use that you must make a delegate (like a function pointer)</p>
<p>You declare a delegate like this:</p>
<pre><code class="lang-auto">public delegate &lt;type&gt; &lt;name&gt;(params);</code></pre>
<p>This is a sample class to show how you may use this:</p>
<pre><code class="lang-auto">class DelegateExample
{
    public delegate void IrcCommandHandler(String command, String args);
    public event IrcCommandHandler IrcCommandEvent;

    public static void Main()
    {
        DelegateExample de = new DelegateExample();
        
        // Register a new event handler
        IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand);

        // To fire the event:
        IrcCommandEvent("say", "hello world");        
    }

    public void handleIrcCommand(String command, String args)
    {
        System.Console.WriteLine("Command: {0} Args: {1}");
    }       
}</code></pre>
<p>I don’t believe I missed anything I am typing this up on my iPhone.</p>
<p>Anyway the comments show tell you a lot about it but to explain a little more:</p>
<p><code>
public delegate void IrcCommandHandler(String command, String args);
    public event IrcCommandHandler IrcCommandEvent;</code></p>
<p>This declares the delegate (meaning the way a function of this type should look basically) and also the event which needs a delegate to say what all the handlers of this event should expect to receive as arguments.</p>
<p><code>
IrcCommandEvent += new IrcCommandHandler(de.handleIrcCommand);</code>.</p>
<p>This adds the event handler (handleIrcCommand) to the events list of handlers to fire off.  You can remove it by using -= in the same format as used to add.</p>
<p><code>
IrcCommandEvent("say", "hello world");</code></p>
<p>This fires the event, which calls all the handlers with the specified args.</p>
<p>If I left out something in this, or you think I should explain something better, please, let me know.  I typed all of this out on my iPhone lol.</p>
<p>Hope you guys liked this, and hopefully learned something XD</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679/1</link>
        <pubDate>Sun, 07 Feb 2010 23:18:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328679-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-delegate-and-event-tutorial/328679.rss">C# delegate and event tutorial</source>
      </item>
  </channel>
</rss>
