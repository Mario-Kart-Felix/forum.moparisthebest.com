<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JSR proposal: class inheritance, class variables and more</title>
    <link>https://forum.moparisthebest.com/t/jsr-proposal-class-inheritance-class-variables-and-more/543738</link>
    <description>A while ago I thought about some new features I&#39;d want to see in Java. They&#39;re all there to support each other, so they have practically one main purpose, although they can be used for other things. It&#39;s to support creation of Object instances without having to know the class itself, or without having to use a Service Provider Interface (SPI) loader, such as java.util.ServiceLoader. That class assumes you have a META-INF/services folder in your JAR file, containing a file with the fully qualified class name of the super-type you wish to load, that itself contains one fully qualified class name per line and class to support.

The first feature is class inheritance. Currently Java only supports inheritance on instances. That is, instance methods. But I want Java to support inheritance on class methods (static ones).

The second feature is class variables, as an addition to instance variables. Such variables would only allow you to access class members of said variable, as opposed to all.

The third feature is a method in the class java.lang.Class that lists all types currently loaded by the java.lang.ClassLoader currently used, that are sub-classes of the given type and are non-abstract. This would practically make java.util.ServiceLoader obsolete.

I have an example to show of them all in use:
[code]
public interface Type {
    void doSomething();
}

public interface TypeFactory {
    static boolean isSupporting(String name);
    static Type newType(String name);
}

for(&lt;TypeFactory&gt; typeFactory : TypeFactory.class.list()) {
    if(typeFactory.isSupporting(name)) {
        Type type = typeFactory.newType(name);
        type.doSomething();
    }
}
[/code]

Now I&#39;d like to hear your input on all of this. What do you think of it? Is it useful? Please, provide constructive critisism only.</description>
    
    <lastBuildDate>Sat, 07 Jun 2014 12:33:02 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/jsr-proposal-class-inheritance-class-variables-and-more/543738.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JSR proposal: class inheritance, class variables and more</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>A while ago I thought about some new features I’d want to see in Java. They’re all there to support each other, so they have practically one main purpose, although they can be used for other things. It’s to support creation of Object instances without having to know the class itself, or without having to use a Service Provider Interface (SPI) loader, such as java.util.ServiceLoader. That class assumes you have a META-INF/services folder in your JAR file, containing a file with the fully qualified class name of the super-type you wish to load, that itself contains one fully qualified class name per line and class to support.</p>
<p>The first feature is class inheritance. Currently Java only supports inheritance on instances. That is, instance methods. But I want Java to support inheritance on class methods (static ones).</p>
<p>The second feature is class variables, as an addition to instance variables. Such variables would only allow you to access class members of said variable, as opposed to all.</p>
<p>The third feature is a method in the class java.lang.Class that lists all types currently loaded by the java.lang.ClassLoader currently used, that are sub-classes of the given type and are non-abstract. This would practically make java.util.ServiceLoader obsolete.</p>
<p>I have an example to show of them all in use:</p>
<pre><code class="lang-auto">public interface Type {
    void doSomething();
}

public interface TypeFactory {
    static boolean isSupporting(String name);
    static Type newType(String name);
}

for(&lt;TypeFactory&gt; typeFactory : TypeFactory.class.list()) {
    if(typeFactory.isSupporting(name)) {
        Type type = typeFactory.newType(name);
        type.doSomething();
    }
}</code></pre>
<p>Now I’d like to hear your input on all of this. What do you think of it? Is it useful? Please, provide constructive critisism only.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jsr-proposal-class-inheritance-class-variables-and-more/543738/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jsr-proposal-class-inheritance-class-variables-and-more/543738/1</link>
        <pubDate>Sat, 07 Jun 2014 12:33:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543738-1</guid>
        <source url="https://forum.moparisthebest.com/t/jsr-proposal-class-inheritance-class-variables-and-more/543738.rss">JSR proposal: class inheritance, class variables and more</source>
      </item>
  </channel>
</rss>
