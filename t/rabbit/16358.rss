<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rabbit</title>
    <link>https://forum.moparisthebest.com/t/rabbit/16358</link>
    <description>I made this procedure to do anti ban stuff while your waiting. I haven&#39;t put in the anti ban procedures yet (a lot of them need to be written from scratch or modified a lot, and I won&#39;t start that until after the next SRL), right now they are just waits with writeln(doing 1) so you can tell which one it&#39;s doing . It doesn&#39;t need much instructions so I&#39;ll just copy the description. Tell me what you think. 


RABBIT(mintimetowait, maxtimetowait, WhichAntiBanList : integer)
RABBIT By Boreas
Random Anti-Ban Buried In Timer
Works like a wait, (you put in timetowait), except that
while it is waiting, it performs some antiban procedures.
The first 2 parameters are just what they sound like. If you want RABBIT to wait for
a specific amount of time, instead of a random time within the range, just make
them the same.
WhichAntiBanList chooses which list of antibans to choose from. Currently there
is only 1 list, so just put 1. Other lists will be added in the future, for example
a list that only has anti bans that don&#39;t disturb the gametab part (in case your
script is watching the gametab).

Here are the anti ban procedures

HoverSkill
Leave Screen
Pickup Mouse
RandomClick
RandomRightClick
--RotateScreen--not sure about this one
Type something then backspace it---replaces random chat
RandomMouseMovement
CheckWhichFriendsOnline
ChangeRunModeAndChangeBack
CheckWhichQuestsIveDone
ExamineSomethingInInventory




If you can think of anything else to add let me know. Also if you can think of any lists of anti bans that you would use for different purposes (like I said in the WhichAntiBanList part).

Questions/Comments/Suggestions?
Thanks for reading.


Little test

[scar]program RabbitTest;
{.include heracles.scar}

begin
  cleardebug;
  rabbit(3000,3000,1);
end.[/scar]

Lazy crap at the top, skip to about line 80

[scar]{Heracles include}
{.include SRL\SRL.scar}
//Version .1

//    Contents
//cycle
//waituntildone
//add1
//ctrl
//Ran
//RandomRange
//RABBIT
//FindColorChangeGrid-In to Heracles2.scar


var
done:boolean;
cyclecounter:integer;

//*************************************************************************
//Example:                            This would make a cycle thru 1-5
//repeat                              Kinda like ran(5) but in order
//a:=cycle(5)
//writeln(inttostr(a));
//until isfunctionkeydown(1);

function cycle(num:integer):integer;
begin
  cyclecounter:=cyclecounter+1;
  result:=(cyclecounter mod num)+1;
end;
//*************************************************************************

//*************************************************************************
//first set done, then call waituntildone
procedure waituntildone;
begin
  repeat
    wait(10);
  until done;
end;
//*************************************************************************

//*************************************************************************
//add1(goat) means goat:=goat+1
procedure add1(var num: integer);
begin
     num:=num+1;
end;
//*************************************************************************

//*************************************************************************
//Yea I&#39;m that lazy   ctrl pwns false
function ctrl:boolean;
begin
     result:=isfunctionkeydown(1);
end;
//*************************************************************************


//*************************************************************************
//ran(5) can return 1,2,3,4 or 5
function ran(num: integer):integer;
begin
     result:=(random(num)+1);
end;
//*************************************************************************


//*************************************************************************
//Randomrange(10,15) can return 10, 11, 12, 13, 14, or 15
function randomrange(min,max: integer):integer;
begin
     result:=random((max-min)+1)+min;
end;
//*************************************************************************



//*************************************************************************
{RABBIT(mintimetowait, maxtimetowait, WhichAntiBanList : integer)
RABBIT By Boreas
Random Anti-Ban Buried In Timer
Works like a wait, (you put in timetowait), except that
while it is waiting, it performs some antiban procedures.
The first 2 parameters are just what they sound like. If you want RABBIT to wait for
a specific amount of time, instead of a random time within the range, just make
them the same.
WhichAntiBanList chooses which list of antibans to choose from. Currently there
is only 1 list, so just put 1. Other lists will be added in the future, for example
a list that only has anti bans that don&#39;t disturb the gametab part (in case your
script is watching the gametab).


HoverSkill
Leave Screen
Pickup Mouse
RandomClick
RandomRightClick
--RotateScreen--not sure about this one
Type something then backspace it---replaces random chat
RandomMouseMovement
CheckWhichFriendsOnline
ChangeRunModeAndChangeBack
CheckWhichQuestsIveDone
ExamineSomethingInInventory}

//----------------anti ban procs-------------------------------------
procedure ab1;
begin
     writeln(&#39;doing testab1&#39;);
     wait(1000);
     writeln(&#39;done testab1&#39;);
end;
procedure ab2;
begin
     writeln(&#39;doing testab2&#39;);
     wait(2000);
     writeln(&#39;done testab2&#39;);
end;
procedure ab3;
begin
     writeln(&#39;doing testab3&#39;);
     wait(3000);
     writeln(&#39;done testab3&#39;);
end;
procedure ab4;
begin
     writeln(&#39;doing testab4&#39;);
     wait(4000);
     writeln(&#39;done testab4&#39;);
end;
procedure ab5;
begin
     writeln(&#39;doing testab5&#39;);
     wait(5000);
     writeln(&#39;done testab5&#39;);
end;
procedure ab6;
begin
     writeln(&#39;doing testab5&#39;);
     wait(5000);
     writeln(&#39;done testab5&#39;);
end;
procedure ab7;
begin
     writeln(&#39;doing testab6&#39;);
     wait(6000);
     writeln(&#39;done testab6&#39;);
end;
procedure ab8;
begin
     writeln(&#39;doing testab7&#39;);
     wait(7000);
     writeln(&#39;done testab7&#39;);
end;
procedure ab9;
begin
     writeln(&#39;doing testab8&#39;);
     wait(8000);
     writeln(&#39;done testab8&#39;);
end;
procedure ab10;
begin
     writeln(&#39;doing testab10&#39;);
     wait(10000);
     writeln(&#39;done testab10&#39;);
end;
procedure ab11;
begin
     writeln(&#39;doing testab11&#39;);
     wait(10000);
     writeln(&#39;done testab11&#39;);
end;
procedure ab12;
begin
     writeln(&#39;doing testab12&#39;);
     wait(10000);
     writeln(&#39;done testab12&#39;);
end;
//---------------------------------------------------------------------

Procedure RABBIT(rabbitmin, rabbitmax, WhichAntiBanList :integer);
var timeused, a, b, timeleft:integer;
rabmonkey, rabmintime, numberofabs, rabbittime,goat:integer;
rabtime : array of integer;
begin
  case whichantibanlist of
    1:
    begin
    numberofabs := 12;
    setarraylength(rabtime, 13);
    rabtime[1]:= 1000;      //time each anti ban procedure takes
    rabtime[2]:= 2000;
    rabtime[3]:= 3000;
    rabtime[4]:= 4000;
    rabtime[5]:= 5000;
    rabtime[6]:= 6000;
    rabtime[7]:= 7000;
    rabtime[8]:= 8000;
    rabtime[9]:= 9000;
    rabtime[10]:= 10000;
    rabtime[11]:= 10000;
    rabtime[12]:= 10000;
    end;
    {2:                        //add lists here
    begin
    numberofabs := 12;
    setarraylength(rabtime,numberofabs);
    rabtime[1]:= 12000;      //time each anti ban procedure takes
    rabtime[2]:= 2000;
    rabtime[3]:= 3000;
    rabtime[4]:= 4000;
    rabtime[5]:= 5000;
    rabtime[6]:= 6000;
    rabtime[7]:= 7000;
    rabtime[8]:= 8000;
    rabtime[9]:= 9000;
    rabtime[10]:= 10000;
    end;}
  else
    begin
      writeln(&#39;Error in RABBIT, Which Anti-Ban List. Going with default&#39;);
      numberofabs := 12;
      setarraylength(rabtime,numberofabs);
      rabtime[1]:= 1000;      //time each anti ban procedure takes
      rabtime[2]:= 2000;
      rabtime[3]:= 3000;
      rabtime[4]:= 4000;
      rabtime[5]:= 5000;
      rabtime[6]:= 6000;
      rabtime[7]:= 7000;
      rabtime[8]:= 8000;
      rabtime[9]:= 9000;
      rabtime[10]:= 10000;
      rabtime[11]:= 10000;
      rabtime[12]:= 10000;
    end;
  end;
  rabmintime := 100000000000000;
  repeat
    add1(goat);
    rabmintime:= min(rabmintime,rabtime[goat]);
  until (goat=numberofabs);
  if (rabbitmin&gt;rabbitmax) then
  begin
    writeln(&#39;ERROR-rabbitmin is greater than rabbitmax.&#39;)
    terminatescript;
  end else
  rabbittime := randomrange(rabbitmin, rabbitmax);
  timeleft := rabbittime;
  //writeln(inttostr(rabbittime)); //comment this
  repeat
    rabmonkey :=(ran(numberofabs))
    if(not(timeleft&lt;rabtime[rabmonkey]))then
    begin
      a:=getsystemtime;
      case whichantibanlist of
        1:
        case rabmonkey of
          1: ab1;
          2: ab2;
          3: ab3;
          4: ab4;
          5: ab5;
          6: ab6;
          7: ab7;
          8: ab8;
          9: ab9;
          10: ab10;
          11: ab11;
          12: ab12;
        end;
        {2:                     add lists here
        case rabmonkey of
          1: ab1;
          2: ab2;
          3: ab3;
          4: ab4;
          5: ab5;
          6: ab6;
          7: ab7;
          8: ab8;
          9: ab9;
          10: ab10;
          11: ab11;
          12: ab12;
        end;}
      else
      begin
        writeln(&#39;Error in RABBIT, Which Anti-Ban List. Going with default&#39;);
        case rabmonkey of
          1: ab1;
          2: ab2;
          3: ab3;
          4: ab4;
          5: ab5;
          6: ab6;
          7: ab7;
          8: ab8;
          9: ab9;
          10: ab10;
          11: ab11;
          12: ab12;
        end;
      end;
      end;

      b:=getsystemtime;
      timeleft:=timeleft-(b-a)
      timeused:=timeused+(b-a)
    end;
  until timeleft&lt;rabmintime;
  wait(timeleft);
end;
//**************************************************************************



//**************************************************
//procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer);
//Checks a grid of points in a box for color changes
//will set x and y to point where color changes,
//x1,y1 is top left corner of box and x2,y2 is bottom right of box to scan
//d is the distance between points
//will give up after giveuptime (ms) and make detectorfound false
//whichex is which exception to use (you must set this in FindColoChangeGridEx first)
//put 1 for no exceptions

{Note to scripters: If you don&#39;t do this you will get errors!!

Copy between the ---- lines and paste in procedure section of
your script. Then edit the case section to have more exceptions.
XPosEx, and YPosEx are the coords of a change FindColorChangeGrid found.
For example, if you want it to ignore changes in a certain box, add 2: to
the case part and make result false when xposex,yposex is in the box. When you
want to use FindColorChangeGrid and ignore that box, put 2 for WhichEx
If you don&#39;t want any exceptions you still have to copy as it is before you
can call FindColorChangeGrid
-------------------------------------------------
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;
begin
case which of
  //This is for when you want no exceptions in the box    //
  1:                                                      //
    begin                                                 //
      if (xposex = xposex) and (yposex=yposex) then       //
      result:=true;                                       //
    end;                                                  //
  //add more exceptions here

  else writeln(&#39;Error in detector exceptions&#39;);
  end;
end;
-------------------------------------------------------------}                   {
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean; forward;

procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, whichex: integer);
var
  a, b, sttime,currentrow, goat, goat1, currentcolumn, numberacross, numberdown, numberofpoints, hat: Integer;
  points,xpos,ypos: array of Integer;
  found:boolean;
begin
//------------ Finds number across
  hat := 0;
  numberacross := 1;
  repeat
    hat := hat + d;
    numberacross := numberacross + 1;
  until (hat &gt;= (x2 - x1));
//----------------------------------
//------------ Finds number down
  hat := 0;
  numberdown := 1;
  repeat
    hat := hat + d;
    numberdown := numberdown + 1;
  until (hat &gt;= (y2 - y1));
//----------------------------------
//---------Sets number of points
  numberofpoints := numberacross * numberdown;
  Setarraylength(points, numberofpoints+1);
  Setarraylength(xpos, numberofpoints+1);
  Setarraylength(ypos, numberofpoints+1);

//----------------------------------
//--------------Sets points
  repeat
    currentcolumn := (0-1);
    repeat
      currentcolumn := currentcolumn + 1;
      goat := goat + 1;
      xpos[goat] := x1 + (d*currentcolumn);
      ypos[goat] := y1 + (d*currentrow);
    until currentcolumn=(numberacross-2);
    goat:=goat+1;
    xpos[goat] := x2;
    ypos[goat] := (y1+(d*currentrow));
    currentrow := currentrow + 1;
  until currentrow = (numberdown-1);
  currentcolumn :=0;
  repeat
    goat := goat + 1;
    xpos[goat]:=(x1+(d*currentcolumn));
    ypos[goat]:=y2;
    currentcolumn := currentcolumn + 1;
  until (currentcolumn=numberacross-1);
  goat := goat + 1;
  xpos[goat] := x2;
  ypos[goat] := y2;
//----------------------------------
////-----------------test --------------------- //Unblank this section to
//repeat                                        //make the points on paint.
//goat1:=goat1+1;                               //
//clickmouse(xpos[goat1],ypos[goat1],true);     //
//until goat1=numberofpoints;                             //
////--------------------------------------------//
//-------------------callibrate colors
goat1:=0
repeat
goat1 := goat1 + 1;
points[goat1] := getcolor(xpos[goat1],ypos[goat1]);
until goat1=numberofpoints;
//------------------------------------------
//-----------------check colors
b:=-1;
sttime := getsystemtime;
repeat
  b:=b+1;
  a:= (b mod numberofpoints)+1;
  if ((not(getcolor(xpos[a],ypos[a])=points[a])) and (FindColorChangeGridEx(xpos[a],ypos[a],whichex)))then
  begin
    x := xpos[a];
    y := ypos[a];
    found:=true;
    detectorfound:=true;
  end else detectorfound:=false;
 until (found) or ((getsystemtime-sttime)&gt;=giveuptime);
//------------------------------------
end;
//************************************************************
                                                                                  }[/scar]


Edit: 16 views and no questions/comments/suggestions?? Feedback please!</description>
    
    <lastBuildDate>Fri, 29 Sep 2006 20:18:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/rabbit/16358.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rabbit</title>
        <dc:creator><![CDATA[@Boreas Boreas]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boreas">@Boreas</a> wrote:</p>
          <blockquote>
              <p>Yes but you have to remember to call them every so often or put them in loops(not that there’s anything wrong with this). This does it while you’re waiting. I mean, if you’re gonna put a wait in anyway, you might as well make it serve 2 purposes. This is another way to use the antiban procedures, I wasn’t claiming to have invented them (I haven’t even put them in). Thanks for the feedback.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rabbit/16358/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rabbit/16358/3</link>
        <pubDate>Fri, 29 Sep 2006 20:18:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16358-3</guid>
        <source url="https://forum.moparisthebest.com/t/rabbit/16358.rss">Rabbit</source>
      </item>
      <item>
        <title>Rabbit</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>Cool, but aren’t most if not all of those things in SRL?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rabbit/16358/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rabbit/16358/2</link>
        <pubDate>Fri, 29 Sep 2006 19:17:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16358-2</guid>
        <source url="https://forum.moparisthebest.com/t/rabbit/16358.rss">Rabbit</source>
      </item>
      <item>
        <title>Rabbit</title>
        <dc:creator><![CDATA[@Boreas Boreas]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boreas">@Boreas</a> wrote:</p>
          <blockquote>
              <p>I made this procedure to do anti ban stuff while your waiting. I haven’t put in the anti ban procedures yet (a lot of them need to be written from scratch or modified a lot, and I won’t start that until after the next SRL), right now they are just waits with writeln(doing 1) so you can tell which one it’s doing . It doesn’t need much instructions so I’ll just copy the description. Tell me what you think.</p>
<p>RABBIT(mintimetowait, maxtimetowait, WhichAntiBanList : integer)<br>
RABBIT By Boreas<br>
Random Anti-Ban Buried In Timer<br>
Works like a wait, (you put in timetowait), except that<br>
while it is waiting, it performs some antiban procedures.<br>
The first 2 parameters are just what they sound like. If you want RABBIT to wait for<br>
a specific amount of time, instead of a random time within the range, just make<br>
them the same.<br>
WhichAntiBanList chooses which list of antibans to choose from. Currently there<br>
is only 1 list, so just put 1. Other lists will be added in the future, for example<br>
a list that only has anti bans that don’t disturb the gametab part (in case your<br>
script is watching the gametab).</p>
<p>Here are the anti ban procedures</p>
<p>HoverSkill<br>
Leave Screen<br>
Pickup Mouse<br>
RandomClick<br>
RandomRightClick<br>
–RotateScreen–not sure about this one<br>
Type something then backspace it—replaces random chat<br>
RandomMouseMovement<br>
CheckWhichFriendsOnline<br>
ChangeRunModeAndChangeBack<br>
CheckWhichQuestsIveDone<br>
ExamineSomethingInInventory</p>
<p>If you can think of anything else to add let me know. Also if you can think of any lists of anti bans that you would use for different purposes (like I said in the WhichAntiBanList part).</p>
<p>Questions/Comments/Suggestions?<br>
Thanks for reading.</p>
<p>Little test</p>
<p>[scar]program RabbitTest;<br>
{.include heracles.scar}</p>
<p>begin<br>
cleardebug;<br>
rabbit(3000,3000,1);<br>
end.[/scar]</p>
<p>Lazy crap at the top, skip to about line 80</p>
<p>[scar]{Heracles include}<br>
{.include SRL\SRL.scar}<br>
//Version .1</p>
<p>//    Contents<br>
//cycle<br>
//waituntildone<br>
//add1<br>
//ctrl<br>
//Ran<br>
//RandomRange<br>
//RABBIT<br>
//FindColorChangeGrid-In to Heracles2.scar</p>
<p>var<br>
done:boolean;<br>
cyclecounter:integer;</p>
<p>//*************************************************************************<br>
//Example:                            This would make a cycle thru 1-5<br>
//repeat                              Kinda like ran(5) but in order<br>
//a:=cycle(5)<br>
//writeln(inttostr(a));<br>
//until isfunctionkeydown(1);</p>
<p>function cycle(num:integer):integer;<br>
begin<br>
cyclecounter:=cyclecounter+1;<br>
result:=(cyclecounter mod num)+1;<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
//first set done, then call waituntildone<br>
procedure waituntildone;<br>
begin<br>
repeat<br>
wait(10);<br>
until done;<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
//add1(goat) means goat:=goat+1<br>
procedure add1(var num: integer);<br>
begin<br>
num:=num+1;<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
//Yea I’m that lazy   ctrl pwns false<br>
function ctrl:boolean;<br>
begin<br>
result:=isfunctionkeydown(1);<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
//ran(5) can return 1,2,3,4 or 5<br>
function ran(num: integer):integer;<br>
begin<br>
result:=(random(num)+1);<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
//Randomrange(10,15) can return 10, 11, 12, 13, 14, or 15<br>
function randomrange(min,max: integer):integer;<br>
begin<br>
result:=random((max-min)+1)+min;<br>
end;<br>
//*************************************************************************</p>
<p>//*************************************************************************<br>
{RABBIT(mintimetowait, maxtimetowait, WhichAntiBanList : integer)<br>
RABBIT By Boreas<br>
Random Anti-Ban Buried In Timer<br>
Works like a wait, (you put in timetowait), except that<br>
while it is waiting, it performs some antiban procedures.<br>
The first 2 parameters are just what they sound like. If you want RABBIT to wait for<br>
a specific amount of time, instead of a random time within the range, just make<br>
them the same.<br>
WhichAntiBanList chooses which list of antibans to choose from. Currently there<br>
is only 1 list, so just put 1. Other lists will be added in the future, for example<br>
a list that only has anti bans that don’t disturb the gametab part (in case your<br>
script is watching the gametab).</p>
<p>HoverSkill<br>
Leave Screen<br>
Pickup Mouse<br>
RandomClick<br>
RandomRightClick<br>
–RotateScreen–not sure about this one<br>
Type something then backspace it—replaces random chat<br>
RandomMouseMovement<br>
CheckWhichFriendsOnline<br>
ChangeRunModeAndChangeBack<br>
CheckWhichQuestsIveDone<br>
ExamineSomethingInInventory}</p>
<p>//----------------anti ban procs-------------------------------------<br>
procedure ab1;<br>
begin<br>
writeln(‘doing testab1’);<br>
wait(1000);<br>
writeln(‘done testab1’);<br>
end;<br>
procedure ab2;<br>
begin<br>
writeln(‘doing testab2’);<br>
wait(2000);<br>
writeln(‘done testab2’);<br>
end;<br>
procedure ab3;<br>
begin<br>
writeln(‘doing testab3’);<br>
wait(3000);<br>
writeln(‘done testab3’);<br>
end;<br>
procedure ab4;<br>
begin<br>
writeln(‘doing testab4’);<br>
wait(4000);<br>
writeln(‘done testab4’);<br>
end;<br>
procedure ab5;<br>
begin<br>
writeln(‘doing testab5’);<br>
wait(5000);<br>
writeln(‘done testab5’);<br>
end;<br>
procedure ab6;<br>
begin<br>
writeln(‘doing testab5’);<br>
wait(5000);<br>
writeln(‘done testab5’);<br>
end;<br>
procedure ab7;<br>
begin<br>
writeln(‘doing testab6’);<br>
wait(6000);<br>
writeln(‘done testab6’);<br>
end;<br>
procedure ab8;<br>
begin<br>
writeln(‘doing testab7’);<br>
wait(7000);<br>
writeln(‘done testab7’);<br>
end;<br>
procedure ab9;<br>
begin<br>
writeln(‘doing testab8’);<br>
wait(8000);<br>
writeln(‘done testab8’);<br>
end;<br>
procedure ab10;<br>
begin<br>
writeln(‘doing testab10’);<br>
wait(10000);<br>
writeln(‘done testab10’);<br>
end;<br>
procedure ab11;<br>
begin<br>
writeln(‘doing testab11’);<br>
wait(10000);<br>
writeln(‘done testab11’);<br>
end;<br>
procedure ab12;<br>
begin<br>
writeln(‘doing testab12’);<br>
wait(10000);<br>
writeln(‘done testab12’);<br>
end;<br>
//---------------------------------------------------------------------</p>
<p>Procedure RABBIT(rabbitmin, rabbitmax, WhichAntiBanList :integer);<br>
var timeused, a, b, timeleft:integer;<br>
rabmonkey, rabmintime, numberofabs, rabbittime,goat:integer;<br>
rabtime : array of integer;<br>
begin<br>
case whichantibanlist of<br>
1:<br>
begin<br>
numberofabs := 12;<br>
setarraylength(rabtime, 13);<br>
rabtime[1]:= 1000;      //time each anti ban procedure takes<br>
rabtime[2]:= 2000;<br>
rabtime[3]:= 3000;<br>
rabtime[4]:= 4000;<br>
rabtime[5]:= 5000;<br>
rabtime[6]:= 6000;<br>
rabtime[7]:= 7000;<br>
rabtime[8]:= 8000;<br>
rabtime[9]:= 9000;<br>
rabtime[10]:= 10000;<br>
rabtime[11]:= 10000;<br>
rabtime[12]:= 10000;<br>
end;<br>
{2:                        //add lists here<br>
begin<br>
numberofabs := 12;<br>
setarraylength(rabtime,numberofabs);<br>
rabtime[1]:= 12000;      //time each anti ban procedure takes<br>
rabtime[2]:= 2000;<br>
rabtime[3]:= 3000;<br>
rabtime[4]:= 4000;<br>
rabtime[5]:= 5000;<br>
rabtime[6]:= 6000;<br>
rabtime[7]:= 7000;<br>
rabtime[8]:= 8000;<br>
rabtime[9]:= 9000;<br>
rabtime[10]:= 10000;<br>
end;}<br>
else<br>
begin<br>
writeln(‘Error in RABBIT, Which Anti-Ban List. Going with default’);<br>
numberofabs := 12;<br>
setarraylength(rabtime,numberofabs);<br>
rabtime[1]:= 1000;      //time each anti ban procedure takes<br>
rabtime[2]:= 2000;<br>
rabtime[3]:= 3000;<br>
rabtime[4]:= 4000;<br>
rabtime[5]:= 5000;<br>
rabtime[6]:= 6000;<br>
rabtime[7]:= 7000;<br>
rabtime[8]:= 8000;<br>
rabtime[9]:= 9000;<br>
rabtime[10]:= 10000;<br>
rabtime[11]:= 10000;<br>
rabtime[12]:= 10000;<br>
end;<br>
end;<br>
rabmintime := 100000000000000;<br>
repeat<br>
add1(goat);<br>
rabmintime:= min(rabmintime,rabtime[goat]);<br>
until (goat=numberofabs);<br>
if (rabbitmin&gt;rabbitmax) then<br>
begin<br>
writeln(‘ERROR-rabbitmin is greater than rabbitmax.’)<br>
terminatescript;<br>
end else<br>
rabbittime := randomrange(rabbitmin, rabbitmax);<br>
timeleft := rabbittime;<br>
//writeln(inttostr(rabbittime)); //comment this<br>
repeat<br>
rabmonkey :=(ran(numberofabs))<br>
if(not(timeleft&lt;rabtime[rabmonkey]))then<br>
begin<br>
a:=getsystemtime;<br>
case whichantibanlist of<br>
1:<br>
case rabmonkey of<br>
1: ab1;<br>
2: ab2;<br>
3: ab3;<br>
4: ab4;<br>
5: ab5;<br>
6: ab6;<br>
7: ab7;<br>
8: ab8;<br>
9: ab9;<br>
10: ab10;<br>
11: ab11;<br>
12: ab12;<br>
end;<br>
{2:                     add lists here<br>
case rabmonkey of<br>
1: ab1;<br>
2: ab2;<br>
3: ab3;<br>
4: ab4;<br>
5: ab5;<br>
6: ab6;<br>
7: ab7;<br>
8: ab8;<br>
9: ab9;<br>
10: ab10;<br>
11: ab11;<br>
12: ab12;<br>
end;}<br>
else<br>
begin<br>
writeln(‘Error in RABBIT, Which Anti-Ban List. Going with default’);<br>
case rabmonkey of<br>
1: ab1;<br>
2: ab2;<br>
3: ab3;<br>
4: ab4;<br>
5: ab5;<br>
6: ab6;<br>
7: ab7;<br>
8: ab8;<br>
9: ab9;<br>
10: ab10;<br>
11: ab11;<br>
12: ab12;<br>
end;<br>
end;<br>
end;</p>
<pre><code>  b:=getsystemtime;
  timeleft:=timeleft-(b-a)
  timeused:=timeused+(b-a)
end;
</code></pre>
<p>until timeleft&lt;rabmintime;<br>
wait(timeleft);<br>
end;<br>
//**************************************************************************</p>
<p>//**************************************************<br>
//procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer);<br>
//Checks a grid of points in a box for color changes<br>
//will set x and y to point where color changes,<br>
//x1,y1 is top left corner of box and x2,y2 is bottom right of box to scan<br>
//d is the distance between points<br>
//will give up after giveuptime (ms) and make detectorfound false<br>
//whichex is which exception to use (you must set this in FindColoChangeGridEx first)<br>
//put 1 for no exceptions</p>
<p>{Note to scripters: If you don’t do this you will get errors!!</p>
<h2>Copy between the ---- lines and paste in procedure section of<br>
your script. Then edit the case section to have more exceptions.<br>
XPosEx, and YPosEx are the coords of a change FindColorChangeGrid found.<br>
For example, if you want it to ignore changes in a certain box, add 2: to<br>
the case part and make result false when xposex,yposex is in the box. When you<br>
want to use FindColorChangeGrid and ignore that box, put 2 for WhichEx<br>
If you don’t want any exceptions you still have to copy as it is before you<br>
can call FindColorChangeGrid</h2>
<p>function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;<br>
begin<br>
case which of<br>
//This is for when you want no exceptions in the box    //<br>
1:                                                      //<br>
begin                                                 //<br>
if (xposex = xposex) and (yposex=yposex) then       //<br>
result:=true;                                       //<br>
end;                                                  //<br>
//add more exceptions here</p>
<p>else writeln(‘Error in detector exceptions’);<br>
end;<br>
end;<br>
-------------------------------------------------------------}                   {<br>
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean; forward;</p>
<p>procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, whichex: integer);<br>
var<br>
a, b, sttime,currentrow, goat, goat1, currentcolumn, numberacross, numberdown, numberofpoints, hat: Integer;<br>
points,xpos,ypos: array of Integer;<br>
found:boolean;<br>
begin<br>
//------------ Finds number across<br>
hat := 0;<br>
numberacross := 1;<br>
repeat<br>
hat := hat + d;<br>
numberacross := numberacross + 1;<br>
until (hat &gt;= (x2 - x1));<br>
//----------------------------------<br>
//------------ Finds number down<br>
hat := 0;<br>
numberdown := 1;<br>
repeat<br>
hat := hat + d;<br>
numberdown := numberdown + 1;<br>
until (hat &gt;= (y2 - y1));<br>
//----------------------------------<br>
//---------Sets number of points<br>
numberofpoints := numberacross * numberdown;<br>
Setarraylength(points, numberofpoints+1);<br>
Setarraylength(xpos, numberofpoints+1);<br>
Setarraylength(ypos, numberofpoints+1);</p>
<p>//----------------------------------<br>
//--------------Sets points<br>
repeat<br>
currentcolumn := (0-1);<br>
repeat<br>
currentcolumn := currentcolumn + 1;<br>
goat := goat + 1;<br>
xpos[goat] := x1 + (d<em>currentcolumn);<br>
ypos[goat] := y1 + (d</em>currentrow);<br>
until currentcolumn=(numberacross-2);<br>
goat:=goat+1;<br>
xpos[goat] := x2;<br>
ypos[goat] := (y1+(d<em>currentrow));<br>
currentrow := currentrow + 1;<br>
until currentrow = (numberdown-1);<br>
currentcolumn :=0;<br>
repeat<br>
goat := goat + 1;<br>
xpos[goat]:=(x1+(d</em>currentcolumn));<br>
ypos[goat]:=y2;<br>
currentcolumn := currentcolumn + 1;<br>
until (currentcolumn=numberacross-1);<br>
goat := goat + 1;<br>
xpos[goat] := x2;<br>
ypos[goat] := y2;<br>
//----------------------------------<br>
////-----------------test --------------------- //Unblank this section to<br>
//repeat                                        //make the points on paint.<br>
//goat1:=goat1+1;                               //<br>
//clickmouse(xpos[goat1],ypos[goat1],true);     //<br>
//until goat1=numberofpoints;                             //<br>
////--------------------------------------------//<br>
//-------------------callibrate colors<br>
goat1:=0<br>
repeat<br>
goat1 := goat1 + 1;<br>
points[goat1] := getcolor(xpos[goat1],ypos[goat1]);<br>
until goat1=numberofpoints;<br>
//------------------------------------------<br>
//-----------------check colors<br>
b:=-1;<br>
sttime := getsystemtime;<br>
repeat<br>
b:=b+1;<br>
a:= (b mod numberofpoints)+1;<br>
if ((not(getcolor(xpos[a],ypos[a])=points[a])) and (FindColorChangeGridEx(xpos[a],ypos[a],whichex)))then<br>
begin<br>
x := xpos[a];<br>
y := ypos[a];<br>
found:=true;<br>
detectorfound:=true;<br>
end else detectorfound:=false;<br>
until (found) or ((getsystemtime-sttime)&gt;=giveuptime);<br>
//------------------------------------<br>
end;<br>
//************************************************************<br>
}[/scar]</p>
<p>Edit: 16 views and no questions/comments/suggestions?? Feedback please!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rabbit/16358/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rabbit/16358/1</link>
        <pubDate>Wed, 27 Sep 2006 23:11:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16358-1</guid>
        <source url="https://forum.moparisthebest.com/t/rabbit/16358.rss">Rabbit</source>
      </item>
  </channel>
</rss>
