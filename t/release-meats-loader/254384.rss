<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[RELEASE] Meat&#39;s loader</title>
    <link>https://forum.moparisthebest.com/t/release-meats-loader/254384</link>
    <description>[code]package meatstick.webclient;

import java.applet.Applet;
import java.awt.*;
import java.io.*;
import java.net.*;
import java.util.Properties;
import java.util.zip.ZipFile;
import java.util.ArrayList;

public class downloader extends Applet
	implements Runnable {
	
	private String cacheDir = System.getProperty(&quot;user.home&quot;)+&quot;/.rscd_cache/&quot;;
	private String[] configFiles = {
	&quot;sounds1.mem&quot;, &quot;models36.jag&quot;, &quot;Sprites.xml.data&quot;, &quot;NPCs.xml.data&quot;, &quot;ItemDef.xml.data&quot;, &quot;Textures.xml.data&quot;, 
	&quot;Animations.xml.data&quot;, &quot;SpellDef.xml.data&quot;, &quot;Prayers.xml.data&quot;, &quot;Tiles.xml.data&quot;, &quot;Doors.xml.data&quot;, &quot;Elevation.xml.data&quot;, 
	&quot;Objects.xml.data&quot;, &quot;Landscape.data&quot;
	};
	private String[] niceName = {
	&quot;Sound effects&quot;, &quot;Models&quot;, &quot;Graphics library&quot;, &quot;Npc library&quot;, &quot;Item library&quot;, &quot;Textures&quot;, 
	&quot;Animations&quot;, &quot;Spell library&quot;, &quot;Prayer library&quot;, &quot;Tiles&quot;, &quot;Door library&quot;, &quot;Elevation library&quot;, &quot;Object library&quot;, &quot;Landscape&quot;
	};
	private MediaTracker mediaTracker;
	private String cArray[];
	private Image loadingImage;
	private final int Width = 512;
	private final int Height = 344;
	private Graphics g;
	private int[] barPosition = {
	7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 100
	};
	private int[] percent = {
	7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 100
	};
	private Applet applet;
	public downloader() {
	}
	
	public void init() {
	Thread thread = new Thread(this);
	thread.start();
	}
	
	protected void loadCache() {
        File file = new File(cacheDir);
        	if(file.exists()) {
            		return;
        	} else {
            		file.mkdir();
            		return;
        	}
	}
	
	private void loadMirrors(){
	loadCache();
	ArrayList arraylist = new ArrayList();
        arraylist.add(&quot;http://meat-devbase.co.cc/webclient/cache/&quot;);
        cArray = (String[])arraylist.toArray(new String[arraylist.size()]);
	}


	public void run() {
	try {
	loadMirrors();
	loadingImage = Toolkit.getDefaultToolkit().getImage(new URL(getCodeBase(),&quot;loading.jpg&quot;));
	mediaTracker = new MediaTracker(this);
	mediaTracker.addImage(loadingImage, 0);
		for(int i = 0; i &lt; configFiles.length; i++) {
			download(configFiles[i]);
			showPercent(niceName[i], percent[i], barPosition[i]);
		}
	classLoader cl = new classLoader();
	applet = (Applet)cl.loadClass(&quot;org.rscdaemon.client.mudclient&quot;).newInstance();
	applet.init();
	applet.start();
	} catch(Exception e) { }
	}
	
	private final void showPercent(String s, int i, int j) {
	
	Graphics g = getGraphics();
	Font font = new Font(&quot;Helvetica&quot;, 1, 13);
	FontMetrics fontmetrics = getFontMetrics(font);
	Font font1 = new Font(&quot;Helvetica&quot;, 0, 13);
	FontMetrics fontmetrics1 = getFontMetrics(font1);
            	if(mediaTracker.checkAll(true)) {
		g.drawImage(loadingImage, 0, 0, this);
		} else {
		g.setColor(Color.black);
		g.fillRect(0, 0, 512, 344);
		}
		g.setColor(Color.white);
		g.setFont(font);
		String text = &quot;Welcome to RuneQuest!&quot;;
		g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 125);
		text = &quot;Please wait - Fetching the files...&quot;;
		g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 140);
		g.setFont(font1);
		text = &quot;This may only take a few minutes, but only&quot;;
		g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 165);
		text = &quot;needs to be done the first time the game is loaded.&quot;;
		g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 180);
	Color color = new Color(140, 17, 17);
	g.setColor(color);
	g.drawRect(104, 190, 304, 34);
	g.fillRect(106, 192, j * 3, 30);
	g.setColor(Color.black);
	g.fillRect(106 + j * 3, 192, 300 - j * 3, 30);
	String text2 = &quot;Loading &quot;+s+&quot; - &quot;+i+&quot;%&quot;;
	g.setFont(font);
	g.setColor(Color.white);
	g.drawString(text2, 256 - fontmetrics.stringWidth(text2) / 2, 212);
	
	}
	
	private void download(String fileName) {
		File file = new File(cacheDir+File.separator+fileName);
			if(!file.isFile()) {
			ArrayList arraylist = new ArrayList();
			String arrayStr[] = cArray;
				for(int j = 0; j &lt; arrayStr.length; j++) {
				String s1 = arrayStr[j];
				String s2 = s1+fileName;
					try {
					URL url = new URL(s2);
					HttpURLConnection huc = (HttpURLConnection) url.openConnection();
					InputStream is = huc.getInputStream();
					file.createNewFile();
					FileOutputStream fos = new FileOutputStream(file);
					byte abyte[] = new byte[1024];
						for(int l = 0; (l = is.read(abyte)) != -1;){
						fos.write(abyte, 0, l);
						}
					is.close();
					fos.close();
					} catch (Exception e) { System.out.println(e); }
				}	
			}
		}
	
	public final void start() {
	if(applet != null)
		applet.start();
	}
}[/code]

[code]package meatstick.webclient;

import java.io.DataInputStream;
import java.io.FilterInputStream;
import java.util.Hashtable;
import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class classLoader 
	extends ClassLoader {
	
	public classLoader() {
	hashTable = new Hashtable();
	}
	
	public synchronized Class loadClass(String name)
	throws ClassNotFoundException {
	Class mud = (Class)hashTable.get(name);
	if(mud != null) {
		return mud;
	}
	try {
		mud = super.findSystemClass(name);
		return mud;	
	} catch(ClassNotFoundException e) { System.out.println(e); }
	try {
		ZipEntry ze = zip.getEntry(name + &quot;.class&quot;);
		int l = (int)ze.getSize();
		DataInputStream dis = new DataInputStream(zip.getInputStream(ze));
		byte abyte[] = new byte[l];
		dis.readFully(abyte);
		dis.close();
		mud = defineClass(abyte, 0, abyte.length);
	} catch(Exception e) { }
	return mud;
	}
    private Hashtable hashTable;
    ZipFile zip;
}[/code]

Still trying to figure out how i can load the mudclient.. But yeah, the classloader is ripped from RS loader204.jar.. Do whatever you want with it, hopefully someone will get it working =]</description>
    
    <lastBuildDate>Thu, 22 Jan 2009 23:36:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/release-meats-loader/254384.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[RELEASE] Meat&#39;s loader</title>
        <dc:creator><![CDATA[@_RSC_Coder ¤RSC[]Coder¤]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_rsc_coder">@_RSC_Coder</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="2" data-topic="254384">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/woooooo/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> woooooo:</div>
<blockquote>
<p>Can’t say I really like your coding style, but it’s quite a useful applet.  Thanks for it, I’ll work on it a little if I get around to it and post the finished product.</p>
</blockquote>
</aside>
<p>biattchh</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/release-meats-loader/254384/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/release-meats-loader/254384/3</link>
        <pubDate>Thu, 22 Jan 2009 23:36:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-254384-3</guid>
        <source url="https://forum.moparisthebest.com/t/release-meats-loader/254384.rss">[RELEASE] Meat&#39;s loader</source>
      </item>
      <item>
        <title>[RELEASE] Meat&#39;s loader</title>
        <dc:creator><![CDATA[@woooooo woooooo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/woooooo">@woooooo</a> wrote:</p>
          <blockquote>
              <p>Can’t say I really like your coding style, but it’s quite a useful applet.  Thanks for it, I’ll work on it a little if I get around to it and post the finished product.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/release-meats-loader/254384/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/release-meats-loader/254384/2</link>
        <pubDate>Sat, 03 Jan 2009 07:44:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-254384-2</guid>
        <source url="https://forum.moparisthebest.com/t/release-meats-loader/254384.rss">[RELEASE] Meat&#39;s loader</source>
      </item>
      <item>
        <title>[RELEASE] Meat&#39;s loader</title>
        <dc:creator><![CDATA[@meatstick meatstick]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meatstick">@meatstick</a> wrote:</p>
          <blockquote>
              <p>[code]package meatstick.webclient;</p>
<p>import java.applet.Applet;<br>
import java.awt.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.*;<br>
import java.util.Properties;<br>
import java.util.zip.ZipFile;<br>
import java.util.ArrayList;</p>
<p>public class downloader extends Applet<br>
implements Runnable {</p>
<pre><code>private String cacheDir = System.getProperty("user.home")+"/.rscd_cache/";
private String[] configFiles = {
"sounds1.mem", "models36.jag", "Sprites.xml.data", "NPCs.xml.data", "ItemDef.xml.data", "Textures.xml.data", 
"Animations.xml.data", "SpellDef.xml.data", "Prayers.xml.data", "Tiles.xml.data", "Doors.xml.data", "Elevation.xml.data", 
"Objects.xml.data", "Landscape.data"
};
private String[] niceName = {
"Sound effects", "Models", "Graphics library", "Npc library", "Item library", "Textures", 
"Animations", "Spell library", "Prayer library", "Tiles", "Door library", "Elevation library", "Object library", "Landscape"
};
private MediaTracker mediaTracker;
private String cArray[];
private Image loadingImage;
private final int Width = 512;
private final int Height = 344;
private Graphics g;
private int[] barPosition = {
7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 100
};
private int[] percent = {
7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 100
};
private Applet applet;
public downloader() {
}

public void init() {
Thread thread = new Thread(this);
thread.start();
}

protected void loadCache() {
    File file = new File(cacheDir);
    	if(file.exists()) {
        		return;
    	} else {
        		file.mkdir();
        		return;
    	}
}

private void loadMirrors(){
loadCache();
ArrayList arraylist = new ArrayList();
    arraylist.add("http://meat-devbase.co.cc/webclient/cache/");
    cArray = (String[])arraylist.toArray(new String[arraylist.size()]);
}


public void run() {
try {
loadMirrors();
loadingImage = Toolkit.getDefaultToolkit().getImage(new URL(getCodeBase(),"loading.jpg"));
mediaTracker = new MediaTracker(this);
mediaTracker.addImage(loadingImage, 0);
	for(int i = 0; i &lt; configFiles.length; i++) {
		download(configFiles[i]);
		showPercent(niceName[i], percent[i], barPosition[i]);
	}
classLoader cl = new classLoader();
applet = (Applet)cl.loadClass("org.rscdaemon.client.mudclient").newInstance();
applet.init();
applet.start();
} catch(Exception e) { }
}

private final void showPercent(String s, int i, int j) {

Graphics g = getGraphics();
Font font = new Font("Helvetica", 1, 13);
FontMetrics fontmetrics = getFontMetrics(font);
Font font1 = new Font("Helvetica", 0, 13);
FontMetrics fontmetrics1 = getFontMetrics(font1);
        	if(mediaTracker.checkAll(true)) {
	g.drawImage(loadingImage, 0, 0, this);
	} else {
	g.setColor(Color.black);
	g.fillRect(0, 0, 512, 344);
	}
	g.setColor(Color.white);
	g.setFont(font);
	String text = "Welcome to RuneQuest!";
	g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 125);
	text = "Please wait - Fetching the files...";
	g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 140);
	g.setFont(font1);
	text = "This may only take a few minutes, but only";
	g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 165);
	text = "needs to be done the first time the game is loaded.";
	g.drawString(text, 256 - fontmetrics.stringWidth(text) / 2, 180);
Color color = new Color(140, 17, 17);
g.setColor(color);
g.drawRect(104, 190, 304, 34);
g.fillRect(106, 192, j * 3, 30);
g.setColor(Color.black);
g.fillRect(106 + j * 3, 192, 300 - j * 3, 30);
String text2 = "Loading "+s+" - "+i+"%";
g.setFont(font);
g.setColor(Color.white);
g.drawString(text2, 256 - fontmetrics.stringWidth(text2) / 2, 212);

}

private void download(String fileName) {
	File file = new File(cacheDir+File.separator+fileName);
		if(!file.isFile()) {
		ArrayList arraylist = new ArrayList();
		String arrayStr[] = cArray;
			for(int j = 0; j &lt; arrayStr.length; j++) {
			String s1 = arrayStr[j];
			String s2 = s1+fileName;
				try {
				URL url = new URL(s2);
				HttpURLConnection huc = (HttpURLConnection) url.openConnection();
				InputStream is = huc.getInputStream();
				file.createNewFile();
				FileOutputStream fos = new FileOutputStream(file);
				byte abyte[] = new byte[1024];
					for(int l = 0; (l = is.read(abyte)) != -1;){
					fos.write(abyte, 0, l);
					}
				is.close();
				fos.close();
				} catch (Exception e) { System.out.println(e); }
			}	
		}
	}

public final void start() {
if(applet != null)
	applet.start();
}
</code></pre>
<p>}[/code]</p>
<p>[code]package meatstick.webclient;</p>
<p>import java.io.DataInputStream;<br>
import java.io.FilterInputStream;<br>
import java.util.Hashtable;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipFile;</p>
<p>public class classLoader<br>
extends ClassLoader {</p>
<pre><code>public classLoader() {
hashTable = new Hashtable();
}

public synchronized Class loadClass(String name)
throws ClassNotFoundException {
Class mud = (Class)hashTable.get(name);
if(mud != null) {
	return mud;
}
try {
	mud = super.findSystemClass(name);
	return mud;	
} catch(ClassNotFoundException e) { System.out.println(e); }
try {
	ZipEntry ze = zip.getEntry(name + ".class");
	int l = (int)ze.getSize();
	DataInputStream dis = new DataInputStream(zip.getInputStream(ze));
	byte abyte[] = new byte[l];
	dis.readFully(abyte);
	dis.close();
	mud = defineClass(abyte, 0, abyte.length);
} catch(Exception e) { }
return mud;
}
private Hashtable hashTable;
ZipFile zip;
</code></pre>
<p>}[/code]</p>
<p>Still trying to figure out how i can load the mudclient… But yeah, the classloader is ripped from RS loader204.jar… Do whatever you want with it, hopefully someone will get it working =]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/release-meats-loader/254384/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/release-meats-loader/254384/1</link>
        <pubDate>Thu, 01 Jan 2009 18:42:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-254384-1</guid>
        <source url="https://forum.moparisthebest.com/t/release-meats-loader/254384.rss">[RELEASE] Meat&#39;s loader</source>
      </item>
  </channel>
</rss>
