<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Structure</title>
    <link>https://forum.moparisthebest.com/t/data-structure/538660</link>
    <description>So I wanted to program something for fun but I am having trouble thinking of a way to write the data structure...

So basically I wanted to take nodes and connect them. For example create a simple program that finds links on a wikipedia page and creates a node for each link that connect the node for the page to that node. For example if you go to http://en.wikipedia.org/wiki/Programming_language you will see the first link is Formal Language. So I want to connect the node Programming Language to Formal Language.

Now if I wanted to save this connection I&#39;ve thought of two ways to save it... but I don&#39;t think they are adequate. The first option is just to save each connection so if I want to search for a connection I would just iterate through every connection till I find the connection I want or if there is no connection then I say there is none. The reason I came up with this is because there is only one unique connection for a pair of nodes. 

The second idea was to create a Map where the key is a node and the values stored for that key would be all of the nodes it is connected to with their connection. This would be quicker than searching by connection if I wanted to search for particular node. So if I wanted to see if there is a connection between programming language and formal language it would search for the node programming language or formal language and whichever it found first it would then see if it is connected to the other node. 

However, I think there is a way to make it even faster but I have no idea how to construct it. I believe you could create a tree to limit the amount of nodes to search through. So if there is 1024 nodes in a binary tree, when you choose left or right at the first branch you eliminate 512 nodes. I believe you could do a similar approach but I have no idea how to construct it as it wouldn&#39;t be a linear tree. You would be able to loop back to the beginning. Like to find the connection between leaves and color you could go from science to biology to plant life to leaves to color or something similar.

I think there are two subjects everything can be broken down into... A subject of science or a subject of humanities. The color of leaves would be a subject of science but the birthday of a president would be a subject of humanities. Any idea how I could go about this? I&#39;ve been looking into ontologies for information science and data modeling but it hasn&#39;t been too much of a help and was hoping maybe someone has taken classes on this and could help me further. Thanks.</description>
    
    <lastBuildDate>Thu, 16 Jan 2014 20:17:43 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/data-structure/538660.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@0xCAFEBABE 0xCAFEBABE]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/0xcafebabe">@0xCAFEBABE</a> wrote:</p>
          <blockquote>
              <p>The Wanderer:</p>
<p>I didn’t even know about the class javax.ide.util.Graph. So, yes, I ment my implementation.</p>
<p>In my implementation, the Vertex class has one field for an Object and one field for a String (ID). Use the String as the link (for instance “<a href="http://www.google.com" rel="nofollow noopener">http://www.google.com</a>”). Then use the Object as categorization or similar.</p>
<p>To get all links (Vertex instances) to or from a given link (Vertex instance), just get the Vertex using the link as ID. Then you don’t have to iterate through them all. Just the ones connected to said link.</p>
<p>If you want, you can also use the categorization as ID for some of your Vertex instances. They would then have incoming and outgoing Edges to the Vertex instances with the link as ID.</p>
<p>The following is some code showing what I mean.</p>
<pre><code class="lang-auto">Vertex googleVertex = Vertex.getInstance("SearchEngine", "http://www.google.com");//Random Object followed by ID.
Vertex searchEngineVertex = Vertex.getInstance("SearchEngine", "SearchEngine");//Random Object followed by ID.

searchEngineVertex.addOutgoingEdgeForVertex(googleVertex);//A method that does not exist in the code above.

Set&lt;Edge&gt; outgoingEdges = searchEngineVertex.getOutgoingEdges();

for(Edge outgoingEdge : outgoingEdges) {
    //Loop through all Edges from the Vertex containing all Search Engine related websites (Vertex instances with links).
}</code></pre>
<p>dragoon_212:</p>
<p>My implementation above uses a Map to store things in. So it is just to look things up in there.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/7</link>
        <pubDate>Thu, 16 Jan 2014 20:17:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-7</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@dragoon_212 dragoon_212]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dragoon_212">@dragoon_212</a> wrote:</p>
          <blockquote>
              <p>I could be wrong, but I believe utilizing a hash table would be the most efficient way to go about this.</p>
<p>Each link will be stored as a key and each key will have a value. So to iterate through the list, it will search by key or value, rather than going through every single node. This would be faster than the tree tactic you have suggested.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/6</link>
        <pubDate>Thu, 16 Jan 2014 18:04:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-6</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>[quote=“0xCAFEBABE, post:4, topic:538660”]Use a Graph structure with Vertices, each with Sets of incoming and outgoing Edges. Each Edge can have two Vertices, one incoming and one outgoing.</p>
<p>The following are parts from three classes I use for my Graph structure implementation. I editted it a bit and did not check that it works, but it shouldn’t be too hard to fix, if that’s the case.</p>
<pre><code class="lang-auto">public final class Graph {
    private final Set&lt;Vertex&gt; vertices = new LinkedHashSet&lt;&gt;();
    private final Set&lt;Edge&gt; edges = new LinkedHashSet&lt;Edge&gt;();

    private Graph() {

    }

    public static Graph newInstance() {
        return new Graph();
    }
}
public final class Vertex {
    private static final Map&lt;String, Vertex&gt; VERTICES = new IdentityHashMap&lt;&gt;();
    private final Object object;
    private final Set&lt;Edge&gt; incomingEdges = new LinkedHashSet&lt;&gt;();
    private final Set&lt;Edge&gt; outgoingEdges = new LinkedHashSet&lt;&gt;();
    private final String id;

    private Vertex(Object object, String id) {
        this.object = object;
        this.id = id;
    }

    public Object getObject() {
        return object;
    }

    public String getId() {
        return id;
    }

    public static Vertex getInstance(Object object, String id) throws IllegalArgumentException, NullPointerException {
        if(object == null) {
            throw new NullPointerException("object == null");
        } else if(id == null) {
            throw new NullPointerException("id == null");
        } else {
            id = id.intern();

            Vertex vertex = VERTICES.get(id);

            if(vertex == null) {
                vertex = new Vertex(object, id);

                VERTICES.put(id, vertex);
            } else if(!vertex.getObject().equals(object)) {
                throw new IllegalArgumentException("The ID, \"" + id + "\", already refers to an Object reference that is not equal to object: old Object = " + vertex.getObject() + ", new Object = " + object);
            }

            return vertex;
        }
    }
}

final class Edge {
    private static final Map&lt;Vertex, Map&lt;Vertex, Edge&gt;&gt; MAPS = new IdentityHashMap&lt;&gt;();
    private final Vertex incomingVertex;
    private final Vertex outgoingVertex;

    private Edge(Vertex incomingVertex, Vertex outgoingVertex) {
        this.incomingVertex= incomingVertex;
        this.outgoingVertex= outgoingVertex;
    }

    public static Edge getInstance(Vertex incomingVertex, Vertex outgoingVertex) throws NullPointerException {
        if(incomingVertex == null) {
            throw new NullPointerException("incomingVertex == null");
        } else if(outgoingVertex == null) {
            throw new NullPointerException("outgoingVertex == null");
        } else {
            Map&lt;Vertex, Edge&gt; map = MAPS.get(incomingVertex);

            if(map == null) {
                map = new IdentityHashMap&lt;&gt;();

                MAPS.put(incomingVertex, map);
            }

            Edge edge = map.get(outgoingVertex);

            if(edge == null) {
                edge = new Edge(incomingVertex, outgoingVertex);

                map.put(outgoingVertex, edge);
            }

            return edge;
        }
    }
}</code></pre>
<p>What’s missing in the above code, is practically all methods that add / remove / check for the existence of Vertices and Edges to / from / in the Graph and Vertex classes. The Graph and Vertex classes are part of the API contract, whereas the Edge class is an implementation detail.[/quote]<br>
Thank you very much. Are you talking about the actual Graph class? Or just your implementation?<br>
<a href="http://docs.oracle.com/cd/E21764_01/apirefs.1111/e13403/javax/ide/util/Graph.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/cd/E21764_01/apirefs.1111/e13403/javax/ide/util/Graph.html</a></p>
<p>And I was wanting to improve the get method because at the moment it will just iterate through every vertex, but on second thought I don’t think you can. I wanted to categorize each vertex based on what they were, but the computer would need to know what the vertex is to be able to eliminate the other categories. Like I wanted to split up objects at first based on if they were a subject of humanities or a subject of science. But the computer wouldn’t know if I wanted to look for the carbon atom vertex to look in science and there’s no way I can think of giving it some AI to let it know if the point is it is looking for it. But yeah thanks.</p>
<p>Edit: This I believe is what I was wanting to do. Just stumbled upon it right now.<br>
<a href="http://en.wikipedia.org/wiki/Cluster_analysis" class="onebox" target="_blank" rel="nofollow noopener">http://en.wikipedia.org/wiki/Cluster_analysis</a></p>
<p>Edit edit: <a href="http://axon.cs.byu.edu/~martinez/classes/678/Papers/Fisher_Cobweb.pdf" rel="nofollow noopener">http://axon.cs.byu.edu/~martinez/classes/678/Papers/Fisher_Cobweb.pdf</a><br>
Maybe I could use this?<br>
<a href="http://en.wikipedia.org/wiki/Cobweb_(clustering)#cite_note-3" rel="nofollow noopener">http://en.wikipedia.org/wiki/Cobweb_(clustering)#cite_note-3</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/5</link>
        <pubDate>Thu, 16 Jan 2014 16:25:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-5</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@0xCAFEBABE 0xCAFEBABE]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/0xcafebabe">@0xCAFEBABE</a> wrote:</p>
          <blockquote>
              <p>Use a Graph structure with Vertices, each with Sets of incoming and outgoing Edges. Each Edge can have two Vertices, one incoming and one outgoing.</p>
<p>The following are parts from three classes I use for my Graph structure implementation. I editted it a bit and did not check that it works, but it shouldn’t be too hard to fix, if that’s the case.</p>
<pre><code class="lang-auto">public final class Graph {
    private final Set&lt;Vertex&gt; vertices = new LinkedHashSet&lt;&gt;();
    private final Set&lt;Edge&gt; edges = new LinkedHashSet&lt;Edge&gt;();

    private Graph() {

    }

    public static Graph newInstance() {
        return new Graph();
    }
}
public final class Vertex {
    private static final Map&lt;String, Vertex&gt; VERTICES = new IdentityHashMap&lt;&gt;();
    private final Object object;
    private final Set&lt;Edge&gt; incomingEdges = new LinkedHashSet&lt;&gt;();
    private final Set&lt;Edge&gt; outgoingEdges = new LinkedHashSet&lt;&gt;();
    private final String id;

    private Vertex(Object object, String id) {
        this.object = object;
        this.id = id;
    }

    public Object getObject() {
        return object;
    }

    public String getId() {
        return id;
    }

    public static Vertex getInstance(Object object, String id) throws IllegalArgumentException, NullPointerException {
        if(object == null) {
            throw new NullPointerException("object == null");
        } else if(id == null) {
            throw new NullPointerException("id == null");
        } else {
            id = id.intern();

            Vertex vertex = VERTICES.get(id);

            if(vertex == null) {
                vertex = new Vertex(object, id);

                VERTICES.put(id, vertex);
            } else if(!vertex.getObject().equals(object)) {
                throw new IllegalArgumentException("The ID, \"" + id + "\", already refers to an Object reference that is not equal to object: old Object = " + vertex.getObject() + ", new Object = " + object);
            }

            return vertex;
        }
    }
}

final class Edge {
    private static final Map&lt;Vertex, Map&lt;Vertex, Edge&gt;&gt; MAPS = new IdentityHashMap&lt;&gt;();
    private final Vertex incomingVertex;
    private final Vertex outgoingVertex;

    private Edge(Vertex incomingVertex, Vertex outgoingVertex) {
        this.incomingVertex= incomingVertex;
        this.outgoingVertex= outgoingVertex;
    }

    public static Edge getInstance(Vertex incomingVertex, Vertex outgoingVertex) throws NullPointerException {
        if(incomingVertex == null) {
            throw new NullPointerException("incomingVertex == null");
        } else if(outgoingVertex == null) {
            throw new NullPointerException("outgoingVertex == null");
        } else {
            Map&lt;Vertex, Edge&gt; map = MAPS.get(incomingVertex);

            if(map == null) {
                map = new IdentityHashMap&lt;&gt;();

                MAPS.put(incomingVertex, map);
            }

            Edge edge = map.get(outgoingVertex);

            if(edge == null) {
                edge = new Edge(incomingVertex, outgoingVertex);

                map.put(outgoingVertex, edge);
            }

            return edge;
        }
    }
}</code></pre>
<p>What’s missing in the above code, is practically all methods that add / remove / check for the existence of Vertices and Edges to / from / in the Graph and Vertex classes. The Graph and Vertex classes are part of the API contract, whereas the Edge class is an implementation detail.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/4</link>
        <pubDate>Thu, 16 Jan 2014 09:54:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-4</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="538660">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/vortex/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> vortex:</div>
<blockquote>
<p>Only Thing Missing Is Evey Word Starting With A Capital Letter</p>
</blockquote>
</aside>
<p>Would you want me to paragraph it for you? Sorry For The Wall Of Text. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> And I’m asking for more of a conceptual answer not a “write this do this answer”. Just been thinking of it a lot but I could not come up with a sound way for a program to decide how a subject should be categorized to improve the overhead of searching for a node. For example is a subject of philosophy a sub category to science or humanities? <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/3</link>
        <pubDate>Wed, 15 Jan 2014 16:59:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-3</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@vortex vortex]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vortex">@vortex</a> wrote:</p>
          <blockquote>
              <p>Only Thing Missing Is Evey Word Starting With A Capital Letter</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/2</link>
        <pubDate>Wed, 15 Jan 2014 16:57:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-2</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
      <item>
        <title>Data Structure</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>So I wanted to program something for fun but I am having trouble thinking of a way to write the data structure…</p>
<p>So basically I wanted to take nodes and connect them. For example create a simple program that finds links on a wikipedia page and creates a node for each link that connect the node for the page to that node. For example if you go to <a href="http://en.wikipedia.org/wiki/Programming_language" rel="nofollow noopener">http://en.wikipedia.org/wiki/Programming_language</a> you will see the first link is Formal Language. So I want to connect the node Programming Language to Formal Language.</p>
<p>Now if I wanted to save this connection I’ve thought of two ways to save it… but I don’t think they are adequate. The first option is just to save each connection so if I want to search for a connection I would just iterate through every connection till I find the connection I want or if there is no connection then I say there is none. The reason I came up with this is because there is only one unique connection for a pair of nodes.</p>
<p>The second idea was to create a Map where the key is a node and the values stored for that key would be all of the nodes it is connected to with their connection. This would be quicker than searching by connection if I wanted to search for particular node. So if I wanted to see if there is a connection between programming language and formal language it would search for the node programming language or formal language and whichever it found first it would then see if it is connected to the other node.</p>
<p>However, I think there is a way to make it even faster but I have no idea how to construct it. I believe you could create a tree to limit the amount of nodes to search through. So if there is 1024 nodes in a binary tree, when you choose left or right at the first branch you eliminate 512 nodes. I believe you could do a similar approach but I have no idea how to construct it as it wouldn’t be a linear tree. You would be able to loop back to the beginning. Like to find the connection between leaves and color you could go from science to biology to plant life to leaves to color or something similar.</p>
<p>I think there are two subjects everything can be broken down into… A subject of science or a subject of humanities. The color of leaves would be a subject of science but the birthday of a president would be a subject of humanities. Any idea how I could go about this? I’ve been looking into ontologies for information science and data modeling but it hasn’t been too much of a help and was hoping maybe someone has taken classes on this and could help me further. Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-structure/538660/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-structure/538660/1</link>
        <pubDate>Wed, 15 Jan 2014 16:48:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-538660-1</guid>
        <source url="https://forum.moparisthebest.com/t/data-structure/538660.rss">Data Structure</source>
      </item>
  </channel>
</rss>
