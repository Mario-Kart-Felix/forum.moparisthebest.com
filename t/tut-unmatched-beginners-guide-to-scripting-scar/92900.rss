<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
    <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900</link>
    <description>I created this tutorial a little while ago to help total beginners start scripting. This uses Pascal and works through a compiler called Scar.

This tut is stickied on SRL-Forums.com(SRL forum) : [url=http://www.srl-forums.com/forum/tut-unmatched-beginners-t5444.html]http://www.srl-forums.com/forum/tut-unmatched-beginners-t5444.html[/url]

Please, Enjoy this. Also, post feedback and ways to improve it.
[b][u]Unmatched Beginner&#39;s Guide to Scripting Scar
by WhoCares357[/u][/b]

[b]&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;
----Special Thanks to God----
---Created by WhoCares357---
--Edited by SomeGuy357--
--Special Thanks to Endless for Testing--
--Special Thanks to Kaitnieks for creating Scar--
&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;[/b]

[b]Table of Contents[/b]

[i]I.	Introduction
II.	Requirements
--A.	Equipment
--B.	Personality
III.	Scar 2.03
--A.	Info
--B.	How to Use
IV.	Format
--A.	Layout
--B.	Procedures
--C.	Colors
--D.	Comments
V.	Variables and Constants
VI.	The Middle
--A.	Functions/Commands
----1.	Wait
----2.	Keys
----3.	Color
----4.	Mouse
----5.	Bitmap
----6.	Others
--B.	Random
--C.	Loops/Until
VII.	Finalization
--A.	Includes
--B.	Good Luck[/i]

   

[b]+--------------------- [Introduction] ---------------------+[/b]

I have read many tutorials about Scar and even other language tutorials that all lack the essential details for true beginners. I have designed this lengthy, but efficient tutorial for the language of PASCAL’s little pal, Scar. Scar is a simple program for macroeing in a game called RuneScape. You can find the game here- [url=http://www.runescape.com]http://www.runescape.com[/url].

You don’t have to use Scar for RuneScape, but that is what it was intended for. This is just a small jumping stone to your career or interest in programming and creating software. I hope you enjoy your time in this tutorial and wish you the best of luck in your future.

By the way, if you have Scar 2.03 or later version and know how to use it, just skip the Requirements and Scar 2.03 to avoid a few extra minutes of reading.


[b]+--------------------- [Introduction] ---------------------+




+--------------------- [Requirements] ---------------------+
[/b]
[b]
--Equipment--[/b]

Hmm, let&#39;s see.

First of all you will need a functioning pc. Of course if you didn&#39;t have that, how could you be reading this?

Second thing you need is Scar version 2.03 or later. If you do not have this, download it from this URL- [url=http://www.dylock.net/scar/]http://www.dylock.net/scar/[/url].
If the location of Scar download is changed then refer to [url=http://www.sythe.org]http://www.sythe.org[/url] for the new location. If that is no longer available then just search [url=http://www.google.com]http://www.google.com[/url].

Finally, you will need drive and must want to learn this easy language of Scar. I can not make you learn it, so you must stick with it even when it proves a little difficult.



[b]--Personality--[/b]

One word: NEATNESS. 

First thing with this is of course grammar. Especially in your comments, make sure to not abbreviate words. Also there are certain things you should capitalize and others you should leave in lower case. You will get the feeling of neatness while you look through my example codes. 

Why? Well, neatness builds reputation and will help if you venture into a deeper programming language like Java, C++, or others by mending your habits right off.
[b]+--------------------- [Requirements] ---------------------+




+--------------------- [Scar 2.03] ---------------------+


--Info--[/b]

Ever heard of RuneScape? Yup, that is exactly what the program Scar was made for. Scar is a compiler. A compiler is a program that transforms what you tell (code) the program to do into computer language. The computer then does what it is told to do from this code. However, what makes Scar special for RuneScape players is that the creator Kaitnieks built in some functions or commands especially for RuneScape. Scar is now widely used for macroeing (cheating) on RuneScape. 



[b]--How to Use--[/b]

Once you download and install Scar 2.03 or later version you will be forced with the question of how to use it. It is actually very simple. 

Open your Scar 2.03 or later version and read the following.

First thing you will have to do is download the Includes. Press File-Download Includes and make sure all of the boxes are checked. Then press download, or overwrite. It will take a few moments to download.

Second, a few shortcuts should be learned to avoid complications once you use your scripts. For these shortcuts, you do not need to be in Scar. &quot;Ctrl+R&quot; Starts the script. &quot;Ctrl+A&quot; Pauses the script. &quot;Ctrl+S&quot; Stops the script. &quot;Ctrl+P&quot; Color picker. (Copies color number into Debug Box, I&#39;ll go over colors later)

The color picker is one of the most important tools in Scar. I will explain what it does in Format-Colors. I will explain how to use it here. Click on the “Color Picker” in the Scar toolbar or just press “Ctrl+P” and click on the color you want. In the lower part of Scar (Debug Box) you will see something like this.

[code]
Color Picked: 16777215 at (182, 364)
[/code]

The first big number, “16777215” is the color number.
“(182, 364)” are the coordinates or location on the screen where the color was found.

Third thing that Scar requires for RuneScape is to set the Client Window. I will now explain the purpose of this. Get ready for some simple math. If you know about computer coordinates system, skip this part.

Let&#39;s take a look at your compute screen. If you did not know, your computer is made up of pixels. Pixels are like squares of color that combined, create your screen image. Each pixel is a different coordinate. Pixels also use colors. If you have studied math, you will know that coordinates use x and y.
&quot;X&quot; is the distance from the origin (0) horizontally (left to right) left of 0 is negative, right is positive
&#39;Y&quot; is the distance from the origin (0) vertically (up to down) up of 0 is positive, down is negative
This is how it would look like.

P.S. The &quot;Y&quot; for computer screen coordinates is reversed.(Y becomes –Y and the other way around)



__________-Y__________
------------|------------
------------|------------
------------| ------------
-X----------0,0---------X
------------|------------
------------| ------------ 
------------|--5, 25----
___________Y__________


An example of a coordinate would be this.
[code]
(5, 25)
[/code]

As you can see, this coordinate is 5 to the right of 0, and 25 down from 0.
In a coordinate x always goes before y.

Now how this applies to Scar.

Now, Back to your computer screen: Most computer screens now-a-days have a resolution of at least 1024x768(Highest coordinate of 1024, 768), but everyone&#39;s is different.

Now, what setting the Client Window prevents, is miss-calculating the coordinate you do something in. Instead of letting the computer coordinates be used, this tool makes the RuneScape screen become the whole computer screen for Scar. Like this.

Before Setting Client Window

[code]
 0, 0---------------------------|
|----100,100--------------------|
|---| Rune---------|------------|
|---|----Scape-----|------------|
|---| ---------800,800----------|
----------------------------1024, 768

[/code]
(How Scar Sees It)

After Setting Client Window
[code]
0, 0---------------|
|----Rune----------|
|-------Scape------|
|------------------|
|--------------700, 700

[/code]

(How Scar Sees It)

As you see by setting the Client Window, Scar turns RuneScape window into the whole screen for itself.

The steps to setting the Client Window are the following.

1.	Click and hold the circle around an x looking button at the end of the toolbar.
2.	Drag it onto the RuneScape screen and release.
3.	If you see a white box shape close in on the RuneScape screen then you did it correctly.
4.	It is usually good to do it twice, just in case.

One last thing: the Debug Box. The Debug Box is the bottom text box on Scar. This text box is used for storing the color numbers, and all other information. It also displays the errors.

That’s all for explaining Scar my pupils. Now let’s begin the fun part: scripting.  

                 

[b]+--------------------- [Scar 2.03] ---------------------+




+--------------------- [Format] ---------------------+
[/b]

By now, you should have your Scar 2.03 or later version open. You should test some of the examples or/and even try to make your own to understand this better.


[b]
--Layout--[/b]

As you may have seen on multitudes of other Tutorials, the layout of Scar and even Pascal language is the following.
[code]
program NewExample;

begin

end.
[/code]

As you can see, every script begins with program name (NewExample;). You should be able to guess, that this is for naming your script. This is not necessary but is accustomed to tell the users what the script is for. You will have to leave a space after “program” before writing the name of the program. To practice good habits, always write your program names as I have here. Have the first letter of each word in the name (not the “program”) capitalized.

For example do this
[code]
program NewExample;
[/code]

and not this.
[code]
program Newexample;
[/code]

Notice how in the first example every first letter of a new word in the name is capitalized.

In the program name, there can not be any spaces.

For example this would be wrong,
[code]
program New Example;
[/code]

and this would be correct.
[code]
program NewExample;
[/code]

Also in Scar every line ends with a ;. This excludes “begin”, the last “end”, and a few other bold words (Certain codes will turn bold when written in Scar) that we will go over later. This is not necessary but it will be necessary if you ever join another language of programming. Good habits to grow into will help.

I will post the first example again so you do not have to scroll.
[code]
program NewExample;

begin

end.
[/code]

Ok, now to the next part. As you can guess, begin is the beginning of your instructions, while the end is the end of them. Begin, like program and end are going to be bold. Just for the sake of neatness try to never capitalize the words that become bold when you type them into Scar. Now you can see that after “end” there is a dot. This dot only applies to the last end. 

In your procedure, you will most likely have more than one begin and end. Now, when you have more than one beginning and end, your end, on every other end than the last one, will change to this: end;. 

Here is an example. 
[code]
program NewExample;

begin

 begin

 end;

end.
[/code]

Remember that ; is not placed after begin, the last end., and a few other codes that we will go over later.


In the following example you will see three separate begin and ends. 
[code]
begin
 begin
  begin
  
  end;
 end;
end.
[/code]

As you can see, I have aligned the “begin” and “end” with one extra space for every new begin and end. This format is not necessary, but once again neatness and consistency will help both you to edit your work easier, and the user to see what you have done.

We will learn what goes in the middle of this later.</description>
    
    <lastBuildDate>Mon, 29 Oct 2007 00:30:23 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@xxlegitxx xxlegitxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxlegitxx">@xxlegitxx</a> wrote:</p>
          <blockquote>
              <p>It’s good, but it really doesn’t help anyone, given it doesn’t teach SRL or use randoms.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/8</link>
        <pubDate>Mon, 29 Oct 2007 00:30:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-8</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@tL tL]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tl">@tL</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="5" data-topic="92900">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jvwarrior/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jvwarrior:</div>
<blockquote>
<p>Woa This Is Weird The Same TUT is In Freddy1900’s Forums And <a href="http://Syth.org" rel="nofollow noopener">Syth.org</a>??? I think You Stole This One And They Did Too Cuase Freddy Would Never Do That. And Who Has Enough Time To Type That All Up … Duh Freddy[br][size=1]Posted on: October 26, 2007, 07:03:43 PM[/size][hr]Wait A Minute I Take That Back… I Just Checked The One On Sythe And Its WhoCares357 lol my bad</p>
</blockquote>
</aside>
<p>Why The Fuck Do You Type Like This?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/7</link>
        <pubDate>Sun, 28 Oct 2007 18:23:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-7</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@Carazon Carazon ™]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/carazon">@Carazon</a> wrote:</p>
          <blockquote>
              <p>Own, Pwn, AGE!! THANKS</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/6</link>
        <pubDate>Sun, 28 Oct 2007 18:15:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-6</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@jvwarrior jvwarrior]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jvwarrior">@jvwarrior</a> wrote:</p>
          <blockquote>
              <p>Woa This Is Weird The Same TUT is In Freddy1900’s Forums And <a href="http://Syth.org" rel="nofollow noopener">Syth.org</a>??? I think You Stole This One And They Did Too Cuase Freddy Would Never Do That. And Who Has Enough Time To Type That All Up … Duh Freddy[br][size=1]Posted on: October 26, 2007, 07:03:43 PM[/size][hr]Wait A Minute I Take That Back… I Just Checked The One On Sythe And Its WhoCares357 lol my bad</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/5</link>
        <pubDate>Sat, 27 Oct 2007 06:05:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-5</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@Java_Coffee Java_Coffee™]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/java_coffee">@Java_Coffee</a> wrote:</p>
          <blockquote>
              <p>Awsome. I already readed that tutorial in freddy’s forum. I already know very well in scar just after reading this!! <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/4</link>
        <pubDate>Thu, 25 Oct 2007 16:17:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@WhoCares357 WhoCares357]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whocares357">@WhoCares357</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b"><br>
</span><br>
This is an example:</p>
<pre><code class="lang-auto">program FindColorExample1;

var
x,y: Integer;

begin
  FindColor(x,y,293419,577,7,727,163);
end.</code></pre>
<p>Oh, don’t get scared now. Let’s take this step by step.</p>
<p>This function finds the color that you tell it to find (“293419” in this example) and saves the place where it found the color in “x,y”.</p>
<p>The “x,y” in the function are just empty integers that are waiting to be filled with the location in which the color is. To use this function you would have to tell the program that x and y are integers as I have done at “x,y: Integer;”.</p>
<p>Next we have the color number. (293419) The color number can be replaced by a constant as you have learned in your previous lessons.</p>
<p>Finally there is “577,7,727,163”. This goes all the way back to the first lesson. This part of the function tells Scar where to look for the color. “577,7” are the coordinates for the top left corner and “727,163” are coordinates for the bottom right corner of the square in which Scar looks for the color.</p>
<p>“FindColor” looks for the color from the top left corner to the lower right corner of the square you tell it to look in. To understand this, let’s take a look at this example.</p>
<p>Let’s say that you want to look for color “242” in “0,0,100,100”. Now there are two objects in between those coordinates.</p>
<p>The first object had the color 242 and is at the coordinates 25,30. The second object had the same color of 242, but was at the coordinates 75,80. Which object do you think Scar will go to first? It will go to the first object, because it searches from the top left corner to the bottom right corner.</p>
<p>Here is another function to do with color.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program FindColorExample2;

var
x,y: Integer;

begin
  FindColorSpiral(x,y,293419,577,7,727,163);
end.</code></pre>
<p>This function is the same as FindColor, except that it is used to find colors that take up a lot of space.</p>
<p><span class="bbcode-b"></span></p>
<p>This is an example:</p>
<pre><code class="lang-auto">program MoveMouseExample1;

begin
  MoveMouse(25,250);
  Wait(100);
  ClickMouse(25,250,true);
end.</code></pre>
<p>This example moves the mouse to the coordinates 25,250 and then clicks there.</p>
<p>“MoveMouse” moves the mouse to the coordinates you place between “()”.</p>
<p>Refer to a previous lesson for the “Wait” function.</p>
<p>“ClickMouse” clicks the mouse at the coordinates you place between “()”. The “true” stands for clicking the left mouse button, while if you put “false” in that position Scar will right-click.</p>
<p>true = left mouse button<br>
false = right mouse button</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program MoveMouseExample2;

begin
  MoveMouse(25+random(2),250-random(20));
end.</code></pre>
<p>Here you see that I have added randoms to the coordinates. Yup! You can do that.</p>
<p>“25+random(2)” will tell Scar to move the mouse anywhere from 25-27 for the coordinate x and “250-random(20)” will tell Scar to move the mouse anywhere from 230-250 for the y coordinate.</p>
<p>Let’s explore some other forms of the function “MoveMouse”.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program MoveMouseExample3;

begin
  MoveMouseSmooth(25,250);
end.</code></pre>
<p>This function works the same as “MoveMouse” except that it moves it slower and softer. Experiment with it to see the difference.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program MoveMouseExample4;

begin
  MoveMouseSmoothEx(25,250+random(0),20,40,45,25,20);
end.</code></pre>
<p>This function is the same as “MoveMouseSmooth” except that it moves the mouse more humanlike. The last part that starts with “+random” are options for humanlike response. Press F1 in Scar and scroll down to MoveMouseSmoothEx to see the options for this.</p>
<p>Let’s explore a few other forms of the function “ClickMouse”</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program ClickMouseExample1;

begin
  HoldMouse(25,250,true);
  Wait(100);
  ReleaseMouse(25,250,true);
end.</code></pre>
<p>“HoldMouse” clicks and holds the mouse as clicked. This is good if you want to highlight something with the mouse. “true” stands for the left mouse button. “false” in that position would tell Scar to right click and hold.</p>
<p>Refer to a previous lesson for description of “Wait” function.</p>
<p>“ReleaseMouse” works alongside “HoldMouse” and releases the mouse from being held as clicked. “true” acts the same as in “ClickMose” and “HoldMouse” functions.</p>
<p>Now let’s combine our knowledge and use a color function with a mouse function.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program CombineExample1;

var
x,y: Integer;

const
MonsterColor = 293491;

begin
if(FindColor(x,y,MonsterColor,0,0,100,100)) then
 begin
  MoveMouseSmoothEx(x,y +random(0),20,40,45,25,20);
  Wait(100+random(10));
  ClickMouse(x,y,true);
 end;
end.</code></pre>
<p>Look over this example carefully. In this example, Scar does the following: If it finds the “MonsterColor” then it will move the mouse to the coordinates of where it finds the color and then click at those coordinates.</p>
<p>As you have learned in the description of “FindColor”, x and y in the function store the coordinates in which the color is found. If the color is found, the coordinates are stored in x,y and we can use them to tell Scar where to click.</p>
<p><span class="bbcode-b"></span></p>
<p>If you do not know, bitmap is an image type. Sometimes in a script you want the compiler (Scar in this case) to find an image instead of a color. That is what you would use the following for.</p>
<p>If you have the image of the object you wish to find, you must convert it to bitmap file type. Search <a href="http://www.google.com" data-bbcode="true" rel="nofollow noopener">http://www.google.com</a> to find a free program that does this for you.</p>
<p>Next, Scar requires you to place the image on a black background. Thus, only the object you wish to find is looked for and not the background as well. Open paint or any other image editing tool and paint the background black. As well as this, make the object centered so that it is in the center of the black background. Also, make the image as small as possible while still capturing your whole object.</p>
<p>Now save it and we will continue learning how to use it.</p>
<p>Ok, now open Scar and follow these steps.</p>
<p>On top of the there is a toolbar with “File, Edit, View, etc.”</p>
<ol>
<li>Click Script and then click on Picture to String.</li>
<li>A window will pop up</li>
<li>Click Open</li>
<li>Open the bitmap you want to use</li>
<li>Click Paste</li>
<li>Click OK</li>
<li>Look on the bottom in the Debug Box and you will see a code something like-</li>
</ol>
<pre><code class="lang-auto">  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');</code></pre>
<p>-Except it will most likely be much longer.<br>
“Fish” in this example is the name of the bitmap.</p>
<ol start="8">
<li>Now we will need to create a variable for the bitmap.</li>
</ol>
<p>This is an example:</p>
<pre><code class="lang-auto">program BitmapExample1;

var
Fish: Integer;

begin
end.</code></pre>
<p>As you see, you must declare the bitmap as an integer before using it.</p>
<p>9.Now we must load the bitmap at the beginning of the script.<br>
This is an example:</p>
<pre><code class="lang-auto">program BitmapExample2;

var
Fish: Integer;

begin
  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');
end.</code></pre>
<p>That is how you. You don’t necessarily have to do this in the beginning. You could load the bitmap right before you use it. If you do, however, wish to just load all your bitmaps in the beginning, it is better to create a procedure with all the bitmaps loaded in it.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program BitmapExample3;

var
Fish: Integer;

procedure LoadBmps;
begin
  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');
end;

begin
 LoadBmps;
//Do whatever
end.</code></pre>
<p>As you see, I loaded the bitmap in the procedure and then just included the procedure in the final part of the script.</p>
<p>The function “FreeBitmap” releases the loaded bitmap.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program BitmapExample4;

var
Fish: Integer;

procedure LoadBmps;
begin
  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');
end;

procedure FreeBmps;
begin
  FreeBitmap(Fish);
end;

begin
 LoadBmps;
//Do whatever
 FreeBmps;
end.</code></pre>
<p>You see, the trouble with bitmap is that it uses up memory. On a low memory computer, this will slow it down greatly. Try avoiding using bitmaps as much as possible.</p>
<p>Alright, now that you know how to load a bitmap, let’s learn how to use it.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program BitmapExample5;

var
Fish: Integer;
x,y: Integer;

procedure LoadBmps;
begin
  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');
end;

procedure UseBitmap;
begin
if(FindBitmap(Fish,x,y)) then
 begin
  MoveMouseSmoothEx(x,y+random(0),20,40,45,25,20);
  Wait(1000+random(100));
  ClickMouse(x,y,true);
 end;
end;

procedure FreeBmps;
begin
  FreeBitmap(Fish);
end;

begin
 LoadBmps;
  UseBitmap;
 FreeBmps;
end.</code></pre>
<p>As you see, “FindBitmap” is the function to find the bitmap on the whole screen. This function searches the whole screen. “Fish” in the example is the bitmap name that you want to find. “x,y” is where the coordinates of the bitmap will be stored.</p>
<p>As in FindColor, FindBitmap looks from the top left corner to the bottom right corner.</p>
<p>The other version of “FindBitmap” is “FindBitmapIn”. “FindBitmapIn” is the same as “FindBitmap” except that you set the box where Scar looks in.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program BitmapExample6;

var
Fish: Integer;
x,y: Integer;

procedure LoadBmps;
begin
  Fish := BitmapFromString(8, 11, 'z78DA33302007B801C16015C7C5A6A' +
       '77A62F4E252894CD21F0000D64369E1');
end;

procedure UseBitmap;
begin
if(FindBitmapIn(Fish,x,y,0,0,100,100)) then
 begin
  MoveMouseSmoothEx(x,y+random(0),20,40,45,25,20);
  Wait(1000+random(100));
  ClickMouse(x,y,true);
 end;
end.

procedure FreeBmps;
begin
  FreeBitmap(Fish);
end;

begin
 LoadBmps;
  UseBitmap;
 FreeBmps;
end.</code></pre>
<p>As you see, FindBitmapIn just adds the last part. The coordinates 0,0 to 100,100 is where Scar will look for the bitmap “Fish”.</p>
<p><span class="bbcode-b"></span></p>
<p>This is an example:</p>
<pre><code class="lang-auto">program DebugExample1;

begin
  ClearDebug;
end.</code></pre>
<p>“ClearDebug” clears the debug box on the bottom of Scar.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program IntToStrExample1;

var
i: Integer;

begin
 i:=0;
  Writeln('i is ' +IntToStr(i) +'.');
end.</code></pre>
<p>“IntToStr” takes the integer you put between “()” and places its value into what you want to type out. This is good in creating progress reports.</p>
<p><span class="bbcode-b">–Random–</span></p>
<p>Randomization is essential to RuneScape and many other game cheating. Randomizing wait times and clicking location makes the macro seem more human.</p>
<p>Even if you intend to spend your time scripting for things other than macroeing, randomization will help you.</p>
<p>This how to randomize a “Wait” function:</p>
<pre><code class="lang-auto">  Wait(1000+random(100));</code></pre>
<p>Scar will now wait anywhere from 1000 to 1100 seconds.</p>
<p>This is how to randomize “MoveMouse” function:</p>
<pre><code class="lang-auto">  MoveMouse(25+random(2),35-random(10));</code></pre>
<p>Scar will now move the mouse anywhere from 25 to 27 for x coordinate and 25 to 35 for y coordinate.</p>
<p>This is how to randomize an integer:</p>
<pre><code class="lang-auto">program RandomIntegerExample;

var
i: Integer;

begin
 i=random(5);
  Writeln('i is ' +IntToStr(i) +'.');
end.</code></pre>
<p>Try this example out. You will see that i will now vary and randomly be anywhere from 0 to 4. The thing you have to remember about randomizing integers is that it will be 0 to the number before what you put. So if you put “i:=random(10);” then i could be 0 to 9, but it can not be 10.</p>
<p>[COLOR=“White”]<span class="bbcode-b">[CENTER]–Loops/Until–[/CENTER]</span>[/COLOR]</p>
<p>Have you ever wondered, “How does the script keep going after it’s done something once?”</p>
<p>This is what programmers call “loops”. If someone refers to a loop it means that the program starts from a position where you tell it to start again from. Let’s see how to set loops up.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program LoopsExample1;

var
i: Integer;

begin
 i:= 0;
repeat
  i:= i + 1;
  Writeln('This will go on 10 times.');
until(i &gt;= 10); 
end.</code></pre>
<p>As you can see, first we state that i is 0. Then we type repeat. Then we tell Scar that every time a loop is done, it will add 1 to i. After this we tell Scar what actions to perform. Finally, you place “until” and between “()”, you write “i&gt;=” and the number of loops you want Scar to go through. (How many times you want it to do what you put between repeat and until)</p>
<p>Along with this, you can make Scar repeat forever. (until you press stop or press ctrl+alt+s)<br>
To do this follow this example:</p>
<pre><code class="lang-auto">program LoopsExample2;

begin
repeat
  Writeln('This will go on forever.');
until(false); 
end.</code></pre>
<p>As you can see, to tell Scar to repeat forever, all you need is “repeat” at the beginning and “until(false)” at the end.</p>
<p>You can also use this repeat/until process to tell Scar to stop when something happens.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program LoopsExample3;

var
i,x,y: Integer;

begin
 i:= 0;
repeat
  i:= i + 1;
if(FindColor(x,y,10023,0,0,100,100)) then
 begin
  MoveMouseSmoothEx(x,y+random(0),20,40,45,25,20);
 end;
until(not(FindColor(x,y,10023,0,0,100,100))); 
end.</code></pre>
<p>As you see here, I told Scar to find the color and move the mouse over it. It will keep doing this until it does not find the color.</p>
<p>[b]<br>
±-------------------- [The Middle] ---------------------+</p>
<p>±-------------------- [Finalization] ---------------------+<br>
[/b]</p>
<p>–Includes–[/B]</p>
<p>Remember in the beginning when we were talking about procedures? Well, this is the reason why. “Includes” is a way to use these procedures in other scripts so you don’t have to rewrite them.<br>
Follow this layout to use includes:</p>
<pre><code class="lang-auto">program IncludesExample;

{.include Miner.scar}

//rest of the scripts</code></pre>
<p>One thing you must know, is that to use includes, they must be in either the same folder as the script you’re creating or the “Includes” folder in the Scar directory. (Where you installed Scar to)</p>
<p>You do not need to have them there, but if you do not then you have to write out the whole destination after “.include “.</p>
<p>All includes must go after program and before anything else.</p>
<p>The most common of all includes is SRL. This SRL was created by expert programmers to make your work easier. Includes will help you greatly when you become more experienced with Scar, but for now just ignore them.</p>
<p><span class="bbcode-b"><br>
–Good Luck–</span></p>
<p>Now that you have read this whole tutorial, you must be tired. Rest and then try to make a few simple scripts using the functions I provided for you. If you want to dig deeper into functions (I have not explained every single function) then press F1 while in Scar.</p>
<p>I hope this tutorial has helped you. If you find anything confusing or wrong please tell me by emailing me at <a href="mailto:WhoCares_357@yahoo.com" data-bbcode="true">WhoCares_357@yahoo.com</a> or posting in a thread if this tutorial is in one. If you want some help I might also be able to assist you. I am sorry if I delay in answering you, for I may be busy at the time. Thank you and good luck in your scripting career.</p>
<p>[b]±-------------------- [Finalization] ---------------------+</p>
<p>===============================================================[/b]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/3</link>
        <pubDate>Sat, 12 May 2007 07:50:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@WhoCares357 WhoCares357]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whocares357">@WhoCares357</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b"><br>
–Procedures–</span></p>
<p>Now that you know a little of the layout in Scar scripts let’s learn something new: Procedures</p>
<p>A procedure is just a piece of the script that does something. This is difficult to explain, so I will be using some examples here.</p>
<p>First let’s look at the layout of a procedure.</p>
<pre><code class="lang-auto">program NewExample;

procedure Stay;
begin
  Wait(500);
end;

begin
 Stay;
end.</code></pre>
<p>This is the layout. As you can see the name of the procedure is in the same format as in the program name. One thing you will notice once again, is that all lines, except for begin and the last end, end with ;. Like I said, good habits will eliminate the small errors in your future scripts.</p>
<p>As you can see, a procedure has its own begin and end. It can have more than one begin and end as it becomes more complex.</p>
<p>Now from this example you get your first glimpse of a command! “Wait(500)” is a command that tells Scar to wait 500 milliseconds. (1000 Milliseconds=1 Second) We will go through this more thoroughly later.</p>
<p>I will copy the example here again so you don’t have to scroll too much.</p>
<pre><code class="lang-auto">program Procedures;

procedure Stay;
begin
  Wait(500);
end;

begin
 Stay;
end.</code></pre>
<p>Alright, now as you can see, after the procedure I have a second set of begin end. This is where it actually does things. You see, procedures aren’t used unless you tell the program to use it. It is like a part of the script written so that later you don’t have to write out the whole thing again. As in this example, the procedure “Stay” will now replace the need for you to write out “Wait(500)” every time you need it.</p>
<p>Let’s look at an example with two procedures, now.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program Procedures2;

procedure Write;
begin
  Writeln('Hi, you are doing very well with this learning!');
end;

procedure Stay;
begin
 Write;
  Wait(500);
end;

begin
 Stay;
end.</code></pre>
<p>Don’t get scared!! I will explain this step by step.</p>
<p>As you can see, I have just added on to the last example. I have added the procedure “Write”. This is another command. “Writeln(’’)” is a command that writes what you put between ‘’ in the Debug Box. By the way, the “l” in “Writeln” is “L”. I got this confused with “I” the first time I learned the command.</p>
<p>Once again, I wrote the procedure “Write” so that I would not have to go keep writing out Writeln(‘Hi, you are doing very well with this learning!’) every time.</p>
<p>Now, you might see that I included the procedure “Write” in the procedure “Stay”. You may include procedures in other procedures when you write your own scripts. However, there is a rule to this.</p>
<p>Scar will not allow you to include a procedure if the procedure you want to include is below that location.</p>
<p>This may sound confusing, but think of it like this. In my first example of two procedures, I wrote out procedure “Write” and placed it before procedure “Stay” so that I could use it in there. If I had written the procedure “Stay” with the procedure “Write” included, and then typed the instructions for procedure “Write”, it would show up as an error.</p>
<p>If you are still confused here are examples of a correct and wrong way of including procedures.</p>
<p>Correct way.</p>
<pre><code class="lang-auto">program Procedures2;

procedure Write;
begin
  Writeln('Hi, you are doing very well with this learning!');
end;

procedure Stay;
begin
 Write;
  Wait(500);
end;

begin
  Stay;
end.</code></pre>
<p>Wrong way.</p>
<pre><code class="lang-auto">program ProceduresBad2;

procedure Stay;
begin
 Write;
  Wait(500);
end;

procedure Write;
begin
  Writeln('Hi, you are doing very well with this learning!');
end;

begin
 Stay;
end.</code></pre>
<p>Including procedures will be very helpful when your scripts become more and more complex. Just remember the rule.</p>
<p>If you still do not understand it, try to look at the examples and notice the differences.</p>
<p><span class="bbcode-b"><br>
–Colors–</span></p>
<p>From the title you may be saying, “Has this guy gone bunkers, what does this have anything to do with colors?” Well, no I’m not crazy, and Scar has everything to do with colors. Scar in itself even has a color picker! (“Ctrl+P”) If you have read my long explanation of coordinates, (Congratulations on finishing it by the way) you will notice that I included the fact that pixels store colors. Now every color has a number. Yup, that’s right. What the Color Picker does is it finds the colors number. Another surprise! Colors have numbers. (When you pick a color with scar the number will appear in the Debug Box) This number can then be used in functions/commands to search for the color and do something with it. (We will explore these functions/commands later)</p>
<p><span class="bbcode-b"><br>
–Comments–</span></p>
<p>Sometimes, while you write a script you will want to make a note or two or maybe a few dozen. Comments are used for this very reason. Along with this you can also give users information on the constants that they fill in. (We will explore this in the next chapter)</p>
<p>There are two ways to write a comment.</p>
<p>The first way is by putting // in front of the comment.<br>
Here is an example.</p>
<pre><code class="lang-auto">program ExampleComment1; //This is the program name

begin

end.</code></pre>
<p>The second way is by using {}. During this sort of comment you must not forget to set }. If you forget that, your whole script from { will become a comment.<br>
Here is an example.</p>
<pre><code class="lang-auto">program ExampleComment2; {This is the program name}

begin

end.</code></pre>
<p>Try copying these two examples to Scar. As you will see, comments turn green.</p>
<p>[b]±-------------------- [Format] ---------------------+</p>
<p>±-------------------- [Variables and Constants] ---------------------+</p>
<p>–Variables and Constants–[/b]</p>
<p>Variables and Constants may be hard to understand until you use them.</p>
<p>First of all, both variables and constants come after the program name and before anything else.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program VarAndConst;

var

const

begin

end.</code></pre>
<p>Let’s look up close at variables first. Just like constants, variables store information. However, variables differ from constants because variables can be changed throughout the whole script. (Hence the name variables [varied]) I will come back to this a little later.</p>
<p>There are three different types of variables: Integer, String, Boolean, Extended.</p>
<p>Integer-Stores a positive or negative whole number<br>
Extended-Stores any numbers (Including decimals)<br>
String-Stores any characters (Mostly used for Writeln or SendKeys)<br>
Boolean-Stores the values “True” and “False”</p>
<p>First, let’s learn how to include them. To include a variable you must first write var. Afterwards you can either skip a line or just start on the line below this. Now first you have to decide which variables you will need. This could be one letter or a word, but try to make it something that makes sense. Don’t put anything random. If this is hard to understand just follow my example.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program VariablesExample1;

var
i: Integer;
Greeting: String;
Yes: Boolean;

//Rest of the script</code></pre>
<p>As you can see, I included an integer, a string, and a boolean.</p>
<p>Let’s look at these one by one.</p>
<p>First there is the integer. Now, if you aren’t too shabby at math, you will remember that integers are whole numbers. They can never have a decimal or fraction. They can also be either positive or negative. In scripting, integers are just this.</p>
<p>The most common integers are x and y. What these two integers most likely store are coordinates. X is for the x coordinates (First part of coordinate) and Y is for the y coordinates. (Second part of coordinate) Of course you can use other letters for this, but x and y is the most common way to go.</p>
<p>To use integers, you must first declare them. What this means is you have to tell the program what the integer is. For example if I had the integer “i”, I would have to tell the program what i stands for.</p>
<p>Here is an example:</p>
<pre><code class="lang-auto">program VariablesExample2;

var
i: Integer;

begin
 i:=0;
//Rest of the script
end.</code></pre>
<p>In this example, I first inserted the integer in the var section. I then declared what the integer equals in the part I wanted to use it.</p>
<p>Now the great thing about variables, as I have said before, is that they can be changed for different parts of your script. For example, if in one of your procedures, you want the integer “i” to equal 0 and for another procedure you want it to equal 7, you can do that!</p>
<p>Here is an example:</p>
<pre><code class="lang-auto">program VariablesExample3;

var
i: Integer;

procedure IntegerIsZero;
begin
 i:=0;
//Rest of the procedure
end;

procedure IntegerIsSeven;
begin
 i:=7;
//Rest of the procedure
end;

begin
 IntegerIsZero;
  IntegerIsSeven;
end.</code></pre>
<p>As you can see, you can use a variable in two different places and have it stand for two different things.</p>
<p>Now the variable extended is used the exact same way, except that it stores mixed numbers instead of whole ones. (Numbers with decimals or fractions) As a beginner you will most likely not use until a little while longer, so just don’t worry about it for now.</p>
<p>Alright, now let’s look into strings. Unlike, integers, strings can store any number, letter or symbol. They are mainly used to store characters for functions like Writeln or SendKeys. Once again, since this is a variable we can change it for different parts of the script. Let’s look at an example.</p>
<p>This is an example.</p>
<pre><code class="lang-auto">program StringExample1;

var
Greeting: String;

procedure Say1;
begin
 Greeting:='Hello';
  Writeln(Greeting);
end;

procedure Say2;
begin
 Greeting:='Yo!';
  Writeln(Greeting);
end;

begin
 Say1;
  Say2;
end.</code></pre>
<p>In this example, I used the string “Greeting” in two procedures. I declared Greeting as two different things. Go ahead, try this in Scar and change it up a bit.</p>
<p>Now-the boolean. This was the hardest variable for me to understand, and I see now that it is pretty difficult to explain. I will try my best.</p>
<p>As I have defined boolean in the beginning, a boolean just means true or false. Now what confused me when I first started was how to use it. However later I realized that you will almost never use booleans as variables. Once you get more advanced, you will find a use for it, but for now let’s just learn how it works.</p>
<p>Pascal and Scar work in this format: if, then, else.</p>
<p>What this format does is ask tells scar: If this is this, then do this, if it is not then do this. Here is an example to explain this a little better.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program ExampleIfThenElse;

var
i: Integer;

begin
i:=0;
 begin
if(i=0) then
  begin
  Writeln('I is zero');
  end else
  Writeln('I is not zero');
 end;
end.</code></pre>
<p>This is how to use if, then, and else.</p>
<p>I first declared that I is zero. then I began my if, then, else sequence. I told the program: If i is zero, then write i is zero in the debug box. However if i is not zero, then write i is not zero in the debug box.</p>
<p>Study the layout and try to change a few things up to learn it a little better.</p>
<p>Now, by now you should be wondering how this applies to boolean. Well, remember that boolean stands for true or false. As I have said before, boolean in variables is mostly used just by Scar. You cannot see the boolean, but it is there.</p>
<p>Here is how it works. Let’s look at my script again.</p>
<p>This is an example.</p>
<pre><code class="lang-auto">program ExampleIfThenElse;

var
i: Integer;

begin
i:=0;
 begin
if(i=0) then
  begin
  Writeln('I is zero');
  end else
  Writeln('I is not zero');
 end;
end.</code></pre>
<p>As you can see, if i is zero then it does something, otherwise it does something else. What boolean does is this. Scar checks if i is zero. “If” i is zero, then Scar returns the value that this is true. “Then” if “If” is true (i really is zero), then it does what you tell it after then. However, if the value of “If” returns as false (I is not zero), you tell it what to do using end else.</p>
<p>Remember this little fact. You do not have to use if, then, else. However, it makes your script much neater and easier to look at. Also, if you use this layout, you don’t necessarily need “end else”. If you don’t tell it what to do if the value is returned false, it just won’t do anything.</p>
<p>This might be hard to understand, but just don’t worry about it yet if you don’t understand it. However, you should still learn the layout of if, then, and else. Once you are more advanced, come back here and see if you can understand it.</p>
<p><span class="bbcode-b">Constants!</span></p>
<p>These babies are very useful and are very easy compared to variables. You will mainly use these for declaring colors. Just like for variables, use names that make sense. This is especially important for constants because this will mostly be used to create options for the user.</p>
<p>Alright, let’s explain what constants are used for first. Constants are the exact same as variables except that you cannot change them during the script. This is good for letting the user choose colors for a fighting script or text for an auto talker.</p>
<p>This is how to set a constant up.</p>
<p>This is an example.</p>
<pre><code class="lang-auto">program ExampleConstant1;

const
GroundColor= 0;//Set the color of the ground here
TreeColor= 452789;//Set the color of the tree here

//Rest of the script</code></pre>
<p>Constants are declared as soon as they are written.</p>
<p>Now let’s look at a new function for finding colors and use a constant for the color.</p>
<p>This is an example.</p>
<pre><code class="lang-auto">program ExampleConstant2;

var
x,y: Integer;

const
FishColor= 19245;//Set the color of the fish

begin
if(FindColor(x,y,FishColor,0,0,600,600)) then
 begin
  Writeln('Found Fish');
 end else
  Writeln('Did not find Fish');
end.</code></pre>
<p>Let’s look at this step by step. You already know about the program part. Look at the variables I have declared. I have declared x and y as integers. (Whole numbers) You will see how I use them later. Now as you should already know, I have declared the FishColor constant in the beginning of the script. Now I started the script with the format of if, then, else.</p>
<p>You should already understand this. If you do not, you should look back and study it a bit. Alright, now I will explain the procedure, “FindColor” quickly. First thing you will notice, is the x and y. Now, I have declared these integers in the beginning for the reason of using them in this function. The “x,y” are just there to fill in the coordinates where Scar finds the color. The “FishColor” is the constant that we have set earlier. Instead of FishColor you could have just wrote the color number. The last part, “0,0,600,600” tells Scar from where, upper left, to where, lower right, to search for this color.</p>
<p>In this way, I transferred the color “FishColor” into the function.</p>
<p>Ok, now once you’ve mastered this, let’s move on. You know how to use constants to transfer colors, now let’s look at how to transfer booleans and strings. These are both very easy, and you should understand them from this example.</p>
<p>This is an example.</p>
<pre><code class="lang-auto">program ExampleConstants3;

const
ShallWeWrite=True;//True to Type, False not to Type
Write='Hi'; 

begin
if(ShallWeWrite=True) then
 begin
  Writeln(Write);
 end;
end.</code></pre>
<p>In this script we have used both a boolean and a string as a constant. We used boolean by asking the user to write True if he/she wants the program to write and then we asked what to write.</p>
<p>That’s pretty much all for constants. Constants are very fun when you start including options with True and False.</p>
<p>Have Fun!</p>
<p>[b]±-------------------- [Variables and Constants] ---------------------+</p>
<p>±-------------------- [The Middle] ---------------------+</p>
<p>–Functions/Commands–[/b]</p>
<p>If you have gotten this far, then I will most certainly congratulate you because you just came to the center of Scar. These follow functions and commands are the most useful and most used in writing Scar scripts.</p>
<p><span class="bbcode-b"></span></p>
<p>This is an example:</p>
<pre><code class="lang-auto">  Wait(1000);</code></pre>
<p>This command, though very simple, is essential if you wish to auto in RuneScape or most other games. What this function does is it waits the number of milliseconds you designate it. If this stood by itself, then it would not be very useful. However, there is a randomizer that makes this function more human.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">  Wait(1000+random(200));</code></pre>
<p>As you see here, I have added “+random(200)”. What this does, is instead of always waiting 1000 milliseconds (Which is very noticeable) It waits a random of 200 extra random milliseconds. With this, the function could wait 1025 milliseconds or 1167 milliseconds.</p>
<p>We will explore the randomizer option a bit later.</p>
<p>You must remember that “1000miliseconds = 1second”.</p>
<p><span class="bbcode-b"><br>
</span></p>
<p>This is an example:</p>
<pre><code class="lang-auto">program TypeExample1;

begin
  Writeln('Hi');
  Wait(1000+random(100));
  SendKeys('Hello');
end.</code></pre>
<p>Here are two of the functions to type.</p>
<p>The first is “Writeln”. (”l” is “L” not “i”) This function types what you insert between “(’’)” in the Debug Box. (lower screen of Scar) This function is used to display the script user with information like how long the script has been running. We will learn to do this in the “Other” section of this tutorial.</p>
<p>Next we have “Wait”. Refer to the above function description if you have not yet.</p>
<p>Finally we have “SendKeys”. This function will serve you in your first few scripts where you will probably create an auto-talker.</p>
<p>The function types whatever you place between “(’’)” into the text box you are currently focused on. With Scar, you may have to set the Client Window on the text box.</p>
<p>Now you may wonder how you make the function press enter. This is very simple.</p>
<p>This is an example:</p>
<pre><code class="lang-auto">program TypeExample2;

begin
  SendKeys('Hello'+chr(13));
end.</code></pre>
<p>As you can guess, “chr(13)” represents the key “enter”.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/2</link>
        <pubDate>Sat, 12 May 2007 07:49:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
      <item>
        <title>[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</title>
        <dc:creator><![CDATA[@WhoCares357 WhoCares357]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whocares357">@WhoCares357</a> wrote:</p>
          <blockquote>
              <p>I created this tutorial a little while ago to help total beginners start scripting. This uses Pascal and works through a compiler called Scar.</p>
<p>This tut is stickied on <a href="http://SRL-Forums.com" rel="nofollow noopener">SRL-Forums.com</a>(SRL forum) : <a href="http://www.srl-forums.com/forum/tut-unmatched-beginners-t5444.html" data-bbcode="true" rel="nofollow noopener">http://www.srl-forums.com/forum/tut-unmatched-beginners-t5444.html</a></p>
<p>Please, Enjoy this. Also, post feedback and ways to improve it.<br>
<span class="bbcode-b"><span class="bbcode-u">Unmatched Beginner’s Guide to Scripting Scar<br>
by WhoCares357</span></span></p>
<p><span class="bbcode-b">&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;<br>
----Special Thanks to God----<br>
—Created by WhoCares357—<br>
–Edited by SomeGuy357–<br>
–Special Thanks to Endless for Testing–<br>
–Special Thanks to Kaitnieks for creating Scar–<br>
&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;&lt;&gt;</span></p>
<p><span class="bbcode-b">Table of Contents</span></p>
<p><span class="bbcode-i">I.	Introduction<br>
II.	Requirements<br>
–A.	Equipment<br>
–B.	Personality<br>
III.	Scar 2.03<br>
–A.	Info<br>
–B.	How to Use<br>
IV.	Format<br>
–A.	Layout<br>
–B.	Procedures<br>
–C.	Colors<br>
–D.	Comments<br>
V.	Variables and Constants<br>
VI.	The Middle<br>
–A.	Functions/Commands<br>
----1.	Wait<br>
----2.	Keys<br>
----3.	Color<br>
----4.	Mouse<br>
----5.	Bitmap<br>
----6.	Others<br>
–B.	Random<br>
–C.	Loops/Until<br>
VII.	Finalization<br>
–A.	Includes<br>
–B.	Good Luck</span></p>
<p><span class="bbcode-b">±-------------------- [Introduction] ---------------------+</span></p>
<p>I have read many tutorials about Scar and even other language tutorials that all lack the essential details for true beginners. I have designed this lengthy, but efficient tutorial for the language of PASCAL’s little pal, Scar. Scar is a simple program for macroeing in a game called RuneScape. You can find the game here- <a href="http://www.runescape.com" data-bbcode="true" rel="nofollow noopener">http://www.runescape.com</a>.</p>
<p>You don’t have to use Scar for RuneScape, but that is what it was intended for. This is just a small jumping stone to your career or interest in programming and creating software. I hope you enjoy your time in this tutorial and wish you the best of luck in your future.</p>
<p>By the way, if you have Scar 2.03 or later version and know how to use it, just skip the Requirements and Scar 2.03 to avoid a few extra minutes of reading.</p>
<p>[b]±-------------------- [Introduction] ---------------------+</p>
<p>±-------------------- [Requirements] ---------------------+<br>
[/b]<br>
<span class="bbcode-b"><br>
–Equipment–</span></p>
<p>Hmm, let’s see.</p>
<p>First of all you will need a functioning pc. Of course if you didn’t have that, how could you be reading this?</p>
<p>Second thing you need is Scar version 2.03 or later. If you do not have this, download it from this URL- <a href="http://www.dylock.net/scar/" data-bbcode="true" rel="nofollow noopener">http://www.dylock.net/scar/</a>.<br>
If the location of Scar download is changed then refer to <a href="http://www.sythe.org" data-bbcode="true" rel="nofollow noopener">http://www.sythe.org</a> for the new location. If that is no longer available then just search <a href="http://www.google.com" data-bbcode="true" rel="nofollow noopener">http://www.google.com</a>.</p>
<p>Finally, you will need drive and must want to learn this easy language of Scar. I can not make you learn it, so you must stick with it even when it proves a little difficult.</p>
<p><span class="bbcode-b">–Personality–</span></p>
<p>One word: NEATNESS.</p>
<p>First thing with this is of course grammar. Especially in your comments, make sure to not abbreviate words. Also there are certain things you should capitalize and others you should leave in lower case. You will get the feeling of neatness while you look through my example codes.</p>
<p>Why? Well, neatness builds reputation and will help if you venture into a deeper programming language like Java, C++, or others by mending your habits right off.<br>
[b]±-------------------- [Requirements] ---------------------+</p>
<p>±-------------------- [Scar 2.03] ---------------------+</p>
<p>–Info–[/b]</p>
<p>Ever heard of RuneScape? Yup, that is exactly what the program Scar was made for. Scar is a compiler. A compiler is a program that transforms what you tell (code) the program to do into computer language. The computer then does what it is told to do from this code. However, what makes Scar special for RuneScape players is that the creator Kaitnieks built in some functions or commands especially for RuneScape. Scar is now widely used for macroeing (cheating) on RuneScape.</p>
<p><span class="bbcode-b">–How to Use–</span></p>
<p>Once you download and install Scar 2.03 or later version you will be forced with the question of how to use it. It is actually very simple.</p>
<p>Open your Scar 2.03 or later version and read the following.</p>
<p>First thing you will have to do is download the Includes. Press File-Download Includes and make sure all of the boxes are checked. Then press download, or overwrite. It will take a few moments to download.</p>
<p>Second, a few shortcuts should be learned to avoid complications once you use your scripts. For these shortcuts, you do not need to be in Scar. “Ctrl+R” Starts the script. “Ctrl+A” Pauses the script. “Ctrl+S” Stops the script. “Ctrl+P” Color picker. (Copies color number into Debug Box, I’ll go over colors later)</p>
<p>The color picker is one of the most important tools in Scar. I will explain what it does in Format-Colors. I will explain how to use it here. Click on the “Color Picker” in the Scar toolbar or just press “Ctrl+P” and click on the color you want. In the lower part of Scar (Debug Box) you will see something like this.</p>
<pre><code class="lang-auto">Color Picked: 16777215 at (182, 364)</code></pre>
<p>The first big number, “16777215” is the color number.<br>
“(182, 364)” are the coordinates or location on the screen where the color was found.</p>
<p>Third thing that Scar requires for RuneScape is to set the Client Window. I will now explain the purpose of this. Get ready for some simple math. If you know about computer coordinates system, skip this part.</p>
<p>Let’s take a look at your compute screen. If you did not know, your computer is made up of pixels. Pixels are like squares of color that combined, create your screen image. Each pixel is a different coordinate. Pixels also use colors. If you have studied math, you will know that coordinates use x and y.<br>
“X” is the distance from the origin (0) horizontally (left to right) left of 0 is negative, right is positive<br>
'Y" is the distance from the origin (0) vertically (up to down) up of 0 is positive, down is negative<br>
This is how it would look like.</p>
<p>P.S. The “Y” for computer screen coordinates is reversed.(Y becomes –Y and the other way around)</p>
<p><strong><strong><strong><strong><strong>-Y</strong></strong></strong></strong></strong></p>
<div class="md-table">
<table>
<thead>
<tr>
<th>------------</th>
<th>------------</th>
</tr>
</thead>
<tbody>
<tr>
<td>------------</td>
<td>------------</td>
</tr>
</tbody>
</table>
</div><p>-X----------0,0---------X</p>
<div class="md-table">
<table>
<thead>
<tr>
<th>------------</th>
<th>------------</th>
</tr>
</thead>
<tbody>
<tr>
<td>------------</td>
<td>–5, 25----</td>
</tr>
</tbody>
</table>
</div><p>_<strong><strong><strong><strong><strong>Y</strong></strong></strong></strong></strong></p>
<p>An example of a coordinate would be this.</p>
<pre><code class="lang-auto">(5, 25)</code></pre>
<p>As you can see, this coordinate is 5 to the right of 0, and 25 down from 0.<br>
In a coordinate x always goes before y.</p>
<p>Now how this applies to Scar.</p>
<p>Now, Back to your computer screen: Most computer screens now-a-days have a resolution of at least 1024x768(Highest coordinate of 1024, 768), but everyone’s is different.</p>
<p>Now, what setting the Client Window prevents, is miss-calculating the coordinate you do something in. Instead of letting the computer coordinates be used, this tool makes the RuneScape screen become the whole computer screen for Scar. Like this.</p>
<p>Before Setting Client Window</p>
<pre><code class="lang-auto"> 0, 0---------------------------|
|----100,100--------------------|
|---| Rune---------|------------|
|---|----Scape-----|------------|
|---| ---------800,800----------|
----------------------------1024, 768
</code></pre>
<p>(How Scar Sees It)</p>
<p>After Setting Client Window</p>
<pre><code class="lang-auto">0, 0---------------|
|----Rune----------|
|-------Scape------|
|------------------|
|--------------700, 700
</code></pre>
<p>(How Scar Sees It)</p>
<p>As you see by setting the Client Window, Scar turns RuneScape window into the whole screen for itself.</p>
<p>The steps to setting the Client Window are the following.</p>
<ol>
<li>Click and hold the circle around an x looking button at the end of the toolbar.</li>
<li>Drag it onto the RuneScape screen and release.</li>
<li>If you see a white box shape close in on the RuneScape screen then you did it correctly.</li>
<li>It is usually good to do it twice, just in case.</li>
</ol>
<p>One last thing: the Debug Box. The Debug Box is the bottom text box on Scar. This text box is used for storing the color numbers, and all other information. It also displays the errors.</p>
<p>That’s all for explaining Scar my pupils. Now let’s begin the fun part: scripting.</p>
<p>[b]±-------------------- [Scar 2.03] ---------------------+</p>
<p>±-------------------- [Format] ---------------------+<br>
[/b]</p>
<p>By now, you should have your Scar 2.03 or later version open. You should test some of the examples or/and even try to make your own to understand this better.</p>
<p><span class="bbcode-b"><br>
–Layout–</span></p>
<p>As you may have seen on multitudes of other Tutorials, the layout of Scar and even Pascal language is the following.</p>
<pre><code class="lang-auto">program NewExample;

begin

end.</code></pre>
<p>As you can see, every script begins with program name (NewExample;). You should be able to guess, that this is for naming your script. This is not necessary but is accustomed to tell the users what the script is for. You will have to leave a space after “program” before writing the name of the program. To practice good habits, always write your program names as I have here. Have the first letter of each word in the name (not the “program”) capitalized.</p>
<p>For example do this</p>
<pre><code class="lang-auto">program NewExample;</code></pre>
<p>and not this.</p>
<pre><code class="lang-auto">program Newexample;</code></pre>
<p>Notice how in the first example every first letter of a new word in the name is capitalized.</p>
<p>In the program name, there can not be any spaces.</p>
<p>For example this would be wrong,</p>
<pre><code class="lang-auto">program New Example;</code></pre>
<p>and this would be correct.</p>
<pre><code class="lang-auto">program NewExample;</code></pre>
<p>Also in Scar every line ends with a ;. This excludes “begin”, the last “end”, and a few other bold words (Certain codes will turn bold when written in Scar) that we will go over later. This is not necessary but it will be necessary if you ever join another language of programming. Good habits to grow into will help.</p>
<p>I will post the first example again so you do not have to scroll.</p>
<pre><code class="lang-auto">program NewExample;

begin

end.</code></pre>
<p>Ok, now to the next part. As you can guess, begin is the beginning of your instructions, while the end is the end of them. Begin, like program and end are going to be bold. Just for the sake of neatness try to never capitalize the words that become bold when you type them into Scar. Now you can see that after “end” there is a dot. This dot only applies to the last end.</p>
<p>In your procedure, you will most likely have more than one begin and end. Now, when you have more than one beginning and end, your end, on every other end than the last one, will change to this: end;.</p>
<p>Here is an example.</p>
<pre><code class="lang-auto">program NewExample;

begin

 begin

 end;

end.</code></pre>
<p>Remember that ; is not placed after begin, the last end., and a few other codes that we will go over later.</p>
<p>In the following example you will see three separate begin and ends.</p>
<pre><code class="lang-auto">begin
 begin
  begin
  
  end;
 end;
end.</code></pre>
<p>As you can see, I have aligned the “begin” and “end” with one extra space for every new begin and end. This format is not necessary, but once again neatness and consistency will help both you to edit your work easier, and the user to see what you have done.</p>
<p>We will learn what goes in the middle of this later.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900/1</link>
        <pubDate>Sat, 12 May 2007 07:48:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92900-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-unmatched-beginners-guide-to-scripting-scar/92900.rss">[TUT]Unmatched Beginner&#39;s Guide to Scripting Scar</source>
      </item>
  </channel>
</rss>
