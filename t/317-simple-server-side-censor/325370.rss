<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[317] Simple server-side censor</title>
    <link>https://forum.moparisthebest.com/t/317-simple-server-side-censor/325370</link>
    <description>This takes a couple of minutes and requires little Java experience. This censor will block any message that contains foul language instead of replacing them with ****.

First, open up your Client class. And declare a new array, call it Vulgar. Inside it you can place all the words that you want to block, [b]in[/b] quotations, seperated by a comma.

[code]
public String[] Vulgar = { &quot;noob&quot;, &quot;Newb&quot; };
[/code]

Next, declare a boolean &quot;isVulgar&quot; that loops through the array, and returns true if the String &quot;Vulgar&quot; contains the String we will declare in the next step...

[code]
public boolean isVulgar(String j){
    for(int i = 0; i &lt; Vulgar.length; i++) {
    	if(j.contains(Vulgar[i]))
    		return true;
    }
   return false;
}
[/code]

Next, time to edit the regular chat packet. Under parseIncomingPackets, look for &quot;case 4:&quot; wich is the regular chat packet.
Declare this in that case:
[code]String ChatText = misc.textUnpack(chatText, packetSize - 2);[/code]
This will convert bytecode into a String, allowing us to read it.

Below that call: &quot;isVulgar(ChatText)&quot;. This will check if the boolean isVulgar is either true or false.
Your chat packet should look like this:
[code]
		case 4:
			// regular chat
			String ChatText = misc.textUnpack(chatText, packetSize - 2);
			if (muted)
				break;
			if (isVulgar(ChatText)) {
				sM(&quot;Please refrain from using foul language.&quot;);
				break;
			} else {
				MBTC = misc.textUnpack(chatText, packetSize - 2);
				MBBC = misc.textUnpack(chatText, packetSize - 2);
				MBHT = misc.textUnpack(chatText, packetSize - 2);
				MBID = misc.textUnpack(chatText, packetSize - 2);
				chatTextEffects = inStream.readUnsignedByteS();
				chatTextColor = inStream.readUnsignedByteS();
				chatTextSize = (byte) (packetSize - 2);
				inStream.readBytes_reverseA(chatText, chatTextSize, 0);
				chatTextUpdateRequired = true;
			}
			break;
[/code]

That&#39;s pretty much all there&#39;s to it. If you want you can use this for pm&#39;s aswell (under packet 126).</description>
    
    <lastBuildDate>Wed, 13 Jan 2010 03:57:44 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-simple-server-side-censor/325370.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[317] Simple server-side censor</title>
        <dc:creator><![CDATA[@relmitos relmitos]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/relmitos">@relmitos</a> wrote:</p>
          <blockquote>
              <p>This takes a couple of minutes and requires little Java experience. This censor will block any message that contains foul language instead of replacing them with ****.</p>
<p>First, open up your Client class. And declare a new array, call it Vulgar. Inside it you can place all the words that you want to block, <span class="bbcode-b">in</span> quotations, seperated by a comma.</p>
<pre><code class="lang-auto">public String[] Vulgar = { "noob", "Newb" };</code></pre>
<p>Next, declare a boolean “isVulgar” that loops through the array, and returns true if the String “Vulgar” contains the String we will declare in the next step…</p>
<pre><code class="lang-auto">public boolean isVulgar(String j){
    for(int i = 0; i &lt; Vulgar.length; i++) {
    	if(j.contains(Vulgar[i]))
    		return true;
    }
   return false;
}</code></pre>
<p>Next, time to edit the regular chat packet. Under parseIncomingPackets, look for “case 4:” wich is the regular chat packet.<br>
Declare this in that case:</p>
<pre><code class="lang-auto">String ChatText = misc.textUnpack(chatText, packetSize - 2);</code></pre>
<p>This will convert bytecode into a String, allowing us to read it.</p>
<p>Below that call: “isVulgar(ChatText)”. This will check if the boolean isVulgar is either true or false.<br>
Your chat packet should look like this:</p>
<pre><code class="lang-auto">		case 4:
			// regular chat
			String ChatText = misc.textUnpack(chatText, packetSize - 2);
			if (muted)
				break;
			if (isVulgar(ChatText)) {
				sM("Please refrain from using foul language.");
				break;
			} else {
				MBTC = misc.textUnpack(chatText, packetSize - 2);
				MBBC = misc.textUnpack(chatText, packetSize - 2);
				MBHT = misc.textUnpack(chatText, packetSize - 2);
				MBID = misc.textUnpack(chatText, packetSize - 2);
				chatTextEffects = inStream.readUnsignedByteS();
				chatTextColor = inStream.readUnsignedByteS();
				chatTextSize = (byte) (packetSize - 2);
				inStream.readBytes_reverseA(chatText, chatTextSize, 0);
				chatTextUpdateRequired = true;
			}
			break;</code></pre>
<p>That’s pretty much all there’s to it. If you want you can use this for pm’s aswell (under packet 126).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-simple-server-side-censor/325370/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-simple-server-side-censor/325370/1</link>
        <pubDate>Wed, 13 Jan 2010 03:57:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-325370-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-simple-server-side-censor/325370.rss">[317] Simple server-side censor</source>
      </item>
  </channel>
</rss>
