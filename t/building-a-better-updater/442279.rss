<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Building a Better Updater</title>
    <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279</link>
    <description>I was thinking about getting back into Runescape Cheating. I&#39;ve spent some time thinking about how client Updaters work and, as far as I&#39;m aware, the ones in operation are simple pattern finders.

If I were to start from absolute scratch, I&#39;d approach the problem from a data mining perspective.

The first topic I&#39;d address is the dearth of actual classifications (hooks).

In data mining, if you are unsure what classes an example can manifest, the first thing you need to do is perform clustering. I&#39;d start by gathering up as many client revision examples as I could and then parsing them into control flow graphs (probably an Eclipse extension). I&#39;d then create data points to be clustered based on aspects of data flow and bytecode. Next, I&#39;d run DBSCAN to determine what java classes are similar across all client revisions. Then I&#39;d run DBSCAN to determine what code within those classes remain static across revisions. This would allow me to see what code/java classes are most important for manual review later.

Now that I have the target classes my examples can manifest (in this case a target class corresponds to a single clustering), I need to determine attributes so that I can perform classification (updating). Attributes (features) could be based on a number of things: data flow, patterns, etc. and to build a decision tree (updater) from the examples, I&#39;d use an algorithm like C5.0 and maybe create an arff and import it to WEKA Explorer or something equally dumb to do it. Since C5.0 is based on probability (it uses GINI index), we could report with some percent certainty whether or not a classification prediction is correct: XXX -&gt; NPC Class (85% confidence), etc. Not only that, but you could perform neat statistic stuff like running cross validation, reporting the confusion matrix to calculate F-Measure and so on.

I suppose data mining could be used for deobfuscation as well e.g. fuzzy hierarchical clustering to deal with class fracturing (a dendrogram visualization would be cool).

How would/did you do it? Thoughts?</description>
    
    <lastBuildDate>Fri, 18 May 2012 07:47:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>1R is run to see how many errors are produced for each tier, a certain threshold is used and if the error rate is too large the node is pruned, there are multiple tiers to a 1R dependent on how many attributes you have, its a good method to produce a small tree. As for post pruning you’re right, randomly remove lower level nodes and run a test set through the tree and see if it produces more or less errors, if less then remove it. Generally post pruning produces better end results but takes longer to generate.</p>
<p>Ive just taken my final year university exam in artificial intelligence and another in data engineering so im pretty fresh with this stuff <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/9</link>
        <pubDate>Fri, 18 May 2012 07:47:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-9</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ollie, post:7, topic:442279”]have you looked into case based reasoning?</p>
<p>also I’m interested in what features you would split on? 1R would determine the best nodes to split on as it will let you know which node produces the least errors, then use gini for the purity test. I’m guessing since you mentioned the problem of overfitting that Evil had you know about pre and post pruning.[/quote]</p>
<p>i’ve heard of CBR but I haven’t looked into it. i’ll read up on it.</p>
<p>let me clarify - there’s a clustering phase and a classification phase.</p>
<p>the clustering phase is used to determine classes for the classification phase - it can also be used to find features. in the clustering phase, we’re concerned with grouping together java classes/bytecode with similar patterns and flow. as a trivial example, suppose each client had a version of shell sort. Also suppose that the shell sort algorithm takes 3 levels of looping to implement. Jagex can obfuscate however much they like, but the general flow for the algorithm is the same. By building a control flow graph and grouping together java classes with similar flow, the clustering phase may be able to pick up on this and from manual review we would be able to determine that this particular cluster is indeed shell sort.</p>
<p>in the classification phase, we’re concerned with building a model that allows us to classify java classes/bytecode on unseen client revisions. for each cluster found in the clustering phase, i’d come up with features based on flow and patterns. once again, consider the shell sort example: suppose i’m trying to come up with features to classify it and I notice that the thing each datapoint in the cluster has in common is 3 levels of looping… i’d add levels of looping as a discrete feature. the same goes if i notice certain bytecode patterns. the more features the merrier. if i can come up with a label for the cluster (shell sort) that’s even better, but if I am unable to determine/need the cluster, I can always label it c_1, c_2, …, c_n. the point being that i just want to classify it as such in future client revisions.</p>
<p>i’m not sure what you mean by 1R determining the best node to split on? the best node to split on is determined by GINI. Each node corresponds to a feature and its branches correspond to values of that feature. if you measure that a node is pure (homogenous) for some class, then you are done classifying and that node becomes a leaf node otherwise you split on the node with the most homogeneity. yes, i know about pre and post pruning. However, the only post pruning method i know is to grow the tree out, then prune in a bottom up fashion by seeing if generalization error is improved.</p>
<p>also i made a mistake, I mixed up C5.0 with CART. GINI is used in CART algorithms. C5.0 actually uses information gain which is based on entropy. Although both measures can determine homogeneity of a node, entropy is more sensitive thus a better measure.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/8</link>
        <pubDate>Thu, 17 May 2012 21:47:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-8</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>have you looked into case based reasoning?</p>
<p>also I’m interested in what features you would split on? 1R would determine the best nodes to split on as it will let you know which node produces the least errors, then use gini for the purity test. I’m guessing since you mentioned the problem of overfitting that Evil had you know about pre and post pruning.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/7</link>
        <pubDate>Thu, 17 May 2012 20:11:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-7</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@Marneus901 Marneus901]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/marneus901">@Marneus901</a> wrote:</p>
          <blockquote>
              <p>I have just recently developed something to this nature, and I actually have an algorithm to auto-generate a pattern for any class or field.</p>
<p>Think of the class/field/method usage as a spider web…<br>
fields containing methods that reference them<br>
classes with access flags, and types of data the class holds, and method signitures<br>
methods with bytecode patterns</p>
<p>Then you add in the use of wildcards and create your signiture.</p>
<p>So far its working flawlessly and easily (in conjunction with my new bytecode tracer &amp; analyzer/searcher).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/6</link>
        <pubDate>Thu, 17 May 2012 06:49:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-6</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="442279">
<div class="title">
<div class="quote-controls"></div>
 mopman_sucks:</div>
<blockquote>
<p>Evil was talking about using KNN for an updater: <a href="http://www.moparisthebest.com/smf/index.php/topic,483836.0.html" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,483836.0.html</a></p>
</blockquote>
</aside>
<p>thanks for the laugh! i didn’t look at the code, but clearly he didn’t understand enough about what he was doing <em>cough</em> overfitting <em>cough</em> but the general principle remains the same. we only have around 700 or so examples to work with and, if we used all of them, we’d end up with extremely sparse data (major engine overhauls).</p>
<p>personally, i’d choose k-means over knn, but if you really wanted to, you could use ensemble learning methods, boosting/bagging, and use them both. i believe that’s how that one team won the netflix prize challenge, but this is the topic of industry research and if we used this, we’d encounter the law of diminishing returns in a heartbeat. the reason i chose DBSCAN for clustering was that you didn’t have to guess at the number of centroids since it’s density based.</p>
<p>in the end, we have relatively few examples which almost makes this a case study in emperical probability. i wouldn’t be surprised if naive bayes performed well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/5</link>
        <pubDate>Tue, 15 May 2012 08:35:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-5</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>Evil was talking about using KNN for an updater: <a href="http://www.moparisthebest.com/smf/index.php/topic,483836.0.html" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,483836.0.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/4</link>
        <pubDate>Tue, 15 May 2012 08:02:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-4</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>might want to point that post out to me? also, this wasn’t made to be an elitist post. there are other methods people have yet to touch upon. association rules with an algorithm like a priori for instance might perform very well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/3</link>
        <pubDate>Tue, 15 May 2012 07:23:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-3</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>sounds like something someone wrote ages ago in the cm section</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/2</link>
        <pubDate>Tue, 15 May 2012 07:20:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-2</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
      <item>
        <title>Building a Better Updater</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>I was thinking about getting back into Runescape Cheating. I’ve spent some time thinking about how client Updaters work and, as far as I’m aware, the ones in operation are simple pattern finders.</p>
<p>If I were to start from absolute scratch, I’d approach the problem from a data mining perspective.</p>
<p>The first topic I’d address is the dearth of actual classifications (hooks).</p>
<p>In data mining, if you are unsure what classes an example can manifest, the first thing you need to do is perform clustering. I’d start by gathering up as many client revision examples as I could and then parsing them into control flow graphs (probably an Eclipse extension). I’d then create data points to be clustered based on aspects of data flow and bytecode. Next, I’d run DBSCAN to determine what java classes are similar across all client revisions. Then I’d run DBSCAN to determine what code within those classes remain static across revisions. This would allow me to see what code/java classes are most important for manual review later.</p>
<p>Now that I have the target classes my examples can manifest (in this case a target class corresponds to a single clustering), I need to determine attributes so that I can perform classification (updating). Attributes (features) could be based on a number of things: data flow, patterns, etc. and to build a decision tree (updater) from the examples, I’d use an algorithm like C5.0 and maybe create an arff and import it to WEKA Explorer or something equally dumb to do it. Since C5.0 is based on probability (it uses GINI index), we could report with some percent certainty whether or not a classification prediction is correct: XXX -&gt; NPC Class (85% confidence), etc. Not only that, but you could perform neat statistic stuff like running cross validation, reporting the confusion matrix to calculate F-Measure and so on.</p>
<p>I suppose data mining could be used for deobfuscation as well e.g. fuzzy hierarchical clustering to deal with class fracturing (a dendrogram visualization would be cool).</p>
<p>How would/did you do it? Thoughts?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/building-a-better-updater/442279/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/building-a-better-updater/442279/1</link>
        <pubDate>Tue, 15 May 2012 06:18:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442279-1</guid>
        <source url="https://forum.moparisthebest.com/t/building-a-better-updater/442279.rss">Building a Better Updater</source>
      </item>
  </channel>
</rss>
