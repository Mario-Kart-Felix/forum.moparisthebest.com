<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Tut] Lock Bits in Visual Basic 2005 (Similar to GetDIBits)</title>
    <link>https://forum.moparisthebest.com/t/tut-lock-bits-in-visual-basic-2005-similar-to-getdibits/70157</link>
    <description>Sorry if it&#39;s hard to understand. I am very tired.

Here is a tutorial on how to access the raw image data quickly.

It will show to to read and write to the memory.

To start, make a new WindowsApplication, and add a new NotInheritable class named &quot;BitmapWriter&quot;.
At the top line, import &quot;System.Drawing.Imaging&quot;, and &quot;System.Runtime.InteropServices.Marshal&quot;.
Create 3 new private fields, LockedImage as a Bitmap, LockedData as BitmapData, and ByteBuffer as a byte array.
Now, you will need to create a public constructor for the class. Its parameter should be &quot;ByVal Image as Bitmap&quot;.

Here is how the code should look like at this point.
[code]Imports System.Drawing.Imaging
Imports System.Runtime.InteropServices.Marshal

Public NotInheritable Class BitmapWriter

    Private LockedImage As Bitmap
    Private LockedData As BitmapData
    Private ByteBuffer As Byte()

    Public Sub New(ByVal Image As Bitmap)

    End Sub

End Class[/code]

Within the constructor, assign the variable LockedImage to Image. This will make it easier to access.
Next, assign LockedData to Image.LockBits. The parameter should be a rectangle with its location as 0x0, and its size the same as the bitmap, the flags should be set to ReadWrite, and the pixel format should be 24bit RGB.
Now, we need to resize the byte buffer. ReDim it to set its size set to the stride * the height of LockedData.
Next call the method Copy, and its variables should be, LockedData.Scan0, ByteBuffer, 0, and ByteBuffer.Length.

Here is how the code should look like:

[code]Imports System.Drawing.Imaging
Imports System.Runtime.InteropServices.Marshal

Public NotInheritable Class BitmapWriter

    Private LockedImage As Bitmap
    Private LockedData As BitmapData
    Private ByteBuffer As Byte()

    Public Sub New(ByVal Image As Bitmap)
        LockedImage = Image
        LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb)
        ReDim ByteBuffer(LockedData.Stride * LockedData.Height)
        Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length)
    End Sub

End Class[/code]

Now add 2 subs, Write and Close.
In Write, add the method Copy. Its parameters should be ByteBuffer, 0, LockedData.Scan0, and ByteBuffer.Length.
In Close, add the mothod LockedImage.UnlockBits, and its parameter should be LockedData.

Here is how the code should be now. I added comments to define what each method does.
[code]Imports System.Drawing.Imaging
Imports System.Runtime.InteropServices.Marshal

Public NotInheritable Class BitmapWriter
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; A reference to the locked image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private LockedImage As Bitmap
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; A reference to the information for the locked image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private LockedData As BitmapData
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; The byte buffer of the image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private ByteBuffer As Byte()

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; The constructor of the class. Assigns the variables.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub New(ByVal Image As Bitmap)
        LockedImage = Image &#39; Creates a local reference to the image
        LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb) &#39; Locks the image within the memory.
        ReDim ByteBuffer(LockedData.Stride * LockedData.Height) &#39; Resizes the byte buffer to match the size of the images buffer.
        Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length) &#39; Copies the raw data to the buffer.
    End Sub

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; Copies the byte bufer to the memory.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub Write()
        Copy(ByteBuffer, 0, LockedData.Scan0, ByteBuffer.Length)
    End Sub

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; Unlocks the image form the memory.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub Close()
        LockedImage.UnlockBits(LockedData)
    End Sub

End Class[/code]

Now add a new default property named Pixel. It should have the parameters X and Y, both as integers.
In both Get and Set, declare a variable named Offset as an integer, and set it to &quot;X * 3 + Y * LockedData.Stride&quot;

Under Set, we need to set the RGB values of the pixel in the buffer. The buffer stores the colors in a BGR format (instead of RGB) and the offset is the location of the Blue byte for the pixel. So add the following into the Set method.
[code]ByteBuffer(Offset + 0) = value.B
ByteBuffer(Offset + 1) = value.G
ByteBuffer(Offset + 2) = value.R[/code]

Under Set, its the same story, so return the following:
[code]Return Color.FromArgb(ByteBuffer(Offset + 2), ByteBuffer(Offset + 1), ByteBuffer(Offset + 0))[/code]

The bitmap writer is now done. Here is what it should be like.
[code]Imports System.Drawing.Imaging
Imports System.Runtime.InteropServices.Marshal

Public NotInheritable Class BitmapWriter
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; A reference to the locked image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private LockedImage As Bitmap
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; A reference to the information for the locked image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private LockedData As BitmapData
    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; The byte buffer of the image.
    &#39;&#39;&#39; &lt;/summary&gt;
    Private ByteBuffer As Byte()

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; The constructor of the class. Assigns the variables.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub New(ByVal Image As Bitmap)
        LockedImage = Image &#39; Creates a local reference to the image
        LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb) &#39; Locks the image within the memory.
        ReDim ByteBuffer(LockedData.Stride * LockedData.Height) &#39; Resizes the byte buffer to match the size of the images buffer.
        Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length) &#39; Copies the raw data to the buffer.
    End Sub

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; Copies the byte bufer to the memory.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub Write()
        Copy(ByteBuffer, 0, LockedData.Scan0, ByteBuffer.Length)
    End Sub

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; Unlocks the image form the memory.
    &#39;&#39;&#39; &lt;/summary&gt;
    Public Sub Close()
        LockedImage.UnlockBits(LockedData)
    End Sub

    &#39;&#39;&#39; &lt;summary&gt;
    &#39;&#39;&#39; Gets or sets the color of the selected pixel.
    &#39;&#39;&#39; &lt;/summary&gt;
    Default Public Property Pixel(ByVal X As Integer, ByVal Y As Integer) As Color
        Get
            Dim Offset As Integer = X * 3 + Y * LockedData.Stride &#39; Gets the offset for the pixel
            Return Color.FromArgb(ByteBuffer(Offset + 2), ByteBuffer(Offset + 1), ByteBuffer(Offset + 0)) &#39; Returns the pixels color
        End Get
        Set(ByVal value As Color)
            Dim Offset As Integer = X * 3 + Y * LockedData.Stride &#39; Gets the offset for the pixel
            ByteBuffer(Offset + 0) = value.B &#39; Sets the pixels Blue value
            ByteBuffer(Offset + 1) = value.G &#39; Sets the pixels Green value
            ByteBuffer(Offset + 2) = value.R &#39; Sets the pixels Red value
        End Set
    End Property

End Class[/code]

To test it, go into the main form, and use this code in the forms Load Event.
[code]        Dim B As New Bitmap(50, 50) &#39; Create a new 50x50 bitmap
        Dim W As New BitmapWriter(B) &#39; Create a new bitmap writer
        For X As Integer = 0 To 49 Step 2
            For Y As Integer = 0 To 49 Step 2 &#39; Loop from 0 - 49 increasing by 2 at a time.
                W.Pixel(X, Y) = Color.FromArgb(X * 5, Y * 5, 0) &#39; Setting the color of the select pixel
            Next
        Next
        W.Write() &#39; You need to call this to apply the changes to image.
        W.Close() &#39; You need to call this to stop memory problems.
        Me.BackgroundImage = B
        B.Save(&quot;C:\LockBitsExample.png&quot;)[/code]

You should get this as your result:
[img]http://img53.imageshack.us/img53/6788/lockbitsexampleiz7.png[/img]

If you wanted to use this to find a pixel, this would be how its done:
[code]    Public Function FindPixel(ByVal Im As Image, ByVal Color As Color) As Point
        Dim W As New BitmapWriter(Im)
        For X As Integer = 0 To Im.Width - 1
            For Y As Integer = 0 To Im.Height - 1
                If W.Pixel(X, Y).ToArgb = Color.ToArgb Then
                    W.Close()
                    Return New Point(X, Y)
                End If
            Next
        Next
        W.Close()
        Return New Point(-1, -1)
    End Function[/code]

If you want to learn more about LockBits, check this out http://www.bobpowell.net/lockingbits.htm</description>
    
    <lastBuildDate>Fri, 23 Mar 2007 17:57:54 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-lock-bits-in-visual-basic-2005-similar-to-getdibits/70157.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Tut] Lock Bits in Visual Basic 2005 (Similar to GetDIBits)</title>
        <dc:creator><![CDATA[@Flaming_Idiot Flaming Idiot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/flaming_idiot">@Flaming_Idiot</a> wrote:</p>
          <blockquote>
              <p>Sorry if it’s hard to understand. I am very tired.</p>
<p>Here is a tutorial on how to access the raw image data quickly.</p>
<p>It will show to to read and write to the memory.</p>
<p>To start, make a new WindowsApplication, and add a new NotInheritable class named “BitmapWriter”.<br>
At the top line, import “System.Drawing.Imaging”, and “System.Runtime.InteropServices.Marshal”.<br>
Create 3 new private fields, LockedImage as a Bitmap, LockedData as BitmapData, and ByteBuffer as a byte array.<br>
Now, you will need to create a public constructor for the class. Its parameter should be “ByVal Image as Bitmap”.</p>
<p>Here is how the code should look like at this point.</p>
<p>[code]Imports System.Drawing.Imaging<br>
Imports System.Runtime.InteropServices.Marshal</p>
<p>Public NotInheritable Class BitmapWriter</p>
<pre><code>Private LockedImage As Bitmap
Private LockedData As BitmapData
Private ByteBuffer As Byte()

Public Sub New(ByVal Image As Bitmap)

End Sub
</code></pre>
<p>End Class[/code]</p>
<p>Within the constructor, assign the variable LockedImage to Image. This will make it easier to access.<br>
Next, assign LockedData to Image.LockBits. The parameter should be a rectangle with its location as 0x0, and its size the same as the bitmap, the flags should be set to ReadWrite, and the pixel format should be 24bit RGB.<br>
Now, we need to resize the byte buffer. ReDim it to set its size set to the stride * the height of LockedData.<br>
Next call the method Copy, and its variables should be, LockedData.Scan0, ByteBuffer, 0, and ByteBuffer.Length.</p>
<p>Here is how the code should look like:</p>
<p>[code]Imports System.Drawing.Imaging<br>
Imports System.Runtime.InteropServices.Marshal</p>
<p>Public NotInheritable Class BitmapWriter</p>
<pre><code>Private LockedImage As Bitmap
Private LockedData As BitmapData
Private ByteBuffer As Byte()

Public Sub New(ByVal Image As Bitmap)
    LockedImage = Image
    LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb)
    ReDim ByteBuffer(LockedData.Stride * LockedData.Height)
    Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length)
End Sub
</code></pre>
<p>End Class[/code]</p>
<p>Now add 2 subs, Write and Close.<br>
In Write, add the method Copy. Its parameters should be ByteBuffer, 0, LockedData.Scan0, and ByteBuffer.Length.<br>
In Close, add the mothod LockedImage.UnlockBits, and its parameter should be LockedData.</p>
<p>Here is how the code should be now. I added comments to define what each method does.</p>
<p>[code]Imports System.Drawing.Imaging<br>
Imports System.Runtime.InteropServices.Marshal</p>
<p>Public NotInheritable Class BitmapWriter<br>
‘’’ <summary><br>
‘’’ A reference to the locked image.<br>
‘’’ </summary><br>
Private LockedImage As Bitmap<br>
‘’’ <summary><br>
‘’’ A reference to the information for the locked image.<br>
‘’’ </summary><br>
Private LockedData As BitmapData<br>
‘’’ <summary><br>
‘’’ The byte buffer of the image.<br>
‘’’ </summary><br>
Private ByteBuffer As Byte()</p>
<pre><code>''' &lt;summary&gt;
''' The constructor of the class. Assigns the variables.
''' &lt;/summary&gt;
Public Sub New(ByVal Image As Bitmap)
    LockedImage = Image ' Creates a local reference to the image
    LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb) ' Locks the image within the memory.
    ReDim ByteBuffer(LockedData.Stride * LockedData.Height) ' Resizes the byte buffer to match the size of the images buffer.
    Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length) ' Copies the raw data to the buffer.
End Sub

''' &lt;summary&gt;
''' Copies the byte bufer to the memory.
''' &lt;/summary&gt;
Public Sub Write()
    Copy(ByteBuffer, 0, LockedData.Scan0, ByteBuffer.Length)
End Sub

''' &lt;summary&gt;
''' Unlocks the image form the memory.
''' &lt;/summary&gt;
Public Sub Close()
    LockedImage.UnlockBits(LockedData)
End Sub
</code></pre>
<p>End Class[/code]</p>
<p>Now add a new default property named Pixel. It should have the parameters X and Y, both as integers.<br>
In both Get and Set, declare a variable named Offset as an integer, and set it to “X * 3 + Y * LockedData.Stride”</p>
<p>Under Set, we need to set the RGB values of the pixel in the buffer. The buffer stores the colors in a BGR format (instead of RGB) and the offset is the location of the Blue byte for the pixel. So add the following into the Set method.</p>
<p><code>ByteBuffer(Offset + 0) = value.B
ByteBuffer(Offset + 1) = value.G
ByteBuffer(Offset + 2) = value.R</code></p>
<p>Under Set, its the same story, so return the following:</p>
<pre><code class="lang-auto">Return Color.FromArgb(ByteBuffer(Offset + 2), ByteBuffer(Offset + 1), ByteBuffer(Offset + 0))</code></pre>
<p>The bitmap writer is now done. Here is what it should be like.</p>
<p>[code]Imports System.Drawing.Imaging<br>
Imports System.Runtime.InteropServices.Marshal</p>
<p>Public NotInheritable Class BitmapWriter<br>
‘’’ <summary><br>
‘’’ A reference to the locked image.<br>
‘’’ </summary><br>
Private LockedImage As Bitmap<br>
‘’’ <summary><br>
‘’’ A reference to the information for the locked image.<br>
‘’’ </summary><br>
Private LockedData As BitmapData<br>
‘’’ <summary><br>
‘’’ The byte buffer of the image.<br>
‘’’ </summary><br>
Private ByteBuffer As Byte()</p>
<pre><code>''' &lt;summary&gt;
''' The constructor of the class. Assigns the variables.
''' &lt;/summary&gt;
Public Sub New(ByVal Image As Bitmap)
    LockedImage = Image ' Creates a local reference to the image
    LockedData = Image.LockBits(New Rectangle(New Point(0, 0), Image.Size), ImageLockMode.ReadWrite, PixelFormat.Format24bppRgb) ' Locks the image within the memory.
    ReDim ByteBuffer(LockedData.Stride * LockedData.Height) ' Resizes the byte buffer to match the size of the images buffer.
    Copy(LockedData.Scan0, ByteBuffer, 0, ByteBuffer.Length) ' Copies the raw data to the buffer.
End Sub

''' &lt;summary&gt;
''' Copies the byte bufer to the memory.
''' &lt;/summary&gt;
Public Sub Write()
    Copy(ByteBuffer, 0, LockedData.Scan0, ByteBuffer.Length)
End Sub

''' &lt;summary&gt;
''' Unlocks the image form the memory.
''' &lt;/summary&gt;
Public Sub Close()
    LockedImage.UnlockBits(LockedData)
End Sub

''' &lt;summary&gt;
''' Gets or sets the color of the selected pixel.
''' &lt;/summary&gt;
Default Public Property Pixel(ByVal X As Integer, ByVal Y As Integer) As Color
    Get
        Dim Offset As Integer = X * 3 + Y * LockedData.Stride ' Gets the offset for the pixel
        Return Color.FromArgb(ByteBuffer(Offset + 2), ByteBuffer(Offset + 1), ByteBuffer(Offset + 0)) ' Returns the pixels color
    End Get
    Set(ByVal value As Color)
        Dim Offset As Integer = X * 3 + Y * LockedData.Stride ' Gets the offset for the pixel
        ByteBuffer(Offset + 0) = value.B ' Sets the pixels Blue value
        ByteBuffer(Offset + 1) = value.G ' Sets the pixels Green value
        ByteBuffer(Offset + 2) = value.R ' Sets the pixels Red value
    End Set
End Property
</code></pre>
<p>End Class[/code]</p>
<p>To test it, go into the main form, and use this code in the forms Load Event.</p>
<p><code>        Dim B As New Bitmap(50, 50) ' Create a new 50x50 bitmap
        Dim W As New BitmapWriter(B) ' Create a new bitmap writer
        For X As Integer = 0 To 49 Step 2
            For Y As Integer = 0 To 49 Step 2 ' Loop from 0 - 49 increasing by 2 at a time.
                W.Pixel(X, Y) = Color.FromArgb(X * 5, Y * 5, 0) ' Setting the color of the select pixel
            Next
        Next
        W.Write() ' You need to call this to apply the changes to image.
        W.Close() ' You need to call this to stop memory problems.
        Me.BackgroundImage = B
        B.Save("C:\LockBitsExample.png")</code></p>
<p>You should get this as your result:<br>
<img src="http://img53.imageshack.us/img53/6788/lockbitsexampleiz7.png" alt width="" height=""></p>
<p>If you wanted to use this to find a pixel, this would be how its done:</p>
<p><code>    Public Function FindPixel(ByVal Im As Image, ByVal Color As Color) As Point
        Dim W As New BitmapWriter(Im)
        For X As Integer = 0 To Im.Width - 1
            For Y As Integer = 0 To Im.Height - 1
                If W.Pixel(X, Y).ToArgb = Color.ToArgb Then
                    W.Close()
                    Return New Point(X, Y)
                End If
            Next
        Next
        W.Close()
        Return New Point(-1, -1)
    End Function</code></p>
<p>If you want to learn more about LockBits, check this out <a href="http://www.bobpowell.net/lockingbits.htm" rel="nofollow noopener">http://www.bobpowell.net/lockingbits.htm</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-lock-bits-in-visual-basic-2005-similar-to-getdibits/70157/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-lock-bits-in-visual-basic-2005-similar-to-getdibits/70157/1</link>
        <pubDate>Fri, 23 Mar 2007 17:57:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-70157-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-lock-bits-in-visual-basic-2005-similar-to-getdibits/70157.rss">[Tut] Lock Bits in Visual Basic 2005 (Similar to GetDIBits)</source>
      </item>
  </channel>
</rss>
