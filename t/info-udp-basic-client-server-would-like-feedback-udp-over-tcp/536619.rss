<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
    <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619</link>
    <description>I was planning on using something like this for an application I was working on. Would like the feedback

[u]Why I chose to do things like this[/u]
With TCP when a packet is lost the server would make a request for that packet. The problem with this is that packets get queued and it will wait till that lost packet is resent before processing the other packets. That can cause the client to be very unpleasant depending on what functions you are doing. UDP however ignores lost packets and will continue to run. 

If you where to use this for things like chat or sending commands they may not function properly because the data may not be read entirely or the data may have not been received at all.

Unfortunately you cannot use TCP and UDP because it educes packet lose with the UDP packets.
I&#39;ll post my own implementation using TCP to explain what I mean further another time so that you can use TCP features with UDP (for reliability on high traffic). UDP does require you to be coding a little more.


Server
[code=java]package com.xite;

import java.awt.List;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.net.SocketException;

/**
 * A simple server that responds to incoming messages
 * 
 * @author Victoria Connelly &lt;haiix@littlevicky.net&gt;
 * 
 */
public class Server implements Runnable {
	/**
	 * The socket the connection is on
	 */
	private DatagramSocket socket;

	/**
	 * Instance for sending and receiving incoming/outgoing data
	 */
	private DatagramPacket packet;
	
	/**
	 * Constructor binding the server to a port
	 * 
	 * @param port
	 *            The port the server should bind on
	 */
	public Server(int port) {
		try {
			this.socket = new DatagramSocket(port);
		} catch (SocketException e) {
			e.printStackTrace();
		}
	}

	/**
	 * A loop to check for incoming data
	 */
	public void run() {
		while (true) {
			byte[] payload = new byte[1024];
			packet = new DatagramPacket(payload, payload.length);
			try {
				socket.receive(packet);
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println(&quot;Message recieved from client:  &quot; + readData() + &quot;\n&quot;);

			//this statement below is only to check that everything is working.
			//TODO: proper packet checking and sending client instructions
			if (readData().equalsIgnoreCase(&quot;hello&quot;))
				sendData(&quot;world&quot;.getBytes(), packet.getAddress(),packet.getPort());
			
			//	parsePackets(packet.getData(), packet.getAddress(), packet.getPort());
		}
	}

	/**
	 * Identify and handle packets
	 */
	private void parsePackets(byte[] data, InetAddress address, int port) {
		/* An example of how it will be constructed */
		int  packetType = 0; //would refer to an object
		switch(packetType) {
		case 0: //Error packet
			System.err.println(&quot;Invalid packet type!!&quot;);
			break;
		case 1: //the packet id; ID 1 could be a new session
			System.out.println(&quot;Client connected: &quot; + address.getHostAddress());
			break;
		}
		
	}

	/**
	 * This method allows the server to send messages on the stream to connected
	 * clients
	 * 
	 * @param payload
	 *            The data that will be sent to the client
	 * 
	 * @param address
	 *            The IP address of the connected client
	 * 
	 * @param port
	 *            The port the client is connected on
	 */
	public void sendData(byte[] payload, InetAddress address, int port) {
		DatagramPacket packet = new DatagramPacket(payload, payload.length, address, port);
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(&quot;Message has succesfully been sent to the client.&quot;);
	}

	/**
	 * This method reads incoming data
	 * 
	 * @return Returns the incoming data to a String value for us to read as
	 *         plain text
	 */
	public String readData() {
		return new String(packet.getData()).trim();
	}

	/**
	 * Main method to execute the server
	 */
	public static void main(String[] args) {
		Server server = new Server(5555);
		new Thread(server).start();
		System.out.println(&quot;Server loaded sucessfully, accepting connections.\n&quot;);
	}

}
[/code]

Client
[code=java]package com.xite;

import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * A simple client that responds to incoming messages
 * 
 * @author Victoria Connelly &lt;haiix@littlevicky.net&gt;
 * 
 */
public class Client implements Runnable {
	/**
	 * The socket the connection is on
	 */
	private DatagramSocket socket;

	/**
	 * Instance for sending and receiving incoming/outgoing data
	 */
	private DatagramPacket packet;

	/**
	 * The instance for the IP address for the client to connect on
	 */
	private InetAddress address;

	/**
	 * The port the client will be using to connect with
	 */
	private int port;

	/**
	 * Constructor is used to connect the client to the server
	 * 
	 * @param address
	 *            The address of the server
	 * 
	 * @param port
	 *            The port the client will use to connect to the server
	 *            
	 * @throws Exception
	 * 			  An exception will only occur if the client cannot connect to the server
	 */
	public Client(String address, int port) throws Exception {
		this.port = port;
		this.socket = new DatagramSocket();
		this.address = InetAddress.getByName(address);
		sendData(&quot;hello&quot;.getBytes());
	}

	/**
	 * A loop to check for incoming data
	 */
	public void run() {
		while (true) {
			byte[] payload = new byte[1024];
			DatagramPacket packet = new DatagramPacket(payload, payload.length);
			try {
				socket.receive(packet);
			} catch (IOException e) {
				e.printStackTrace();
			}
			System.out.println(&quot;Message recieved from server: &quot; + readData()  + &quot;\n&quot;);
		}
	}

	/**
	 * This method allows the server to send messages on the stream to connected
	 * clients
	 * 
	 * @param payload
	 *            The data that will be sent to the client
	 */
	public void sendData(byte[] payload) {
		packet = new DatagramPacket(payload, payload.length, address, port);
		try {
			socket.send(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println(&quot;Message has succesfully been sent to the server.&quot;);
	}

	/**
	 * This method reads incoming data
	 * 
	 * @return Returns the incoming data to a String value for us to read as
	 *         plain text
	 */
	public String readData() {
		return new String(packet.getData()).trim();
	}

	/**
	 * Main method to execute the server
	 */
	public static void main(String[] args) {
		System.out.println(&quot;Starting client.\n&quot;);
		Client client;
		try {
			client = new Client(&quot;127.0.0.1&quot;, 5555);
			new Thread(client).start();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

}
[/code]
If the code looks like anything similar to any examples that you may of seen online, cool :D

I&#39;d like the some review and comments if this would be &#39;okay&#39; to use practically.</description>
    
    <lastBuildDate>Sat, 28 Dec 2013 02:25:55 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>[quote=“Whackatre, post:3, topic:536619”][quote author=Rix_ link=topic=655431.msg4388450#msg4388450 date=1386557204]<br>
I’d tell you a UDP joke, but you might not get it.<br>
[/quote]</p>
<p>The best thing about UDP jokes is that I don’t care if you get them or not.[/quote]AHAHAHAHA THATS SO FUNNY</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/12</link>
        <pubDate>Sat, 28 Dec 2013 02:25:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-12</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@DefLegende DefLegende]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deflegende">@DefLegende</a> wrote:</p>
          <blockquote>
              <p>Hey I don’t know if this will help but I’m going to post some stuff below I found while “gravedigging” the forum ^^</p>
<p>[quote=“m.dog311, post:1, topic:378741”]Interesting read, etc.</p>
<p><a href="http://services.runescape.com/m=forum/forums.ws?25,26,254,62169716" class="onebox" target="_blank" rel="nofollow noopener">http://services.runescape.com/m=forum/forums.ws?25,26,254,62169716</a></p>
<p>[quote author=“Mod Dowd and other JMods”]<br>
Q. Does the game use TCP or UDP for packets?</p>
<p>A. Both – our internal communications between worlds and modules are all UDP, while the game talks to your PC using TCP.<br>
Mod_jackh<br>
[/quote][/quote]</p>
<p>U might want to also read this:<br>
<a href="http://gafferongames.com/networking-for-game-programmers/" class="onebox" target="_blank" rel="nofollow noopener">http://gafferongames.com/networking-for-game-programmers/</a></p>
<p>Or maybe this thread:<br>
<a href="http://www.moparisthebest.com/smf/index.php/topic,512597.msg3720591.html" class="onebox" target="_blank" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,512597.msg3720591.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/11</link>
        <pubDate>Fri, 27 Dec 2013 14:17:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-11</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@sspoke sspoke]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sspoke">@sspoke</a> wrote:</p>
          <blockquote>
              <p>you wont be implementing TCP because TCP requires a stream meaning if one packet you attempt to inject into a TCP Packet will ruin the whole TCP Stream and break the connection thats why you don’t see people injecting packets into others open ports (active connection ones). You could craft one packet that will be accepted in TCP if it’s slow enough to predict whats the packets sequence number has to be keeps incrementing so you could inject your own packet by incrementing it into the future by +1… but then official packets will your old future predicted values and close the connection. (this is still nearly impossible unless you have a real-time packet sniffer on the victims computer) otherwise you can’t see what packets they are sending.</p>
<p>The UDP checksum could be as simple as adding every byte in the packet to the previous byte in the packet of course if the checksum is only 1 byte… it will overflow many many times but thats not important. Sure the checksum with the packet somewhere in front of the packet (since by theory the front of the packet should get less damaged then the middle or near the end, lol my own taught here).</p>
<p>Then recompute the checksum for each packet with checksum byte removed and check if it matches and that should get rid of mostly all invalid/damaged packets.</p>
<p>order of udp packets could be fixed by sending 2 packets instead of one, first packet as real packet, second packet as acknowledgement of the first packet. if acknowledgement packet which has to match a packet that didn’t come yet  keep waiting, for a limit you set maybe 100 milliseconds etc… until it sends another packet to re-transmit the same packet again. Until one acknowledgement packet is solved or never arrived make the server not send any other packets… this will slow it down by alot i guess but other then that maybe there is a better way to do this.</p>
<p>Here is a explanation how the ACK packets used with UDP to ensure order and reliability of the packets for my game Subspace (Continuum)</p>
<pre><code>  For outgoing traffic:
  1. All outgoing traffic must be put into a SendLog until an ACKnowledgement is received with the same
     ACK_ID as the traffic.
  2. Sometimes double-sending reliable messages is warranted, given high-bandwidth and high-packetloss.
  3. ACK's should cause disconnection if you have not sent a message with that ACK_ID yet.
  4. ACK_ID starts at 0 for both client and server, ACK_ID is incremented by one every time.

  For incoming traffic:
  1. ACK all incoming Reliable traffic no matter what.  ACK the traffic twice if it makes you feel happy.
  2. All incoming traffic must be processed in the order of the ACK_ID's.
  3. If a packet is lost, all traffic stamped with an ACK_ID higher than the next expected ACK_ID must be
     placed on a BackLog of packets until the packet in sequence is finally received.
  4. If an incoming reliable message's ACK_ID has already been processed, ignore the packet</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/10</link>
        <pubDate>Wed, 11 Dec 2013 01:11:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-10</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="7" data-topic="536619">
<div class="title">
<div class="quote-controls"></div>
 xx matty xx:</div>
<blockquote>
<p>might as well re-implement tcp while you’re at it… i don’t think the ietf/tim/vint/whoever had any idea what they were doing</p>
</blockquote>
</aside>
<p>shut up thx</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/9</link>
        <pubDate>Tue, 10 Dec 2013 14:38:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-9</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>[quote=“sspoke, post:5, topic:536619”]UDP’s would require checksums to check if packet is not damaged and some kind of counter on each packet to see if none of the packets are lost, Also packets don’t arrive in order that also have to check for.</p>
<p>UDP is used for stuff like bullets in fps and very accurate physics like racing games and 2d space shooting games like Subspace (Continuum). Where all you send is the bullet speed X,Y,Z location[/quote]<br>
I’ve been using it for the players x,y coords etc. A checksum is a good thing to use (if you know how to implement it correctly).</p>
<p>There is a way you can use features of TCP with UDP.</p>
<aside class="quote" data-post="6" data-topic="536619">
<div class="title">
<div class="quote-controls"></div>
 Miss Silabsoft:</div>
<blockquote>
<p>someone posted on here a long time ago about how to receive packets in a specific order using UDP, one of our expert gravediggers could probably find it.</p>
</blockquote>
</aside>
<p>That would be cool to read. Go gravediggers!</p>
<aside class="quote" data-post="7" data-topic="536619">
<div class="title">
<div class="quote-controls"></div>
 xx matty xx:</div>
<blockquote>
<p>might as well re-implement tcp while you’re at it… i don’t think the ietf/tim/vint/whoever had any idea what they were doing</p>
</blockquote>
</aside>
<p>What?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/8</link>
        <pubDate>Mon, 09 Dec 2013 20:29:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-8</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@xx_matty_xx Justin Bieber]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx_matty_xx">@xx_matty_xx</a> wrote:</p>
          <blockquote>
              <p>might as well re-implement tcp while you’re at it… i don’t think the ietf/tim/vint/whoever had any idea what they were doing</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/7</link>
        <pubDate>Mon, 09 Dec 2013 20:27:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-7</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>someone posted on here a long time ago about how to receive packets in a specific order using UDP, one of our expert gravediggers could probably find it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/6</link>
        <pubDate>Mon, 09 Dec 2013 20:21:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-6</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@sspoke sspoke]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sspoke">@sspoke</a> wrote:</p>
          <blockquote>
              <p>UDP’s would require checksums to check if packet is not damaged and some kind of counter on each packet to see if none of the packets are lost, Also packets don’t arrive in order that also have to check for.</p>
<p>UDP is used for stuff like bullets in fps and very accurate physics like racing games and 2d space shooting games like Subspace (Continuum). Where all you send is the bullet speed X,Y,Z location</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/5</link>
        <pubDate>Mon, 09 Dec 2013 19:25:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-5</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="536619">
<div class="title">
<div class="quote-controls"></div>
 Rix_:</div>
<blockquote>
<p>I’d tell you a UDP joke, but you might not get it.</p>
</blockquote>
</aside>
<p>Plz TCP</p>
<p>Protolol</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/4</link>
        <pubDate>Mon, 09 Dec 2013 16:19:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-4</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="536619">
<div class="title">
<div class="quote-controls"></div>
 Rix_:</div>
<blockquote>
<p>I’d tell you a UDP joke, but you might not get it.</p>
</blockquote>
</aside>
<p>The best thing about UDP jokes is that I don’t care if you get them or not.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/3</link>
        <pubDate>Mon, 09 Dec 2013 03:02:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-3</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>I’d tell you a UDP joke, but you might not get it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/2</link>
        <pubDate>Mon, 09 Dec 2013 02:46:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-2</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
      <item>
        <title>[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>I was planning on using something like this for an application I was working on. Would like the feedback</p>
<p><span class="bbcode-u">Why I chose to do things like this</span><br>
With TCP when a packet is lost the server would make a request for that packet. The problem with this is that packets get queued and it will wait till that lost packet is resent before processing the other packets. That can cause the client to be very unpleasant depending on what functions you are doing. UDP however ignores lost packets and will continue to run.</p>
<p>If you where to use this for things like chat or sending commands they may not function properly because the data may not be read entirely or the data may have not been received at all.</p>
<p>Unfortunately you cannot use TCP and UDP because it educes packet lose with the UDP packets.<br>
I’ll post my own implementation using TCP to explain what I mean further another time so that you can use TCP features with UDP (for reliability on high traffic). UDP does require you to be coding a little more.</p>
<p>Server</p>
<p>[code=java]package com.xite;</p>
<p>import java.awt.List;<br>
import java.io.IOException;<br>
import java.net.DatagramPacket;<br>
import java.net.DatagramSocket;<br>
import java.net.InetAddress;<br>
import java.net.SocketException;</p>
<p>/**</p>
<ul>
<li>A simple server that responds to incoming messages</li>
<li>
</li>
<li>
<span class="mention">@author</span> Victoria Connelly <a href="mailto:haiix@littlevicky.net">haiix@littlevicky.net</a>
</li>
<li>
</li>
</ul>
<p><em>/<br>
public class Server implements Runnable {<br>
/</em>*<br>
* The socket the connection is on<br>
*/<br>
private DatagramSocket socket;</p>
<pre><code>/**
 * Instance for sending and receiving incoming/outgoing data
 */
private DatagramPacket packet;

/**
 * Constructor binding the server to a port
 * 
 * @param port
 *            The port the server should bind on
 */
public Server(int port) {
	try {
		this.socket = new DatagramSocket(port);
	} catch (SocketException e) {
		e.printStackTrace();
	}
}

/**
 * A loop to check for incoming data
 */
public void run() {
	while (true) {
		byte[] payload = new byte[1024];
		packet = new DatagramPacket(payload, payload.length);
		try {
			socket.receive(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Message recieved from client:  " + readData() + "\n");

		//this statement below is only to check that everything is working.
		//TODO: proper packet checking and sending client instructions
		if (readData().equalsIgnoreCase("hello"))
			sendData("world".getBytes(), packet.getAddress(),packet.getPort());
		
		//	parsePackets(packet.getData(), packet.getAddress(), packet.getPort());
	}
}

/**
 * Identify and handle packets
 */
private void parsePackets(byte[] data, InetAddress address, int port) {
	/* An example of how it will be constructed */
	int  packetType = 0; //would refer to an object
	switch(packetType) {
	case 0: //Error packet
		System.err.println("Invalid packet type!!");
		break;
	case 1: //the packet id; ID 1 could be a new session
		System.out.println("Client connected: " + address.getHostAddress());
		break;
	}
	
}

/**
 * This method allows the server to send messages on the stream to connected
 * clients
 * 
 * @param payload
 *            The data that will be sent to the client
 * 
 * @param address
 *            The IP address of the connected client
 * 
 * @param port
 *            The port the client is connected on
 */
public void sendData(byte[] payload, InetAddress address, int port) {
	DatagramPacket packet = new DatagramPacket(payload, payload.length, address, port);
	try {
		socket.send(packet);
	} catch (IOException e) {
		e.printStackTrace();
	}
	System.out.println("Message has succesfully been sent to the client.");
}

/**
 * This method reads incoming data
 * 
 * @return Returns the incoming data to a String value for us to read as
 *         plain text
 */
public String readData() {
	return new String(packet.getData()).trim();
}

/**
 * Main method to execute the server
 */
public static void main(String[] args) {
	Server server = new Server(5555);
	new Thread(server).start();
	System.out.println("Server loaded sucessfully, accepting connections.\n");
}
</code></pre>
<p>}<br>
[/code]</p>
<p>Client</p>
<p>[code=java]package com.xite;</p>
<p>import java.io.IOException;<br>
import java.net.DatagramPacket;<br>
import java.net.DatagramSocket;<br>
import java.net.InetAddress;</p>
<p>/**</p>
<ul>
<li>A simple client that responds to incoming messages</li>
<li>
</li>
<li>
<span class="mention">@author</span> Victoria Connelly <a href="mailto:haiix@littlevicky.net">haiix@littlevicky.net</a>
</li>
<li>
</li>
</ul>
<p><em>/<br>
public class Client implements Runnable {<br>
/</em>*<br>
* The socket the connection is on<br>
*/<br>
private DatagramSocket socket;</p>
<pre><code>/**
 * Instance for sending and receiving incoming/outgoing data
 */
private DatagramPacket packet;

/**
 * The instance for the IP address for the client to connect on
 */
private InetAddress address;

/**
 * The port the client will be using to connect with
 */
private int port;

/**
 * Constructor is used to connect the client to the server
 * 
 * @param address
 *            The address of the server
 * 
 * @param port
 *            The port the client will use to connect to the server
 *            
 * @throws Exception
 * 			  An exception will only occur if the client cannot connect to the server
 */
public Client(String address, int port) throws Exception {
	this.port = port;
	this.socket = new DatagramSocket();
	this.address = InetAddress.getByName(address);
	sendData("hello".getBytes());
}

/**
 * A loop to check for incoming data
 */
public void run() {
	while (true) {
		byte[] payload = new byte[1024];
		DatagramPacket packet = new DatagramPacket(payload, payload.length);
		try {
			socket.receive(packet);
		} catch (IOException e) {
			e.printStackTrace();
		}
		System.out.println("Message recieved from server: " + readData()  + "\n");
	}
}

/**
 * This method allows the server to send messages on the stream to connected
 * clients
 * 
 * @param payload
 *            The data that will be sent to the client
 */
public void sendData(byte[] payload) {
	packet = new DatagramPacket(payload, payload.length, address, port);
	try {
		socket.send(packet);
	} catch (IOException e) {
		e.printStackTrace();
	}
	System.out.println("Message has succesfully been sent to the server.");
}

/**
 * This method reads incoming data
 * 
 * @return Returns the incoming data to a String value for us to read as
 *         plain text
 */
public String readData() {
	return new String(packet.getData()).trim();
}

/**
 * Main method to execute the server
 */
public static void main(String[] args) {
	System.out.println("Starting client.\n");
	Client client;
	try {
		client = new Client("127.0.0.1", 5555);
		new Thread(client).start();
	} catch (Exception e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>}<br>
[/code]<br>
If the code looks like anything similar to any examples that you may of seen online, cool <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>I’d like the some review and comments if this would be ‘okay’ to use practically.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619/1</link>
        <pubDate>Sat, 07 Dec 2013 23:38:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-536619-1</guid>
        <source url="https://forum.moparisthebest.com/t/info-udp-basic-client-server-would-like-feedback-udp-over-tcp/536619.rss">[Info] UDP Basic client/server (would like feedback) - UDP over TCP?</source>
      </item>
  </channel>
</rss>
