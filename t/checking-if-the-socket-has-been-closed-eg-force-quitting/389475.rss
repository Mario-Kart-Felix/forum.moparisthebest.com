<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Checking if the socket has been closed (EG: Force quitting)</title>
    <link>https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475</link>
    <description>Does anyone know of a better way to check if the connection between Server and Client still exists. I&#39;m currently using this;
[code=java]
        public void run() {
            synchronized (cH.getPlayers()) {
                if (cH.getPlayers().size() &gt; 0) {
                    for (Object o : cH.getPlayers().toArray()) {
                        Player p = (Player) o;
                        try {
                            p.getNetworkIO().getSocket().getInputStream().read();
                        } catch (IOException e) {
                            System.out.println(&quot;Player &quot; + p.getPlayerName() + &quot;: Disconnected.&quot;);
                            cH.removePlayer(p);
                        }
                    }
                }
            }
        }
[/code]
Yes, it does work. I&#39;m just wondering if anyone knows of a better way. The code is in a class that extends TimerTask, therefore I can run this code as oftern as I like. Here&#39;s the whole class for anyone that&#39;s intrested;

[code=java]
package src;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by IntelliJ IDEA.
 * User: Steven
 * Date: 29-Mar-2011
 * Time: 13:42:26
 */
public class SystemTimer {
    public int period;

    public SystemTimer(int p) {
        new Memory(p);
    }

    public SystemTimer(int p, ClientHandler cH) {
        new LoginChecker(p, cH);
    }

    class Memory extends TimerTask {
        private double memoryUsage;
        private Timer memoryTimer;

        public Memory(int p) {
            period = p;
            this.memoryTimer = new Timer();
            this.memoryTimer.scheduleAtFixedRate(this, 0, period);
        }

        public void run() {
            setMemoryUsage(((double) Runtime.getRuntime().freeMemory() / (double) Runtime.getRuntime().maxMemory()) * 100);
            if (getMemoryUsage() &gt; 70) {
                System.gc();
                System.err.println(&quot;MEMORY USAGE: HIGHER THEN 70 PERCENT.&quot;);
                System.err.println(&quot;MEMORY USAGE: GARBAGE COLLECTOR CALLED.&quot;);
            }
            System.out.println(&quot;MEMORY USAGE: &quot; + Math.round(getMemoryUsage()) + &quot;%&quot;);
        }

        public double getMemoryUsage() {
            return memoryUsage;
        }

        public void setMemoryUsage(double mU) {
            memoryUsage = mU;
        }

    }

    class LoginChecker extends TimerTask {
        private ClientHandler cH;
        private Timer timer;

        public LoginChecker(int per, ClientHandler cH) {
            this.cH = cH;

            period = per;
            timer = new Timer();
            timer.scheduleAtFixedRate(this, 0, period);
        }

        public void run() {
            synchronized (cH.getPlayers()) {
                if (cH.getPlayers().size() &gt; 0) {
                    for (Object o : cH.getPlayers().toArray()) {
                        Player p = (Player) o;
                        try {
                            p.getNetworkIO().getSocket().getInputStream().read();
                        } catch (IOException e) {
                            System.out.println(&quot;Player &quot; + p.getPlayerName() + &quot;: Disconnected.&quot;);
                            cH.removePlayer(p);
                        }
                    }
                }
            }
        }
    }
}
[/code]</description>
    
    <lastBuildDate>Mon, 04 Apr 2011 15:14:07 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Checking if the socket has been closed (EG: Force quitting)</title>
        <dc:creator><![CDATA[@Epic_Steve Epic Steve]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/epic_steve">@Epic_Steve</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="389475">
<div class="title">
<div class="quote-controls"></div>
 Miss Silabsoft:</div>
<blockquote>
<p>your clients ping/pong often should be no reason to do this as an exception would be thrown during a normal send/receive</p>
</blockquote>
</aside>
<p>Ah, I see. That is quite obvious.</p>
<p>So basically, it’s pointless as the exceptions will be thrown anyway.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/3</link>
        <pubDate>Mon, 04 Apr 2011 15:14:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-389475-3</guid>
        <source url="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475.rss">Checking if the socket has been closed (EG: Force quitting)</source>
      </item>
      <item>
        <title>Checking if the socket has been closed (EG: Force quitting)</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>your clients ping/pong often should be no reason to do this as an exception would be thrown during a normal send/receive</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/2</link>
        <pubDate>Mon, 04 Apr 2011 14:53:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-389475-2</guid>
        <source url="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475.rss">Checking if the socket has been closed (EG: Force quitting)</source>
      </item>
      <item>
        <title>Checking if the socket has been closed (EG: Force quitting)</title>
        <dc:creator><![CDATA[@Epic_Steve Epic Steve]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/epic_steve">@Epic_Steve</a> wrote:</p>
          <blockquote>
              <p>Does anyone know of a better way to check if the connection between Server and Client still exists. I’m currently using this;</p>
<pre><code class="lang-auto">        public void run() {
            synchronized (cH.getPlayers()) {
                if (cH.getPlayers().size() &gt; 0) {
                    for (Object o : cH.getPlayers().toArray()) {
                        Player p = (Player) o;
                        try {
                            p.getNetworkIO().getSocket().getInputStream().read();
                        } catch (IOException e) {
                            System.out.println("Player " + p.getPlayerName() + ": Disconnected.");
                            cH.removePlayer(p);
                        }
                    }
                }
            }
        }</code></pre>
<p>Yes, it does work. I’m just wondering if anyone knows of a better way. The code is in a class that extends TimerTask, therefore I can run this code as oftern as I like. Here’s the whole class for anyone that’s intrested;</p>
<pre><code class="lang-auto">package src;

import java.io.IOException;
import java.util.Timer;
import java.util.TimerTask;

/**
 * Created by IntelliJ IDEA.
 * User: Steven
 * Date: 29-Mar-2011
 * Time: 13:42:26
 */
public class SystemTimer {
    public int period;

    public SystemTimer(int p) {
        new Memory(p);
    }

    public SystemTimer(int p, ClientHandler cH) {
        new LoginChecker(p, cH);
    }

    class Memory extends TimerTask {
        private double memoryUsage;
        private Timer memoryTimer;

        public Memory(int p) {
            period = p;
            this.memoryTimer = new Timer();
            this.memoryTimer.scheduleAtFixedRate(this, 0, period);
        }

        public void run() {
            setMemoryUsage(((double) Runtime.getRuntime().freeMemory() / (double) Runtime.getRuntime().maxMemory()) * 100);
            if (getMemoryUsage() &gt; 70) {
                System.gc();
                System.err.println("MEMORY USAGE: HIGHER THEN 70 PERCENT.");
                System.err.println("MEMORY USAGE: GARBAGE COLLECTOR CALLED.");
            }
            System.out.println("MEMORY USAGE: " + Math.round(getMemoryUsage()) + "%");
        }

        public double getMemoryUsage() {
            return memoryUsage;
        }

        public void setMemoryUsage(double mU) {
            memoryUsage = mU;
        }

    }

    class LoginChecker extends TimerTask {
        private ClientHandler cH;
        private Timer timer;

        public LoginChecker(int per, ClientHandler cH) {
            this.cH = cH;

            period = per;
            timer = new Timer();
            timer.scheduleAtFixedRate(this, 0, period);
        }

        public void run() {
            synchronized (cH.getPlayers()) {
                if (cH.getPlayers().size() &gt; 0) {
                    for (Object o : cH.getPlayers().toArray()) {
                        Player p = (Player) o;
                        try {
                            p.getNetworkIO().getSocket().getInputStream().read();
                        } catch (IOException e) {
                            System.out.println("Player " + p.getPlayerName() + ": Disconnected.");
                            cH.removePlayer(p);
                        }
                    }
                }
            }
        }
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475/1</link>
        <pubDate>Mon, 04 Apr 2011 14:41:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-389475-1</guid>
        <source url="https://forum.moparisthebest.com/t/checking-if-the-socket-has-been-closed-eg-force-quitting/389475.rss">Checking if the socket has been closed (EG: Force quitting)</source>
      </item>
  </channel>
</rss>
