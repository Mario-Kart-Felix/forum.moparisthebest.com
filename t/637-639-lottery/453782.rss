<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>637/639 Lottery</title>
    <link>https://forum.moparisthebest.com/t/637-639-lottery/453782</link>
    <description>[b]What your adding:[/b]
A Lottery for Dementhium&#39;s 637/639

Please excuse my lack of grammar and explanations.

[b]The whole Lottery class:[/b]
[code=java]
package org.dementhium.content.minigames;

import java.util.ArrayList;

import org.dementhium.tickable.Tick;
import org.dementhium.model.player.Player;
import org.dementhium.model.World;
import org.dementhium.util.Misc;
import org.dementhium.model.Item;

/**
 * @author Wildking72
 */
public class Lottery extends Tick {
	
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();
	
	/**
	 * Lottery pot total.
	 */
	public static int LOTTERY_TOTAL = 0;
	
	/**
	 * Required amount of money to enter the lottery.
	 */
	private static final int REQUIRED_MONEY = 5000000;
	
	/**
	 * Checks if the player has registered.
	 */
	private boolean registered;
	
	/**
	 * Time until the lottery ends.
	 */
	private int hosting = 10;
	
	public Lottery() {
		super(200);
	}

	@Override
	public void execute() {
		int winner = Misc.random(attendents.size());
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			sendWorldMessage(&quot;[Lottery] No one has entered the lottery!&quot;);
			return;
		}
		if (hosting &lt;= 0) {
			sendWorldMessage(&quot;[Lottery] The lottery has ended!&quot;);
			sendWorldMessage(&quot;[Lottery] The winning lottery player is...&quot;+attendents.get(winner).getUsername()+&quot;!&quot;);
			resetLottery();
		}
		hosting--;
	}
	
	public void addToLottery(Player player) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage(&quot;You don&#39;t have any money.&quot;);
			return;
		}
		if (cashAmount &lt; REQUIRED_MONEY) {
			player.sendMessage(&quot;You don&#39;t have that much.&quot;);
			return;
		}
		player.getInventory().deleteItem(995, REQUIRED_MONEY);
		LOTTERY_TOTAL += REQUIRED_MONEY;
		if (!player.getLottery().isRegistered()) {
			player.getLottery().setIsRegistered(true);
			registerAttendent(player);
		}
		sendWorldMessage(&quot;[Lottery] The current lottery pot is now &quot; + LOTTERY_TOTAL + &quot;.&quot;);
	}
	
	private void resetLottery() {
		for (Player p : attendents) {
			p.getLottery().setIsRegistered(false);
		}
		attendents.clear();
		hosting = 10;
		LOTTERY_TOTAL = 0;
		stop();
	}
	
	public void registerAttendent(Player player) {
		if (isRunning()) {
			attendents.add(player);
		} else {
			attendents.add(player);
			start();
		}
	}
	
	private void sendWorldMessage(String message) {
		for (Player players : World.getWorld().getPlayers()) {
			if (!players.isOnline() || players == null)
				continue;

			players.sendMessage(message);
		}
	}
	
	public boolean isRegistered() {
		return registered;
	}
	
	public void setIsRegistered(boolean bool) {
		this.registered = bool;
	}
	
}
[/code]


[b]The explanation:[/b]

First, I want to start out with this part.
[code=java]
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();[/code]
------------------
The [url=http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html]ArrayList[/url] is basically a collection of data put into a list.
The object inside the arrow parameters &#39;&lt;&gt;&#39; is the element you want the list to be full of, and in this case &#39;Player&#39;.
------------------

Next, we have a couple of [url=http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html]Data Types[/url].
[code=java]
	/**
	 * Lottery pot total.
	 */
	public static int LOTTERY_TOTAL = 0;
	
	/**
	 * Required amount of money to enter the lottery.
	 */
	private static final int REQUIRED_MONEY = 5000000;
	
	/**
	 * Checks if the player has registered.
	 */
	private boolean registered;
	
	/**
	 * Time until the lottery ends.
	 */
	private int hosting = 10;[/code]
------------------
The &#39;LOTTERY_TOTAL&#39; data type (Integer) is [url=http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html]Static[/url], which means it doesn&#39;t have to be [url=http://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html]Instantiated[/url]. The &#39;LOTTERY_TOTAL&#39; is set to 0 because you don&#39;t want the Lottery Pot to have the same amount of cash even when it starts/ends.
The &#39;registered&#39; data type (Boolean) will be used to check if the player has already been added (registered) to the ArrayList &#39;attendents&#39;.
The &#39;REQUIRED_MONEY&#39; data type (Integer) is [url=http://docs.oracle.com/javase/tutorial/java/IandI/final.html]final[/url] because you don&#39;t want it being/to be changed.
The &#39;hosting&#39; data type (Integer) is the amount of attempts the ticks will do before it stops the Lottery.
------------------

Now, the [url=http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html]Methods[/url].
[code=java]
	@Override
	public void execute() {
		int winner = Misc.random(attendents.size());
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			sendWorldMessage(&quot;[Lottery] No one has entered the lottery!&quot;);
			return;
		}
		if (hosting &lt;= 0) {
			sendWorldMessage(&quot;[Lottery] The lottery has ended!&quot;);
			sendWorldMessage(&quot;[Lottery] The winning lottery player is...&quot;+attendents.get(winner).getUsername()+&quot;!&quot;);
			resetLottery();
		}
		hosting--;
	}
	
	public void addToLottery(Player player) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage(&quot;You don&#39;t have any money.&quot;);
			return;
		}
		if (cashAmount &lt; REQUIRED_MONEY) {
			player.sendMessage(&quot;You don&#39;t have that much.&quot;);
			return;
		}
		player.getInventory().deleteItem(995, REQUIRED_MONEY);
		LOTTERY_TOTAL += REQUIRED_MONEY;
		if (!player.getLottery().isRegistered()) {
			player.getLottery().setIsRegistered(true);
			registerAttendent(player);
		}
		sendWorldMessage(&quot;[Lottery] The current lottery pot is now &quot; + LOTTERY_TOTAL + &quot;.&quot;);
	}
	
	private void resetLottery() {
		for (Player p : attendents) {
			p.getLottery().setIsRegistered(false);
		}
		attendents.clear();
		hosting = 10;
		LOTTERY_TOTAL = 0;
		stop();
	}
	
	public void registerAttendent(Player player) {
		if (isRunning()) {
			attendents.add(player);
		} else {
			attendents.add(player);
			start();
		}
	}
	
	private void sendWorldMessage(String message) {
		for (Player players : World.getWorld().getPlayers()) {
			if (!players.isOnline() || players == null)
				continue;

			players.sendMessage(message);
		}
	}
	
	public boolean isRegistered() {
		return registered;
	}
	
	public void setIsRegistered(boolean bool) {
		this.registered = bool;
	}[/code]
------------------
The &#39;execute&#39; method is an [url=http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html]Abstract Method[/url] in Tick.java, which is needed to be overridden if the class is inheriting from a Super Class (Abstract class).
The &#39;registerAttendent&#39; method is used to add an element (Player) onto the ArrayList &#39;attendents&#39;, but will also check if the Lottery is running, and if it isn&#39;t, it will start it.
You will not see the start() or stop() methods because they are inherited from the Tick class, and since we are using &#39;extends&#39; (which means inherit from) for the current class (Lottery), we can inherit any public or abstract methods Tick.java has inside of it.
The &#39;resetLottery&#39; will reset the lottery by stopping the ticks (stop()), resetting the &#39;hosting&#39; ticks and &#39;LOTTERY_TOTAL&#39;, and clearing the ArrayList &#39;attendents&#39; using the clear() method, which clears all collections inside the ArrayList.
The &#39;isRegistered&#39; method returns the &#39;registered&#39; data type (Boolean).
The &#39;setIsRegistered&#39; method is using &#39;this&#39;, which means this current class/object, and sets it equal to the &#39;bool&#39; data type (Boolean).
------------------


[b]What you have to do:[/b]
There aren&#39;t any errors, but you will have to fix certain things to get it to work properly.

[b]What you can help me do:[/b]
Post what could enhance this, or make the design more professional.
Correct my explanations on the Java.



Eh...
[code=java]package org.dementhium.content.minigames;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;

import org.dementhium.tickable.Tick;
import org.dementhium.content.DialogueManager;
import org.dementhium.model.player.Player;
import org.dementhium.model.World;
import org.dementhium.util.Misc;

/**
 * @author Wildking72
 */
public class Lottery extends Tick {
	
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();
	
	public static int LOTTERY_TOTAL = 0;
	
	private int HOSTING_TICKS = 10;
	
	private int amountDeposited = 0;
	
	public static boolean winner = false;
	
	public Lottery() {
		super(200);
	}

	@Override
	public void execute() {
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			World.sendMessage(&quot;[Lottery] No one has entered the lottery!&quot;);
			return;
		}
		HOSTING_TICKS = getHostingTicks() - 1;
		if (getHostingTicks() &lt;= 0) {
			World.sendMessage(&quot;[Lottery] The lottery has ended!&quot;);
			if (!winner.isOnline() || winner == null) {
				World.sendMessage(&quot;[Lottery] The winning lottery player is offline.&quot;);
				return;
			}
			winner = true;
			World.sendMessage(&quot;[Lottery] The winning lottery player is... &quot;+getWinner().getUsername()+&quot;!&quot;);
			World.sendMessage(&quot;[Lottery] &quot;+getWinner().getUsername()+&quot; has won &quot;+Misc.formatNumber(LOTTERY_TOTAL)+&quot; Gold!&quot;);
			return;
		}
		World.sendMessage(&quot;[Lottery] The lottery will end in &quot;+(getHostingTicks() * 2)+&quot; minutes!&quot;);
	}
	
	public void addToLottery(Player player, int amount) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage(&quot;You don&#39;t have any money.&quot;);
			return;
		}
		if (cashAmount &lt; amount) {
			player.sendMessage(&quot;You don&#39;t have that much.&quot;);
			return;
		}
		if (amount &gt; 1000000) {
			player.sendMessage(&quot;You can&#39;t add more than 1M.&quot;);
			return;
		}
		if (amount &lt; 100000) {
			player.sendMessage(&quot;You can&#39;t add less than 100K.&quot;);
			return;
		}
		player.getInventory().deleteItem(995, amount);
		LOTTERY_TOTAL += amount;
		this.amountDeposited += amount;
		if (!player.isRegistered()) {
			player.setIsRegistered(true);
			registerAttendent(player);
		}
		World.sendMessage(&quot;[Lottery] The current lottery pot is now &quot; + Misc.formatNumber(LOTTERY_TOTAL) + &quot; Gold.&quot;);
		DialogueManager.proceedDialogue(player, 9354);
		saveFile(player, amount);
	}
	
	public void withdrawDeposited(Player player) {
		if (player.getLottery().getAmountDeposited() &lt; 1) {
			player.sendMessage(&quot;You don&#39;t have any money deposited.&quot;);
			return;
		}
		if (player.getInventory().getFreeSlots() &lt; 1) {
			player.sendMessage(&quot;You need a free inventory space to withdraw your money.&quot;);
			return;
		}
		player.getInventory().addItem(995, getAmountDeposited());
	}
	
	public void resetLottery() {
		for (Player p : attendents) {
			p.setIsRegistered(false);
		}
		attendents.clear();
		this.HOSTING_TICKS = 10;
		this.amountDeposited = 0;
		LOTTERY_TOTAL = 0;
	}
	
	public Player getWinner() {
		int winner = 0;
		if (attendents.size() == 1)
			winner = 0;
		else {
			winner = Misc.random(0, attendents.size());
		}
		if (winner == 0 &amp;&amp; attendents.get(0) == null) {
			World.sendMessage(&quot;No one has won the lottery! Talk to the gambler to get your gold back!&quot;);
			return null;
		}
		return attendents.get(winner);
	}
	
	public void registerAttendent(Player player) {
		if (attendents.size() &lt; 1) {
			World.sendMessage(&quot;[Lottery] The lottery has started!&quot;);
			this.start();
		}
		attendents.add(player);
	}

	public int getHostingTicks() {
		return HOSTING_TICKS;
	}

	public void setHostingTicks(int ticks) {
		this.HOSTING_TICKS = ticks;
	}

	public int getAmountDeposited() {
		return amountDeposited;
	}

	public void setAmountDeposited(int amount) {
		this.amountDeposited = amount;
	}
	
	private void saveFile(Player player, int amount) {
		try {
			BufferedWriter bf = new BufferedWriter(new FileWriter(&quot;./data/lotterylog.txt&quot;, true));
				bf.write(&quot;[&quot; + DateFormat.getDateTimeInstance().format(new Date())
					+ &quot; &quot; + Calendar.getInstance().getTimeZone().getDisplayName() + &quot;] &quot; 
					+ player.getUsername() + &quot; - Amount Deposited : &quot; + amount);
			bf.newLine();
			bf.flush();
			bf.close();
		} catch (IOException ignored) {
			System.out.println(&quot;Error occured whilst trying to save to lotterylog.txt&quot;);
		}
	}
	
}

[/code]</description>
    
    <lastBuildDate>Sat, 11 Aug 2012 01:30:17 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/637-639-lottery/453782.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>637/639 Lottery</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">What your adding:</span><br>
A Lottery for Dementhium’s 637/639</p>
<p>Please excuse my lack of grammar and explanations.</p>
<p><span class="bbcode-b">The whole Lottery class:</span></p>
<pre><code class="lang-auto">package org.dementhium.content.minigames;

import java.util.ArrayList;

import org.dementhium.tickable.Tick;
import org.dementhium.model.player.Player;
import org.dementhium.model.World;
import org.dementhium.util.Misc;
import org.dementhium.model.Item;

/**
 * @author Wildking72
 */
public class Lottery extends Tick {
	
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();
	
	/**
	 * Lottery pot total.
	 */
	public static int LOTTERY_TOTAL = 0;
	
	/**
	 * Required amount of money to enter the lottery.
	 */
	private static final int REQUIRED_MONEY = 5000000;
	
	/**
	 * Checks if the player has registered.
	 */
	private boolean registered;
	
	/**
	 * Time until the lottery ends.
	 */
	private int hosting = 10;
	
	public Lottery() {
		super(200);
	}

	@Override
	public void execute() {
		int winner = Misc.random(attendents.size());
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			sendWorldMessage("[Lottery] No one has entered the lottery!");
			return;
		}
		if (hosting &lt;= 0) {
			sendWorldMessage("[Lottery] The lottery has ended!");
			sendWorldMessage("[Lottery] The winning lottery player is..."+attendents.get(winner).getUsername()+"!");
			resetLottery();
		}
		hosting--;
	}
	
	public void addToLottery(Player player) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage("You don't have any money.");
			return;
		}
		if (cashAmount &lt; REQUIRED_MONEY) {
			player.sendMessage("You don't have that much.");
			return;
		}
		player.getInventory().deleteItem(995, REQUIRED_MONEY);
		LOTTERY_TOTAL += REQUIRED_MONEY;
		if (!player.getLottery().isRegistered()) {
			player.getLottery().setIsRegistered(true);
			registerAttendent(player);
		}
		sendWorldMessage("[Lottery] The current lottery pot is now " + LOTTERY_TOTAL + ".");
	}
	
	private void resetLottery() {
		for (Player p : attendents) {
			p.getLottery().setIsRegistered(false);
		}
		attendents.clear();
		hosting = 10;
		LOTTERY_TOTAL = 0;
		stop();
	}
	
	public void registerAttendent(Player player) {
		if (isRunning()) {
			attendents.add(player);
		} else {
			attendents.add(player);
			start();
		}
	}
	
	private void sendWorldMessage(String message) {
		for (Player players : World.getWorld().getPlayers()) {
			if (!players.isOnline() || players == null)
				continue;

			players.sendMessage(message);
		}
	}
	
	public boolean isRegistered() {
		return registered;
	}
	
	public void setIsRegistered(boolean bool) {
		this.registered = bool;
	}
	
}</code></pre>
<p><span class="bbcode-b">The explanation:</span></p>
<p>First, I want to start out with this part.</p>
<h2><code>
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();</code></h2>
<h2>The <a href="http://docs.oracle.com/javase/6/docs/api/java/util/ArrayList.html" data-bbcode="true" rel="nofollow noopener">ArrayList</a> is basically a collection of data put into a list.<br>
The object inside the arrow parameters ‘&lt;&gt;’ is the element you want the list to be full of, and in this case ‘Player’.</h2>
<p>Next, we have a couple of <a href="http://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html" data-bbcode="true" rel="nofollow noopener">Data Types</a>.</p>
<p>[code=java]<br>
/**<br>
* Lottery pot total.<br>
*/<br>
public static int LOTTERY_TOTAL = 0;</p>
<pre><code>/**
 * Required amount of money to enter the lottery.
 */
private static final int REQUIRED_MONEY = 5000000;

/**
 * Checks if the player has registered.
 */
private boolean registered;

/**
 * Time until the lottery ends.
 */
private int hosting = 10;[/code]
</code></pre>
<hr>
<h2>The ‘LOTTERY_TOTAL’ data type (Integer) is <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/classvars.html" data-bbcode="true" rel="nofollow noopener">Static</a>, which means it doesn’t have to be <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/objectcreation.html" data-bbcode="true" rel="nofollow noopener">Instantiated</a>. The ‘LOTTERY_TOTAL’ is set to 0 because you don’t want the Lottery Pot to have the same amount of cash even when it starts/ends.<br>
The ‘registered’ data type (Boolean) will be used to check if the player has already been added (registered) to the ArrayList ‘attendents’.<br>
The ‘REQUIRED_MONEY’ data type (Integer) is <a href="http://docs.oracle.com/javase/tutorial/java/IandI/final.html" data-bbcode="true" rel="nofollow noopener">final</a> because you don’t want it being/to be changed.<br>
The ‘hosting’ data type (Integer) is the amount of attempts the ticks will do before it stops the Lottery.</h2>
<p>Now, the <a href="http://docs.oracle.com/javase/tutorial/java/javaOO/methods.html" data-bbcode="true" rel="nofollow noopener">Methods</a>.</p>
<pre><code class="lang-auto">	@Override
	public void execute() {
		int winner = Misc.random(attendents.size());
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			sendWorldMessage("[Lottery] No one has entered the lottery!");
			return;
		}
		if (hosting &lt;= 0) {
			sendWorldMessage("[Lottery] The lottery has ended!");
			sendWorldMessage("[Lottery] The winning lottery player is..."+attendents.get(winner).getUsername()+"!");
			resetLottery();
		}
		hosting--;
	}
	
	public void addToLottery(Player player) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage("You don't have any money.");
			return;
		}
		if (cashAmount &lt; REQUIRED_MONEY) {
			player.sendMessage("You don't have that much.");
			return;
		}
		player.getInventory().deleteItem(995, REQUIRED_MONEY);
		LOTTERY_TOTAL += REQUIRED_MONEY;
		if (!player.getLottery().isRegistered()) {
			player.getLottery().setIsRegistered(true);
			registerAttendent(player);
		}
		sendWorldMessage("[Lottery] The current lottery pot is now " + LOTTERY_TOTAL + ".");
	}
	
	private void resetLottery() {
		for (Player p : attendents) {
			p.getLottery().setIsRegistered(false);
		}
		attendents.clear();
		hosting = 10;
		LOTTERY_TOTAL = 0;
		stop();
	}
	
	public void registerAttendent(Player player) {
		if (isRunning()) {
			attendents.add(player);
		} else {
			attendents.add(player);
			start();
		}
	}
	
	private void sendWorldMessage(String message) {
		for (Player players : World.getWorld().getPlayers()) {
			if (!players.isOnline() || players == null)
				continue;

			players.sendMessage(message);
		}
	}
	
	public boolean isRegistered() {
		return registered;
	}
	
	public void setIsRegistered(boolean bool) {
		this.registered = bool;
	}[/code]
------------------
The 'execute' method is an [url=http://docs.oracle.com/javase/tutorial/java/IandI/abstract.html]Abstract Method[/url] in Tick.java, which is needed to be overridden if the class is inheriting from a Super Class (Abstract class).
The 'registerAttendent' method is used to add an element (Player) onto the ArrayList 'attendents', but will also check if the Lottery is running, and if it isn't, it will start it.
You will not see the start() or stop() methods because they are inherited from the Tick class, and since we are using 'extends' (which means inherit from) for the current class (Lottery), we can inherit any public or abstract methods Tick.java has inside of it.
The 'resetLottery' will reset the lottery by stopping the ticks (stop()), resetting the 'hosting' ticks and 'LOTTERY_TOTAL', and clearing the ArrayList 'attendents' using the clear() method, which clears all collections inside the ArrayList.
The 'isRegistered' method returns the 'registered' data type (Boolean).
The 'setIsRegistered' method is using 'this', which means this current class/object, and sets it equal to the 'bool' data type (Boolean).
------------------


[b]What you have to do:[/b]
There aren't any errors, but you will have to fix certain things to get it to work properly.

[b]What you can help me do:[/b]
Post what could enhance this, or make the design more professional.
Correct my explanations on the Java.



Eh...
[code=java]package org.dementhium.content.minigames;

import java.util.ArrayList;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.text.DateFormat;
import java.util.Calendar;
import java.util.Date;

import org.dementhium.tickable.Tick;
import org.dementhium.content.DialogueManager;
import org.dementhium.model.player.Player;
import org.dementhium.model.World;
import org.dementhium.util.Misc;

/**
 * @author Wildking72
 */
public class Lottery extends Tick {
	
	/**
	 * The players attending the lottery.
	 */
	public static ArrayList&lt;Player&gt; attendents = new ArrayList&lt;Player&gt;();
	
	public static int LOTTERY_TOTAL = 0;
	
	private int HOSTING_TICKS = 10;
	
	private int amountDeposited = 0;
	
	public static boolean winner = false;
	
	public Lottery() {
		super(200);
	}

	@Override
	public void execute() {
		if (World.getWorld().getPlayers().size() &lt; 1) {
			return;
		}
		if (attendents.size() &lt; 1) {
			World.sendMessage("[Lottery] No one has entered the lottery!");
			return;
		}
		HOSTING_TICKS = getHostingTicks() - 1;
		if (getHostingTicks() &lt;= 0) {
			World.sendMessage("[Lottery] The lottery has ended!");
			if (!winner.isOnline() || winner == null) {
				World.sendMessage("[Lottery] The winning lottery player is offline.");
				return;
			}
			winner = true;
			World.sendMessage("[Lottery] The winning lottery player is... "+getWinner().getUsername()+"!");
			World.sendMessage("[Lottery] "+getWinner().getUsername()+" has won "+Misc.formatNumber(LOTTERY_TOTAL)+" Gold!");
			return;
		}
		World.sendMessage("[Lottery] The lottery will end in "+(getHostingTicks() * 2)+" minutes!");
	}
	
	public void addToLottery(Player player, int amount) {
		int cashAmount = player.getInventory().numberOf(995);
		if (!player.getInventory().contains(995)) {
			player.sendMessage("You don't have any money.");
			return;
		}
		if (cashAmount &lt; amount) {
			player.sendMessage("You don't have that much.");
			return;
		}
		if (amount &gt; 1000000) {
			player.sendMessage("You can't add more than 1M.");
			return;
		}
		if (amount &lt; 100000) {
			player.sendMessage("You can't add less than 100K.");
			return;
		}
		player.getInventory().deleteItem(995, amount);
		LOTTERY_TOTAL += amount;
		this.amountDeposited += amount;
		if (!player.isRegistered()) {
			player.setIsRegistered(true);
			registerAttendent(player);
		}
		World.sendMessage("[Lottery] The current lottery pot is now " + Misc.formatNumber(LOTTERY_TOTAL) + " Gold.");
		DialogueManager.proceedDialogue(player, 9354);
		saveFile(player, amount);
	}
	
	public void withdrawDeposited(Player player) {
		if (player.getLottery().getAmountDeposited() &lt; 1) {
			player.sendMessage("You don't have any money deposited.");
			return;
		}
		if (player.getInventory().getFreeSlots() &lt; 1) {
			player.sendMessage("You need a free inventory space to withdraw your money.");
			return;
		}
		player.getInventory().addItem(995, getAmountDeposited());
	}
	
	public void resetLottery() {
		for (Player p : attendents) {
			p.setIsRegistered(false);
		}
		attendents.clear();
		this.HOSTING_TICKS = 10;
		this.amountDeposited = 0;
		LOTTERY_TOTAL = 0;
	}
	
	public Player getWinner() {
		int winner = 0;
		if (attendents.size() == 1)
			winner = 0;
		else {
			winner = Misc.random(0, attendents.size());
		}
		if (winner == 0 &amp;&amp; attendents.get(0) == null) {
			World.sendMessage("No one has won the lottery! Talk to the gambler to get your gold back!");
			return null;
		}
		return attendents.get(winner);
	}
	
	public void registerAttendent(Player player) {
		if (attendents.size() &lt; 1) {
			World.sendMessage("[Lottery] The lottery has started!");
			this.start();
		}
		attendents.add(player);
	}

	public int getHostingTicks() {
		return HOSTING_TICKS;
	}

	public void setHostingTicks(int ticks) {
		this.HOSTING_TICKS = ticks;
	}

	public int getAmountDeposited() {
		return amountDeposited;
	}

	public void setAmountDeposited(int amount) {
		this.amountDeposited = amount;
	}
	
	private void saveFile(Player player, int amount) {
		try {
			BufferedWriter bf = new BufferedWriter(new FileWriter("./data/lotterylog.txt", true));
				bf.write("[" + DateFormat.getDateTimeInstance().format(new Date())
					+ " " + Calendar.getInstance().getTimeZone().getDisplayName() + "] " 
					+ player.getUsername() + " - Amount Deposited : " + amount);
			bf.newLine();
			bf.flush();
			bf.close();
		} catch (IOException ignored) {
			System.out.println("Error occured whilst trying to save to lotterylog.txt");
		}
	}
	
}
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/637-639-lottery/453782/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/637-639-lottery/453782/1</link>
        <pubDate>Sat, 11 Aug 2012 01:30:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-453782-1</guid>
        <source url="https://forum.moparisthebest.com/t/637-639-lottery/453782.rss">637/639 Lottery</source>
      </item>
  </channel>
</rss>
