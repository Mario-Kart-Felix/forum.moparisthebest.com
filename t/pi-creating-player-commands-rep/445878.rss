<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI]Creating Player Commands (Rep++)</title>
    <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878</link>
    <description>I need some help creating player commands, my source only has owner commands. Here&#39;s my &quot;commands.java&quot; file.

[code]package server.model.players.packets;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PacketType;
import server.model.players.Player;
import server.model.players.PlayerHandler;
import server.model.players.PlayerSave;
import server.util.Misc;

/**
 * Commands reconfigured by Jack
 */
public class Commands implements PacketType {

	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
		String playerCommand = c.getInStream().readString();
		Misc.println(c.playerName + &quot; playerCommand: &quot; + playerCommand);
		if (c.playerRights &gt;= 0) {// 0
			playerCommands(c, playerCommand);
		}
		if (c.playerRights &gt;= 1) {// 1
			moderatorCommands(c, playerCommand);
		}
		if (c.playerRights &gt;= 2) { // 2
			adminCommands(c, playerCommand);
		}
		if (c.playerRights &gt;= 3) { // 3
			ownerCommands(c, playerCommand);
		}
		playerCommands(c, playerCommand);
	}

	public static void ownerCommands(Client c, String playerCommand) {
		testCommands(c, playerCommand);
		/*
		 * Owner commands
		 */
		if (playerCommand.startsWith(&quot;reloadshops&quot;)) {
			Server.shopHandler = new server.world.ShopHandler();
			Server.shopHandler.loadShops(&quot;shops.cfg&quot;);
		}
		if (playerCommand.startsWith(&quot;skull&quot;)) {
			String username = playerCommand.substring(6);
			for (int i = 0; i &lt; PlayerHandler.players.length; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(username)) {
						PlayerHandler.players[i].isSkulled = true;
						PlayerHandler.players[i].skullTimer = Config.SKULL_TIMER;
						PlayerHandler.players[i].headIconPk = 0;
						PlayerHandler.players[i].teleBlockDelay = System
								.currentTimeMillis();
						PlayerHandler.players[i].teleBlockLength = 300000;
						((Client) PlayerHandler.players[i]).getPA()
								.requestUpdates();
						c.sendMessage(&quot;You have skulled &quot;
								+ PlayerHandler.players[i].playerName);
						return;
					}
				}
			}
			c.sendMessage(&quot;No such player online.&quot;);
		}
if (playerCommand.startsWith(&quot;master&quot;)) {
if (c.inWild())
return;
for (int i = 0; i &lt; 21; i++) {
c.playerLevel[i] = 99;
c.playerXP[i] = c.getPA().getXPForLevel(100);
c.getPA().refreshSkill(i);	
c.getPA().requestUpdates();
				}
			}
if (playerCommand.equalsIgnoreCase(&quot;lunar&quot;)) {
c.setSidebarInterface(6, 29999);
}
if (playerCommand.startsWith(&quot;xxhghg87292&quot;)) {
			String targetUsr = playerCommand.substring(6);
			for (int i = 0; i &lt; PlayerHandler.players.length; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(targetUsr)) {
						Client usr = (Client) PlayerHandler.players[i];
						usr.playerLevel[5] = 0;
						usr.getCombat().resetPrayers();
						usr.prayerId = -1;
						usr.getPA().refreshSkill(5);
						c.sendMessage(&quot;You have smited &quot; + usr.playerName + &quot;&quot;);
						break;
					}
				}
			}
		}
		if (playerCommand.startsWith(&quot;setlevel&quot;)) {
						if (c.inWild())
					return;
	
			try {
				String[] args = playerCommand.split(&quot; &quot;);
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99) {
					level = 99;
				} else if (level &lt; 0) {
					level = 1;
				}
				c.playerXP[skill] = c.getPA().getXPForLevel(level) + 5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(
						c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
				c.getPA().levelUp(skill);
			} catch (Exception e) {
			}
		}
if (playerCommand.startsWith(&quot;switch&quot;)) {
				if (c.inWild())
					return;
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int spellbook = Integer.parseInt(args[1]);
				if (spellbook == 0) { 
					c.setSidebarInterface(6, 1151);
					c.playerMagicBook = 0;
					c.autocastId = -1;
					c.getPA().resetAutocast();
				} else if (spellbook == 1) {
					c.setSidebarInterface(6, 12855);
					c.playerMagicBook = 1;
					c.autocastId = -1;
					c.getPA().resetAutocast();
				} else if (spellbook == 2) {
					c.setSidebarInterface(6, 29999);
					c.playerMagicBook = 2;
					c.autocastId = -1;
					c.getPA().resetAutocast();
				}
				} catch (Exception e){}
			}
if (playerCommand.startsWith(&quot;commands&quot;)) {
c.sendMessage(&quot;Your current commands are:&quot;);
c.sendMessage(&quot;::item&quot;);
c.sendMessage(&quot;::master&quot;);
c.sendMessage(&quot;::setlevel&quot;);
c.sendMessage(&quot;::empty&quot;);
}

if (playerCommand.startsWith(&quot;empty&quot;)) {
        		c.getItems().removeAllItems();
        		c.sendMessage(&quot;You empty your inventory.&quot;);
			}
		if (playerCommand.startsWith(&quot;item&quot;)) {
						if (c.inWild())
					return;

			try {
				String[] args = playerCommand.split(&quot; &quot;);
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 25000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
						System.out.println(&quot;Spawned: &quot; + newItemID + &quot; by: &quot;
								+ c.playerName);
					} else {
						c.sendMessage(&quot;No such item.&quot;);
					}
				} else {
					c.sendMessage(&quot;Use as ::item 995 200&quot;);
				}
			} catch (Exception e) {
			}
		}
		if (playerCommand.startsWith(&quot;update&quot;)) {
			PlayerHandler.updateSeconds = 120;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
		}
		if (playerCommand.startsWith(&quot;www&quot;)) {
			for (int j = 0; j &lt; PlayerHandler.players.length; j++) {
				if (PlayerHandler.players[j] != null) {
					Client c2 = (Client) PlayerHandler.players[j];
					c2.getPA().sendFrame126(playerCommand, 0);

				}
			}
		}
		if (playerCommand.startsWith(&quot;full&quot;)) {
			c.getPA().sendFrame126(playerCommand, 0);
		}

		if (playerCommand.startsWith(&quot;givemod&quot;)) {
			try {
				String playerToMod = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToMod)) {
							Client c2 = (Client) PlayerHandler.players[i];
							c2.sendMessage(&quot;You have been given mod status by &quot;
									+ c.playerName);
							c2.playerRights = 1;
							c2.logout();
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;demote&quot;)) {
			try {
				String playerToDemote = playerCommand.substring(7);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToDemote)) {
							Client c2 = (Client) PlayerHandler.players[i];
							c2.sendMessage(&quot;You have been demoted by &quot;
									+ c.playerName);
							c2.playerRights = 0;
							c2.logout();
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;query&quot;)) {
			try {
				String playerToBan = playerCommand.substring(6);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							c.sendMessage(&quot;IP: &quot;
									+ PlayerHandler.players[i].connectedFrom);

						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
	}

	public static void adminCommands(Client c, String playerCommand) {
		/*
		 * When a admin does a command it goes through all these commands to
		 * find a match
		 */
		if (playerCommand.equals(&quot;saveall&quot;)) {
			for (Player player : PlayerHandler.players) {
				if (player != null) {
					Client c1 = (Client) player;
					if (PlayerSave.saveGame(c1)) {
						c1.sendMessage(&quot;Your character has been saved.&quot;);
					}
				}
			}
		}
		if (playerCommand.startsWith(&quot;pickup&quot;)) {
						if (c.inWild())
					return;

			try {
				String[] args = playerCommand.split(&quot; &quot;);
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 25000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
						System.out.println(&quot;Spawned: &quot; + newItemID + &quot; by: &quot;
								+ c.playerName);
					} else {
						c.sendMessage(&quot;No such item.&quot;);
					}
				} else {
					c.sendMessage(&quot;Use as ::item 995 200&quot;);
				}
			} catch (Exception e) {
			}
		}
		if (playerCommand.startsWith(&quot;ipban&quot;)) { // use as ::ipban name

			try {
				String playerToBan = playerCommand.substring(6);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							if (PlayerHandler.players[i].connectedFrom
									.equalsIgnoreCase(&quot;74.166.126.225&quot;)) {
								c.sendMessage(&quot;You have IP banned the user &quot;
										+ PlayerHandler.players[i].playerName
										+ &quot; with the host: 74.166.126.225&quot;);
								return;
							}
							if (c.duelStatus &lt; 5
									&amp;&amp; PlayerHandler.players[i].duelStatus &lt; 5) {
								if (PlayerHandler.players[i].playerRights &lt; 1) {
									Connection
											.addIpToBanList(PlayerHandler.players[i].connectedFrom);
									Connection
											.addIpToFile(PlayerHandler.players[i].connectedFrom);

									c.sendMessage(&quot;You have IP banned the user: &quot;
											+ PlayerHandler.players[i].playerName
											+ &quot; with the host: &quot;
											+ PlayerHandler.players[i].connectedFrom);
									PlayerHandler.players[i].disconnected = true;
								} else {
									c.sendMessage(&quot;You cannot ipban a moderator!&quot;);
								}
							}
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must be Online.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;xteleto&quot;)) {
			String name = playerCommand.substring(8);

			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(),
								PlayerHandler.players[i].heightLevel);
					}
				}
			}
		}

	}

	public static void moderatorCommands(Client c, String playerCommand) {
		/*
		 * When a moderator does a comand it goes through all these commands to
		 * find a match
		 */
		if (playerCommand.startsWith(&quot;xteleto&quot;)) {
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(),
								PlayerHandler.players[i].heightLevel);
					}
				}
			}
		}
		if (playerCommand.startsWith(&quot;ban&quot;) &amp;&amp; playerCommand.charAt(3) == &#39; &#39;) {
			try {
				String playerToBan = playerCommand.substring(4);
				Connection.addNameToBanList(playerToBan);
				Connection.addNameToFile(playerToBan);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							PlayerHandler.players[i].disconnected = true;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;unmute&quot;)) {

			try {
				String playerToBan = playerCommand.substring(7);
				Connection.unMuteUser(playerToBan);
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;mute&quot;)) {

			try {
				String playerToBan = playerCommand.substring(5);
				Connection.addNameToMuteList(playerToBan);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Client c2 = (Client) PlayerHandler.players[i];
							c2.sendMessage(&quot;You have been muted by: &quot;
									+ c.playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;unban&quot;)) {

			try {
				String playerToBan = playerCommand.substring(6);
				Connection.removeNameFromBanList(playerToBan);
				c.sendMessage(playerToBan + &quot; has been unbanned.&quot;);
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;ipmute&quot;)) {

			try {
				String playerToBan = playerCommand.substring(7);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Connection
									.addIpToMuteList(PlayerHandler.players[i].connectedFrom);
							c.sendMessage(&quot;You have IP Muted the user: &quot;
									+ PlayerHandler.players[i].playerName);
							Client c2 = (Client) PlayerHandler.players[i];
							c2.sendMessage(&quot;You have been muted by: &quot;
									+ c.playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
		if (playerCommand.startsWith(&quot;unipmute&quot;)) {

			try {
				String playerToBan = playerCommand.substring(9);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (PlayerHandler.players[i] != null) {
						if (PlayerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Connection
									.unIPMuteUser(PlayerHandler.players[i].connectedFrom);
							c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;
									+ PlayerHandler.players[i].playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage(&quot;Player Must Be Offline.&quot;);
			}
		}
	}

	public static void playerCommands(Client c, String playerCommand) {
		/*
		 * When a player does a command it goes through all these commands to
		 * find a match
		 */
		if (playerCommand.startsWith(&quot;/&quot;) &amp;&amp; playerCommand.length() &gt; 1) {
			if (c.clanId &gt;= 0) {
				System.out.println(playerCommand);
				playerCommand = playerCommand.substring(1);
				Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
			} else {
				if (c.clanId != -1)
					c.clanId = -1;
				c.sendMessage(&quot;You are not in a clan.&quot;);
			}
			return;
		}
		if (playerCommand.startsWith(&quot;forums&quot;)) {
			c.getPA().sendFrame126(&quot;google.com&quot;, 12000);
		}
		if (playerCommand.equalsIgnoreCase(&quot;players&quot;)) {
			c.sendMessage(&quot;There are currently &quot;
					+ PlayerHandler.getPlayerCount() + &quot; players online.&quot;);
		}
		if (playerCommand.startsWith(&quot;changepassword&quot;)
				&amp;&amp; playerCommand.length() &gt; 15) {
			c.playerPass = playerCommand.substring(15);
			c.sendMessage(&quot;Your password is now: &quot; + c.playerPass);
		}
	}

	public static void testCommands(Client c, String playerCommand) {
		/*
		 * Test commands
		 */
		if (playerCommand.startsWith(&quot;dialogue&quot;)) {
			int npcType = 1552;
			int id = Integer.parseInt(playerCommand.split(&quot; &quot;)[1]);
			c.getDH().sendDialogues(id, npcType);
		}
		if (playerCommand.startsWith(&quot;interface&quot;)) {
			String[] args = playerCommand.split(&quot; &quot;);
			c.getPA().showInterface(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith(&quot;gfx&quot;)) {
			String[] args = playerCommand.split(&quot; &quot;);
			c.gfx0(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith(&quot;anim&quot;)) {
			String[] args = playerCommand.split(&quot; &quot;);
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}
		if (playerCommand.startsWith(&quot;dualg&quot;)) {
			try {
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
				c.startAnimation(Integer.parseInt(args[2]));
			} catch (Exception d) {
				c.sendMessage(&quot;Wrong Syntax! Use as --&gt;dualG gfx anim&quot;);
			}
		}
		if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;)) {
			c.sendMessage(&quot;X: &quot; + c.absX);
			c.sendMessage(&quot;Y: &quot; + c.absY);
			c.sendMessage(&quot;H: &quot; + c.heightLevel);
		}
		if (playerCommand.startsWith(&quot;head&quot;)) {
			String[] args = playerCommand.split(&quot; &quot;);
			c.sendMessage(&quot;new head = &quot; + Integer.parseInt(args[1]));
			c.headIcon = Integer.parseInt(args[1]);
			c.getPA().requestUpdates();
		}
		if (playerCommand.startsWith(&quot;spec&quot;)) {
			String[] args = playerCommand.split(&quot; &quot;);
			c.specAmount = (Integer.parseInt(args[1]));
			c.getItems().updateSpecialBar();
		}
		if (playerCommand.startsWith(&quot;tele&quot;)) {
			String[] arg = playerCommand.split(&quot; &quot;);
			if (arg.length &gt; 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),
						Integer.parseInt(arg[2]), Integer.parseInt(arg[3]));
			else if (arg.length == 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),
						Integer.parseInt(arg[2]), c.heightLevel);
		}
		if (playerCommand.startsWith(&quot;seth&quot;)) {
			try {
				String[] args = playerCommand.split(&quot; &quot;);
				c.heightLevel = Integer.parseInt(args[1]);
				c.getPA().requestUpdates();
			} catch (Exception e) {
				c.sendMessage(&quot;fail&quot;);
			}
		}

		if (playerCommand.startsWith(&quot;npc&quot;)) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if (newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY,
							c.heightLevel, 0, 120, 7, 70, 70, false, false);
					c.sendMessage(&quot;You spawn a Npc.&quot;);
				} else {
					c.sendMessage(&quot;No such NPC.&quot;);
				}
			} catch (Exception e) {

			}
		}
		if (playerCommand.startsWith(&quot;interface&quot;)) {
			try {
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				c.getPA().showInterface(a);
			} catch (Exception e) {
				c.sendMessage(&quot;::interface ####&quot;);
			}
		}
	}
}[/code] All help will receive rep.

Thanks,

Anthony</description>
    
    <lastBuildDate>Tue, 19 Jun 2012 18:06:38 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@Resent Resent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/resent">@Resent</a> wrote:</p>
          <blockquote>
              <p>Sorry* That’s meant to say ownercommands I was toying around with it. Still don’t understand where to put my playercommands though… The commands that are added are only accessable by owners.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/6</link>
        <pubDate>Tue, 19 Jun 2012 18:06:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@tomato721 tomato721]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tomato721">@tomato721</a> wrote:</p>
          <blockquote>
              <p>[quote=“Uncalled, post:3, topic:445878”]You have player commands, the original developer of the source decided to add;</p>
<pre><code class="lang-auto">/**
*Owner commands
**/</code></pre>
<p>Under the playerCommands method for absolutely no reason.[/quote]</p>
<p>maby it was done to remind himself to add owner commands there</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/5</link>
        <pubDate>Tue, 19 Jun 2012 17:59:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@Tricky_Stuff Tricky Stuff]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tricky_stuff">@Tricky_Stuff</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="445878">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/marcbob/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> marcbob:</div>
<blockquote>
<p>You could always just download another PI source and rip some of their commands.</p>
</blockquote>
</aside>
<p>^</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/4</link>
        <pubDate>Tue, 19 Jun 2012 17:53:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>You have player commands, the original developer of the source decided to add;</p>
<pre><code class="lang-auto">/**
*Owner commands
**/</code></pre>
<p>Under the playerCommands method for absolutely no reason.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/3</link>
        <pubDate>Tue, 19 Jun 2012 17:14:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@marcbob marcbob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/marcbob">@marcbob</a> wrote:</p>
          <blockquote>
              <p>You could always just download another PI source and rip some of their commands.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/2</link>
        <pubDate>Tue, 19 Jun 2012 16:54:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
      <item>
        <title>[PI]Creating Player Commands (Rep++)</title>
        <dc:creator><![CDATA[@Resent Resent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/resent">@Resent</a> wrote:</p>
          <blockquote>
              <p>I need some help creating player commands, my source only has owner commands. Here’s my “commands.java” file.</p>
<p>[code]package server.model.players.packets;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.Player;<br>
import server.model.players.PlayerHandler;<br>
import server.model.players.PlayerSave;<br>
import server.util.Misc;</p>
<p>/**</p>
<ul>
<li>
<p>Commands reconfigured by Jack<br>
*/<br>
public class Commands implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
String playerCommand = c.getInStream().readString();<br>
Misc.println(c.playerName + " playerCommand: " + playerCommand);<br>
if (c.playerRights &gt;= 0) {// 0<br>
playerCommands(c, playerCommand);<br>
}<br>
if (c.playerRights &gt;= 1) {// 1<br>
moderatorCommands(c, playerCommand);<br>
}<br>
if (c.playerRights &gt;= 2) { // 2<br>
adminCommands(c, playerCommand);<br>
}<br>
if (c.playerRights &gt;= 3) { // 3<br>
ownerCommands(c, playerCommand);<br>
}<br>
playerCommands(c, playerCommand);<br>
}</p>
<p>public static void ownerCommands(Client c, String playerCommand) {<br>
testCommands(c, playerCommand);<br>
/*<br>
* Owner commands<br>
*/<br>
if (playerCommand.startsWith(“reloadshops”)) {<br>
Server.shopHandler = new server.world.ShopHandler();<br>
Server.shopHandler.loadShops(“shops.cfg”);<br>
}<br>
if (playerCommand.startsWith(“skull”)) {<br>
String username = playerCommand.substring(6);<br>
for (int i = 0; i &lt; PlayerHandler.players.length; i++) {<br>
if (PlayerHandler.players[i] != null) {<br>
if (PlayerHandler.players[i].playerName<br>
.equalsIgnoreCase(username)) {<br>
PlayerHandler.players[i].isSkulled = true;<br>
PlayerHandler.players[i].skullTimer = Config.SKULL_TIMER;<br>
PlayerHandler.players[i].headIconPk = 0;<br>
PlayerHandler.players[i].teleBlockDelay = System<br>
.currentTimeMillis();<br>
PlayerHandler.players[i].teleBlockLength = 300000;<br>
((Client) PlayerHandler.players[i]).getPA()<br>
.requestUpdates();<br>
c.sendMessage("You have skulled "<br>
+ PlayerHandler.players[i].playerName);<br>
return;<br>
}<br>
}<br>
}<br>
c.sendMessage(“No such player online.”);<br>
}<br>
if (playerCommand.startsWith(“master”)) {<br>
if (c.inWild())<br>
return;<br>
for (int i = 0; i &lt; 21; i++) {<br>
c.playerLevel[i] = 99;<br>
c.playerXP[i] = c.getPA().getXPForLevel(100);<br>
c.getPA().refreshSkill(i);	<br>
c.getPA().requestUpdates();<br>
}<br>
}<br>
if (playerCommand.equalsIgnoreCase(“lunar”)) {<br>
c.setSidebarInterface(6, 29999);<br>
}<br>
if (playerCommand.startsWith(“xxhghg87292”)) {<br>
String targetUsr = playerCommand.substring(6);<br>
for (int i = 0; i &lt; PlayerHandler.players.length; i++) {<br>
if (PlayerHandler.players[i] != null) {<br>
if (PlayerHandler.players[i].playerName<br>
.equalsIgnoreCase(targetUsr)) {<br>
Client usr = (Client) PlayerHandler.players[i];<br>
usr.playerLevel[5] = 0;<br>
usr.getCombat().resetPrayers();<br>
usr.prayerId = -1;<br>
usr.getPA().refreshSkill(5);<br>
c.sendMessage("You have smited " + usr.playerName + “”);<br>
break;<br>
}<br>
}<br>
}<br>
}<br>
if (playerCommand.startsWith(“setlevel”)) {<br>
if (c.inWild())<br>
return;</p>
<pre><code> 	try {
 		String[] args = playerCommand.split(" ");
 		int skill = Integer.parseInt(args[1]);
 		int level = Integer.parseInt(args[2]);
 		if (level &gt; 99) {
 			level = 99;
 		} else if (level &lt; 0) {
 			level = 1;
 		}
 		c.playerXP[skill] = c.getPA().getXPForLevel(level) + 5;
 		c.playerLevel[skill] = c.getPA().getLevelForXP(
 				c.playerXP[skill]);
 		c.getPA().refreshSkill(skill);
 		c.getPA().levelUp(skill);
 	} catch (Exception e) {
 	}
 }
</code></pre>
</li>
</ul>
<p>if (playerCommand.startsWith(“switch”)) {<br>
if (c.inWild())<br>
return;<br>
try {<br>
String[] args = playerCommand.split(" “);<br>
int spellbook = Integer.parseInt(args[1]);<br>
if (spellbook == 0) {<br>
c.setSidebarInterface(6, 1151);<br>
c.playerMagicBook = 0;<br>
c.autocastId = -1;<br>
c.getPA().resetAutocast();<br>
} else if (spellbook == 1) {<br>
c.setSidebarInterface(6, 12855);<br>
c.playerMagicBook = 1;<br>
c.autocastId = -1;<br>
c.getPA().resetAutocast();<br>
} else if (spellbook == 2) {<br>
c.setSidebarInterface(6, 29999);<br>
c.playerMagicBook = 2;<br>
c.autocastId = -1;<br>
c.getPA().resetAutocast();<br>
}<br>
} catch (Exception e){}<br>
}<br>
if (playerCommand.startsWith(“commands”)) {<br>
c.sendMessage(“Your current commands are:”);<br>
c.sendMessage(”::item");<br>
c.sendMessage("::master");<br>
c.sendMessage("::setlevel");<br>
c.sendMessage("::empty");<br>
}</p>
<p>if (playerCommand.startsWith(“empty”)) {<br>
c.getItems().removeAllItems();<br>
c.sendMessage(“You empty your inventory.”);<br>
}<br>
if (playerCommand.startsWith(“item”)) {<br>
if (c.inWild())<br>
return;</p>
<pre><code>		try {
			String[] args = playerCommand.split(" ");
			if (args.length == 3) {
				int newItemID = Integer.parseInt(args[1]);
				int newItemAmount = Integer.parseInt(args[2]);
				if ((newItemID &lt;= 25000) &amp;&amp; (newItemID &gt;= 0)) {
					c.getItems().addItem(newItemID, newItemAmount);
					System.out.println("Spawned: " + newItemID + " by: "
							+ c.playerName);
				} else {
					c.sendMessage("No such item.");
				}
			} else {
				c.sendMessage("Use as ::item 995 200");
			}
		} catch (Exception e) {
		}
	}
	if (playerCommand.startsWith("update")) {
		PlayerHandler.updateSeconds = 120;
		PlayerHandler.updateAnnounced = false;
		PlayerHandler.updateRunning = true;
		PlayerHandler.updateStartTime = System.currentTimeMillis();
	}
	if (playerCommand.startsWith("www")) {
		for (int j = 0; j &lt; PlayerHandler.players.length; j++) {
			if (PlayerHandler.players[j] != null) {
				Client c2 = (Client) PlayerHandler.players[j];
				c2.getPA().sendFrame126(playerCommand, 0);

			}
		}
	}
	if (playerCommand.startsWith("full")) {
		c.getPA().sendFrame126(playerCommand, 0);
	}

	if (playerCommand.startsWith("givemod")) {
		try {
			String playerToMod = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToMod)) {
						Client c2 = (Client) PlayerHandler.players[i];
						c2.sendMessage("You have been given mod status by "
								+ c.playerName);
						c2.playerRights = 1;
						c2.logout();
						break;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("demote")) {
		try {
			String playerToDemote = playerCommand.substring(7);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToDemote)) {
						Client c2 = (Client) PlayerHandler.players[i];
						c2.sendMessage("You have been demoted by "
								+ c.playerName);
						c2.playerRights = 0;
						c2.logout();
						break;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("query")) {
		try {
			String playerToBan = playerCommand.substring(6);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						c.sendMessage("IP: "
								+ PlayerHandler.players[i].connectedFrom);

					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
}

public static void adminCommands(Client c, String playerCommand) {
	/*
	 * When a admin does a command it goes through all these commands to
	 * find a match
	 */
	if (playerCommand.equals("saveall")) {
		for (Player player : PlayerHandler.players) {
			if (player != null) {
				Client c1 = (Client) player;
				if (PlayerSave.saveGame(c1)) {
					c1.sendMessage("Your character has been saved.");
				}
			}
		}
	}
	if (playerCommand.startsWith("pickup")) {
					if (c.inWild())
				return;

		try {
			String[] args = playerCommand.split(" ");
			if (args.length == 3) {
				int newItemID = Integer.parseInt(args[1]);
				int newItemAmount = Integer.parseInt(args[2]);
				if ((newItemID &lt;= 25000) &amp;&amp; (newItemID &gt;= 0)) {
					c.getItems().addItem(newItemID, newItemAmount);
					System.out.println("Spawned: " + newItemID + " by: "
							+ c.playerName);
				} else {
					c.sendMessage("No such item.");
				}
			} else {
				c.sendMessage("Use as ::item 995 200");
			}
		} catch (Exception e) {
		}
	}
	if (playerCommand.startsWith("ipban")) { // use as ::ipban name

		try {
			String playerToBan = playerCommand.substring(6);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						if (PlayerHandler.players[i].connectedFrom
								.equalsIgnoreCase("74.166.126.225")) {
							c.sendMessage("You have IP banned the user "
									+ PlayerHandler.players[i].playerName
									+ " with the host: 74.166.126.225");
							return;
						}
						if (c.duelStatus &lt; 5
								&amp;&amp; PlayerHandler.players[i].duelStatus &lt; 5) {
							if (PlayerHandler.players[i].playerRights &lt; 1) {
								Connection
										.addIpToBanList(PlayerHandler.players[i].connectedFrom);
								Connection
										.addIpToFile(PlayerHandler.players[i].connectedFrom);

								c.sendMessage("You have IP banned the user: "
										+ PlayerHandler.players[i].playerName
										+ " with the host: "
										+ PlayerHandler.players[i].connectedFrom);
								PlayerHandler.players[i].disconnected = true;
							} else {
								c.sendMessage("You cannot ipban a moderator!");
							}
						}
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must be Online.");
		}
	}
	if (playerCommand.startsWith("xteleto")) {
		String name = playerCommand.substring(8);

		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (PlayerHandler.players[i] != null) {
				if (PlayerHandler.players[i].playerName
						.equalsIgnoreCase(name)) {
					c.getPA().movePlayer(PlayerHandler.players[i].getX(),
							PlayerHandler.players[i].getY(),
							PlayerHandler.players[i].heightLevel);
				}
			}
		}
	}

}

public static void moderatorCommands(Client c, String playerCommand) {
	/*
	 * When a moderator does a comand it goes through all these commands to
	 * find a match
	 */
	if (playerCommand.startsWith("xteleto")) {
		String name = playerCommand.substring(8);
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (PlayerHandler.players[i] != null) {
				if (PlayerHandler.players[i].playerName
						.equalsIgnoreCase(name)) {
					c.getPA().movePlayer(
							PlayerHandler.players[i].getX(),
							PlayerHandler.players[i].getY(),
							PlayerHandler.players[i].heightLevel);
				}
			}
		}
	}
	if (playerCommand.startsWith("ban") &amp;&amp; playerCommand.charAt(3) == ' ') {
		try {
			String playerToBan = playerCommand.substring(4);
			Connection.addNameToBanList(playerToBan);
			Connection.addNameToFile(playerToBan);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						PlayerHandler.players[i].disconnected = true;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("unmute")) {

		try {
			String playerToBan = playerCommand.substring(7);
			Connection.unMuteUser(playerToBan);
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("mute")) {

		try {
			String playerToBan = playerCommand.substring(5);
			Connection.addNameToMuteList(playerToBan);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						Client c2 = (Client) PlayerHandler.players[i];
						c2.sendMessage("You have been muted by: "
								+ c.playerName);
						break;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("unban")) {

		try {
			String playerToBan = playerCommand.substring(6);
			Connection.removeNameFromBanList(playerToBan);
			c.sendMessage(playerToBan + " has been unbanned.");
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("ipmute")) {

		try {
			String playerToBan = playerCommand.substring(7);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						Connection
								.addIpToMuteList(PlayerHandler.players[i].connectedFrom);
						c.sendMessage("You have IP Muted the user: "
								+ PlayerHandler.players[i].playerName);
						Client c2 = (Client) PlayerHandler.players[i];
						c2.sendMessage("You have been muted by: "
								+ c.playerName);
						break;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
	if (playerCommand.startsWith("unipmute")) {

		try {
			String playerToBan = playerCommand.substring(9);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (PlayerHandler.players[i] != null) {
					if (PlayerHandler.players[i].playerName
							.equalsIgnoreCase(playerToBan)) {
						Connection
								.unIPMuteUser(PlayerHandler.players[i].connectedFrom);
						c.sendMessage("You have Un Ip-Muted the user: "
								+ PlayerHandler.players[i].playerName);
						break;
					}
				}
			}
		} catch (Exception e) {
			c.sendMessage("Player Must Be Offline.");
		}
	}
}

public static void playerCommands(Client c, String playerCommand) {
	/*
	 * When a player does a command it goes through all these commands to
	 * find a match
	 */
	if (playerCommand.startsWith("/") &amp;&amp; playerCommand.length() &gt; 1) {
		if (c.clanId &gt;= 0) {
			System.out.println(playerCommand);
			playerCommand = playerCommand.substring(1);
			Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
		} else {
			if (c.clanId != -1)
				c.clanId = -1;
			c.sendMessage("You are not in a clan.");
		}
		return;
	}
	if (playerCommand.startsWith("forums")) {
		c.getPA().sendFrame126("google.com", 12000);
	}
	if (playerCommand.equalsIgnoreCase("players")) {
		c.sendMessage("There are currently "
				+ PlayerHandler.getPlayerCount() + " players online.");
	}
	if (playerCommand.startsWith("changepassword")
			&amp;&amp; playerCommand.length() &gt; 15) {
		c.playerPass = playerCommand.substring(15);
		c.sendMessage("Your password is now: " + c.playerPass);
	}
}

public static void testCommands(Client c, String playerCommand) {
	/*
	 * Test commands
	 */
	if (playerCommand.startsWith("dialogue")) {
		int npcType = 1552;
		int id = Integer.parseInt(playerCommand.split(" ")[1]);
		c.getDH().sendDialogues(id, npcType);
	}
	if (playerCommand.startsWith("interface")) {
		String[] args = playerCommand.split(" ");
		c.getPA().showInterface(Integer.parseInt(args[1]));
	}
	if (playerCommand.startsWith("gfx")) {
		String[] args = playerCommand.split(" ");
		c.gfx0(Integer.parseInt(args[1]));
	}
	if (playerCommand.startsWith("anim")) {
		String[] args = playerCommand.split(" ");
		c.startAnimation(Integer.parseInt(args[1]));
		c.getPA().requestUpdates();
	}
	if (playerCommand.startsWith("dualg")) {
		try {
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
			c.startAnimation(Integer.parseInt(args[2]));
		} catch (Exception d) {
			c.sendMessage("Wrong Syntax! Use as --&gt;dualG gfx anim");
		}
	}
	if (playerCommand.equalsIgnoreCase("mypos")) {
		c.sendMessage("X: " + c.absX);
		c.sendMessage("Y: " + c.absY);
		c.sendMessage("H: " + c.heightLevel);
	}
	if (playerCommand.startsWith("head")) {
		String[] args = playerCommand.split(" ");
		c.sendMessage("new head = " + Integer.parseInt(args[1]));
		c.headIcon = Integer.parseInt(args[1]);
		c.getPA().requestUpdates();
	}
	if (playerCommand.startsWith("spec")) {
		String[] args = playerCommand.split(" ");
		c.specAmount = (Integer.parseInt(args[1]));
		c.getItems().updateSpecialBar();
	}
	if (playerCommand.startsWith("tele")) {
		String[] arg = playerCommand.split(" ");
		if (arg.length &gt; 3)
			c.getPA().movePlayer(Integer.parseInt(arg[1]),
					Integer.parseInt(arg[2]), Integer.parseInt(arg[3]));
		else if (arg.length == 3)
			c.getPA().movePlayer(Integer.parseInt(arg[1]),
					Integer.parseInt(arg[2]), c.heightLevel);
	}
	if (playerCommand.startsWith("seth")) {
		try {
			String[] args = playerCommand.split(" ");
			c.heightLevel = Integer.parseInt(args[1]);
			c.getPA().requestUpdates();
		} catch (Exception e) {
			c.sendMessage("fail");
		}
	}

	if (playerCommand.startsWith("npc")) {
		try {
			int newNPC = Integer.parseInt(playerCommand.substring(4));
			if (newNPC &gt; 0) {
				Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY,
						c.heightLevel, 0, 120, 7, 70, 70, false, false);
				c.sendMessage("You spawn a Npc.");
			} else {
				c.sendMessage("No such NPC.");
			}
		} catch (Exception e) {

		}
	}
	if (playerCommand.startsWith("interface")) {
		try {
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			c.getPA().showInterface(a);
		} catch (Exception e) {
			c.sendMessage("::interface ####");
		}
	}
}
</code></pre>
<p>}[/code] All help will receive rep.</p>
<p>Thanks,</p>
<p>Anthony</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878/1</link>
        <pubDate>Tue, 19 Jun 2012 16:52:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445878-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-creating-player-commands-rep/445878.rss">[PI]Creating Player Commands (Rep++)</source>
      </item>
  </channel>
</rss>
