<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cryption Class [Winterlove]</title>
    <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889</link>
    <description>Rename the class and class objects to &#39;Cryption&#39;, and rename &#39;nextInt()&#39; to &#39;getNextKey()&#39;. This is better because this one is legal, less buggy, and isn&#39;t ripped from a deob...

[code=java]/**
 * &lt;h3&gt;ISAAC: a fast cryptographic pseudo-random number generator&lt;/h3&gt;
 * 
 * ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.
 * ISAAC has been designed to be cryptographically secure and is inspired by RC4.
 * Cycles are guaranteed to be at least 2&lt;sup&gt;40&lt;/sup&gt; values long, and they are 2&lt;sup&gt;8295&lt;/sup&gt;
 * values long on average.
 * The results are uniformly distributed, unbiased, and unpredictable unless you know the seed.
 *  
 * This is the original implementation by Bob Jenkins with some minor changes.
 * 
 * &lt;b&gt;Changelog:&lt;/b&gt;
 * &lt;ul&gt;
 * &lt;li&gt;050325: Added &lt;code&gt;supplementSeed(int[] seed )&lt;/code&gt; method; made all variables private&lt;/li&gt;
 * &lt;li&gt;050320: Use &lt;code&gt;System.arraycopy()&lt;/code&gt; in &lt;code&gt;ISAACAlgorithm(int[] seed)&lt;/code&gt;&lt;/li&gt;
 * &lt;li&gt;980224: Translate to Java&lt;/li&gt;
 * &lt;li&gt;970719: Use context, not global variables, for internal state&lt;/li&gt;
 * &lt;li&gt;960327: Creation (addition of randinit, really)&lt;/li&gt;
 * &lt;/ul&gt;
 * 
 * @author  Bob Jenkins
 * @version 050325
 */
public class ISAACCipher {
    private static final int SIZEL = 8; // Log of size of rsl[] and mem[]
    private static final int SIZE = 1 &lt;&lt; SIZEL; // Size of rsl[] and mem[]
    private static final int MASK = (SIZE - 1) &lt;&lt; 2; // For pseudorandom lookup
    private int count; // Count through the results in rsl[]
    private int[] rsl; // The results given to the user
    private int[] mem; // The internal state
    private int a; // Accumulator
    private int b; // The last result
    private int c; // Counter, guarantees cycle is at least 2^40
     
    /**
     * This constructor creates and initializes an new instance without using a seed.
     * Equivalent to &lt;code&gt;randinit(ctx,FALSE)&lt;/code&gt; in the C implementation.
     */
    public ISAACCipher() {
        mem = new int[SIZE];
        rsl = new int[SIZE];
         
        init(false);
    }
     
    /**
     * This constructor creates and initializes an new instance using a user-provided seed.
     * Equivalent to &lt;code&gt;randinit(ctx, TRUE)&lt;/code&gt; after putting seed in &lt;code&gt;randctx&lt;/code&gt;
     * in the C implementation.
     * 
     * @param seed The seed.
     */
    public ISAACCipher(int[] seed) {
        mem = new int[SIZE];
        rsl = new int[SIZE];
         
        // This is slow and throws an ArrayIndexOutOfBoundsException if seed.length &gt; rsl.length ...
        /*for (int i = 0; i &lt; seed.length; ++i)
            rsl[i] = seed[i]; */
        // ... this is faster and safe:
        System.arraycopy(seed, 0, rsl, 0, (seed.length &lt;= rsl.length) ? seed.length : rsl.length);
         
        init(true);
    }
     
    /**
     * Generate 256 results.
     * This is a small (not fast) implementation.
     */
    private final void isaac() {
        int i, x, y;
 
        b += ++c;
        for (i = 0; i &lt; SIZE; ++i) {
            x = mem[i];
            switch (i &amp; 3) {
            case 0:
                a ^= a &lt;&lt; 13;
                break;
            case 1:
                a ^= a &gt;&gt;&gt; 6;
                break;
            case 2:
                a ^= a &lt;&lt; 2;
                break;
            case 3:
                a ^= a &gt;&gt;&gt; 16;
                break;
            }
            a += mem[(i + SIZE / 2) &amp; (SIZE - 1)];
            mem[i] = y = mem[((x) &amp; MASK) &gt;&gt; 2] + a + b;
            rsl[i] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;
        }
    }
     
    /**
     * Initialize or reinitialize this instance.
     * 
     * @param flag If &lt;code&gt;true&lt;/code&gt; then use the seed (which the constructor placed in
     *             &lt;code&gt;rsl[]&lt;/code&gt;) for initialization.
     */
    private final void init(boolean flag) {
        int i;
        int a, b, c, d, e, f, g, h;
        a = b = c = d = e = f = g = h = 0x9e3779b9; // The golden ratio
         
        for (i = 0; i &lt; 4; ++i) {
            a ^= b &lt;&lt; 11;
            d += a;
            b += c;
            b ^= c &gt;&gt;&gt; 2;
            e += b;
            c += d;
            c ^= d &lt;&lt; 8;
            f += c;
            d += e;
            d ^= e &gt;&gt;&gt; 16;
            g += d;
            e += f;
            e ^= f &lt;&lt; 10;
            h += e;
            f += g;
            f ^= g &gt;&gt;&gt; 4;
            a += f;
            g += h;
            g ^= h &lt;&lt; 8;
            b += g;
            h += a;
            h ^= a &gt;&gt;&gt; 9;
            c += h;
            a += b;
        }
         
        for (i = 0; i &lt; SIZE; i += 8) { // Fill in mem[] with messy stuff
            if (flag) {
                a += rsl[i];
                b += rsl[i + 1];
                c += rsl[i + 2];
                d += rsl[i + 3];
                e += rsl[i + 4];
                f += rsl[i + 5];
                g += rsl[i + 6];
                h += rsl[i + 7];
            }
            a ^= b &lt;&lt; 11;
            d += a;
            b += c;
            b ^= c &gt;&gt;&gt; 2;
            e += b;
            c += d;
            c ^= d &lt;&lt; 8;
            f += c;
            d += e;
            d ^= e &gt;&gt;&gt; 16;
            g += d;
            e += f;
            e ^= f &lt;&lt; 10;
            h += e;
            f += g;
            f ^= g &gt;&gt;&gt; 4;
            a += f;
            g += h;
            g ^= h &lt;&lt; 8;
            b += g;
            h += a;
            h ^= a &gt;&gt;&gt; 9;
            c += h;
            a += b;
            mem[i] = a;
            mem[i + 1] = b;
            mem[i + 2] = c;
            mem[i + 3] = d;
            mem[i + 4] = e;
            mem[i + 5] = f;
            mem[i + 6] = g;
            mem[i + 7] = h;
        }
         
        if (flag) { // Second pass: makes all of seed affect all of mem[]
            for (i = 0; i &lt; SIZE; i += 8) {
                a += mem[i];
                b += mem[i + 1];
                c += mem[i + 2];
                d += mem[i + 3];
                e += mem[i + 4];
                f += mem[i + 5];
                g += mem[i + 6];
                h += mem[i + 7];
                a ^= b &lt;&lt; 11;
                d += a;
                b += c;
                b ^= c &gt;&gt;&gt; 2;
                e += b;
                c += d;
                c ^= d &lt;&lt; 8;
                f += c;
                d += e;
                d ^= e &gt;&gt;&gt; 16;
                g += d;
                e += f;
                e ^= f &lt;&lt; 10;
                h += e;
                f += g;
                f ^= g &gt;&gt;&gt; 4;
                a += f;
                g += h;
                g ^= h &lt;&lt; 8;
                b += g;
                h += a;
                h ^= a &gt;&gt;&gt; 9;
                c += h;
                a += b;
                mem[i] = a;
                mem[i + 1] = b;
                mem[i + 2] = c;
                mem[i + 3] = d;
                mem[i + 4] = e;
                mem[i + 5] = f;
                mem[i + 6] = g;
                mem[i + 7] = h;
            }
        }
         
        isaac ();
        count = SIZE;
    }
     
    /**
     * Get a random integer value.
     */
    public final int getNextKey() {
        if (0 == count--) {
            isaac();
            count = SIZE - 1;
        }
         
        return (rsl[count]);
    }
     
    /**
     * Reseeds this random object.
     * The given seed supplements (using bitwise xor), rather than replaces, the existing seed.
     * 
     * @param seed An integer array containing the seed.
     */
    public final void supplementSeed(int[] seed) {
        for (int i = 0; i &lt; seed.length; i++)
            mem[i % mem.length] ^= seed[i];
    }
}[/code]

[b]I take no credit for this, just trying to help.[/b]</description>
    
    <lastBuildDate>Fri, 26 Oct 2012 01:34:00 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>It’s a random number generator, actually a pseudorandom number generator which is a process that appears to be random but is not. Pseudorandom sequences typically exhibit statistical randomness while being generated casually. Used as a security feature within the client.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/7</link>
        <pubDate>Fri, 26 Oct 2012 01:34:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-7</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>i dont understand this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/6</link>
        <pubDate>Thu, 25 Oct 2012 23:12:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-6</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="464889">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/asshole_rule/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> asshole_rule:</div>
<blockquote>
<p>how confusing</p>
</blockquote>
</aside>
<p>bitwise operators are kind of confusing. at least they are to me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/5</link>
        <pubDate>Tue, 23 Oct 2012 01:41:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-5</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>how confusing</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/4</link>
        <pubDate>Mon, 22 Oct 2012 21:23:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-4</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>even better version:</p>
<p>[code=java]<br>
package net.burtleburtle.bob.rand;</p>
<p>/**</p>
<ul>
<li>
<p>
</p>
</li>
<li>
<p>An implementation of the &lt;a</p>
</li>
<li>
<p>href=“http://www.burtleburtle.net/bob/rand/isaacafa.html”&gt;ISAAC</p>
</li>
<li>
<p>psuedorandom number generator.</p>
</li>
<li>

</li>
<li>
</li>
<li>
<pre>
</pre>
</li>
<li>
<hr>
</li>
<li>
<p>Rand.java: By Bob Jenkins.  My random number generator, ISAAC.</p>
</li>
<li>
<p>rand.init() – initialize</p>
</li>
<li>
<p>rand.val()  – get a random value</p>
</li>
<li>
<p>MODIFIED:</p>
</li>
<li>
<p>960327: Creation (addition of randinit, really)</p>
</li>
<li>
<p>970719: use context, not global variables, for internal state</p>
</li>
<li>
<p>980224: Translate to Java</p>
</li>
<li>
<hr>
</li>
<li>

</li>
<li>
<p>
</p>
</li>
<li>
<p>This class has been changed to be more conformant to Java and javadoc</p>
</li>
<li>
<p>conventions.</p>
</li>
<li>

</li>
<li>
</li>
<li>
<p>@author Bob Jenkins<br>
*/<br>
public final class Rand {</p>
<p>/**</p>
<ul>
<li>The golden ratio.<br>
*/<br>
private static final int GOLDEN_RATIO = 0x9e3779b9;</li>
</ul>
<p>/**</p>
<ul>
<li>The log of the size of the result and memory arrays.<br>
*/<br>
private static final int SIZEL = 8;</li>
</ul>
<p>/**</p>
<ul>
<li>The size of the result and memory arrays.<br>
*/<br>
private static final int SIZE = 1 &lt;&lt; SIZEL;</li>
</ul>
<p>/**</p>
<ul>
<li>A mask for pseudorandom lookup.<br>
*/<br>
private static int MASK = (SIZE - 1) &lt;&lt; 2;</li>
</ul>
<p>/**</p>
<ul>
<li>The count through the results in the results array.<br>
*/<br>
private int count;</li>
</ul>
<p>/**</p>
<ul>
<li>The results given to the user.<br>
*/<br>
private final int[] rsl;</li>
</ul>
<p>/**</p>
<ul>
<li>The internal state.<br>
*/<br>
private final int[] mem;</li>
</ul>
<p>/**</p>
<ul>
<li>The accumulator.<br>
*/<br>
private int a;</li>
</ul>
<p>/**</p>
<ul>
<li>The last result.<br>
*/<br>
private int b;</li>
</ul>
<p>/**</p>
<ul>
<li>The counter.<br>
*/<br>
private int c;</li>
</ul>
<p>/**</p>
<ul>
<li>Creates the random number generator without an initial seed.<br>
*/<br>
public Rand() {<br>
mem = new int[SIZE];<br>
rsl = new int[SIZE];<br>
init(false);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates the random number generator with the specified seed.</li>
<li>
</li>
<li>@param seed The seed.<br>
*/<br>
public Rand(final int[] seed) {<br>
mem = new int[SIZE];<br>
rsl = new int[SIZE];<br>
for (int i = 0; i &lt; seed.length; ++i) {<br>
rsl[i] = seed[i];<br>
}<br>
init(true);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Generates 256 results.<br>
*/<br>
private void isaac() {<br>
int i, j, x, y;</li>
</ul>
<p>b += ++c;<br>
for (i = 0, j = SIZE / 2; i &lt; (SIZE / 2)<img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> {<br>
x = mem[i];<br>
a ^= a &lt;&lt; 13;<br>
a += mem[j++];<br>
mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;<br>
rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;</p>
<pre><code> x = mem[i];
 a ^= a &gt;&gt;&gt; 6;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;

 x = mem[i];
 a ^= a &lt;&lt; 2;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;

 x = mem[i];
 a ^= a &gt;&gt;&gt; 16;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;
</code></pre>
<p>}</p>
<p>for (j = 0; j &lt; (SIZE / 2)<img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> {<br>
x = mem[i];<br>
a ^= a &lt;&lt; 13;<br>
a += mem[j++];<br>
mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;<br>
rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;</p>
<pre><code> x = mem[i];
 a ^= a &gt;&gt;&gt; 6;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;

 x = mem[i];
 a ^= a &lt;&lt; 2;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;

 x = mem[i];
 a ^= a &gt;&gt;&gt; 16;
 a += mem[j++];
 mem[i] = y = mem[(x &amp; MASK) &gt;&gt; 2] + a + b;
 rsl[i++] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;
</code></pre>
<p>}<br>
}</p>
<p>/**</p>
<ul>
<li>Initialises this random number generator.</li>
<li>
</li>
<li>@param flag Set to {@code true} if a seed was passed to the constructor.<br>
*/<br>
private void init(final boolean flag) {<br>
int i;<br>
int a, b, c, d, e, f, g, h;<br>
a = b = c = d = e = f = g = h = GOLDEN_RATIO;<br>
for (i = 0; i &lt; 4; ++i) {<br>
a ^= b &lt;&lt; 11;<br>
d += a;<br>
b += c;<br>
b ^= c &gt;&gt;&gt; 2;<br>
e += b;<br>
c += d;<br>
c ^= d &lt;&lt; 8;<br>
f += c;<br>
d += e;<br>
d ^= e &gt;&gt;&gt; 16;<br>
g += d;<br>
e += f;<br>
e ^= f &lt;&lt; 10;<br>
h += e;<br>
f += g;<br>
f ^= g &gt;&gt;&gt; 4;<br>
a += f;<br>
g += h;<br>
g ^= h &lt;&lt; 8;<br>
b += g;<br>
h += a;<br>
h ^= a &gt;&gt;&gt; 9;<br>
c += h;<br>
a += b;<br>
}<br>
for (i = 0; i &lt; SIZE; i += 8) {<br>
if (flag) {<br>
a += rsl[i];<br>
b += rsl[i + 1];<br>
c += rsl[i + 2];<br>
d += rsl[i + 3];<br>
e += rsl[i + 4];<br>
f += rsl[i + 5];<br>
g += rsl[i + 6];<br>
h += rsl[i + 7];<br>
}<br>
a ^= b &lt;&lt; 11;<br>
d += a;<br>
b += c;<br>
b ^= c &gt;&gt;&gt; 2;<br>
e += b;<br>
c += d;<br>
c ^= d &lt;&lt; 8;<br>
f += c;<br>
d += e;<br>
d ^= e &gt;&gt;&gt; 16;<br>
g += d;<br>
e += f;<br>
e ^= f &lt;&lt; 10;<br>
h += e;<br>
f += g;<br>
f ^= g &gt;&gt;&gt; 4;<br>
a += f;<br>
g += h;<br>
g ^= h &lt;&lt; 8;<br>
b += g;<br>
h += a;<br>
h ^= a &gt;&gt;&gt; 9;<br>
c += h;<br>
a += b;<br>
mem[i] = a;<br>
mem[i + 1] = b;<br>
mem[i + 2] = c;<br>
mem[i + 3] = d;<br>
mem[i + 4] = e;<br>
mem[i + 5] = f;<br>
mem[i + 6] = g;<br>
mem[i + 7] = h;<br>
}<br>
if (flag) {<br>
for (i = 0; i &lt; SIZE; i += 8) {<br>
a += mem[i];<br>
b += mem[i + 1];<br>
c += mem[i + 2];<br>
d += mem[i + 3];<br>
e += mem[i + 4];<br>
f += mem[i + 5];<br>
g += mem[i + 6];<br>
h += mem[i + 7];<br>
a ^= b &lt;&lt; 11;<br>
d += a;<br>
b += c;<br>
b ^= c &gt;&gt;&gt; 2;<br>
e += b;<br>
c += d;<br>
c ^= d &lt;&lt; 8;<br>
f += c;<br>
d += e;<br>
d ^= e &gt;&gt;&gt; 16;<br>
g += d;<br>
e += f;<br>
e ^= f &lt;&lt; 10;<br>
h += e;<br>
f += g;<br>
f ^= g &gt;&gt;&gt; 4;<br>
a += f;<br>
g += h;<br>
g ^= h &lt;&lt; 8;<br>
b += g;<br>
h += a;<br>
h ^= a &gt;&gt;&gt; 9;<br>
c += h;<br>
a += b;<br>
mem[i] = a;<br>
mem[i + 1] = b;<br>
mem[i + 2] = c;<br>
mem[i + 3] = d;<br>
mem[i + 4] = e;<br>
mem[i + 5] = f;<br>
mem[i + 6] = g;<br>
mem[i + 7] = h;<br>
}<br>
}<br>
isaac();<br>
count = SIZE;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the next random value.</li>
<li>
</li>
<li>@return The next random value.<br>
*/<br>
public int nextInt() {<br>
if (0 == count–) {<br>
isaac();<br>
count = SIZE - 1;<br>
}<br>
return rsl[count];<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/3</link>
        <pubDate>Mon, 22 Oct 2012 20:15:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-3</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>Thanks will use</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/2</link>
        <pubDate>Mon, 22 Oct 2012 19:44:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-2</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
      <item>
        <title>Cryption Class [Winterlove]</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>Rename the class and class objects to ‘Cryption’, and rename ‘nextInt()’ to ‘getNextKey()’. This is better because this one is legal, less buggy, and isn’t ripped from a deob…</p>
<p>[code=java]/**</p>
<ul>
<li>
<h3>ISAAC: a fast cryptographic pseudo-random number generator</h3>
</li>
<li>
</li>
<li>
<p>ISAAC (Indirection, Shift, Accumulate, Add, and Count) generates 32-bit random numbers.</p>
</li>
<li>
<p>ISAAC has been designed to be cryptographically secure and is inspired by RC4.</p>
</li>
<li>
<p>Cycles are guaranteed to be at least 2<sup>40</sup> values long, and they are 2<sup>8295</sup></p>
</li>
<li>
<p>values long on average.</p>
</li>
<li>
<p>The results are uniformly distributed, unbiased, and unpredictable unless you know the seed.</p>
</li>
<li>
</li>
<li>
<p>This is the original implementation by Bob Jenkins with some minor changes.</p>
</li>
<li>
</li>
<li>
<p><b>Changelog:</b></p>
</li>
<li>
<ul>
</ul>
</li>
<li>
</li>
<li>050325: Added <code>supplementSeed(int[] seed )</code> method; made all variables private</li>

<li>
</li>
<li>050320: Use <code>System.arraycopy()</code> in <code>ISAACAlgorithm(int[] seed)</code>
</li>

<li>
</li>
<li>980224: Translate to Java</li>

<li>
</li>
<li>970719: Use context, not global variables, for internal state</li>

<li>
</li>
<li>960327: Creation (addition of randinit, really)</li>

<li>
</li>
</ul>

<li>
</li><li>
<p><span class="mention">@author</span>  Bob Jenkins</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 050325<br>
*/<br>
public class ISAACCipher {<br>
private static final int SIZEL = 8; // Log of size of rsl[] and mem[]<br>
private static final int SIZE = 1 &lt;&lt; SIZEL; // Size of rsl[] and mem[]<br>
private static final int MASK = (SIZE - 1) &lt;&lt; 2; // For pseudorandom lookup<br>
private int count; // Count through the results in rsl[]<br>
private int[] rsl; // The results given to the user<br>
private int[] mem; // The internal state<br>
private int a; // Accumulator<br>
private int b; // The last result<br>
private int c; // Counter, guarantees cycle is at least 2^40</p>
<p>/**</p>
<ul>
<li>
<p>This constructor creates and initializes an new instance without using a seed.</p>
</li>
<li>
<p>Equivalent to <code>randinit(ctx,FALSE)</code> in the C implementation.<br>
*/<br>
public ISAACCipher() {<br>
mem = new int[SIZE];<br>
rsl = new int[SIZE];</p>
<p>init(false);<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>This constructor creates and initializes an new instance using a user-provided seed.</p>
</li>
<li>
<p>Equivalent to <code>randinit(ctx, TRUE)</code> after putting seed in <code>randctx</code></p>
</li>
<li>
<p>in the C implementation.</p>
</li>
<li>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> seed The seed.<br>
*/<br>
public ISAACCipher(int[] seed) {<br>
mem = new int[SIZE];<br>
rsl = new int[SIZE];</p>
<p>// This is slow and throws an ArrayIndexOutOfBoundsException if seed.length &gt; rsl.length …<br>
/*for (int i = 0; i &lt; seed.length; ++i)<br>
rsl[i] = seed[i]; */<br>
// … this is faster and safe:<br>
System.arraycopy(seed, 0, rsl, 0, (seed.length &lt;= rsl.length) ? seed.length : rsl.length);</p>
<p>init(true);<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Generate 256 results.</p>
</li>
<li>
<p>This is a small (not fast) implementation.<br>
*/<br>
private final void isaac() {<br>
int i, x, y;</p>
<p>b += ++c;<br>
for (i = 0; i &lt; SIZE; ++i) {<br>
x = mem[i];<br>
switch (i &amp; 3) {<br>
case 0:<br>
a ^= a &lt;&lt; 13;<br>
break;<br>
case 1:<br>
a ^= a &gt;&gt;&gt; 6;<br>
break;<br>
case 2:<br>
a ^= a &lt;&lt; 2;<br>
break;<br>
case 3:<br>
a ^= a &gt;&gt;&gt; 16;<br>
break;<br>
}<br>
a += mem[(i + SIZE / 2) &amp; (SIZE - 1)];<br>
mem[i] = y = mem[((x) &amp; MASK) &gt;&gt; 2] + a + b;<br>
rsl[i] = b = mem[((y &gt;&gt; SIZEL) &amp; MASK) &gt;&gt; 2] + x;<br>
}<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Initialize or reinitialize this instance.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> flag If <code>true</code> then use the seed (which the constructor placed in</li>
<li>
<pre><code>        &lt;code&gt;rsl[]&lt;/code&gt;) for initialization.
</code></pre>
</li>
</ul>
<p>*/<br>
private final void init(boolean flag) {<br>
int i;<br>
int a, b, c, d, e, f, g, h;<br>
a = b = c = d = e = f = g = h = 0x9e3779b9; // The golden ratio</p>
<pre><code> for (i = 0; i &lt; 4; ++i) {
     a ^= b &lt;&lt; 11;
     d += a;
     b += c;
     b ^= c &gt;&gt;&gt; 2;
     e += b;
     c += d;
     c ^= d &lt;&lt; 8;
     f += c;
     d += e;
     d ^= e &gt;&gt;&gt; 16;
     g += d;
     e += f;
     e ^= f &lt;&lt; 10;
     h += e;
     f += g;
     f ^= g &gt;&gt;&gt; 4;
     a += f;
     g += h;
     g ^= h &lt;&lt; 8;
     b += g;
     h += a;
     h ^= a &gt;&gt;&gt; 9;
     c += h;
     a += b;
 }
  
 for (i = 0; i &lt; SIZE; i += 8) { // Fill in mem[] with messy stuff
     if (flag) {
         a += rsl[i];
         b += rsl[i + 1];
         c += rsl[i + 2];
         d += rsl[i + 3];
         e += rsl[i + 4];
         f += rsl[i + 5];
         g += rsl[i + 6];
         h += rsl[i + 7];
     }
     a ^= b &lt;&lt; 11;
     d += a;
     b += c;
     b ^= c &gt;&gt;&gt; 2;
     e += b;
     c += d;
     c ^= d &lt;&lt; 8;
     f += c;
     d += e;
     d ^= e &gt;&gt;&gt; 16;
     g += d;
     e += f;
     e ^= f &lt;&lt; 10;
     h += e;
     f += g;
     f ^= g &gt;&gt;&gt; 4;
     a += f;
     g += h;
     g ^= h &lt;&lt; 8;
     b += g;
     h += a;
     h ^= a &gt;&gt;&gt; 9;
     c += h;
     a += b;
     mem[i] = a;
     mem[i + 1] = b;
     mem[i + 2] = c;
     mem[i + 3] = d;
     mem[i + 4] = e;
     mem[i + 5] = f;
     mem[i + 6] = g;
     mem[i + 7] = h;
 }
  
 if (flag) { // Second pass: makes all of seed affect all of mem[]
     for (i = 0; i &lt; SIZE; i += 8) {
         a += mem[i];
         b += mem[i + 1];
         c += mem[i + 2];
         d += mem[i + 3];
         e += mem[i + 4];
         f += mem[i + 5];
         g += mem[i + 6];
         h += mem[i + 7];
         a ^= b &lt;&lt; 11;
         d += a;
         b += c;
         b ^= c &gt;&gt;&gt; 2;
         e += b;
         c += d;
         c ^= d &lt;&lt; 8;
         f += c;
         d += e;
         d ^= e &gt;&gt;&gt; 16;
         g += d;
         e += f;
         e ^= f &lt;&lt; 10;
         h += e;
         f += g;
         f ^= g &gt;&gt;&gt; 4;
         a += f;
         g += h;
         g ^= h &lt;&lt; 8;
         b += g;
         h += a;
         h ^= a &gt;&gt;&gt; 9;
         c += h;
         a += b;
         mem[i] = a;
         mem[i + 1] = b;
         mem[i + 2] = c;
         mem[i + 3] = d;
         mem[i + 4] = e;
         mem[i + 5] = f;
         mem[i + 6] = g;
         mem[i + 7] = h;
     }
 }
  
 isaac ();
 count = SIZE;
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>
<p>Get a random integer value.<br>
*/<br>
public final int getNextKey() {<br>
if (0 == count–) {<br>
isaac();<br>
count = SIZE - 1;<br>
}</p>
<p>return (rsl[count]);<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Reseeds this random object.</li>
<li>The given seed supplements (using bitwise xor), rather than replaces, the existing seed.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> seed An integer array containing the seed.<br>
*/<br>
public final void supplementSeed(int[] seed) {<br>
for (int i = 0; i &lt; seed.length; i++)<br>
mem[i % mem.length] ^= seed[i];<br>
}<br>
}[/code]</li>
</ul>
</li>

<p><span class="bbcode-b">I take no credit for this, just trying to help.</span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryption-class-winterlove/464889/1</link>
        <pubDate>Sun, 21 Oct 2012 22:06:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464889-1</guid>
        <source url="https://forum.moparisthebest.com/t/cryption-class-winterlove/464889.rss">Cryption Class [Winterlove]</source>
      </item>
  </channel>
</rss>
