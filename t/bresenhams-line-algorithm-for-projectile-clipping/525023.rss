<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
    <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023</link>
    <description>I wrote this months ago, the algorithm works 100% but I&#39;m not sure about the clipping part. You&#39;ll need your own clipping system. This is as far as I got, it doesn&#39;t work with all objects and I don&#39;t know why.

http://en.wikipedia.org/wiki/Bresenham&#39;s_line_algorithm

[code]
    public static boolean isPathClear(Position a, Position b) {
        return isPathClear(a.getX(), a.getY(), a.getZ(), b.getX(), b.getY());
    }

    public static boolean isPathClear(final int x, final int y, int z, final int x2, final int y2) {
        int deltaX = x2 - x;
        int deltaY = y2 - y;

        double err = 0;
        double deltaErr = Math.abs((double) deltaY / (deltaX == 0 ? deltaY : deltaX));

        int prevX = x;
        int prevY = y;
        int x3 = x;
        int y3 = y;

        boolean incrementX = x &lt; x2;
        boolean incrementY = y &lt; y2;

        while (true) {
            err += deltaErr;

            if (incrementX) {
                x3++;
            } else {
                x3--;
            }

            if (err &gt;= 0.5) {
                if (incrementY) {
                    y3++;
                } else {
                    y3--;
                }
                err--;
            }
            
            if (!canShootOver(x3, y3, z, prevX, prevY)) {
                return false;
            }

            prevX = x3;
            prevY = y3;

            if (incrementX) {
                if (incrementY) {
                    if (x3 &gt;= x2 &amp;&amp; y3 &gt;= y2) {
                        return true;
                    }
                } else {
                    if (x3 &gt;= x2 &amp;&amp; y3 &lt;= y2) {
                        return true;
                    }
                }
            } else {
                if (incrementY) {
                    if (x3 &lt;= x2 &amp;&amp; y3 &gt;= y2) {
                        return true;
                    }
                } else {
                    if (x3 &lt;= x2 &amp;&amp; y3 &lt;= y2) {
                        return true;
                    }
                }
            }
        }
    }

    private static boolean canShootOver(int x, int y, int z, int prevX, int prevY) {
        int dir = -1;
        int dir2 = -1;

        for (int i = 0; i &lt; DIR.length; i++) {
            if (x + DIR[i][0] == prevX &amp;&amp; y + DIR[i][1] == prevY) {
                dir = i;
            }

            if (prevX + DIR[i][0] == x &amp;&amp; prevY + DIR[i][1] == y) {
                dir2 = i;
            }
        }

        if (dir == -1 || dir2 == -1) {
            return false;
        }

        if (Region.getRegion(x, y).canMove(x, y, z, dir) &amp;&amp; Region.getRegion(prevX, prevY).canMove(prevX, prevY, z, dir2)) {
            return true;
        } else {
            return (Region.getStaticClip(x, y, z) &amp; 0x20000) == 0;
        }
    }
    private static final int[][] DIR = {{-1, 1}, {0, 1}, {1, 1}, {-1, 0},
        {1, 0}, {-1, -1}, {0, -1}, {1, -1}
    };
[/code]

Enjoy.</description>
    
    <lastBuildDate>Mon, 15 Jul 2013 22:41:50 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>Awesome release man, is this to be implemented with the Region class that was leaked, or do you have a different Region class?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/5</link>
        <pubDate>Mon, 15 Jul 2013 22:41:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525023-5</guid>
        <source url="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss">Bresenham&#39;s line algorithm for Projectile Clipping</source>
      </item>
      <item>
        <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
        <dc:creator><![CDATA[@Mikey_Sasse Mikey Sasse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mikey_sasse">@Mikey_Sasse</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="525023">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sinisoul/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sinisoul:</div>
<blockquote>
<p>This is fantastic, well done.</p>
</blockquote>
</aside>
<p>Thank you, it means a lot from you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/4</link>
        <pubDate>Mon, 15 Jul 2013 20:57:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525023-4</guid>
        <source url="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss">Bresenham&#39;s line algorithm for Projectile Clipping</source>
      </item>
      <item>
        <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>This is fantastic, well done.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/3</link>
        <pubDate>Mon, 15 Jul 2013 11:35:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525023-3</guid>
        <source url="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss">Bresenham&#39;s line algorithm for Projectile Clipping</source>
      </item>
      <item>
        <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>Can you plz explain the algorithm.</p>
<p>Thank you for the contribution, but this is a snippet without posting that algorithm.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/2</link>
        <pubDate>Mon, 15 Jul 2013 06:23:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525023-2</guid>
        <source url="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss">Bresenham&#39;s line algorithm for Projectile Clipping</source>
      </item>
      <item>
        <title>Bresenham&#39;s line algorithm for Projectile Clipping</title>
        <dc:creator><![CDATA[@Mikey_Sasse Mikey Sasse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mikey_sasse">@Mikey_Sasse</a> wrote:</p>
          <blockquote>
              <p>I wrote this months ago, the algorithm works 100% but I’m not sure about the clipping part. You’ll need your own clipping system. This is as far as I got, it doesn’t work with all objects and I don’t know why.</p>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Bresenham&amp;#39;s_line_algorithm" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:300/162;"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/a/ab/Bresenham.svg/300px-Bresenham.svg.png" class="thumbnail"></div>

<h3><a href="https://en.wikipedia.org/wiki/Bresenham&amp;#39;s_line_algorithm" target="_blank" rel="nofollow noopener">Bresenham's line algorithm</a></h3>

<p>Bresenham's line algorithm is an algorithm that determines the points of an n-dimensional raster that should be selected in order to form a close approximation to a straight line between two points. It is commonly used to draw line primitives in a bitmap image (e.g. on a computer screen), as it uses only integer addition, subtraction and bit shifting, all of which are very cheap operations in standard computer architectures. It is an incremental error algorithm. It is one of the earliest algorith...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<pre><code class="lang-auto">    public static boolean isPathClear(Position a, Position b) {
        return isPathClear(a.getX(), a.getY(), a.getZ(), b.getX(), b.getY());
    }

    public static boolean isPathClear(final int x, final int y, int z, final int x2, final int y2) {
        int deltaX = x2 - x;
        int deltaY = y2 - y;

        double err = 0;
        double deltaErr = Math.abs((double) deltaY / (deltaX == 0 ? deltaY : deltaX));

        int prevX = x;
        int prevY = y;
        int x3 = x;
        int y3 = y;

        boolean incrementX = x &lt; x2;
        boolean incrementY = y &lt; y2;

        while (true) {
            err += deltaErr;

            if (incrementX) {
                x3++;
            } else {
                x3--;
            }

            if (err &gt;= 0.5) {
                if (incrementY) {
                    y3++;
                } else {
                    y3--;
                }
                err--;
            }
            
            if (!canShootOver(x3, y3, z, prevX, prevY)) {
                return false;
            }

            prevX = x3;
            prevY = y3;

            if (incrementX) {
                if (incrementY) {
                    if (x3 &gt;= x2 &amp;&amp; y3 &gt;= y2) {
                        return true;
                    }
                } else {
                    if (x3 &gt;= x2 &amp;&amp; y3 &lt;= y2) {
                        return true;
                    }
                }
            } else {
                if (incrementY) {
                    if (x3 &lt;= x2 &amp;&amp; y3 &gt;= y2) {
                        return true;
                    }
                } else {
                    if (x3 &lt;= x2 &amp;&amp; y3 &lt;= y2) {
                        return true;
                    }
                }
            }
        }
    }

    private static boolean canShootOver(int x, int y, int z, int prevX, int prevY) {
        int dir = -1;
        int dir2 = -1;

        for (int i = 0; i &lt; DIR.length; i++) {
            if (x + DIR[i][0] == prevX &amp;&amp; y + DIR[i][1] == prevY) {
                dir = i;
            }

            if (prevX + DIR[i][0] == x &amp;&amp; prevY + DIR[i][1] == y) {
                dir2 = i;
            }
        }

        if (dir == -1 || dir2 == -1) {
            return false;
        }

        if (Region.getRegion(x, y).canMove(x, y, z, dir) &amp;&amp; Region.getRegion(prevX, prevY).canMove(prevX, prevY, z, dir2)) {
            return true;
        } else {
            return (Region.getStaticClip(x, y, z) &amp; 0x20000) == 0;
        }
    }
    private static final int[][] DIR = {{-1, 1}, {0, 1}, {1, 1}, {-1, 0},
        {1, 0}, {-1, -1}, {0, -1}, {1, -1}
    };</code></pre>
<p>Enjoy.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023/1</link>
        <pubDate>Mon, 15 Jul 2013 05:34:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525023-1</guid>
        <source url="https://forum.moparisthebest.com/t/bresenhams-line-algorithm-for-projectile-clipping/525023.rss">Bresenham&#39;s line algorithm for Projectile Clipping</source>
      </item>
  </channel>
</rss>
