<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
    <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843</link>
    <description>*I know that I am not the only person having this issue, if you are too, please bump so we can all get this resolved*
I recently downloaded the newest(?) deathlypvpz source and I have been having problems with getting the cache to autodownload. I have been fiddling with this for days, googling and youtubing for hours, all to no avail. I have never had a problem getting a cache to autodownload before, but this one is strange. I am now desperate. Any insight at all would be much appreciated. Heres what I did:
1.) Zipped my cache file: RevXCache.zip
2.) Uploaded that to dropbox
3.) Changed the link in cachedownloader.java (couldn&#39;t find any links in client.java)
When I load the client, it gets about 1/3 way done then says &#39;Requesting title screen...&quot; then fails and keeps retrying. However, nothing downloads to my C:/ drive. When I manually put the cache into my C drive, it loads right up. Here are my files:
CacheDownloader.java
[code=java]import java.io.*;
import java.net.*;
import java.util.zip.*;
import java.util.Enumeration;
import sign.signlink;

public class CacheDownloader {

	public client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 1;
	public String cacheLink = &quot;https://www.dropbox.com/s/aeqy94nfgna6j2d/RevXCache.zip&quot;;
	public String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	public void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}

	public void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	public String getCacheDir() {
		return signlink.findcachedir();
	}

	public String getCacheLink() {
		return cacheLink;
	}

	public int getCacheVersion() {
		return VERSION;
	}
	
	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;);
		if(!location.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			if(!version.exists()) {
				//delete(getCacheDir());
				downloadFile(getCacheLink(), getArchivedName());
				unZip();
				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteDownloadedZipFile(getArchivedName());
			} else {
				return null;
			}
		}
		} catch(Exception e) {
		}
		return null;
	}
	
	public void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
			conn = url.openConnection();
			in = conn.getInputStream(); 
			byte[] data = new byte[BUFFER]; 
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
            int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
			}
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	public String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
		}
		return &quot;&quot;;
	}
	
	public void deleteDownloadedZipFile(String fileName) {
		File f = new File(getCacheDir() + fileName);
		if (!f.exists())
			throw new IllegalArgumentException(&quot;Delete: no such file or directory: &quot; + fileName);
		if (!f.canWrite())
			throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + fileName);
		if (f.isDirectory()) {
			String[] files = f.list();
		if (files.length &gt; 0)
			throw new IllegalArgumentException(&quot;Delete: directory not empty: &quot; + fileName);
		}
		boolean success = f.delete();
		if (!success)
			throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
	}
	
	public static boolean delete( String path ) {
		if (path == null || path.trim().length() == 0) 
		return false;
		return delete(new File(path));
	}

	public static boolean delete( File fileOrDirectory ) {
		if (fileOrDirectory == null) return false;
		if (!fileOrDirectory.exists()) return false;
		if (fileOrDirectory.isDirectory()) {
			for (File childFile : fileOrDirectory.listFiles()) {
				delete(childFile);
			}
		}
		return fileOrDirectory.delete();
	}

	public void unZip() {
		try {
    		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;
			while((e=zin.getNextEntry()) != null) {
               	if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               	} else {
				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
					unzip(zin, getCacheDir() + e.getName());
				}
			}
			zin.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void unzip(ZipInputStream zin, String s) throws IOException {
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len = 0;
		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/code]

My signlink.java:
[code=java]package sign;

import java.applet.Applet;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintStream;
import java.io.RandomAccessFile;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;

public final class signlink
  implements Runnable
{
  public static final int clientversion = 317;
  public static int uid;
  public static int storeid = 32;
  public static RandomAccessFile cache_dat = null;
  public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
  public static boolean sunjava;
  public static Applet mainapp = null;
  private static boolean active;
  private static int threadliveid;
  private static InetAddress socketip;
  private static int socketreq;
  private static Socket socket = null;
  private static int threadreqpri = 1;
  private static Runnable threadreq = null;
  private static String dnsreq = null;
  public static String dns = null;
  private static String urlreq = null;
  private static DataInputStream urlstream = null;
  private static int savelen;
  private static String savereq = null;
  private static byte[] savebuf = null;
  private static boolean midiplay;
  private static int midipos;
  public static String midi = null;
  public static int midivol;
  public static int midifade;
  private static boolean waveplay;
  private static int wavepos;
  public static int wavevol;
  public static boolean reporterror = true;
  public static String errorname = &quot;&quot;;

  public static void startpriv(InetAddress inetaddress)
  {
    threadliveid = (int)(Math.random() * 99999999.0D);
    if (active)
    {
      try
      {
        Thread.sleep(500L);
      } catch (Exception localException) {
      }
      active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while (!active)
      try
      {
        Thread.sleep(50L);
      } catch (Exception localException1) {
      }
  }

  public static void setuid() {
    uid = 26343;
  }

  public void run() {
    active = true;
    String s = findcachedir();

    uid = 26342;
    try {
      cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
      for (int j = 0; j &lt; 5; j++)
        cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
    }
    catch (Exception exception) {
      exception.printStackTrace();
    }
    for (int i = threadliveid; threadliveid == i; )
    {
      if (socketreq != 0)
      {
        try
        {
          socket = new Socket(socketip, socketreq);
        }
        catch (Exception _ex)
        {
          socket = null;
        }
        socketreq = 0;
      }
      else if (threadreq != null)
      {
        Thread thread = new Thread(threadreq);
        thread.setDaemon(true);
        thread.start();
        thread.setPriority(threadreqpri);
        threadreq = null;
      }
      else if (dnsreq != null)
      {
        try
        {
          dns = InetAddress.getByName(dnsreq).getHostName();
        }
        catch (Exception _ex)
        {
          dns = &quot;unknown&quot;;
        }
        dnsreq = null;
      }
      else if (savereq != null)
      {
        if (savebuf != null)
          try
          {
            FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
            fileoutputstream.write(savebuf, 0, savelen);
            fileoutputstream.close();
          } catch (Exception localException1) {
          }
        if (waveplay)
        {
          String wave = s + savereq;
          waveplay = false;
        }
        if (midiplay)
        {
          midi = s + savereq;
          midiplay = false;
        }
        savereq = null;
      }
      else if (urlreq != null)
      {
        try
        {
          System.out.println(&quot;urlstream&quot;);
          urlstream = new DataInputStream(new URL(mainapp.getCodeBase(), urlreq).openStream());
        }
        catch (Exception _ex)
        {
          urlstream = null;
        }
        urlreq = null;
      }
      try
      {
        Thread.sleep(50L);
      }
      catch (Exception localException2)
      {
      }
    }
  }

  public static final String findcachedir()
  {
    File[] drives = File.listRoots();

    String s = &quot;C:/&quot;;
    File file = new File(s);
    if ((file.exists()) || (file.mkdirs())) {
      return s + &quot;RevXCache/&quot;;
    }
    return null;
  }

  public static int getuid(String s) {
    return 26342;
  }

  public static synchronized Socket opensocket(int i)
    throws IOException
  {
    for (socketreq = i; socketreq != 0; )
      try
      {
        Thread.sleep(50L);
      }
      catch (Exception localException) {
      }
    if (socket == null) {
      throw new IOException(&quot;could not open socket&quot;);
    }
    return socket;
  }

  public static synchronized DataInputStream openurl(String s)
    throws IOException
  {
    for (urlreq = s; urlreq != null; )
      try
      {
        Thread.sleep(50L);
      }
      catch (Exception localException) {
      }
    if (urlstream == null) {
      throw new IOException(&quot;could not open: &quot; + s);
    }
    return urlstream;
  }

  public static synchronized void dnslookup(String s)
  {
    dns = s;
    dnsreq = s;
  }

  public static synchronized void startthread(Runnable runnable, int i)
  {
    threadreqpri = i;
    threadreq = runnable;
  }

  public static synchronized boolean wavesave(byte[] abyte0, int i)
  {
    return false;
  }

  public static synchronized boolean wavereplay()
  {
    if (savereq != null)
    {
      return false;
    }

    savebuf = null;
    waveplay = true;
    savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
    return true;
  }

  public static synchronized void midisave(byte[] abyte0, int i)
  {
  }

  public static void reporterror(String s)
  {
    System.out.println(&quot;Error: &quot; + s);
  }
}[/code]

I couldn&#39;t upload my client.java because of the char limit, if you want to see it just say so and I will post a response containing the file.
ANY help is appreciated, I am also available via TV.  Thank you.</description>
    
    <lastBuildDate>Sat, 08 Mar 2014 08:57:19 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
        <dc:creator><![CDATA[@Coldmedicine Coldmedicine]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coldmedicine">@Coldmedicine</a> wrote:</p>
          <blockquote>
              <p>Are you zipping the cache?</p>
<p>Or all files INSIDE the cache</p>
<p>Right way:</p>
<p>Go into cache<br>
Select all including folders, EVERYTHING<br>
Right click<br>
Add to archive: .Zip<br>
Upload that<br>
Put version up with 1</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/5</link>
        <pubDate>Sat, 08 Mar 2014 08:57:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540843-5</guid>
        <source url="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss">[STILL UNSOLVED] AutoCacheDownloader Problem</source>
      </item>
      <item>
        <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
        <dc:creator><![CDATA[@gwinter gwinter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gwinter">@gwinter</a> wrote:</p>
          <blockquote>
              <p>Now I am getting the error “Requesting title page…” then fails. I have tried countless time to rezip and upload my files, I don’t think that the issue. something must be amiss in my files. Anyone available for TV?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/4</link>
        <pubDate>Tue, 04 Mar 2014 19:20:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540843-4</guid>
        <source url="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss">[STILL UNSOLVED] AutoCacheDownloader Problem</source>
      </item>
      <item>
        <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
        <dc:creator><![CDATA[@mattr91 mattr91]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mattr91">@mattr91</a> wrote:</p>
          <blockquote>
              <p>you must be doing something wrong i just downloaded the client tried to run it got the same thing as you then i re uploaded the cache  and it works perfect</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/3</link>
        <pubDate>Mon, 03 Mar 2014 23:16:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540843-3</guid>
        <source url="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss">[STILL UNSOLVED] AutoCacheDownloader Problem</source>
      </item>
      <item>
        <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
        <dc:creator><![CDATA[@Pure_Shaw Pure Shaw]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure_shaw">@Pure_Shaw</a> wrote:</p>
          <blockquote>
              <p>I figured out the prb just delete it and make another</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/2</link>
        <pubDate>Mon, 03 Mar 2014 23:08:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540843-2</guid>
        <source url="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss">[STILL UNSOLVED] AutoCacheDownloader Problem</source>
      </item>
      <item>
        <title>[STILL UNSOLVED] AutoCacheDownloader Problem</title>
        <dc:creator><![CDATA[@gwinter gwinter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gwinter">@gwinter</a> wrote:</p>
          <blockquote>
              <p><em>I know that I am not the only person having this issue, if you are too, please bump so we can all get this resolved</em><br>
I recently downloaded the newest(?) deathlypvpz source and I have been having problems with getting the cache to autodownload. I have been fiddling with this for days, googling and youtubing for hours, all to no avail. I have never had a problem getting a cache to autodownload before, but this one is strange. I am now desperate. Any insight at all would be much appreciated. Heres what I did:<br>
1.) Zipped my cache file: RevXCache.zip<br>
2.) Uploaded that to dropbox<br>
3.) Changed the link in cachedownloader.java (couldn’t find any links in client.java)<br>
When I load the client, it gets about 1/3 way done then says 'Requesting title screen…" then fails and keeps retrying. However, nothing downloads to my C:/ drive. When I manually put the cache into my C drive, it loads right up. Here are my files:<br>
CacheDownloader.java</p>
<p>[code=java]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import java.util.zip.*;<br>
import java.util.Enumeration;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>public client client;
public final int BUFFER = 1024;
public static final int VERSION = 1;
public String cacheLink = "https://www.dropbox.com/s/aeqy94nfgna6j2d/RevXCache.zip";
public String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

public void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}

public void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

public String getCacheDir() {
	return signlink.findcachedir();
}

public String getCacheLink() {
	return cacheLink;
}

public int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat");
	if(!location.exists()) {
		//delete(getCacheDir());
		downloadFile(getCacheLink(), getArchivedName());
		unZip();
		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteDownloadedZipFile(getArchivedName());
	} else {
		if(!version.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			return null;
		}
	}
	} catch(Exception e) {
	}
	return null;
}

public void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" +localFileName)); 
		conn = url.openConnection();
		in = conn.getInputStream(); 
		byte[] data = new byte[BUFFER]; 
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
        int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
		}
		drawLoadingText("Finished downloading "+getArchivedName()+"!");
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

public String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
	}
	return "";
}

public void deleteDownloadedZipFile(String fileName) {
	File f = new File(getCacheDir() + fileName);
	if (!f.exists())
		throw new IllegalArgumentException("Delete: no such file or directory: " + fileName);
	if (!f.canWrite())
		throw new IllegalArgumentException("Delete: write protected: " + fileName);
	if (f.isDirectory()) {
		String[] files = f.list();
	if (files.length &gt; 0)
		throw new IllegalArgumentException("Delete: directory not empty: " + fileName);
	}
	boolean success = f.delete();
	if (!success)
		throw new IllegalArgumentException("Delete: deletion failed");
}

public static boolean delete( String path ) {
	if (path == null || path.trim().length() == 0) 
	return false;
	return delete(new File(path));
}

public static boolean delete( File fileOrDirectory ) {
	if (fileOrDirectory == null) return false;
	if (!fileOrDirectory.exists()) return false;
	if (fileOrDirectory.isDirectory()) {
		for (File childFile : fileOrDirectory.listFiles()) {
			delete(childFile);
		}
	}
	return fileOrDirectory.delete();
}

public void unZip() {
	try {
		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;
		while((e=zin.getNextEntry()) != null) {
           	if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           	} else {
			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
				unzip(zin, getCacheDir() + e.getName());
			}
		}
		zin.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public void unzip(ZipInputStream zin, String s) throws IOException {
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len = 0;
	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]</p>
<p>My signlink.java:</p>
<p>[code=java]package sign;</p>
<p>import java.applet.Applet;<br>
import java.io.DataInputStream;<br>
import java.io.File;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.io.PrintStream;<br>
import java.io.RandomAccessFile;<br>
import java.net.InetAddress;<br>
import java.net.Socket;<br>
import java.net.URL;</p>
<p>public final class signlink<br>
implements Runnable<br>
{<br>
public static final int clientversion = 317;<br>
public static int uid;<br>
public static int storeid = 32;<br>
public static RandomAccessFile cache_dat = null;<br>
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];<br>
public static boolean sunjava;<br>
public static Applet mainapp = null;<br>
private static boolean active;<br>
private static int threadliveid;<br>
private static InetAddress socketip;<br>
private static int socketreq;<br>
private static Socket socket = null;<br>
private static int threadreqpri = 1;<br>
private static Runnable threadreq = null;<br>
private static String dnsreq = null;<br>
public static String dns = null;<br>
private static String urlreq = null;<br>
private static DataInputStream urlstream = null;<br>
private static int savelen;<br>
private static String savereq = null;<br>
private static byte[] savebuf = null;<br>
private static boolean midiplay;<br>
private static int midipos;<br>
public static String midi = null;<br>
public static int midivol;<br>
public static int midifade;<br>
private static boolean waveplay;<br>
private static int wavepos;<br>
public static int wavevol;<br>
public static boolean reporterror = true;<br>
public static String errorname = “”;</p>
<p>public static void startpriv(InetAddress inetaddress)<br>
{<br>
threadliveid = (int)(Math.random() * 99999999.0D);<br>
if (active)<br>
{<br>
try<br>
{<br>
Thread.sleep(500L);<br>
} catch (Exception localException) {<br>
}<br>
active = false;<br>
}<br>
socketreq = 0;<br>
threadreq = null;<br>
dnsreq = null;<br>
savereq = null;<br>
urlreq = null;<br>
socketip = inetaddress;<br>
Thread thread = new Thread(new signlink());<br>
thread.setDaemon(true);<br>
thread.start();<br>
while (!active)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
} catch (Exception localException1) {<br>
}<br>
}</p>
<p>public static void setuid() {<br>
uid = 26343;<br>
}</p>
<p>public void run() {<br>
active = true;<br>
String s = findcachedir();</p>
<pre><code>uid = 26342;
try {
  cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
  for (int j = 0; j &lt; 5; j++)
    cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");
}
catch (Exception exception) {
  exception.printStackTrace();
}
for (int i = threadliveid; threadliveid == i; )
{
  if (socketreq != 0)
  {
    try
    {
      socket = new Socket(socketip, socketreq);
    }
    catch (Exception _ex)
    {
      socket = null;
    }
    socketreq = 0;
  }
  else if (threadreq != null)
  {
    Thread thread = new Thread(threadreq);
    thread.setDaemon(true);
    thread.start();
    thread.setPriority(threadreqpri);
    threadreq = null;
  }
  else if (dnsreq != null)
  {
    try
    {
      dns = InetAddress.getByName(dnsreq).getHostName();
    }
    catch (Exception _ex)
    {
      dns = "unknown";
    }
    dnsreq = null;
  }
  else if (savereq != null)
  {
    if (savebuf != null)
      try
      {
        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
        fileoutputstream.write(savebuf, 0, savelen);
        fileoutputstream.close();
      } catch (Exception localException1) {
      }
    if (waveplay)
    {
      String wave = s + savereq;
      waveplay = false;
    }
    if (midiplay)
    {
      midi = s + savereq;
      midiplay = false;
    }
    savereq = null;
  }
  else if (urlreq != null)
  {
    try
    {
      System.out.println("urlstream");
      urlstream = new DataInputStream(new URL(mainapp.getCodeBase(), urlreq).openStream());
    }
    catch (Exception _ex)
    {
      urlstream = null;
    }
    urlreq = null;
  }
  try
  {
    Thread.sleep(50L);
  }
  catch (Exception localException2)
  {
  }
}
</code></pre>
<p>}</p>
<p>public static final String findcachedir()<br>
{<br>
File[] drives = File.listRoots();</p>
<pre><code>String s = "C:/";
File file = new File(s);
if ((file.exists()) || (file.mkdirs())) {
  return s + "RevXCache/";
}
return null;
</code></pre>
<p>}</p>
<p>public static int getuid(String s) {<br>
return 26342;<br>
}</p>
<p>public static synchronized Socket opensocket(int i)<br>
throws IOException<br>
{<br>
for (socketreq = i; socketreq != 0; )<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch (Exception localException) {<br>
}<br>
if (socket == null) {<br>
throw new IOException(“could not open socket”);<br>
}<br>
return socket;<br>
}</p>
<p>public static synchronized DataInputStream openurl(String s)<br>
throws IOException<br>
{<br>
for (urlreq = s; urlreq != null; )<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch (Exception localException) {<br>
}<br>
if (urlstream == null) {<br>
throw new IOException("could not open: " + s);<br>
}<br>
return urlstream;<br>
}</p>
<p>public static synchronized void dnslookup(String s)<br>
{<br>
dns = s;<br>
dnsreq = s;<br>
}</p>
<p>public static synchronized void startthread(Runnable runnable, int i)<br>
{<br>
threadreqpri = i;<br>
threadreq = runnable;<br>
}</p>
<p>public static synchronized boolean wavesave(byte[] abyte0, int i)<br>
{<br>
return false;<br>
}</p>
<p>public static synchronized boolean wavereplay()<br>
{<br>
if (savereq != null)<br>
{<br>
return false;<br>
}</p>
<pre><code>savebuf = null;
waveplay = true;
savereq = "sound" + wavepos + ".wav";
return true;
</code></pre>
<p>}</p>
<p>public static synchronized void midisave(byte[] abyte0, int i)<br>
{<br>
}</p>
<p>public static void reporterror(String s)<br>
{<br>
System.out.println("Error: " + s);<br>
}<br>
}[/code]</p>
<p>I couldn’t upload my client.java because of the char limit, if you want to see it just say so and I will post a response containing the file.<br>
ANY help is appreciated, I am also available via TV.  Thank you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843/1</link>
        <pubDate>Mon, 03 Mar 2014 22:28:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540843-1</guid>
        <source url="https://forum.moparisthebest.com/t/still-unsolved-autocachedownloader-problem/540843.rss">[STILL UNSOLVED] AutoCacheDownloader Problem</source>
      </item>
  </channel>
</rss>
