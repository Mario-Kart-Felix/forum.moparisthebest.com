<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AttackNPC(){ Delta</title>
    <link>https://forum.moparisthebest.com/t/attacknpc-delta/399476</link>
    <description>This is the AttackNPC method in delta, Somebody please give me the bits that need improvement:

[code]	private boolean AttackNPC() {
		int EnemyX = server.npcHandler.npcs[attacknpc].absX;
		int EnemyY = server.npcHandler.npcs[attacknpc].absY;
		int EnemyHP = server.npcHandler.npcs[attacknpc].HP;
		int hitDiff = 0;
		if (EnemyHP &lt; 1) {
			sM(&quot;You can&#39;t attack that monster!&quot;);
			return false;
		}
		int type = server.npcHandler.npcs[attacknpc].npcType;
		int[] staffs = {1381, 1383, 1385, 1387, 4675};
		int[] arrowIds = { 882, 884, 886, 888, 890, 892, 78 };
		for (int element : staffs) {
			if ((playerEquipment[playerWeapon] == element)
					&amp;&amp; autocasting &amp;&amp; autocastID &gt; 0) {
				int npcTargetX = server.npcHandler.npcs[attacknpc].absX;
				int npcTargetY = server.npcHandler.npcs[attacknpc].absY;
				int npcTargetHealth = server.npcHandler.npcs[attacknpc].HP;
				if (System.currentTimeMillis() - lastAttack &lt; 4000) {
					//sM(&quot;You must wait 4 seconds before casting this kind of spell again&quot;);
					return false;
				}
				if (!playerMage2(attacknpc)) {
					return false;
				}
				inCombat = true;
				lastCombat = System.currentTimeMillis();
				lastAttack = lastCombat;

				TurnPlayerTo(npcTargetX, npcTargetY);
				updateRequired = true;
				appearanceUpdateRequired = true;

				toX = absX;
				toY = absY;
	                	newWalkCmdSteps = 0;
                		newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
                		getNextPlayerMovement();
				MagicHandler.npcX = npcTargetX;
				MagicHandler.npcY = npcTargetY;
				MagicHandler.npcHP = npcTargetHealth;
				server.npcHandler.npcs[attacknpc].hitIDNPC = playerId;
				server.npcHandler.npcs[attacknpc].offTimerNPC = 12;
				spellNpcIndex = MagicHandler.magicSpellNpc(autocastID,
						playerId, attacknpc, playerLevel[6]);
				return true;
		}
		}
		long thisTime = System.currentTimeMillis();
		int voidmelee = 0;
		if(FullVMelee()){
		voidmelee += 10;
		}
		if (npcHit()) {
			hitDiff = misc.random(playerMaxHit) + misc.random(StrPrayer) + misc.random(voidmelee);
		} else {
			hitDiff = 0;
		}
		boolean UseBow = false;
		boolean UseCrossBow = false;
		boolean UseRing = false;

		for (int i = 0; i &lt; shortbow.length; i++) {
			if ((playerEquipment[playerWeapon] == shortbow[i])
					|| (playerEquipment[playerWeapon] == longbow[i])) {
				UseBow = true;
				break;
			}
		}
		if (playerEquipment[playerWeapon] == 837) {
				UseCrossBow = true;
		}
		if (playerEquipment[playerWeapon] == 6522) {
				UseRing = true;
		}
		if (UseBow) {
				HasArrows = false;
				CheckArrows();
				//CalculateRange();
				hitDiff = npcRangeDamage();
				//drawback();

		}
		if (UseCrossBow) {
				HasBolts = false;
				CheckBolts();
				//CalculateRange();
				hitDiff = npcRangeDamage();
		}
		if (UseRing) {
				HasRings = false;
				CheckRings();
				//CalculateRange();
				hitDiff = npcRangeDamage();
		}
		if(UseBow || UseCrossBow || UseRing){
			if(GoodDistance(EnemyX, EnemyY, absX, absY, 8) == false){
				sM(&quot;You are too far to range your enemy!&quot;);
				ResetAttackNPC();
				return false;
			}
		}
		if(type == 3200 &amp;&amp; !UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing){
			sM(&quot;You can only use magic and range on the Chaos Elemental!&quot;);
			ResetAttackNPC();
		return false;
		}
		for (int i1 = 0; i1 &lt; arrowIds.length; i1++) {
			if (playerEquipment[playerArrows] == arrowIds[i1]) {
			}
		}
		if(hasCrystalBow()){
		}
		if (UseBow &amp;&amp; playerEquipment[playerWeapon] == 4734 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			hitDiff = npcRangeDamage();
			if (DeleteArrow()  &amp;&amp; playerEquipment[playerArrows] == 4740) {
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				sM(&quot;You&#39;re out of bolts!&quot;);
				return false;
			}
		}
		if (hasCrystalBow() &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			drawback();
			hitDiff = npcRangeDamage();
			degradeCrystalBow();
			if (DeleteArrow()) {
				lastArrow = System.currentTimeMillis();
				arrow = true;
				arrowsLeft -= 1;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				sM(&quot;You&#39;re out of bolts!&quot;);
				return false;
			}
		}
		if (UseBow &amp;&amp; playerEquipment[playerWeapon] != 4734 &amp;&amp; !hasCrystalBow() &amp;&amp; playerEquipment[playerWeapon] != 4827 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			drawback();
			hitDiff = npcRangeDamage();
			if (DeleteArrow() &amp;&amp; HasArrows) {
				lastArrow = System.currentTimeMillis();
				arrow = true;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				sM(&quot;There is no ammo left in your quiver.&quot;);
				return false;
			}
		}
		if (UseBow &amp;&amp; playerEquipment[playerWeapon] == 4827 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			drawback();
			hitDiff = npcRangeDamage();
			if (DeleteArrow() &amp;&amp; HasArrows) {
				lastArrow = System.currentTimeMillis();
				arrow = true;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				sM(&quot;There is no ammo left in your quiver.&quot;);
				return false;
			}
		}

		if (UseCrossBow &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			hitDiff = npcRangeDamage();
			if (DeleteArrow() &amp;&amp; HasBolts) {
				lastArrow = System.currentTimeMillis();
				arrow = true;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				sM(&quot;There is no ammo left in your quiver.&quot;);
				return false;
			}
		}
		if (UseRing &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
			//CalculateRange();
			hitDiff = npcRangeDamage();
			if (DeleteRing() &amp;&amp; HasRings) {
				lastArrow = System.currentTimeMillis();
				arrow = true;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
			} else {
				ResetAttackNPC();
				return false;
			}
		}
		actionInterval = getbattleTimer();
		lastAction = System.currentTimeMillis();
		inCombat = true;
		lastCombat = System.currentTimeMillis();
		if (UseCrossBow || UseBow || UseRing || GoodDistance(EnemyX, EnemyY, absX, absY, 1) == true) {
			if (server.npcHandler.npcs[attacknpc].IsDead == true) {
				ResetAttackNPC();
			} else {
if(server.npcHandler.npcs[attacknpc].hitIDNPC != 0 &amp;&amp; server.npcHandler.npcs[attacknpc].hitIDNPC != playerId &amp;&amp; !multiCombat()){
sM(&quot;Someone else is already fighting your opponent.&quot;);
faceNPC(attacknpc);
ResetAttackNPC();
return false;
}
if(hitID != attacknpc &amp;&amp; hitID != 0 &amp;&amp; !multiCombat()){
sM(&quot;I&#39;m already under attack.&quot;);
faceNPC(attacknpc);
ResetAttackNPC();
return false;
}
if(type == 2630 &amp;&amp; !UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing &amp;&amp; hitDiff &gt; 0){
applyRecoil();
}
if(hasCrystalShield()){
shieldLeft -= 1;
degradeCrystalShield();
}
if(playerEquipment[playerWeapon] == 6528 &amp;&amp; playerEquipment[playerAmulet] == 6577 &amp;&amp; misc.random(3)==1){
hitDiff = misc.random(8) + misc.random(playerMaxHit) + misc.random(StrPrayer) + misc.random(voidmelee);
}
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 80 &amp;&amp; currentHealth &lt; 100){
hitDiff = misc.random(8) + misc.random(playerMaxHit) + misc.random(StrPrayer);

}
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 60 &amp;&amp; currentHealth &lt; 79){
hitDiff = misc.random(18) + misc.random(playerMaxHit) + misc.random(StrPrayer);

}
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 40 &amp;&amp; currentHealth &lt; 59){
hitDiff = misc.random(28) + misc.random(playerMaxHit) + misc.random(StrPrayer);

}
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 20 &amp;&amp; currentHealth &lt; 39){
hitDiff = misc.random(38) + misc.random(playerMaxHit) + misc.random(StrPrayer);

}
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 0 &amp;&amp; currentHealth &lt; 18){
hitDiff = misc.random(58) + misc.random(playerMaxHit) + misc.random(StrPrayer);

}
if(FullGuthanEquipped()) {
if(misc.random(3) == 1){
if((currentHealth + hitDiff) &lt;= getLevelForXP(playerXP[3])){
currentHealth += hitDiff;
}
if((currentHealth + hitDiff) &gt; getLevelForXP(playerXP[3])){
currentHealth = getLevelForXP(playerXP[3]);
}
sendQuest(&quot;&quot; + currentHealth + &quot;&quot;, 4016);
stillgfx(398, EnemyY, EnemyX);
}
	}
if(FullVeracEquipped()) {
if(misc.random(2) == 1){
hitDiff = misc.random(playerMaxHit) + misc.random(StrPrayer);
}
	}
setAnimation(GetWepAnim(playerEquipment[playerWeapon]));
if(UseCrossBow &amp;&amp; misc.random(5)==1 &amp;&amp; playerEquipment[playerArrows] == 881){
hitDiff = misc.random(maxRangeHit2()) + misc.random(30);
stillgfx(197, EnemyY, EnemyX);
actionInterval = getbattleTimer();
lastAction = System.currentTimeMillis();
}
if(playerEquipment[playerShield] == 2621 &amp;&amp; misc.random(6)==1){
specialAtkNPC(true, 0, 600, 2836);
hitDiff = misc.random(25);
stillgfx(579, EnemyY, EnemyX);
}
if(playerEquipment[playerWeapon] == 4827 &amp;&amp; !specOn){
DDS2Damg = true;
ddsInterval = 2000;
lastDds = System.currentTimeMillis();
setAnimation(426);
actionInterval = getbattleTimer();
lastAction = System.currentTimeMillis();
}
if(specOn){
if(playerEquipment[playerWeapon] == 4827 &amp;&amp; specialAmount &gt; 74){
specialAtkNPC(true, 75, 250, 1074);
hitDiff = misc.random(maxRangeHit2());
rangeGFXNPC(85, 643);
rangeGFXNPC(65, 643);
}
if(playerEquipment[playerWeapon] == 861 &amp;&amp; specialAmount &gt; 74){
specialAtkNPC(true, 75, 256, 1074);
hitDiff = misc.random(maxRangeHit2());
rangeGFXNPC(75, 249);
rangeGFXNPC(95, 249);
}
					actionInterval = getbattleTimer();
					lastAction = System.currentTimeMillis();
}
if(specOn == true){//npcs
if(playerEquipment[playerWeapon] == 3204 &amp;&amp; specialAmount &gt; 74){
specialAtkNPC(true, 75, 282, 1203);
npcDamage(5);
}
if(playerEquipment[playerWeapon] == 859 &amp;&amp; specialAmount &gt; 99){
specialAtkNPC(false, 100, 250, 426);
hitDiff = misc.random(maxRangeHit2()) + misc.random(5);
rangeGFXNPC(75, 249);
}
if(playerEquipment[playerWeapon] == 5698 &amp;&amp; specialAmount &gt; 24){
specialAtkNPC(true, 25, 252, 0x426);
npcDamage(8);
}
if(playerEquipment[playerWeapon] == 1305 &amp;&amp; specialAmount &gt; 24){
specialAtkNPC(false, 25, 248, 1058);
npcDamage(8);
}
if(playerEquipment[playerWeapon] == 4578 &amp;&amp; specialAmount &gt; 74){
specialAtkNPC(false, 75, 347, 1872);
npcDamage(0);
}
if(playerEquipment[playerWeapon] == 4151 &amp;&amp; specialAmount &gt; 49){
specialAtkNPC(false, 50, 600, 1658);
stillgfx(341, EnemyY, EnemyX);
}
if(playerEquipment[playerWeapon] == 667 &amp;&amp; specialAmount &gt; 99){
specialAtkNPC(false, 100, 600, 2927);
specGFX(654);
}
if(playerEquipment[playerWeapon] == 35 &amp;&amp; specialAmount &gt; 49){
specialAtkNPC(false, 50, 600, 3547);
npcDamage(30);
specGFX(655);
}
if(playerEquipment[playerWeapon] == 2402 &amp;&amp; specialAmount &gt; 49){
specialAtkNPC(false, 50, 600, 2927);
specGFX(611);
currentHealth += hitDiff;
playerLevel[5] += 5 + misc.random(10);
				if (currentHealth &gt; playerLevel[playerHitpoints])
					currentHealth = playerLevel[playerHitpoints];
				sendQuest(&quot;&quot; + currentHealth + &quot;&quot;, 4016);
				if (playerLevel[5] &gt; getLevelForXP(playerXP[5]))
					playerLevel[5] = getLevelForXP(playerXP[5]);
				sendQuest(&quot;&quot; + playerLevel[5] + &quot;&quot;, 4012);
}
if(playerEquipment[playerWeapon] == 746 &amp;&amp; specialAmount &gt; 74){
specialAtkNPC(false, 75, 600, 2927);
stillgfx(369, EnemyY, EnemyX);
stillgfx(644, absY, absX);
}
if(playerEquipment[playerWeapon] == 8100 &amp;&amp; specialAmount &gt; 99){
specialAtkNPC(true, 100, 600, 811);
hitDiff = misc.random(playerMaxHit) + misc.random(5) + misc.random(StrPrayer) + misc.random(voidmelee);
stillgfx(656, EnemyY, EnemyX);
}
					actionInterval = getbattleTimer();
					lastAction = System.currentTimeMillis();
}
				server.npcHandler.npcs[attacknpc].hitIDNPC = playerId;
				server.npcHandler.npcs[attacknpc].offTimerNPC = 12;
				server.npcHandler.npcs[attacknpc].StartKilling = playerId;
				server.npcHandler.npcs[attacknpc].RandomWalk = false;
				server.npcHandler.npcs[attacknpc].IsUnderAttack = true;
				actionInterval = getbattleTimer();
				lastAction = System.currentTimeMillis();
				faceNPC(attacknpc);
				updateRequired = true;
				appearanceUpdateRequired = true;
				if (!UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing){
				if ((EnemyHP - hitDiff) &lt; 0) {
					hitDiff = EnemyHP;
				}
				server.npcHandler.npcs[attacknpc].hitDiff = hitDiff;
				server.npcHandler.npcs[attacknpc].updateRequired = true;
				server.npcHandler.npcs[attacknpc].hitUpdateRequired = true;
				server.npcHandler.npcs[attacknpc].hit = true;
				}
				server.npcHandler.npcs[attacknpc].Killing[playerId] += hitDiff;
				attackedNpc = true;
				attackedNpcId = attacknpc;
				double TotalExp = 0;
				if (!UseBow)
					animationReset = System.currentTimeMillis() + 1200;
				if (server.npcHandler.npcs[attacknpc].npcType != 0) {
          if (UseBow || UseCrossBow || UseRing) {
            TotalExp = (double)(120*hitDiff);
            TotalExp = (double)(TotalExp*CombatExpRate);
            addSkillXP((int)(TotalExp), 4);
          } else if (FightType != 3) {
            TotalExp = (double)(120*hitDiff);
            TotalExp = (double)(TotalExp*CombatExpRate);
            addSkillXP((int)(TotalExp), SkillID);
          } else {
            TotalExp = (double)(50*hitDiff);
            TotalExp = (double)(TotalExp*CombatExpRate);
            addSkillXP((int)(TotalExp), playerAttack);
            addSkillXP((int)(TotalExp), playerDefence);
            addSkillXP((int)(TotalExp), playerStrength);
          }
          TotalExp = (double)(50*hitDiff);
          TotalExp = (double)(TotalExp*CombatExpRate);
          addSkillXP((int)(TotalExp), playerHitpoints);
          attackTimer = 7;
	  specOn = false;

					if (debug)
						sM(&quot;hitDiff=&quot; + hitDiff + &quot;, elapsed=&quot;
								+ (thisTime - lastAttack));
					lastAttack = System.currentTimeMillis();
				}
				return true;

			}
		}
		return false;
	}[/code]</description>
    
    <lastBuildDate>Thu, 16 Jun 2011 04:04:20 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/attacknpc-delta/399476.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>AttackNPC(){ Delta</title>
        <dc:creator><![CDATA[@Ajdakiwii Ajdakiwii]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ajdakiwii">@Ajdakiwii</a> wrote:</p>
          <blockquote>
              <p>This is the AttackNPC method in delta, Somebody please give me the bits that need improvement:</p>
<p>[code]	private boolean AttackNPC() {<br>
int EnemyX = server.npcHandler.npcs[attacknpc].absX;<br>
int EnemyY = server.npcHandler.npcs[attacknpc].absY;<br>
int EnemyHP = server.npcHandler.npcs[attacknpc].HP;<br>
int hitDiff = 0;<br>
if (EnemyHP &lt; 1) {<br>
sM(“You can’t attack that monster!”);<br>
return false;<br>
}<br>
int type = server.npcHandler.npcs[attacknpc].npcType;<br>
int[] staffs = {1381, 1383, 1385, 1387, 4675};<br>
int[] arrowIds = { 882, 884, 886, 888, 890, 892, 78 };<br>
for (int element : staffs) {<br>
if ((playerEquipment[playerWeapon] == element)<br>
&amp;&amp; autocasting &amp;&amp; autocastID &gt; 0) {<br>
int npcTargetX = server.npcHandler.npcs[attacknpc].absX;<br>
int npcTargetY = server.npcHandler.npcs[attacknpc].absY;<br>
int npcTargetHealth = server.npcHandler.npcs[attacknpc].HP;<br>
if (System.currentTimeMillis() - lastAttack &lt; 4000) {<br>
//sM(“You must wait 4 seconds before casting this kind of spell again”);<br>
return false;<br>
}<br>
if (!playerMage2(attacknpc)) {<br>
return false;<br>
}<br>
inCombat = true;<br>
lastCombat = System.currentTimeMillis();<br>
lastAttack = lastCombat;</p>
<pre><code>			TurnPlayerTo(npcTargetX, npcTargetY);
			updateRequired = true;
			appearanceUpdateRequired = true;

			toX = absX;
			toY = absY;
                	newWalkCmdSteps = 0;
            		newWalkCmdX[0] = newWalkCmdY[0] = tmpNWCX[0] = tmpNWCY[0] = 0;
            		getNextPlayerMovement();
			MagicHandler.npcX = npcTargetX;
			MagicHandler.npcY = npcTargetY;
			MagicHandler.npcHP = npcTargetHealth;
			server.npcHandler.npcs[attacknpc].hitIDNPC = playerId;
			server.npcHandler.npcs[attacknpc].offTimerNPC = 12;
			spellNpcIndex = MagicHandler.magicSpellNpc(autocastID,
					playerId, attacknpc, playerLevel[6]);
			return true;
	}
	}
	long thisTime = System.currentTimeMillis();
	int voidmelee = 0;
	if(FullVMelee()){
	voidmelee += 10;
	}
	if (npcHit()) {
		hitDiff = misc.random(playerMaxHit) + misc.random(StrPrayer) + misc.random(voidmelee);
	} else {
		hitDiff = 0;
	}
	boolean UseBow = false;
	boolean UseCrossBow = false;
	boolean UseRing = false;

	for (int i = 0; i &lt; shortbow.length; i++) {
		if ((playerEquipment[playerWeapon] == shortbow[i])
				|| (playerEquipment[playerWeapon] == longbow[i])) {
			UseBow = true;
			break;
		}
	}
	if (playerEquipment[playerWeapon] == 837) {
			UseCrossBow = true;
	}
	if (playerEquipment[playerWeapon] == 6522) {
			UseRing = true;
	}
	if (UseBow) {
			HasArrows = false;
			CheckArrows();
			//CalculateRange();
			hitDiff = npcRangeDamage();
			//drawback();

	}
	if (UseCrossBow) {
			HasBolts = false;
			CheckBolts();
			//CalculateRange();
			hitDiff = npcRangeDamage();
	}
	if (UseRing) {
			HasRings = false;
			CheckRings();
			//CalculateRange();
			hitDiff = npcRangeDamage();
	}
	if(UseBow || UseCrossBow || UseRing){
		if(GoodDistance(EnemyX, EnemyY, absX, absY, 8) == false){
			sM("You are too far to range your enemy!");
			ResetAttackNPC();
			return false;
		}
	}
	if(type == 3200 &amp;&amp; !UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing){
		sM("You can only use magic and range on the Chaos Elemental!");
		ResetAttackNPC();
	return false;
	}
	for (int i1 = 0; i1 &lt; arrowIds.length; i1++) {
		if (playerEquipment[playerArrows] == arrowIds[i1]) {
		}
	}
	if(hasCrystalBow()){
	}
	if (UseBow &amp;&amp; playerEquipment[playerWeapon] == 4734 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		hitDiff = npcRangeDamage();
		if (DeleteArrow()  &amp;&amp; playerEquipment[playerArrows] == 4740) {
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			sM("You're out of bolts!");
			return false;
		}
	}
	if (hasCrystalBow() &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		drawback();
		hitDiff = npcRangeDamage();
		degradeCrystalBow();
		if (DeleteArrow()) {
			lastArrow = System.currentTimeMillis();
			arrow = true;
			arrowsLeft -= 1;
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			sM("You're out of bolts!");
			return false;
		}
	}
	if (UseBow &amp;&amp; playerEquipment[playerWeapon] != 4734 &amp;&amp; !hasCrystalBow() &amp;&amp; playerEquipment[playerWeapon] != 4827 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		drawback();
		hitDiff = npcRangeDamage();
		if (DeleteArrow() &amp;&amp; HasArrows) {
			lastArrow = System.currentTimeMillis();
			arrow = true;
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			sM("There is no ammo left in your quiver.");
			return false;
		}
	}
	if (UseBow &amp;&amp; playerEquipment[playerWeapon] == 4827 &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		drawback();
		hitDiff = npcRangeDamage();
		if (DeleteArrow() &amp;&amp; HasArrows) {
			lastArrow = System.currentTimeMillis();
			arrow = true;
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			sM("There is no ammo left in your quiver.");
			return false;
		}
	}

	if (UseCrossBow &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		hitDiff = npcRangeDamage();
		if (DeleteArrow() &amp;&amp; HasBolts) {
			lastArrow = System.currentTimeMillis();
			arrow = true;
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			sM("There is no ammo left in your quiver.");
			return false;
		}
	}
	if (UseRing &amp;&amp; System.currentTimeMillis() - lastAction &gt; actionInterval) {
		//CalculateRange();
		hitDiff = npcRangeDamage();
		if (DeleteRing() &amp;&amp; HasRings) {
			lastArrow = System.currentTimeMillis();
			arrow = true;
			actionInterval = getbattleTimer();
			lastAction = System.currentTimeMillis();
		} else {
			ResetAttackNPC();
			return false;
		}
	}
	actionInterval = getbattleTimer();
	lastAction = System.currentTimeMillis();
	inCombat = true;
	lastCombat = System.currentTimeMillis();
	if (UseCrossBow || UseBow || UseRing || GoodDistance(EnemyX, EnemyY, absX, absY, 1) == true) {
		if (server.npcHandler.npcs[attacknpc].IsDead == true) {
			ResetAttackNPC();
		} else {
</code></pre>
<p>if(server.npcHandler.npcs[attacknpc].hitIDNPC != 0 &amp;&amp; server.npcHandler.npcs[attacknpc].hitIDNPC != playerId &amp;&amp; !multiCombat()){<br>
sM(“Someone else is already fighting your opponent.”);<br>
faceNPC(attacknpc);<br>
ResetAttackNPC();<br>
return false;<br>
}<br>
if(hitID != attacknpc &amp;&amp; hitID != 0 &amp;&amp; !multiCombat()){<br>
sM(“I’m already under attack.”);<br>
faceNPC(attacknpc);<br>
ResetAttackNPC();<br>
return false;<br>
}<br>
if(type == 2630 &amp;&amp; !UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing &amp;&amp; hitDiff &gt; 0){<br>
applyRecoil();<br>
}<br>
if(hasCrystalShield()){<br>
shieldLeft -= 1;<br>
degradeCrystalShield();<br>
}<br>
if(playerEquipment[playerWeapon] == 6528 &amp;&amp; playerEquipment[playerAmulet] == 6577 &amp;&amp; misc.random(3)==1){<br>
hitDiff = misc.random(8) + misc.random(playerMaxHit) + misc.random(StrPrayer) + misc.random(voidmelee);<br>
}<br>
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 80 &amp;&amp; currentHealth &lt; 100){<br>
hitDiff = misc.random(8) + misc.random(playerMaxHit) + misc.random(StrPrayer);</p>
<p>}<br>
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 60 &amp;&amp; currentHealth &lt; 79){<br>
hitDiff = misc.random(18) + misc.random(playerMaxHit) + misc.random(StrPrayer);</p>
<p>}<br>
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 40 &amp;&amp; currentHealth &lt; 59){<br>
hitDiff = misc.random(28) + misc.random(playerMaxHit) + misc.random(StrPrayer);</p>
<p>}<br>
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 20 &amp;&amp; currentHealth &lt; 39){<br>
hitDiff = misc.random(38) + misc.random(playerMaxHit) + misc.random(StrPrayer);</p>
<p>}<br>
if(FullDharokEquipped() &amp;&amp; misc.random(2)==1 &amp;&amp; currentHealth &gt; 0 &amp;&amp; currentHealth &lt; 18){<br>
hitDiff = misc.random(58) + misc.random(playerMaxHit) + misc.random(StrPrayer);</p>
<p>}<br>
if(FullGuthanEquipped()) {<br>
if(misc.random(3) == 1){<br>
if((currentHealth + hitDiff) &lt;= getLevelForXP(playerXP[3])){<br>
currentHealth += hitDiff;<br>
}<br>
if((currentHealth + hitDiff) &gt; getLevelForXP(playerXP[3])){<br>
currentHealth = getLevelForXP(playerXP[3]);<br>
}<br>
sendQuest("" + currentHealth + “”, 4016);<br>
stillgfx(398, EnemyY, EnemyX);<br>
}<br>
}<br>
if(FullVeracEquipped()) {<br>
if(misc.random(2) == 1){<br>
hitDiff = misc.random(playerMaxHit) + misc.random(StrPrayer);<br>
}<br>
}<br>
setAnimation(GetWepAnim(playerEquipment[playerWeapon]));<br>
if(UseCrossBow &amp;&amp; misc.random(5)==1 &amp;&amp; playerEquipment[playerArrows] == 881){<br>
hitDiff = misc.random(maxRangeHit2()) + misc.random(30);<br>
stillgfx(197, EnemyY, EnemyX);<br>
actionInterval = getbattleTimer();<br>
lastAction = System.currentTimeMillis();<br>
}<br>
if(playerEquipment[playerShield] == 2621 &amp;&amp; misc.random(6)==1){<br>
specialAtkNPC(true, 0, 600, 2836);<br>
hitDiff = misc.random(25);<br>
stillgfx(579, EnemyY, EnemyX);<br>
}<br>
if(playerEquipment[playerWeapon] == 4827 &amp;&amp; !specOn){<br>
DDS2Damg = true;<br>
ddsInterval = 2000;<br>
lastDds = System.currentTimeMillis();<br>
setAnimation(426);<br>
actionInterval = getbattleTimer();<br>
lastAction = System.currentTimeMillis();<br>
}<br>
if(specOn){<br>
if(playerEquipment[playerWeapon] == 4827 &amp;&amp; specialAmount &gt; 74){<br>
specialAtkNPC(true, 75, 250, 1074);<br>
hitDiff = misc.random(maxRangeHit2());<br>
rangeGFXNPC(85, 643);<br>
rangeGFXNPC(65, 643);<br>
}<br>
if(playerEquipment[playerWeapon] == 861 &amp;&amp; specialAmount &gt; 74){<br>
specialAtkNPC(true, 75, 256, 1074);<br>
hitDiff = misc.random(maxRangeHit2());<br>
rangeGFXNPC(75, 249);<br>
rangeGFXNPC(95, 249);<br>
}<br>
actionInterval = getbattleTimer();<br>
lastAction = System.currentTimeMillis();<br>
}<br>
if(specOn == true){//npcs<br>
if(playerEquipment[playerWeapon] == 3204 &amp;&amp; specialAmount &gt; 74){<br>
specialAtkNPC(true, 75, 282, 1203);<br>
npcDamage(5);<br>
}<br>
if(playerEquipment[playerWeapon] == 859 &amp;&amp; specialAmount &gt; 99){<br>
specialAtkNPC(false, 100, 250, 426);<br>
hitDiff = misc.random(maxRangeHit2()) + misc.random(5);<br>
rangeGFXNPC(75, 249);<br>
}<br>
if(playerEquipment[playerWeapon] == 5698 &amp;&amp; specialAmount &gt; 24){<br>
specialAtkNPC(true, 25, 252, 0x426);<br>
npcDamage(8);<br>
}<br>
if(playerEquipment[playerWeapon] == 1305 &amp;&amp; specialAmount &gt; 24){<br>
specialAtkNPC(false, 25, 248, 1058);<br>
npcDamage(8);<br>
}<br>
if(playerEquipment[playerWeapon] == 4578 &amp;&amp; specialAmount &gt; 74){<br>
specialAtkNPC(false, 75, 347, 1872);<br>
npcDamage(0);<br>
}<br>
if(playerEquipment[playerWeapon] == 4151 &amp;&amp; specialAmount &gt; 49){<br>
specialAtkNPC(false, 50, 600, 1658);<br>
stillgfx(341, EnemyY, EnemyX);<br>
}<br>
if(playerEquipment[playerWeapon] == 667 &amp;&amp; specialAmount &gt; 99){<br>
specialAtkNPC(false, 100, 600, 2927);<br>
specGFX(654);<br>
}<br>
if(playerEquipment[playerWeapon] == 35 &amp;&amp; specialAmount &gt; 49){<br>
specialAtkNPC(false, 50, 600, 3547);<br>
npcDamage(30);<br>
specGFX(655);<br>
}<br>
if(playerEquipment[playerWeapon] == 2402 &amp;&amp; specialAmount &gt; 49){<br>
specialAtkNPC(false, 50, 600, 2927);<br>
specGFX(611);<br>
currentHealth += hitDiff;<br>
playerLevel[5] += 5 + misc.random(10);<br>
if (currentHealth &gt; playerLevel[playerHitpoints])<br>
currentHealth = playerLevel[playerHitpoints];<br>
sendQuest("" + currentHealth + “”, 4016);<br>
if (playerLevel[5] &gt; getLevelForXP(playerXP[5]))<br>
playerLevel[5] = getLevelForXP(playerXP[5]);<br>
sendQuest("" + playerLevel[5] + “”, 4012);<br>
}<br>
if(playerEquipment[playerWeapon] == 746 &amp;&amp; specialAmount &gt; 74){<br>
specialAtkNPC(false, 75, 600, 2927);<br>
stillgfx(369, EnemyY, EnemyX);<br>
stillgfx(644, absY, absX);<br>
}<br>
if(playerEquipment[playerWeapon] == 8100 &amp;&amp; specialAmount &gt; 99){<br>
specialAtkNPC(true, 100, 600, 811);<br>
hitDiff = misc.random(playerMaxHit) + misc.random(5) + misc.random(StrPrayer) + misc.random(voidmelee);<br>
stillgfx(656, EnemyY, EnemyX);<br>
}<br>
actionInterval = getbattleTimer();<br>
lastAction = System.currentTimeMillis();<br>
}<br>
server.npcHandler.npcs[attacknpc].hitIDNPC = playerId;<br>
server.npcHandler.npcs[attacknpc].offTimerNPC = 12;<br>
server.npcHandler.npcs[attacknpc].StartKilling = playerId;<br>
server.npcHandler.npcs[attacknpc].RandomWalk = false;<br>
server.npcHandler.npcs[attacknpc].IsUnderAttack = true;<br>
actionInterval = getbattleTimer();<br>
lastAction = System.currentTimeMillis();<br>
faceNPC(attacknpc);<br>
updateRequired = true;<br>
appearanceUpdateRequired = true;<br>
if (!UseBow &amp;&amp; !UseCrossBow &amp;&amp; !UseRing){<br>
if ((EnemyHP - hitDiff) &lt; 0) {<br>
hitDiff = EnemyHP;<br>
}<br>
server.npcHandler.npcs[attacknpc].hitDiff = hitDiff;<br>
server.npcHandler.npcs[attacknpc].updateRequired = true;<br>
server.npcHandler.npcs[attacknpc].hitUpdateRequired = true;<br>
server.npcHandler.npcs[attacknpc].hit = true;<br>
}<br>
server.npcHandler.npcs[attacknpc].Killing[playerId] += hitDiff;<br>
attackedNpc = true;<br>
attackedNpcId = attacknpc;<br>
double TotalExp = 0;<br>
if (!UseBow)<br>
animationReset = System.currentTimeMillis() + 1200;<br>
if (server.npcHandler.npcs[attacknpc].npcType != 0) {<br>
if (UseBow || UseCrossBow || UseRing) {<br>
TotalExp = (double)(120<em>hitDiff);<br>
TotalExp = (double)(TotalExp</em>CombatExpRate);<br>
addSkillXP((int)(TotalExp), 4);<br>
} else if (FightType != 3) {<br>
TotalExp = (double)(120<em>hitDiff);<br>
TotalExp = (double)(TotalExp</em>CombatExpRate);<br>
addSkillXP((int)(TotalExp), SkillID);<br>
} else {<br>
TotalExp = (double)(50<em>hitDiff);<br>
TotalExp = (double)(TotalExp</em>CombatExpRate);<br>
addSkillXP((int)(TotalExp), playerAttack);<br>
addSkillXP((int)(TotalExp), playerDefence);<br>
addSkillXP((int)(TotalExp), playerStrength);<br>
}<br>
TotalExp = (double)(50<em>hitDiff);<br>
TotalExp = (double)(TotalExp</em>CombatExpRate);<br>
addSkillXP((int)(TotalExp), playerHitpoints);<br>
attackTimer = 7;<br>
specOn = false;</p>
<pre><code>				if (debug)
					sM("hitDiff=" + hitDiff + ", elapsed="
							+ (thisTime - lastAttack));
				lastAttack = System.currentTimeMillis();
			}
			return true;

		}
	}
	return false;
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attacknpc-delta/399476/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attacknpc-delta/399476/1</link>
        <pubDate>Thu, 16 Jun 2011 04:04:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-399476-1</guid>
        <source url="https://forum.moparisthebest.com/t/attacknpc-delta/399476.rss">AttackNPC(){ Delta</source>
      </item>
  </channel>
</rss>
