<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AutoCache Download How To Place It In C: Drive</title>
    <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130</link>
    <description>Okay so im having this problem where my client runs and it download the cache off dropbox then when the client fails, after it says cache download complete i check my c: drive and the cache isnt there how do i make it so when i download the cache from the client it takes it to the c drive?</description>
    
    <lastBuildDate>Sat, 15 Feb 2014 22:15:49 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>AutoCache Download How To Place It In C: Drive</title>
        <dc:creator><![CDATA[@Van_Knox Van_Knox]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/van_knox">@Van_Knox</a> wrote:</p>
          <blockquote>
              <p>[quote=“nolan2131, post:4, topic:540130”]Change:</p>
<p><code>"https://dl.dropbox.com/s/3zeasfhqv59a2fz/Vertix-RspsCache.zip"</code> in your AutoDownload</p>
<p>To:</p>
<pre><code class="lang-auto"></code></pre>
<p>Ight i did that now do u by any chance know why this is happening <code>Map Amount: 770
java.lang.ArrayIndexOutOfBoundsException: 36082
        at Stream.readSignedByte(Stream.java:168)
        at Background.&lt;init&gt;(Background.java:36)
        at client.startUp(client.java:7484)
        at RSApplet.run(RSApplet.java:101)
        at client.run(client.java:4807)
        at java.lang.Thread.run(Unknown Source)
Error: loaderror Unpacking media 80
</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/5</link>
        <pubDate>Sat, 15 Feb 2014 22:15:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540130-5</guid>
        <source url="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss">AutoCache Download How To Place It In C: Drive</source>
      </item>
      <item>
        <title>AutoCache Download How To Place It In C: Drive</title>
        <dc:creator><![CDATA[@nolan2131 nolan2131]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nolan2131">@nolan2131</a> wrote:</p>
          <blockquote>
              <p>Change:</p>
<p><code>"https://dl.dropbox.com/s/3zeasfhqv59a2fz/Vertix-RspsCache.zip"</code> in your AutoDownload</p>
<p>To:</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/4</link>
        <pubDate>Sat, 15 Feb 2014 21:32:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540130-4</guid>
        <source url="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss">AutoCache Download How To Place It In C: Drive</source>
      </item>
      <item>
        <title>AutoCache Download How To Place It In C: Drive</title>
        <dc:creator><![CDATA[@Van_Knox Van_Knox]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/van_knox">@Van_Knox</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="540130">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/nolan2131/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> nolan2131:</div>
<blockquote>
<p>Post your cache autodownloader and signlink.</p>
</blockquote>
</aside>
<p>Here is the signlink</p>
<p>[CODE]// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.<br>
// Jad home page: <a href="http://www.kpdus.com/jad.html" rel="nofollow noopener">http://www.kpdus.com/jad.html</a><br>
// Decompiler options: packimports(3)<br>
// Source File Name:   signlink.java</p>
<p>package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {

            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
            file.delete();
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}

public static String findcachedir() {
    String as[] = {"C:/"};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = "Vertix-RspsCache";
    for(int i = 0; i &lt; as.length; i++)
        try {
            String s1 = as[i];
            if(s1.length() &gt; 0) {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + "/";
        }
        catch(Exception _ex) { }
    return null;
}

private static int getuid(String s)
{
    try
    {
        File file = new File(s + "uid.dat");
        if(!file.exists() || file.length() &lt; 4L)
        {
            DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + "uid.dat"));
            dataoutputstream.writeInt((int)(Math.random() * 99999999D));
            dataoutputstream.close();
        }
    }
    catch(Exception _ex) { }
    try
    {
        DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + "uid.dat"));
        int i = datainputstream.readInt();
        datainputstream.close();
        return i + 1;
    }
    catch(Exception _ex)
    {
        return 0;
    }
}
public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}<br>
[/CODE]<br>
And the AutoDownload is</p>
<p>[CODE]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

private final int VERSION = 1; // Version of cache
private String cacheLink = "https://dl.dropbox.com/s/3zeasfhqv59a2fz/Vertix-RspsCache.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	//System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	//System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Loading new Updates....");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		//System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			//drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Finished downloading "+getArchivedName()+"!");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		//System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			//System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}<br>
[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/3</link>
        <pubDate>Sat, 15 Feb 2014 21:17:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540130-3</guid>
        <source url="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss">AutoCache Download How To Place It In C: Drive</source>
      </item>
      <item>
        <title>AutoCache Download How To Place It In C: Drive</title>
        <dc:creator><![CDATA[@nolan2131 nolan2131]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nolan2131">@nolan2131</a> wrote:</p>
          <blockquote>
              <p>Post your cache autodownloader and signlink.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/2</link>
        <pubDate>Sat, 15 Feb 2014 15:32:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540130-2</guid>
        <source url="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss">AutoCache Download How To Place It In C: Drive</source>
      </item>
      <item>
        <title>AutoCache Download How To Place It In C: Drive</title>
        <dc:creator><![CDATA[@Van_Knox Van_Knox]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/van_knox">@Van_Knox</a> wrote:</p>
          <blockquote>
              <p>Okay so im having this problem where my client runs and it download the cache off dropbox then when the client fails, after it says cache download complete i check my c: drive and the cache isnt there how do i make it so when i download the cache from the client it takes it to the c drive?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130/1</link>
        <pubDate>Sat, 15 Feb 2014 14:47:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540130-1</guid>
        <source url="https://forum.moparisthebest.com/t/autocache-download-how-to-place-it-in-c-drive/540130.rss">AutoCache Download How To Place It In C: Drive</source>
      </item>
  </channel>
</rss>
