<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Npc updating</title>
    <link>https://forum.moparisthebest.com/t/npc-updating/434175</link>
    <description>I&#39;m using a 317 client atm, don&#39;t know the name, it just says &quot;srcAllDummysRemoved.&quot;  I&#39;ve been working on this server with a good friend for quite a while now, before we had a 194 &quot;look-alike&quot; client and I didn&#39;t like it because of various reasons so I move to this client..  Main reason why I switched is because I thought it would fix this problem, which it didn&#39;t.

Every time I try to update the npc or force an animation, I get this in the client, and I lag out.  It has to be a updating problem.

[code]
Error: mopar size mismatch in getnpcpos - pos:3 psize:7
Error: T2 - 65,81,65 - 7,3222,3222 - 2,63,-1,16,5,0,0,[/code]

The npc updating, I ripped from project Insanity because the base is an older form of winterLove.

It will only update the npc when it&#39;s first created.. but after that.. nothing..  I&#39;ve tried everything.

Here it is anyways:
[code=java]
package server.lithium.model.npc;

import server.lithium.io.Stream;
import server.lithium.model.player.Entity;
import server.lithium.util.Misc;
import server.lithium.util.Utils;

public class NPC extends Entity {

    public static int maxNPCs = 3852;
    public int idx;
    public int ID;
    public int absX;
    public int absY;
    public int heightLevel = 0;
    public int dir;

    public int walkingQueueSize = 20;
    public int[] walkingQueueX = new int[walkingQueueSize];
    public int[] walkingQueueY = new int[walkingQueueSize];
    public int qReadPtr;
    public int qWritePtr;

    public boolean randomQueue = false;

    	public boolean needsClear;
	public boolean dirUpdateRequired;
	public boolean animUpdateRequired;
	public boolean hitUpdateRequired;
	public boolean forcedChatRequired;
	public boolean faceToUpdateRequired;
        public boolean requiresUpdate = false;
        public boolean chatUpdate = false;
        public boolean animUpdate = false;
        public boolean someUpdate = false;

    public String chatMessage;
    public int animNumber;
    public int animDelay = 0;
    public int FocusPointX = -1, FocusPointY = -1;

    public int qPosX;
    public int qPosY;

    public int cyclesSS = (int) (Math.random() * 20D);

    public int qRelPos = 0;
    public boolean needRespawn;
    public boolean updateRequired;
    private boolean hitUpdateRequired2;
    private boolean mask80update;
    public int moveX;
    public int moveY;
    public int direction;
    private int HP;
    private int hitDiff2;
    public boolean isDead;
    private int MaxHP;
    private int hitDiff;
    private String forcedText;

    public NPC(int npcID, int startX, int startY, int height, int index) {
	idx = index;
	ID = npcID;
	absX = startX;
	absY = startY;
	heightLevel = height;
	qPosX = startX;
	qPosY = startY;
	dir = -1;
    }
    
	
	public void forceChat(String text) {
		forcedText = text;
		forcedChatRequired = true;
		updateRequired = true;
	}

	public void forceAnim(int number) {
		animNumber = number;
		animUpdateRequired = true;
		updateRequired = true;
	}
	

	public void gfx100(int gfx){
		mask80var1 = gfx;
		mask80var2 = 6553600;
		mask80update = true;
		updateRequired = true;
	}
	
	public void gfx0(int gfx) {
		mask80var1 = gfx;
		mask80var2 = 65536;
		mask80update = true;
		updateRequired = true;
	}
	
	public void facePlayer(int player) {
		face = player + 32768;
		dirUpdateRequired = true;
		updateRequired = true;
	}

	public void turnNpc(int i, int j) {
	        FocusPointX = 2 * i + 1;
	        FocusPointY = 2 * j + 1;
	        updateRequired = true;
	}
	
	public int getNextWalkingDirection() {
		int dir;
		dir = Misc.direction(absX, absY, (absX + moveX), (absY + moveY));
		if(dir == -1) return -1;
		dir &gt;&gt;= 1;
		absX += moveX;
		absY += moveY;
		return dir;
	}

	public void getNextNPCMovement(int i) {
		//direction = -1;
		//if(NPCHandler.getNpcs()[i].freezeTimer == 0) {
			direction = getNextWalkingDirection();
		//}
	}
    
    public void addToQueue(int x, int y) {
	int next = (qWritePtr + 1) % walkingQueueSize;
	if (next == qWritePtr) {
	    return;
	}
	walkingQueueX[qWritePtr] = x;
	walkingQueueY[qWritePtr] = y;
	qWritePtr = next;
	qPosX = x;
	qPosY = y;
	qRelPos++;
    }

    public void getNextDir() {
	if (qReadPtr == qWritePtr) {
	    dir = -1;
	    return;
	}
	do {
	    dir = Utils.direction(absX, absY, walkingQueueX[qReadPtr],
		    walkingQueueY[qReadPtr]);
	    if (dir == -1) {
		qReadPtr = (qReadPtr + 1) % walkingQueueSize;
	    } else if ((dir &amp; 1) != 0) {
		return;
	    }
	} while (dir == -1 &amp;&amp; qReadPtr != qWritePtr);
	if (dir == -1) {
	    return;
	}
	dir &gt;&gt;= 1;
	absX += Utils.directionDeltaX[dir];
	absY += Utils.directionDeltaY[dir];
	qRelPos--;
    }

    public void appendChatUpdate(Stream str) {
	str.writeString(chatMessage);
    }

    public void appendAnimUpdate(Stream str) {
	str.writeWordBigEndian(animNumber);
	str.writeByte((byte) animDelay);
    }

    public void clearFlags() {
	updateRequired = false;
	forcedChatRequired = false;
	hitUpdateRequired = false;
	hitUpdateRequired2 = false;
	animUpdateRequired = false;
	dirUpdateRequired = false;
	mask80update = false;
	this.needsClear = false;
	moveX = 0;
	moveY = 0;
	direction = -1;
	FocusPointX = -1;
	FocusPointY = -1;
	dir = -1;
    }

    
    public int getNextNPCMovement(int i, int j) {
	if (moveX &gt;= 0) {
	    return 1;
	}
	return 0;
    }
    
    public void updateNPCMovement(Stream str) {
	if (dir == -1) {
	    if (requiresUpdate) {
		str.writeBits(1, 1);
		str.writeBits(2, 0);
	    } else {
		str.writeBits(1, 0);
	    }
	} else {
	    str.writeBits(1, 1);
	    str.writeBits(2, 1);
	    str.writeBits(3, Misc.xlateDirectionToClient[dir]);
	    if (requiresUpdate) {
		str.writeBits(1, 1);
	    } else {
		str.writeBits(1, 0);
	    }
	}
    }
    
	public int mask80var1 = 0;
	    public int mask80var2 = 0;
	    private int face;
	    public boolean underAttack;
	    public int attackId;
    
    public void appendMask80Update(Stream str) {
		str.writeWord(mask80var1);
	    str.writeDWord(mask80var2);
    }
    
	public void appendHitUpdate2(Stream str) {		
		if (HP &lt;= 0) {
			isDead = true;
		}
		str.writeByteA(hitDiff2); 
		if (hitDiff2 &gt; 0) {
			str.writeByteC(1); 
		} else {
			str.writeByteC(0); 
		}	
		str.writeByteA(HP); 
		str.writeByte(MaxHP); 	
	}
	
	public void appendHitUpdate(Stream str) {		
		if (HP &lt;= 0) {
			isDead = true;
		}
		str.writeByteC(hitDiff); 
		if (hitDiff &gt; 0) {
			str.writeByteS(1); 
		} else {
			str.writeByteS(0); 
		}	
		str.writeByteS(HP); 
		str.writeByteC(MaxHP); 	
	}
	
	public void appendNPCUpdateBlock(Stream str) {
		if(!updateRequired)
		    return;		
		int updateMask = 0;
		if(animUpdateRequired) 
		    updateMask |= 0x10; 
		if(hitUpdateRequired2)
		    updateMask |= 8;
		if(mask80update) 
		    updateMask |= 0x80;
		if(dirUpdateRequired) 
		    updateMask |= 0x20;
		if(forcedChatRequired)
		    updateMask |= 1;
		if(hitUpdateRequired)
		    updateMask |= 0x40;		
		if(FocusPointX != -1) 
		    updateMask |= 4;	
		
		str.writeByte((byte) updateMask);
				
		if (animUpdateRequired) 
		    appendAnimUpdate(str);
		if (hitUpdateRequired2) 
		    appendHitUpdate2(str);
		if (mask80update)
		    appendMask80Update(str);
		if (dirUpdateRequired) 
		    appendFaceEntity(str);
		if(forcedChatRequired) {
			str.writeString(forcedText);
		}
		if (hitUpdateRequired)  
		    appendHitUpdate(str);
		if(FocusPointX != -1) 
		    appendSetFocusDestination(str);
		System.out.println(&quot;updatin npcs.&quot;);
		needsClear = true;
	}
	
	private void appendSetFocusDestination(Stream str) {
	        str.writeWordBigEndian(FocusPointX);
	        str.writeWordBigEndian(FocusPointY);
	    }
	
	public void appendFaceEntity(Stream str) {
		str.writeWord(face);
	}
}
[/code]</description>
    
    <lastBuildDate>Sat, 25 Feb 2012 17:12:02 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/npc-updating/434175.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Npc updating</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>I’m using a 317 client atm, don’t know the name, it just says “srcAllDummysRemoved.”  I’ve been working on this server with a good friend for quite a while now, before we had a 194 “look-alike” client and I didn’t like it because of various reasons so I move to this client…  Main reason why I switched is because I thought it would fix this problem, which it didn’t.</p>
<p>Every time I try to update the npc or force an animation, I get this in the client, and I lag out.  It has to be a updating problem.</p>
<p><code>
Error: mopar size mismatch in getnpcpos - pos:3 psize:7
Error: T2 - 65,81,65 - 7,3222,3222 - 2,63,-1,16,5,0,0,</code></p>
<p>The npc updating, I ripped from project Insanity because the base is an older form of winterLove.</p>
<p>It will only update the npc when it’s first created… but after that… nothing…  I’ve tried everything.</p>
<p>Here it is anyways:</p>
<pre><code class="lang-auto">package server.lithium.model.npc;

import server.lithium.io.Stream;
import server.lithium.model.player.Entity;
import server.lithium.util.Misc;
import server.lithium.util.Utils;

public class NPC extends Entity {

    public static int maxNPCs = 3852;
    public int idx;
    public int ID;
    public int absX;
    public int absY;
    public int heightLevel = 0;
    public int dir;

    public int walkingQueueSize = 20;
    public int[] walkingQueueX = new int[walkingQueueSize];
    public int[] walkingQueueY = new int[walkingQueueSize];
    public int qReadPtr;
    public int qWritePtr;

    public boolean randomQueue = false;

    	public boolean needsClear;
	public boolean dirUpdateRequired;
	public boolean animUpdateRequired;
	public boolean hitUpdateRequired;
	public boolean forcedChatRequired;
	public boolean faceToUpdateRequired;
        public boolean requiresUpdate = false;
        public boolean chatUpdate = false;
        public boolean animUpdate = false;
        public boolean someUpdate = false;

    public String chatMessage;
    public int animNumber;
    public int animDelay = 0;
    public int FocusPointX = -1, FocusPointY = -1;

    public int qPosX;
    public int qPosY;

    public int cyclesSS = (int) (Math.random() * 20D);

    public int qRelPos = 0;
    public boolean needRespawn;
    public boolean updateRequired;
    private boolean hitUpdateRequired2;
    private boolean mask80update;
    public int moveX;
    public int moveY;
    public int direction;
    private int HP;
    private int hitDiff2;
    public boolean isDead;
    private int MaxHP;
    private int hitDiff;
    private String forcedText;

    public NPC(int npcID, int startX, int startY, int height, int index) {
	idx = index;
	ID = npcID;
	absX = startX;
	absY = startY;
	heightLevel = height;
	qPosX = startX;
	qPosY = startY;
	dir = -1;
    }
    
	
	public void forceChat(String text) {
		forcedText = text;
		forcedChatRequired = true;
		updateRequired = true;
	}

	public void forceAnim(int number) {
		animNumber = number;
		animUpdateRequired = true;
		updateRequired = true;
	}
	

	public void gfx100(int gfx){
		mask80var1 = gfx;
		mask80var2 = 6553600;
		mask80update = true;
		updateRequired = true;
	}
	
	public void gfx0(int gfx) {
		mask80var1 = gfx;
		mask80var2 = 65536;
		mask80update = true;
		updateRequired = true;
	}
	
	public void facePlayer(int player) {
		face = player + 32768;
		dirUpdateRequired = true;
		updateRequired = true;
	}

	public void turnNpc(int i, int j) {
	        FocusPointX = 2 * i + 1;
	        FocusPointY = 2 * j + 1;
	        updateRequired = true;
	}
	
	public int getNextWalkingDirection() {
		int dir;
		dir = Misc.direction(absX, absY, (absX + moveX), (absY + moveY));
		if(dir == -1) return -1;
		dir &gt;&gt;= 1;
		absX += moveX;
		absY += moveY;
		return dir;
	}

	public void getNextNPCMovement(int i) {
		//direction = -1;
		//if(NPCHandler.getNpcs()[i].freezeTimer == 0) {
			direction = getNextWalkingDirection();
		//}
	}
    
    public void addToQueue(int x, int y) {
	int next = (qWritePtr + 1) % walkingQueueSize;
	if (next == qWritePtr) {
	    return;
	}
	walkingQueueX[qWritePtr] = x;
	walkingQueueY[qWritePtr] = y;
	qWritePtr = next;
	qPosX = x;
	qPosY = y;
	qRelPos++;
    }

    public void getNextDir() {
	if (qReadPtr == qWritePtr) {
	    dir = -1;
	    return;
	}
	do {
	    dir = Utils.direction(absX, absY, walkingQueueX[qReadPtr],
		    walkingQueueY[qReadPtr]);
	    if (dir == -1) {
		qReadPtr = (qReadPtr + 1) % walkingQueueSize;
	    } else if ((dir &amp; 1) != 0) {
		return;
	    }
	} while (dir == -1 &amp;&amp; qReadPtr != qWritePtr);
	if (dir == -1) {
	    return;
	}
	dir &gt;&gt;= 1;
	absX += Utils.directionDeltaX[dir];
	absY += Utils.directionDeltaY[dir];
	qRelPos--;
    }

    public void appendChatUpdate(Stream str) {
	str.writeString(chatMessage);
    }

    public void appendAnimUpdate(Stream str) {
	str.writeWordBigEndian(animNumber);
	str.writeByte((byte) animDelay);
    }

    public void clearFlags() {
	updateRequired = false;
	forcedChatRequired = false;
	hitUpdateRequired = false;
	hitUpdateRequired2 = false;
	animUpdateRequired = false;
	dirUpdateRequired = false;
	mask80update = false;
	this.needsClear = false;
	moveX = 0;
	moveY = 0;
	direction = -1;
	FocusPointX = -1;
	FocusPointY = -1;
	dir = -1;
    }

    
    public int getNextNPCMovement(int i, int j) {
	if (moveX &gt;= 0) {
	    return 1;
	}
	return 0;
    }
    
    public void updateNPCMovement(Stream str) {
	if (dir == -1) {
	    if (requiresUpdate) {
		str.writeBits(1, 1);
		str.writeBits(2, 0);
	    } else {
		str.writeBits(1, 0);
	    }
	} else {
	    str.writeBits(1, 1);
	    str.writeBits(2, 1);
	    str.writeBits(3, Misc.xlateDirectionToClient[dir]);
	    if (requiresUpdate) {
		str.writeBits(1, 1);
	    } else {
		str.writeBits(1, 0);
	    }
	}
    }
    
	public int mask80var1 = 0;
	    public int mask80var2 = 0;
	    private int face;
	    public boolean underAttack;
	    public int attackId;
    
    public void appendMask80Update(Stream str) {
		str.writeWord(mask80var1);
	    str.writeDWord(mask80var2);
    }
    
	public void appendHitUpdate2(Stream str) {		
		if (HP &lt;= 0) {
			isDead = true;
		}
		str.writeByteA(hitDiff2); 
		if (hitDiff2 &gt; 0) {
			str.writeByteC(1); 
		} else {
			str.writeByteC(0); 
		}	
		str.writeByteA(HP); 
		str.writeByte(MaxHP); 	
	}
	
	public void appendHitUpdate(Stream str) {		
		if (HP &lt;= 0) {
			isDead = true;
		}
		str.writeByteC(hitDiff); 
		if (hitDiff &gt; 0) {
			str.writeByteS(1); 
		} else {
			str.writeByteS(0); 
		}	
		str.writeByteS(HP); 
		str.writeByteC(MaxHP); 	
	}
	
	public void appendNPCUpdateBlock(Stream str) {
		if(!updateRequired)
		    return;		
		int updateMask = 0;
		if(animUpdateRequired) 
		    updateMask |= 0x10; 
		if(hitUpdateRequired2)
		    updateMask |= 8;
		if(mask80update) 
		    updateMask |= 0x80;
		if(dirUpdateRequired) 
		    updateMask |= 0x20;
		if(forcedChatRequired)
		    updateMask |= 1;
		if(hitUpdateRequired)
		    updateMask |= 0x40;		
		if(FocusPointX != -1) 
		    updateMask |= 4;	
		
		str.writeByte((byte) updateMask);
				
		if (animUpdateRequired) 
		    appendAnimUpdate(str);
		if (hitUpdateRequired2) 
		    appendHitUpdate2(str);
		if (mask80update)
		    appendMask80Update(str);
		if (dirUpdateRequired) 
		    appendFaceEntity(str);
		if(forcedChatRequired) {
			str.writeString(forcedText);
		}
		if (hitUpdateRequired)  
		    appendHitUpdate(str);
		if(FocusPointX != -1) 
		    appendSetFocusDestination(str);
		System.out.println("updatin npcs.");
		needsClear = true;
	}
	
	private void appendSetFocusDestination(Stream str) {
	        str.writeWordBigEndian(FocusPointX);
	        str.writeWordBigEndian(FocusPointY);
	    }
	
	public void appendFaceEntity(Stream str) {
		str.writeWord(face);
	}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-updating/434175/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-updating/434175/1</link>
        <pubDate>Sat, 25 Feb 2012 17:12:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-434175-1</guid>
        <source url="https://forum.moparisthebest.com/t/npc-updating/434175.rss">Npc updating</source>
      </item>
  </channel>
</rss>
