<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to make myself admin on a 508</title>
    <link>https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337</link>
    <description>Hi, i want to make myself admin on a 508  (palidino76)  i know its in login.java but where to find the the text where i can cahnge it to my name? [code]/*
 * Class Login
 *
 * Version 1.0
 *
 * Thursday, August 14, 2008
 *
 * Created by admin
 */

package palidino76.rs2.io;


import palidino76.rs2.Server;
import palidino76.rs2.Engine;
import palidino76.rs2.players.Player;
import palidino76.rs2.util.Misc;


public class Login {

    /**
     * Validate a connection.
     * &lt;p&gt;To  prevent milliseconds waiting for bytes, everytime a new byte is needed to be read
     * it is in a new stage which takes over 50 milliseconds before moving on to.
     * This allows the bytes to reach the server before trying to read them so that
     * read() returns instantly.
     * @param p The Player which the frame should be created for.
     */
    public void login(Player p) {

        if (p == null || p.stream == null) {
            return;
        }
        long serverSessionKey = ((long) (Math.random() * 99999999D) &lt;&lt; 32)
                + (long) (Math.random() * 99999999D);
        long clientSessionKey = 0;
        int returnCode = 2;

        if (p.loginStage &lt; -1) {
            updateServer(p);
        } else if (p.loginStage == 0) {
            try {
                if (!fillStream(p, 2)) {
                    return;
                }
            } catch (Exception e) {
                return;
            }
            int connectionType = p.stream.readUnsignedByte();

            if (connectionType == 15) {
                updateServer(p);
                p.loginStage = -5;
                return;
            }
            if (connectionType != 14) {
                p.loginStage = -1;
                return;
            }
            int longPlayerName = p.stream.readUnsignedByte();

            p.stream.writeByte(0);
            p.stream.writeQWord(serverSessionKey);
            directFlushStream(p);
            p.loginStage++;
        } else if (p.loginStage == 1) {
            try {
                if (!fillStream(p, 3)) {
                    return;
                }
            } catch (Exception e) {
                return;
            }
            int loginType = p.stream.readUnsignedByte();

            if (loginType != 16 &amp;&amp; loginType != 18 &amp;&amp; loginType != 14) {
                p.loginStage = -1;
                return;
            }
            p.loginStage++;
        } else if (p.loginStage == 2) {
            int loginPacketSize = p.stream.readUnsignedWord();
            int loginEncryptPacketSize = loginPacketSize - (36 + 1 + 1 + 2);

            if (loginEncryptPacketSize &lt;= 0) {
                p.loginStage = -1;
                return;
            }
            try {
                if (!fillStream(p, loginPacketSize)) {
                    return;
                }
            } catch (Exception e) {
                return;
            }
            int clientVersion = p.stream.readDWord();

            if (clientVersion != 508) {
                p.loginStage = -1;
                return;
            }
            p.stream.readUnsignedByte();
            p.stream.readUnsignedWord();
            p.stream.readUnsignedWord();
            for (int i = 0; i &lt; 24; i++) {
                int cacheIDX = p.stream.readUnsignedByte();
            }
            String junk = p.stream.readString();

            for (int i = 0; i &lt; 29; i++) {
                int junk2 = p.stream.readDWord();
            }
            loginEncryptPacketSize--;
            int junk29 = p.stream.readUnsignedByte();
            int encryption = p.stream.readUnsignedByte();

            if (encryption != 10 &amp;&amp; encryption != 64) {
                p.loginStage = -1;
                return;
            }
            clientSessionKey = p.stream.readQWord();
            serverSessionKey = p.stream.readQWord();
            p.username = Misc.longToString(p.stream.readQWord()).toLowerCase().replaceAll(&quot;_&quot;, &quot; &quot;).trim();
            if (p.username == null) {
                p.loginStage = -1;
                p.username = &quot;&quot;;
                return;
            }
            for (int i = 0; i &lt; p.username.length(); i++) {
                Character c = new Character(p.username.charAt(i));

                if (!Character.isLetterOrDigit(c) &amp;&amp; !Character.isSpaceChar(c)) {
                    p.loginStage = -1;
                    p.username = &quot;&quot;;
                    return;
                }
            }
            if (playerOnline(p.username, p)) {
                returnCode = 5;
            }
            if (checkBannedUsers(p.username)) {
                returnCode = 4;
            }
            String password = p.stream.readString();

            if (password == null) {
                p.loginStage = -1;
                return;
            }
            for (int i = 0; i &lt; password.length(); i++) {
                Character c = new Character(password.charAt(i));

                if (!Character.isLetterOrDigit(c) &amp;&amp; !Character.isSpaceChar(c)) {
                    p.loginStage = -1;
                    return;
                }
            }
            Engine.fileManager.loadCharacter(p);
            if (password != null &amp;&amp; p.password != null &amp;&amp; p.password != &quot;&quot;
                    &amp;&amp; !p.password.equals(password)) {
                returnCode = 3;
            } else {
                p.password = password;
            }
            if (p.username.equals(p.makerusername)) {
                p.rights = 2;
            }
            p.stream.writeByte(returnCode);
            p.stream.writeByte(p.rights);
            p.stream.writeByte(0);
            p.stream.writeByte(0);
            p.stream.writeByte(0);
            p.stream.writeByte(1);
            p.stream.writeByte(0);
            p.stream.writeByte(p.playerId);
            p.stream.writeByte(0);
            directFlushStream(p);
            if (p.teleportToX == -1 &amp;&amp; p.teleportToY == -1) {
                p.setCoords(3502, 3485, 0); 
            }
            Engine.playerMovement.getNextPlayerMovement(p);
            p.frames.setMapRegion(p);
            directFlushStream(p);
            if (returnCode != 2) {
                Engine.fileManager.appendData(
                        &quot;characters/ips/&quot; + p.username + &quot;.txt&quot;,
                        &quot;[&quot; + Server.socketListener.getAddress(p.socket.socket)
                        + &quot;]: failed login.&quot;);
                return;
            }
            Engine.fileManager.appendData(
                    &quot;characters/ips/&quot; + p.username + &quot;.txt&quot;,
                    &quot;[&quot; + Server.socketListener.getAddress(p.socket.socket)
                    + &quot;]: successful login.&quot;);
            p.frames.setWelcome(p);
            p.frames.setInterfaces(p);
            p.frames.setConfigs(p);
            p.frames.connecttofserver(p);
            for (int i = 0; i &lt; p.skillLvl.length; i++) {
                p.frames.setSkillLvl(p, i);
            }
            p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);
            p.frames.setItems(p, 387, 28, 93, p.equipment, p.equipmentN);
            p.frames.setPlayerOption(p, &quot;null&quot;, 1);
            p.canAttackPlayer(p);
            p.checkForAttackOption();
            p.frames.setPlayerOption(p, &quot;Follow&quot;, 2);
            p.frames.setPlayerOption(p, &quot;Trade&quot;, 3);
            /*
             * For Starting Messages, Go To The 
             * Welcomescreen Case In Actionbuttions
             * Or Use The Quicksetup System
             * - Luke
             */
            p.frames.setConfig(p, 172, p.autoRetaliate);
            p.frames.setConfig(p, 43, p.AttackStyle);
            p.frames.setString(p, &quot;UmairScape Temp Command Area&quot;, 274, 6);
            p.frames.setString(p, &quot;glow dag&quot;, 747, 7);
            p.frames.setString(p, &quot;Fury&quot;, 274, 8);
            p.frames.setString(p, &quot;Firecape&quot;, 274, 9);
            p.frames.setString(p, &quot;Dragon boots&quot;, 274, 10);
            p.frames.setString(p, &quot;DFS&quot;, 274, 11);
            p.frames.setString(p, &quot;Master All Skills&quot;, 274, 12);
            p.playerWeapon.setWeapon();
            p.calculateEquipmentBonus();
            p.online = true;
            p.appearanceUpdateReq = true;
            p.updateReq = true;
            p.runEnergyUpdateReq = true;
            p.specialAmountUpdateReq = true;
        }
    }

    /**
     * If the connection is the client&#39;s update server than send the keys.
     * @param p The Player which the frame should be created for.
     */
    private void updateServer(Player p) {
        if (p == null) {
            return;
        }
        try {
            if (p.loginStage == 0) {
                if (!fillStream(p, 3)) {
                    return;
                }
                p.stream.writeByte(0);
                directFlushStream(p);
            } else if (p.loginStage == -5) {
                if (!fillStream(p, 8)) {
                    return;
                }
                for (int i = 0; i &lt; Misc.uKeys.length; i++) {
                    p.stream.writeByte(Misc.uKeys[i]);
                }
                directFlushStream(p);
                p.loginStage = -1;
            }
        } catch (Exception exception) {}
    }

    /**
     * Make sure the player isn&#39;t already online.
     * @param name The name to compare with.
     * @param _p The Player which the frame should be created for.
     */
    private boolean playerOnline(String name, Player _p) {
        for (Player p : Engine.players) {
            if (p != null &amp;&amp; _p.playerId != p.playerId) {
                if (p.username.equalsIgnoreCase(name)) {
                    return true;
                }
            }
        }
        return false;
    }

    /**
     * Checks if a user is banned.
     * @param username The name to check.
     * @return Returns if the name was found.
     */
    public boolean checkBannedUsers(String username) {
        if (username == null) {
            return true;
        }
        for (int i = 0; i &lt; Server.bannedUsers.length; i++) {
            if (Server.bannedUsers[i] != null
                    &amp;&amp; username.equalsIgnoreCase(Server.bannedUsers[i])) {
                return true;
            }
        }
        return false;
    }

    /**
     * Check and read any incoming bytes.
     * @param p The Player which the frame should be created for.
     * @param forceRead How many bytes to read from the buffer.
     */
    private boolean fillStream(Player p, int forceRead) throws Exception {
        if (p == null) {
            return false;
        }
        if (forceRead &gt;= 500) {
            return false;
        }
        if (p.socket.avail() &lt; forceRead) {
            return false;
        }
        p.stream.inOffset = 0;
        p.socket.read(forceRead);
        return true;
    }

    /**
     * Send the bytes in the stream&#39;s outBuffer directly to the client.
     * @param p The Player which the frame should be created for.
     */
    private void directFlushStream(Player p) {
        if (p == null) {
            return;
        }
        try {
            p.socket.write(p.stream.outBuffer, 0, p.stream.outOffset);
            p.stream.outOffset = 0;
        } catch (Exception exception) {
            exception.printStackTrace();
        }
    }
}
[/code]</description>
    
    <lastBuildDate>Thu, 20 Nov 2008 16:13:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to make myself admin on a 508</title>
        <dc:creator><![CDATA[@dsv.13 dsv.13]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dsv.13">@dsv.13</a> wrote:</p>
          <blockquote>
              <p>ty[br][br][size=1]Posted on: November 20, 2008, 10:45:08 am[/size][hr]hmm its not working:?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/3</link>
        <pubDate>Thu, 20 Nov 2008 16:13:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-245337-3</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337.rss">How to make myself admin on a 508</source>
      </item>
      <item>
        <title>How to make myself admin on a 508</title>
        <dc:creator><![CDATA[@Prima Prima]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/prima">@Prima</a> wrote:</p>
          <blockquote>
              <p>Above:</p>
<pre><code class="lang-auto">p.stream.writeByte(returnCode);</code></pre>
<p>Add:</p>
<p><code>if (p.username.equals("YourNameHere")) {
        p.rights = 2;
}</code></p>
<p>Replace ‘YourNameHere’ with the name of the character you want to give ownership rights.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/2</link>
        <pubDate>Thu, 20 Nov 2008 15:58:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-245337-2</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337.rss">How to make myself admin on a 508</source>
      </item>
      <item>
        <title>How to make myself admin on a 508</title>
        <dc:creator><![CDATA[@dsv.13 dsv.13]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dsv.13">@dsv.13</a> wrote:</p>
          <blockquote>
              <p>Hi, i want to make myself admin on a 508  (palidino76)  i know its in login.java but where to find the the text where i can cahnge it to my name? [code]/*</p>
<ul>
<li>Class Login</li>
<li>
</li>
<li>Version 1.0</li>
<li>
</li>
<li>Thursday, August 14, 2008</li>
<li>
</li>
<li>Created by admin<br>
*/</li>
</ul>
<p>package <a href="http://palidino76.rs2.io" rel="nofollow noopener">palidino76.rs2.io</a>;</p>
<p>import palidino76.rs2.Server;<br>
import palidino76.rs2.Engine;<br>
import palidino76.rs2.players.Player;<br>
import palidino76.rs2.util.Misc;</p>
<p>public class Login {</p>
<pre><code>/**
 * Validate a connection.
 * &lt;p&gt;To  prevent milliseconds waiting for bytes, everytime a new byte is needed to be read
 * it is in a new stage which takes over 50 milliseconds before moving on to.
 * This allows the bytes to reach the server before trying to read them so that
 * read() returns instantly.
 * @param p The Player which the frame should be created for.
 */
public void login(Player p) {

    if (p == null || p.stream == null) {
        return;
    }
    long serverSessionKey = ((long) (Math.random() * 99999999D) &lt;&lt; 32)
            + (long) (Math.random() * 99999999D);
    long clientSessionKey = 0;
    int returnCode = 2;

    if (p.loginStage &lt; -1) {
        updateServer(p);
    } else if (p.loginStage == 0) {
        try {
            if (!fillStream(p, 2)) {
                return;
            }
        } catch (Exception e) {
            return;
        }
        int connectionType = p.stream.readUnsignedByte();

        if (connectionType == 15) {
            updateServer(p);
            p.loginStage = -5;
            return;
        }
        if (connectionType != 14) {
            p.loginStage = -1;
            return;
        }
        int longPlayerName = p.stream.readUnsignedByte();

        p.stream.writeByte(0);
        p.stream.writeQWord(serverSessionKey);
        directFlushStream(p);
        p.loginStage++;
    } else if (p.loginStage == 1) {
        try {
            if (!fillStream(p, 3)) {
                return;
            }
        } catch (Exception e) {
            return;
        }
        int loginType = p.stream.readUnsignedByte();

        if (loginType != 16 &amp;&amp; loginType != 18 &amp;&amp; loginType != 14) {
            p.loginStage = -1;
            return;
        }
        p.loginStage++;
    } else if (p.loginStage == 2) {
        int loginPacketSize = p.stream.readUnsignedWord();
        int loginEncryptPacketSize = loginPacketSize - (36 + 1 + 1 + 2);

        if (loginEncryptPacketSize &lt;= 0) {
            p.loginStage = -1;
            return;
        }
        try {
            if (!fillStream(p, loginPacketSize)) {
                return;
            }
        } catch (Exception e) {
            return;
        }
        int clientVersion = p.stream.readDWord();

        if (clientVersion != 508) {
            p.loginStage = -1;
            return;
        }
        p.stream.readUnsignedByte();
        p.stream.readUnsignedWord();
        p.stream.readUnsignedWord();
        for (int i = 0; i &lt; 24; i++) {
            int cacheIDX = p.stream.readUnsignedByte();
        }
        String junk = p.stream.readString();

        for (int i = 0; i &lt; 29; i++) {
            int junk2 = p.stream.readDWord();
        }
        loginEncryptPacketSize--;
        int junk29 = p.stream.readUnsignedByte();
        int encryption = p.stream.readUnsignedByte();

        if (encryption != 10 &amp;&amp; encryption != 64) {
            p.loginStage = -1;
            return;
        }
        clientSessionKey = p.stream.readQWord();
        serverSessionKey = p.stream.readQWord();
        p.username = Misc.longToString(p.stream.readQWord()).toLowerCase().replaceAll("_", " ").trim();
        if (p.username == null) {
            p.loginStage = -1;
            p.username = "";
            return;
        }
        for (int i = 0; i &lt; p.username.length(); i++) {
            Character c = new Character(p.username.charAt(i));

            if (!Character.isLetterOrDigit(c) &amp;&amp; !Character.isSpaceChar(c)) {
                p.loginStage = -1;
                p.username = "";
                return;
            }
        }
        if (playerOnline(p.username, p)) {
            returnCode = 5;
        }
        if (checkBannedUsers(p.username)) {
            returnCode = 4;
        }
        String password = p.stream.readString();

        if (password == null) {
            p.loginStage = -1;
            return;
        }
        for (int i = 0; i &lt; password.length(); i++) {
            Character c = new Character(password.charAt(i));

            if (!Character.isLetterOrDigit(c) &amp;&amp; !Character.isSpaceChar(c)) {
                p.loginStage = -1;
                return;
            }
        }
        Engine.fileManager.loadCharacter(p);
        if (password != null &amp;&amp; p.password != null &amp;&amp; p.password != ""
                &amp;&amp; !p.password.equals(password)) {
            returnCode = 3;
        } else {
            p.password = password;
        }
        if (p.username.equals(p.makerusername)) {
            p.rights = 2;
        }
        p.stream.writeByte(returnCode);
        p.stream.writeByte(p.rights);
        p.stream.writeByte(0);
        p.stream.writeByte(0);
        p.stream.writeByte(0);
        p.stream.writeByte(1);
        p.stream.writeByte(0);
        p.stream.writeByte(p.playerId);
        p.stream.writeByte(0);
        directFlushStream(p);
        if (p.teleportToX == -1 &amp;&amp; p.teleportToY == -1) {
            p.setCoords(3502, 3485, 0); 
        }
        Engine.playerMovement.getNextPlayerMovement(p);
        p.frames.setMapRegion(p);
        directFlushStream(p);
        if (returnCode != 2) {
            Engine.fileManager.appendData(
                    "characters/ips/" + p.username + ".txt",
                    "[" + Server.socketListener.getAddress(p.socket.socket)
                    + "]: failed login.");
            return;
        }
        Engine.fileManager.appendData(
                "characters/ips/" + p.username + ".txt",
                "[" + Server.socketListener.getAddress(p.socket.socket)
                + "]: successful login.");
        p.frames.setWelcome(p);
        p.frames.setInterfaces(p);
        p.frames.setConfigs(p);
        p.frames.connecttofserver(p);
        for (int i = 0; i &lt; p.skillLvl.length; i++) {
            p.frames.setSkillLvl(p, i);
        }
        p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);
        p.frames.setItems(p, 387, 28, 93, p.equipment, p.equipmentN);
        p.frames.setPlayerOption(p, "null", 1);
        p.canAttackPlayer(p);
        p.checkForAttackOption();
        p.frames.setPlayerOption(p, "Follow", 2);
        p.frames.setPlayerOption(p, "Trade", 3);
        /*
         * For Starting Messages, Go To The 
         * Welcomescreen Case In Actionbuttions
         * Or Use The Quicksetup System
         * - Luke
         */
        p.frames.setConfig(p, 172, p.autoRetaliate);
        p.frames.setConfig(p, 43, p.AttackStyle);
        p.frames.setString(p, "UmairScape Temp Command Area", 274, 6);
        p.frames.setString(p, "glow dag", 747, 7);
        p.frames.setString(p, "Fury", 274, 8);
        p.frames.setString(p, "Firecape", 274, 9);
        p.frames.setString(p, "Dragon boots", 274, 10);
        p.frames.setString(p, "DFS", 274, 11);
        p.frames.setString(p, "Master All Skills", 274, 12);
        p.playerWeapon.setWeapon();
        p.calculateEquipmentBonus();
        p.online = true;
        p.appearanceUpdateReq = true;
        p.updateReq = true;
        p.runEnergyUpdateReq = true;
        p.specialAmountUpdateReq = true;
    }
}

/**
 * If the connection is the client's update server than send the keys.
 * @param p The Player which the frame should be created for.
 */
private void updateServer(Player p) {
    if (p == null) {
        return;
    }
    try {
        if (p.loginStage == 0) {
            if (!fillStream(p, 3)) {
                return;
            }
            p.stream.writeByte(0);
            directFlushStream(p);
        } else if (p.loginStage == -5) {
            if (!fillStream(p, 8)) {
                return;
            }
            for (int i = 0; i &lt; Misc.uKeys.length; i++) {
                p.stream.writeByte(Misc.uKeys[i]);
            }
            directFlushStream(p);
            p.loginStage = -1;
        }
    } catch (Exception exception) {}
}

/**
 * Make sure the player isn't already online.
 * @param name The name to compare with.
 * @param _p The Player which the frame should be created for.
 */
private boolean playerOnline(String name, Player _p) {
    for (Player p : Engine.players) {
        if (p != null &amp;&amp; _p.playerId != p.playerId) {
            if (p.username.equalsIgnoreCase(name)) {
                return true;
            }
        }
    }
    return false;
}

/**
 * Checks if a user is banned.
 * @param username The name to check.
 * @return Returns if the name was found.
 */
public boolean checkBannedUsers(String username) {
    if (username == null) {
        return true;
    }
    for (int i = 0; i &lt; Server.bannedUsers.length; i++) {
        if (Server.bannedUsers[i] != null
                &amp;&amp; username.equalsIgnoreCase(Server.bannedUsers[i])) {
            return true;
        }
    }
    return false;
}

/**
 * Check and read any incoming bytes.
 * @param p The Player which the frame should be created for.
 * @param forceRead How many bytes to read from the buffer.
 */
private boolean fillStream(Player p, int forceRead) throws Exception {
    if (p == null) {
        return false;
    }
    if (forceRead &gt;= 500) {
        return false;
    }
    if (p.socket.avail() &lt; forceRead) {
        return false;
    }
    p.stream.inOffset = 0;
    p.socket.read(forceRead);
    return true;
}

/**
 * Send the bytes in the stream's outBuffer directly to the client.
 * @param p The Player which the frame should be created for.
 */
private void directFlushStream(Player p) {
    if (p == null) {
        return;
    }
    try {
        p.socket.write(p.stream.outBuffer, 0, p.stream.outOffset);
        p.stream.outOffset = 0;
    } catch (Exception exception) {
        exception.printStackTrace();
    }
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337/1</link>
        <pubDate>Thu, 20 Nov 2008 15:23:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-245337-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-make-myself-admin-on-a-508/245337.rss">How to make myself admin on a 508</source>
      </item>
  </channel>
</rss>
