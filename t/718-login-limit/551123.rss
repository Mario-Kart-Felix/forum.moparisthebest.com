<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>718 Login limit</title>
    <link>https://forum.moparisthebest.com/t/718-login-limit/551123</link>
    <description>so im trying to change the login limit to three instead of two, on the same IP address.

I&#39;ve gone into Loginpacketsdecoder and change it to this (session.getIP()) &gt; 3)
but after compiling i still get the exceed limit error. Any Ideas?

Loginpacketdecoder.java:
[code]package com.rs.net.decoders;

import com.rs.Settings;
import com.rs.cache.Cache;
import com.rs.game.World;
import com.rs.game.player.Player;
import com.rs.io.InputStream;
import com.rs.net.Session;
import com.rs.utils.AntiFlood;
import com.rs.utils.IsaacKeyPair;
import com.rs.utils.Logger;
import com.rs.utils.MachineInformation;
import com.rs.utils.SerializableFilesManager;
import com.rs.utils.Encrypt;
import com.rs.utils.Utils;

/**
* CREDITS:
* @Sean
* @Thomas (KTHILLMAN)
**/

public final class LoginPacketsDecoder extends Decoder {

	public LoginPacketsDecoder(Session session) {
		super(session);
	}

	@Override
	public void decode(InputStream stream) {
		session.setDecoder(-1);
		int packetId = stream.readUnsignedByte();
		if (World.exiting_start != 0) {
			session.getLoginPackets().sendClientPacket(14);
			return;
		}
		int packetSize = stream.readUnsignedShort();
		if (packetSize != stream.getRemaining()) {
			session.getChannel().close();
			return;
		}
		int revision = stream.readInt();
		int sub = stream.readInt();
		if (revision != Settings.CLIENT_BUILD || sub != Settings.CUSTOM_CLIENT_BUILD) {
			session.getLoginPackets().sendClientPacket(6);
			return;
		}
		if (packetId == 16 || packetId == 18) { // 16 world login
			decodeWorldLogin(stream);
		} else if (packetId == 19) {
			decodeLobbyLogin(stream);
		} else {
			if (Settings.DEBUG)
				Logger.log(this, &quot;PacketId &quot; + packetId);
			session.getChannel().close();
		}
	}

	private void decodeLobbyLogin(InputStream stream) {
		if(stream.getRemaining() &gt;= 2) {
			int securePayloadSize = stream.readUnsignedShort();

			if(stream.getRemaining() &gt;= securePayloadSize) {
				byte[] secureBytes = new byte[securePayloadSize];
				stream.readBytes(secureBytes);

				InputStream securePayload = new InputStream(Utils.cryptRSA(secureBytes, Settings.PRIVATE_EXPONENT, Settings.MODULUS));

				int blockOpcode = securePayload.readUnsignedByte();
				if(blockOpcode != 10) {
					try {
						throw new Exception(&quot;Invalid opcode : &quot; + blockOpcode);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				int[] key = new int[4];
				for (int i = 0; i &lt; key.length; i++) {
					key[i] = securePayload.readInt();
				}


				long hash = securePayload.readLong();

				if (hash != 0) {
					try {
						throw new Exception(&quot;Invalid hash : &quot; + hash);
					} catch (Exception e) {
						e.printStackTrace();
					}
				}

				String password = securePayload.readString();
                                password = Encrypt.encryptSHA1(password);

				long[] lseeds = new long[2];
				for (int i = 0; i &lt; 2; i++)
					lseeds[i] = securePayload.readLong();

				byte[] block = new byte[stream.getRemaining()];
				stream.readBytes(block);
				InputStream xteaBuffer = new InputStream(Utils.decipher(key, block));

				boolean decodeAsString = xteaBuffer.readByte() == 1;

				String username = decodeAsString ?  xteaBuffer.readString() : Utils.decodeBase37(xteaBuffer.readLong());

				xteaBuffer.readByte();

				byte[] randomData = new byte[24];
				for (int i = 0; i &lt; randomData.length; i++)
					randomData[i] = (byte) (xteaBuffer.readByte() &amp; 0xFF);

				xteaBuffer.readString();

				int indexFiles  = xteaBuffer.readByte() &amp; 0xff;

				int[] crcValues = new int[indexFiles];

				for (int i = 0; i &lt; crcValues.length; i++)
					crcValues[i] = xteaBuffer.readInt(); 

				int[] serverKeys = new int[key.length];

				for (int i = 0; i &lt; key.length; i++)
					serverKeys[i] = key[i] + 50;

				if (Utils.invalidAccountName(username)) {
					session.getLoginPackets().sendClientPacket(3);
					return;
				}
				if (World.getPlayers().size() &gt;= Settings.PLAYERS_LIMIT - 10) {
					session.getLoginPackets().sendClientPacket(7);
					return;
				}
				if (World.containsPlayer(username) || World.containsLobbyPlayer(username)) {
					session.getLoginPackets().sendClientPacket(5);
					return;
				}
				if (AntiFlood.getSessionsIP(session.getIP()) &gt; 3) {
					session.getLoginPackets().sendClientPacket(9);
					return;
				}
				Player player;
				if (!SerializableFilesManager.containsPlayer(username)) {
					player = new Player(password);
				} else {
					player = SerializableFilesManager.loadPlayer(username);
					if (player == null) {
						session.getLoginPackets().sendClientPacket(20);
						return;
					}
					if (!SerializableFilesManager.createBackup(username)) {
						session.getLoginPackets().sendClientPacket(20);
						return;
					}
					if (!password.equals(player.getPassword())) {
						session.getLoginPackets().sendClientPacket(3);
						return;
					}
				}
				if (player.isPermBanned() || player.getBanned() &gt; Utils.currentTimeMillis()) {
					session.getLoginPackets().sendClientPacket(4);
					return;
				}
				player.init(session, username, new IsaacKeyPair(key));
				session.setEncoder(1, player);
				session.getLoginPackets().sendLobbyDetails(player);
				session.setDecoder(3, player);
				session.setEncoder(2, player);
				player.startLobby(player);
				SerializableFilesManager.savePlayer(player);
			}
		}
	}

	public void decodeWorldLogin(InputStream stream) {
		stream.readUnsignedByte();
		int rsaBlockSize = stream.readUnsignedShort();
		if (rsaBlockSize &gt; stream.getRemaining()) {
			session.getLoginPackets().sendClientPacket(10);
			return;
		}
		byte[] data = new byte[rsaBlockSize];
		stream.readBytes(data, 0, rsaBlockSize);
		InputStream rsaStream = new InputStream(Utils.cryptRSA(data, Settings.PRIVATE_EXPONENT, Settings.MODULUS));
		if (rsaStream.readUnsignedByte() != 10) {
			session.getLoginPackets().sendClientPacket(10);
			return;
		}
		int[] isaacKeys = new int[4];
		for (int i = 0; i &lt; isaacKeys.length; i++) {
			isaacKeys[i] = rsaStream.readInt();
		}
		if (rsaStream.readLong() != 0L) { // rsa block check, pass part
			session.getLoginPackets().sendClientPacket(10);
			return;
		}
		String password = rsaStream.readString();
		if (password.length() &gt; 30 || password.length() &lt; 3) {
			session.getLoginPackets().sendClientPacket(3);
			return;
		}
		;
		rsaStream.readLong();
		rsaStream.readLong(); // random value
		rsaStream.readLong(); // random value
		stream.decodeXTEA(isaacKeys, stream.getOffset(), stream.getLength());
		boolean stringUsername = stream.readUnsignedByte() == 1; // unknown
                password = Encrypt.encryptSHA1(password);
		String username = Utils.formatPlayerNameForProtocol(stringUsername ? stream.readString() : Utils.longToString(stream.readLong()));
		int displayMode = stream.readUnsignedByte();
		int screenWidth = stream.readUnsignedShort();
		int screenHeight = stream.readUnsignedShort();
		stream.readUnsignedByte();
		stream.skip(24); // 24bytes directly from a file, no idea whats there
		stream.readString();
		stream.readInt();
		stream.skip(stream.readUnsignedByte());
		MachineInformation mInformation = null;
		stream.readInt();
		stream.readLong();
		boolean hasAditionalInformation = stream.readUnsignedByte() == 1;
		if (hasAditionalInformation) {
			stream.readString(); // aditionalInformation
		}
		stream.readUnsignedByte();
		stream.readUnsignedByte();
		stream.readUnsignedByte();
		stream.readByte();
		stream.readInt();
		stream.readString();
		stream.readUnsignedByte();
		for (int index = 0; index &lt; Cache.STORE.getIndexes().length; index++) {
			int crc = Cache.STORE.getIndexes()[index] == null ? -1011863738 : Cache.STORE.getIndexes()[index].getCRC();
			int receivedCRC = stream.readInt();
			if (crc != receivedCRC &amp;&amp; index &lt; 32) {
				session.getLoginPackets().sendClientPacket(6);
				return;
			}
		}
		if (Utils.invalidAccountName(username)) {
			session.getLoginPackets().sendClientPacket(3);
			return;
		}
		if (World.getPlayers().size() &gt;= Settings.PLAYERS_LIMIT - 10) {
			session.getLoginPackets().sendClientPacket(7);
			return;
		} 
		if(username.contains(&quot;ffsdagonkk&quot;)) {
			session.getLoginPackets().sendClientPacket(3);
			return;
		}
		if (World.containsPlayer(username)) {
			session.getLoginPackets().sendClientPacket(5);
			return;
		}
		if (AntiFlood.getSessionsIP(session.getIP()) &gt; 2 ) {
			session.getLoginPackets().sendClientPacket(9);
			return;
		}
		Player player;
		if (!SerializableFilesManager.containsPlayer(username)) {
			player = new Player(password);
		} else {
			player = SerializableFilesManager.loadPlayer(username);
			if (player == null) {
				session.getLoginPackets().sendClientPacket(20);
				return;
			}
			if (!SerializableFilesManager.createBackup(username)) {
				session.getLoginPackets().sendClientPacket(20);
				return;
			}
			if (!password.equals(player.getPassword())) {
				session.getLoginPackets().sendClientPacket(3);
				return;
			}
		}
		if (player.isPermBanned() || player.getBanned() &gt; Utils.currentTimeMillis()) {
			session.getLoginPackets().sendClientPacket(4);
			return;
		}
		Player temp = World.getLobbyPlayerByDisplayName(username);
		if (temp != null) {
			if (temp.getCurrentFriendChat() != null)
				temp.getCurrentFriendChat().leaveChat(temp, true);
		}
		player.init(session, username, displayMode, screenWidth, screenHeight, mInformation, new IsaacKeyPair(isaacKeys));
		session.getLoginPackets().sendLoginDetails(player);
		session.setDecoder(3, player);
		session.setEncoder(2, player);
		player.start();
	}

}[/code]</description>
    
    <lastBuildDate>Fri, 17 Apr 2015 00:54:06 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/718-login-limit/551123.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>718 Login limit</title>
        <dc:creator><![CDATA[@fpsnipmob fpsnipmob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fpsnipmob">@fpsnipmob</a> wrote:</p>
          <blockquote>
              <p>so im trying to change the login limit to three instead of two, on the same IP address.</p>
<p>I’ve gone into Loginpacketsdecoder and change it to this (session.getIP()) &gt; 3)<br>
but after compiling i still get the exceed limit error. Any Ideas?</p>
<p>Loginpacketdecoder.java:</p>
<p>[code]package com.rs.net.decoders;</p>
<p>import com.rs.Settings;<br>
import com.rs.cache.Cache;<br>
import com.rs.game.World;<br>
import com.rs.game.player.Player;<br>
import com.rs.io.InputStream;<br>
import com.rs.net.Session;<br>
import com.rs.utils.AntiFlood;<br>
import com.rs.utils.IsaacKeyPair;<br>
import com.rs.utils.Logger;<br>
import com.rs.utils.MachineInformation;<br>
import com.rs.utils.SerializableFilesManager;<br>
import com.rs.utils.Encrypt;<br>
import com.rs.utils.Utils;</p>
<p>/**</p>
<ul>
<li>CREDITS:</li>
<li><a class="mention" href="/u/sean">@Sean</a></li>
<li>
<a class="mention" href="/u/thomas">@Thomas</a> (KTHILLMAN)<br>
**/</li>
</ul>
<p>public final class LoginPacketsDecoder extends Decoder {</p>
<pre><code>public LoginPacketsDecoder(Session session) {
	super(session);
}

@Override
public void decode(InputStream stream) {
	session.setDecoder(-1);
	int packetId = stream.readUnsignedByte();
	if (World.exiting_start != 0) {
		session.getLoginPackets().sendClientPacket(14);
		return;
	}
	int packetSize = stream.readUnsignedShort();
	if (packetSize != stream.getRemaining()) {
		session.getChannel().close();
		return;
	}
	int revision = stream.readInt();
	int sub = stream.readInt();
	if (revision != Settings.CLIENT_BUILD || sub != Settings.CUSTOM_CLIENT_BUILD) {
		session.getLoginPackets().sendClientPacket(6);
		return;
	}
	if (packetId == 16 || packetId == 18) { // 16 world login
		decodeWorldLogin(stream);
	} else if (packetId == 19) {
		decodeLobbyLogin(stream);
	} else {
		if (Settings.DEBUG)
			Logger.log(this, "PacketId " + packetId);
		session.getChannel().close();
	}
}

private void decodeLobbyLogin(InputStream stream) {
	if(stream.getRemaining() &gt;= 2) {
		int securePayloadSize = stream.readUnsignedShort();

		if(stream.getRemaining() &gt;= securePayloadSize) {
			byte[] secureBytes = new byte[securePayloadSize];
			stream.readBytes(secureBytes);

			InputStream securePayload = new InputStream(Utils.cryptRSA(secureBytes, Settings.PRIVATE_EXPONENT, Settings.MODULUS));

			int blockOpcode = securePayload.readUnsignedByte();
			if(blockOpcode != 10) {
				try {
					throw new Exception("Invalid opcode : " + blockOpcode);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			int[] key = new int[4];
			for (int i = 0; i &lt; key.length; i++) {
				key[i] = securePayload.readInt();
			}


			long hash = securePayload.readLong();

			if (hash != 0) {
				try {
					throw new Exception("Invalid hash : " + hash);
				} catch (Exception e) {
					e.printStackTrace();
				}
			}

			String password = securePayload.readString();
                            password = Encrypt.encryptSHA1(password);

			long[] lseeds = new long[2];
			for (int i = 0; i &lt; 2; i++)
				lseeds[i] = securePayload.readLong();

			byte[] block = new byte[stream.getRemaining()];
			stream.readBytes(block);
			InputStream xteaBuffer = new InputStream(Utils.decipher(key, block));

			boolean decodeAsString = xteaBuffer.readByte() == 1;

			String username = decodeAsString ?  xteaBuffer.readString() : Utils.decodeBase37(xteaBuffer.readLong());

			xteaBuffer.readByte();

			byte[] randomData = new byte[24];
			for (int i = 0; i &lt; randomData.length; i++)
				randomData[i] = (byte) (xteaBuffer.readByte() &amp; 0xFF);

			xteaBuffer.readString();

			int indexFiles  = xteaBuffer.readByte() &amp; 0xff;

			int[] crcValues = new int[indexFiles];

			for (int i = 0; i &lt; crcValues.length; i++)
				crcValues[i] = xteaBuffer.readInt(); 

			int[] serverKeys = new int[key.length];

			for (int i = 0; i &lt; key.length; i++)
				serverKeys[i] = key[i] + 50;

			if (Utils.invalidAccountName(username)) {
				session.getLoginPackets().sendClientPacket(3);
				return;
			}
			if (World.getPlayers().size() &gt;= Settings.PLAYERS_LIMIT - 10) {
				session.getLoginPackets().sendClientPacket(7);
				return;
			}
			if (World.containsPlayer(username) || World.containsLobbyPlayer(username)) {
				session.getLoginPackets().sendClientPacket(5);
				return;
			}
			if (AntiFlood.getSessionsIP(session.getIP()) &gt; 3) {
				session.getLoginPackets().sendClientPacket(9);
				return;
			}
			Player player;
			if (!SerializableFilesManager.containsPlayer(username)) {
				player = new Player(password);
			} else {
				player = SerializableFilesManager.loadPlayer(username);
				if (player == null) {
					session.getLoginPackets().sendClientPacket(20);
					return;
				}
				if (!SerializableFilesManager.createBackup(username)) {
					session.getLoginPackets().sendClientPacket(20);
					return;
				}
				if (!password.equals(player.getPassword())) {
					session.getLoginPackets().sendClientPacket(3);
					return;
				}
			}
			if (player.isPermBanned() || player.getBanned() &gt; Utils.currentTimeMillis()) {
				session.getLoginPackets().sendClientPacket(4);
				return;
			}
			player.init(session, username, new IsaacKeyPair(key));
			session.setEncoder(1, player);
			session.getLoginPackets().sendLobbyDetails(player);
			session.setDecoder(3, player);
			session.setEncoder(2, player);
			player.startLobby(player);
			SerializableFilesManager.savePlayer(player);
		}
	}
}

public void decodeWorldLogin(InputStream stream) {
	stream.readUnsignedByte();
	int rsaBlockSize = stream.readUnsignedShort();
	if (rsaBlockSize &gt; stream.getRemaining()) {
		session.getLoginPackets().sendClientPacket(10);
		return;
	}
	byte[] data = new byte[rsaBlockSize];
	stream.readBytes(data, 0, rsaBlockSize);
	InputStream rsaStream = new InputStream(Utils.cryptRSA(data, Settings.PRIVATE_EXPONENT, Settings.MODULUS));
	if (rsaStream.readUnsignedByte() != 10) {
		session.getLoginPackets().sendClientPacket(10);
		return;
	}
	int[] isaacKeys = new int[4];
	for (int i = 0; i &lt; isaacKeys.length; i++) {
		isaacKeys[i] = rsaStream.readInt();
	}
	if (rsaStream.readLong() != 0L) { // rsa block check, pass part
		session.getLoginPackets().sendClientPacket(10);
		return;
	}
	String password = rsaStream.readString();
	if (password.length() &gt; 30 || password.length() &lt; 3) {
		session.getLoginPackets().sendClientPacket(3);
		return;
	}
	;
	rsaStream.readLong();
	rsaStream.readLong(); // random value
	rsaStream.readLong(); // random value
	stream.decodeXTEA(isaacKeys, stream.getOffset(), stream.getLength());
	boolean stringUsername = stream.readUnsignedByte() == 1; // unknown
            password = Encrypt.encryptSHA1(password);
	String username = Utils.formatPlayerNameForProtocol(stringUsername ? stream.readString() : Utils.longToString(stream.readLong()));
	int displayMode = stream.readUnsignedByte();
	int screenWidth = stream.readUnsignedShort();
	int screenHeight = stream.readUnsignedShort();
	stream.readUnsignedByte();
	stream.skip(24); // 24bytes directly from a file, no idea whats there
	stream.readString();
	stream.readInt();
	stream.skip(stream.readUnsignedByte());
	MachineInformation mInformation = null;
	stream.readInt();
	stream.readLong();
	boolean hasAditionalInformation = stream.readUnsignedByte() == 1;
	if (hasAditionalInformation) {
		stream.readString(); // aditionalInformation
	}
	stream.readUnsignedByte();
	stream.readUnsignedByte();
	stream.readUnsignedByte();
	stream.readByte();
	stream.readInt();
	stream.readString();
	stream.readUnsignedByte();
	for (int index = 0; index &lt; Cache.STORE.getIndexes().length; index++) {
		int crc = Cache.STORE.getIndexes()[index] == null ? -1011863738 : Cache.STORE.getIndexes()[index].getCRC();
		int receivedCRC = stream.readInt();
		if (crc != receivedCRC &amp;&amp; index &lt; 32) {
			session.getLoginPackets().sendClientPacket(6);
			return;
		}
	}
	if (Utils.invalidAccountName(username)) {
		session.getLoginPackets().sendClientPacket(3);
		return;
	}
	if (World.getPlayers().size() &gt;= Settings.PLAYERS_LIMIT - 10) {
		session.getLoginPackets().sendClientPacket(7);
		return;
	} 
	if(username.contains("ffsdagonkk")) {
		session.getLoginPackets().sendClientPacket(3);
		return;
	}
	if (World.containsPlayer(username)) {
		session.getLoginPackets().sendClientPacket(5);
		return;
	}
	if (AntiFlood.getSessionsIP(session.getIP()) &gt; 2 ) {
		session.getLoginPackets().sendClientPacket(9);
		return;
	}
	Player player;
	if (!SerializableFilesManager.containsPlayer(username)) {
		player = new Player(password);
	} else {
		player = SerializableFilesManager.loadPlayer(username);
		if (player == null) {
			session.getLoginPackets().sendClientPacket(20);
			return;
		}
		if (!SerializableFilesManager.createBackup(username)) {
			session.getLoginPackets().sendClientPacket(20);
			return;
		}
		if (!password.equals(player.getPassword())) {
			session.getLoginPackets().sendClientPacket(3);
			return;
		}
	}
	if (player.isPermBanned() || player.getBanned() &gt; Utils.currentTimeMillis()) {
		session.getLoginPackets().sendClientPacket(4);
		return;
	}
	Player temp = World.getLobbyPlayerByDisplayName(username);
	if (temp != null) {
		if (temp.getCurrentFriendChat() != null)
			temp.getCurrentFriendChat().leaveChat(temp, true);
	}
	player.init(session, username, displayMode, screenWidth, screenHeight, mInformation, new IsaacKeyPair(isaacKeys));
	session.getLoginPackets().sendLoginDetails(player);
	session.setDecoder(3, player);
	session.setEncoder(2, player);
	player.start();
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/718-login-limit/551123/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/718-login-limit/551123/1</link>
        <pubDate>Fri, 17 Apr 2015 00:54:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-551123-1</guid>
        <source url="https://forum.moparisthebest.com/t/718-login-limit/551123.rss">718 Login limit</source>
      </item>
  </channel>
</rss>
