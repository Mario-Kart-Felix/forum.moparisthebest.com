<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Please Read and Post [This can be fixed]</title>
    <link>https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935</link>
    <description>[center][b]Client base: Renamed.

What Am I Doing: Making A WebClient Cache Download.

Picture: [img]http://i42.tinypic.com/iftthx.png[/img]

Here is my methods from client.java

[code]/*
Made by Ric914
*/
    public String name;
    public String dir;

public void downloadcache(String url, String name1, String dir1, String type)
    {
        dir = dir1;
        name = name1;
        try
        {
            URLConnection connection = (new URL(url)).openConnection();
            String f[] = url.split(&quot;/&quot;);
            File file = new File(f[f.length - 1]);
            int length = connection.getContentLength();
            InputStream instream = connection.getInputStream();
            try{new File(signlink.findcachedir()+dir).mkdir();}catch(Exception e){}
            FileOutputStream outstream = new FileOutputStream(signlink.findcachedir()+dir+file);
            int size = 0;
            int copy;
            byte[] buffer = new byte[4096];
            while((copy = instream.read(buffer)) != -1)
            {
                outstream.write(buffer, 0, copy);
                size+= copy;
                int percentage = (int)(((double)size / (double)length) * 100D);
                drawLoadingText(percentage, (byte)4, &quot;Downloading Cache - &quot;+percentage+&quot;%&quot;);
            }
            if(length != size)
            {
                instream.close();
                outstream.close();
            } else
            {
                drawLoadingText(5, (byte)4, &quot;Unpacking files...&quot;);
                instream.close();
                outstream.close();
                unZipFile();
                deleteFile();
                drawLoadingText(10, (byte)4, &quot;Unpacking was complete&quot;);
            }
        }
        catch(Exception e)
        {
            System.err.println(&quot;Error connecting to server.&quot;);
            e.printStackTrace();
        }
    }
    public void writeStream(InputStream In, OutputStream Out) throws IOException
    {
        byte Buffer[] = new byte[4096];
        int Len;
        while((Len = In.read(Buffer)) &gt;= 0)
        {
            Out.write(Buffer, 0, Len);
        }
        In.close();
        Out.close();
    }

    public void unZipFile()
    {
        try
        {
            ZipFile ZipFile = new ZipFile(signlink.findcachedir()+dir+name);
            for(Enumeration Entries = ZipFile.entries(); Entries.hasMoreElements();)
            {
                ZipEntry Entry = (ZipEntry)Entries.nextElement();
                if(Entry.isDirectory())
                {
                    (new File(signlink.findcachedir()+dir+Entry.getName())).mkdir();
                } else
                {
                    writeStream(ZipFile.getInputStream(Entry), new BufferedOutputStream(new FileOutputStream(signlink.findcachedir()+dir+Entry.getName())));
                }
            }
            ZipFile.close();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    public void deleteFile()
    {
        try
        {
            File file = new File(signlink.findcachedir()+dir+name);
            file.delete();
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    private StreamLoader streamLoaderForName(int i, String s, String s1, int j, byte byte0, int k)
    {
        byte abyte0[] = null;
        int l = 5;
        try
        {
        if (decompressors[0] != null)
	{
                abyte0 = decompressors[0].decompress(i);
        }
        if (abyte0 != null)
        {
		drawLoadingText(15, (byte)4, &quot;Downloading Cache&quot;);
		downloadcache(&quot;http://rune-zone.com/cache.zip&quot;, &quot;cache.zip&quot;, &quot;&quot;, &quot;cache&quot;);
        }
        if (decompressors[0] != null)
	{
                abyte0 = decompressors[0].decompress(i);
        }
	}
        catch(Exception _ex) { }
	if(abyte0 != null);
        if(abyte0 != null)
        {
            StreamLoader streamLoader = new StreamLoader(abyte0);
            return streamLoader;
        }
        int j1 = 0;
	    do
	    {
	    if(abyte0 != null)
	    {
	      break;
	    }
            String s2 = &quot;Unknown error&quot;;
	    drawLoadingText(k, (byte)4, &quot;Client updated - please reload client&quot;);
            Object obj = null;
            try
            {
                int k1 = 0;
                DataInputStream datainputstream = openJagGrabInputStream(s1 + j);
                byte abyte1[] = new byte[6];
                datainputstream.readFully(abyte1, 0, 6);
                Stream stream = new Stream(abyte1);
                stream.currentOffset = 3;
                int i2 = stream.read3Bytes() + 6;
                int j2 = 6;
                abyte0 = new byte[i2];
	        for(int k2 = 0; k2 &lt; 6; k2++)
	        {
	          abyte0[k2] = abyte1[k2];
	        }

                while(j2 &lt; i2) 
                {
                    int l2 = i2 - j2;
                    if(l2 &gt; 1000)
                        l2 = 1000;
                    int j3 = datainputstream.read(abyte0, j2, l2);
                    if(j3 &lt; 0)
                    {
                        s2 = &quot;Length error: &quot; + j2 + &quot;/&quot; + i2;
                        throw new IOException(&quot;EOF&quot;);
                    }
                    j2 += j3;
                    int k3 = (j2 * 100) / i2;
                    if(k3 != k1)
                        drawLoadingText(k, (byte) 4, &quot;Loading &quot; + s + &quot; - &quot; + k3 + &quot;%&quot;);
                    k1 = k3;
                }
                datainputstream.close();
                try
                {
                    if(decompressors[0] != null)
                        decompressors[0].method234(abyte0.length, abyte0, i);
                }
                catch(Exception _ex)
                {
                    decompressors[0] = null;
                }
            }
            catch(IOException ioexception)
            {
                if(s2.equals(&quot;Unknown error&quot;))
                    s2 = &quot;Connection error&quot;;
                abyte0 = null;
            }
            catch(NullPointerException _ex)
            {
                s2 = &quot;Null error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                    return null;
            }
            catch(ArrayIndexOutOfBoundsException _ex)
            {
                s2 = &quot;Bounds error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                    return null;
            }
            catch(Exception _ex)
            {
                s2 = &quot;Unexpected error&quot;;
                abyte0 = null;
                if(!signlink.reporterror)
                    return null;
            }
            if(abyte0 == null)
            {
                for(int l1 = l; l1 &gt; 0; l1--)
                {
                    if(j1 &gt;= 3)
                    {
                        drawLoadingText(k, (byte) 4, &quot;Game updated - please reload page&quot;);
                        l1 = 10;
                    } else
                    {
	                drawLoadingText(k, (byte)4, (new StringBuilder()).append(s2).append(&quot; - Retrying in &quot;).append(l1).toString());
                    }
                    try
                    {
                        Thread.sleep(1000L);
                    }
                    catch(Exception _ex) { }
                }

	        l *= 2;
	        if(l &gt; 60)
	        {
	          l = 60;
	        }
	        aBoolean872 = !aBoolean872;
	      }
	    } while(true);
	    StreamLoader streamLoader_1 = new StreamLoader(abyte0);
	    if(byte0 != -41)
	    {
	      throw new NullPointerException();
	    } else
	    {
	      return streamLoader_1;
	    }
  }[/code]

This is my signlink.java

[code]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;
import javax.sound.midi.*;
import javax.sound.sampled.*;


public final class signlink
    implements Runnable
{

    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    public static final String findcachedir()
    {
	String s;
	String s1;
	File file;
	s = &quot;C:/.runezonepking_file_store_32/&quot;;
	s1 = &quot;&quot;;
	file = new File((new StringBuilder()).append(s1).append(s).toString());
	if (file.exists() || file.mkdir())
	{
		return (new StringBuilder()).append(s1).append(s).append(&quot;/&quot;).toString();
	}
	return null;
    }

    private static final int getuid(String s)
    {
      return 73916469;
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static final Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;
}[/code]

Can anyone know why this is doing this??
Can you please help me please.[/b][/center]</description>
    
    <lastBuildDate>Mon, 03 May 2010 11:51:58 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Please Read and Post [This can be fixed]</title>
        <dc:creator><![CDATA[@I_Ashley_I I Ashley I]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_ashley_i">@I_Ashley_I</a> wrote:</p>
          <blockquote>
              <p>Sweet. I might use this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935/2</link>
        <pubDate>Mon, 03 May 2010 11:51:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-338935-2</guid>
        <source url="https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935.rss">Please Read and Post [This can be fixed]</source>
      </item>
      <item>
        <title>Please Read and Post [This can be fixed]</title>
        <dc:creator><![CDATA[@mod_damo mod damo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_damo">@mod_damo</a> wrote:</p>
          <blockquote>
              <p>[center][b]Client base: Renamed.</p>
<p>What Am I Doing: Making A WebClient Cache Download.</p>
<p>Picture: <div class="lightbox-wrapper"><a class="lightbox" href="http://i42.tinypic.com/iftthx.png" title="iftthx.png" rel="nofollow noopener"><img src="http://i42.tinypic.com/iftthx.png" alt width="690" height="366"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">iftthx.png</span><span class="informations">1000×531</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Here is my methods from client.java</p>
<p>[code]/*<br>
Made by Ric914<br>
*/<br>
public String name;<br>
public String dir;</p>
<p>public void downloadcache(String url, String name1, String dir1, String type)<br>
{<br>
dir = dir1;<br>
name = name1;<br>
try<br>
{<br>
URLConnection connection = (new URL(url)).openConnection();<br>
String f[] = url.split("/");<br>
File file = new File(f[f.length - 1]);<br>
int length = connection.getContentLength();<br>
InputStream instream = connection.getInputStream();<br>
try{new File(signlink.findcachedir()+dir).mkdir();}catch(Exception e){}<br>
FileOutputStream outstream = new FileOutputStream(signlink.findcachedir()+dir+file);<br>
int size = 0;<br>
int copy;<br>
byte[] buffer = new byte[4096];<br>
while((copy = instream.read(buffer)) != -1)<br>
{<br>
outstream.write(buffer, 0, copy);<br>
size+= copy;<br>
int percentage = (int)(((double)size / (double)length) * 100D);<br>
drawLoadingText(percentage, (byte)4, “Downloading Cache - “+percentage+”%”);<br>
}<br>
if(length != size)<br>
{<br>
instream.close();<br>
outstream.close();<br>
} else<br>
{<br>
drawLoadingText(5, (byte)4, “Unpacking files…”);<br>
instream.close();<br>
outstream.close();<br>
unZipFile();<br>
deleteFile();<br>
drawLoadingText(10, (byte)4, “Unpacking was complete”);<br>
}<br>
}<br>
catch(Exception e)<br>
{<br>
System.err.println(“Error connecting to server.”);<br>
e.printStackTrace();<br>
}<br>
}<br>
public void writeStream(InputStream In, OutputStream Out) throws IOException<br>
{<br>
byte Buffer[] = new byte[4096];<br>
int Len;<br>
while((Len = In.read(Buffer)) &gt;= 0)<br>
{<br>
Out.write(Buffer, 0, Len);<br>
}<br>
In.close();<br>
Out.close();<br>
}</p>
<pre><code>public void unZipFile()
{
    try
    {
        ZipFile ZipFile = new ZipFile(signlink.findcachedir()+dir+name);
        for(Enumeration Entries = ZipFile.entries(); Entries.hasMoreElements();)
        {
            ZipEntry Entry = (ZipEntry)Entries.nextElement();
            if(Entry.isDirectory())
            {
                (new File(signlink.findcachedir()+dir+Entry.getName())).mkdir();
            } else
            {
                writeStream(ZipFile.getInputStream(Entry), new BufferedOutputStream(new FileOutputStream(signlink.findcachedir()+dir+Entry.getName())));
            }
        }
        ZipFile.close();
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
}

public void deleteFile()
{
    try
    {
        File file = new File(signlink.findcachedir()+dir+name);
        file.delete();
    }
    catch(Exception e)
    {
        e.printStackTrace();
    }
}

private StreamLoader streamLoaderForName(int i, String s, String s1, int j, byte byte0, int k)
{
    byte abyte0[] = null;
    int l = 5;
    try
    {
    if (decompressors[0] != null)
{
            abyte0 = decompressors[0].decompress(i);
    }
    if (abyte0 != null)
    {
	drawLoadingText(15, (byte)4, "Downloading Cache");
	downloadcache("http://rune-zone.com/cache.zip", "cache.zip", "", "cache");
    }
    if (decompressors[0] != null)
{
            abyte0 = decompressors[0].decompress(i);
    }
}
    catch(Exception _ex) { }
if(abyte0 != null);
    if(abyte0 != null)
    {
        StreamLoader streamLoader = new StreamLoader(abyte0);
        return streamLoader;
    }
    int j1 = 0;
    do
    {
    if(abyte0 != null)
    {
      break;
    }
        String s2 = "Unknown error";
    drawLoadingText(k, (byte)4, "Client updated - please reload client");
        Object obj = null;
        try
        {
            int k1 = 0;
            DataInputStream datainputstream = openJagGrabInputStream(s1 + j);
            byte abyte1[] = new byte[6];
            datainputstream.readFully(abyte1, 0, 6);
            Stream stream = new Stream(abyte1);
            stream.currentOffset = 3;
            int i2 = stream.read3Bytes() + 6;
            int j2 = 6;
            abyte0 = new byte[i2];
        for(int k2 = 0; k2 &lt; 6; k2++)
        {
          abyte0[k2] = abyte1[k2];
        }

            while(j2 &lt; i2) 
            {
                int l2 = i2 - j2;
                if(l2 &gt; 1000)
                    l2 = 1000;
                int j3 = datainputstream.read(abyte0, j2, l2);
                if(j3 &lt; 0)
                {
                    s2 = "Length error: " + j2 + "/" + i2;
                    throw new IOException("EOF");
                }
                j2 += j3;
                int k3 = (j2 * 100) / i2;
                if(k3 != k1)
                    drawLoadingText(k, (byte) 4, "Loading " + s + " - " + k3 + "%");
                k1 = k3;
            }
            datainputstream.close();
            try
            {
                if(decompressors[0] != null)
                    decompressors[0].method234(abyte0.length, abyte0, i);
            }
            catch(Exception _ex)
            {
                decompressors[0] = null;
            }
        }
        catch(IOException ioexception)
        {
            if(s2.equals("Unknown error"))
                s2 = "Connection error";
            abyte0 = null;
        }
        catch(NullPointerException _ex)
        {
            s2 = "Null error";
            abyte0 = null;
            if(!signlink.reporterror)
                return null;
        }
        catch(ArrayIndexOutOfBoundsException _ex)
        {
            s2 = "Bounds error";
            abyte0 = null;
            if(!signlink.reporterror)
                return null;
        }
        catch(Exception _ex)
        {
            s2 = "Unexpected error";
            abyte0 = null;
            if(!signlink.reporterror)
                return null;
        }
        if(abyte0 == null)
        {
            for(int l1 = l; l1 &gt; 0; l1--)
            {
                if(j1 &gt;= 3)
                {
                    drawLoadingText(k, (byte) 4, "Game updated - please reload page");
                    l1 = 10;
                } else
                {
                drawLoadingText(k, (byte)4, (new StringBuilder()).append(s2).append(" - Retrying in ").append(l1).toString());
                }
                try
                {
                    Thread.sleep(1000L);
                }
                catch(Exception _ex) { }
            }

        l *= 2;
        if(l &gt; 60)
        {
          l = 60;
        }
        aBoolean872 = !aBoolean872;
      }
    } while(true);
    StreamLoader streamLoader_1 = new StreamLoader(abyte0);
    if(byte0 != -41)
    {
      throw new NullPointerException();
    } else
    {
      return streamLoader_1;
    }
</code></pre>
<p>}[/code]</p>
<p>This is my signlink.java</p>
<p>[code]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import javax.sound.midi.<em>;<br>
import javax.sound.sampled.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}

public static final String findcachedir()
{
String s;
String s1;
File file;
s = "C:/.runezonepking_file_store_32/";
s1 = "";
file = new File((new StringBuilder()).append(s1).append(s).toString());
if (file.exists() || file.mkdir())
{
	return (new StringBuilder()).append(s1).append(s).append("/").toString();
}
return null;
}

private static final int getuid(String s)
{
  return 73916469;
}

public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static final Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/code]</p>
<p>Can anyone know why this is doing this??<br>
Can you please help me please.[/b][/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935/1</link>
        <pubDate>Mon, 03 May 2010 02:21:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-338935-1</guid>
        <source url="https://forum.moparisthebest.com/t/please-read-and-post-this-can-be-fixed/338935.rss">Please Read and Post [This can be fixed]</source>
      </item>
  </channel>
</rss>
