<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How does clipping work?</title>
    <link>https://forum.moparisthebest.com/t/how-does-clipping-work/549405</link>
    <description>So, I&#39;ve been trying to figure out how clipping works in RuneScape. I know you need to use masks depending on which direction, but I wouldn&#39;t know a single thing about how to add those masks.

Here is my current A* algorithm for pathfinding without clipping
[CODE=java]
package com.runescape.model.walking;

import java.awt.Point;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

import com.runescape.model.entity.Entity;
import com.runescape.model.map.Location;

/**
 * This class is used for finding a path from one start {@code Node} to one end {@code Node} using
 * the A* Path Finding Algorithm.
 * 
 * &lt;p&gt;
 * No copyright asserted on the source code of this class. May be used for any purpose.
 *
 * @author Albert Beaupre
 * @version 1.0 September 2014
 * 
 * @see Node
 */
public class AStarPathFinder implements PathFinder {
	
	/**
	 * Returns the {@code Location} closest the specified {@code goal} from the specified
	 * {@code entity}.
	 * 
	 * @param entity
	 *            the entity to find the closest location
	 * @param goal
	 *            the location to get the closest node to
	 * @return the closest location to the goal from the entity
	 */
	public static Location getClosest(Entity entity, Location goal) {
		Location closest = goal;
		for (int i = -1; i &lt; 2; i++) {
			for (int j = -1; j &lt; 2; j++) {
				Location l = new Location(goal.x + i, goal.y + j, goal.z);
				if (l.distance(entity) &lt; closest.distance(entity))
					closest = l;
			}
		}
		return closest;
	}
	
	/**
	 * Returns the closest {@code Point} in the specified {@code Point} array, {@code to}, from the
	 * specified {@code entity}.
	 * 
	 * @param entity
	 *            the entity to find the closest point
	 * @param to
	 *            the array to find the closest point in
	 * @return the point closest to the entity from the array
	 */
	public static Point getClosest(Entity entity, Point... to) {
		Point closest = to[0];
		for (Point point : to) {
			if (point.distance(entity) &lt; closest.distance(entity))
				closest = point;
		}
		return closest;
	}
	
	@Override
	public List&lt;Node&gt; findPath(Entity entity, Location endPoint) {
		ArrayList&lt;Node&gt; open = new ArrayList&lt;&gt;();
		ArrayList&lt;Node&gt; closed = new ArrayList&lt;&gt;();
		final Node start = new Node(entity.x, entity.y, entity.z);
		final Node goal = new Node(endPoint.x, endPoint.y, endPoint.z);
		
		start.heuristic = (float) start.heuristic(goal);
		open.add(start);
		while (open.size() &gt; 0) {
			Collections.sort(open, (o1, o2) -&gt; Double.compare(o1.getF(), o2.getF()));
			Node current = open.get(0);
			if (current.equals(goal))
				return construct(start, current);
			open.remove(current);
			closed.add(current);
			for (Node neighbor : current.getNeighbors(goal)) {
				if (closed.contains(neighbor))
					continue;
				
				if (neighbor.equals(goal))
					return construct(start, neighbor);
				double tentative_cost = current.cost + current.distance(neighbor);
				if (!open.contains(neighbor) || tentative_cost &lt; neighbor.cost) {
					neighbor.cost = (float) tentative_cost;
					if (!open.contains(neighbor)) {
						open.add(neighbor);
					}
				}
			}
		}
		return Collections.emptyList();
	}
	
	private List&lt;Node&gt; construct(Node start, Node goal) {
		List&lt;Node&gt; path = new ArrayList&lt;&gt;();
		Node last = goal;
		while (!last.equals(start)) {
			path.add(last);
			last = last.parent;
		}
		Collections.reverse(path);
		return path;
	}
	
}
[/CODE]</description>
    
    <lastBuildDate>Mon, 26 Jan 2015 21:33:24 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-does-clipping-work/549405.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How does clipping work?</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="549405">
<div class="title">
<div class="quote-controls"></div>
 Zymus:</div>
<blockquote>
<p>You would probably have to load them from the cache, or map them yourself and process them there. How exactly, or where they’re stored in the cache, I’m not sure.</p>
</blockquote>
</aside>
<p>Aww darn. That makes it a million times harder.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-does-clipping-work/549405/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-does-clipping-work/549405/3</link>
        <pubDate>Mon, 26 Jan 2015 21:33:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549405-3</guid>
        <source url="https://forum.moparisthebest.com/t/how-does-clipping-work/549405.rss">How does clipping work?</source>
      </item>
      <item>
        <title>How does clipping work?</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“wildskiller, post:1, topic:549405”]So, I’ve been trying to figure out how clipping works in RuneScape. I know you need to use masks depending on which direction, but I wouldn’t know a single thing about how to add those masks.</p>
<p>Here is my current A* algorithm for pathfinding without clipping</p>
<p>[CODE=java]<br>
package com.runescape.model.walking;</p>
<p>import java.awt.Point;<br>
import java.util.ArrayList;<br>
import java.util.Collections;<br>
import java.util.List;</p>
<p>import com.runescape.model.entity.Entity;<br>
import com.runescape.model.map.Location;</p>
<p>/**</p>
<ul>
<li>
<p>This class is used for finding a path from one start {<a class="mention" href="/u/code">@code</a> Node} to one end {<a class="mention" href="/u/code">@code</a> Node} using</p>
</li>
<li>
<p>the A* Path Finding Algorithm.</p>
</li>
<li>
</li>
<li>
<p>
</p>
</li>
<li>
<p>No copyright asserted on the source code of this class. May be used for any purpose.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Albert Beaupre</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0 September 2014</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@see</span> Node<br>
*/<br>
public class AStarPathFinder implements PathFinder {</p>
<p>/**</p>
<ul>
<li>Returns the {<a class="mention" href="/u/code">@code</a> Location} closest the specified {<a class="mention" href="/u/code">@code</a> goal} from the specified</li>
<li>{<a class="mention" href="/u/code">@code</a> entity}.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> entity</li>
<li>
<pre><code>       the entity to find the closest location
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> goal</li>
<li>
<pre><code>       the location to get the closest node to
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the closest location to the goal from the entity<br>
*/<br>
public static Location getClosest(Entity entity, Location goal) {<br>
Location closest = goal;<br>
for (int i = -1; i &lt; 2; i++) {<br>
for (int j = -1; j &lt; 2; j++) {<br>
Location l = new Location(goal.x + i, goal.y + j, goal.z);<br>
if (l.distance(entity) &lt; closest.distance(entity))<br>
closest = l;<br>
}<br>
}<br>
return closest;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Returns the closest {<a class="mention" href="/u/code">@code</a> Point} in the specified {<a class="mention" href="/u/code">@code</a> Point} array, {<a class="mention" href="/u/code">@code</a> to}, from the</li>
<li>specified {<a class="mention" href="/u/code">@code</a> entity}.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> entity</li>
<li>
<pre><code>       the entity to find the closest point
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> to</li>
<li>
<pre><code>       the array to find the closest point in
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the point closest to the entity from the array<br>
*/<br>
public static Point getClosest(Entity entity, Point… to) {<br>
Point closest = to[0];<br>
for (Point point : to) {<br>
if (point.distance(entity) &lt; closest.distance(entity))<br>
closest = point;<br>
}<br>
return closest;<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public List findPath(Entity entity, Location endPoint) {<br>
ArrayList open = new ArrayList&lt;&gt;();<br>
ArrayList closed = new ArrayList&lt;&gt;();<br>
final Node start = new Node(entity.x, entity.y, entity.z);<br>
final Node goal = new Node(endPoint.x, endPoint.y, endPoint.z);</p>
<pre><code> start.heuristic = (float) start.heuristic(goal);
 open.add(start);
 while (open.size() &gt; 0) {
 	Collections.sort(open, (o1, o2) -&gt; Double.compare(o1.getF(), o2.getF()));
 	Node current = open.get(0);
 	if (current.equals(goal))
 		return construct(start, current);
 	open.remove(current);
 	closed.add(current);
 	for (Node neighbor : current.getNeighbors(goal)) {
 		if (closed.contains(neighbor))
 			continue;
 		
 		if (neighbor.equals(goal))
 			return construct(start, neighbor);
 		double tentative_cost = current.cost + current.distance(neighbor);
 		if (!open.contains(neighbor) || tentative_cost &lt; neighbor.cost) {
 			neighbor.cost = (float) tentative_cost;
 			if (!open.contains(neighbor)) {
 				open.add(neighbor);
 			}
 		}
 	}
 }
 return Collections.emptyList();
</code></pre>
<p>}</p>
<p>private List construct(Node start, Node goal) {<br>
List path = new ArrayList&lt;&gt;();<br>
Node last = goal;<br>
while (!last.equals(start)) {<br>
path.add(last);<br>
last = last.parent;<br>
}<br>
Collections.reverse(path);<br>
return path;<br>
}</p>
</li>
</ul>
<p>}<br>
[/CODE][/quote]</p>
<p>You would probably have to load them from the cache, or map them yourself and process them there. How exactly, or where they’re stored in the cache, I’m not sure.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-does-clipping-work/549405/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-does-clipping-work/549405/2</link>
        <pubDate>Mon, 26 Jan 2015 18:26:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549405-2</guid>
        <source url="https://forum.moparisthebest.com/t/how-does-clipping-work/549405.rss">How does clipping work?</source>
      </item>
      <item>
        <title>How does clipping work?</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>So, I’ve been trying to figure out how clipping works in RuneScape. I know you need to use masks depending on which direction, but I wouldn’t know a single thing about how to add those masks.</p>
<p>Here is my current A* algorithm for pathfinding without clipping</p>
<p>[CODE=java]<br>
package com.runescape.model.walking;</p>
<p>import java.awt.Point;<br>
import java.util.ArrayList;<br>
import java.util.Collections;<br>
import java.util.List;</p>
<p>import com.runescape.model.entity.Entity;<br>
import com.runescape.model.map.Location;</p>
<p>/**</p>
<ul>
<li>
<p>This class is used for finding a path from one start {<a class="mention" href="/u/code">@code</a> Node} to one end {<a class="mention" href="/u/code">@code</a> Node} using</p>
</li>
<li>
<p>the A* Path Finding Algorithm.</p>
</li>
<li>
</li>
<li>
<p>
</p>
</li>
<li>
<p>No copyright asserted on the source code of this class. May be used for any purpose.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Albert Beaupre</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0 September 2014</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@see</span> Node<br>
*/<br>
public class AStarPathFinder implements PathFinder {</p>
<p>/**</p>
<ul>
<li>Returns the {<a class="mention" href="/u/code">@code</a> Location} closest the specified {<a class="mention" href="/u/code">@code</a> goal} from the specified</li>
<li>{<a class="mention" href="/u/code">@code</a> entity}.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> entity</li>
<li>
<pre><code>       the entity to find the closest location
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> goal</li>
<li>
<pre><code>       the location to get the closest node to
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the closest location to the goal from the entity<br>
*/<br>
public static Location getClosest(Entity entity, Location goal) {<br>
Location closest = goal;<br>
for (int i = -1; i &lt; 2; i++) {<br>
for (int j = -1; j &lt; 2; j++) {<br>
Location l = new Location(goal.x + i, goal.y + j, goal.z);<br>
if (l.distance(entity) &lt; closest.distance(entity))<br>
closest = l;<br>
}<br>
}<br>
return closest;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Returns the closest {<a class="mention" href="/u/code">@code</a> Point} in the specified {<a class="mention" href="/u/code">@code</a> Point} array, {<a class="mention" href="/u/code">@code</a> to}, from the</li>
<li>specified {<a class="mention" href="/u/code">@code</a> entity}.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> entity</li>
<li>
<pre><code>       the entity to find the closest point
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> to</li>
<li>
<pre><code>       the array to find the closest point in
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the point closest to the entity from the array<br>
*/<br>
public static Point getClosest(Entity entity, Point… to) {<br>
Point closest = to[0];<br>
for (Point point : to) {<br>
if (point.distance(entity) &lt; closest.distance(entity))<br>
closest = point;<br>
}<br>
return closest;<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public List findPath(Entity entity, Location endPoint) {<br>
ArrayList open = new ArrayList&lt;&gt;();<br>
ArrayList closed = new ArrayList&lt;&gt;();<br>
final Node start = new Node(entity.x, entity.y, entity.z);<br>
final Node goal = new Node(endPoint.x, endPoint.y, endPoint.z);</p>
<pre><code> start.heuristic = (float) start.heuristic(goal);
 open.add(start);
 while (open.size() &gt; 0) {
 	Collections.sort(open, (o1, o2) -&gt; Double.compare(o1.getF(), o2.getF()));
 	Node current = open.get(0);
 	if (current.equals(goal))
 		return construct(start, current);
 	open.remove(current);
 	closed.add(current);
 	for (Node neighbor : current.getNeighbors(goal)) {
 		if (closed.contains(neighbor))
 			continue;
 		
 		if (neighbor.equals(goal))
 			return construct(start, neighbor);
 		double tentative_cost = current.cost + current.distance(neighbor);
 		if (!open.contains(neighbor) || tentative_cost &lt; neighbor.cost) {
 			neighbor.cost = (float) tentative_cost;
 			if (!open.contains(neighbor)) {
 				open.add(neighbor);
 			}
 		}
 	}
 }
 return Collections.emptyList();
</code></pre>
<p>}</p>
<p>private List construct(Node start, Node goal) {<br>
List path = new ArrayList&lt;&gt;();<br>
Node last = goal;<br>
while (!last.equals(start)) {<br>
path.add(last);<br>
last = last.parent;<br>
}<br>
Collections.reverse(path);<br>
return path;<br>
}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-does-clipping-work/549405/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-does-clipping-work/549405/1</link>
        <pubDate>Mon, 26 Jan 2015 02:17:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549405-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-does-clipping-work/549405.rss">How does clipping work?</source>
      </item>
  </channel>
</rss>
