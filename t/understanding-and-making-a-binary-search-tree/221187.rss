<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Understanding and Making a Binary Search Tree</title>
    <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187</link>
    <description>[size=20pt][b]Understanding and Making a Binary Search Tree[/b][/size]

This is probably more of a Java Tutorial, But this could be used here (probably rs2d). Also, I suggest you know a thing or two about Java before you try this.

So, I felt like it was about time I did another tutorial, This one will be a little more Advanced. I like to keep my tutorials more Concept rather than Objective, Meaning, I want you to learn something, not just make something happen.

So, with that said, Lets get some background knowledge on what exactly a &#39;Tree&#39; is. A Tree is a data structure. It consists of many &#39;Nodes&#39;, in a Binary Tree, each Node has two things, A Value, and Two child Nodes. When you Populate the Data Structure, It ends up looking like an upside down Tree, that&#39;s where it got its name.


Here is a Balanced Tree, Balanced meaning every node has both of its child nodes.

[img]http://img33.picoodle.com/img/img33/4/7/17/f_1m_90e5df5.jpg[/img]

Tree&#39;s do NOT have to be balanced, Although they preform much better when they are.

Ok, So, now that we know what exactly a tree looks like, Lets look into some rules for inserting values into a Binary Search Tree,

Well, Lets say we want to insert a Value into a Tree who only has a Root Node, and The Root node has a value of 4, and we want to insert 2. Well, because 2 is less than 4, it goes into the Left Node. But if we were to insert 6, it would go into the Right Node. And if we were to try and Insert 4, It would not be inserted at all. But keep in mind that the rules are different for each type of Tree.

Now, You must notice that Tree&#39;s are a VERY recursive structure. Recursive meaning that its methods call themselfs, Like so, Here is a very useful Factorial Method:

[code]	public static int factorial(int i)
	{
		if(i &lt;= 1)
			return 1;
		
		return i * factorial(i-1);
	}[/code]

As you can see, Recursion makes it so we can do ALOT in very few lines of code. Although there is a downfall to recursion, If it fails to stop calling itself, you will get a stack overflow exception.


So, now we understand the basic rules of a Tree, and we understand that it uses recursion, and that it can be very powerful.

Lets create a new Class called &#39;BinarySearchTree&#39;, 

It will have 2 public members, Add and Search, Add will add a value to the Tree, and Search will tell you if the tree contains a value. And 2 private members, a TreeNode Class, and a TreeNode Object.

[code]public class BinarySearchTree
{
	public BinarySearchTree()
	{
		rootNode = null;
	}
	
	public void add(int a)
	{
		
	}
	
	public boolean search(int s)
	{
			return false;
	}

	private TreeNode rootNode;

	private class TreeNode
	{
		
	}
}[/code]


For now, Lets focus on the TreeNode Class,

Like we said above, each Node must have a Left and a Right node, But we don&#39;t want to initialize them when we create a new Node, because we would run out of memory fairly fast. So lets just declare them for now. And lets go ahead and create an int to store our Value.

[code]	private class TreeNode
	{
		
		private TreeNode left;
		private TreeNode right;
		private int value;
		
	}[/code]

Now, I don&#39;t know if I said this, but each Node must have a Search and Add Method, that way we can use Recursion. We are also going to need a constructor that allows you to set the value of the node on initialization. So lets add them now.

[code]
	private class TreeNode
	{
		public TreeNode (int v)
		{
			value = v;
			left = null;
			right = null;
		}

		public void add(int a)
		{

		}
		
		public boolean search(int s)
		{
			return false;
		}
		
		
		private TreeNode left;
		private TreeNode right;
		private int value;
		
	}[/code]

Now, Lets work on our Add Method, We know that if we add a Node that has a value less that its value, the node to be added goes into the left, and vice versa.

So, Lets add some code that does that,

[code]	public void add(int a)
	{
		if(a &gt; value) //if the given value is greater than the current value, it goes in the right.
		{
			if(right == null) //if no right Node exists, create one.
				right = new TreeNode(a);
			else
				right.add(a); //call the add method of the right node if it exists.
		}
		else if(a &lt; value) //ect.....
		{
			if(left == null)
				left = new TreeNode(a);
			else
				left.add(a);
		}
	}[/code]

I commented my code to help explain what exactly is going on, once again, you should have a strong understanding of java to understand this tutorial.

Ok, Sweet, so we added an &#39;add&#39; method, so now lets focus on the Search method,

[code]		public boolean search(int s)
		{
			if(s == value) // if the value of this node is the value you are searching for, return true
				return true;

			// if the value you are searching for is greater than the
			//current node value, search to the right
			else if(s &gt; value) 
			{
				if(right == null) // if there is no right node, the value does not exist
					return false;
				
				return right.search(s); // search in the right node
			}
			else //ect...
			{
				if(left == null)
					return false;
				
				return left.search(s);
			}
		}[/code]

That is all you need to add to your TreeNode Class.

Now, Lets go back to our BinarySearchTree Class, But before we do, You should have a pretty clear understanding of what is going to go on, If you don&#39;t, I suggest you write what is going on in the code on paper, It makes things much easier, trust me.

Alright, Like i Said, Our BinarySearchTree is going to have the Search and Add Methods, So here they are, Only 3 lines of code, Hopefully I should&#39;nt have to explain what they do. :)


[code]	public void add(int a)
	{
		if(rootNode == null)
			rootNode = new TreeNode (a);
		else
			rootNode.add(a);
	}
	
	public boolean search(int s)
	{
		if(rootNode == null)
			return false;
		
		return rootNode.search(s);
	}
	[/code]



So, Lets create a Little Test Application for this Binary Search Tree.

[code]public class Test
{
	public static void main(String args[])
	{
		//we create a new Binary Search Tree
		BinarySearchTree bst = new BinarySearchTree();

		//we start adding values to it
		bst.add(256);
		bst.add(256);
		bst.add(405);
		bst.add(223);

		//we search for a value of 1, it returns false
		System.out.println(bst.search(1));

		//we search for a value of 223, it returns true
		System.out.println(bst.search(223));


	}
}[/code]

It will generate the following output:

[code]false
true[/code]

Sweet, there you go, Your first Binary Search Tree. 

But we are not done teaching you yet. You probably are asking, Why use this, This seems too complicated to do a search, Well your right, with very few values a Binary Search Tree is very Pointless. But lets say its populated with 200,000 integers, We could search a list, and a list searches by looping, so we would have do 199,999 look ups, Thats expensive. But with a Binary Search Tree, should there be 200,000, (if the tree is balanced) the worst case search would take O(log(n)), Thats only about 15-16 look ups, Thats quite a bit better, Right? (I hope my math is right)

Although, Adds on Tree&#39;s are quite a bit more expensive than on a List or an Array.

But thats that, There is my Tutorial.</description>
    
    <lastBuildDate>Sat, 19 Jul 2008 19:23:13 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>[quote=“meiscooldude, post:8, topic:221187”][quote author=frank_ link=topic=290387.msg2342753#msg2342753 date=1216437541]<br>
anyone that understands BSTs and has read this will be dissapointed.</p>
<p>[ul][li]use an interface[/li]<br>
[li]use generics. hint: interface BST[/li]<br>
[li]a BST and a BSTNode are the same thing, you dont need extra classes[/li]<br>
[li]yes, balanced trees are relatively fast, this is not a balanced tree unless you insert in the correct order. see self balancing BSTs[/li]<br>
[li]while a complete tree is a type of balanced tree, balanced trees need not be complete[/li]<br>
[li]yes you will run out of stack if the base case is never true, but this will also happen if the tree is too deep. you can solve this problem by using an iterative algorithm[/li]<br>
[li]why didnt you discuss methods of traversing the tree? (depth-first, breadth-first, inorder and postorder)[/li]<br>
[li]similarly, why didnt you provide the standard collection operations (ie implement one of the collection interfaces)[/li][/ul]</p>
<p>[/quote]</p>
<p>I have to agree with you, Someone who already has an understanding of BST’s will find this disappointing,  I posted this more for those who have no clue what a Tree is. (Just a general Idea on what a tree is)</p>
<p>Yes, I know this tree is not self-balancing, I could have posted an AVL Tree, but Thats not a good starting point for beginners.</p>
<p>Now, I should have talked about the methods of Traversing through a tree.</p>
<p>If you want a tree to print off its values in order, you would use a method like so:</p>
<pre><code class="lang-auto">
public void printInOrder()
{
left.printInOrder();
System.out.println(value);
right.printInOrder();
}</code></pre>
<p>3 or 4 lines of code (depending on how you look at it) and it will print all the values in order, Very nice, But kind of expensive.</p>
<p>Idk… im really tired, its like 12:00 AM, I just got home… idk…</p>
<p>I can say that i originally made this tut for moparscape, thats why its a little less advanced…[/quote]Considering you are this intelligent i suggest you stay away from the retards at moparscape.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/9</link>
        <pubDate>Sat, 19 Jul 2008 19:23:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-9</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <p>[quote=“frank_, post:5, topic:221187”]anyone that understands BSTs and has read this will be dissapointed.</p>
<p>[ul][li]use an interface[/li]<br>
[li]use generics. hint: interface BST[/li]<br>
[li]a BST and a BSTNode are the same thing, you dont need extra classes[/li]<br>
[li]yes, balanced trees are relatively fast, this is not a balanced tree unless you insert in the correct order. see self balancing BSTs[/li]<br>
[li]while a complete tree is a type of balanced tree, balanced trees need not be complete[/li]<br>
[li]yes you will run out of stack if the base case is never true, but this will also happen if the tree is too deep. you can solve this problem by using an iterative algorithm[/li]<br>
[li]why didnt you discuss methods of traversing the tree? (depth-first, breadth-first, inorder and postorder)[/li]<br>
[li]similarly, why didnt you provide the standard collection operations (ie implement one of the collection interfaces)[/li][/ul][/quote]</p>
<p>I have to agree with you, Someone who already has an understanding of BST’s will find this disappointing,  I posted this more for those who have no clue what a Tree is. (Just a general Idea on what a tree is)</p>
<p>Yes, I know this tree is not self-balancing, I could have posted an AVL Tree, but Thats not a good starting point for beginners.</p>
<p>Now, I should have talked about the methods of Traversing through a tree.</p>
<p>If you want a tree to print off its values in order, you would use a method like so:</p>
<pre><code class="lang-auto">
public void printInOrder()
{
left.printInOrder();
System.out.println(value);
right.printInOrder();
}</code></pre>
<p>3 or 4 lines of code (depending on how you look at it) and it will print all the values in order, Very nice, But kind of expensive.</p>
<p>Idk… im really tired, its like 12:00 AM, I just got home… idk…</p>
<p>I can say that i originally made this tut for moparscape, thats why its a little less advanced…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/8</link>
        <pubDate>Sat, 19 Jul 2008 09:55:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-8</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>there are the TreeMap and TreeSet classes that implement red-black trees</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/7</link>
        <pubDate>Sat, 19 Jul 2008 05:24:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-7</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>Java doesn’t already have one of these implemented?<br>
.NET has it for all generic collections ;\</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/6</link>
        <pubDate>Sat, 19 Jul 2008 05:19:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-6</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>anyone that understands BSTs and has read this will be dissapointed.</p>
<p>[ul][li]use an interface[/li]<br>
[li]use generics. hint: interface BST[/li]<br>
[li]a BST and a BSTNode are the same thing, you dont need extra classes[/li]<br>
[li]yes, balanced trees are relatively fast, this is not a balanced tree unless you insert in the correct order. see self balancing BSTs[/li]<br>
[li]while a complete tree is a type of balanced tree, balanced trees need not be complete[/li]<br>
[li]yes you will run out of stack if the base case is never true, but this will also happen if the tree is too deep. you can solve this problem by using an iterative algorithm[/li]<br>
[li]why didnt you discuss methods of traversing the tree? (depth-first, breadth-first, inorder and postorder)[/li]<br>
[li]similarly, why didnt you provide the standard collection operations (ie implement one of the collection interfaces)[/li][/ul]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/5</link>
        <pubDate>Sat, 19 Jul 2008 03:19:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-5</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@supamagier supamagier]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/supamagier">@supamagier</a> wrote:</p>
          <blockquote>
              <p>Awesome tut rep++</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/4</link>
        <pubDate>Sat, 19 Jul 2008 01:30:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-4</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>Very nicely done.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/3</link>
        <pubDate>Sat, 19 Jul 2008 01:05:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-3</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@Cheese_Police c|p]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheese_police">@Cheese_Police</a> wrote:</p>
          <blockquote>
              <p>I came across this a while ago, might be of further use: <a href="http://pixwiki.bafsoft.com/mags/1/articles/bsp_trees.htm" data-bbcode="true" rel="nofollow noopener">http://pixwiki.bafsoft.com/mags/1/articles/bsp_trees.htm</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/2</link>
        <pubDate>Fri, 18 Jul 2008 23:12:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-2</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
      <item>
        <title>Understanding and Making a Binary Search Tree</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <p>[size=20pt]<span class="bbcode-b">Understanding and Making a Binary Search Tree</span>[/size]</p>
<p>This is probably more of a Java Tutorial, But this could be used here (probably rs2d). Also, I suggest you know a thing or two about Java before you try this.</p>
<p>So, I felt like it was about time I did another tutorial, This one will be a little more Advanced. I like to keep my tutorials more Concept rather than Objective, Meaning, I want you to learn something, not just make something happen.</p>
<p>So, with that said, Lets get some background knowledge on what exactly a ‘Tree’ is. A Tree is a data structure. It consists of many ‘Nodes’, in a Binary Tree, each Node has two things, A Value, and Two child Nodes. When you Populate the Data Structure, It ends up looking like an upside down Tree, that’s where it got its name.</p>
<p>Here is a Balanced Tree, Balanced meaning every node has both of its child nodes.</p>
<p><img src="http://img33.picoodle.com/img/img33/4/7/17/f_1m_90e5df5.jpg" alt width="153" height="45"></p>
<p>Tree’s do NOT have to be balanced, Although they preform much better when they are.</p>
<p>Ok, So, now that we know what exactly a tree looks like, Lets look into some rules for inserting values into a Binary Search Tree,</p>
<p>Well, Lets say we want to insert a Value into a Tree who only has a Root Node, and The Root node has a value of 4, and we want to insert 2. Well, because 2 is less than 4, it goes into the Left Node. But if we were to insert 6, it would go into the Right Node. And if we were to try and Insert 4, It would not be inserted at all. But keep in mind that the rules are different for each type of Tree.</p>
<p>Now, You must notice that Tree’s are a VERY recursive structure. Recursive meaning that its methods call themselfs, Like so, Here is a very useful Factorial Method:</p>
<p>[code]	public static int factorial(int i)<br>
{<br>
if(i &lt;= 1)<br>
return 1;</p>
<pre><code>	return i * factorial(i-1);
}[/code]
</code></pre>
<p>As you can see, Recursion makes it so we can do ALOT in very few lines of code. Although there is a downfall to recursion, If it fails to stop calling itself, you will get a stack overflow exception.</p>
<p>So, now we understand the basic rules of a Tree, and we understand that it uses recursion, and that it can be very powerful.</p>
<p>Lets create a new Class called ‘BinarySearchTree’,</p>
<p>It will have 2 public members, Add and Search, Add will add a value to the Tree, and Search will tell you if the tree contains a value. And 2 private members, a TreeNode Class, and a TreeNode Object.</p>
<p>[code]public class BinarySearchTree<br>
{<br>
public BinarySearchTree()<br>
{<br>
rootNode = null;<br>
}</p>
<pre><code>public void add(int a)
{
	
}

public boolean search(int s)
{
		return false;
}

private TreeNode rootNode;

private class TreeNode
{
	
}
</code></pre>
<p>}[/code]</p>
<p>For now, Lets focus on the TreeNode Class,</p>
<p>Like we said above, each Node must have a Left and a Right node, But we don’t want to initialize them when we create a new Node, because we would run out of memory fairly fast. So lets just declare them for now. And lets go ahead and create an int to store our Value.</p>
<p>[code]	private class TreeNode<br>
{</p>
<pre><code>	private TreeNode left;
	private TreeNode right;
	private int value;
	
}[/code]
</code></pre>
<p>Now, I don’t know if I said this, but each Node must have a Search and Add Method, that way we can use Recursion. We are also going to need a constructor that allows you to set the value of the node on initialization. So lets add them now.</p>
<p>[code]<br>
private class TreeNode<br>
{<br>
public TreeNode (int v)<br>
{<br>
value = v;<br>
left = null;<br>
right = null;<br>
}</p>
<pre><code>	public void add(int a)
	{

	}
	
	public boolean search(int s)
	{
		return false;
	}
	
	
	private TreeNode left;
	private TreeNode right;
	private int value;
	
}[/code]
</code></pre>
<p>Now, Lets work on our Add Method, We know that if we add a Node that has a value less that its value, the node to be added goes into the left, and vice versa.</p>
<p>So, Lets add some code that does that,</p>
<p><code>	public void add(int a)
	{
		if(a &gt; value) //if the given value is greater than the current value, it goes in the right.
		{
			if(right == null) //if no right Node exists, create one.
				right = new TreeNode(a);
			else
				right.add(a); //call the add method of the right node if it exists.
		}
		else if(a &lt; value) //ect.....
		{
			if(left == null)
				left = new TreeNode(a);
			else
				left.add(a);
		}
	}</code></p>
<p>I commented my code to help explain what exactly is going on, once again, you should have a strong understanding of java to understand this tutorial.</p>
<p>Ok, Sweet, so we added an ‘add’ method, so now lets focus on the Search method,</p>
<p>[code]		public boolean search(int s)<br>
{<br>
if(s == value) // if the value of this node is the value you are searching for, return true<br>
return true;</p>
<pre><code>		// if the value you are searching for is greater than the
		//current node value, search to the right
		else if(s &gt; value) 
		{
			if(right == null) // if there is no right node, the value does not exist
				return false;
			
			return right.search(s); // search in the right node
		}
		else //ect...
		{
			if(left == null)
				return false;
			
			return left.search(s);
		}
	}[/code]
</code></pre>
<p>That is all you need to add to your TreeNode Class.</p>
<p>Now, Lets go back to our BinarySearchTree Class, But before we do, You should have a pretty clear understanding of what is going to go on, If you don’t, I suggest you write what is going on in the code on paper, It makes things much easier, trust me.</p>
<p>Alright, Like i Said, Our BinarySearchTree is going to have the Search and Add Methods, So here they are, Only 3 lines of code, Hopefully I should’nt have to explain what they do. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[code]	public void add(int a)<br>
{<br>
if(rootNode == null)<br>
rootNode = new TreeNode (a);<br>
else<br>
rootNode.add(a);<br>
}</p>
<pre><code>public boolean search(int s)
{
	if(rootNode == null)
		return false;
	
	return rootNode.search(s);
}
[/code]
</code></pre>
<p>So, Lets create a Little Test Application for this Binary Search Tree.</p>
<p>[code]public class Test<br>
{<br>
public static void main(String args[])<br>
{<br>
//we create a new Binary Search Tree<br>
BinarySearchTree bst = new BinarySearchTree();</p>
<pre><code>	//we start adding values to it
	bst.add(256);
	bst.add(256);
	bst.add(405);
	bst.add(223);

	//we search for a value of 1, it returns false
	System.out.println(bst.search(1));

	//we search for a value of 223, it returns true
	System.out.println(bst.search(223));


}
</code></pre>
<p>}[/code]</p>
<p>It will generate the following output:</p>
<p><code>false
true</code></p>
<p>Sweet, there you go, Your first Binary Search Tree.</p>
<p>But we are not done teaching you yet. You probably are asking, Why use this, This seems too complicated to do a search, Well your right, with very few values a Binary Search Tree is very Pointless. But lets say its populated with 200,000 integers, We could search a list, and a list searches by looping, so we would have do 199,999 look ups, Thats expensive. But with a Binary Search Tree, should there be 200,000, (if the tree is balanced) the worst case search would take O(log(n)), Thats only about 15-16 look ups, Thats quite a bit better, Right? (I hope my math is right)</p>
<p>Although, Adds on Tree’s are quite a bit more expensive than on a List or an Array.</p>
<p>But thats that, There is my Tutorial.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187/1</link>
        <pubDate>Fri, 18 Jul 2008 21:37:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-221187-1</guid>
        <source url="https://forum.moparisthebest.com/t/understanding-and-making-a-binary-search-tree/221187.rss">Understanding and Making a Binary Search Tree</source>
      </item>
  </channel>
</rss>
