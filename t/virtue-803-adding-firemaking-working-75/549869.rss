<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[VIRTUE / 803] Adding Firemaking (Working 75%)</title>
    <link>https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869</link>
    <description>Hello, MoparScapers,

Here is Techdaan. I am a fifteen years old developer, and I chose to get more knowledge about RSPSses by making tutorials on &quot;Shitty&quot; bases. In my eyes, Virtue works, it needs alot of tweaking though. This is not something for lazy asses, or for people who are new to Java. Read on if you want to make a new skill, Firemaking, otherwise, please get out.

[b]Step 1. Preparing the firemaking package.[/b]
For step one, we will start off easily by making a new package named &quot;org.virtue.game.logic.content.skills.firemaking&quot;. Why? To organize your code more. Try to find a balance between too little and too many pacages, you want to have one for each skill, but not one for each ability.

[b]Step 2. Configuring wood data[/b]
[b]NOT ALL FIRE MODEL IDS ARE ENTERED PROPERLY. IF SOMEONE COULD SEND ME A LIST, THANK YOU![/b]
In your new package, make a new class named: &quot;Wood.java&quot;. In here, we will store everything:
[code=java]public enum Wood {[/code]
Because we store data that doesn&#39;t need its own class, and because this is [i]way[/i] easier than using classes, we are going to use an enum. 
[i]More information about enums can be found in the JavaDocs: [url=http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html]http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html[/url][/i]
We are now going to add in some more code to the enum, actually, only the data:
[code=java]
	NORMAL(1, 40, 1511, 25, 10, 87548, &quot;Logs&quot; ),
	OAK(15, 60, 1521, 12, 27, 87548, &quot;Oak logs&quot; ),
	WILLOW(30, 90, 1519, 170, 30, 87548, &quot;Willow logs&quot; ),
	TEAK(35, 105, 6333, 180, 33, 87548, &quot;Teak logs&quot; ),
	MAPLE(45, 125, 1517, 190, 36, 87548, &quot;Maple logs&quot; ),
	MAHOGANY(50, 157.5, 6332, 39, 16, 87548, &quot;Mahogany logs&quot; ),
	YEW(60, 202.5, 1515, 210, 42, 87548, &quot;Yew logs&quot; ),
	MAGIC(75, 303.8, 1513, 220, 45, 87548, &quot;Magic logs&quot; ),
	ELDER(90, 343.3, 29556, 230, 50, 87548, &quot;Elder logs&quot; );
[/code]
At the moment, those numbers don&#39;t say anything at all, which is fine. They are basically data, with a bit of puzzling in the next code snippet you&#39;ll understand.
[code=java]
	private final int levelRequired;
	private final double xp;
	private final int logid;
	private final int randomBurnTime;
	private final int randomMakeOnTime;
	private final int fireId;
	private final String name;
[/code]
This is the data that is bound to the Enum object. We can use this to provide information with getters, that we will write after the constructor. Nothing special is in here.

[code=java]
	Wood( int level, double xp, int LogID, int randomBurnTime, int randomMakeOnTime, int FireID, String name ){
		this.levelRequired = level;
		this.xp = xp;
		this.logid = LogID;
		this.randomBurnTime = randomBurnTime;
		this.randomMakeOnTime = randomMakeOnTime;
		this.fireId = FireID;
		this.name = name;
	}
[/code]
There we go. The constructor. The constructor enables us to make our own wood types, which should not be done. However, if you really wanted to make a new wood type, go ahead!

[code=java]
	public int modelid( ){
		return this.fireId;
	}
	
	public double getxp( ){
		return this.xp;
	}
	
	public int getMakeTime( ){
		return this.randomMakeOnTime;
	}
	
	public int getBurnTime( ){
		return this.randomBurnTime;
	}
	
	public int getLevel( ){
		return this.levelRequired;
	}
	
	public int getItemID( ){
		return this.logid;
	}
[/code]
Those are nothing but getters. Getters are not interesting at all, if you have questions about these, please just ask me and I will try to explain, however, if you don&#39;t understand this, RSPS development on Virtue might not be your thing at all.

[code=java]
	public static Wood forItemID (int itemID) {
		for (Wood a : Wood.values()) {
			if ( a.logid == itemID) {
				return a;
			}
		}
		return null;
	}
	
	public static Wood forItemName ( String itemName) {
		for (Wood a : Wood.values()) {
			if ( a.name.equalsIgnoreCase( itemName ) ) {
				return a;
			}
		}
		return null;
	}
[/code]
Those are two functions that will come in very handy. What they do, is add a new function to the Wood enum, that allows us to get a wood by name or by ID. That is why we also provided the item name in the enum data.
Basically what we do, is we take the whole Wood enumeration, loop over every wood there is registered, and check if the requested data matches the data of the enum. Not very complicated.

[b]Step 3. Writing the FiremakingAction.java file[/b]
FiremakingAction will handle everything, and is the second out of the three files we have to write in order to make Firemaking possible.
Go ahead and make a new class &quot;FiremakingAction.java&quot; in your package for firemaking.
[code=java]
public class FiremakingAction extends PlayerActionEvent{
	// Emote 733
	private int firemakingEmoteID = 733;
	private int ticks = 0;
	private int calculatedTime = 0;
	private GroundItem gitem;
	private Wood wood;
	
	public FiremakingAction( int id ){
		this.wood = Wood.forItemID( id );
	}
[/code]
First of all, this is an [b]action[/b]. This means that it will be created for each action there is. Nothing special, but something you really should know to understand parts of the code.
At the top we are defining some action-bound data variables, and a constructor for the action, FiremakingAction with the log ID as ID.

[code=java]
	public boolean MakeFire( Player player, int itemid, int slotid, Item item, boolean useInventory ){
		this.wood = Wood.forItemID( itemid ); // We make the wood object to the wood ID
		if( player.getSkills().getCurrentLevel(Skill.FIREMAKING) &lt; wood.getLevel() ){ // We&#39;re going to check if the firemaking level is lower than the level required for the log
			player.getPacketDispatcher().dispatchMessage(&quot;You require a firemaking level of &quot;+wood.getLevel()+&quot; to burn this wood.&quot;, GameMessage.MessageOpcode.CHAT_BOX); // If that&#39;s true, we are going to send the player a message that they need a higher firemaking level
			return false; // Then we quit the process.
		}
		System.out.println( &quot;Making fire on account &quot; + player.getAccount().getUsername().getName() + &quot; Log id: &quot; + itemid ); // This is debugging
		if( Wood.forItemID( itemid ) != null ){ // We are going to check if the log is not null, so if we can even use it.
			GroundItem groundItem = new GroundItem(item.getId(), item.getAmount(), new Tile( player.getTile())); // If it is not a null, we will spawn the log on the ground
			this.gitem = groundItem; // Set the ground item to the class&#39;s &quot;gitem&quot; variable
			World.getWorld().getRegionManager().getRegionByID( player.getTile().getRegionID()).addItem(groundItem); // Add the actual ground item to the world
			player.getInventory().remove( item ); // Remove the log from the inventory
			player.getPacketDispatcher().dispatchMessage(&quot;You start making a fire.&quot;, GameMessage.MessageOpcode.CHAT_BOX_FILTER); // And send the player a message
		}
		calculateDelay( player ); // This will calculate the delay for the player to make a fire.
		start( player ); // This will trigger the action to start running
		return false; // I have no idea why this is here, honestly
	}
[/code]
Okay, this is a shitload of code. I know. Look in the code section itself for more information.

[code=java]
	@Override
	public boolean start(Player player) {
		return true;
	}
[/code]
This overrides the &quot;start&quot; of the firemaking action. It doesnt contain code because we handled everything in the MakeFire function.

[code=java]
	public int calculateDelay (Player player ) {
		int delay = wood.getMakeTime() - player.getSkills().getCurrentLevel( Skill.FIREMAKING );
		if (delay &lt; 1 + wood.getMakeTime() ) {
			delay = 1 + Launcher.getRandom().nextInt( wood.getMakeTime() );
		}
		calculatedTime = delay;
		System.out.println( &quot;Firemaking delay calculated: &quot; + delay + &quot; ticks.&quot; );
		player.getUpdateArchive().queueAnimation( firemakingEmoteID );
		return delay;
	}
[/code]
This will calculate the ticks required for the log to burn, as well as running the emote.

[code=java]
	@Override
	public boolean process( Player player ){
		if (ticks &gt;= calculatedTime) {
			success( player );
			ticks = 0;
			calculatedTime = calculateDelay( player );
			return true;
		}
		ticks++;
		return false;
	}
[/code]
This is the process of the firemaking action. As you can see, we also override this. We return true once the time is over. Then we run the &quot;success&quot; function and return true, to indicate we are done with the process.

[code=java]
	public void success( Player player ){
		FiremakingFire fire = new FiremakingFire( wood, gitem.getTile( ) ); // In here we will make a new FiremakingFire object (We will write that after this)
		fire.goOn(); // We turn the fire on here.
		Region region = World.getWorld().getRegionManager().getRegionByID(gitem.getTile().getRegionID()); // We get the world&#39;s region the log ground item is in
		region.removeItem( gitem ); // We remove the ground item (Logs)
		player.getSkills().addExperience(Skill.FIREMAKING, wood.getxp( ), 0, true); // We add experience to the firemaking skill
		player.getPacketDispatcher().dispatchMessage(&quot;The logs catch fire.&quot;, GameMessage.MessageOpcode.CHAT_BOX_FILTER); // We send a message to the client that the logs catch fire
	}
[/code]
Because it is easier to explain, just like the MakeFire function I am going to explain this code in the code section itself.

[code=java]
	@Override
	public void stop(Player player) {
		player.getUpdateArchive().queueAnimation(-1);
	}
[/code]
This is the function called when the action will be stopped. We stop any queued animations here.

[b]Step 4. FiremakingFire.java class[/b]
Alright, the end is incoming!
Make a new class, named FiremakingFire.java in your firemaking package.

[code=java]
	public Wood wood;
	public Tile tile;
	private RS3Object model;
	
	public FiremakingFire( Wood wood, Tile tile ){
		this.wood = wood;
		this.tile = tile;
		this.model = new RS3Object( wood.modelid(), 1, 10, tile );
	}
[/code]
This is just a constructor and some variables. Nothing too special about it.

[code=java]
	public void goOn( ){
		System.out.println( &quot;Fire went on&quot; ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).spawnObject( this.model );
		Timer timer = new Timer( );
		timer.schedule(new TimerTask() {
			  @Override
			  public void run() {
				  goOff();
			  }
		}, wood.getBurnTime()*1000);
	}
[/code]
This is the goOn function, when we want the fire to appear and burn out. We debug a line first, then we spawn an object we defined in the FiremakingFire constructor. We make a new Timer object, and let it run for wood.getBurnTime() seconds.

[code=java]
	public void goOff( ){
		System.out.println( &quot;Fire went off&quot; ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).destroyObject( this.model );
		GroundItem groundItem = new GroundItem( 592, 1, new Tile( this.tile ) );
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).addItem(groundItem);
	}
[/code]
Then, finally we write the goOff function. We debug a bit again, remove the fire object, spawn ashes, and we&#39;re done!

[b]Step 5. Making logs burn from your inventory[/b]
Yeah, you might have wondered, [i]How the !$@# will logs automatically refer to these functions??[/i] Well, they [i]don&#39;t[/i]. Fortunately, the base is written in a pretty good way when it comes to handling these things, so this shouldn&#39;t be a pain in the ass.

When you&#39;re in eclipse, press: CTRL+SHIFT+T, and enter Inventory, then Enter. This will open the Inventory class. Scroll to line ~283, or search for this: 
[code=java]System.out.println(&quot;Inventory item pressed: slot=&quot;+slotID+&quot;, itemID=&quot;+itemID+&quot;, option=&quot;+option+&quot; (&quot;+button.getID()+&quot;)&quot;);[/code]
Above that, add this:
[code=java]
                    // FIREMAKING //
                    if( option.equalsIgnoreCase( &quot;Light&quot; ) ){
                    	FiremakingAction action = new FiremakingAction( itemID );
                    	action.MakeFire( this.invowner, itemID, slotID, item, true );
                    	player.setActionEvent( action );
                    }
[/code]

[b][i]Tips, comments? Please post them below! Complaints and compliments are also welcome![/i][/b]

Voila, you are done! For the lazy fudges around here, these are the complete files:
Wood.java
[code=java]
package org.virtue.game.logic.content.skills.firemaking;

public enum Wood {
	NORMAL(1, 40, 1511, 25, 10, 87548, &quot;Logs&quot; ),
	OAK(15, 60, 1521, 12, 27, 87548, &quot;Oak logs&quot; ),
	WILLOW(30, 90, 1519, 170, 30, 87548, &quot;Willow logs&quot; ),
	TEAK(35, 105, 6333, 180, 33, 87548, &quot;Teak logs&quot; ),
	MAPLE(45, 125, 1517, 190, 36, 87548, &quot;Maple logs&quot; ),
	MAHOGANY(50, 157.5, 6332, 39, 16, 87548, &quot;Mahogany logs&quot; ),
	YEW(60, 202.5, 1515, 210, 42, 87548, &quot;Yew logs&quot; ),
	MAGIC(75, 303.8, 1513, 220, 45, 87548, &quot;Magic logs&quot; ),
	ELDER(90, 343.3, 29556, 230, 50, 87548, &quot;Elder logs&quot; );
	
	private final int levelRequired;
	private final double xp;
	private final int logid;
	private final int randomBurnTime;
	private final int randomMakeOnTime;
	private final int fireId;
	private final String name;
	
	Wood( int level, double xp, int LogID, int randomBurnTime, int randomMakeOnTime, int FireID, String name ){
		this.levelRequired = level;
		this.xp = xp;
		this.logid = LogID;
		this.randomBurnTime = randomBurnTime;
		this.randomMakeOnTime = randomMakeOnTime;
		this.fireId = FireID;
		this.name = name;
	}
	
	public int modelid( ){
		return this.fireId;
	}
	
	public double getxp( ){
		return this.xp;
	}
	
	public int getMakeTime( ){
		return this.randomMakeOnTime;
	}
	
	public int getBurnTime( ){
		return this.randomBurnTime;
	}
	
	public int getLevel( ){
		return this.levelRequired;
	}
	
	public int getItemID( ){
		return this.logid;
	}

	public static Wood forItemID (int itemID) {
		for (Wood a : Wood.values()) {
			if ( a.logid == itemID) {
				return a;
			}
		}
		return null;
	}
	
	public static Wood forItemName ( String itemName) {
		for (Wood a : Wood.values()) {
			if ( a.name.equalsIgnoreCase( itemName ) ) {
				return a;
			}
		}
		return null;
	}
}
[/code]

FiremakingAction.java:
[code=java]
package org.virtue.game.logic.content.skills.firemaking;

import org.virtue.Launcher;
import org.virtue.game.logic.World;
import org.virtue.game.logic.content.skills.Skill;
import org.virtue.game.logic.events.PlayerActionEvent;
import org.virtue.game.logic.item.GroundItem;
import org.virtue.game.logic.item.Item;
import org.virtue.game.logic.node.entity.player.Player;
import org.virtue.game.logic.region.Region;
import org.virtue.game.logic.region.Tile;
import org.virtue.network.protocol.messages.GameMessage;

public class FiremakingAction extends PlayerActionEvent{
	// Emote 733
	private int firemakingEmoteID = 733;
	private int ticks = 0;
	private int calculatedTime = 0;
	private GroundItem gitem;
	private Wood wood;
	
	public FiremakingAction( int id ){
		this.wood = Wood.forItemID( id );
	}
	
	public boolean MakeFire( Player player, int itemid, int slotid, Item item, boolean useInventory ){
		this.wood = Wood.forItemID( itemid );
		if( player.getSkills().getCurrentLevel(Skill.FIREMAKING) &lt; wood.getLevel() ){
			player.getPacketDispatcher().dispatchMessage(&quot;You require a firemaking level of &quot;+wood.getLevel()+&quot; to burn this wood.&quot;, GameMessage.MessageOpcode.CHAT_BOX);
			return false;
		}
		System.out.println( &quot;Making fire on account &quot; + player.getAccount().getUsername().getName() + &quot; Log id: &quot; + itemid );
		if( Wood.forItemID( itemid ) != null ){
			GroundItem groundItem = new GroundItem(item.getId(), item.getAmount(), new Tile( player.getTile()));
			this.gitem = groundItem;
			World.getWorld().getRegionManager().getRegionByID( player.getTile().getRegionID()).addItem(groundItem);
			player.getInventory().remove( item );
			player.getPacketDispatcher().dispatchMessage(&quot;You start making a fire.&quot;, GameMessage.MessageOpcode.CHAT_BOX_FILTER);
		}
		calculateDelay( player );
		start( player );
		return false;
	}
	
	@Override
	public boolean start(Player player) {
		return true;
	}
	
	public int calculateDelay (Player player ) {
		int delay = wood.getMakeTime() - player.getSkills().getCurrentLevel( Skill.FIREMAKING );
		if (delay &lt; 1 + wood.getMakeTime() ) {
			delay = 1 + Launcher.getRandom().nextInt( wood.getMakeTime() );
		}
		calculatedTime = delay;
		System.out.println( &quot;Firemaking delay calculated: &quot; + delay + &quot; ticks.&quot; );
		player.getUpdateArchive().queueAnimation( firemakingEmoteID );
		return delay;
	}
	
	@Override
	public boolean process( Player player ){
		if (ticks &gt;= calculatedTime) {
			success( player );
			ticks = 0;
			calculatedTime = calculateDelay( player );
			return true;
		}
		ticks++;
		return false;
	}
	
	public void success( Player player ){
		FiremakingFire fire = new FiremakingFire( wood, gitem.getTile( ) );
		fire.goOn();
		Region region = World.getWorld().getRegionManager().getRegionByID(gitem.getTile().getRegionID());
		region.removeItem( gitem );
		player.getSkills().addExperience(Skill.FIREMAKING, wood.getxp( ), 0, true);
		player.getPacketDispatcher().dispatchMessage(&quot;The logs catch fire.&quot;, GameMessage.MessageOpcode.CHAT_BOX_FILTER);
	}

	@Override
	public void stop(Player player) {
		player.getUpdateArchive().queueAnimation(-1);
	}
}
[/code]

FiremakingFire.Java
[code=java]
package org.virtue.game.logic.content.skills.firemaking;

import java.util.Timer;
import java.util.TimerTask;

import org.virtue.game.logic.World;
import org.virtue.game.logic.item.GroundItem;
import org.virtue.game.logic.node.object.RS3Object;
import org.virtue.game.logic.region.Tile;

public class FiremakingFire {
	public Wood wood;
	public Tile tile;
	private RS3Object model;
	
	public FiremakingFire( Wood wood, Tile tile ){
		this.wood = wood;
		this.tile = tile;
		this.model = new RS3Object( wood.modelid(), 1, 10, tile );
	}
	
	public void goOn( ){
		System.out.println( &quot;Fire went on&quot; ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).spawnObject( this.model );
		Timer timer = new Timer( );
		timer.schedule(new TimerTask() {
			  @Override
			  public void run() {
				  goOff();
			  }
		}, wood.getBurnTime()*1000);
	}
	
	public void goOff( ){
		System.out.println( &quot;Fire went off&quot; ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).destroyObject( this.model );
		GroundItem groundItem = new GroundItem( 592, 1, new Tile( this.tile ) );
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).addItem(groundItem);
	}
}
[/code]

[b][i]Tips, comments? Please post them below! Complaints and compliments are also welcome![/i][/b]</description>
    
    <lastBuildDate>Sun, 21 Jun 2015 15:44:57 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[VIRTUE / 803] Adding Firemaking (Working 75%)</title>
        <dc:creator><![CDATA[@littlestraffen littlestraffen]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/littlestraffen">@littlestraffen</a> wrote:</p>
          <blockquote>
              <p>the other 25% is it just the bonfire part that needs to be done or more stuff, nice tutorial btw very detailed</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869/2</link>
        <pubDate>Sun, 21 Jun 2015 15:44:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549869-2</guid>
        <source url="https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869.rss">[VIRTUE / 803] Adding Firemaking (Working 75%)</source>
      </item>
      <item>
        <title>[VIRTUE / 803] Adding Firemaking (Working 75%)</title>
        <dc:creator><![CDATA[@Techdaan Techdaan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/techdaan">@Techdaan</a> wrote:</p>
          <blockquote>
              <p>Hello, MoparScapers,</p>
<p>Here is Techdaan. I am a fifteen years old developer, and I chose to get more knowledge about RSPSses by making tutorials on “Shitty” bases. In my eyes, Virtue works, it needs alot of tweaking though. This is not something for lazy asses, or for people who are new to Java. Read on if you want to make a new skill, Firemaking, otherwise, please get out.</p>
<p><span class="bbcode-b">Step 1. Preparing the firemaking package.</span><br>
For step one, we will start off easily by making a new package named “org.virtue.game.logic.content.skills.firemaking”. Why? To organize your code more. Try to find a balance between too little and too many pacages, you want to have one for each skill, but not one for each ability.</p>
<p><span class="bbcode-b">Step 2. Configuring wood data</span><br>
<span class="bbcode-b">NOT ALL FIRE MODEL IDS ARE ENTERED PROPERLY. IF SOMEONE COULD SEND ME A LIST, THANK YOU!</span><br>
In your new package, make a new class named: “Wood.java”. In here, we will store everything:</p>
<pre><code class="lang-auto"></code></pre>
<p>Because we store data that doesn’t need its own class, and because this is <span class="bbcode-i">way</span> easier than using classes, we are going to use an enum.<br>
<span class="bbcode-i">More information about enums can be found in the JavaDocs: <a href="http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html" data-bbcode="true" rel="nofollow noopener">http://docs.oracle.com/javase/7/docs/api/java/lang/Enum.html</a></span><br>
We are now going to add in some more code to the enum, actually, only the data:</p>
<pre><code class="lang-auto">	NORMAL(1, 40, 1511, 25, 10, 87548, "Logs" ),
	OAK(15, 60, 1521, 12, 27, 87548, "Oak logs" ),
	WILLOW(30, 90, 1519, 170, 30, 87548, "Willow logs" ),
	TEAK(35, 105, 6333, 180, 33, 87548, "Teak logs" ),
	MAPLE(45, 125, 1517, 190, 36, 87548, "Maple logs" ),
	MAHOGANY(50, 157.5, 6332, 39, 16, 87548, "Mahogany logs" ),
	YEW(60, 202.5, 1515, 210, 42, 87548, "Yew logs" ),
	MAGIC(75, 303.8, 1513, 220, 45, 87548, "Magic logs" ),
	ELDER(90, 343.3, 29556, 230, 50, 87548, "Elder logs" );</code></pre>
<p>At the moment, those numbers don’t say anything at all, which is fine. They are basically data, with a bit of puzzling in the next code snippet you’ll understand.</p>
<pre><code class="lang-auto">	private final int levelRequired;
	private final double xp;
	private final int logid;
	private final int randomBurnTime;
	private final int randomMakeOnTime;
	private final int fireId;
	private final String name;</code></pre>
<p>This is the data that is bound to the Enum object. We can use this to provide information with getters, that we will write after the constructor. Nothing special is in here.</p>
<pre><code class="lang-auto">	Wood( int level, double xp, int LogID, int randomBurnTime, int randomMakeOnTime, int FireID, String name ){
		this.levelRequired = level;
		this.xp = xp;
		this.logid = LogID;
		this.randomBurnTime = randomBurnTime;
		this.randomMakeOnTime = randomMakeOnTime;
		this.fireId = FireID;
		this.name = name;
	}</code></pre>
<p>There we go. The constructor. The constructor enables us to make our own wood types, which should not be done. However, if you really wanted to make a new wood type, go ahead!</p>
<pre><code class="lang-auto">	public int modelid( ){
		return this.fireId;
	}
	
	public double getxp( ){
		return this.xp;
	}
	
	public int getMakeTime( ){
		return this.randomMakeOnTime;
	}
	
	public int getBurnTime( ){
		return this.randomBurnTime;
	}
	
	public int getLevel( ){
		return this.levelRequired;
	}
	
	public int getItemID( ){
		return this.logid;
	}</code></pre>
<p>Those are nothing but getters. Getters are not interesting at all, if you have questions about these, please just ask me and I will try to explain, however, if you don’t understand this, RSPS development on Virtue might not be your thing at all.</p>
<pre><code class="lang-auto">	public static Wood forItemID (int itemID) {
		for (Wood a : Wood.values()) {
			if ( a.logid == itemID) {
				return a;
			}
		}
		return null;
	}
	
	public static Wood forItemName ( String itemName) {
		for (Wood a : Wood.values()) {
			if ( a.name.equalsIgnoreCase( itemName ) ) {
				return a;
			}
		}
		return null;
	}</code></pre>
<p>Those are two functions that will come in very handy. What they do, is add a new function to the Wood enum, that allows us to get a wood by name or by ID. That is why we also provided the item name in the enum data.<br>
Basically what we do, is we take the whole Wood enumeration, loop over every wood there is registered, and check if the requested data matches the data of the enum. Not very complicated.</p>
<p><span class="bbcode-b">Step 3. Writing the FiremakingAction.java file</span><br>
FiremakingAction will handle everything, and is the second out of the three files we have to write in order to make Firemaking possible.<br>
Go ahead and make a new class “FiremakingAction.java” in your package for firemaking.</p>
<pre><code class="lang-auto">public class FiremakingAction extends PlayerActionEvent{
	// Emote 733
	private int firemakingEmoteID = 733;
	private int ticks = 0;
	private int calculatedTime = 0;
	private GroundItem gitem;
	private Wood wood;
	
	public FiremakingAction( int id ){
		this.wood = Wood.forItemID( id );
	}</code></pre>
<p>First of all, this is an <span class="bbcode-b">action</span>. This means that it will be created for each action there is. Nothing special, but something you really should know to understand parts of the code.<br>
At the top we are defining some action-bound data variables, and a constructor for the action, FiremakingAction with the log ID as ID.</p>
<pre><code class="lang-auto">	public boolean MakeFire( Player player, int itemid, int slotid, Item item, boolean useInventory ){
		this.wood = Wood.forItemID( itemid ); // We make the wood object to the wood ID
		if( player.getSkills().getCurrentLevel(Skill.FIREMAKING) &lt; wood.getLevel() ){ // We're going to check if the firemaking level is lower than the level required for the log
			player.getPacketDispatcher().dispatchMessage("You require a firemaking level of "+wood.getLevel()+" to burn this wood.", GameMessage.MessageOpcode.CHAT_BOX); // If that's true, we are going to send the player a message that they need a higher firemaking level
			return false; // Then we quit the process.
		}
		System.out.println( "Making fire on account " + player.getAccount().getUsername().getName() + " Log id: " + itemid ); // This is debugging
		if( Wood.forItemID( itemid ) != null ){ // We are going to check if the log is not null, so if we can even use it.
			GroundItem groundItem = new GroundItem(item.getId(), item.getAmount(), new Tile( player.getTile())); // If it is not a null, we will spawn the log on the ground
			this.gitem = groundItem; // Set the ground item to the class's "gitem" variable
			World.getWorld().getRegionManager().getRegionByID( player.getTile().getRegionID()).addItem(groundItem); // Add the actual ground item to the world
			player.getInventory().remove( item ); // Remove the log from the inventory
			player.getPacketDispatcher().dispatchMessage("You start making a fire.", GameMessage.MessageOpcode.CHAT_BOX_FILTER); // And send the player a message
		}
		calculateDelay( player ); // This will calculate the delay for the player to make a fire.
		start( player ); // This will trigger the action to start running
		return false; // I have no idea why this is here, honestly
	}</code></pre>
<p>Okay, this is a shitload of code. I know. Look in the code section itself for more information.</p>
<pre><code class="lang-auto">	@Override
	public boolean start(Player player) {
		return true;
	}</code></pre>
<p>This overrides the “start” of the firemaking action. It doesnt contain code because we handled everything in the MakeFire function.</p>
<pre><code class="lang-auto">	public int calculateDelay (Player player ) {
		int delay = wood.getMakeTime() - player.getSkills().getCurrentLevel( Skill.FIREMAKING );
		if (delay &lt; 1 + wood.getMakeTime() ) {
			delay = 1 + Launcher.getRandom().nextInt( wood.getMakeTime() );
		}
		calculatedTime = delay;
		System.out.println( "Firemaking delay calculated: " + delay + " ticks." );
		player.getUpdateArchive().queueAnimation( firemakingEmoteID );
		return delay;
	}</code></pre>
<p>This will calculate the ticks required for the log to burn, as well as running the emote.</p>
<pre><code class="lang-auto">	@Override
	public boolean process( Player player ){
		if (ticks &gt;= calculatedTime) {
			success( player );
			ticks = 0;
			calculatedTime = calculateDelay( player );
			return true;
		}
		ticks++;
		return false;
	}</code></pre>
<p>This is the process of the firemaking action. As you can see, we also override this. We return true once the time is over. Then we run the “success” function and return true, to indicate we are done with the process.</p>
<pre><code class="lang-auto">	public void success( Player player ){
		FiremakingFire fire = new FiremakingFire( wood, gitem.getTile( ) ); // In here we will make a new FiremakingFire object (We will write that after this)
		fire.goOn(); // We turn the fire on here.
		Region region = World.getWorld().getRegionManager().getRegionByID(gitem.getTile().getRegionID()); // We get the world's region the log ground item is in
		region.removeItem( gitem ); // We remove the ground item (Logs)
		player.getSkills().addExperience(Skill.FIREMAKING, wood.getxp( ), 0, true); // We add experience to the firemaking skill
		player.getPacketDispatcher().dispatchMessage("The logs catch fire.", GameMessage.MessageOpcode.CHAT_BOX_FILTER); // We send a message to the client that the logs catch fire
	}</code></pre>
<p>Because it is easier to explain, just like the MakeFire function I am going to explain this code in the code section itself.</p>
<pre><code class="lang-auto">	@Override
	public void stop(Player player) {
		player.getUpdateArchive().queueAnimation(-1);
	}</code></pre>
<p>This is the function called when the action will be stopped. We stop any queued animations here.</p>
<p><span class="bbcode-b">Step 4. FiremakingFire.java class</span><br>
Alright, the end is incoming!<br>
Make a new class, named FiremakingFire.java in your firemaking package.</p>
<pre><code class="lang-auto">	public Wood wood;
	public Tile tile;
	private RS3Object model;
	
	public FiremakingFire( Wood wood, Tile tile ){
		this.wood = wood;
		this.tile = tile;
		this.model = new RS3Object( wood.modelid(), 1, 10, tile );
	}</code></pre>
<p>This is just a constructor and some variables. Nothing too special about it.</p>
<pre><code class="lang-auto">	public void goOn( ){
		System.out.println( "Fire went on" ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).spawnObject( this.model );
		Timer timer = new Timer( );
		timer.schedule(new TimerTask() {
			  @Override
			  public void run() {
				  goOff();
			  }
		}, wood.getBurnTime()*1000);
	}</code></pre>
<p>This is the goOn function, when we want the fire to appear and burn out. We debug a line first, then we spawn an object we defined in the FiremakingFire constructor. We make a new Timer object, and let it run for wood.getBurnTime() seconds.</p>
<pre><code class="lang-auto">	public void goOff( ){
		System.out.println( "Fire went off" ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).destroyObject( this.model );
		GroundItem groundItem = new GroundItem( 592, 1, new Tile( this.tile ) );
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).addItem(groundItem);
	}</code></pre>
<p>Then, finally we write the goOff function. We debug a bit again, remove the fire object, spawn ashes, and we’re done!</p>
<p><span class="bbcode-b">Step 5. Making logs burn from your inventory</span><br>
Yeah, you might have wondered, <span class="bbcode-i">How the !$@# will logs automatically refer to these functions??</span> Well, they <span class="bbcode-i">don’t</span>. Fortunately, the base is written in a pretty good way when it comes to handling these things, so this shouldn’t be a pain in the ass.</p>
<p>When you’re in eclipse, press: CTRL+SHIFT+T, and enter Inventory, then Enter. This will open the Inventory class. Scroll to line ~283, or search for this:</p>
<pre><code class="lang-auto"></code></pre>
<p>Above that, add this:</p>
<pre><code class="lang-auto">                    // FIREMAKING //
                    if( option.equalsIgnoreCase( "Light" ) ){
                    	FiremakingAction action = new FiremakingAction( itemID );
                    	action.MakeFire( this.invowner, itemID, slotID, item, true );
                    	player.setActionEvent( action );
                    }</code></pre>
<p><span class="bbcode-b"><span class="bbcode-i">Tips, comments? Please post them below! Complaints and compliments are also welcome!</span></span></p>
<p>Voila, you are done! For the lazy fudges around here, these are the complete files:<br>
Wood.java</p>
<pre><code class="lang-auto">package org.virtue.game.logic.content.skills.firemaking;

public enum Wood {
	NORMAL(1, 40, 1511, 25, 10, 87548, "Logs" ),
	OAK(15, 60, 1521, 12, 27, 87548, "Oak logs" ),
	WILLOW(30, 90, 1519, 170, 30, 87548, "Willow logs" ),
	TEAK(35, 105, 6333, 180, 33, 87548, "Teak logs" ),
	MAPLE(45, 125, 1517, 190, 36, 87548, "Maple logs" ),
	MAHOGANY(50, 157.5, 6332, 39, 16, 87548, "Mahogany logs" ),
	YEW(60, 202.5, 1515, 210, 42, 87548, "Yew logs" ),
	MAGIC(75, 303.8, 1513, 220, 45, 87548, "Magic logs" ),
	ELDER(90, 343.3, 29556, 230, 50, 87548, "Elder logs" );
	
	private final int levelRequired;
	private final double xp;
	private final int logid;
	private final int randomBurnTime;
	private final int randomMakeOnTime;
	private final int fireId;
	private final String name;
	
	Wood( int level, double xp, int LogID, int randomBurnTime, int randomMakeOnTime, int FireID, String name ){
		this.levelRequired = level;
		this.xp = xp;
		this.logid = LogID;
		this.randomBurnTime = randomBurnTime;
		this.randomMakeOnTime = randomMakeOnTime;
		this.fireId = FireID;
		this.name = name;
	}
	
	public int modelid( ){
		return this.fireId;
	}
	
	public double getxp( ){
		return this.xp;
	}
	
	public int getMakeTime( ){
		return this.randomMakeOnTime;
	}
	
	public int getBurnTime( ){
		return this.randomBurnTime;
	}
	
	public int getLevel( ){
		return this.levelRequired;
	}
	
	public int getItemID( ){
		return this.logid;
	}

	public static Wood forItemID (int itemID) {
		for (Wood a : Wood.values()) {
			if ( a.logid == itemID) {
				return a;
			}
		}
		return null;
	}
	
	public static Wood forItemName ( String itemName) {
		for (Wood a : Wood.values()) {
			if ( a.name.equalsIgnoreCase( itemName ) ) {
				return a;
			}
		}
		return null;
	}
}</code></pre>
<p>FiremakingAction.java:</p>
<pre><code class="lang-auto">package org.virtue.game.logic.content.skills.firemaking;

import org.virtue.Launcher;
import org.virtue.game.logic.World;
import org.virtue.game.logic.content.skills.Skill;
import org.virtue.game.logic.events.PlayerActionEvent;
import org.virtue.game.logic.item.GroundItem;
import org.virtue.game.logic.item.Item;
import org.virtue.game.logic.node.entity.player.Player;
import org.virtue.game.logic.region.Region;
import org.virtue.game.logic.region.Tile;
import org.virtue.network.protocol.messages.GameMessage;

public class FiremakingAction extends PlayerActionEvent{
	// Emote 733
	private int firemakingEmoteID = 733;
	private int ticks = 0;
	private int calculatedTime = 0;
	private GroundItem gitem;
	private Wood wood;
	
	public FiremakingAction( int id ){
		this.wood = Wood.forItemID( id );
	}
	
	public boolean MakeFire( Player player, int itemid, int slotid, Item item, boolean useInventory ){
		this.wood = Wood.forItemID( itemid );
		if( player.getSkills().getCurrentLevel(Skill.FIREMAKING) &lt; wood.getLevel() ){
			player.getPacketDispatcher().dispatchMessage("You require a firemaking level of "+wood.getLevel()+" to burn this wood.", GameMessage.MessageOpcode.CHAT_BOX);
			return false;
		}
		System.out.println( "Making fire on account " + player.getAccount().getUsername().getName() + " Log id: " + itemid );
		if( Wood.forItemID( itemid ) != null ){
			GroundItem groundItem = new GroundItem(item.getId(), item.getAmount(), new Tile( player.getTile()));
			this.gitem = groundItem;
			World.getWorld().getRegionManager().getRegionByID( player.getTile().getRegionID()).addItem(groundItem);
			player.getInventory().remove( item );
			player.getPacketDispatcher().dispatchMessage("You start making a fire.", GameMessage.MessageOpcode.CHAT_BOX_FILTER);
		}
		calculateDelay( player );
		start( player );
		return false;
	}
	
	@Override
	public boolean start(Player player) {
		return true;
	}
	
	public int calculateDelay (Player player ) {
		int delay = wood.getMakeTime() - player.getSkills().getCurrentLevel( Skill.FIREMAKING );
		if (delay &lt; 1 + wood.getMakeTime() ) {
			delay = 1 + Launcher.getRandom().nextInt( wood.getMakeTime() );
		}
		calculatedTime = delay;
		System.out.println( "Firemaking delay calculated: " + delay + " ticks." );
		player.getUpdateArchive().queueAnimation( firemakingEmoteID );
		return delay;
	}
	
	@Override
	public boolean process( Player player ){
		if (ticks &gt;= calculatedTime) {
			success( player );
			ticks = 0;
			calculatedTime = calculateDelay( player );
			return true;
		}
		ticks++;
		return false;
	}
	
	public void success( Player player ){
		FiremakingFire fire = new FiremakingFire( wood, gitem.getTile( ) );
		fire.goOn();
		Region region = World.getWorld().getRegionManager().getRegionByID(gitem.getTile().getRegionID());
		region.removeItem( gitem );
		player.getSkills().addExperience(Skill.FIREMAKING, wood.getxp( ), 0, true);
		player.getPacketDispatcher().dispatchMessage("The logs catch fire.", GameMessage.MessageOpcode.CHAT_BOX_FILTER);
	}

	@Override
	public void stop(Player player) {
		player.getUpdateArchive().queueAnimation(-1);
	}
}</code></pre>
<p>FiremakingFire.Java</p>
<pre><code class="lang-auto">package org.virtue.game.logic.content.skills.firemaking;

import java.util.Timer;
import java.util.TimerTask;

import org.virtue.game.logic.World;
import org.virtue.game.logic.item.GroundItem;
import org.virtue.game.logic.node.object.RS3Object;
import org.virtue.game.logic.region.Tile;

public class FiremakingFire {
	public Wood wood;
	public Tile tile;
	private RS3Object model;
	
	public FiremakingFire( Wood wood, Tile tile ){
		this.wood = wood;
		this.tile = tile;
		this.model = new RS3Object( wood.modelid(), 1, 10, tile );
	}
	
	public void goOn( ){
		System.out.println( "Fire went on" ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).spawnObject( this.model );
		Timer timer = new Timer( );
		timer.schedule(new TimerTask() {
			  @Override
			  public void run() {
				  goOff();
			  }
		}, wood.getBurnTime()*1000);
	}
	
	public void goOff( ){
		System.out.println( "Fire went off" ) ;
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).destroyObject( this.model );
		GroundItem groundItem = new GroundItem( 592, 1, new Tile( this.tile ) );
		World.getWorld().getRegionManager().getRegionByID( this.model.getTile().getRegionID()).addItem(groundItem);
	}
}</code></pre>
<p><span class="bbcode-b"><span class="bbcode-i">Tips, comments? Please post them below! Complaints and compliments are also welcome!</span></span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869/1</link>
        <pubDate>Fri, 13 Feb 2015 07:25:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549869-1</guid>
        <source url="https://forum.moparisthebest.com/t/virtue-803-adding-firemaking-working-75/549869.rss">[VIRTUE / 803] Adding Firemaking (Working 75%)</source>
      </item>
  </channel>
</rss>
