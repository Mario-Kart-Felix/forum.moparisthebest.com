<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Re: [Tut] &#39;Listeners&#39;</title>
    <link>https://forum.moparisthebest.com/t/re-tut-listeners/2033</link>
    <description>Heres one of my tuts from Aryan Reloaded:

[b]TUTORIAL: BASIC GUI and EventListeners
DIFFICULTLY: Low - Medium[/b]

Hey all.

I&#39;m currently suffering from extreme boredom, so I&#39;ve decided to write a lil&#39; tutorial on a few things. I&#39;m assuming you know the basics of java - if you don&#39;t, you probably won&#39;t understand this :) On the other hand, this was definately NOT written for expertsâ€”a lil bit too basic for that.

OK, so here we go!  

In this tutorial, I&#39;ll be guiding you through the making of a simple currency Converter. I&#39;ll cover a few things:

	- BASIC (Very basic) GUI
	- ActionListeners,DocumentListeners, ItemListeners and MouseListeners etc.

[b]PART 1: GUI[/b]

First of all, let&#39;s start of by making a verrrry simple GUI.    :D 

So, we start off just like any other java app:
(Everything&#39;s commented, so if you don&#39;t know what something does, have a look at the comment next to it.)



[code]import javax.swing.*; //Import Declarations
import java.awt.*;

public class CCV extends JFrame{  

/*The &#39;extends JFrame&#39; Bit just means that this script is an extension 
 *of the class JFrame.
 */	
    JTextField textField = new JTextField(5); //Creates A JTextField named &#39;textField&#39; which has a length of 5.
    JComboBox combo = new JComboBox(); //Creats a JCombo Box
    JLabel label = new JLabel(&quot;        &quot;); //Creates a lable with the text &quot;     &quot;
    JButton button = new JButton(&quot;Exit&quot;);  //Creates a JButton Labeled &quot;Exit&quot;
    
	public CCV(){
		
		setLayout(new FlowLayout()); 
		
		/*Sets the Layout to a very basic flow layout. 
		*(Items flow in the order that they are added)
		*/
		
		add(button); //Adds the Exit button we created before
		add(textField); //Adds the text Field we created before
        combo.addItem(&quot;AU&quot;);  //Adds the option &quot;AU&quot; to the JComboBox named &#39;combo&#39;
        combo.addItem(&quot;US&quot;);  //Adds the option &quot;US&quot; to the JComboBox named &#39;combo&#39;
        add(combo);    //Adds the JComboBox &#39;combo&#39; to the GUI
        
        add(label);  //Adds the label we created before to the GUI
		
setSize(300,87); //sets the JFrame Size to 300 by 87
setTitle(&quot;Currency Converter&quot;); //Sets the title of the Box to &#39;Currency Converter&#39;
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Sets the close operation
		setVisible(true);//Makes the JFrame visible.
	}
	
	public static void main(String args[]){
		new CCV(); //Creates a new instance of CCV
	}
}[/code]


Ok, so compile that and run itâ€¦
Ok well isnâ€™t that nice, now youâ€™ve got yourself a pretty little GUI â€¦  :roll: problem?? IT DOESNâ€™T DO ANYTHING!!! If youâ€™re gonna make something, itâ€™s always a good idea that the buttons you added actually do somethingâ€¦ or else youâ€™ll get suedâ€¦(I dunno why, but Iâ€™m sure you will)
So letâ€™s make it do something!
To make items â€˜do stuffâ€™ when you click on them, Java uses things called â€˜Listenersâ€™ Basically, they wait untill the user does something, and then slaps the computer until it does what the user asked it to. In order to user a Listener in a Program, you must do three things:

[b]1: First create a listener, [/b]
[i](eg: ActionListener al = new ActionListener(){ActionListener Code goes here. This is the hard way}; [/i]
OR you can implement it [i](class abcdef implements ActionListener) )[/i]
[b]2. Add the listener to an object,  [/b]
[i](eg Exit_Button.addActionListener(al)  )[/i]
[b]3. Tell the computer what to do when that object is clicked or activated. [/b][i](eg: public void actionPerformed(ActionEvent e){System.exit(0)})[/i]
Hereâ€™s an example:

[code]import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;

public class RandomClass extends JFrame implements ActionListener{
	
	/*  &lt;&lt;1&gt;&gt;The &#39;implements Actionlistener&#39; is an Important part.
	 *  It creates a default actionlistener with this class
	 */
	
	JButton butt = new JButton(&quot;Exit&quot;); //Created a new JButton
	
	public RandomClass(){
		
		setLayout(new FlowLayout()); //FlowLayout again
		butt.addActionListener(this); 
		
	/*  &lt;&lt;2&gt;&gt;This ADDS an action listener to the button &#39;butt&#39;
	 *	the &#39;(this)&#39; shows which actionListener to add (since the entire
	 *  class implements an actionlistener, the &#39;this&#39; command is used, telling
	 *  the program to use the default actionListener.  
	 */
		add(butt);
		setSize(100,100);
		setVisible(true);
	}
	public void actionPerformed(ActionEvent E){
		System.exit(0);
	}
	
	/*&lt;&lt;3&gt;&gt; The final part, this little bit tells the computer
	 * what to do when an action is performed. When an Action is performed, the
	 * program calls on this event and carries out whatever code is under it.
	 * This code simply tells the computer that when an action is performed, 
	 * the program should close!(System.exit(0)) Nice n&#39; easy, right?
	 */
	
	public static void main(String args[]){
		new RandomClass();
	}
}[/code]


Here Is a basic list of some common listeners and the event types they pass to the computer (the thing in brackets after, say for example
public void actionPerformed(THIS_THING e)  ) 

	[b]ActionListener[/b]: Listens for actions on things like buttons.
			Event type: [i]Action Event[/i]
	[b]ItemListener[/b]: Listens for actions on things like combo boxes.
			Event type: [i]Item Event[/i]
	[b]MouseListener[/b]: Listens for mouse actions, such as clicks or movements.
			EventType: [i]MouseEvent[/i]
	[b]DocumentListener:[/b] Watches a document for changes.
			Event type: [i]DocumentEvent[/i]

Hope ya got that. Once again, feel free to ask questions
	OK, thatâ€™s all for this part, Iâ€™ll write â€˜Part2â€™ tomorrow or something â€“ we can make our nice little GUI do something 

Untill then,

Happy Programming! :)

------[b]Iamadam[/b]------[br][size=1]Posted at: April 27, 2006, 04:56:18 am[/size][hr]Heres Part 2:

Hey again, and welcome to Tutorial Part 2:

Last time, we made a lil GUI that didnâ€™t do much. I also introduced you to â€˜listenersâ€™
Today, Iâ€™ll help you make that currency converter actually do something! Firstly, Ill give you the code. 
As always, Itâ€™s heavily commented. Read it, try it, understand it 


[code]import javax.swing.*; //Import Declarations
import java.awt.*;
import javax.swing.event.*; //We&#39;ve added the event packages.
import java.awt.event.*;

public class CCV extends JFrame implements 
	DocumentListener, ActionListener, ItemListener{  

/* The implements part simply tells the program to inclue the classes 
 *&#39;DocumentListener&#39; and *&#39;actionListener&#39; in this program. 
 * When these are implemented, certain methods must be added to your script
 * (See Below for explanation) 
 */	
 	JTextField textField = new JTextField(5);
    JComboBox combo = new JComboBox(); 
    JLabel label = new JLabel(&quot;        &quot;); 
    JButton button = new JButton(&quot;Exit&quot;);  
    
	public CCV(){
		
		setLayout(new FlowLayout());
				
		textField.getDocument().addDocumentListener(this);
		/*Gets the document
		* that the textField is writing to. It then adds a DocumentListener 
		*(&#39;this&#39; - the default document listener implemented with this class)
		* to this document(See below for explanation of DocumentListeners)
		*/
  		combo.addItemListener(this); 
  		/*Adds an ItemListener to the ComboBox (combo) we created before.
		*/
        button.addActionListener(this);
     	 /*Adds an ActionListener to the exit button we created before.
		*/

		add(button);
		add(textField); 
        combo.addItem(&quot;AU&quot;);  
        combo.addItem(&quot;US&quot;);  
        add(combo);
        
        add(label);  
		
		setSize(300,87); 
		setTitle(&quot;Currency Converter&quot;); 
		setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
		setVisible(true);
	}
	
	public static void main(String args[]){
		new CCV();
	}
	
	public void setTextOnLabel(){
		  
        String amountString = &quot;&quot;;
        String L = textField.getText();
        /*Gets the current text in the textField, and saves it to the 
         *String &#39;L&#39;;
         */		
 		double amount = 0;
 		
 			try{
 			amount = Double.parseDouble(textField.getText());
 			//Attempts to convert the text from the textField into a Double
 			}catch (NumberFormatException e){
 				/*This happens when the user inputs an 
 				 *invalid string(like &#39;I eat dogs&#39;)
 				 */
 				amountString = &quot;Please Input a Value&quot;; 			
 			}							
 								
 			if (combo.getSelectedItem().equals(&quot;AU&quot;))  
 			/*gets the currently
 			 *selected item in our combo box, and compares it to &quot;AU&quot; 
 			 *If it is equal to &quot;AU&quot; it multiplies the amount in the text field
 			 *by 1.34 (which converts US dollars into AU dollars =)
 			 */
 
 				amount = amount * 1.34;	  
 				
 		amountString = &quot;$&quot;+amount;		 	  
		label.setText(amountString); 
		/*Sets the text on the label to whatever is stored in &#39;amountString&#39;
		 *(Either a value, or the words &quot;Please Input a Value&quot;)
		 */ 
    }
	
	public void actionPerformed(ActionEvent E){
		System.exit(0); //Exits the program.
	}
	
	/* This bit of code tells the computer what to do when
	 * an action is performed. It passes the ActionEvent which called it
	 * into the method. (You don&#39;t have to use this data though)
	 * This is the only method which must be added to your script when
	 * actionListener is implemented.
	 */
	 
	public void insertUpdate(DocumentEvent D){
		setTextOnLabel();
	}
	/*This is the first of three methods which you must add when a
	 *DocumentListener is implemented. This method tells the computer
	 *what to do when text is inserted into the document (in out case, the
	 *document is the textField) This method simply execuxtes the code under
	 * &#39;setTextOnLabel&#39;
	 */
	
	public void removeUpdate(DocumentEvent D){
		setTextOnLabel();
	}
	/*This is the second method you need to add for a documentListener
	 * This method tells the computer what to do when text is deleted
	 * from the document. Like the insertUpdate, this update also
	 * calls on the &#39;setTextOnLabel&#39;method. 
	 */
	
	public void changedUpdate(DocumentEvent D){
	}
	
	/*This is the last documentListener method you have to add. It is similar
	 *to the first two (Kinda a combination of both. Since the others both
	 *have code in them, this one is unnescessary, so it&#39;s left blank 
	 *(IT MUST STILL BE HERE THOUGH, or else you&#39;ll get some error when you
	 *compile it!)
	 */
	
	public void itemStateChanged(ItemEvent E){
		setTextOnLabel();
	}
	/*This is the only method you gotta add when using an itemListener.
	 *It listens for itemEvents(Like when you change the option on a 
	 *dropdown menu. Oncwe again, this method calls on the &#39;setTextOnLabel&#39;
	 *method&#39;
	 */	
	
}[/code]
Phew, well that was a marathon, wasnâ€™t it!

OK Letâ€™s see how the program works:

Starts GUI (public CCV) ---&gt;
Waits For Actions(All of the listeners) ---&gt;
Re-evaluates what the label should say(setTextOnLabel)

Ok, Iâ€™ll explain those listeners a bit more in depth:

We established last time, that in order to create a listener, you need to do three things.
What were they???
Hah you forgot already??? Well first you gotta make the listener, then you gotta add it to an object
and finally, youâ€™ve gotta tell the computer what to do when the object is activated.
Well, now that youâ€™ve used that, I can explain how you tell the computer â€˜what to do and when to do itâ€™

Each different type of listener calls on a different method when it is activated. So if you have a nice little
exit button, but the â€˜actionPerformedâ€™ method it wants isnâ€™t there, guess what you get?

[b][size=18pt]ERROR, WILL SELF_DESTRUCT SOON[/size] (emo lol)[/b]

Coz Mr. Computer isnâ€™t smart enough to realise that when you click the exit button, you want it to exit! 
You have to Explicitly tell him what to do when that little button is pushed. And you do that like this:

[code]public void actionPerformed(ActionEvent e){
	System.exit(0);
}[/code]

That tells the computer that whenever an action is performed, EXIT!! But uhoh! what if you also have a start button and you want something to happen when it&#39;s hit? IF you used the above code, every time you clicked the &#39;start&#39; button, your program would be closed! Why?? Well, both buttons call the SAME event! Donâ€™t want your program closing everytime you hit start (Like windows :P)

so you can add in this little line of code to CHECK which object caused the event:

[code]public void actionPerformed(ActionEvent e){
	Object whereItCameFrom = e.getSource();
	if (whereItCameFrom.equals(TheNameOfYourExitButton))
	System.exit(0);

}[/code]
This means that the program will ONLY exit IF the event came from the EXIT button. So any other buttons you have arern&#39;t gonna make it exit anymore :)

Hope you understod that bit. 
As each listener requires different methods, Iâ€™ve written a couple down for you. These methods
_MUST_ be used if you implement their listener.

[b]DocumentListener [/b]
   changedUpdate(DocumentEvent D)   -- called when a document is changed
   removeUpdate(DocumentEvent D)  --called when text is removed from a document
   insertUpdate(DocumentEvent D) â€“called when text is added to a document
				
[b]ItemListener[/b]
	   itemStateChanged(ItemEvent I) â€“Called when an item changes (eg the combo box selection)

[b]ActionListener[/b]
	   actionPerformed(ActionEvent e) â€“ called when an action is performed (Eg: Button Clicked)

[b]MouseListener[/b]
	   mouseEntered(MouseEvent m) â€“called when the cursor passes over an object
   mouseExited(MouseEvent m)  --called when the cursor moves away from the object
   mouseClicked(MouseEvent m)  --called when the mouse is pressed and then released on the object
   mousePressed(MouseEvent m)  --called when the mouse is pressed down on an object
   mouseReleased(MouseEvent m)  --called when the mouse is released

Well, that should hopefully help you. Try to make the program I made better. Add more listeners, 
more items, more whatever. Do what ya like, just make sure you didnâ€™t read alllll of that and not learn anything :)

Well, I&#39;m off, Apparently theres a free sponge bob screensaver waiting for me!!! (YAY!)

As always, ask questions if you donâ€™t get it!!  :P  

Cya!!</description>
    
    <lastBuildDate>Sat, 29 Apr 2006 10:24:00 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/re-tut-listeners/2033.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Re: [Tut] &#39;Listeners&#39;</title>
        <dc:creator><![CDATA[@kmb Kmb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kmb">@kmb</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="2033"><div class="title">
<div class="quote-controls"></div>
<img alt="" width="20" height="20" src="//forum.moparisthebest.mopar/letter_avatar_proxy/v2/letter/i/ecae2f/40.png" class="avatar">Iamadam:</div>
<blockquote><p>Yay, thanks. Its always good to get some feedback <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>I'm thinking of maybe writing some more...any Ideas?</p></blockquote></aside>

<p>How about some basic graphic drawing? It would continue smoothly this tutorial :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/re-tut-listeners/2033/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/re-tut-listeners/2033/4</link>
        <pubDate>Sat, 29 Apr 2006 10:24:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2033-4</guid>
        <source url="https://forum.moparisthebest.com/t/re-tut-listeners/2033.rss">Re: [Tut] &#39;Listeners&#39;</source>
      </item>
      <item>
        <title>Re: [Tut] &#39;Listeners&#39;</title>
        <dc:creator><![CDATA[@Iamadam Iamadam]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iamadam">@Iamadam</a> wrote:</p>
          <blockquote>
              <p>Yay, thanks. Its always good to get some feedback <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>I'm thinking of maybe writing some more...any Ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/re-tut-listeners/2033/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/re-tut-listeners/2033/3</link>
        <pubDate>Fri, 28 Apr 2006 22:48:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2033-3</guid>
        <source url="https://forum.moparisthebest.com/t/re-tut-listeners/2033.rss">Re: [Tut] &#39;Listeners&#39;</source>
      </item>
      <item>
        <title>Re: [Tut] &#39;Listeners&#39;</title>
        <dc:creator><![CDATA[@kmb Kmb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kmb">@kmb</a> wrote:</p>
          <blockquote>
              <p>Nice, probably the best tutorial here so far :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/re-tut-listeners/2033/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/re-tut-listeners/2033/2</link>
        <pubDate>Fri, 28 Apr 2006 13:26:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2033-2</guid>
        <source url="https://forum.moparisthebest.com/t/re-tut-listeners/2033.rss">Re: [Tut] &#39;Listeners&#39;</source>
      </item>
      <item>
        <title>Re: [Tut] &#39;Listeners&#39;</title>
        <dc:creator><![CDATA[@Iamadam Iamadam]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iamadam">@Iamadam</a> wrote:</p>
          <blockquote>
              <p>Heres one of my tuts from Aryan Reloaded:</p>

<p><span class="bbcode-b">TUTORIAL: BASIC GUI and EventListeners<br>DIFFICULTLY: Low - Medium</span></p>

<p>Hey all.</p>

<p>I'm currently suffering from extreme boredom, so I've decided to write a lil' tutorial on a few things. I'm assuming you know the basics of java - if you don't, you probably won't understand this <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"> On the other hand, this was definately NOT written for expertsâ€”a lil bit too basic for that.</p>

<p>OK, so here we go!  </p>

<p>In this tutorial, I'll be guiding you through the making of a simple currency Converter. I'll cover a few things:</p>

<pre><code>- BASIC (Very basic) GUI
- ActionListeners,DocumentListeners, ItemListeners and MouseListeners etc.</code></pre>

<p><span class="bbcode-b">PART 1: GUI</span></p>

<p>First of all, let's start of by making a verrrry simple GUI.    <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/smiley.png?v=3" title=":smiley:" class="emoji" alt=":smiley:"> </p>

<p>So, we start off just like any other java app:<br>(Everything's commented, so if you don't know what something does, have a look at the comment next to it.)</p>

<p></p><pre><code class="lang-auto">import javax.swing.*; //Import Declarations
import java.awt.*;
public class CCV extends JFrame{  
/*The 'extends JFrame' Bit just means that this script is an extension 
 *of the class JFrame.
 */	
    JTextField textField = new JTextField(5); //Creates A JTextField named 'textField' which has a length of 5.
    JComboBox combo = new JComboBox(); //Creats a JCombo Box
    JLabel label = new JLabel("        "); //Creates a lable with the text "     "
    JButton button = new JButton("Exit");  //Creates a JButton Labeled "Exit"
	public CCV(){
		setLayout(new FlowLayout()); 
		/*Sets the Layout to a very basic flow layout. 
		*(Items flow in the order that they are added)
		*/
		add(button); //Adds the Exit button we created before
		add(textField); //Adds the text Field we created before
        combo.addItem("AU");  //Adds the option "AU" to the JComboBox named 'combo'
        combo.addItem("US");  //Adds the option "US" to the JComboBox named 'combo'
        add(combo);    //Adds the JComboBox 'combo' to the GUI
        add(label);  //Adds the label we created before to the GUI
setSize(300,87); //sets the JFrame Size to 300 by 87
setTitle("Currency Converter"); //Sets the title of the Box to 'Currency Converter'
setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); //Sets the close operation
		setVisible(true);//Makes the JFrame visible.
	}
	public static void main(String args[]){
		new CCV(); //Creates a new instance of CCV
	}
}</code></pre>

<p>Ok, so compile that and run itâ€¦<br>Ok well isnâ€™t that nice, now youâ€™ve got yourself a pretty little GUI â€¦  :roll: problem?? IT DOESNâ€™T DO ANYTHING!!! If youâ€™re gonna make something, itâ€™s always a good idea that the buttons you added actually do somethingâ€¦ or else youâ€™ll get suedâ€¦(I dunno why, but Iâ€™m sure you will)<br>So letâ€™s make it do something!<br>To make items â€˜do stuffâ€™ when you click on them, Java uses things called â€˜Listenersâ€™ Basically, they wait untill the user does something, and then slaps the computer until it does what the user asked it to. In order to user a Listener in a Program, you must do three things:</p>

<p><span class="bbcode-b">1: First create a listener, </span><br><span class="bbcode-i">(eg: ActionListener al = new ActionListener(){ActionListener Code goes here. This is the hard way}; </span><br>OR you can implement it <span class="bbcode-i">(class abcdef implements ActionListener) )</span><br><span class="bbcode-b">2. Add the listener to an object,  </span><br><span class="bbcode-i">(eg Exit_Button.addActionListener(al)  )</span><br><span class="bbcode-b">3. Tell the computer what to do when that object is clicked or activated. </span><span class="bbcode-i">(eg: public void actionPerformed(ActionEvent e){System.exit(0)})</span><br>Hereâ€™s an example:</p>

<p></p><pre><code class="lang-auto">import javax.swing.*;
import javax.swing.event.*;
import java.awt.*;
import java.awt.event.*;
public class RandomClass extends JFrame implements ActionListener{
	/*  &lt;&lt;1&gt;&gt;The 'implements Actionlistener' is an Important part.
	 *  It creates a default actionlistener with this class
	 */
	JButton butt = new JButton("Exit"); //Created a new JButton
	public RandomClass(){
		setLayout(new FlowLayout()); //FlowLayout again
		butt.addActionListener(this); 
	/*  &lt;&lt;2&gt;&gt;This ADDS an action listener to the button 'butt'
	 *	the '(this)' shows which actionListener to add (since the entire
	 *  class implements an actionlistener, the 'this' command is used, telling
	 *  the program to use the default actionListener.  
	 */
		add(butt);
		setSize(100,100);
		setVisible(true);
	}
	public void actionPerformed(ActionEvent E){
		System.exit(0);
	}
	/*&lt;&lt;3&gt;&gt; The final part, this little bit tells the computer
	 * what to do when an action is performed. When an Action is performed, the
	 * program calls on this event and carries out whatever code is under it.
	 * This code simply tells the computer that when an action is performed, 
	 * the program should close!(System.exit(0)) Nice n' easy, right?
	 */
	public static void main(String args[]){
		new RandomClass();
	}
}</code></pre>

<p>Here Is a basic list of some common listeners and the event types they pass to the computer (the thing in brackets after, say for example<br>public void actionPerformed(THIS_THING e)  ) </p>

<pre><code>[b]ActionListener[/b]: Listens for actions on things like buttons.
		Event type: [i]Action Event[/i]
[b]ItemListener[/b]: Listens for actions on things like combo boxes.
		Event type: [i]Item Event[/i]
[b]MouseListener[/b]: Listens for mouse actions, such as clicks or movements.
		EventType: [i]MouseEvent[/i]
[b]DocumentListener:[/b] Watches a document for changes.
		Event type: [i]DocumentEvent[/i]</code></pre>

<p>Hope ya got that. Once again, feel free to ask questions<br>	OK, thatâ€™s all for this part, Iâ€™ll write â€˜Part2â€™ tomorrow or something â€“ we can make our nice little GUI do something </p>

<p>Untill then,</p>

<p>Happy Programming! <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>

<p>------<span class="bbcode-b">Iamadam</span>------[br][size=1]Posted at: April 27, 2006, 04:56:18 am[/size][hr]Heres Part 2:</p>

<p>Hey again, and welcome to Tutorial Part 2:</p>

<p>Last time, we made a lil GUI that didnâ€™t do much. I also introduced you to â€˜listenersâ€™<br>Today, Iâ€™ll help you make that currency converter actually do something! Firstly, Ill give you the code. <br>As always, Itâ€™s heavily commented. Read it, try it, understand it </p>

<p></p><pre><code class="lang-auto">import javax.swing.*; //Import Declarations
import java.awt.*;
import javax.swing.event.*; //We've added the event packages.
import java.awt.event.*;
public class CCV extends JFrame implements 
	DocumentListener, ActionListener, ItemListener{  
/* The implements part simply tells the program to inclue the classes 
 *'DocumentListener' and *'actionListener' in this program. 
 * When these are implemented, certain methods must be added to your script
 * (See Below for explanation) 
 */	
 	JTextField textField = new JTextField(5);
    JComboBox combo = new JComboBox(); 
    JLabel label = new JLabel("        "); 
    JButton button = new JButton("Exit");  
	public CCV(){
		setLayout(new FlowLayout());
		textField.getDocument().addDocumentListener(this);
		/*Gets the document
		* that the textField is writing to. It then adds a DocumentListener 
		*('this' - the default document listener implemented with this class)
		* to this document(See below for explanation of DocumentListeners)
		*/
  		combo.addItemListener(this); 
  		/*Adds an ItemListener to the ComboBox (combo) we created before.
		*/
        button.addActionListener(this);
     	 /*Adds an ActionListener to the exit button we created before.
		*/
    	add(button);
	add(textField); 
    combo.addItem("AU");  
    combo.addItem("US");  
    add(combo);
    
    add(label);  
	
	setSize(300,87); 
	setTitle("Currency Converter"); 
	setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); 
	setVisible(true);
}

public static void main(String args[]){
	new CCV();
}

public void setTextOnLabel(){
	  
    String amountString = "";
    String L = textField.getText();
    /*Gets the current text in the textField, and saves it to the 
     *String 'L';
     */
 		double amount = 0;
 			try{
 			amount = Double.parseDouble(textField.getText());
 			//Attempts to convert the text from the textField into a Double
 			}catch (NumberFormatException e){
 				/*This happens when the user inputs an 
 				 *invalid string(like 'I eat dogs')
 				 */
 				amountString = "Please Input a Value"; 			
 			}							
 			if (combo.getSelectedItem().equals("AU"))  
 			/*gets the currently
 			 *selected item in our combo box, and compares it to "AU" 
 			 *If it is equal to "AU" it multiplies the amount in the text field
 			 *by 1.34 (which converts US dollars into AU dollars =)
 			 */
 				amount = amount * 1.34;	  
 		amountString = "$"+amount;		 	  
		label.setText(amountString); 
		/*Sets the text on the label to whatever is stored in 'amountString'
		 *(Either a value, or the words "Please Input a Value")
		 */ 
    }
	public void actionPerformed(ActionEvent E){
		System.exit(0); //Exits the program.
	}
	/* This bit of code tells the computer what to do when
	 * an action is performed. It passes the ActionEvent which called it
	 * into the method. (You don't have to use this data though)
	 * This is the only method which must be added to your script when
	 * actionListener is implemented.
	 */
	public void insertUpdate(DocumentEvent D){
		setTextOnLabel();
	}
	/*This is the first of three methods which you must add when a
	 *DocumentListener is implemented. This method tells the computer
	 *what to do when text is inserted into the document (in out case, the
	 *document is the textField) This method simply execuxtes the code under
	 * 'setTextOnLabel'
	 */
	public void removeUpdate(DocumentEvent D){
		setTextOnLabel();
	}
	/*This is the second method you need to add for a documentListener
	 * This method tells the computer what to do when text is deleted
	 * from the document. Like the insertUpdate, this update also
	 * calls on the 'setTextOnLabel'method. 
	 */
	public void changedUpdate(DocumentEvent D){
	}
	/*This is the last documentListener method you have to add. It is similar
	 *to the first two (Kinda a combination of both. Since the others both
	 *have code in them, this one is unnescessary, so it's left blank 
	 *(IT MUST STILL BE HERE THOUGH, or else you'll get some error when you
	 *compile it!)
	 */
	public void itemStateChanged(ItemEvent E){
		setTextOnLabel();
	}
	/*This is the only method you gotta add when using an itemListener.
	 *It listens for itemEvents(Like when you change the option on a 
	 *dropdown menu. Oncwe again, this method calls on the 'setTextOnLabel'
	 *method'
	 */	
}</code></pre>

<p>Phew, well that was a marathon, wasnâ€™t it!</p>

<p>OK Letâ€™s see how the program works:</p>

<p>Starts GUI (public CCV) ---&gt;<br>Waits For Actions(All of the listeners) ---&gt;<br>Re-evaluates what the label should say(setTextOnLabel)</p>

<p>Ok, Iâ€™ll explain those listeners a bit more in depth:</p>

<p>We established last time, that in order to create a listener, you need to do three things.<br>What were they???<br>Hah you forgot already??? Well first you gotta make the listener, then you gotta add it to an object<br>and finally, youâ€™ve gotta tell the computer what to do when the object is activated.<br>Well, now that youâ€™ve used that, I can explain how you tell the computer â€˜what to do and when to do itâ€™</p>

<p>Each different type of listener calls on a different method when it is activated. So if you have a nice little<br>exit button, but the â€˜actionPerformedâ€™ method it wants isnâ€™t there, guess what you get?</p>

<p><span class="bbcode-b">[size=18pt]ERROR, WILL SELF_DESTRUCT SOON[/size] (emo lol)</span></p>

<p>Coz Mr. Computer isnâ€™t smart enough to realise that when you click the exit button, you want it to exit! <br>You have to Explicitly tell him what to do when that little button is pushed. And you do that like this:</p>

<p></p><pre><code class="lang-auto">public void actionPerformed(ActionEvent e){
	System.exit(0);
}</code></pre>

<p>That tells the computer that whenever an action is performed, EXIT!! But uhoh! what if you also have a start button and you want something to happen when it's hit? IF you used the above code, every time you clicked the 'start' button, your program would be closed! Why?? Well, both buttons call the SAME event! Donâ€™t want your program closing everytime you hit start (Like windows :P)</p>

<p>so you can add in this little line of code to CHECK which object caused the event:</p>

<p></p><pre><code class="lang-auto">public void actionPerformed(ActionEvent e){
	Object whereItCameFrom = e.getSource();
	if (whereItCameFrom.equals(TheNameOfYourExitButton))
	System.exit(0);
}</code></pre>

<p>This means that the program will ONLY exit IF the event came from the EXIT button. So any other buttons you have arern't gonna make it exit anymore <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>

<p>Hope you understod that bit. <br>As each listener requires different methods, Iâ€™ve written a couple down for you. These methods<br><em>MUST</em> be used if you implement their listener.</p>

<p><span class="bbcode-b">DocumentListener </span><br>   changedUpdate(DocumentEvent D)   -- called when a document is changed<br>   removeUpdate(DocumentEvent D)  --called when text is removed from a document<br>   insertUpdate(DocumentEvent D) â€“called when text is added to a document</p>

<p><span class="bbcode-b">ItemListener</span><br>	   itemStateChanged(ItemEvent I) â€“Called when an item changes (eg the combo box selection)</p>

<p><span class="bbcode-b">ActionListener</span><br>	   actionPerformed(ActionEvent e) â€“ called when an action is performed (Eg: Button Clicked)</p>

<p><span class="bbcode-b">MouseListener</span><br>	   mouseEntered(MouseEvent m) â€“called when the cursor passes over an object<br>   mouseExited(MouseEvent m)  --called when the cursor moves away from the object<br>   mouseClicked(MouseEvent m)  --called when the mouse is pressed and then released on the object<br>   mousePressed(MouseEvent m)  --called when the mouse is pressed down on an object<br>   mouseReleased(MouseEvent m)  --called when the mouse is released</p>

<p>Well, that should hopefully help you. Try to make the program I made better. Add more listeners, <br>more items, more whatever. Do what ya like, just make sure you didnâ€™t read alllll of that and not learn anything <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>

<p>Well, I'm off, Apparently theres a free sponge bob screensaver waiting for me!!! (YAY!)</p>

<p>As always, ask questions if you donâ€™t get it!!  <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/stuck_out_tongue.png?v=3" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  </p>

<p>Cya!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/re-tut-listeners/2033/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/re-tut-listeners/2033/1</link>
        <pubDate>Thu, 27 Apr 2006 11:58:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2033-1</guid>
        <source url="https://forum.moparisthebest.com/t/re-tut-listeners/2033.rss">Re: [Tut] &#39;Listeners&#39;</source>
      </item>
  </channel>
</rss>
