<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Java + Python] Item Cleanser</title>
    <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804</link>
    <description>I&#39;ve written a small program for my server&#39;s &quot;partial item cleansing&quot; (to clarify, this is actually [b]not[/b] an economy reset, ha). It partially cleans the players&#39; banks (keeps the first 16 or so items) and fully cleans the players&#39; inventories.

I&#39;ve written an implementation in both Java and Python (well actually, to be honest I&#39;ve also tried doing it in C but that failed miserably, lol), and I get these results (reads and writes 26126 character files):

Java:
&lt;blockquote&gt;Aug 18, 2012 9:21:45 PM net.projectrainbow.rodgerwilco.RainbowCleansing main
INFO: Complete! Total Process Time: 1513.641 secs.&lt;/blockquote&gt;
aka 25 minutes

Python:
&lt;blockquote&gt;Complete! Total Process Time: 201.849761632 secs.&lt;/blockquote&gt;
aka 3.33 minutes

Besides the print output (I used Logger in the Java one so therefore an extra line is printed, but I&#39;ve tested the program with the Logger printing commented out and it doesn&#39;t seem to make much of a difference), there is very little differences in these programs. Why is the Python implementation so much faster than the Java implementation? I thought Python, as a scripting language, would be slow; however, in this case, it&#39;s actually much faster than Java. Or perhaps, is it just my code? I&#39;ve only tested this [b]once[/b] but multiple tests should yield similar results.

P.S: I didn&#39;t feel like creating a new Eclipse project, so I used an old one.

Java
[code=java]
package net.projectrainbow.rodgerwilco;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * RainbowCleansing.java
 * @author Whackatre
 * 
 * Suck on that, you players!
 *
 */

public class RainbowCleansing {
	
	/**
	 * The path to the old character files.
	 */
	private static final String DIRECTORY = &quot;./old_characters/&quot;;
	
	/**
	 * The path to the new character files.
	 */
	private static final String NEW_DIRECTORY = &quot;./characters/&quot;;
	
	/**
	 * The amount of items kept.
	 */
	private static final int ITEMS_KEPT = 16;
	
	/**
	 * If multiple items, how many to keep?
	 */
	private static final int AMOUNT_TO_KEEP = 1;
	
	/**
	 * The logger instance for this class.
	 */
	private static Logger logger = Logger.getLogger(RainbowCleansing.class.getName());
	
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		double initTime = System.currentTimeMillis();
		new RainbowCleansing().wipeItems();
		logger.info(&quot;Complete! Total Process Time: &quot; + ((double) (System.currentTimeMillis() - initTime) / 1000) + &quot; secs.&quot;);
	}
	
	/**
	 * Cleanses shit.
	 */
	private void wipeItems() {
		logger.info(&quot;Project Rainbow Item Cleansing Initialized..&quot;);
		/*
		 * Creates a File array of the character files.
		 */
		File dir = new File(DIRECTORY);
		File[] characterFiles = dir.listFiles();
		/*
		 * The loop for each character.
		 */
		for (File characterFile : characterFiles) {
			try {
				/*
				 * Don&#39;t bother if its extention is not &quot;.txt.&quot;
				 */
				if (!characterFile.getName().endsWith(&quot;.txt&quot;)) {
					logger.info(DIRECTORY + characterFile.getName() + &quot; is not a valid text file!&quot;);
					continue;
				}
				/*
				 * Creating two Lists for each file.
				 */
				logger.info(&quot;Wiping &quot; + DIRECTORY + characterFile.getName());
				List&lt;String&gt; data = IOUtils.readLog(DIRECTORY + characterFile.getName());
				List&lt;String&gt; newFile = new ArrayList&lt;String&gt;();
				/*
				 * Loops through the lines in the old file.
				 */
				for (int i = 0; i &lt; data.size(); i++) {
					String line = data.get(i);
					if (line.startsWith(&quot;character-bank =&quot;)) {
						try {
							String[] args = line.substring(17).split(&quot;\t&quot;);
							int slotNum = Integer.parseInt(args[0]);
							int amount = Integer.parseInt(args[2]);
							/*
							 * Sorry bud, you&#39;re not keeping that.
							 */
							if (slotNum &gt; ITEMS_KEPT) {
								continue;
							}
							/*
							 * So you think you can scam the system?
							 * Well, fuck off!
							 */
							if (amount &gt; AMOUNT_TO_KEEP) {
								line = line.replace(new Integer(amount).toString(), new Integer(AMOUNT_TO_KEEP).toString());
							}
						} catch (NumberFormatException nfe) {
							logger.log(Level.SEVERE, &quot;Failed to parse integer from line.&quot;, nfe);
						}
					}
					/*
					 * Sorry, but you&#39;re not going to keep
					 * any of your inventory items, bud!
					 */
					if (line.startsWith(&quot;character-item =&quot;)) {
						continue;
					}
					/*
					 * If it&#39;s clear, append the line to the other List.
					 */
					newFile.add(line);
				}
				/*
				 * Deletes the &quot;existing file&quot; just in case
				 * some moron decides to run this twice.
				 */
				new File(NEW_DIRECTORY + characterFile.getName()).delete();
				/*
				 * Writes the new file.
				 * 
				 * Writing (w) instead of appending (a) would have
				 * worked better, but frankly I couldn&#39;t
				 * give much of a shit.
				 * 
				 */
				IOUtils.writeLog(NEW_DIRECTORY + characterFile.getName(), newFile);
			} catch (Exception e) {
				/*
				 * Log the fucking exceptions.
				 */
				logger.log(Level.SEVERE, &quot;Exception!&quot;, e);
				IOUtils.writeLog(&quot;errors.txt&quot;, &quot;Exception with wiping: &quot; + characterFile.getName() + &quot; - &quot; + e.getMessage());
			}
		}
	}

}
[/code]

My nice little IO framework which this program uses:
[code=java]
package net.projectrainbow.rodgerwilco;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * IOUtils.java
 * A collection of input/output utilities.
 * 
 * @author Whackatre
 * @date June 2, 2012
 * @version 1.4
 */

public class IOUtils
{

	/**
	 * Deletes a file at the specified path. Prints out a message whether
	 * successful or not.
	 * 
	 * @param filePath
	 */
	public static void deleteFile(String filePath)
	{
		File file = new File(filePath);
		System.out.println(file.delete() ? &quot;Deleted file successfully: &quot; + filePath
				: &quot;Failed to delete file: &quot; + filePath);
	}

	/**
	 * Appends data to a file.
	 * 
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean writeLog(String filePath, String word)
	{
		BufferedWriter bw = null;
		try
		{
			bw = new BufferedWriter(new FileWriter(filePath, true));
			bw.write(word);
			bw.newLine();
			bw.flush();
			bw.close();
			return true;
		}
		catch (IOException ioe)
		{
			System.out.println(&quot;Error with IOUtils writing to &quot; + filePath);
			ioe.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Appends data to a file.
	 * @param filePath
	 * @param words
	 */
	public static void writeLog(String filePath, List&lt;String&gt; words)
	{
		for (String word : words)
		{
			writeLog(filePath, word);
		}
	}

	/**
	 * Reads a file, and returns a String array, with each element corresponding
	 * to a specific line.
	 * 
	 * @param filePath
	 * @return
	 */
	public static List&lt;String&gt; readLog(String filePath)
	{
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		BufferedReader br = null;
		try
		{
			br = new BufferedReader(new FileReader(filePath));
			String s;
			while ((s = br.readLine()) != null)
			{
				list.add(s);
			}
			br.close();
			return list;
		}
		catch (FileNotFoundException fnfe)
		{
			System.out.println(&quot;File not found: &quot; + filePath);
			File f = new File(filePath);
			try
			{
				f.createNewFile();
			}
			catch (IOException ioe)
			{
				ioe.printStackTrace();
			}
		}
		catch (IOException ioe)
		{
			System.out.println(&quot;Error with IOUtils reading &quot; + filePath);
			ioe.printStackTrace();
		}
		return null;
	}
	
	/**
	 * If a file contains a particular word, return true.
	 * It is case insensitive, so beware.
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean fileContains(String filePath, String word)
	{
		List&lt;String&gt; lines = readLog(filePath);
		for (int i = 0; i &lt; lines.size(); i++)
		{
			if (lines.get(i).equalsIgnoreCase(word))
				return true;
		}
		return false;
	}
	
	/**
	 * Wipes a line from a file.
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean wipeLine(String filePath, String word)
	{
		if (!fileContains(filePath, word))
			return false;
		List&lt;String&gt; lines = readLog(filePath);
		deleteFile(filePath);
		for (int i = 0; i &lt; lines.size(); i++)
		{
			if (!lines.get(i).equalsIgnoreCase(word))
			{
				writeLog(filePath, lines.get(i));
			}
		}
		return true;
	}
}
[/code]

The Python script:
[code=python]
#-------------------------------------------------------------------------------
# Name:        rainbow_cleansing
# Purpose:
#
# Author:      whackatre
#
# Created:     18/08/2012
# Copyright:   (c) whackatre 2012
#-------------------------------------------------------------------------------
#!/usr/bin/env python

import os
import string
import timeit
import traceback

DIRECTORY = &#39;./old_characters/&#39;
NEW_DIRECTORY = &#39;./characters/&#39;
ITEMS_KEPT = 16
AMOUNT_TO_KEEP = 1

def read_file(path): # reads and returns a list from a file
    data = []
    f = open(path, &#39;r&#39;)
    for line in f:
        data.append(line)
    f.close()
    return data

def write_file(path, data): # writes a list to a file
    f = open(path, &#39;w&#39;)
    for line in data:
        f.write(line)
    f.flush()
    f.close()

def wipe_items():
    print &#39;Project Rainbow Item Cleansing Initialized..&#39;
    dir_list = []
    try:
        dir_list = os.listdir(DIRECTORY) # creates a list of files in the directory
        new_dir_list = os.listdir(NEW_DIRECTORY) # checking to make sure the output folder exists
    except:
        print &#39;One of these paths &#39; + DIRECTORY + &#39; or &#39; + NEW_DIRECTORY + &#39; does not exist!&#39;
        exit()
    for file_name in dir_list:
        try:
            if not file_name.endswith(&#39;.txt&#39;): # if the ext is not txt, back off!
                print DIRECTORY + file_name + &#39; is not a valid text file!&#39;
                continue
            print &#39;Wiping &#39; + DIRECTORY + file_name
            data = read_file(DIRECTORY + file_name) # get a list of the lines in the file
            new_data = [] # the list of data to copy old data to
            for line in data:
                if line.startswith(&#39;character-bank =&#39;):
                    args = line[17:].split(&#39;\t&#39;)
                    slot_num = int(args[0])
                    amount = int(args[2])
                    if slot_num &gt; ITEMS_KEPT: # don&#39;t copy if the slot # is higher
                        continue
                    if amount &gt; AMOUNT_TO_KEEP: # don&#39;t copy if the amount is higher
                        line = line.replace(&#39;\t&#39; + str(amount), &#39;\t&#39; + str(AMOUNT_TO_KEEP))
                elif line.startswith(&#39;character-equip =&#39;): # remove all equipment
                    args = line[18:].split(&#39;\t&#39;)
                    wear_slot = int(args[0])
                    item_id = int(args[1])
                    amount = int(args[2])
                    if item_id != -1 or amount != 0: # if equipment exists, remove it
                        line = &#39;character-equip = &#39; + str(wear_slot) + &#39;\t&#39; + str(-1) + &#39;\t&#39; + str(0) + &#39;\t\n&#39;
                elif line.startswith(&#39;character-item =&#39;): # inventory items begone!
                    continue
                new_data.append(line) # if ^ was all right, append line to the list
            write_file(NEW_DIRECTORY + file_name, new_data) # write data into new file
        except:
            print &#39;Exception with cleansing!&#39;
            traceback.print_exc()

if __name__ == &#39;__main__&#39;:
    # initializing benchmarking and then executing the script
    t = timeit.Timer(&#39;wipe_items()&#39;, &#39;from __main__ import wipe_items&#39;)
    print &#39;Complete! Total Process Time: &#39; + str(t.timeit(1)) + &#39; secs.&#39;
[/code]

Feedback is appreciated.</description>
    
    <lastBuildDate>Wed, 29 Aug 2012 13:25:14 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:11, topic:454804”][quote]</p>
<pre><code class="lang-auto"></code></pre>
<p>[/quote][/quote]<br>
you might be afk for awhile so:</p>
<blockquote> isn't it that the pool stays alive until shutdown is called
 and
 the pool actually shutsdown after shutdown is called and all threads are dead?
 http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ThreadPoolExecutor.html#isTerminated()
 true if all tasks have completed following shut down
 shutdown()
 Initiates an orderly shutdown in which previously submitted tasks are executed, but no new tasks will be accepted. Invocation has no additional effect if already shut down.</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/12</link>
        <pubDate>Wed, 29 Aug 2012 13:25:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-12</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <blockquote>[code]                while(!pool.isTerminated());[/code]</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/11</link>
        <pubDate>Wed, 29 Aug 2012 13:01:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-11</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>Try this:</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;


public class BatchCleanser {

	public static void main(String[] args) {
		final String in_path = "./in-chars", out_path = "./out-chars";
		new File(out_path).mkdirs();
		
		final int init_size = 10, max_size = 40, keep_alive = 600;
		final LinkedBlockingQueue&lt;Runnable&gt; queue = new LinkedBlockingQueue&lt;Runnable&gt;();
		final ThreadPoolExecutor pool = new ThreadPoolExecutor(init_size, max_size, keep_alive, TimeUnit.MILLISECONDS, queue);
		
		final long start_time = System.currentTimeMillis();
		for(File f : new File(in_path).listFiles()) {
			try {
				Runnable task = new CleanserTask(f, new File(out_path + File.separatorChar + f.getName()));
				pool.execute(task);
			} catch (IOException e) {
				e.printStackTrace();
			}
		}
		pool.shutdown();
		while(!pool.isTerminated());
		System.out.printf("Took: %d ms", System.currentTimeMillis() - start_time);
		
	}
	
}
</code></pre>
<pre><code class="lang-auto">import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;

public class CleanserTask implements Runnable {
	
	private BufferedReader reader;
	
	private BufferedWriter writer;
	
	public CleanserTask(File infile, File outfile) throws IOException {
		this.reader = new BufferedReader(new InputStreamReader(new FileInputStream(infile)));
		this.writer = new BufferedWriter(new FileWriter(outfile));
	}

	@Override
	public void run() {
		try {
			String line;
			while(!(line = reader.readLine()).equals("[EQUIPMENT]")) {
				writer.write(line);
				writer.newLine();
			}
			writer.write("[EQUIPMENT]\n");
			for(int i = 0; i &lt; 14; ++i) {
				reader.readLine(); //seek past next entries
				writer.write("character-equip = " + i + "\t-1\t0\n");						
			}
			while(!(line = reader.readLine()).equals("[ITEMS]")) {
				writer.write(line);
				writer.newLine();
			}
			while(reader.readLine().length() != 0);
			writer.write("[ITEMS]\n\n");
			for(int i = 0; i &lt; 17; ++i) {
				writer.write(reader.readLine());
				writer.newLine();
			}
			while(reader.readLine().length() != 0);
			writer.write("\n");
			while((line = reader.readLine()) != null) {
				writer.write(line);
				writer.newLine();
			}			
			reader.close();
			writer.close();
		} catch(IOException ioe) {
			ioe.printStackTrace();
		}
	}

}</code></pre>
<p>edit: forgot timestamp, added</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/10</link>
        <pubDate>Tue, 28 Aug 2012 02:57:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-10</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="7" data-topic="454804">
<div class="title">
<div class="quote-controls"></div>
 veer:</div>
<blockquote>
<p>Do you want us to come up with a more efficient method?</p>
</blockquote>
</aside>
<p>Sure. I’d love to see a better method.</p>
<p>t4: ~26K files. My computer is pretty slow though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/9</link>
        <pubDate>Tue, 28 Aug 2012 01:45:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-9</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>tl;dr, but how many files are you processing with the latest benchmarks… it looks awfully slow.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/8</link>
        <pubDate>Tue, 28 Aug 2012 01:29:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-8</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Do you want us to come up with a more efficient method?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/7</link>
        <pubDate>Tue, 28 Aug 2012 01:25:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-7</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Thanks, zyle, veer, and meiscooldude; I’ve drastically reduced the process time.</p>
<p>It was actually quite unexpected.</p>
<p>New Java version with Eclipse with regular console output; previous files were not deleted:</p>
<blockquote>INFO: Complete! Total Process Time: 364.992 secs.</blockquote>
<p>New Java version with no console output; previous files were not deleted:</p>
<blockquote>INFO: Complete! Total Process Time: 41.134 secs.</blockquote>
<p>New Java version with no console output; previous files were deleted:</p>
<blockquote>INFO: Complete! Total Process Time: 173.647 secs.</blockquote>
<p>Python version with no console output; previous files were not deleted:</p>
<blockquote>Complete! Total Process Time: 41.5233737807 secs.</blockquote>
<p>Python version with no console output; previous files were deleted:</p>
<blockquote>Complete! Total Process Time: 72.1195397739 secs.</blockquote>
<p>Any reasons for why overwriting a file is faster than creating a new file?</p>
<aside class="quote" data-post="5" data-topic="454804">
<div class="title">
<div class="quote-controls"></div>
 veer:</div>
<blockquote>
<p>Why are all of the comments very angry and aggressive? Did you run the Python code after already cleaning with Java?</p>
</blockquote>
</aside>
<p>I was disappointed because a fairly large portion of my players tried using multiple (but creative!) methods to bypass this item cleansing; however, I don’t think I should delve deeper into that. The previous tests were done with a blank output folder.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/6</link>
        <pubDate>Sun, 26 Aug 2012 12:55:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-6</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Why are all of the comments very angry and aggressive? Did you run the Python code after already cleaning with Java?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/5</link>
        <pubDate>Sun, 26 Aug 2012 01:53:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-5</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@IcyyEffect IcyyEffect]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/icyyeffect">@IcyyEffect</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="3" data-topic="454804">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/asdss/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> ASDss:</div>
<blockquote>
<p>Me, I’m not a coder/developer. I play RSPS’ not make them, and this shit, makes my brain spin. l0l</p>
</blockquote>
</aside>
<p>x2</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/4</link>
        <pubDate>Sat, 25 Aug 2012 12:54:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-4</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@ASDss ASDss]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asdss">@ASDss</a> wrote:</p>
          <blockquote>
              <p>Me, I’m not a coder/developer. I play RSPS’ not make them, and this shit, makes my brain spin. l0l</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/3</link>
        <pubDate>Sun, 19 Aug 2012 05:47:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-3</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>One thing you should do is avoid creating a new BufferedWriter for each word in the log. Namely</p>
<pre><code class="lang-auto"> public static boolean writeLog(String filePath, String word)
        {
                BufferedWriter bw = null;
                try
                {
                        bw = new BufferedWriter(new FileWriter(filePath, true));
                        bw.write(word);
                        bw.newLine();
                        bw.flush();
                        bw.close();
                        return true;
                }
                catch (IOException ioe)
                {
                        System.out.println("Error with IOUtils writing to " + filePath);
                        ioe.printStackTrace();
                        return false;
                }
        }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/2</link>
        <pubDate>Sun, 19 Aug 2012 05:12:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-2</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
      <item>
        <title>[Java + Python] Item Cleanser</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>I’ve written a small program for my server’s “partial item cleansing” (to clarify, this is actually <span class="bbcode-b">not</span> an economy reset, ha). It partially cleans the players’ banks (keeps the first 16 or so items) and fully cleans the players’ inventories.</p>
<p>I’ve written an implementation in both Java and Python (well actually, to be honest I’ve also tried doing it in C but that failed miserably, lol), and I get these results (reads and writes 26126 character files):</p>
<p>Java:</p>
<blockquote>Aug 18, 2012 9:21:45 PM net.projectrainbow.rodgerwilco.RainbowCleansing main
INFO: Complete! Total Process Time: 1513.641 secs.</blockquote>
aka 25 minutes
<p>Python:</p>
<blockquote>Complete! Total Process Time: 201.849761632 secs.</blockquote>
aka 3.33 minutes
<p>Besides the print output (I used Logger in the Java one so therefore an extra line is printed, but I’ve tested the program with the Logger printing commented out and it doesn’t seem to make much of a difference), there is very little differences in these programs. Why is the Python implementation so much faster than the Java implementation? I thought Python, as a scripting language, would be slow; however, in this case, it’s actually much faster than Java. Or perhaps, is it just my code? I’ve only tested this <span class="bbcode-b">once</span> but multiple tests should yield similar results.</p>
<p>P.S: I didn’t feel like creating a new Eclipse project, so I used an old one.</p>
<p>Java</p>
<pre><code class="lang-auto">package net.projectrainbow.rodgerwilco;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Logger;
import java.util.logging.Level;

/**
 * RainbowCleansing.java
 * @author Whackatre
 * 
 * Suck on that, you players!
 *
 */

public class RainbowCleansing {
	
	/**
	 * The path to the old character files.
	 */
	private static final String DIRECTORY = "./old_characters/";
	
	/**
	 * The path to the new character files.
	 */
	private static final String NEW_DIRECTORY = "./characters/";
	
	/**
	 * The amount of items kept.
	 */
	private static final int ITEMS_KEPT = 16;
	
	/**
	 * If multiple items, how many to keep?
	 */
	private static final int AMOUNT_TO_KEEP = 1;
	
	/**
	 * The logger instance for this class.
	 */
	private static Logger logger = Logger.getLogger(RainbowCleansing.class.getName());
	
	/**
	 * 
	 * @param args
	 */
	public static void main(String[] args) {
		double initTime = System.currentTimeMillis();
		new RainbowCleansing().wipeItems();
		logger.info("Complete! Total Process Time: " + ((double) (System.currentTimeMillis() - initTime) / 1000) + " secs.");
	}
	
	/**
	 * Cleanses shit.
	 */
	private void wipeItems() {
		logger.info("Project Rainbow Item Cleansing Initialized..");
		/*
		 * Creates a File array of the character files.
		 */
		File dir = new File(DIRECTORY);
		File[] characterFiles = dir.listFiles();
		/*
		 * The loop for each character.
		 */
		for (File characterFile : characterFiles) {
			try {
				/*
				 * Don't bother if its extention is not ".txt."
				 */
				if (!characterFile.getName().endsWith(".txt")) {
					logger.info(DIRECTORY + characterFile.getName() + " is not a valid text file!");
					continue;
				}
				/*
				 * Creating two Lists for each file.
				 */
				logger.info("Wiping " + DIRECTORY + characterFile.getName());
				List&lt;String&gt; data = IOUtils.readLog(DIRECTORY + characterFile.getName());
				List&lt;String&gt; newFile = new ArrayList&lt;String&gt;();
				/*
				 * Loops through the lines in the old file.
				 */
				for (int i = 0; i &lt; data.size(); i++) {
					String line = data.get(i);
					if (line.startsWith("character-bank =")) {
						try {
							String[] args = line.substring(17).split("\t");
							int slotNum = Integer.parseInt(args[0]);
							int amount = Integer.parseInt(args[2]);
							/*
							 * Sorry bud, you're not keeping that.
							 */
							if (slotNum &gt; ITEMS_KEPT) {
								continue;
							}
							/*
							 * So you think you can scam the system?
							 * Well, fuck off!
							 */
							if (amount &gt; AMOUNT_TO_KEEP) {
								line = line.replace(new Integer(amount).toString(), new Integer(AMOUNT_TO_KEEP).toString());
							}
						} catch (NumberFormatException nfe) {
							logger.log(Level.SEVERE, "Failed to parse integer from line.", nfe);
						}
					}
					/*
					 * Sorry, but you're not going to keep
					 * any of your inventory items, bud!
					 */
					if (line.startsWith("character-item =")) {
						continue;
					}
					/*
					 * If it's clear, append the line to the other List.
					 */
					newFile.add(line);
				}
				/*
				 * Deletes the "existing file" just in case
				 * some moron decides to run this twice.
				 */
				new File(NEW_DIRECTORY + characterFile.getName()).delete();
				/*
				 * Writes the new file.
				 * 
				 * Writing (w) instead of appending (a) would have
				 * worked better, but frankly I couldn't
				 * give much of a shit.
				 * 
				 */
				IOUtils.writeLog(NEW_DIRECTORY + characterFile.getName(), newFile);
			} catch (Exception e) {
				/*
				 * Log the fucking exceptions.
				 */
				logger.log(Level.SEVERE, "Exception!", e);
				IOUtils.writeLog("errors.txt", "Exception with wiping: " + characterFile.getName() + " - " + e.getMessage());
			}
		}
	}

}</code></pre>
<p>My nice little IO framework which this program uses:</p>
<pre><code class="lang-auto">package net.projectrainbow.rodgerwilco;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * IOUtils.java
 * A collection of input/output utilities.
 * 
 * @author Whackatre
 * @date June 2, 2012
 * @version 1.4
 */

public class IOUtils
{

	/**
	 * Deletes a file at the specified path. Prints out a message whether
	 * successful or not.
	 * 
	 * @param filePath
	 */
	public static void deleteFile(String filePath)
	{
		File file = new File(filePath);
		System.out.println(file.delete() ? "Deleted file successfully: " + filePath
				: "Failed to delete file: " + filePath);
	}

	/**
	 * Appends data to a file.
	 * 
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean writeLog(String filePath, String word)
	{
		BufferedWriter bw = null;
		try
		{
			bw = new BufferedWriter(new FileWriter(filePath, true));
			bw.write(word);
			bw.newLine();
			bw.flush();
			bw.close();
			return true;
		}
		catch (IOException ioe)
		{
			System.out.println("Error with IOUtils writing to " + filePath);
			ioe.printStackTrace();
			return false;
		}
	}
	
	/**
	 * Appends data to a file.
	 * @param filePath
	 * @param words
	 */
	public static void writeLog(String filePath, List&lt;String&gt; words)
	{
		for (String word : words)
		{
			writeLog(filePath, word);
		}
	}

	/**
	 * Reads a file, and returns a String array, with each element corresponding
	 * to a specific line.
	 * 
	 * @param filePath
	 * @return
	 */
	public static List&lt;String&gt; readLog(String filePath)
	{
		List&lt;String&gt; list = new ArrayList&lt;String&gt;();
		BufferedReader br = null;
		try
		{
			br = new BufferedReader(new FileReader(filePath));
			String s;
			while ((s = br.readLine()) != null)
			{
				list.add(s);
			}
			br.close();
			return list;
		}
		catch (FileNotFoundException fnfe)
		{
			System.out.println("File not found: " + filePath);
			File f = new File(filePath);
			try
			{
				f.createNewFile();
			}
			catch (IOException ioe)
			{
				ioe.printStackTrace();
			}
		}
		catch (IOException ioe)
		{
			System.out.println("Error with IOUtils reading " + filePath);
			ioe.printStackTrace();
		}
		return null;
	}
	
	/**
	 * If a file contains a particular word, return true.
	 * It is case insensitive, so beware.
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean fileContains(String filePath, String word)
	{
		List&lt;String&gt; lines = readLog(filePath);
		for (int i = 0; i &lt; lines.size(); i++)
		{
			if (lines.get(i).equalsIgnoreCase(word))
				return true;
		}
		return false;
	}
	
	/**
	 * Wipes a line from a file.
	 * @param filePath
	 * @param word
	 * @return
	 */
	public static boolean wipeLine(String filePath, String word)
	{
		if (!fileContains(filePath, word))
			return false;
		List&lt;String&gt; lines = readLog(filePath);
		deleteFile(filePath);
		for (int i = 0; i &lt; lines.size(); i++)
		{
			if (!lines.get(i).equalsIgnoreCase(word))
			{
				writeLog(filePath, lines.get(i));
			}
		}
		return true;
	}
}</code></pre>
<p>The Python script:</p>
<pre><code class="lang-auto">#-------------------------------------------------------------------------------
# Name:        rainbow_cleansing
# Purpose:
#
# Author:      whackatre
#
# Created:     18/08/2012
# Copyright:   (c) whackatre 2012
#-------------------------------------------------------------------------------
#!/usr/bin/env python

import os
import string
import timeit
import traceback

DIRECTORY = './old_characters/'
NEW_DIRECTORY = './characters/'
ITEMS_KEPT = 16
AMOUNT_TO_KEEP = 1

def read_file(path): # reads and returns a list from a file
    data = []
    f = open(path, 'r')
    for line in f:
        data.append(line)
    f.close()
    return data

def write_file(path, data): # writes a list to a file
    f = open(path, 'w')
    for line in data:
        f.write(line)
    f.flush()
    f.close()

def wipe_items():
    print 'Project Rainbow Item Cleansing Initialized..'
    dir_list = []
    try:
        dir_list = os.listdir(DIRECTORY) # creates a list of files in the directory
        new_dir_list = os.listdir(NEW_DIRECTORY) # checking to make sure the output folder exists
    except:
        print 'One of these paths ' + DIRECTORY + ' or ' + NEW_DIRECTORY + ' does not exist!'
        exit()
    for file_name in dir_list:
        try:
            if not file_name.endswith('.txt'): # if the ext is not txt, back off!
                print DIRECTORY + file_name + ' is not a valid text file!'
                continue
            print 'Wiping ' + DIRECTORY + file_name
            data = read_file(DIRECTORY + file_name) # get a list of the lines in the file
            new_data = [] # the list of data to copy old data to
            for line in data:
                if line.startswith('character-bank ='):
                    args = line[17:].split('\t')
                    slot_num = int(args[0])
                    amount = int(args[2])
                    if slot_num &gt; ITEMS_KEPT: # don't copy if the slot # is higher
                        continue
                    if amount &gt; AMOUNT_TO_KEEP: # don't copy if the amount is higher
                        line = line.replace('\t' + str(amount), '\t' + str(AMOUNT_TO_KEEP))
                elif line.startswith('character-equip ='): # remove all equipment
                    args = line[18:].split('\t')
                    wear_slot = int(args[0])
                    item_id = int(args[1])
                    amount = int(args[2])
                    if item_id != -1 or amount != 0: # if equipment exists, remove it
                        line = 'character-equip = ' + str(wear_slot) + '\t' + str(-1) + '\t' + str(0) + '\t\n'
                elif line.startswith('character-item ='): # inventory items begone!
                    continue
                new_data.append(line) # if ^ was all right, append line to the list
            write_file(NEW_DIRECTORY + file_name, new_data) # write data into new file
        except:
            print 'Exception with cleansing!'
            traceback.print_exc()

if __name__ == '__main__':
    # initializing benchmarking and then executing the script
    t = timeit.Timer('wipe_items()', 'from __main__ import wipe_items')
    print 'Complete! Total Process Time: ' + str(t.timeit(1)) + ' secs.'</code></pre>
<p>Feedback is appreciated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-python-item-cleanser/454804/1</link>
        <pubDate>Sat, 18 Aug 2012 13:42:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-454804-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-python-item-cleanser/454804.rss">[Java + Python] Item Cleanser</source>
      </item>
  </channel>
</rss>
