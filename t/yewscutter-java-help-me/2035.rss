<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Yewscutter.java , help me!</title>
    <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035</link>
    <description>When I use yewscutter.java script ,I press F7 to Disable Graphics,after a few time,I press F7 to Enable Graphics.A err happen.
this is the script:

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class yewsCutter extends Script 
        implements ServerMessageListener{
  
    public static String[] commands = { &quot;yc&quot; };
    
    private static final int OBJECT_BANK_BOOTH = 2213;
    private static final int YEW_TREE_ID = 1309;
    private static final String[] LOCALS = {&quot;dr&quot;,&quot;vk&quot;};
    
    private JButton go = new JButton(&quot;Go&quot;);
    private JButton cancel = new JButton(&quot;Cancel&quot;);
    private JComboBox locations = new JComboBox(LOCALS);
    private JFrame frame = new JFrame(&quot;Where?&quot;);
    
    private static final Tile DRAYNOR_END_TILE = new Tile(2934,3230);
    private static final Tile[] DRAYNOR_TREES = new Tile[] { 
        new Tile(2934,3225), new Tile(2935,3229), new Tile(2933,3233), new Tile(2940,3232) 
        
    };
    private static final Tile[] DRAYNOR_RUN_PATH = new Tile[] {
        new Tile(2943,3226), new Tile(2929,3225), new Tile(2928,3232), new Tile(2943,3239)
    };
    private static final Tile[] PATH_DRAYNOR_TO_LUM_FOREST_YEWS = new Tile[] {
        new Tile(3012,3359), new Tile(3006,33359), new Tile(3006,3352), 
        new Tile(3006,3346), new Tile(3006,3340), new Tile(3006,3333), 
        new Tile(3006,3326), new Tile(3006,3321), new Tile(3007,3316), 
        new Tile(3007,3310), new Tile(3005,3305), new Tile(3005,3300), 
        new Tile(3005,3295), new Tile(3001,3290), new Tile(2997,3280), 
        new Tile(2992,3281), new Tile(2988,3276), new Tile(2981,3274),
        new Tile(2978,3270), new Tile(2976,3266), new Tile(2974,3260), 
        new Tile(2970,3258), new Tile(2965,3253), new Tile(2960,3248),
        new Tile(2956,3243), new Tile(2950,3241), new Tile(2946,3237),
        new Tile(2943,3232), new Tile(2938,3232), new Tile(2934,3230)
    };   
    private static final Tile[] DRAYNOR_DEAD_PATH = new Tile[] {
        new Tile(3222,3219), new Tile(3168,3168), new Tile(3222,3219), 
        new Tile(3227,3219), new Tile(3232,3221), new Tile(3232,3229), 
        new Tile(3226,3234), new Tile(3219,3237), new Tile(3213,3237), 
        new Tile(3206,3237), new Tile(3201,3237), new Tile(3193,3236), 
        new Tile(3187,3232), new Tile(3180,3229), new Tile(3173,3226), 
        new Tile(3166,3226), new Tile(3160,3225)       
    };
    
    private static final Tile VARROCK_END_TILE = new Tile(3214,3502);
    private static final Tile[] VARROCK_TREES = new Tile[] { 
        new Tile(3204,3503), new Tile(3208,3499), new Tile(3221, 3503)
    };
    private static final Tile[] VARROCK_RUN_PATH = new Tile[] {
        new Tile(3215,3502), new Tile(3160,3448), new Tile(3215,3502), 
        new Tile(3210,3502), new Tile(3205,3502), new Tile(3199,3500), 
        new Tile(3199,3494), new Tile(3196,3491)
    };
    private static final Tile[] PATH_VARROCK_TO_CASTLE_YEWS = new Tile[] {
        new Tile(3182,3437), new Tile(3144,3408), new Tile(3182,3437), 
        new Tile(3182,3433), new Tile(3189,3432), new Tile(3195,3433), 
        new Tile(3202,3438), new Tile(3208,3438), new Tile(3212,3440), 
        new Tile(3212,3446), new Tile(3208,3448), new Tile(3203,3449), 
        new Tile(3201,3454), new Tile(3200,3460), new Tile(3197,3466), 
        new Tile(3198,3471), new Tile(3198,3479), new Tile(3198,3486), 
        new Tile(3198,3492), new Tile(3199,3498), new Tile(3202,3501), 
        new Tile(3208,3502), new Tile(3214,3502)       
    };
    private static final Tile[] VARROCK_DEAD_PATH = new Tile[] {
        new Tile(3221,3218), new Tile(3168,3168), new Tile(3225,3218), 
        new Tile(3232,3219), new Tile(3232,3227), new Tile(3230,3233), 
        new Tile(3224,3240), new Tile(3220,3248), new Tile(3219,3255), 
        new Tile(3220,3262), new Tile(3227,3262), new Tile(3235,3262), 
        new Tile(3241,3263), new Tile(3240,3271), new Tile(3240,3278), 
        new Tile(3239,3286), new Tile(3239,3294), new Tile(3238,3302), 
        new Tile(3242,3308), new Tile(3246,3315), new Tile(3255,3322), 
        new Tile(3264,3326), new Tile(3263,3330), new Tile(3256,3330), 
        new Tile(3248,3335), new Tile(3239,3335), new Tile(3231,3336), 
        new Tile(3227,3343), new Tile(3226,3351), new Tile(3220,3357), 
        new Tile(3217,3365), new Tile(3213,3372), new Tile(3211,3379), 
        new Tile(3211,3388), new Tile(3212,3394), new Tile(3212,3400), 
        new Tile(3212,3407), new Tile(3212,3415), new Tile(3212,3423), 
        new Tile(3209,3430), new Tile(3212,3437), new Tile(3212,3443), 
        new Tile(3210,3449), new Tile(3204,3453), new Tile(3200,3459), 
        new Tile(3199,3467), new Tile(3199,3474), new Tile(3199,3482), 
        new Tile(3199,3489), new Tile(3199,3497), new Tile(3203,3501), 
        new Tile(3212,3502), new Tile(3214,3504), new Tile(3214,3504), 
        new Tile(3214,3504)
    };    

    private long startTime = System.currentTimeMillis();
    
    private int timeOutCount = 0;
    private int logCount = 0;
    private int bankCount = 0;
    private int attachCount = 0;

    private String input = &quot;&quot;;
    
    private static Tile[] pathToTrees;
    private static Tile[] runAwayPath;
    private static Tile[] trees;
    private static Tile[] deathPath;
    private static Tile endTile;
    
    private boolean banking = false;
    private boolean dead  = false;
    private boolean response = false;
    
    private Tile treePos;
    
    public boolean start(String command, String[] args) {   
        log(&quot;Started yewCutter.java by BBotter v1.05&quot;);
        input = args[0];
        if (input.equalsIgnoreCase(LOCALS[0]) || input.equals(&quot;1&quot;)){
            log(&quot;Draynor Yews Selected...&quot;);
            pathToTrees = PATH_DRAYNOR_TO_LUM_FOREST_YEWS;
            runAwayPath = DRAYNOR_RUN_PATH;
            endTile = DRAYNOR_END_TILE;
            trees = DRAYNOR_TREES;
            deathPath = DRAYNOR_DEAD_PATH;            
        }else if(input.equalsIgnoreCase(LOCALS[1]) || input.equals(&quot;2&quot;)){
            log(&quot;Varrock Yews Selected...&quot;);
            pathToTrees = PATH_VARROCK_TO_CASTLE_YEWS;
            runAwayPath = VARROCK_RUN_PATH;
            endTile = VARROCK_END_TILE;
            trees = VARROCK_TREES;
            deathPath = VARROCK_DEAD_PATH;            
        }else{
            log(&quot;Usage: /yewCutter([dr||vk])&quot;);
            return false;
        }
        init();
        return true;
    }
    
    private void init() {
        startTime = System.currentTimeMillis();
        EventManager.addServerMessageListener(this);
    }
    
    public long run(long ticks) {
        long rez = walkBack();
        if (rez !=0)
            return rez;
        
        rez = runCombat();
        if (rez != 0)
            return rez;

        rez = runBank();
        if (rez != 0)
            return rez;

        rez = runReturn();
        if (rez != 0)
            return rez;

        return runCut();
    }

    private long walkBack() {
        if(dead){
            Tile[] path = deathPath;
            if (distanceTo(path[path.length - 1]) &gt; 11) {
                walkPath(path);
                return random(2500, 3000);
            }
            dead = false;
            return 0;        
        } else
            return 0;
    }
    
    private long runCombat() {
        if (inCombat(myPlayer())) {
            if (distanceTo(endTile) &lt; 20) {
                log(&quot;Running From Combat Random!&quot;);
                if (distanceTo(runAwayPath[runAwayPath.length - 1]) &gt; 3) {
                    if (!getRun()){
                        log(&quot;Setting Run&quot;);
                        setRun(true);
                    }
                    walkPath(runAwayPath);
                    return random(1000, 1500);
                }
            }
        }
        return 0;
    }

    private long runBank() {
        if (banking) {
            Tile[] path = reversePath(pathToTrees);
            if (distanceTo(path[path.length - 1]) &gt; 5) {
                if (!getRun()){
                    log(&quot;Setting run...&quot;);
                    setRun(true);
                }
                walkPath(path, 15);
                return random(3000, 3500);
            } else {
                if (getInterface() != Constants.INTERFACE_BANK) {
                    int booth = findObject(OBJECT_BANK_BOOTH);
                    if (booth != -1) {
                        log(&quot;Opening bank...&quot;);
                        atObject(booth, 2);
                        return random(3000, 3500);
                    }
                } else if (getInterface() == Constants.INTERFACE_BANK) {
                    if (inventoryCount() &gt; getInvCountSuffix(&quot; axe&quot;)) {
                        return bankYews();
                    } else {
                        closeInterface();
                        bankCount++;
                        log(&quot;Finished banking&quot;);                        
                        banking = false;
                        return progressReport();
                    }
                }
            }
        }
        if (inventoryCount() == 28 &amp;&amp; !banking) {
            log(&quot;Time to bank..&quot;);
            banking = true;
            return 1;
        } else
            banking = false;
        return 0;
    }
    
    private long runReturn() {
        Tile[] path = pathToTrees;
        if (distanceTo(path[path.length - 1]) &gt; 11) {
            walkPath(path);
            return random(2500, 3000);
        }
        return 0;
    }
    
    private long runCut() {
        int treeID = findObject(YEW_TREE_ID);        
        if (myPlayer().anim == -1) {
            if (treeID != -1) {
                Tile pos = objectPos(treeID);
                if (isTree(pos)){
                    if (distanceTo(pos) &gt; 5) {                        
                        log(&quot;walking to tree...&quot;);                        
                        walk(pos);
                        return random(4000, 6000);
                    } else {
                        log(&quot;starting to cut tree...&quot;);
                        treePos = pos;
                        atObject(treeID, 1);
			timeOutCount=0;
                        return random(2000, 2500);
                    }
                }else{
                    log(&quot;no good tree, waiting&quot;);
                    if(timeOutCount++==35){
                        log(&quot;preventing timeout.&quot;);
                        walk(newRandom(endTile));
                        timeOutCount=0;
                    };                    
                    return random(1500, 2500);                    
                }
            } else {
                log(&quot;Could not find tree, waiting&quot;);
                if(timeOutCount++==35){
                    log(&quot;preventing timeout..&quot;);                    
                    walk(newRandom(endTile));
                    timeOutCount=0;
                };
                return random(1500, 2500);
            }
        } else if (treePos != null &amp;&amp; myPlayer().anim != -1) {
            NPC ent = findNearestNPCByName(&quot;Yew&quot;);
            if (ent == null){
		if(timeOutCount++==35){
                log(&quot;preventing timeout...&quot;);
                walk(newRandom(getPosition(myPlayer())));
                timeOutCount=0;
		};
                return random(1500,2500);
            }
            if (getPosition(ent).distanceTo(treePos) &lt; 3) {
                log(&quot;Ent appeared near us, stop chopping.&quot;);
                walk(newRandom(getPosition(myPlayer())));
                treePos = null;
            }
            return random(3000, 3500);
        }
        return 200;
    }
    
    private long bankYews() {
        int[] inv = getInventory();
        for (int i = 0; i &lt; inv.length; i++) {
            if (inv[i] != -1 &amp;&amp; !getItemName(inv[i]).toLowerCase().endsWith(&quot; axe&quot;)) {
                depositAll(inv[i], i);
                return random(1000, 1500);
            }
        }
        return 0;
    }
    
    private boolean isTree(Tile position){
        for (int i = 0; i &lt; trees.length; i++){
            if(position.equals(trees[i])){
                return true;
            }
        }
        return false;
    }

    private Tile newRandom(Tile old){
        return new Tile((old.x-3+random(0, 6)), (old.y-3+random(0, 6)));
    }
    private long progressReport() {
            int minutes = (int) ((System.currentTimeMillis() - startTime) / 60000);
            log(&quot;-&gt; You have cut (&quot; + logCount + &quot;) logs&quot;);
            log(&quot;-&gt; You have banked (&quot; + bankCount + &quot;) loads&quot;);
	    if (minutes!=0){
            	log(&quot;-&gt; You have cut avg of (&quot; + (logCount/minutes) + &quot;.&quot; + (((logCount%minutes)*100)/minutes) + &quot;) logs per minute&quot;);
	    }
            log(&quot;-&gt; reattached the axe head (&quot; + attachCount + &quot;) times&quot;);
            log(&quot;-&gt; Since &quot; + new java.util.Date(startTime) + &quot; (&quot; + minutes +
                            &quot; minutes ago)&quot;);

            return 0;
    }


    public void serverMessage(String message) {       
        if (message.indexOf(&quot;you are dead&quot;) != -1) {
            log(&quot;You died, Attempting WalkBack()!&quot;);
            dead = true;
	} else if (message.indexOf(&quot;you need an axe&quot;) != -1) {
            log(&quot;You dont have an axe?? how you going to cut trees?&quot;);
            shutdown(); 
        } else if (message.indexOf(&quot;carefully attach&quot;) != -1) {
                attachCount++;
        } else if (message.indexOf(&quot;get some yew&quot;) != -1) {
                logCount++;
        }
    }
}

err under:</description>
    
    <lastBuildDate>Fri, 28 Apr 2006 15:29:03 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Yewscutter.java , help me!</title>
        <dc:creator><![CDATA[@Bruteork Bruteork]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bruteork">@Bruteork</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="1" data-topic="2035">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/coolpiglet/40/5_8504b32b4165840149d2c3dd52eb0686.png" class="avatar"> coolpiglet:</div>
<blockquote>
<p>When I use yewscutter.java script ,I press F7 to Disable Graphics,after a few time,I press F7 to Enable Graphics.A err happen.</p>
</blockquote>
</aside>
<p>u r as logical as my chair… try to hit F7 onr more time to make the garphics disabled again! it must be helpful lol</p>
<hr>
<p>What a n00b, btw! =)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/5</link>
        <pubDate>Fri, 28 Apr 2006 15:29:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2035-5</guid>
        <source url="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss">Yewscutter.java , help me!</source>
      </item>
      <item>
        <title>Yewscutter.java , help me!</title>
        <dc:creator><![CDATA[@yuhaiyang1 yuhaiyang1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yuhaiyang1">@yuhaiyang1</a> wrote:</p>
          <blockquote>
              <p>just tell us the error, dont post the whole script <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/4</link>
        <pubDate>Fri, 28 Apr 2006 11:15:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2035-4</guid>
        <source url="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss">Yewscutter.java , help me!</source>
      </item>
      <item>
        <title>Yewscutter.java , help me!</title>
        <dc:creator><![CDATA[@xSignal xSignal]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xsignal">@xSignal</a> wrote:</p>
          <blockquote>
              <p>Telling us the error would help a bit <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/3</link>
        <pubDate>Thu, 27 Apr 2006 14:36:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2035-3</guid>
        <source url="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss">Yewscutter.java , help me!</source>
      </item>
      <item>
        <title>Yewscutter.java , help me!</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>gah. use code tag next time please. posting the whole script isnt necessary either. The bmp doesnt work for me</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/2</link>
        <pubDate>Thu, 27 Apr 2006 14:34:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2035-2</guid>
        <source url="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss">Yewscutter.java , help me!</source>
      </item>
      <item>
        <title>Yewscutter.java , help me!</title>
        <dc:creator><![CDATA[@coolpiglet coolpiglet]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coolpiglet">@coolpiglet</a> wrote:</p>
          <blockquote>
              <p>When I use yewscutter.java script ,I press F7 to Disable Graphics,after a few time,I press F7 to Enable Graphics.A err happen.<br>
this is the script:</p>
<p>import java.awt.<em>;<br>
import java.awt.event.</em>;<br>
import javax.swing.*;</p>
<p>public class yewsCutter extends Script<br>
implements ServerMessageListener{</p>
<pre><code>public static String[] commands = { "yc" };

private static final int OBJECT_BANK_BOOTH = 2213;
private static final int YEW_TREE_ID = 1309;
private static final String[] LOCALS = {"dr","vk"};

private JButton go = new JButton("Go");
private JButton cancel = new JButton("Cancel");
private JComboBox locations = new JComboBox(LOCALS);
private JFrame frame = new JFrame("Where?");

private static final Tile DRAYNOR_END_TILE = new Tile(2934,3230);
private static final Tile[] DRAYNOR_TREES = new Tile[] { 
    new Tile(2934,3225), new Tile(2935,3229), new Tile(2933,3233), new Tile(2940,3232) 
    
};
private static final Tile[] DRAYNOR_RUN_PATH = new Tile[] {
    new Tile(2943,3226), new Tile(2929,3225), new Tile(2928,3232), new Tile(2943,3239)
};
private static final Tile[] PATH_DRAYNOR_TO_LUM_FOREST_YEWS = new Tile[] {
    new Tile(3012,3359), new Tile(3006,33359), new Tile(3006,3352), 
    new Tile(3006,3346), new Tile(3006,3340), new Tile(3006,3333), 
    new Tile(3006,3326), new Tile(3006,3321), new Tile(3007,3316), 
    new Tile(3007,3310), new Tile(3005,3305), new Tile(3005,3300), 
    new Tile(3005,3295), new Tile(3001,3290), new Tile(2997,3280), 
    new Tile(2992,3281), new Tile(2988,3276), new Tile(2981,3274),
    new Tile(2978,3270), new Tile(2976,3266), new Tile(2974,3260), 
    new Tile(2970,3258), new Tile(2965,3253), new Tile(2960,3248),
    new Tile(2956,3243), new Tile(2950,3241), new Tile(2946,3237),
    new Tile(2943,3232), new Tile(2938,3232), new Tile(2934,3230)
};   
private static final Tile[] DRAYNOR_DEAD_PATH = new Tile[] {
    new Tile(3222,3219), new Tile(3168,3168), new Tile(3222,3219), 
    new Tile(3227,3219), new Tile(3232,3221), new Tile(3232,3229), 
    new Tile(3226,3234), new Tile(3219,3237), new Tile(3213,3237), 
    new Tile(3206,3237), new Tile(3201,3237), new Tile(3193,3236), 
    new Tile(3187,3232), new Tile(3180,3229), new Tile(3173,3226), 
    new Tile(3166,3226), new Tile(3160,3225)       
};

private static final Tile VARROCK_END_TILE = new Tile(3214,3502);
private static final Tile[] VARROCK_TREES = new Tile[] { 
    new Tile(3204,3503), new Tile(3208,3499), new Tile(3221, 3503)
};
private static final Tile[] VARROCK_RUN_PATH = new Tile[] {
    new Tile(3215,3502), new Tile(3160,3448), new Tile(3215,3502), 
    new Tile(3210,3502), new Tile(3205,3502), new Tile(3199,3500), 
    new Tile(3199,3494), new Tile(3196,3491)
};
private static final Tile[] PATH_VARROCK_TO_CASTLE_YEWS = new Tile[] {
    new Tile(3182,3437), new Tile(3144,3408), new Tile(3182,3437), 
    new Tile(3182,3433), new Tile(3189,3432), new Tile(3195,3433), 
    new Tile(3202,3438), new Tile(3208,3438), new Tile(3212,3440), 
    new Tile(3212,3446), new Tile(3208,3448), new Tile(3203,3449), 
    new Tile(3201,3454), new Tile(3200,3460), new Tile(3197,3466), 
    new Tile(3198,3471), new Tile(3198,3479), new Tile(3198,3486), 
    new Tile(3198,3492), new Tile(3199,3498), new Tile(3202,3501), 
    new Tile(3208,3502), new Tile(3214,3502)       
};
private static final Tile[] VARROCK_DEAD_PATH = new Tile[] {
    new Tile(3221,3218), new Tile(3168,3168), new Tile(3225,3218), 
    new Tile(3232,3219), new Tile(3232,3227), new Tile(3230,3233), 
    new Tile(3224,3240), new Tile(3220,3248), new Tile(3219,3255), 
    new Tile(3220,3262), new Tile(3227,3262), new Tile(3235,3262), 
    new Tile(3241,3263), new Tile(3240,3271), new Tile(3240,3278), 
    new Tile(3239,3286), new Tile(3239,3294), new Tile(3238,3302), 
    new Tile(3242,3308), new Tile(3246,3315), new Tile(3255,3322), 
    new Tile(3264,3326), new Tile(3263,3330), new Tile(3256,3330), 
    new Tile(3248,3335), new Tile(3239,3335), new Tile(3231,3336), 
    new Tile(3227,3343), new Tile(3226,3351), new Tile(3220,3357), 
    new Tile(3217,3365), new Tile(3213,3372), new Tile(3211,3379), 
    new Tile(3211,3388), new Tile(3212,3394), new Tile(3212,3400), 
    new Tile(3212,3407), new Tile(3212,3415), new Tile(3212,3423), 
    new Tile(3209,3430), new Tile(3212,3437), new Tile(3212,3443), 
    new Tile(3210,3449), new Tile(3204,3453), new Tile(3200,3459), 
    new Tile(3199,3467), new Tile(3199,3474), new Tile(3199,3482), 
    new Tile(3199,3489), new Tile(3199,3497), new Tile(3203,3501), 
    new Tile(3212,3502), new Tile(3214,3504), new Tile(3214,3504), 
    new Tile(3214,3504)
};    

private long startTime = System.currentTimeMillis();

private int timeOutCount = 0;
private int logCount = 0;
private int bankCount = 0;
private int attachCount = 0;

private String input = "";

private static Tile[] pathToTrees;
private static Tile[] runAwayPath;
private static Tile[] trees;
private static Tile[] deathPath;
private static Tile endTile;

private boolean banking = false;
private boolean dead  = false;
private boolean response = false;

private Tile treePos;

public boolean start(String command, String[] args) {   
    log("Started yewCutter.java by BBotter v1.05");
    input = args[0];
    if (input.equalsIgnoreCase(LOCALS[0]) || input.equals("1")){
        log("Draynor Yews Selected...");
        pathToTrees = PATH_DRAYNOR_TO_LUM_FOREST_YEWS;
        runAwayPath = DRAYNOR_RUN_PATH;
        endTile = DRAYNOR_END_TILE;
        trees = DRAYNOR_TREES;
        deathPath = DRAYNOR_DEAD_PATH;            
    }else if(input.equalsIgnoreCase(LOCALS[1]) || input.equals("2")){
        log("Varrock Yews Selected...");
        pathToTrees = PATH_VARROCK_TO_CASTLE_YEWS;
        runAwayPath = VARROCK_RUN_PATH;
        endTile = VARROCK_END_TILE;
        trees = VARROCK_TREES;
        deathPath = VARROCK_DEAD_PATH;            
    }else{
        log("Usage: /yewCutter([dr||vk])");
        return false;
    }
    init();
    return true;
}

private void init() {
    startTime = System.currentTimeMillis();
    EventManager.addServerMessageListener(this);
}

public long run(long ticks) {
    long rez = walkBack();
    if (rez !=0)
        return rez;
    
    rez = runCombat();
    if (rez != 0)
        return rez;

    rez = runBank();
    if (rez != 0)
        return rez;

    rez = runReturn();
    if (rez != 0)
        return rez;

    return runCut();
}

private long walkBack() {
    if(dead){
        Tile[] path = deathPath;
        if (distanceTo(path[path.length - 1]) &gt; 11) {
            walkPath(path);
            return random(2500, 3000);
        }
        dead = false;
        return 0;        
    } else
        return 0;
}

private long runCombat() {
    if (inCombat(myPlayer())) {
        if (distanceTo(endTile) &lt; 20) {
            log("Running From Combat Random!");
            if (distanceTo(runAwayPath[runAwayPath.length - 1]) &gt; 3) {
                if (!getRun()){
                    log("Setting Run");
                    setRun(true);
                }
                walkPath(runAwayPath);
                return random(1000, 1500);
            }
        }
    }
    return 0;
}

private long runBank() {
    if (banking) {
        Tile[] path = reversePath(pathToTrees);
        if (distanceTo(path[path.length - 1]) &gt; 5) {
            if (!getRun()){
                log("Setting run...");
                setRun(true);
            }
            walkPath(path, 15);
            return random(3000, 3500);
        } else {
            if (getInterface() != Constants.INTERFACE_BANK) {
                int booth = findObject(OBJECT_BANK_BOOTH);
                if (booth != -1) {
                    log("Opening bank...");
                    atObject(booth, 2);
                    return random(3000, 3500);
                }
            } else if (getInterface() == Constants.INTERFACE_BANK) {
                if (inventoryCount() &gt; getInvCountSuffix(" axe")) {
                    return bankYews();
                } else {
                    closeInterface();
                    bankCount++;
                    log("Finished banking");                        
                    banking = false;
                    return progressReport();
                }
            }
        }
    }
    if (inventoryCount() == 28 &amp;&amp; !banking) {
        log("Time to bank..");
        banking = true;
        return 1;
    } else
        banking = false;
    return 0;
}

private long runReturn() {
    Tile[] path = pathToTrees;
    if (distanceTo(path[path.length - 1]) &gt; 11) {
        walkPath(path);
        return random(2500, 3000);
    }
    return 0;
}

private long runCut() {
    int treeID = findObject(YEW_TREE_ID);        
    if (myPlayer().anim == -1) {
        if (treeID != -1) {
            Tile pos = objectPos(treeID);
            if (isTree(pos)){
                if (distanceTo(pos) &gt; 5) {                        
                    log("walking to tree...");                        
                    walk(pos);
                    return random(4000, 6000);
                } else {
                    log("starting to cut tree...");
                    treePos = pos;
                    atObject(treeID, 1);
		timeOutCount=0;
                    return random(2000, 2500);
                }
            }else{
                log("no good tree, waiting");
                if(timeOutCount++==35){
                    log("preventing timeout.");
                    walk(newRandom(endTile));
                    timeOutCount=0;
                };                    
                return random(1500, 2500);                    
            }
        } else {
            log("Could not find tree, waiting");
            if(timeOutCount++==35){
                log("preventing timeout..");                    
                walk(newRandom(endTile));
                timeOutCount=0;
            };
            return random(1500, 2500);
        }
    } else if (treePos != null &amp;&amp; myPlayer().anim != -1) {
        NPC ent = findNearestNPCByName("Yew");
        if (ent == null){
	if(timeOutCount++==35){
            log("preventing timeout...");
            walk(newRandom(getPosition(myPlayer())));
            timeOutCount=0;
	};
            return random(1500,2500);
        }
        if (getPosition(ent).distanceTo(treePos) &lt; 3) {
            log("Ent appeared near us, stop chopping.");
            walk(newRandom(getPosition(myPlayer())));
            treePos = null;
        }
        return random(3000, 3500);
    }
    return 200;
}

private long bankYews() {
    int[] inv = getInventory();
    for (int i = 0; i &lt; inv.length; i++) {
        if (inv[i] != -1 &amp;&amp; !getItemName(inv[i]).toLowerCase().endsWith(" axe")) {
            depositAll(inv[i], i);
            return random(1000, 1500);
        }
    }
    return 0;
}

private boolean isTree(Tile position){
    for (int i = 0; i &lt; trees.length; i++){
        if(position.equals(trees[i])){
            return true;
        }
    }
    return false;
}

private Tile newRandom(Tile old){
    return new Tile((old.x-3+random(0, 6)), (old.y-3+random(0, 6)));
}
private long progressReport() {
        int minutes = (int) ((System.currentTimeMillis() - startTime) / 60000);
        log("-&gt; You have cut (" + logCount + ") logs");
        log("-&gt; You have banked (" + bankCount + ") loads");
    if (minutes!=0){
        	log("-&gt; You have cut avg of (" + (logCount/minutes) + "." + (((logCount%minutes)*100)/minutes) + ") logs per minute");
    }
        log("-&gt; reattached the axe head (" + attachCount + ") times");
        log("-&gt; Since " + new java.util.Date(startTime) + " (" + minutes +
                        " minutes ago)");

        return 0;
}


public void serverMessage(String message) {       
    if (message.indexOf("you are dead") != -1) {
        log("You died, Attempting WalkBack()!");
        dead = true;
} else if (message.indexOf("you need an axe") != -1) {
        log("You dont have an axe?? how you going to cut trees?");
        shutdown(); 
    } else if (message.indexOf("carefully attach") != -1) {
            attachCount++;
    } else if (message.indexOf("get some yew") != -1) {
            logCount++;
    }
}
</code></pre>
<p>}</p>
<p>err under:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035/1</link>
        <pubDate>Thu, 27 Apr 2006 14:20:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2035-1</guid>
        <source url="https://forum.moparisthebest.com/t/yewscutter-java-help-me/2035.rss">Yewscutter.java , help me!</source>
      </item>
  </channel>
</rss>
