<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Handling Multiple Tcp Clients/Threading a TCP Connection</title>
    <link>https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213</link>
    <description>I&#39;m writing a simple chat box in Silverlight (C#) for a website. Currently I have a basic prototype for this using WPF Forms.

Currently the client works like this:
The form has a connection class. There is a thread on this class that listens for incoming messages, and raises an event that is then handled by the main window. When a message is sent, a StreamWriter object sends the message as a string to the server.

I don&#39;t think I can make the client much simpler than this.

The server works like this:
There is a List of Connection objects. 
- I have a thread that cycles through each connection object, and checks to see if it&#39;s listening for a message. If not, start listening.
- Once a message is received from a client, the server handles it by broadcasting the message to every client except the sender.
- There is also a thread that is listening for incoming connections, and adds them to the connection list

My main concern with the server is that each client adds a new thread, and I know this probably not the most efficient way of doing things. Would it be much better to say, have one thread cycle through each client and listen for a message (with every client sending a PING every say 50ms to make sure the server doesn&#39;t get stuck on a specific client?)

Or is there an even better way to do this?</description>
    
    <lastBuildDate>Sat, 29 Nov 2008 19:26:39 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Handling Multiple Tcp Clients/Threading a TCP Connection</title>
        <dc:creator><![CDATA[@Weebs Weebs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weebs">@Weebs</a> wrote:</p>
          <blockquote>
              <p>[quote=“Unhandled, post:2, topic:247213”]You can use the BeginAccept method of the Socket class.</p>
<pre><code class="lang-auto">ManualResetEvent Wait = new ManualResetEvent(false);
            while (!ShuttingDown) // ShuttingDown is a bool ofc
            {
                Wait.Reset();
                ListeningSocket.BeginAccept(OnClientConnect, ListeningSocket); // OnClientConnect is a delegate
                Wait.WaitOne();
            }</code></pre>
<p>Take a look at <a href="http://server.sparkware.net/~jonny/SparkConnect/src/SCServer/Server.cs" rel="nofollow noopener">http://server.sparkware.net/~jonny/SparkConnect/src/SCServer/Server.cs</a><br>
You don’t even need to touch the thread class, and everything is still asynchronous.[/quote]</p>
<p>Thanks. I re-wrote the server and client using async delegates and it works pretty nicely (and it made the code much cleaner).</p>
<p>Here’s the quick whip-up I made for anyone else who might find them useful, and yes, I’m aware the server doesn’t disconnect clients/handle exceptions. I’m lazy:<br>
Server: <a href="http://paste2.org/p/108638" rel="nofollow noopener">http://paste2.org/p/108638</a><br>
Client: <a href="http://paste2.org/p/108642" rel="nofollow noopener">http://paste2.org/p/108642</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/3</link>
        <pubDate>Sat, 29 Nov 2008 19:26:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-247213-3</guid>
        <source url="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213.rss">Handling Multiple Tcp Clients/Threading a TCP Connection</source>
      </item>
      <item>
        <title>Handling Multiple Tcp Clients/Threading a TCP Connection</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>You can use the BeginAccept method of the Socket class.</p>
<pre><code class="lang-auto">ManualResetEvent Wait = new ManualResetEvent(false);
            while (!ShuttingDown) // ShuttingDown is a bool ofc
            {
                Wait.Reset();
                ListeningSocket.BeginAccept(OnClientConnect, ListeningSocket); // OnClientConnect is a delegate
                Wait.WaitOne();
            }</code></pre>
<p>Take a look at <a href="http://server.sparkware.net/~jonny/SparkConnect/src/SCServer/Server.cs" rel="nofollow noopener">http://server.sparkware.net/~jonny/SparkConnect/src/SCServer/Server.cs</a><br>
You don’t even need to touch the thread class, and everything is still asynchronous.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/2</link>
        <pubDate>Fri, 28 Nov 2008 22:28:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-247213-2</guid>
        <source url="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213.rss">Handling Multiple Tcp Clients/Threading a TCP Connection</source>
      </item>
      <item>
        <title>Handling Multiple Tcp Clients/Threading a TCP Connection</title>
        <dc:creator><![CDATA[@Weebs Weebs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weebs">@Weebs</a> wrote:</p>
          <blockquote>
              <p>I’m writing a simple chat box in Silverlight (C#) for a website. Currently I have a basic prototype for this using WPF Forms.</p>
<p>Currently the client works like this:<br>
The form has a connection class. There is a thread on this class that listens for incoming messages, and raises an event that is then handled by the main window. When a message is sent, a StreamWriter object sends the message as a string to the server.</p>
<p>I don’t think I can make the client much simpler than this.</p>
<p>The server works like this:<br>
There is a List of Connection objects.</p>
<ul>
<li>I have a thread that cycles through each connection object, and checks to see if it’s listening for a message. If not, start listening.</li>
<li>Once a message is received from a client, the server handles it by broadcasting the message to every client except the sender.</li>
<li>There is also a thread that is listening for incoming connections, and adds them to the connection list</li>
</ul>
<p>My main concern with the server is that each client adds a new thread, and I know this probably not the most efficient way of doing things. Would it be much better to say, have one thread cycle through each client and listen for a message (with every client sending a PING every say 50ms to make sure the server doesn’t get stuck on a specific client?)</p>
<p>Or is there an even better way to do this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213/1</link>
        <pubDate>Fri, 28 Nov 2008 22:07:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-247213-1</guid>
        <source url="https://forum.moparisthebest.com/t/handling-multiple-tcp-clients-threading-a-tcp-connection/247213.rss">Handling Multiple Tcp Clients/Threading a TCP Connection</source>
      </item>
  </channel>
</rss>
