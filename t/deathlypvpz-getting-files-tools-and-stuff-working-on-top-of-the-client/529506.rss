<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Deathlypvpz] getting files tools and stuff working on top of the client</title>
    <link>https://forum.moparisthebest.com/t/deathlypvpz-getting-files-tools-and-stuff-working-on-top-of-the-client/529506</link>
    <description>i just want to enable the menu on top of the client
all the stuff is there already
this is my jfame.java
[code=java]
import sign.signlink;
import java.net.*;
import java.awt.*;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import javax.swing.*;
import javax.swing.plaf.metal.MetalLookAndFeel;

import java.io.File;
import java.io.IOException;
import java.awt.event.*;
import javax.imageio.ImageIO;
import java.awt.image.BufferedImage;
import javax.swing.filechooser.FileFilter;
import java.io.FileOutputStream;
import java.text.SimpleDateFormat;



public class Jframe extends client implements ActionListener {

    	private static JMenuItem menuItem;
	public static JFrame frame;
	public static JPanel gamePanel;
public static TrayIcon trayIcon;

	public void setTray() {
		if (SystemTray.isSupported()) {
			Image icon = Toolkit.getDefaultToolkit().getImage(signlink.findcachedir() + &quot;/Sprites/Icon.png&quot;);
			trayIcon = new TrayIcon(icon, &quot;WeLive4Pk&quot;);
			trayIcon.setImageAutoSize(true);
			try {
				SystemTray tray = SystemTray.getSystemTray();
				tray.add(trayIcon);
				trayIcon.displayMessage(&quot;WeLive4Pk&quot;, &quot;WeLive4Pk has been launched!&quot;, TrayIcon.MessageType.INFO);
				PopupMenu menu = new PopupMenu();
				final MenuItem minimizeItem = new MenuItem(&quot;Hide WeLive4Pk&quot;);
				MenuItem BLANK = new MenuItem(&quot;-&quot;);
				MenuItem exitItem = new MenuItem(&quot;Quit&quot;);
				menu.add(minimizeItem);
				menu.add(BLANK);
				menu.add(exitItem);
				trayIcon.setPopupMenu(menu);
				ActionListener minimizeListener = new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						if(frame.isVisible()) {
							frame.setVisible(false);
							minimizeItem.setLabel(&quot;Show 1# WeLive4Pk.&quot;);						
						} else {
							frame.setVisible(true);				
							minimizeItem.setLabel(&quot;Hide 1# WeLive4Pk&quot;);
						}
					}
				};
				minimizeItem.addActionListener(minimizeListener);
				ActionListener exitListener = new ActionListener() {
					public void actionPerformed(ActionEvent e) {
						System.exit(0);
					}
				};
				exitItem.addActionListener(exitListener);
			} catch (AWTException e) {
				System.err.println(e);
			}
		}		
	}
	
		public static void setCursor(client client, int id) {
		Toolkit toolkit = Toolkit.getDefaultToolkit();
		Cursor cursor = toolkit.createCustomCursor(toolkit.getImage(signlink.findcachedir() + &quot;/Sprites/Cursors/Cursor &quot;+id+&quot;.PNG&quot;), new Point(0,0), signlink.findcachedir() + &quot;/Sprites/Cursors/Cursor &quot;+id+&quot;.PNG&quot;);
		//Cursor cursor = toolkit.createCustomCursor(toolkit.getImage(&quot;Cursors/Cursor &quot;+id+&quot;.PNG&quot;), new Point(0,0), &quot;.Cursor/Cursor &quot;+id+&quot;.PNG&quot;);
		frame.setCursor(cursor);
		client.gameFrame.setCursor(cursor);
	}
	
		public void actionPerformed(ActionEvent evt) {
		String cmd = evt.getActionCommand();
		try {
			if (cmd != null) {
				if (cmd.equalsIgnoreCase(&quot;Exit&quot;)) {
					System.exit(0);
				}
				if (cmd.equalsIgnoreCase(&quot;View Images&quot;)) {
				if(Desktop.isDesktopSupported()) {
	//if(Desktop.getDesktop().isSupported(Action.OPEN)) {
		Desktop.getDesktop().open(new File(signlink.findcachedir() + &quot;/Screenshots&quot;));
	//}
}
				}
				if (cmd.equalsIgnoreCase(&quot;Toggle 10x Damage&quot;))
				{
					newDamage = true;
				}
				if (cmd.equalsIgnoreCase(&quot;Untoggle 10x Damage&quot;))
				{
					newDamage = false;
				}
       				 if (cmd.equalsIgnoreCase(&quot;Website&quot;))
				{
					openUpWebSite(&quot;www.welive4pk.webs.com&quot;);	
				}
       				 if (cmd.equalsIgnoreCase(&quot;Forums&quot;))
				{
					openUpWebSite(&quot;www.welive4pk.actieforum.com&quot;);	
				}
								if (cmd.equalsIgnoreCase(&quot;Guides&quot;)) {
					openUpWebSite(&quot;http://deathlypvpz.freesmfhosting.com&quot;);
				}
				if (cmd.equalsIgnoreCase(&quot;Support&quot;)) {
					openUpWebSite(&quot;http://xat.com/deathlypvpzcb&quot;);
				}
			if (cmd.equalsIgnoreCase(&quot;Client Information&quot;)){
				JOptionPane.showMessageDialog(this, &quot;WeLive4Pk is Developed By xX4m4zingXx. We hope you enjoy the server!&quot;, &quot;Client Updates&quot;, JOptionPane.INFORMATION_MESSAGE); 
			}
			if (cmd.equalsIgnoreCase(&quot;World Map&quot;)){
				launchURL(&quot;3. WorldMap.jar&quot;);
			}
			if (cmd.equalsIgnoreCase(&quot;Item Search&quot;)){
				launchURL(&quot;1. ItemList.bat&quot;);
			}
			if (cmd.equalsIgnoreCase(&quot;Screenshot&quot;)) {
					takeScreenshot(true);
				}	
			}
		} catch (Exception e) {
		}
	}
	
	
	 public void takeScreenshot(boolean flag)
    {
        BufferedImage bufferedimage;
        try
        {
            Robot robot = new Robot();
            Point point = getLocationOnScreen();
            Rectangle rectangle = new Rectangle(point.x, point.y, getWidth(), getHeight());
            bufferedimage = robot.createScreenCapture(rectangle);
        }
        catch(Throwable throwable)
        {
             JOptionPane.showMessageDialog(frame, &quot;An error occured while trying to create a screenshot!&quot;, &quot;Screenshot Error&quot;, 0);
            return;
        }
        String s = null;
        try
        {
            s = getNearestScreenshotFilename();
        }
        catch(IOException ioexception)
        {
            if(flag)
            {
                 JOptionPane.showMessageDialog(frame, &quot;A screenshot directory does not exist, and could not be created!&quot;, &quot;No Screenshot Directory&quot;, 0);
                return;
            }
        }
        if(s == null &amp;&amp; flag)
        {
             JOptionPane.showMessageDialog(frame, &quot;There are too many screenshots in the screenshot directory!\n&quot;+&quot;Delete some screen\n&quot; +&quot;shots and try again.&quot; , &quot;Screenshot Directory Full&quot;, 0);
            return;
        }
        if(!flag)
        {
            final JFileChooser fileChooser = new JFileChooser();
            final JDialog fileDialog = createFileChooserDialog(fileChooser, &quot;Save Screenshot&quot;, this);
            final BufferedImage si = bufferedimage;
            JFileChooser _tmp = fileChooser;
            fileChooser.setFileSelectionMode(0);
            fileChooser.addChoosableFileFilter(new imageFileFilter());
            fileChooser.setCurrentDirectory(new File(signlink.findcachedir() + &quot;/Screenshots&quot;));
            fileChooser.setSelectedFile(new File(s));
            JFileChooser _tmp1 = fileChooser;
            fileChooser.setDialogType(1);
            fileChooser.addActionListener(new ActionListener() {

                public void actionPerformed(ActionEvent actionevent)
                {
                    String s1 = actionevent.getActionCommand();
                    if(s1.equals(&quot;ApproveSelection&quot;))
                    {
                        File file = fileChooser.getSelectedFile();
                        if(file != null &amp;&amp; file.isFile())
                        {
                            int i = JOptionPane.showConfirmDialog(frame, (new StringBuilder()).append(file.getAbsolutePath()).append(&quot; already exists.\n&quot;+&quot;Do you want to replace it?&quot;).toString(), &quot;Save Screenshot&quot;, 2);
                            if(i != 0)
                            {
                                return;
                            }
                        }
                        try
                        {
                            ImageIO.write(si, &quot;png&quot;, file);
                            //client.pushMessage(&quot;Screenshot taken.&quot;, 3, &quot;@cr2@ Client&quot;);
                            //JOptionPane.showMessageDialog(frame,&quot;Screenshot Taken&quot;);
                        }
                        catch(IOException ioexception2)
                        {
                             JOptionPane.showMessageDialog(frame, &quot;An error occured while trying to save the screenshot!\n&quot;+&quot;Please make sure you have\n&quot;+&quot; write access to the screenshot directory.&quot; , &quot;Screenshot Error&quot;, 0);
                        }
                        fileDialog.dispose();
                    } else
                    if(s1.equals(&quot;CancelSelection&quot;))
                    {
                        fileDialog.dispose();
                    }
                }


            {

            }
            });
            fileDialog.setVisible(true);
        } else
        {
            try
            {
                ImageIO.write(bufferedimage, &quot;png&quot;, new File((new StringBuilder()).append(signlink.findcachedir() + &quot;/Screenshots&quot;).append(s).toString()));
					                             JOptionPane.showMessageDialog(frame, &quot;Image has been saved to&quot; + signlink.findcachedir() + &quot;/Screenshots&quot; + &quot;You can view your images by pushing File&gt;View Images in the menu dropdowns.&quot; , &quot;Screenshot manager&quot;, JOptionPane.INFORMATION_MESSAGE);
                //client.pushMessage(&quot;Screenshot taken.&quot;, 3, &quot;@cr2@ Client&quot;);
                //JOptionPane.showMessageDialog(frame,&quot;Screenshot taken.&quot;);
            }
            catch(IOException ioexception1)
            {
                 JOptionPane.showMessageDialog(frame, &quot;An error occured while trying to save the screenshot!\n&quot;+&quot;Please make sure you have\n&quot;+&quot; write access to the screenshot directory.&quot; , &quot;Screenshot Error&quot;, 0);
            }
        }
    }

	public static String getNearestScreenshotFilename()
        throws IOException
    {
        File file = new File(signlink.findcachedir() + &quot;/Screenshots&quot;);
        int i = 0;
        do
        {
            String s = &quot; .png&quot;;
            if(i &lt; 10)
            {
                s = s.replaceFirst(&quot; &quot;, (new StringBuilder()).append(&quot;000&quot;).append(i).toString());
            } else
            if(i &lt; 100)
            {
                s = s.replaceFirst(&quot; &quot;, (new StringBuilder()).append(&quot;00&quot;).append(i).toString());
            } else
            if(i &lt; 1000)
            {
                s = s.replaceFirst(&quot; &quot;, (new StringBuilder()).append(&quot;0&quot;).append(i).toString());
            } else
            if(i &lt; 10000)
            {
                s = s.replaceFirst(&quot; &quot;, (new StringBuilder()).append(&quot; &quot;).append(i).toString());
            }
            if((new File(file, s)).isFile())
            {
                i++;
            } else
            {
                return s;
            }
        } while(i &lt; 10000);
        return null;
    }



class imageFileFilter extends FileFilter
{

    imageFileFilter()
    {
    }

    public boolean accept(File file)
    {
        String s = file.getName();
        return file.isDirectory() || s.toLowerCase().endsWith(&quot;.png&quot;) &amp;&amp; s.indexOf(&quot;$&quot;) == -1;
    }

    public String getDescription()
    {
        return &quot;PNG (*.png)&quot;;
    }
}
	
	
	
	public Jframe(String args[]) {
		super();
		try {
			sign.signlink.startpriv(InetAddress.getByName(serverip));
			initUI();
			setTray();
		} catch (Exception ex) {
			ex.printStackTrace();
		}
	}

	public void initUI() {
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
			JPopupMenu.setDefaultLightWeightPopupEnabled(true);
			frame = new JFrame(&quot;WeLive4Pk&quot;);
			frame.setIconImage(Toolkit.getDefaultToolkit().getImage(signlink.findcachedir()+ &quot;Cursor.png&quot;));
			frame.setLayout(new BorderLayout());
			frame.setResizable(false);
			frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			JPanel gamePanel = new JPanel();
			gamePanel.setLayout(new BorderLayout());
			gamePanel.add(this);
			Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
			int w = 765;
			int h = 503;
			int x = (dim.width-w)/2;
			int y = (dim.height-h)/2;
			frame.setLocation(x, y);
			gamePanel.setPreferredSize(new Dimension(765, 503));
			JMenu fileMenu = new JMenu(&quot;  File  &quot;);
			JMenu toolMenu = new JMenu(&quot;  Tools  &quot;);
			JMenu infoMenu = new JMenu(&quot;  Info  &quot;);
			JMenu toggleMenu = new JMenu(&quot;  Toggles  &quot;);
			JMenu profileMenu = new JMenu(&quot;  Links  &quot;);
			JButton shotMenu = new JButton(&quot;Take Screenshot&quot;);
			shotMenu.setActionCommand(&quot;Screenshot&quot;);
			shotMenu.addActionListener(this);
			String[] mainButtons = new String[] { &quot;View Images&quot;, &quot;Exit&quot; };
			String[] toolButtons = new String[] { &quot;World Map&quot;};
			String[] infoButtons = new String[] { &quot;Client Information&quot;, &quot;Support&quot; };
			String[] toggleButtons = new String[] { &quot;Toggle 10x Damage&quot;, &quot;Untoggle 10x Damage&quot;};
			String[] profileButtons = new String[] { &quot;Donate&quot;, &quot;Vote&quot;, &quot;-&quot;, &quot;Highscores&quot;, &quot;Guides&quot;, &quot;YouTube&quot;, &quot;Forums&quot; };
		
				

			for (String name : mainButtons) {
				JMenuItem menuItem = new JMenuItem(name);
				if (name.equalsIgnoreCase(&quot;-&quot;)) {
					fileMenu.addSeparator();
				} else {
					menuItem.addActionListener(this);
					fileMenu.add(menuItem);
				}
			}
			for (String name : toolButtons) 
			{
				JMenuItem menuItem = new JMenuItem(name);
				if (name.equalsIgnoreCase(&quot;-&quot;))
					toolMenu.addSeparator();
				else {
					menuItem.addActionListener(this);
					toolMenu.add(menuItem);
					
				}
			}
			
			for (String name : infoButtons) 
			{
				JMenuItem menuItem = new JMenuItem(name);
				if (name.equalsIgnoreCase(&quot;-&quot;))
					infoMenu.addSeparator();
				else {
					menuItem.addActionListener(this);
					infoMenu.add(menuItem);
				}
			}
			for (String name : toggleButtons)
			{
				JMenuItem menuItem = new JMenuItem(name);
				if (name.equalsIgnoreCase(&quot;-&quot;))
					toggleMenu.addSeparator();
				else {
					menuItem.addActionListener(this);
					toggleMenu.add(menuItem);
				}
			}
			for (String name : profileButtons)
			{
				JMenuItem menuItem = new JMenuItem(name);
				if (name.equalsIgnoreCase(&quot;-&quot;))
					toggleMenu.addSeparator();
				else {
					menuItem.addActionListener(this);
					profileMenu.add(menuItem);
				}
			}
			JMenuBar menuBar = new JMenuBar();
			JMenuBar jmenubar = new JMenuBar();

			frame.add(jmenubar); 
			menuBar.add(fileMenu);
			menuBar.add(toolMenu);
			menuBar.add(infoMenu);
			//menuBar.add(toggleMenu);
			menuBar.add(profileMenu);
			menuBar.add(shotMenu);
			frame.getContentPane().add(menuBar, BorderLayout.NORTH);
			frame.getContentPane().add(gamePanel, BorderLayout.CENTER);
			frame.pack();

			frame.setVisible(true); // can see the client
			frame.setResizable(false); // resizeable frame
			init();
		} catch (Exception e) {
				e.printStackTrace();
		}
	}
	
		 public JDialog createFileChooserDialog(JFileChooser jfilechooser, String s, Container container)
	    {
	        JDialog jdialog = new JDialog(frame, s, true);
	        jdialog.setDefaultCloseOperation(2);
	        jdialog.add(jfilechooser);
	        jdialog.pack();
	        jdialog.setLocationRelativeTo(container);
	        return jdialog;
    }



	public URL getCodeBase() {
		try {
			return new URL(&quot;http://&quot; + serverip + &quot;/cache&quot;);
		} catch (Exception e) {
			return super.getCodeBase();
		}
	}

	public URL getDocumentBase() {
		return getCodeBase();
	}

	public void loadError(String s) {
		System.out.println(&quot;loadError: &quot; + s);
	}

	public String getParameter(String key) {
			return &quot;&quot;;
	}

	private static void openUpWebSite(String url) {
		Desktop d = Desktop.getDesktop();
		try {
			d.browse(new URI(url)); 	
		} catch (Exception e) {
		}
	}


	
}[/code]</description>
    
    <lastBuildDate>Sun, 08 Sep 2013 14:15:37 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/deathlypvpz-getting-files-tools-and-stuff-working-on-top-of-the-client/529506.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Deathlypvpz] getting files tools and stuff working on top of the client</title>
        <dc:creator><![CDATA[@xX4m4zingXx xX4m4zingXx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx4m4zingxx">@xX4m4zingXx</a> wrote:</p>
          <blockquote>
              <p>i just want to enable the menu on top of the client<br>
all the stuff is there already<br>
this is my jfame.java</p>
<p>[code=java]<br>
import sign.signlink;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import java.awt.</em>;<br>
import java.awt.event.ActionListener;<br>
import java.awt.event.ActionEvent;<br>
import javax.swing.*;<br>
import javax.swing.plaf.metal.MetalLookAndFeel;</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.awt.event.*;<br>
import javax.imageio.ImageIO;<br>
import java.awt.image.BufferedImage;<br>
import javax.swing.filechooser.FileFilter;<br>
import java.io.FileOutputStream;<br>
import java.text.SimpleDateFormat;</p>
<p>public class Jframe extends client implements ActionListener {</p>
<pre><code>	private static JMenuItem menuItem;
public static JFrame frame;
public static JPanel gamePanel;
</code></pre>
<p>public static TrayIcon trayIcon;</p>
<pre><code>public void setTray() {
	if (SystemTray.isSupported()) {
		Image icon = Toolkit.getDefaultToolkit().getImage(signlink.findcachedir() + "/Sprites/Icon.png");
		trayIcon = new TrayIcon(icon, "WeLive4Pk");
		trayIcon.setImageAutoSize(true);
		try {
			SystemTray tray = SystemTray.getSystemTray();
			tray.add(trayIcon);
			trayIcon.displayMessage("WeLive4Pk", "WeLive4Pk has been launched!", TrayIcon.MessageType.INFO);
			PopupMenu menu = new PopupMenu();
			final MenuItem minimizeItem = new MenuItem("Hide WeLive4Pk");
			MenuItem BLANK = new MenuItem("-");
			MenuItem exitItem = new MenuItem("Quit");
			menu.add(minimizeItem);
			menu.add(BLANK);
			menu.add(exitItem);
			trayIcon.setPopupMenu(menu);
			ActionListener minimizeListener = new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					if(frame.isVisible()) {
						frame.setVisible(false);
						minimizeItem.setLabel("Show 1# WeLive4Pk.");						
					} else {
						frame.setVisible(true);				
						minimizeItem.setLabel("Hide 1# WeLive4Pk");
					}
				}
			};
			minimizeItem.addActionListener(minimizeListener);
			ActionListener exitListener = new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.exit(0);
				}
			};
			exitItem.addActionListener(exitListener);
		} catch (AWTException e) {
			System.err.println(e);
		}
	}		
}

	public static void setCursor(client client, int id) {
	Toolkit toolkit = Toolkit.getDefaultToolkit();
	Cursor cursor = toolkit.createCustomCursor(toolkit.getImage(signlink.findcachedir() + "/Sprites/Cursors/Cursor "+id+".PNG"), new Point(0,0), signlink.findcachedir() + "/Sprites/Cursors/Cursor "+id+".PNG");
	//Cursor cursor = toolkit.createCustomCursor(toolkit.getImage("Cursors/Cursor "+id+".PNG"), new Point(0,0), ".Cursor/Cursor "+id+".PNG");
	frame.setCursor(cursor);
	client.gameFrame.setCursor(cursor);
}

	public void actionPerformed(ActionEvent evt) {
	String cmd = evt.getActionCommand();
	try {
		if (cmd != null) {
			if (cmd.equalsIgnoreCase("Exit")) {
				System.exit(0);
			}
			if (cmd.equalsIgnoreCase("View Images")) {
			if(Desktop.isDesktopSupported()) {
//if(Desktop.getDesktop().isSupported(Action.OPEN)) {
	Desktop.getDesktop().open(new File(signlink.findcachedir() + "/Screenshots"));
//}
</code></pre>
<p>}<br>
}<br>
if (cmd.equalsIgnoreCase(“Toggle 10x Damage”))<br>
{<br>
newDamage = true;<br>
}<br>
if (cmd.equalsIgnoreCase(“Untoggle 10x Damage”))<br>
{<br>
newDamage = false;<br>
}<br>
if (cmd.equalsIgnoreCase(“Website”))<br>
{<br>
openUpWebSite(“<a href="http://www.welive4pk.webs.com" rel="nofollow noopener">www.welive4pk.webs.com</a>”);	<br>
}<br>
if (cmd.equalsIgnoreCase(“Forums”))<br>
{<br>
openUpWebSite(“<a href="http://www.welive4pk.actieforum.com" rel="nofollow noopener">www.welive4pk.actieforum.com</a>”);	<br>
}<br>
if (cmd.equalsIgnoreCase(“Guides”)) {<br>
openUpWebSite(“<a href="http://deathlypvpz.freesmfhosting.com" rel="nofollow noopener">http://deathlypvpz.freesmfhosting.com</a>”);<br>
}<br>
if (cmd.equalsIgnoreCase(“Support”)) {<br>
openUpWebSite(“<a href="http://xat.com/deathlypvpzcb" rel="nofollow noopener">http://xat.com/deathlypvpzcb</a>”);<br>
}<br>
if (cmd.equalsIgnoreCase(“Client Information”)){<br>
JOptionPane.showMessageDialog(this, “WeLive4Pk is Developed By xX4m4zingXx. We hope you enjoy the server!”, “Client Updates”, JOptionPane.INFORMATION_MESSAGE);<br>
}<br>
if (cmd.equalsIgnoreCase(“World Map”)){<br>
launchURL(“3. WorldMap.jar”);<br>
}<br>
if (cmd.equalsIgnoreCase(“Item Search”)){<br>
launchURL(“1. ItemList.bat”);<br>
}<br>
if (cmd.equalsIgnoreCase(“Screenshot”)) {<br>
takeScreenshot(true);<br>
}	<br>
}<br>
} catch (Exception e) {<br>
}<br>
}</p>
<pre><code> public void takeScreenshot(boolean flag)
{
    BufferedImage bufferedimage;
    try
    {
        Robot robot = new Robot();
        Point point = getLocationOnScreen();
        Rectangle rectangle = new Rectangle(point.x, point.y, getWidth(), getHeight());
        bufferedimage = robot.createScreenCapture(rectangle);
    }
    catch(Throwable throwable)
    {
         JOptionPane.showMessageDialog(frame, "An error occured while trying to create a screenshot!", "Screenshot Error", 0);
        return;
    }
    String s = null;
    try
    {
        s = getNearestScreenshotFilename();
    }
    catch(IOException ioexception)
    {
        if(flag)
        {
             JOptionPane.showMessageDialog(frame, "A screenshot directory does not exist, and could not be created!", "No Screenshot Directory", 0);
            return;
        }
    }
    if(s == null &amp;&amp; flag)
    {
         JOptionPane.showMessageDialog(frame, "There are too many screenshots in the screenshot directory!\n"+"Delete some screen\n" +"shots and try again." , "Screenshot Directory Full", 0);
        return;
    }
    if(!flag)
    {
        final JFileChooser fileChooser = new JFileChooser();
        final JDialog fileDialog = createFileChooserDialog(fileChooser, "Save Screenshot", this);
        final BufferedImage si = bufferedimage;
        JFileChooser _tmp = fileChooser;
        fileChooser.setFileSelectionMode(0);
        fileChooser.addChoosableFileFilter(new imageFileFilter());
        fileChooser.setCurrentDirectory(new File(signlink.findcachedir() + "/Screenshots"));
        fileChooser.setSelectedFile(new File(s));
        JFileChooser _tmp1 = fileChooser;
        fileChooser.setDialogType(1);
        fileChooser.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent actionevent)
            {
                String s1 = actionevent.getActionCommand();
                if(s1.equals("ApproveSelection"))
                {
                    File file = fileChooser.getSelectedFile();
                    if(file != null &amp;&amp; file.isFile())
                    {
                        int i = JOptionPane.showConfirmDialog(frame, (new StringBuilder()).append(file.getAbsolutePath()).append(" already exists.\n"+"Do you want to replace it?").toString(), "Save Screenshot", 2);
                        if(i != 0)
                        {
                            return;
                        }
                    }
                    try
                    {
                        ImageIO.write(si, "png", file);
                        //client.pushMessage("Screenshot taken.", 3, "@cr2@ Client");
                        //JOptionPane.showMessageDialog(frame,"Screenshot Taken");
                    }
                    catch(IOException ioexception2)
                    {
                         JOptionPane.showMessageDialog(frame, "An error occured while trying to save the screenshot!\n"+"Please make sure you have\n"+" write access to the screenshot directory." , "Screenshot Error", 0);
                    }
                    fileDialog.dispose();
                } else
                if(s1.equals("CancelSelection"))
                {
                    fileDialog.dispose();
                }
            }


        {

        }
        });
        fileDialog.setVisible(true);
    } else
    {
        try
        {
            ImageIO.write(bufferedimage, "png", new File((new StringBuilder()).append(signlink.findcachedir() + "/Screenshots").append(s).toString()));
				                             JOptionPane.showMessageDialog(frame, "Image has been saved to" + signlink.findcachedir() + "/Screenshots" + "You can view your images by pushing File&gt;View Images in the menu dropdowns." , "Screenshot manager", JOptionPane.INFORMATION_MESSAGE);
            //client.pushMessage("Screenshot taken.", 3, "@cr2@ Client");
            //JOptionPane.showMessageDialog(frame,"Screenshot taken.");
        }
        catch(IOException ioexception1)
        {
             JOptionPane.showMessageDialog(frame, "An error occured while trying to save the screenshot!\n"+"Please make sure you have\n"+" write access to the screenshot directory." , "Screenshot Error", 0);
        }
    }
}

public static String getNearestScreenshotFilename()
    throws IOException
{
    File file = new File(signlink.findcachedir() + "/Screenshots");
    int i = 0;
    do
    {
        String s = " .png";
        if(i &lt; 10)
        {
            s = s.replaceFirst(" ", (new StringBuilder()).append("000").append(i).toString());
        } else
        if(i &lt; 100)
        {
            s = s.replaceFirst(" ", (new StringBuilder()).append("00").append(i).toString());
        } else
        if(i &lt; 1000)
        {
            s = s.replaceFirst(" ", (new StringBuilder()).append("0").append(i).toString());
        } else
        if(i &lt; 10000)
        {
            s = s.replaceFirst(" ", (new StringBuilder()).append(" ").append(i).toString());
        }
        if((new File(file, s)).isFile())
        {
            i++;
        } else
        {
            return s;
        }
    } while(i &lt; 10000);
    return null;
}
</code></pre>
<p>class imageFileFilter extends FileFilter<br>
{</p>
<pre><code>imageFileFilter()
{
}

public boolean accept(File file)
{
    String s = file.getName();
    return file.isDirectory() || s.toLowerCase().endsWith(".png") &amp;&amp; s.indexOf("$") == -1;
}

public String getDescription()
{
    return "PNG (*.png)";
}
</code></pre>
<p>}</p>
<pre><code>public Jframe(String args[]) {
	super();
	try {
		sign.signlink.startpriv(InetAddress.getByName(serverip));
		initUI();
		setTray();
	} catch (Exception ex) {
		ex.printStackTrace();
	}
}

public void initUI() {
	try {
		UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		JPopupMenu.setDefaultLightWeightPopupEnabled(true);
		frame = new JFrame("WeLive4Pk");
		frame.setIconImage(Toolkit.getDefaultToolkit().getImage(signlink.findcachedir()+ "Cursor.png"));
		frame.setLayout(new BorderLayout());
		frame.setResizable(false);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		JPanel gamePanel = new JPanel();
		gamePanel.setLayout(new BorderLayout());
		gamePanel.add(this);
		Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
		int w = 765;
		int h = 503;
		int x = (dim.width-w)/2;
		int y = (dim.height-h)/2;
		frame.setLocation(x, y);
		gamePanel.setPreferredSize(new Dimension(765, 503));
		JMenu fileMenu = new JMenu("  File  ");
		JMenu toolMenu = new JMenu("  Tools  ");
		JMenu infoMenu = new JMenu("  Info  ");
		JMenu toggleMenu = new JMenu("  Toggles  ");
		JMenu profileMenu = new JMenu("  Links  ");
		JButton shotMenu = new JButton("Take Screenshot");
		shotMenu.setActionCommand("Screenshot");
		shotMenu.addActionListener(this);
		String[] mainButtons = new String[] { "View Images", "Exit" };
		String[] toolButtons = new String[] { "World Map"};
		String[] infoButtons = new String[] { "Client Information", "Support" };
		String[] toggleButtons = new String[] { "Toggle 10x Damage", "Untoggle 10x Damage"};
		String[] profileButtons = new String[] { "Donate", "Vote", "-", "Highscores", "Guides", "YouTube", "Forums" };
	
			

		for (String name : mainButtons) {
			JMenuItem menuItem = new JMenuItem(name);
			if (name.equalsIgnoreCase("-")) {
				fileMenu.addSeparator();
			} else {
				menuItem.addActionListener(this);
				fileMenu.add(menuItem);
			}
		}
		for (String name : toolButtons) 
		{
			JMenuItem menuItem = new JMenuItem(name);
			if (name.equalsIgnoreCase("-"))
				toolMenu.addSeparator();
			else {
				menuItem.addActionListener(this);
				toolMenu.add(menuItem);
				
			}
		}
		
		for (String name : infoButtons) 
		{
			JMenuItem menuItem = new JMenuItem(name);
			if (name.equalsIgnoreCase("-"))
				infoMenu.addSeparator();
			else {
				menuItem.addActionListener(this);
				infoMenu.add(menuItem);
			}
		}
		for (String name : toggleButtons)
		{
			JMenuItem menuItem = new JMenuItem(name);
			if (name.equalsIgnoreCase("-"))
				toggleMenu.addSeparator();
			else {
				menuItem.addActionListener(this);
				toggleMenu.add(menuItem);
			}
		}
		for (String name : profileButtons)
		{
			JMenuItem menuItem = new JMenuItem(name);
			if (name.equalsIgnoreCase("-"))
				toggleMenu.addSeparator();
			else {
				menuItem.addActionListener(this);
				profileMenu.add(menuItem);
			}
		}
		JMenuBar menuBar = new JMenuBar();
		JMenuBar jmenubar = new JMenuBar();

		frame.add(jmenubar); 
		menuBar.add(fileMenu);
		menuBar.add(toolMenu);
		menuBar.add(infoMenu);
		//menuBar.add(toggleMenu);
		menuBar.add(profileMenu);
		menuBar.add(shotMenu);
		frame.getContentPane().add(menuBar, BorderLayout.NORTH);
		frame.getContentPane().add(gamePanel, BorderLayout.CENTER);
		frame.pack();

		frame.setVisible(true); // can see the client
		frame.setResizable(false); // resizeable frame
		init();
	} catch (Exception e) {
			e.printStackTrace();
	}
}

	 public JDialog createFileChooserDialog(JFileChooser jfilechooser, String s, Container container)
    {
        JDialog jdialog = new JDialog(frame, s, true);
        jdialog.setDefaultCloseOperation(2);
        jdialog.add(jfilechooser);
        jdialog.pack();
        jdialog.setLocationRelativeTo(container);
        return jdialog;
}



public URL getCodeBase() {
	try {
		return new URL("http://" + serverip + "/cache");
	} catch (Exception e) {
		return super.getCodeBase();
	}
}

public URL getDocumentBase() {
	return getCodeBase();
}

public void loadError(String s) {
	System.out.println("loadError: " + s);
}

public String getParameter(String key) {
		return "";
}

private static void openUpWebSite(String url) {
	Desktop d = Desktop.getDesktop();
	try {
		d.browse(new URI(url)); 	
	} catch (Exception e) {
	}
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deathlypvpz-getting-files-tools-and-stuff-working-on-top-of-the-client/529506/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deathlypvpz-getting-files-tools-and-stuff-working-on-top-of-the-client/529506/1</link>
        <pubDate>Sun, 08 Sep 2013 14:15:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-529506-1</guid>
        <source url="https://forum.moparisthebest.com/t/deathlypvpz-getting-files-tools-and-stuff-working-on-top-of-the-client/529506.rss">[Deathlypvpz] getting files tools and stuff working on top of the client</source>
      </item>
  </channel>
</rss>
