<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cracked script</title>
    <link>https://forum.moparisthebest.com/t/cracked-script/361853</link>
    <description>it&#39;s part of DreamFighter from rsbot - from pastebin

[CODE]package scripts.DreamFighter;

import impsoft.bots.reflection.Interface;
import impsoft.bots.reflection.NPC;
import impsoft.bots.reflection.NPCIterator;
import impsoft.bots.reflection.WorldObject;
import impsoft.scripting.ibot.builtin.itemrec.InventoryReflectionItemSlot;
import impsoft.scripting.ibot.builtin.itemrec.ItemSlot;
import impsoft.scripting.ibot.builtin.ocr.Menu;
import impsoft.scripting.ibot.builtin.tabs.TabSkelton;
import impsoft.scripting.ibot.itemrec.ItemCondition;
import impsoft.scripting.ibot.itemrec.ItemContains;
import impsoft.scripting.ibot.structs.AryanTile;
import impsoft.scripting.ibot.structs.RGB;
import impsoft.scripting.ibot.structs.XY;
import impsoft.scripting.types.ColorSkeltonScriptable;
import impsoft.utils.general.Timer;
import impsoft.utils.ibot.ColorMapAnaylsis;
import impsoft.values.constant.Areas;

import java.awt.Rectangle;
import java.util.ArrayList;
import java.util.regex.Pattern;

import api.magictab.Spell;

public class GeneralUtils {
	private static ColorSkeltonScriptable cs;

	public GeneralUtils(ColorSkeltonScriptable cs) {
		GeneralUtils.cs = cs;
	}

	public static class PotionUtils {
		private static ItemCondition vial = new ItemContains(&quot;Vial&quot;);

		public void dropVials() throws InterruptedException {
			InventoryUtils.drop(vial, true);
		}

		public boolean hasPotion(CombatPotion potion) throws InterruptedException {
			return cs.theTabs.Inventory.count(potion.getItemRegexCondition()) &gt; 0;
		}

		public boolean needPotion(CombatPotion potion) throws InterruptedException {
			if (potion.isSpecial()) {
				switch (potion) {
					case ANTIPOISON:
						return MiscUtils.isPoisoned();
					case SUMMONING:
						return false;
					case PRAYER:
						return false;
				}
			} else {
				return (cs.theTabs.Statistics.getStatBottom(potion.getSkill()) - cs.theTabs.Statistics.getStatTop(potion
						.getSkill())) &gt;= cs.random(3);
			}

			return false;
		}
	}

	public static class MiscUtils {
		private static Rectangle runButton = new Rectangle(706, 92, 57, 34);
		private static Rectangle hpButton = new Rectangle(691, 13, 28, 33);
		private static RGB poisonedColor = new RGB(12, 153, 36);

		public static boolean isPoisoned() throws InterruptedException {
			return cs.isLoggedIn() &amp;&amp; ColorMapAnaylsis.isRGBInArea(cs.getColorMap(), poisonedColor, hpButton);
		}

		public static void setTab(TabSkelton tab) throws InterruptedException {
			tab.click();
		}

		public void setFastRun(boolean on) throws InterruptedException {
			if ((cs.getSettingArray()[173] == 1) == on) { return; }

			if (cs.theMiniMapIndicators.getEnergy() &lt; cs.random(25, 40) &amp;&amp; on) { return; }
			{
				cs.mouseClickLeft(runButton);
				cs.sleep(1000);
			}
		}

		public void sleepUntilNotMoving() throws InterruptedException {
			sleepUntilNotMoving(1500);
		}

		public void sleepUntilNotMoving(long movingStartWait) throws InterruptedException {
			for (Timer t = new Timer(movingStartWait); !t.isUp() &amp;&amp; !cs.isMoving(); cs.sleep(100L)) {
			}

			int notMovingCount = 0;
			while (true) {
				cs.sleep(100);
				if (cs.isMoving()) {
					notMovingCount = 0;
				} else {
					notMovingCount++;
				}
				if (notMovingCount &gt; 2) {
					break;
				}
			}
		}

		public void sleepUntilMoving(long waitTime) throws InterruptedException {
			Timer wait = new Timer(waitTime);
			while (!cs.isMoving() &amp;&amp; wait.isNotUp()) {
				cs.sleep(100);
			}
		}

		public void sleepUntilVisible(WorldObject wo) throws InterruptedException {
			while (cs.isMoving()) {
				if (wo.getGameScreenLocation() != null) {
					break;
				}

				cs.sleep(cs.random(100, 150));
			}
		}

		public void sleepUntilTile(AryanTile tile, int distance) throws InterruptedException {
			while (cs.isMoving()) {
				if (tile.distanceTo(cs.getLocation()) &lt;= distance) {
					break;
				}
				cs.sleep(100);
			}
		}

		public int parseInt(String input) {
			if (input != null) {
				input = input.replaceAll(&quot;[^0-9]&quot;, &quot;&quot;);
				if (input.matches(&quot;[0-9]+&quot;)) { return Integer.parseInt(input); }
			}

			return -1;
		}
	}

	public static class InventoryUtils {
		public static boolean drop(ItemCondition ic, boolean all) throws InterruptedException {
			return doInventory(ic, all ? cs.theTabs.Inventory.count(ic) : 1, &quot;drop&quot;, true);
		}

		//	public boolean doInventoryItem(ItemCondition it, String action, boolean waitForChange) throws InterruptedException {

		public static boolean doInventory(ItemCondition ic, int times, String action, boolean waitForChange)
				throws InterruptedException {
			for (int i = 0; i &lt; times; i++) {
				if (!doInventory(ic, action, waitForChange)) { return false; }
			}

			return true;
		}

		public static boolean doInventory(ItemCondition ic, String action, boolean waitForChange)
				throws InterruptedException {
			if (action != null) {
				action = action.toLowerCase();
			}

			GeneralUtils.MiscUtils.setTab(cs.theTabs.Inventory);

			ItemSlot slot = getClosestItemSlot(ic);
			if (slot != null &amp;&amp; slot.isItemInSlot()) {
				cs.mouseMove(slot.getArea());

				if (slot.isMouseInside()) {
					String tt = null;
					if (slot.getItemName().contains(&quot; 0&quot;)) { return false; }

					if ((tt = cs.theTopText.getTopText().toLowerCase()) != null
							&amp;&amp; (action == null || action == &quot;&quot; || tt.contains(action))) {
						cs.mouseClickLeft(cs.getCurrentMouseXY());
					} else {
						cs.mouseClickRight(cs.getCurrentMouseXY());

						for (Timer t = new Timer(250); t.isNotUp() &amp;&amp; cs.theMenuFinder.getMenu() == null;) {
							cs.sleep(50);
						}

						Menu m = null;
						if ((m = cs.theMenuFinder.getMenu()) != null) {
							if (!m.contains(action)) {
								cs.mouseClickLeft(cs.getCurrentMouseXY());
							}

							m.clickContains(action);
						}
					}

					if (waitForChange) {
						String oldName = slot.getItemName();
						String tempName = &quot;&quot;;
						if (oldName == null) {
							oldName = &quot;&quot;;
						}

						for (Timer t = new Timer(2500); t.isNotUp()
								&amp;&amp; (slot != null &amp;&amp; (slot.isItemInSlot() || ((tempName = slot.getItemName()) != null &amp;&amp; tempName
										.equalsIgnoreCase(oldName)))); cs.sleep(100)) {
						}
					}
				}

				return true;
			} else {
				return false;
			}
		}

		public static InventoryReflectionItemSlot getClosestItemSlot(ItemCondition it) throws InterruptedException {
			InventoryReflectionItemSlot slot = null;
			int closestDistance = 10000;
			XY mouse = cs.getCurrentMouseXY();

			for (InventoryReflectionItemSlot aslot : cs.theTabs.Inventory.SLOTS) {
				if (aslot != null &amp;&amp; aslot.isItemInSlot() &amp;&amp; !aslot.isANotedItem()) {
					String name = aslot.getItemName();
					if (name == null) {
						System.out.println(&quot;No item found.&quot;);
					} else if (it.validItem(name)) {
						if (aslot.isMouseInside()) { return aslot; }
						XY slotXY = new XY(aslot.x, aslot.y);
						if (slotXY.distanceTo(mouse) &lt; closestDistance) {
							slot = aslot;
							closestDistance = slotXY.distanceTo(mouse);
						}
					}
				}
			}

			return slot;
		}
	}

	public static class BankUtils {
		private static Rectangle closeButton = null;

		public void doWithdraw(ItemCondition exact, int withdraw) throws InterruptedException {
			if (!cs.theTabs.Inventory.isFull()) {
				if (withdraw == 1) {
					cs.theBank.doWithDraw1(exact, false);
				} else if (withdraw == 5) {
					cs.theBank.doWithDraw5(exact, false);
				} else if (withdraw == 10) {
					cs.theBank.doWithDraw10(exact, false);
				} else {
					cs.theBank.doWithDrawX(exact, withdraw, false);
				}
			}
		}

		public boolean closeBank() {
			return false;
		}

		public boolean openBank() {
			return false;
		}

		public void walkToBank() {

		}
	}

	public static class AntibanUtils {

		public void moveMouseOffscreen() throws InterruptedException {
			int x = 0;
			int y = 0;

			while (x &gt;= 0 &amp;&amp; x &lt;= Areas.ENTIRE_WIDTH &amp;&amp; y &gt;= 0 &amp;&amp; y &lt;= Areas.ENTIRE_HEIGHT) {
				x = cs.random(-3000, 3000);
				y = cs.random(-3000, 3000);
			}

			cs.mouseMove(new XY(x, y));
		}
	}

	public static class EquipmentUtils {

		public boolean remove(ItemCondition ic) throws InterruptedException {
			if (cs.theTabs.Equipment.isWearing(ic)) { return cs.theTabs.Equipment.remove(ic); }

			return true;
		}
	}

	public static class TeleportUtils {

		public boolean doJewelry(Jewelry jewel, String location) {
			return false;
		}

		public boolean doTeleportTab(TeleportTab tab) {
			return false;
		}

		public boolean doTeleport(Spell spell) {
			return false;
		}

		public enum TeleportTab {
			VARROCK(null), FALADOR(null), CAMELOT(null), LUMBRIDGE(null);

			private Pattern name;

			TeleportTab(Pattern name) {
				this.name = name;
			}

			public Pattern getName() {
				return name;
			}
		}

		public enum Jewelry {
			GAMES_NECKLACE(null, new String[] {}), RING_OF_DUELING(null, new String[] {}), COMBAT_BRACELET(null,
					new String[] {}), AMULET_OF_GLORY(null, new String[] {});

			private Pattern name;
			private String[] locations;

			Jewelry(Pattern name, String[] locations) {
				this.name = name;
				this.locations = locations;
			}

			public Pattern getName() {
				return name;
			}

			public String[] getLocations() {
				return locations;
			}
		}
	}

	public static class CombatUtils {
		public int getScore(NPC npc) {
			int score = 0; //max score is 30

			if (!npc.isInteractingWithOtherPlayer()) {
				score += 7;
			}

			if (!npc.inCombat()) {
				score += 7;
			}

			if (!npc.isMoving()) {
				score += 2;
			}

			if (npc.isInteractingWithMyPlayer()) {
				score += 10;
			}

			score += npc.getLocation().distanceTo(cs.getLocation()) &gt; 5 ? 2 : 4;

			return score;
		}

		public NPC getNPC(int maxDistance, boolean onMinimap, boolean obstacle, Monster... monsters)
				throws InterruptedException {
			ArrayList&lt;NPC&gt; npcs = new ArrayList&lt;NPC&gt;();
			NPCIterator itr = cs.getNPCIterator();

			AryanTile currentLocation = cs.getLocation();
			while (itr.hasNext()) {
				NPC npc = itr.next();

				AryanTile npcLocation = npc.getLocation();
				if (isAttackable(npc) &amp;&amp; (!obstacle || cs.theMiniMap.canReachReflection(npcLocation))
						&amp;&amp; (!onMinimap || isOnMinimap(npc)) &amp;&amp; currentLocation.distanceTo(npcLocation) &lt;= maxDistance) {
					for (Monster monster : monsters) {
						if (monster.matches(npc)) {
							npcs.add(npc);
							break;
						}
					}
				}
			}

			NPC best = null;
			int bestScore = 0;
			for (NPC npc : npcs) {
				if (getScore(npc) &gt; bestScore) {
					best = npc;
				}
			}

			return best;
		}

		public boolean runawayFromCombat() {
			if (!cs.inCombat()) {
				return true;
			} else {

			}

			return false;
		}

		public boolean isAttackable(NPC npc) {
			return npc.getLevel() &gt; 0 &amp;&amp; npc.valid() &amp;&amp; (!isMultiCombatArea() || (!cs.inCombat() || npc.getHPRatio() &gt; 130));
		}

		public boolean isMultiCombatArea() {
			return false;
		}

		public boolean isOnMinimap(WorldObject object) {
			return false;
		}

		public boolean setAttackMode(String mode) throws InterruptedException {
			if (!isAttackModeSelected(mode)) {
				GeneralUtils.MiscUtils.setTab(cs.theTabs.Attack);

				int attackOption = getAttackOption(mode);
				if (attackOption != -1) {
					cs.mouseMove(getAttackStyleArea(attackOption));
				}
			}

			return isAttackModeSelected(mode);
		}

		public boolean isAttackModeSelected(String mode) {
			return getAttackOption(mode) == cs.getSettingArray()[43];
		}

		public int getAttackOption(String mode) {
			Interface[] attackStyles = cs.getInterfacesAtIndex(884);

			if (attackStyles.length &gt; 0) {
				for (int i = 0; i &lt; attackStyles.length; i++) {
					Interface attackStyle = attackStyles[i];

					if (attackStyle.isValid() &amp;&amp; attackStyle.getText().equalsIgnoreCase(mode)) {
						int style = ((i &gt;&gt; 1) % 15);

						if ((style - 10) == 3) {
							return 1;
						} else {
							return style &gt; 0 ? style - 10 : style;
						}
					}
				}
			}

			return -1;
		}

		public Rectangle getAttackStyleArea(int option) {
			return new Rectangle(583 + (84 * (option % 2)), 256 + (51 * (option / 2)), 41, 27);
		}

		public boolean doSpecialAttack(String currentWeapon, String currentShield, String weaponSwitch)
				throws InterruptedException {
			SpecialAttack weapon = null;

			for (SpecialAttack sa : SpecialAttack.values()) {
				if (weaponSwitch.toLowerCase().contains(sa.getName())) {
					weapon = sa;
					break;
				}
			}

			if (weapon != null) {
				int previous = cs.theTabs.Attack.getSpecialAttackPoints();

				if (cs.theTabs.Attack.isSpecialAttackPainted() &amp;&amp; cs.theTabs.Attack.isSpecialEnabled()) {
					if (cs.theTabs.Attack.getSpecialAttackPoints() &gt;= weapon.getPointsRequired()) {
						if (cs.theTabs.Inventory.count(weaponSwitch) &gt; 0) {
							GeneralUtils.InventoryUtils.doInventory(new ItemContains(weapon.getName()), null, true);
						}
					}

					cs.theTabs.Attack.clickSpecialAttack();
					for (Timer timer = new Timer(750); !timer.isUp() &amp;&amp; !cs.theTabs.Attack.isSpecialEnabled(); cs.sleep(100)) {
					}

					for (Timer timer = new Timer(1500); !timer.isUp() &amp;&amp; cs.getMyPlayer().getInteractingNPC() != null
							&amp;&amp; (previous == cs.theTabs.Attack.getSpecialAttackPoints()); cs.sleep(100)) {
					}

					if (cs.theTabs.Attack.getSpecialAttackPoints() &lt; previous) {
						//TODO:
					}

					if (cs.theTabs.Inventory.count(currentWeapon) &gt; 0) {
						GeneralUtils.InventoryUtils.doInventory(new ItemContains(currentWeapon), null, true);
					}

					if (weapon.isTwoHanded()) {
						GeneralUtils.InventoryUtils.doInventory(new ItemContains(currentShield), null, true);
					}
				}
			}

			return false;
		}

		public enum SpecialAttack {
			;

			private String name;
			private int pointsRequired;
			private boolean twoHanded;

			SpecialAttack(String name, int pointsRequired, boolean twoHanded) {
				this.name = name;
				this.pointsRequired = pointsRequired;
				this.twoHanded = twoHanded;
			}

			public String getName() {
				return name;
			}

			public int getPointsRequired() {
				return pointsRequired;
			}

			public boolean isTwoHanded() {
				return twoHanded;
			}
		}
	}
}[/code]</description>
    
    <lastBuildDate>Thu, 20 Jan 2011 03:22:20 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cracked-script/361853.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cracked script</title>
        <dc:creator><![CDATA[@henry henry]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/henry">@henry</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="4" data-topic="361853">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/unhandled/40/5_1887921562df0dabfae55079ddabeb03.png" class="avatar"> Unhandled:</div>
<blockquote>
<p>do i put this in client.java???</p>
</blockquote>
</aside>
<p>i lol’d</p>
<p>edit: sorry… i just realized how old this thread was…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cracked-script/361853/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cracked-script/361853/5</link>
        <pubDate>Thu, 20 Jan 2011 03:22:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361853-5</guid>
        <source url="https://forum.moparisthebest.com/t/cracked-script/361853.rss">Cracked script</source>
      </item>
      <item>
        <title>Cracked script</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>do i put this in client.java???</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cracked-script/361853/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cracked-script/361853/4</link>
        <pubDate>Sun, 26 Sep 2010 04:07:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361853-4</guid>
        <source url="https://forum.moparisthebest.com/t/cracked-script/361853.rss">Cracked script</source>
      </item>
      <item>
        <title>Cracked script</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="361853">
<div class="title">
<div class="quote-controls"></div>
 c|p:</div>
<blockquote>
<p>cool story bro</p>
</blockquote>
</aside>
<p><img src="http://randomfunnypicture.com/wp2/wp-content/uploads/2010/08/cool-starry-bra.jpg" alt width="" height=""></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cracked-script/361853/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cracked-script/361853/3</link>
        <pubDate>Sun, 26 Sep 2010 03:23:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361853-3</guid>
        <source url="https://forum.moparisthebest.com/t/cracked-script/361853.rss">Cracked script</source>
      </item>
      <item>
        <title>Cracked script</title>
        <dc:creator><![CDATA[@Cheese_Police c|p]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheese_police">@Cheese_Police</a> wrote:</p>
          <blockquote>
              <p>cool story bro</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cracked-script/361853/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cracked-script/361853/2</link>
        <pubDate>Sun, 26 Sep 2010 03:12:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361853-2</guid>
        <source url="https://forum.moparisthebest.com/t/cracked-script/361853.rss">Cracked script</source>
      </item>
      <item>
        <title>Cracked script</title>
        <dc:creator><![CDATA[@Pouch Pouch]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pouch">@Pouch</a> wrote:</p>
          <blockquote>
              <p>it’s part of DreamFighter from rsbot - from pastebin</p>
<p>[CODE]package scripts.DreamFighter;</p>
<p>import impsoft.bots.reflection.Interface;<br>
import impsoft.bots.reflection.NPC;<br>
import impsoft.bots.reflection.NPCIterator;<br>
import impsoft.bots.reflection.WorldObject;<br>
import impsoft.scripting.ibot.builtin.itemrec.InventoryReflectionItemSlot;<br>
import impsoft.scripting.ibot.builtin.itemrec.ItemSlot;<br>
import impsoft.scripting.ibot.builtin.ocr.Menu;<br>
import impsoft.scripting.ibot.builtin.tabs.TabSkelton;<br>
import impsoft.scripting.ibot.itemrec.ItemCondition;<br>
import impsoft.scripting.ibot.itemrec.ItemContains;<br>
import impsoft.scripting.ibot.structs.AryanTile;<br>
import impsoft.scripting.ibot.structs.RGB;<br>
import impsoft.scripting.ibot.structs.XY;<br>
import impsoft.scripting.types.ColorSkeltonScriptable;<br>
import impsoft.utils.general.Timer;<br>
import impsoft.utils.ibot.ColorMapAnaylsis;<br>
import impsoft.values.constant.Areas;</p>
<p>import java.awt.Rectangle;<br>
import java.util.ArrayList;<br>
import java.util.regex.Pattern;</p>
<p>import api.magictab.Spell;</p>
<p>public class GeneralUtils {<br>
private static ColorSkeltonScriptable cs;</p>
<pre><code>public GeneralUtils(ColorSkeltonScriptable cs) {
	GeneralUtils.cs = cs;
}

public static class PotionUtils {
	private static ItemCondition vial = new ItemContains("Vial");

	public void dropVials() throws InterruptedException {
		InventoryUtils.drop(vial, true);
	}

	public boolean hasPotion(CombatPotion potion) throws InterruptedException {
		return cs.theTabs.Inventory.count(potion.getItemRegexCondition()) &gt; 0;
	}

	public boolean needPotion(CombatPotion potion) throws InterruptedException {
		if (potion.isSpecial()) {
			switch (potion) {
				case ANTIPOISON:
					return MiscUtils.isPoisoned();
				case SUMMONING:
					return false;
				case PRAYER:
					return false;
			}
		} else {
			return (cs.theTabs.Statistics.getStatBottom(potion.getSkill()) - cs.theTabs.Statistics.getStatTop(potion
					.getSkill())) &gt;= cs.random(3);
		}

		return false;
	}
}

public static class MiscUtils {
	private static Rectangle runButton = new Rectangle(706, 92, 57, 34);
	private static Rectangle hpButton = new Rectangle(691, 13, 28, 33);
	private static RGB poisonedColor = new RGB(12, 153, 36);

	public static boolean isPoisoned() throws InterruptedException {
		return cs.isLoggedIn() &amp;&amp; ColorMapAnaylsis.isRGBInArea(cs.getColorMap(), poisonedColor, hpButton);
	}

	public static void setTab(TabSkelton tab) throws InterruptedException {
		tab.click();
	}

	public void setFastRun(boolean on) throws InterruptedException {
		if ((cs.getSettingArray()[173] == 1) == on) { return; }

		if (cs.theMiniMapIndicators.getEnergy() &lt; cs.random(25, 40) &amp;&amp; on) { return; }
		{
			cs.mouseClickLeft(runButton);
			cs.sleep(1000);
		}
	}

	public void sleepUntilNotMoving() throws InterruptedException {
		sleepUntilNotMoving(1500);
	}

	public void sleepUntilNotMoving(long movingStartWait) throws InterruptedException {
		for (Timer t = new Timer(movingStartWait); !t.isUp() &amp;&amp; !cs.isMoving(); cs.sleep(100L)) {
		}

		int notMovingCount = 0;
		while (true) {
			cs.sleep(100);
			if (cs.isMoving()) {
				notMovingCount = 0;
			} else {
				notMovingCount++;
			}
			if (notMovingCount &gt; 2) {
				break;
			}
		}
	}

	public void sleepUntilMoving(long waitTime) throws InterruptedException {
		Timer wait = new Timer(waitTime);
		while (!cs.isMoving() &amp;&amp; wait.isNotUp()) {
			cs.sleep(100);
		}
	}

	public void sleepUntilVisible(WorldObject wo) throws InterruptedException {
		while (cs.isMoving()) {
			if (wo.getGameScreenLocation() != null) {
				break;
			}

			cs.sleep(cs.random(100, 150));
		}
	}

	public void sleepUntilTile(AryanTile tile, int distance) throws InterruptedException {
		while (cs.isMoving()) {
			if (tile.distanceTo(cs.getLocation()) &lt;= distance) {
				break;
			}
			cs.sleep(100);
		}
	}

	public int parseInt(String input) {
		if (input != null) {
			input = input.replaceAll("[^0-9]", "");
			if (input.matches("[0-9]+")) { return Integer.parseInt(input); }
		}

		return -1;
	}
}

public static class InventoryUtils {
	public static boolean drop(ItemCondition ic, boolean all) throws InterruptedException {
		return doInventory(ic, all ? cs.theTabs.Inventory.count(ic) : 1, "drop", true);
	}

	//	public boolean doInventoryItem(ItemCondition it, String action, boolean waitForChange) throws InterruptedException {

	public static boolean doInventory(ItemCondition ic, int times, String action, boolean waitForChange)
			throws InterruptedException {
		for (int i = 0; i &lt; times; i++) {
			if (!doInventory(ic, action, waitForChange)) { return false; }
		}

		return true;
	}

	public static boolean doInventory(ItemCondition ic, String action, boolean waitForChange)
			throws InterruptedException {
		if (action != null) {
			action = action.toLowerCase();
		}

		GeneralUtils.MiscUtils.setTab(cs.theTabs.Inventory);

		ItemSlot slot = getClosestItemSlot(ic);
		if (slot != null &amp;&amp; slot.isItemInSlot()) {
			cs.mouseMove(slot.getArea());

			if (slot.isMouseInside()) {
				String tt = null;
				if (slot.getItemName().contains(" 0")) { return false; }

				if ((tt = cs.theTopText.getTopText().toLowerCase()) != null
						&amp;&amp; (action == null || action == "" || tt.contains(action))) {
					cs.mouseClickLeft(cs.getCurrentMouseXY());
				} else {
					cs.mouseClickRight(cs.getCurrentMouseXY());

					for (Timer t = new Timer(250); t.isNotUp() &amp;&amp; cs.theMenuFinder.getMenu() == null;) {
						cs.sleep(50);
					}

					Menu m = null;
					if ((m = cs.theMenuFinder.getMenu()) != null) {
						if (!m.contains(action)) {
							cs.mouseClickLeft(cs.getCurrentMouseXY());
						}

						m.clickContains(action);
					}
				}

				if (waitForChange) {
					String oldName = slot.getItemName();
					String tempName = "";
					if (oldName == null) {
						oldName = "";
					}

					for (Timer t = new Timer(2500); t.isNotUp()
							&amp;&amp; (slot != null &amp;&amp; (slot.isItemInSlot() || ((tempName = slot.getItemName()) != null &amp;&amp; tempName
									.equalsIgnoreCase(oldName)))); cs.sleep(100)) {
					}
				}
			}

			return true;
		} else {
			return false;
		}
	}

	public static InventoryReflectionItemSlot getClosestItemSlot(ItemCondition it) throws InterruptedException {
		InventoryReflectionItemSlot slot = null;
		int closestDistance = 10000;
		XY mouse = cs.getCurrentMouseXY();

		for (InventoryReflectionItemSlot aslot : cs.theTabs.Inventory.SLOTS) {
			if (aslot != null &amp;&amp; aslot.isItemInSlot() &amp;&amp; !aslot.isANotedItem()) {
				String name = aslot.getItemName();
				if (name == null) {
					System.out.println("No item found.");
				} else if (it.validItem(name)) {
					if (aslot.isMouseInside()) { return aslot; }
					XY slotXY = new XY(aslot.x, aslot.y);
					if (slotXY.distanceTo(mouse) &lt; closestDistance) {
						slot = aslot;
						closestDistance = slotXY.distanceTo(mouse);
					}
				}
			}
		}

		return slot;
	}
}

public static class BankUtils {
	private static Rectangle closeButton = null;

	public void doWithdraw(ItemCondition exact, int withdraw) throws InterruptedException {
		if (!cs.theTabs.Inventory.isFull()) {
			if (withdraw == 1) {
				cs.theBank.doWithDraw1(exact, false);
			} else if (withdraw == 5) {
				cs.theBank.doWithDraw5(exact, false);
			} else if (withdraw == 10) {
				cs.theBank.doWithDraw10(exact, false);
			} else {
				cs.theBank.doWithDrawX(exact, withdraw, false);
			}
		}
	}

	public boolean closeBank() {
		return false;
	}

	public boolean openBank() {
		return false;
	}

	public void walkToBank() {

	}
}

public static class AntibanUtils {

	public void moveMouseOffscreen() throws InterruptedException {
		int x = 0;
		int y = 0;

		while (x &gt;= 0 &amp;&amp; x &lt;= Areas.ENTIRE_WIDTH &amp;&amp; y &gt;= 0 &amp;&amp; y &lt;= Areas.ENTIRE_HEIGHT) {
			x = cs.random(-3000, 3000);
			y = cs.random(-3000, 3000);
		}

		cs.mouseMove(new XY(x, y));
	}
}

public static class EquipmentUtils {

	public boolean remove(ItemCondition ic) throws InterruptedException {
		if (cs.theTabs.Equipment.isWearing(ic)) { return cs.theTabs.Equipment.remove(ic); }

		return true;
	}
}

public static class TeleportUtils {

	public boolean doJewelry(Jewelry jewel, String location) {
		return false;
	}

	public boolean doTeleportTab(TeleportTab tab) {
		return false;
	}

	public boolean doTeleport(Spell spell) {
		return false;
	}

	public enum TeleportTab {
		VARROCK(null), FALADOR(null), CAMELOT(null), LUMBRIDGE(null);

		private Pattern name;

		TeleportTab(Pattern name) {
			this.name = name;
		}

		public Pattern getName() {
			return name;
		}
	}

	public enum Jewelry {
		GAMES_NECKLACE(null, new String[] {}), RING_OF_DUELING(null, new String[] {}), COMBAT_BRACELET(null,
				new String[] {}), AMULET_OF_GLORY(null, new String[] {});

		private Pattern name;
		private String[] locations;

		Jewelry(Pattern name, String[] locations) {
			this.name = name;
			this.locations = locations;
		}

		public Pattern getName() {
			return name;
		}

		public String[] getLocations() {
			return locations;
		}
	}
}

public static class CombatUtils {
	public int getScore(NPC npc) {
		int score = 0; //max score is 30

		if (!npc.isInteractingWithOtherPlayer()) {
			score += 7;
		}

		if (!npc.inCombat()) {
			score += 7;
		}

		if (!npc.isMoving()) {
			score += 2;
		}

		if (npc.isInteractingWithMyPlayer()) {
			score += 10;
		}

		score += npc.getLocation().distanceTo(cs.getLocation()) &gt; 5 ? 2 : 4;

		return score;
	}

	public NPC getNPC(int maxDistance, boolean onMinimap, boolean obstacle, Monster... monsters)
			throws InterruptedException {
		ArrayList&lt;NPC&gt; npcs = new ArrayList&lt;NPC&gt;();
		NPCIterator itr = cs.getNPCIterator();

		AryanTile currentLocation = cs.getLocation();
		while (itr.hasNext()) {
			NPC npc = itr.next();

			AryanTile npcLocation = npc.getLocation();
			if (isAttackable(npc) &amp;&amp; (!obstacle || cs.theMiniMap.canReachReflection(npcLocation))
					&amp;&amp; (!onMinimap || isOnMinimap(npc)) &amp;&amp; currentLocation.distanceTo(npcLocation) &lt;= maxDistance) {
				for (Monster monster : monsters) {
					if (monster.matches(npc)) {
						npcs.add(npc);
						break;
					}
				}
			}
		}

		NPC best = null;
		int bestScore = 0;
		for (NPC npc : npcs) {
			if (getScore(npc) &gt; bestScore) {
				best = npc;
			}
		}

		return best;
	}

	public boolean runawayFromCombat() {
		if (!cs.inCombat()) {
			return true;
		} else {

		}

		return false;
	}

	public boolean isAttackable(NPC npc) {
		return npc.getLevel() &gt; 0 &amp;&amp; npc.valid() &amp;&amp; (!isMultiCombatArea() || (!cs.inCombat() || npc.getHPRatio() &gt; 130));
	}

	public boolean isMultiCombatArea() {
		return false;
	}

	public boolean isOnMinimap(WorldObject object) {
		return false;
	}

	public boolean setAttackMode(String mode) throws InterruptedException {
		if (!isAttackModeSelected(mode)) {
			GeneralUtils.MiscUtils.setTab(cs.theTabs.Attack);

			int attackOption = getAttackOption(mode);
			if (attackOption != -1) {
				cs.mouseMove(getAttackStyleArea(attackOption));
			}
		}

		return isAttackModeSelected(mode);
	}

	public boolean isAttackModeSelected(String mode) {
		return getAttackOption(mode) == cs.getSettingArray()[43];
	}

	public int getAttackOption(String mode) {
		Interface[] attackStyles = cs.getInterfacesAtIndex(884);

		if (attackStyles.length &gt; 0) {
			for (int i = 0; i &lt; attackStyles.length; i++) {
				Interface attackStyle = attackStyles[i];

				if (attackStyle.isValid() &amp;&amp; attackStyle.getText().equalsIgnoreCase(mode)) {
					int style = ((i &gt;&gt; 1) % 15);

					if ((style - 10) == 3) {
						return 1;
					} else {
						return style &gt; 0 ? style - 10 : style;
					}
				}
			}
		}

		return -1;
	}

	public Rectangle getAttackStyleArea(int option) {
		return new Rectangle(583 + (84 * (option % 2)), 256 + (51 * (option / 2)), 41, 27);
	}

	public boolean doSpecialAttack(String currentWeapon, String currentShield, String weaponSwitch)
			throws InterruptedException {
		SpecialAttack weapon = null;

		for (SpecialAttack sa : SpecialAttack.values()) {
			if (weaponSwitch.toLowerCase().contains(sa.getName())) {
				weapon = sa;
				break;
			}
		}

		if (weapon != null) {
			int previous = cs.theTabs.Attack.getSpecialAttackPoints();

			if (cs.theTabs.Attack.isSpecialAttackPainted() &amp;&amp; cs.theTabs.Attack.isSpecialEnabled()) {
				if (cs.theTabs.Attack.getSpecialAttackPoints() &gt;= weapon.getPointsRequired()) {
					if (cs.theTabs.Inventory.count(weaponSwitch) &gt; 0) {
						GeneralUtils.InventoryUtils.doInventory(new ItemContains(weapon.getName()), null, true);
					}
				}

				cs.theTabs.Attack.clickSpecialAttack();
				for (Timer timer = new Timer(750); !timer.isUp() &amp;&amp; !cs.theTabs.Attack.isSpecialEnabled(); cs.sleep(100)) {
				}

				for (Timer timer = new Timer(1500); !timer.isUp() &amp;&amp; cs.getMyPlayer().getInteractingNPC() != null
						&amp;&amp; (previous == cs.theTabs.Attack.getSpecialAttackPoints()); cs.sleep(100)) {
				}

				if (cs.theTabs.Attack.getSpecialAttackPoints() &lt; previous) {
					//TODO:
				}

				if (cs.theTabs.Inventory.count(currentWeapon) &gt; 0) {
					GeneralUtils.InventoryUtils.doInventory(new ItemContains(currentWeapon), null, true);
				}

				if (weapon.isTwoHanded()) {
					GeneralUtils.InventoryUtils.doInventory(new ItemContains(currentShield), null, true);
				}
			}
		}

		return false;
	}

	public enum SpecialAttack {
		;

		private String name;
		private int pointsRequired;
		private boolean twoHanded;

		SpecialAttack(String name, int pointsRequired, boolean twoHanded) {
			this.name = name;
			this.pointsRequired = pointsRequired;
			this.twoHanded = twoHanded;
		}

		public String getName() {
			return name;
		}

		public int getPointsRequired() {
			return pointsRequired;
		}

		public boolean isTwoHanded() {
			return twoHanded;
		}
	}
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cracked-script/361853/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cracked-script/361853/1</link>
        <pubDate>Sun, 26 Sep 2010 02:02:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361853-1</guid>
        <source url="https://forum.moparisthebest.com/t/cracked-script/361853.rss">Cracked script</source>
      </item>
  </channel>
</rss>
