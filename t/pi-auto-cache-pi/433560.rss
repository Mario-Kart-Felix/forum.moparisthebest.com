<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PI Auto-Cache PI</title>
    <link>https://forum.moparisthebest.com/t/pi-auto-cache-pi/433560</link>
    <description>Hey guy&#39;s i&#39;ve decided to start a server up again to have some fun :D only problem I have is, is the cache Auto-Downloader. I changed some things in the Cache folder like the background and the hitmark&#39;s etc and I re-uploaded it to a Auto-Download website called Dropbox.com I pasted the link where the other Dropbox download was and I compiled and i&#39;m having an error.. Any help? I have TeamViewer, I really need some help.. I will post my CacheDownloader file here...

[QUOTE]Êþº¾   2
 Z 	 Y 	 Y ‘ ’	 Y “ ”
  
 Y •
  –
 Y —
  ˜	 Y ™	 Y š
 › œ
  ž Ÿ
    ¡
 Y ¢
  £ ¤
  ¥
 Y ¦
 Y §
 Y ¨ © ª
   
  «
  ¬
 Y ­ ® ¯
 !   ° ± ²
 $  
 # ³
 ! ´
 µ ¶
 µ ·
 ¸ ¹
 º »@Y       ¼ ½
 Y œ	 ¾ ¿ À
  Á
 Â Ã Ä
 ¸ ¬
 º ¬ Å
   Æ
 Ç È
 Ç É
 Ç Ê Ë Ì Í
 @  
 ? Î Ï
 C Î
 C Ð
 Ñ Ò
 Ñ Ó
  Ô
 Ç Õ
 Y Ö
 C ¬ × Ø
 L  
  Ù Ú
  Ò
  Û Ü
  Ý Þ
 C ¹
 $ »
 $ ¬ ß à client Lclient; BUFFER I 
ConstantValue    VERSION    	cacheLink Ljava/lang/String; 
fileToExtract &lt;init&gt; (Lclient;)V Code LineNumberTable drawLoadingText (Ljava/lang/String;)V (ILjava/lang/String;)V getCacheDir ()Ljava/lang/String; getCacheLink getCacheVersion ()I 
downloadCache ()LCacheDownloader; 
StackMapTable Ÿ ® downloadFile &#39;(Ljava/lang/String;Ljava/lang/String;)V ß á â ã ä ¯ å Å æ æ getArchivedName unZip ()V Ï ç 	deleteZIP unzip 3(Ljava/util/zip/ZipInputStream;Ljava/lang/String;)V ± 
Exceptions 
SourceFile CacheDownloader.java f … ] ^ a ^ 4http://dl.dropbox.com/u/34740702/Uncalled_Attack.zip c d java/lang/StringBuilder m n è é ƒ n ê n e d [ \ [ j l ë ì n java/io/File f k 
/cacheVersion p q è í .dat î ï o n w x „ … java/io/BufferedWriter java/io/FileWriter f ð ñ … ˆ k java/lang/Exception java/net/URL java/io/BufferedOutputStream java/io/FileOutputStream / f ò ó ô ã õ ö ÷ q ä ø ù â ú û Loading new updates  %... ü ý þ 	 è ÿ  k Unpacking.. java/io/IOException … á q   java/io/BufferedInputStream java/io/FileInputStream f java/util/zip/ZipInputStream	
 ç ï n
 ï ‰ Š &quot;java/lang/IllegalArgumentException #Delete: no such file or directory:  ï Delete: write protected:  Delete: directory not empty:  ï Delete: deletion failed CacheDownloader java/lang/Object java/lang/String java/io/OutputStream java/net/URLConnection java/io/InputStream [B java/lang/Throwable java/util/zip/ZipEntry append -(Ljava/lang/String;)Ljava/lang/StringBuilder; toString 
sign/signlink findcachedir (I)Ljava/lang/StringBuilder; exists ()Z (Ljava/io/Writer;)V close (Ljava/io/OutputStream;)V openConnection ()Ljava/net/URLConnection; getInputStream ()Ljava/io/InputStream; getContentLength read ([B)I write ([BII)V java/lang/System out Ljava/io/PrintStream; (J)Ljava/lang/StringBuilder; java/io/PrintStream println printStackTrace lastIndexOf (I)I length 	substring (I)Ljava/lang/String; (Ljava/io/InputStream;)V getNextEntry ()Ljava/util/zip/ZipEntry; isDirectory getName mkdir equals (Ljava/lang/Object;)Z canWrite list ()[Ljava/lang/String; delete ! Y Z     [ \    ] ^  _    `  a ^  _    b  c d    e d     f g  h   h     8*· * µ *µ *µ *» Y· *· ¶ 	*· 
¶ 	¶ µ *+µ 
±    i                2   7 !  j k  h   &#39;     *´ 
#+¶ ±    i   
    $ 
 &amp;  j l  h   &amp;     
*´ 
,¶ ±    i   
    * 	 ,  m n  h        ¸ °    i       /  o n  h        *´ °    i       3  p q  h        ¬    i       7  r s  h  t     ì» Y*· · L» Y» Y· *· ¶ 	¶ 	*· ¶ ¶ 	¶ · M+¶ š S**· *· 
· *· » Y» Y» Y· *· ¶ 	¶ 	*· ¶ ¶ 	¶ · · N-¶ **· 
· § \,¶ š S**· *· 
· *· » Y» Y» Y· *· ¶ 	¶ 	*· ¶ ¶ 	¶ · · N-¶ **· 
· § °§ L°    å é    i   R    &lt;  = 6 ? = A I C M F ~ G ‚ H Š I  J ” L   N ¤ Q Õ R Ù S á U ä V æ [ é Y ê \ t    ý  u uû Vù B v   w x  h  ö    2N:» !Y+· &quot;:» #Y» $Y» Y· *· ¶ 	%¶ 	,¶ 	¶ · &amp;· &#39;N¶ (:¶ ): ¼:	7	¶ *6¶ +Y6Ÿ D-¶ ,	…a7		Š‡o -kŽ6*» Y· /¶ 	¶ 0¶ 	¶ · 1§ÿ´² 2» Y· ,¶ 	3¶ 		¶ 4¶ ¶ 5	Š‡o -kŽ6*6· 1Æ ¶ 7-Æ -¶ 8§ E:§ @:¶ :Æ ¶ 7-Æ -¶ 8§ $:§ :
Æ ¶ 7-Æ -¶ 8§ :
¿±  Ú ì ï 9  Ú ô   û
 9  Ú   ô û  ), 9    i   ® +   `  b  f  g 8 j ? k F m M p P q W t e u n v v x „ y £ { ¦ } Ä  Ò  Ú ‡ ß ˆ ä Š è ‹ ì Ž ï  ñ  ô ƒ ö „ û ‡  ˆ Š	 ‹
 Ž   † ‡ ˆ! Š% ‹) Ž, . Ž1 ‘ t   Æ ÿ W  y z z { | } ~    ÿ N  y z z { | } ~   ÿ =  y z z { | }  B €ÿ   y z z {  }  vB €D ÿ   y z z {  }        ‚  B €ÿ   y z z {  }    ƒ n  h   Y     )*· /¶ ;&lt;› *· ¶ &lt;d¢ *· `¶ =°&gt;°    i       ” 
 •  — &amp; › t    ü &amp;  „ …  h       ™» ?Y» @Y*´ · A· BL» CY+· DM,¶ EYNÆ j-¶ F™ )» Y» Y· *· ¶ 	-¶ G¶ 	¶ · ¶ HW§ÿÍ-¶ G*´ ¶ I™ *,*´ · J§ #*,» Y· *· ¶ 	-¶ G¶ 	¶ · J§ÿ“,¶ K§ L+¶ :±     “    i   :    ¤  ¦  © % « , ¬ R ¯ ` ° i ± l ³ Œ ·  » “ ¹ ” º ˜ ¼ t   ! ý  } †ü 5 ‡ÿ   y  v  ˆ k  h   ý     ¡» Y» Y· *· ¶ 	+¶ 	¶ · M,¶ š » LY» Y· M¶ 	+¶ 	¶ · N¿,¶ Oš » LY» Y· P¶ 	+¶ 	¶ · N¿,¶ Q™ (,¶ RN-¾ž » LY» Y· S¶ 	+¶ 	¶ · N¿,¶ T&gt;š 
» LYU· N¿±    i   6 
   À  Ã $ Ä ? Ç F È a Ì h Í m Î r Ï  Ô ’ Ö – ×   Ù t    ü ? u!+ü   ‰ Š  h   t     1» $Y,· &amp;N ¼:6+¶ VY6Ÿ -¶ W§ÿê-¶ X±    i       Þ 	 à  á  ã   ä , æ 0 ç t   
 þ  ‹  Œ     9      Ž[/QUOTE]


[SIZE=&quot;7&quot;]And my .java file![/SIZE]

[QUOTE]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;http://dl.dropbox.com/u/34740702/Uncalled_Attack.zip&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Loading new updates &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);

			drawLoadingText(percentage, &quot;Unpacking..&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/QUOTE]

Please help thanks! :admin::admin::admin::hurr::hurr::hurr:</description>
    
    <lastBuildDate>Mon, 20 Feb 2012 00:58:25 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-auto-cache-pi/433560.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PI Auto-Cache PI</title>
        <dc:creator><![CDATA[@Velocity_Scape Velocity Scape]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/velocity_scape">@Velocity_Scape</a> wrote:</p>
          <blockquote>
              <p>Hey guy’s i’ve decided to start a server up again to have some fun <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"> only problem I have is, is the cache Auto-Downloader. I changed some things in the Cache folder like the background and the hitmark’s etc and I re-uploaded it to a Auto-Download website called <a href="http://Dropbox.com" rel="nofollow noopener">Dropbox.com</a> I pasted the link where the other Dropbox download was and I compiled and i’m having an error… Any help? I have TeamViewer, I really need some help… I will post my CacheDownloader file here…</p>
<p>[QUOTE]Êþº¾   2<br>
Z 	 Y 	 Y ‘ ’	 Y “a ”<br>
 <br>
Y •<br>
 –<br>
Y —<br>
 ˜	 Y ™	 Y š<br>
› œ<br>
 ža Ÿ<br>
   ¡<br>
Y ¢<br>
 £ ¤<br>
 ¥<br>
Y ¦<br>
Y §<br>
Y ¨a ©a ª<br>
e<br>
 «<br>
 ¬<br>
Y ­a ®a ¯<br>
!  a °a ± ²<br>
$</p>
<h1>³</h1>
<p>! ´<br>
µ ¶<br>
µ ·<br>
¸ ¹<br>
º »@Y       ¼ ½<br>
Y œ	 ¾ ¿ À<br>
 Á<br>
Â Ã Ä<br>
¸ ¬<br>
º ¬a Å<br>
Æ<br>
Ç È<br>
Ç É<br>
Ç Ê Ëa Ìa Í<br>
@<br>
? Îa Ï<br>
C Î<br>
C Ð<br>
Ñ Ò<br>
Ñ Ó<br>
 Ô<br>
Ç Õ<br>
Y Ö<br>
C ¬a × Ø<br>
L<br>
 Ù Ú<br>
 Ò<br>
 Û Ü<br>
 Ý Þ<br>
C ¹<br>
$ »<br>
$ ¬a ßa à client Lclient; BUFFER I<br>
ConstantValue    aVERSION    	cacheLink Ljava/lang/String;<br>
fileToExtract  (Lclient;)V Code LineNumberTable drawLoadingText (Ljava/lang/String;)V (ILjava/lang/String;)V getCacheDir ()Ljava/lang/String; getCacheLink getCacheVersion ()I<br>
downloadCache ()LCacheDownloader;<br>
StackMapTablea Ÿa ® downloadFile '(Ljava/lang/String;Ljava/lang/String;)Va ßa áa âa ãa äa ¯a åa Åa æa æ getArchivedName unZip ()Va Ïa ç 	deleteZIP unzip 3(Ljava/util/zip/ZipInputStream;Ljava/lang/String;)Va ±<br>
Exceptions<br>
SourceFile CacheDownloader.java f … ] ^ a ^ 4http://dl.dropbox.com/u/34740702/Uncalled_Attack.zip c d java/lang/StringBuilder m n è é ƒ n ê n e d [ \a [ j la ë ì n java/io/File f k<br>
/cacheVersion p q è í .dat î ï o n w x „ … java/io/BufferedWriter java/io/FileWriter f ð ñ … ˆ k java/lang/Exception java/net/URL java/io/BufferedOutputStream java/io/FileOutputStream / f ò ó ôa ã õ ö ÷ qa ä ø ùa â ú û Loading new updates  %…a ü ý þ 	 è ÿa  k Unpacking… java/io/IOException …a á qa   ejava/io/BufferedInputStream java/io/FileInputStream f java/util/zip/ZipInputStream	<br>
a ç ï n<br>
ï ‰ Š "java/lang/IllegalArgumentException <span class="hashtag">#Delete:</span> no such file or directory:  ï Delete: write protected:  Delete: directory not empty:  ï Delete: deletion failed CacheDownloader java/lang/Object java/lang/String java/io/OutputStream java/net/URLConnection java/io/InputStream [B java/lang/Throwable java/util/zip/ZipEntry append -(Ljava/lang/String;)Ljava/lang/StringBuilder; toString 
sign/signlink findcachedir (I)Ljava/lang/StringBuilder; exists ()Z (Ljava/io/Writer;)V close (Ljava/io/OutputStream;)V openConnection ()Ljava/net/URLConnection; getInputStream ()Ljava/io/InputStream; getContentLength read ([B)I write a([BII)V java/lang/System out Ljava/io/PrintStream; (J)Ljava/lang/StringBuilder; java/io/PrintStream aprintln printStackTrace lastIndexOf (I)I length 	substring (I)Ljava/lang/String; (Ljava/io/InputStream;)V getNextEntry ()Ljava/util/zip/ZipEntry; isDirectory agetName mkdir equals (Ljava/lang/Object;)Z canWrite list ()[Ljava/lang/String; delete ! Y Z     [ \    ] ^  _    <code> a ^  _  b  c d  e d   f g  h h   8*· * µ *µ *µ *» Y· a*· ¶ 	*· ¶ 	¶ µ *+µ ±  i  a       e   2 7 !  j k  h '   *´ #+¶ ±  i  $ &amp;  j l  h &amp;   *´ e,¶ ±  i  * 	 ,  m n  h    ¸ °  i   /  o n  h    *´ °  i   3  p q  h    ¬  i   7  r s  h t   ì» Y*· · L» Y» Y· a*· ¶ 	¶ 	*· ¶ ¶ 	¶ · M+¶ š S**· *· · *· » Y» eY» Y· a*· ¶ 	¶ 	*· ¶ ¶ 	¶ · · N-¶ **· · § \,¶ š S**· *· · *· » Y» eY» Y· a*· ¶ 	¶ 	*· ¶ ¶ 	¶ · · N-¶ **· · § °§ L°  å é  i R  &lt;  = 6 ? = A I C M F ~ G ‚ H Š I  J ” L N ¤ Q Õ R Ù S á U ä V æ [ é Y ê \ t  ý a ua uû Vù Ba v  w x  h ö   2N:» !Y+· ":» #Y» $Y» Y· a*· ¶ 	%¶ 	,¶ 	¶ · &amp;· 'N¶ (:¶ ): ¼:a	7	¶ *6a¶ +Y6Ÿ D-a¶ ,	…a7		Š‡o -kŽ6*» Y· a/¶ 	¶ 0¶ 	¶ · 1§ÿ´² 2» Y· a,¶ 	3¶ 		¶ 4¶ ¶ 5	Š‡o -kŽ6*6· 1Æ ¶ 7-Æ a-¶ 8§ E:§ @:¶ :Æ ¶ 7-Æ a-¶ 8§ $:§ : Æ ¶ 7-Æ a-¶ 8§ : ¿± a Ú ì ï 9  Ú ô û  9  Ú ô û ), 9  i ® +</code>  b  f  g 8 j ? k F m M p P q W t e u n v v x „ y £ { ¦ } Ä  Ò  Ú ‡ ß ˆ ä Š è ‹ ì Ž ï  ñ  ô ƒ ö „ û ‡  ˆ Š	 ‹<br>
Ž   † ‡ ˆ! Š% ‹) Ž, . Ž1 ‘ t   Æ ÿ W a ya za za {a |a }a ~a    ÿ N a ya za za {a |a }a ~a   ÿ = a ya za za {a |a }  aBa €ÿ  a ya za za { a } a vaBa €Da ÿ  a ya za za { a }       a ‚  aBa €ÿ  a ya za za { a }    ƒ n  h   Y     )<em>· /¶ ;&lt;e› ee</em>· ¶ &lt;d¢ *· e<code>¶ =°&gt;°  i   ” • e — &amp; › t  ü &amp;  „ …  h    ™» ?Y» @Y*´ · A· BL» CY+· DM,¶ EYNÆ j-¶ F™ )» Y» Y· a*· ¶ 	-¶ G¶ 	¶ · ¶ HW§ÿÍ-¶ G*´ ¶ I™ *,*´ · J§ #*,» Y· a*· ¶ 	-¶ G¶ 	¶ · J§ÿ“,¶ K§ L+¶ :±   “  i :  ¤  ¦  © % « , ¬ R ¯</code> ° i ± l ³ Œ ·  » “ ¹ ” º ˜ ¼ t   ! ý a }a †ü 5a ‡ÿ  a y a v  ˆ k  h   ý     ¡» Y» Y· a*· ¶ 	+¶ 	¶ · M,¶ š » LY» Y· aM¶ 	+¶ 	¶ · N¿,¶ Oš » LY» Y· aP¶ 	+¶ 	¶ · N¿,¶ Q™ (,¶ RN-¾ž » LY» Y· aS¶ 	+¶ 	¶ · N¿,¶ T&gt;š<br>
» LYU· N¿±    i   6<br>
À  Ã $ Ä ? Ç F È a Ì h Í m Î r Ï  Ô ’ Ö – ×   Ù t    ü ?a u!+ü   ‰ Š  h   t     1» $Y,· &amp;N ¼:6+¶ VY6Ÿ -¶ W§ÿê-¶ X±    i    a   Þ 	 à  á  ã   ä , æ 0 ç t<br>
þ a ‹a  Œ     9      Ž[/QUOTE]</p>
<p>[SIZE=“7”]And my .java file![/SIZE]</p>
<p>[QUOTE]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

private final int VERSION = 1; // Version of cache
private String cacheLink = "http://dl.dropbox.com/u/34740702/Uncalled_Attack.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	//System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	//System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Loading new Updates....");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		//System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteZIP(getArchivedName());
	} else {
		if(!version.exists()) {
			//drawLoadingText("~ First Time Installation, Only Once! ~");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Loading new updates " + percentage + "%...");

		}

		System.out.println(localFileName + "\t" + numWritten);

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);

		drawLoadingText(percentage, "Unpacking..");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		//System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			//System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");

}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/QUOTE]</p>
<p>Please help thanks! :admin::admin::admin::hurr::hurr::hurr:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-auto-cache-pi/433560/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-auto-cache-pi/433560/1</link>
        <pubDate>Mon, 20 Feb 2012 00:58:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433560-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-auto-cache-pi/433560.rss">PI Auto-Cache PI</source>
      </item>
  </channel>
</rss>
