<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[317] [ExRendum] Admins Not Losing Items Upon Death</title>
    <link>https://forum.moparisthebest.com/t/317-exrendum-admins-not-losing-items-upon-death/302425</link>
    <description>Hey, just hoping someone could help me out here with solving this little problem i have.
trying to make anyone above rights 2 not lose items upon death but am having trouble as i do not know where to insert if(playerRights &lt;= 2}.

here is my public void youdied() 
&lt;blockquote&gt;public void youdied()
		{
hint = 0;

		if(playerHasItem(5509)){
		deleteItem(5509, 1);
		}
		if(playerHasItem(5510)){
		deleteItem(5510, 1);
		}
		if(playerHasItem(5512)){
		deleteItem(5512, 1);
		}
		if(playerHasItem(5514)){
		deleteItem(5514, 1);
		}
		if(playerHasItem(6570)){
		keep6570 = true;
		deleteItem(6570, 1);
		}
                if (!isSkulled) {
                keepItemHandle();
		}
                if (ProtItem) {
                applyProtectItemProt();
		}
for(int rr=0; rr&lt;playerItems.length; rr++) {
	try {
		if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999 ) {		//createItem(currentX,currentY,playerItems[rr]-1);
			replaceBarrows();
			//server.checkPlayerCapes.checkDrop(this);
			ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);
                        //createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
			deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);
 
		}
	} catch(Exception e) {  }
}
for(int r=0; r&lt;playerEquipment.length; r++) {
	try {
		int item = playerEquipment[r];
		if((item &gt; 0) &amp;&amp; (item &lt; 11999)) {
			remove(item, r);
		}
	} catch(Exception e) { sM(&quot;ERROR: Removing Equipment&quot;); }
}
		if(playerHasItem(5509)){
		deleteItem(5509, 1);
		}
		if(playerHasItem(5510)){
		deleteItem(5510, 1);
		}
		if(playerHasItem(5512)){
		deleteItem(5512, 1);
		}
		if(playerHasItem(5514)){
		deleteItem(5514, 1);
		}
		if(playerHasItem(6570)){
		keep6570 = true;
		deleteItem(6570, 1);
		}
for(int rr=0; rr&lt;playerItems.length; rr++) {
	try {
		if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {
//createItem(currentX,currentY,playerItems[rr]-1);
			replaceBarrows();
			//server.checkPlayerCapes.checkDrop(this);
			ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);
                        //createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
			deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]); 
		}
	} catch(Exception e) {  }
}
		try {

		} catch(Exception e) {}
			ItemHandler.addItem(526, absX, absY, 1, KillerId, false);
		try {
		} catch(Exception e) {}
        if (itemKept1 &gt; 0)
            addItem(itemKept1, 1);
        if (itemKept2 &gt; 0)
            addItem(itemKept2, 1);
        if (itemKept3 &gt; 0)
            addItem(itemKept3, 1);
        if (itemKept4 &gt; 0)
            addItem(itemKept4, 1);
	if (keep6570) {
	    addItem(6570, 1);
	    keep6570 = false;
	}
	
			resetKeepItem();
			hitDiff = 0;	
			updateRequired = true; appearanceUpdateRequired = true;
		}
    public void keepItem1()
    {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept1 = playerItems[i]-1;
                itemKept1Slot = i;
                itemSlot1 = true;
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept1 = playerEquipment[i];
                itemKept1Slot = i;
                itemSlot1 = false;
            }
        }
    }

    public void keepItem2() {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            if (itemKept1Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                {
                    highest = value;
                    itemKept2 = playerItems[i]-1;
                    itemKept2Slot = i;
                    itemSlot2 = true;
                }
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            if (itemKept1Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                {
                    highest = value;
                    itemKept2 = playerEquipment[i];
                    itemKept2Slot = i;
                    itemSlot2 = false;
                }
            }
        }
    }

    public void keepItem3()
    {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                {
                    highest = value;
                    itemKept3 = playerItems[i]-1;
                    itemKept3Slot = i;
                    itemSlot3 = true;
                }
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                {
                    highest = value;
                    itemKept3 = playerEquipment[i];
                    itemKept3Slot = i;
                    itemSlot3 = false;
                }
            }
        }
    }&lt;/blockquote&gt;</description>
    
    <lastBuildDate>Tue, 15 Sep 2009 10:25:01 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-exrendum-admins-not-losing-items-upon-death/302425.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[317] [ExRendum] Admins Not Losing Items Upon Death</title>
        <dc:creator><![CDATA[@Jayce Jayce]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jayce">@Jayce</a> wrote:</p>
          <blockquote>
              <p>Hey, just hoping someone could help me out here with solving this little problem i have.<br>
trying to make anyone above rights 2 not lose items upon death but am having trouble as i do not know where to insert if(playerRights &lt;= 2}.</p>
<p>here is my public void youdied()</p>
<blockquote>public void youdied()
		{
hint = 0;
<pre><code>	if(playerHasItem(5509)){
	deleteItem(5509, 1);
	}
	if(playerHasItem(5510)){
	deleteItem(5510, 1);
	}
	if(playerHasItem(5512)){
	deleteItem(5512, 1);
	}
	if(playerHasItem(5514)){
	deleteItem(5514, 1);
	}
	if(playerHasItem(6570)){
	keep6570 = true;
	deleteItem(6570, 1);
	}
            if (!isSkulled) {
            keepItemHandle();
	}
            if (ProtItem) {
            applyProtectItemProt();
	}
</code></pre>
<p>for(int rr=0; rr&lt;playerItems.length; rr++) {<br>
try {<br>
if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999 ) {		//createItem(currentX,currentY,playerItems[rr]-1);<br>
replaceBarrows();<br>
<a href="//server.checkPlayerCapes.checkDrop" rel="nofollow noopener">//server.checkPlayerCapes.checkDrop</a>(this);<br>
ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);<br>
//createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);<br>
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);</p>
<pre><code>	}
} catch(Exception e) {  }
</code></pre>
<p>}<br>
for(int r=0; r&lt;playerEquipment.length; r++) {<br>
try {<br>
int item = playerEquipment[r];<br>
if((item &gt; 0) &amp;&amp; (item &lt; 11999)) {<br>
remove(item, r);<br>
}<br>
} catch(Exception e) { sM(“ERROR: Removing Equipment”); }<br>
}<br>
if(playerHasItem(5509)){<br>
deleteItem(5509, 1);<br>
}<br>
if(playerHasItem(5510)){<br>
deleteItem(5510, 1);<br>
}<br>
if(playerHasItem(5512)){<br>
deleteItem(5512, 1);<br>
}<br>
if(playerHasItem(5514)){<br>
deleteItem(5514, 1);<br>
}<br>
if(playerHasItem(6570)){<br>
keep6570 = true;<br>
deleteItem(6570, 1);<br>
}<br>
for(int rr=0; rr&lt;playerItems.length; rr++) {<br>
try {<br>
if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {<br>
//createItem(currentX,currentY,playerItems[rr]-1);<br>
replaceBarrows();<br>
<a href="//server.checkPlayerCapes.checkDrop" rel="nofollow noopener">//server.checkPlayerCapes.checkDrop</a>(this);<br>
ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);<br>
//createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);<br>
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);<br>
}<br>
} catch(Exception e) {  }<br>
}<br>
try {</p>
<pre><code>	} catch(Exception e) {}
		ItemHandler.addItem(526, absX, absY, 1, KillerId, false);
	try {
	} catch(Exception e) {}
    if (itemKept1 &gt; 0)
        addItem(itemKept1, 1);
    if (itemKept2 &gt; 0)
        addItem(itemKept2, 1);
    if (itemKept3 &gt; 0)
        addItem(itemKept3, 1);
    if (itemKept4 &gt; 0)
        addItem(itemKept4, 1);
if (keep6570) {
    addItem(6570, 1);
    keep6570 = false;
}

		resetKeepItem();
		hitDiff = 0;	
		updateRequired = true; appearanceUpdateRequired = true;
	}
public void keepItem1()
{
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
        if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
        {
            highest = value;
            itemKept1 = playerItems[i]-1;
            itemKept1Slot = i;
            itemSlot1 = true;
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
        if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
        {
            highest = value;
            itemKept1 = playerEquipment[i];
            itemKept1Slot = i;
            itemSlot1 = false;
        }
    }
}

public void keepItem2() {
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        if (itemKept1Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept2 = playerItems[i]-1;
                itemKept2Slot = i;
                itemSlot2 = true;
            }
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        if (itemKept1Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept2 = playerEquipment[i];
                itemKept2Slot = i;
                itemSlot2 = false;
            }
        }
    }
}

public void keepItem3()
{
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept3 = playerItems[i]-1;
                itemKept3Slot = i;
                itemSlot3 = true;
            }
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept3 = playerEquipment[i];
                itemKept3Slot = i;
                itemSlot3 = false;
            }
        }
    }
}&lt;/blockquote&gt;</code></pre>
</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-exrendum-admins-not-losing-items-upon-death/302425/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-exrendum-admins-not-losing-items-upon-death/302425/1</link>
        <pubDate>Tue, 15 Sep 2009 10:25:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-302425-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-exrendum-admins-not-losing-items-upon-death/302425.rss">[317] [ExRendum] Admins Not Losing Items Upon Death</source>
      </item>
  </channel>
</rss>
