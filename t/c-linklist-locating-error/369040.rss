<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C++ linklist (locating error)</title>
    <link>https://forum.moparisthebest.com/t/c-linklist-locating-error/369040</link>
    <description>hello, i wrote this program to test searching of link list objects,
http://pastebin.com/v7isW9ts
[code]
#include &lt;iostream&gt;
using namespace std;

class list
{
    private :
        int lnum;
        string fname;
        string lname;
        list *next;

    public:
        list();
        list(int num,string fn , string ln);
        ~list();
        void addlist(list *);
        int getnum();
        string getlname();
        string getfname();
        list * getnext();
        list * locate (int);
};

list * list::locate(int a)
{
    cout &lt;&lt;&quot;in the locater&quot;&lt;&lt;endl;
    list *p =this;
    while (p !=NULL)
    {
        if(p-&gt;getnum()==a)
        {
            cout &lt;&lt;&quot;found p&quot;&lt;&lt;endl;
            cout&lt;&lt;p&lt;&lt;endl;
            cout&lt;&lt;p-&gt;getnum()&lt;&lt;endl;
            return p;
        }
        p = p-&gt;getnext();
    }

}





//Construct
list::list()
{
    lnum =0;
    fname =&quot;EMPTY&quot;;
    lname =&quot;EMPTY&quot;;
    next = NULL;
}

list::list(int num, string fn, string ln)
{
    lnum =num;
    fname =fn;
    lname =ln;

}

// destructor
list::~list()
{
    //nothing
}

//add to the end of list.

void list::addlist(list * n)
{
    next=n;
}

// Accesors
int list::getnum()
{
    return (lnum);
}

string list::getfname()
{
    return (fname);
}

string list::getlname()
{
    return (lname);
}

//get the next pointer.
list * list::getnext()
{
    return (this-&gt;next);
}


/// Now the block.

class block
{
    private:
        int div;
        list * lst;
        block * nxt;

    public:
        block(int d);
        block(int d,list *, block *);
        ~block();
        int getdiv();
        list * getlist();
        block * getnxt();
        void setlst(list *);
        void setnxt(block *);
        block * locate(int);

};
block * block::locate(int d)
{
    block *p=this;
    while (p!=NULL)
    {
        list *q=p-&gt;getlist();
        while(q!=NULL)
        {
            if(q-&gt;getnum()==d)
            {
                cout&lt;&lt;&quot;found&quot;&lt;&lt;endl&lt;&lt;q-&gt;getnum()&lt;&lt;endl;
                return 0;
            }
            q = q-&gt;getnext();
        }
        p = p-&gt;getnxt();
    }

}

//constructor.
block::block(int d)
{
    div =d;
    lst =NULL;
    nxt =NULL;
}

block::block(int d, list * a, block *b)
{
    div =d;
    lst =a;
    nxt =b;
}

//Distructor.
block::~block()
{
    //nothing to do, on purpose leave memory leake.
}

// accesor.

int block::getdiv()
{
    return(div);
}

void block::setlst(list * o)
{
    lst =o;
}

void block::setnxt(block * p)
{
        nxt =p;
}


//getters
list * block::getlist()
{
    return(this-&gt;lst);
}

block * block::getnxt()
{
    return(this-&gt;nxt);
}
///the head;

class head
{
    private:
        block *h;

    public:
        head();
        head(block *);
        void sethead(block *);
        block * geth();
};

block * head::geth()
{
    return(h);
}

head::head()
{
    h=NULL;
}

head::head(block *a)
{
    h =a;
}

void head::sethead(block *b)
{
    h=b;
}



/// Main program.

int main()
{

    head *h = new head;
    block *a=new block(1);
    block *b=new block(2);
    h-&gt;sethead(a);
    a-&gt;setnxt(b);
    list *la = new list(1,&quot;test&quot;,&quot;test&quot;);
    list *lb = new list(23,&quot;k&quot;,&quot;ko&quot;);
    list *lc = new list (998,&quot;hello&quot;,&quot;works&quot;);
    list *z = new list (123,&quot;ok&quot;,&quot;ko&quot;);
    list *q = new list (45,&quot;ok&quot;,&quot;lo&quot;);
    a-&gt;setlst(la);
    b-&gt;setlst(z);
    z-&gt;addlist(q);
    la-&gt;addlist(lb);
    lb-&gt;addlist(lc);

    a-&gt;locate(1);
    a-&gt;locate(23);
    a-&gt;locate(998);
    a-&gt;locate(123); // why is this not working, crashes.
    a-&gt;locate(45); // why is this not working crashes.


}



[/code]
the problem is trying to find 123 and 45, it crashes, if i comment out this two lines and leave to find 1,23,998 it finds so.
can anyone tell me where i&#39;ve gone wrong.

by the way line 120-138 is the fun to search. also tell do i have a very poor code writing style ? ( i think its pretty bad)</description>
    
    <lastBuildDate>Sat, 27 Nov 2010 20:01:28 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C++ linklist (locating error)</title>
        <dc:creator><![CDATA[@SETO SETO]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/seto">@SETO</a> wrote:</p>
          <blockquote>
              <p>Thanks, for the advice.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/3</link>
        <pubDate>Sat, 27 Nov 2010 20:01:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369040-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040.rss">C++ linklist (locating error)</source>
      </item>
      <item>
        <title>C++ linklist (locating error)</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>I only had a quick look at the list class, don’t have time for more, first thing I found: next pointer is not being initialized on the second ctor.</p>
<p>To respond to your coding style question though, it could indeed be better, sorry. To improve it I would:</p>
<ul>
<li>Make sure to include every referred header (  for std::string, for instance ). Your particular compiler seems to reference it from , but there’s not necessarily a guarantee others will.</li>
<li>Name classes in caps (List vs list).</li>
<li>Use full prototypes ( list * list_name ) vs ( list *)</li>
<li>Document functions</li>
<li>Give identifiers meaningful names</li>
<li>Use proper OO design ( aka, do not have for a List what is actually just a glorified Node, and encapsulate those<br>
in a real List with proper operations )</li>
<li>Avoid heap allocation when possible.</li>
</ul>
<p>Positive side effect of this would be, that bugs would be much faster to find, and they would not propagate so easily.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/2</link>
        <pubDate>Wed, 24 Nov 2010 07:46:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369040-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040.rss">C++ linklist (locating error)</source>
      </item>
      <item>
        <title>C++ linklist (locating error)</title>
        <dc:creator><![CDATA[@SETO SETO]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/seto">@SETO</a> wrote:</p>
          <blockquote>
              <p>hello, i wrote this program to test searching of link list objects,<br>
<a href="http://pastebin.com/v7isW9ts" class="onebox" target="_blank" rel="nofollow noopener">http://pastebin.com/v7isW9ts</a></p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
using namespace std;

class list
{
    private :
        int lnum;
        string fname;
        string lname;
        list *next;

    public:
        list();
        list(int num,string fn , string ln);
        ~list();
        void addlist(list *);
        int getnum();
        string getlname();
        string getfname();
        list * getnext();
        list * locate (int);
};

list * list::locate(int a)
{
    cout &lt;&lt;"in the locater"&lt;&lt;endl;
    list *p =this;
    while (p !=NULL)
    {
        if(p-&gt;getnum()==a)
        {
            cout &lt;&lt;"found p"&lt;&lt;endl;
            cout&lt;&lt;p&lt;&lt;endl;
            cout&lt;&lt;p-&gt;getnum()&lt;&lt;endl;
            return p;
        }
        p = p-&gt;getnext();
    }

}





//Construct
list::list()
{
    lnum =0;
    fname ="EMPTY";
    lname ="EMPTY";
    next = NULL;
}

list::list(int num, string fn, string ln)
{
    lnum =num;
    fname =fn;
    lname =ln;

}

// destructor
list::~list()
{
    //nothing
}

//add to the end of list.

void list::addlist(list * n)
{
    next=n;
}

// Accesors
int list::getnum()
{
    return (lnum);
}

string list::getfname()
{
    return (fname);
}

string list::getlname()
{
    return (lname);
}

//get the next pointer.
list * list::getnext()
{
    return (this-&gt;next);
}


/// Now the block.

class block
{
    private:
        int div;
        list * lst;
        block * nxt;

    public:
        block(int d);
        block(int d,list *, block *);
        ~block();
        int getdiv();
        list * getlist();
        block * getnxt();
        void setlst(list *);
        void setnxt(block *);
        block * locate(int);

};
block * block::locate(int d)
{
    block *p=this;
    while (p!=NULL)
    {
        list *q=p-&gt;getlist();
        while(q!=NULL)
        {
            if(q-&gt;getnum()==d)
            {
                cout&lt;&lt;"found"&lt;&lt;endl&lt;&lt;q-&gt;getnum()&lt;&lt;endl;
                return 0;
            }
            q = q-&gt;getnext();
        }
        p = p-&gt;getnxt();
    }

}

//constructor.
block::block(int d)
{
    div =d;
    lst =NULL;
    nxt =NULL;
}

block::block(int d, list * a, block *b)
{
    div =d;
    lst =a;
    nxt =b;
}

//Distructor.
block::~block()
{
    //nothing to do, on purpose leave memory leake.
}

// accesor.

int block::getdiv()
{
    return(div);
}

void block::setlst(list * o)
{
    lst =o;
}

void block::setnxt(block * p)
{
        nxt =p;
}


//getters
list * block::getlist()
{
    return(this-&gt;lst);
}

block * block::getnxt()
{
    return(this-&gt;nxt);
}
///the head;

class head
{
    private:
        block *h;

    public:
        head();
        head(block *);
        void sethead(block *);
        block * geth();
};

block * head::geth()
{
    return(h);
}

head::head()
{
    h=NULL;
}

head::head(block *a)
{
    h =a;
}

void head::sethead(block *b)
{
    h=b;
}



/// Main program.

int main()
{

    head *h = new head;
    block *a=new block(1);
    block *b=new block(2);
    h-&gt;sethead(a);
    a-&gt;setnxt(b);
    list *la = new list(1,"test","test");
    list *lb = new list(23,"k","ko");
    list *lc = new list (998,"hello","works");
    list *z = new list (123,"ok","ko");
    list *q = new list (45,"ok","lo");
    a-&gt;setlst(la);
    b-&gt;setlst(z);
    z-&gt;addlist(q);
    la-&gt;addlist(lb);
    lb-&gt;addlist(lc);

    a-&gt;locate(1);
    a-&gt;locate(23);
    a-&gt;locate(998);
    a-&gt;locate(123); // why is this not working, crashes.
    a-&gt;locate(45); // why is this not working crashes.


}


</code></pre>
<p>the problem is trying to find 123 and 45, it crashes, if i comment out this two lines and leave to find 1,23,998 it finds so.<br>
can anyone tell me where i’ve gone wrong.</p>
<p>by the way line 120-138 is the fun to search. also tell do i have a very poor code writing style ? ( i think its pretty bad)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linklist-locating-error/369040/1</link>
        <pubDate>Wed, 17 Nov 2010 08:13:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369040-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-linklist-locating-error/369040.rss">C++ linklist (locating error)</source>
      </item>
  </channel>
</rss>
