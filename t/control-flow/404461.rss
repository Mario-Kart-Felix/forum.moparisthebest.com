<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Control flow?</title>
    <link>https://forum.moparisthebest.com/t/control-flow/404461</link>
    <description>Ok, so I&#39;m having a hard time understanding control flow and how to fix it.  I was talking to someone on IRC and they were telling me to locate a boolean in the client class,  and find all the calls to it.  He then said to grab the id of the next istore, and find all the iloads calling that variable.  He told me that if the next instruction is an ifne, just delete the iload and the ifne, and if the next instruction is an ifeq, delete the iload, ifeq, and everything between that and what the ifeq jumps to.   At first, that sounded like it would be the right thing to do, but then I noticed massive jumps like     

//   51: ifeq +122 -&gt; 173

Which would jump to instruction 173, correct?  Not only that, but there appears to be useful stuff actually happening in that space.  So, can someone enlighten me on this?</description>
    
    <lastBuildDate>Fri, 29 Jul 2011 22:48:05 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/control-flow/404461.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@03data 03data]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/03data">@03data</a> wrote:</p>
          <blockquote>
              <p>[quote=“sspoke, post:3, topic:404461”]I may be wrong but you can get rid of all the guess work by loading up JBE (Java Bytecode Editor) and clicking on the green Label… it will auto jump for you and you can see where it jumps too… (line number) and (inustruction number)</p>
<p>pretty much<br>
//   51: ifeq +122 -&gt; 173</p>
<p>means it will jump to instruction number 122. not line 173… hell this instruction 122 could even be on line 90 for all you know.</p>
<p>This isn’t a problem if you want to fix control flow and such just cast to BranchInstruction (BCEL) and call method getTargetInstrIndex… then you could do fancy stuff like…</p>
<p>setTargetInstrIndex(getTargetInstrIndex+1) or<br>
setTargetInstrIndex(getTargetInstrIndex - 20)</p>
<p>etc… you get the point.[/quote]</p>
<p>BCEL works a bit different from my lib; you either gotta set the bytecode offset or the target instruction. I don’t think you can directly set the target instruction index.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/6</link>
        <pubDate>Fri, 29 Jul 2011 22:48:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-6</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>mdog what zkm does is introduce opaque predicates to turn your unconditional branches i.e. gotos into conditional ones, specifically ifeq. it introduces one or more fields (i think most people here are only familiar with runescape which iirc uses one they call the control field) which have a runtime apparent value of 0, however this is not so easily deducible using a non-static white-box analysis where the fields are indeed used and modified in dead code that is not reached during normal control flow. they replace goto instructions with ifne instructions that operate on the values of these “flow obstructor” fields. if you know anything about what these instructions do you’ll see the switch is valid and both instructions will have the same outcome:<br>
goto is a simple jump<br>
ifeq pops the top stack word and compares it to 0, if it is it jumps<br>
the constraint here is that the obstructors are ALWAYS 0 therefore you can rewrite it again as a goto<br>
unfortunately jad and jode don’t realize this and instead see a garbled mess of control flow that can’t be matched to source code constructs<br>
oh, thought i’d mention zkm also inserts random ifnes on these obstructors as well, which are effectively nops but also indeed help prevent decompilers from translating back into source code</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/5</link>
        <pubDate>Mon, 18 Jul 2011 01:33:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-5</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>umm…+122 is referring to the branch’s jump target offset…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/4</link>
        <pubDate>Mon, 18 Jul 2011 00:57:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-4</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@sspoke sspoke]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sspoke">@sspoke</a> wrote:</p>
          <blockquote>
              <p>I may be wrong but you can get rid of all the guess work by loading up JBE (Java Bytecode Editor) and clicking on the green Label… it will auto jump for you and you can see where it jumps too… (line number) and (inustruction number)</p>
<p>pretty much<br>
//   51: ifeq +122 -&gt; 173</p>
<p>means it will jump to instruction number 122. not line 173… hell this instruction 122 could even be on line 90 for all you know.</p>
<p>This isn’t a problem if you want to fix control flow and such just cast to BranchInstruction (BCEL) and call method getTargetInstrIndex… then you could do fancy stuff like…</p>
<p>setTargetInstrIndex(getTargetInstrIndex+1) or<br>
setTargetInstrIndex(getTargetInstrIndex - 20)</p>
<p>etc… you get the point.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/3</link>
        <pubDate>Mon, 18 Jul 2011 00:06:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-3</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>whoever you talk to is an idiot<br>
i’ve posted about this before, find the thread</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/2</link>
        <pubDate>Sat, 16 Jul 2011 05:48:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-2</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
      <item>
        <title>Control flow?</title>
        <dc:creator><![CDATA[@m.dog311 m.dog311]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/m.dog311">@m.dog311</a> wrote:</p>
          <blockquote>
              <p>Ok, so I’m having a hard time understanding control flow and how to fix it.  I was talking to someone on IRC and they were telling me to locate a boolean in the client class,  and find all the calls to it.  He then said to grab the id of the next istore, and find all the iloads calling that variable.  He told me that if the next instruction is an ifne, just delete the iload and the ifne, and if the next instruction is an ifeq, delete the iload, ifeq, and everything between that and what the ifeq jumps to.   At first, that sounded like it would be the right thing to do, but then I noticed massive jumps like</p>
<p>//   51: ifeq +122 -&gt; 173</p>
<p>Which would jump to instruction 173, correct?  Not only that, but there appears to be useful stuff actually happening in that space.  So, can someone enlighten me on this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/control-flow/404461/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/control-flow/404461/1</link>
        <pubDate>Sat, 16 Jul 2011 04:52:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-404461-1</guid>
        <source url="https://forum.moparisthebest.com/t/control-flow/404461.rss">Control flow?</source>
      </item>
  </channel>
</rss>
