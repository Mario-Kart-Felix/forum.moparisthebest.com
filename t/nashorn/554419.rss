<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Nashorn</title>
    <link>https://forum.moparisthebest.com/t/nashorn/554419</link>
    <description>Have been messing around with Nashorn. Is there a more effective way of loading scripts and their contents into some form of memory and then calling specific functions from those scripts? This code works, but it feels like a work around.

[code=java5]
       
private final ScriptEngineManager manager = new ScriptEngineManager();
	
private final ScriptEngine engine = manager.getEngineByName(&quot;nashorn&quot;);
[/code]

[code=java5]private final ConcurrentHashMap&lt;String, String&gt; scripts = new ConcurrentHashMap&lt;String, String&gt;();
	[/code]

The key in this map is the name of the script and the value is the contents of the file. Did it this way so when the script is evaluated in the call method
the contents would already be in memory so a stream isn&#39;t opened every time a script&#39;s function is called, figured this might be efficient?

[code=java5]public void loadDirectory(String directory) {
		try {
			final File[] files = new File(directory).listFiles();
			for (File file : files) {
				if (file == null) {
					continue;
				}
				scripts.put(file.getName(), new Scanner(file).useDelimiter(&quot;\\Z&quot;).next());
				logger.info(&quot;Loaded script &quot; + file.getPath() + &quot;.&quot;);
			}
		} catch (FileNotFoundException exception) {
			exception.printStackTrace();
		}
	}[/code]

[code=java5]public void call(String script, String function, Object... arguments) {
		try {
			engine.eval(scripts.get(script));
			Invocable invocable = (Invocable) engine;
			invocable.invokeFunction(function, arguments);
		} catch (ScriptException | NoSuchMethodException exception) {
			exception.printStackTrace();
		}
	}[/code]</description>
    
    <lastBuildDate>Sun, 17 Jan 2016 05:48:59 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/nashorn/554419.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Nashorn</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>nice</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/nashorn/554419/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/nashorn/554419/4</link>
        <pubDate>Sun, 17 Jan 2016 05:48:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554419-4</guid>
        <source url="https://forum.moparisthebest.com/t/nashorn/554419.rss">Nashorn</source>
      </item>
      <item>
        <title>Nashorn</title>
        <dc:creator><![CDATA[@Vix Vix]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vix">@Vix</a> wrote:</p>
          <blockquote>
              <p>[quote=“sini, post:2, topic:554419”]<a href="https://docs.oracle.com/javase/7/docs/api/javax/script/Compilable.html" rel="nofollow noopener">https://docs.oracle.com/javase/7/docs/api/javax/script/Compilable.html</a><br>
<a href="https://docs.oracle.com/javase/7/docs/api/javax/script/CompiledScript.html%5B/quote%5D" rel="nofollow noopener">https://docs.oracle.com/javase/7/docs/api/javax/script/CompiledScript.html[/quote]</a></p>
<p>Thanks, don’t know how i missed that :palm:</p>
<p>Edit : Implementation</p>
<p>[code=java5]	/**<br>
* Evaluates a compiled script and then calls a specific function from that script file.<br>
* <a class="mention" href="/u/param">@param</a> script The name of the script.<br>
* <a class="mention" href="/u/param">@param</a> function The name of the function.<br>
* <a class="mention" href="/u/param">@param</a> arguments The potential arguments the function may take.<br>
*/<br>
public void call(String script, String function, Object… arguments) {<br>
try {<br>
final CompiledScript compiledScript = (CompiledScript) engine.get(script);<br>
compiledScript.eval();<br>
final Invocable invocable = (Invocable) compiledScript.getEngine();<br>
invocable.invokeFunction(function, arguments);<br>
} catch (ScriptException | NoSuchMethodException exception) {<br>
exception.printStackTrace();<br>
}<br>
}</p>
<pre><code>/**
 * Loads all of the java-script files within a given directory.
 * @param directory The path to the directory containing the scripts.
 */
public void loadDirectory(String directory) {
	try {
		final File[] files = new File(directory).listFiles();
		for (File file : files) {
			if (file == null) {
				continue;
			}
			final CompiledScript compiledScript = compilable.compile(new FileReader(file.getPath()));
			engine.put(file.getName(), compiledScript);
			logger.info("Compiled script " + file + ".");
		}
		logger.info("Loaded " + files.length + " java-script files.");
	} catch (FileNotFoundException | ScriptException exception) {
		exception.printStackTrace();
	}
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/nashorn/554419/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/nashorn/554419/3</link>
        <pubDate>Sun, 17 Jan 2016 00:17:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554419-3</guid>
        <source url="https://forum.moparisthebest.com/t/nashorn/554419.rss">Nashorn</source>
      </item>
      <item>
        <title>Nashorn</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p><a href="https://docs.oracle.com/javase/7/docs/api/javax/script/Compilable.html" class="onebox" target="_blank" rel="nofollow noopener">https://docs.oracle.com/javase/7/docs/api/javax/script/Compilable.html</a><br>
<a href="https://docs.oracle.com/javase/7/docs/api/javax/script/CompiledScript.html" class="onebox" target="_blank" rel="nofollow noopener">https://docs.oracle.com/javase/7/docs/api/javax/script/CompiledScript.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/nashorn/554419/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/nashorn/554419/2</link>
        <pubDate>Sat, 16 Jan 2016 23:43:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554419-2</guid>
        <source url="https://forum.moparisthebest.com/t/nashorn/554419.rss">Nashorn</source>
      </item>
      <item>
        <title>Nashorn</title>
        <dc:creator><![CDATA[@Vix Vix]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vix">@Vix</a> wrote:</p>
          <blockquote>
              <p>Have been messing around with Nashorn. Is there a more effective way of loading scripts and their contents into some form of memory and then calling specific functions from those scripts? This code works, but it feels like a work around.</p>
<pre><code class="lang-auto">       
private final ScriptEngineManager manager = new ScriptEngineManager();
	
private final ScriptEngine engine = manager.getEngineByName("nashorn");</code></pre>
<p><code>private final ConcurrentHashMap&lt;String, String&gt; scripts = new ConcurrentHashMap&lt;String, String&gt;();
	</code></p>
<p>The key in this map is the name of the script and the value is the contents of the file. Did it this way so when the script is evaluated in the call method<br>
the contents would already be in memory so a stream isn’t opened every time a script’s function is called, figured this might be efficient?</p>
<p><code>public void loadDirectory(String directory) {
		try {
			final File[] files = new File(directory).listFiles();
			for (File file : files) {
				if (file == null) {
					continue;
				}
				scripts.put(file.getName(), new Scanner(file).useDelimiter("\\Z").next());
				logger.info("Loaded script " + file.getPath() + ".");
			}
		} catch (FileNotFoundException exception) {
			exception.printStackTrace();
		}
	}</code></p>
<p><code>public void call(String script, String function, Object... arguments) {
		try {
			engine.eval(scripts.get(script));
			Invocable invocable = (Invocable) engine;
			invocable.invokeFunction(function, arguments);
		} catch (ScriptException | NoSuchMethodException exception) {
			exception.printStackTrace();
		}
	}</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/nashorn/554419/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/nashorn/554419/1</link>
        <pubDate>Sat, 16 Jan 2016 06:23:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554419-1</guid>
        <source url="https://forum.moparisthebest.com/t/nashorn/554419.rss">Nashorn</source>
      </item>
  </channel>
</rss>
