<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
    <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979</link>
    <description>Hey, Mmm I deleted the cache from c:/ to check if the cachedownloader works or no. but i found out that it doesn&#39;t unzip the file completely.
Here, Hows My Cache Looked Like. But If I put the cache in C:/ manually, it will work.
[IMG]http://i46.tinypic.com/2im5hkn.png[/img]

Codes (Might Be Wrong Or Something); In Client.java (Client)

[code]private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k)
	{
		byte abyte0[] = null;
		int l = 5;
        try
        {
            if(decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
			}
            if(abyte0 == null)
            {
                drawLoadingText(0, &quot;Connecting to File Server...&quot;);
                new Update(&quot;https://dl.dropbox.com/s/r080q47m0tpftzm/RealNex.zip&quot;, &quot;cache.zip&quot;, signlink.findcachedir());
                  abyte0 = decompressors[0].decompress(i);
			}
        } catch (Exception e) {
			e.printStackTrace();
		}
		if(abyte0 != null)
		{
			NamedArchive archive = new NamedArchive(abyte0, s);
			return archive;
		}
		while (true) {
			drawLoadingText(0, &quot;Error loading... Contact Staff!&quot;);
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
[/code]

In CacheDownloader.java (Client)

[code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

        private client client;

        private final int BUFFER = 1024;

        private final int VERSION = 2; // Version of cache
        private String cacheLink = &quot;https://dl.dropbox.com/s/r080q47m0tpftzm/RealNex.zip&quot;; // Link to cache
        
        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                //System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                //System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                
                if(!location.exists()) {
                        //drawLoadingText(&quot;Loading new Updates....&quot;);
                        downloadFile(getCacheLink(), getArchivedName());

                        unZip();
                        //System.out.println(&quot;UNZIP&quot;);

                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                        deleteZIP(getArchivedName());
                } else {
                        if(!version.exists()) {
                                //drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
                                downloadFile(getCacheLink(), getArchivedName());

                                unZip();
                                //System.out.println(&quot;UNZIP&quot;);

                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();
                                deleteZIP(getArchivedName());

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {

                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                
                        byte[] data = new byte[BUFFER]; 
        
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();

        
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;

                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Loading new updates &quot; + percentage + &quot;%...&quot;);

                        }

                        System.out.println(localFileName + &quot;\t&quot; + numWritten);

                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);

                        drawLoadingText(percentage, &quot;Unpacking..&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        //System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }




        private void unZip() {

                try {
                            InputStream in = 
                                new BufferedInputStream(new FileInputStream(fileToExtract));
                        ZipInputStream zin = new ZipInputStream(in);
                        ZipEntry e;

                        while((e=zin.getNextEntry()) != null) {

                                       if(e.isDirectory()) {
                                        (new File(getCacheDir() + e.getName())).mkdir();
                                       } else {

                                if (e.getName().equals(fileToExtract)) {
                                        unzip(zin, fileToExtract);
                                        break;
                                }
                                               unzip(zin, getCacheDir() + e.getName());
                                }
                                //System.out.println(&quot;unzipping2 &quot; + e.getName());
                        }
                        zin.close();

                } catch(Exception e) {
                        e.printStackTrace();
                }
        }

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                //System.out.println(&quot;unzipping &quot; + s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
}[/code]

My Signlink.java

[code]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

 public final class signlink
    implements Runnable
{
    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    

    public static String findcachedir() {
        String as[] = {&quot;C:/&quot;};
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = &quot;RealNex&quot;;
        for(int i = 0; i &lt; as.length; i++)
            try {
                String s1 = as[i];
                if(s1.length() &gt; 0) {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }
        return null;
    }

	
	public static String sencondDir() {
		File file = new File(&quot;./&quot;);
		if (!file.exists())
			file.mkdir();
		return file.toString();
	}

    private static int getuid(String s) {
        return 234523;
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}[/code]

PLEASE ANYONE CAN HELP WITH THIS? Thanks.</description>
    
    <lastBuildDate>Wed, 03 Apr 2013 22:49:52 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Sol0 Sol0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sol0">@Sol0</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="513979">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/arcik/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Arcik:</div>
<blockquote>
<p>your not meant to zip the actual folder but instead all the files inside.</p>
</blockquote>
</aside>
<p>Thanks Alot It Worked &lt;3</p>
<p>[quote=“Carcool, post:7, topic:513979”]He actually half right sol0<br>
You can just change the cache drive position as in: c:/servername/servername<br>
[yours] c:/servername [this iss your code]<br>
instead of reuploading to dropbox etc.[/quote]<br>
I Appreciate Your Help But It Worked Now Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/8</link>
        <pubDate>Wed, 03 Apr 2013 22:49:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-8</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Carcool Carcool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/carcool">@Carcool</a> wrote:</p>
          <blockquote>
              <p>He actually half right sol0<br>
You can just change the cache drive position as in: c:/servername/servername<br>
[yours] c:/servername [this iss your code]<br>
instead of reuploading to dropbox etc.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/7</link>
        <pubDate>Wed, 03 Apr 2013 22:17:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-7</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Sol0 Sol0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sol0">@Sol0</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="513979">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/arcik/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Arcik:</div>
<blockquote>
<p>your not meant to zip the actual folder but instead all the files inside.</p>
</blockquote>
</aside>
<p>oh damn! you’re right. thanks lemme try &lt;3</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/6</link>
        <pubDate>Wed, 03 Apr 2013 22:15:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-6</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>your not meant to zip the actual folder but instead all the files inside.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/5</link>
        <pubDate>Wed, 03 Apr 2013 22:09:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-5</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Sol0 Sol0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sol0">@Sol0</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="3" data-topic="513979">
<div class="title">
<div class="quote-controls"></div>
 AtomicInt_:</div>
<blockquote>
<p>Look at what’s thrown, look at your cache. Do you see a “Maps” directory?</p>
</blockquote>
</aside>
<p>when i put the cache in C:/ manually, it works so yh but i dont know why there’s 2 files of the cache … one is inside the main one. look.<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i46.tinypic.com/vgt49.png" title="vgt49.png" rel="nofollow noopener"><img src="http://i46.tinypic.com/vgt49.png" alt width="490" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">vgt49.png</span><span class="informations">587×598</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="http://i46.tinypic.com/1joh1z.png" title="1joh1z.png" rel="nofollow noopener"><img src="http://i46.tinypic.com/1joh1z.png" alt width="634" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">1joh1z.png</span><span class="informations">863×680</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/4</link>
        <pubDate>Wed, 03 Apr 2013 22:05:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-4</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Look at what’s thrown, look at your cache. Do you see a “Maps” directory?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/3</link>
        <pubDate>Wed, 03 Apr 2013 19:52:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-3</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>Not going to bother look at the code, but did you zip the cache correctly?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/2</link>
        <pubDate>Wed, 03 Apr 2013 19:50:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-2</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
      <item>
        <title>*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</title>
        <dc:creator><![CDATA[@Sol0 Sol0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sol0">@Sol0</a> wrote:</p>
          <blockquote>
              <p>Hey, Mmm I deleted the cache from c:/ to check if the cachedownloader works or no. but i found out that it doesn’t unzip the file completely.<br>
Here, Hows My Cache Looked Like. But If I put the cache in C:/ manually, it will work.<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i46.tinypic.com/2im5hkn.png" title="2im5hkn.png" rel="nofollow noopener"><img src="http://i46.tinypic.com/2im5hkn.png" alt width="690" height="386"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">2im5hkn.png</span><span class="informations">847×474</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Codes (Might Be Wrong Or Something); In Client.java (Client)</p>
<p><code>private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k)
	{
		byte abyte0[] = null;
		int l = 5;
        try
        {
            if(decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
			}
            if(abyte0 == null)
            {
                drawLoadingText(0, "Connecting to File Server...");
                new Update("https://dl.dropbox.com/s/r080q47m0tpftzm/RealNex.zip", "cache.zip", signlink.findcachedir());
                  abyte0 = decompressors[0].decompress(i);
			}
        } catch (Exception e) {
			e.printStackTrace();
		}
		if(abyte0 != null)
		{
			NamedArchive archive = new NamedArchive(abyte0, s);
			return archive;
		}
		while (true) {
			drawLoadingText(0, "Error loading... Contact Staff!");
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}
</code></p>
<p>In CacheDownloader.java (Client)</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;

    private final int BUFFER = 1024;

    private final int VERSION = 2; // Version of cache
    private String cacheLink = "https://dl.dropbox.com/s/r080q47m0tpftzm/RealNex.zip"; // Link to cache
    
    private String fileToExtract = getCacheDir() + getArchivedName();

    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
            //System.out.println(text);
    }


    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
            //System.out.println(text);
    }

    private String getCacheDir() {
            return signlink.findcachedir();
    }

    private String getCacheLink() {
            return cacheLink;
    }

    private int getCacheVersion() {
            return VERSION;
    }

    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            
            if(!location.exists()) {
                    //drawLoadingText("Loading new Updates....");
                    downloadFile(getCacheLink(), getArchivedName());

                    unZip();
                    //System.out.println("UNZIP");

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
                    deleteZIP(getArchivedName());
            } else {
                    if(!version.exists()) {
                            //drawLoadingText("~ First Time Installation, Only Once! ~");
                            downloadFile(getCacheLink(), getArchivedName());

                            unZip();
                            //System.out.println("UNZIP");

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();
                            deleteZIP(getArchivedName());

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
    
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
            
                    byte[] data = new byte[BUFFER]; 
    
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

    
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Loading new updates " + percentage + "%...");

                    }

                    System.out.println(localFileName + "\t" + numWritten);

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);

                    drawLoadingText(percentage, "Unpacking..");

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }

    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    //System.err.println("error retreiving archivaed name.");
            }
            return "";
    }




    private void unZip() {

            try {
                        InputStream in = 
                            new BufferedInputStream(new FileInputStream(fileToExtract));
                    ZipInputStream zin = new ZipInputStream(in);
                    ZipEntry e;

                    while((e=zin.getNextEntry()) != null) {

                                   if(e.isDirectory()) {
                                    (new File(getCacheDir() + e.getName())).mkdir();
                                   } else {

                            if (e.getName().equals(fileToExtract)) {
                                    unzip(zin, fileToExtract);
                                    break;
                            }
                                           unzip(zin, getCacheDir() + e.getName());
                            }
                            //System.out.println("unzipping2 " + e.getName());
                    }
                    zin.close();

            } catch(Exception e) {
                    e.printStackTrace();
            }
    }
</code></pre>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");

    }

    private void unzip(ZipInputStream zin, String s) 
            throws IOException {

            FileOutputStream out = new FileOutputStream(s);
            //System.out.println("unzipping " + s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
            }
            out.close();
    }
</code></pre>
<p>}[/code]</p>
<p>My Signlink.java</p>
<p>[code]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{<br>
public static void startpriv(InetAddress inetaddress)<br>
{<br>
threadliveid = (int)(Math.random() * 99999999D);<br>
if(active)<br>
{<br>
try<br>
{<br>
Thread.sleep(500L);<br>
}<br>
catch(Exception _ex) { }<br>
active = false;<br>
}<br>
socketreq = 0;<br>
threadreq = null;<br>
dnsreq = null;<br>
savereq = null;<br>
urlreq = null;<br>
socketip = inetaddress;<br>
Thread thread = new Thread(new signlink());<br>
thread.setDaemon(true);<br>
thread.start();<br>
while(!active)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }<br>
}</p>
<pre><code>public void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
            file.delete();
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}



public static String findcachedir() {
    String as[] = {"C:/"};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = "RealNex";
    for(int i = 0; i &lt; as.length; i++)
        try {
            String s1 = as[i];
            if(s1.length() &gt; 0) {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + "/";
        }
        catch(Exception _ex) { }
    return null;
}


public static String sencondDir() {
	File file = new File("./");
	if (!file.exists())
		file.mkdir();
	return file.toString();
}

private static int getuid(String s) {
    return 234523;
}

public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/code]</p>
<p>PLEASE ANYONE CAN HELP WITH THIS? Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979/1</link>
        <pubDate>Wed, 03 Apr 2013 17:51:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513979-1</guid>
        <source url="https://forum.moparisthebest.com/t/fixed-cachedownloader-doesnt-work-perfectly-fixed/513979.rss">*FIXED*CacheDownloader Doesn&#39;t Work Perfectly?*FIXED*</source>
      </item>
  </channel>
</rss>
