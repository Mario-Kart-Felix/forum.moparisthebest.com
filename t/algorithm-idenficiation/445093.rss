<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Algorithm Idenficiation</title>
    <link>https://forum.moparisthebest.com/t/algorithm-idenficiation/445093</link>
    <description>Going to go out on the limb to guess this is huffman encoding but I couldn&#39;t really be sure? I don&#39;t know what the &#39;values&#39; array is other than it&#39;s used to signify a character. Taken from a modern Runescape, Huffmans class. If anyone was wondering. I&#39;d just like a bit more information on how this actually works in layman terms.

[code]
final int encode(byte[] src, byte[] dest, int srcOff, int destOff, int len) {
	try {
	    anInt3771++;
	    int value = 0;
	    len += srcOff;
	    int bitOffset = destOff &lt;&lt; 3;
	    for (/**/; (srcOff) &lt; (len); srcOff++) {
		int dataValue = 0xff &amp; src[srcOff];
		int v = values[dataValue];
		int offset = bitOffsets[dataValue];
		if (offset == 0)
		    throw new RuntimeException(&quot;No codeword for data value &quot; + dataValue);
		int byteOff = bitOffset &gt;&gt; 3;
		int localBit = bitOffset &amp; 0x7;
		value &amp;= -localBit &gt;&gt; 31;
		int nextOff = (localBit + offset - 1 &gt;&gt; 3) + byteOff;
		bitOffset += offset;
		localBit += 24;
		dest[byteOff]  = (byte) (value = Class273.bitOr(value, v &gt;&gt;&gt; localBit));
		if ((byteOff ^ 0xffffffff) &gt; (nextOff ^ 0xffffffff)) {
		    byteOff++;
		    localBit -= 8;
		    dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
		    if ((nextOff ^ 0xffffffff) &lt; (byteOff ^ 0xffffffff)) {
			byteOff++;
			localBit -= 8;
			dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
			if (nextOff &gt; byteOff) {
			    localBit -= 8;
			    byteOff++;
			    dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
			    if (byteOff &lt; nextOff) {
				localBit -= 8;
				byteOff++;
				dest[byteOff] = (byte) (value = v &lt;&lt; -localBit);
			    }
			}
		    }
		}
	    }
	    return (bitOffset + 7 &gt;&gt; 3) - destOff;
	} catch (RuntimeException runtimeexception) {
	    throw Class348_Sub17.method2929(runtimeexception,
					    (&quot;wda.C(&quot; + len + &#39;,&#39; + srcOff + &#39;,&#39;
					     + destOff + &#39;,&#39;
					     + (src != null ? &quot;{...}&quot; : &quot;null&quot;)
					     + &#39;,&#39; 
					     + (dest != null ? &quot;{...}&quot;
						: &quot;null&quot;)
					     + &#39;)&#39;));
	}
    }
[/code]</description>
    
    <lastBuildDate>Thu, 14 Jun 2012 19:07:20 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Algorithm Idenficiation</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:2, topic:445093”]It’s encoding using the Huffman table built in the classes constructor. values is really the dictionary of  “code words” (bit strings) themselves, while bitOffsets gives you the length of each code word (which is meant to be positively correlated with frequency). If you had code that hadn’t already been refactored with your guessed names, I’d have been able to show you how simple the code was.</p>
<p>P.S. All those if-branches are for handling the case of longer codes, up to 40-bits in length.</p>
<p>[code]class HuffmanCodec {</p>
<p>…</p>
<p>final int encode(byte[] in, int in_off, int len, byte[] out, int out_off) {<br>
len += in_off;</p>
<pre><code>int cur = 0;

int out_bit_ptr = out_off &lt;&lt; 3;
int in_ptr = in_off;
while (in_ptr &lt; len) {
  int val = in[in_ptr++] &amp; 0xff;

  int code = codes[val];
  int code_len = code_lens[val];
  if (code_len == 0) { /* you can't encode a value with 0 bits */
    throw new RuntimeException("No codeword for data value " + val);
  }

  int out_ptr = out_bit_ptr &gt;&gt; 3;
  int out_bit_off = out_bit_ptr &amp; 7;
  cur &amp;= -out_bit_off &gt;&gt; 31;

  int end_ptr = (out_bit_off + code_len - 1 &gt;&gt; 3) + out_ptr;
  out_bit_ptr += code_len;
  out_bit_off += 24;

  out[out_ptr] = (byte) (cur |= (code &gt;&gt;&gt; out_bit_off));
  while (out_ptr &lt; end_ptr &amp;&amp; out_bit_off &gt;= -8) {
    out[out_ptr++] = (byte) (cur = (out_bit_off -= 8) &gt; 0 ? (code &gt;&gt;&gt; out_bit_off) : (code &lt;&lt; -out_bit_off));
  }
}

return (out_bit_ptr + 7 &gt;&gt;&gt; 3) - out_off;
</code></pre>
<p>}<br>
}[/code][/quote]</p>
<p>I rewrote most of it because it really wasn’t that complex, I was just curious as to what the codeword meant. Thanks!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/3</link>
        <pubDate>Thu, 14 Jun 2012 19:07:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445093-3</guid>
        <source url="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093.rss">Algorithm Idenficiation</source>
      </item>
      <item>
        <title>Algorithm Idenficiation</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>It’s encoding using the Huffman table built in the class’ constructor. values is really the dictionary of  “code words” (bit strings) themselves, while bitOffsets gives you the length of each code word (which is meant to be positively correlated with frequency). If you had code that hadn’t already been refactored with your guessed names, I’d have been able to show you how simple the code was.</p>
<p>P.S. All those if-branches are for handling the case of longer codes, up to 40-bits in length.</p>
<p>[code]class HuffmanCodec {</p>
<p>…</p>
<p>final int encode(byte[] in, int in_off, int len, byte[] out, int out_off) {<br>
len += in_off;</p>
<pre><code>int cur = 0;

int out_bit_ptr = out_off &lt;&lt; 3;
int in_ptr = in_off;
while (in_ptr &lt; len) {
  int val = in[in_ptr++] &amp; 0xff;

  int code = codes[val];
  int code_len = code_lens[val];
  if (code_len == 0) { /* you can't encode a value with 0 bits */
    throw new RuntimeException("No codeword for data value " + val);
  }

  int out_ptr = out_bit_ptr &gt;&gt; 3;
  int out_bit_off = out_bit_ptr &amp; 7;
  cur &amp;= -out_bit_off &gt;&gt; 31;

  int end_ptr = (out_bit_off + code_len - 1 &gt;&gt; 3) + out_ptr;
  out_bit_ptr += code_len;
  out_bit_off += 24;

  out[out_ptr] = (byte) (cur |= (code &gt;&gt;&gt; out_bit_off));
  while (out_ptr &lt; end_ptr &amp;&amp; out_bit_off &gt;= -8) {
    out[out_ptr++] = (byte) (cur = (out_bit_off -= 8) &gt; 0 ? (code &gt;&gt;&gt; out_bit_off) : (code &lt;&lt; -out_bit_off));
  }
}

return (out_bit_ptr + 7 &gt;&gt;&gt; 3) - out_off;
</code></pre>
<p>}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/2</link>
        <pubDate>Thu, 14 Jun 2012 18:10:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445093-2</guid>
        <source url="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093.rss">Algorithm Idenficiation</source>
      </item>
      <item>
        <title>Algorithm Idenficiation</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Going to go out on the limb to guess this is huffman encoding but I couldn’t really be sure? I don’t know what the ‘values’ array is other than it’s used to signify a character. Taken from a modern Runescape, Huffmans class. If anyone was wondering. I’d just like a bit more information on how this actually works in layman terms.</p>
<pre><code class="lang-auto">final int encode(byte[] src, byte[] dest, int srcOff, int destOff, int len) {
	try {
	    anInt3771++;
	    int value = 0;
	    len += srcOff;
	    int bitOffset = destOff &lt;&lt; 3;
	    for (/**/; (srcOff) &lt; (len); srcOff++) {
		int dataValue = 0xff &amp; src[srcOff];
		int v = values[dataValue];
		int offset = bitOffsets[dataValue];
		if (offset == 0)
		    throw new RuntimeException("No codeword for data value " + dataValue);
		int byteOff = bitOffset &gt;&gt; 3;
		int localBit = bitOffset &amp; 0x7;
		value &amp;= -localBit &gt;&gt; 31;
		int nextOff = (localBit + offset - 1 &gt;&gt; 3) + byteOff;
		bitOffset += offset;
		localBit += 24;
		dest[byteOff]  = (byte) (value = Class273.bitOr(value, v &gt;&gt;&gt; localBit));
		if ((byteOff ^ 0xffffffff) &gt; (nextOff ^ 0xffffffff)) {
		    byteOff++;
		    localBit -= 8;
		    dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
		    if ((nextOff ^ 0xffffffff) &lt; (byteOff ^ 0xffffffff)) {
			byteOff++;
			localBit -= 8;
			dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
			if (nextOff &gt; byteOff) {
			    localBit -= 8;
			    byteOff++;
			    dest[byteOff] = (byte) (value = v &gt;&gt;&gt; localBit);
			    if (byteOff &lt; nextOff) {
				localBit -= 8;
				byteOff++;
				dest[byteOff] = (byte) (value = v &lt;&lt; -localBit);
			    }
			}
		    }
		}
	    }
	    return (bitOffset + 7 &gt;&gt; 3) - destOff;
	} catch (RuntimeException runtimeexception) {
	    throw Class348_Sub17.method2929(runtimeexception,
					    ("wda.C(" + len + ',' + srcOff + ','
					     + destOff + ','
					     + (src != null ? "{...}" : "null")
					     + ',' 
					     + (dest != null ? "{...}"
						: "null")
					     + ')'));
	}
    }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/algorithm-idenficiation/445093/1</link>
        <pubDate>Thu, 14 Jun 2012 09:25:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445093-1</guid>
        <source url="https://forum.moparisthebest.com/t/algorithm-idenficiation/445093.rss">Algorithm Idenficiation</source>
      </item>
  </channel>
</rss>
