<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need autocachedownloader script (PI) + a question</title>
    <link>https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902</link>
    <description>hello!

Is there any other site beside &quot;DROP BOX&quot; that automatically download stuff on your computer when you open it?
 
Reason being is I don&#39;t like DROp BOX it lags the shit out of my internet when i try to upload my files. and It takes longer than UPPIT itself.

So please help with that haha

on second hand where can i obtain an autocache downloader? There seems to be some but they don&#39;t work for PI.


Thanks!</description>
    
    <lastBuildDate>Sun, 13 Jul 2014 12:58:37 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need autocachedownloader script (PI) + a question</title>
        <dc:creator><![CDATA[@amiroslo amiroslo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/amiroslo">@amiroslo</a> wrote:</p>
          <blockquote>
              <p>Tutorial<br>
First off make a new class called CacheDownloader.java<br>
Put this in it.</p>
<p>Code:</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 4024;

/*
 * Only things you need to change
 *
 */
private final int VERSION = 1; // Version of cache
private String cacheLink = "http://tigerden.uppit.com/save/733c3a074b237e549c70a09fa83cb72f/4ac50cad/0209/haw5dhcb/cache.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.method13(35, (byte)4, text);
	System.out.println(text);
}

private void drawLoadingText(int amount, String text) {
	client.method13(amount, (byte)4, text);
	System.out.println(text);
}


private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Downloading Cache Please wait...");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			//drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Finished downloading "+getArchivedName()+"!");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]<br>
Change the cache download link and the cache version to what you want on these two lines.<br>
Code:</p>
<p><code>	private final int VERSION = 1; // Version of cache
	private String cacheLink = "Link"; // Link to cache</code><br>
Now find this method in client.java</p>
<p>Code:</p>
<pre><code class="lang-auto"></code></pre>
<p>And under</p>
<p>Code:<br>
<code>method13(20, (byte)4, "Starting up");</code><br>
Simply add<br>
Code:<br>
<code>new CacheDownloader(this).downloadCache();</code></p>
<p>K now your done. Your cache should automaticly download next time you start the client.<br>
Your client can also easily be made into a webclient after this</p>
<p>Use this as your findCashDir Method<br>
Code:</p>
<p>[code]    public static String findcachedir()<br>
{<br>
String as[] = {<br>
“c:/windows/”, “c:/winnt/”, “d:/windows/”, “d:/winnt/”, “e:/windows/”, “e:/winnt/”, “f:/windows/”, “f:/winnt/”, “c:/”, “~/”,<br>
"/tmp/", “”, “c:/rscache”, “/rscache”<br>
};<br>
if(storeid &lt; 32 || storeid &gt; 34)<br>
storeid = 32;<br>
String s = “.filez_store_” + storeid;<br>
for(int i = 0; i &lt; as.length; i++)<br>
try<br>
{<br>
String s1 = as[i];<br>
if(s1.length() &gt; 0)<br>
{<br>
File file = new File(s1);<br>
if(!file.exists())<br>
continue;<br>
}<br>
File file1 = new File(s1 + s);<br>
if(file1.exists() || file1.mkdir())<br>
return s1 + s + “/”;<br>
}<br>
catch(Exception _ex) { }</p>
<pre><code>    return null;

}[/code]
</code></pre>
<p>Code:</p>
<pre><code class="lang-auto"></code></pre>
<p>That is your file name.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902/2</link>
        <pubDate>Sun, 13 Jul 2014 12:58:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544902-2</guid>
        <source url="https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902.rss">Need autocachedownloader script (PI) + a question</source>
      </item>
      <item>
        <title>Need autocachedownloader script (PI) + a question</title>
        <dc:creator><![CDATA[@geowayne geowayne]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/geowayne">@geowayne</a> wrote:</p>
          <blockquote>
              <p>hello!</p>
<p>Is there any other site beside “DROP BOX” that automatically download stuff on your computer when you open it?</p>
<p>Reason being is I don’t like DROp BOX it lags the shit out of my internet when i try to upload my files. and It takes longer than UPPIT itself.</p>
<p>So please help with that haha</p>
<p>on second hand where can i obtain an autocache downloader? There seems to be some but they don’t work for PI.</p>
<p>Thanks!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902/1</link>
        <pubDate>Sun, 13 Jul 2014 04:51:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544902-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-autocachedownloader-script-pi-a-question/544902.rss">Need autocachedownloader script (PI) + a question</source>
      </item>
  </channel>
</rss>
