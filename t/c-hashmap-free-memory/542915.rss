<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C HashMap free memory</title>
    <link>https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915</link>
    <description>Hi everyone!

For school I had to write a hashmap in C.
I&#39;m not sure about the freeMemory function though, if anybody could check it I would really appreciate it!

[code]
#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;strings.h&gt;

#define BUCKETS_SIZE 100

typedef char* ELEMENT;

typedef struct {
	ELEMENT key;
	ELEMENT value;
} PAIR;

typedef struct node_structure {
	PAIR pair;
	struct node_structure* next;
} NODE;

typedef struct {
	NODE* startNode;
	int size;
} LINKEDLIST;

typedef struct {
	LINKEDLIST** buckets;
	int size;
} HASHMAP;

NODE* newNode(ELEMENT key, ELEMENT value) {
	NODE* node = malloc(sizeof(NODE));
	node-&gt;pair.key = key;
	node-&gt;pair.value = value;
	node-&gt;next = NULL;
	return node;
}

LINKEDLIST *newLinkedList() {
	LINKEDLIST *pLinkedList = malloc(sizeof(LINKEDLIST));
	pLinkedList-&gt;size = 0;
	pLinkedList-&gt;startNode = NULL;
	return pLinkedList;
}

HASHMAP* newMap() {
	HASHMAP* map = malloc(sizeof(HASHMAP));
	map-&gt;buckets = calloc(BUCKETS_SIZE, sizeof(LINKEDLIST*));
	map-&gt;size = 0;
	return map;
}

int hash(char* string) {
	int i, som = 0;
	for (i = 0; string[i] != &#39;\0&#39;; i++)
		som += string[i];
	return som % BUCKETS_SIZE;	
}

void put(HASHMAP* map,ELEMENT key, ELEMENT value) {
	NODE* node = newNode(key, value);	
	int h = hash(key);
	if (map-&gt;buckets[h] != NULL) {		
		LINKEDLIST* list = map-&gt;buckets[h];
		node-&gt;next = list-&gt;startNode;
		list-&gt;startNode = node;
		list-&gt;size++;
	} else {
		LINKEDLIST* list = newLinkedList();
		map-&gt;buckets[h] = list;
		list-&gt;startNode = node;
		list-&gt;size++;				
	}
}

ELEMENT get(HASHMAP* map,ELEMENT key) {
	int h = hash(key);
	if (map-&gt;buckets[h] == NULL) {
		return NULL; //key bestaat niet
	} else {
		LINKEDLIST* list = map-&gt;buckets[h];
		int i;
		NODE* temp = list-&gt;startNode;
		for (i = 0; i &lt; list-&gt;size; i++) {
			if (!strcmp(temp-&gt;pair.key, key))
				return temp-&gt;pair.value;
			else
				temp = temp-&gt;next;						
		}
	}
	return NULL;
}

void removePair(HASHMAP* map, ELEMENT key) {
	int index = hash(key);
	LINKEDLIST *deList = map-&gt;buckets[index];
	NODE* nodePrev = deList-&gt;startNode;
	NODE* node = deList-&gt;startNode;
	if (node-&gt;next == NULL) { // bucket wordt leeg!
		map-&gt;buckets[index] = NULL;
		map-&gt;size--;
		free(node);
	} else {
		while (node-&gt;pair.key != key) {
			nodePrev = node;
			node = node-&gt;next;
		}
		NODE* temp = node;
		if (node == deList-&gt;startNode) {
			deList-&gt;startNode = node-&gt;next;
		} else {
			nodePrev-&gt;next = node-&gt;next;
		}
		free(temp);
		deList-&gt;size--;
		map-&gt;size--;
	}
}

void printMap(HASHMAP* map) {
	int i;	
	for (i = 0; i &lt; BUCKETS_SIZE; i++) {
		if (map-&gt;buckets[i] != NULL) {
			LINKEDLIST* theList = map-&gt;buckets[i];
			NODE *indexNode = theList-&gt;startNode;
			int j;
			for (j = 0; j &lt; theList-&gt;size; j++) {
				printf(&quot;%s: %s\t&quot;,indexNode-&gt;pair.key,indexNode-&gt;pair.value);
				indexNode = indexNode-&gt;next;
			}
			printf(&quot;\n&quot;);
		}
	}
}

void freeMemory(HASHMAP* map) {
	int i, j;
	for (i = 0; i &lt; BUCKETS_SIZE; i++) {		
		if (map-&gt;buckets[i] != NULL) {						
			NODE* temp = map-&gt;buckets[i]-&gt;startNode;
			for (j = 0; j &lt; map-&gt;buckets[i]-&gt;size; j++) {
				NODE* next = temp-&gt;next;
				free(temp);
				temp = next;
			}
		}
		free(map-&gt;buckets[i]);
	}
	free(map-&gt;buckets);
	free(map);
}

int main() {
	printf(&quot;----HashMap test----\n\n&quot;);
	
	printf(&quot;--Hash test--\n&quot;);
	char *str1 = &quot;Test 1&quot;;
	char *str2 = &quot;Test 2&quot;;
	char *str3 = &quot;Test 3&quot;;
	printf(&quot;hash (%s) = %d\n&quot;, str1, hash(str1));
	printf(&quot;hash (%s) = %d\n&quot;, str2, hash(str2));
	printf(&quot;hash (%s) = %d\n&quot;, str3, hash(str3));
	
	printf(&quot;\n--Map test--\n&quot;);
	HASHMAP* map = newMap();
	put(map, str1, &quot;0486/11.33.23&quot;);
	put(map, str2, &quot;0486/10.20.30&quot;);
	put(map, str3, &quot;0475/11.39.12&quot;);
	printMap(map);

	
	printf(&quot;\nFirst: %s: %s\n&quot;, str1, get(map, str1));
	printf(&quot;Second %s: %s\n&quot;, str2, get(map, str2));
	
	freeMemory(map);
	return 0;
}
[/code]</description>
    
    <lastBuildDate>Thu, 15 May 2014 07:43:17 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C HashMap free memory</title>
        <dc:creator><![CDATA[@Kattoor Snow_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kattoor">@Kattoor</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="542915">
<div class="title">
<div class="quote-controls"></div>
 s1gma:</div>
<blockquote>
<p>valgrind?</p>
</blockquote>
</aside>
<p>Thanks, didn’t know about that!</p>
<p>[quote=“Slave Scyth, post:3, topic:542915”]I’m not sure what you think’s wrong with the freeMemory function. Looks good to me.</p>
<p>That was pretty fun to read through for some reason. Good job.</p>
<p>German?[/quote]<br>
I wasn’t sure how to check if it worked and since I just took a couple of classes I wasn’t completely sure<br>
Thanks (:<br>
And Dutch actually <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/4</link>
        <pubDate>Thu, 15 May 2014 07:43:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542915-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915.rss">C HashMap free memory</source>
      </item>
      <item>
        <title>C HashMap free memory</title>
        <dc:creator><![CDATA[@Slave_Scyth Slave Scyth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slave_scyth">@Slave_Scyth</a> wrote:</p>
          <blockquote>
              <p>I’m not sure what you think’s wrong with the freeMemory function. Looks good to me.</p>
<p>That was pretty fun to read through for some reason. Good job.</p>
<p>German?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/3</link>
        <pubDate>Tue, 13 May 2014 19:38:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542915-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915.rss">C HashMap free memory</source>
      </item>
      <item>
        <title>C HashMap free memory</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>valgrind?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/2</link>
        <pubDate>Tue, 13 May 2014 18:37:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542915-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915.rss">C HashMap free memory</source>
      </item>
      <item>
        <title>C HashMap free memory</title>
        <dc:creator><![CDATA[@Kattoor Snow_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kattoor">@Kattoor</a> wrote:</p>
          <blockquote>
              <p>Hi everyone!</p>
<p>For school I had to write a hashmap in C.<br>
I’m not sure about the freeMemory function though, if anybody could check it I would really appreciate it!</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;strings.h&gt;

#define BUCKETS_SIZE 100

typedef char* ELEMENT;

typedef struct {
	ELEMENT key;
	ELEMENT value;
} PAIR;

typedef struct node_structure {
	PAIR pair;
	struct node_structure* next;
} NODE;

typedef struct {
	NODE* startNode;
	int size;
} LINKEDLIST;

typedef struct {
	LINKEDLIST** buckets;
	int size;
} HASHMAP;

NODE* newNode(ELEMENT key, ELEMENT value) {
	NODE* node = malloc(sizeof(NODE));
	node-&gt;pair.key = key;
	node-&gt;pair.value = value;
	node-&gt;next = NULL;
	return node;
}

LINKEDLIST *newLinkedList() {
	LINKEDLIST *pLinkedList = malloc(sizeof(LINKEDLIST));
	pLinkedList-&gt;size = 0;
	pLinkedList-&gt;startNode = NULL;
	return pLinkedList;
}

HASHMAP* newMap() {
	HASHMAP* map = malloc(sizeof(HASHMAP));
	map-&gt;buckets = calloc(BUCKETS_SIZE, sizeof(LINKEDLIST*));
	map-&gt;size = 0;
	return map;
}

int hash(char* string) {
	int i, som = 0;
	for (i = 0; string[i] != '\0'; i++)
		som += string[i];
	return som % BUCKETS_SIZE;	
}

void put(HASHMAP* map,ELEMENT key, ELEMENT value) {
	NODE* node = newNode(key, value);	
	int h = hash(key);
	if (map-&gt;buckets[h] != NULL) {		
		LINKEDLIST* list = map-&gt;buckets[h];
		node-&gt;next = list-&gt;startNode;
		list-&gt;startNode = node;
		list-&gt;size++;
	} else {
		LINKEDLIST* list = newLinkedList();
		map-&gt;buckets[h] = list;
		list-&gt;startNode = node;
		list-&gt;size++;				
	}
}

ELEMENT get(HASHMAP* map,ELEMENT key) {
	int h = hash(key);
	if (map-&gt;buckets[h] == NULL) {
		return NULL; //key bestaat niet
	} else {
		LINKEDLIST* list = map-&gt;buckets[h];
		int i;
		NODE* temp = list-&gt;startNode;
		for (i = 0; i &lt; list-&gt;size; i++) {
			if (!strcmp(temp-&gt;pair.key, key))
				return temp-&gt;pair.value;
			else
				temp = temp-&gt;next;						
		}
	}
	return NULL;
}

void removePair(HASHMAP* map, ELEMENT key) {
	int index = hash(key);
	LINKEDLIST *deList = map-&gt;buckets[index];
	NODE* nodePrev = deList-&gt;startNode;
	NODE* node = deList-&gt;startNode;
	if (node-&gt;next == NULL) { // bucket wordt leeg!
		map-&gt;buckets[index] = NULL;
		map-&gt;size--;
		free(node);
	} else {
		while (node-&gt;pair.key != key) {
			nodePrev = node;
			node = node-&gt;next;
		}
		NODE* temp = node;
		if (node == deList-&gt;startNode) {
			deList-&gt;startNode = node-&gt;next;
		} else {
			nodePrev-&gt;next = node-&gt;next;
		}
		free(temp);
		deList-&gt;size--;
		map-&gt;size--;
	}
}

void printMap(HASHMAP* map) {
	int i;	
	for (i = 0; i &lt; BUCKETS_SIZE; i++) {
		if (map-&gt;buckets[i] != NULL) {
			LINKEDLIST* theList = map-&gt;buckets[i];
			NODE *indexNode = theList-&gt;startNode;
			int j;
			for (j = 0; j &lt; theList-&gt;size; j++) {
				printf("%s: %s\t",indexNode-&gt;pair.key,indexNode-&gt;pair.value);
				indexNode = indexNode-&gt;next;
			}
			printf("\n");
		}
	}
}

void freeMemory(HASHMAP* map) {
	int i, j;
	for (i = 0; i &lt; BUCKETS_SIZE; i++) {		
		if (map-&gt;buckets[i] != NULL) {						
			NODE* temp = map-&gt;buckets[i]-&gt;startNode;
			for (j = 0; j &lt; map-&gt;buckets[i]-&gt;size; j++) {
				NODE* next = temp-&gt;next;
				free(temp);
				temp = next;
			}
		}
		free(map-&gt;buckets[i]);
	}
	free(map-&gt;buckets);
	free(map);
}

int main() {
	printf("----HashMap test----\n\n");
	
	printf("--Hash test--\n");
	char *str1 = "Test 1";
	char *str2 = "Test 2";
	char *str3 = "Test 3";
	printf("hash (%s) = %d\n", str1, hash(str1));
	printf("hash (%s) = %d\n", str2, hash(str2));
	printf("hash (%s) = %d\n", str3, hash(str3));
	
	printf("\n--Map test--\n");
	HASHMAP* map = newMap();
	put(map, str1, "0486/11.33.23");
	put(map, str2, "0486/10.20.30");
	put(map, str3, "0475/11.39.12");
	printMap(map);

	
	printf("\nFirst: %s: %s\n", str1, get(map, str1));
	printf("Second %s: %s\n", str2, get(map, str2));
	
	freeMemory(map);
	return 0;
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915/1</link>
        <pubDate>Thu, 08 May 2014 13:44:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542915-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-hashmap-free-memory/542915.rss">C HashMap free memory</source>
      </item>
  </channel>
</rss>
