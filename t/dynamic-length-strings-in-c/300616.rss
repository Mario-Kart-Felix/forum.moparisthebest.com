<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Dynamic length strings in C</title>
    <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616</link>
    <description>i have a bit of a problem trying to make dynamic length strings in C, my current way for doing things is :

[code]int add_char(char** arr, int len, char obj)

{

	(*arr) = realloc(*arr, sizeof(char) * (len + 1));

	(*arr)[len] = obj;

	(*arr)[len + 1] = 0;



	return len + 1;

}[/code]

and when i want to add to this string i would do :

[code]
char* etc = malloc(sizeof(char));
int len = 0;

len = add_char(&amp;etc, len, &#39;a&#39;);
len = add_char(&amp;etc, len, &#39;b&#39;);
len = add_char(&amp;etc, len, &#39;c&#39;);
len = add_char(&amp;etc, len, &#39;d&#39;);
...[/code]

while doing this from time to time my program segfaults for some reason, my guess is that realloc keeps the base memory address of the selected pointer so lets say i have a pointer pointing to 0 and it has 5 bytes allocated, and i have another pointer pointing to 7 with 3 bytes allocated

[code][h][e][l][l][o][ ][ ][a][b][c]
 0  1  2  3  4  5  6  7  8  9 [/code]

if i tried to reallocate the first pointer to 8 bytes it would overlap the second pointer instead of finding a free address with enough bytes for the allocation

anyways, how would i fix that so it doesnt crash?</description>
    
    <lastBuildDate>Wed, 09 Sep 2009 23:17:46 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“yakman, post:17, topic:300616”]moparisthebest could you post some of the studies, I’m intrested now.[/quote]why need studies when you have wikipedia? <a href="http://en.wikipedia.org/wiki/Dynamic_array#Geometric_expansion_and_amortized_cost" rel="nofollow noopener">http://en.wikipedia.org/wiki/Dynamic_array#Geometric_expansion_and_amortized_cost</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/19</link>
        <pubDate>Wed, 09 Sep 2009 23:17:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-19</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="17" data-topic="300616">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/yakman/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> yakman:</div>
<blockquote>
<p>moparisthebest could you post some of the studies, I’m intrested now.</p>
</blockquote>
</aside>
<p>I remember talking about it in a data structures class in college.  I don’t know where to start looking for the studies.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/18</link>
        <pubDate>Tue, 08 Sep 2009 15:00:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-18</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>moparisthebest could you post some of the studies, I’m intrested now.</p>
<p>extracts from java std api source files</p>
<p>ArrayList.java</p>
<pre><code class="lang-auto">    public void ensureCapacity(int minCapacity) {
        modCount++;
        int oldCapacity = elementData.length;
        if (minCapacity &gt; oldCapacity) {
            Object oldData[] = elementData;
            int newCapacity = (oldCapacity * 3)/2 + 1;
            if (newCapacity &lt; minCapacity)
                newCapacity = minCapacity;
            // minCapacity is usually close to size, so this is a win:
            elementData = Arrays.copyOf(elementData, newCapacity);
        }
    }</code></pre>
<p>Vector.java</p>
<pre><code class="lang-auto">    private void ensureCapacityHelper(int minCapacity) {
        int oldCapacity = elementData.length;
        if (minCapacity &gt; oldCapacity) {
            Object[] oldData = elementData;
            int newCapacity = (capacityIncrement &gt; 0) ?
                (oldCapacity + capacityIncrement) : (oldCapacity * 2);
            if (newCapacity &lt; minCapacity) {
                newCapacity = minCapacity;
            }
            elementData = Arrays.copyOf(elementData, newCapacity);
        }
    }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/17</link>
        <pubDate>Tue, 08 Sep 2009 14:23:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-17</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@xeez xeez`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xeez">@xeez</a> wrote:</p>
          <blockquote>
              <p>[quote=“Moparisthebest, post:14, topic:300616”]No, doubling actually is the best way to do it, many studies have been done on the subject.[/quote]If I recall correctly, I read that this is exactly how java’s ArrayList class works.</p>
<p>Nueb35, it doesn’t strictly have to double the amount of memory stored. You can set up an algorithm that would minimize the amount of memory to allocate, so that if your string holds 20000 characters, it doesn’t allocate 20000 bytes more since it may come to be unneeded.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/16</link>
        <pubDate>Mon, 07 Sep 2009 20:31:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-16</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>thats exactly how my dynamic list in c works:</p>
<p>[code]void add(list *l, void *obj)<br>
{<br>
if (l-&gt;index &gt;= l-&gt;max) {<br>
realloc((l-&gt;a), sizeof(void *) * (l-&gt;max * 2));<br>
l-&gt;max *= 2;<br>
}</p>
<pre><code>l-&gt;a[l-&gt;index++] = obj;
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/15</link>
        <pubDate>Mon, 07 Sep 2009 01:47:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-15</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>No, doubling actually is the best way to do it, many studies have been done on the subject.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/14</link>
        <pubDate>Mon, 07 Sep 2009 01:44:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-14</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@nueb35 Nueb35]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nueb35">@nueb35</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="12" data-topic="300616">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>If you are going to be adding characters to the string, you shouldn’t reallocate and copy the array every time, instead you should have a bigger array than you really need and increase it only when it needs increasing.  It is much more efficient that way (like how ArrayList does it)</p>
</blockquote>
</aside>
<p>i read something like that on an article i found on google, it said to double the array every time it needed to be increased, but i thought that would be wasteful</p>
<p><a class="mention" href="/u/zstars">@zstars</a> i tried printing the return value of realloc, and the program would crash before the printf was called, (meaning it crashed inside realloc)</p>
<p>ill test some of these things and see if it works</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/13</link>
        <pubDate>Mon, 07 Sep 2009 01:30:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-13</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>If you are going to be adding characters to the string, you shouldn’t reallocate and copy the array every time, instead you should have a bigger array than you really need and increase it only when it needs increasing.  It is much more efficient that way (like how ArrayList does it)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/12</link>
        <pubDate>Mon, 07 Sep 2009 01:21:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-12</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[code]<span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;</p>
<p>typedef struct _charbuf {<br>
char *buf;<br>
int pos;<br>
int len;<br>
} charbuf;</p>
<p>void charbuf_add(charbuf *pbuf, char c) {<br>
if (pbuf-&gt;pos == pbuf-&gt;len) {<br>
pbuf-&gt;buf = (char *) realloc(pbuf-&gt;buf, pbuf-&gt;pos + 1);<br>
pbuf-&gt;len++;<br>
}<br>
pbuf-&gt;buf[pbuf-&gt;pos++] = c;<br>
}</p>
<p>main() {<br>
charbuf buf;<br>
memset(&amp;buf, 0, sizeof(charbuf));</p>
<pre><code>buf.buf = (char *) malloc(1);
buf.len = 1;

int c;
for (c = 'a'; c &lt;= 'z'; ++c) {
    charbuf_add(&amp;buf, c);
}

charbuf_add(&amp;buf, 0);

printf("buf = %s\n", buf.buf);

return 0;
</code></pre>
<p>}<br>
[/code]</p>
<p>Zaboomafoo!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/11</link>
        <pubDate>Mon, 07 Sep 2009 00:24:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-11</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Most likely. Either that or realloc() returning 0 <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/10</link>
        <pubDate>Mon, 07 Sep 2009 00:23:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-10</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“zstars, post:8, topic:300616”][quote author=Nueb35 link=topic=396868.msg2947531#msg2947531 date=1252281661]<br>
…<br>
[/quote]<br>
-arr[len+1] refers to what would be the (len+2)th element of the array, and assigning to it is hence undefined.[/quote]wouldnt that be whats causing the segfault…</p>
<p>so yes, my assumption was correct:</p>
<aside class="quote no-group" data-post="2" data-topic="300616">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>i highly doubt what you say is your problem, but IF it is, then you can simply do something like this:</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/9</link>
        <pubDate>Mon, 07 Sep 2009 00:22:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-9</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>[quote=“Nueb35, post:1, topic:300616”]i have a bit of a problem trying to make dynamic length strings in C, my current way for doing things is :</p>
<p>[code]int add_char(char** arr, int len, char obj)</p>
<p>{</p>
<pre><code>(*arr) = realloc(*arr, sizeof(char) * (len + 1));

(*arr)[len] = obj;

(*arr)[len + 1] = 0;



return len + 1;
</code></pre>
<p>}[/code]</p>
<p>and when i want to add to this string i would do :</p>
<p>[code]<br>
char* etc = malloc(sizeof(char));<br>
int len = 0;</p>
<p>len = add_char(&amp;etc, len, ‘a’);<br>
len = add_char(&amp;etc, len, ‘b’);<br>
len = add_char(&amp;etc, len, ‘c’);<br>
len = add_char(&amp;etc, len, ‘d’);<br>
…[/code]</p>
<p>while doing this from time to time my program segfaults for some reason, my guess is that realloc keeps the base memory address of the selected pointer so lets say i have a pointer pointing to 0 and it has 5 bytes allocated, and i have another pointer pointing to 7 with 3 bytes allocated</p>
<p><code>[h][e][l][l][o][ ][ ][a][b][c]
 0  1  2  3  4  5  6  7  8  9 </code></p>
<p>if i tried to reallocate the first pointer to 8 bytes it would overlap the second pointer instead of finding a free address with enough bytes for the allocation</p>
<p>anyways, how would i fix that so it doesnt crash?[/quote]</p>
<p>-sizeof(char) is 1 by definition.<br>
-realloc can return NULL.<br>
-arr[len+1] refers to what would be the (len+2)th element of the array, and assigning to it is hence undefined.</p>
<p>Just FYI, this is what you would do in C++:</p>
<p>std::string str = “I heard u liek mudkip”;<br>
str += “z”;</p>
<p>Enjoy.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/8</link>
        <pubDate>Mon, 07 Sep 2009 00:17:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-8</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>compile with the -g3 flag and run it in gdb</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/7</link>
        <pubDate>Mon, 07 Sep 2009 00:16:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-7</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>frank_, that wasnt his question</p>
<p>his question was concerning segmentation faults due to reallocating the same memory block over and over again</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/6</link>
        <pubDate>Mon, 07 Sep 2009 00:14:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-6</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>i didnt read anything, but make a struct that contains the char* and and int for the length</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/5</link>
        <pubDate>Mon, 07 Sep 2009 00:13:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-5</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“oksuper_, post:3, topic:300616”]You know there is something called learning a language.[/quote]was that directed towards me?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/4</link>
        <pubDate>Mon, 07 Sep 2009 00:12:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-4</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>You know there is something called learning a language.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/3</link>
        <pubDate>Mon, 07 Sep 2009 00:11:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-3</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>i highly doubt what you say is your problem, but IF it is, then you can simply do something like this:</p>
<pre><code class="lang-auto">char *str = malloc(sizeof(char) * 10);
void *v = malloc(sizeof(char) * 3);
memmove(str + 9, v, sizeof(char) * 3);</code></pre>
<p>as you can see, instead of reallocating the memory block, i allocated a seperate block of memory that has no connections with the original one, and simply moved the new block of memory to the old one’s. in order so it did not replace the original block’s memory, however, i grabbed the memory address of the original block and added ‘9’ to it so it would start the copying from the 10th index</p>
<p>edit: by the way, im not 100% sure if it would work though, seeing as how ive never had this problem</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/2</link>
        <pubDate>Mon, 07 Sep 2009 00:05:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-2</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
      <item>
        <title>Dynamic length strings in C</title>
        <dc:creator><![CDATA[@nueb35 Nueb35]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nueb35">@nueb35</a> wrote:</p>
          <blockquote>
              <p>i have a bit of a problem trying to make dynamic length strings in C, my current way for doing things is :</p>
<p>[code]int add_char(char** arr, int len, char obj)</p>
<p>{</p>
<pre><code>(*arr) = realloc(*arr, sizeof(char) * (len + 1));

(*arr)[len] = obj;

(*arr)[len + 1] = 0;



return len + 1;
</code></pre>
<p>}[/code]</p>
<p>and when i want to add to this string i would do :</p>
<p>[code]<br>
char* etc = malloc(sizeof(char));<br>
int len = 0;</p>
<p>len = add_char(&amp;etc, len, ‘a’);<br>
len = add_char(&amp;etc, len, ‘b’);<br>
len = add_char(&amp;etc, len, ‘c’);<br>
len = add_char(&amp;etc, len, ‘d’);<br>
…[/code]</p>
<p>while doing this from time to time my program segfaults for some reason, my guess is that realloc keeps the base memory address of the selected pointer so lets say i have a pointer pointing to 0 and it has 5 bytes allocated, and i have another pointer pointing to 7 with 3 bytes allocated</p>
<p><code>[h][e][l][l][o][ ][ ][a][b][c]
 0  1  2  3  4  5  6  7  8  9 </code></p>
<p>if i tried to reallocate the first pointer to 8 bytes it would overlap the second pointer instead of finding a free address with enough bytes for the allocation</p>
<p>anyways, how would i fix that so it doesnt crash?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616/1</link>
        <pubDate>Mon, 07 Sep 2009 00:01:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-300616-1</guid>
        <source url="https://forum.moparisthebest.com/t/dynamic-length-strings-in-c/300616.rss">Dynamic length strings in C</source>
      </item>
  </channel>
</rss>
