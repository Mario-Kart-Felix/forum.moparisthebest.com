<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>More C++ Tutorials!</title>
    <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868</link>
    <description>For reasons not explained here, variables can only store finite numbers. Suppose that the size of a particular data type, that we&#39;ll call a gorb, is 1 byte. That means that gorbs can only represent 28*1 = 28 = 256 distinct values. So, gorbs might be able to store only the numbers between 0 and 255 (inclusive). Any number that you tried to store in a gorb which was smaller than 0, or larger than 255, would not be stored correctly; it would be stored as one of the values between 0 and 255. However, maybe you want to be able to store positive and negative numbers in gorbs, in which case you&#39;d only be able to store 128 negative numbers and 128 positive numbers. Since we need to be able to store 0 also, you might decide that the range of values for a gorb is -128 to 127. 

We&#39;ve already learned about two different data types (not including &quot;gorbs&quot;!): int and float. What are the sizes of these data types, and what are the limits on the kinds of values that they can store? We just saw that a data type whose size is 1 byte can store 256 distinct values. Data types of size 2 bytes can store 28*2 = 216 = 65536 different values. Using the same formula, we determine that data types of size 4 bytes can store 28*4 = 232 = 4,294,967,296. 

Unfortunately, the size of data types like int and float are not standard across all systems. The size of an int depends on your operating system and your hardware. Here are some typical values for ints and floats, along with some other important data types. 

type typical size description 

--------------------------------------------------------------------------------
 
short  2 bytes stores a short (i.e., small) integer 
int  4 bytes stores an integer 
long  4 bytes stores a long (i.e., large) integer 
float  4 bytes stores a floating-point number 
double  8 bytes stores a &quot;double-precision&quot; floating-point number 

A more complete listing of variable types can be found in Appendix B. 

[u][b]When to Cast[/b][/u]
Casting a variable is a complicated name for a simple concept. When you cast a variable from one type to another, all you are doing is telling the computer to use a different type to store the variable. Why would you need (or want) to do this? Let&#39;s say you declared a variable of type short. In most cases, that would mean that the largest positive value you could store would be 32,767. But somewhere in your program, you realize that you&#39;re going to have to do a calculation which could increase the value over this maximum. Perhaps you are computing very large Pythagorean triplets. To calculate the value of c (the hypotenuse), you need to take the square root of the quantity a2 + b2. But what if a or b is very large? Then squaring that number will make it much, much larger -- and if the value becomes bigger than 32,767 your values will not be what you expected (if you had used a short to store a or b. Remember, a short can only store the values between -32,768 and +32,767, so if you try to store a number out of this range, your data will be incorrect! 

So, the solution is to cast. We can cast the numbers to a larger data type, such as an int or a long, for the purposes of the calculation -- and then we can cast them back to a short when we are done, since the final value for c will probably be small enough to be stored in a short. 

This is a somewhat trivial example, since in this case you could store the numbers in ints or longs from the beginning and not worry about it! A more useful example might be if you have a number which represents an average. You&#39;ll probably want to represent the number with a floating-point type like a float or a double so that it is accurate while you are computing it (otherwise you&#39;d only be able to store a value like &quot;26&quot; instead of &quot;26.3141885&quot;). Let&#39;s say that you want to display the value in a table, yet the table would look cluttered if you displayed &quot;26.3141885&quot;, so you decide to simply display the integer portion, 26. You can cast the float to an int and then display the int in the table -- since ints can&#39;t store floating-point numbers, the decimal portion of &quot;26.3141885&quot; will be truncated and you will be left with &quot;26&quot;. 

[u][b]How to Cast[/b][/u]
Casting in C++ is easy. Let&#39;s say that you have a float storing a number like &quot;26.3141885&quot;, and you want to have an int storing the integer portion instead. Here&#39;s how to do it: 

int GetAverage() {

// assume that regularAverage and specialAverage store two floats
  float totalAverage = regularAverage + specialAverage;

// cast totalAverage to an int
  int truncatedAverage = (int) totalAverage;

// return the truncated value
  return truncatedAverage;
}

There&#39;s a little bit of syntax that you haven&#39;t seen before, but the key part to notice is the line of code that reads int truncatedAverage = (int) totalAverage. What we&#39;re doing here is taking a float, totalAverage, which stores some kind of decimal number (like 82.41832), and getting rid of the &quot;.41832&quot; part by casting it to an int. That works because the int is only capable of storing integers, so it simply stores the integer portion of totalAverage</description>
    
    <lastBuildDate>Thu, 16 Oct 2008 20:01:44 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@tL tL]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tl">@tL</a> wrote:</p>
          <blockquote>
              <p>Well now that i have the power to do so, i will lock this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/7</link>
        <pubDate>Thu, 16 Oct 2008 20:01:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-7</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>Mopar fixed the ban system, why don’t the (incompetent) staff start using it?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/6</link>
        <pubDate>Sat, 11 Oct 2008 03:22:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-6</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“skiller noob1, post:3, topic:235868”][quote author=Thug-life link=topic=311112.msg2481729#msg2481729 date=1223583035]<br>
Why bother copy and pasting stuff we can find for our self?<br>
[/quote]<br>
Most people are too lazy.[/quote]Go away.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/5</link>
        <pubDate>Fri, 10 Oct 2008 02:37:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-5</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@kaza Kaza]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kaza">@kaza</a> wrote:</p>
          <blockquote>
              <p>Wouldn’t this go in general programming ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/4</link>
        <pubDate>Thu, 09 Oct 2008 20:35:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-4</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@skiller_noob1 skiller noob1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/skiller_noob1">@skiller_noob1</a> wrote:</p>
          <blockquote>
              <p>Most people are too lazy.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/3</link>
        <pubDate>Thu, 09 Oct 2008 20:16:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-3</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@tL tL]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tl">@tL</a> wrote:</p>
          <blockquote>
              <p>Why bother copy and pasting stuff we can find for our self?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/2</link>
        <pubDate>Thu, 09 Oct 2008 20:10:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-2</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
      <item>
        <title>More C++ Tutorials!</title>
        <dc:creator><![CDATA[@skiller_noob1 skiller noob1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/skiller_noob1">@skiller_noob1</a> wrote:</p>
          <blockquote>
              <p>For reasons not explained here, variables can only store finite numbers. Suppose that the size of a particular data type, that we’ll call a gorb, is 1 byte. That means that gorbs can only represent 28*1 = 28 = 256 distinct values. So, gorbs might be able to store only the numbers between 0 and 255 (inclusive). Any number that you tried to store in a gorb which was smaller than 0, or larger than 255, would not be stored correctly; it would be stored as one of the values between 0 and 255. However, maybe you want to be able to store positive and negative numbers in gorbs, in which case you’d only be able to store 128 negative numbers and 128 positive numbers. Since we need to be able to store 0 also, you might decide that the range of values for a gorb is -128 to 127.</p>
<p>We’ve already learned about two different data types (not including “gorbs”!): int and float. What are the sizes of these data types, and what are the limits on the kinds of values that they can store? We just saw that a data type whose size is 1 byte can store 256 distinct values. Data types of size 2 bytes can store 28<em>2 = 216 = 65536 different values. Using the same formula, we determine that data types of size 4 bytes can store 28</em>4 = 232 = 4,294,967,296.</p>
<p>Unfortunately, the size of data types like int and float are not standard across all systems. The size of an int depends on your operating system and your hardware. Here are some typical values for ints and floats, along with some other important data types.</p>
<p>type typical size description</p>
<hr>
<p>short  2 bytes stores a short (i.e., small) integer<br>
int  4 bytes stores an integer<br>
long  4 bytes stores a long (i.e., large) integer<br>
float  4 bytes stores a floating-point number<br>
double  8 bytes stores a “double-precision” floating-point number</p>
<p>A more complete listing of variable types can be found in Appendix B.</p>
<p><span class="bbcode-u"><span class="bbcode-b">When to Cast</span></span><br>
Casting a variable is a complicated name for a simple concept. When you cast a variable from one type to another, all you are doing is telling the computer to use a different type to store the variable. Why would you need (or want) to do this? Let’s say you declared a variable of type short. In most cases, that would mean that the largest positive value you could store would be 32,767. But somewhere in your program, you realize that you’re going to have to do a calculation which could increase the value over this maximum. Perhaps you are computing very large Pythagorean triplets. To calculate the value of c (the hypotenuse), you need to take the square root of the quantity a2 + b2. But what if a or b is very large? Then squaring that number will make it much, much larger – and if the value becomes bigger than 32,767 your values will not be what you expected (if you had used a short to store a or b. Remember, a short can only store the values between -32,768 and +32,767, so if you try to store a number out of this range, your data will be incorrect!</p>
<p>So, the solution is to cast. We can cast the numbers to a larger data type, such as an int or a long, for the purposes of the calculation – and then we can cast them back to a short when we are done, since the final value for c will probably be small enough to be stored in a short.</p>
<p>This is a somewhat trivial example, since in this case you could store the numbers in ints or longs from the beginning and not worry about it! A more useful example might be if you have a number which represents an average. You’ll probably want to represent the number with a floating-point type like a float or a double so that it is accurate while you are computing it (otherwise you’d only be able to store a value like “26” instead of “26.3141885”). Let’s say that you want to display the value in a table, yet the table would look cluttered if you displayed “26.3141885”, so you decide to simply display the integer portion, 26. You can cast the float to an int and then display the int in the table – since ints can’t store floating-point numbers, the decimal portion of “26.3141885” will be truncated and you will be left with “26”.</p>
<p><span class="bbcode-u"><span class="bbcode-b">How to Cast</span></span><br>
Casting in C++ is easy. Let’s say that you have a float storing a number like “26.3141885”, and you want to have an int storing the integer portion instead. Here’s how to do it:</p>
<p>int GetAverage() {</p>
<p>// assume that regularAverage and specialAverage store two floats<br>
float totalAverage = regularAverage + specialAverage;</p>
<p>// cast totalAverage to an int<br>
int truncatedAverage = (int) totalAverage;</p>
<p>// return the truncated value<br>
return truncatedAverage;<br>
}</p>
<p>There’s a little bit of syntax that you haven’t seen before, but the key part to notice is the line of code that reads int truncatedAverage = (int) totalAverage. What we’re doing here is taking a float, totalAverage, which stores some kind of decimal number (like 82.41832), and getting rid of the “.41832” part by casting it to an int. That works because the int is only capable of storing integers, so it simply stores the integer portion of totalAverage</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/more-c-tutorials/235868/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/more-c-tutorials/235868/1</link>
        <pubDate>Thu, 09 Oct 2008 19:56:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-235868-1</guid>
        <source url="https://forum.moparisthebest.com/t/more-c-tutorials/235868.rss">More C++ Tutorials!</source>
      </item>
  </channel>
</rss>
