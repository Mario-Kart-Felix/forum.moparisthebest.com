<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Item Colorspace</title>
    <link>https://forum.moparisthebest.com/t/item-colorspace/428267</link>
    <description>Last night I decided to tinker with the client a bit, and decided that I should work on solving one of the most confusing aspects of Item; how they are rendered in the game world. 

The color data is read as a short; which was a flag to me because I had never seen non-RGB colors used in an application like this before. A short is made up of two bytes, usually named the high and low bytes.

I usually like dealing with hexadecimal numbers, because it shows the structure of the data more easily. This was confirmed when looking at the various colors that are used. I started with &quot;template&quot; items to view the relations.

A &quot;template&quot; item is one that is recolored automatically by the client. One example of this is the Bronze bar (or any bronze item really).

The color of &quot;bronze&quot; as set by the client is 0x3D (or 61). Now since I like working with &quot;neat&quot; numbers, I added some 0&#39;s before it to make the color look like

[code]0x003D[/code]

because it shows the values for both of the bytes that are being used.

Next, I decided to see what colors I could use. At first I thought that the color was a gradient map, having one byte be the start color and one byte be the end color. I was quickly proved wrong when trying to make the bronze bar go from red to blue. Seeing this error, I was very confused as to how the colors are encoded. Usually they are 3-byte values, one for each red, green, and blue; but since there are only 2 bytes I decided to look into the different types of colorspaces that have been used.

After many attempts, the one that comes closest to the scheme I had seen was the 3-3-2 RGB color map. It is made up of 256 different colors, having 3 bits of red, 3 bits of green, and 2 bits of blue. One would think that this reduces the amount of colors seen, but I discovered that green stands out more than blue, and that the eye can &quot;fake&quot; some blue colors to make things &quot;pop out&quot; more.

Trying this scheme, the results were not as I had expected. The colors were close to my expectations but were &quot;off&quot; by an amount not likely to be caused by the client. Not sure what else to do, I though that perhaps the color is created little-endian. I was right.

So instead of the color being
[code]rrrgggbb[/code]

it was actually
[code]bbgggrrr[/code]

So I plugged some more values in, trying arbitrary colors, and it worked just about every time. I thought that I had cracked the code to the colors. I was wrong. I had completely forgotten about the low byte. So, it was back to the drawing board.

The true purpose of the low byte still escapes me, and tinkering with it has some... unexpected results. Through trial and error, the closes thing that I can describe it as is &quot;brightness&quot;. Perhaps it will be easier to understand if I show the binary.

ox039C is the color-code for dragon items, so I decided to start there (since it has an unusual low byte value).
[code]
00000011 10011100
[/code]

As you can see, the high byte contains 011 as the red value, making the item predominantly red. Through tinkering with the low byte to known values (like 0x00 for black and 0xFF for white), the results were only half as expected. In setting the value to 0x7F I got a red-white gradient on dragon items. Setting it to 0x80 (the next highest value) make the color very dark red. This was the first indication that it might be something to do with brightness. After setting the value from 0x7F to 0xFF and viewing the color difference, it definitely got &quot;brighter&quot;.

However, the anomalies started to appear at this point. When setting the high (color) byte to 0xFF(what one would expect to be white), and setting the low byte to 0xFF, one would expect the item to be completely white. This however was not the case, as there was a faint red tint to the item.

In seeing this change, my original theory on the 332 RGB was proven flawed. I am currently looking into other colorspaces (like perhaps 4-bit RGB) to see if I can identify the proper colorspace.

I know that this is not complete, and it is an ongoing effort by myself to better understand the colors used in Items. I will update this thread each time I modify the existing theory.</description>
    
    <lastBuildDate>Fri, 06 Jan 2012 04:46:38 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/item-colorspace/428267.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Item Colorspace</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“Metho D, post:3, topic:428267”]I think you’re looking for HSL color space. The colors are packed in the following format, I believe:</p>
<pre><code class="lang-auto"></code></pre>
<p>Man, I wish that I had checked back in earlier, I just spent the last hour testing each one &gt;.&lt;</p>
<p>It is confirmed, the colorspace is HSL.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/item-colorspace/428267/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/item-colorspace/428267/4</link>
        <pubDate>Fri, 06 Jan 2012 04:46:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428267-4</guid>
        <source url="https://forum.moparisthebest.com/t/item-colorspace/428267.rss">Item Colorspace</source>
      </item>
      <item>
        <title>Item Colorspace</title>
        <dc:creator><![CDATA[@Metho_D Method]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/metho_d">@Metho_D</a> wrote:</p>
          <blockquote>
              <p>I think you’re looking for the HSL color space. The colors are packed in the following format, I believe:</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/item-colorspace/428267/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/item-colorspace/428267/3</link>
        <pubDate>Fri, 06 Jan 2012 03:35:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428267-3</guid>
        <source url="https://forum.moparisthebest.com/t/item-colorspace/428267.rss">Item Colorspace</source>
      </item>
      <item>
        <title>Item Colorspace</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>You could probably use DatMaker to convert an item to metasequoia and view the material label in there. Might help you, might not. Pretty sure they correspond like how you were saying. For example,  iirc, the material for bronze is labeled mat61.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/item-colorspace/428267/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/item-colorspace/428267/2</link>
        <pubDate>Fri, 06 Jan 2012 01:56:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428267-2</guid>
        <source url="https://forum.moparisthebest.com/t/item-colorspace/428267.rss">Item Colorspace</source>
      </item>
      <item>
        <title>Item Colorspace</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Last night I decided to tinker with the client a bit, and decided that I should work on solving one of the most confusing aspects of Item; how they are rendered in the game world.</p>
<p>The color data is read as a short; which was a flag to me because I had never seen non-RGB colors used in an application like this before. A short is made up of two bytes, usually named the high and low bytes.</p>
<p>I usually like dealing with hexadecimal numbers, because it shows the structure of the data more easily. This was confirmed when looking at the various colors that are used. I started with “template” items to view the relations.</p>
<p>A “template” item is one that is recolored automatically by the client. One example of this is the Bronze bar (or any bronze item really).</p>
<p>The color of “bronze” as set by the client is 0x3D (or 61). Now since I like working with “neat” numbers, I added some 0’s before it to make the color look like</p>
<pre><code class="lang-auto"></code></pre>
<p>because it shows the values for both of the bytes that are being used.</p>
<p>Next, I decided to see what colors I could use. At first I thought that the color was a gradient map, having one byte be the start color and one byte be the end color. I was quickly proved wrong when trying to make the bronze bar go from red to blue. Seeing this error, I was very confused as to how the colors are encoded. Usually they are 3-byte values, one for each red, green, and blue; but since there are only 2 bytes I decided to look into the different types of colorspaces that have been used.</p>
<p>After many attempts, the one that comes closest to the scheme I had seen was the 3-3-2 RGB color map. It is made up of 256 different colors, having 3 bits of red, 3 bits of green, and 2 bits of blue. One would think that this reduces the amount of colors seen, but I discovered that green stands out more than blue, and that the eye can “fake” some blue colors to make things “pop out” more.</p>
<p>Trying this scheme, the results were not as I had expected. The colors were close to my expectations but were “off” by an amount not likely to be caused by the client. Not sure what else to do, I though that perhaps the color is created little-endian. I was right.</p>
<p>So instead of the color being</p>
<pre><code class="lang-auto"></code></pre>
<p>it was actually</p>
<pre><code class="lang-auto"></code></pre>
<p>So I plugged some more values in, trying arbitrary colors, and it worked just about every time. I thought that I had cracked the code to the colors. I was wrong. I had completely forgotten about the low byte. So, it was back to the drawing board.</p>
<p>The true purpose of the low byte still escapes me, and tinkering with it has some… unexpected results. Through trial and error, the closes thing that I can describe it as is “brightness”. Perhaps it will be easier to understand if I show the binary.</p>
<p>ox039C is the color-code for dragon items, so I decided to start there (since it has an unusual low byte value).</p>
<pre><code class="lang-auto">00000011 10011100</code></pre>
<p>As you can see, the high byte contains 011 as the red value, making the item predominantly red. Through tinkering with the low byte to known values (like 0x00 for black and 0xFF for white), the results were only half as expected. In setting the value to 0x7F I got a red-white gradient on dragon items. Setting it to 0x80 (the next highest value) make the color very dark red. This was the first indication that it might be something to do with brightness. After setting the value from 0x7F to 0xFF and viewing the color difference, it definitely got “brighter”.</p>
<p>However, the anomalies started to appear at this point. When setting the high (color) byte to 0xFF(what one would expect to be white), and setting the low byte to 0xFF, one would expect the item to be completely white. This however was not the case, as there was a faint red tint to the item.</p>
<p>In seeing this change, my original theory on the 332 RGB was proven flawed. I am currently looking into other colorspaces (like perhaps 4-bit RGB) to see if I can identify the proper colorspace.</p>
<p>I know that this is not complete, and it is an ongoing effort by myself to better understand the colors used in Items. I will update this thread each time I modify the existing theory.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/item-colorspace/428267/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/item-colorspace/428267/1</link>
        <pubDate>Fri, 06 Jan 2012 00:02:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428267-1</guid>
        <source url="https://forum.moparisthebest.com/t/item-colorspace/428267.rss">Item Colorspace</source>
      </item>
  </channel>
</rss>
