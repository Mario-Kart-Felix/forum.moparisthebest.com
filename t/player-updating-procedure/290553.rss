<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Player Updating Procedure</title>
    <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553</link>
    <description>
[ul][size=99pt]I AM SUPER_[/size]

[center][size=7pt]The Player Updating process of #317[/size][/center]

    The player updating process consists of 4 parts:
	  [list][li]a) Our player movement updates[/li]
	  [li]b) Other player movement updates[/li]
	  [li]c) Player list updating[/li]
          [li]c.a) Apperance updating[/li]
          [li]c.b) Location updating[/li]
	  [li]d) Player update block flag-based updates[/li][/list]


[center][size=6pt]Our player movement updates[/size][/center]

	The client begins by reading 1 bit. This bit tells the client whether or not it is currently updating
&#39;our player&#39;, or the player the client is controlling. If it&#39;s not updating our player, it exits and goes onto step b.
If it is, it then reads 2 bits. The value is called the [b]movement update type[/b]. There are 4 recognized movement update types:
[list]
[li]0[/li]
[li]1[/li]
[li]2[/li]
[li]3[/li]
[/list]

    Type 0 basically tells the client there is nothing to update for our player, just add its index to the local updating list.

    Type 1 tells the client you moved in one direction. The client reads 3 bits, which represents the direction you moved in, and then
1 bit, which states whether further update is required. If so, it adds it to the updating list. This is used in [i]walking[/i].

    Type 2 functions in much of the same way as its previous, only this time it reads two 3 bit values. The first represents the player&#39;s last
direction, and the second it&#39;s current direction. Trailing behind it is also the 1 bit &#39;update required&#39; flag as type 1. This is used in [i]running[/i].

    Type 3 on the other hand is different. It reads in 2 bits which represents our player&#39;s [b]plane[/b], or its level of height, in the game world.
Only 0-3 inclusive are appropriate planes supported by the client. It then reads 1 bit, which describes whether or not to clear the 
awaiting-waypoint queue, basically to stop client from further queued stepping, such as used in teleporting.
After this, it reads the &#39;update required&#39; bit, and checks to see if further update is required. Directly after, it reads two 7 bit
quantities, representing the new relative X and relative Y coordinates of our player to our current map region&#39;s origin. It then sets our players
position to the plane, x, and y positions as told to.

[center][size=6pt]Other player movement updates[/size][/center]

    The client begins by reading an 8 bit value telling the client how many players there are to update. It then enters a loop
for each player there is to update.

    Inside this loop, the client reads 1 bit. This is the movement update required flag. If the flag is 0, it
sets the current updating player&#39;s last update cycle time to the current game logic loop cycle time, and adds the player to the local
player list. If the flag is not 0, it then reads the [b]movement update type[/b], which is a 2 bit quantity. The following known types are:
[list]
[li]0[/li]
[li]1[/li]
[li]2[/li]
[li]3[/li]
[/list]

    If the type is 0, the client updates the current player&#39;s last update cycle time, adds the current player to the local player list, and adds it to the updating list.

    If the type is 1, the client updates the current player&#39;s last update cycle time and adds the current player to the local player list as well, but also
reads in 3 bit quantity. This represents the current player&#39;s direction it [i]walked[/i] to. It then reads the a 1 bit value that specifies whether or
not to add the player to the updating list.

    If the type is 2, the client does the exact same thing as the type 2 update, except it reads in two of the 3 bit quantities. The first represents the current player&#39;s
last direction, and the second its current direction [i]running[/i].

    And lastly, if the type is 3, it only adds the player to the needing-update list, or so believed. Type 3 is not well known.

[center][size=6pt]Player list updating[/size][/center]

    The next step in the player updating procedure is the player list updating, or where the client recieves data on every player in its local list,
such as appearance and location relative to ours. The client loops through a process for each player in the updating.

    The client reads an 11 bit quantity from the buffer, which is the next player in the updated list to be informed about. The clietn then checks
if it has a cached buffer for that player&#39;s updating, and if it does, it updates the player appearance.

[center][size=5pt]Appearance updating[/size][/center]

    Appearance updating starts off by first reading an unsigned byte that represents the current player&#39;s gender. Then it reads another unsigned byte
that represents the player&#39;s over-head icon id. This is used with prayer icons above heads. Next, a loop occurs 12 times to read equipment data.

    In the loop, the client reads an unsigned byte that is the equipment slot&#39;s item id high byte. If it is 0, the player&#39;s equpment slot has no item.
If it is not 0, another unsigned byte is read the merged with the previous to create the equipment&#39;s item id. If the id is 65535 (written as a -1 signed short),
then the player&#39;s appearance is that of an NPC. The client reads in an unsigned short representing the NPC&#39;s id and sets the player&#39;s definition to that
NPC&#39;s.

    After the equipment loop, it loops 5 times, once for each type of coloured body part. In each loop, the client reads an unsigned short and assigns it
as the color of the current loop idx (which represents the body part).

    Finally, after the color loop, the client reads 7 unsigned shorts representing animation indices; the animations belong to:
[list]
[li] Standing still[/li]
[li] Turning while standing[/li]
[li] Walking[/li]
[li] Turning around (backwards)[/li]
[li] Turning a quarter-way clockwise[/li]
[li] Turning a quarter-way counter clockwise[/li]
[li] Running
[/list]

    After these animation indices are read, a long representing the player&#39;s name is read, an unsigned byte representing the combat level, and an unsigned short representing
the players skill level (for things where players arent ranked by levels, such as where it states &#39;&lt;player name&gt; (skill &lt;skill&gt;)&#39; as an action menu text).

[center][size=5pt]Location updating[/size][/center]

    After the appearance updating, the client starts to update that player&#39;s location relative to our player. The player is added to the local player list
and it&#39;s last update cycle time. It then reads a 1 bit quantity that defines whether or not the client has a chunk in the player update block list. If it does,
it adds it to the updating list. The next bit states whether or not to discard the awaiting-waypoint queue, such as when teleporting. It then reads to 5 bit values that determine the players
relative X and Y coordinates to our player. The local player area is 16x16, so if the delta of the two coordinates is &gt; 15, 32 is subtracted from it to signify
the player is on the other side of ours. The client then sets the player&#39;s position, ending the player list updating process.

[center][size=6pt]Update block flag-based updating[/size][/center]

    The following is what most people think of when they say &#39;update mask&#39; and &#39;update flag&#39;. This process of the updating procedure is very important. It begins with looping
through ALL players in the local player update list, reading an unsigned byte which from now on will be called the [b]update flag[/b]. All further updates are seen to be &#39;included&#39;
by comparing a bitwise mask to this flag. If the flag has the bits for 0x40 all on, this signifies that the flag was too large for a simple unsigned byte and reads in another unsigned byte,
which it uses as the upper unsigned byte, therefore the update flag is an unsigned little-endian short. The client then passes off the data to a helper method
which processes all updates this flag signifies.

    Inside this method, many different bitwise masks are compared to the player&#39;s flag, and if the mask is set, logic is performed. These masks are frequently called
[b]update masks[/b]. A list of player update masks are below.
[list]
[li]0x400[/li]
[li]0x100[/li]
[li]0x8[/li]
[li]0x4[/li]
[li]0x80[/li]
[li]0x1[/li]
[li]0x10[/li]
[li]0x2[/li]
[li]0x20[/li]
[li]0x200[/li]
[/list]

[center][size=5pt]0x400[/size][/center]
    Not much is known about this mask, other than that the last value read is a sprite direction id. If you have discovered it, please email or message me via MSN at [email]_cake@live.com[/email] and explain
what the values are!

[center][size=5pt]0x100[/size][/center]
    The 0x100 mask is responsible for player graphics updating. The data associated is a little-endian unsigned short which represents the graphics id, and an int which is the graphics delay.

[center][size=5pt]0x8[/size][/center]
    Animations are handled by the 0x8 mask. The payload for this update is a little-endian unsigned short that is the animation id, and an unsigned inversed byte which states the animation&#39;s
delay.

[center][size=5pt]0x4[/size][/center]
    The beloved 0x4 mask takes care of forced player text that is only displayed above the player&#39;s model. The only data associated with this is a jagex ASCII string with a terminator of 10.

[center][size=5pt]0x80[/size][/center]
    Unlike the previous, the 0x80 mask handles normal player chat text. The client will read a little-endian unsigned short which holds chat text attributes. It holds the text color
and chat effects. Next, the client reads an unsigned byte which states the player&#39;s priveleges (normal player, player moderator, moderator, staff) to give the chatter&#39;s name
a crown. Right behind it trails an unsigned inversed byte that gives chat text length in bytes. Trailing afterwards is dictionary-compressed chat text. All chat text characters become indexes into
a valid character table and are written as nibbles (4 bit quantities).

[center][size=5pt]0x1[/size][/center]
    Updating the player&#39;s current interacting-entity is done via mask 0x1. The entity id is written as a little-endian unsigned short.

[center][size=5pt]0x10[/size][/center]
    The 0x10 mask updates appearance of the player in exact same way as in updating player list. Only difference is that appearance is updated from a set-sized buffer filled from the current buffer.
An unsigned inversed byte is read first which describes appearance buffer size, and the buffer is filled.

[center][size=5pt]0x2[/size][/center]
    Facing coordinate updating is signified by the 0x2 mask. The player&#39;s facing-towards X and Y are set to read values; specifically, an unsigned lower-inverted short and little-endian unsigned short, respectively.

[center][size=5pt]0x20[/size][/center]
    Notifying client&#39;s of a player&#39;s health is done via the 0x20 mask. The hitpoint damage done to the player is sent as an unsigned byte, followed by the hit type as a positive inverted byte.
The player&#39;s current and max health are read as an unsigned inverted byte and unsigned byte, respectively.

[center][size=5pt]0x200[/size][/center]
    The 0x200 mask acts in the same way as the 0x20 mask and is most likely associated with special attacks from weapons that have the ability to hit twice at the same time. Hitpoint damage is
an unsigned byte, the hit type an unsigned inverted byte, and the current and maximum health being an unsigned byte and unsigned inverted byte, respectively.

After the client processes every single player in the update player list, it ends player updating.[/ul]</description>
    
    <lastBuildDate>Sat, 19 Mar 2011 21:50:43 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Kaex Kaex]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kaex">@Kaex</a> wrote:</p>
          <blockquote>
              <p>Already knew all this, but it’ll help people.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/21</link>
        <pubDate>Sat, 19 Mar 2011 21:50:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-21</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@filthjr filthjr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/filthjr">@filthjr</a> wrote:</p>
          <blockquote>
              <p>how can this not be common knowledge when every server + the client has this? people just don’t know how to look…</p>
<p>[code]# Standing still</p>
<h1>Turning while standing</h1>
<h1>Walking</h1>
<h1>Turning around (backwards)</h1>
<h1>Turning a quarter-way clockwise</h1>
<h1>Turning a quarter-way counter clockwise</h1>
<h1>Running[/code]</h1>
<p>3 of those are actually walk backwards, strafe left, and strafe right</p>
<p>also the update with mask 0x400 is just a forced movement mask with a specified speed (so you can break limit of one/two movements per cycle) if people didn’t figure this out already…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/20</link>
        <pubDate>Sat, 19 Mar 2011 21:38:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-20</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Fuse Fuse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fuse">@Fuse</a> wrote:</p>
          <blockquote>
              <p>Wow, not even 1 full page of comments for something as insightful as this. No wonder it’s not common knowledge already - it’s not appreciated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/19</link>
        <pubDate>Sat, 19 Mar 2011 06:49:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-19</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>Bumped because people need to see this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/18</link>
        <pubDate>Sat, 19 Mar 2011 06:26:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-18</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@pauline pauline]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pauline">@pauline</a> wrote:</p>
          <blockquote>
              <p>Very useful. Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/17</link>
        <pubDate>Tue, 10 Aug 2010 01:49:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-17</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>blimp</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/16</link>
        <pubDate>Tue, 04 Aug 2009 17:14:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-16</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@juliepacker juliepacker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/juliepacker">@juliepacker</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="5" data-topic="290553">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/blakeman8192/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> blakeman8192:</div>
<blockquote>
<p>sumthin nice</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/15</link>
        <pubDate>Mon, 03 Aug 2009 05:41:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-15</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“ry60003333, post:13, topic:290553”]What is the best way to detect close players and construct the update packet?</p>
<p>Right now I’ve divided the map into ‘regions’ and then it scans any regions the player can see on the map for players. This works great if you have 2000 players online around the map, but if you have 2000 players in one region its the same as just looping through all the online players.</p>
<p>Graham said that his new framework does some caching of parts of the packet for each player - but wouldn’t you still have to loop through each player?[/quote]</p>
<p>If no updates occurred it is possible to simply cache the previous block and resend that. But note, I highly doubt with 200+ in one region that for each player, a player within view of them wouldn’t of needed an update.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/14</link>
        <pubDate>Sun, 02 Aug 2009 22:45:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-14</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@ry60003333 ry60003333]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ry60003333">@ry60003333</a> wrote:</p>
          <blockquote>
              <p>What is the best way to detect close players and construct the update packet?</p>
<p>Right now I’ve divided the map into ‘regions’ and then it scans any regions the player can see on the map for players. This works great if you have 2000 players online around the map, but if you have 2000 players in one region its the same as just looping through all the online players.</p>
<p>Graham said that his new framework does some caching of parts of the packet for each player - but wouldn’t you still have to loop through each player?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/13</link>
        <pubDate>Sun, 02 Aug 2009 22:05:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-13</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Shiver Shiver]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shiver">@Shiver</a> wrote:</p>
          <blockquote>
              <p>nice job bro!!11</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/12</link>
        <pubDate>Sun, 02 Aug 2009 21:08:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-12</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Envion Envion]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/envion">@Envion</a> wrote:</p>
          <blockquote>
              <p>rofl @ sp0rkeh</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/11</link>
        <pubDate>Tue, 28 Jul 2009 00:36:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-11</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@atrox atrox_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/atrox">@atrox</a> wrote:</p>
          <blockquote>
              <p>w8 not this 1</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/10</link>
        <pubDate>Mon, 27 Jul 2009 20:18:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-10</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Aftermath_961 Aftermath]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aftermath_961">@Aftermath_961</a> wrote:</p>
          <blockquote>
              <p>Posting for future reading.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/9</link>
        <pubDate>Sat, 25 Jul 2009 10:06:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-9</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lin, post:3, topic:290553”]I saw this at R-S, and it would’ve been nicer if it was documented on what the server sent, instead of what the client read. Nice job anyways…[/quote]What the hell?  What do you think the client is reading?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/8</link>
        <pubDate>Fri, 24 Jul 2009 13:32:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-8</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@_ikram _ikram]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_ikram">@_ikram</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="5" data-topic="290553">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/blakeman8192/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> blakeman8192:</div>
<blockquote>
<p>sumthin nice</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/7</link>
        <pubDate>Fri, 24 Jul 2009 11:10:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-7</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@beta beta_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/beta">@beta</a> wrote:</p>
          <blockquote>
              <p>thanks for the masks.<br>
you should to npc updating procedure too.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/6</link>
        <pubDate>Fri, 24 Jul 2009 09:35:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-6</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>sumthin nice</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/5</link>
        <pubDate>Fri, 24 Jul 2009 02:41:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-5</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="3" data-topic="290553">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/lin/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> Lin:</div>
<blockquote>
<p>I saw this at R-S, and it would’ve been nicer if it was documented on what the server sent, instead of what the client read. Nice job anyways…</p>
</blockquote>
</aside>
<p>What the client reads = what the server sends.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/4</link>
        <pubDate>Fri, 24 Jul 2009 02:37:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-4</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>I saw this at R-S, and it would’ve been nicer if it was documented on what the server sent, instead of what the client read. Nice job anyways…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/3</link>
        <pubDate>Fri, 24 Jul 2009 02:28:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-3</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <blockquote>super_ says:
u gonna post 'gj NICE JOB SIR'
super_ says:
or wat</blockquote>
gj NICE JOB SIR
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/2</link>
        <pubDate>Fri, 24 Jul 2009 02:03:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-2</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
      <item>
        <title>Player Updating Procedure</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[ul][size=99pt]I AM SUPER_[/size]</p>
<p>[center][size=7pt]The Player Updating process of <span class="hashtag">#317</span>[/size][/center]</p>
<pre><code>The player updating process consists of 4 parts:
  [list][li]a) Our player movement updates[/li]
  [li]b) Other player movement updates[/li]
  [li]c) Player list updating[/li]
      [li]c.a) Apperance updating[/li]
      [li]c.b) Location updating[/li]
  [li]d) Player update block flag-based updates[/li][/list]
</code></pre>
<p>[center][size=6pt]Our player movement updates[/size][/center]</p>
<pre><code>The client begins by reading 1 bit. This bit tells the client whether or not it is currently updating
</code></pre>
<p>‘our player’, or the player the client is controlling. If it’s not updating our player, it exits and goes onto step b.<br>
If it is, it then reads 2 bits. The value is called the <span class="bbcode-b">movement update type</span>. There are 4 recognized movement update types:<br>
[list]<br>
[li]0[/li]<br>
[li]1[/li]<br>
[li]2[/li]<br>
[li]3[/li]<br>
[/list]</p>
<pre><code>Type 0 basically tells the client there is nothing to update for our player, just add its index to the local updating list.

Type 1 tells the client you moved in one direction. The client reads 3 bits, which represents the direction you moved in, and then
</code></pre>
<p>1 bit, which states whether further update is required. If so, it adds it to the updating list. This is used in <span class="bbcode-i">walking</span>.</p>
<pre><code>Type 2 functions in much of the same way as its previous, only this time it reads two 3 bit values. The first represents the player's last
</code></pre>
<p>direction, and the second it’s current direction. Trailing behind it is also the 1 bit ‘update required’ flag as type 1. This is used in <span class="bbcode-i">running</span>.</p>
<pre><code>Type 3 on the other hand is different. It reads in 2 bits which represents our player's [b]plane[/b], or its level of height, in the game world.
</code></pre>
<p>Only 0-3 inclusive are appropriate planes supported by the client. It then reads 1 bit, which describes whether or not to clear the<br>
awaiting-waypoint queue, basically to stop client from further queued stepping, such as used in teleporting.<br>
After this, it reads the ‘update required’ bit, and checks to see if further update is required. Directly after, it reads two 7 bit<br>
quantities, representing the new relative X and relative Y coordinates of our player to our current map region’s origin. It then sets our players<br>
position to the plane, x, and y positions as told to.</p>
<p>[center][size=6pt]Other player movement updates[/size][/center]</p>
<pre><code>The client begins by reading an 8 bit value telling the client how many players there are to update. It then enters a loop
</code></pre>
<p>for each player there is to update.</p>
<pre><code>Inside this loop, the client reads 1 bit. This is the movement update required flag. If the flag is 0, it
</code></pre>
<p>sets the current updating player’s last update cycle time to the current game logic loop cycle time, and adds the player to the local<br>
player list. If the flag is not 0, it then reads the <span class="bbcode-b">movement update type</span>, which is a 2 bit quantity. The following known types are:<br>
[list]<br>
[li]0[/li]<br>
[li]1[/li]<br>
[li]2[/li]<br>
[li]3[/li]<br>
[/list]</p>
<pre><code>If the type is 0, the client updates the current player's last update cycle time, adds the current player to the local player list, and adds it to the updating list.

If the type is 1, the client updates the current player's last update cycle time and adds the current player to the local player list as well, but also
</code></pre>
<p>reads in 3 bit quantity. This represents the current player’s direction it <span class="bbcode-i">walked</span> to. It then reads the a 1 bit value that specifies whether or<br>
not to add the player to the updating list.</p>
<pre><code>If the type is 2, the client does the exact same thing as the type 2 update, except it reads in two of the 3 bit quantities. The first represents the current player's
</code></pre>
<p>last direction, and the second its current direction <span class="bbcode-i">running</span>.</p>
<pre><code>And lastly, if the type is 3, it only adds the player to the needing-update list, or so believed. Type 3 is not well known.
</code></pre>
<p>[center][size=6pt]Player list updating[/size][/center]</p>
<pre><code>The next step in the player updating procedure is the player list updating, or where the client recieves data on every player in its local list,
</code></pre>
<p>such as appearance and location relative to ours. The client loops through a process for each player in the updating.</p>
<pre><code>The client reads an 11 bit quantity from the buffer, which is the next player in the updated list to be informed about. The clietn then checks
</code></pre>
<p>if it has a cached buffer for that player’s updating, and if it does, it updates the player appearance.</p>
<p>[center][size=5pt]Appearance updating[/size][/center]</p>
<pre><code>Appearance updating starts off by first reading an unsigned byte that represents the current player's gender. Then it reads another unsigned byte
</code></pre>
<p>that represents the player’s over-head icon id. This is used with prayer icons above heads. Next, a loop occurs 12 times to read equipment data.</p>
<pre><code>In the loop, the client reads an unsigned byte that is the equipment slot's item id high byte. If it is 0, the player's equpment slot has no item.
</code></pre>
<p>If it is not 0, another unsigned byte is read the merged with the previous to create the equipment’s item id. If the id is 65535 (written as a -1 signed short),<br>
then the player’s appearance is that of an NPC. The client reads in an unsigned short representing the NPC’s id and sets the player’s definition to that<br>
NPC’s.</p>
<pre><code>After the equipment loop, it loops 5 times, once for each type of coloured body part. In each loop, the client reads an unsigned short and assigns it
</code></pre>
<p>as the color of the current loop idx (which represents the body part).</p>
<pre><code>Finally, after the color loop, the client reads 7 unsigned shorts representing animation indices; the animations belong to:
</code></pre>
<p>[list]<br>
[li] Standing still[/li]<br>
[li] Turning while standing[/li]<br>
[li] Walking[/li]<br>
[li] Turning around (backwards)[/li]<br>
[li] Turning a quarter-way clockwise[/li]<br>
[li] Turning a quarter-way counter clockwise[/li]<br>
[li] Running<br>
[/list]</p>
<pre><code>After these animation indices are read, a long representing the player's name is read, an unsigned byte representing the combat level, and an unsigned short representing
</code></pre>
<p>the players skill level (for things where players arent ranked by levels, such as where it states ’ (skill )’ as an action menu text).</p>
<p>[center][size=5pt]Location updating[/size][/center]</p>
<pre><code>After the appearance updating, the client starts to update that player's location relative to our player. The player is added to the local player list
</code></pre>
<p>and it’s last update cycle time. It then reads a 1 bit quantity that defines whether or not the client has a chunk in the player update block list. If it does,<br>
it adds it to the updating list. The next bit states whether or not to discard the awaiting-waypoint queue, such as when teleporting. It then reads to 5 bit values that determine the players<br>
relative X and Y coordinates to our player. The local player area is 16x16, so if the delta of the two coordinates is &gt; 15, 32 is subtracted from it to signify<br>
the player is on the other side of ours. The client then sets the player’s position, ending the player list updating process.</p>
<p>[center][size=6pt]Update block flag-based updating[/size][/center]</p>
<pre><code>The following is what most people think of when they say 'update mask' and 'update flag'. This process of the updating procedure is very important. It begins with looping
</code></pre>
<p>through ALL players in the local player update list, reading an unsigned byte which from now on will be called the <span class="bbcode-b">update flag</span>. All further updates are seen to be ‘included’<br>
by comparing a bitwise mask to this flag. If the flag has the bits for 0x40 all on, this signifies that the flag was too large for a simple unsigned byte and reads in another unsigned byte,<br>
which it uses as the upper unsigned byte, therefore the update flag is an unsigned little-endian short. The client then passes off the data to a helper method<br>
which processes all updates this flag signifies.</p>
<pre><code>Inside this method, many different bitwise masks are compared to the player's flag, and if the mask is set, logic is performed. These masks are frequently called
</code></pre>
<p><span class="bbcode-b">update masks</span>. A list of player update masks are below.<br>
[list]<br>
[li]0x400[/li]<br>
[li]0x100[/li]<br>
[li]0x8[/li]<br>
[li]0x4[/li]<br>
[li]0x80[/li]<br>
[li]0x1[/li]<br>
[li]0x10[/li]<br>
[li]0x2[/li]<br>
[li]0x20[/li]<br>
[li]0x200[/li]<br>
[/list]</p>
<p>[center][size=5pt]0x400[/size][/center]<br>
Not much is known about this mask, other than that the last value read is a sprite direction id. If you have discovered it, please email or message me via MSN at <a href="mailto:_cake@live.com" data-bbcode="true">_cake@live.com</a> and explain<br>
what the values are!</p>
<p>[center][size=5pt]0x100[/size][/center]<br>
The 0x100 mask is responsible for player graphics updating. The data associated is a little-endian unsigned short which represents the graphics id, and an int which is the graphics delay.</p>
<p>[center][size=5pt]0x8[/size][/center]<br>
Animations are handled by the 0x8 mask. The payload for this update is a little-endian unsigned short that is the animation id, and an unsigned inversed byte which states the animation’s<br>
delay.</p>
<p>[center][size=5pt]0x4[/size][/center]<br>
The beloved 0x4 mask takes care of forced player text that is only displayed above the player’s model. The only data associated with this is a jagex ASCII string with a terminator of 10.</p>
<p>[center][size=5pt]0x80[/size][/center]<br>
Unlike the previous, the 0x80 mask handles normal player chat text. The client will read a little-endian unsigned short which holds chat text attributes. It holds the text color<br>
and chat effects. Next, the client reads an unsigned byte which states the player’s priveleges (normal player, player moderator, moderator, staff) to give the chatter’s name<br>
a crown. Right behind it trails an unsigned inversed byte that gives chat text length in bytes. Trailing afterwards is dictionary-compressed chat text. All chat text characters become indexes into<br>
a valid character table and are written as nibbles (4 bit quantities).</p>
<p>[center][size=5pt]0x1[/size][/center]<br>
Updating the player’s current interacting-entity is done via mask 0x1. The entity id is written as a little-endian unsigned short.</p>
<p>[center][size=5pt]0x10[/size][/center]<br>
The 0x10 mask updates appearance of the player in exact same way as in updating player list. Only difference is that appearance is updated from a set-sized buffer filled from the current buffer.<br>
An unsigned inversed byte is read first which describes appearance buffer size, and the buffer is filled.</p>
<p>[center][size=5pt]0x2[/size][/center]<br>
Facing coordinate updating is signified by the 0x2 mask. The player’s facing-towards X and Y are set to read values; specifically, an unsigned lower-inverted short and little-endian unsigned short, respectively.</p>
<p>[center][size=5pt]0x20[/size][/center]<br>
Notifying client’s of a player’s health is done via the 0x20 mask. The hitpoint damage done to the player is sent as an unsigned byte, followed by the hit type as a positive inverted byte.<br>
The player’s current and max health are read as an unsigned inverted byte and unsigned byte, respectively.</p>
<p>[center][size=5pt]0x200[/size][/center]<br>
The 0x200 mask acts in the same way as the 0x20 mask and is most likely associated with special attacks from weapons that have the ability to hit twice at the same time. Hitpoint damage is<br>
an unsigned byte, the hit type an unsigned inverted byte, and the current and maximum health being an unsigned byte and unsigned inverted byte, respectively.</p>
<p>After the client processes every single player in the update player list, it ends player updating.[/ul]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-updating-procedure/290553/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-updating-procedure/290553/1</link>
        <pubDate>Fri, 24 Jul 2009 01:41:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-290553-1</guid>
        <source url="https://forum.moparisthebest.com/t/player-updating-procedure/290553.rss">Player Updating Procedure</source>
      </item>
  </channel>
</rss>
