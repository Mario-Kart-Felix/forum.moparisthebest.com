<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Static Constructor</title>
    <link>https://forum.moparisthebest.com/t/static-constructor/398891</link>
    <description>Okay, so I&#39;m working on an Appearance builder for my server framework. I am trying to determine which would be better in this case; a static constructor, or a normal blank constructor that does absolutely nothing. Here&#39;s the code I&#39;m working with.

[code=Java]
public final class AppearanceBuilder implements Builder&lt;Appearance&gt; {
    private Gender gender;
    private int skinColor;
    private int hairStyle;
    private int hairColor;
    private int torsoStyle;
    private int torsoColor;
    private int legStyle;
    private int legColor;
    private int feetStyle;
    private int feetColor;
    private int beardStyle;
    private int armStyle;
    private boolean hasWristbands;
    
    public AppearanceBuilder() {
        // Empty
    }

    /**
     * Constructs an AppearanceBuilder with initial values from the
     * {@code appearance}
     * 
     * @param appearance
     *        the appearance to be initialized from
     * @throws IllegalArgumentException
     *         if {@code appearance} is null.
     */
    public AppearanceBuilder(final Appearance appearance)
        throws IllegalArgumentException {
        if (appearance == null) {
            throw new IllegalArgumentException(&quot;appearance cannot be null&quot;);
        }
        gender = appearance.getGender();
        skinColor = appearance.getSkinColor();
        hairStyle = appearance.getHairStyle();
        hairColor = appearance.getHairColor();
        torsoStyle = appearance.getTorsoStyle();
        torsoColor = appearance.getTorsoColor();
        legStyle = appearance.getLegStyle();
        legColor = appearance.getLegColor();
        feetStyle = appearance.getFeetStyle();
        feetColor = appearance.getFeetColor();
        beardStyle = appearance.getBeardStyle();
        armStyle = appearance.getArmStyle();
        hasWristbands = appearance.hasWristbands();
    }

    // Setters ommited for short code

    @Override
    public Appearance build() {
        final Appearance appearance = new Appearance(gender, skinColor,
            hairStyle, hairColor, torsoStyle, torsoColor, legStyle, legColor,
            feetStyle, feetColor, beardStyle, armStyle, hasWristbands);
        return appearance;
    }
}
[/code]

Now, I hate programming things with no purpose. Because I explicitly define the AppearanceBuilder(Appearance) constructor, no default constructor is created. But, explicitly defining a blank constructor that does absolutely nothing is a waste of space. So I&#39;m thinking about just having a static constructor that does this:

[code=Java]
public static AppearanceBuilder buildFrom(final Appearance appearance)
    throws IllegalArgumentException {
    if (appearance == null) {
        throw new IllegalArgumentException(&quot;appearance cannot be null&quot;);
    }
    AppearanceBuilder builder = new AppearanceBuilder();
    builder.setGender(appearance.getGender());
    builder.setSkinColor(appearance.getSkinColor());
    builder.setHairStyle(appearance.getHairStyle());
    builder.setHairColor(appearance.getHairColor());
    builder.setTorsoStyle(appearance.getTorsoStyle());
    builder.setTorsoColor(appearance.getTorsoColor());
    builder.setLegStyle(appearance.getLegStyle());
    builder.setLegColor(appearance.getLegColor());
    builder.setFeetStyle(appearance.getFeetStyle());
    builder.setFeetColor(appearance.getFeetColor());
    builder.setBeardStyle(appearance.getBeardStyle());
    builder.setArmStyle(appearance.getArmStyle());
    builder.hasWristbands(appearance.hasWristbands());
    return builder;
}
[/code]

That way I could still have a default constructor, and the ability to create a builder from an Appearance object.

What are your thoughts? Should I use the static constructor over the default constructor? If so what would be an appropriate name for the method? &quot;buildFrom&quot; doesn&#39;t seem right, because I&#39;m not really building anything.</description>
    
    <lastBuildDate>Sun, 12 Jun 2011 21:17:32 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/static-constructor/398891.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>The reason I don’t want to explicitly define a blank constructor is because I don’t like making code that does nothing. In my previous post, you can see the two scenarios for explicitly defining a blank constructor. My Appearance class is also immutable. Here’s the full code I’m working with.</p>
<p>Appearance.java</p>
<pre><code class="lang-auto">public final class Appearance {
    public enum Gender {
        MALE, FEMALE;
    }

    private final Gender gender;
    private final int skinColor;
    private final int hairStyle;
    private final int hairColor;
    private final int torsoStyle;
    private final int torsoColor;
    private final int legStyle;
    private final int legColor;
    private final int feetStyle;
    private final int feetColor;
    private final int beardStyle;
    private final int armStyle;
    private final boolean hasWristbands;

    public Appearance(final Gender gender, final int skinColor,
        final int hairStyle, final int hairColor, final int torsoStyle,
        final int torsoColor, final int legStyle, final int legColor,
        final int feetStyle, final int feetColor, final int beardStyle,
        final int armStyle, final boolean hasWristbands) {
        this.gender = gender;
        this.skinColor = skinColor;
        this.hairStyle = hairStyle;
        this.hairColor = hairColor;
        this.torsoStyle = torsoStyle;
        this.torsoColor = torsoColor;
        this.legStyle = legStyle;
        this.legColor = legColor;
        this.feetStyle = feetStyle;
        this.feetColor = feetColor;
        this.beardStyle = beardStyle;
        this.armStyle = armStyle;
        this.hasWristbands = hasWristbands;
    }

    public Gender getGender() {
        return gender;
    }

    public int getSkinColor() {
        return skinColor;
    }

    public int getHairStyle() {
        return hairStyle;
    }

    public int getHairColor() {
        return hairColor;
    }

    public int getTorsoStyle() {
        return torsoStyle;
    }

    public int getTorsoColor() {
        return torsoColor;
    }

    public int getLegStyle() {
        return legStyle;
    }

    public int getLegColor() {
        return legColor;
    }

    public int getFeetStyle() {
        return feetStyle;
    }

    public int getFeetColor() {
        return feetColor;
    }

    public int getBeardStyle() {
        return beardStyle;
    }

    public int getArmStyle() {
        return armStyle;
    }

    public boolean hasWristbands() {
        return hasWristbands;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((gender == null) ? 0 : gender.hashCode());
        result = prime * result + skinColor;
        result = prime * result + hairStyle;
        result = prime * result + hairColor;
        result = prime * result + torsoStyle;
        result = prime * result + torsoColor;
        result = prime * result + legStyle;
        result = prime * result + legColor;
        result = prime * result + feetStyle;
        result = prime * result + feetColor;
        result = prime * result + beardStyle;
        result = prime * result + armStyle;
        result = prime * result + ((hasWristbands) ? 1 : 0);
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof Appearance)) {
            return false;
        }
        final Appearance other = (Appearance) obj;
        if (gender != other.gender) {
            return false;
        }
        if (skinColor != other.skinColor) {
            return false;
        }
        if (hairStyle != other.hairStyle) {
            return false;
        }
        if (hairColor != other.hairColor) {
            return false;
        }
        if (torsoStyle != other.torsoStyle) {
            return false;
        }
        if (torsoColor != other.torsoColor) {
            return false;
        }
        if (legStyle != other.legStyle) {
            return false;
        }
        if (legColor != other.legColor) {
            return false;
        }
        if (feetStyle != other.feetStyle) {
            return false;
        }
        if (feetColor != other.feetColor) {
            return false;
        }
        if (beardStyle != other.beardStyle) {
            return false;
        }
        if (armStyle != other.armStyle) {
            return false;
        }
        if (hasWristbands != other.hasWristbands) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append(Appearance.class.getName());
        builder.append("[");
        builder.append("gender=").append(gender);
        builder.append(", ");
        builder.append("skinColor=").append(skinColor);
        builder.append(", ");
        builder.append("hairStyle=").append(hairStyle);
        builder.append(", ");
        builder.append("hairColor=").append(hairColor);
        builder.append(", ");
        builder.append("torsoStyle=").append(torsoStyle);
        builder.append(", ");
        builder.append("torsoColor=").append(torsoColor);
        builder.append(", ");
        builder.append("legStyle=").append(legStyle);
        builder.append(", ");
        builder.append("legColor=").append(legColor);
        builder.append(", ");
        builder.append("feetStyle=").append(feetStyle);
        builder.append(", ");
        builder.append("feetColor=").append(feetColor);
        builder.append(", ");
        builder.append("beardStyle=").append(beardStyle);
        builder.append(", ");
        builder.append("armStyle=").append(armStyle);
        builder.append(", ");
        builder.append("hasWristbands=").append(hasWristbands);
        builder.append("]");
        return builder.toString();
    }
}</code></pre>
<p>AppearanceBuilder.java (NOTE: Most argument checking is ommited for shorter code)</p>
<pre><code class="lang-auto">public final class AppearanceBuilder implements Builder&lt;Appearance&gt; {
    private Gender gender;
    private int skinColor;
    private int hairStyle;
    private int hairColor;
    private int torsoStyle;
    private int torsoColor;
    private int legStyle;
    private int legColor;
    private int feetStyle;
    private int feetColor;
    private int beardStyle;
    private int armStyle;
    private boolean hasWristbands;
    
    public AppearanceBuilder() {
        // Empty
    }

    public AppearanceBuilder(final Appearance appearance)
        throws IllegalArgumentException {
        if (appearance == null) {
            throw new IllegalArgumentException("appearance cannot be null");
        }
        gender = appearance.getGender();
        skinColor = appearance.getSkinColor();
        hairStyle = appearance.getHairStyle();
        hairColor = appearance.getHairColor();
        torsoStyle = appearance.getTorsoStyle();
        torsoColor = appearance.getTorsoColor();
        legStyle = appearance.getLegStyle();
        legColor = appearance.getLegColor();
        feetStyle = appearance.getFeetStyle();
        feetColor = appearance.getFeetColor();
        beardStyle = appearance.getBeardStyle();
        armStyle = appearance.getArmStyle();
        hasWristbands = appearance.hasWristbands();
    }

    public AppearanceBuilder setGender(final Gender gender) {
        this.gender = gender;
        return this;
    }

    public AppearanceBuilder setSkinColor(final int skinColor) {
        this.skinColor = skinColor;
        return this;
    }

    public AppearanceBuilder setHairStyle(final int hairStyle) {
        this.hairStyle = hairStyle;
        return this;
    }

    public AppearanceBuilder setHairColor(final int hairColor) {
        this.hairColor = hairColor;
        return this;
    }

    public AppearanceBuilder setTorsoStyle(final int torsoStyle) {
        this.torsoStyle = torsoStyle;
        return this;
    }

    public AppearanceBuilder setTorsoColor(final int torsoColor) {
        this.torsoColor = torsoColor;
        return this;
    }

    public AppearanceBuilder setLegStyle(final int legStyle) {
        this.legStyle = legStyle;
        return this;
    }

    public AppearanceBuilder setLegColor(final int legColor) {
        this.legColor = legColor;
        return this;
    }

    public AppearanceBuilder setFeetStyle(final int feetStyle) {
        return this;
    }

    public AppearanceBuilder setFeetColor(final int feetColor) {
        this.feetColor = feetColor;
        return this;
    }

    public AppearanceBuilder setBeardStyle(final int beardStyle) {
        this.beardStyle = beardStyle;
        return this;
    }

    public AppearanceBuilder setArmStyle(final int armStyle) {
        this.armStyle = armStyle;
        return this;
    }

    public AppearanceBuilder hasWristbands(final boolean hasWristbands) {
        this.hasWristbands = hasWristbands;
        return this;
    }

    @Override
    public Appearance build() {
        final Appearance appearance = new Appearance(gender, skinColor,
            hairStyle, hairColor, torsoStyle, torsoColor, legStyle, legColor,
            feetStyle, feetColor, beardStyle, armStyle, hasWristbands);
        return appearance;
    }

    @Override
    public int hashCode() {
        final int prime = 31;
        int result = 1;
        result = prime * result + ((gender == null) ? 0 : gender.hashCode());
        result = prime * result + skinColor;
        result = prime * result + hairStyle;
        result = prime * result + hairColor;
        result = prime * result + torsoStyle;
        result = prime * result + torsoColor;
        result = prime * result + legStyle;
        result = prime * result + legColor;
        result = prime * result + feetStyle;
        result = prime * result + feetColor;
        result = prime * result + beardStyle;
        result = prime * result + armStyle;
        result = prime * result + ((hasWristbands) ? 1 : 0);
        return result;
    }

    @Override
    public boolean equals(final Object obj) {
        if (this == obj) {
            return true;
        }
        if (obj == null) {
            return false;
        }
        if (!(obj instanceof AppearanceBuilder)) {
            return false;
        }
        final AppearanceBuilder other = (AppearanceBuilder) obj;
        if (gender != other.gender) {
            return false;
        }
        if (skinColor != other.skinColor) {
            return false;
        }
        if (hairStyle != other.hairStyle) {
            return false;
        }
        if (hairColor != other.hairColor) {
            return false;
        }
        if (torsoStyle != other.torsoStyle) {
            return false;
        }
        if (torsoColor != other.torsoColor) {
            return false;
        }
        if (legStyle != other.legStyle) {
            return false;
        }
        if (legColor != other.legColor) {
            return false;
        }
        if (feetStyle != other.feetStyle) {
            return false;
        }
        if (feetColor != other.feetColor) {
            return false;
        }
        if (beardStyle != other.beardStyle) {
            return false;
        }
        if (armStyle != other.armStyle) {
            return false;
        }
        if (hasWristbands != other.hasWristbands) {
            return false;
        }
        return true;
    }

    @Override
    public String toString() {
        final StringBuilder builder = new StringBuilder();
        builder.append(AppearanceBuilder.class.getName());
        builder.append("[");
        builder.append("gender=").append(gender);
        builder.append(", ");
        builder.append("skinColor=").append(skinColor);
        builder.append(", ");
        builder.append("hairStyle=").append(hairStyle);
        builder.append(", ");
        builder.append("hairColor=").append(hairColor);
        builder.append(", ");
        builder.append("torsoStyle=").append(torsoStyle);
        builder.append(", ");
        builder.append("torsoColor=").append(torsoColor);
        builder.append(", ");
        builder.append("legStyle=").append(legStyle);
        builder.append(", ");
        builder.append("legColor=").append(legColor);
        builder.append(", ");
        builder.append("feetStyle=").append(feetStyle);
        builder.append(", ");
        builder.append("feetColor=").append(feetColor);
        builder.append(", ");
        builder.append("beardStyle=").append(beardStyle);
        builder.append(", ");
        builder.append("armStyle=").append(armStyle);
        builder.append(", ");
        builder.append("hasWristbands=").append(hasWristbands);
        builder.append("]");
        return builder.toString();
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/8</link>
        <pubDate>Sun, 12 Jun 2011 21:17:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-8</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>Do you have a good enough reason for not explicitly declaring your default constructor in your source code? If it’s to have less code, that’s (in my opinion) not a good enough reason. You should prefer code that is easier to read and understand before less code.</p>
<p>Also, prefer not having that many parameter arguments in your methods or constructors. I personally think 3 parameter arguments should be good enough. And then here comes a solution to the problem if you have an immutable class:</p>
<pre><code class="lang-auto">public final class Appearance {
     private final int hairStyle;
     private final int hairColor;
     private final int torsoStyle;
     private final int torsoColor;
     //All other fields omitted...
     
     private Appearance(Builder builder) {
          hairStyle = builder.hairStyle;
          hairColor = builder.hairColor;
          torsoStyle = builder.torsoStyle;
          torsoColor = builder.torsoColor;
          //All other fields omitted...
     }
     
     //All getters omitted...
     
     //Of course, don't forget to override hashCode(), equals() and toString() =)
     
     public static final class Builder {
          private int hairStyle;
          private int hairColor;
          private int torsoStyle;
          private int torsoColor;
          //All other fields omitted...
          
          //May aswell include some parameter arguments that are required (if such exists)...
          private Builder() {
               
          }
          
          //May aswell include some parameter arguments that are required (if such exists)...
          private Builder(Appearance appearance) {
               hairStyle = appearance.getHairStyle();
               hairColor = appearance.getHairColor();
               torsoStyle = appearance.getTorsoStyle();
               torsoColor = appearance.getTorsoColor();
               //All other fields omitted...
          }
          
          //Setter that can be used with chaining calls - thus why it returns itself...
          public Builder setHairStyle(int hairStyle) {
               this.hairStyle = hairStyle;
               return this;
          }
          
          //The rest of the setters omitted...
          
          public Appearance build() {
               return new Appearance(this);
          }
          
          //May aswell include some parameter arguments that are required (if such exists)...
          public static Builder newInstance() {
               return new Builder();
          }
          
          //May aswell include some parameter arguments that are required (if such exists)...
          public static Builder newInstance(Appearance appearance) throws NullPointerException {
               if(appearance == null) {
                    throw new NullPointerException("appearance == null");
               } else {
                    return new Builder(appearance);
               }
          }
     }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/7</link>
        <pubDate>Sun, 12 Jun 2011 21:06:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-7</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="398891">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ikilem/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> iKilem:</div>
<blockquote>
<p>getAppearanceBuilder() or getBuilder() would be the conventional style of naming. However, if you did have a factory method, I would make sure the default constructor was private. It would be ugly allowing the user to create a new AppearanceBuilder through a constructor and a factory method. Instead, create another factory method that takes no arguments. Still, there is no reason to be using them. Using constructors is fine. Your reasoning that explicitly defining a default constructor is a waste of space makes no sense. Of course it has a purpose. Its purpose is to allow the user to create a default AppearanceBuilder.</p>
</blockquote>
</aside>
<p>I want the user to be able to create a blank AppearanceBuilder, with no default values, and create an AppearanceBuilder from a preexisting Appearance. When you declare variables like so</p>
<pre><code class="lang-auto">public class Derp {
    public int i;
    public boolean b;
    public Object o;
}</code></pre>
<p>All primitives take the default value of 0, all booleans false, and all object references null. So taking that information, the blank constructor can look like</p>
<pre><code class="lang-auto">public AppearanceBuilder() {
    // Empty
}</code></pre>
<p>or</p>
<pre><code class="lang-auto">public AppearanceBuilder() {
    i = 0;
    b = false;
    o = null;
}</code></pre>
<p>Both of which do absolutely nothing. The first explicitly defines a blank constructor, which I would like to avoid doing; and the second defines a blank constructor, which sets all variables to their default values, which are already set at instantiation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/6</link>
        <pubDate>Sun, 12 Jun 2011 19:30:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-6</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>getAppearanceBuilder() or getBuilder() would be the conventional style of naming. However, if you did have a factory method, I would make sure the default constructor was private. It would be ugly allowing the user to create a new AppearanceBuilder through a constructor and a factory method. Instead, create another factory method that takes no arguments. Still, there is no reason to be using them. Using constructors is fine. Your reasoning that explicitly defining a default constructor is a waste of space makes no sense. Of course it has a purpose. Its purpose is to allow the user to create a default AppearanceBuilder.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/5</link>
        <pubDate>Sun, 12 Jun 2011 08:58:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-5</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:3, topic:398891”][quote author=T4_ link=topic=496029.msg3626413#msg3626413 date=1307855079]<br>
You don’t have to define a blank constructor…<br>
[/quote]</p>
<p>I do since I’m defining a constructor that takes an Appearance as an argument. Because a constructor is explicitly defined, a default constructor isn’t created.</p>
<p>The only options I can see are</p>
<ol>
<li>Constructor with Appearance argument, forcing me to explicitly define a blank constructor.</li>
<li>A Static Constructor that allows be to create a builder from the Appearance, and having the default constructor implicitly defined.[/quote]</li>
</ol>
<p>Uhm, wow - never ran into that; however I do get in the habit of using blank constructors most of the time. I would go for the second approach, seems a little bit neater.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/4</link>
        <pubDate>Sun, 12 Jun 2011 06:28:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-4</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="398891">
<div class="title">
<div class="quote-controls"></div>
 T4_:</div>
<blockquote>
<p>You don’t have to define a blank constructor…</p>
</blockquote>
</aside>
<p>I do since I’m defining a constructor that takes an Appearance as an argument. Because a constructor is explicitly defined, a default constructor isn’t created.</p>
<p>The only options I can see are</p>
<ol>
<li>Constructor with Appearance argument, forcing me to explicitly define a blank constructor.</li>
<li>A Static Constructor that allows be to create a builder from the Appearance, and having the default constructor implicitly defined.</li>
</ol>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/3</link>
        <pubDate>Sun, 12 Jun 2011 05:11:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-3</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>You don’t have to define a blank constructor…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/2</link>
        <pubDate>Sun, 12 Jun 2011 05:04:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-2</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
      <item>
        <title>Static Constructor</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Okay, so I’m working on an Appearance builder for my server framework. I am trying to determine which would be better in this case; a static constructor, or a normal blank constructor that does absolutely nothing. Here’s the code I’m working with.</p>
<pre><code class="lang-auto">public final class AppearanceBuilder implements Builder&lt;Appearance&gt; {
    private Gender gender;
    private int skinColor;
    private int hairStyle;
    private int hairColor;
    private int torsoStyle;
    private int torsoColor;
    private int legStyle;
    private int legColor;
    private int feetStyle;
    private int feetColor;
    private int beardStyle;
    private int armStyle;
    private boolean hasWristbands;
    
    public AppearanceBuilder() {
        // Empty
    }

    /**
     * Constructs an AppearanceBuilder with initial values from the
     * {@code appearance}
     * 
     * @param appearance
     *        the appearance to be initialized from
     * @throws IllegalArgumentException
     *         if {@code appearance} is null.
     */
    public AppearanceBuilder(final Appearance appearance)
        throws IllegalArgumentException {
        if (appearance == null) {
            throw new IllegalArgumentException("appearance cannot be null");
        }
        gender = appearance.getGender();
        skinColor = appearance.getSkinColor();
        hairStyle = appearance.getHairStyle();
        hairColor = appearance.getHairColor();
        torsoStyle = appearance.getTorsoStyle();
        torsoColor = appearance.getTorsoColor();
        legStyle = appearance.getLegStyle();
        legColor = appearance.getLegColor();
        feetStyle = appearance.getFeetStyle();
        feetColor = appearance.getFeetColor();
        beardStyle = appearance.getBeardStyle();
        armStyle = appearance.getArmStyle();
        hasWristbands = appearance.hasWristbands();
    }

    // Setters ommited for short code

    @Override
    public Appearance build() {
        final Appearance appearance = new Appearance(gender, skinColor,
            hairStyle, hairColor, torsoStyle, torsoColor, legStyle, legColor,
            feetStyle, feetColor, beardStyle, armStyle, hasWristbands);
        return appearance;
    }
}</code></pre>
<p>Now, I hate programming things with no purpose. Because I explicitly define the AppearanceBuilder(Appearance) constructor, no default constructor is created. But, explicitly defining a blank constructor that does absolutely nothing is a waste of space. So I’m thinking about just having a static constructor that does this:</p>
<pre><code class="lang-auto">public static AppearanceBuilder buildFrom(final Appearance appearance)
    throws IllegalArgumentException {
    if (appearance == null) {
        throw new IllegalArgumentException("appearance cannot be null");
    }
    AppearanceBuilder builder = new AppearanceBuilder();
    builder.setGender(appearance.getGender());
    builder.setSkinColor(appearance.getSkinColor());
    builder.setHairStyle(appearance.getHairStyle());
    builder.setHairColor(appearance.getHairColor());
    builder.setTorsoStyle(appearance.getTorsoStyle());
    builder.setTorsoColor(appearance.getTorsoColor());
    builder.setLegStyle(appearance.getLegStyle());
    builder.setLegColor(appearance.getLegColor());
    builder.setFeetStyle(appearance.getFeetStyle());
    builder.setFeetColor(appearance.getFeetColor());
    builder.setBeardStyle(appearance.getBeardStyle());
    builder.setArmStyle(appearance.getArmStyle());
    builder.hasWristbands(appearance.hasWristbands());
    return builder;
}</code></pre>
<p>That way I could still have a default constructor, and the ability to create a builder from an Appearance object.</p>
<p>What are your thoughts? Should I use the static constructor over the default constructor? If so what would be an appropriate name for the method? “buildFrom” doesn’t seem right, because I’m not really building anything.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/static-constructor/398891/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/static-constructor/398891/1</link>
        <pubDate>Sun, 12 Jun 2011 04:18:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-398891-1</guid>
        <source url="https://forum.moparisthebest.com/t/static-constructor/398891.rss">Static Constructor</source>
      </item>
  </channel>
</rss>
