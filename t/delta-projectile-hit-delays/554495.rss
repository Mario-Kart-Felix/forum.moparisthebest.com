<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Delta] Projectile Hit Delays</title>
    <link>https://forum.moparisthebest.com/t/delta-projectile-hit-delays/554495</link>
    <description>This is quite embarrassing due to the fact that I believe ripping this simple code from an old source is going way over my head, but it&#39;s getting late and I might as well see if anyone has a quick pointer. Trying to determine if it&#39;s worth ripping this old method of doing things or attempting to write my own.

I&#39;m working on an old project that doesn&#39;t have a time between an arrow being fired and the hit splat appearing; the hitsplat appears when the NPC is attacked, then the arrow is fired. I obviously want this vice-versa, so that when the arrow hits the target, the hitsplat appears at the same time.

How is this &#39;delay&#39; calculated in sources such as classic DeltaScape? I&#39;ve skimmed through the AttackNPC() method of Delta&#39;s client class and found the variable lastArrow, which appears to be tracked in process().

[code=java]if (System.currentTimeMillis() - lastArrow &gt; 500 &amp;&amp; arrow) {
	int arrowgfx = getarrowgfxnow();
	if (AttackingOn &gt; 0)
	   rangeGFX(70, arrowgfx);
	if (attacknpc &gt; 0)
	   rangeGFXNPC(70, arrowgfx);
	arrow = false;
	arrow2 = true;
}[/code]

Edit: Below the above code is also this, which just appears to push the actual hit back more cycles. What the hell is this source doing.

[code=java]if (System.currentTimeMillis() - lastArrow &gt; 1500 &amp;&amp; arrow2) {
	lastArrow = System.currentTimeMillis();
	arrow2 = false;
	if (attacknpc &gt; 0) {
	   server.npcHandler.npcs[attacknpc].hitDiff = npcRangeDamage();
	   server.npcHandler.npcs[attacknpc].updateRequired = true;
	   server.npcHandler.npcs[attacknpc].hitUpdateRequired = true;
	   server.npcHandler.npcs[attacknpc].hit = true;
	}
}[/code]

I&#39;m assuming from this that the server just waits four cycles before appending the hit, but that doesn&#39;t make sense as to why the hit delay is always perfect for different distances, unless the projectile is actually travelling faster for longer distances.

I had originally figured it was calculated using factors such as the distance between you and the target, the speed of the projectile, etc., but I wasn&#39;t seeing anything specific on this unless it&#39;s written in the CreateProjectile method.

I&#39;m thinking that this is actually relatively straightforward and I&#39;m just being a blind idiot in this mess of code, but thank you for any responses. Feel free to ask questions.</description>
    
    <lastBuildDate>Thu, 21 Jan 2016 06:42:18 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/delta-projectile-hit-delays/554495.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Delta] Projectile Hit Delays</title>
        <dc:creator><![CDATA[@chassy13 Chassy13]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chassy13">@chassy13</a> wrote:</p>
          <blockquote>
              <p>This is quite embarrassing due to the fact that I believe ripping this simple code from an old source is going way over my head, but it’s getting late and I might as well see if anyone has a quick pointer. Trying to determine if it’s worth ripping this old method of doing things or attempting to write my own.</p>
<p>I’m working on an old project that doesn’t have a time between an arrow being fired and the hit splat appearing; the hitsplat appears when the NPC is attacked, then the arrow is fired. I obviously want this vice-versa, so that when the arrow hits the target, the hitsplat appears at the same time.</p>
<p>How is this ‘delay’ calculated in sources such as classic DeltaScape? I’ve skimmed through the AttackNPC() method of Delta’s client class and found the variable lastArrow, which appears to be tracked in process().</p>
<p><code>if (System.currentTimeMillis() - lastArrow &gt; 500 &amp;&amp; arrow) {
	int arrowgfx = getarrowgfxnow();
	if (AttackingOn &gt; 0)
	   rangeGFX(70, arrowgfx);
	if (attacknpc &gt; 0)
	   rangeGFXNPC(70, arrowgfx);
	arrow = false;
	arrow2 = true;
}</code></p>
<p>Edit: Below the above code is also this, which just appears to push the actual hit back more cycles. What the hell is this source doing.</p>
<p><code>if (System.currentTimeMillis() - lastArrow &gt; 1500 &amp;&amp; arrow2) {
	lastArrow = System.currentTimeMillis();
	arrow2 = false;
	if (attacknpc &gt; 0) {
	   server.npcHandler.npcs[attacknpc].hitDiff = npcRangeDamage();
	   server.npcHandler.npcs[attacknpc].updateRequired = true;
	   server.npcHandler.npcs[attacknpc].hitUpdateRequired = true;
	   server.npcHandler.npcs[attacknpc].hit = true;
	}
}</code></p>
<p>I’m assuming from this that the server just waits four cycles before appending the hit, but that doesn’t make sense as to why the hit delay is always perfect for different distances, unless the projectile is actually travelling faster for longer distances.</p>
<p>I had originally figured it was calculated using factors such as the distance between you and the target, the speed of the projectile, etc., but I wasn’t seeing anything specific on this unless it’s written in the CreateProjectile method.</p>
<p>I’m thinking that this is actually relatively straightforward and I’m just being a blind idiot in this mess of code, but thank you for any responses. Feel free to ask questions.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/delta-projectile-hit-delays/554495/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/delta-projectile-hit-delays/554495/1</link>
        <pubDate>Thu, 21 Jan 2016 06:42:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-554495-1</guid>
        <source url="https://forum.moparisthebest.com/t/delta-projectile-hit-delays/554495.rss">[Delta] Projectile Hit Delays</source>
      </item>
  </channel>
</rss>
