<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Player Rendering [More Advanced]</title>
    <link>https://forum.moparisthebest.com/t/player-rendering-more-advanced/349397</link>
    <description>I&#39;m using the &quot;Fly thought runescape&quot; source and trying to have the player rendered but so far, have failed. This is why.

&lt;blockquote&gt;Error: Error packet size mismatch in getplayer pos:7 psize:8
Error: T2 - 81,73,-1 - 8,3040,3192 - 0,64,0,6,-1,67,-4,-28,

Error: Error packet size mismatch in getplayer pos:11 psize:10
Error: T2 - 81,73,-1 - 10,3072,3224 - -26,-127,0,6,-1,67,-4,-28,0,64,

Error: Error packet size mismatch in getplayer pos:14 psize:12
Error: T2 - 81,73,-1 - 12,3072,3224 - -26,-127,0,6,-1,67,-4,-28,0,64,0,0,&lt;/blockquote&gt;

Here is my source code for rendering the player.
[code=java]
            outStream.createFrame(81);
            outStream.writeWord(0);
            int ofs = outStream.currentOffset;
            outStream.initBitAccess();

            // method117(Stream stream)
            int updateType = 3;
            outStream.writeBits(1, 1); // Updating Player, 1 = TRUE; 0 = FALSE
            outStream.writeBits(2, updateType);

            if (updateType == 3) {
                outStream.writeBits(2, 0);
                outStream.writeBits(1, 1);
                outStream.writeBits(1, 1);
                outStream.writeBits(7, 0x20);
                outStream.writeBits(7, 0x20);
            } else if (updateType == 2) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            } else if (updateType == 1) {
                outStream.writeBits(3, -1); // Direction
            }
            // method134(Stream stream)
            int k1 = 2;
            outStream.writeBits(8, 0); // Players
            outStream.writeBits(1, 1);
            outStream.writeBits(2, k1);

            if (k1 == 1) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            } else if (k1 == 2) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            }

            outStream.writeBits(11, id);
            outStream.writeBits(1, 1); //TODO: TEST 0
            outStream.writeBits(1, 1);
            outStream.writeBits(5, 25);
            outStream.writeBits(5, 25);
            outStream.finishBitAccess();
            
            outStream.writeWord(0x40);
//            outStream.writeWord(0x40 &gt;&gt; 8);
             outStream.writeWord(0);
            outStream.writeFrameSizeWord(outStream.currentOffset - ofs);
[/code]


These go respectively with these methods from the client.
[code=java]
private void method117(Stream stream)
    {
        stream.initBitAccess();
        int j = stream.readBits(1);
        if(j == 0)
            return;
        int k = stream.readBits(2);
        if(k == 0)
        {
            anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 1)
        {
            int l = stream.readBits(3);
            myPlayer.moveInDir(false, l);
            int k1 = stream.readBits(1);
            if(k1 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 2)
        {
            int i1 = stream.readBits(3);
            myPlayer.moveInDir(true, i1);
            int l1 = stream.readBits(3);
            myPlayer.moveInDir(true, l1);
            int j2 = stream.readBits(1);
            if(j2 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 3)
        {
            plane = stream.readBits(2);
            int j1 = stream.readBits(1);
            int i2 = stream.readBits(1);
            if(i2 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            int k2 = stream.readBits(7);
            int l2 = stream.readBits(7);
            myPlayer.setPos(l2, k2, j1 == 1);
        }
    }
[/code]
[code=java]
private void method134(Stream stream)
    {
        int j = stream.readBits(8);
        if(j &lt; playerCount)
        {
            for(int k = j; k &lt; playerCount; k++)
                anIntArray840[anInt839++] = playerIndices[k];

        }
        if(j &gt; playerCount)
        {
            signlink.reporterror(myUsername + &quot; Too many players&quot; + j + &quot;&gt;&quot; + playerCount);
            throw new RuntimeException(&quot;eek&quot;);
        }
        playerCount = 0;
        for(int l = 0; l &lt; j; l++)
        {
            int i1 = playerIndices[l];
            Player player = playerArray[i1];
            int j1 = stream.readBits(1);
            if(j1 == 0)
            {
                playerIndices[playerCount++] = i1;
                player.anInt1537 = loopCycle;
            } else
            {
                int k1 = stream.readBits(2);
                if(k1 == 0)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 1)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    int l1 = stream.readBits(3);
                    player.moveInDir(false, l1);
                    int j2 = stream.readBits(1);
                    if(j2 == 1)
                        anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 2)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    int i2 = stream.readBits(3);
                    player.moveInDir(true, i2);
                    int k2 = stream.readBits(3);
                    player.moveInDir(true, k2);
                    int l2 = stream.readBits(1);
                    if(l2 == 1)
                        anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 3)
                    anIntArray840[anInt839++] = i1;
            }
        }
    }
[/code]
[code=java]
private void method91(Stream stream, int i)
    {
        while(stream.bitPosition + 10 &lt; i * 8)
        {
		System.out.println(&quot;Add Player&quot;);
            int j = stream.readBits(11);
            if(j == 2047)
                break;
            if(playerArray[j] == null)
            {
                playerArray[j] = new Player();
                if(aStreamArray895s[j] != null)
                    playerArray[j].updatePlayer(aStreamArray895s[j]);
            }
            playerIndices[playerCount++] = j;
		 System.out.println(&quot;PLAYERS: &quot; + playerCount);
            Player player = playerArray[j];
            player.anInt1537 = loopCycle;
            int k = stream.readBits(1);
            if(k == 1)
                anIntArray894[anInt893++] = j;
            int l = stream.readBits(1);
            int i1 = stream.readBits(5);
            if(i1 &gt; 15)
                i1 -= 32;
            int j1 = stream.readBits(5);
            if(j1 &gt; 15)
                j1 -= 32;
            player.setPos(myPlayer.smallX[0] + j1, myPlayer.smallY[0] + i1, l == 1);
		System.out.println(&quot;POSX: &quot; + myPlayer.smallX[0] + j1);
        }
        stream.finishBitAccess();
    }
[/code]
[code=java]
private void method49(Stream stream)
    {
        for(int j = 0; j &lt; anInt893; j++)
        {
            int k = anIntArray894[j];
            Player player = playerArray[k];
            int l = stream.readUnsignedByte();
            if((l &amp; 0x40) != 0)
                l += stream.readUnsignedByte() &lt;&lt; 8;
            method107(l, k, stream, player);
        }

    }
[/code]
Which links us to this update method in the client.
[code=java]
private void method107(int i, int j, Stream stream, Player player)
    {
        if((i &amp; 0x400) != 0)
        {
            player.anInt1543 = stream.method428();
            player.anInt1545 = stream.method428();
            player.anInt1544 = stream.method428();
            player.anInt1546 = stream.method428();
            player.anInt1547 = stream.method436() + loopCycle;
            player.anInt1548 = stream.method435() + loopCycle;
            player.anInt1549 = stream.method428();
            player.method446();
        }
        if((i &amp; 0x100) != 0)
        {
            player.anInt1520 = stream.method434();
            int k = stream.readDWord();
            player.anInt1524 = k &gt;&gt; 16;
            player.anInt1523 = loopCycle + (k &amp; 0xffff);
            player.anInt1521 = 0;
            player.anInt1522 = 0;
            if(player.anInt1523 &gt; loopCycle)
                player.anInt1521 = -1;
            if(player.anInt1520 == 65535)
                player.anInt1520 = -1;
        }
        if((i &amp; 8) != 0)
        {
            int l = stream.method434();
            if(l == 65535)
                l = -1;
            int i2 = stream.method427();
            if(l == player.anim &amp;&amp; l != -1)
            {
                int i3 = Animation.anims[l].anInt365;
                if(i3 == 1)
                {
                    player.anInt1527 = 0;
                    player.anInt1528 = 0;
                    player.anInt1529 = i2;
                    player.anInt1530 = 0;
                }
                if(i3 == 2)
                    player.anInt1530 = 0;
            } else
            if(l == -1 || player.anim == -1 || Animation.anims[l].anInt359 &gt;= Animation.anims[player.anim].anInt359)
            {
                player.anim = l;
                player.anInt1527 = 0;
                player.anInt1528 = 0;
                player.anInt1529 = i2;
                player.anInt1530 = 0;
                player.anInt1542 = player.smallXYIndex;
            }
        }
        if((i &amp; 4) != 0)
        {
            player.textSpoken = stream.readString();
            if(player.textSpoken.charAt(0) == &#39;~&#39;)
            {
                player.textSpoken = player.textSpoken.substring(1);
                pushMessage(player.textSpoken, 2, player.name);
            } else
            if(player == myPlayer)
                pushMessage(player.textSpoken, 2, player.name);
            player.anInt1513 = 0;
            player.anInt1531 = 0;
            player.textCycle = 150;
        }
        if((i &amp; 0x80) != 0)
        {
            int i1 = stream.method434();
            int j2 = stream.readUnsignedByte();
            int j3 = stream.method427();
            int k3 = stream.currentOffset;
            if(player.name != null &amp;&amp; player.visible)
            {
                long l3 = TextClass.longForName(player.name);
                boolean flag = false;
                if(j2 &lt;= 1)
                {
                    for(int i4 = 0; i4 &lt; ignoreCount; i4++)
                    {
                        if(ignoreListAsLongs[i4] != l3)
                            continue;
                        flag = true;
                        break;
                    }

                }
                if(!flag &amp;&amp; anInt1251 == 0)
                    try
                    {
                        aStream_834.currentOffset = 0;
                        stream.method442(j3, 0, aStream_834.buffer);
                        aStream_834.currentOffset = 0;
                        String s = TextInput.method525(j3, aStream_834);
                        s = Censor.doCensor(s);
                        player.textSpoken = s;
                        player.anInt1513 = i1 &gt;&gt; 8;
	                    player.privelage = j2;

                        //entityMessage(player);
	
                        player.anInt1531 = i1 &amp; 0xff;
                        player.textCycle = 150;
                        if(j2 == 2 || j2 == 3)
                            pushMessage(s, 1, &quot;@cr2@&quot; + player.name);
                        else
                        if(j2 == 1)
                            pushMessage(s, 1, &quot;@cr1@&quot; + player.name);
                        else
                            pushMessage(s, 2, player.name);
                    }
                    catch(Exception exception)
                    {
                        signlink.reporterror(&quot;cde2&quot;);
                    }
            }
            stream.currentOffset = k3 + j3;
        }
        if((i &amp; 1) != 0)
        {
            player.interactingEntity = stream.method434();
            if(player.interactingEntity == 65535)
                player.interactingEntity = -1;
        }
        if((i &amp; 0x10) != 0)
        {
            int j1 = stream.method427();
            byte abyte0[] = new byte[j1];
            Stream stream_1 = new Stream(abyte0);
            stream.readBytes(j1, 0, abyte0);
            aStreamArray895s[j] = stream_1;
            player.updatePlayer(stream_1);
        }
        if((i &amp; 2) != 0)
        {
            player.anInt1538 = stream.method436();
            player.anInt1539 = stream.method434();
        }
        if((i &amp; 0x20) != 0)
        {
            int k1 = stream.readUnsignedByte();
            int k2 = stream.method426();
            player.updateHitData(k2, k1, loopCycle);
            player.loopCycleStatus = loopCycle + 300;
            player.currentHealth = stream.method427();
            player.maxHealth = stream.readUnsignedByte();
        }
        if((i &amp; 0x200) != 0)
        {
            int l1 = stream.readUnsignedByte();
            int l2 = stream.method428();
            player.updateHitData(l2, l1, loopCycle);
            player.loopCycleStatus = loopCycle + 300;
            player.currentHealth = stream.readUnsignedByte();
            player.maxHealth = stream.method427();
        }
    }
[/code]

I&#39;ve tryed to write the correct bytes when the client requests them, maybe there&#39;s something obvious I&#39;ve missed out, but I can&#39;t seem to see why I&#39;m getting a packet size mismatch.

Thanks.</description>
    
    <lastBuildDate>Fri, 16 Jul 2010 12:50:20 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/player-rendering-more-advanced/349397.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Player Rendering [More Advanced]</title>
        <dc:creator><![CDATA[@Epic_Steve Epic Steve]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/epic_steve">@Epic_Steve</a> wrote:</p>
          <blockquote>
              <p>I’m using the “Fly thought runescape” source and trying to have the player rendered but so far, have failed. This is why.</p>
<blockquote>Error: Error packet size mismatch in getplayer pos:7 psize:8
Error: T2 - 81,73,-1 - 8,3040,3192 - 0,64,0,6,-1,67,-4,-28,
<p>Error: Error packet size mismatch in getplayer pos:11 psize:10<br>
Error: T2 - 81,73,-1 - 10,3072,3224 - -26,-127,0,6,-1,67,-4,-28,0,64,</p>
<p>Error: Error packet size mismatch in getplayer pos:14 psize:12<br>
Error: T2 - 81,73,-1 - 12,3072,3224 - -26,-127,0,6,-1,67,-4,-28,0,64,0,0,</p>
</blockquote>
<p>Here is my source code for rendering the player.</p>
<pre><code class="lang-auto">            outStream.createFrame(81);
            outStream.writeWord(0);
            int ofs = outStream.currentOffset;
            outStream.initBitAccess();

            // method117(Stream stream)
            int updateType = 3;
            outStream.writeBits(1, 1); // Updating Player, 1 = TRUE; 0 = FALSE
            outStream.writeBits(2, updateType);

            if (updateType == 3) {
                outStream.writeBits(2, 0);
                outStream.writeBits(1, 1);
                outStream.writeBits(1, 1);
                outStream.writeBits(7, 0x20);
                outStream.writeBits(7, 0x20);
            } else if (updateType == 2) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            } else if (updateType == 1) {
                outStream.writeBits(3, -1); // Direction
            }
            // method134(Stream stream)
            int k1 = 2;
            outStream.writeBits(8, 0); // Players
            outStream.writeBits(1, 1);
            outStream.writeBits(2, k1);

            if (k1 == 1) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            } else if (k1 == 2) {
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(3, -1); // Direction
                outStream.writeBits(1, 1);
            }

            outStream.writeBits(11, id);
            outStream.writeBits(1, 1); //TODO: TEST 0
            outStream.writeBits(1, 1);
            outStream.writeBits(5, 25);
            outStream.writeBits(5, 25);
            outStream.finishBitAccess();
            
            outStream.writeWord(0x40);
//            outStream.writeWord(0x40 &gt;&gt; 8);
             outStream.writeWord(0);
            outStream.writeFrameSizeWord(outStream.currentOffset - ofs);</code></pre>
<p>These go respectively with these methods from the client.</p>
<pre><code class="lang-auto">private void method117(Stream stream)
    {
        stream.initBitAccess();
        int j = stream.readBits(1);
        if(j == 0)
            return;
        int k = stream.readBits(2);
        if(k == 0)
        {
            anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 1)
        {
            int l = stream.readBits(3);
            myPlayer.moveInDir(false, l);
            int k1 = stream.readBits(1);
            if(k1 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 2)
        {
            int i1 = stream.readBits(3);
            myPlayer.moveInDir(true, i1);
            int l1 = stream.readBits(3);
            myPlayer.moveInDir(true, l1);
            int j2 = stream.readBits(1);
            if(j2 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            return;
        }
        if(k == 3)
        {
            plane = stream.readBits(2);
            int j1 = stream.readBits(1);
            int i2 = stream.readBits(1);
            if(i2 == 1)
                anIntArray894[anInt893++] = myPlayerIndex;
            int k2 = stream.readBits(7);
            int l2 = stream.readBits(7);
            myPlayer.setPos(l2, k2, j1 == 1);
        }
    }</code></pre>
<pre><code class="lang-auto">private void method134(Stream stream)
    {
        int j = stream.readBits(8);
        if(j &lt; playerCount)
        {
            for(int k = j; k &lt; playerCount; k++)
                anIntArray840[anInt839++] = playerIndices[k];

        }
        if(j &gt; playerCount)
        {
            signlink.reporterror(myUsername + " Too many players" + j + "&gt;" + playerCount);
            throw new RuntimeException("eek");
        }
        playerCount = 0;
        for(int l = 0; l &lt; j; l++)
        {
            int i1 = playerIndices[l];
            Player player = playerArray[i1];
            int j1 = stream.readBits(1);
            if(j1 == 0)
            {
                playerIndices[playerCount++] = i1;
                player.anInt1537 = loopCycle;
            } else
            {
                int k1 = stream.readBits(2);
                if(k1 == 0)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 1)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    int l1 = stream.readBits(3);
                    player.moveInDir(false, l1);
                    int j2 = stream.readBits(1);
                    if(j2 == 1)
                        anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 2)
                {
                    playerIndices[playerCount++] = i1;
                    player.anInt1537 = loopCycle;
                    int i2 = stream.readBits(3);
                    player.moveInDir(true, i2);
                    int k2 = stream.readBits(3);
                    player.moveInDir(true, k2);
                    int l2 = stream.readBits(1);
                    if(l2 == 1)
                        anIntArray894[anInt893++] = i1;
                } else
                if(k1 == 3)
                    anIntArray840[anInt839++] = i1;
            }
        }
    }</code></pre>
<pre><code class="lang-auto">private void method91(Stream stream, int i)
    {
        while(stream.bitPosition + 10 &lt; i * 8)
        {
		System.out.println("Add Player");
            int j = stream.readBits(11);
            if(j == 2047)
                break;
            if(playerArray[j] == null)
            {
                playerArray[j] = new Player();
                if(aStreamArray895s[j] != null)
                    playerArray[j].updatePlayer(aStreamArray895s[j]);
            }
            playerIndices[playerCount++] = j;
		 System.out.println("PLAYERS: " + playerCount);
            Player player = playerArray[j];
            player.anInt1537 = loopCycle;
            int k = stream.readBits(1);
            if(k == 1)
                anIntArray894[anInt893++] = j;
            int l = stream.readBits(1);
            int i1 = stream.readBits(5);
            if(i1 &gt; 15)
                i1 -= 32;
            int j1 = stream.readBits(5);
            if(j1 &gt; 15)
                j1 -= 32;
            player.setPos(myPlayer.smallX[0] + j1, myPlayer.smallY[0] + i1, l == 1);
		System.out.println("POSX: " + myPlayer.smallX[0] + j1);
        }
        stream.finishBitAccess();
    }</code></pre>
<pre><code class="lang-auto">private void method49(Stream stream)
    {
        for(int j = 0; j &lt; anInt893; j++)
        {
            int k = anIntArray894[j];
            Player player = playerArray[k];
            int l = stream.readUnsignedByte();
            if((l &amp; 0x40) != 0)
                l += stream.readUnsignedByte() &lt;&lt; 8;
            method107(l, k, stream, player);
        }

    }</code></pre>
<p>Which links us to this update method in the client.</p>
<pre><code class="lang-auto">private void method107(int i, int j, Stream stream, Player player)
    {
        if((i &amp; 0x400) != 0)
        {
            player.anInt1543 = stream.method428();
            player.anInt1545 = stream.method428();
            player.anInt1544 = stream.method428();
            player.anInt1546 = stream.method428();
            player.anInt1547 = stream.method436() + loopCycle;
            player.anInt1548 = stream.method435() + loopCycle;
            player.anInt1549 = stream.method428();
            player.method446();
        }
        if((i &amp; 0x100) != 0)
        {
            player.anInt1520 = stream.method434();
            int k = stream.readDWord();
            player.anInt1524 = k &gt;&gt; 16;
            player.anInt1523 = loopCycle + (k &amp; 0xffff);
            player.anInt1521 = 0;
            player.anInt1522 = 0;
            if(player.anInt1523 &gt; loopCycle)
                player.anInt1521 = -1;
            if(player.anInt1520 == 65535)
                player.anInt1520 = -1;
        }
        if((i &amp; 8) != 0)
        {
            int l = stream.method434();
            if(l == 65535)
                l = -1;
            int i2 = stream.method427();
            if(l == player.anim &amp;&amp; l != -1)
            {
                int i3 = Animation.anims[l].anInt365;
                if(i3 == 1)
                {
                    player.anInt1527 = 0;
                    player.anInt1528 = 0;
                    player.anInt1529 = i2;
                    player.anInt1530 = 0;
                }
                if(i3 == 2)
                    player.anInt1530 = 0;
            } else
            if(l == -1 || player.anim == -1 || Animation.anims[l].anInt359 &gt;= Animation.anims[player.anim].anInt359)
            {
                player.anim = l;
                player.anInt1527 = 0;
                player.anInt1528 = 0;
                player.anInt1529 = i2;
                player.anInt1530 = 0;
                player.anInt1542 = player.smallXYIndex;
            }
        }
        if((i &amp; 4) != 0)
        {
            player.textSpoken = stream.readString();
            if(player.textSpoken.charAt(0) == '~')
            {
                player.textSpoken = player.textSpoken.substring(1);
                pushMessage(player.textSpoken, 2, player.name);
            } else
            if(player == myPlayer)
                pushMessage(player.textSpoken, 2, player.name);
            player.anInt1513 = 0;
            player.anInt1531 = 0;
            player.textCycle = 150;
        }
        if((i &amp; 0x80) != 0)
        {
            int i1 = stream.method434();
            int j2 = stream.readUnsignedByte();
            int j3 = stream.method427();
            int k3 = stream.currentOffset;
            if(player.name != null &amp;&amp; player.visible)
            {
                long l3 = TextClass.longForName(player.name);
                boolean flag = false;
                if(j2 &lt;= 1)
                {
                    for(int i4 = 0; i4 &lt; ignoreCount; i4++)
                    {
                        if(ignoreListAsLongs[i4] != l3)
                            continue;
                        flag = true;
                        break;
                    }

                }
                if(!flag &amp;&amp; anInt1251 == 0)
                    try
                    {
                        aStream_834.currentOffset = 0;
                        stream.method442(j3, 0, aStream_834.buffer);
                        aStream_834.currentOffset = 0;
                        String s = TextInput.method525(j3, aStream_834);
                        s = Censor.doCensor(s);
                        player.textSpoken = s;
                        player.anInt1513 = i1 &gt;&gt; 8;
	                    player.privelage = j2;

                        //entityMessage(player);
	
                        player.anInt1531 = i1 &amp; 0xff;
                        player.textCycle = 150;
                        if(j2 == 2 || j2 == 3)
                            pushMessage(s, 1, "@cr2@" + player.name);
                        else
                        if(j2 == 1)
                            pushMessage(s, 1, "@cr1@" + player.name);
                        else
                            pushMessage(s, 2, player.name);
                    }
                    catch(Exception exception)
                    {
                        signlink.reporterror("cde2");
                    }
            }
            stream.currentOffset = k3 + j3;
        }
        if((i &amp; 1) != 0)
        {
            player.interactingEntity = stream.method434();
            if(player.interactingEntity == 65535)
                player.interactingEntity = -1;
        }
        if((i &amp; 0x10) != 0)
        {
            int j1 = stream.method427();
            byte abyte0[] = new byte[j1];
            Stream stream_1 = new Stream(abyte0);
            stream.readBytes(j1, 0, abyte0);
            aStreamArray895s[j] = stream_1;
            player.updatePlayer(stream_1);
        }
        if((i &amp; 2) != 0)
        {
            player.anInt1538 = stream.method436();
            player.anInt1539 = stream.method434();
        }
        if((i &amp; 0x20) != 0)
        {
            int k1 = stream.readUnsignedByte();
            int k2 = stream.method426();
            player.updateHitData(k2, k1, loopCycle);
            player.loopCycleStatus = loopCycle + 300;
            player.currentHealth = stream.method427();
            player.maxHealth = stream.readUnsignedByte();
        }
        if((i &amp; 0x200) != 0)
        {
            int l1 = stream.readUnsignedByte();
            int l2 = stream.method428();
            player.updateHitData(l2, l1, loopCycle);
            player.loopCycleStatus = loopCycle + 300;
            player.currentHealth = stream.readUnsignedByte();
            player.maxHealth = stream.method427();
        }
    }</code></pre>
<p>I’ve tryed to write the correct bytes when the client requests them, maybe there’s something obvious I’ve missed out, but I can’t seem to see why I’m getting a packet size mismatch.</p>
<p>Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-rendering-more-advanced/349397/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-rendering-more-advanced/349397/1</link>
        <pubDate>Fri, 16 Jul 2010 12:50:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-349397-1</guid>
        <source url="https://forum.moparisthebest.com/t/player-rendering-more-advanced/349397.rss">Player Rendering [More Advanced]</source>
      </item>
  </channel>
</rss>
