<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>String (optimized)</title>
    <link>https://forum.moparisthebest.com/t/string-optimized/403719</link>
    <description>hi.

before i rewrote this piece of crap (even thought it still might be a piece of crap) i noticed how sloppy it was.  i now go by google&#39;s c++ style because it&#39;s really good, and i don&#39;t have to keep switching.  now when i need a style reference, i can just open that page and see what i need to do.  this has always been a problem for me, and my code viewers.  luckily i finally found the time to fix it.

i totally rewrote my string class, because i felt that if i didn&#39;t, it would just suck even more when really smart people see it.  now, hopefully, it sucks even less.  that is up to the more experienced coders to decide.  super_ obviously knows that it is horrible and i should switch to std::string a.s.a.p :3.

as you skim over it, you&#39;ll notice pretty much everything is the same... lol.  i didn&#39;t change anything big, i just optimized it =-); plus it depends on the standard c string library to back it up, so yeah...  i might write all the functions myself soon.

the documentation will probably confuse you because as i was typing it, some of it almost confused me too...  i am not very good at documenting my own code - not that i don&#39;t know what it does, it&#39;s just that i am not very good with words.

[b][i][u]main.cc[/u][/i][/b]
[code=cpp]
#include &lt;iostream&gt;
#include &quot;./tu/string.h&quot;

int main(int argc, char *argv[]) {
  tu::String string(&quot;Hello, world!&quot;);
  
  // This should print 13
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // This should print &quot;Hello, world!&quot;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  
  // This should print lowercase &#39;L&#39;
  std::cout &lt;&lt; string.CharAtIndex(3) &lt;&lt; std::endl;

  // True - prints &quot;True bad&quot;
  // According to ISO C++, this is bad.
  if(string == &quot;Hello, world!&quot;) {
    std::cout &lt;&lt; &quot;True bad&quot; &lt;&lt; std::endl;
  }
  
  // True - prints &quot;True 1&quot;
  if(string.StartsWithIgnoreCase(&quot;HEL&quot;)) {
    std::cout &lt;&lt; &quot;True 1&quot; &lt;&lt; std::endl;
  }
  
  // False - prints nothing!
  if(string.StartsWith(&quot;h&quot;)) {
    std::cout &lt;&lt; &quot;True ???&quot; &lt;&lt; std::endl;
  }
  
  // True - prints &quot;True 2&quot;
  if(string.Equals(&quot;Hello, world!&quot;)) {
    std::cout &lt;&lt; &quot;True 2&quot; &lt;&lt; std::endl;
  }
  
  // True - prints &quot;True 3&quot;
  if(string.EqualsIgnoreCase(&quot;HELLO, WoRlD!&quot;)) {
    std::cout &lt;&lt; &quot;True 3&quot; &lt;&lt; std::endl;
  }
  
  // Assign and print &quot;ok&quot; and again and then the length
  string.Assign(&quot;ok&quot;);
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // Assign and print &quot;ok, sure thing&quot; and again and then the length
  string.Append(&quot;, sure thing&quot;);
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // This should print nothing then nothing and then a 0
  string.Clear();
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  return 0;
}
[/code]

[b][i][u]string.cc[/u][/i][/b]
[code=cpp]
#include &quot;./string.h&quot;
#include &lt;cstring&gt;

namespace tu {

// Constructors/destructors

String::String() {
  data_ = new char[1]; // Allocate a new character.
  *data_ = &#39;\0&#39;; // Set the single character to null terminator.
  length_ = 0; // Initalize the length.
}

String::String(String &amp;assign) {
  data_ = new char[assign.length() + 1]; // Allocate a new string size.
  strcpy(data_, assign.data()); // Assign the assignment string to the data buffer.
  length_ = assign.length(); // Optimize the length.
}

String::String(char *assign) {
  data_ = new char[strlen(assign) + 1];
  strcpy(data_, assign);
  length_ = strlen(assign);
}

String::~String() {
  delete [] data_; // Deallocate the allocated data.
}

// Overloaded assignment operators - refer to documentation above.

String &amp;String::operator=(String &amp;assign) {
  strcpy(data_, assign.data()); // Assign.
  return *this; // Return the instance.
}

String &amp;String::operator=(char *assign) {
  strcpy(data_, assign);
  return *this;
}

// Bad

bool String::operator==(String &amp;string) {
  if(strcmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::operator==(char *string) {
  if(strcmp(data_, string) != 0) {
    return false;
  }
  return true;
}

// Pure assignment methods

void String::Clear() {
  data_ = new char[1];
  *data_ = &#39;\0&#39;;
  length_ = 0;
}

void String::Append(String &amp;string) {
  if(string.length() &lt;= 0) {
    return;
  }
  
  char *temp = new char[(string.length() + length_) + 1];
  
  if(data_) {
    strcpy(temp, data_);
    delete [] data_;
  }
  
  strcat(temp, string);
  data_ = temp;
  length_ += strlen(string);
}

void String::Append(char *string) {
  if(strlen(string) &lt;= 0) {
    return;
  }
  
  char *temp = new char[(strlen(string) + length_) + 1];
  
  if(data_) {
    strcpy(temp, data_);
    delete [] data_;
  }
  
  strcat(temp, string);
  data_ = temp;
  length_ += strlen(string);
}

void String::Assign(String &amp;string) {
  if(length_ != string.length()) {
    if(data_) {
      delete [] data_;
    }

    data_ = new char[string.length() + 1];
    length_ = string.length();
  }

  strcpy(data_, string.data());
}

void String::Assign(char *string) {
  if(length_ != strlen(string)) {
    if(data_) {
      delete [] data_;
    }

    data_ = new char[strlen(string) + 1];
    length_ = strlen(string);
  }

  strcpy(data_, string);
}

// Check and return true/false methods

bool String::Equals(String &amp;string) {
  if(strcmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::Equals(char *string) {
  if(strcmp(data_, string) != 0) {
    return false;
  }
  return true;
}

bool String::EqualsIgnoreCase(String &amp;string) {
  if(stricmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::EqualsIgnoreCase(char *string) {
  if(stricmp(data_, string) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWith(String &amp;string) {
  if(strncmp(data_, string.data(), string.length()) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWith(char *string) {
  if(strncmp(data_, string, strlen(string)) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWithIgnoreCase(String &amp;string) {
  if(strnicmp(data_, string.data(), string.length()) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWithIgnoreCase(char *string) {
  if(strnicmp(data_, string, strlen(string)) != 0) {
    return false;
  }
  return true;
}

// Abstract return methods

char String::CharAtIndex(int index) {
  return data_[index];
}

}
[/code]


[b][i][u]string.h[/u][/i][/b]
[code=cpp]
#ifndef TU_STRING_H
#define TU_STRING_H

namespace tu {

// Represents an array of characters.
// - Relies on the standard c string library.
// Author: Tu
class String {
 public:
   // Constructors/destructors
   String(); // Initializes the instance&#39;s data buffer to a single-character null terminator.
   explicit String(String &amp;assign); // Initializes the instance&#39;s data buffer to a String object.
   explicit String(char *assign); // Initializes the instance&#39;s data buffer to a *string.
   ~String(); // Deallocate the memory that the data buffer has allocated.
   
   // Overloaded assignment operators - refer to documentation above.
   String &amp;operator=(String &amp;assign);
   String &amp;operator=(char *assign);
   
   // Bad, but it works... :3.
   bool operator==(String &amp;string);
   bool operator==(char *string);
   
   // Pure assignment methods
   void Clear(); // Deletes the characters inside of the character array (string) and resets the length.
   void Append(String &amp;string); // Appends another instance&#39;s data to the current instance&#39;s data.
   void Append(char *string); // Appends the instance&#39;s data to a *string.
   void Assign(String &amp;string); // Assigns the current instance&#39;s data equivalent to another instance&#39;s data.
   void Assign(char *string); // Assigns the current instance&#39;s data to a *string.
   
   // Check and return true/false methods
   // strcmp, stricmp, strncmp and strnicmp compares strings lexicographically.
   bool Equals(String &amp;string); // Compares the instance&#39;s data to another instance&#39;s data.
   bool Equals(char *string); // Compares the instance&#39;s data to a *string.
   bool EqualsIgnoreCase(String &amp;string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool EqualsIgnoreCase(char *string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool StartsWith(String &amp;string); // Compares the instance&#39;s data to another instance&#39;s data index&#39;s size.
   bool StartsWith(char *string); // Compares the instance&#39;s data to another instance&#39;s data index&#39;s size.
   bool StartsWithIgnoreCase(String &amp;string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool StartsWithIgnoreCase(char *string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   
   // Abstract return methods
   char CharAtIndex(int index); // Returns the character of index in the character array (string).
   
   // Essential return methods
   operator char*() const {return data_;}
   char *data() const {return data_;}
   unsigned int length() const {return length_;}
   
 private:
   char *data_; // The data buffer.
   unsigned int length_; // The number of characters inside of the string literal.
};

}

#endif
[/code]</description>
    
    <lastBuildDate>Wed, 13 Jul 2011 03:59:21 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/string-optimized/403719.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>String (optimized)</title>
        <dc:creator><![CDATA[@Tu1 Tu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tu1">@Tu1</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="403719">
<div class="title">
<div class="quote-controls"></div>
 Rix_:</div>
<blockquote>
<p>Did you compile this code? Have you ran tests with your code?</p>
</blockquote>
</aside>
<p>yeah i c+p’d the debug program i am testing it with.  what i am testing is just functions, soon i will test the important string features, like string-to-hex, then i am going to rewrite the functions myself so i wont have to rely on the c string library.</p>
<p>hopefully it will be good enough just for me to use as an alternative to managing the “low-level” side of strings.  i can just create a new string object and do w/e i want with it without having to make a damn utility class created only for an extended string functionality.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/string-optimized/403719/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/string-optimized/403719/5</link>
        <pubDate>Wed, 13 Jul 2011 03:59:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-403719-5</guid>
        <source url="https://forum.moparisthebest.com/t/string-optimized/403719.rss">String (optimized)</source>
      </item>
      <item>
        <title>String (optimized)</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>Did you compile this code? Have you ran tests with your code?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/string-optimized/403719/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/string-optimized/403719/4</link>
        <pubDate>Wed, 13 Jul 2011 02:02:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-403719-4</guid>
        <source url="https://forum.moparisthebest.com/t/string-optimized/403719.rss">String (optimized)</source>
      </item>
      <item>
        <title>String (optimized)</title>
        <dc:creator><![CDATA[@Tu1 Tu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tu1">@Tu1</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="403719">
<div class="title">
<div class="quote-controls"></div>
 super_:</div>
<blockquote>
<p>std::string</p>
</blockquote>
</aside>
<p>i know…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/string-optimized/403719/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/string-optimized/403719/3</link>
        <pubDate>Tue, 12 Jul 2011 19:34:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-403719-3</guid>
        <source url="https://forum.moparisthebest.com/t/string-optimized/403719.rss">String (optimized)</source>
      </item>
      <item>
        <title>String (optimized)</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>std::string</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/string-optimized/403719/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/string-optimized/403719/2</link>
        <pubDate>Tue, 12 Jul 2011 16:34:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-403719-2</guid>
        <source url="https://forum.moparisthebest.com/t/string-optimized/403719.rss">String (optimized)</source>
      </item>
      <item>
        <title>String (optimized)</title>
        <dc:creator><![CDATA[@Tu1 Tu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tu1">@Tu1</a> wrote:</p>
          <blockquote>
              <p>hi.</p>
<p>before i rewrote this piece of crap (even thought it still might be a piece of crap) i noticed how sloppy it was.  i now go by google’s c++ style because it’s really good, and i don’t have to keep switching.  now when i need a style reference, i can just open that page and see what i need to do.  this has always been a problem for me, and my code viewers.  luckily i finally found the time to fix it.</p>
<p>i totally rewrote my string class, because i felt that if i didn’t, it would just suck even more when really smart people see it.  now, hopefully, it sucks even less.  that is up to the more experienced coders to decide.  super_ obviously knows that it is horrible and i should switch to std::string a.s.a.p :3.</p>
<p>as you skim over it, you’ll notice pretty much everything is the same… lol.  i didn’t change anything big, i just optimized it =-); plus it depends on the standard c string library to back it up, so yeah…  i might write all the functions myself soon.</p>
<p>the documentation will probably confuse you because as i was typing it, some of it almost confused me too…  i am not very good at documenting my own code - not that i don’t know what it does, it’s just that i am not very good with words.</p>
<p><span class="bbcode-b"><span class="bbcode-i"><span class="bbcode-u">main.cc</span></span></span></p>
<pre><code class="lang-auto">#include &lt;iostream&gt;
#include "./tu/string.h"

int main(int argc, char *argv[]) {
  tu::String string("Hello, world!");
  
  // This should print 13
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // This should print "Hello, world!"
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  
  // This should print lowercase 'L'
  std::cout &lt;&lt; string.CharAtIndex(3) &lt;&lt; std::endl;

  // True - prints "True bad"
  // According to ISO C++, this is bad.
  if(string == "Hello, world!") {
    std::cout &lt;&lt; "True bad" &lt;&lt; std::endl;
  }
  
  // True - prints "True 1"
  if(string.StartsWithIgnoreCase("HEL")) {
    std::cout &lt;&lt; "True 1" &lt;&lt; std::endl;
  }
  
  // False - prints nothing!
  if(string.StartsWith("h")) {
    std::cout &lt;&lt; "True ???" &lt;&lt; std::endl;
  }
  
  // True - prints "True 2"
  if(string.Equals("Hello, world!")) {
    std::cout &lt;&lt; "True 2" &lt;&lt; std::endl;
  }
  
  // True - prints "True 3"
  if(string.EqualsIgnoreCase("HELLO, WoRlD!")) {
    std::cout &lt;&lt; "True 3" &lt;&lt; std::endl;
  }
  
  // Assign and print "ok" and again and then the length
  string.Assign("ok");
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // Assign and print "ok, sure thing" and again and then the length
  string.Append(", sure thing");
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  // This should print nothing then nothing and then a 0
  string.Clear();
  std::cout &lt;&lt; string &lt;&lt; std::endl;
  std::cout &lt;&lt; string.data() &lt;&lt; std::endl;
  std::cout &lt;&lt; string.length() &lt;&lt; std::endl;
  
  return 0;
}</code></pre>
<p><span class="bbcode-b"><span class="bbcode-i"><span class="bbcode-u">string.cc</span></span></span></p>
<pre><code class="lang-auto">#include "./string.h"
#include &lt;cstring&gt;

namespace tu {

// Constructors/destructors

String::String() {
  data_ = new char[1]; // Allocate a new character.
  *data_ = '\0'; // Set the single character to null terminator.
  length_ = 0; // Initalize the length.
}

String::String(String &amp;assign) {
  data_ = new char[assign.length() + 1]; // Allocate a new string size.
  strcpy(data_, assign.data()); // Assign the assignment string to the data buffer.
  length_ = assign.length(); // Optimize the length.
}

String::String(char *assign) {
  data_ = new char[strlen(assign) + 1];
  strcpy(data_, assign);
  length_ = strlen(assign);
}

String::~String() {
  delete [] data_; // Deallocate the allocated data.
}

// Overloaded assignment operators - refer to documentation above.

String &amp;String::operator=(String &amp;assign) {
  strcpy(data_, assign.data()); // Assign.
  return *this; // Return the instance.
}

String &amp;String::operator=(char *assign) {
  strcpy(data_, assign);
  return *this;
}

// Bad

bool String::operator==(String &amp;string) {
  if(strcmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::operator==(char *string) {
  if(strcmp(data_, string) != 0) {
    return false;
  }
  return true;
}

// Pure assignment methods

void String::Clear() {
  data_ = new char[1];
  *data_ = '\0';
  length_ = 0;
}

void String::Append(String &amp;string) {
  if(string.length() &lt;= 0) {
    return;
  }
  
  char *temp = new char[(string.length() + length_) + 1];
  
  if(data_) {
    strcpy(temp, data_);
    delete [] data_;
  }
  
  strcat(temp, string);
  data_ = temp;
  length_ += strlen(string);
}

void String::Append(char *string) {
  if(strlen(string) &lt;= 0) {
    return;
  }
  
  char *temp = new char[(strlen(string) + length_) + 1];
  
  if(data_) {
    strcpy(temp, data_);
    delete [] data_;
  }
  
  strcat(temp, string);
  data_ = temp;
  length_ += strlen(string);
}

void String::Assign(String &amp;string) {
  if(length_ != string.length()) {
    if(data_) {
      delete [] data_;
    }

    data_ = new char[string.length() + 1];
    length_ = string.length();
  }

  strcpy(data_, string.data());
}

void String::Assign(char *string) {
  if(length_ != strlen(string)) {
    if(data_) {
      delete [] data_;
    }

    data_ = new char[strlen(string) + 1];
    length_ = strlen(string);
  }

  strcpy(data_, string);
}

// Check and return true/false methods

bool String::Equals(String &amp;string) {
  if(strcmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::Equals(char *string) {
  if(strcmp(data_, string) != 0) {
    return false;
  }
  return true;
}

bool String::EqualsIgnoreCase(String &amp;string) {
  if(stricmp(data_, string.data()) != 0) {
    return false;
  }
  return true;
}

bool String::EqualsIgnoreCase(char *string) {
  if(stricmp(data_, string) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWith(String &amp;string) {
  if(strncmp(data_, string.data(), string.length()) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWith(char *string) {
  if(strncmp(data_, string, strlen(string)) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWithIgnoreCase(String &amp;string) {
  if(strnicmp(data_, string.data(), string.length()) != 0) {
    return false;
  }
  return true;
}

bool String::StartsWithIgnoreCase(char *string) {
  if(strnicmp(data_, string, strlen(string)) != 0) {
    return false;
  }
  return true;
}

// Abstract return methods

char String::CharAtIndex(int index) {
  return data_[index];
}

}</code></pre>
<p><span class="bbcode-b"><span class="bbcode-i"><span class="bbcode-u">string.h</span></span></span></p>
<pre><code class="lang-auto">#ifndef TU_STRING_H
#define TU_STRING_H

namespace tu {

// Represents an array of characters.
// - Relies on the standard c string library.
// Author: Tu
class String {
 public:
   // Constructors/destructors
   String(); // Initializes the instance's data buffer to a single-character null terminator.
   explicit String(String &amp;assign); // Initializes the instance's data buffer to a String object.
   explicit String(char *assign); // Initializes the instance's data buffer to a *string.
   ~String(); // Deallocate the memory that the data buffer has allocated.
   
   // Overloaded assignment operators - refer to documentation above.
   String &amp;operator=(String &amp;assign);
   String &amp;operator=(char *assign);
   
   // Bad, but it works... :3.
   bool operator==(String &amp;string);
   bool operator==(char *string);
   
   // Pure assignment methods
   void Clear(); // Deletes the characters inside of the character array (string) and resets the length.
   void Append(String &amp;string); // Appends another instance's data to the current instance's data.
   void Append(char *string); // Appends the instance's data to a *string.
   void Assign(String &amp;string); // Assigns the current instance's data equivalent to another instance's data.
   void Assign(char *string); // Assigns the current instance's data to a *string.
   
   // Check and return true/false methods
   // strcmp, stricmp, strncmp and strnicmp compares strings lexicographically.
   bool Equals(String &amp;string); // Compares the instance's data to another instance's data.
   bool Equals(char *string); // Compares the instance's data to a *string.
   bool EqualsIgnoreCase(String &amp;string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool EqualsIgnoreCase(char *string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool StartsWith(String &amp;string); // Compares the instance's data to another instance's data index's size.
   bool StartsWith(char *string); // Compares the instance's data to another instance's data index's size.
   bool StartsWithIgnoreCase(String &amp;string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   bool StartsWithIgnoreCase(char *string); // Refer to the documentation above, however, this overloaded function ignores captial letters.
   
   // Abstract return methods
   char CharAtIndex(int index); // Returns the character of index in the character array (string).
   
   // Essential return methods
   operator char*() const {return data_;}
   char *data() const {return data_;}
   unsigned int length() const {return length_;}
   
 private:
   char *data_; // The data buffer.
   unsigned int length_; // The number of characters inside of the string literal.
};

}

#endif</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/string-optimized/403719/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/string-optimized/403719/1</link>
        <pubDate>Tue, 12 Jul 2011 08:18:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-403719-1</guid>
        <source url="https://forum.moparisthebest.com/t/string-optimized/403719.rss">String (optimized)</source>
      </item>
  </channel>
</rss>
