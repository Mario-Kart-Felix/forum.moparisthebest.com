<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Socklot</title>
    <link>https://forum.moparisthebest.com/t/socklot/236339</link>
    <description>I&#39;m trying to make this lottery-like program, where the user is given a random number, the server(user) sends a message that we are ready to the client. The client itself is just like the server, human controlled, gets a random number also, but will be notified when someone is ready so that it can send the correct number back. If it matches the users, the user wins, if not, loses. 

Here&#39;s what I have done, I know that this whole thing isn&#39;t very hard to do but I suck. This is supposed to be the server. WHAT AM I DOING WRONG?

[code=cpp]#include &lt;iostream&gt;
#include &lt;cstdio&gt;
#include &lt;windows.h&gt;
#include &lt;winsock.h&gt;

#define NETWORK_ERROR -1
#define NETWORK_OK     0

using namespace std;

void ReportError(int, const char *);

int main()
{
    WORD sockVersion;
	WSADATA wsaData;
	int nret;
	
	sockVersion = MAKEWORD(2, 2);	

	WSAStartup(sockVersion, &amp;wsaData);

    cout &lt;&lt; &quot;SOCKLOT\n&quot;;
    cout &lt;&lt; &quot;-------\n&quot;;
    cout &lt;&lt; &quot;You will be given a random number between 0 and 100\n&quot;;
    cout &lt;&lt; &quot;To win, you must get the same number as the client.\n&quot;;
    cout &lt;&lt; &quot;The correct number will be sent by the client.\n&quot;;
    cout &lt;&lt; &quot;If that doesn&#39;t happen, nobody wins.\n&quot;;
    cout &lt;&lt; &quot;Please press enter to begin.\n&quot;;
    cout &lt;&lt; &quot;-------\n&quot;;
    getchar();
    cout &lt;&lt; &quot;Processing...\n&quot;;
    Sleep(3000);
    srand(time(0));
    cout &lt;&lt; &quot;Your number: &quot; &lt;&lt; rand() % 100 + 1 &lt;&lt; endl;
    cout &lt;&lt; &quot;Waiting for correct number from client...&quot;;
    
	LPHOSTENT hostEntry;

	hostEntry = gethostbyname(&quot;localhost&quot;);

	if (!hostEntry)
	{
		nret = WSAGetLastError();
		ReportError(nret, &quot;gethostbyname()&quot;);

		WSACleanup();
		return NETWORK_ERROR;
	}

	SOCKET lotserv;
	lotserv = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

	if (lotserv == INVALID_SOCKET)
	{
		nret = WSAGetLastError();
		ReportError(nret, &quot;socket()&quot;);

		WSACleanup();
		return NETWORK_ERROR;
	}
	
	SOCKADDR_IN lots;
	lots.sin_family = AF_INET;
	lots.sin_addr.s_addr = INADDR_ANY;
	lots.sin_port = htons(23000);	
	
	nret = bind(lotserv, (LPSOCKADDR)&amp;lots, sizeof(struct sockaddr));
	
	if (nret == SOCKET_ERROR)
	{
		nret = WSAGetLastError();
		ReportError(nret, &quot;bind()&quot;);

		WSACleanup();
		return NETWORK_ERROR;
	}

	nret = listen(lotserv, 10);	

	if (nret == SOCKET_ERROR)
	{
		nret = WSAGetLastError();
		ReportError(nret, &quot;listen()&quot;);

		WSACleanup();
		return NETWORK_ERROR;
	}
	
	SOCKET lotcl;
	
	lotcl = accept(lotserv, NULL, NULL);
	
	if (lotcl == INVALID_SOCKET)
	{
		nret = WSAGetLastError();
		ReportError(nret, &quot;accept()&quot;);

		WSACleanup();
		return NETWORK_ERROR;
	}
	
    char buffer[256];
    ZeroMemory(buffer, 256);
    strcpy(buffer, &quot;User is ready.&quot;);
    
    nret = send(lotserv, buffer, strlen(buffer), 0);
    delete [] buffer;
	    
	    if (nret == SOCKET_ERROR)
	    {
   		     nret = WSAGetLastError();
   		     ReportError(nret, &quot;send()&quot;);
   		     WSACleanup();
	    	return NETWORK_ERROR;
    	}
	
    ZeroMemory(buffer, 256);
    
    nret = recv(lotserv, buffer, 256, 0);
    delete [] buffer;
	    
	    if (nret == SOCKET_ERROR)
	    {
   		     nret = WSAGetLastError();
   		     ReportError(nret, &quot;recv()&quot;);
   		     WSACleanup();
	    	return NETWORK_ERROR;
    	}


	closesocket(lotcl);
	closesocket(lotserv);

	WSACleanup();
	return NETWORK_OK;
}

void ReportError(int errorCode, const char *whichFunc)
{
   char errorMsg[92];
   ZeroMemory(errorMsg, 92);
   sprintf(errorMsg, &quot;Call to %s returned error %d!&quot;, (char *)whichFunc, errorCode);
   MessageBox(NULL, errorMsg, &quot;socketIndication&quot;, MB_OK);
}
[/code]</description>
    
    <lastBuildDate>Mon, 13 Oct 2008 13:43:43 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/socklot/236339.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>usually when that happens, some other program is already using the port, so just try another one</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/6</link>
        <pubDate>Mon, 13 Oct 2008 13:43:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-6</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@reVein reVein]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/revein">@reVein</a> wrote:</p>
          <blockquote>
              <p>There’s something wrong with this:</p>
<pre><code class="lang-auto">nret = bind(lotserv, (LPSOCKADDR)&amp;lots, sizeof(struct sockaddr));</code></pre>
<p>It won’t bind? Oh and is this the correct way to specify the port:</p>
<pre><code class="lang-auto">lots.sin_port = htons(23000);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/5</link>
        <pubDate>Mon, 13 Oct 2008 07:22:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-5</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Lol @:</p>
<p>char buffer[256];<br>
…<br>
delete [] buffer;</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/4</link>
        <pubDate>Mon, 13 Oct 2008 06:01:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-4</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@Yummy_Cakes Yummy Cakes]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yummy_cakes">@Yummy_Cakes</a> wrote:</p>
          <blockquote>
              <p>this code would have use of goto very appropriate…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/3</link>
        <pubDate>Mon, 13 Oct 2008 05:13:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-3</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>here’s one thing i noticed; the relevant parts should actually be:</p>
<p><code>nret = send(lotcl, buffer, strlen(buffer), 0);
...
nret = recv(lotcl, buffer, 256, 0);</code></p>
<p>you could have other problems, though… like for example, you have the ideas/roles of server and client mixed up</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/2</link>
        <pubDate>Sun, 12 Oct 2008 21:14:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-2</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
      <item>
        <title>Socklot</title>
        <dc:creator><![CDATA[@reVein reVein]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/revein">@reVein</a> wrote:</p>
          <blockquote>
              <p>I’m trying to make this lottery-like program, where the user is given a random number, the server(user) sends a message that we are ready to the client. The client itself is just like the server, human controlled, gets a random number also, but will be notified when someone is ready so that it can send the correct number back. If it matches the users, the user wins, if not, loses.</p>
<p>Here’s what I have done, I know that this whole thing isn’t very hard to do but I suck. This is supposed to be the server. WHAT AM I DOING WRONG?</p>
<p>[code=cpp]<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> &lt;windows.h&gt;<br>
<span class="hashtag">#include</span> &lt;winsock.h&gt;</p>
<p><span class="hashtag">#define</span> NETWORK_ERROR -1<br>
<span class="hashtag">#define</span> NETWORK_OK     0</p>
<p>using namespace std;</p>
<p>void ReportError(int, const char *);</p>
<p>int main()<br>
{<br>
WORD sockVersion;<br>
WSADATA wsaData;<br>
int nret;</p>
<pre><code>sockVersion = MAKEWORD(2, 2);	

WSAStartup(sockVersion, &amp;wsaData);

cout &lt;&lt; "SOCKLOT\n";
cout &lt;&lt; "-------\n";
cout &lt;&lt; "You will be given a random number between 0 and 100\n";
cout &lt;&lt; "To win, you must get the same number as the client.\n";
cout &lt;&lt; "The correct number will be sent by the client.\n";
cout &lt;&lt; "If that doesn't happen, nobody wins.\n";
cout &lt;&lt; "Please press enter to begin.\n";
cout &lt;&lt; "-------\n";
getchar();
cout &lt;&lt; "Processing...\n";
Sleep(3000);
srand(time(0));
cout &lt;&lt; "Your number: " &lt;&lt; rand() % 100 + 1 &lt;&lt; endl;
cout &lt;&lt; "Waiting for correct number from client...";

LPHOSTENT hostEntry;

hostEntry = gethostbyname("localhost");

if (!hostEntry)
{
	nret = WSAGetLastError();
	ReportError(nret, "gethostbyname()");

	WSACleanup();
	return NETWORK_ERROR;
}

SOCKET lotserv;
lotserv = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);

if (lotserv == INVALID_SOCKET)
{
	nret = WSAGetLastError();
	ReportError(nret, "socket()");

	WSACleanup();
	return NETWORK_ERROR;
}

SOCKADDR_IN lots;
lots.sin_family = AF_INET;
lots.sin_addr.s_addr = INADDR_ANY;
lots.sin_port = htons(23000);	

nret = bind(lotserv, (LPSOCKADDR)&amp;lots, sizeof(struct sockaddr));

if (nret == SOCKET_ERROR)
{
	nret = WSAGetLastError();
	ReportError(nret, "bind()");

	WSACleanup();
	return NETWORK_ERROR;
}

nret = listen(lotserv, 10);	

if (nret == SOCKET_ERROR)
{
	nret = WSAGetLastError();
	ReportError(nret, "listen()");

	WSACleanup();
	return NETWORK_ERROR;
}

SOCKET lotcl;

lotcl = accept(lotserv, NULL, NULL);

if (lotcl == INVALID_SOCKET)
{
	nret = WSAGetLastError();
	ReportError(nret, "accept()");

	WSACleanup();
	return NETWORK_ERROR;
}

char buffer[256];
ZeroMemory(buffer, 256);
strcpy(buffer, "User is ready.");

nret = send(lotserv, buffer, strlen(buffer), 0);
delete [] buffer;
    
    if (nret == SOCKET_ERROR)
    {
	     nret = WSAGetLastError();
	     ReportError(nret, "send()");
	     WSACleanup();
    	return NETWORK_ERROR;
	}

ZeroMemory(buffer, 256);

nret = recv(lotserv, buffer, 256, 0);
delete [] buffer;
    
    if (nret == SOCKET_ERROR)
    {
	     nret = WSAGetLastError();
	     ReportError(nret, "recv()");
	     WSACleanup();
    	return NETWORK_ERROR;
	}


closesocket(lotcl);
closesocket(lotserv);

WSACleanup();
return NETWORK_OK;
</code></pre>
<p>}</p>
<p>void ReportError(int errorCode, const char *whichFunc)<br>
{<br>
char errorMsg[92];<br>
ZeroMemory(errorMsg, 92);<br>
sprintf(errorMsg, “Call to %s returned error %d!”, (char *)whichFunc, errorCode);<br>
MessageBox(NULL, errorMsg, “socketIndication”, MB_OK);<br>
}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/socklot/236339/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/socklot/236339/1</link>
        <pubDate>Sun, 12 Oct 2008 20:06:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-236339-1</guid>
        <source url="https://forum.moparisthebest.com/t/socklot/236339.rss">Socklot</source>
      </item>
  </channel>
</rss>
