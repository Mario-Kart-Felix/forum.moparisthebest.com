<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Playfair Cipher</title>
    <link>https://forum.moparisthebest.com/t/playfair-cipher/408779</link>
    <description>I got bored today and wrote a Java implementation of the [url=http://en.wikipedia.org/wiki/Playfair_cipher]Playfair cipher[/url]

The way it works is to create a 5x5 key table using the entire English alphabet, with the exception of the letter J.  The order of the letters in the key table is determined by a phrase that you decide to use (I know, I&#39;m bad at explaining).  So basically, if I used the phrase &#39;moparscape&#39; my key table would be this.

M O P A R
S C E B D
F G H I K
L N Q T U
V W X Y Z

As you can see, you start out with the key phrase, and then add every unused letter of the alphabet, with the exception of J, and you only use each letter once.

Once you do that, you take whatever you want to encrypt, and prepare it by removing all punctuation and spacing, you replace all Js with Is, and you look for double letters, and replace the second with an X.  So LL would become LX.  If your phrase has an odd number of letters, you add an X on the end.  So YES would become YESX.  To finish that off you split the phrase up into pairs.  So YESX would become YE SX.  To encrypt a phrase, you must find each pair of letters position on the 5x5 key table, and there&#39;s 3 rules you have to follow.

[ul][li][b][u]Both letters are in the same column - [/u][/b]If both letters are in the same column, you replace each letter with the one below it.  If it is at the bottom, you wrap back around to the top.[/li]
[li][b][u]Both letters are in the same row - [/u][/b]If both letters are in the same row, you replace each letter with the one to the right of it.  Once again, wrap around if you have to.[/li]
[li][b][u]Both letters are in different rows and columns -[/u][/b] If both letters are in different rows and columns, you replace each letter with the letter that is in the same row, but in the column of the other letter.[/li][/ul]


So for example, lets encrypt &#39;Hello World&#39; with the key &#39;Moparscape&#39; 
Hello World would be prepared as HE LX OW OR LD.  
Because H and E are in the same column, you take the letters below them.  Making them QH.
Because L and X are in neither the same row or column, we do rule number 3, making them QV.
Because O and W are in the same column, they become CO.  
Because O and R are in the same row, they become PM.
Finally, LD becomes US because they aren&#39;t in the same row or column.
So our encrypted Hello World becomes QH QV CO PM US.

To decode that, you would do the opposite.  However, with the Playfair Cipher, you don&#39;t always get what you started with.  In this case, QHQVCOPMUS would be decoded into HELXOWORLD.

Now that I have given you a (hopefully) good explanation of the Playfair Cipher, here is what I wrote to handle it.


[code]import java.util.ArrayList;
import java.util.List;

/**
 * User: Matthew
 * Date: 8/7/11
 * Time: 12:53 PM
 */
public class Playfair {
    /**
     * An array of all the letters in the English alphabet, with the exception of the letter J, which is removed as part of the cipher.
     */
    private static final char[] ALPHABET = &quot;ABCDEFGHIKLMNOPQRSTUVWXYZ&quot;.toCharArray();

    /**
     * Prepares the plaintext to be encrypted.
     *
     * @param plaintext The plaintext that needs prepared.
     * @return The prepared plaintext.
     */
    private String prepare(String plaintext) {
        plaintext = plaintext.toUpperCase().replace(&quot;J&quot;, &quot;I&quot;);
        Character last = null;
        StringBuilder stringBuilder = new StringBuilder();
        for (char c : plaintext.toCharArray()) {
            if (!Character.isLetter(c))
                continue;
            if (last != null &amp;&amp; last.equals(c)) {
                stringBuilder.append(&quot;X&quot;);
                last = c;
                continue;
            }
            last = c;
            stringBuilder.append(c);
        }
        if (stringBuilder.length() % 2 != 0)
            stringBuilder.append(&quot;X&quot;);
        return stringBuilder.toString();
    }

    /**
     * Splits a string into pairs of 2 letters.
     *
     * @param text The text to split.
     * @return The pairs of letters.
     */
    private String[] split(String text) {
        String[] pairs = new String[text.length() / 2];
        int count = 0;
        for (int i = 0; i &lt; (text.length() / 2); i++) {
            pairs[i] = text.substring(count, count + 2);
            count = count + 2;
        }
        return pairs;
    }

    /**
     * Generates a 5x5 key table for the Playfair cipher.  If done correctly, it should contain every letter of the alphabet, except for the letter J.
     *
     * @param key The keyword that the table is generated from.
     * @return The generated 5x5 key table.
     */
    public char[][] generateKeyTable(String key) {
        key = key.trim().replace(&quot; &quot;, &quot;&quot;).toUpperCase();
        char[][] keyTable = new char[5][5];
        List&lt;Character&gt; used = new ArrayList&lt;Character&gt;();
        int x = 0;
        int y = 0;
        for (char c : key.toCharArray()) {
            if (!used.contains(c)) {
                keyTable[x][y] = c;
                used.add(c);
                y++;
                if (y == 5) {
                    x++;
                    y = 0;
                }
                if (x == 5)
                    return keyTable;
            }
        }
        for (char c : ALPHABET) {
            if (!used.contains(c)) {
                keyTable[x][y] = c;
                y++;
                if (y == 5) {
                    x++;
                    y = 0;
                }
                if (x == 5)
                    return keyTable;
            }
        }
        return keyTable;
    }

    /**
     * Gets the position of a letter in the key table.
     * @param letter The letter to get the position of.
     * @param keyTable The key table to check it in.
     * @return The position of the letter.
     */
    public int[] getPosition(char letter, char[][] keyTable) {
        int[] position = new int[2];
        for (int x = 0; x &lt; 5; x++) {
            for (int y = 0; y &lt; 5; y++) {
                if (keyTable[x][y] == letter) {
                    position[0] = x;
                    position[1] = y;
                    break;
                }
            }
        }
        return position;
    }

    /**
     * Encrypts the string.
     * @param string The string to encrypt.
     * @param keyTable The key table to use.
     * @return The encrypted string.
     */
    public String encrypt(String string, char[][] keyTable) {
        String[] pairs = split(prepare(string));
        char c1, c2;
        int[] position1, position2;
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i &lt; pairs.length; i++) {
            c1 = pairs[i].charAt(0);
            c2 = pairs[i].charAt(1);
            position1 = getPosition(c1, keyTable);
            position2 = getPosition(c2, keyTable);
            if (position1[0] == position2[0]) {
                if (position1[1] &lt; 4)
                    position1[1]++;
                else
                    position1[1] = 0;
                if (position2[1] &lt; 4)
                    position2[1]++;
                else
                    position2[1] = 0;
            } else if (position1[1] == position2[1]) {
                if (position1[0] &lt; 4)
                    position1[0]++;
                else
                    position1[0] = 0;
                if (position2[0] &lt; 4)
                    position2[0]++;
                else
                    position2[0] = 0;
            } else {
                int temp = position1[1];
                position1[1] = position2[1];
                position2[1] = temp;
            }
            stringBuilder.append(keyTable[position1[0]][position1[1]]).append(keyTable[position2[0]][position2[1]]);
        }
        return stringBuilder.toString();
    }

    /**
     * Decodes the string.
     * @param string The string to decode.
     * @param keyTable The key table to use.
     * @return The decoded string.
     */
    public String decode(String string, char[][] keyTable) {
        String[] pairs = split(prepare(string));
        char c1, c2;
        int[] position1, position2;
        StringBuilder stringBuilder = new StringBuilder();
        for (int i = 0; i &lt; pairs.length; i++) {
            c1 = pairs[i].charAt(0);
            c2 = pairs[i].charAt(1);
            position1 = getPosition(c1, keyTable);
            position2 = getPosition(c2, keyTable);
            if (position1[0] == position2[0]) {
                if (position1[1] &gt; 0)
                    position1[1]--;
                else
                    position1[1] = 4;
                if (position2[1] &gt; 0)
                    position2[1]--;
                else
                    position2[1] = 4;
            } else if (position1[1] == position2[1]) {
                if (position1[0] &gt; 0)
                    position1[0]--;
                else
                    position1[0] = 4;
                if (position2[0] &gt; 0)
                    position2[0]--;
                else
                    position2[0] = 4;
            } else {
                int temp = position1[1];
                position1[1] = position2[1];
                position2[1] = temp;
            }
            stringBuilder.append(keyTable[position1[0]][position1[1]]).append(keyTable[position2[0]][position2[1]]);
        }
        return stringBuilder.toString();
    }
}
[/code]

I&#39;m sure there are much better ways to do this, but it works :)</description>
    
    <lastBuildDate>Sun, 07 Aug 2011 22:42:56 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/playfair-cipher/408779.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Playfair Cipher</title>
        <dc:creator><![CDATA[@m.dog311 m.dog311]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/m.dog311">@m.dog311</a> wrote:</p>
          <blockquote>
              <p>If I made it more complex, it wouldn’t be a Playfair cipher <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/playfair-cipher/408779/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/playfair-cipher/408779/3</link>
        <pubDate>Sun, 07 Aug 2011 22:42:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-408779-3</guid>
        <source url="https://forum.moparisthebest.com/t/playfair-cipher/408779.rss">Playfair Cipher</source>
      </item>
      <item>
        <title>Playfair Cipher</title>
        <dc:creator><![CDATA[@m1lkman m1lkman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/m1lkman">@m1lkman</a> wrote:</p>
          <blockquote>
              <p>Why not continue making it more and more complex?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/playfair-cipher/408779/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/playfair-cipher/408779/2</link>
        <pubDate>Sun, 07 Aug 2011 22:38:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-408779-2</guid>
        <source url="https://forum.moparisthebest.com/t/playfair-cipher/408779.rss">Playfair Cipher</source>
      </item>
      <item>
        <title>Playfair Cipher</title>
        <dc:creator><![CDATA[@m.dog311 m.dog311]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/m.dog311">@m.dog311</a> wrote:</p>
          <blockquote>
              <p>I got bored today and wrote a Java implementation of the <a href="http://en.wikipedia.org/wiki/Playfair_cipher" data-bbcode="true" rel="nofollow noopener">Playfair cipher</a></p>
<p>The way it works is to create a 5x5 key table using the entire English alphabet, with the exception of the letter J.  The order of the letters in the key table is determined by a phrase that you decide to use (I know, I’m bad at explaining).  So basically, if I used the phrase ‘moparscape’ my key table would be this.</p>
<p>M O P A R<br>
S C E B D<br>
F G H I K<br>
L N Q T U<br>
V W X Y Z</p>
<p>As you can see, you start out with the key phrase, and then add every unused letter of the alphabet, with the exception of J, and you only use each letter once.</p>
<p>Once you do that, you take whatever you want to encrypt, and prepare it by removing all punctuation and spacing, you replace all Js with Is, and you look for double letters, and replace the second with an X.  So LL would become LX.  If your phrase has an odd number of letters, you add an X on the end.  So YES would become YESX.  To finish that off you split the phrase up into pairs.  So YESX would become YE SX.  To encrypt a phrase, you must find each pair of letters position on the 5x5 key table, and there’s 3 rules you have to follow.</p>
<p>[ul][li]<span class="bbcode-b"><span class="bbcode-u">Both letters are in the same column - </span></span>If both letters are in the same column, you replace each letter with the one below it.  If it is at the bottom, you wrap back around to the top.[/li]<br>
[li]<span class="bbcode-b"><span class="bbcode-u">Both letters are in the same row - </span></span>If both letters are in the same row, you replace each letter with the one to the right of it.  Once again, wrap around if you have to.[/li]<br>
[li]<span class="bbcode-b"><span class="bbcode-u">Both letters are in different rows and columns -</span></span> If both letters are in different rows and columns, you replace each letter with the letter that is in the same row, but in the column of the other letter.[/li][/ul]</p>
<p>So for example, lets encrypt ‘Hello World’ with the key ‘Moparscape’<br>
Hello World would be prepared as HE LX OW OR LD.<br>
Because H and E are in the same column, you take the letters below them.  Making them QH.<br>
Because L and X are in neither the same row or column, we do rule number 3, making them QV.<br>
Because O and W are in the same column, they become CO.<br>
Because O and R are in the same row, they become PM.<br>
Finally, LD becomes US because they aren’t in the same row or column.<br>
So our encrypted Hello World becomes QH QV CO PM US.</p>
<p>To decode that, you would do the opposite.  However, with the Playfair Cipher, you don’t always get what you started with.  In this case, QHQVCOPMUS would be decoded into HELXOWORLD.</p>
<p>Now that I have given you a (hopefully) good explanation of the Playfair Cipher, here is what I wrote to handle it.</p>
<p>[code]import java.util.ArrayList;<br>
import java.util.List;</p>
<p>/**</p>
<ul>
<li>
<p>User: Matthew</p>
</li>
<li>
<p>Date: 8/7/11</p>
</li>
<li>
<p>Time: 12:53 PM<br>
<em>/<br>
public class Playfair {<br>
/</em>*</p>
<ul>
<li>An array of all the letters in the English alphabet, with the exception of the letter J, which is removed as part of the cipher.<br>
*/<br>
private static final char[] ALPHABET = “ABCDEFGHIKLMNOPQRSTUVWXYZ”.toCharArray();</li>
</ul>
<p>/**</p>
<ul>
<li>Prepares the plaintext to be encrypted.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> plaintext The plaintext that needs prepared.</li>
<li>
<a class="mention" href="/u/return">@return</a> The prepared plaintext.<br>
*/<br>
private String prepare(String plaintext) {<br>
plaintext = plaintext.toUpperCase().replace(“J”, “I”);<br>
Character last = null;<br>
StringBuilder stringBuilder = new StringBuilder();<br>
for (char c : plaintext.toCharArray()) {<br>
if (!Character.isLetter©)<br>
continue;<br>
if (last != null &amp;&amp; last.equals©) {<br>
stringBuilder.append(“X”);<br>
last = c;<br>
continue;<br>
}<br>
last = c;<br>
stringBuilder.append©;<br>
}<br>
if (stringBuilder.length() % 2 != 0)<br>
stringBuilder.append(“X”);<br>
return stringBuilder.toString();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Splits a string into pairs of 2 letters.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> text The text to split.</li>
<li>
<a class="mention" href="/u/return">@return</a> The pairs of letters.<br>
*/<br>
private String[] split(String text) {<br>
String[] pairs = new String[text.length() / 2];<br>
int count = 0;<br>
for (int i = 0; i &lt; (text.length() / 2); i++) {<br>
pairs[i] = text.substring(count, count + 2);<br>
count = count + 2;<br>
}<br>
return pairs;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Generates a 5x5 key table for the Playfair cipher.  If done correctly, it should contain every letter of the alphabet, except for the letter J.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> key The keyword that the table is generated from.</li>
<li>
<a class="mention" href="/u/return">@return</a> The generated 5x5 key table.<br>
*/<br>
public char[][] generateKeyTable(String key) {<br>
key = key.trim().replace(" ", “”).toUpperCase();<br>
char[][] keyTable = new char[5][5];<br>
List used = new ArrayList();<br>
int x = 0;<br>
int y = 0;<br>
for (char c : key.toCharArray()) {<br>
if (!used.contains©) {<br>
keyTable[x][y] = c;<br>
used.add©;<br>
y++;<br>
if (y == 5) {<br>
x++;<br>
y = 0;<br>
}<br>
if (x == 5)<br>
return keyTable;<br>
}<br>
}<br>
for (char c : ALPHABET) {<br>
if (!used.contains©) {<br>
keyTable[x][y] = c;<br>
y++;<br>
if (y == 5) {<br>
x++;<br>
y = 0;<br>
}<br>
if (x == 5)<br>
return keyTable;<br>
}<br>
}<br>
return keyTable;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the position of a letter in the key table.</li>
<li>
<a class="mention" href="/u/param">@param</a> letter The letter to get the position of.</li>
<li>
<a class="mention" href="/u/param">@param</a> keyTable The key table to check it in.</li>
<li>
<a class="mention" href="/u/return">@return</a> The position of the letter.<br>
*/<br>
public int[] getPosition(char letter, char[][] keyTable) {<br>
int[] position = new int[2];<br>
for (int x = 0; x &lt; 5; x++) {<br>
for (int y = 0; y &lt; 5; y++) {<br>
if (keyTable[x][y] == letter) {<br>
position[0] = x;<br>
position[1] = y;<br>
break;<br>
}<br>
}<br>
}<br>
return position;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Encrypts the string.</li>
<li>
<a class="mention" href="/u/param">@param</a> string The string to encrypt.</li>
<li>
<a class="mention" href="/u/param">@param</a> keyTable The key table to use.</li>
<li>
<a class="mention" href="/u/return">@return</a> The encrypted string.<br>
*/<br>
public String encrypt(String string, char[][] keyTable) {<br>
String[] pairs = split(prepare(string));<br>
char c1, c2;<br>
int[] position1, position2;<br>
StringBuilder stringBuilder = new StringBuilder();<br>
for (int i = 0; i &lt; pairs.length; i++) {<br>
c1 = pairs[i].charAt(0);<br>
c2 = pairs[i].charAt(1);<br>
position1 = getPosition(c1, keyTable);<br>
position2 = getPosition(c2, keyTable);<br>
if (position1[0] == position2[0]) {<br>
if (position1[1] &lt; 4)<br>
position1[1]++;<br>
else<br>
position1[1] = 0;<br>
if (position2[1] &lt; 4)<br>
position2[1]++;<br>
else<br>
position2[1] = 0;<br>
} else if (position1[1] == position2[1]) {<br>
if (position1[0] &lt; 4)<br>
position1[0]++;<br>
else<br>
position1[0] = 0;<br>
if (position2[0] &lt; 4)<br>
position2[0]++;<br>
else<br>
position2[0] = 0;<br>
} else {<br>
int temp = position1[1];<br>
position1[1] = position2[1];<br>
position2[1] = temp;<br>
}<br>
stringBuilder.append(keyTable[position1[0]][position1[1]]).append(keyTable[position2[0]][position2[1]]);<br>
}<br>
return stringBuilder.toString();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Decodes the string.</li>
<li>
<a class="mention" href="/u/param">@param</a> string The string to decode.</li>
<li>
<a class="mention" href="/u/param">@param</a> keyTable The key table to use.</li>
<li>
<a class="mention" href="/u/return">@return</a> The decoded string.<br>
*/<br>
public String decode(String string, char[][] keyTable) {<br>
String[] pairs = split(prepare(string));<br>
char c1, c2;<br>
int[] position1, position2;<br>
StringBuilder stringBuilder = new StringBuilder();<br>
for (int i = 0; i &lt; pairs.length; i++) {<br>
c1 = pairs[i].charAt(0);<br>
c2 = pairs[i].charAt(1);<br>
position1 = getPosition(c1, keyTable);<br>
position2 = getPosition(c2, keyTable);<br>
if (position1[0] == position2[0]) {<br>
if (position1[1] &gt; 0)<br>
position1[1]–;<br>
else<br>
position1[1] = 4;<br>
if (position2[1] &gt; 0)<br>
position2[1]–;<br>
else<br>
position2[1] = 4;<br>
} else if (position1[1] == position2[1]) {<br>
if (position1[0] &gt; 0)<br>
position1[0]–;<br>
else<br>
position1[0] = 4;<br>
if (position2[0] &gt; 0)<br>
position2[0]–;<br>
else<br>
position2[0] = 4;<br>
} else {<br>
int temp = position1[1];<br>
position1[1] = position2[1];<br>
position2[1] = temp;<br>
}<br>
stringBuilder.append(keyTable[position1[0]][position1[1]]).append(keyTable[position2[0]][position2[1]]);<br>
}<br>
return stringBuilder.toString();<br>
}<br>
}<br>
[/code]</li>
</ul>
</li>
</ul>
<p>I’m sure there are much better ways to do this, but it works <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/playfair-cipher/408779/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/playfair-cipher/408779/1</link>
        <pubDate>Sun, 07 Aug 2011 21:00:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-408779-1</guid>
        <source url="https://forum.moparisthebest.com/t/playfair-cipher/408779.rss">Playfair Cipher</source>
      </item>
  </channel>
</rss>
