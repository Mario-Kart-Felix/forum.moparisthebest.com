<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[TUT]Create Your Own Commands</title>
    <link>https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906</link>
    <description>How to Create Your Own Commands

by WhoCares357

If you’re reading this tutorial, I’m expecting you to know the basic structure of Scar like syntax, variables, constants, and some simple commands like MoveMouse. You should also know what includes are (Like SRL). It is also a requirement that you know how to create and use procedures. If you don’t know these things, dig around at http://www.srl-forums.com/forum/tutorial-beginners-f176.html a bit.

You have probably always wondered how SRL and other includes make all those new commands like MMouse, Mouse, etc. I’m going to teach you how to create your own commands. If you get confused, look back at the examples.

A normal script with a procedure would look like this:

[code]
program New;

procedure Name;
begin
  WriteLn(&#39;My name is WhoCares357&#39;);
end;

begin
  Name;
end.
[/code]

All you basically do is tell Scar what the procedure does and then tell it to use the procedure in the main loop. This eliminates the discomfort of constantly having to write out WriteLn(&#39;My name is WhoCares357&#39;);. 

A command is basically the same thing, except it has perimeters. These perimeters are actually just options the user sets for the command.

There are two types of commands. One is called a procedure. The other is called a function. The difference between the two is that a function always returns a value at the end (true or false).

Let’s modify our earlier script to include a procedure with perimeters.

[code]
program New;

procedure Name(YourName: string);
begin
  WriteLn(YourName);
end;

begin
  Name(&#39;WhoCares357&#39;);
end. [/code]

Study this a little. Remember how we declared variables for the script. We’re doing the same thing for the procedure. For procedures and functions, however, we declare the variables inside the parentheses to indicate that the variable type is the option for the user. 

Don’t worry about that. Just know that you have to set options inside the parentheses and declare what the option is. In this case the option is a string and we called it YourName. 

Remember how we used to use variables and constants to replace the x,y coordinates in MoveMouse or the color numbers in FindColor? We do the same thing with options. (Stuff inside parentheses) 

Let’s review. We called the procedure Name and declared YourName as a string. Then we replaced the text for WriteLn with YourName.

Now look in the main loop. To use the procedure Name we must now enter the option data. In this case, it is a string. So I entered the string &#39;WhoCares357&#39;. Try this out. You will see that whatever you put between &#39;&#39; will be written in the Debug Box.


Let’s add a little to our last script.

[code]
program New;

procedure Name(YourName: string; WaitTime: Integer);
begin
  Wait(WaitTime);
  WriteLn(YourName);
end;

begin
  Name(&#39;WhoCares357&#39;, 100);
end.
[/code]

Examine this and study it a little. You will see that I added a new option to the procedure Name. I added a wait time. To declare more than one option, you have to separate them with ;. 

You will see that I added a new command to my procedure. I added Wait. I used the option WaitTime to fill the place of how long to wait. In the main loop I used the procedure and filled in the string option &#39;WhoCares357&#39;, separated the options with a comma, and then filled in the Integer option with 100. Now, the procedure Name will Wait the amount of time I set with the WaitTime option and will write whatever I put as the YourName option.

Let’s look at how we use booleans with procedures.

[code]
program New;

procedure Name(YourName: string; WaitTime: Integer; Clear: boolean);
begin
  if Clear = true then
   begin
     ClearDebug;
   end
  Wait(WaitTime);
  WriteLn(YourName);
end;

begin
  Name(&#39;WhoCares357&#39;, 100, false);
end.[/code]

I have added an option of a boolean here. The boolean name is Clear. Remember that booleans can either be true or false.

I have put the option to use by using an if then statement. If the user says true for Clear, the debug box will clear before the procedure will wait the amount of time designated by the user and then type what was designated by the user.

You should understand the basics of creating procedures now. If you don’t, study the examples and experiment a bit.

Functions are similar to procedures. As  a beginner, I would not recommend setting options for functions. However, I will still show you how later.

We make functions return a value like this:

[code]
program New;

function Pumpkins: Boolean;
begin
  Wait(100);
  WriteLn(&#39;Pumpkins&#39;);
  Result := True;
end;

begin
  if Pumpkins = true then
  WriteLn(&#39;Result was true!&#39;);
end.
[/code]

First I made the function Pumpkins. I told Scar to return the value as a boolean (true or false). I then told what the function does (Waits 100 ms then writes Pumpkins). You see that Result := True? That is how we set what Pumpkins equals at the end. We could’ve done Result := false; and the function Pumpkin would return the value of false. How do we use this? Look in the main loop. We use an if then statement. If the function Pumpkins acts and returns a value of true, then do this.

Now, let’s set options for the function.

[code]
program New;

function Pumpkins(Say: String): Boolean;
begin
  Wait(100);
  WriteLn(Say);
  Result := True;
end;

begin
  if Pumpkins(&#39;Hi&#39;) = true then
  WriteLn(&#39;Result was true!&#39;);
end.
[/code]

All I added was an option to the function Pumpkins. In the parentheses I declared the option Say as a string. If you remember from making procedures, this is exactly the same. Say just acts as a replacer for a command in the function (In this case it replaces what WriteLn does).

Then, in the main loop we told Scar if it goes through the process of Pumpkins with the option set to &#39;Hi&#39; then write Result was true!. 

Functions can also return integers. Let’s look at an example.

[code]
program New;

var Sum: Integer;

function Add(a, b: Integer): Integer;
begin
  Result := a + b;
end;

begin
  Sum := Add(2, 3);
  WriteLn(&#39;The sum is &#39; + IntToStr(Sum));
end.
[/code]

My function in this example is called Add. This is significant to the fact that it adds the two integers the user sets in the parameters (between parentheses). I declared a variable called Sum to receive the functions result. Inside the function, I told Scar that the result was the two integers in the options added (Result := a + b). Now, my earlier declared integer, Sum, will receive the returned value of the function.

I did this by making Sum := the function Add with the two integers 2 and 3. Then I Inserted the integer Sum into the procedure IntToStr to show it in the Debug Box.

Procedures and functions can save you loads of scripting, so learn to use them. If any of this is confusing, try study the examples and make your own similar functions or procedures. 

What we learned is that functions and procedures build on each other. Katniek used Pascal functions that someone created earlier to create his own functions and procedures. SRL then took Katniek’s functions and procedures and created more elite ones. You can place the functions and procedures in includes to use them in later scripts without writing out so many procedures and functions.

I hope this helped you.</description>
    
    <lastBuildDate>Tue, 18 Mar 2008 02:50:45 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[TUT]Create Your Own Commands</title>
        <dc:creator><![CDATA[@bootnecklad bootnecklad]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bootnecklad">@bootnecklad</a> wrote:</p>
          <blockquote>
              <p>Thanks for this will use info from this with my next script…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/4</link>
        <pubDate>Tue, 18 Mar 2008 02:50:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92906-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906.rss">[TUT]Create Your Own Commands</source>
      </item>
      <item>
        <title>[TUT]Create Your Own Commands</title>
        <dc:creator><![CDATA[@easter_guy1 easter guy1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/easter_guy1">@easter_guy1</a> wrote:</p>
          <blockquote>
              <p>nice dude <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"> im m trying to learn SCAR atm.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/3</link>
        <pubDate>Sun, 16 Mar 2008 22:17:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92906-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906.rss">[TUT]Create Your Own Commands</source>
      </item>
      <item>
        <title>[TUT]Create Your Own Commands</title>
        <dc:creator><![CDATA[@Scartastic Scartastic]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scartastic">@Scartastic</a> wrote:</p>
          <blockquote>
              <p>Holy CRAP! 321 Views 0 Replies! Nice TuT BTW. <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/2</link>
        <pubDate>Tue, 30 Oct 2007 00:04:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92906-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906.rss">[TUT]Create Your Own Commands</source>
      </item>
      <item>
        <title>[TUT]Create Your Own Commands</title>
        <dc:creator><![CDATA[@WhoCares357 WhoCares357]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whocares357">@WhoCares357</a> wrote:</p>
          <blockquote>
              <p>How to Create Your Own Commands</p>
<p>by WhoCares357</p>
<p>If you’re reading this tutorial, I’m expecting you to know the basic structure of Scar like syntax, variables, constants, and some simple commands like MoveMouse. You should also know what includes are (Like SRL). It is also a requirement that you know how to create and use procedures. If you don’t know these things, dig around at <a href="http://www.srl-forums.com/forum/tutorial-beginners-f176.html" rel="nofollow noopener">http://www.srl-forums.com/forum/tutorial-beginners-f176.html</a> a bit.</p>
<p>You have probably always wondered how SRL and other includes make all those new commands like MMouse, Mouse, etc. I’m going to teach you how to create your own commands. If you get confused, look back at the examples.</p>
<p>A normal script with a procedure would look like this:</p>
<pre><code class="lang-auto">program New;

procedure Name;
begin
  WriteLn('My name is WhoCares357');
end;

begin
  Name;
end.</code></pre>
<p>All you basically do is tell Scar what the procedure does and then tell it to use the procedure in the main loop. This eliminates the discomfort of constantly having to write out WriteLn(‘My name is WhoCares357’);.</p>
<p>A command is basically the same thing, except it has perimeters. These perimeters are actually just options the user sets for the command.</p>
<p>There are two types of commands. One is called a procedure. The other is called a function. The difference between the two is that a function always returns a value at the end (true or false).</p>
<p>Let’s modify our earlier script to include a procedure with perimeters.</p>
<p>[code]<br>
program New;</p>
<p>procedure Name(YourName: string);<br>
begin<br>
WriteLn(YourName);<br>
end;</p>
<p>begin<br>
Name(‘WhoCares357’);<br>
end. [/code]</p>
<p>Study this a little. Remember how we declared variables for the script. We’re doing the same thing for the procedure. For procedures and functions, however, we declare the variables inside the parentheses to indicate that the variable type is the option for the user.</p>
<p>Don’t worry about that. Just know that you have to set options inside the parentheses and declare what the option is. In this case the option is a string and we called it YourName.</p>
<p>Remember how we used to use variables and constants to replace the x,y coordinates in MoveMouse or the color numbers in FindColor? We do the same thing with options. (Stuff inside parentheses)</p>
<p>Let’s review. We called the procedure Name and declared YourName as a string. Then we replaced the text for WriteLn with YourName.</p>
<p>Now look in the main loop. To use the procedure Name we must now enter the option data. In this case, it is a string. So I entered the string ‘WhoCares357’. Try this out. You will see that whatever you put between ‘’ will be written in the Debug Box.</p>
<p>Let’s add a little to our last script.</p>
<pre><code class="lang-auto">program New;

procedure Name(YourName: string; WaitTime: Integer);
begin
  Wait(WaitTime);
  WriteLn(YourName);
end;

begin
  Name('WhoCares357', 100);
end.</code></pre>
<p>Examine this and study it a little. You will see that I added a new option to the procedure Name. I added a wait time. To declare more than one option, you have to separate them with ;.</p>
<p>You will see that I added a new command to my procedure. I added Wait. I used the option WaitTime to fill the place of how long to wait. In the main loop I used the procedure and filled in the string option ‘WhoCares357’, separated the options with a comma, and then filled in the Integer option with 100. Now, the procedure Name will Wait the amount of time I set with the WaitTime option and will write whatever I put as the YourName option.</p>
<p>Let’s look at how we use booleans with procedures.</p>
<p>[code]<br>
program New;</p>
<p>procedure Name(YourName: string; WaitTime: Integer; Clear: boolean);<br>
begin<br>
if Clear = true then<br>
begin<br>
ClearDebug;<br>
end<br>
Wait(WaitTime);<br>
WriteLn(YourName);<br>
end;</p>
<p>begin<br>
Name(‘WhoCares357’, 100, false);<br>
end.[/code]</p>
<p>I have added an option of a boolean here. The boolean name is Clear. Remember that booleans can either be true or false.</p>
<p>I have put the option to use by using an if then statement. If the user says true for Clear, the debug box will clear before the procedure will wait the amount of time designated by the user and then type what was designated by the user.</p>
<p>You should understand the basics of creating procedures now. If you don’t, study the examples and experiment a bit.</p>
<p>Functions are similar to procedures. As  a beginner, I would not recommend setting options for functions. However, I will still show you how later.</p>
<p>We make functions return a value like this:</p>
<pre><code class="lang-auto">program New;

function Pumpkins: Boolean;
begin
  Wait(100);
  WriteLn('Pumpkins');
  Result := True;
end;

begin
  if Pumpkins = true then
  WriteLn('Result was true!');
end.</code></pre>
<p>First I made the function Pumpkins. I told Scar to return the value as a boolean (true or false). I then told what the function does (Waits 100 ms then writes Pumpkins). You see that Result := True? That is how we set what Pumpkins equals at the end. We could’ve done Result := false; and the function Pumpkin would return the value of false. How do we use this? Look in the main loop. We use an if then statement. If the function Pumpkins acts and returns a value of true, then do this.</p>
<p>Now, let’s set options for the function.</p>
<pre><code class="lang-auto">program New;

function Pumpkins(Say: String): Boolean;
begin
  Wait(100);
  WriteLn(Say);
  Result := True;
end;

begin
  if Pumpkins('Hi') = true then
  WriteLn('Result was true!');
end.</code></pre>
<p>All I added was an option to the function Pumpkins. In the parentheses I declared the option Say as a string. If you remember from making procedures, this is exactly the same. Say just acts as a replacer for a command in the function (In this case it replaces what WriteLn does).</p>
<p>Then, in the main loop we told Scar if it goes through the process of Pumpkins with the option set to ‘Hi’ then write Result was true!.</p>
<p>Functions can also return integers. Let’s look at an example.</p>
<pre><code class="lang-auto">program New;

var Sum: Integer;

function Add(a, b: Integer): Integer;
begin
  Result := a + b;
end;

begin
  Sum := Add(2, 3);
  WriteLn('The sum is ' + IntToStr(Sum));
end.</code></pre>
<p>My function in this example is called Add. This is significant to the fact that it adds the two integers the user sets in the parameters (between parentheses). I declared a variable called Sum to receive the functions result. Inside the function, I told Scar that the result was the two integers in the options added (Result := a + b). Now, my earlier declared integer, Sum, will receive the returned value of the function.</p>
<p>I did this by making Sum := the function Add with the two integers 2 and 3. Then I Inserted the integer Sum into the procedure IntToStr to show it in the Debug Box.</p>
<p>Procedures and functions can save you loads of scripting, so learn to use them. If any of this is confusing, try study the examples and make your own similar functions or procedures.</p>
<p>What we learned is that functions and procedures build on each other. Katniek used Pascal functions that someone created earlier to create his own functions and procedures. SRL then took Katniek’s functions and procedures and created more elite ones. You can place the functions and procedures in includes to use them in later scripts without writing out so many procedures and functions.</p>
<p>I hope this helped you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906/1</link>
        <pubDate>Sat, 12 May 2007 07:55:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-92906-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-create-your-own-commands/92906.rss">[TUT]Create Your Own Commands</source>
      </item>
  </channel>
</rss>
