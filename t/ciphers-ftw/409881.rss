<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Ciphers ftw</title>
    <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881</link>
    <description>Making ciphers is some fun shit. Anyways, here is my cipher handler, and an example of a cipher. Moar ciphers...(I&#39;m actually using them) [b] (I will rep++ those who make some)![/b]

Cipher handler:
[code=java]package org.mopar.ciphers;

import java.io.BufferedReader;
import java.io.InputStreamReader;

/**
 * The class gets user input, and sends it where it needs to go.
 * @author Andrew
 */
public class Engine {

    /**
     * This holds all of the ciphers.
     */
    private Cipher ciphers[] = {new Trifid()};
    /**
     * The buffered reader for reading user input.
     */
    private BufferedReader buf;

    /**
     * Gets the user input and does whatever it needs to be with it.
     */
    private void start() {
        buf = new BufferedReader(new InputStreamReader(System.in));
        System.out.println(&quot;Usage: &lt;ciphername&gt; &lt;encrypt/decrypt&gt; &lt;string&gt;&quot;);
        try {
            String args[] = buf.readLine().split(&quot; &quot;);
            if (args.length != 3) {
                System.out.println(&quot;Invalid argument length (spaces should be underscores)!&quot;);
                return;
            }
            for (Cipher c : ciphers) {
                if (c.getName().equalsIgnoreCase(args[0])) {
                    if (args[1].equalsIgnoreCase(&quot;encrypt&quot;)) {
                        System.out.println(c.encrypt(args[2]));
                        return;
                    } else if (args[1].equalsIgnoreCase(&quot;decrypt&quot;)) {
                        System.out.println(c.decrypt(args[2]));
                        return;
                    } else {
                        System.out.println(&quot;Command not found!&quot;);
                        return;
                    }
                }
            }
            System.out.println(&quot;Cipher was not found!&quot;);
        } catch (Exception ex) {
            ex.printStackTrace();
            System.exit(1);
        }
    }

    /**
     * This constantly calls the &#39;start&#39; method, whenever it ends.
     * This allows for more than one use per run.
     * @param args The command line arguments
     */
    public static void main(String[] args) {
        Engine engine = new Engine();
        while (true) {
            engine.start();
        }
    }

    /**
     * This interface is used by the ciphers, so they can all be
     * referenced as a &#39;Cipher&#39;. This allows the usage of all
     * these methods, without having to use reflection / whatever.
     */
    public interface Cipher {

        /**
         * Gets the cipher&#39;s name.
         * @return The cipher&#39;s name.
         */
        public String getName();

        /**
         * Attempts to encrypt a string.
         * @param str String to encrypt.
         */
        public String encrypt(String str);

        /**
         * Attempts to decrypt a string.
         * @param str String to decrypt.
         */
        public String decrypt(String str);
    }
}[/code]

Example cipher (Trifid (shortened version (doesn&#39;t use table))):
[code=java]package org.mopar.ciphers;

import org.mopar.ciphers.Engine.Cipher;

/**
 * An example of a cipher which could be used.
 * @author Andrew
 */
public class Trifid implements Cipher {

    /**
     * The key for the cipher.
     */
    private enum Key {

        /**
         * The key and their value.
         */
        F(111), R(112), Y(113), J(121), X(122), B(123), O(131), C(132),
        S(133), V(211), G(212), M(213), Z(221), D(222), W(223), L(231),
        P(232), T(233), E(311), N(312), U(321), H(322), K(323), Q(331),
        A(332), I(333);
        int VALUE;

        /**
         * Sets the values on initiation.
         * @param i 
         */
        Key(int i) {
            VALUE = i;
        }

        /**
         * Gets the value of a &#39;Key&#39;.
         * @return The &#39;Key&#39; value.
         */
        int get() {
            return VALUE;
        }
    }

    /**
     * Gets the name of the cipher.
     * @return The ciphers name.
     */
    @Override
    public String getName() {
        return &quot;Trifid&quot;;
    }

    /**
     * This is called when a string needs to be encrypted.
     * @param str The string to encrypt.
     * @return The encrypted string.
     */
    @Override
    public String encrypt(String str) {
        str = str.toUpperCase();
        char[] charArray = str.toCharArray();
        String value = &quot;&quot;;
        for (char c : charArray) {
            if (c == &#39;_&#39;) {
                value += 313;
                continue;
            }
            for (Key key : Key.values()) {
                if (key.toString().charAt(0) == c) {
                    value += key.get();
                }
            }
        }
        return value;
    }

    /**
     * This is called when a string needs to be decrypted.
     * @param str The string to decrypt.
     * @return The decrypted string.
     */
    @Override
    public String decrypt(String str) {
        str = str.toUpperCase();
        String value = &quot;&quot;;
        String temp = &quot;&quot;;
        for (int i = 0; i &lt; str.length(); i++) {
            temp += Integer.parseInt(String.valueOf(str.charAt(i)));
            if (temp.length() == 3) {
                boolean skip = false;
                int newF = Integer.parseInt(temp);
                if (newF == 313) {
                    value += &quot; &quot;;
                    skip = true;
                }
                if (!skip) {
                    for (Key key : Key.values()) {
                        if (key.get() == newF) {
                            value += key.name();
                            continue;
                        }
                    }
                }
                temp = &quot;&quot;;
            }
        }
        return value;
    }
}[/code]

Example usage:
trifid encrypt use_underscores_not_spaces_ftw_lol_what
&lt;theCipherToUse&gt; &lt;encryptOrDecrypt&gt; &lt;stringToEorD&gt;

[b]I do NOT need:[/b]
Trifid
4-Square
Caeser
2-Square
Bacon</description>
    
    <lastBuildDate>Sat, 13 Aug 2011 23:47:16 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Ciphers ftw</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="4" data-topic="409881">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/jimmyf/40/5510_1.png" class="avatar"> Jimmyf:</div>
<blockquote>
<p><a href="https://github.com/JimmyFrix/Ciphers" rel="nofollow noopener">https://github.com/JimmyFrix/Ciphers</a> I’ve added only ROT-13 but will add a few others later…</p>
</blockquote>
</aside>
<aside class="quote" data-post="2" data-topic="409881">
<div class="title">
<div class="quote-controls"></div>
 _s:</div>
<blockquote>
<p>association lists suck dick, use a hashmap</p>
</blockquote>
</aside>
<p>ps that CMD class is laughable</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/ciphers-ftw/409881/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881/5</link>
        <pubDate>Sat, 13 Aug 2011 23:47:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409881-5</guid>
        <source url="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss">Ciphers ftw</source>
      </item>
      <item>
        <title>Ciphers ftw</title>
        <dc:creator><![CDATA[@Jimmyf Jimmyf]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jimmyf">@Jimmyf</a> wrote:</p>
          <blockquote>
              <p><a href="https://github.com/JimmyFrix/Ciphers" rel="nofollow noopener">https://github.com/JimmyFrix/Ciphers</a> I’ve added only ROT-13 but will add a few others later…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/ciphers-ftw/409881/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881/4</link>
        <pubDate>Sat, 13 Aug 2011 20:37:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409881-4</guid>
        <source url="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss">Ciphers ftw</source>
      </item>
      <item>
        <title>Ciphers ftw</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="409881">
<div class="title">
<div class="quote-controls"></div>
 _s:</div>
<blockquote>
<p>association lists suck dick, use a hashmap</p>
</blockquote>
</aside>
<p>Alright…why not.<br>
Ima go read the javadoc for it now.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/ciphers-ftw/409881/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881/3</link>
        <pubDate>Sat, 13 Aug 2011 18:25:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409881-3</guid>
        <source url="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss">Ciphers ftw</source>
      </item>
      <item>
        <title>Ciphers ftw</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>association lists suck dick, use a hashmap</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/ciphers-ftw/409881/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881/2</link>
        <pubDate>Sat, 13 Aug 2011 18:20:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409881-2</guid>
        <source url="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss">Ciphers ftw</source>
      </item>
      <item>
        <title>Ciphers ftw</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>Making ciphers is some fun shit. Anyways, here is my cipher handler, and an example of a cipher. Moar ciphers…(I’m actually using them) <span class="bbcode-b"> (I will rep++ those who make some)!</span></p>
<p>Cipher handler:</p>
<p>[code=java]package org.mopar.ciphers;</p>
<p>import java.io.BufferedReader;<br>
import java.io.InputStreamReader;</p>
<p>/**</p>
<ul>
<li>
<p>The class gets user input, and sends it where it needs to go.</p>
</li>
<li>
<p><span class="mention">@author</span> Andrew<br>
*/<br>
public class Engine {</p>
<p>/**</p>
<ul>
<li>This holds all of the ciphers.<br>
<em>/<br>
private Cipher ciphers[] = {new Trifid()};<br>
/</em>*</li>
<li>The buffered reader for reading user input.<br>
*/<br>
private BufferedReader buf;</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the user input and does whatever it needs to be with it.<br>
*/<br>
private void start() {<br>
buf = new BufferedReader(new InputStreamReader(System.in));<br>
System.out.println("Usage:  &lt;encrypt/decrypt&gt; “);<br>
try {<br>
String args[] = buf.readLine().split(” ");<br>
if (args.length != 3) {<br>
System.out.println(“Invalid argument length (spaces should be underscores)!”);<br>
return;<br>
}<br>
for (Cipher c : ciphers) {<br>
if (c.getName().equalsIgnoreCase(args[0])) {<br>
if (args[1].equalsIgnoreCase(“encrypt”)) {<br>
System.out.println(c.encrypt(args[2]));<br>
return;<br>
} else if (args[1].equalsIgnoreCase(“decrypt”)) {<br>
System.out.println(c.decrypt(args[2]));<br>
return;<br>
} else {<br>
System.out.println(“Command not found!”);<br>
return;<br>
}<br>
}<br>
}<br>
System.out.println(“Cipher was not found!”);<br>
} catch (Exception ex) {<br>
ex.printStackTrace();<br>
System.exit(1);<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This constantly calls the ‘start’ method, whenever it ends.</li>
<li>This allows for more than one use per run.</li>
<li>
<a class="mention" href="/u/param">@param</a> args The command line arguments<br>
*/<br>
public static void main(String[] args) {<br>
Engine engine = new Engine();<br>
while (true) {<br>
engine.start();<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>This interface is used by the ciphers, so they can all be</p>
</li>
<li>
<p>referenced as a ‘Cipher’. This allows the usage of all</p>
</li>
<li>
<p>these methods, without having to use reflection / whatever.<br>
*/<br>
public interface Cipher {</p>
<p>/**</p>
<ul>
<li>Gets the cipher’s name.</li>
<li>
<a class="mention" href="/u/return">@return</a> The cipher’s name.<br>
*/<br>
public String getName();</li>
</ul>
<p>/**</p>
<ul>
<li>Attempts to encrypt a string.</li>
<li>
<a class="mention" href="/u/param">@param</a> str String to encrypt.<br>
*/<br>
public String encrypt(String str);</li>
</ul>
<p>/**</p>
<ul>
<li>Attempts to decrypt a string.</li>
<li>
<a class="mention" href="/u/param">@param</a> str String to decrypt.<br>
*/<br>
public String decrypt(String str);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>Example cipher (Trifid (shortened version (doesn’t use table))):</p>
<p>[code=java]package org.mopar.ciphers;</p>
<p>import org.mopar.ciphers.Engine.Cipher;</p>
<p>/**</p>
<ul>
<li>
<p>An example of a cipher which could be used.</p>
</li>
<li>
<p><span class="mention">@author</span> Andrew<br>
*/<br>
public class Trifid implements Cipher {</p>
<p>/**</p>
<ul>
<li>
<p>The key for the cipher.<br>
*/<br>
private enum Key {</p>
<p>/**</p>
<ul>
<li>The key and their value.<br>
*/<br>
F(111), R(112), Y(113), J(121), X(122), B(123), O(131), C(132),<br>
S(133), V(211), G(212), M(213), Z(221), D(222), W(223), L(231),<br>
P(232), T(233), E(311), N(312), U(321), H(322), K(323), Q(331),<br>
A(332), I(333);<br>
int VALUE;</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the values on initiation.</li>
<li>
<a class="mention" href="/u/param">@param</a> i<br>
*/<br>
Key(int i) {<br>
VALUE = i;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the value of a ‘Key’.</li>
<li>
<a class="mention" href="/u/return">@return</a> The ‘Key’ value.<br>
*/<br>
int get() {<br>
return VALUE;<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the name of the cipher.</li>
<li>
<a class="mention" href="/u/return">@return</a> The ciphers name.<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public String getName() {<br>
return “Trifid”;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This is called when a string needs to be encrypted.</li>
<li>
<a class="mention" href="/u/param">@param</a> str The string to encrypt.</li>
<li>
<a class="mention" href="/u/return">@return</a> The encrypted string.<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public String encrypt(String str) {<br>
str = str.toUpperCase();<br>
char[] charArray = str.toCharArray();<br>
String value = “”;<br>
for (char c : charArray) {<br>
if (c == ‘_’) {<br>
value += 313;<br>
continue;<br>
}<br>
for (Key key : Key.values()) {<br>
if (key.toString().charAt(0) == c) {<br>
value += key.get();<br>
}<br>
}<br>
}<br>
return value;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This is called when a string needs to be decrypted.</li>
<li>
<a class="mention" href="/u/param">@param</a> str The string to decrypt.</li>
<li>
<a class="mention" href="/u/return">@return</a> The decrypted string.<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public String decrypt(String str) {<br>
str = str.toUpperCase();<br>
String value = “”;<br>
String temp = “”;<br>
for (int i = 0; i &lt; str.length(); i++) {<br>
temp += Integer.parseInt(String.valueOf(str.charAt(i)));<br>
if (temp.length() == 3) {<br>
boolean skip = false;<br>
int newF = Integer.parseInt(temp);<br>
if (newF == 313) {<br>
value += " ";<br>
skip = true;<br>
}<br>
if (!skip) {<br>
for (Key key : Key.values()) {<br>
if (key.get() == newF) {<br>
value += key.name();<br>
continue;<br>
}<br>
}<br>
}<br>
temp = “”;<br>
}<br>
}<br>
return value;<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>Example usage:<br>
trifid encrypt use_underscores_not_spaces_ftw_lol_what<br>
  </p>
<p><span class="bbcode-b">I do NOT need:</span><br>
Trifid<br>
4-Square<br>
Caeser<br>
2-Square<br>
Bacon</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/ciphers-ftw/409881/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/ciphers-ftw/409881/1</link>
        <pubDate>Sat, 13 Aug 2011 12:14:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-409881-1</guid>
        <source url="https://forum.moparisthebest.com/t/ciphers-ftw/409881.rss">Ciphers ftw</source>
      </item>
  </channel>
</rss>
