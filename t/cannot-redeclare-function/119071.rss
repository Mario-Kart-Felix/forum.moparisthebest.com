<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cannot redeclare function</title>
    <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071</link>
    <description>Hey everyone,

Getting an error in my PHP code, &quot;Fatal Error: Cannot redeclare function extract() in &lt;path&gt; on line 84

[code]
&lt;?php
/****************************************************************************
 * 1. Documentation Summary
 ****************************************************************************
 */
 
/**
 * NAME    :  Musa :: Extract;
 * SYNOPSIS:  Musa :: Extract;
 *
 * Extract is a wrapper class to run extract.exe::

 * 1. Read the trace file(chromate)

 * 2. Get the sequence and quality if the trace file contains

 * 3. Generate the confidence quality value

 * 4. Output .fasta files of sequence and quality

 *

 *Mailing List   : 

 *Reporting Bugs : wangg@muohio.edu, liangc@muohio.edu

 *AUTHOR         : Gang Wang, Chun Liang

 *Email          : wangg@muohio.edu, liangc@muohio.edu

 *

 *The rest of the documentation details each of the object methods.

 *Internal methods are usually preceded with a _
 */

/****************************************************************************
 * 2. Public Functions
 ****************************************************************************
 */

/*
 * Constructor
 * Title: Extract
 * Usage: $extract = new($arg1, $arg2, ..., $argn);
 * 

 * Function: Initiate an constructor ojbect for Extract.

 * Returns : Extract object

 *  Args    : Path_Location_extract_seq_fasta,

 *            Path_Location_extract_quality_fasta,
 */

function Extract(){
   $args = func_get_args();
   $argsNum = count($args);
   $class = &#39;Extract&#39;;
   //$self = $arg-&gt;SUPER::new(@args); How do I change this to PHP?
   $config;
   
   if($argsNum === 2)
      //$config = $self-&gt;_rearrange([qw(config)], @args); Same as above
      
      if(!exists($config))
        /*$self-&gt;{_logger}-&gt;fatal(&quot;Extract.pm::invalid input\n&quot;); Same again*/
        echo &quot;Error&quot;;
   else
     echo &quot;error with arguements&quot;;
   
   //return $self;  
}

/*
#============================================================================

# runExtract
# Title   : runExtract

# Usage   : $extract-&gt;runExtract($config);

# Function:

#           This function will run extract for each trace directory

#               inside directory &quot;process&quot; and upon finishing move the

#               whole directory into &quot;data&quot; directory, both of which have

#               been defined in config.xml that is a parameter for this

#               function.

#               

#               There is one prerequisite for this function to execute

#               properly: individual trace files must be present in the
#               &quot;chromat_dir&quot; subdirectory under each trace directory.

#               Other directiories such as &quot;edit_dir&quot;, &quot;seq_dir&quot;, &quot;phd_dir&quot;,

#               &quot;ploy_dir&quot; are optional. If not existing, they will be

#               automatically created. If these directories exist before the

#               execution of this object, these directories will be deleted

#               first and recreated. In addition, &quot;process&quot; can only contain

#               one directory with &quot;chromat_dir&quot; subdirectory.

#               

#               One useful characteristics is that all the resultant files

#               inside &quot;edit_dir&quot; has a date-stamp, which can be easily

#               traced in the future. 

#           

# Returns : None, all data will be moved from &quot;process&quot; to &quot;data&quot; directory

# Args    : Musa::Config object 

#============================================================================
*/
function runExtract(){
     $self = func_get_args();
     $config;
     $logger;
     $extract;
     $nice;
     $processDir;
     $dataDir;
     $traceBaseDir;
     $fastaFileDir;
     $fastaFile;
     $qualityFileDir;
     $qualityFile;
     $processYear;
     $processMonth;
     $processDay;
     $processTime;
     $subDirectoryNum=0;
     
     $dataDir = $self-&gt;{_dataDir};
     $traceBaseDir=$self-&gt;{_traceBaseDir};

     $processDir=$self-&gt;{_processDir};

     $processYear=$self-&gt;{_processYear};

     $processMonth=$self-&gt;{_processMonth};

     $processDay=$self-&gt;{_processDay};

     $processTime=$self-&gt;{_processTime};

     $logger=$self-&gt;{_logger};

     $fastaFileDir=$self-&gt;{_seqreadFastaFileDir};

     $fastaFile=$self-&gt;{_seqreadFastaFile};

     $qualityFileDir=$self-&gt;{_qualityFileDir};

     $qualityFile=$self-&gt;{_qualityFile};
      
     $extract = &quot;/usr/local/genome/bin/extract.exe&quot;;
     
     $fileName = $fastaFile;
     
     $fileName = implode(&quot;\n&quot;, $fileName);
     $fileName = $fileName.&quot;NewChromats.fof&quot;;
     
     if(!$procDir = fopen($processDir, &quot;rw&quot;)){
        die &quot;Cannot open the directory: $processDir \n&quot;;
     }
     
     $subDir = $traceBaseDir;
     $chromatDir = &quot;$processDir/$subDir/chromat_dir&quot;;
     $editDir = &quot;$processDir/$subDir/edit_dir&quot;;
     
     if(&quot;processDir/$subDir&quot;-&gt;isDir()){
        if(!$subDirectory = fopen($chromatDir){
          die &quot;Can&#39;t open $chromatDir \n&quot;;
        }
        
        $dots = readdir($subDirectory);
        
        $subDirectory-&gt;close();
        
        foreach ($dots as $value){
          if(preg_match(&quot;/^\.+/&quot;, $value)){
            // do nothing 
          }
          else{
            $syscmd = &quot;cd $editDir; &quot;.
                      &quot;$extract ../chromat_dir/$fileName $fastaFile &quot;.
                      &quot;$qualityFile $fileName; &quot;;
                      
            exec($syscmd);
          }
        }
     }
     else{
        $self-&gt;{_logger}-&gt;fatal( &quot;Extract Can&#39;t find $processDir/$subDir\n&quot; );
        die( &quot;Extract Can&#39;t find $processDir/$subDir\n&quot; );
     }
     
      $processDir-&gt;close();
      
      return; 
}

/* _makePHDFOF

 * Title   : makePHDFOF

 * Usage   : my $Extract-&gt;_makePHDFOF();

 * Function: An internal function for creating sumary *.fasta from phd files

 * Returns : None

 * Args    : None
 */
 
function _makePHDFOF(){
  $self   = func_get_args();
  $folder = func_get_args();
  $phdDir = $self-&gt;{_processDir}.&quot;/$folder/phd_dir&quot;;
  $chromatDir=$self-&gt;{_processDir}.&quot;/$folder/chromat_dir&quot;;

  $editDir=$self-&gt;{_processDir}.&quot;/$folder/edit_dir&quot;;

  $processYear=$self-&gt;{_processYear};

  $processMonth=$self-&gt;{_processMonth};

  $processDay=$self-&gt;{_processDay};

  $processTime=$self-&gt;{_processTime};
  
  $PhdFileList = Array();
  
  if(!$phdDirectory = fopen($phdDir, &quot;rw&quot;){
      die &quot;Couldn&#39;t open directory $phdDir&quot;;
  }
  
  while( $szPhdFile = readdir($phdDirectory)){
    if(strrpos($szPhdFile, &quot;.php&quot;) &gt;= 0){
      $szRoot = $szPhdFile;
      
      if(!exists($PhdFileList{ $szRoot } ){
          $PhdFileList { $szRoot } = &quot;&quot;; 
      }
    }
  }
  $phdDir-&gt;close();
  
  $szPHDFOF = $editDir.&#39;/&#39;.$folder.&#39;.&#39;.&quot;$processYear&quot;.&quot;$processMonth&quot;.

                 &quot;$processDay&quot;.&#39;.&#39;.&quot;$processTime&quot;.&quot;.NewChromats.fof&quot;;
                 
  if(exists($szPHDFOF)){
    unlink($szPHDFOF) || die &quot;Couldn&#39;t delete $szPHDFOF&quot;;
  }
  
  if(!$filPHDFOF = fopen( &quot;&gt;$szPHDFOF&quot; , &quot;rw&quot; )){
    die &quot;Couldn&#39;t write $szPHDFOF for output&quot;;
  }
  
  if(!$chromatDirectory = fopen( $chromatDir ){
    die &quot;Couldn&#39;t open $chromatDir&quot;;
  }
  
  $nFilesToExtract = 0;
  while(exists($szChromatFile = readdir($chromatDirectory))){
    if(preg_match(&quot;.&quot;, $szChromatFile) || preg_match(&quot;..&quot;, $szChromatFile)){
        //skip 
    }
    else{
      if(preg_match(&quot;.gz&quot;, $szChromatFile)){
      
      }
      else if(preg_match(&quot;.Z&quot;, $szChromatFile)){
      
      }
      
      if(exists($PhdFileList{$szChromatFile})){
        print( $filePHDFOF &quot;../chromat_dir/$szChromatFile\n&quot; );
        ++nFilesToExtract; 
      }
    }
  }
  
  $filePHDFOF -&gt; close();
  $chromatDirectory -&gt;close();
  
  return ($szPHDFOF, $nFilesToExtract);
  
}
/*
#============================================================================

#  getFastaFileName

#  Title   : getFastaFileName

#  Usage   : $extract-&gt;getFastaFileName();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileName {

    $self= func_get_args();

    return $self-&gt;{_seqreadFastaFile};

}

/*

#============================================================================

#  getFastaFileDir

#  Title   : getFastaFileDir

#  Usage   : $extract-&gt;getFastaFileDir();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileDir {

    $self=func_get_args();

    return $self-&gt;{_seqreadFastaFileDir};

}

/*

#============================================================================

#  getQualityFileName

#  Title   : getQualityFileName

#  Usage   : $extract-&gt;getQualityFileName();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileName{

    $self= func_get_args();

    return $self-&gt;{_qualityFile};

}

/*

#============================================================================

#  getQualityFileDir

#  Title   : getQualityFileDir

#  Usage   : $extract-&gt;getQualityFileDir();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileDir{

    $self = func_get_args();

    return $self-&gt;{_qualityFileDir};

}

/*

#============================================================================

#  getFastaFileNameAndLocation

#  Title   : getFastaFileNameAndLocation

#  Usage   : $extract-&gt;getFastaFileNameAndLocation();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileNameAndLocation {

    $self = func_get_args();

    return $self-&gt;{_seqreadFastaFileDir}.$self-&gt;{_seqreadFastaFile};

}

/*

#============================================================================

#  getQualityFileNameAndLocation

#  Title   : getQualityFileNameAndLocation

#  Usage   : $extract-&gt;getQualityFileNameAndLocation();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileNameAndLocation {

    $self = func_get_args();

    return $self-&gt;{_qualityFileDir}.$self-&gt;{_qualityFile};

}
?&gt; 
[/code]

line 84 is at the end of the constructor&#39;s last }.  I searched other forums and such, but am at a loss as to why it isn&#39;t working.  Any ideas?</description>
    
    <lastBuildDate>Tue, 03 Jul 2007 05:13:05 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cannot redeclare function</title>
        <dc:creator><![CDATA[@Bang_Train Bang Train]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bang_train">@Bang_Train</a> wrote:</p>
          <blockquote>
              <p>could u have removed the comments <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>wasnt aware of a function called extract. that would cause the problem also, but the variable also called extract would produce a 2nd error after he fixes i would assume</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/5</link>
        <pubDate>Tue, 03 Jul 2007 05:13:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-119071-5</guid>
        <source url="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss">Cannot redeclare function</source>
      </item>
      <item>
        <title>Cannot redeclare function</title>
        <dc:creator><![CDATA[@OnlyOneRule OnlyOneRule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/onlyonerule">@OnlyOneRule</a> wrote:</p>
          <blockquote>
              <p>hes getting an error because the functions already defiend, maybe your right bang but ive only ever had that probleme with javascript, the extract function already exists…<br>
<a href="http://nl3.php.net/extract" class="onebox" target="_blank" rel="nofollow noopener">http://nl3.php.net/extract</a></p>
<p>soz bout that, but he had too much in a little frame to read, i got a bit fed up so pasted it in the php tags to show the important stuff</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/4</link>
        <pubDate>Tue, 03 Jul 2007 01:07:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-119071-4</guid>
        <source url="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss">Cannot redeclare function</source>
      </item>
      <item>
        <title>Cannot redeclare function</title>
        <dc:creator><![CDATA[@Bang_Train Bang Train]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bang_train">@Bang_Train</a> wrote:</p>
          <blockquote>
              <p>holy fuck onlyone…never do that again good god…that was long…</p>
<p>u have a variable named $extract and a function named extract…</p>
<p>that is ur problem i believe</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/3</link>
        <pubDate>Tue, 03 Jul 2007 00:40:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-119071-3</guid>
        <source url="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss">Cannot redeclare function</source>
      </item>
      <item>
        <title>Cannot redeclare function</title>
        <dc:creator><![CDATA[@OnlyOneRule OnlyOneRule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/onlyonerule">@OnlyOneRule</a> wrote:</p>
          <blockquote>
              <p>your trying to make a new exrtract function, but the extract function already exists, try calling your funtction a different name</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/2</link>
        <pubDate>Mon, 02 Jul 2007 21:20:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-119071-2</guid>
        <source url="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss">Cannot redeclare function</source>
      </item>
      <item>
        <title>Cannot redeclare function</title>
        <dc:creator><![CDATA[@iwasinmoparseas101cl iwasinmoparseas101class]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iwasinmoparseas101cl">@iwasinmoparseas101cl</a> wrote:</p>
          <blockquote>
              <p>Hey everyone,</p>
<p>Getting an error in my PHP code, "Fatal Error: Cannot redeclare function extract() in  on line 84</p>
<pre><code class="lang-auto">&lt;?php
/****************************************************************************
 * 1. Documentation Summary
 ****************************************************************************
 */
 
/**
 * NAME    :  Musa :: Extract;
 * SYNOPSIS:  Musa :: Extract;
 *
 * Extract is a wrapper class to run extract.exe::

 * 1. Read the trace file(chromate)

 * 2. Get the sequence and quality if the trace file contains

 * 3. Generate the confidence quality value

 * 4. Output .fasta files of sequence and quality

 *

 *Mailing List   : 

 *Reporting Bugs : wangg@muohio.edu, liangc@muohio.edu

 *AUTHOR         : Gang Wang, Chun Liang

 *Email          : wangg@muohio.edu, liangc@muohio.edu

 *

 *The rest of the documentation details each of the object methods.

 *Internal methods are usually preceded with a _
 */

/****************************************************************************
 * 2. Public Functions
 ****************************************************************************
 */

/*
 * Constructor
 * Title: Extract
 * Usage: $extract = new($arg1, $arg2, ..., $argn);
 * 

 * Function: Initiate an constructor ojbect for Extract.

 * Returns : Extract object

 *  Args    : Path_Location_extract_seq_fasta,

 *            Path_Location_extract_quality_fasta,
 */

function Extract(){
   $args = func_get_args();
   $argsNum = count($args);
   $class = 'Extract';
   //$self = $arg-&gt;SUPER::new(@args); How do I change this to PHP?
   $config;
   
   if($argsNum === 2)
      //$config = $self-&gt;_rearrange([qw(config)], @args); Same as above
      
      if(!exists($config))
        /*$self-&gt;{_logger}-&gt;fatal("Extract.pm::invalid input\n"); Same again*/
        echo "Error";
   else
     echo "error with arguements";
   
   //return $self;  
}

/*
#============================================================================

# runExtract
# Title   : runExtract

# Usage   : $extract-&gt;runExtract($config);

# Function:

#           This function will run extract for each trace directory

#               inside directory "process" and upon finishing move the

#               whole directory into "data" directory, both of which have

#               been defined in config.xml that is a parameter for this

#               function.

#               

#               There is one prerequisite for this function to execute

#               properly: individual trace files must be present in the
#               "chromat_dir" subdirectory under each trace directory.

#               Other directiories such as "edit_dir", "seq_dir", "phd_dir",

#               "ploy_dir" are optional. If not existing, they will be

#               automatically created. If these directories exist before the

#               execution of this object, these directories will be deleted

#               first and recreated. In addition, "process" can only contain

#               one directory with "chromat_dir" subdirectory.

#               

#               One useful characteristics is that all the resultant files

#               inside "edit_dir" has a date-stamp, which can be easily

#               traced in the future. 

#           

# Returns : None, all data will be moved from "process" to "data" directory

# Args    : Musa::Config object 

#============================================================================
*/
function runExtract(){
     $self = func_get_args();
     $config;
     $logger;
     $extract;
     $nice;
     $processDir;
     $dataDir;
     $traceBaseDir;
     $fastaFileDir;
     $fastaFile;
     $qualityFileDir;
     $qualityFile;
     $processYear;
     $processMonth;
     $processDay;
     $processTime;
     $subDirectoryNum=0;
     
     $dataDir = $self-&gt;{_dataDir};
     $traceBaseDir=$self-&gt;{_traceBaseDir};

     $processDir=$self-&gt;{_processDir};

     $processYear=$self-&gt;{_processYear};

     $processMonth=$self-&gt;{_processMonth};

     $processDay=$self-&gt;{_processDay};

     $processTime=$self-&gt;{_processTime};

     $logger=$self-&gt;{_logger};

     $fastaFileDir=$self-&gt;{_seqreadFastaFileDir};

     $fastaFile=$self-&gt;{_seqreadFastaFile};

     $qualityFileDir=$self-&gt;{_qualityFileDir};

     $qualityFile=$self-&gt;{_qualityFile};
      
     $extract = "/usr/local/genome/bin/extract.exe";
     
     $fileName = $fastaFile;
     
     $fileName = implode("\n", $fileName);
     $fileName = $fileName."NewChromats.fof";
     
     if(!$procDir = fopen($processDir, "rw")){
        die "Cannot open the directory: $processDir \n";
     }
     
     $subDir = $traceBaseDir;
     $chromatDir = "$processDir/$subDir/chromat_dir";
     $editDir = "$processDir/$subDir/edit_dir";
     
     if("processDir/$subDir"-&gt;isDir()){
        if(!$subDirectory = fopen($chromatDir){
          die "Can't open $chromatDir \n";
        }
        
        $dots = readdir($subDirectory);
        
        $subDirectory-&gt;close();
        
        foreach ($dots as $value){
          if(preg_match("/^\.+/", $value)){
            // do nothing 
          }
          else{
            $syscmd = "cd $editDir; ".
                      "$extract ../chromat_dir/$fileName $fastaFile ".
                      "$qualityFile $fileName; ";
                      
            exec($syscmd);
          }
        }
     }
     else{
        $self-&gt;{_logger}-&gt;fatal( "Extract Can't find $processDir/$subDir\n" );
        die( "Extract Can't find $processDir/$subDir\n" );
     }
     
      $processDir-&gt;close();
      
      return; 
}

/* _makePHDFOF

 * Title   : makePHDFOF

 * Usage   : my $Extract-&gt;_makePHDFOF();

 * Function: An internal function for creating sumary *.fasta from phd files

 * Returns : None

 * Args    : None
 */
 
function _makePHDFOF(){
  $self   = func_get_args();
  $folder = func_get_args();
  $phdDir = $self-&gt;{_processDir}."/$folder/phd_dir";
  $chromatDir=$self-&gt;{_processDir}."/$folder/chromat_dir";

  $editDir=$self-&gt;{_processDir}."/$folder/edit_dir";

  $processYear=$self-&gt;{_processYear};

  $processMonth=$self-&gt;{_processMonth};

  $processDay=$self-&gt;{_processDay};

  $processTime=$self-&gt;{_processTime};
  
  $PhdFileList = Array();
  
  if(!$phdDirectory = fopen($phdDir, "rw"){
      die "Couldn't open directory $phdDir";
  }
  
  while( $szPhdFile = readdir($phdDirectory)){
    if(strrpos($szPhdFile, ".php") &gt;= 0){
      $szRoot = $szPhdFile;
      
      if(!exists($PhdFileList{ $szRoot } ){
          $PhdFileList { $szRoot } = ""; 
      }
    }
  }
  $phdDir-&gt;close();
  
  $szPHDFOF = $editDir.'/'.$folder.'.'."$processYear"."$processMonth".

                 "$processDay".'.'."$processTime".".NewChromats.fof";
                 
  if(exists($szPHDFOF)){
    unlink($szPHDFOF) || die "Couldn't delete $szPHDFOF";
  }
  
  if(!$filPHDFOF = fopen( "&gt;$szPHDFOF" , "rw" )){
    die "Couldn't write $szPHDFOF for output";
  }
  
  if(!$chromatDirectory = fopen( $chromatDir ){
    die "Couldn't open $chromatDir";
  }
  
  $nFilesToExtract = 0;
  while(exists($szChromatFile = readdir($chromatDirectory))){
    if(preg_match(".", $szChromatFile) || preg_match("..", $szChromatFile)){
        //skip 
    }
    else{
      if(preg_match(".gz", $szChromatFile)){
      
      }
      else if(preg_match(".Z", $szChromatFile)){
      
      }
      
      if(exists($PhdFileList{$szChromatFile})){
        print( $filePHDFOF "../chromat_dir/$szChromatFile\n" );
        ++nFilesToExtract; 
      }
    }
  }
  
  $filePHDFOF -&gt; close();
  $chromatDirectory -&gt;close();
  
  return ($szPHDFOF, $nFilesToExtract);
  
}
/*
#============================================================================

#  getFastaFileName

#  Title   : getFastaFileName

#  Usage   : $extract-&gt;getFastaFileName();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileName {

    $self= func_get_args();

    return $self-&gt;{_seqreadFastaFile};

}

/*

#============================================================================

#  getFastaFileDir

#  Title   : getFastaFileDir

#  Usage   : $extract-&gt;getFastaFileDir();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileDir {

    $self=func_get_args();

    return $self-&gt;{_seqreadFastaFileDir};

}

/*

#============================================================================

#  getQualityFileName

#  Title   : getQualityFileName

#  Usage   : $extract-&gt;getQualityFileName();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileName{

    $self= func_get_args();

    return $self-&gt;{_qualityFile};

}

/*

#============================================================================

#  getQualityFileDir

#  Title   : getQualityFileDir

#  Usage   : $extract-&gt;getQualityFileDir();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileDir{

    $self = func_get_args();

    return $self-&gt;{_qualityFileDir};

}

/*

#============================================================================

#  getFastaFileNameAndLocation

#  Title   : getFastaFileNameAndLocation

#  Usage   : $extract-&gt;getFastaFileNameAndLocation();

#  Function: 

#  Returns : return fasta file name as string after running extract

#  Args    : none

#============================================================================
*/

function getFastaFileNameAndLocation {

    $self = func_get_args();

    return $self-&gt;{_seqreadFastaFileDir}.$self-&gt;{_seqreadFastaFile};

}

/*

#============================================================================

#  getQualityFileNameAndLocation

#  Title   : getQualityFileNameAndLocation

#  Usage   : $extract-&gt;getQualityFileNameAndLocation();

#  Function: 

#  Returns : return quality file name as string after running extract

#  Args    : none

#============================================================================
*/

function getQualityFileNameAndLocation {

    $self = func_get_args();

    return $self-&gt;{_qualityFileDir}.$self-&gt;{_qualityFile};

}
?&gt; </code></pre>
<p>line 84 is at the end of the constructor’s last }.  I searched other forums and such, but am at a loss as to why it isn’t working.  Any ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cannot-redeclare-function/119071/1</link>
        <pubDate>Mon, 02 Jul 2007 21:12:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-119071-1</guid>
        <source url="https://forum.moparisthebest.com/t/cannot-redeclare-function/119071.rss">Cannot redeclare function</source>
      </item>
  </channel>
</rss>
