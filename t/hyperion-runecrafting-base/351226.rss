<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Hyperion] Runecrafting base</title>
    <link>https://forum.moparisthebest.com/t/hyperion-runecrafting-base/351226</link>
    <description>Well i&#39;ve been learning Grahams action system, and so far im doing ok.

The code is explained within the code its self.
Although, I am going to write a detailed tutorial explaining the code later.. seeing as I have to go shortly and I wont have the time to write it up now.

[CODE]package org.hyperion.rs2.action.impl;

import java.util.HashMap;
import java.util.Map;

import org.hyperion.rs2.action.Action;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Graphic;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Location;
import org.hyperion.rs2.model.Player;

/**
* Runecrafting Action.
* @author Fire cape
*/
public class RuneCraftingAction extends Action {
	
	/**
	 * Represents types of runecrafting altars.
	 * @author Fire cape
	 *
	 */
	public static enum Altar {
		
		AIR(1, 500, 1436, 556, new int[]{2478});
		
		/**
         * A map of object ids to altars.
         */
        private static Map&lt;Integer, Altar&gt; altars = new HashMap&lt;Integer, Altar&gt;();
        
        /**
         * Gets a altar by an object id.
         * @param object The object id.
         * @return The altar, or &lt;code&gt;null&lt;/code&gt; if the object is not a altar.
         */
        public static Altar forId(int object) {
            return altars.get(object);
        }

        /**
         * Populates the altar map.
         */
        static {
            for (Altar altar : Altar.values()) {
                for (int object : altar.objectId) {
                    altars.put(object, altar);
                }
            }
        }
		
		/**
		 * The level.
		 */
		private int level;
		
		
		/**
		 * The experience.
		 */
		private double experience;
		
		/**
		 * The item removed.
		 */
		private int oldItem;
		
		/**
		 * The amount of the item removed.
		 */
		private int oldItemAmount;
		
		/**
		 * The new item.
		 */
		private int newItem;
		
		/**
		 * The new item amount.
		 */
		private int newItemAmount;
		
		/**
		 * The object id.
		 */
		private int[] objectId;
		
		/**
		 * Handles the altar enum.
		 * @param level The required level.
		 * @param experience The experience recieved.
		 * @param oldItem The old item.
		 * @param oldItemAmount The amount of the old item.
		 * @param newItem The new item.
		 * @param newItemAmount The amount of the new item.
		 */
		private Altar(int level, int experience, int oldItem, int newItem, int[] objectId) {
			this.level = level;
			this.experience = experience;
			this.oldItem = oldItem;
			this.newItem = newItem;
			this.objectId = objectId;
		}
		
		/**
		 * Gets the required level.
		 * @return The required level.
		 */
		public int getRequiredLevel() {
			return level;
		}
		
		/**
		 * Gets the experience.
		 * @return The experience.
		 */
		public double getExperience() {
			return experience;
		}
		
		/**
		 * Gets the old item.
		 * @return The old item.
		 */
		public int getOldItem() {
			return oldItem;
		}
		
		/**
		 * Gets the old item amount.
		 * @return The old item amount.
		 */
		public int getOldItemAmount() {
			return oldItemAmount;
		}
		
		/**
		 * Gets the new item.
		 * @return The new item.
		 */
		public int getNewItem() {
			return newItem;
		}
		
		/**
		 * Gets the new item amount.
		 * @return The new item amount.
		 */
		public int getNewItemAmount() {
			return newItemAmount;
		}
		
		/**
		 * Gets the object id.
		 * @return The object id.
		 */
		public int[] getObjectId() {
			return objectId;
		}
	}
	
	/**
	 * The altar.
	 */
	private Altar altar;
	
	/**
	 * The location.
	 */
	private Location location;
	
	/**
	 * Gets the runecrafting action.
	 * @param player The player performing the action.
	 * @param location The location.
	 * @param altar The altar.
	 */
	public RuneCraftingAction(Player player, Location location, Altar altar) {
		super(player, 2000);
		this.location = location;
		this.altar = altar;
		player.playAnimation(Animation.create(791));
		player.playGraphics(Graphic.create(186, 0, 100));
	}

	@Override
	public QueuePolicy getQueuePolicy() {
		return QueuePolicy.NEVER;
	}

	@Override
	public WalkablePolicy getWalkablePolicy() {
		return WalkablePolicy.NON_WALKABLE;
	}

	@Override
	public void execute() {
		final Player player = getPlayer();
		int itemAmount = player.getInventory().getCount(altar.getOldItem());
		if (isRunning()) {
			player.face(location);
		}
		if (!player.getInventory().contains(altar.getOldItem())) {
			return;
		}
		if(player.getSkills().getLevel(20) &gt;= altar.getRequiredLevel()) {
			player.getInventory().remove(new Item(altar.getOldItem(), itemAmount));
			player.getInventory().add(new Item(altar.getNewItem(), itemAmount));
			player.getSkills().addExperience(20, altar.getExperience() * itemAmount);
			stop();
		} else {
			player.getActionSender().sendMessage(&quot;You must be atleast level &quot;+altar.getRequiredLevel()+&quot; to use this altar!&quot;);
			stop();
		}
	}
}[/CODE]

ObjectOptionPacketHandler:
[CODE] Altar altar = Altar.forId(id);
        if (altar != null &amp;&amp; player.getLocation().isWithinInteractionDistance(loc)) {
        	player.getActionQueue().addAction(new RuneCraftingAction(player, loc, altar));
        }[/CODE]</description>
    
    <lastBuildDate>Mon, 26 Jul 2010 09:56:50 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-runecrafting-base/351226.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Hyperion] Runecrafting base</title>
        <dc:creator><![CDATA[@Fire_capez Fire capez]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fire_capez">@Fire_capez</a> wrote:</p>
          <blockquote>
              <p>Well i’ve been learning Grahams action system, and so far im doing ok.</p>
<p>The code is explained within the code its self.<br>
Although, I am going to write a detailed tutorial explaining the code later… seeing as I have to go shortly and I wont have the time to write it up now.</p>
<p>[CODE]package org.hyperion.rs2.action.impl;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.hyperion.rs2.action.Action;<br>
import org.hyperion.rs2.model.Animation;<br>
import org.hyperion.rs2.model.Graphic;<br>
import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Location;<br>
import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>
<p>Runecrafting Action.</p>
</li>
<li>
<p><span class="mention">@author</span> Fire cape<br>
*/<br>
public class RuneCraftingAction extends Action {</p>
<p>/**</p>
<ul>
<li>Represents types of runecrafting altars.</li>
<li>
<span class="mention">@author</span> Fire cape</li>
<li>
</li>
</ul>
<p>*/<br>
public static enum Altar {</p>
<pre><code>  AIR(1, 500, 1436, 556, new int[]{2478});
  
  /**
   * A map of object ids to altars.
   */
  private static Map&lt;Integer, Altar&gt; altars = new HashMap&lt;Integer, Altar&gt;();
  
  /**
   * Gets a altar by an object id.
   * @param object The object id.
   * @return The altar, or &lt;code&gt;null&lt;/code&gt; if the object is not a altar.
   */
  public static Altar forId(int object) {
      return altars.get(object);
  }

  /**
   * Populates the altar map.
   */
  static {
      for (Altar altar : Altar.values()) {
          for (int object : altar.objectId) {
              altars.put(object, altar);
          }
      }
  }
  
  /**
   * The level.
   */
  private int level;
  
  
  /**
   * The experience.
   */
  private double experience;
  
  /**
   * The item removed.
   */
  private int oldItem;
  
  /**
   * The amount of the item removed.
   */
  private int oldItemAmount;
  
  /**
   * The new item.
   */
  private int newItem;
  
  /**
   * The new item amount.
   */
  private int newItemAmount;
  
  /**
   * The object id.
   */
  private int[] objectId;
  
  /**
   * Handles the altar enum.
   * @param level The required level.
   * @param experience The experience recieved.
   * @param oldItem The old item.
   * @param oldItemAmount The amount of the old item.
   * @param newItem The new item.
   * @param newItemAmount The amount of the new item.
   */
  private Altar(int level, int experience, int oldItem, int newItem, int[] objectId) {
  	this.level = level;
  	this.experience = experience;
  	this.oldItem = oldItem;
  	this.newItem = newItem;
  	this.objectId = objectId;
  }
  
  /**
   * Gets the required level.
   * @return The required level.
   */
  public int getRequiredLevel() {
  	return level;
  }
  
  /**
   * Gets the experience.
   * @return The experience.
   */
  public double getExperience() {
  	return experience;
  }
  
  /**
   * Gets the old item.
   * @return The old item.
   */
  public int getOldItem() {
  	return oldItem;
  }
  
  /**
   * Gets the old item amount.
   * @return The old item amount.
   */
  public int getOldItemAmount() {
  	return oldItemAmount;
  }
  
  /**
   * Gets the new item.
   * @return The new item.
   */
  public int getNewItem() {
  	return newItem;
  }
  
  /**
   * Gets the new item amount.
   * @return The new item amount.
   */
  public int getNewItemAmount() {
  	return newItemAmount;
  }
  
  /**
   * Gets the object id.
   * @return The object id.
   */
  public int[] getObjectId() {
  	return objectId;
  }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>The altar.<br>
*/<br>
private Altar altar;</li>
</ul>
<p>/**</p>
<ul>
<li>The location.<br>
*/<br>
private Location location;</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the runecrafting action.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player performing the action.</li>
<li>
<a class="mention" href="/u/param">@param</a> location The location.</li>
<li>
<a class="mention" href="/u/param">@param</a> altar The altar.<br>
*/<br>
public RuneCraftingAction(Player player, Location location, Altar altar) {<br>
super(player, 2000);<br>
this.location = location;<br>
this.altar = altar;<br>
player.playAnimation(Animation.create(791));<br>
player.playGraphics(Graphic.create(186, 0, 100));<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public QueuePolicy getQueuePolicy() {<br>
return QueuePolicy.NEVER;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public WalkablePolicy getWalkablePolicy() {<br>
return WalkablePolicy.NON_WALKABLE;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void execute() {<br>
final Player player = getPlayer();<br>
int itemAmount = player.getInventory().getCount(altar.getOldItem());<br>
if (isRunning()) {<br>
player.face(location);<br>
}<br>
if (!player.getInventory().contains(altar.getOldItem())) {<br>
return;<br>
}<br>
if(player.getSkills().getLevel(20) &gt;= altar.getRequiredLevel()) {<br>
player.getInventory().remove(new Item(altar.getOldItem(), itemAmount));<br>
player.getInventory().add(new Item(altar.getNewItem(), itemAmount));<br>
player.getSkills().addExperience(20, altar.getExperience() * itemAmount);<br>
stop();<br>
} else {<br>
player.getActionSender().sendMessage(“You must be atleast level “+altar.getRequiredLevel()+” to use this altar!”);<br>
stop();<br>
}<br>
}<br>
}[/CODE]</p>
</li>
</ul>
<p>ObjectOptionPacketHandler:</p>
<p><code> Altar altar = Altar.forId(id);
        if (altar != null &amp;&amp; player.getLocation().isWithinInteractionDistance(loc)) {
        	player.getActionQueue().addAction(new RuneCraftingAction(player, loc, altar));
        }</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-runecrafting-base/351226/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-runecrafting-base/351226/1</link>
        <pubDate>Mon, 26 Jul 2010 09:56:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351226-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-runecrafting-base/351226.rss">[Hyperion] Runecrafting base</source>
      </item>
  </channel>
</rss>
