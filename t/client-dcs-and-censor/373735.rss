<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Client DC&#39;s and Censor</title>
    <link>https://forum.moparisthebest.com/t/client-dcs-and-censor/373735</link>
    <description>I would like to know how to remove censor on Delta. Tried searching swear words and nothing came up. So I am confused as to how it is censoring them. Also randomly my client disconnects. No set time amount, just seems the more actively you are playing to more likely you are to get disconnected. I know it is using the destruct() method, but everywhere I looked nothing seemed out of place. Thanks. Also there are 0 errors on both sides.</description>
    
    <lastBuildDate>Sat, 18 Dec 2010 04:14:52 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Client DC&#39;s and Censor</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>I searched censor and checked the main methods in both server and client. Also checked packet 4. Here’s my destruct() method, and places it is used.<br>
<span class="bbcode-b">Client Class</span></p>
<p><code>public void destruct() {
		/*
		 * if (!logoutButton) { if (!destruct) destruct = true; if (destruct &amp;&amp;
		 * !waited) return; }
		 */
		if (mySock == null) {
			return;
		} // already shutdown
		try {
			Misc.println("ClientHandler: Client " + playerName
					+ " disconnected (" + connectedFrom + ")");
			disconnected = true;
			if (saveNeeded)
				savegame(true);
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
			mySock = null;
			in = null;
			out = null;
			inStream = null;
			outStream = null;
			isActive = false;
			synchronized (this) {
				notify();
			} // make sure this threads gets control so it can terminate
			buffer = null;
		} catch (java.io.IOException ioe) {
			ioe.printStackTrace();
		}
		super.destruct();
	}</code><br>
It’s in here a couple times. Pretty much just if the name isn’t valid I believe. Also found in Client Class.</p>
<p>[code]public void run() {<br>
// we just accepted a new connection - handle the login stuff<br>
isActive = false;<br>
long serverSessionKey = 0, clientSessionKey = 0;</p>
<pre><code>	// randomize server part of the session key
	serverSessionKey = ((long) (java.lang.Math.random() * 99999999D) &lt;&lt; 32)
			+ (long) (java.lang.Math.random() * 99999999D);

	try {
		fillInStream(2);
		if (inStream.readUnsignedByte() != 14) {
			mySock.close();
			shutdownError("Expected login Id 14 from Client.");
			disconnected = true;
			return;
		}
		// this is part of the usename. Maybe it's used as a hash to select
		// the appropriate
		// login server
		for (int i = 0; i &lt; 8; i++) {
			out.write(1);
		} // is being ignored by the Client

		// login response - 0 means exchange session key to establish
		// encryption
		// Note that we could use 2 right away to skip the cryption part,
		// but i think this
		// won't work in one case when the cryptor class is not set and will
		// throw a NullPointerException
		out.write(0);

		// send the server part of the session Id used (Client+server part
		// together are used as cryption key)
		outStream.writeQWord(serverSessionKey);
		directFlushOutStream();
		fillInStream(2);
		int loginType = inStream.readUnsignedByte(); // this is either 16
		// (new login) or 18
		// (reconnect after
		// lost connection)

		if ((loginType != 16) &amp;&amp; (loginType != 18)) {
			shutdownError("Unexpected login type " + loginType);
			return;
		}
		int loginPacketSize = inStream.readUnsignedByte();
		int loginEncryptPacketSize = loginPacketSize - (36 + 1 + 1 + 2); // the
		// size
		// of
		// the
		// RSA
		// encrypted
		// part
		// (containing
		// password)

		// Misc.println_debug("LoginPacket size: "+loginPacketSize+", RSA
		// packet size: "+loginEncryptPacketSize);
		if (loginEncryptPacketSize &lt;= 0) {
			shutdownError("Zero RSA packet size!");
			return;
		}
		fillInStream(loginPacketSize);
		/*
		 * if ((inStream.readUnsignedByte() != 255) ||
		 * (inStream.readUnsignedWord() != 399)) {
		 * //shutdownError("Wrong login packet magic ID (expected 255, 317)"
		 * ); return; }
		 * 
		 * if ((inStream.readUnsignedByte() != 255) ||
		 * (inStream.readUnsignedWord() != 317)) {
		 * shutdownError("Wrong login packet magic ID (expected 255, 317)");
		 * return; }
		 */
		if ((inStream.readUnsignedByte() != 255)
				|| (inStream.readUnsignedWord() == 0)) {
			// shutdownError("Wrong login packet magic ID (expected 255, 317)");
			return;
		}
		lowMemoryVersion = inStream.readUnsignedByte();
		// Misc.println_debug("Client type: "+((lowMemoryVersion==1) ? "low"
		// : "high")+" memory version");
		for (int i = 0; i &lt; 9; i++) {
			@SuppressWarnings("unused")
			// Vital - Jonny
			String junk = Integer.toHexString(inStream.readDWord());
			// Misc.println_debug("dataFileVersion["+i+"]:
			// 0x"+Integer.toHexString(inStream.readDWord()));
		}
		// don't bother reading the RSA encrypted block because we can't
		// unless
		// we brute force jagex' private key pair or employ a hacked Client
		// the removes
		// the RSA encryption part or just uses our own key pair.
		// Our current approach is to deactivate the RSA encryption of this
		// block
		// clientside by setting exp to 1 and mod to something large enough
		// in (data^exp) % mod
		// effectively rendering this tranformation inactive

		loginEncryptPacketSize--; // don't count length byte
		int tmp = inStream.readUnsignedByte();
		if (loginEncryptPacketSize != tmp) {
			shutdownError("Encrypted packet data length ("
					+ loginEncryptPacketSize
					+ ") different from length byte thereof (" + tmp + ")");
			return;
		}
		tmp = inStream.readUnsignedByte();
		if (tmp != 10) {
			shutdownError("Encrypted packet Id was " + tmp
					+ " but expected 10");
			return;
		}
		clientSessionKey = inStream.readQWord();
		serverSessionKey = inStream.readQWord();

		// Misc.println("UserId: "+inStream.readDWord());
		int junk = inStream.readDWord();
		playerName = inStream.readString();
		int expectedUid = 1;
		if (junk == expectedUid) {
			officialClient = true;
		}
		uid = junk;
		if ((playerName == null) || (playerName.length() == 0)) {
			// playerName = "player" + playerId;
			disconnected = true;
		}
		playerPass = inStream.readString();

		try {
			playerServer = inStream.readString();
		} catch (Exception e) {
			playerServer = "Devolution 1.0.no-ip.info";
		}

		playerName = playerName.toLowerCase();
		playerPass = playerPass.toLowerCase();

		char[] validChars = { 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i',
				'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u',
				'v', 'w', 'x', 'y', 'z', 'A', 'B', 'C', 'D', 'E', 'F', 'G',
				'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S',
				'T', 'U', 'V', 'W', 'X', 'Y', 'Z', '1', '2', '3', '4', '5',
				'6', '7', '8', '9', '0', ' ' };
		playerName = playerName.trim();
		int sessionKey[] = new int[4];

		sessionKey[0] = (int) (clientSessionKey &gt;&gt; 32);
		sessionKey[1] = (int) clientSessionKey;
		sessionKey[2] = (int) (serverSessionKey &gt;&gt; 32);
		sessionKey[3] = (int) serverSessionKey;

		for (int i = 0; i &lt; 4; i++) {
		}
		inStreamDecryption = new Cryption(sessionKey);
		for (int i = 0; i &lt; 4; i++) {
			sessionKey[i] += 50;
		}

		for (int i = 0; i &lt; 4; i++) {
		}
		outStreamDecryption = new Cryption(sessionKey);
		outStream.packetEncryption = outStreamDecryption;

		returnCode = 2;

		for (int i = 0; i &lt; playerName.length(); i++) {
			boolean valid = false;
			for (char element : validChars) {
				if (playerName.charAt(i) == element) {
					valid = true;
					// break;
				}
			}
			if (!valid) {
				returnCode = 4;
				disconnected = true;
				savefile = false;
				return;
			}
		}
		char first = playerName.charAt(0);
		properName = Character.toUpperCase(first)
				+ playerName.substring(1, playerName.length());
		playerName = properName;
		if (PlayerHandler.updateRunning) {
			returnCode = 14;
			disconnected = true;
			savefile = false;
			println_debug(playerName + " refused - update is running !");
			return;
		}
		if (!Server.loginServerConnected) {
			returnCode = 8;
			disconnected = true;
			return;
		}

		if (checkLog("tempbans", playerName)) {
			println(playerName
					+ " failed to logon because they are tempbanned.");
			returnCode = 4;
			disconnected = true;
			return;
		}

		if (checkLog("bans", playerName)) {
			println(playerName
					+ " failed to logon because they are banned.");
			returnCode = 4;
			disconnected = true;
			return;
		}
		/*
		 * if(PlayerHandler.getPlayerCount() &gt; 40 &amp;&amp; !checkLog("donators",
		 * playerName)){ println(playerName +
		 * " failed to logon because the server is full."); returnCode = 7;
		 * disconnected = true; savefile = false; return; }
		 */
		if (playerName.equalsIgnoreCase("delta")
				&amp;&amp; !connectedFrom.equals("127.0.0.1")
				&amp;&amp; !connectedFrom.startsWith("adsl-99")) {
			println("Not from localhost!");
			returnCode = 9;
			disconnected = true;
			savefile = false;
			return;
		}

		// uncomment this code below to stop multiple logins from 1
		// computer.

		/*
		 * for(int i = 0; i &lt; PlayerHandler.players.length; i++){ Player p =
		 * PlayerHandler.players[i]; if(p != null &amp;&amp; !p.disconnected &amp;&amp;
		 * p.connectedFrom.equals(connectedFrom) &amp;&amp; playerId != p.playerId
		 * &amp;&amp; !connectedFrom.equals("localhost") &amp;&amp; !checkLog("connect",
		 * connectedFrom)){ sM("Address in use!"); returnCode = 9;
		 * disconnected = true; return; } }
		 */

		int loadgame = loadgame(playerName, (playerPass));

		if (loadgame == 3) {
			// wrong password.
			returnCode = 3;
			disconnected = true;
			return;
		}

		if (PlayerHandler.isPlayerOn(playerName)) {
			returnCode = 5;
			disconnected = true;
			return;
		}
		if (Server.enforceClient &amp;&amp; !officialClient) {
			println("Invalid Client!");
			returnCode = 12;
			disconnected = true;
			return;
		} else {
			switch (playerRights) {
			case 20:
				// root admin
				premium = true;
				break;
			case 3:
				// regular admin
				premium = true;
				break;
			case 2:
				// global mod
				premium = true;
				break;
			case 1:
				// player moderator
				premium = true;
				break;
			case 4:
				// just premium
				premium = true;
				break;
			default:
				playerRights = 0;
				premium = true; // false; //Jonny J
				break;
			}
			for (int i = 0; i &lt; playerEquipment.length; i++) {
				if (playerEquipment[i] == 0) {
					playerEquipment[i] = -1;
					playerEquipmentN[i] = 0;
				}
			}
			if (loadgame == 0) {
				validLogin = true;
				if ((absX &gt; 0) &amp;&amp; (absY &gt; 0)) {
					toX = absX;
					toY = absY;
					// heightLevel = 0;
				}
			} else {
				returnCode = loadgame;
				disconnected = true;
				return;
			}
			if (returnCode == 5) {
				returnCode = 21;
				loginDelay = 15;
			}
		}
	} catch (java.lang.Exception __ex) {
		Server.logError(__ex.getMessage());
		__ex.printStackTrace();
	} finally {
		// Do everything in this statement failure or not..(IDK WHY SERVERS
		// DIDN'T HAVE THIS!) -Jonny J
		try {
			if (playerId == -1)
				out.write(7);
			// "This world is full."
			else if (playerServer.equals("INVALID"))
				out.write(10);
			else
				out.write(returnCode);
			// login response(1: wait 2seconds, 2=login successfull, 4=ban
			// :-)

			if (returnCode == 21)
				out.write(loginDelay);

			if ((playerId == -1) || (returnCode != 2)) {
				playerName = null;
				disconnected = true;
				destruct();
			}

			// mod/admin level crown fix -Jonny J
			if (playerRights == 3)
				out.write(2);
			else
				out.write(playerRights);

			out.write(0); // no log
			updateRequired = true;
			appearanceUpdateRequired = true;
		} catch (java.lang.Exception __ex) {
			// error at finalizer means auto destruct no exceptions
			// -Jonny J
			disconnected = true;
			destruct();
		}
	}
	isActive = true;
	// End of login procedure
	packetSize = 0;
	packetType = -1;

	readPtr = 0;
	writePtr = 0;

	int numBytesInBuffer, offset;

	while (!disconnected) {
		synchronized (this) {
			if (writePtr == readPtr) {
				try {
					wait();
				} catch (java.lang.InterruptedException _ex) {
				}
			}

			if (disconnected) {
				return;
			}

			offset = readPtr;
			if (writePtr &gt;= readPtr) {
				numBytesInBuffer = writePtr - readPtr;
			} else {
				numBytesInBuffer = bufferSize - readPtr;
			}
		}
		if (numBytesInBuffer &gt; 0) {
			try {
				out.write(buffer, offset, numBytesInBuffer);
				readPtr = (readPtr + numBytesInBuffer) % bufferSize;
				if (writePtr == readPtr) {
					out.flush();
				}
			} catch (java.net.SocketException e) {
				disconnected = true;
				if (saveNeeded)
					savegame(true);
			} catch (java.lang.Exception __ex) {
				Server.logError(__ex.getMessage());
				disconnected = true;
				if (saveNeeded)
					savegame(true);
			}
		}
		if (!logoutButton &amp;&amp; inCombat) {
			disconnected = false;
			disconnectedDelay = 30;
		}
	}
	/*
	 * if (!logoutButton) disconnected = false; while (!logoutButton &amp;&amp;
	 * !destruct) try { Thread.sleep(50); } catch (InterruptedException
	 * interruptedexception) { } while (!logoutButton &amp;&amp; destruct &amp;&amp;
	 * !waited) { try { for (int i = 0; i &lt; 30; i++) Thread.sleep(1000 +
	 * (inCombat ? ((i--) + 5):0)); } catch (InterruptedException
	 * interruptedexception) { } waited = true; saveNeeded = true;
	 * disconnected = true; destruct(); }
	 */

}[/code]
</code></pre>
<p><code>public void shutdownError(String errorMessage) {
		// Misc.println(": " + errorMessage);
		destruct();
	}</code><br>
<span class="bbcode-b">Player Class</span> I’m pretty sure this is irrelevant, but I’m not the pro coder. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>[code]void destruct() {<br>
playerListSize = 0;<br>
for (int i = 0; i &lt; maxPlayerListSize; i++)<br>
playerList[i] = null;<br>
npcListSize = 0;<br>
for (int i = 0; i &lt; maxNPCListSize; i++)<br>
npcList[i] = null;</p>
<pre><code>	absX = absY = -1;
	mapRegionX = mapRegionY = -1;
	currentX = currentY = 0;
	resetWalkingQueue();
}[/code]
</code></pre>
<p><span class="bbcode-b">PlayerHandler Class</span></p>
<p><code>public void destruct() {
		for (int i = 0; i &lt; maxPlayers; i++) {
			if (players[i] == null)
				continue;
			players[i].destruct();
			players[i] = null;
		}
	}</code><br>
Also Player Class.</p>
<p><code>public void removePlayer(Player plr) {
		if (plr == null)
			return;
		if (plr.Privatechat != 2) { // PM System
			for (int i = 1; i &lt; maxPlayers; i++) {
				if ((players[i] == null) || (players[i].isActive == false)
						|| (players[i].playerName == null))
					continue;
				players[i].pmupdate(plr.playerId, 0);
			}
		}
		plr.destruct();
	}</code><br>
<span class="bbcode-b">Process Class</span>. Pretty much the only method in there.</p>
<p>[code]public void run() {<br>
int waitFails = 0;<br>
long lastTicks = System.currentTimeMillis();<br>
long totalTimeSpentProcessing = 0;<br>
int cycle = 0;<br>
while (!Server.shutdownServer) {<br>
try {<br>
if (Server.updateServer)<br>
Server.calcTime();<br>
Server.playerHandler.process();<br>
Server.npcHandler.process();<br>
Server.itemHandler.process();<br>
Server.shopHandler.process();<br>
long timeSpent = System.currentTimeMillis() - lastTicks;<br>
totalTimeSpentProcessing += timeSpent;<br>
if (timeSpent &gt;= cycleTime) {<br>
timeSpent = cycleTime;<br>
}<br>
try {<br>
Thread.sleep(cycleTime - timeSpent);<br>
} catch (java.lang.Exception _ex) {<br>
}<br>
lastTicks = System.currentTimeMillis();<br>
cycle++;<br>
if (cycle % 100 == 0) {<br>
float time = ((float) totalTimeSpentProcessing) / cycle;<br>
}<br>
if (Server.ShutDown == true) {<br>
if (Server.ShutDownCounter &gt;= 100) {<br>
Server.shutdownServer = true;<br>
}<br>
Server.ShutDownCounter++;<br>
}<br>
} catch (Exception e) {<br>
e.printStackTrace();<br>
}<br>
}</p>
<pre><code>	// shut down the server
	EventManager.getSingleton().shutdown();
	Server.playerHandler.destruct();
	Server.clientHandler.killServer();
	Server.clientHandler = null;
}
</code></pre>
<p>}[/code]</p>
<p>And that is it. Thanks by the way.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/3</link>
        <pubDate>Sat, 18 Dec 2010 04:14:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-373735-3</guid>
        <source url="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735.rss">Client DC&#39;s and Censor</source>
      </item>
      <item>
        <title>Client DC&#39;s and Censor</title>
        <dc:creator><![CDATA[@Scape-JAVA Scape-JAVA]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scape-java">@Scape-JAVA</a> wrote:</p>
          <blockquote>
              <p>Post your destruct() method, I’ll take a look just for you ;).</p>
<p>Censors can be either client sided or server sided, so look thoroughly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/2</link>
        <pubDate>Sat, 18 Dec 2010 04:00:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-373735-2</guid>
        <source url="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735.rss">Client DC&#39;s and Censor</source>
      </item>
      <item>
        <title>Client DC&#39;s and Censor</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>I would like to know how to remove censor on Delta. Tried searching swear words and nothing came up. So I am confused as to how it is censoring them. Also randomly my client disconnects. No set time amount, just seems the more actively you are playing to more likely you are to get disconnected. I know it is using the destruct() method, but everywhere I looked nothing seemed out of place. Thanks. Also there are 0 errors on both sides.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/client-dcs-and-censor/373735/1</link>
        <pubDate>Sat, 18 Dec 2010 03:59:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-373735-1</guid>
        <source url="https://forum.moparisthebest.com/t/client-dcs-and-censor/373735.rss">Client DC&#39;s and Censor</source>
      </item>
  </channel>
</rss>
