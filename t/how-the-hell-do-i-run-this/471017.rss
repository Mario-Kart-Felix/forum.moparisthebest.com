<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How the hell do I run this?</title>
    <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017</link>
    <description>I have netbeans. How do I run this:
I made a project called soduku.. pasted it in there and it gives me errors..


[code=java]/*******************************************************************************
 * Main.java                                                                   *
 *******************************************************************************/
package sudokiller;

/**
 * Sudoku game solver.
 * It creates a GUI with a default puzzle; you can replace it with the puzzle
 * you want to solve. Then click the &#39;Start&#39; button (or type &#39;ALT-s&#39;) to get the
 * solution.
 * @version 1.0
 */
public class Main {
    
    /**
     * Creates the GUI with a default puzzle.
     * @params args Command-line arguments (unused)
     */
    public static void main(String[] args) {
        int[][] board = {{0, 6, 0, 1, 0, 4, 0, 5, 0},
                         {0, 0, 8, 3, 0, 5, 6, 0, 0},
                         {2, 0, 0, 0, 0, 0, 0, 0, 1},
                         {8, 0, 0, 4, 0, 7, 0, 0, 6},
                         {0, 0, 6, 0, 0, 0, 3, 0, 0},
                         {7, 0, 0, 9, 0, 1, 0, 0, 4},
                         {5, 0, 0, 0, 0, 0, 0, 0, 2},
                         {0, 0, 7, 2, 0, 6, 9, 0, 0},
                         {0, 4, 0, 5, 0, 8, 0, 7, 0}};
        
        new SwingSudoKiller(new SwingSudokuBoard(board));
    }   
}


/*******************************************************************************
 * SudokuBoard.java                                                            *
 *******************************************************************************/
package sudokiller;

/**
 * This is the base class for implementing a Sudoku board.
 * It mostly is a two-dimensional &lt;code&gt;int&lt;code&gt; array and provides
 * basic methods for getting/setting cells contents. Board cells are identified
 * by their row and column and are zero-indexed. 
 * @version 1.0
 */
public class SudokuBoard {
    final int EMPTY = 0;      // Empty cells marker
    final int size;           // Size of the board (number of rows and columns)
    final int box_size;       // Size of the inner boxes

    private int[][] board;    // 2D array representing the game board

    /**
     * Creates an empty board.
     * @param size Number of rows and columns of the board.
     */
    public SudokuBoard(int size) {
        board = new int[size][size];
        this.size = size;
        this.box_size = (int) Math.sqrt(size);
    }
    
    /**
     * Creates and initializes the board.
     * @param board Array to initialize the board contents.
     */
    public SudokuBoard(int[][] board) {
        this(board.length);
        this.board = board;
    }
    
    /**
     * Puts a number into a specific cell.
     * @param num Number to put into the board cell.
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     */
    public void setCell(int num, int row, int col) {
        board[row][col] = num;
    }

    /**
     * Returns the number contained in a specific cell.
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     * @return The number contained in the cell.
     */
    public int getCell(int row, int col) {
        return board[row][col];
    }
}


/*******************************************************************************
 * SudoKiller.java                                                             *
 *******************************************************************************/
package sudokiller;

/**
 * This is the base class for implementing a Sudoku solver.
 * It provides a simple method for guessing the solution, but lets subclasses
 * decide how to display it.
 * @version 1.0
 */
abstract class SudoKiller {
    private SudokuBoard sb;    // Puzzle to solve;

    /**
     * Initializes the game board.
     * @param sb The puzzle to solve.
     */
    public SudoKiller(SudokuBoard sb) {
        this.sb = sb;
    }
    
    /**
     * Check if a number is, according to Sudoku rules, a legal candidate for
     * the given cell.
     * @param num Number to check.
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     * @return &lt;code&gt;false&lt;code&gt; if &lt;code&gt;num&lt;code&gt; already appears in the row,
     *         column or box the cell belongs to or &lt;code&gt;true&lt;code&gt; otherwise.
     */
    private boolean check(int num, int row, int col) {
        int r = (row / sb.box_size) * sb.box_size;
        int c = (col / sb.box_size) * sb.box_size;
        
        for (int i = 0; i &lt; sb.size; i++) {
            if (sb.getCell(row, i) == num ||
                sb.getCell(i, col) == num ||
                sb.getCell(r + (i % sb.box_size), c + (i / sb.box_size)) == num) {
                return false;
            }
        }
        return true;
    }
    
    /**
     * Test all candidate numbers for a given cell until the board is complete.
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     * @return &lt;code&gt;false&lt;code&gt; if no legal numbers are found for this cell.
     */
    public boolean guess(int row, int col) {
        int nextCol = (col + 1) % sb.size;
        int nextRow = (nextCol == 0) ? row + 1 : row;
        
        try {
            if (sb.getCell(row, col) != sb.EMPTY)
                return guess(nextRow, nextCol);
        }
        catch (ArrayIndexOutOfBoundsException e) {
                return true;
        }

        for (int i = 1; i &lt;= sb.size; i++) {
            if (check(i, row, col)) {
                sb.setCell(i, row, col);
                if (guess(nextRow, nextCol)) {
                    return true;
                }
            }
        }
        sb.setCell(sb.EMPTY, row, col);
        return false;
    }
}

    
/*******************************************************************************
 * SwingSudokuBoard.java                                                       *
 *******************************************************************************/
package sudokiller;

import java.awt.*;
import javax.swing.*;

/**
 * This class represents a graphical Sudoku board.
 * It is mostly a two-dimensional &lt;code&gt;JTextField&lt;code&gt; array
 * providing all the functionality of a &lt;code&gt;SudokuBoard&lt;code&gt; object.
 * Board cells are identified by their row and column and are zero-indexed.
 * @version 1.0
 */
public class SwingSudokuBoard extends SudokuBoard {
    private JTextField[][] cells;          // Graphical game board
    private JPanel panel = new JPanel();   // Container

    /**
     * Draws an empty board.
     * @param size Number of rows and columns of the board.
     */
    public SwingSudokuBoard(int size) {
        super(size);
        cells = new JTextField[size][size];
        panel.setLayout(new GridLayout(size, size));
        for (int row = 0; row &lt; size; row++) {
            for (int col = 0; col &lt; size; col++)  {
                cells[row][col] = new JTextField(1);
                panel.add(cells[row][col]);
            }
        }
    }

    /**
     * Draws and initializes the board.
     * @param board Array to initialize the board contents.
     */
    public SwingSudokuBoard(int[][] board) {
        this(board.length);
        for (int row = 0; row &lt; size; row++) {
            for (int col = 0; col &lt; size; col++) {
                setCell(board[row][col], row, col);
            }
        }
    }
    
    /**
     * Puts a number into a specific text field.
     * @param num Number to put into the text field (cell).
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     */
    public void setCell(int num, int row, int col) {
        super.setCell(num, row, col);
        String text = (num == EMPTY) ? &quot;&quot; : String.valueOf(num);
        cells[row][col].setText(text);
    }
    
    /**
     * Returns the number contained in a specific text field (cell).
     * @param row Cell&#39;s row.
     * @param col Cell&#39;s column.
     * @return The number contained in the cell.
     */
    public int getCell(int row, int col) {
        int cell;

        try {
            cell = Integer.parseInt(cells[row][col].getText());
        }
        catch (NumberFormatException e) {
            cell = EMPTY;
        }
        return cell;
    }
    
    /**
     * Returns the JPanel containing the board.
     * @return Returns the board container.
     */
    public JPanel getPanel() {
        return panel;
    }
}


/*******************************************************************************
 * SwingSudoKiller.java                                                        *
 *******************************************************************************/
package sudokiller;

import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

/**
 * Graphical Sudoku game solver.
 * The user should fill the board with the puzzle to solve and click the
 * &#39;Start&#39; button (or type &#39;ALT-s&#39;) to get the solution.
 * @version 1.0
 */
public class SwingSudoKiller extends SudoKiller {

    /**
     * Draw the game board.
     * @param ssb The puzzle to solve.
     */
    public SwingSudoKiller(SwingSudokuBoard ssb) {
        super(ssb);
        final JPanel panel = ssb.getPanel();

        Runnable runner = new Runnable() {
            public void run() {
                final JFrame frame = new JFrame(&quot;SudoKiller&quot;);
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

                ActionListener al = new ActionListener() {
                    public void actionPerformed(ActionEvent ae) {
                        if (! guess(0, 0))
                            JOptionPane.showMessageDialog(frame, &quot;Solution not found!&quot;);
                    }
                };
                frame.setLayout(new GridBagLayout());
                addComponent(frame, panel, 0, 0, 1, 1);
                
                JButton b = new JButton(&quot;Start!&quot;);
                b.setMnemonic(KeyEvent.VK_S);
                b.addActionListener(al);
                addComponent(frame, b, 0, 1, 1, 1);

                frame.setSize(240, 280);
                frame.setVisible(true);
            }
        };
        EventQueue.invokeLater(runner);
    }
    
    /**
     * Add a component to the GUI.
     * @param container Container to add the component to.
     * @param component The component to be added.
     * @param gridx Horizontal cell position inside the grid.
     * @param gridy Vertical cell position inside the grid.
     * @param gridwidth Number of cells in a row for the text field.
     * @param gridheight Number of cells in a column for the text field.
     */
    private static void addComponent(Container container, Component component,
        int gridx, int gridy, int gridwidth, int gridheight) {
        Insets insets = new Insets(0, 0, 0, 0);
        GridBagConstraints gbc = new GridBagConstraints(gridx, gridy, gridwidth,
                gridheight, 1, 1, GridBagConstraints.CENTER,
                GridBagConstraints.BOTH, insets, 0, 0);
        container.add(component, gbc);
    }
}[/code]</description>
    
    <lastBuildDate>Tue, 04 Dec 2012 07:08:55 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rodgerwilco, post:5, topic:471017”]…point him to the java tutorials and move on. Nothing to see here.<br>
<a href="http://docs.oracle.com/javase/tutorial/%5B/quote%5D" class="onebox" target="_blank">http://docs.oracle.com/javase/tutorial/[/quote]</a></p>
<p>Also not a discussion.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/6</link>
        <pubDate>Tue, 04 Dec 2012 07:08:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-6</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@Rodgerwilco Rodgerwilco]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodgerwilco">@Rodgerwilco</a> wrote:</p>
          <blockquote>
              <p>…point him to the java tutorials and move on. Nothing to see here.<br>
<a href="http://docs.oracle.com/javase/tutorial/" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/5</link>
        <pubDate>Tue, 04 Dec 2012 05:53:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-5</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@Tree Tree]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tree">@Tree</a> wrote:</p>
          <blockquote>
              <p>[quote=“rjj95, post:3, topic:471017”]So how do i make that in netbeans… do i call the main class that?</p>
<p>/this is why i hate java.[/quote]</p>
<p>You hate Java because you know very little about it? That’s like me speaking badly of coca-cola, despite never having tasted it.<br>
Right. I hope nobody here helps you.</p>
<p>/idiot</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/4</link>
        <pubDate>Tue, 04 Dec 2012 05:50:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-4</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@rjj95 rjj95]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rjj95">@rjj95</a> wrote:</p>
          <blockquote>
              <p>So how do i make that in netbeans… do i call the main class that?</p>
<p>/this is why i hate java.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/3</link>
        <pubDate>Tue, 04 Dec 2012 04:27:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-3</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>Need to have them seperated… Note these comments:</p>
<blockquote>/*******************************************************************************
 * SudoKiller.java                                                             *
 *******************************************************************************/</blockquote>
Put everything between that and the next header in a file named as it says (SudoKiller.java).
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/2</link>
        <pubDate>Tue, 04 Dec 2012 04:24:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-2</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
      <item>
        <title>How the hell do I run this?</title>
        <dc:creator><![CDATA[@rjj95 rjj95]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rjj95">@rjj95</a> wrote:</p>
          <blockquote>
              <p>I have netbeans. How do I run this:<br>
I made a project called soduku… pasted it in there and it gives me errors…</p>
<p>[code=java]/*******************************************************************************</p>
<ul>
<li>Main.java                                                                   *<br>
*******************************************************************************/<br>
package sudokiller;</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Sudoku game solver.</p>
</li>
<li>
<p>It creates a GUI with a default puzzle; you can replace it with the puzzle</p>
</li>
<li>
<p>you want to solve. Then click the ‘Start’ button (or type ‘ALT-s’) to get the</p>
</li>
<li>
<p>solution.</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0<br>
*/<br>
public class Main {</p>
<p>/**</p>
<ul>
<li>
<p>Creates the GUI with a default puzzle.</p>
</li>
<li>
<p><span class="mention">@params</span> args Command-line arguments (unused)<br>
*/<br>
public static void main(String[] args) {<br>
int[][] board = {{0, 6, 0, 1, 0, 4, 0, 5, 0},<br>
{0, 0, 8, 3, 0, 5, 6, 0, 0},<br>
{2, 0, 0, 0, 0, 0, 0, 0, 1},<br>
{8, 0, 0, 4, 0, 7, 0, 0, 6},<br>
{0, 0, 6, 0, 0, 0, 3, 0, 0},<br>
{7, 0, 0, 9, 0, 1, 0, 0, 4},<br>
{5, 0, 0, 0, 0, 0, 0, 0, 2},<br>
{0, 0, 7, 2, 0, 6, 9, 0, 0},<br>
{0, 4, 0, 5, 0, 8, 0, 7, 0}};</p>
<p>new SwingSudoKiller(new SwingSudokuBoard(board));<br>
}<br>
}</p>
</li>
</ul>
</li>
</ul>
<p>/*******************************************************************************</p>
<ul>
<li>SudokuBoard.java                                                            *<br>
*******************************************************************************/<br>
package sudokiller;</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>This is the base class for implementing a Sudoku board.</p>
</li>
<li>
<p>It mostly is a two-dimensional <code>int<code> array and provides</code></code></p>
</li>
<li>
<p>basic methods for getting/setting cells contents. Board cells are identified</p>
</li>
<li>
<p>by their row and column and are zero-indexed.</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0<br>
*/<br>
public class SudokuBoard {<br>
final int EMPTY = 0;      // Empty cells marker<br>
final int size;           // Size of the board (number of rows and columns)<br>
final int box_size;       // Size of the inner boxes</p>
<p>private int[][] board;    // 2D array representing the game board</p>
<p>/**</p>
<ul>
<li>Creates an empty board.</li>
<li>
<a class="mention" href="/u/param">@param</a> size Number of rows and columns of the board.<br>
*/<br>
public SudokuBoard(int size) {<br>
board = new int[size][size];<br>
this.size = size;<br>
this.box_size = (int) Math.sqrt(size);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates and initializes the board.</li>
<li>
<a class="mention" href="/u/param">@param</a> board Array to initialize the board contents.<br>
*/<br>
public SudokuBoard(int[][] board) {<br>
this(board.length);<br>
this.board = board;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Puts a number into a specific cell.</li>
<li>
<a class="mention" href="/u/param">@param</a> num Number to put into the board cell.</li>
<li>
<a class="mention" href="/u/param">@param</a> row Cell’s row.</li>
<li>
<a class="mention" href="/u/param">@param</a> col Cell’s column.<br>
*/<br>
public void setCell(int num, int row, int col) {<br>
board[row][col] = num;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Returns the number contained in a specific cell.</li>
<li>
<a class="mention" href="/u/param">@param</a> row Cell’s row.</li>
<li>
<a class="mention" href="/u/param">@param</a> col Cell’s column.</li>
<li>
<a class="mention" href="/u/return">@return</a> The number contained in the cell.<br>
*/<br>
public int getCell(int row, int col) {<br>
return board[row][col];<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>/*******************************************************************************</p>
<ul>
<li>SudoKiller.java                                                             *<br>
*******************************************************************************/<br>
package sudokiller;</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>This is the base class for implementing a Sudoku solver.</p>
</li>
<li>
<p>It provides a simple method for guessing the solution, but lets subclasses</p>
</li>
<li>
<p>decide how to display it.</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0<br>
*/<br>
abstract class SudoKiller {<br>
private SudokuBoard sb;    // Puzzle to solve;</p>
<p>/**</p>
<ul>
<li>Initializes the game board.</li>
<li>
<a class="mention" href="/u/param">@param</a> sb The puzzle to solve.<br>
*/<br>
public SudoKiller(SudokuBoard sb) {<br>
this.sb = sb;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Check if a number is, according to Sudoku rules, a legal candidate for</li>
<li>the given cell.</li>
<li>
<a class="mention" href="/u/param">@param</a> num Number to check.</li>
<li>
<a class="mention" href="/u/param">@param</a> row Cell’s row.</li>
<li>
<a class="mention" href="/u/param">@param</a> col Cell’s column.</li>
<li>
<a class="mention" href="/u/return">@return</a> <code>false<code> if <code>num<code> already appears in the row,</code></code></code></code>
</li>
<li>
<pre><code>    column or box the cell belongs to or &lt;code&gt;true&lt;code&gt; otherwise.
</code></pre>
</li>
</ul>
<p>*/<br>
private boolean check(int num, int row, int col) {<br>
int r = (row / sb.box_size) * sb.box_size;<br>
int c = (col / sb.box_size) * sb.box_size;</p>
<pre><code> for (int i = 0; i &lt; sb.size; i++) {
     if (sb.getCell(row, i) == num ||
         sb.getCell(i, col) == num ||
         sb.getCell(r + (i % sb.box_size), c + (i / sb.box_size)) == num) {
         return false;
     }
 }
 return true;
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>
<p>Test all candidate numbers for a given cell until the board is complete.</p>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> row Cell’s row.</p>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> col Cell’s column.</p>
</li>
<li>
<p><a class="mention" href="/u/return">@return</a> <code>false<code> if no legal numbers are found for this cell.<br>
*/<br>
public boolean guess(int row, int col) {<br>
int nextCol = (col + 1) % sb.size;<br>
int nextRow = (nextCol == 0) ? row + 1 : row;</code></code></p>
<p>try {<br>
if (sb.getCell(row, col) != sb.EMPTY)<br>
return guess(nextRow, nextCol);<br>
}<br>
catch (ArrayIndexOutOfBoundsException e) {<br>
return true;<br>
}</p>
<p>for (int i = 1; i &lt;= sb.size; i++) {<br>
if (check(i, row, col)) {<br>
sb.setCell(i, row, col);<br>
if (guess(nextRow, nextCol)) {<br>
return true;<br>
}<br>
}<br>
}<br>
sb.setCell(sb.EMPTY, row, col);<br>
return false;<br>
}<br>
}</p>
</li>
</ul>
</li>
</ul>
<p>/*******************************************************************************</p>
<ul>
<li>SwingSudokuBoard.java                                                       *<br>
*******************************************************************************/<br>
package sudokiller;</li>
</ul>
<p>import java.awt.<em>;<br>
import javax.swing.</em>;</p>
<p>/**</p>
<ul>
<li>
<p>This class represents a graphical Sudoku board.</p>
</li>
<li>
<p>It is mostly a two-dimensional <code>JTextField<code> array</code></code></p>
</li>
<li>
<p>providing all the functionality of a <code>SudokuBoard<code> object.</code></code></p>
</li>
<li>
<p>Board cells are identified by their row and column and are zero-indexed.</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0<br>
*/<br>
public class SwingSudokuBoard extends SudokuBoard {<br>
private JTextField[][] cells;          // Graphical game board<br>
private JPanel panel = new JPanel();   // Container</p>
<p>/**</p>
<ul>
<li>Draws an empty board.</li>
<li>
<a class="mention" href="/u/param">@param</a> size Number of rows and columns of the board.<br>
*/<br>
public SwingSudokuBoard(int size) {<br>
super(size);<br>
cells = new JTextField[size][size];<br>
panel.setLayout(new GridLayout(size, size));<br>
for (int row = 0; row &lt; size; row++) {<br>
for (int col = 0; col &lt; size; col++)  {<br>
cells[row][col] = new JTextField(1);<br>
panel.add(cells[row][col]);<br>
}<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Draws and initializes the board.</li>
<li>
<a class="mention" href="/u/param">@param</a> board Array to initialize the board contents.<br>
*/<br>
public SwingSudokuBoard(int[][] board) {<br>
this(board.length);<br>
for (int row = 0; row &lt; size; row++) {<br>
for (int col = 0; col &lt; size; col++) {<br>
setCell(board[row][col], row, col);<br>
}<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Puts a number into a specific text field.</li>
<li>
<a class="mention" href="/u/param">@param</a> num Number to put into the text field (cell).</li>
<li>
<a class="mention" href="/u/param">@param</a> row Cell’s row.</li>
<li>
<a class="mention" href="/u/param">@param</a> col Cell’s column.<br>
*/<br>
public void setCell(int num, int row, int col) {<br>
super.setCell(num, row, col);<br>
String text = (num == EMPTY) ? “” : String.valueOf(num);<br>
cells[row][col].setText(text);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Returns the number contained in a specific text field (cell).</p>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> row Cell’s row.</p>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> col Cell’s column.</p>
</li>
<li>
<p><a class="mention" href="/u/return">@return</a> The number contained in the cell.<br>
*/<br>
public int getCell(int row, int col) {<br>
int cell;</p>
<p>try {<br>
cell = Integer.parseInt(cells[row][col].getText());<br>
}<br>
catch (NumberFormatException e) {<br>
cell = EMPTY;<br>
}<br>
return cell;<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Returns the JPanel containing the board.</li>
<li>
<a class="mention" href="/u/return">@return</a> Returns the board container.<br>
*/<br>
public JPanel getPanel() {<br>
return panel;<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>/*******************************************************************************</p>
<ul>
<li>SwingSudoKiller.java                                                        *<br>
*******************************************************************************/<br>
package sudokiller;</li>
</ul>
<p>import java.awt.<em>;<br>
import java.awt.event.</em>;<br>
import javax.swing.*;</p>
<p>/**</p>
<ul>
<li>
<p>Graphical Sudoku game solver.</p>
</li>
<li>
<p>The user should fill the board with the puzzle to solve and click the</p>
</li>
<li>
<p>‘Start’ button (or type ‘ALT-s’) to get the solution.</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.0<br>
*/<br>
public class SwingSudoKiller extends SudoKiller {</p>
<p>/**</p>
<ul>
<li>
<p>Draw the game board.</p>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> ssb The puzzle to solve.<br>
*/<br>
public SwingSudoKiller(SwingSudokuBoard ssb) {<br>
super(ssb);<br>
final JPanel panel = ssb.getPanel();</p>
<p>Runnable runner = new Runnable() {<br>
public void run() {<br>
final JFrame frame = new JFrame(“SudoKiller”);<br>
frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</p>
<pre><code>     ActionListener al = new ActionListener() {
         public void actionPerformed(ActionEvent ae) {
             if (! guess(0, 0))
                 JOptionPane.showMessageDialog(frame, "Solution not found!");
         }
     };
     frame.setLayout(new GridBagLayout());
     addComponent(frame, panel, 0, 0, 1, 1);
     
     JButton b = new JButton("Start!");
     b.setMnemonic(KeyEvent.VK_S);
     b.addActionListener(al);
     addComponent(frame, b, 0, 1, 1, 1);

     frame.setSize(240, 280);
     frame.setVisible(true);
 }
</code></pre>
<p>};<br>
EventQueue.invokeLater(runner);<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Add a component to the GUI.</li>
<li>
<a class="mention" href="/u/param">@param</a> container Container to add the component to.</li>
<li>
<a class="mention" href="/u/param">@param</a> component The component to be added.</li>
<li>
<a class="mention" href="/u/param">@param</a> gridx Horizontal cell position inside the grid.</li>
<li>
<a class="mention" href="/u/param">@param</a> gridy Vertical cell position inside the grid.</li>
<li>
<a class="mention" href="/u/param">@param</a> gridwidth Number of cells in a row for the text field.</li>
<li>
<a class="mention" href="/u/param">@param</a> gridheight Number of cells in a column for the text field.<br>
*/<br>
private static void addComponent(Container container, Component component,<br>
int gridx, int gridy, int gridwidth, int gridheight) {<br>
Insets insets = new Insets(0, 0, 0, 0);<br>
GridBagConstraints gbc = new GridBagConstraints(gridx, gridy, gridwidth,<br>
gridheight, 1, 1, GridBagConstraints.CENTER,<br>
GridBagConstraints.BOTH, insets, 0, 0);<br>
container.add(component, gbc);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017/1</link>
        <pubDate>Tue, 04 Dec 2012 04:04:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-471017-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-the-hell-do-i-run-this/471017.rss">How the hell do I run this?</source>
      </item>
  </channel>
</rss>
