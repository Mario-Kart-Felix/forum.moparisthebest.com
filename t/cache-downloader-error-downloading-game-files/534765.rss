<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache Downloader (error downloading Game Files)</title>
    <link>https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765</link>
    <description>Im not sure what im doing wrong

[IMG]http://i44.tinypic.com/5djuvm.png[/img]

[IMG]http://i44.tinypic.com/1h3639.png[/img]

Dropbox Link

[url=https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip]https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip[/url]

Signlink.java
[code]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

 public final class signlink
    implements Runnable
{
    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    

  public static String findcachedir() {
 String str1 = System.getProperty(&quot;os.name&quot;);
    if (str1.startsWith(&quot;Mac OS&quot;)) {
  boolean exists = new File(System.getProperty(&quot;user.home&quot;) + &quot;/Deathsoulcache/&quot;).exists();
  if (exists)
  {
   return System.getProperty(&quot;user.home&quot;) + &quot;/Deathsoulcache/&quot;;
  } else {
  File f = new File(System.getProperty(&quot;user.home&quot;) + &quot;/Deathsoulcache/&quot;);
  f.mkdir();
  
  return System.getProperty(&quot;user.home&quot;) + &quot;/Deahsoulcache/&quot;;
    }
 }
 
   String as[] = { &quot;C:/&quot; };
   if ((storeid &lt; 32) || (storeid &gt; 34))
  storeid = 32;
  String s = &quot;Deathsoulcache&quot;;
  for (int i = 0; i &lt; as.length; i++)
   try {
    String s1 = as[i];
    if (s1.length() &gt; 0) {
     File file = new File(s1);
     if (!file.exists())
      continue;
    }
    File file1 = new File((new StringBuilder()).append(s1).append(s).toString());
    if(file1.exists() || file1.mkdir())
     return (new StringBuilder()).append(s1).append(s).append(&quot;/&quot;).toString();
   }
  catch(Exception _ex) { }
  
        return null;
  }

	
	public static String sencondDir() {
		File file = new File(&quot;C:/Deathsoul&quot;);
		if (!file.exists())
			file.mkdir();
		return file.toString();
	}

    private static int getuid(String s) {
        return 234523;
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}[/code]

Cachedownloader.java
[code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Downloading Game Files...&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;Downloading Game Files...&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Game Files &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Download Finished! Installing files...&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;Error Downloading Game Files.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/code]

Client.java
[code]private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k) {
        byte abyte0[] = null;
        int l = 5;
        try {
            if (decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
            }
            if (abyte0 == null) {
                drawLoadingText(0, &quot;Connecting to Game Files...&quot;);
                new Update(&quot;https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip&quot;, &quot;Deathsoulcache.zip&quot;, signlink.findcachedir());
                abyte0 = decompressors[0].decompress(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (abyte0 != null) {
            NamedArchive archive = new NamedArchive(abyte0, s);
            return archive;
        }
        while (true) {
            drawLoadingText(0, &quot;Error Downloading Game Files...&quot;);
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }[/code]</description>
    
    <lastBuildDate>Sun, 27 Oct 2013 17:31:32 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache Downloader (error downloading Game Files)</title>
        <dc:creator><![CDATA[@JCor9 JCor9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jcor9">@JCor9</a> wrote:</p>
          <blockquote>
              <p>i zip the files in the folder.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/3</link>
        <pubDate>Sun, 27 Oct 2013 17:31:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534765-3</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765.rss">Cache Downloader (error downloading Game Files)</source>
      </item>
      <item>
        <title>Cache Downloader (error downloading Game Files)</title>
        <dc:creator><![CDATA[@nolan2131 nolan2131]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nolan2131">@nolan2131</a> wrote:</p>
          <blockquote>
              <p>How are you packaging the cache?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/2</link>
        <pubDate>Sun, 27 Oct 2013 17:30:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534765-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765.rss">Cache Downloader (error downloading Game Files)</source>
      </item>
      <item>
        <title>Cache Downloader (error downloading Game Files)</title>
        <dc:creator><![CDATA[@JCor9 JCor9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jcor9">@JCor9</a> wrote:</p>
          <blockquote>
              <p>Im not sure what im doing wrong</p>
<p><img src="http://i44.tinypic.com/5djuvm.png" alt width="" height=""></p>
<p><img src="http://i44.tinypic.com/1h3639.png" alt width="" height=""></p>
<p>Dropbox Link</p>
<p><a href="https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip" data-bbcode="true" rel="nofollow noopener">https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip</a></p>
<p>Signlink.java</p>
<p>[code]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{<br>
public static void startpriv(InetAddress inetaddress)<br>
{<br>
threadliveid = (int)(Math.random() * 99999999D);<br>
if(active)<br>
{<br>
try<br>
{<br>
Thread.sleep(500L);<br>
}<br>
catch(Exception _ex) { }<br>
active = false;<br>
}<br>
socketreq = 0;<br>
threadreq = null;<br>
dnsreq = null;<br>
savereq = null;<br>
urlreq = null;<br>
socketip = inetaddress;<br>
Thread thread = new Thread(new signlink());<br>
thread.setDaemon(true);<br>
thread.start();<br>
while(!active)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }<br>
}</p>
<pre><code>public void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
            file.delete();
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}
</code></pre>
<p>public static String findcachedir() {<br>
String str1 = System.getProperty(“os.name”);<br>
if (str1.startsWith(“Mac OS”)) {<br>
boolean exists = new File(System.getProperty(“user.home”) + “/Deathsoulcache/”).exists();<br>
if (exists)<br>
{<br>
return System.getProperty(“user.home”) + “/Deathsoulcache/”;<br>
} else {<br>
File f = new File(System.getProperty(“user.home”) + “/Deathsoulcache/”);<br>
f.mkdir();</p>
<p>return System.getProperty(“user.home”) + “/Deahsoulcache/”;<br>
}<br>
}</p>
<p>String as[] = { “C:/” };<br>
if ((storeid &lt; 32) || (storeid &gt; 34))<br>
storeid = 32;<br>
String s = “Deathsoulcache”;<br>
for (int i = 0; i &lt; as.length; i++)<br>
try {<br>
String s1 = as[i];<br>
if (s1.length() &gt; 0) {<br>
File file = new File(s1);<br>
if (!file.exists())<br>
continue;<br>
}<br>
File file1 = new File((new StringBuilder()).append(s1).append(s).toString());<br>
if(file1.exists() || file1.mkdir())<br>
return (new StringBuilder()).append(s1).append(s).append("/").toString();<br>
}<br>
catch(Exception _ex) { }</p>
<pre><code>    return null;
</code></pre>
<p>}</p>
<pre><code>public static String sencondDir() {
	File file = new File("C:/Deathsoul");
	if (!file.exists())
		file.mkdir();
	return file.toString();
}

private static int getuid(String s) {
    return 234523;
}

public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/code]</p>
<p>Cachedownloader.java</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

/*
 * Only things you need to change
 *
 */
private final int VERSION = 1; // Version of cache
private String cacheLink = "https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Downloading Game Files...");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			//drawLoadingText("Downloading Game Files...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Game Files " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Download Finished! Installing files...");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		System.err.println("Error Downloading Game Files.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]</p>
<p>Client.java</p>
<p><code>private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k) {
        byte abyte0[] = null;
        int l = 5;
        try {
            if (decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
            }
            if (abyte0 == null) {
                drawLoadingText(0, "Connecting to Game Files...");
                new Update("https://dl.dropboxusercontent.com/u/76331637/Deathsoul/Deathsoulcache.zip", "Deathsoulcache.zip", signlink.findcachedir());
                abyte0 = decompressors[0].decompress(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        if (abyte0 != null) {
            NamedArchive archive = new NamedArchive(abyte0, s);
            return archive;
        }
        while (true) {
            drawLoadingText(0, "Error Downloading Game Files...");
            try {
                Thread.sleep(1000);
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765/1</link>
        <pubDate>Sun, 27 Oct 2013 17:25:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534765-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-error-downloading-game-files/534765.rss">Cache Downloader (error downloading Game Files)</source>
      </item>
  </channel>
</rss>
