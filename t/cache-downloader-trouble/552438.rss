<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache Downloader trouble</title>
    <link>https://forum.moparisthebest.com/t/cache-downloader-trouble/552438</link>
    <description>Hello everyone
so ,i have been programming on my cache for a while... But everytime, i get the same error. even with tuttorals i found. Remakes of the cache downloader ect...
So i had to use rswebclient, for the client (used it in the past when i hosted it). Wich sucked in the first place, and now that rswebclient is down. Its imposible for me to even host it, not that i want to make it up atm. But since its bugged, it pisses me off. 

Tbh it could even be my java or pc that doesnt want to run it correctly, so i case, ill add a link to my client as well, if u try to run it (might as well just run correctly for others).

So i use(d) the base TrisidiaX (i do know a lot of people dislike the base), but i have been working on it for a long time. So i dont really want to change unless its really nessesary. The time i spend on making unique stuff, fixing glitches,bugs,.. I really dont feel like doing it over on an other base unless its needed. So if someone is able to fix this, ill be so happy.

So the issue is. That when i download the cache (or try to it gives this warning, or error).

And well obv, i know it is, he cant download the cache, but there is the thing i dont get. The download link is correctly insert and such, he just stopt downloading at this (2ed pic).
[spoiler][IMG]http://i61.tinypic.com/j0kuat.png[/img][/spoiler]
[spoiler][IMG]http://i61.tinypic.com/qpphrq.png[/img][/spoiler]

well eitherway im out of ideas what causes it, here is the code (i used in my cache downloader). In my client.java i do have a new update downloader to, but since this one doesnt even work. I dont think the other one will either.  And the original one of TrisidiaX didnt work for me either.
[spoiler]
/**********************************************

@author: Google411 

06/11/2011 -- 9/19/2011

CacheDownloader.java
Version: 2.00.12


$$ If you want to disable the pipup messages just null out these lines

Line: 102 - 
cacheHasUpdated();
Line: 108 - 
cacheHasUpdated();
With
Line: 102 - 
//cacheHasUpdated();
Line: 108 - 
//cacheHasUpdated();

&lt;¤&gt;¿&lt;¤&gt; Google411 Me - Revised by Kozs


**********************************************/

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import sign.signlink;

public class CacheDownloader {

        private client client;
		client frame;
        private final int BUFFER = 1024;
		/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /* OPTION 1 */private final int VERSION = 5 ;   // Version of cache, make it +1 if you updated your cache on your remote server
		/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;  
        /* OPTION 3*/private String cacheLink = &quot;https://www.dropbox.com/s/zxuuvpw8zyulowi/MidnightCache.zip?dl=0&quot;;
		/* OPTION 4 */private String cacheDir = &quot;C:/&quot; ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing &#39;/&#39; 
		/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        private String fileToExtract = getCacheDir() + getArchivedName();
        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
        }
		
        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
        }

        private String getCacheLink() {
                return cacheLink;
        }
		
        private String getCacheDir() {
                return cacheDir;
        }

        private int getCacheVersion() {
                return VERSION;
        }
		
		private int pauseHandlerDelay1000Equals1Second() {
				return pauseHandlerDelay;
		}
	
		private String localCacheFile() {
				return getCacheDir() + getArchivedName();
		}
        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                if(!location.exists()) {
						cacheHasUpdated();
                        downloadFile(getCacheLink(), getArchivedName());
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
								cacheHasUpdated();
                                downloadFile(getCacheLink(), getArchivedName());
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();
                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {
                }
                return null;
        }			
			public void cacheHasUpdated() {
				JOptionPane.showMessageDialog(frame, &quot;It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.&quot;, &quot;Cache Version Invalid&quot;, JOptionPane.WARNING_MESSAGE);
				}
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                try {
                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                        new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                        byte[] data = new byte[BUFFER]; 
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
                        }
                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }
				fileExists();
        }
        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }
	public void fileExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;The cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please download it manually at:&quot;);
	  System.out.println(localCacheFile());
	  System.out.println(&quot;File Directory:&quot;);
	  System.out.println(getCacheDir());
	  pauseHandler();
	cacheDownloadError();
    }else {
      drawLoadingText(&quot;Your cache is downloaded and ready to un-zip!&quot;);
	  pauseHandler();
	  unZip();	  
    }
	}
	        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;
                while((e=zin.getNextEntry()) != null) {
                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {
                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
					drawLoadingText(&quot;[UN-ZIP]: &quot; + e.getName());
                }
                zin.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
			pauseHandler();
			unNeededCacheExists();
        }
        private void unzip(ZipInputStream zin, String s) 
                throws IOException {
                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
				}
        }
	public void unNeededCacheExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;Your cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please try to re re run the client.&quot;);
    }else {
      System.out.println(&quot;Your cache is on your HDD&quot;);
	  System.out.println(&quot;Auto Cache Deleter Attempting to delete...&quot;);
	  delete();	  
    }
	}
	    public void delete() {	
    	try{
    		File file = new File(localCacheFile());
    		if(file.delete()){
    			drawLoadingText(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
				System.out.println(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
    		}else{
    			drawLoadingText(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
				System.out.println(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
    		}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
	public void cacheDownloadError() {
		try {
            drawLoadingText(&quot;Cache Download Error - Contact an admin&quot;);
			}
			catch(Exception e){
    		e.printStackTrace();
    	}
			}
  public void pauseHandler() {
     try {
       Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }  
}
/*************************
@author Google - Revised by Kozs
*************************/
[/spoiler]

And for the people who want to try out the client, if the case downloader works, yw to (it doesnt have any link to the server or anything, so even if it does download or such. It wont logg u in into anything, since i dont have portforwarding done or even a hostname). 
[spoiler]https://www.dropbox.com/s/xe2ixr7bej4osl2/MidnightClient.jar?dl=0[/spoiler]

In main, i have that trouble with cache downloading from every PI base i tried so far (or nearly all of them). Its weird but i get that very often.
But when i download a private server (published), as in hosted to play. Most of them work perfectly fine, So im pretty sure i do something wrong but i have no idea what it is.
Eitherway i hope you guys are able to help me out. Because im out of ideas. My cache works perfectly fine, when i put it in c folder.
i even tought that my main_file_cache was bugged (inside the cache). Eitherway i hope you guys knows whats up. 

thx for reading, i hope u can help me out.</description>
    
    <lastBuildDate>Mon, 13 Jul 2015 13:52:31 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache Downloader trouble</title>
        <dc:creator><![CDATA[@YuraK YuraK]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yurak">@YuraK</a> wrote:</p>
          <blockquote>
              <p>Omg thx… I feel so stupid for not noticing that was the mistake. Thank u so much.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/3</link>
        <pubDate>Mon, 13 Jul 2015 13:52:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552438-3</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438.rss">Cache Downloader trouble</source>
      </item>
      <item>
        <title>Cache Downloader trouble</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>Your download link is wrong. It should always end in “.zip” and it also isn’t a direct download.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/2</link>
        <pubDate>Mon, 13 Jul 2015 12:55:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552438-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438.rss">Cache Downloader trouble</source>
      </item>
      <item>
        <title>Cache Downloader trouble</title>
        <dc:creator><![CDATA[@YuraK YuraK]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yurak">@YuraK</a> wrote:</p>
          <blockquote>
              <p>Hello everyone<br>
so ,i have been programming on my cache for a while… But everytime, i get the same error. even with tuttorals i found. Remakes of the cache downloader ect…<br>
So i had to use rswebclient, for the client (used it in the past when i hosted it). Wich sucked in the first place, and now that rswebclient is down. Its imposible for me to even host it, not that i want to make it up atm. But since its bugged, it pisses me off.</p>
<p>Tbh it could even be my java or pc that doesnt want to run it correctly, so i case, ill add a link to my client as well, if u try to run it (might as well just run correctly for others).</p>
<p>So i use(d) the base TrisidiaX (i do know a lot of people dislike the base), but i have been working on it for a long time. So i dont really want to change unless its really nessesary. The time i spend on making unique stuff, fixing glitches,bugs,… I really dont feel like doing it over on an other base unless its needed. So if someone is able to fix this, ill be so happy.</p>
<p>So the issue is. That when i download the cache (or try to it gives this warning, or error).</p>
<p>And well obv, i know it is, he cant download the cache, but there is the thing i dont get. The download link is correctly insert and such, he just stopt downloading at this (2ed pic).<br>
[spoiler]<div class="lightbox-wrapper"><a class="lightbox" href="http://i61.tinypic.com/j0kuat.png" title="j0kuat.png" rel="nofollow noopener"><img src="http://i61.tinypic.com/j0kuat.png" alt width="690" height="335"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">j0kuat.png</span><span class="informations">1266×616</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div>[/spoiler]<br>
[spoiler]<div class="lightbox-wrapper"><a class="lightbox" href="http://i61.tinypic.com/qpphrq.png" title="qpphrq.png" rel="nofollow noopener"><img src="http://i61.tinypic.com/qpphrq.png" alt width="572" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">qpphrq.png</span><span class="informations">947×827</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div>[/spoiler]</p>
<p>well eitherway im out of ideas what causes it, here is the code (i used in my cache downloader). In my client.java i do have a new update downloader to, but since this one doesnt even work. I dont think the other one will either.  And the original one of TrisidiaX didnt work for me either.<br>
[spoiler]<br>
/**********************************************</p>
<p><span class="mention">@author</span>: Google411</p>
<p>06/11/2011 – 9/19/2011</p>
<p>CacheDownloader.java<br>
Version: 2.00.12</p>
<p>$$ If you want to disable the pipup messages just null out these lines</p>
<p>Line: 102 -<br>
cacheHasUpdated();<br>
Line: 108 -<br>
cacheHasUpdated();<br>
With<br>
Line: 102 -<br>
//cacheHasUpdated();<br>
Line: 108 -<br>
//cacheHasUpdated();</p>
<p>&lt;¤&gt;¿&lt;¤&gt; Google411 Me - Revised by Kozs</p>
<p>**********************************************/</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;<br>
import javax.swing.<em>;<br>
import java.awt.event.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;
	client frame;
    private final int BUFFER = 1024;
	/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    /* OPTION 1 */private final int VERSION = 5 ;   // Version of cache, make it +1 if you updated your cache on your remote server
	/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;  
    /* OPTION 3*/private String cacheLink = "https://www.dropbox.com/s/zxuuvpw8zyulowi/MidnightCache.zip?dl=0";
	/* OPTION 4 */private String cacheDir = "C:/" ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing '/' 
	/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    private String fileToExtract = getCacheDir() + getArchivedName();
    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
    }
	
    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
    }

    private String getCacheLink() {
            return cacheLink;
    }
	
    private String getCacheDir() {
            return cacheDir;
    }

    private int getCacheVersion() {
            return VERSION;
    }
	
	private int pauseHandlerDelay1000Equals1Second() {
			return pauseHandlerDelay;
	}

	private String localCacheFile() {
			return getCacheDir() + getArchivedName();
	}
    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            if(!location.exists()) {
					cacheHasUpdated();
                    downloadFile(getCacheLink(), getArchivedName());
                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
							cacheHasUpdated();
                            downloadFile(getCacheLink(), getArchivedName());
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();
                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {
            }
            return null;
    }			
		public void cacheHasUpdated() {
			JOptionPane.showMessageDialog(frame, "It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.", "Cache Version Invalid", JOptionPane.WARNING_MESSAGE);
			}
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + "/" +localFileName)); 
                    conn = url.openConnection();
                    in = conn.getInputStream(); 
                    byte[] data = new byte[BUFFER]; 
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;
                            int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
                    }
                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");
            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }
			fileExists();
    }
    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }
public void fileExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("The cache was not downloaded correctly.");
  System.out.println("Please download it manually at:");
  System.out.println(localCacheFile());
  System.out.println("File Directory:");
  System.out.println(getCacheDir());
  pauseHandler();
cacheDownloadError();
}else {
  drawLoadingText("Your cache is downloaded and ready to un-zip!");
  pauseHandler();
  unZip();	  
}
}
        private void unZip() {
        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;
            while((e=zin.getNextEntry()) != null) {
                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {
                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
				drawLoadingText("[UN-ZIP]: " + e.getName());
            }
            zin.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
		pauseHandler();
		unNeededCacheExists();
    }
    private void unzip(ZipInputStream zin, String s) 
            throws IOException {
            FileOutputStream out = new FileOutputStream(s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
			}
    }
public void unNeededCacheExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("Your cache was not downloaded correctly.");
  System.out.println("Please try to re re run the client.");
}else {
  System.out.println("Your cache is on your HDD");
  System.out.println("Auto Cache Deleter Attempting to delete...");
  delete();	  
}
}
    public void delete() {	
	try{
		File file = new File(localCacheFile());
		if(file.delete()){
			drawLoadingText("[SUCCESS]" +file.getName()+ " was deleted!");
			System.out.println("[SUCCESS]" +file.getName()+ " was deleted!");
		}else{
			drawLoadingText("[ERROR]" +file.getName()+ " was not deleted.");
			System.out.println("[ERROR]" +file.getName()+ " was not deleted.");
		}
	}catch(Exception e){
		e.printStackTrace();
	}
}
public void cacheDownloadError() {
	try {
        drawLoadingText("Cache Download Error - Contact an admin");
		}
		catch(Exception e){
		e.printStackTrace();
	}
		}
</code></pre>
<p>public void pauseHandler() {<br>
try {<br>
Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());<br>
}<br>
catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
/*************************<br>
<span class="mention">@author</span> Google - Revised by Kozs<br>
*************************/<br>
[/spoiler]</p>
<p>And for the people who want to try out the client, if the case downloader works, yw to (it doesnt have any link to the server or anything, so even if it does download or such. It wont logg u in into anything, since i dont have portforwarding done or even a hostname).<br>
[spoiler]<a href="https://www.dropbox.com/s/xe2ixr7bej4osl2/MidnightClient.jar?dl=0%5B/spoiler%5D" rel="nofollow noopener">https://www.dropbox.com/s/xe2ixr7bej4osl2/MidnightClient.jar?dl=0[/spoiler]</a></p>
<p>In main, i have that trouble with cache downloading from every PI base i tried so far (or nearly all of them). Its weird but i get that very often.<br>
But when i download a private server (published), as in hosted to play. Most of them work perfectly fine, So im pretty sure i do something wrong but i have no idea what it is.<br>
Eitherway i hope you guys are able to help me out. Because im out of ideas. My cache works perfectly fine, when i put it in c folder.<br>
i even tought that my main_file_cache was bugged (inside the cache). Eitherway i hope you guys knows whats up.</p>
<p>thx for reading, i hope u can help me out.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-trouble/552438/1</link>
        <pubDate>Mon, 13 Jul 2015 11:36:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552438-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-trouble/552438.rss">Cache Downloader trouble</source>
      </item>
  </channel>
</rss>
