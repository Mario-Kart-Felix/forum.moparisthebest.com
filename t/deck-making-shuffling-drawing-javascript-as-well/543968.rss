<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
    <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968</link>
    <description>I just write some stuff up on my free time at ideone.com. You could use this for a card game or something of the sorts. I know it&#39;s not the best way, but it&#39;s viable.

[code=java]
import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone {
	
	public static void main(String[] args) throws java.lang.Exception {
		load();
	}
	
	public static void load() {
		List&lt;Card&gt; cards = new ArrayList&lt;Card&gt;(52);
		String[] non_numerical = { &quot;Ace&quot;, &quot;Jack&quot;, &quot;King&quot;, &quot;Queen&quot;};
		for (Card.Shape shape : Card.Shape.values()) {
			for (int i = 1; i &lt; 14; i++) {
				String value = &quot;&quot;;
				if (i == 1 || i &gt; 10)
					value = non_numerical[i == 1 ? 0 : i - 10];
				else { value = &quot;&quot; + i; }
				String name = value + &quot; of &quot; + cap(shape.name());
				cards.add(new Card(name, i, shape));
			}
		}
		Collections.shuffle(cards);
		for (int i = 0; i &lt; 10; i++) {
			if (i == 0)
				System.out.print(&quot;You pulled out a &quot;);
			if (i == 5)
				System.out.print(&quot;The computer pulled out a &quot;);
				
			if (i &lt; 5) {
				if (i &lt; 4) { System.out.print(cards.get(i).getName()+&quot;, &quot;); }
				else { System.out.println(cards.get(i).getName()); }
			} else {
				if (i &lt; 9) { System.out.print(cards.get(i).getName()+&quot;, &quot;); }
				else { System.out.println(cards.get(i).getName()); }
			}
		}
	}
	
	public static String cap(String s) {
		return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
	}
	
	public static class Card {
		
		public enum Shape { DIAMONDS, CLUBS, HEARTS, SPADES }
		
		private String name;
		private final int value;
		private final Shape shape;
		
		public Card(String name, int value, Shape shape) {
			this.name = name;
			this.value = value;
			this.shape = shape;
		}
		
		public Card(int value, Shape shape) {
			this.value = value;
			this.shape = shape;
		}
		
		public String getName() {
			return name;
		}
		
		public void setName(String name) {
			this.name = name;
		}
		
		public int getValue() {
			return value;
		}
		
		public Shape getShape() {
			return shape;
		}
	}
	
}
[/code]

Forgot to add the output:
[code]
You pulled out a 3 of Spades, King of Clubs, 7 of Clubs, Jack of Diamonds, 3 of Diamonds
The computer pulled out a 2 of Hearts, 8 of Spades, 6 of Hearts, 7 of Spades, 10 of Clubs
[/code]

[code=javascript]
var non_numerical = [&quot;Ace&quot;, &quot;Jack&quot;, &quot;Queen&quot;, &quot;King&quot;];
var categories = [&quot;Diamonds&quot;, &quot;Clubs&quot;, &quot;Spades&quot;, &quot;Hearts&quot;];
var cardList = [];

var Card = function(name, value, category) {
    this.name = name;
    this.value = value;
    this.category = category;
};

var cap = function(text) {
    return text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase();
};

var load = function() {
    var value = 1;
    var category = 0;
    for (var i = 0; i &lt; 52; i++) {
        var nameValue = &quot;&quot;;
        if (value === 14) {
            value = 1;
            category++;
        }
        if (value === 1 || value &gt; 10) {
            nameValue = non_numerical[value === 1 ? 0 : value - 10];
        } else {
            nameValue = value;
        }
        var name = nameValue + &quot; of &quot; + categories[category];
        cardList[i] = new Card(name, value, categories[category]);
        value++;
    }
};

var shuffle = function() {
    for (var i = cardList.length - 1; i &gt; 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = cardList[i];
        cardList[i] = cardList[j];
        cardList[j] = temp;
    }
};
[/code]</description>
    
    <lastBuildDate>Wed, 23 Jul 2014 16:27:14 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>[quote=“matzie, post:6, topic:543968”]Here is the shuffle for my deck lol. Not so efficient, but realistic.</p>
<p>[code=java]/**<br>
* This method shuffles cards by:<br>
1. Splitting deck into two halves.(With variable)<br>
2. Randomly picks which hand lays first<br>
3. Lays cards down, similar to splitting deck between two hands, and folding them together(bending the corners).<br>
*/<br>
public void shuffleSplit() {<br>
int halfdeck = cards.size() / 2;<br>
//max of 5 cards off in either direction from middle, not that hard in reality<br>
int center = (int) (Math.random() * 11) + halfdeck - 5;</p>
<pre><code>    //List that will store the new stack
    LinkedList&lt;Card&gt; cardsShuffled = new LinkedList();
    //0 or 1, hand1 or hand2, true or false
    boolean hand = (int) (Math.random() * 2) == 0;
    while (!(cards.isEmpty())) {
        if (hand) {
            cardsShuffled.add(cards.pop());
            center--;
        } else {
            cardsShuffled.add(cards.remove(center));
        }
        //50% sudo-chance it will change, only if a stack is not empty
        if (!(center &gt;= cards.size() || center == 0)) {
            if ((int) (Math.random() * 2) == 0) {
                hand = !hand;
            }
        } else {//if a hand(side) is empty it says what to do :)
            if (center == 0) {
                hand = false;
            } else if (center &gt;= cards.size()) {
                hand = true;
            } else {
                System.out.println("problem");//lol ;)
            }
        }
    }
    cards = cardsShuffled;

}

public void shuffledeckrandom() {
    Card tmp;
    int shuffles = (int) (Math.random() * 950) + 50;
    for (int i = 0; i &lt; shuffles; i++) {
        int carda = 0;
        int cardb = 0;
        while (carda == cardb) {
            carda = (int) (Math.random() * cards.size());
            cardb = (int) (Math.random() * cards.size());
        }
        tmp = cards.get(carda);
        cards.set(carda, cards.get(cardb));
        cards.set(cardb, tmp);
    }
}[/code][/quote]
</code></pre>
<p>Wow, how could I not think of this… The only other ways I thought for shuffling was taking a small, but random, amount of cards from the bottom and putting them on top for another random amount of times. Also, taking random amounts from a random spot and placing it in a random place in the deck.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/7</link>
        <pubDate>Wed, 23 Jul 2014 16:27:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-7</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>Here is the shuffle for my deck lol. Not so efficient, but realistic.</p>
<p>[code=java]/**<br>
* This method shuffles cards by:<br>
1. Splitting deck into two halves.(With variable)<br>
2. Randomly picks which hand lays first<br>
3. Lays cards down, similar to splitting deck between two hands, and folding them together(bending the corners).<br>
*/<br>
public void shuffleSplit() {<br>
int halfdeck = cards.size() / 2;<br>
//max of 5 cards off in either direction from middle, not that hard in reality<br>
int center = (int) (Math.random() * 11) + halfdeck - 5;</p>
<pre><code>    //List that will store the new stack
    LinkedList&lt;Card&gt; cardsShuffled = new LinkedList();
    //0 or 1, hand1 or hand2, true or false
    boolean hand = (int) (Math.random() * 2) == 0;
    while (!(cards.isEmpty())) {
        if (hand) {
            cardsShuffled.add(cards.pop());
            center--;
        } else {
            cardsShuffled.add(cards.remove(center));
        }
        //50% sudo-chance it will change, only if a stack is not empty
        if (!(center &gt;= cards.size() || center == 0)) {
            if ((int) (Math.random() * 2) == 0) {
                hand = !hand;
            }
        } else {//if a hand(side) is empty it says what to do :)
            if (center == 0) {
                hand = false;
            } else if (center &gt;= cards.size()) {
                hand = true;
            } else {
                System.out.println("problem");//lol ;)
            }
        }
    }
    cards = cardsShuffled;

}

public void shuffledeckrandom() {
    Card tmp;
    int shuffles = (int) (Math.random() * 950) + 50;
    for (int i = 0; i &lt; shuffles; i++) {
        int carda = 0;
        int cardb = 0;
        while (carda == cardb) {
            carda = (int) (Math.random() * cards.size());
            cardb = (int) (Math.random() * cards.size());
        }
        tmp = cards.get(carda);
        cards.set(carda, cards.get(cardb));
        cards.set(cardb, tmp);
    }
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/6</link>
        <pubDate>Tue, 22 Jul 2014 16:31:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-6</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="543968">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/rscshadow/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> RSCShadow:</div>
<blockquote>
<p>Well the sort solution might be negligibly more efficient, but it isn’t doing what you’re expecting in this case.</p>
</blockquote>
</aside>
<p>I meant the Fisher-Yates algorithm was more efficient for this subject.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/5</link>
        <pubDate>Fri, 20 Jun 2014 05:03:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-5</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@RSCShadow RSCShadow]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rscshadow">@RSCShadow</a> wrote:</p>
          <blockquote>
              <p>[quote=“wildskiller, post:3, topic:543968”][quote author=RSCShadow link=topic=662849.msg4431014#msg4431014 date=1403231028]<br>
In your JS solution, you’re using:</p>
<p><code>    cardList.sort(function() {
        return 0.5 - Math.random();
    });</code><br>
to shuffle the array. This solution doesn’t provide appropriate random distribution. Instead, I recommend using the Fisher-Yates algorithm. In JS you can find it at <a href="https://www.npmjs.org/package/knuth-shuffle" rel="nofollow noopener">https://www.npmjs.org/package/knuth-shuffle</a> or <a href="https://www.npmjs.org/package/shuffle-array" rel="nofollow noopener">https://www.npmjs.org/package/shuffle-array</a>.</p>
<p>Feel free to write it yourself if you’re learning, but generally in JS it’s recommended to use and write small modules that accomplish one thing and are highly re-usable. Even things like your capitalize function are best done in modules (<a href="https://www.npmjs.org/package/capitalize" rel="nofollow noopener">https://www.npmjs.org/package/capitalize</a>).<br>
[/quote]<br>
I had used the Fisher-Yates algorithm at first, but I love to use as less lines as I can. I will replace my current function with the algorithm though.</p>
<p>But of course efficiency is always better[/quote]Well the sort solution might be negligibly more efficient, but it isn’t doing what you’re expecting in this case.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/4</link>
        <pubDate>Fri, 20 Jun 2014 04:16:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-4</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>[quote=“RSCShadow, post:2, topic:543968”]In your JS solution, you’re using:</p>
<p><code>    cardList.sort(function() {
        return 0.5 - Math.random();
    });</code><br>
to shuffle the array. This solution doesn’t provide appropriate random distribution. Instead, I recommend using the Fisher-Yates algorithm. In JS you can find it at <a href="https://www.npmjs.org/package/knuth-shuffle" rel="nofollow noopener">https://www.npmjs.org/package/knuth-shuffle</a> or <a href="https://www.npmjs.org/package/shuffle-array" rel="nofollow noopener">https://www.npmjs.org/package/shuffle-array</a>.</p>
<p>Feel free to write it yourself if you’re learning, but generally in JS it’s recommended to use and write small modules that accomplish one thing and are highly re-usable. Even things like your capitalize function are best done in modules (<a href="https://www.npmjs.org/package/capitalize" rel="nofollow noopener">https://www.npmjs.org/package/capitalize</a>).[/quote]<br>
I had used the Fisher-Yates algorithm at first, but I love to use as less lines as I can. I will replace my current function with the algorithm though.</p>
<p>But of course efficiency is always better</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/3</link>
        <pubDate>Fri, 20 Jun 2014 03:07:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-3</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@RSCShadow RSCShadow]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rscshadow">@RSCShadow</a> wrote:</p>
          <blockquote>
              <p>In your JS solution, you’re using:</p>
<p><code>    cardList.sort(function() {
        return 0.5 - Math.random();
    });</code><br>
to shuffle the array. This solution doesn’t provide appropriate random distribution. Instead, I recommend using the Fisher-Yates algorithm. In JS you can find it at <a href="https://www.npmjs.org/package/knuth-shuffle" rel="nofollow noopener">https://www.npmjs.org/package/knuth-shuffle</a> or <a href="https://www.npmjs.org/package/shuffle-array" rel="nofollow noopener">https://www.npmjs.org/package/shuffle-array</a>.</p>
<p>Feel free to write it yourself if you’re learning, but generally in JS it’s recommended to use and write small modules that accomplish one thing and are highly re-usable. Even things like your capitalize function are best done in modules (<a href="https://www.npmjs.org/package/capitalize" rel="nofollow noopener">https://www.npmjs.org/package/capitalize</a>).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/2</link>
        <pubDate>Fri, 20 Jun 2014 02:23:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-2</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
      <item>
        <title>Deck: Making, Shuffling, Drawing - JavaScript as well</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I just write some stuff up on my free time at <a href="http://ideone.com" rel="nofollow noopener">ideone.com</a>. You could use this for a card game or something of the sorts. I know it’s not the best way, but it’s viable.</p>
<pre><code class="lang-auto">import java.util.*;
import java.lang.*;
import java.io.*;

class Ideone {
	
	public static void main(String[] args) throws java.lang.Exception {
		load();
	}
	
	public static void load() {
		List&lt;Card&gt; cards = new ArrayList&lt;Card&gt;(52);
		String[] non_numerical = { "Ace", "Jack", "King", "Queen"};
		for (Card.Shape shape : Card.Shape.values()) {
			for (int i = 1; i &lt; 14; i++) {
				String value = "";
				if (i == 1 || i &gt; 10)
					value = non_numerical[i == 1 ? 0 : i - 10];
				else { value = "" + i; }
				String name = value + " of " + cap(shape.name());
				cards.add(new Card(name, i, shape));
			}
		}
		Collections.shuffle(cards);
		for (int i = 0; i &lt; 10; i++) {
			if (i == 0)
				System.out.print("You pulled out a ");
			if (i == 5)
				System.out.print("The computer pulled out a ");
				
			if (i &lt; 5) {
				if (i &lt; 4) { System.out.print(cards.get(i).getName()+", "); }
				else { System.out.println(cards.get(i).getName()); }
			} else {
				if (i &lt; 9) { System.out.print(cards.get(i).getName()+", "); }
				else { System.out.println(cards.get(i).getName()); }
			}
		}
	}
	
	public static String cap(String s) {
		return s.substring(0, 1).toUpperCase() + s.substring(1).toLowerCase();
	}
	
	public static class Card {
		
		public enum Shape { DIAMONDS, CLUBS, HEARTS, SPADES }
		
		private String name;
		private final int value;
		private final Shape shape;
		
		public Card(String name, int value, Shape shape) {
			this.name = name;
			this.value = value;
			this.shape = shape;
		}
		
		public Card(int value, Shape shape) {
			this.value = value;
			this.shape = shape;
		}
		
		public String getName() {
			return name;
		}
		
		public void setName(String name) {
			this.name = name;
		}
		
		public int getValue() {
			return value;
		}
		
		public Shape getShape() {
			return shape;
		}
	}
	
}</code></pre>
<p>Forgot to add the output:</p>
<pre><code class="lang-auto">You pulled out a 3 of Spades, King of Clubs, 7 of Clubs, Jack of Diamonds, 3 of Diamonds
The computer pulled out a 2 of Hearts, 8 of Spades, 6 of Hearts, 7 of Spades, 10 of Clubs</code></pre>
<pre><code class="lang-auto">var non_numerical = ["Ace", "Jack", "Queen", "King"];
var categories = ["Diamonds", "Clubs", "Spades", "Hearts"];
var cardList = [];

var Card = function(name, value, category) {
    this.name = name;
    this.value = value;
    this.category = category;
};

var cap = function(text) {
    return text.substring(0, 1).toUpperCase() + text.substring(1).toLowerCase();
};

var load = function() {
    var value = 1;
    var category = 0;
    for (var i = 0; i &lt; 52; i++) {
        var nameValue = "";
        if (value === 14) {
            value = 1;
            category++;
        }
        if (value === 1 || value &gt; 10) {
            nameValue = non_numerical[value === 1 ? 0 : value - 10];
        } else {
            nameValue = value;
        }
        var name = nameValue + " of " + categories[category];
        cardList[i] = new Card(name, value, categories[category]);
        value++;
    }
};

var shuffle = function() {
    for (var i = cardList.length - 1; i &gt; 0; i--) {
        var j = Math.floor(Math.random() * (i + 1));
        var temp = cardList[i];
        cardList[i] = cardList[j];
        cardList[j] = temp;
    }
};</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968/1</link>
        <pubDate>Sat, 14 Jun 2014 18:12:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-543968-1</guid>
        <source url="https://forum.moparisthebest.com/t/deck-making-shuffling-drawing-javascript-as-well/543968.rss">Deck: Making, Shuffling, Drawing - JavaScript as well</source>
      </item>
  </channel>
</rss>
