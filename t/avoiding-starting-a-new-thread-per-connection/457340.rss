<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Avoiding starting a new thread per connection</title>
    <link>https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340</link>
    <description>I&#39;m writing a server (Not RSPS) and I&#39;m wondering what alternatives there are to handling connected clients besides updating each on a separate thread. Could I possibly use one thread to cycle through all connections and update them each on one thread? What is the best method of doing something like this?</description>
    
    <lastBuildDate>Fri, 31 Aug 2012 03:56:35 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Avoiding starting a new thread per connection</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“ziplock, post:3, topic:457340”][quote author=Lin link=topic=560272.msg4091071#msg4091071 date=1346369307]<br>
Just make one thread listen for connections (listener) and either process the connections on that thread or send them off to another thread that processes things like logging in. Have a list of connected clients and make one thread that cycles through all of them and updates them, and if you want, you can separate the networking and processing but I recommend using non-blocking IO instead (still multiple threads but much easier).<br>
[/quote]</p>
<p>This sounds good. I’m just trying to prevent tacking up 100+ threads. What are the advantages of using non-blocking IO?[/quote]</p>
<p>Take for example, reading from a socket</p>
<pre><code class="lang-auto">int ready = input.read();</code></pre>
<p>That piece of code will block (or freeze) the current thread, until there is something available to be read.</p>
<p>Or for a better example, accepting a socket</p>
<pre><code class="lang-auto">Socket client = serverSocket.accept();
System.out.println("Accepted client");</code></pre>
<p>Now, with blocking IO, the second line will not execute, until a client tries to make a connection. It could literally be years before a client tries to connect, and therefore, the second line will only be hit then, leaving the thread it is operating in constantly checking.</p>
<p>With non-blocking IO, when you try to accept a connection, it will return immediately whether or not there is a connection to be made (assuming it is configured to not block).</p>
<p>So the same code</p>
<pre><code class="lang-auto">Socket s = serverSocket.accept();
System.out.println("Client connected");</code></pre>
<p>If the serverSocket object is configured to not block, then <span class="bbcode-i">s</span> will either be null, or the actual socket immediately after <span class="bbcode-i">accept</span> is called. It doesn’t wait, so it doesn’t block.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/4</link>
        <pubDate>Fri, 31 Aug 2012 03:56:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457340-4</guid>
        <source url="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340.rss">Avoiding starting a new thread per connection</source>
      </item>
      <item>
        <title>Avoiding starting a new thread per connection</title>
        <dc:creator><![CDATA[@ziplock ziplock]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ziplock">@ziplock</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="457340">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/lin/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Lin:</div>
<blockquote>
<p>Just make one thread listen for connections (listener) and either process the connections on that thread or send them off to another thread that processes things like logging in. Have a list of connected clients and make one thread that cycles through all of them and updates them, and if you want, you can separate the networking and processing but I recommend using non-blocking IO instead (still multiple threads but much easier).</p>
</blockquote>
</aside>
<p>This sounds good. I’m just trying to prevent tacking up 100+ threads. What are the advantages of using non-blocking IO?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/3</link>
        <pubDate>Fri, 31 Aug 2012 01:42:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457340-3</guid>
        <source url="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340.rss">Avoiding starting a new thread per connection</source>
      </item>
      <item>
        <title>Avoiding starting a new thread per connection</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>Just make one thread listen for connections (listener) and either process the connections on that thread or send them off to another thread that processes things like logging in. Have a list of connected clients and make one thread that cycles through all of them and updates them, and if you want, you can separate the networking and processing but I recommend using non-blocking IO instead (still multiple threads but much easier).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/2</link>
        <pubDate>Thu, 30 Aug 2012 23:28:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457340-2</guid>
        <source url="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340.rss">Avoiding starting a new thread per connection</source>
      </item>
      <item>
        <title>Avoiding starting a new thread per connection</title>
        <dc:creator><![CDATA[@ziplock ziplock]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ziplock">@ziplock</a> wrote:</p>
          <blockquote>
              <p>I’m writing a server (Not RSPS) and I’m wondering what alternatives there are to handling connected clients besides updating each on a separate thread. Could I possibly use one thread to cycle through all connections and update them each on one thread? What is the best method of doing something like this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340/1</link>
        <pubDate>Thu, 30 Aug 2012 21:55:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457340-1</guid>
        <source url="https://forum.moparisthebest.com/t/avoiding-starting-a-new-thread-per-connection/457340.rss">Avoiding starting a new thread per connection</source>
      </item>
  </channel>
</rss>
