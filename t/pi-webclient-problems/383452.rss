<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Webclient Problems</title>
    <link>https://forum.moparisthebest.com/t/pi-webclient-problems/383452</link>
    <description>BASE: PI
PROBLEM: The cache is not downloading properly for my webclient
COMPILING ERRORS: None
EXTRA:

Alright guys I need help on some problems with my webclient. This is my fourth attempt to make a webclient and in the past I failed every time and gave up. This time I&#39;m not giving up just because I have been working on this fucking shit all day and I am very frustrated. (and i hate school with a fucking passion.) Now, The main problem is that I have the DIRECT CACHE DOWNLOAD LINK:

[url=https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6]https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6[/url] (look at it yourself). Now I&#39;m not sure wth the problem is..(maybe i didnt put everything in the right place, or whatever.)

But when it downloads, the only thing that downloads is the &quot;main_file_cache.dat&quot; files and nothing else. I don&#39;t know why it is doing this so someone please help?

This is my cachedownloder.java:
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Unpacking..&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
[/code]

This is my error in the DOS Box:

[code]
DevastationX Client
java.io.FileNotFoundException: C:\DevastationX\DevastationX.zip?w=ba7f98b6 (The
filename, directory name, or volume label syntax is incorrect)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.downloadFile(CacheDownloader.java:103)
        at CacheDownloader.downloadCache(CacheDownloader.java:76)
        at client.startUp(client.java:8130)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: C:\DevastationX\DevastationX.zip?w=ba7f98b6 (The
filename, directory name, or volume label syntax is incorrect)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.unZip(CacheDownloader.java:161)
        at CacheDownloader.downloadCache(CacheDownloader.java:78)
        at client.startUp(client.java:8130)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: C:\DevastationX\Maps\mapConfig.txt (The system ca
nnot find the path specified)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileReader.&lt;init&gt;(Unknown Source)
        at client.setNewMaps(client.java:67)
        at client.startUp(client.java:8131)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.util.zip.ZipException: error in opening zip file
        at java.util.zip.ZipFile.open(Native Method)
        at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
        at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
        at Update.unZipFile(Update.java:53)
        at Update.&lt;init&gt;(Update.java:29)
        at client.streamLoaderForName(client.java:4324)
        at client.startUp(client.java:8141)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
[/code]

This is my client&#39;s screen:
[IMG]http://i51.tinypic.com/14sh8cn.png[/img]

This is what downloads into my C:/ drive after I run the client:
[IMG]http://i56.tinypic.com/2cf9j6s.png[/img]

This is what is supposed to be downloaded into my C:/ drive:
[IMG]http://i51.tinypic.com/zt91cg.png[/img]


Extra info: I am using Dropbox for my webhost (not sure if that is the damn problem)

Anyways, I appreciate all help. I am very frustrated right now and yes..IMADBRO:awesome:</description>
    
    <lastBuildDate>Tue, 22 Feb 2011 04:41:55 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-webclient-problems/383452.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Webclient Problems</title>
        <dc:creator><![CDATA[@de_dust89 de dust89]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/de_dust89">@de_dust89</a> wrote:</p>
          <blockquote>
              <p>BASE: PI<br>
PROBLEM: The cache is not downloading properly for my webclient<br>
COMPILING ERRORS: None<br>
EXTRA:</p>
<p>Alright guys I need help on some problems with my webclient. This is my fourth attempt to make a webclient and in the past I failed every time and gave up. This time I’m not giving up just because I have been working on this fucking shit all day and I am very frustrated. (and i hate school with a fucking passion.) Now, The main problem is that I have the DIRECT CACHE DOWNLOAD LINK:</p>
<p><a href="https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6" data-bbcode="true" rel="nofollow noopener">https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6</a> (look at it yourself). Now I’m not sure wth the problem is…(maybe i didnt put everything in the right place, or whatever.)</p>
<p>But when it downloads, the only thing that downloads is the “main_file_cache.dat” files and nothing else. I don’t know why it is doing this so someone please help?</p>
<p>This is my cachedownloder.java:</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = "https://dl-web.dropbox.com/get/DevastationX.zip?w=ba7f98b6"; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
		
		if(!location.exists()) {
			//drawLoadingText("Loading new Updates....");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText("~ First Time Installation, Only Once! ~");
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + "/" +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, "Downloading Cache " + percentage + "%...");

			}

			System.out.println(localFileName + "\t" + numWritten);
			drawLoadingText("Unpacking..");

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf('/');
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println("error retreiving archivaed name.");
		}
		return "";
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println("unzipping2 " + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn't write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          "Delete: no such file or directory: " + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException("Delete: write protected: "
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            "Delete: directory not empty: " + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException("Delete: deletion failed");

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println("unzipping " + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}</code></pre>
<p>This is my error in the DOS Box:</p>
<pre><code class="lang-auto">DevastationX Client
java.io.FileNotFoundException: C:\DevastationX\DevastationX.zip?w=ba7f98b6 (The
filename, directory name, or volume label syntax is incorrect)
        at java.io.FileOutputStream.open(Native Method)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileOutputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.downloadFile(CacheDownloader.java:103)
        at CacheDownloader.downloadCache(CacheDownloader.java:76)
        at client.startUp(client.java:8130)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: C:\DevastationX\DevastationX.zip?w=ba7f98b6 (The
filename, directory name, or volume label syntax is incorrect)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at CacheDownloader.unZip(CacheDownloader.java:161)
        at CacheDownloader.downloadCache(CacheDownloader.java:78)
        at client.startUp(client.java:8130)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.io.FileNotFoundException: C:\DevastationX\Maps\mapConfig.txt (The system ca
nnot find the path specified)
        at java.io.FileInputStream.open(Native Method)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileInputStream.&lt;init&gt;(Unknown Source)
        at java.io.FileReader.&lt;init&gt;(Unknown Source)
        at client.setNewMaps(client.java:67)
        at client.startUp(client.java:8131)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)
java.util.zip.ZipException: error in opening zip file
        at java.util.zip.ZipFile.open(Native Method)
        at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
        at java.util.zip.ZipFile.&lt;init&gt;(Unknown Source)
        at Update.unZipFile(Update.java:53)
        at Update.&lt;init&gt;(Update.java:29)
        at client.streamLoaderForName(client.java:4324)
        at client.startUp(client.java:8141)
        at RSApplet.run(RSApplet.java:33)
        at client.run(client.java:5580)
        at java.lang.Thread.run(Unknown Source)</code></pre>
<p>This is my client’s screen:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i51.tinypic.com/14sh8cn.png" title="14sh8cn.png" rel="nofollow noopener"><img src="http://i51.tinypic.com/14sh8cn.png" alt width="690" height="452"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">14sh8cn.png</span><span class="informations">767×503</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>This is what downloads into my C:/ drive after I run the client:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i56.tinypic.com/2cf9j6s.png" title="2cf9j6s.png" rel="nofollow noopener"><img src="http://i56.tinypic.com/2cf9j6s.png" alt width="663" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">2cf9j6s.png</span><span class="informations">1110×836</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>This is what is supposed to be downloaded into my C:/ drive:<br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i51.tinypic.com/zt91cg.png" title="zt91cg.png" rel="nofollow noopener"><img src="http://i51.tinypic.com/zt91cg.png" alt width="659" height="500"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">zt91cg.png</span><span class="informations">1110×841</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Extra info: I am using Dropbox for my webhost (not sure if that is the damn problem)</p>
<p>Anyways, I appreciate all help. I am very frustrated right now and yes…IMADBRO:awesome:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-webclient-problems/383452/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-webclient-problems/383452/1</link>
        <pubDate>Tue, 22 Feb 2011 04:41:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-383452-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-webclient-problems/383452.rss">[PI] Webclient Problems</source>
      </item>
  </channel>
</rss>
