<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Single Door Fix Fix</title>
    <link>https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872</link>
    <description>Many of you have tried using [url=http://www.moparisthebest.com/smf/index.php/topic,525800.0.html]http://www.moparisthebest.com/smf/index.php/topic,525800.0.html[/url] killamess&#39; Tutorial. I noticed it was slightly flawed and here is a fix to 99% of the Errors people reported. 

The new Doors.java is as follows: 

[code]
package server.model.players.objects;

import java.util.ArrayList;
import java.util.List;
import java.io.*;
import java.util.Scanner;
import server.model.objects.*;
import server.Server;
import server.world.ObjectHandler;

/**
 * 
 * @author Killamess
 * @author gtree01/Xeon
 * Basic door manipulation [Fixed for modern PI by Xeon/gtree01.]
 *
 */
public class Doors {

        private static Doors singleton = null;

        private List&lt;Doors&gt; doors = new ArrayList&lt;Doors&gt;();

        private File doorFile;
        
        public static Doors getSingleton() {
                if (singleton == null) {
                        singleton = new Doors(&quot;./Data/doors.txt&quot;);
                }
                return singleton;
        }

        private Doors(String file){
                doorFile = new File(file);  
        }
        
        private Doors(int door, int x, int y, int z, int face, int type, int open) {
                this.doorId = door;
                this.originalId = door;
                this.doorX = x;
                this.doorY = y;
                this.originalX = x;
                this.originalY = y;
                this.doorZ = z;
                this.originalFace = face;
                this.currentFace = face;
                this.type = type;
                this.open = open;
        }
        
        private Doors getDoor(int id, int x, int y, int z) {
                for (Doors d : doors) {
                        if (d.doorId == id) {
                                if (d.doorX == x &amp;&amp; d.doorY == y &amp;&amp; d.doorZ == z) {
                                        return d;
                                }
                        }
                }
                return null;
        }
        
        public boolean handleDoor(int id, int x, int y, int z) {

                Doors d = getDoor(id, x, y, z);
                
                if (d == null) {
                        return false;
                }
                int xAdjustment = 0, yAdjustment = 0;
                if (d.type == 0) {
                        if (d.open == 0) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        xAdjustment = -1;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        yAdjustment = 1;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        yAdjustment = -1;
                                }
                        } else if (d.open == 1) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        yAdjustment = 1;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        yAdjustment = -1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        xAdjustment = -1;
                                }
                        }
                } else if (d.type == 9) {
                        if (d.open == 0) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        xAdjustment = -1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        xAdjustment = -1;
                                }
                        } else if (d.open == 1) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        xAdjustment = 1;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        xAdjustment = -1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        xAdjustment = -1;
                                }
                        }
                }
                if (xAdjustment != 0 || yAdjustment != 0) { 
                        Objects o = new Objects(-1, d.doorX, d.doorY, d.doorZ, 0, d.type, 0);
                        Server.objectHandler.placeObject(o);
                }
                if (d.doorX == d.originalX &amp;&amp; d.doorY == d.originalY) {
                        d.doorX += xAdjustment;
                        d.doorY += yAdjustment;
                } else { 
                        Objects o = new Objects(-1, d.doorX, d.doorY, d.doorZ, 0, d.type, 0);
                        Server.objectHandler.placeObject(o);
                        d.doorX = d.originalX;
                        d.doorY = d.originalY;
                }
                if (d.doorId == d.originalId) {
                        if (d.open == 0) {
                                d.doorId += 1;
                        } else if (d.open == 1) {
                                d.doorId -= 1;
                        }
                } else if (d.doorId != d.originalId) {
                        if (d.open == 0) {
                                d.doorId -= 1;
                        } else if (d.open == 1) {
                                d.doorId += 1;
                        }
                }
                Server.objectHandler.placeObject(new Objects(d.doorId, d.doorX, d.doorY, d.doorZ, getNextFace(d), d.type, 0));
                return true;
        }
        
        private int getNextFace(Doors d) {
                int f = d.originalFace;
                if (d.type == 0) {
                        if (d.open == 0) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        f = 1;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        f = 2;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        f = 3;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        f = 0;
                                } else if (d.originalFace != d.currentFace){
                                        f = d.originalFace;
                                }
                        } else if (d.open == 1) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        f = 3;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        f = 0;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        f = 1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        f = 2;
                                } else if (d.originalFace != d.currentFace){
                                        f = d.originalFace;
                                }
                        }
                } else if (d.type == 9) {
                        if (d.open == 0) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        f = 3;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        f = 2;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        f = 1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        f = 0;
                                } else if (d.originalFace != d.currentFace){
                                        f = d.originalFace;
                                }
                        } else if (d.open == 1) {
                                if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                        f = 3;
                                } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                        f = 0;
                                } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                        f = 1;
                                } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                        f = 2;
                                } else if (d.originalFace != d.currentFace){
                                        f = d.originalFace;
                                }
                        }
                }
                d.currentFace = f;
                return f;
        }
        
        public void load() {
                long start = System.currentTimeMillis();
                try {
                        singleton.processLineByLine();
                } catch (FileNotFoundException e) {
                        e.printStackTrace();
                }
                System.out.println(&quot;Loaded &quot;+ doors.size() +&quot; doors in &quot;+ (System.currentTimeMillis() - start) +&quot;ms.&quot;);
        }
        
        private final void processLineByLine() throws FileNotFoundException {
                Scanner scanner = new Scanner(new FileReader(doorFile));
                    try {
                            while(scanner.hasNextLine()) {
                                    processLine(scanner.nextLine());
                            }
                   } finally {
                            scanner.close();
                    }
        }
        
        protected void processLine(String line){
                Scanner scanner = new Scanner(line);
                scanner.useDelimiter(&quot; &quot;);
                try {
                        while(scanner.hasNextLine()) {
                                int id = Integer.parseInt(scanner.next());
                                int x = Integer.parseInt(scanner.next());
                                    int y = Integer.parseInt(scanner.next());
                                    int f = Integer.parseInt(scanner.next());
                                    int z = Integer.parseInt(scanner.next());
                                    int t = Integer.parseInt(scanner.next());
                                    doors.add(new Doors(id,x,y,z,f,t,alreadyOpen(id)?1:0));
                        }
                } finally {
                        scanner.close();
                }
        }
        
        private boolean alreadyOpen(int id) {
                for (int i = 0; i &lt; openDoors.length; i++) {
                        if (openDoors[i] == id) {
                                return true;
                        }
                }
                return false;
        }

        private int doorId;
        private int originalId;
        private int doorX;
        private int doorY;
        private int originalX;
        private int originalY;
        private int doorZ;
        private int originalFace;
        private int currentFace;
        private int type;
        private int open;
        
        private static int[] openDoors = {
                1504, 1514, 1517, 1520, 1531, 
                1534, 2033, 2035, 2037, 2998, 
                3271, 4468, 4697, 6101,6103, 
                6105, 6107, 6109, 6111, 6113, 
                6115, 6976, 6978, 8696, 8819,
                10261, 10263,10265,11708,11710,
                11712,11715,11994,12445, 13002,        
        };
        
}[/code]

This will fix the &quot;cannot find symbol&quot; that many have been having! 

[b]Credits[/b]
killamess 99.9%
gtree01/Xeon 0.01% (It was an easy fix)

I realize this is a tiny fix but this is for all aspiring Java Programmers!!

Have Fun!</description>
    
    <lastBuildDate>Sun, 29 Apr 2012 01:51:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Single Door Fix Fix</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>Its a snippet if anything. Goes in the snippets thread.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/3</link>
        <pubDate>Sun, 29 Apr 2012 01:51:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440872-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872.rss">[PI] Single Door Fix Fix</source>
      </item>
      <item>
        <title>[PI] Single Door Fix Fix</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>Not worth the re-release.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/2</link>
        <pubDate>Sat, 28 Apr 2012 22:35:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440872-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872.rss">[PI] Single Door Fix Fix</source>
      </item>
      <item>
        <title>[PI] Single Door Fix Fix</title>
        <dc:creator><![CDATA[@gtree01 gtree01]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gtree01">@gtree01</a> wrote:</p>
          <blockquote>
              <p>Many of you have tried using <a href="http://www.moparisthebest.com/smf/index.php/topic,525800.0.html" data-bbcode="true" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,525800.0.html</a> killamess’ Tutorial. I noticed it was slightly flawed and here is a fix to 99% of the Errors people reported.</p>
<p>The new Doors.java is as follows:</p>
<p>[code]<br>
package server.model.players.objects;</p>
<p>import java.util.ArrayList;<br>
import java.util.List;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import java.util.Scanner;<br>
import server.model.objects.</em>;<br>
import server.Server;<br>
import server.world.ObjectHandler;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Killamess</li>
<li>
<span class="mention">@author</span> gtree01/Xeon</li>
<li>Basic door manipulation [Fixed for modern PI by Xeon/gtree01.]</li>
<li>
</li>
</ul>
<p>*/<br>
public class Doors {</p>
<pre><code>    private static Doors singleton = null;

    private List&lt;Doors&gt; doors = new ArrayList&lt;Doors&gt;();

    private File doorFile;
    
    public static Doors getSingleton() {
            if (singleton == null) {
                    singleton = new Doors("./Data/doors.txt");
            }
            return singleton;
    }

    private Doors(String file){
            doorFile = new File(file);  
    }
    
    private Doors(int door, int x, int y, int z, int face, int type, int open) {
            this.doorId = door;
            this.originalId = door;
            this.doorX = x;
            this.doorY = y;
            this.originalX = x;
            this.originalY = y;
            this.doorZ = z;
            this.originalFace = face;
            this.currentFace = face;
            this.type = type;
            this.open = open;
    }
    
    private Doors getDoor(int id, int x, int y, int z) {
            for (Doors d : doors) {
                    if (d.doorId == id) {
                            if (d.doorX == x &amp;&amp; d.doorY == y &amp;&amp; d.doorZ == z) {
                                    return d;
                            }
                    }
            }
            return null;
    }
    
    public boolean handleDoor(int id, int x, int y, int z) {

            Doors d = getDoor(id, x, y, z);
            
            if (d == null) {
                    return false;
            }
            int xAdjustment = 0, yAdjustment = 0;
            if (d.type == 0) {
                    if (d.open == 0) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    xAdjustment = -1;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    yAdjustment = 1;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    yAdjustment = -1;
                            }
                    } else if (d.open == 1) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    yAdjustment = 1;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    yAdjustment = -1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    xAdjustment = -1;
                            }
                    }
            } else if (d.type == 9) {
                    if (d.open == 0) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    xAdjustment = -1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    xAdjustment = -1;
                            }
                    } else if (d.open == 1) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    xAdjustment = 1;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    xAdjustment = -1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    xAdjustment = -1;
                            }
                    }
            }
            if (xAdjustment != 0 || yAdjustment != 0) { 
                    Objects o = new Objects(-1, d.doorX, d.doorY, d.doorZ, 0, d.type, 0);
                    Server.objectHandler.placeObject(o);
            }
            if (d.doorX == d.originalX &amp;&amp; d.doorY == d.originalY) {
                    d.doorX += xAdjustment;
                    d.doorY += yAdjustment;
            } else { 
                    Objects o = new Objects(-1, d.doorX, d.doorY, d.doorZ, 0, d.type, 0);
                    Server.objectHandler.placeObject(o);
                    d.doorX = d.originalX;
                    d.doorY = d.originalY;
            }
            if (d.doorId == d.originalId) {
                    if (d.open == 0) {
                            d.doorId += 1;
                    } else if (d.open == 1) {
                            d.doorId -= 1;
                    }
            } else if (d.doorId != d.originalId) {
                    if (d.open == 0) {
                            d.doorId -= 1;
                    } else if (d.open == 1) {
                            d.doorId += 1;
                    }
            }
            Server.objectHandler.placeObject(new Objects(d.doorId, d.doorX, d.doorY, d.doorZ, getNextFace(d), d.type, 0));
            return true;
    }
    
    private int getNextFace(Doors d) {
            int f = d.originalFace;
            if (d.type == 0) {
                    if (d.open == 0) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    f = 1;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    f = 2;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    f = 3;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    f = 0;
                            } else if (d.originalFace != d.currentFace){
                                    f = d.originalFace;
                            }
                    } else if (d.open == 1) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    f = 3;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    f = 0;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    f = 1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    f = 2;
                            } else if (d.originalFace != d.currentFace){
                                    f = d.originalFace;
                            }
                    }
            } else if (d.type == 9) {
                    if (d.open == 0) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    f = 3;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    f = 2;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    f = 1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    f = 0;
                            } else if (d.originalFace != d.currentFace){
                                    f = d.originalFace;
                            }
                    } else if (d.open == 1) {
                            if (d.originalFace == 0 &amp;&amp; d.currentFace == 0) {
                                    f = 3;
                            } else if (d.originalFace == 1 &amp;&amp; d.currentFace == 1) {
                                    f = 0;
                            } else if (d.originalFace == 2 &amp;&amp; d.currentFace == 2) {
                                    f = 1;
                            } else if (d.originalFace == 3 &amp;&amp; d.currentFace == 3) {
                                    f = 2;
                            } else if (d.originalFace != d.currentFace){
                                    f = d.originalFace;
                            }
                    }
            }
            d.currentFace = f;
            return f;
    }
    
    public void load() {
            long start = System.currentTimeMillis();
            try {
                    singleton.processLineByLine();
            } catch (FileNotFoundException e) {
                    e.printStackTrace();
            }
            System.out.println("Loaded "+ doors.size() +" doors in "+ (System.currentTimeMillis() - start) +"ms.");
    }
    
    private final void processLineByLine() throws FileNotFoundException {
            Scanner scanner = new Scanner(new FileReader(doorFile));
                try {
                        while(scanner.hasNextLine()) {
                                processLine(scanner.nextLine());
                        }
               } finally {
                        scanner.close();
                }
    }
    
    protected void processLine(String line){
            Scanner scanner = new Scanner(line);
            scanner.useDelimiter(" ");
            try {
                    while(scanner.hasNextLine()) {
                            int id = Integer.parseInt(scanner.next());
                            int x = Integer.parseInt(scanner.next());
                                int y = Integer.parseInt(scanner.next());
                                int f = Integer.parseInt(scanner.next());
                                int z = Integer.parseInt(scanner.next());
                                int t = Integer.parseInt(scanner.next());
                                doors.add(new Doors(id,x,y,z,f,t,alreadyOpen(id)?1:0));
                    }
            } finally {
                    scanner.close();
            }
    }
    
    private boolean alreadyOpen(int id) {
            for (int i = 0; i &lt; openDoors.length; i++) {
                    if (openDoors[i] == id) {
                            return true;
                    }
            }
            return false;
    }

    private int doorId;
    private int originalId;
    private int doorX;
    private int doorY;
    private int originalX;
    private int originalY;
    private int doorZ;
    private int originalFace;
    private int currentFace;
    private int type;
    private int open;
    
    private static int[] openDoors = {
            1504, 1514, 1517, 1520, 1531, 
            1534, 2033, 2035, 2037, 2998, 
            3271, 4468, 4697, 6101,6103, 
            6105, 6107, 6109, 6111, 6113, 
            6115, 6976, 6978, 8696, 8819,
            10261, 10263,10265,11708,11710,
            11712,11715,11994,12445, 13002,        
    };
</code></pre>
<p>}[/code]</p>
<p>This will fix the “cannot find symbol” that many have been having!</p>
<p><span class="bbcode-b">Credits</span><br>
killamess 99.9%<br>
gtree01/Xeon 0.01% (It was an easy fix)</p>
<p>I realize this is a tiny fix but this is for all aspiring Java Programmers!!</p>
<p>Have Fun!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872/1</link>
        <pubDate>Sat, 28 Apr 2012 21:35:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440872-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-single-door-fix-fix/440872.rss">[PI] Single Door Fix Fix</source>
      </item>
  </channel>
</rss>
