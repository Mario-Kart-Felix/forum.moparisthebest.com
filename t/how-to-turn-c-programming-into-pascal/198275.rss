<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to turn C programming into Pascal!</title>
    <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275</link>
    <description>using define&#39;s to make your own programming langauge literally

[code]
/* code.h  - taking C to higher level */
/* Coding Language of &quot;Raw&quot; C language preprocessor transformations */

   /* Operator Constructs */

      /* Logical Operators */
      # define   AND   &amp;&amp;
      # define   OR    ||
      # define   NOT   !


      /* Bitwise operators */
      # define   BAND  &amp;             /* Bitwise AND */
      # define   BOR   |
      # define   BXOR  ^
      # define   BNOT  ~
      # define   LSHF  &lt;&lt;
      # define   RSHF  &gt;&gt;

   /* Control Constructs (block implicit) */

      /* IF ___ ELSE ___ ENDIF construct */
      # define   IF(c)        if(c) {
      # define   ELSE         ;} else {
      # define   ENDIF        ;}
      # define   ELSEIF(c)    ;} else if(c) {

      /* CASE construct */
      # define   CASE(c)      switch(c) {
      # define   CASEOF(c)    case c : {
      # define   DEFCASE      default : {
      # define   ENDCOF       } break;
      # define   ENDCASE      }

      /* WHILE(c) ___ ENDW construct */
      # define   WHILE(c)     while(c) {
      # define   ENDW         ;}

      /* FOR(c) ___ ENDF construct */
      # define   FOR(c)       for(c) {
      # define   ENDF         ;}

      /* FOREVER ___ ENDFR */
      # define   FOREVER      while (1) {
      # define   ENDFR        ;}

      /* REPEAT ___ UNTIL(c) */
      # define   REPEAT       do {
      # define   UNTIL(c)     } while(!(c));

      /* BEGIN ___ END  General block */
      # define   BEGIN   {
      # define   END     }


[/code]

thats the header and here is the actual new programming syntax you can work with

[code]
/* sel.c */

#include &lt;conio.h&gt;
#include &lt;code.h&gt;

/* This program illustrates of CODE.H definitons to make C code /*
/* more readable. */

void trim(char *s)
/* Trim white space from both ends of string s */
BEGIN
    char    *pc, *pce;

    for (pc = s; *pc AND (*pc == &#39; &#39; OR *pc == &#39;\t&#39;); pc++);
    for (pce = pc; *pce &gt; &#39; &#39;; pce++);
    *pce = 0;
    strcpy(s, pc);
END

cdecl main(int argc, char *argv[])
BEGIN
    char    s[80], *clrstr, *pc;
    int     i, n;

    IF (argc &lt; 2)
        cputs(&quot;Usage:   sel \&quot;Prompt\&quot; [max_no]\r\n&quot;);
        cputs(&quot;   Intended for use it batch files with ERRORLEVEL testing.\r\n&quot;);
        cputs(&quot;   Will output the prompt and wait for the user to input\r\n&quot;);
        cputs(&quot;   Y or N if max_no parameter is not present, or otherwise\r\n&quot;);
        cputs(&quot;   expects the input of number from 1 to max_no. Exits with\r\n&quot;);
        cputs(&quot;   errorlevel according to user input. Examples:\r\n&quot;);
        cputs(&quot;         sel \&quot;Enter your selection form 1 to 5 \&quot; 5\r\n&quot;);
        cputs(&quot;         sel \&quot;Are you sure? (Y/N) \&quot;\r\n&quot;);
        cputs(&quot;   The last line returns errorlevel 0 for N and 1 for Y\r\n&quot;);
        exit(255);
    ENDIF
    cputs(argv[1]);
    clrstr = &quot;\r                                                                              \r&quot;;
    IF (argc &gt; 2)               /* This is selection, get number 1..n */
        n = atoi(argv[2]);
        IF (n &lt; 1 OR n &gt; 25)
            cputs(&quot;Error in select.&quot;);
            exit(255);
        ENDIF
        REPEAT
            s[0] = 78;
            pc = cgets(s);
            trim(pc);
            i = atoi(pc);
            IF (i&lt;1 OR i&gt;n)
                cputs(clrstr);
                cputs(argv[1]);
            ENDIF
        UNTIL (i &gt; 0 AND i &lt;= n);
        exit(i);
    ELSE                        /* This is Y/N prompt, get Y or N */
        REPEAT
            s[0] = 78;
            pc = cgets(s);
            trim(pc);
            i = toupper(*pc);
            IF (i!=&#39;N&#39; AND i!=&#39;Y&#39;)
                cputs(clrstr);
                cputs(argv[1]);
            ENDIF
        UNTIL (i == &#39;N&#39; OR i == &#39;Y&#39;);
        exit (i==&#39;Y&#39;);
    ENDIF
END
[/code]

pretty cool make your own langauge with almost no work at all and still preform as good as C it self</description>
    
    <lastBuildDate>Sun, 13 Apr 2008 20:08:42 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@bakatool bakatool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bakatool">@bakatool</a> wrote:</p>
          <blockquote>
              <p>defines are really for important things too</p>
<p><span class="hashtag">#define</span> NULL 0<br>
<span class="hashtag">#define</span> TRUE 1<br>
<span class="hashtag">#define</span> FALSE 0</p>
<p>and also for one liners lol which are important for transforming numbers like</p>
<p><span class="hashtag">#define</span>  WORD(x)   ((unsigned char)(x)[0] + (((unsigned char)(x)[1]) &lt;&lt; 8))<br>
<span class="hashtag">#define</span>  DWORD(x)   (_WORD(x) + (_WORD((x)+2) &lt;&lt; 16))</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/8</link>
        <pubDate>Sun, 13 Apr 2008 20:08:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-8</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>thats why defines were first made, so people new to C can have an easier time learning it.<br>
but the point is that you eventually get off that an just use the normal C syntax</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/7</link>
        <pubDate>Sun, 13 Apr 2008 17:18:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-7</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@bakatool bakatool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bakatool">@bakatool</a> wrote:</p>
          <blockquote>
              <p>nope the functions can’t be changed yah o well…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/6</link>
        <pubDate>Sun, 13 Apr 2008 07:23:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-6</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@ilyaostr9 io9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ilyaostr9">@ilyaostr9</a> wrote:</p>
          <blockquote>
              <p>Overload () and poop?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/5</link>
        <pubDate>Sat, 12 Apr 2008 04:57:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-5</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I didn’t even notice this before, but function definitions are still C style, is there any way to fix that?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/4</link>
        <pubDate>Sat, 12 Apr 2008 02:36:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-4</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@Freddy1990 Freddy1990]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/freddy1990">@Freddy1990</a> wrote:</p>
          <blockquote>
              <p>Yea, I’ve heard about this before, pretty lame imo, lol, if you wanna use pascal then get a pascal compiler…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/3</link>
        <pubDate>Sat, 12 Apr 2008 00:58:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-3</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>You still miss out on most of the awesome aspects of Pascal, like pass-by-name for example. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/2</link>
        <pubDate>Fri, 11 Apr 2008 07:22:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-2</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
      <item>
        <title>How to turn C programming into Pascal!</title>
        <dc:creator><![CDATA[@bakatool bakatool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bakatool">@bakatool</a> wrote:</p>
          <blockquote>
              <p>using define’s to make your own programming langauge literally</p>
<pre><code class="lang-auto">/* code.h  - taking C to higher level */
/* Coding Language of "Raw" C language preprocessor transformations */

   /* Operator Constructs */

      /* Logical Operators */
      # define   AND   &amp;&amp;
      # define   OR    ||
      # define   NOT   !


      /* Bitwise operators */
      # define   BAND  &amp;             /* Bitwise AND */
      # define   BOR   |
      # define   BXOR  ^
      # define   BNOT  ~
      # define   LSHF  &lt;&lt;
      # define   RSHF  &gt;&gt;

   /* Control Constructs (block implicit) */

      /* IF ___ ELSE ___ ENDIF construct */
      # define   IF(c)        if(c) {
      # define   ELSE         ;} else {
      # define   ENDIF        ;}
      # define   ELSEIF(c)    ;} else if(c) {

      /* CASE construct */
      # define   CASE(c)      switch(c) {
      # define   CASEOF(c)    case c : {
      # define   DEFCASE      default : {
      # define   ENDCOF       } break;
      # define   ENDCASE      }

      /* WHILE(c) ___ ENDW construct */
      # define   WHILE(c)     while(c) {
      # define   ENDW         ;}

      /* FOR(c) ___ ENDF construct */
      # define   FOR(c)       for(c) {
      # define   ENDF         ;}

      /* FOREVER ___ ENDFR */
      # define   FOREVER      while (1) {
      # define   ENDFR        ;}

      /* REPEAT ___ UNTIL(c) */
      # define   REPEAT       do {
      # define   UNTIL(c)     } while(!(c));

      /* BEGIN ___ END  General block */
      # define   BEGIN   {
      # define   END     }

</code></pre>
<p>thats the header and here is the actual new programming syntax you can work with</p>
<pre><code class="lang-auto">/* sel.c */

#include &lt;conio.h&gt;
#include &lt;code.h&gt;

/* This program illustrates of CODE.H definitons to make C code /*
/* more readable. */

void trim(char *s)
/* Trim white space from both ends of string s */
BEGIN
    char    *pc, *pce;

    for (pc = s; *pc AND (*pc == ' ' OR *pc == '\t'); pc++);
    for (pce = pc; *pce &gt; ' '; pce++);
    *pce = 0;
    strcpy(s, pc);
END

cdecl main(int argc, char *argv[])
BEGIN
    char    s[80], *clrstr, *pc;
    int     i, n;

    IF (argc &lt; 2)
        cputs("Usage:   sel \"Prompt\" [max_no]\r\n");
        cputs("   Intended for use it batch files with ERRORLEVEL testing.\r\n");
        cputs("   Will output the prompt and wait for the user to input\r\n");
        cputs("   Y or N if max_no parameter is not present, or otherwise\r\n");
        cputs("   expects the input of number from 1 to max_no. Exits with\r\n");
        cputs("   errorlevel according to user input. Examples:\r\n");
        cputs("         sel \"Enter your selection form 1 to 5 \" 5\r\n");
        cputs("         sel \"Are you sure? (Y/N) \"\r\n");
        cputs("   The last line returns errorlevel 0 for N and 1 for Y\r\n");
        exit(255);
    ENDIF
    cputs(argv[1]);
    clrstr = "\r                                                                              \r";
    IF (argc &gt; 2)               /* This is selection, get number 1..n */
        n = atoi(argv[2]);
        IF (n &lt; 1 OR n &gt; 25)
            cputs("Error in select.");
            exit(255);
        ENDIF
        REPEAT
            s[0] = 78;
            pc = cgets(s);
            trim(pc);
            i = atoi(pc);
            IF (i&lt;1 OR i&gt;n)
                cputs(clrstr);
                cputs(argv[1]);
            ENDIF
        UNTIL (i &gt; 0 AND i &lt;= n);
        exit(i);
    ELSE                        /* This is Y/N prompt, get Y or N */
        REPEAT
            s[0] = 78;
            pc = cgets(s);
            trim(pc);
            i = toupper(*pc);
            IF (i!='N' AND i!='Y')
                cputs(clrstr);
                cputs(argv[1]);
            ENDIF
        UNTIL (i == 'N' OR i == 'Y');
        exit (i=='Y');
    ENDIF
END</code></pre>
<p>pretty cool make your own langauge with almost no work at all and still preform as good as C it self</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275/1</link>
        <pubDate>Thu, 10 Apr 2008 18:12:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-198275-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-turn-c-programming-into-pascal/198275.rss">How to turn C programming into Pascal!</source>
      </item>
  </channel>
</rss>
