<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Most NPC&#39;s won&#39;t respawn</title>
    <link>https://forum.moparisthebest.com/t/most-npcs-wont-respawn/547625</link>
    <description>Most the NPC&#39;s on my server will not respawn

My NPCSpawn - I tried deleting the packed folder which did nothing really, the NPC&#39;s slowly stop respawning. I killed bandos twice then it completely stopped.
[code]
package com.rs.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.ArrayList;
import java.util.List;

import com.rs.cache.loaders.NPCDefinitions;
import com.rs.game.World;
import com.rs.game.WorldTile;
import com.rs.game.npc.NPC;

public final class NPCSpawns {

	private static final Object lock = new Object();
	public static boolean addSpawn(String username, int id, WorldTile tile) throws Throwable {
		synchronized(lock) {
			File file = new File(&quot;data/npcs/spawns.txt&quot;);
			BufferedWriter writer = new BufferedWriter(new FileWriter(file, true));
			writer.write(&quot;// &quot;+NPCDefinitions.getNPCDefinitions(id).name+&quot;, &quot;+NPCDefinitions.getNPCDefinitions(id).combatLevel+&quot;, added by: &quot;+username);
			writer.newLine();
			writer.flush();
			writer.write(id+&quot; - &quot;+tile.getX()+&quot; &quot;+tile.getY()+&quot; &quot;+tile.getPlane());
			writer.newLine();
			writer.flush();
			World.spawnNPC(id, tile, -1, true);
			return true;
		}

	}

	public static boolean removeSpawn(NPC npc) throws Throwable {
		synchronized(lock) {
			List&lt;String&gt; page = new ArrayList&lt;&gt;();
			File file = new File(&quot;data/npcs/spawns.txt&quot;);
			BufferedReader in = new BufferedReader(new FileReader(file));
			String line;
			boolean removed = false;
			int id =  npc.getId();
			WorldTile tile = npc.getRespawnTile();
			while((line = in.readLine()) != null)  {
				if(line.equals(id+&quot; - &quot;+tile.getX()+&quot; &quot;+tile.getY()+&quot; &quot;+tile.getPlane())) {
					page.remove(page.get(page.size()-1)); //description
					removed = true;
					continue;
				}
				page.add(line);
			}
			if(!removed)
				return false;
			file.delete();
			BufferedWriter writer = new BufferedWriter(new FileWriter(file));
			for(String l : page) {
				writer.write(l);
				writer.newLine();
				writer.flush();
			}
			npc.finish();
			return true;
		}
	}

	public static final void init() {
		if (!new File(&quot;data/npcs/packedSpawns&quot;).exists())
			packNPCSpawns();
	}

	private static final void packNPCSpawns() {
		Logger.log(&quot;NPCSpawns&quot;, &quot;Packing npc spawns...&quot;);
		if (!new File(&quot;data/npcs/packedSpawns&quot;).mkdir())
			throw new RuntimeException(
					&quot;Couldn&#39;t create packedSpawns directory.&quot;);
		try {
			BufferedReader in = new BufferedReader(new FileReader(
					&quot;data/npcs/unpackedSpawnsList.txt&quot;));
			while (true) {
				String line = in.readLine();
				if (line == null)
					break;
				if (line.startsWith(&quot;//&quot;))
					continue;
				String[] splitedLine = line.split(&quot; - &quot;, 2);
				if (splitedLine.length != 2)
					throw new RuntimeException(&quot;Invalid NPC Spawn line: &quot;
							+ line);
				int npcId = Integer.parseInt(splitedLine[0]);
				String[] splitedLine2 = splitedLine[1].split(&quot; &quot;, 5);
				if (splitedLine2.length != 3 &amp;&amp; splitedLine2.length != 5)
					throw new RuntimeException(&quot;Invalid NPC Spawn line: &quot;
							+ line);
				WorldTile tile = new WorldTile(
						Integer.parseInt(splitedLine2[0]),
						Integer.parseInt(splitedLine2[1]),
						Integer.parseInt(splitedLine2[2]));
				int mapAreaNameHash = -1;
				boolean canBeAttackFromOutOfArea = true;
				if (splitedLine2.length == 5) {
					mapAreaNameHash = Utils.getNameHash(splitedLine2[3]);
					canBeAttackFromOutOfArea = Boolean
							.parseBoolean(splitedLine2[4]);
				}
				addNPCSpawn(npcId, tile.getRegionId(), tile, mapAreaNameHash,
						canBeAttackFromOutOfArea);
			}
			in.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	public static final void loadNPCSpawns(int regionId) {
		File file = new File(&quot;data/npcs/packedSpawns/&quot; + regionId + &quot;.ns&quot;);
		if (!file.exists())
			return;
		try {
			RandomAccessFile in = new RandomAccessFile(file, &quot;r&quot;);
			FileChannel channel = in.getChannel();
			ByteBuffer buffer = channel.map(MapMode.READ_ONLY, 0,
					channel.size());
			while (buffer.hasRemaining()) {
				int npcId = buffer.getShort() &amp; 0xffff;
				int plane = buffer.get() &amp; 0xff;
				int x = buffer.getShort() &amp; 0xffff;
				int y = buffer.getShort() &amp; 0xffff;
				boolean hashExtraInformation = buffer.get() == 1;
				int mapAreaNameHash = -1;
				boolean canBeAttackFromOutOfArea = true;
				if (hashExtraInformation) {
					mapAreaNameHash = buffer.getInt();
					canBeAttackFromOutOfArea = buffer.get() == 1;
				}
				World.spawnNPC(npcId, new WorldTile(x, y, plane),
						mapAreaNameHash, canBeAttackFromOutOfArea);
			}
			channel.close();
			in.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	private static final void addNPCSpawn(int npcId, int regionId,
			WorldTile tile, int mapAreaNameHash,
			boolean canBeAttackFromOutOfArea) {
		try {
			DataOutputStream out = new DataOutputStream(new FileOutputStream(
					&quot;data/npcs/packedSpawns/&quot; + regionId + &quot;.ns&quot;, true));
			out.writeShort(npcId);
			out.writeByte(tile.getPlane());
			out.writeShort(tile.getX());
			out.writeShort(tile.getY());
			out.writeBoolean(mapAreaNameHash != -1);
			if (mapAreaNameHash != -1) {
				out.writeInt(mapAreaNameHash);
				out.writeBoolean(canBeAttackFromOutOfArea);
			}
			out.flush();
			out.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	private NPCSpawns() {
	}
}

[/code]</description>
    
    <lastBuildDate>Tue, 04 Nov 2014 17:59:11 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/most-npcs-wont-respawn/547625.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Most NPC&#39;s won&#39;t respawn</title>
        <dc:creator><![CDATA[@dillo1000 dillo1000]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dillo1000">@dillo1000</a> wrote:</p>
          <blockquote>
              <p>Most the NPC’s on my server will not respawn</p>
<p>My NPCSpawn - I tried deleting the packed folder which did nothing really, the NPC’s slowly stop respawning. I killed bandos twice then it completely stopped.</p>
<pre><code class="lang-auto">package com.rs.utils;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.RandomAccessFile;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.nio.channels.FileChannel.MapMode;
import java.util.ArrayList;
import java.util.List;

import com.rs.cache.loaders.NPCDefinitions;
import com.rs.game.World;
import com.rs.game.WorldTile;
import com.rs.game.npc.NPC;

public final class NPCSpawns {

	private static final Object lock = new Object();
	public static boolean addSpawn(String username, int id, WorldTile tile) throws Throwable {
		synchronized(lock) {
			File file = new File("data/npcs/spawns.txt");
			BufferedWriter writer = new BufferedWriter(new FileWriter(file, true));
			writer.write("// "+NPCDefinitions.getNPCDefinitions(id).name+", "+NPCDefinitions.getNPCDefinitions(id).combatLevel+", added by: "+username);
			writer.newLine();
			writer.flush();
			writer.write(id+" - "+tile.getX()+" "+tile.getY()+" "+tile.getPlane());
			writer.newLine();
			writer.flush();
			World.spawnNPC(id, tile, -1, true);
			return true;
		}

	}

	public static boolean removeSpawn(NPC npc) throws Throwable {
		synchronized(lock) {
			List&lt;String&gt; page = new ArrayList&lt;&gt;();
			File file = new File("data/npcs/spawns.txt");
			BufferedReader in = new BufferedReader(new FileReader(file));
			String line;
			boolean removed = false;
			int id =  npc.getId();
			WorldTile tile = npc.getRespawnTile();
			while((line = in.readLine()) != null)  {
				if(line.equals(id+" - "+tile.getX()+" "+tile.getY()+" "+tile.getPlane())) {
					page.remove(page.get(page.size()-1)); //description
					removed = true;
					continue;
				}
				page.add(line);
			}
			if(!removed)
				return false;
			file.delete();
			BufferedWriter writer = new BufferedWriter(new FileWriter(file));
			for(String l : page) {
				writer.write(l);
				writer.newLine();
				writer.flush();
			}
			npc.finish();
			return true;
		}
	}

	public static final void init() {
		if (!new File("data/npcs/packedSpawns").exists())
			packNPCSpawns();
	}

	private static final void packNPCSpawns() {
		Logger.log("NPCSpawns", "Packing npc spawns...");
		if (!new File("data/npcs/packedSpawns").mkdir())
			throw new RuntimeException(
					"Couldn't create packedSpawns directory.");
		try {
			BufferedReader in = new BufferedReader(new FileReader(
					"data/npcs/unpackedSpawnsList.txt"));
			while (true) {
				String line = in.readLine();
				if (line == null)
					break;
				if (line.startsWith("//"))
					continue;
				String[] splitedLine = line.split(" - ", 2);
				if (splitedLine.length != 2)
					throw new RuntimeException("Invalid NPC Spawn line: "
							+ line);
				int npcId = Integer.parseInt(splitedLine[0]);
				String[] splitedLine2 = splitedLine[1].split(" ", 5);
				if (splitedLine2.length != 3 &amp;&amp; splitedLine2.length != 5)
					throw new RuntimeException("Invalid NPC Spawn line: "
							+ line);
				WorldTile tile = new WorldTile(
						Integer.parseInt(splitedLine2[0]),
						Integer.parseInt(splitedLine2[1]),
						Integer.parseInt(splitedLine2[2]));
				int mapAreaNameHash = -1;
				boolean canBeAttackFromOutOfArea = true;
				if (splitedLine2.length == 5) {
					mapAreaNameHash = Utils.getNameHash(splitedLine2[3]);
					canBeAttackFromOutOfArea = Boolean
							.parseBoolean(splitedLine2[4]);
				}
				addNPCSpawn(npcId, tile.getRegionId(), tile, mapAreaNameHash,
						canBeAttackFromOutOfArea);
			}
			in.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	public static final void loadNPCSpawns(int regionId) {
		File file = new File("data/npcs/packedSpawns/" + regionId + ".ns");
		if (!file.exists())
			return;
		try {
			RandomAccessFile in = new RandomAccessFile(file, "r");
			FileChannel channel = in.getChannel();
			ByteBuffer buffer = channel.map(MapMode.READ_ONLY, 0,
					channel.size());
			while (buffer.hasRemaining()) {
				int npcId = buffer.getShort() &amp; 0xffff;
				int plane = buffer.get() &amp; 0xff;
				int x = buffer.getShort() &amp; 0xffff;
				int y = buffer.getShort() &amp; 0xffff;
				boolean hashExtraInformation = buffer.get() == 1;
				int mapAreaNameHash = -1;
				boolean canBeAttackFromOutOfArea = true;
				if (hashExtraInformation) {
					mapAreaNameHash = buffer.getInt();
					canBeAttackFromOutOfArea = buffer.get() == 1;
				}
				World.spawnNPC(npcId, new WorldTile(x, y, plane),
						mapAreaNameHash, canBeAttackFromOutOfArea);
			}
			channel.close();
			in.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	private static final void addNPCSpawn(int npcId, int regionId,
			WorldTile tile, int mapAreaNameHash,
			boolean canBeAttackFromOutOfArea) {
		try {
			DataOutputStream out = new DataOutputStream(new FileOutputStream(
					"data/npcs/packedSpawns/" + regionId + ".ns", true));
			out.writeShort(npcId);
			out.writeByte(tile.getPlane());
			out.writeShort(tile.getX());
			out.writeShort(tile.getY());
			out.writeBoolean(mapAreaNameHash != -1);
			if (mapAreaNameHash != -1) {
				out.writeInt(mapAreaNameHash);
				out.writeBoolean(canBeAttackFromOutOfArea);
			}
			out.flush();
			out.close();
		} catch (Throwable e) {
			Logger.handle(e);
		}
	}

	private NPCSpawns() {
	}
}
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/most-npcs-wont-respawn/547625/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/most-npcs-wont-respawn/547625/1</link>
        <pubDate>Tue, 04 Nov 2014 17:59:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547625-1</guid>
        <source url="https://forum.moparisthebest.com/t/most-npcs-wont-respawn/547625.rss">Most NPC&#39;s won&#39;t respawn</source>
      </item>
  </channel>
</rss>
