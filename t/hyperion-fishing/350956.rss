<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Hyperion] Fishing</title>
    <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956</link>
    <description>I have been learning Grahams action system today.
Anything I am doing wrong or anything thats un needed please tell me so I can improve the quality of my releases.

[CODE]package org.hyperion.rs2.action.impl;

import java.util.HashMap;
import java.util.Map;

import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Location;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.Skills;

/**
* Fishing action.
* @author Fire cape
*/
public class FishingAction extends HarvestingAction {
	
	/**
	 * Represents items required in order to fish.
	 * @author Fire cape
	 *
	 */
	public static enum RequiredItems {
		
		SHRIMP(303);
	
	/**
	 * The id
	 */
	private int id;
	
	/**
    * A map of object id&#39;s to items.
    */
    private static HashMap&lt;Integer, RequiredItems&gt; requiredItems = new HashMap&lt;Integer, RequiredItems&gt;();
    
    /**
     * Gets the required item by an object id.
     * @param object The object id.
     * @return The required item, or &lt;code&gt;null&lt;/code&gt; if the object is not a a required item.
     */
    public RequiredItems forId(int object) {
        return requiredItems.get(object);
    }
    
    /**
     * Populates the tree map.
     */
    static {
        for (RequiredItems required : RequiredItems.values()) {
            requiredItems.put(required.id, required);
        }
    }
    
    /**
     * Creates the axe.
     * @param id The id.
     */
    private RequiredItems(int id) {
    	this.id = id;
    }
    
    /**
     * Gets the id.
     * @return The id.
     */
    public int getId() {
        return id;
    }
}
    
	/**
	 * Represents types of fishes.
	 * @author Fire cape
	 *
	 */
	public static enum Fish {
		
		SHRIMP(1, 500, 621, 317, new int[]{319});
		
		 /**
         * A map of npc id&#39;s to fishes.
         */
        private static Map&lt;Integer, Fish&gt; fishing = new HashMap&lt;Integer, Fish&gt;();
        
        /**
         * Gets a Fish by an npc id.
         * @param npc The npc id.
         * @return The npc, or &lt;code&gt;null&lt;/code&gt; if the npc is not a fish.
         */
        public static Fish forId(int npcId) {
            return fishing.get(npcId);
        }
        
        /**
         * Populates the tree map.
         */
        static {
            for (Fish fish : Fish.values()) {
                for (int npc : fish.fishSpotId) {
                    fishing.put(npc, fish);
                }
            }
        }
        
        /**
         * The npc id&#39;s of the fishing spots.
         */
        private int[] fishSpotId;
        
        /**
         * The minimum level to steal from the stall.
         */
        private int level;
        
        /**
         * The experience.
         */
        private double experience;
        
        /**
         * The animation.
         */
        private int animation;
        
        /**
         * The stolen item.
         */
        private int itemRecieved;
        
        /**
         * Creates the stall.
         * @param level The required level.
         * @param experience The experience.
         * @param animation The animation.
         * @param itemRecieved The item received when fishing.
         * @param fishSpotId The id of the fishing spot.
         */
        private Fish(int level, double experience, int animation, int itemRecieved, int[] fishSpotId) {
            this.fishSpotId = fishSpotId;
            this.level = level;
            this.experience = experience;
            this.animation = animation;
            this.itemRecieved = itemRecieved;
        }
        
        /**
         * Gets the object id&#39;s.
         * @return The object id&#39;s.
         */
        public int[] getFishSpotIds() {
            return fishSpotId;
        }
        
        /**
         * Gets the required level.
         * @return The required level.
         */
        public int getRequiredLevel() {
            return level;
        }
        
        /**
         * Gets the experience.
         * @return The experience.
         */
        public double getExperience() {
            return experience;
        }
        
        /**
         * Gets the animation id.
         * @return The animation id.
         */
        public int getAnimation() {
            return animation;
        }
        
        /**
         * Gets the stolen item.
         * @return The stolen item id.
         */
        public int getItemRecieved() {
            return itemRecieved;
        }
	}
	
	/**
     * The delay.
     */
	private static final int DELAY = 2400;
    
    /**
     * The factor.
     */
    private static final double FACTOR = 0.5;
    
    /**
     * The stall type.
     */
	private Fish fish;
    
    /**
	 * The player&#39;s location
	 */
	private final Location location;
	
	 /**
     * Whether or not this action grants periodic rewards.
     */
    private static final boolean PERIODIC = true;
    
    /**
     * Creates the &lt;code&gt;FishingAction&lt;/code&gt;.
     * @param player The player performing the action.#
     * @param fish2 The &quot;fish&quot; method.
     */
    public FishingAction(Player player, Location location, Fish fish) {
        super(player, location);
        this.location = location;
        this.fish = fish;
    }
    
    @Override
    public long getHarvestDelay() {
        return DELAY;
    }
    
    @Override
	public void init() {
		 final Player player = getPlayer();
	        if (isRunning()) {
				player.face(location);
			}
	        for (RequiredItems required : RequiredItems.values()) {
	            if ((player.getEquipment().contains(required.getId()) || player.getInventory().contains(required.getId()))) {
	            } else {
	            	player.getActionSender().sendMessage(&quot;You dont have the correct equipment to fish here!&quot;);
	            	stop();
	                break;
	            }
	        }
			if (player.getSkills().getLevel(Skills.FISHING) &lt; fish.getRequiredLevel()) {
				player.getActionSender().sendMessage(
						&quot;You need a Fishing level of &quot; + fish.getRequiredLevel()
								+ &quot; to fish here!&quot;);
			stop();
			}
		}
    
    @Override
	public int getCycles() {
		return 0;	
	}
    
    @Override
	public double getFactor() {
		return FACTOR;
	}

	@Override
	public Item getHarvestedItem() {
		return new Item(fish.getItemRecieved(), 1);
	}
	
	@Override
	public double getExperience() {
		return fish.getExperience();
	}

	@Override
	public int getSkill() {
		return Skills.FISHING;
	}

	@Override
	public Animation getAnimation() {
		return Animation.create(fish.getAnimation());	
	}

	@Override
	public boolean getPeriodicRewards() {
		return PERIODIC;
	}
}[/CODE]

NPCOption packet:
[CODE]Fish fish = Fish.forId(npcId);
		if (fish != null &amp;&amp; player.getLocation().isWithinInteractionDistance(loc)) {
        	player.getActionQueue().addAction(new FishingAction(player, loc, fish));
        }[/CODE]
I really dont care if this is not a tutorial.
Look around this section theres hardly any tutorials &amp; no one reads the snippet thread so w/e.</description>
    
    <lastBuildDate>Mon, 02 Aug 2010 23:14:31 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Hyperion] Fishing</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="4" data-topic="350956">
<div class="title">
<div class="quote-controls"></div>
 united pkzz:</div>
<blockquote>
<p>didnt say if delta or what source…</p>
</blockquote>
</aside>
<p>Its Hyperion…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-fishing/350956/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956/5</link>
        <pubDate>Mon, 02 Aug 2010 23:14:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350956-5</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss">[Hyperion] Fishing</source>
      </item>
      <item>
        <title>[Hyperion] Fishing</title>
        <dc:creator><![CDATA[@united_pkzz united pkzz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/united_pkzz">@united_pkzz</a> wrote:</p>
          <blockquote>
              <p>didnt say if delta or what source…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-fishing/350956/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956/4</link>
        <pubDate>Mon, 02 Aug 2010 22:36:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350956-4</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss">[Hyperion] Fishing</source>
      </item>
      <item>
        <title>[Hyperion] Fishing</title>
        <dc:creator><![CDATA[@Rene_eats_waffl3z Rene eats waffl3z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rene_eats_waffl3z">@Rene_eats_waffl3z</a> wrote:</p>
          <blockquote>
              <p>Hi Fire Capez, Where do i put the second one?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-fishing/350956/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956/3</link>
        <pubDate>Mon, 02 Aug 2010 21:53:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350956-3</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss">[Hyperion] Fishing</source>
      </item>
      <item>
        <title>[Hyperion] Fishing</title>
        <dc:creator><![CDATA[@the_soul The Soul]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_soul">@the_soul</a> wrote:</p>
          <blockquote>
              <p>Thread has been totally whiped.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-fishing/350956/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956/2</link>
        <pubDate>Sun, 25 Jul 2010 13:57:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350956-2</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss">[Hyperion] Fishing</source>
      </item>
      <item>
        <title>[Hyperion] Fishing</title>
        <dc:creator><![CDATA[@Fire_capez Fire capez]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fire_capez">@Fire_capez</a> wrote:</p>
          <blockquote>
              <p>I have been learning Grahams action system today.<br>
Anything I am doing wrong or anything thats un needed please tell me so I can improve the quality of my releases.</p>
<p>[CODE]package org.hyperion.rs2.action.impl;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.hyperion.rs2.model.Animation;<br>
import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Location;<br>
import org.hyperion.rs2.model.Player;<br>
import org.hyperion.rs2.model.Skills;</p>
<p>/**</p>
<ul>
<li>
<p>Fishing action.</p>
</li>
<li>
<p><span class="mention">@author</span> Fire cape<br>
*/<br>
public class FishingAction extends HarvestingAction {</p>
<p>/**</p>
<ul>
<li>Represents items required in order to fish.</li>
<li>
<span class="mention">@author</span> Fire cape</li>
<li>
</li>
</ul>
<p>*/<br>
public static enum RequiredItems {</p>
<pre><code>  SHRIMP(303);
</code></pre>
<p>/**</p>
<ul>
<li>The id<br>
*/<br>
private int id;</li>
</ul>
<p>/**</p>
<ul>
<li>A map of object id’s to items.<br>
*/<br>
private static HashMap&lt;Integer, RequiredItems&gt; requiredItems = new HashMap&lt;Integer, RequiredItems&gt;();</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the required item by an object id.</li>
<li>
<a class="mention" href="/u/param">@param</a> object The object id.</li>
<li>
<a class="mention" href="/u/return">@return</a> The required item, or <code>null</code> if the object is not a a required item.<br>
*/<br>
public RequiredItems forId(int object) {<br>
return requiredItems.get(object);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Populates the tree map.<br>
*/<br>
static {<br>
for (RequiredItems required : RequiredItems.values()) {<br>
requiredItems.put(required.id, required);<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates the axe.</li>
<li>
<a class="mention" href="/u/param">@param</a> id The id.<br>
*/<br>
private RequiredItems(int id) {<br>
this.id = id;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the id.</li>
<li>
<a class="mention" href="/u/return">@return</a> The id.<br>
*/<br>
public int getId() {<br>
return id;<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Represents types of fishes.</li>
<li>
<span class="mention">@author</span> Fire cape</li>
<li>
</li>
</ul>
<p>*/<br>
public static enum Fish {</p>
<pre><code>  SHRIMP(1, 500, 621, 317, new int[]{319});
  
   /**
   * A map of npc id's to fishes.
   */
  private static Map&lt;Integer, Fish&gt; fishing = new HashMap&lt;Integer, Fish&gt;();
  
  /**
   * Gets a Fish by an npc id.
   * @param npc The npc id.
   * @return The npc, or &lt;code&gt;null&lt;/code&gt; if the npc is not a fish.
   */
  public static Fish forId(int npcId) {
      return fishing.get(npcId);
  }
  
  /**
   * Populates the tree map.
   */
  static {
      for (Fish fish : Fish.values()) {
          for (int npc : fish.fishSpotId) {
              fishing.put(npc, fish);
          }
      }
  }
  
  /**
   * The npc id's of the fishing spots.
   */
  private int[] fishSpotId;
  
  /**
   * The minimum level to steal from the stall.
   */
  private int level;
  
  /**
   * The experience.
   */
  private double experience;
  
  /**
   * The animation.
   */
  private int animation;
  
  /**
   * The stolen item.
   */
  private int itemRecieved;
  
  /**
   * Creates the stall.
   * @param level The required level.
   * @param experience The experience.
   * @param animation The animation.
   * @param itemRecieved The item received when fishing.
   * @param fishSpotId The id of the fishing spot.
   */
  private Fish(int level, double experience, int animation, int itemRecieved, int[] fishSpotId) {
      this.fishSpotId = fishSpotId;
      this.level = level;
      this.experience = experience;
      this.animation = animation;
      this.itemRecieved = itemRecieved;
  }
  
  /**
   * Gets the object id's.
   * @return The object id's.
   */
  public int[] getFishSpotIds() {
      return fishSpotId;
  }
  
  /**
   * Gets the required level.
   * @return The required level.
   */
  public int getRequiredLevel() {
      return level;
  }
  
  /**
   * Gets the experience.
   * @return The experience.
   */
  public double getExperience() {
      return experience;
  }
  
  /**
   * Gets the animation id.
   * @return The animation id.
   */
  public int getAnimation() {
      return animation;
  }
  
  /**
   * Gets the stolen item.
   * @return The stolen item id.
   */
  public int getItemRecieved() {
      return itemRecieved;
  }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>The delay.<br>
*/<br>
private static final int DELAY = 2400;</li>
</ul>
<p>/**</p>
<ul>
<li>The factor.<br>
*/<br>
private static final double FACTOR = 0.5;</li>
</ul>
<p>/**</p>
<ul>
<li>The stall type.<br>
*/<br>
private Fish fish;</li>
</ul>
<p>/**</p>
<ul>
<li>The player’s location<br>
*/<br>
private final Location location;</li>
</ul>
<p>/**</p>
<ul>
<li>Whether or not this action grants periodic rewards.<br>
*/<br>
private static final boolean PERIODIC = true;</li>
</ul>
<p>/**</p>
<ul>
<li>Creates the <code>FishingAction</code>.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player performing the action.#</li>
<li>
<a class="mention" href="/u/param">@param</a> fish2 The “fish” method.<br>
*/<br>
public FishingAction(Player player, Location location, Fish fish) {<br>
super(player, location);<br>
this.location = location;<br>
this.fish = fish;<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public long getHarvestDelay() {<br>
return DELAY;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void init() {<br>
final Player player = getPlayer();<br>
if (isRunning()) {<br>
player.face(location);<br>
}<br>
for (RequiredItems required : RequiredItems.values()) {<br>
if ((player.getEquipment().contains(required.getId()) || player.getInventory().contains(required.getId()))) {<br>
} else {<br>
player.getActionSender().sendMessage(“You dont have the correct equipment to fish here!”);<br>
stop();<br>
break;<br>
}<br>
}<br>
if (player.getSkills().getLevel(Skills.FISHING) &lt; fish.getRequiredLevel()) {<br>
player.getActionSender().sendMessage(<br>
“You need a Fishing level of " + fish.getRequiredLevel()<br>
+ " to fish here!”);<br>
stop();<br>
}<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getCycles() {<br>
return 0;	<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public double getFactor() {<br>
return FACTOR;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Item getHarvestedItem() {<br>
return new Item(fish.getItemRecieved(), 1);<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public double getExperience() {<br>
return fish.getExperience();<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getSkill() {<br>
return Skills.FISHING;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return Animation.create(fish.getAnimation());	<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean getPeriodicRewards() {<br>
return PERIODIC;<br>
}<br>
}[/CODE]</p>
</li>
</ul>
<p>NPCOption packet:</p>
<p><code>Fish fish = Fish.forId(npcId);
		if (fish != null &amp;&amp; player.getLocation().isWithinInteractionDistance(loc)) {
        	player.getActionQueue().addAction(new FishingAction(player, loc, fish));
        }</code><br>
I really dont care if this is not a tutorial.<br>
Look around this section theres hardly any tutorials &amp; no one reads the snippet thread so w/e.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-fishing/350956/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-fishing/350956/1</link>
        <pubDate>Sat, 24 Jul 2010 18:38:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-350956-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-fishing/350956.rss">[Hyperion] Fishing</source>
      </item>
  </channel>
</rss>
