<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Project Insanity Teleport handler</title>
    <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749</link>
    <description>Awhile ago i made a teleport handler that wasn&#39;t the best. But im back with a better teleport handler.

First off add this class Fix the imports and the packaging
[CODE]package org.rs2server.entity.players.teleport;

import org.rs2server.Config;
import org.rs2server.entity.players.Client;
import org.rs2server.entity.players.PlayerHandler;
import org.rs2server.event.CycleEvent;
import org.rs2server.event.CycleEventContainer;
import org.rs2server.event.CycleEventHandler;

/**
 * This class will handle all everything to do with the teleporting
 * it will check if the player is eligible to teleport and
 * handle all the animations and gfxs.
 * @author Zack/Optimum
 *
 */
public class Teleport {
	
	/**
	 * The player teleporting
	 */
	private Client player;
	
	/**
	 * The targeted x, y and h coordinates
	 */
	private int targetX, targetY, targetH;
	
	/**
	 * Constructor for teleporting
	 * @param player - the player
	 */
	public Teleport(Client player){
		this.player = player;
	}
	
	/**
	 * Submits a new teleport tab type
	 * @param tarX - the new x coordinates
	 * @param tarY - the new y coordinates
	 */
	public void submitTab(final int tarX, final int tarY){
		this.targetX = tarX;
		this.targetY = tarY;
		startTeleport(TeleportType.TELETAB_TELEPORT);
	}
	
	/**
	 * Submits a new ancient teleport type
	 * @param tarX - the new x coordinates
	 * @param tarY - the new y coordinates
	 */
	public void submitAncient(final int tarX, final int tarY){
		this.targetX = tarX;
		this.targetY = tarY;
		startTeleport(TeleportType.ANICENT_TELEPORT);
	}
	
	/**
	 * Submits a new ancient teleport type
	 * @param tarX - the new x coordinates
	 * @param tarY - the new y coordinates
	 * @param tarH - the new height
	 */
	public void submitAncient(final int tarX, final int tarY, final int tarH){
		this.targetX = tarX;
		this.targetY = tarY;
		this.targetH = tarH;
		startTeleport(TeleportType.ANICENT_TELEPORT);
	}
	
	/**
	 * Submits a new modern teleport
	 * @param tarX - the new x coordinates
	 * @param tarY - the new y coordinates
	 */
	public void submitModern(final int tarX, final int tarY){
		this.targetX = tarX;
		this.targetY = tarY;
		startTeleport(TeleportType.MODERN_TELEPORT);
	}
	
	/**
	 * Submits a new modern teleport
	 * @param tarX - the new x coordinates
	 * @param tarY - the new y coordinates
	 * @param tarH - the new height
	 */
	public void submitModern(final int tarX, final int tarY, final int tarH){
		this.targetX = tarX;
		this.targetY = tarY;
		this.targetH = tarH;
		startTeleport(TeleportType.MODERN_TELEPORT);
	}
	
	
	/**
	 * Handles the teleport event in 3 stages
	 */
	public void startTeleport(final TeleportType teleType){
		if(!canTeleport(player))
			return;
		final int startStage = teleType.getTickTimer1Start();
		final int middleStage = teleType.getTickTimer2Start();
		final int stopStage = teleType.getStopTimer();
		cancelTradeAndDuel(player);
		player.stopMovement();
		player.isTeleporting = true;
		player.startAnimation(teleType.getStartGfxAnim()[0]);
		if(teleType.getStartGfxAnim()[2] == 100)
			player.gfx100(teleType.getStartGfxAnim()[1]);
		else
			player.gfx0(teleType.getStartGfxAnim()[1]);
		CycleEventHandler.getSingleton().addEvent(player, new CycleEvent() {
			int stage = 0;
			@Override
			public void execute(CycleEventContainer container) {
				if (stage == startStage) {
					player.startAnimation(teleType.getTimer1GfxAnim()[0]);
					if(teleType.getTimer1GfxAnim()[2] == 100)
						player.gfx100(teleType.getTimer1GfxAnim()[1]);
					else
						player.gfx0(teleType.getTimer1GfxAnim()[1]);
				}
				if (stage == middleStage){
					player.startAnimation(teleType.getTimer2GfxAnim()[0]);
					if(teleType.getTimer2GfxAnim()[2] == 100)
						player.gfx100(teleType.getTimer2GfxAnim()[1]);
					else
						player.gfx0(teleType.getTimer2GfxAnim()[1]);
					player.getPA().movePlayer(targetX, targetY, targetH);
				}
				if(stage == stopStage){
					player.startAnimation(65535);
					player.resetWalkingQueue();
					container.stop();
				}
				stage++;
				System.out.println(&quot;Teleport Stage: &quot; + stage);
			}
			@Override
			public void stop() { 
				player.isTeleporting = false;
			}
		}, 1);
	}
	
	/**
	 * Checks to see if the player is eligible for teleporting
	 * @param player - The target player
	 * @return true if the player can teleport
	 */
	public boolean canTeleport(Client player){
		if(player == null)
			return false;
		if(player.isDead)
			return false;
		if (isDueling(player))
			return false;
		if(isTeleBlocked(player))
			return false;
		if(player.isTeleporting)
			return false;
		if(wildyLevelCheck(player))
			return false;
		return true;
	}

	/**
	 * Checks to see if the player is in a duel
	 * @param player - The target player
	 * @return true if the player is in a duel
	 */
	public boolean isDueling(Client player){
		if (player.duelStatus == 5) {
			player.sendMessage(&quot;You can&#39;t teleport during a duel!&quot;);
			return true;
		} else
			return false;
	}
	
	/**
	 * Checks if the player is teleblocked
	 * @param player - The target player
	 * @return true if player is teleblocked
	 */
	public boolean isTeleBlocked(Client player){
		if (System.currentTimeMillis() - player.teleBlockDelay &lt; player.teleBlockLength) {
			player.sendMessage(&quot;You are teleblocked and can&#39;t teleport.&quot;);
			return true;
		} else
			return false;
	}

	/**
	 * Cancels the trade and duel for {@link player} and
	 * the opponent he is dueling / trading with
	 * @param player - the target player
	 */
	public void cancelTradeAndDuel(Client player){
		if (player.duelStatus &gt;= 1 &amp;&amp; player.duelStatus &lt;= 4) {
			Client o = (Client) PlayerHandler.players[player.duelingWith];
			player.duelStatus = 0;
			o.duelStatus = 0;
			o.getTradeAndDuel().declineDuel();
			player.getTradeAndDuel().declineDuel();
		}
	}
	
	/**
	 * Checks the current player wilderness level and returns true
	 * if the player is above the max teleport wilderness level
	 * @param player - The target player
	 * @return if player is in wildy &gt; 20
	 */
	public boolean wildyLevelCheck(Client player){
		if (player.inWild() &amp;&amp; player.wildLevel &gt; Config.NO_TELEPORT_WILD_LEVEL) {
			player.sendMessage(&quot;You can&#39;t teleport above level &quot;
					+ Config.NO_TELEPORT_WILD_LEVEL + &quot; in the wilderness.&quot;);
			return true;
		} else
			return false;
	}

}

[/CODE]

Now add this class inside the same package 
[CODE]package org.rs2server.entity.players.teleport;

/**
 * Contains all the teleport types and all their data
 * @author Zack/Optimum
 *
 */

public enum TeleportType {

	MODERN_TELEPORT(
			new int[] {714, -1, 0}, 1, new int[] {-1, 308, 100},
			3, new int[] {715, -1, 0}, 6),
	ANICENT_TELEPORT(
			new int[] {9599, 1681, 0}, 5, new int[] {-1, -1, 0},
			5, new int[] {-1, -1, 0}, 5),
	TELETAB_TELEPORT(
			new int[] {9597, 1680, 0}, 2, new int[] {4731, -1, 0},
			3, new int[] {9598, -1, 0}, 4);
	
	
	int[] startGfxAnim;
	int tickTimer1Start;
	int[] timer1GfxAnim;
	int tickTimer2Start;
	int[] timer2GfxAnim;
	int stopTimer;
	
	TeleportType(int[] startGfxAnim, int tickTimer1Start, int[] timer1GfxAnim, int tickTimer2Start, int[] timer2GfxAnim, int stopTimer){
		this.startGfxAnim = startGfxAnim;
		this.tickTimer1Start = tickTimer1Start;
		this.timer1GfxAnim = timer1GfxAnim;
		this.tickTimer2Start = tickTimer2Start;
		this.timer2GfxAnim = timer2GfxAnim;
		this.stopTimer = stopTimer;
	}
	
	public int[] getStartGfxAnim(){
		return startGfxAnim;
	}
	
	public int getTickTimer1Start(){
		return tickTimer1Start;
	}
	
	public int[] getTimer1GfxAnim(){
		return timer1GfxAnim;
	}
	
	public int getTickTimer2Start(){
		return tickTimer2Start;
	}
	
	public int[] getTimer2GfxAnim(){
		return timer2GfxAnim;
	}
	
	public int getStopTimer(){
		return stopTimer;
	}
}
[/CODE]

now go to Client.java and add these:
[code]	private Teleport teleport = new Teleport(this);
	public Teleport getTeleportHandler(){
		return teleport;
	}[/code]

this is an example of how to use this: [code]		case 4171:
		case 117048:
		case 75010:
		case 50056:
		case 84237:
				if(c.playerMagicBook != 1) {
					c.getTeleportHandler().submitModern(Config.RESPAWN_X, Config.RESPAWN_Y);
				} else {
					c.getTeleportHandler().submitAncient(Config.RESPAWN_X, Config.RESPAWN_Y);
				}
				break;[/code]


If i have missed anything please tell me.</description>
    
    <lastBuildDate>Sun, 28 Dec 2014 11:45:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@Special_Air_Service Special Air Service]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/special_air_service">@Special_Air_Service</a> wrote:</p>
          <blockquote>
              <p>Thanks everyone for the feed back I will update this soon</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/6</link>
        <pubDate>Sun, 28 Dec 2014 11:45:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-6</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p><code>
public boolean canTeleport(Client player){
		if(player.isDead)
			return false;
		if (isDueling(player))
			return false;
		if(isTeleBlocked(player))
			return false;
		if(player.isTeleporting)
			return false;
		if(wildyLevelCheck(player))
			return false;
		return true;
	}</code></p>
<p>Could become:</p>
<pre><code class="lang-auto">public boolean canTeleport(Client player){
return !wildyLevelCheck(player) &amp;&amp; !isTeleporting() &amp;&amp; !isTeleblocked...;
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/5</link>
        <pubDate>Sat, 27 Dec 2014 22:23:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-5</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>That… doesn’t look pretty…<br>
IMO you should have a single boolean to check if the player can/can’t teleport…</p>
<p><code>public boolean canTeleport(Client client) {
	if(client.isDueling) {
		client.sendMessage("You can't teleport in a duel");
		return false;
	}
	if(client.inTrade) {
		client.sendMessage("Please finish what you're doing first");
		return false;
	}
// Etc
}</code></p>
<p>You do not need to make everything final in the constructor (for the CycleEvent) if the values act as final (Meaning the values do not get modified).</p>
<p>Also, why not handle <span class="bbcode-u">all</span> the teleport stages in one event, instead of a bunch of separate events…</p>
<p><code>CycleEventHandler.getSingleton().addEvent(player, new CycleEvent() {
	int stage = 0;
	@Override
	public void execute(CycleEventContainer container) {
		switch(stage) {
		case 0:// Stage 
			player.startAnimation(type.getTimer1GfxAnim()[0]);
			if(type.getTimer1GfxAnim()[2] == 100)
				player.gfx100(type.getTimer1GfxAnim()[1]);
			else
				player.gfx0(type.getTimer1GfxAnim()[1]);
			break;
		case 6:// end of teleport stages.
			container.stop();
			break;
		default:
			// Do nothing
			break;
		}
		stage++;
	@Override
	public void stop() {
		player.sendMessage("You teleport to " + destination + ".");
	}
}, 1);</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/4</link>
        <pubDate>Sat, 27 Dec 2014 22:16:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-4</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@jummppy jummppy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jummppy">@jummppy</a> wrote:</p>
          <blockquote>
              <p>aren’t constructors only meant for holding and assigning data? Not checking it Lare69? OT: I would like to see it like this. <code>new Teleport(c, Config.LUMBY_X, Config.LUMBY_Y, 0).startTeleport();</code> But that’s just me. They way I would of done the start of the class is this.</p>
<p>[code]Public class Teleport</p>
<p>private final int teleportX, teleportY, teleportZ;</p>
<p>public Teleport(final Client client, int teleportX, int teleportY, int teleportZ) {</p>
<p>this.teleportX = teleportX;<br>
…</p>
<p>}<br>
[/code]</p>
<p>If I’m doing anything wrong or bad. Please someone correct me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/3</link>
        <pubDate>Sat, 27 Dec 2014 22:01:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-3</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>please don’t handle all of that teleport logic in the constructor <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/2</link>
        <pubDate>Fri, 26 Dec 2014 17:16:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-2</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
      <item>
        <title>Project Insanity Teleport handler</title>
        <dc:creator><![CDATA[@Special_Air_Service Special Air Service]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/special_air_service">@Special_Air_Service</a> wrote:</p>
          <blockquote>
              <p>Awhile ago i made a teleport handler that wasn’t the best. But im back with a better teleport handler.</p>
<p>First off add this class Fix the imports and the packaging</p>
<p>[CODE]package org.rs2server.entity.players.teleport;</p>
<p>import org.rs2server.Config;<br>
import org.rs2server.entity.players.Client;<br>
import org.rs2server.entity.players.PlayerHandler;<br>
import org.rs2server.event.CycleEvent;<br>
import org.rs2server.event.CycleEventContainer;<br>
import org.rs2server.event.CycleEventHandler;</p>
<p>/**</p>
<ul>
<li>This class will handle all everything to do with the teleporting</li>
<li>it will check if the player is eligible to teleport and</li>
<li>handle all the animations and gfxs.</li>
<li>
<span class="mention">@author</span> Zack/Optimum</li>
<li>
</li>
</ul>
<p>*/<br>
public class Teleport {</p>
<pre><code>/**
 * The player teleporting
 */
private Client player;

/**
 * The targeted x, y and h coordinates
 */
private int targetX, targetY, targetH;

/**
 * Constructor for teleporting
 * @param player - the player
 */
public Teleport(Client player){
	this.player = player;
}

/**
 * Submits a new teleport tab type
 * @param tarX - the new x coordinates
 * @param tarY - the new y coordinates
 */
public void submitTab(final int tarX, final int tarY){
	this.targetX = tarX;
	this.targetY = tarY;
	startTeleport(TeleportType.TELETAB_TELEPORT);
}

/**
 * Submits a new ancient teleport type
 * @param tarX - the new x coordinates
 * @param tarY - the new y coordinates
 */
public void submitAncient(final int tarX, final int tarY){
	this.targetX = tarX;
	this.targetY = tarY;
	startTeleport(TeleportType.ANICENT_TELEPORT);
}

/**
 * Submits a new ancient teleport type
 * @param tarX - the new x coordinates
 * @param tarY - the new y coordinates
 * @param tarH - the new height
 */
public void submitAncient(final int tarX, final int tarY, final int tarH){
	this.targetX = tarX;
	this.targetY = tarY;
	this.targetH = tarH;
	startTeleport(TeleportType.ANICENT_TELEPORT);
}

/**
 * Submits a new modern teleport
 * @param tarX - the new x coordinates
 * @param tarY - the new y coordinates
 */
public void submitModern(final int tarX, final int tarY){
	this.targetX = tarX;
	this.targetY = tarY;
	startTeleport(TeleportType.MODERN_TELEPORT);
}

/**
 * Submits a new modern teleport
 * @param tarX - the new x coordinates
 * @param tarY - the new y coordinates
 * @param tarH - the new height
 */
public void submitModern(final int tarX, final int tarY, final int tarH){
	this.targetX = tarX;
	this.targetY = tarY;
	this.targetH = tarH;
	startTeleport(TeleportType.MODERN_TELEPORT);
}


/**
 * Handles the teleport event in 3 stages
 */
public void startTeleport(final TeleportType teleType){
	if(!canTeleport(player))
		return;
	final int startStage = teleType.getTickTimer1Start();
	final int middleStage = teleType.getTickTimer2Start();
	final int stopStage = teleType.getStopTimer();
	cancelTradeAndDuel(player);
	player.stopMovement();
	player.isTeleporting = true;
	player.startAnimation(teleType.getStartGfxAnim()[0]);
	if(teleType.getStartGfxAnim()[2] == 100)
		player.gfx100(teleType.getStartGfxAnim()[1]);
	else
		player.gfx0(teleType.getStartGfxAnim()[1]);
	CycleEventHandler.getSingleton().addEvent(player, new CycleEvent() {
		int stage = 0;
		@Override
		public void execute(CycleEventContainer container) {
			if (stage == startStage) {
				player.startAnimation(teleType.getTimer1GfxAnim()[0]);
				if(teleType.getTimer1GfxAnim()[2] == 100)
					player.gfx100(teleType.getTimer1GfxAnim()[1]);
				else
					player.gfx0(teleType.getTimer1GfxAnim()[1]);
			}
			if (stage == middleStage){
				player.startAnimation(teleType.getTimer2GfxAnim()[0]);
				if(teleType.getTimer2GfxAnim()[2] == 100)
					player.gfx100(teleType.getTimer2GfxAnim()[1]);
				else
					player.gfx0(teleType.getTimer2GfxAnim()[1]);
				player.getPA().movePlayer(targetX, targetY, targetH);
			}
			if(stage == stopStage){
				player.startAnimation(65535);
				player.resetWalkingQueue();
				container.stop();
			}
			stage++;
			System.out.println("Teleport Stage: " + stage);
		}
		@Override
		public void stop() { 
			player.isTeleporting = false;
		}
	}, 1);
}

/**
 * Checks to see if the player is eligible for teleporting
 * @param player - The target player
 * @return true if the player can teleport
 */
public boolean canTeleport(Client player){
	if(player == null)
		return false;
	if(player.isDead)
		return false;
	if (isDueling(player))
		return false;
	if(isTeleBlocked(player))
		return false;
	if(player.isTeleporting)
		return false;
	if(wildyLevelCheck(player))
		return false;
	return true;
}

/**
 * Checks to see if the player is in a duel
 * @param player - The target player
 * @return true if the player is in a duel
 */
public boolean isDueling(Client player){
	if (player.duelStatus == 5) {
		player.sendMessage("You can't teleport during a duel!");
		return true;
	} else
		return false;
}

/**
 * Checks if the player is teleblocked
 * @param player - The target player
 * @return true if player is teleblocked
 */
public boolean isTeleBlocked(Client player){
	if (System.currentTimeMillis() - player.teleBlockDelay &lt; player.teleBlockLength) {
		player.sendMessage("You are teleblocked and can't teleport.");
		return true;
	} else
		return false;
}

/**
 * Cancels the trade and duel for {@link player} and
 * the opponent he is dueling / trading with
 * @param player - the target player
 */
public void cancelTradeAndDuel(Client player){
	if (player.duelStatus &gt;= 1 &amp;&amp; player.duelStatus &lt;= 4) {
		Client o = (Client) PlayerHandler.players[player.duelingWith];
		player.duelStatus = 0;
		o.duelStatus = 0;
		o.getTradeAndDuel().declineDuel();
		player.getTradeAndDuel().declineDuel();
	}
}

/**
 * Checks the current player wilderness level and returns true
 * if the player is above the max teleport wilderness level
 * @param player - The target player
 * @return if player is in wildy &gt; 20
 */
public boolean wildyLevelCheck(Client player){
	if (player.inWild() &amp;&amp; player.wildLevel &gt; Config.NO_TELEPORT_WILD_LEVEL) {
		player.sendMessage("You can't teleport above level "
				+ Config.NO_TELEPORT_WILD_LEVEL + " in the wilderness.");
		return true;
	} else
		return false;
}
</code></pre>
<p>}</p>
<p>[/CODE]</p>
<p>Now add this class inside the same package</p>
<p>[CODE]package org.rs2server.entity.players.teleport;</p>
<p>/**</p>
<ul>
<li>Contains all the teleport types and all their data</li>
<li>
<span class="mention">@author</span> Zack/Optimum</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public enum TeleportType {</p>
<pre><code>MODERN_TELEPORT(
		new int[] {714, -1, 0}, 1, new int[] {-1, 308, 100},
		3, new int[] {715, -1, 0}, 6),
ANICENT_TELEPORT(
		new int[] {9599, 1681, 0}, 5, new int[] {-1, -1, 0},
		5, new int[] {-1, -1, 0}, 5),
TELETAB_TELEPORT(
		new int[] {9597, 1680, 0}, 2, new int[] {4731, -1, 0},
		3, new int[] {9598, -1, 0}, 4);


int[] startGfxAnim;
int tickTimer1Start;
int[] timer1GfxAnim;
int tickTimer2Start;
int[] timer2GfxAnim;
int stopTimer;

TeleportType(int[] startGfxAnim, int tickTimer1Start, int[] timer1GfxAnim, int tickTimer2Start, int[] timer2GfxAnim, int stopTimer){
	this.startGfxAnim = startGfxAnim;
	this.tickTimer1Start = tickTimer1Start;
	this.timer1GfxAnim = timer1GfxAnim;
	this.tickTimer2Start = tickTimer2Start;
	this.timer2GfxAnim = timer2GfxAnim;
	this.stopTimer = stopTimer;
}

public int[] getStartGfxAnim(){
	return startGfxAnim;
}

public int getTickTimer1Start(){
	return tickTimer1Start;
}

public int[] getTimer1GfxAnim(){
	return timer1GfxAnim;
}

public int getTickTimer2Start(){
	return tickTimer2Start;
}

public int[] getTimer2GfxAnim(){
	return timer2GfxAnim;
}

public int getStopTimer(){
	return stopTimer;
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>now go to Client.java and add these:</p>
<p><code>	private Teleport teleport = new Teleport(this);
	public Teleport getTeleportHandler(){
		return teleport;
	}</code></p>
<p>this is an example of how to use this: <code>		case 4171:
		case 117048:
		case 75010:
		case 50056:
		case 84237:
				if(c.playerMagicBook != 1) {
					c.getTeleportHandler().submitModern(Config.RESPAWN_X, Config.RESPAWN_Y);
				} else {
					c.getTeleportHandler().submitAncient(Config.RESPAWN_X, Config.RESPAWN_Y);
				}
				break;</code></p>
<p>If i have missed anything please tell me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749/1</link>
        <pubDate>Fri, 26 Dec 2014 13:37:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548749-1</guid>
        <source url="https://forum.moparisthebest.com/t/project-insanity-teleport-handler/548749.rss">Project Insanity Teleport handler</source>
      </item>
  </channel>
</rss>
