<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</title>
    <link>https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618</link>
    <description>[B][SIZE=5][Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases.[/SIZE][/B]

[B]Contains:[/B]

[b]*[/b]Level requirements.
[b]*[/b]Implements anti-mass cycle when baking.
[b]*[/b]Animations.
[b]*[/b]Adds experience.
[b]*[/b]Easy to add-on base. I have added Chilli potato.
[b]*[/b]Manages walking errors.


[B]Implementation:[/B]

Declare these in [I]Player.java[/I]:
[CODE]public boolean potatoBakeDelay;
public boolean isCooking;[/CODE]

Add this in your skills folder:
[CODE]/**
 * 
 * @author Hybris
 * Miscellaneous Cooking[POTATO COOKING]
 */
public class PotatoCooking {

	/**
	 * Product data.
	 */
	public static int BAKED_POTATO = 6701, BURNT_POTATO = 6699,
			POTATO_WITH_BUTTER = 6703, POTATO = 1942, BUTTER = 6697;

	/**
	 * The event delay for baking potato cycle based.
	 */
	public static int BAKED_POTATO_DELAY = 600;

	/**
	 * The experience for making baked potato.
	 */
	public static int BAKED_POTATO_XP = 15;

	/**
	 * The baked potato item on item with butter experience.
	 */
	public static int BAKED_POTATO_WITH_BUTTER_XP = 40;

	/**
	 * Data for special ingredients on baked potato with butter. {Primary
	 * ingredient, produce, level required, experience}
	 */
	public static int[][] ITEM_ON_ITEM = { { 7062, 7054, 41, 125 } // CHILLI
	// POTATO
	};

	/**
	 * Makes potato specials. Implements multidimensional arrary(ITEM_ON_ITEM[][])
	 * @param c
	 * 	The Player client.
	 * @param itemId
	 * 	The item to be used.
	 * @param useWith
	 * 	The second item used.
	 */
	public static void makeSpecials(Player c, int itemId, int useWith) {
		for (int item_item[] : ITEM_ON_ITEM)
			if (c.playerLevel[7] &gt;= item_item[2]
					&amp;&amp; itemId == POTATO_WITH_BUTTER &amp;&amp; useWith == item_item[0]
					|| c.playerLevel[7] &gt;= item_item[2]
					&amp;&amp; itemId == item_item[0] &amp;&amp; useWith == POTATO_WITH_BUTTER) {
				c.getItems().deleteItem(item_item[0],
						c.getItems().getItemSlot(item_item[0]), 1);
				c.getItems().deleteItem(POTATO_WITH_BUTTER,
						c.getItems().getItemSlot(POTATO_WITH_BUTTER), 1);
				c.getItems().addItem(item_item[1], 1);
				PlayerAssistant.addSkillXP(c, item_item[3], 7);
				c
						.sendMessage(&quot;You combine the ingredients together to produce &quot;
								+ ItemAssistant.getItemName(item_item[1]) + &quot;.&quot;);
			} else if (c.playerLevel[7] &lt; item_item[2]
					&amp;&amp; itemId == POTATO_WITH_BUTTER &amp;&amp; useWith == item_item[0]
					|| c.playerLevel[7] &lt; item_item[2]
					&amp;&amp; itemId == item_item[0] &amp;&amp; useWith == POTATO_WITH_BUTTER) {
				c.sendMessage(&quot;You need a cooking level of &quot; + item_item[2]
						+ &quot; to do this.&quot;);
			}

	}

	/**
	 * Makes the potato with butter.
	 * 
	 * @param c
	 *            The Player.
	 * @param itemId
	 *            The potato or butter.
	 * @param useWith
	 *            The potato or butter.
	 */
	public static void makePotatoWithButter(Player c, int itemId, int useWith) {
		if (c.playerLevel[7] &gt;= 39 &amp;&amp; itemId == BAKED_POTATO
				&amp;&amp; useWith == BUTTER || c.playerLevel[7] &gt;= 39
				&amp;&amp; itemId == BUTTER &amp;&amp; useWith == BAKED_POTATO) {
			c.getItems().deleteItem(BAKED_POTATO,
					c.getItems().getItemSlot(BAKED_POTATO), 1);
			c.getItems()
					.deleteItem(BUTTER, c.getItems().getItemSlot(BUTTER), 1);
			c.getItems().addItem(POTATO_WITH_BUTTER, 1);
			c.sendMessage(&quot;You combine the baked potato with the butter.&quot;);
			PlayerAssistant.addSkillXP(c, BAKED_POTATO_WITH_BUTTER_XP, 7);

		} else if (c.playerLevel[7] &lt; 39 &amp;&amp; itemId == BAKED_POTATO
				&amp;&amp; useWith == BUTTER || c.playerLevel[7] &lt; 39
				&amp;&amp; itemId == BUTTER &amp;&amp; useWith == BAKED_POTATO) {
			c
					.sendMessage(&quot;You need a cooking level of 39 or higher to do this.&quot;);
		}
	}

	/**
	 * Making ordinary baked potato with level requirements. Cycle based.
	 * 
	 * @param c
	 *            The player.
	 * @param itemId
	 *            The potato item id.
	 * @param objectId
	 *            The source for item on object[the objectId]
	 */
	public static void makeBakedPotato(final Player c, final int itemId,
			final int objectId) {
		if (c.playerLevel[7] &gt;= 7 &amp;&amp; itemId == 1942) {
			switch (objectId) {
			case 114:

				c.startAnimation(objectId == 2732 ? 897 : 896);
				if (System.currentTimeMillis() - c.potatoBakeDelay &gt; 800) {
					c.isCooking = true;
					World.getWorld().submit(new Event(BAKED_POTATO_DELAY) {
						// initate cycle
						int i = c.getItems().getItemCount(1942);

						@Override
						public void execute() {
							// TODO Auto-generated method stub
							if (!c.isCooking) {
								this.stop();
								return;
							}
							if (i != 0) {

								i -= 1;
								c.getItems().addItem(BAKED_POTATO, 1);
								c.getItems().deleteItem(itemId,
										c.getItems().getItemSlot(itemId), 1);
								c.sendMessage(&quot;You cook the &quot;
										+ ItemAssistant.getItemName(itemId)
										+ &quot; from the source.&quot;);
								c.startAnimation(objectId == 2732 ? 897 : 896);
								PlayerAssistant.removeAllWindows(c);
								c.potatoBakeDelay = System.currentTimeMillis();
								PlayerAssistant.addSkillXP(c, BAKED_POTATO_XP,
										7);
							}

							if (i == 0 || !c.getItems().playerHasItem(itemId)) {
								c
										.sendMessage(&quot;You have run out of potatos to bake!&quot;);
								// c.isCooking = false;
								this.stop();
							}
						}

					});
					break;
				}
			}
		}
	}

}
[/CODE]

[B]Packets[/B]

Add this in your [I]walking packet:[/I]
[CODE]if(c.isCooking==true){
			c.isCooking=false;
		}[/CODE]

Add this in your [I]item on item packet.[/I]
[CODE]PotatoCooking.makePotatoWithButter(c, itemUsed, useWith);
		PotatoCooking.makeSpecials(c, itemUsed, useWith);[/CODE]

Finally add this in your [I]item on object packet.[/I]
[CODE]case 114:
			PotatoCooking.makeBakedPotato(c, itemId, objectId);
break;[/CODE]

Enjoy!</description>
    
    <lastBuildDate>Sat, 29 Dec 2012 02:36:34 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</title>
        <dc:creator><![CDATA[@thock321 thock321]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thock321">@thock321</a> wrote:</p>
          <blockquote>
              <p>Or you could’ve used an enum.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/4</link>
        <pubDate>Sat, 29 Dec 2012 02:36:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-476618-4</guid>
        <source url="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618.rss">[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</source>
      </item>
      <item>
        <title>[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="476618">
<div class="title">
<div class="quote-controls"></div>
 Clawz fury:</div>
<blockquote>
<p>pretty good, could use a lot of improvements though</p>
</blockquote>
</aside>
<p>this.</p>
<p>you also need to declare the packaging. also, to cut things like this down: <code>                        if (c.playerLevel[7] &gt;= item_item[2]
                                        &amp;&amp; itemId == POTATO_WITH_BUTTER &amp;&amp; useWith == item_item[0]
                                        || c.playerLevel[7] &gt;= item_item[2]
                                        &amp;&amp; itemId == item_item[0] &amp;&amp; useWith == POTATO_WITH_BUTTER) {
                                c.getItems().deleteItem(item_item[0],
                                                c.getItems().getItemSlot(item_item[0]), 1);
                                c.getItems().deleteItem(POTATO_WITH_BUTTER,
                                                c.getItems().getItemSlot(POTATO_WITH_BUTTER), 1);
                                c.getItems().addItem(item_item[1], 1);
                                PlayerAssistant.addSkillXP(c, item_item[3], 7);</code></p>
<p>you could store all the data via the array, and do it that way. although, the way you’ve done it is conventional.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/3</link>
        <pubDate>Fri, 28 Dec 2012 23:24:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-476618-3</guid>
        <source url="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618.rss">[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</source>
      </item>
      <item>
        <title>[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>pretty good, could use a lot of improvements though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/2</link>
        <pubDate>Fri, 28 Dec 2012 04:41:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-476618-2</guid>
        <source url="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618.rss">[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</source>
      </item>
      <item>
        <title>[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</title>
        <dc:creator><![CDATA[@Hybris Hybris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hybris">@Hybris</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">[SIZE=5][Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases.[/SIZE]</span></p>
<p><span class="bbcode-b">Contains:</span></p>
<p><span class="bbcode-b">*</span>Level requirements.<br>
<span class="bbcode-b">*</span>Implements anti-mass cycle when baking.<br>
<span class="bbcode-b">*</span>Animations.<br>
<span class="bbcode-b">*</span>Adds experience.<br>
<span class="bbcode-b">*</span>Easy to add-on base. I have added Chilli potato.<br>
<span class="bbcode-b">*</span>Manages walking errors.</p>
<p><span class="bbcode-b">Implementation:</span></p>
<p>Declare these in <span class="bbcode-i">Player.java</span>:</p>
<p><code>public boolean potatoBakeDelay;
public boolean isCooking;</code></p>
<p>Add this in your skills folder:</p>
<p>[CODE]/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> Hybris</p>
</li>
<li>
<p>Miscellaneous Cooking[POTATO COOKING]<br>
*/<br>
public class PotatoCooking {</p>
<p>/**</p>
<ul>
<li>Product data.<br>
*/<br>
public static int BAKED_POTATO = 6701, BURNT_POTATO = 6699,<br>
POTATO_WITH_BUTTER = 6703, POTATO = 1942, BUTTER = 6697;</li>
</ul>
<p>/**</p>
<ul>
<li>The event delay for baking potato cycle based.<br>
*/<br>
public static int BAKED_POTATO_DELAY = 600;</li>
</ul>
<p>/**</p>
<ul>
<li>The experience for making baked potato.<br>
*/<br>
public static int BAKED_POTATO_XP = 15;</li>
</ul>
<p>/**</p>
<ul>
<li>The baked potato item on item with butter experience.<br>
*/<br>
public static int BAKED_POTATO_WITH_BUTTER_XP = 40;</li>
</ul>
<p>/**</p>
<ul>
<li>Data for special ingredients on baked potato with butter. {Primary</li>
<li>ingredient, produce, level required, experience}<br>
*/<br>
public static int[][] ITEM_ON_ITEM = { { 7062, 7054, 41, 125 } // CHILLI<br>
// POTATO<br>
};</li>
</ul>
<p>/**</p>
<ul>
<li>Makes potato specials. Implements multidimensional arrary(ITEM_ON_ITEM[][])</li>
<li>
<a class="mention" href="/u/param">@param</a> c</li>
<li>The Player client.</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId</li>
<li>The item to be used.</li>
<li>
<a class="mention" href="/u/param">@param</a> useWith</li>
<li>The second item used.<br>
*/<br>
public static void makeSpecials(Player c, int itemId, int useWith) {<br>
for (int item_item[] : ITEM_ON_ITEM)<br>
if (c.playerLevel[7] &gt;= item_item[2]<br>
&amp;&amp; itemId == POTATO_WITH_BUTTER &amp;&amp; useWith == item_item[0]<br>
|| c.playerLevel[7] &gt;= item_item[2]<br>
&amp;&amp; itemId == item_item[0] &amp;&amp; useWith == POTATO_WITH_BUTTER) {<br>
c.getItems().deleteItem(item_item[0],<br>
c.getItems().getItemSlot(item_item[0]), 1);<br>
c.getItems().deleteItem(POTATO_WITH_BUTTER,<br>
c.getItems().getItemSlot(POTATO_WITH_BUTTER), 1);<br>
c.getItems().addItem(item_item[1], 1);<br>
PlayerAssistant.addSkillXP(c, item_item[3], 7);<br>
c<br>
.sendMessage("You combine the ingredients together to produce "<br>
+ ItemAssistant.getItemName(item_item[1]) + “.”);<br>
} else if (c.playerLevel[7] &lt; item_item[2]<br>
&amp;&amp; itemId == POTATO_WITH_BUTTER &amp;&amp; useWith == item_item[0]<br>
|| c.playerLevel[7] &lt; item_item[2]<br>
&amp;&amp; itemId == item_item[0] &amp;&amp; useWith == POTATO_WITH_BUTTER) {<br>
c.sendMessage(“You need a cooking level of " + item_item[2]<br>
+ " to do this.”);<br>
}</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>Makes the potato with butter.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> c</li>
<li>
<pre><code>       The Player.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId</li>
<li>
<pre><code>       The potato or butter.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> useWith</li>
<li>
<pre><code>       The potato or butter.
</code></pre>
</li>
</ul>
<p>*/<br>
public static void makePotatoWithButter(Player c, int itemId, int useWith) {<br>
if (c.playerLevel[7] &gt;= 39 &amp;&amp; itemId == BAKED_POTATO<br>
&amp;&amp; useWith == BUTTER || c.playerLevel[7] &gt;= 39<br>
&amp;&amp; itemId == BUTTER &amp;&amp; useWith == BAKED_POTATO) {<br>
c.getItems().deleteItem(BAKED_POTATO,<br>
c.getItems().getItemSlot(BAKED_POTATO), 1);<br>
c.getItems()<br>
.deleteItem(BUTTER, c.getItems().getItemSlot(BUTTER), 1);<br>
c.getItems().addItem(POTATO_WITH_BUTTER, 1);<br>
c.sendMessage(“You combine the baked potato with the butter.”);<br>
PlayerAssistant.addSkillXP(c, BAKED_POTATO_WITH_BUTTER_XP, 7);</p>
<pre><code> } else if (c.playerLevel[7] &lt; 39 &amp;&amp; itemId == BAKED_POTATO
 		&amp;&amp; useWith == BUTTER || c.playerLevel[7] &lt; 39
 		&amp;&amp; itemId == BUTTER &amp;&amp; useWith == BAKED_POTATO) {
 	c
 			.sendMessage("You need a cooking level of 39 or higher to do this.");
 }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Making ordinary baked potato with level requirements. Cycle based.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> c</li>
<li>
<pre><code>       The player.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId</li>
<li>
<pre><code>       The potato item id.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> objectId</li>
<li>
<pre><code>       The source for item on object[the objectId]
</code></pre>
</li>
</ul>
<p>*/<br>
public static void makeBakedPotato(final Player c, final int itemId,<br>
final int objectId) {<br>
if (c.playerLevel[7] &gt;= 7 &amp;&amp; itemId == 1942) {<br>
switch (objectId) {<br>
case 114:</p>
<pre><code> 		c.startAnimation(objectId == 2732 ? 897 : 896);
 		if (System.currentTimeMillis() - c.potatoBakeDelay &gt; 800) {
 			c.isCooking = true;
 			World.getWorld().submit(new Event(BAKED_POTATO_DELAY) {
 				// initate cycle
 				int i = c.getItems().getItemCount(1942);

 				@Override
 				public void execute() {
 					// TODO Auto-generated method stub
 					if (!c.isCooking) {
 						this.stop();
 						return;
 					}
 					if (i != 0) {

 						i -= 1;
 						c.getItems().addItem(BAKED_POTATO, 1);
 						c.getItems().deleteItem(itemId,
 								c.getItems().getItemSlot(itemId), 1);
 						c.sendMessage("You cook the "
 								+ ItemAssistant.getItemName(itemId)
 								+ " from the source.");
 						c.startAnimation(objectId == 2732 ? 897 : 896);
 						PlayerAssistant.removeAllWindows(c);
 						c.potatoBakeDelay = System.currentTimeMillis();
 						PlayerAssistant.addSkillXP(c, BAKED_POTATO_XP,
 								7);
 					}

 					if (i == 0 || !c.getItems().playerHasItem(itemId)) {
 						c
 								.sendMessage("You have run out of potatos to bake!");
 						// c.isCooking = false;
 						this.stop();
 					}
 				}

 			});
 			break;
 		}
 	}
 }
</code></pre>
<p>}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
<p><span class="bbcode-b">Packets</span></p>
<p>Add this in your <span class="bbcode-i">walking packet:</span></p>
<p><code>if(c.isCooking==true){
			c.isCooking=false;
		}</code></p>
<p>Add this in your <span class="bbcode-i">item on item packet.</span></p>
<p><code>PotatoCooking.makePotatoWithButter(c, itemUsed, useWith);
		PotatoCooking.makeSpecials(c, itemUsed, useWith);</code></p>
<p>Finally add this in your <span class="bbcode-i">item on object packet.</span></p>
<p><code>case 114:
			PotatoCooking.makeBakedPotato(c, itemId, objectId);
break;</code></p>
<p>Enjoy!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618/1</link>
        <pubDate>Fri, 28 Dec 2012 03:07:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-476618-1</guid>
        <source url="https://forum.moparisthebest.com/t/noob-friendly-misc-cooking-potato-baking-and-making-implementation-all-bases/476618.rss">[Noob Friendly] Misc-Cooking Potato baking and making implementation. All bases</source>
      </item>
  </channel>
</rss>
