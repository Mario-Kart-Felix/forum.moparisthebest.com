<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[614] RuneCrafting altars</title>
    <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036</link>
    <description>
[IMG]http://i35.tinypic.com/25andqv.jpg[/img]


Altars class:
[CODE]package dragonkk.rs2rsps.skills.runecrafting;

import java.util.HashMap;
import java.util.Map;

import dragonkk.rs2rsps.Server;
import dragonkk.rs2rsps.events.Task;
import dragonkk.rs2rsps.model.player.Player;
import dragonkk.rs2rsps.model.player.Skills;

/**
* A class which handles the RuneCrafting altars.
* @author Fire cape
*/
public class Altars {
	
	/**
	 * An enum which represents types of objects.
	 * @author Fire cape
	 *
	 */
	public enum Altar {
		
		AIR(1, 1436, 556, 5, new int[] {2478});
		
		/**
		 * The level.
		 */
		private int level;
		
		/**
		 * The essence.
		 */
		private int essenceId;
		
		/**
		 * The rune id.
		 */
		private int runeId;
		
		/**
		 * The experience.
		 */
		private double experience;
		
		/**
		 * The object id.
		 */
		private int[] objectId;
		
		/**
		 * A map of altars.
		 */
		private static Map&lt;Integer, Altar&gt; altars = new HashMap&lt;Integer, Altar&gt;();
		
		/**
		 * Gets an altar by its object id.
		 * @param object The object.
		 * @return The altar.
		 */
		public static Altar forId(int object) {
			return altars.get(object);
		}
		
		/**
		 * Populates the altar map.
		 */
		static {
			for(Altar altar : Altar.values()) {
				for(int object: altar.objectId) {
					altars.put(object, altar);
				}
			}
		}
		
		/**
		 * Handles the altar enum.
		 * @param level The required level.
		 * @param essenceId The essence id.
		 * @param runeId The rune id.
		 * @param experience The experience gained.
		 * @param objectId The altar id.
		 */
		private Altar(int level, int essenceId, int runeId, double experience, int[] objectId) {
			this.level = level;
			this.essenceId = essenceId;
			this.runeId = runeId;
			this.experience = experience;
			this.objectId = objectId;
		}
		
		/**
		 * Gets the required level
		 * @return The required level.
		 */
		public int getRequiredLevel() {
			return level;
		}
		
		/**
		 * Gets the essence id.
		 * @return The essence id.
		 */
		public int getEssenceId() {
			return essenceId;
		}
		
		/**
		 * Gets the rune id.
		 * @return The rune id.
		 */
		public int getRuneId() {
			return runeId;
		}
		
		/**
		 * Gets the experience.
		 * @return The experience.
		 */
		public double getExperience() {
			return experience;
		}
		
		/**
		 * Gets the object id.
		 * @return The object id.
		 */
		public int[] getObjectId() {
			return objectId;
		}
	}
	
	/**
	 * The altar enum.
	 */
	private Altar altar;
	
	/**
	 * The player class.
	 */
	private Player player;
	
	/**
	 * The altars class.
	 * @param player The player.
	 */
	public Altars(Player player, Altar altar) {
		this.player = player;
		this.altar = altar;
	}
	
	/**
	 * Initialises the enum.
	 * @param altar The altar.
	 */
	public void initEnum(Altar altar) {
		this.altar = altar;
		checkEssence();
	}
	
	/**
	 * Checks if the player has the required level.
	 */
	public void checkLevel() {
		int runecrafting = player.getSkills().getLevel(Skills.RUNECRAFTING);
		if(runecrafting &lt; altar.getRequiredLevel()) {
			player.getFrames().sendChatMessage(0, &quot;You must be atleast level &quot;+altar.getRequiredLevel()+&quot; to use this altar!&quot;);
			return;
		}
		startRuneCrafting();
	}
	
	/**
	 * Checks if the player has essence.
	 */
	public void checkEssence() {
		if(player.getInventory().contains(altar.getEssenceId())) {
			checkLevel();
		}
	}
	
	/**
	 * Starts the RuneCrafting action.
	 */
	public void startRuneCrafting() {
		player.animate(791);
		player.graphics(186, 0, 100);
		Server.getEntityExecutor().schedule(new Task() {
			@Override
			public void run() {
				int itemAmount = player.getInventory().numberOf(altar.getEssenceId());
				player.getInventory().deleteItem(altar.getEssenceId(), itemAmount);
				player.getInventory().addItem(altar.getRuneId(), itemAmount * multiplyRunes(altar.getRuneId()));
				player.getSkills().addXp(20, altar.getExperience() * itemAmount);
				player.getFrames().sendChatMessage(0, &quot;You bind the temples power into runes!&quot;);
			}
		}, 2000);
	}
	
	/**
	 * Multiples runes.
	 */
	public int multiplyRunes(int itemId) {
		int level = player.getSkills().getLevel(Skills.RUNECRAFTING);
		switch (itemId) {
		case 556:
			if (level &gt;= 1 &amp;&amp; level &lt; 11)
				return 1;
			if (level &gt;= 11 &amp;&amp; level &lt; 22)
				return 2;
		}
		return 1;
	}
}[/CODE]

Player.java

[CODE]/**
     * Creates a graphic.
     * @param id The id.
     * @param delay The delay.
     * @param height The height.
     */
    public void graphics(int id, int delay, int height) {
    	this.getMask().setLastGraphics(new Graphics((short)id, (short)delay, (short)(65536 * height)));
    	this.getMask().setGraphicUpdate(true);
    }[/CODE]

[CODE]/**
     * The altars instance.
     */
    private final Altars altars = new Altars(this, null);
    
    /**
     * Gets the altars class.
     * @return The altars instance.
     */ 
    public Altars getAltars() {
    	return altars;
    }[/CODE]

[CODE]import dragonkk.rs2rsps.skills.runecrafting.Altars;[/CODE]

Packets.java
(Object option 1)

[CODE]Altar altar = Altar.forId(objectId);
		if(altar != null) {
			p.getAltars().initEnum(altar);
		}[/CODE]

[CODE]import dragonkk.rs2rsps.skills.runecrafting.Altars;[/CODE]

Graphics:
[CODE]/**
	 * Creates a graphic.
	 * @param id The id.
	 * @param delay The delay.
	 * @param height The height.
	 */
	public Graphics(short id, short delay, short height) {
		this.id = id;
		this.delay = delay;
		this.height = height;
	}[/CODE]

[CODE]/**
	 * Gets the graphic height.
	 * @return The height.
	 */
	public short getHeight() {
		return height;
	}[/CODE]

[CODE]private short height;[/CODE]</description>
    
    <lastBuildDate>Fri, 10 Sep 2010 22:44:03 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[614] RuneCrafting altars</title>
        <dc:creator><![CDATA[@Darkomania Darkomania]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/darkomania">@Darkomania</a> wrote:</p>
          <blockquote>
              <p>Thanks  <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> it work</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/5</link>
        <pubDate>Fri, 10 Sep 2010 22:44:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-356036-5</guid>
        <source url="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss">[614] RuneCrafting altars</source>
      </item>
      <item>
        <title>[614] RuneCrafting altars</title>
        <dc:creator><![CDATA[@R0fl_k0ed R0fl k0ed]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/r0fl_k0ed">@R0fl_k0ed</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="3" data-topic="356036">
<div class="title">
<div class="quote-controls"></div>
 n10si t:</div>
<blockquote>
<p>Nice, but this is a snippet, either explain the code or post in the snippets section.</p>
</blockquote>
</aside>
<p>Lol’d he did explain btw thanks used this but i cant check if it works what are the coords?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/4</link>
        <pubDate>Fri, 10 Sep 2010 02:35:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-356036-4</guid>
        <source url="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss">[614] RuneCrafting altars</source>
      </item>
      <item>
        <title>[614] RuneCrafting altars</title>
        <dc:creator><![CDATA[@n10si_t n10si t]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/n10si_t">@n10si_t</a> wrote:</p>
          <blockquote>
              <p>Nice, but this is a snippet, either explain the code or post in the snippets section.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/3</link>
        <pubDate>Wed, 08 Sep 2010 20:31:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-356036-3</guid>
        <source url="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss">[614] RuneCrafting altars</source>
      </item>
      <item>
        <title>[614] RuneCrafting altars</title>
        <dc:creator><![CDATA[@gab0c gab0c]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gab0c">@gab0c</a> wrote:</p>
          <blockquote>
              <p>Thanks man! I really needed this!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/2</link>
        <pubDate>Wed, 08 Sep 2010 18:58:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-356036-2</guid>
        <source url="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss">[614] RuneCrafting altars</source>
      </item>
      <item>
        <title>[614] RuneCrafting altars</title>
        <dc:creator><![CDATA[@Fire_capez Fire capez]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fire_capez">@Fire_capez</a> wrote:</p>
          <blockquote>
              <p><div class="lightbox-wrapper"><a class="lightbox" href="http://i35.tinypic.com/25andqv.jpg" title="25andqv.jpg" rel="nofollow noopener"><img src="http://i35.tinypic.com/25andqv.jpg" alt width="690" height="454"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">25andqv.jpg</span><span class="informations">769×506</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>Altars class:</p>
<p>[CODE]package dragonkk.rs2rsps.skills.runecrafting;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import dragonkk.rs2rsps.Server;<br>
import dragonkk.rs2rsps.events.Task;<br>
import dragonkk.rs2rsps.model.player.Player;<br>
import dragonkk.rs2rsps.model.player.Skills;</p>
<p>/**</p>
<ul>
<li>
<p>A class which handles the RuneCrafting altars.</p>
</li>
<li>
<p><span class="mention">@author</span> Fire cape<br>
*/<br>
public class Altars {</p>
<p>/**</p>
<ul>
<li>An enum which represents types of objects.</li>
<li>
<span class="mention">@author</span> Fire cape</li>
<li>
</li>
</ul>
<p>*/<br>
public enum Altar {</p>
<pre><code>  AIR(1, 1436, 556, 5, new int[] {2478});
  
  /**
   * The level.
   */
  private int level;
  
  /**
   * The essence.
   */
  private int essenceId;
  
  /**
   * The rune id.
   */
  private int runeId;
  
  /**
   * The experience.
   */
  private double experience;
  
  /**
   * The object id.
   */
  private int[] objectId;
  
  /**
   * A map of altars.
   */
  private static Map&lt;Integer, Altar&gt; altars = new HashMap&lt;Integer, Altar&gt;();
  
  /**
   * Gets an altar by its object id.
   * @param object The object.
   * @return The altar.
   */
  public static Altar forId(int object) {
  	return altars.get(object);
  }
  
  /**
   * Populates the altar map.
   */
  static {
  	for(Altar altar : Altar.values()) {
  		for(int object: altar.objectId) {
  			altars.put(object, altar);
  		}
  	}
  }
  
  /**
   * Handles the altar enum.
   * @param level The required level.
   * @param essenceId The essence id.
   * @param runeId The rune id.
   * @param experience The experience gained.
   * @param objectId The altar id.
   */
  private Altar(int level, int essenceId, int runeId, double experience, int[] objectId) {
  	this.level = level;
  	this.essenceId = essenceId;
  	this.runeId = runeId;
  	this.experience = experience;
  	this.objectId = objectId;
  }
  
  /**
   * Gets the required level
   * @return The required level.
   */
  public int getRequiredLevel() {
  	return level;
  }
  
  /**
   * Gets the essence id.
   * @return The essence id.
   */
  public int getEssenceId() {
  	return essenceId;
  }
  
  /**
   * Gets the rune id.
   * @return The rune id.
   */
  public int getRuneId() {
  	return runeId;
  }
  
  /**
   * Gets the experience.
   * @return The experience.
   */
  public double getExperience() {
  	return experience;
  }
  
  /**
   * Gets the object id.
   * @return The object id.
   */
  public int[] getObjectId() {
  	return objectId;
  }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>The altar enum.<br>
*/<br>
private Altar altar;</li>
</ul>
<p>/**</p>
<ul>
<li>The player class.<br>
*/<br>
private Player player;</li>
</ul>
<p>/**</p>
<ul>
<li>The altars class.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.<br>
*/<br>
public Altars(Player player, Altar altar) {<br>
this.player = player;<br>
this.altar = altar;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Initialises the enum.</li>
<li>
<a class="mention" href="/u/param">@param</a> altar The altar.<br>
*/<br>
public void initEnum(Altar altar) {<br>
this.altar = altar;<br>
checkEssence();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if the player has the required level.<br>
*/<br>
public void checkLevel() {<br>
int runecrafting = player.getSkills().getLevel(Skills.RUNECRAFTING);<br>
if(runecrafting &lt; altar.getRequiredLevel()) {<br>
player.getFrames().sendChatMessage(0, “You must be atleast level “+altar.getRequiredLevel()+” to use this altar!”);<br>
return;<br>
}<br>
startRuneCrafting();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if the player has essence.<br>
*/<br>
public void checkEssence() {<br>
if(player.getInventory().contains(altar.getEssenceId())) {<br>
checkLevel();<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Starts the RuneCrafting action.<br>
*/<br>
public void startRuneCrafting() {<br>
player.animate(791);<br>
player.graphics(186, 0, 100);<br>
Server.getEntityExecutor().schedule(new Task() {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void run() {<br>
int itemAmount = player.getInventory().numberOf(altar.getEssenceId());<br>
player.getInventory().deleteItem(altar.getEssenceId(), itemAmount);<br>
player.getInventory().addItem(altar.getRuneId(), itemAmount * multiplyRunes(altar.getRuneId()));<br>
player.getSkills().addXp(20, altar.getExperience() * itemAmount);<br>
player.getFrames().sendChatMessage(0, “You bind the temples power into runes!”);<br>
}<br>
}, 2000);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Multiples runes.<br>
*/<br>
public int multiplyRunes(int itemId) {<br>
int level = player.getSkills().getLevel(Skills.RUNECRAFTING);<br>
switch (itemId) {<br>
case 556:<br>
if (level &gt;= 1 &amp;&amp; level &lt; 11)<br>
return 1;<br>
if (level &gt;= 11 &amp;&amp; level &lt; 22)<br>
return 2;<br>
}<br>
return 1;<br>
}<br>
}[/CODE]</li>
</ul>
</li>
</ul>
<p>Player.java</p>
<p><code>/**
     * Creates a graphic.
     * @param id The id.
     * @param delay The delay.
     * @param height The height.
     */
    public void graphics(int id, int delay, int height) {
    	this.getMask().setLastGraphics(new Graphics((short)id, (short)delay, (short)(65536 * height)));
    	this.getMask().setGraphicUpdate(true);
    }</code></p>
<p>[CODE]/**<br>
* The altars instance.<br>
*/<br>
private final Altars altars = new Altars(this, null);</p>
<pre><code>/**
 * Gets the altars class.
 * @return The altars instance.
 */ 
public Altars getAltars() {
	return altars;
}[/CODE]
</code></pre>
<pre><code class="lang-auto">import dragonkk.rs2rsps.skills.runecrafting.Altars;</code></pre>
<p>Packets.java<br>
(Object option 1)</p>
<p><code>Altar altar = Altar.forId(objectId);
		if(altar != null) {
			p.getAltars().initEnum(altar);
		}</code></p>
<pre><code class="lang-auto">import dragonkk.rs2rsps.skills.runecrafting.Altars;</code></pre>
<p>Graphics:</p>
<p><code>/**
	 * Creates a graphic.
	 * @param id The id.
	 * @param delay The delay.
	 * @param height The height.
	 */
	public Graphics(short id, short delay, short height) {
		this.id = id;
		this.delay = delay;
		this.height = height;
	}</code></p>
<p><code>/**
	 * Gets the graphic height.
	 * @return The height.
	 */
	public short getHeight() {
		return height;
	}</code></p>
<pre><code class="lang-auto">private short height;</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/614-runecrafting-altars/356036/1</link>
        <pubDate>Fri, 20 Aug 2010 19:18:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-356036-1</guid>
        <source url="https://forum.moparisthebest.com/t/614-runecrafting-altars/356036.rss">[614] RuneCrafting altars</source>
      </item>
  </channel>
</rss>
