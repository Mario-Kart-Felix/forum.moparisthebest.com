<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>The Decompressor class</title>
    <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903</link>
    <description>So I&#39;m looking through the Decompressor class and in the decompress() method I found this. 

[code=java]
				int k2 = ((buffer[0] &amp; 0xff) &lt;&lt; 8) + (buffer[1] &amp; 0xff);
				int l2 = ((buffer[2] &amp; 0xff) &lt;&lt; 8) + (buffer[3] &amp; 0xff);
				int i3 = ((buffer[4] &amp; 0xff) &lt;&lt; 16) + ((buffer[5] &amp; 0xff) &lt;&lt; 8)
						+ (buffer[6] &amp; 0xff);
				int j3 = buffer[7] &amp; 0xff;
				/**
				 * 
				 */
				if (k2 != id || l2 != i || j3 != anInt311)
					return null;
				if (i3 &lt; 0 || i3 &gt; dataFile.length() / 520L)
					return null;
[/code]
The code after this does only uses int i3. So the rest(k2, l2, j3 and those if clauses) seems like random not neccessary shit to me. 

Here&#39;s the whole method:

[code=java]
	public synchronized byte[] decompress(int id) {
		System.out.println(&quot;Decompressing &quot; + id);
		try {
			/**
			 * First we seek to a point in the index file.
			 */
			seek(indexFile, id * 6);
			/**
			 * This integer only exists so we can check if the data we read
			 * isn&#39;t -1.
			 */
			int indexCheck;

			/**
			 * A loop which reads data from the index file to the buffer.
			 */
			for (int point = 0; point &lt; 6; point += indexCheck) {
				/**
				 * Reads bytes from the index file and stores them into the
				 * buffer.
				 */
				indexCheck = indexFile.read(buffer, point, 6 - point);
				/**
				 * Null check. If the integer we just read was -1 this method
				 * returns.
				 */
				if (indexCheck == -1) {
					System.out.println(&quot;Data read was -1.&quot;);
					return null;
				}
			}

			/**
			 * The data from the buffer we just filled will be put in this int.
			 */
			int size = ((buffer[0] &amp; 0xff) &lt;&lt; 16) + ((buffer[1] &amp; 0xff) &lt;&lt; 8)
					+ (buffer[2] &amp; 0xff);
			System.out.println(&quot;Buffer size: &quot; + size);

			/**
			 * This is the point to seek in the data file.
			 */
			int pointIndex = ((buffer[3] &amp; 0xff) &lt;&lt; 16)
					+ ((buffer[4] &amp; 0xff) &lt;&lt; 8) + (buffer[5] &amp; 0xff);
			System.out.println(&quot;Point index: &quot; + pointIndex);

			/**
			 * If the data we just read is 0 or less than 0. Or is more than the
			 * size of the data file divided by 520. It returns null.
			 */
			if (pointIndex &lt;= 0 || (long) pointIndex &gt; dataFile.length() / 520L)
				return null;

			/**
			 * Creates the array of bytes which will be returned at the end of
			 * this method.
			 */
			byte byteArray[] = new byte[size];

			/**
			 * The buffer position. This integer will be increment in the coming
			 * loop.
			 */
			int bufferPosition = 0;

			/**
			 * A loop.
			 */
			for (int i = 0; bufferPosition &lt; size; i++) { // size = 55161
				/**
				 * Returns if the point index is 0. But this will never happen.
				 */
				if (pointIndex == 0)
					return null;

				/**
				 * Seeks in the data file at the point index * 520.
				 */
				seek(dataFile, pointIndex * 520);

				/**
				 * The position we are going to start reading from in the
				 * buffer.
				 */
				int offset = 0;

				/**
				 * The amount of bytes we are going to read is the size of the
				 * buffer - the position in the buffer.
				 */
				int readableBytes = size - bufferPosition;

				/**
				 * The amount of bytes we are going to read cannot be more than
				 * 512.
				 */
				if (readableBytes &gt; 512)
					readableBytes = 512;

				/**
				 * Again a check. If this number is -1 the method will return.
				 */
				int dataCheck;
				/**
				 * No integer is defined in this loop. While k (first time = 0)
				 * is less than i2( first decompression = 512) + 8. K =+ j2 ( =
				 * 0). Inside the loop j2 will be associated with the integer
				 * which we read from the data file. Also integer data will be
				 * stored in our buffer.
				 */
				for (; offset &lt; readableBytes + 8; offset += dataCheck) {
					dataCheck = dataFile.read(buffer, offset,
							(readableBytes + 8) - offset);
					/**
					 * A check, if that data we just read is -1 the method
					 * returns.
					 */
					if (dataCheck == -1)
						return null;
				}
				int k2 = ((buffer[0] &amp; 0xff) &lt;&lt; 8) + (buffer[1] &amp; 0xff);
				int l2 = ((buffer[2] &amp; 0xff) &lt;&lt; 8) + (buffer[3] &amp; 0xff);
				int i3 = ((buffer[4] &amp; 0xff) &lt;&lt; 16) + ((buffer[5] &amp; 0xff) &lt;&lt; 8)
						+ (buffer[6] &amp; 0xff);
				int j3 = buffer[7] &amp; 0xff;
				if (k2 != id || l2 != i || j3 != anInt311)
					return null;
				if (i3 &lt; 0 || i3 &gt; dataFile.length() / 520L)
					return null;
				for (int pos = 0; pos &lt; readableBytes; pos++)
					byteArray[bufferPosition++] = buffer[pos + 8];

				pointIndex = i3;
			}

			return byteArray;
		} catch (IOException e) {
			return null;
		}
	}
[/code]
Does anyone know why it is here or where it&#39;s used for? Because I can just commend that part out. And the decompression doesn&#39;t fail. I know the if clauses prevent you from wrong data, but the client and cache give the right data for the methods. 
So...?</description>
    
    <lastBuildDate>Tue, 03 Jan 2012 20:58:42 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Thanks, helped me alot.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/7</link>
        <pubDate>Tue, 03 Jan 2012 20:58:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-7</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>Yes, it’s the archive id, although it’s only .idx0 files that are archives. In general, I would just call it the file id.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/6</link>
        <pubDate>Tue, 03 Jan 2012 20:54:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-6</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Okay, I think I get it. But I still don’t understand what you mean with file id (k2). The file id is not the number after .idx (.idx0 - .idx 4) right? Because that’s j3. Or is that id the archive id? (“title”, “config”, “interface”, “media” etc. etc.).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/5</link>
        <pubDate>Tue, 03 Jan 2012 20:47:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-5</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>k2 is the file id. You know when you call that method, you pass an argument specifying which file you want by id. It’s the same thing.</p>
<p>j3 is the index id. When you say “right file”, if you’re talking about the .idx file, then you are correct, but you’re not reading that file at that point. The .idx file contains the file lengths (<span class="bbcode-i">size</span> in that code) as well as the initial offsets of the files (<span class="bbcode-i">pointIndex</span> in that code). Look at how that data is used.</p>
<p>Everything else sounds about right.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/4</link>
        <pubDate>Tue, 03 Jan 2012 20:37:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-4</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Let me think. So, the buffer array ['0] - ['7] is the 8-byte header. k2 is the sector id? And l2 is data stored in that sector which says how many sectors you have read. And i3 is next sector that I can reach by using the seek method. And j3 is also data in the current sector which confirms we are still reading the right file? Please correct me if I’m wrong <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/3</link>
        <pubDate>Tue, 03 Jan 2012 20:17:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-3</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>Look at the if statements in that snippet.</p>
<pre><code class="lang-auto">if (k2 != id || l2 != i || j3 != anInt311)
        return null;
if (i3 &lt; 0 || i3 &gt; dataFile.length() / 520L)
        return null;</code></pre>
<p>It’s there to ensure the cache isn’t corrupt. Data in the cache is split into non-contiguous “sectors”, 520 bytes in length. Each contain an 8-byte header (the data you’re unsure about). k2 is the file id (i.e. the parameter of that method, “id”), l2 is the number of sectors read so far, i3 is the next offset (sector) to read the data from (if there’s more data to read) and j3 is the index id (.idx0, .idx1, .idx2…)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/2</link>
        <pubDate>Tue, 03 Jan 2012 19:20:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-2</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
      <item>
        <title>The Decompressor class</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>So I’m looking through the Decompressor class and in the decompress() method I found this.</p>
<pre><code class="lang-auto">				int k2 = ((buffer[0] &amp; 0xff) &lt;&lt; 8) + (buffer[1] &amp; 0xff);
				int l2 = ((buffer[2] &amp; 0xff) &lt;&lt; 8) + (buffer[3] &amp; 0xff);
				int i3 = ((buffer[4] &amp; 0xff) &lt;&lt; 16) + ((buffer[5] &amp; 0xff) &lt;&lt; 8)
						+ (buffer[6] &amp; 0xff);
				int j3 = buffer[7] &amp; 0xff;
				/**
				 * 
				 */
				if (k2 != id || l2 != i || j3 != anInt311)
					return null;
				if (i3 &lt; 0 || i3 &gt; dataFile.length() / 520L)
					return null;</code></pre>
<p>The code after this does only uses int i3. So the rest(k2, l2, j3 and those if clauses) seems like random not neccessary shit to me.</p>
<p>Here’s the whole method:</p>
<pre><code class="lang-auto">	public synchronized byte[] decompress(int id) {
		System.out.println("Decompressing " + id);
		try {
			/**
			 * First we seek to a point in the index file.
			 */
			seek(indexFile, id * 6);
			/**
			 * This integer only exists so we can check if the data we read
			 * isn't -1.
			 */
			int indexCheck;

			/**
			 * A loop which reads data from the index file to the buffer.
			 */
			for (int point = 0; point &lt; 6; point += indexCheck) {
				/**
				 * Reads bytes from the index file and stores them into the
				 * buffer.
				 */
				indexCheck = indexFile.read(buffer, point, 6 - point);
				/**
				 * Null check. If the integer we just read was -1 this method
				 * returns.
				 */
				if (indexCheck == -1) {
					System.out.println("Data read was -1.");
					return null;
				}
			}

			/**
			 * The data from the buffer we just filled will be put in this int.
			 */
			int size = ((buffer[0] &amp; 0xff) &lt;&lt; 16) + ((buffer[1] &amp; 0xff) &lt;&lt; 8)
					+ (buffer[2] &amp; 0xff);
			System.out.println("Buffer size: " + size);

			/**
			 * This is the point to seek in the data file.
			 */
			int pointIndex = ((buffer[3] &amp; 0xff) &lt;&lt; 16)
					+ ((buffer[4] &amp; 0xff) &lt;&lt; 8) + (buffer[5] &amp; 0xff);
			System.out.println("Point index: " + pointIndex);

			/**
			 * If the data we just read is 0 or less than 0. Or is more than the
			 * size of the data file divided by 520. It returns null.
			 */
			if (pointIndex &lt;= 0 || (long) pointIndex &gt; dataFile.length() / 520L)
				return null;

			/**
			 * Creates the array of bytes which will be returned at the end of
			 * this method.
			 */
			byte byteArray[] = new byte[size];

			/**
			 * The buffer position. This integer will be increment in the coming
			 * loop.
			 */
			int bufferPosition = 0;

			/**
			 * A loop.
			 */
			for (int i = 0; bufferPosition &lt; size; i++) { // size = 55161
				/**
				 * Returns if the point index is 0. But this will never happen.
				 */
				if (pointIndex == 0)
					return null;

				/**
				 * Seeks in the data file at the point index * 520.
				 */
				seek(dataFile, pointIndex * 520);

				/**
				 * The position we are going to start reading from in the
				 * buffer.
				 */
				int offset = 0;

				/**
				 * The amount of bytes we are going to read is the size of the
				 * buffer - the position in the buffer.
				 */
				int readableBytes = size - bufferPosition;

				/**
				 * The amount of bytes we are going to read cannot be more than
				 * 512.
				 */
				if (readableBytes &gt; 512)
					readableBytes = 512;

				/**
				 * Again a check. If this number is -1 the method will return.
				 */
				int dataCheck;
				/**
				 * No integer is defined in this loop. While k (first time = 0)
				 * is less than i2( first decompression = 512) + 8. K =+ j2 ( =
				 * 0). Inside the loop j2 will be associated with the integer
				 * which we read from the data file. Also integer data will be
				 * stored in our buffer.
				 */
				for (; offset &lt; readableBytes + 8; offset += dataCheck) {
					dataCheck = dataFile.read(buffer, offset,
							(readableBytes + 8) - offset);
					/**
					 * A check, if that data we just read is -1 the method
					 * returns.
					 */
					if (dataCheck == -1)
						return null;
				}
				int k2 = ((buffer[0] &amp; 0xff) &lt;&lt; 8) + (buffer[1] &amp; 0xff);
				int l2 = ((buffer[2] &amp; 0xff) &lt;&lt; 8) + (buffer[3] &amp; 0xff);
				int i3 = ((buffer[4] &amp; 0xff) &lt;&lt; 16) + ((buffer[5] &amp; 0xff) &lt;&lt; 8)
						+ (buffer[6] &amp; 0xff);
				int j3 = buffer[7] &amp; 0xff;
				if (k2 != id || l2 != i || j3 != anInt311)
					return null;
				if (i3 &lt; 0 || i3 &gt; dataFile.length() / 520L)
					return null;
				for (int pos = 0; pos &lt; readableBytes; pos++)
					byteArray[bufferPosition++] = buffer[pos + 8];

				pointIndex = i3;
			}

			return byteArray;
		} catch (IOException e) {
			return null;
		}
	}</code></pre>
<p>Does anyone know why it is here or where it’s used for? Because I can just commend that part out. And the decompression doesn’t fail. I know the if clauses prevent you from wrong data, but the client and cache give the right data for the methods.<br>
So…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/the-decompressor-class/427903/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/the-decompressor-class/427903/1</link>
        <pubDate>Tue, 03 Jan 2012 15:07:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-427903-1</guid>
        <source url="https://forum.moparisthebest.com/t/the-decompressor-class/427903.rss">The Decompressor class</source>
      </item>
  </channel>
</rss>
