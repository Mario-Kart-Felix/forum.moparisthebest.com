<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Firemaking Help! [PI]</title>
    <link>https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889</link>
    <description>Alright, before anyone says that theres already a tutorial for this, I&#39;ve looks.... either I&#39;m not looking in the right place or there isnt on.


Ok, now back on track here. I&#39;ve enabled firemaking but when I light logs, it does the fire lighting animation but it doesn&#39;t show the logs when I&#39;m done lighting them.

Anyone help?

Plus it takes like 6 seconds to light a fire.

Thanks  :)</description>
    
    <lastBuildDate>Mon, 22 Nov 2010 22:25:10 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Firemaking Help! [PI]</title>
        <dc:creator><![CDATA[@Mariokillu Mariokillu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mariokillu">@Mariokillu</a> wrote:</p>
          <blockquote>
              <p>UseItem</p>
<p>[code]package server.model.items;</p>
<p>import server.model.players.Client;<br>
import server.util.Misc;<br>
import server.Config;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Ryan / Lmctruck30</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class UseItem {</p>
<pre><code>public static void ItemonObject(Client c, int objectID, int objectX, int objectY, int itemId) {
	if (!c.getItems().playerHasItem(itemId, 1))
		return;
	switch(objectID) {
		case 2783:
			c.getSmithingInt().showSmithInterface(itemId);
		break;
		case 8151:
		case 8389:
			c.getFarming().checkItemOnObject(itemId);
		break;
		case 2728:
		case 12269:
			c.getCooking().itemOnObject(itemId);
		break;
		case 409:
			if (c.getPrayer().isBone(itemId))
				c.getPrayer().bonesOnAltar(itemId);
		break;
	default:
		if(c.playerRights == 3)
			Misc.println("Player At Object id: "+objectID+" with Item id: "+itemId);
		break;
	}
	
}

public static void ItemonItem(Client c, int itemUsed, int useWith) {
	if (itemUsed == 227 || useWith == 227)
		c.getHerblore().handlePotMaking(itemUsed,useWith);
	if (c.getItems().getItemName(itemUsed).contains("(") &amp;&amp; c.getItems().getItemName(useWith).contains("("))
		c.getPotMixing().mixPotion2(itemUsed, useWith);
	if (itemUsed == 1733 || useWith == 1733)
		c.getCrafting().handleLeather(itemUsed, useWith);
	if (itemUsed == 1755 || useWith == 1755)
		c.getCrafting().handleChisel(itemUsed,useWith);
	if (itemUsed == 946 || useWith == 946)
		c.getFletching().handleLog(itemUsed,useWith);
	if (itemUsed == 53 || useWith == 53 || itemUsed == 52 || useWith == 52)
		c.getFletching().makeArrows(itemUsed, useWith);
	if ((itemUsed == 1540 &amp;&amp; useWith == 11286) || (itemUsed == 11286 &amp;&amp; useWith == 1540)) {
		if (c.playerLevel[c.playerSmithing] &gt;= 95) {
			c.getItems().deleteItem(1540, c.getItems().getItemSlot(1540), 1);
			c.getItems().deleteItem(11286, c.getItems().getItemSlot(11286), 1);
			c.getItems().addItem(11284,1);
			c.sendMessage("You combine the two materials to create a dragonfire shield.");
			c.getPA().addSkillXP(500 * Config.SMITHING_EXPERIENCE, c.playerSmithing);
		} else {
			c.sendMessage("You need a smithing level of 95 to create a dragonfire shield.");
		}
	}
	if (itemUsed == 9142 &amp;&amp; useWith == 9190 || itemUsed == 9190 &amp;&amp; useWith == 9142) {
		if (c.playerLevel[c.playerFletching] &gt;= 58) {
			int boltsMade = c.getItems().getItemAmount(itemUsed) &gt; c.getItems().getItemAmount(useWith) ? c.getItems().getItemAmount(useWith) : c.getItems().getItemAmount(itemUsed);
			c.getItems().deleteItem(useWith, c.getItems().getItemSlot(useWith), boltsMade);
			c.getItems().deleteItem(itemUsed, c.getItems().getItemSlot(itemUsed), boltsMade);
			c.getItems().addItem(9241, boltsMade);
			c.getPA().addSkillXP(boltsMade * 6 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 58 to fletch this item.");
		}
	}
	if (itemUsed == 9143 &amp;&amp; useWith == 9191 || itemUsed == 9191 &amp;&amp; useWith == 9143) {
		if (c.playerLevel[c.playerFletching] &gt;= 63) {
			int boltsMade = c.getItems().getItemAmount(itemUsed) &gt; c.getItems().getItemAmount(useWith) ? c.getItems().getItemAmount(useWith) : c.getItems().getItemAmount(itemUsed);
			c.getItems().deleteItem(useWith, c.getItems().getItemSlot(useWith), boltsMade);
			c.getItems().deleteItem(itemUsed, c.getItems().getItemSlot(itemUsed), boltsMade);
			c.getItems().addItem(9242, boltsMade);
			c.getPA().addSkillXP(boltsMade * 7 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 63 to fletch this item.");
		}		
	}
	if (itemUsed == 9143 &amp;&amp; useWith == 9192 || itemUsed == 9192 &amp;&amp; useWith == 9143) {
		if (c.playerLevel[c.playerFletching] &gt;= 65) {
			int boltsMade = c.getItems().getItemAmount(itemUsed) &gt; c.getItems().getItemAmount(useWith) ? c.getItems().getItemAmount(useWith) : c.getItems().getItemAmount(itemUsed);
			c.getItems().deleteItem(useWith, c.getItems().getItemSlot(useWith), boltsMade);
			c.getItems().deleteItem(itemUsed, c.getItems().getItemSlot(itemUsed), boltsMade);
			c.getItems().addItem(9243, boltsMade);
			c.getPA().addSkillXP(boltsMade * 7 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 65 to fletch this item.");
		}		
	}
	if (itemUsed == 9144 &amp;&amp; useWith == 9193 || itemUsed == 9193 &amp;&amp; useWith == 9144) {
		if (c.playerLevel[c.playerFletching] &gt;= 71) {
			int boltsMade = c.getItems().getItemAmount(itemUsed) &gt; c.getItems().getItemAmount(useWith) ? c.getItems().getItemAmount(useWith) : c.getItems().getItemAmount(itemUsed);
			c.getItems().deleteItem(useWith, c.getItems().getItemSlot(useWith), boltsMade);
			c.getItems().deleteItem(itemUsed, c.getItems().getItemSlot(itemUsed), boltsMade);
			c.getItems().addItem(9244, boltsMade);
			c.getPA().addSkillXP(boltsMade * 10 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 71 to fletch this item.");
		}		
	}
	if (itemUsed == 9144 &amp;&amp; useWith == 9194 || itemUsed == 9194 &amp;&amp; useWith == 9144) {
		if (c.playerLevel[c.playerFletching] &gt;= 58) {
			int boltsMade = c.getItems().getItemAmount(itemUsed) &gt; c.getItems().getItemAmount(useWith) ? c.getItems().getItemAmount(useWith) : c.getItems().getItemAmount(itemUsed);
			c.getItems().deleteItem(useWith, c.getItems().getItemSlot(useWith), boltsMade);
			c.getItems().deleteItem(itemUsed, c.getItems().getItemSlot(itemUsed), boltsMade);
			c.getItems().addItem(9245, boltsMade);
			c.getPA().addSkillXP(boltsMade * 13 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 58 to fletch this item.");
		}		
	}
	if (itemUsed == 1601 &amp;&amp; useWith == 1755 || itemUsed == 1755 &amp;&amp; useWith == 1601) {
		if (c.playerLevel[c.playerFletching] &gt;= 63) {
			c.getItems().deleteItem(1601, c.getItems().getItemSlot(1601), 1);
			c.getItems().addItem(9192, 15);
			c.getPA().addSkillXP(8 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 63 to fletch this item.");
		}
	}
	if (itemUsed == 1607 &amp;&amp; useWith == 1755 || itemUsed == 1755 &amp;&amp; useWith == 1607) {
		if (c.playerLevel[c.playerFletching] &gt;= 65) {
			c.getItems().deleteItem(1607, c.getItems().getItemSlot(1607), 1);
			c.getItems().addItem(9189, 15);
			c.getPA().addSkillXP(8 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 65 to fletch this item.");
		}
	}
	if (itemUsed == 1605 &amp;&amp; useWith == 1755 || itemUsed == 1755 &amp;&amp; useWith == 1605) {
		if (c.playerLevel[c.playerFletching] &gt;= 71) {
			c.getItems().deleteItem(1605, c.getItems().getItemSlot(1605), 1);
			c.getItems().addItem(9190, 15);
			c.getPA().addSkillXP(8 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 71 to fletch this item.");
		}
	}
	if (itemUsed == 1603 &amp;&amp; useWith == 1755 || itemUsed == 1755 &amp;&amp; useWith == 1603) {
		if (c.playerLevel[c.playerFletching] &gt;= 73) {
			c.getItems().deleteItem(1603, c.getItems().getItemSlot(1603), 1);
			c.getItems().addItem(9191, 15);
			c.getPA().addSkillXP(8 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 73 to fletch this item.");
		}
	}
	if (itemUsed == 1615 &amp;&amp; useWith == 1755 || itemUsed == 1755 &amp;&amp; useWith == 1615) {
		if (c.playerLevel[c.playerFletching] &gt;= 73) {
			c.getItems().deleteItem(1615, c.getItems().getItemSlot(1615), 1);
			c.getItems().addItem(9193, 15);
			c.getPA().addSkillXP(8 * Config.FLETCHING_EXPERIENCE, c.playerFletching);
		} else {
			c.sendMessage("You need a fletching level of 73 to fletch this item.");
		}
	}
	if (itemUsed &gt;= 11710 &amp;&amp; itemUsed &lt;= 11714 &amp;&amp; useWith &gt;= 11710 &amp;&amp; useWith &lt;= 11714) {
		if (c.getItems().hasAllShards()) {
			c.getItems().makeBlade();
		}		
	}
	if (itemUsed == 2368 &amp;&amp; useWith == 2366 || itemUsed == 2366 &amp;&amp; useWith == 2368) {
		c.getItems().deleteItem(2368, c.getItems().getItemSlot(2368),1);
		c.getItems().deleteItem(2366, c.getItems().getItemSlot(2366),1);
		c.getItems().addItem(1187,1);
	}
	
	if (c.getItems().isHilt(itemUsed) || c.getItems().isHilt(useWith)) {
		int hilt = c.getItems().isHilt(itemUsed) ? itemUsed : useWith;
		int blade = c.getItems().isHilt(itemUsed) ? useWith : itemUsed;
		if (blade == 11690) {
			c.getItems().makeGodsword(hilt);
		}
	}
	
	switch(itemUsed) {
		case 1511:
		case 1521:
		case 1519:
		case 1517:
		case 1515:
		case 1513:
		case 590:
			c.getFiremaking().checkLogType(itemUsed, useWith);
			//c.sendMessage("Firemaking is disabled.");
		break;
		
	default:
		if(c.playerRights == 3)
			Misc.println("Player used Item id: "+itemUsed+" with Item id: "+useWith);
		break;
	}	
}
public static void ItemonNpc(Client c, int itemId, int npcId, int slot) {
	switch(itemId) {
	
	default:
		if(c.playerRights == 3)
			Misc.println("Player used Item id: "+itemId+" with Npc id: "+npcId+" With Slot : "+slot);
		break;
	}
	
}
</code></pre>
<p>}<br>
[/code]</p>
<p>Firemaking</p>
<p>[code]package server.model.players.skills;</p>
<p>import server.Config;<br>
import server.model.players.Client;<br>
import server.model.objects.Objects;<br>
import server.Server;<br>
/**</p>
<ul>
<li>Firemaking.java</li>
<li>
</li>
<li>
<span class="mention">@author</span> Sanity</li>
<li>
</li>
</ul>
<p>**/<br>
public class Firemaking {</p>
<pre><code>private Client c;

private int[] logs = {1511,1521,1519,1517,1515,1513};
private int[] exp = {40,60,90,135,203,304};
private int[] level = {1,15,30,45,60,75};
public long lastLight;
private int DELAY = 1250;
public boolean resetAnim = false;

public Firemaking(Client c) {
	this.c = c;
}

public void checkLogType(int logType, int otherItem) {
	for (int j = 0; j &lt; logs.length;j++) {
		if (logs[j] == logType || logs[j] == otherItem) {
			lightFire(j);
			return;
		}
	}	
}

public void lightFire(int slot) {
	if (c.duelStatus &gt;= 5) {
		c.sendMessage("Why am I trying to light a fire in the duel arena?");
		return;
	}	
	if (c.playerLevel[c.playerFiremaking] &gt;= level[slot]) {
		if (c.getItems().playerHasItem(590) &amp;&amp; c.getItems().playerHasItem(logs[slot])) {
			if (System.currentTimeMillis() - lastLight &gt; DELAY) {
				c.startAnimation(733,0);
				c.getItems().deleteItem(logs[slot], c.getItems().getItemSlot(logs[slot]), 1);
				c.getPA().addSkillXP(logs[slot] * Config.FIREMAKING_EXPERIENCE, c.playerFiremaking);
				Objects fire = new Objects(2732,c.getX(),c.getY(), 0, -1, 10, 3);
				Objects fire2 = new Objects(-1,c.getX(),c.getY(), 0, -1, 10, 60);
				Server.objectHandler.addObject(fire);
				Server.objectHandler.addObject(fire2);
				c.sendMessage("You light the fire.");
				c.getPA().walkTo(-1,0);
				c.turnPlayerTo(c.getX() + 1, c.getY());
				this.lastLight = System.currentTimeMillis();
				c.getPA().frame1();
				resetAnim = true;
			}
		}
	}	
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889/2</link>
        <pubDate>Mon, 22 Nov 2010 22:25:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369889-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889.rss">[PI] Firemaking Help! [PI]</source>
      </item>
      <item>
        <title>[PI] Firemaking Help! [PI]</title>
        <dc:creator><![CDATA[@Mariokillu Mariokillu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mariokillu">@Mariokillu</a> wrote:</p>
          <blockquote>
              <p>Alright, before anyone says that theres already a tutorial for this, I’ve looks… either I’m not looking in the right place or there isnt on.</p>
<p>Ok, now back on track here. I’ve enabled firemaking but when I light logs, it does the fire lighting animation but it doesn’t show the logs when I’m done lighting them.</p>
<p>Anyone help?</p>
<p>Plus it takes like 6 seconds to light a fire.</p>
<p>Thanks  <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889/1</link>
        <pubDate>Mon, 22 Nov 2010 22:13:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369889-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-firemaking-help-pi/369889.rss">[PI] Firemaking Help! [PI]</source>
      </item>
  </channel>
</rss>
