<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ItemBan // Need help with a get Method</title>
    <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855</link>
    <description>Hey,

So i&#39;ve tryed adding an ItemBan command (haven&#39;t got around to the actual command yet though) to punish scammers instead of completely banning them.
I want it to restrict them from:
 - Trading
 - Staking
 - Dropping/Picking up drops

What i&#39;ve done and is working is this:
Code in Trading.java
[code=java]
		if(PlayerPunishment.ItemBanned(player.getUsername()) || (PlayerPunishment.IPItemBanned(player.getHostAddress()))) {
			player.getPacketSender().sendMessage(&quot;You are currently Item Banned and therefore not allowed to trade.&quot;);
			return;
		}
[/code]

Same thing in Duelling.java but with a different message.

This is the code in PlayerPunishment.java (line 197)
[code=java]
package com.ruseps.world.content;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import com.ruseps.GameServer;
import com.ruseps.GameSettings;
import com.ruseps.model.Position;
import com.ruseps.util.Misc;
import com.ruseps.world.entity.impl.player.Player;


public class PlayerPunishment {

	private static final String BAN_DIRECTORY = &quot;./data/saves/&quot;;
	private static final String MUTE_DIRECTORY = &quot;./data/saves/&quot;;
	private static final String ITEMBAN_DIRECTORY = &quot;./data/saves&quot;;

	public static ArrayList&lt;String&gt; IPSBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsItemBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSItemBanned = new ArrayList&lt;String&gt;();


	public static void init() {
		initializeList(BAN_DIRECTORY, &quot;IPBans&quot;, IPSBanned);
		initializeList(BAN_DIRECTORY, &quot;Bans&quot;, AccountsBanned);
		initializeList(MUTE_DIRECTORY, &quot;IPMutes&quot;, IPSMuted);
		initializeList(MUTE_DIRECTORY, &quot;Mutes&quot;, AccountsMuted);
		initializeList(ITEMBAN_DIRECTORY, &quot;ItemBans&quot;, AccountsItemBanned);
		initializeList(ITEMBAN_DIRECTORY, &quot;IPItemBans&quot;, IPSItemBanned);
	}

	public static void initializeList(String directory, String file, ArrayList&lt;String&gt; list) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;&quot;+directory+&quot;&quot;+file+&quot;.txt&quot;));
			String data = null;
			while ((data = in.readLine()) != null) {
				list.add(data);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void addBannedIP(String IP) {
		if(!IPSBanned.contains(IP)) {
			addToFile(&quot;&quot;+BAN_DIRECTORY+&quot;IPBans.txt&quot;, IP);
			IPSBanned.add(IP);
		}
	}

	public static void addMutedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(&quot;&quot;+MUTE_DIRECTORY+&quot;IPMutes.txt&quot;, IP);
			IPSMuted.add(IP);
		}
	}
	
	public static void addItemBannedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(&quot;&quot;+ITEMBAN_DIRECTORY+&quot;IPItemBans.txt&quot;, IP);
			IPSItemBanned.add(IP);
		}
	}

	public static void ban(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsBanned.contains(p)) {
			addToFile(&quot;&quot;+BAN_DIRECTORY+&quot;Bans.txt&quot;, p);
			AccountsBanned.add(p);
		}
	}

	public static void mute(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(&quot;&quot;+MUTE_DIRECTORY+&quot;Mutes.txt&quot;, p);
			AccountsMuted.add(p);
		}
	}
	public static void ItemBan(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(&quot;&quot;+ITEMBAN_DIRECTORY+&quot;ItemBans.txt&quot;, p);
			AccountsItemBanned.add(p);
		}
	}

	public static boolean banned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsBanned.contains(player);
	}

	public static boolean muted(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsMuted.contains(player);
	}
	
	public static boolean ItemBanned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsItemBanned.contains(player);
	}

	public static boolean IPBanned(String IP) {
		return IPSBanned.contains(IP);
	}

	public static boolean IPMuted(String IP) {
		return IPSMuted.contains(IP);
	}
	
	public static boolean IPItemBanned(String IP) {
		return IPSItemBanned.contains(IP);
	}

	public static void unban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(&quot;&quot;+BAN_DIRECTORY+&quot;Bans.txt&quot;, player);
		AccountsBanned.remove(player);
	}

	public static void unmute(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(&quot;&quot;+MUTE_DIRECTORY+&quot;Mutes.txt&quot;, player);
		AccountsMuted.remove(player);
	}
	
	public static void unitemban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(&quot;&quot;+ITEMBAN_DIRECTORY+&quot;ItemBans&quot;, player);
		AccountsItemBanned.remove(player);
	}

	public static void reloadIPBans() {
		IPSBanned.clear();
		initializeList(BAN_DIRECTORY, &quot;IPBans&quot;, IPSBanned);
	}

	public static void reloadIPMutes() {
		IPSMuted.clear();
		initializeList(MUTE_DIRECTORY, &quot;IPMutes&quot;, IPSMuted);
	}

	public static void deleteFromFile(String file, String name) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedReader r = new BufferedReader(new FileReader(file));
				ArrayList&lt;String&gt; contents = new ArrayList&lt;String&gt;();
				while(true) {
					String line = r.readLine();
					if(line == null) {
						break;
					} else {
						line = line.trim();
					}
					if(!line.equalsIgnoreCase(name)) {
						contents.add(line);
					}
				}
				r.close();
				BufferedWriter w = new BufferedWriter(new FileWriter(file));
				for(String line : contents) {
					w.write(line, 0, line.length());
					w.newLine();
				}
				w.flush();
				w.close();
			} catch (Exception e) {}
		});
	}

	public static void addToFile(String file, String data) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedWriter out = new BufferedWriter(new FileWriter(file, true));
				try {
					out.newLine();
					out.write(data);
				} finally {
					out.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
	}
	
 /*
	private static Player[] ITEMBANNED_PLAYERS = new Player[10] // ------------------------------- This is the part i&#39;m having trouble with
	
	public static boolean isItemBanned(Player plr) {
		return getItemBanned(plr) &gt;=0;
	}
	
	public static int getItemBanned(Player plr) {
		for(int i = 0; 1 &lt; ITEMBANNED_PLAYERS.length; i++) {
			Player p = ITEMBANNED_PLAYERS[i];
			if(p == null)
				continue;
			if(p == plr) {
				return i;
			}
		}
		return -1;
	}
 */	

	public static class Jail {

		private static Player[] JAILED_PLAYERS = new Player[10];

		public static boolean jailPlayer(Player p) {
			int emptyCell = findSlot();
			if(emptyCell == -1) {
				return false;
			}
			Position pos = null;
			switch(emptyCell) {
			case 0:
				pos = new Position(3095, 3930);
				break;
			case 1:
				pos = new Position(3095, 3937);
				break;
			case 2:
				pos = new Position(3100, 3930);
				break;
			case 3:
				pos = new Position(3100, 3937);
				break;
			case 4:
				pos = new Position(3105, 3930);
				break;
			case 5:
				pos = new Position(3105, 3937);
				break;
			case 6:
				pos = new Position(3110, 3930);
				break;
			case 7:
				pos = new Position(3110, 3937);
				break;
			case 8:
				pos = new Position(3115, 3930);
				break;
			case 9:
				pos = new Position(3115, 3937);
				break;
			}
			p.moveTo(pos);
			JAILED_PLAYERS[emptyCell] = p;
			return true;
		}

		public static void unjail(Player plr) {
			int index = getIndex(plr);
			if(index &gt;= 0) {
				JAILED_PLAYERS[index] = null;
			}
			plr.moveTo(GameSettings.DEFAULT_POSITION.copy());
		}

		public static boolean isJailed(Player plr) {
			return getIndex(plr) &gt;= 0;
		}

		public static int getIndex(Player plr) {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				Player p = JAILED_PLAYERS[i];
				if(p == null)
					continue;
				if(p == plr) {
					return i;
				}
			}
			return -1;
		}

		public static int findSlot() {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				if(JAILED_PLAYERS[i] == null) {
					return i;
				}
			}
			return -1;
		}

	}
	
}

[/code]

What i&#39;ve done is copy it from the Jail method and try to edit it, but obviously i need to declare ITEMBANNED, i don&#39;t know how though. 
I need the get Method to restrict players from trading/staking a person who is ItemBanned. This is how it&#39;s done for Ironmans:
[code=java]
if(player2.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage(&quot;That player is a Hardcore-ironman-player and can therefore not stake.&quot;);
			return;
		}
[/code]
So i need to change player2.getGameMode to getItemBanned but i&#39;m having trouble setting up that method. I was wondering if anyone knew how i should do that?

Thanks
IF IT&#39;S NESSECARY THE ENTIRE CODE IN TRADING.JAVA IS DOWN BELOW, IF IT&#39;S NOT NEEDED IGNORE THE CODE BELOW -------------------------
[code=java]
package com.ruseps.world.content;

import java.util.concurrent.CopyOnWriteArrayList;

import com.ruseps.model.GameMode;
import com.ruseps.model.Item;
import com.ruseps.model.Locations;
import com.ruseps.model.Locations.Location;
import com.ruseps.model.PlayerRights;
import com.ruseps.model.definitions.ItemDefinition;
import com.ruseps.util.Misc;
import com.ruseps.world.World;
import com.ruseps.world.entity.impl.player.Player;
import com.ruseps.world.content.PlayerPunishment;

/**
 * @author: @Gabbe
 * Warning:
 * This crap is so messy and ugly. Will redo it once I get some time over.
 * Should be dupe-free.
 */

public class Trading {

	private Player player;
	public Trading(Player p) {
		this.player = p;
	}

	public void requestTrade(Player player2) {
		if(player == null || player2 == null || player.getConstitution() &lt;= 0 || player2.getConstitution() &lt;= 0 || player.isTeleporting() || player2.isTeleporting())
			return;
		
		if(player.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage(&quot;Ironman-players are not allowed to trade.&quot;);
			return;
		}
		if(PlayerPunishment.ItemBanned(player.getUsername()) || (PlayerPunishment.IPItemBanned(player.getHostAddress()))) {
			player.getPacketSender().sendMessage(&quot;You are currently Item Banned and therefore not allowed to trade.&quot;);
			return;
		}
		if(player.getGameMode() == GameMode.HARDCORE_IRONMAN) {
			player.getPacketSender().sendMessage(&quot;Hardcore-ironman-players are not allowed to trade.&quot;);
			return;
		}
		if(player2.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage(&quot;That player is a Hardcore-ironman-player and can therefore not stake.&quot;);
			return;
		}
		if(player2.getGameMode() == GameMode.HARDCORE_IRONMAN) {
			player.getPacketSender().sendMessage(&quot;That player is an Ironman player and can therefore not stake.&quot;);
			return;
		}
		
		
		/*if(Misc.getMinutesPlayed(player) &lt; 15) {
			player.getPacketSender().sendMessage(&quot;You must have played for at least 15 minutes in order to trade someone.&quot;);
			return;
		}*/
		if(player.getBankPinAttributes().hasBankPin() &amp;&amp; !player.getBankPinAttributes().hasEnteredBankPin()) {
			BankPin.init(player, false);
			return;
		}
		/*if(player.getHostAdress().equals(player2.getHostAdress()) &amp;&amp; player.getRights() != PlayerRights.OWNER &amp;&amp; player.getRights() != PlayerRights.DEVELOPER) {
			player.getPacketSender().sendMessage(&quot;Same IP-adress found. You cannot trade yourself from the same IP.&quot;);
			return;
		}*/
		if(System.currentTimeMillis() - lastTradeSent &lt; 5000 &amp;&amp; !inTrade()) {
			player.getPacketSender().sendMessage(&quot;You&#39;re sending trade requests too frequently. Please slow down.&quot;);
			return;
		}
		if(player.getLocation() == Location.DUEL_ARENA &amp;&amp; player.getDueling().duelingStatus == 5) {
			player.getPacketSender().sendMessage(&quot;You are far too busy to trade at the moment!&quot;);
			return;
		}
		if(inTrade()) {
			declineTrade(true);
			return;
		}
		if(player.getLocation() == Location.GODWARS_DUNGEON &amp;&amp; player.getMinigameAttributes().getGodwarsDungeonAttributes().hasEnteredRoom() &amp;&amp; !player2.getMinigameAttributes().getGodwarsDungeonAttributes().hasEnteredRoom()) {
			player.getPacketSender().sendMessage(&quot;You cannot reach that.&quot;);
			return;
		}
		if(player.isShopping() || player.isBanking()) {
			player.getPacketSender().sendInterfaceRemoval();
			return;
		}
		if(player.busy()) {
			return;
		}
		if(player2.busy() || player2.getInterfaceId() &gt; 0 || player2.getTrading().inTrade() || player2.isBanking() || player2.isShopping()/* || player2.getDueling().inDuelScreen || FightPit.inFightPits(player2)*/) {
			player.getPacketSender().sendMessage(&quot;The other player is currently busy.&quot;);
			return;
		}
		if(player.getInterfaceId() &gt; 0 || inTrade() || player.isBanking() || player.isShopping()/* || player.getDueling().inDuelScreen || FightPit.inFightPits(player)*/) {
			player.getPacketSender().sendMessage(&quot;You are currently unable to trade another player.&quot;);
			if(player.getInterfaceId() &gt; 0)
				player.getPacketSender().sendMessage(&quot;Please close all open interfaces before requesting to open another one.&quot;);
			return;
		}
		tradeWith = player2.getIndex();
		if(getTradeWith() == player.getIndex())
			return;
		if(!Locations.goodDistance(player.getPosition().getX(), player.getPosition().getY(), player2.getPosition().getX(), player2.getPosition().getY(), 2)) {
			player.getPacketSender().sendMessage(&quot;Please get closer to request a trade.&quot;);
			return;
		}
		if(!inTrade() &amp;&amp; player2.getTrading().tradeRequested() &amp;&amp; player2.getTrading().getTradeWith() == player.getIndex()) {
			openTrade();
			player2.getTrading().openTrade();
		} else if(!inTrade()) {
			setTradeRequested(true);
			player.getPacketSender().sendMessage(&quot;You&#39;ve sent a trade request to &quot;+player2.getUsername()+&quot;.&quot;);
			player2.getPacketSender().sendMessage(player.getUsername() +&quot;:tradereq:&quot;);
		}
		lastTradeSent = System.currentTimeMillis();
	}

	public void openTrade() {
		player.getPacketSender().sendClientRightClickRemoval();
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player == null || player2 == null || getTradeWith() == player.getIndex() || player.isBanking())
			return;
		setTrading(true);
		setTradeRequested(false);
		setCanOffer(true);
		setTradeStatus(1);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player2.getPacketSender().sendInterfaceItems(3415, player2.getTrading().offeredItems);
		sendText(player2);
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getMovementQueue().reset();
		inTradeWith = player2.getIndex();
	}

	public void declineTrade(boolean tellOther) {
		Player player2 = getTradeWith() &gt;= 0 &amp;&amp; !(getTradeWith() &gt; World.getPlayers().capacity()) ? World.getPlayers().get(getTradeWith()) : null;
		for (Item item : offeredItems) {
			if (item.getAmount() &lt; 1)
				continue;
			player.getInventory().add(item);
		}
		offeredItems.clear();
		if(tellOther &amp;&amp; getTradeWith() &gt; -1) {
			if(player2 == null)
				return;
			player2.getTrading().declineTrade(false);
			player2.getPacketSender().sendMessage(&quot;Other player declined the trade.&quot;);
		}
		resetTrade();
	}

	public void sendText(Player player2) {
		if(player2 == null)
			return;
		player2.getPacketSender().sendString(3451, &quot;&quot; + Misc.formatPlayerName(player.getUsername()) + &quot;&quot;);
		player2.getPacketSender().sendString(3417, &quot;Trading with: &quot; + Misc.formatPlayerName(player.getUsername()) + &quot;&quot;);
		player.getPacketSender().sendString(3451, &quot;&quot; + Misc.formatPlayerName(player2.getUsername()) + &quot;&quot;);
		player.getPacketSender().sendString(3417, &quot;Trading with: &quot; + Misc.formatPlayerName(player2.getUsername()) + &quot;&quot;);
		player.getPacketSender().sendString(3431, &quot;&quot;);
		player.getPacketSender().sendString(3535, &quot;Are you sure you want to make this trade?&quot;);
		player.getPacketSender().sendInterfaceSet(3323, 3321);
		player.getPacketSender().sendItemContainer(player.getInventory(), 3322);
	}

	public void tradeItem(int itemId, int amount, int slot) {
		if(slot &lt; 0)
			return;
		if(!getCanOffer())
			return;
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player2 == null || player == null)
			return;
		if(player.getRights() == PlayerRights.ADMINISTRATOR) {
			player.getPacketSender().sendMessage(&quot;Administrators cannot trade items.&quot;);
			return;
		}
	/*	if(player.getNewPlayerDelay() &gt; 0 &amp;&amp; player.getRights().ordinal() == 0) {
			player.getPacketSender().sendMessage(&quot;You must wait another &quot;+player.getNewPlayerDelay() / 60+&quot; minutes before being able to trade items.&quot;);
			return;
		}*/
		if(player.getRights() != PlayerRights.DEVELOPER &amp;&amp; player2.getRights() != PlayerRights.DEVELOPER &amp;&amp; !(itemId == 1419 &amp;&amp; player.getRights().isStaff())) {
			if (!new Item(itemId).tradeable()) {
				player.getPacketSender().sendMessage(&quot;This item is currently untradeable and cannot be traded.&quot;);
				return;
			}
		}
		falseTradeConfirm();
		player.getPacketSender().sendClientRightClickRemoval();
		if(!inTrade() || !canOffer) {
			declineTrade(true);
			return;
		}
		if(!player.getInventory().contains(itemId))
			return;
		if(slot &gt;= player.getInventory().capacity() || player.getInventory().getItems()[slot].getId() != itemId || player.getInventory().getItems()[slot].getAmount() &lt;= 0)
			return;
		Item itemToTrade = player.getInventory().getItems()[slot];
		if(itemToTrade.getId() != itemId)
			return;
		if (player.getInventory().getAmount(itemId) &lt; amount) {
			amount = player.getInventory().getAmount(itemId);
			if (amount == 0 || player.getInventory().getAmount(itemId) &lt; amount) {
				return;
			}
		}
		if (!itemToTrade.getDefinition().isStackable()) {
			for (int a = 0; a &lt; amount &amp;&amp; a &lt; 28; a++) {
				if (player.getInventory().getAmount(itemId) &gt;= 1) {
					offeredItems.add(new Item(itemId, 1));
					player.getInventory().delete(itemId, 1);
				}
			}
		} else
			if (itemToTrade.getDefinition().isStackable()) {
				boolean itemInTrade = false;
				for (Item item : offeredItems) {
					if (item.getId() == itemId) {
						itemInTrade = true;
						item.setAmount(item.getAmount() + amount);
						player.getInventory().delete(itemId, amount);
						break;
					}
				}
				if (!itemInTrade) {
					offeredItems.add(new Item(itemId, amount));
					player.getInventory().delete(itemId, amount);
				}
			}
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player.getPacketSender().sendString(3431, &quot;&quot;);
		acceptedTrade = false;
		tradeConfirmed = false;
		tradeConfirmed2 = false;
		player2.getPacketSender().sendInterfaceItems(3416, offeredItems);
		player2.getPacketSender().sendString(3431, &quot;&quot;);
		player2.getTrading().acceptedTrade = false;
		player2.getTrading().tradeConfirmed = false;
		player2.getTrading().tradeConfirmed2 = false;
		sendText(player2);
	}

	public void removeTradedItem(int itemId, int amount) {
		if(!getCanOffer())
			return;
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player2 == null)
			return;
		if(!inTrade() || !canOffer) {
			declineTrade(false);
			return;
		}
		falseTradeConfirm();
		ItemDefinition def = ItemDefinition.forId(itemId);
		if (!def.isStackable()) {
			if (amount &gt; 28)
				amount = 28;
			for (int a = 0; a &lt; amount; a++) {
				for (Item item : offeredItems) {
					if (item.getId() == itemId) {
						if (!item.getDefinition().isStackable()) {
							offeredItems.remove(item);
							player.getInventory().add(itemId, 1);
						}
						break;
					}
				}
			}
		} else
			for (Item item : offeredItems) {
				if (item.getId() == itemId) {
					if (item.getDefinition().isStackable()) {
						if (item.getAmount() &gt; amount) {
							item.setAmount(item.getAmount() - amount);
							player.getInventory().add(itemId, amount);
						} else {
							amount = item.getAmount();
							offeredItems.remove(item);
							player.getInventory().add(itemId, amount);
						}
					}
					break;
				}
			}
		falseTradeConfirm();
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player2.getPacketSender().sendInterfaceItems(3416, offeredItems);
		sendText(player2);
		player.getPacketSender().sendString(3431, &quot;&quot;);
		player2.getPacketSender().sendString(3431, &quot;&quot;);
		player.getPacketSender().sendClientRightClickRemoval();
	}

	public void acceptTrade(int stage) {
		if(!player.getClickDelay().elapsed(1000))
			return;
		if(getTradeWith() &lt; 0) {
			declineTrade(false);
			return;
		}
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player == null || player2 == null) {
			declineTrade(false);
			return;
		}
		if(!twoTraders(player, player2)) {
			player.getPacketSender().sendMessage(&quot;An error has occured. Please try re-trading the player.&quot;);
			return;
		}
		if(stage == 2) {
			if(!inTrade() || !player2.getTrading().inTrade() || !player2.getTrading().tradeConfirmed) {
				declineTrade(true);
				return;
			}
			if(!tradeConfirmed)
				return;
			acceptedTrade = true;
			tradeConfirmed2 = true;
			player2.getPacketSender().sendString(3535, &quot;Other player has accepted.&quot;);
			player.getPacketSender().sendString(3535, &quot;Waiting for other player...&quot;);
			if (inTrade() &amp;&amp; player2.getTrading().tradeConfirmed2) {
				acceptedTrade = true;
				giveItems();
				player.getPacketSender().sendMessage(&quot;Trade accepted.&quot;);
				player2.getTrading().acceptedTrade = true;
				player2.getTrading().giveItems();
				player2.getPacketSender().sendMessage(&quot;Trade accepted.&quot;);
				resetTrade();
				player2.getTrading().resetTrade();
			}
		} else if(stage == 1) {
			player2.getTrading().goodTrade = true;
			player2.getPacketSender().sendString(3431, &quot;Other player has accepted.&quot;);
			goodTrade = true;
			player.getPacketSender().sendString(3431, &quot;Waiting for other player...&quot;);
			tradeConfirmed = true;
			if (inTrade() &amp;&amp; player2.getTrading().tradeConfirmed &amp;&amp; player2.getTrading().goodTrade &amp;&amp; goodTrade) {
				confirmScreen();
				player2.getTrading().confirmScreen();
			}
		}
		player.getClickDelay().reset();
	}

	public void confirmScreen() {
		Player player2 = World.getPlayers().get(getTradeWith());
		if (player2 == null)
			return;
		setCanOffer(false);
		player.getInventory().refreshItems();
		String SendTrade = &quot;Absolutely nothing!&quot;;
		String SendAmount;
		int Count = 0;
		for (Item item : offeredItems) {
			if (item.getAmount() &gt;= 1000 &amp;&amp; item.getAmount() &lt; 1000000) {
				SendAmount = &quot;@cya@&quot; + (item.getAmount() / 1000) + &quot;K @whi@(&quot; + Misc.format(item.getAmount()) + &quot;)&quot;;
			} else if (item.getAmount() &gt;= 1000000) {
				SendAmount = &quot;@gre@&quot; + (item.getAmount() / 1000000) + &quot; million @whi@(&quot; + Misc.format(item.getAmount()) + &quot;)&quot;;
			} else {
				SendAmount = &quot;&quot; + Misc.format(item.getAmount());
			}
			if (Count == 0) {
				SendTrade = item.getDefinition().getName().replaceAll(&quot;_&quot;, &quot; &quot;);
			} else
				SendTrade = SendTrade + &quot;\\n&quot; + item.getDefinition().getName().replaceAll(&quot;_&quot;, &quot; &quot;);
			if (item.getDefinition().isStackable())
				SendTrade = SendTrade + &quot; x &quot; + SendAmount;
			Count++;
		}

		player.getPacketSender().sendString(3557, SendTrade);
		SendTrade = &quot;Absolutely nothing!&quot;;
		SendAmount = &quot;&quot;;
		Count = 0;
		for (Item item : player2.getTrading().offeredItems) {
			if (item.getAmount() &gt;= 1000 &amp;&amp; item.getAmount() &lt; 1000000) {
				SendAmount = &quot;@cya@&quot; + (item.getAmount() / 1000) + &quot;K @whi@(&quot; + Misc.format(item.getAmount()) + &quot;)&quot;;
			} else if (item.getAmount() &gt;= 1000000) {
				SendAmount = &quot;@gre@&quot; + (item.getAmount() / 1000000) + &quot; million @whi@(&quot; + Misc.format(item.getAmount()) + &quot;)&quot;;
			} else {
				SendAmount = &quot;&quot; + Misc.format(item.getAmount());
			}
			if (Count == 0) {
				SendTrade = item.getDefinition().getName().replaceAll(&quot;_&quot;, &quot; &quot;);
			} else
				SendTrade = SendTrade + &quot;\\n&quot; + item.getDefinition().getName().replaceAll(&quot;_&quot;, &quot; &quot;);
			if (item.getDefinition().isStackable())
				SendTrade = SendTrade + &quot; x &quot; + SendAmount;
			Count++;
		}
		player.getPacketSender().sendString(3558, SendTrade);
		player.getPacketSender().sendInterfaceSet(3443, 3321);
		player.getPacketSender().sendItemContainer(player.getInventory(), 3322);
		/*
		 * Remove all tabs!
		 */
		//player.getPacketSender().sendInterfaceSet(3443, Inventory.INTERFACE_ID);
		//player.getPacketSender().sendItemContainer(player.getInventory(), Inventory.INTERFACE_ID);
	}

	public void giveItems() {
		Player player2 = World.getPlayers().get(getTradeWith());
		if (player2 == null)
			return;
		if(!inTrade() || !player2.getTrading().inTrade())
			return;
		try {
			for (Item item : player2.getTrading().offeredItems) {
				player.getInventory().add(item);
			}
			
			//logs
			for (Item item : player.getTrading().offeredItems) {
				PlayerLogs.log(player.getUsername(), &quot;Gave item in trade to &quot;+player2.getUsername()+&quot;. Id: &quot;+item.getId()+&quot;, amount: &quot;+item.getAmount());
			}
			for (Item item : player2.getTrading().offeredItems) {
				PlayerLogs.log(player.getUsername(), &quot;Receiving item from trade. Id: &quot;+item.getId()+&quot;, amount: &quot;+item.getAmount());
			}
		} catch (Exception ignored) {
		}
	}

	public void resetTrade() {
		inTradeWith = -1;
		offeredItems.clear();
		setCanOffer(true);
		setTrading(false);
		setTradeWith(-1);
		setTradeStatus(0);
		lastTradeSent = 0;
		acceptedTrade = false;
		tradeConfirmed = false;
		tradeConfirmed2 = false;
		tradeRequested = false;
		canOffer = true;
		goodTrade = false;
		player.getPacketSender().sendString(3535, &quot;Are you sure you want to make this trade?&quot;);
		player.getPacketSender().sendInterfaceRemoval();
		player.getPacketSender().sendInterfaceRemoval();
	}


	private boolean falseTradeConfirm() {
		Player player2 = World.getPlayers().get(getTradeWith());
		return tradeConfirmed = player2.getTrading().tradeConfirmed = false;
	}

	public CopyOnWriteArrayList&lt;Item&gt; offeredItems = new CopyOnWriteArrayList&lt;Item&gt;();
	private boolean inTrade = false;
	private boolean tradeRequested = false;
	private int tradeWith = -1;
	private int tradeStatus;
	public long lastTradeSent, lastAction;
	private boolean canOffer = true;
	public boolean tradeConfirmed = false;
	public boolean tradeConfirmed2 = false;
	public boolean acceptedTrade = false;
	public boolean goodTrade = false;

	public void setTrading(boolean trading) {
		this.inTrade = trading;
	}

	public boolean inTrade() {
		return this.inTrade;
	}

	public void setTradeRequested(boolean tradeRequested) {
		this.tradeRequested = tradeRequested;
	}

	public boolean tradeRequested() {
		return this.tradeRequested;
	}

	public void setTradeWith(int tradeWith) {
		this.tradeWith = tradeWith;
	}

	public int getTradeWith() {
		return this.tradeWith;
	}

	public void setTradeStatus(int status) {
		this.tradeStatus = status;
	}

	public int getTradeStatus() {
		return this.tradeStatus;
	}

	public void setCanOffer(boolean canOffer) {
		this.canOffer = canOffer;
	}

	public boolean getCanOffer() {
		return canOffer &amp;&amp; player.getInterfaceId() == 3323 &amp;&amp; !player.isBanking() &amp;&amp; !player.getPriceChecker().isOpen();
	}

	public int inTradeWith = -1;

	/**
	 * Checks if two players are the only ones in a trade.
	 * @param p1	Player1 to check if he&#39;s 1/2 player in trade.
	 * @param p2	Player2 to check if he&#39;s 2/2 player in trade.
	 * @return		true if only two people are in the trade.
	 */
	public static boolean twoTraders(Player p1, Player p2) {
		int count = 0;
		for(Player player : World.getPlayers()) {
			if(player == null)
				continue;
			if(player.getTrading().inTradeWith == p1.getIndex() || player.getTrading().inTradeWith == p2.getIndex()) {
				count++;
			}
		}
		return count == 2;
	}

	/**
	 * The trade interface id.
	 */
	public static final int INTERFACE_ID = 3322;

	/**
	 * The trade interface id for removing items.
	 */
	public static final int INTERFACE_REMOVAL_ID = 3415;

}

[/code]</description>
    
    <lastBuildDate>Tue, 17 Nov 2015 21:46:41 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Simplexus Simplexus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/simplexus">@Simplexus</a> wrote:</p>
          <blockquote>
              <p>There is no need to ban transferring items based on IP. That is the point.</p>
<p>Like I’ve told you;</p>
<p>[ul][li]Users can change IPs[/li]<br>
[li]Users can switch computers[/li]<br>
[li]Users can change mac addresses[/li][/ul]</p>
<p>Using a bandaid solution and hoping your players aren’t intelligent is just wasting time.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/15</link>
        <pubDate>Tue, 17 Nov 2015 21:46:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-15</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Simplexus, post:13, topic:553855”][quote author=sk8rdude461 link=topic=672776.msg4499017#msg4499017 date=1447700825]<br>
Also: Memory is cheap. CPU isn’t<br>
[/quote]</p>
<p>GL in gaming development.</p>
<p>OT, the code he has is extremely problematic. Giving the guy a working shitfix for his code might be quick rep for you, but giving him the best fit solution per the application would be educating. All you’ve given him is a cheap fix and 0 learning was accomplished. I’m out, gl sk8rdude461[/quote]<br>
“Gaming development”. Okay.<br>
Literally everyone knows memory is cheaper than CPU…</p>
<p>Also, your fix wasn’t even a full fix.<br>
Explain how you’re going to do IP bans with your system?<br>
You can’t.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/14</link>
        <pubDate>Tue, 17 Nov 2015 12:44:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-14</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Simplexus Simplexus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/simplexus">@Simplexus</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="11" data-topic="553855">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sk8rdude461/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sk8rdude461:</div>
<blockquote>
<p>Also: Memory is cheap. CPU isn’t</p>
</blockquote>
</aside>
<p>GL in gaming development.</p>
<p>OT, the code he has is extremely problematic. Giving the guy a working shitfix for his code might be quick rep for you, but giving him the best fit solution per the application would be educating. All you’ve given him is a cheap fix and 0 learning was accomplished. I’m out, gl sk8rdude461</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/13</link>
        <pubDate>Tue, 17 Nov 2015 09:51:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-13</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>That worked. Thank you!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/12</link>
        <pubDate>Mon, 16 Nov 2015 19:31:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-12</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>You don’t need to make a method called “getItemBanned”</p>
<p>Based off what you supplied, this should work:</p>
<p><code>if(PlayerPunishment.ItemBanned(player2.getUsername()) || PlayerPunishment.IPItemBanned(player2.getHostAddress())) {
	player.getPacketSender().sendMessage("The other player is ItemBanned and therefore cannot trade.");
	return;
}</code></p>
<p>You have the methods IPItemBanned and ItemBanned in the PlayerPunishment class. They’re both declared as static booleans. Both only require a String (one an IP, one a name).<br>
You have both player objects defined in the trade method. The player object has a method to get the player’s username as a string, and their IP address as a string.</p>
<p>It’s honestly the exact same thing as checking if the player itself can trade… Except you replace the objects in the if statements to the second player, and change the wording in the statement.</p>
<p>[quote=“Simplexus, post:10, topic:553855”]My opinion is to scrap your item banning solution. Ruse is already very memory intensive and adding onto the stack is only exacerbating it.</p>
<p>Your problem appears to be at this line:</p>
<pre><code class="lang-auto"></code></pre>
<p>Your code should be</p>
<pre><code class="lang-auto"></code></pre>
<p>Uh, what he’s added won’t take too much memory.</p>
<p>Also: Memory is cheap. CPU isn’t</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/11</link>
        <pubDate>Mon, 16 Nov 2015 19:07:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-11</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Simplexus Simplexus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/simplexus">@Simplexus</a> wrote:</p>
          <blockquote>
              <p>My opinion is to scrap your item banning solution. Ruse is already very memory intensive and adding onto the stack is only exacerbating it.</p>
<p>Your problem appears to be at this line:</p>
<pre><code class="lang-auto"></code></pre>
<p>Your code should be</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/10</link>
        <pubDate>Mon, 16 Nov 2015 19:06:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-10</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>Thanks for all the help but that’s not what i mean. I’ll try to explain it as best as i can.<br>
So what i’ve done is created a method for itembanning, which works. PlayerPunishtment.java down below</p>
<pre><code class="lang-auto">package com.ruseps.world.content;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import com.ruseps.GameServer;
import com.ruseps.GameSettings;
import com.ruseps.model.Position;
import com.ruseps.util.Misc;
import com.ruseps.world.entity.impl.player.Player;


public class PlayerPunishment {

	private static final String BAN_DIRECTORY = "./data/saves/";
	private static final String MUTE_DIRECTORY = "./data/saves/";
	private static final String ITEMBAN_DIRECTORY = "./data/saves/";
	private static final String TRADEBAN_DIRECTORY = "./data/saves/";

	public static ArrayList&lt;String&gt; IPSBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsItemBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSItemBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsTradeBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSTradeBanned = new ArrayList&lt;String&gt;();
 

	public static void init() {
		initializeList(BAN_DIRECTORY, "IPBans", IPSBanned);
		initializeList(BAN_DIRECTORY, "Bans", AccountsBanned);
		initializeList(MUTE_DIRECTORY, "IPMutes", IPSMuted);
		initializeList(MUTE_DIRECTORY, "Mutes", AccountsMuted);
		initializeList(ITEMBAN_DIRECTORY, "ItemBans", AccountsItemBanned);
		initializeList(ITEMBAN_DIRECTORY, "IPItemBans", IPSItemBanned);
		initializeList(TRADEBAN_DIRECTORY, "TradeBans", AccountsTradeBanned);
		initializeList(TRADEBAN_DIRECTORY, "IPTradeBans", IPSTradeBanned);
	}

	public static void initializeList(String directory, String file, ArrayList&lt;String&gt; list) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(""+directory+""+file+".txt"));
			String data = null;
			while ((data = in.readLine()) != null) {
				list.add(data);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void addBannedIP(String IP) {
		if(!IPSBanned.contains(IP)) {
			addToFile(""+BAN_DIRECTORY+"IPBans.txt", IP);
			IPSBanned.add(IP);
		}
	}
	
	public static void addTradeBannedIP(String IP) {
		if(!IPSTradeBanned.contains(IP)) {
			addToFile(""+TRADEBAN_DIRECTORY+"IPTradeBans.txt", IP);
			IPSTradeBanned.add(IP);
		}
	}

	public static void addMutedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(""+MUTE_DIRECTORY+"IPMutes.txt", IP);
			IPSMuted.add(IP);
		}
	}
	
	public static void addItemBannedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(""+ITEMBAN_DIRECTORY+"IPItemBans.txt", IP);
			IPSItemBanned.add(IP);
		}
	}
	
	public static void TradeBan(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsTradeBanned.contains(p)) {
			addToFile(""+TRADEBAN_DIRECTORY+"TradeBans.txt", p);
			AccountsBanned.add(p);
		}
	}

	public static void ban(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsBanned.contains(p)) {
			addToFile(""+BAN_DIRECTORY+"Bans.txt", p);
			AccountsBanned.add(p);
		}
	}

	public static void mute(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(""+MUTE_DIRECTORY+"Mutes.txt", p);
			AccountsMuted.add(p);
		}
	}
	public static void ItemBan(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(""+ITEMBAN_DIRECTORY+"ItemBans.txt", p);
			AccountsItemBanned.add(p);
		}
	}

	public static boolean banned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsBanned.contains(player);
	}

	public static boolean muted(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsMuted.contains(player);
	}
	
	public static boolean ItemBanned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsItemBanned.contains(player);
	}
	
	public static boolean TradeBanned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsTradeBanned.contains(player);
	}

	public static boolean IPBanned(String IP) {
		return IPSBanned.contains(IP);
	}

	public static boolean IPMuted(String IP) {
		return IPSMuted.contains(IP);
	}
	
	public static boolean IPItemBanned(String IP) {
		return IPSItemBanned.contains(IP);
	}
	
	public static boolean IPTradeBanned(String IP) {
		return IPSTradeBanned.contains(IP);
	}

	public static void unban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+BAN_DIRECTORY+"Bans.txt", player);
		AccountsBanned.remove(player);
	}
	
	public static void untradeban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+TRADEBAN_DIRECTORY+"TradeBans.txt", player);
		AccountsTradeBanned.remove(player);
	}

	public static void unmute(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+MUTE_DIRECTORY+"Mutes.txt", player);
		AccountsMuted.remove(player);
	}
	
	public static void unitemban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+ITEMBAN_DIRECTORY+"ItemBans", player);
		AccountsItemBanned.remove(player);
	}

	public static void reloadIPBans() {
		IPSBanned.clear();
		initializeList(BAN_DIRECTORY, "IPBans", IPSBanned);
	}

	public static void reloadIPMutes() {
		IPSMuted.clear();
		initializeList(MUTE_DIRECTORY, "IPMutes", IPSMuted);
	}

	public static void deleteFromFile(String file, String name) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedReader r = new BufferedReader(new FileReader(file));
				ArrayList&lt;String&gt; contents = new ArrayList&lt;String&gt;();
				while(true) {
					String line = r.readLine();
					if(line == null) {
						break;
					} else {
						line = line.trim();
					}
					if(!line.equalsIgnoreCase(name)) {
						contents.add(line);
					}
				}
				r.close();
				BufferedWriter w = new BufferedWriter(new FileWriter(file));
				for(String line : contents) {
					w.write(line, 0, line.length());
					w.newLine();
				}
				w.flush();
				w.close();
			} catch (Exception e) {}
		});
	}

	public static void addToFile(String file, String data) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedWriter out = new BufferedWriter(new FileWriter(file, true));
				try {
					out.newLine();
					out.write(data);
				} finally {
					out.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
	}
	

	private static Player[] ITEMBANNED_PLAYERS = new Player[10];
	
	public static boolean isItemBanned(Player plr) {
		return getItemBanned(plr) &gt;=0;
	}
	
	public static int getItemBanned(Player plr) {
		for(int i = 0; 1 &lt; ITEMBANNED_PLAYERS.length; i++) {
			Player p = ITEMBANNED_PLAYERS[i];
			if(p == null)
				continue;
			if(p == plr) {
				return i;
			}
		}
		return -1;
	}


	public static class Jail {

		private static Player[] JAILED_PLAYERS = new Player[10];

		public static boolean jailPlayer(Player p) {
			int emptyCell = findSlot();
			if(emptyCell == -1) {
				return false;
			}
			Position pos = null;
			switch(emptyCell) {
			case 0:
				pos = new Position(3095, 3930);
				break;
			case 1:
				pos = new Position(3095, 3937);
				break;
			case 2:
				pos = new Position(3100, 3930);
				break;
			case 3:
				pos = new Position(3100, 3937);
				break;
			case 4:
				pos = new Position(3105, 3930);
				break;
			case 5:
				pos = new Position(3105, 3937);
				break;
			case 6:
				pos = new Position(3110, 3930);
				break;
			case 7:
				pos = new Position(3110, 3937);
				break;
			case 8:
				pos = new Position(3115, 3930);
				break;
			case 9:
				pos = new Position(3115, 3937);
				break;
			}
			p.moveTo(pos);
			JAILED_PLAYERS[emptyCell] = p;
			return true;
		}

		public static void unjail(Player plr) {
			int index = getIndex(plr);
			if(index &gt;= 0) {
				JAILED_PLAYERS[index] = null;
			}
			plr.moveTo(GameSettings.DEFAULT_POSITION.copy());
		}

		public static boolean isJailed(Player plr) {
			return getIndex(plr) &gt;= 0;
		}

		public static int getIndex(Player plr) {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				Player p = JAILED_PLAYERS[i];
				if(p == null)
					continue;
				if(p == plr) {
					return i;
				}
			}
			return -1;
		}

		public static int findSlot() {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				if(JAILED_PLAYERS[i] == null) {
					return i;
				}
			}
			return -1;
		}

	}
	
}
</code></pre>
<p>In trading.java i added the following code:</p>
<pre><code class="lang-auto">if(PlayerPunishment.ItemBanned(player.getUsername()) || (PlayerPunishment.IPItemBanned(player.getHostAddress()))) {
			player.getPacketSender().sendMessage("You are currently Item Banned and therefore not allowed to trade.");
			return;
		}</code></pre>
<p>That works. But what i want to do is make it say; That player is Item Banned and therefore not allowed to trade.</p>
<p>Here is the code that says that but for iron man players:</p>
<pre><code class="lang-auto">if(player2.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage("That player is a Hardcore-ironman-player and can therefore not stake.");
			return;
		}</code></pre>
<p>So, what i want is something like this:</p>
<pre><code class="lang-auto">if(player2.getItemBanned() {
 player.getPacketSender().sendMessage("That player is ItemBanned and therefore not allowed to trade");
 return;
}</code></pre>
<p>BUT, for that to work, i need to make a method called getItemBanned(). So i did this:</p>
<pre><code class="lang-auto">
	private static Player[] ITEMBANNED_PLAYERS = new Player[10];
	
	public static boolean isItemBanned(Player plr) {
		return getItemBanned(plr) &gt;=0;
	}
	
	public static int getItemBanned(Player plr) {
		for(int i = 0; 1 &lt; ITEMBANNED_PLAYERS.length; i++) {
			Player p = ITEMBANNED_PLAYERS[i];
			if(p == null)
				continue;
			if(p == plr) {
				return i;
			}
		}
		return -1;
	}</code></pre>
<p>When adding this in the Trading.java class i get this error:</p>
<pre><code class="lang-auto">src\com\ruseps\world\content\Trading.java:59: error: cannot find symbol
                if(player2.getItemBanned()) {
                          ^
  symbol:   method getItemBanned()
  location: variable player2 of type Player
1 error
</code></pre>
<p>So something is wrong with the getItemBanned() method or the way that i try to reach it.<br>
(Yes, i did import PlayerPunishment in the Trading class).<br>
So what do i need to do in order for it to work?</p>
<p>NOTE: I know that there’s also a trade ban option in there, but that is for trading only. The ItemBan is for dropping, trading &amp; staking. I just used Trading in this example because if i get that to work i will be able to get the others to work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/9</link>
        <pubDate>Mon, 16 Nov 2015 18:58:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-9</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Simplexus, post:7, topic:553855”][quote author=sk8rdude461 link=topic=672776.msg4499009#msg4499009 date=1447699517]<br>
Simplex doing it that way will only ban a single character. You will not be able to do IP bans that way, as the IP isn’t loaded from the character file.</p>
<p>That’s why he was saving it to a text file list like the other bans. As the IP addresses can be checked from a  list…<br>
[/quote]</p>
<p>Explain to me the benefit of IP-transfer banning someone for item scamming. As the OP indicated, he isn’t having a problem with duping (as he is using a Ruse source) so an IP based ban would be a waste of resources and time. My solution both saves memory and processing power. In any case, a user could just change their IP/Mac and completely evade that type of ban anyway.[/quote]</p>
<p>Right, I know all this.<br>
However, it’s an “added layer” of security because not all players know how to change that.<br>
Not only that, if you’d have taken 5 minutes to read the OP, the code he provided shows he wants both a character-name transfer ban, and a IP-based transfer ban.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/8</link>
        <pubDate>Mon, 16 Nov 2015 18:53:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-8</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Simplexus Simplexus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/simplexus">@Simplexus</a> wrote:</p>
          <blockquote>
              <p>[quote=“sk8rdude461, post:6, topic:553855”]Simplex doing it that way will only ban a single character. You will not be able to do IP bans that way, as the IP isn’t loaded from the character file.</p>
<p>That’s why he was saving it to a text file list like the other bans. As the IP addresses can be checked from a  list…[/quote]</p>
<p>Explain to me the benefit of IP-transfer banning someone for item scamming. As the OP indicated, he isn’t having a problem with duping (as he is using a Ruse source) so an IP based ban would be a waste of resources and time. My solution both saves memory and processing power. In any case, a user could just change their IP/Mac and completely evade that type of ban anyway.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/7</link>
        <pubDate>Mon, 16 Nov 2015 18:50:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-7</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>Simplex doing it that way will only ban a single character. You will not be able to do IP bans that way, as the IP isn’t loaded from the character file.</p>
<p>That’s why he was saving it to a text file list like the other bans. As the IP addresses can be checked from a  list…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/6</link>
        <pubDate>Mon, 16 Nov 2015 18:45:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-6</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Simplexus Simplexus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/simplexus">@Simplexus</a> wrote:</p>
          <blockquote>
              <p>Open com.ruse.world.entity.impl.player.Player</p>
<p>Insert anywhere:</p>
<p><code>	private boolean transferBan = false;
	public boolean isTransferBanned() {
		return transferBan;
	}
	public void setTransferBan(boolean val) {
		transferBan = val;
	}</code></p>
<p>Open com.ruse.net.packet.impl.CommandPacketListener</p>
<p>Insert inside static void moderatorCommands()</p>
<p><code>		if(command[0].equalsIgnoreCase("tradeban")) {
			String name = command[1];
			Player plr = World.getPlayerByName(name);
			if(plr != null) {
				plr.getPacketSender().sendMessage(plr.getUsername()+" has been transfer banned.");
				plr.setTransferBan(true);
				plr.getPacketSender().sendMessage("You have been transfer banned by "+player.getUsername()+".");
			} else {
				player.getPacketSender().sendMessage("Could not find " + name);
			}
		}</code></p>
<p>Now open com.ruse.world.entity.impl.player.PlayerSaving<br>
Ctrl+f object.addProperty(“sounds”, new Boolean(player.soundsActive()));</p>
<p>Undreneath that insert the following code</p>
<pre><code class="lang-auto"></code></pre>
<p>Now open com.ruse.world.entity.impl.player.PlayerLoading<br>
Find the following code:</p>
<p><code>			if (reader.has("sounds")) {
				player.setSoundsActive(reader.get("sounds").getAsBoolean());
			}</code></p>
<p>Underneath it, insert:</p>
<p><code>
			if (reader.has("xferban")) {
				player.setSoundsActive(reader.get("xferban").getAsBoolean());
			}</code></p>
<p>Now you have a working command that will save and load from the player file. Next you’ll need to input this measure in all of the required methods; trading, dropping, duelling, pking, etc.</p>
<p>This part I will leave up to you as it is very simple and will serve as a good learning experience. I will give you one example to get your moving.</p>
<p>Inside of com.ruse.world.content.Trading<br>
Ctrl+f “Ironman-players are not allowed to trade.”</p>
<p>Underneath, simply insert the following:</p>
<p>[code]		if(player.isTransferBanned()) {<br>
player.getPacketSender().sendMessage(“You are transfer banned and cannot trade.”);<br>
return;<br>
}</p>
<pre><code>	if(player2.isTransferBanned()) {
		player.getPacketSender().sendMessage("This player is transfer banned and cannot trade.");
		return;
	}[/code]
</code></pre>
<p>The return; statement indicates not to execute anything further in that method.<br>
Good luck. I haven’t tested the code so there could possibly be an error.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/5</link>
        <pubDate>Mon, 16 Nov 2015 18:41:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-5</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>[quote=“Soulxs, post:3, topic:553855”]What did i miss? I don’t get it…</p>
<p>As for the method, i’m getting an error because i didn’t declare the variable. I don’t know how to declare the variable ^^ (Yes, i know how to declare variables, just not this one haha)</p>
<aside class="quote">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/roar337/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Roar337:</div>
<blockquote>
<p>Erm why are you using it as an int?</p>
</blockquote>
</aside>
<p>How would you do it?</p>
<p>Thanks</p>
<p>EDIT: I don’t think i made myself clear. What i want is that another player can’t send a trade invite to a player who is ItemBanned. How do i do that?[/quote]<br>
What error are you getting for what variable?<br>
When you post asking for help, it helps to provide all the information possible about your problem/etc.<br>
From the OP (original post) I had thought that the ItemBan just wasn’t working and you were stumped as to why</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/4</link>
        <pubDate>Mon, 16 Nov 2015 18:28:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-4</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>What did i miss? I don’t get it…</p>
<p>As for the method, i’m getting an error because i didn’t declare the variable. I don’t know how to declare the variable ^^ (Yes, i know how to declare variables, just not this one haha)</p>
<blockquote>Erm why are you using it as an int?</blockquote>
<p>How would you do it?</p>
<p>Thanks</p>
<p>EDIT: I don’t think i made myself clear. What i want is that another player can’t send a trade invite to a player who is ItemBanned. How do i do that?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/3</link>
        <pubDate>Mon, 16 Nov 2015 16:25:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-3</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Roar337 Roar337]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roar337">@Roar337</a> wrote:</p>
          <blockquote>
              <p>Erm why are you using it as a int?</p>
<p>Also i did notice the following you may have missed</p>
<pre><code class="lang-auto">public static void addItemBannedIP(String IP) {
    if(!IPSMuted.contains(IP)) { //&lt;---- ?
        addToFile(""+ITEMBAN_DIRECTORY+"IPItemBans.txt", IP);
        IPSItemBanned.add(IP);
    }
}
		
public static void ItemBan(String p) {
    p = Misc.formatPlayerName(p.toLowerCase());
    if(!AccountsMuted.contains(p)) { //&lt;---- ?
        addToFile(""+ITEMBAN_DIRECTORY+"ItemBans.txt", p);
        AccountsItemBanned.add(p);
    }
}</code></pre>
<p>Other then this provided methods seem to be correct just…</p>
<pre><code class="lang-auto">if(getItemBanned(player2)) {
    player.getPacketSender().sendMessage("You are currently Item Banned and therefore not allowed to trade.");
    return;
}</code></pre>
<p>Unless i have misunderstood your intent or simply missed something</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/2</link>
        <pubDate>Mon, 16 Nov 2015 03:46:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-2</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
      <item>
        <title>ItemBan // Need help with a get Method</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>Hey,</p>
<p>So i’ve tryed adding an ItemBan command (haven’t got around to the actual command yet though) to punish scammers instead of completely banning them.<br>
I want it to restrict them from:</p>
<ul>
<li>Trading</li>
<li>Staking</li>
<li>Dropping/Picking up drops</li>
</ul>
<p>What i’ve done and is working is this:<br>
Code in Trading.java</p>
<pre><code class="lang-auto">		if(PlayerPunishment.ItemBanned(player.getUsername()) || (PlayerPunishment.IPItemBanned(player.getHostAddress()))) {
			player.getPacketSender().sendMessage("You are currently Item Banned and therefore not allowed to trade.");
			return;
		}</code></pre>
<p>Same thing in Duelling.java but with a different message.</p>
<p>This is the code in PlayerPunishment.java (line 197)</p>
<pre><code class="lang-auto">package com.ruseps.world.content;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;

import com.ruseps.GameServer;
import com.ruseps.GameSettings;
import com.ruseps.model.Position;
import com.ruseps.util.Misc;
import com.ruseps.world.entity.impl.player.Player;


public class PlayerPunishment {

	private static final String BAN_DIRECTORY = "./data/saves/";
	private static final String MUTE_DIRECTORY = "./data/saves/";
	private static final String ITEMBAN_DIRECTORY = "./data/saves";

	public static ArrayList&lt;String&gt; IPSBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsMuted = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; AccountsItemBanned = new ArrayList&lt;String&gt;();
	public static ArrayList&lt;String&gt; IPSItemBanned = new ArrayList&lt;String&gt;();


	public static void init() {
		initializeList(BAN_DIRECTORY, "IPBans", IPSBanned);
		initializeList(BAN_DIRECTORY, "Bans", AccountsBanned);
		initializeList(MUTE_DIRECTORY, "IPMutes", IPSMuted);
		initializeList(MUTE_DIRECTORY, "Mutes", AccountsMuted);
		initializeList(ITEMBAN_DIRECTORY, "ItemBans", AccountsItemBanned);
		initializeList(ITEMBAN_DIRECTORY, "IPItemBans", IPSItemBanned);
	}

	public static void initializeList(String directory, String file, ArrayList&lt;String&gt; list) {
		try {
			BufferedReader in = new BufferedReader(new FileReader(""+directory+""+file+".txt"));
			String data = null;
			while ((data = in.readLine()) != null) {
				list.add(data);
			}
			in.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void addBannedIP(String IP) {
		if(!IPSBanned.contains(IP)) {
			addToFile(""+BAN_DIRECTORY+"IPBans.txt", IP);
			IPSBanned.add(IP);
		}
	}

	public static void addMutedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(""+MUTE_DIRECTORY+"IPMutes.txt", IP);
			IPSMuted.add(IP);
		}
	}
	
	public static void addItemBannedIP(String IP) {
		if(!IPSMuted.contains(IP)) {
			addToFile(""+ITEMBAN_DIRECTORY+"IPItemBans.txt", IP);
			IPSItemBanned.add(IP);
		}
	}

	public static void ban(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsBanned.contains(p)) {
			addToFile(""+BAN_DIRECTORY+"Bans.txt", p);
			AccountsBanned.add(p);
		}
	}

	public static void mute(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(""+MUTE_DIRECTORY+"Mutes.txt", p);
			AccountsMuted.add(p);
		}
	}
	public static void ItemBan(String p) {
		p = Misc.formatPlayerName(p.toLowerCase());
		if(!AccountsMuted.contains(p)) {
			addToFile(""+ITEMBAN_DIRECTORY+"ItemBans.txt", p);
			AccountsItemBanned.add(p);
		}
	}

	public static boolean banned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsBanned.contains(player);
	}

	public static boolean muted(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsMuted.contains(player);
	}
	
	public static boolean ItemBanned(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		return AccountsItemBanned.contains(player);
	}

	public static boolean IPBanned(String IP) {
		return IPSBanned.contains(IP);
	}

	public static boolean IPMuted(String IP) {
		return IPSMuted.contains(IP);
	}
	
	public static boolean IPItemBanned(String IP) {
		return IPSItemBanned.contains(IP);
	}

	public static void unban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+BAN_DIRECTORY+"Bans.txt", player);
		AccountsBanned.remove(player);
	}

	public static void unmute(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+MUTE_DIRECTORY+"Mutes.txt", player);
		AccountsMuted.remove(player);
	}
	
	public static void unitemban(String player) {
		player = Misc.formatPlayerName(player.toLowerCase());
		deleteFromFile(""+ITEMBAN_DIRECTORY+"ItemBans", player);
		AccountsItemBanned.remove(player);
	}

	public static void reloadIPBans() {
		IPSBanned.clear();
		initializeList(BAN_DIRECTORY, "IPBans", IPSBanned);
	}

	public static void reloadIPMutes() {
		IPSMuted.clear();
		initializeList(MUTE_DIRECTORY, "IPMutes", IPSMuted);
	}

	public static void deleteFromFile(String file, String name) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedReader r = new BufferedReader(new FileReader(file));
				ArrayList&lt;String&gt; contents = new ArrayList&lt;String&gt;();
				while(true) {
					String line = r.readLine();
					if(line == null) {
						break;
					} else {
						line = line.trim();
					}
					if(!line.equalsIgnoreCase(name)) {
						contents.add(line);
					}
				}
				r.close();
				BufferedWriter w = new BufferedWriter(new FileWriter(file));
				for(String line : contents) {
					w.write(line, 0, line.length());
					w.newLine();
				}
				w.flush();
				w.close();
			} catch (Exception e) {}
		});
	}

	public static void addToFile(String file, String data) {
		GameServer.getLoader().getEngine().submit(() -&gt; {
			try {
				BufferedWriter out = new BufferedWriter(new FileWriter(file, true));
				try {
					out.newLine();
					out.write(data);
				} finally {
					out.close();
				}
			} catch (IOException e) {
				e.printStackTrace();
			}
		});
	}
	
 /*
	private static Player[] ITEMBANNED_PLAYERS = new Player[10] // ------------------------------- This is the part i'm having trouble with
	
	public static boolean isItemBanned(Player plr) {
		return getItemBanned(plr) &gt;=0;
	}
	
	public static int getItemBanned(Player plr) {
		for(int i = 0; 1 &lt; ITEMBANNED_PLAYERS.length; i++) {
			Player p = ITEMBANNED_PLAYERS[i];
			if(p == null)
				continue;
			if(p == plr) {
				return i;
			}
		}
		return -1;
	}
 */	

	public static class Jail {

		private static Player[] JAILED_PLAYERS = new Player[10];

		public static boolean jailPlayer(Player p) {
			int emptyCell = findSlot();
			if(emptyCell == -1) {
				return false;
			}
			Position pos = null;
			switch(emptyCell) {
			case 0:
				pos = new Position(3095, 3930);
				break;
			case 1:
				pos = new Position(3095, 3937);
				break;
			case 2:
				pos = new Position(3100, 3930);
				break;
			case 3:
				pos = new Position(3100, 3937);
				break;
			case 4:
				pos = new Position(3105, 3930);
				break;
			case 5:
				pos = new Position(3105, 3937);
				break;
			case 6:
				pos = new Position(3110, 3930);
				break;
			case 7:
				pos = new Position(3110, 3937);
				break;
			case 8:
				pos = new Position(3115, 3930);
				break;
			case 9:
				pos = new Position(3115, 3937);
				break;
			}
			p.moveTo(pos);
			JAILED_PLAYERS[emptyCell] = p;
			return true;
		}

		public static void unjail(Player plr) {
			int index = getIndex(plr);
			if(index &gt;= 0) {
				JAILED_PLAYERS[index] = null;
			}
			plr.moveTo(GameSettings.DEFAULT_POSITION.copy());
		}

		public static boolean isJailed(Player plr) {
			return getIndex(plr) &gt;= 0;
		}

		public static int getIndex(Player plr) {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				Player p = JAILED_PLAYERS[i];
				if(p == null)
					continue;
				if(p == plr) {
					return i;
				}
			}
			return -1;
		}

		public static int findSlot() {
			for(int i = 0; i &lt; JAILED_PLAYERS.length; i++) {
				if(JAILED_PLAYERS[i] == null) {
					return i;
				}
			}
			return -1;
		}

	}
	
}
</code></pre>
<p>What i’ve done is copy it from the Jail method and try to edit it, but obviously i need to declare ITEMBANNED, i don’t know how though.<br>
I need the get Method to restrict players from trading/staking a person who is ItemBanned. This is how it’s done for Ironmans:</p>
<pre><code class="lang-auto">if(player2.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage("That player is a Hardcore-ironman-player and can therefore not stake.");
			return;
		}</code></pre>
<p>So i need to change player2.getGameMode to getItemBanned but i’m having trouble setting up that method. I was wondering if anyone knew how i should do that?</p>
<p>Thanks<br>
IF IT’S NESSECARY THE ENTIRE CODE IN TRADING.JAVA IS DOWN BELOW, IF IT’S NOT NEEDED IGNORE THE CODE BELOW -------------------------</p>
<pre><code class="lang-auto">package com.ruseps.world.content;

import java.util.concurrent.CopyOnWriteArrayList;

import com.ruseps.model.GameMode;
import com.ruseps.model.Item;
import com.ruseps.model.Locations;
import com.ruseps.model.Locations.Location;
import com.ruseps.model.PlayerRights;
import com.ruseps.model.definitions.ItemDefinition;
import com.ruseps.util.Misc;
import com.ruseps.world.World;
import com.ruseps.world.entity.impl.player.Player;
import com.ruseps.world.content.PlayerPunishment;

/**
 * @author: @Gabbe
 * Warning:
 * This crap is so messy and ugly. Will redo it once I get some time over.
 * Should be dupe-free.
 */

public class Trading {

	private Player player;
	public Trading(Player p) {
		this.player = p;
	}

	public void requestTrade(Player player2) {
		if(player == null || player2 == null || player.getConstitution() &lt;= 0 || player2.getConstitution() &lt;= 0 || player.isTeleporting() || player2.isTeleporting())
			return;
		
		if(player.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage("Ironman-players are not allowed to trade.");
			return;
		}
		if(PlayerPunishment.ItemBanned(player.getUsername()) || (PlayerPunishment.IPItemBanned(player.getHostAddress()))) {
			player.getPacketSender().sendMessage("You are currently Item Banned and therefore not allowed to trade.");
			return;
		}
		if(player.getGameMode() == GameMode.HARDCORE_IRONMAN) {
			player.getPacketSender().sendMessage("Hardcore-ironman-players are not allowed to trade.");
			return;
		}
		if(player2.getGameMode() == GameMode.IRONMAN) {
			player.getPacketSender().sendMessage("That player is a Hardcore-ironman-player and can therefore not stake.");
			return;
		}
		if(player2.getGameMode() == GameMode.HARDCORE_IRONMAN) {
			player.getPacketSender().sendMessage("That player is an Ironman player and can therefore not stake.");
			return;
		}
		
		
		/*if(Misc.getMinutesPlayed(player) &lt; 15) {
			player.getPacketSender().sendMessage("You must have played for at least 15 minutes in order to trade someone.");
			return;
		}*/
		if(player.getBankPinAttributes().hasBankPin() &amp;&amp; !player.getBankPinAttributes().hasEnteredBankPin()) {
			BankPin.init(player, false);
			return;
		}
		/*if(player.getHostAdress().equals(player2.getHostAdress()) &amp;&amp; player.getRights() != PlayerRights.OWNER &amp;&amp; player.getRights() != PlayerRights.DEVELOPER) {
			player.getPacketSender().sendMessage("Same IP-adress found. You cannot trade yourself from the same IP.");
			return;
		}*/
		if(System.currentTimeMillis() - lastTradeSent &lt; 5000 &amp;&amp; !inTrade()) {
			player.getPacketSender().sendMessage("You're sending trade requests too frequently. Please slow down.");
			return;
		}
		if(player.getLocation() == Location.DUEL_ARENA &amp;&amp; player.getDueling().duelingStatus == 5) {
			player.getPacketSender().sendMessage("You are far too busy to trade at the moment!");
			return;
		}
		if(inTrade()) {
			declineTrade(true);
			return;
		}
		if(player.getLocation() == Location.GODWARS_DUNGEON &amp;&amp; player.getMinigameAttributes().getGodwarsDungeonAttributes().hasEnteredRoom() &amp;&amp; !player2.getMinigameAttributes().getGodwarsDungeonAttributes().hasEnteredRoom()) {
			player.getPacketSender().sendMessage("You cannot reach that.");
			return;
		}
		if(player.isShopping() || player.isBanking()) {
			player.getPacketSender().sendInterfaceRemoval();
			return;
		}
		if(player.busy()) {
			return;
		}
		if(player2.busy() || player2.getInterfaceId() &gt; 0 || player2.getTrading().inTrade() || player2.isBanking() || player2.isShopping()/* || player2.getDueling().inDuelScreen || FightPit.inFightPits(player2)*/) {
			player.getPacketSender().sendMessage("The other player is currently busy.");
			return;
		}
		if(player.getInterfaceId() &gt; 0 || inTrade() || player.isBanking() || player.isShopping()/* || player.getDueling().inDuelScreen || FightPit.inFightPits(player)*/) {
			player.getPacketSender().sendMessage("You are currently unable to trade another player.");
			if(player.getInterfaceId() &gt; 0)
				player.getPacketSender().sendMessage("Please close all open interfaces before requesting to open another one.");
			return;
		}
		tradeWith = player2.getIndex();
		if(getTradeWith() == player.getIndex())
			return;
		if(!Locations.goodDistance(player.getPosition().getX(), player.getPosition().getY(), player2.getPosition().getX(), player2.getPosition().getY(), 2)) {
			player.getPacketSender().sendMessage("Please get closer to request a trade.");
			return;
		}
		if(!inTrade() &amp;&amp; player2.getTrading().tradeRequested() &amp;&amp; player2.getTrading().getTradeWith() == player.getIndex()) {
			openTrade();
			player2.getTrading().openTrade();
		} else if(!inTrade()) {
			setTradeRequested(true);
			player.getPacketSender().sendMessage("You've sent a trade request to "+player2.getUsername()+".");
			player2.getPacketSender().sendMessage(player.getUsername() +":tradereq:");
		}
		lastTradeSent = System.currentTimeMillis();
	}

	public void openTrade() {
		player.getPacketSender().sendClientRightClickRemoval();
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player == null || player2 == null || getTradeWith() == player.getIndex() || player.isBanking())
			return;
		setTrading(true);
		setTradeRequested(false);
		setCanOffer(true);
		setTradeStatus(1);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player2.getPacketSender().sendInterfaceItems(3415, player2.getTrading().offeredItems);
		sendText(player2);
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getMovementQueue().reset();
		inTradeWith = player2.getIndex();
	}

	public void declineTrade(boolean tellOther) {
		Player player2 = getTradeWith() &gt;= 0 &amp;&amp; !(getTradeWith() &gt; World.getPlayers().capacity()) ? World.getPlayers().get(getTradeWith()) : null;
		for (Item item : offeredItems) {
			if (item.getAmount() &lt; 1)
				continue;
			player.getInventory().add(item);
		}
		offeredItems.clear();
		if(tellOther &amp;&amp; getTradeWith() &gt; -1) {
			if(player2 == null)
				return;
			player2.getTrading().declineTrade(false);
			player2.getPacketSender().sendMessage("Other player declined the trade.");
		}
		resetTrade();
	}

	public void sendText(Player player2) {
		if(player2 == null)
			return;
		player2.getPacketSender().sendString(3451, "" + Misc.formatPlayerName(player.getUsername()) + "");
		player2.getPacketSender().sendString(3417, "Trading with: " + Misc.formatPlayerName(player.getUsername()) + "");
		player.getPacketSender().sendString(3451, "" + Misc.formatPlayerName(player2.getUsername()) + "");
		player.getPacketSender().sendString(3417, "Trading with: " + Misc.formatPlayerName(player2.getUsername()) + "");
		player.getPacketSender().sendString(3431, "");
		player.getPacketSender().sendString(3535, "Are you sure you want to make this trade?");
		player.getPacketSender().sendInterfaceSet(3323, 3321);
		player.getPacketSender().sendItemContainer(player.getInventory(), 3322);
	}

	public void tradeItem(int itemId, int amount, int slot) {
		if(slot &lt; 0)
			return;
		if(!getCanOffer())
			return;
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player2 == null || player == null)
			return;
		if(player.getRights() == PlayerRights.ADMINISTRATOR) {
			player.getPacketSender().sendMessage("Administrators cannot trade items.");
			return;
		}
	/*	if(player.getNewPlayerDelay() &gt; 0 &amp;&amp; player.getRights().ordinal() == 0) {
			player.getPacketSender().sendMessage("You must wait another "+player.getNewPlayerDelay() / 60+" minutes before being able to trade items.");
			return;
		}*/
		if(player.getRights() != PlayerRights.DEVELOPER &amp;&amp; player2.getRights() != PlayerRights.DEVELOPER &amp;&amp; !(itemId == 1419 &amp;&amp; player.getRights().isStaff())) {
			if (!new Item(itemId).tradeable()) {
				player.getPacketSender().sendMessage("This item is currently untradeable and cannot be traded.");
				return;
			}
		}
		falseTradeConfirm();
		player.getPacketSender().sendClientRightClickRemoval();
		if(!inTrade() || !canOffer) {
			declineTrade(true);
			return;
		}
		if(!player.getInventory().contains(itemId))
			return;
		if(slot &gt;= player.getInventory().capacity() || player.getInventory().getItems()[slot].getId() != itemId || player.getInventory().getItems()[slot].getAmount() &lt;= 0)
			return;
		Item itemToTrade = player.getInventory().getItems()[slot];
		if(itemToTrade.getId() != itemId)
			return;
		if (player.getInventory().getAmount(itemId) &lt; amount) {
			amount = player.getInventory().getAmount(itemId);
			if (amount == 0 || player.getInventory().getAmount(itemId) &lt; amount) {
				return;
			}
		}
		if (!itemToTrade.getDefinition().isStackable()) {
			for (int a = 0; a &lt; amount &amp;&amp; a &lt; 28; a++) {
				if (player.getInventory().getAmount(itemId) &gt;= 1) {
					offeredItems.add(new Item(itemId, 1));
					player.getInventory().delete(itemId, 1);
				}
			}
		} else
			if (itemToTrade.getDefinition().isStackable()) {
				boolean itemInTrade = false;
				for (Item item : offeredItems) {
					if (item.getId() == itemId) {
						itemInTrade = true;
						item.setAmount(item.getAmount() + amount);
						player.getInventory().delete(itemId, amount);
						break;
					}
				}
				if (!itemInTrade) {
					offeredItems.add(new Item(itemId, amount));
					player.getInventory().delete(itemId, amount);
				}
			}
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player.getPacketSender().sendString(3431, "");
		acceptedTrade = false;
		tradeConfirmed = false;
		tradeConfirmed2 = false;
		player2.getPacketSender().sendInterfaceItems(3416, offeredItems);
		player2.getPacketSender().sendString(3431, "");
		player2.getTrading().acceptedTrade = false;
		player2.getTrading().tradeConfirmed = false;
		player2.getTrading().tradeConfirmed2 = false;
		sendText(player2);
	}

	public void removeTradedItem(int itemId, int amount) {
		if(!getCanOffer())
			return;
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player2 == null)
			return;
		if(!inTrade() || !canOffer) {
			declineTrade(false);
			return;
		}
		falseTradeConfirm();
		ItemDefinition def = ItemDefinition.forId(itemId);
		if (!def.isStackable()) {
			if (amount &gt; 28)
				amount = 28;
			for (int a = 0; a &lt; amount; a++) {
				for (Item item : offeredItems) {
					if (item.getId() == itemId) {
						if (!item.getDefinition().isStackable()) {
							offeredItems.remove(item);
							player.getInventory().add(itemId, 1);
						}
						break;
					}
				}
			}
		} else
			for (Item item : offeredItems) {
				if (item.getId() == itemId) {
					if (item.getDefinition().isStackable()) {
						if (item.getAmount() &gt; amount) {
							item.setAmount(item.getAmount() - amount);
							player.getInventory().add(itemId, amount);
						} else {
							amount = item.getAmount();
							offeredItems.remove(item);
							player.getInventory().add(itemId, amount);
						}
					}
					break;
				}
			}
		falseTradeConfirm();
		player.getInventory().refreshItems();
		player.getPacketSender().sendInterfaceItems(3416, player2.getTrading().offeredItems);
		player.getPacketSender().sendInterfaceItems(3415, offeredItems);
		player2.getPacketSender().sendInterfaceItems(3416, offeredItems);
		sendText(player2);
		player.getPacketSender().sendString(3431, "");
		player2.getPacketSender().sendString(3431, "");
		player.getPacketSender().sendClientRightClickRemoval();
	}

	public void acceptTrade(int stage) {
		if(!player.getClickDelay().elapsed(1000))
			return;
		if(getTradeWith() &lt; 0) {
			declineTrade(false);
			return;
		}
		Player player2 = World.getPlayers().get(getTradeWith());
		if(player == null || player2 == null) {
			declineTrade(false);
			return;
		}
		if(!twoTraders(player, player2)) {
			player.getPacketSender().sendMessage("An error has occured. Please try re-trading the player.");
			return;
		}
		if(stage == 2) {
			if(!inTrade() || !player2.getTrading().inTrade() || !player2.getTrading().tradeConfirmed) {
				declineTrade(true);
				return;
			}
			if(!tradeConfirmed)
				return;
			acceptedTrade = true;
			tradeConfirmed2 = true;
			player2.getPacketSender().sendString(3535, "Other player has accepted.");
			player.getPacketSender().sendString(3535, "Waiting for other player...");
			if (inTrade() &amp;&amp; player2.getTrading().tradeConfirmed2) {
				acceptedTrade = true;
				giveItems();
				player.getPacketSender().sendMessage("Trade accepted.");
				player2.getTrading().acceptedTrade = true;
				player2.getTrading().giveItems();
				player2.getPacketSender().sendMessage("Trade accepted.");
				resetTrade();
				player2.getTrading().resetTrade();
			}
		} else if(stage == 1) {
			player2.getTrading().goodTrade = true;
			player2.getPacketSender().sendString(3431, "Other player has accepted.");
			goodTrade = true;
			player.getPacketSender().sendString(3431, "Waiting for other player...");
			tradeConfirmed = true;
			if (inTrade() &amp;&amp; player2.getTrading().tradeConfirmed &amp;&amp; player2.getTrading().goodTrade &amp;&amp; goodTrade) {
				confirmScreen();
				player2.getTrading().confirmScreen();
			}
		}
		player.getClickDelay().reset();
	}

	public void confirmScreen() {
		Player player2 = World.getPlayers().get(getTradeWith());
		if (player2 == null)
			return;
		setCanOffer(false);
		player.getInventory().refreshItems();
		String SendTrade = "Absolutely nothing!";
		String SendAmount;
		int Count = 0;
		for (Item item : offeredItems) {
			if (item.getAmount() &gt;= 1000 &amp;&amp; item.getAmount() &lt; 1000000) {
				SendAmount = "@cya@" + (item.getAmount() / 1000) + "K @whi@(" + Misc.format(item.getAmount()) + ")";
			} else if (item.getAmount() &gt;= 1000000) {
				SendAmount = "@gre@" + (item.getAmount() / 1000000) + " million @whi@(" + Misc.format(item.getAmount()) + ")";
			} else {
				SendAmount = "" + Misc.format(item.getAmount());
			}
			if (Count == 0) {
				SendTrade = item.getDefinition().getName().replaceAll("_", " ");
			} else
				SendTrade = SendTrade + "\\n" + item.getDefinition().getName().replaceAll("_", " ");
			if (item.getDefinition().isStackable())
				SendTrade = SendTrade + " x " + SendAmount;
			Count++;
		}

		player.getPacketSender().sendString(3557, SendTrade);
		SendTrade = "Absolutely nothing!";
		SendAmount = "";
		Count = 0;
		for (Item item : player2.getTrading().offeredItems) {
			if (item.getAmount() &gt;= 1000 &amp;&amp; item.getAmount() &lt; 1000000) {
				SendAmount = "@cya@" + (item.getAmount() / 1000) + "K @whi@(" + Misc.format(item.getAmount()) + ")";
			} else if (item.getAmount() &gt;= 1000000) {
				SendAmount = "@gre@" + (item.getAmount() / 1000000) + " million @whi@(" + Misc.format(item.getAmount()) + ")";
			} else {
				SendAmount = "" + Misc.format(item.getAmount());
			}
			if (Count == 0) {
				SendTrade = item.getDefinition().getName().replaceAll("_", " ");
			} else
				SendTrade = SendTrade + "\\n" + item.getDefinition().getName().replaceAll("_", " ");
			if (item.getDefinition().isStackable())
				SendTrade = SendTrade + " x " + SendAmount;
			Count++;
		}
		player.getPacketSender().sendString(3558, SendTrade);
		player.getPacketSender().sendInterfaceSet(3443, 3321);
		player.getPacketSender().sendItemContainer(player.getInventory(), 3322);
		/*
		 * Remove all tabs!
		 */
		//player.getPacketSender().sendInterfaceSet(3443, Inventory.INTERFACE_ID);
		//player.getPacketSender().sendItemContainer(player.getInventory(), Inventory.INTERFACE_ID);
	}

	public void giveItems() {
		Player player2 = World.getPlayers().get(getTradeWith());
		if (player2 == null)
			return;
		if(!inTrade() || !player2.getTrading().inTrade())
			return;
		try {
			for (Item item : player2.getTrading().offeredItems) {
				player.getInventory().add(item);
			}
			
			//logs
			for (Item item : player.getTrading().offeredItems) {
				PlayerLogs.log(player.getUsername(), "Gave item in trade to "+player2.getUsername()+". Id: "+item.getId()+", amount: "+item.getAmount());
			}
			for (Item item : player2.getTrading().offeredItems) {
				PlayerLogs.log(player.getUsername(), "Receiving item from trade. Id: "+item.getId()+", amount: "+item.getAmount());
			}
		} catch (Exception ignored) {
		}
	}

	public void resetTrade() {
		inTradeWith = -1;
		offeredItems.clear();
		setCanOffer(true);
		setTrading(false);
		setTradeWith(-1);
		setTradeStatus(0);
		lastTradeSent = 0;
		acceptedTrade = false;
		tradeConfirmed = false;
		tradeConfirmed2 = false;
		tradeRequested = false;
		canOffer = true;
		goodTrade = false;
		player.getPacketSender().sendString(3535, "Are you sure you want to make this trade?");
		player.getPacketSender().sendInterfaceRemoval();
		player.getPacketSender().sendInterfaceRemoval();
	}


	private boolean falseTradeConfirm() {
		Player player2 = World.getPlayers().get(getTradeWith());
		return tradeConfirmed = player2.getTrading().tradeConfirmed = false;
	}

	public CopyOnWriteArrayList&lt;Item&gt; offeredItems = new CopyOnWriteArrayList&lt;Item&gt;();
	private boolean inTrade = false;
	private boolean tradeRequested = false;
	private int tradeWith = -1;
	private int tradeStatus;
	public long lastTradeSent, lastAction;
	private boolean canOffer = true;
	public boolean tradeConfirmed = false;
	public boolean tradeConfirmed2 = false;
	public boolean acceptedTrade = false;
	public boolean goodTrade = false;

	public void setTrading(boolean trading) {
		this.inTrade = trading;
	}

	public boolean inTrade() {
		return this.inTrade;
	}

	public void setTradeRequested(boolean tradeRequested) {
		this.tradeRequested = tradeRequested;
	}

	public boolean tradeRequested() {
		return this.tradeRequested;
	}

	public void setTradeWith(int tradeWith) {
		this.tradeWith = tradeWith;
	}

	public int getTradeWith() {
		return this.tradeWith;
	}

	public void setTradeStatus(int status) {
		this.tradeStatus = status;
	}

	public int getTradeStatus() {
		return this.tradeStatus;
	}

	public void setCanOffer(boolean canOffer) {
		this.canOffer = canOffer;
	}

	public boolean getCanOffer() {
		return canOffer &amp;&amp; player.getInterfaceId() == 3323 &amp;&amp; !player.isBanking() &amp;&amp; !player.getPriceChecker().isOpen();
	}

	public int inTradeWith = -1;

	/**
	 * Checks if two players are the only ones in a trade.
	 * @param p1	Player1 to check if he's 1/2 player in trade.
	 * @param p2	Player2 to check if he's 2/2 player in trade.
	 * @return		true if only two people are in the trade.
	 */
	public static boolean twoTraders(Player p1, Player p2) {
		int count = 0;
		for(Player player : World.getPlayers()) {
			if(player == null)
				continue;
			if(player.getTrading().inTradeWith == p1.getIndex() || player.getTrading().inTradeWith == p2.getIndex()) {
				count++;
			}
		}
		return count == 2;
	}

	/**
	 * The trade interface id.
	 */
	public static final int INTERFACE_ID = 3322;

	/**
	 * The trade interface id for removing items.
	 */
	public static final int INTERFACE_REMOVAL_ID = 3415;

}
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855/1</link>
        <pubDate>Sun, 15 Nov 2015 19:48:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553855-1</guid>
        <source url="https://forum.moparisthebest.com/t/itemban-need-help-with-a-get-method/553855.rss">ItemBan // Need help with a get Method</source>
      </item>
  </channel>
</rss>
