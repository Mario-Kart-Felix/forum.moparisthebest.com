<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] pk saving</title>
    <link>https://forum.moparisthebest.com/t/pi-pk-saving/397411</link>
    <description>2 problems when i get 50 pk points by killing another player and i buy something from pk point shop that is 50 pk points, it doesnt let me buy it

also when i relog after getting pk points it doesnt save it this is my playersave
[code]characterfile.newLine();
			characterfile.write(&quot;pk-points = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.pkPoints), 0, Integer.toString(p.pkPoints).length());[/code]
this is my shopassistant.java file
[code]package server.model.shops;

import server.Config;
import server.Server;
import server.model.items.Item;
import server.model.players.Client;

public class ShopAssistant {

	private Client c;
	
	public ShopAssistant(Client client) {
		this.c = client;
	}
	
	/**
	*Shops
	**/
	
	public void openShop(int ShopID){		
		c.getItems().resetItems(3823);
		resetShop(ShopID);
		c.isShopping = true;
		c.myShopId = ShopID;
		c.getPA().sendFrame248(3824, 3822);
		c.getPA().sendFrame126(Server.shopHandler.ShopName[ShopID], 3901);
	}
	
	public void updatePlayerShop() {
		for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
			if (Server.playerHandler.players[i] != null) {
				if (Server.playerHandler.players[i].isShopping == true &amp;&amp; Server.playerHandler.players[i].myShopId == c.myShopId &amp;&amp; i != c.playerId) {
					Server.playerHandler.players[i].updateShop = true;
				}
			}
		}
	}
	
	
	public void updateshop(int i){
		resetShop(i);
	}
	
	public void resetShop(int ShopID) {
		synchronized(c) {
			int TotalItems = 0;
			for (int i = 0; i &lt; Server.shopHandler.MaxShopItems; i++) {
				if (Server.shopHandler.ShopItems[ShopID][i] &gt; 0) {
					TotalItems++;
				}
			}
			if (TotalItems &gt; Server.shopHandler.MaxShopItems) {
				TotalItems = Server.shopHandler.MaxShopItems;
			}
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(3900);
			c.getOutStream().writeWord(TotalItems);
			int TotalCount = 0;
			for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
				if (Server.shopHandler.ShopItems[ShopID][i] &gt; 0 || i &lt;= Server.shopHandler.ShopItemsStandard[ShopID]) {
					if (Server.shopHandler.ShopItemsN[ShopID][i] &gt; 254) {
						c.getOutStream().writeByte(255); 					
						c.getOutStream().writeDWord_v2(Server.shopHandler.ShopItemsN[ShopID][i]);	
					} else {
						c.getOutStream().writeByte(Server.shopHandler.ShopItemsN[ShopID][i]);
					}
					if (Server.shopHandler.ShopItems[ShopID][i] &gt; Config.ITEM_LIMIT || Server.shopHandler.ShopItems[ShopID][i] &lt; 0) {
						Server.shopHandler.ShopItems[ShopID][i] = Config.ITEM_LIMIT;
					}
					c.getOutStream().writeWordBigEndianA(Server.shopHandler.ShopItems[ShopID][i]);
					TotalCount++;
				}
				if (TotalCount &gt; TotalItems) {
					break;
				}
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();	
		}
	}
	
	
	public double getItemShopValue(int ItemID, int Type, int fromSlot) {
		double ShopValue = 1;
		double Overstock = 0;
		double TotPrice = 0;
		for (int i = 0; i &lt; Config.ITEM_LIMIT; i++) {
			if (Server.itemHandler.ItemList[i] != null) {
				if (Server.itemHandler.ItemList[i].itemId == ItemID) {
					ShopValue = Server.itemHandler.ItemList[i].ShopValue;
				}
			}
		}
		
		TotPrice = ShopValue;

		if (Server.shopHandler.ShopBModifier[c.myShopId] == 1) {
			TotPrice *= 1; 
			TotPrice *= 1;
			if (Type == 1) {
				TotPrice *= 1; 
			}
		} else if (Type == 1) {
			TotPrice *= 1; 
		}
		return TotPrice;
	}
	
	public int getItemShopValue(int itemId) {
		for (int i = 0; i &lt; Config.ITEM_LIMIT; i++) {
			if (Server.itemHandler.ItemList[i] != null) {
				if (Server.itemHandler.ItemList[i].itemId == itemId) {
					return (int)Server.itemHandler.ItemList[i].ShopValue;
				}
			}	
		}
		return 0;
	}
	
	
	
	/**
	*buy item from shop (Shop Price)
	**/
	
	public void buyFromShopPrice(int removeId, int removeSlot){
		int ShopValue = (int)Math.floor(getItemShopValue(removeId, 0, removeSlot));
		ShopValue *= 1;
		String ShopAdd = &quot;&quot;;
		if (c.myShopId == 12) {
			c.sendMessage(c.getItems().getItemName(removeId)+&quot;: currently costs &quot; + getSpecialItemValue(removeId) + &quot; PK points.&quot;);
			return;
		}
		if (c.myShopId == 18) {
			c.sendMessage(c.getItems().getItemName(removeId)+&quot; costs &quot; + getSpecialItemValue(removeId) + &quot; PC Points.&quot;);
			return;
		}
		if (c.myShopId == 19) {
			c.sendMessage(&quot;This item current costs &quot; + c.getItems().getUntradePrice(removeId) + &quot; coins.&quot;);
		}
		if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
			ShopAdd = &quot; (&quot; + (ShopValue / 1000) + &quot;K)&quot;;
		} else if (ShopValue &gt;= 1000000) {
			ShopAdd = &quot; (&quot; + (ShopValue / 1000000) + &quot; million)&quot;;
		}
		c.sendMessage(c.getItems().getItemName(removeId)+&quot;: currently costs &quot;+ShopValue+&quot; coins&quot;+ShopAdd);
	}
	
	public int getSpecialItemValue(int id) {
		switch (id) {
			case 6889:	//Book
			case 6914:	//Wand	
			return 2000;
			case 6916:	//Inf
			case 6918:	//Inf
			case 6920:	//Inf	
			case 6922:	//Inf
			case 6924:	//Inf
			return 1000;
			case 6737:   //Berserker Ring
			case 6733:	//Ring
			case 6735:	//Ring
			case 6731:	//Ring	
			case 11128: //Berserker Neck
			case 2579: //Wizard Boots
			return 1000;
			case 2577: //Ranger Boots
			case 2581: //Robin Hood Hat
			return 7500;
			case 11283: //DFS
			return 15000;
			case 14484: //Claws
			return 400;
			case 4151:	//Whip
			case 6585:	//Fury
			return 750;
			case 11732:	//D Boot
			return 1000;
			case 11730:	//SS
			return 750;
	/**
	*Sell item to shop (Shop Price)
	**/
	public void sellToShopPrice(int removeId, int removeSlot) {
		for (int i : Config.ITEM_SELLABLE) {
			if (i == removeId) {
				c.sendMessage(&quot;You can&#39;t sell &quot;+c.getItems().getItemName(removeId).toLowerCase()+&quot;.&quot;);
				return;
			} 
		}
		boolean IsIn = false;
		if (Server.shopHandler.ShopSModifier[c.myShopId] &gt; 1) {
			for (int j = 0; j &lt;= Server.shopHandler.ShopItemsStandard[c.myShopId]; j++) {
				if (removeId == (Server.shopHandler.ShopItems[c.myShopId][j] - 1)) {
					IsIn = true;
					break;
				}
			}
		} else {
			IsIn = true;
		}
		if (IsIn == false) {
			c.sendMessage(&quot;You can&#39;t sell &quot;+c.getItems().getItemName(removeId).toLowerCase()+&quot; to this store.&quot;);
		} else {
			int ShopValue = (int)Math.floor(getItemShopValue(removeId, 1, removeSlot));
			String ShopAdd = &quot;&quot;;
			if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
				ShopAdd = &quot; (&quot; + (ShopValue / 1000) + &quot;K)&quot;;
			} else if (ShopValue &gt;= 1000000) {
				ShopAdd = &quot; (&quot; + (ShopValue / 1000000) + &quot; million)&quot;;
			}
			c.sendMessage(c.getItems().getItemName(removeId)+&quot;: shop will buy for &quot;+ShopValue+&quot; coins&quot;+ShopAdd);
		}
	}


	public boolean shopSellsItem(int itemID) {
		for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
			if(itemID == (Server.shopHandler.ShopItems[c.myShopId][i] - 1)) {
				return true;
			}
		}
		return false;
	}
	
	
	
	public boolean sellItem(int itemID, int fromSlot, int amount) {
			if(c.inTrade) {
            		c.sendMessage(&quot;You cant sell items to the shop while your in trade!&quot;);
           		return false;
            		}
		if (c.myShopId == 14)
			return false;
		for (int i : Config.ITEM_SELLABLE) {
			if (i == itemID) {
				c.sendMessage(&quot;You can&#39;t sell &quot;+c.getItems().getItemName(itemID).toLowerCase()+&quot;.&quot;);
				return false;
			} 
		}
		if(c.playerRights == 2 &amp;&amp; !Config.ADMIN_CAN_SELL_ITEMS) {
			c.sendMessage(&quot;Selling items as an admin has been disabled.&quot;);
			return false;
		}
		
		if (amount &gt; 0 &amp;&amp; itemID == (c.playerItems[fromSlot] - 1)) {
			if (Server.shopHandler.ShopSModifier[c.myShopId] &gt; 1) {
				boolean IsIn = false;
				for (int i = 0; i &lt;= Server.shopHandler.ShopItemsStandard[c.myShopId]; i++) {
					if (itemID == (Server.shopHandler.ShopItems[c.myShopId][i] - 1)) {
						IsIn = true;
						break;
					}
				}
				if (IsIn == false) {
					c.sendMessage(&quot;You can&#39;t sell &quot;+c.getItems().getItemName(itemID).toLowerCase()+&quot; to this store.&quot;);
					return false;
				}
			}

			if (amount &gt; c.playerItemsN[fromSlot] &amp;&amp; (Item.itemIsNote[(c.playerItems[fromSlot] - 1)] == true || Item.itemStackable[(c.playerItems[fromSlot] - 1)] == true)) {
				amount = c.playerItemsN[fromSlot];
			} else if (amount &gt; c.getItems().getItemAmount(itemID) &amp;&amp; Item.itemIsNote[(c.playerItems[fromSlot] - 1)] == false &amp;&amp; Item.itemStackable[(c.playerItems[fromSlot] - 1)] == false) {
				amount = c.getItems().getItemAmount(itemID);
			}
			//double ShopValue;
			//double TotPrice;
			int TotPrice2 = 0;
			//int Overstock;
			for (int i = amount; i &gt; 0; i--) {
				TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 1, fromSlot));
				if (c.getItems().freeSlots() &gt; 0 || c.getItems().playerHasItem(995)) {
					if (Item.itemIsNote[itemID] == false) {
						c.getItems().deleteItem(itemID, c.getItems().getItemSlot(itemID), 1);
					} else {
						c.getItems().deleteItem(itemID, fromSlot, 1);
					}
					c.getItems().addItem(995, TotPrice2);
					addShopItem(itemID, 1);
				} else {
					c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
					break;
				}
			}
			c.getItems().resetItems(3823);
			resetShop(c.myShopId);
			updatePlayerShop();
			return true;
		}
		return true;
	}
	
public boolean addShopItem(int itemID, int amount) {
		boolean Added = false;
		if (amount &lt;= 0) {
			return false;
		}
		if (Item.itemIsNote[itemID] == true) {
			itemID = c.getItems().getUnnotedItem(itemID);
		}
		for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
			if ((Server.shopHandler.ShopItems[c.myShopId][i] - 1) == itemID) {
				Server.shopHandler.ShopItemsN[c.myShopId][i] += amount;
				Added = true;
			}
		}
		if (Added == false) {
			for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
				if (Server.shopHandler.ShopItems[c.myShopId][i] == 0) {
					Server.shopHandler.ShopItems[c.myShopId][i] = (itemID + 1);
					Server.shopHandler.ShopItemsN[c.myShopId][i] = amount;
					Server.shopHandler.ShopItemsDelay[c.myShopId][i] = 0;
					break;
				}
			}
		}
		return true;
	}
	
	public boolean buyItem(int itemID, int fromSlot, int amount) {
		if (c.myShopId == 14) {
			skillBuy(itemID);
			return false;
		} else if (c.myShopId == 15) {
			buyVoid(itemID);
			return false;		
		}
		if(!shopSellsItem(itemID))
			return false;
		if (amount &gt; 0) {
			if (amount &gt; Server.shopHandler.ShopItemsN[c.myShopId][fromSlot]) {
				amount = Server.shopHandler.ShopItemsN[c.myShopId][fromSlot];
			}
			//double ShopValue;
			//double TotPrice;
			int TotPrice2 = 0;
			//int Overstock;
			int Slot = 0;
			int Slot1 = 0;//Tokkul
			int Slot2 = 0;//Pking Points
			if (c.myShopId &gt;= 17) {
				handleOtherShop(itemID);
				return false;
			}	
			for (int i = amount; i &gt; 0; i--) {
				TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 0, fromSlot));
				Slot = c.getItems().getItemSlot(995);
				Slot1 = c.getItems().getItemSlot(6529);
				if (Slot == -1 &amp;&amp; c.myShopId != 29 &amp;&amp; c.myShopId != 30 &amp;&amp; c.myShopId != 31 &amp;&amp; c.myShopId != 47) {
					c.sendMessage(&quot;You don&#39;t have enough coins.&quot;);
					break;
				}
				if(Slot1 == -1 &amp;&amp; c.myShopId == 29 || c.myShopId == 30 || c.myShopId == 31) {
					c.sendMessage(&quot;You don&#39;t have enough tokkul.&quot;);
					break;
				}
                if(TotPrice2 &lt;= 1) {
                	TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 0, fromSlot));
                	TotPrice2 *= 1.66;
                }
	if(c.myShopId == 12) {
                	if (c.pkPoints &gt;= TotPrice2) {
						if (c.getItems().freeSlots() &gt; 0) {
							c.pkPoints -= TotPrice2;
							c.getItems().addItem(itemID, 1);
							Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
							Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
							if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
								Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
							}
						} else {
							c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
							break;
						}
					} else {
						c.sendMessage(&quot;You don&#39;t have enough Pk Points.&quot;);
						break;
					}
                }
                if(c.myShopId != 29 || c.myShopId != 30 || c.myShopId != 31 || c.myShopId != 47) {
					if (c.playerItemsN[Slot] &gt;= TotPrice2) {
						if (c.getItems().freeSlots() &gt; 0) {
							c.getItems().deleteItem(995, c.getItems().getItemSlot(995), TotPrice2);
							c.getItems().addItem(itemID, 1);
							Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
							Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
							if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
								Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
							}
						} else {
							c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
							break;
						}
					} else {
						c.sendMessage(&quot;You don&#39;t have enough coins.&quot;);
						break;
					}
                }
                if(c.myShopId == 29 || c.myShopId == 30 || c.myShopId == 31) {
                	if (c.playerItemsN[Slot1] &gt;= TotPrice2) {
						if (c.getItems().freeSlots() &gt; 0) {
							c.getItems().deleteItem(6529, c.getItems().getItemSlot(6529), TotPrice2);
							c.getItems().addItem(itemID, 1);
							Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
							Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
							if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
								Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
							}
						} else {
							c.sendMessage(&quot;You don&#39;t have enough space in your inventory.&quot;);
							break;
						}
					} else {
						c.sendMessage(&quot;You don&#39;t have enough tokkul.&quot;);
						break;
					}
                }
			}
			c.getItems().resetItems(3823);
			resetShop(c.myShopId);
			updatePlayerShop();
			return true;
		}
		return false;
	}	
	
		public void handleOtherShop(int itemID) {
			if (c.myShopId == 17) {
				if (c.magePoints &gt;= getSpecialItemValue(itemID)) {
					if (c.getItems().freeSlots() &gt; 0){
						c.magePoints -= getSpecialItemValue(itemID);
						c.getItems().addItem(itemID,1);	
						c.getItems().resetItems(3823);
					}
				} else {
					c.sendMessage(&quot;You do not have enough points to buy this item.&quot;);			
				}
			} else if (c.myShopId == 12) {
				if (c.pkPoints &gt;= getSpecialItemValue(itemID)) {
					if (c.getItems().freeSlots() &gt; 0){
						c.pkPoints -= getSpecialItemValue(itemID);
						c.getItems().addItem(itemID,1);
						c.getItems().resetItems(3823);
					}
				} else {
					c.sendMessage(&quot;You do not have enough points to buy this item.&quot;);			
				}
			} else if (c.myShopId == 18) {
				if (c.pcPoints &gt;= getSpecialItemValue(itemID)) {
					if (c.getItems().freeSlots() &gt; 0){
						c.pcPoints -= getSpecialItemValue(itemID);
						c.getItems().addItem(itemID,1);
						c.getItems().resetItems(3823);
					}
				} else {
					c.sendMessage(&quot;You do not have enough points to buy this item.&quot;);			
				}

			}
		}
		
		public void openSkillCape() {
			int capes = get99Count();
			if (capes &gt; 1)
				capes = 1;
			else
				capes = 0;
			c.myShopId = 14;
			setupSkillCapes(capes, get99Count());		
		}
		
		
		

[/code]
EdIt: please help??</description>
    
    <lastBuildDate>Wed, 01 Jun 2011 19:58:01 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-pk-saving/397411.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] pk saving</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>2 problems when i get 50 pk points by killing another player and i buy something from pk point shop that is 50 pk points, it doesnt let me buy it</p>
<p>also when i relog after getting pk points it doesnt save it this is my playersave</p>
<p><code>characterfile.newLine();
			characterfile.write("pk-points = ", 0, 12);
			characterfile.write(Integer.toString(p.pkPoints), 0, Integer.toString(p.pkPoints).length());</code><br>
this is my shopassistant.java file</p>
<p>[code]package server.model.shops;</p>
<p>import server.Config;<br>
import server.Server;<br>
import server.model.items.Item;<br>
import server.model.players.Client;</p>
<p>public class ShopAssistant {</p>
<pre><code>private Client c;

public ShopAssistant(Client client) {
	this.c = client;
}

/**
*Shops
**/

public void openShop(int ShopID){		
	c.getItems().resetItems(3823);
	resetShop(ShopID);
	c.isShopping = true;
	c.myShopId = ShopID;
	c.getPA().sendFrame248(3824, 3822);
	c.getPA().sendFrame126(Server.shopHandler.ShopName[ShopID], 3901);
}

public void updatePlayerShop() {
	for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
		if (Server.playerHandler.players[i] != null) {
			if (Server.playerHandler.players[i].isShopping == true &amp;&amp; Server.playerHandler.players[i].myShopId == c.myShopId &amp;&amp; i != c.playerId) {
				Server.playerHandler.players[i].updateShop = true;
			}
		}
	}
}


public void updateshop(int i){
	resetShop(i);
}

public void resetShop(int ShopID) {
	synchronized(c) {
		int TotalItems = 0;
		for (int i = 0; i &lt; Server.shopHandler.MaxShopItems; i++) {
			if (Server.shopHandler.ShopItems[ShopID][i] &gt; 0) {
				TotalItems++;
			}
		}
		if (TotalItems &gt; Server.shopHandler.MaxShopItems) {
			TotalItems = Server.shopHandler.MaxShopItems;
		}
		c.getOutStream().createFrameVarSizeWord(53);
		c.getOutStream().writeWord(3900);
		c.getOutStream().writeWord(TotalItems);
		int TotalCount = 0;
		for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
			if (Server.shopHandler.ShopItems[ShopID][i] &gt; 0 || i &lt;= Server.shopHandler.ShopItemsStandard[ShopID]) {
				if (Server.shopHandler.ShopItemsN[ShopID][i] &gt; 254) {
					c.getOutStream().writeByte(255); 					
					c.getOutStream().writeDWord_v2(Server.shopHandler.ShopItemsN[ShopID][i]);	
				} else {
					c.getOutStream().writeByte(Server.shopHandler.ShopItemsN[ShopID][i]);
				}
				if (Server.shopHandler.ShopItems[ShopID][i] &gt; Config.ITEM_LIMIT || Server.shopHandler.ShopItems[ShopID][i] &lt; 0) {
					Server.shopHandler.ShopItems[ShopID][i] = Config.ITEM_LIMIT;
				}
				c.getOutStream().writeWordBigEndianA(Server.shopHandler.ShopItems[ShopID][i]);
				TotalCount++;
			}
			if (TotalCount &gt; TotalItems) {
				break;
			}
		}
		c.getOutStream().endFrameVarSizeWord();
		c.flushOutStream();	
	}
}


public double getItemShopValue(int ItemID, int Type, int fromSlot) {
	double ShopValue = 1;
	double Overstock = 0;
	double TotPrice = 0;
	for (int i = 0; i &lt; Config.ITEM_LIMIT; i++) {
		if (Server.itemHandler.ItemList[i] != null) {
			if (Server.itemHandler.ItemList[i].itemId == ItemID) {
				ShopValue = Server.itemHandler.ItemList[i].ShopValue;
			}
		}
	}
	
	TotPrice = ShopValue;

	if (Server.shopHandler.ShopBModifier[c.myShopId] == 1) {
		TotPrice *= 1; 
		TotPrice *= 1;
		if (Type == 1) {
			TotPrice *= 1; 
		}
	} else if (Type == 1) {
		TotPrice *= 1; 
	}
	return TotPrice;
}

public int getItemShopValue(int itemId) {
	for (int i = 0; i &lt; Config.ITEM_LIMIT; i++) {
		if (Server.itemHandler.ItemList[i] != null) {
			if (Server.itemHandler.ItemList[i].itemId == itemId) {
				return (int)Server.itemHandler.ItemList[i].ShopValue;
			}
		}	
	}
	return 0;
}



/**
*buy item from shop (Shop Price)
**/

public void buyFromShopPrice(int removeId, int removeSlot){
	int ShopValue = (int)Math.floor(getItemShopValue(removeId, 0, removeSlot));
	ShopValue *= 1;
	String ShopAdd = "";
	if (c.myShopId == 12) {
		c.sendMessage(c.getItems().getItemName(removeId)+": currently costs " + getSpecialItemValue(removeId) + " PK points.");
		return;
	}
	if (c.myShopId == 18) {
		c.sendMessage(c.getItems().getItemName(removeId)+" costs " + getSpecialItemValue(removeId) + " PC Points.");
		return;
	}
	if (c.myShopId == 19) {
		c.sendMessage("This item current costs " + c.getItems().getUntradePrice(removeId) + " coins.");
	}
	if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
		ShopAdd = " (" + (ShopValue / 1000) + "K)";
	} else if (ShopValue &gt;= 1000000) {
		ShopAdd = " (" + (ShopValue / 1000000) + " million)";
	}
	c.sendMessage(c.getItems().getItemName(removeId)+": currently costs "+ShopValue+" coins"+ShopAdd);
}

public int getSpecialItemValue(int id) {
	switch (id) {
		case 6889:	//Book
		case 6914:	//Wand	
		return 2000;
		case 6916:	//Inf
		case 6918:	//Inf
		case 6920:	//Inf	
		case 6922:	//Inf
		case 6924:	//Inf
		return 1000;
		case 6737:   //Berserker Ring
		case 6733:	//Ring
		case 6735:	//Ring
		case 6731:	//Ring	
		case 11128: //Berserker Neck
		case 2579: //Wizard Boots
		return 1000;
		case 2577: //Ranger Boots
		case 2581: //Robin Hood Hat
		return 7500;
		case 11283: //DFS
		return 15000;
		case 14484: //Claws
		return 400;
		case 4151:	//Whip
		case 6585:	//Fury
		return 750;
		case 11732:	//D Boot
		return 1000;
		case 11730:	//SS
		return 750;
/**
*Sell item to shop (Shop Price)
**/
public void sellToShopPrice(int removeId, int removeSlot) {
	for (int i : Config.ITEM_SELLABLE) {
		if (i == removeId) {
			c.sendMessage("You can't sell "+c.getItems().getItemName(removeId).toLowerCase()+".");
			return;
		} 
	}
	boolean IsIn = false;
	if (Server.shopHandler.ShopSModifier[c.myShopId] &gt; 1) {
		for (int j = 0; j &lt;= Server.shopHandler.ShopItemsStandard[c.myShopId]; j++) {
			if (removeId == (Server.shopHandler.ShopItems[c.myShopId][j] - 1)) {
				IsIn = true;
				break;
			}
		}
	} else {
		IsIn = true;
	}
	if (IsIn == false) {
		c.sendMessage("You can't sell "+c.getItems().getItemName(removeId).toLowerCase()+" to this store.");
	} else {
		int ShopValue = (int)Math.floor(getItemShopValue(removeId, 1, removeSlot));
		String ShopAdd = "";
		if (ShopValue &gt;= 1000 &amp;&amp; ShopValue &lt; 1000000) {
			ShopAdd = " (" + (ShopValue / 1000) + "K)";
		} else if (ShopValue &gt;= 1000000) {
			ShopAdd = " (" + (ShopValue / 1000000) + " million)";
		}
		c.sendMessage(c.getItems().getItemName(removeId)+": shop will buy for "+ShopValue+" coins"+ShopAdd);
	}
}


public boolean shopSellsItem(int itemID) {
	for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {
		if(itemID == (Server.shopHandler.ShopItems[c.myShopId][i] - 1)) {
			return true;
		}
	}
	return false;
}



public boolean sellItem(int itemID, int fromSlot, int amount) {
		if(c.inTrade) {
        		c.sendMessage("You cant sell items to the shop while your in trade!");
       		return false;
        		}
	if (c.myShopId == 14)
		return false;
	for (int i : Config.ITEM_SELLABLE) {
		if (i == itemID) {
			c.sendMessage("You can't sell "+c.getItems().getItemName(itemID).toLowerCase()+".");
			return false;
		} 
	}
	if(c.playerRights == 2 &amp;&amp; !Config.ADMIN_CAN_SELL_ITEMS) {
		c.sendMessage("Selling items as an admin has been disabled.");
		return false;
	}
	
	if (amount &gt; 0 &amp;&amp; itemID == (c.playerItems[fromSlot] - 1)) {
		if (Server.shopHandler.ShopSModifier[c.myShopId] &gt; 1) {
			boolean IsIn = false;
			for (int i = 0; i &lt;= Server.shopHandler.ShopItemsStandard[c.myShopId]; i++) {
				if (itemID == (Server.shopHandler.ShopItems[c.myShopId][i] - 1)) {
					IsIn = true;
					break;
				}
			}
			if (IsIn == false) {
				c.sendMessage("You can't sell "+c.getItems().getItemName(itemID).toLowerCase()+" to this store.");
				return false;
			}
		}

		if (amount &gt; c.playerItemsN[fromSlot] &amp;&amp; (Item.itemIsNote[(c.playerItems[fromSlot] - 1)] == true || Item.itemStackable[(c.playerItems[fromSlot] - 1)] == true)) {
			amount = c.playerItemsN[fromSlot];
		} else if (amount &gt; c.getItems().getItemAmount(itemID) &amp;&amp; Item.itemIsNote[(c.playerItems[fromSlot] - 1)] == false &amp;&amp; Item.itemStackable[(c.playerItems[fromSlot] - 1)] == false) {
			amount = c.getItems().getItemAmount(itemID);
		}
		//double ShopValue;
		//double TotPrice;
		int TotPrice2 = 0;
		//int Overstock;
		for (int i = amount; i &gt; 0; i--) {
			TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 1, fromSlot));
			if (c.getItems().freeSlots() &gt; 0 || c.getItems().playerHasItem(995)) {
				if (Item.itemIsNote[itemID] == false) {
					c.getItems().deleteItem(itemID, c.getItems().getItemSlot(itemID), 1);
				} else {
					c.getItems().deleteItem(itemID, fromSlot, 1);
				}
				c.getItems().addItem(995, TotPrice2);
				addShopItem(itemID, 1);
			} else {
				c.sendMessage("You don't have enough space in your inventory.");
				break;
			}
		}
		c.getItems().resetItems(3823);
		resetShop(c.myShopId);
		updatePlayerShop();
		return true;
	}
	return true;
}
</code></pre>
<p>public boolean addShopItem(int itemID, int amount) {<br>
boolean Added = false;<br>
if (amount &lt;= 0) {<br>
return false;<br>
}<br>
if (Item.itemIsNote[itemID] == true) {<br>
itemID = c.getItems().getUnnotedItem(itemID);<br>
}<br>
for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {<br>
if ((Server.shopHandler.ShopItems[c.myShopId][i] - 1) == itemID) {<br>
Server.shopHandler.ShopItemsN[c.myShopId][i] += amount;<br>
Added = true;<br>
}<br>
}<br>
if (Added == false) {<br>
for (int i = 0; i &lt; Server.shopHandler.ShopItems.length; i++) {<br>
if (Server.shopHandler.ShopItems[c.myShopId][i] == 0) {<br>
Server.shopHandler.ShopItems[c.myShopId][i] = (itemID + 1);<br>
Server.shopHandler.ShopItemsN[c.myShopId][i] = amount;<br>
Server.shopHandler.ShopItemsDelay[c.myShopId][i] = 0;<br>
break;<br>
}<br>
}<br>
}<br>
return true;<br>
}</p>
<pre><code>public boolean buyItem(int itemID, int fromSlot, int amount) {
	if (c.myShopId == 14) {
		skillBuy(itemID);
		return false;
	} else if (c.myShopId == 15) {
		buyVoid(itemID);
		return false;		
	}
	if(!shopSellsItem(itemID))
		return false;
	if (amount &gt; 0) {
		if (amount &gt; Server.shopHandler.ShopItemsN[c.myShopId][fromSlot]) {
			amount = Server.shopHandler.ShopItemsN[c.myShopId][fromSlot];
		}
		//double ShopValue;
		//double TotPrice;
		int TotPrice2 = 0;
		//int Overstock;
		int Slot = 0;
		int Slot1 = 0;//Tokkul
		int Slot2 = 0;//Pking Points
		if (c.myShopId &gt;= 17) {
			handleOtherShop(itemID);
			return false;
		}	
		for (int i = amount; i &gt; 0; i--) {
			TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 0, fromSlot));
			Slot = c.getItems().getItemSlot(995);
			Slot1 = c.getItems().getItemSlot(6529);
			if (Slot == -1 &amp;&amp; c.myShopId != 29 &amp;&amp; c.myShopId != 30 &amp;&amp; c.myShopId != 31 &amp;&amp; c.myShopId != 47) {
				c.sendMessage("You don't have enough coins.");
				break;
			}
			if(Slot1 == -1 &amp;&amp; c.myShopId == 29 || c.myShopId == 30 || c.myShopId == 31) {
				c.sendMessage("You don't have enough tokkul.");
				break;
			}
            if(TotPrice2 &lt;= 1) {
            	TotPrice2 = (int)Math.floor(getItemShopValue(itemID, 0, fromSlot));
            	TotPrice2 *= 1.66;
            }
if(c.myShopId == 12) {
            	if (c.pkPoints &gt;= TotPrice2) {
					if (c.getItems().freeSlots() &gt; 0) {
						c.pkPoints -= TotPrice2;
						c.getItems().addItem(itemID, 1);
						Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
						Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
						if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
							Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
						}
					} else {
						c.sendMessage("You don't have enough space in your inventory.");
						break;
					}
				} else {
					c.sendMessage("You don't have enough Pk Points.");
					break;
				}
            }
            if(c.myShopId != 29 || c.myShopId != 30 || c.myShopId != 31 || c.myShopId != 47) {
				if (c.playerItemsN[Slot] &gt;= TotPrice2) {
					if (c.getItems().freeSlots() &gt; 0) {
						c.getItems().deleteItem(995, c.getItems().getItemSlot(995), TotPrice2);
						c.getItems().addItem(itemID, 1);
						Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
						Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
						if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
							Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
						}
					} else {
						c.sendMessage("You don't have enough space in your inventory.");
						break;
					}
				} else {
					c.sendMessage("You don't have enough coins.");
					break;
				}
            }
            if(c.myShopId == 29 || c.myShopId == 30 || c.myShopId == 31) {
            	if (c.playerItemsN[Slot1] &gt;= TotPrice2) {
					if (c.getItems().freeSlots() &gt; 0) {
						c.getItems().deleteItem(6529, c.getItems().getItemSlot(6529), TotPrice2);
						c.getItems().addItem(itemID, 1);
						Server.shopHandler.ShopItemsN[c.myShopId][fromSlot] -= 1;
						Server.shopHandler.ShopItemsDelay[c.myShopId][fromSlot] = 0;
						if ((fromSlot + 1) &gt; Server.shopHandler.ShopItemsStandard[c.myShopId]) {
							Server.shopHandler.ShopItems[c.myShopId][fromSlot] = 0;
						}
					} else {
						c.sendMessage("You don't have enough space in your inventory.");
						break;
					}
				} else {
					c.sendMessage("You don't have enough tokkul.");
					break;
				}
            }
		}
		c.getItems().resetItems(3823);
		resetShop(c.myShopId);
		updatePlayerShop();
		return true;
	}
	return false;
}	

	public void handleOtherShop(int itemID) {
		if (c.myShopId == 17) {
			if (c.magePoints &gt;= getSpecialItemValue(itemID)) {
				if (c.getItems().freeSlots() &gt; 0){
					c.magePoints -= getSpecialItemValue(itemID);
					c.getItems().addItem(itemID,1);	
					c.getItems().resetItems(3823);
				}
			} else {
				c.sendMessage("You do not have enough points to buy this item.");			
			}
		} else if (c.myShopId == 12) {
			if (c.pkPoints &gt;= getSpecialItemValue(itemID)) {
				if (c.getItems().freeSlots() &gt; 0){
					c.pkPoints -= getSpecialItemValue(itemID);
					c.getItems().addItem(itemID,1);
					c.getItems().resetItems(3823);
				}
			} else {
				c.sendMessage("You do not have enough points to buy this item.");			
			}
		} else if (c.myShopId == 18) {
			if (c.pcPoints &gt;= getSpecialItemValue(itemID)) {
				if (c.getItems().freeSlots() &gt; 0){
					c.pcPoints -= getSpecialItemValue(itemID);
					c.getItems().addItem(itemID,1);
					c.getItems().resetItems(3823);
				}
			} else {
				c.sendMessage("You do not have enough points to buy this item.");			
			}

		}
	}
	
	public void openSkillCape() {
		int capes = get99Count();
		if (capes &gt; 1)
			capes = 1;
		else
			capes = 0;
		c.myShopId = 14;
		setupSkillCapes(capes, get99Count());		
	}
</code></pre>
<p>[/code]<br>
EdIt: please help??</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-pk-saving/397411/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-pk-saving/397411/1</link>
        <pubDate>Wed, 01 Jun 2011 19:58:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-397411-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-pk-saving/397411.rss">[PI] pk saving</source>
      </item>
  </channel>
</rss>
