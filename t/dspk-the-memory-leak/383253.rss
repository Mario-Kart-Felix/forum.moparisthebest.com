<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>DSPK, the memory leak</title>
    <link>https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253</link>
    <description>I know it&#39;s a bad thing, but is there a way to fix it?because what if someone wants to use a DSPK, the memory leak would kind of fuck that over.</description>
    
    <lastBuildDate>Mon, 21 Feb 2011 18:42:06 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>DSPK, the memory leak</title>
        <dc:creator><![CDATA[@blo0d_pker blo0d pker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/blo0d_pker">@blo0d_pker</a> wrote:</p>
          <blockquote>
              <p>OK I replaced my misc.java with that, it did help but the leak is still there. Would I have to edit anything in either client.java, player.java, or config.java too?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/3</link>
        <pubDate>Mon, 21 Feb 2011 18:42:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-383253-3</guid>
        <source url="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253.rss">DSPK, the memory leak</source>
      </item>
      <item>
        <title>DSPK, the memory leak</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>Not going to 100% spoon feed you but here.</p>
<p>[code]<br>
package server.util;</p>
<p>import java.text.NumberFormat;</p>
<p>public class Misc {</p>
<pre><code>public static String formatPlayerName(String str) {
	str = ucFirst(str);
	str.replace("_", " ");
	return str;
}

public static String longToPlayerName(long l) {
	int i = 0;
	char ac[] = new char[12];
	while(l != 0L) {
		long l1 = l;
		l /= 37L;
		ac[11 - i++] = playerNameXlateTable[(int)(l1 - l * 37L)];
	}
	return new String(ac, 12 - i, i);
}

public static String basicEncrypt(String s) {
	String toReturn = "";
	for (int j = 0; j &lt; s.length(); j++) {
		toReturn += (int)s.charAt(j);
	}
	//System.out.println("Encrypt: " + toReturn);
	return toReturn;	
}

public static String longToPlayerName2(long l) {
  int i = 0;
  char ac[] = new char[99];
  while(l != 0L) {
     long l1 = l;
     l /= 37L;
     ac[11 - i++] = playerNameXlateTable[(int)(l1 - l * 37L)];
  }
  return new String(ac, 12 - i, i);
}

public static final char playerNameXlateTable[] = { 
	'_', 'a', 'b', 'c',
	'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
	'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', '0', '1', '2',
	'3', '4', '5', '6', '7', '8', '9' 
};

public static String longToString(long l) {
	int i = 0;
	char ac[] = new char[12];
	while (l != 0L) {
		long l1 = l;
		l /= 37L;
		ac[11 - i++] = playerNameXlateTable[(int) (l1 - l * 37L)];
	}
	return new String(ac, 12 - i, i);
}

public static String format(int num) {
	return NumberFormat.getInstance().format(num);
}

public static String ucFirst(String str) {
	str = str.toLowerCase();
	if(str.length() &gt; 1) {
		str = str.substring(0,1).toUpperCase() + str.substring(1);
	} else {
		return str.toUpperCase();
	}
	return str;
}

public static void print_debug(String str)
{
	System.out.print(str);				
}
public static void println_debug(String str)
{
	System.out.println(str);
}
public static void print(String str)
{
	System.out.print(str);
}
public static void println(String str)
{
	System.out.println(str);
}

public static String Hex(byte data[])
{
	return Hex(data, 0, data.length);
}
public static String Hex(byte data[], int offset, int len)
{
	String temp = "";
	for(int cntr = 0; cntr &lt; len; cntr++) {
		int num = data[offset+cntr] &amp; 0xFF;
		String myStr;
		if(num &lt; 16) myStr = "0";
		else myStr = "";
		temp += myStr + Integer.toHexString(num) + " ";
	}
	return temp.toUpperCase().trim();
}

public static int hexToInt(byte data[], int offset, int len)
{
	int temp = 0;
            int i = 1000;
	for(int cntr = 0; cntr &lt; len; cntr++) {
		int num = (data[offset+cntr] &amp; 0xFF) * i;
		temp += (int)num;
                    if (i &gt; 1)
		  i=i/1000;
	}
	return temp;
}

public static int random2(int range) { 
	return (int)((java.lang.Math.random() * range) + 1);
}

public static int random(int range) {
	return (int)(java.lang.Math.random() * (range+1));
}

public static long playerNameToInt64(String s)
{
	long l = 0L;
	for(int i = 0; i &lt; s.length() &amp;&amp; i &lt; 12; i++) {
		char c = s.charAt(i);
		l *= 37L;
		if(c &gt;= 'A' &amp;&amp; c &lt;= 'Z') l += (1 + c) - 65;
		else if(c &gt;= 'a' &amp;&amp; c &lt;= 'z') l += (1 + c) - 97;
		else if(c &gt;= '0' &amp;&amp; c &lt;= '9') l += (27 + c) - 48;
	}
	while(l % 37L == 0L &amp;&amp; l != 0L) l /= 37L;
	return l;
}


private static char decodeBuf[] = new char[4096];
public static String textUnpack(byte packedData[], int size)
{
	int idx = 0, highNibble = -1;
	for(int i = 0; i &lt; size*2; i++) {
		int val = packedData[i/2] &gt;&gt; (4-4*(i%2)) &amp; 0xf;
		if(highNibble == -1) {
			if(val &lt; 13) decodeBuf[idx++] = xlateTable[val];
			else highNibble = val;
		}
		else {
			decodeBuf[idx++] = xlateTable[((highNibble&lt;&lt;4) + val) - 195];
			highNibble = -1;
		}
	}


	return new String(decodeBuf, 0, idx);
}

public static String optimizeText(String text)
{
	char buf[] = text.toCharArray();
	boolean endMarker = true;	
	for(int i = 0; i &lt; buf.length; i++) {
        char c = buf[i];
        if(endMarker &amp;&amp; c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
			buf[i] -= 0x20;	
			endMarker = false;
		}
		if(c == '.' || c == '!' || c == '?') endMarker = true;
	}
	return new String(buf, 0, buf.length);
}

public static void textPack(byte packedData[], java.lang.String text)
{
	if(text.length() &gt; 80) text = text.substring(0, 80);
	text = text.toLowerCase();

	int carryOverNibble = -1;
	int ofs = 0;
	for(int idx = 0; idx &lt; text.length(); idx++) {
		char c = text.charAt(idx);
		int tableIdx = 0;
		for(int i = 0; i &lt; xlateTable.length; i++) {
			if(c == xlateTable[i]) {
				tableIdx = i;
				break;
			}
		}
		if(tableIdx &gt; 12) tableIdx += 195;
		if(carryOverNibble == -1) {
			if(tableIdx &lt; 13) carryOverNibble = tableIdx;
			else packedData[ofs++] = (byte)(tableIdx);
		}
		else if(tableIdx &lt; 13) {
			packedData[ofs++] = (byte)((carryOverNibble &lt;&lt; 4) + tableIdx);
			carryOverNibble = -1;
		}
		else {
			packedData[ofs++] = (byte)((carryOverNibble &lt;&lt; 4) + (tableIdx &gt;&gt; 4));
			carryOverNibble = tableIdx &amp; 0xf;
		}
	}

	if(carryOverNibble != -1) packedData[ofs++] = (byte)(carryOverNibble &lt;&lt; 4);
}

public static char xlateTable[] = {
	' ', 'e', 't', 'a', 'o', 'i', 'h', 'n', 's', 'r', 
	'd', 'l', 'u', 'm', 'w', 'c', 'y', 'f', 'g', 'p', 
	'b', 'v', 'k', 'x', 'j', 'q', 'z', '0', '1', '2', 
	'3', '4', '5', '6', '7', '8', '9', ' ', '!', '?', 
	'.', ',', ':', ';', '(', ')', '-', '&amp;', '*', '\\', 
	'\'', '@', '#', '+', '=', '\243', '$', '%', '"', '[', 
	']'
};




public static int direction(int srcX, int srcY, int destX, int destY)
{
	int dx=destX-srcX, dy=destY-srcY;
	
	if(dx &lt; 0) {
		if(dy &lt; 0) {
			if(dx &lt; dy) return 11;
			else if(dx &gt; dy) return 9;
			else return 10;		
		}
		else if(dy &gt; 0) {
			if(-dx &lt; dy) return 15;
			else if(-dx &gt; dy) return 13;
			else return 14;		
		}
		else {	
			return 12;
		}
	}
	else if(dx &gt; 0) {
		if(dy &lt; 0) {
			if(dx &lt; -dy) return 7;
			else if(dx &gt; -dy) return 5;
			else return 6;		
		}
		else if(dy &gt; 0) {
			if(dx &lt; dy) return 1;
			else if(dx &gt; dy) return 3;
			else return 2;	
		}
		else {	
			return 4;
		}
	}
	else {		
		if(dy &lt; 0) {
			return 8;
		}
		else if(dy &gt; 0) {
			return 0;
		}
		else {	
			return -1;		
		}
	}
}

public static byte directionDeltaX[] = new byte[]{ 0, 1, 1, 1, 0,-1,-1,-1 };
public static byte directionDeltaY[] = new byte[]{ 1, 1, 0,-1,-1,-1, 0, 1 };


public static byte xlateDirectionToClient[] = new byte[]{ 1, 2, 4, 7, 6, 5, 3, 0 };
</code></pre>
<p>}[/code]</p>
<p>P.S dont use DSPK <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/2</link>
        <pubDate>Sun, 20 Feb 2011 21:57:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-383253-2</guid>
        <source url="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253.rss">DSPK, the memory leak</source>
      </item>
      <item>
        <title>DSPK, the memory leak</title>
        <dc:creator><![CDATA[@blo0d_pker blo0d pker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/blo0d_pker">@blo0d_pker</a> wrote:</p>
          <blockquote>
              <p>I know itâ€™s a bad thing, but is there a way to fix it?because what if someone wants to use a DSPK, the memory leak would kind of fuck that over.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253/1</link>
        <pubDate>Sun, 20 Feb 2011 19:46:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-383253-1</guid>
        <source url="https://forum.moparisthebest.com/t/dspk-the-memory-leak/383253.rss">DSPK, the memory leak</source>
      </item>
  </channel>
</rss>
