<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Hyperion] Dialogue System</title>
    <link>https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396</link>
    <description>Thanks to Harlan for the idea of using an interface to continue dialogues, allowing the handling of everything that happens in one class.

[CODE]package org.hyperion.rs2.model.dialogues;

import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.model.npc.NPC;

/**
 * A class to handle dialogues.
 * @author Thock321
 *
 */
public class DialogueHandler {
	
	private static int[] NPC_IDS = {4882, 4887, 4893, 4900};
	private static int[] PLAYER_IDS = {968, 973, 979, 986};
	private static int[] OPTION_IDS = {2459, 2469, 2480, 2492};
	private static int[] STATEMENT_IDS = {356, 359, 363, 368, 374};
	
	/**
	 * The different dialogue types.
	 * @author Thock321
	 *
	 */
	public enum DialogueType {
		NPC,
		PLAYER,
		OPTION,
		STATEMENT;
	}
	
	/**
	 * An enum containing dialogue emotions.
	 * @author Thock321
	 *
	 */
    public enum Emotion {
        HAPPY(588), 
        CALM(589), 
        CALM_CONTINUED(590),
		DEFAULT(591),
		EVIL(592),
		EVIL_CONTINUED(593),
		DELIGHTED_EVIL(594), 
		ANNOYED(595), 
		DISTRESSED(596),
		DISTRESSED_CONTINUED(597),
		NEAR_TEARS(598), SAD(599),
		DISORIENTED_LEFT(600),
		DISORIENTED_RIGHT(601),
		UNINTERESTED(602), 
		SLEEPY(603), 
		PLAIN_EVIL(604), 
		LAUGHING(605),
		LONGER_LAUGHING(606),
		LONGER_LAUGHING_2(607), 
		LAUGHING_2(608),
		EVIL_LAUGH_SHORT(609), 
		SLIGHTLY_SAD(610), 
		VERY_SAD(611),
		OTHER(612), 
		NEAR_TEARS_2(613),
		ANGRY_1(614), 
		ANGRY_2(615),
		ANGRY_3(616), 
		ANGRY_4(617);
        
        Emotion(int id) {
            this.id = id;
        }
        
        int id;
        
        public int getId() {
            return id;
        }
    }
    
    /**
     * Sends a dialogue.
     * @param p The player.
     * @param dialogues The dialogues to be sent.
     * @param dt The type of dialogue.
     */
    public static void sendDialogue(Player p, String[] dialogues, DialogueType dt) {
    	sendDialogue(p, dialogues, Emotion.CALM, dt, null);
    }
    
    /**
     * Sends a dialogue.
     * @param p The player.
     * @param dialogues The dialogues to be sent.
     * @param e The emotion.
     * @param dt The type of dialogue.
     */
    public static void sendDialogue(Player p, String[] dialogues, Emotion e, DialogueType dt) {
    	sendDialogue(p, dialogues, e, dt, null);
    }
    
    /**
     * Sends a dialogue.
     * @param p The player
     * @param dialogues The dialogues to be sent.
     * @param dt The type of dialogue.
     * @param nd The following dialogue.
     */
    public static void sendDialogue(Player p, String[] dialogues, DialogueType dt, NextDialogue nd) {
    	sendDialogue(p, dialogues, Emotion.CALM, dt, nd);
    }
	
    /**
     * Sends a dialogue.
     * @param p The player
     * @param dialogues The dialogues to be sent.
     * @param e The emotion.
     * @param dt The type of dialogue.
     * @param nd The following dialogue.
     */
	public static void sendDialogue(Player p, String[] dialogues, Emotion e, DialogueType dt, NextDialogue nd) {
		p.setNextDialogue(nd);
		switch (dt) {
		case NPC:
			sendNPCChat(p, e, dialogues);
			break;
		case PLAYER:
			sendPlayerChat(p, e, dialogues);
			break;
		case OPTION:
			sendOptions(p, dialogues);
			break;
		case STATEMENT:
			sendStatement(p, dialogues);
			break;
		}
	}
	
	/**
	 * Closes the dialogues.
	 * @param p The player.
	 */
	public static void closeDialogues(Player p) {
		p.setNextDialogue(null);
		p.getInteractingEntity().resetInteractingEntity();
		p.resetInteractingEntity();
	}
	
	/**
	 * Sends a dialogue with an NPC chatting.
	 * @param p The player.
	 * @param e The emotion.
	 * @param dialogues The dialogues to be sent.
	 */
	public static void sendNPCChat(Player p, Emotion e, String... dialogues) {
		NPC npc = (NPC) World.getWorld().getNPCs().get(((NPC)p.getInteractingEntity()).getDefinition().getId());
        int id = NPC_IDS[dialogues.length-1];
		p.getActionSender().sendChatInterface(id);
        p.getActionSender().sendString(id + 2, npc.getDefinition().getName());
        p.getActionSender().sendDialogueAnimation(id + 1, e.getId());
        p.getActionSender().sendNPCDialogueHead(npc.getIndex(), id + 1);
		for (int i = 0; i &lt; dialogues.length; i++)
			p.getActionSender().sendString(id + 3 + i, dialogues[i]);
	}
	
	/**
	 * Sends a dialogue with the player chatting.
	 * @param p The player.
	 * @param e The emotion.
	 * @param dialogues The dialogues to be sent.
	 */
	public static void sendPlayerChat(Player p, Emotion e, String... dialogues) {
		int id = PLAYER_IDS[dialogues.length-1];
		p.getActionSender().sendString(id + 2, p.getName());
		p.getActionSender().sendDialogueAnimation(id + 1, e.getId());
		p.getActionSender().sendPlayerDialogueHead(id + 1);
		p.getActionSender().sendChatInterface(id);
		for (int i = 0; i &lt; dialogues.length; i++)
			p.getActionSender().sendString(id + 3 + i, dialogues[i]);
	}
	
	/**
	 * Sends options for the player to click.
	 * @param p The player.
	 * @param options The options.
	 */
	public static void sendOptions(Player p, String... options) {
		int id = OPTION_IDS[options.length-1];
		p.getActionSender().sendString(id + 1, &quot;Select an Option&quot;);
		for (int i = 0; i &lt; options.length; i++)
			p.getActionSender().sendString(id + 2 + i, options[0]);
		p.getActionSender().sendChatInterface(id);
	}
	
	/**
	 * Sends a statement.
	 * @param p The player.
	 * @param lines The lines of dialogue for the statement.
	 */
	public static void sendStatement(Player p, String... lines) {
		int id = STATEMENT_IDS[lines.length-1];
		for (int i = 0; i &lt; lines.length; i++)
			p.getActionSender().sendString(id + 1 + i, lines[i]);
		p.getActionSender().sendChatInterface(id);
	}

}

[/CODE]

[CODE]package org.hyperion.rs2.model.dialogues;

import org.hyperion.rs2.model.Player;

/**
 * An interface for handling the next dialogue after pressing continue.
 * 
 * @author Thock321
 *
 */
public interface NextDialogue {
	
	/**
	 * Handles the next dialogue.
	 * @param p The player.
	 */
	public abstract void nextDialogue(Player p);

}
[/CODE]

Player.java
[CODE]
	/**
	 * The option the player clicked
	 */
	
	private int optionClicked = -1;
	
	/**
	 * @return the option clicked
	 */
	
	public int getOptionClicked() {
		return optionClicked;
	}
	
	/**
	 * Sets the option clicked
	 * @param i the option clicked
	 */
	
	public void setOptionClicked(int i) {
		optionClicked = i;
	}
	
	/**
	 * The next dialogue
	 */
	private NextDialogue nextDialogue;
	
	/**
	 * @returns nextDialogue, the next dialogue
	 */
	public NextDialogue getNextDialogue() {
		return nextDialogue;
	}
	
	/**
	 * Sets the next dialogue
	 */
	public void setNextDialogue(NextDialogue nd) {
		nextDialogue = nd;
	}[/CODE]

[CODE]package org.hyperion.rs2.packet;

import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.net.Packet;

/**
 * Handles what happens after clicking &quot;Click here to continue&quot; in a dialogue
 * @author Albert&#39;s_Computer
 *
 */
public class ContinueDialoguePacketHandler implements PacketHandler {

	@Override
	public void handle(Player player, Packet packet) {
    	if (player.getNextDialogue() != null)
    		player.getNextDialogue().nextDialogue(player);
    	else
    		player.getActionSender().closeInterfaces();
	}

}
[/CODE]

ActionButtonPacketHandler
[code]	public static boolean handleOptions(Player p, int button) {
		switch (button) {
		case 2461:
		case 2471:
		case 2482:
		case 2494:
			p.setOptionClicked(1);
			if (p.getNextDialogue() != null) {
				p.getNextDialogue().nextDialogue(p);
				return true;
			}
			break;
		case 2462:
		case 2472:
		case 2483:
		case 2495:
			p.setOptionClicked(2);
			if (p.getNextDialogue() != null) {
				p.getNextDialogue().nextDialogue(p);
				return true;
			}
			break;
		case 2473:
		case 2484:
		case 2496:
			p.setOptionClicked(3);
			if (p.getNextDialogue() != null) {
				p.getNextDialogue().nextDialogue(p);
				return true;
			}
			break;
		case 2485:
		case 2497:
			p.setOptionClicked(4);
			if (p.getNextDialogue() != null) {
				p.getNextDialogue().nextDialogue(p);
				return true;
			}
			break;
		case 2498:
			p.setOptionClicked(5);
			if (p.getNextDialogue() != null) {
				p.getNextDialogue().nextDialogue(p);
				return true;
			}
			break;
		}
		switch (p.getOptionClicked()) {
		
		}
		return false;
	}[/code]

configuration.cfg
[CODE]
#	Continue dialogue
packetHandlers[40]: org.hyperion.rs2.packet.ContinueDialoguePacketHandler[/CODE]

Example of usage:
[CODE]		public static void sendDialogue(Player p) {
			DialogueHandler.sendDialogue(p, new String[] {&quot;Hello.  Nice day, isn&#39;t it?&quot;}, DialogueType.NPC, new NextDialogue() {

				@Override
				public void nextDialogue(Player p) {
					
					DialogueHandler.sendDialogue(p, new String[] {&quot;Yes, indeed.&quot;, &quot;No, it is not.&quot;}, DialogueType.OPTION, new NextDialogue() {

						@Override
						public void nextDialogue(Player p) {
							DialogueHandler.sendDialogue(p, p.getOptionClicked() == 1 ? new String[] {&quot;Yes, indeed.&quot;} : new String[] {&quot;No, it is not.&quot;}, 
									DialogueType.PLAYER);
						}
						
					});
				}
				
			});
		}[/CODE]

Also credits to here: [url=http://www.rune-server.org/runescape-development/rs2-server/tutorials/328917-hyperion-dialogues.html]http://www.rune-server.org/runescape-development/rs2-server/tutorials/328917-hyperion-dialogues.html[/url]
and here:
[url=http://www.rune-server.org/runescape-development/rs2-server/snippets/455694-hyperion-dialogue-system.html#post3730309]http://www.rune-server.org/runescape-development/rs2-server/snippets/455694-hyperion-dialogue-system.html#post3730309[/url]

If you need the ActionSender methods:
[code]	public ActionSender sendDialogueAnimation(int interfaceId, int animId) {
        PacketBuilder bldr = new PacketBuilder(200);
        bldr.putShort(animId);
        bldr.putShort(interfaceId);
        player.write(bldr.toPacket());
        return this;
    }
	
	public ActionSender sendChatInterface(int id) {
		PacketBuilder bldr = new PacketBuilder(164);
		bldr.putLEShort(id);
		player.write(bldr.toPacket());
		return this;
	}
     
    public ActionSender sendPlayerDialogueHead(int interfaceId) {
        PacketBuilder bldr = new PacketBuilder(185);
        bldr.putLEShortA(interfaceId);
        player.write(bldr.toPacket());
        return this;
    }
     
    public ActionSender sendNPCDialogueHead(int npcId, int interfaceId) {
        PacketBuilder bldr = new PacketBuilder(75);
        bldr.putLEShortA(npcId);
        bldr.putLEShortA(interfaceId);
        player.write(bldr.toPacket());
        return this;
    }[/code]</description>
    
    <lastBuildDate>Sat, 01 Dec 2012 19:55:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Hyperion] Dialogue System</title>
        <dc:creator><![CDATA[@Wizard_jesse Wizard jesse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wizard_jesse">@Wizard_jesse</a> wrote:</p>
          <blockquote>
              <p>Nice i like it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396/2</link>
        <pubDate>Sat, 01 Dec 2012 19:55:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-470396-2</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396.rss">[Hyperion] Dialogue System</source>
      </item>
      <item>
        <title>[Hyperion] Dialogue System</title>
        <dc:creator><![CDATA[@thock321 thock321]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thock321">@thock321</a> wrote:</p>
          <blockquote>
              <p>Thanks to Harlan for the idea of using an interface to continue dialogues, allowing the handling of everything that happens in one class.</p>
<p>[CODE]package org.hyperion.rs2.model.dialogues;</p>
<p>import org.hyperion.rs2.model.Player;<br>
import org.hyperion.rs2.model.World;<br>
import org.hyperion.rs2.model.npc.NPC;</p>
<p>/**</p>
<ul>
<li>A class to handle dialogues.</li>
<li>
<span class="mention">@author</span> Thock321</li>
<li>
</li>
</ul>
<p>*/<br>
public class DialogueHandler {</p>
<pre><code>private static int[] NPC_IDS = {4882, 4887, 4893, 4900};
private static int[] PLAYER_IDS = {968, 973, 979, 986};
private static int[] OPTION_IDS = {2459, 2469, 2480, 2492};
private static int[] STATEMENT_IDS = {356, 359, 363, 368, 374};

/**
 * The different dialogue types.
 * @author Thock321
 *
 */
public enum DialogueType {
	NPC,
	PLAYER,
	OPTION,
	STATEMENT;
}

/**
 * An enum containing dialogue emotions.
 * @author Thock321
 *
 */
public enum Emotion {
    HAPPY(588), 
    CALM(589), 
    CALM_CONTINUED(590),
	DEFAULT(591),
	EVIL(592),
	EVIL_CONTINUED(593),
	DELIGHTED_EVIL(594), 
	ANNOYED(595), 
	DISTRESSED(596),
	DISTRESSED_CONTINUED(597),
	NEAR_TEARS(598), SAD(599),
	DISORIENTED_LEFT(600),
	DISORIENTED_RIGHT(601),
	UNINTERESTED(602), 
	SLEEPY(603), 
	PLAIN_EVIL(604), 
	LAUGHING(605),
	LONGER_LAUGHING(606),
	LONGER_LAUGHING_2(607), 
	LAUGHING_2(608),
	EVIL_LAUGH_SHORT(609), 
	SLIGHTLY_SAD(610), 
	VERY_SAD(611),
	OTHER(612), 
	NEAR_TEARS_2(613),
	ANGRY_1(614), 
	ANGRY_2(615),
	ANGRY_3(616), 
	ANGRY_4(617);
    
    Emotion(int id) {
        this.id = id;
    }
    
    int id;
    
    public int getId() {
        return id;
    }
}

/**
 * Sends a dialogue.
 * @param p The player.
 * @param dialogues The dialogues to be sent.
 * @param dt The type of dialogue.
 */
public static void sendDialogue(Player p, String[] dialogues, DialogueType dt) {
	sendDialogue(p, dialogues, Emotion.CALM, dt, null);
}

/**
 * Sends a dialogue.
 * @param p The player.
 * @param dialogues The dialogues to be sent.
 * @param e The emotion.
 * @param dt The type of dialogue.
 */
public static void sendDialogue(Player p, String[] dialogues, Emotion e, DialogueType dt) {
	sendDialogue(p, dialogues, e, dt, null);
}

/**
 * Sends a dialogue.
 * @param p The player
 * @param dialogues The dialogues to be sent.
 * @param dt The type of dialogue.
 * @param nd The following dialogue.
 */
public static void sendDialogue(Player p, String[] dialogues, DialogueType dt, NextDialogue nd) {
	sendDialogue(p, dialogues, Emotion.CALM, dt, nd);
}

/**
 * Sends a dialogue.
 * @param p The player
 * @param dialogues The dialogues to be sent.
 * @param e The emotion.
 * @param dt The type of dialogue.
 * @param nd The following dialogue.
 */
public static void sendDialogue(Player p, String[] dialogues, Emotion e, DialogueType dt, NextDialogue nd) {
	p.setNextDialogue(nd);
	switch (dt) {
	case NPC:
		sendNPCChat(p, e, dialogues);
		break;
	case PLAYER:
		sendPlayerChat(p, e, dialogues);
		break;
	case OPTION:
		sendOptions(p, dialogues);
		break;
	case STATEMENT:
		sendStatement(p, dialogues);
		break;
	}
}

/**
 * Closes the dialogues.
 * @param p The player.
 */
public static void closeDialogues(Player p) {
	p.setNextDialogue(null);
	p.getInteractingEntity().resetInteractingEntity();
	p.resetInteractingEntity();
}

/**
 * Sends a dialogue with an NPC chatting.
 * @param p The player.
 * @param e The emotion.
 * @param dialogues The dialogues to be sent.
 */
public static void sendNPCChat(Player p, Emotion e, String... dialogues) {
	NPC npc = (NPC) World.getWorld().getNPCs().get(((NPC)p.getInteractingEntity()).getDefinition().getId());
    int id = NPC_IDS[dialogues.length-1];
	p.getActionSender().sendChatInterface(id);
    p.getActionSender().sendString(id + 2, npc.getDefinition().getName());
    p.getActionSender().sendDialogueAnimation(id + 1, e.getId());
    p.getActionSender().sendNPCDialogueHead(npc.getIndex(), id + 1);
	for (int i = 0; i &lt; dialogues.length; i++)
		p.getActionSender().sendString(id + 3 + i, dialogues[i]);
}

/**
 * Sends a dialogue with the player chatting.
 * @param p The player.
 * @param e The emotion.
 * @param dialogues The dialogues to be sent.
 */
public static void sendPlayerChat(Player p, Emotion e, String... dialogues) {
	int id = PLAYER_IDS[dialogues.length-1];
	p.getActionSender().sendString(id + 2, p.getName());
	p.getActionSender().sendDialogueAnimation(id + 1, e.getId());
	p.getActionSender().sendPlayerDialogueHead(id + 1);
	p.getActionSender().sendChatInterface(id);
	for (int i = 0; i &lt; dialogues.length; i++)
		p.getActionSender().sendString(id + 3 + i, dialogues[i]);
}

/**
 * Sends options for the player to click.
 * @param p The player.
 * @param options The options.
 */
public static void sendOptions(Player p, String... options) {
	int id = OPTION_IDS[options.length-1];
	p.getActionSender().sendString(id + 1, "Select an Option");
	for (int i = 0; i &lt; options.length; i++)
		p.getActionSender().sendString(id + 2 + i, options[0]);
	p.getActionSender().sendChatInterface(id);
}

/**
 * Sends a statement.
 * @param p The player.
 * @param lines The lines of dialogue for the statement.
 */
public static void sendStatement(Player p, String... lines) {
	int id = STATEMENT_IDS[lines.length-1];
	for (int i = 0; i &lt; lines.length; i++)
		p.getActionSender().sendString(id + 1 + i, lines[i]);
	p.getActionSender().sendChatInterface(id);
}
</code></pre>
<p>}</p>
<p>[/CODE]</p>
<p>[CODE]package org.hyperion.rs2.model.dialogues;</p>
<p>import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>An interface for handling the next dialogue after pressing continue.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Thock321</li>
<li>
</li>
</ul>
<p>*/<br>
public interface NextDialogue {</p>
<pre><code>/**
 * Handles the next dialogue.
 * @param p The player.
 */
public abstract void nextDialogue(Player p);
</code></pre>
<p>}<br>
[/CODE]</p>
<p>Player.java</p>
<pre><code class="lang-auto">	/**
	 * The option the player clicked
	 */
	
	private int optionClicked = -1;
	
	/**
	 * @return the option clicked
	 */
	
	public int getOptionClicked() {
		return optionClicked;
	}
	
	/**
	 * Sets the option clicked
	 * @param i the option clicked
	 */
	
	public void setOptionClicked(int i) {
		optionClicked = i;
	}
	
	/**
	 * The next dialogue
	 */
	private NextDialogue nextDialogue;
	
	/**
	 * @returns nextDialogue, the next dialogue
	 */
	public NextDialogue getNextDialogue() {
		return nextDialogue;
	}
	
	/**
	 * Sets the next dialogue
	 */
	public void setNextDialogue(NextDialogue nd) {
		nextDialogue = nd;
	}[/CODE]

[CODE]package org.hyperion.rs2.packet;

import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.net.Packet;

/**
 * Handles what happens after clicking "Click here to continue" in a dialogue
 * @author Albert's_Computer
 *
 */
public class ContinueDialoguePacketHandler implements PacketHandler {

	@Override
	public void handle(Player player, Packet packet) {
    	if (player.getNextDialogue() != null)
    		player.getNextDialogue().nextDialogue(player);
    	else
    		player.getActionSender().closeInterfaces();
	}

}</code></pre>
<p>ActionButtonPacketHandler</p>
<p>[code]	public static boolean handleOptions(Player p, int button) {<br>
switch (button) {<br>
case 2461:<br>
case 2471:<br>
case 2482:<br>
case 2494:<br>
p.setOptionClicked(1);<br>
if (p.getNextDialogue() != null) {<br>
p.getNextDialogue().nextDialogue§;<br>
return true;<br>
}<br>
break;<br>
case 2462:<br>
case 2472:<br>
case 2483:<br>
case 2495:<br>
p.setOptionClicked(2);<br>
if (p.getNextDialogue() != null) {<br>
p.getNextDialogue().nextDialogue§;<br>
return true;<br>
}<br>
break;<br>
case 2473:<br>
case 2484:<br>
case 2496:<br>
p.setOptionClicked(3);<br>
if (p.getNextDialogue() != null) {<br>
p.getNextDialogue().nextDialogue§;<br>
return true;<br>
}<br>
break;<br>
case 2485:<br>
case 2497:<br>
p.setOptionClicked(4);<br>
if (p.getNextDialogue() != null) {<br>
p.getNextDialogue().nextDialogue§;<br>
return true;<br>
}<br>
break;<br>
case 2498:<br>
p.setOptionClicked(5);<br>
if (p.getNextDialogue() != null) {<br>
p.getNextDialogue().nextDialogue§;<br>
return true;<br>
}<br>
break;<br>
}<br>
switch (p.getOptionClicked()) {</p>
<pre><code>	}
	return false;
}[/code]
</code></pre>
<p>configuration.cfg</p>
<p>[CODE]</p>
<h1>Continue dialogue</h1>
<p>packetHandlers[40]: org.hyperion.rs2.packet.ContinueDialoguePacketHandler[/CODE]</p>
<p>Example of usage:</p>
<p>[CODE]		public static void sendDialogue(Player p) {<br>
DialogueHandler.sendDialogue(p, new String[] {“Hello.  Nice day, isn’t it?”}, DialogueType.NPC, new NextDialogue() {</p>
<pre><code>			@Override
			public void nextDialogue(Player p) {
				
				DialogueHandler.sendDialogue(p, new String[] {"Yes, indeed.", "No, it is not."}, DialogueType.OPTION, new NextDialogue() {

					@Override
					public void nextDialogue(Player p) {
						DialogueHandler.sendDialogue(p, p.getOptionClicked() == 1 ? new String[] {"Yes, indeed."} : new String[] {"No, it is not."}, 
								DialogueType.PLAYER);
					}
					
				});
			}
			
		});
	}[/CODE]
</code></pre>
<p>Also credits to here: <a href="http://www.rune-server.org/runescape-development/rs2-server/tutorials/328917-hyperion-dialogues.html" data-bbcode="true" rel="nofollow noopener">http://www.rune-server.org/runescape-development/rs2-server/tutorials/328917-hyperion-dialogues.html</a><br>
and here:<br>
<a href="http://www.rune-server.org/runescape-development/rs2-server/snippets/455694-hyperion-dialogue-system.html#post3730309" data-bbcode="true" rel="nofollow noopener">http://www.rune-server.org/runescape-development/rs2-server/snippets/455694-hyperion-dialogue-system.html#post3730309</a></p>
<p>If you need the ActionSender methods:</p>
<p>[code]	public ActionSender sendDialogueAnimation(int interfaceId, int animId) {<br>
PacketBuilder bldr = new PacketBuilder(200);<br>
bldr.putShort(animId);<br>
bldr.putShort(interfaceId);<br>
player.write(bldr.toPacket());<br>
return this;<br>
}</p>
<pre><code>public ActionSender sendChatInterface(int id) {
	PacketBuilder bldr = new PacketBuilder(164);
	bldr.putLEShort(id);
	player.write(bldr.toPacket());
	return this;
}
 
public ActionSender sendPlayerDialogueHead(int interfaceId) {
    PacketBuilder bldr = new PacketBuilder(185);
    bldr.putLEShortA(interfaceId);
    player.write(bldr.toPacket());
    return this;
}
 
public ActionSender sendNPCDialogueHead(int npcId, int interfaceId) {
    PacketBuilder bldr = new PacketBuilder(75);
    bldr.putLEShortA(npcId);
    bldr.putLEShortA(interfaceId);
    player.write(bldr.toPacket());
    return this;
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396/1</link>
        <pubDate>Thu, 29 Nov 2012 15:37:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-470396-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-dialogue-system/470396.rss">[Hyperion] Dialogue System</source>
      </item>
  </channel>
</rss>
