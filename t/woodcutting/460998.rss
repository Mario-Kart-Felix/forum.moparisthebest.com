<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Woodcutting</title>
    <link>https://forum.moparisthebest.com/t/woodcutting/460998</link>
    <description>Hey guys 

I am making this subject about woodcutting because I want the trees in my server never drop. How am I mean&#39;t to make it like this ? So they never fall down they keep cutting.

BASE : PROJECT INSANITY

Woodcutting.java

[code]
package server.model.players.skills;

import server.event.CycleEvent;
import server.event.CycleEventContainer;
import server.event.CycleEventHandler;
import server.model.objects.Object;
import server.model.players.AchievementManager;
import server.model.players.Achievements;
import server.model.players.Client;
import server.model.players.Player;
import server.model.players.PlayerHandler;
import server.util.Misc;

/**
 * @Author Null++
 */

public class Woodcutting {

        private Client c;

        public final int[][] Axe_Settings = { { 1351, 1, 1, 879 }, // Bronze
                        { 1349, 1, 2, 877 }, // Iron
                        { 1353, 6, 3, 875 }, // Steel
                        { 1361, 6, 4, 873 }, // Black
                        { 1355, 21, 5, 871 }, // Mithril
                        { 1357, 31, 6, 869 }, // Addy
                        { 1359, 41, 7, 867 }, // Rune
                        { 6739, 61, 8, 2846 }, // Dragon
                        { 13661, 41, 8, 10251 } // Adze
        };

        public final int[][] Tree_Settings = {
                        { 1276, 1342, 1, 25, 1511, 45, 100 }, // Tree
                        { 1278, 1342, 1, 25, 1511, 45, 100 }, // Tree
                        { 1286, 1342, 1, 25, 1511, 45, 100 }, // Dead Tree
                        { 1281, 1356, 15, 38, 1521, 11, 20 }, // Oak
                        { 1308, 7399, 30, 68, 1519, 11, 8 }, // Willow
                        { 5552, 7399, 30, 68, 1519, 11, 8 }, // Willow
                        { 1307, 1343, 45, 100, 1517, 48, 8 }, // Maple
                        { 1309, 7402, 60, 175, 1515, 79, 5 }, // Yew
                        { 1306, 7401, 75, 250, 1513, 150, 3 }, // Magic
                        { 5551, 7399, 30, 68, 1519, 11, 8 }, // Willow
                        { 5553, 7399, 30, 68, 1519, 11, 8 } // Willow
        };

        int a = -1;

        public Woodcutting(Client c) {
                this.c = c;
        }

        public void startWoodcutting(final int j, final int x, final int y,
                        final int type) {
                if (c.isWc)
                        return;
                if (c.wcing)
                        return;
                int wcLevel = c.playerLevel[8];
                a = -1;
                c.turnPlayerTo(x, y);
                if (Tree_Settings[j][2] &gt; wcLevel) {
                        c.sendMessage(&quot;You need a Woodcutting level of &quot;
                                        + Tree_Settings[j][2] + &quot; to cut this tree.&quot;);
                        return;
                }
                for (int i = 0; i &lt; Axe_Settings.length; i++) {
                        if (c.getItems().playerHasItem(Axe_Settings[i][0])
                                        || c.playerEquipment[Player.playerWeapon] == Axe_Settings[i][0]) {
                                if (Axe_Settings[i][1] &lt;= wcLevel) {
                                        a = i;
                                }
                        }
                }
                if (a == -1) {
                        c.sendMessage(&quot;You need an axe to cut this tree.&quot;);
                        return;
                }
                if (c.getItems().freeSlots() &lt; 1) {
                        c.sendMessage(&quot;You do not have enough inventory slots to do that.&quot;);
                        return;
                }
                c.startAnimation(Axe_Settings[a][3]);
                c.isWc = true;
                c.treeX = x;
                c.treeY = y;
                c.wcing = true;
                CycleEventHandler.getSingleton().addEvent(c, new CycleEvent() {
                        @Override
                        public void execute(CycleEventContainer container) {
                                if (!c.isWc) {
                                        container.stop();
                                        return;
                                }
                                if (c.isWc)
                                        c.startAnimation(Axe_Settings[a][3]);
                                if (c.getItems().freeSlots() &lt; 1) {
                                        c.sendMessage(&quot;You have ran out of inventory slots.&quot;);
                                        container.stop();
                                }
                                int xp = Tree_Settings[j][3];
                                if (c.getItems().playerHasEquipped(10933)) {
                                        xp = (int) (xp * 1.002);
                                }
                                if (c.getItems().playerHasEquipped(10939)) {
                                        xp = (int) (xp * 1.008);
                                }
                                if (c.getItems().playerHasEquipped(10940)) {
                                        xp = (int) (xp * 1.006);
                                }
                                if (c.getItems().playerHasEquipped(10941)) {
                                        xp = (int) (xp * 1.004);
                                }
                                if (c.isWc) {
                                        c.getItems().addItem(Tree_Settings[j][4], 1);
                                        c.getPA().addSkillXP(xp, 8);
                                }
                                if (c.getItems().freeSlots() &lt; 1) {
                                        c.sendMessage(&quot;You have ran out of inventory slots.&quot;);
                                        container.stop();
                                }
                                if (c.isWc)
                                        birdNests();
                                if (c.getItems().freeSlots() &lt; 1) {
                                        c.sendMessage(&quot;You have ran out of inventory slots.&quot;);
                                        container.stop();
                                }
                                if (Misc.random(100) &lt;= Tree_Settings[j][6]) {
                                        cutDownTree(Tree_Settings[j][5], x, y, type,
                                                        Tree_Settings[j][1], Tree_Settings[j][0]);
                                        container.stop();
                                }
                        }

                        @Override
                        public void stop() {
                                c.getPA().removeAllWindows();
                                c.startAnimation(65535);
                                c.isWc = false;
                                c.treeX = 0;
                                c.treeY = 0;
                                c.wcing = false;
                                return;
                        }
                }, getTimer(j, a, wcLevel));
        }

        public int getTimer(int b, int c, int level) {
                double timer = ((Tree_Settings[b][2] * 2) + 20 + Misc.random(20))
                                - ((Axe_Settings[c][2] * (Axe_Settings[c][2] * 0.75)) + level);
                if (timer &lt; 3.0) {
                        return 3;
                } else {
                        return (int) timer;
                }
        }

        public void birdNests() {
                if (Misc.random(100) &lt; 5) {
                        c.getItems().addItem(5070, 1);
                }
        }

        public void cutDownTree(int respawnTime, int x, int y, int type, int i,
                        int j) {
                new Object(i, x, y, 0, type, 10, j, respawnTime);
                for (int t = 0; t &lt; PlayerHandler.players.length; t++) {
                        if (PlayerHandler.players[t] != null) {
                                if (PlayerHandler.players[t].treeX == x
                                                &amp;&amp; PlayerHandler.players[t].treeY == y) {
                                        PlayerHandler.players[t].isWc = false;
                                        PlayerHandler.players[t].startAnimation(65535);
                                        PlayerHandler.players[t].treeX = 0;
                                        PlayerHandler.players[t].treeY = 0;
                                        AchievementManager.increase(c, Achievements.Timberland);
                                }
                        }
                }
        }
}[/code]</description>
    
    <lastBuildDate>Fri, 21 Sep 2012 12:10:19 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/woodcutting/460998.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Woodcutting</title>
        <dc:creator><![CDATA[@The_Web_Guy The Web Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_web_guy">@The_Web_Guy</a> wrote:</p>
          <blockquote>
              <p>I looked at my DELTA source (didn’t have a PI one handy) and I found a couple things that can help. Under each log functions at the end I found…</p>
<p><code>
WCTimer = TreeTimer;
TreeHP--;</code></p>
<p>I also found this…</p>
<p><code>if(TreeHP == 0) {
AddGlobalObj(TreeX, TreeY, 1341, 0, 10);
sendMessage("This tree has run out of logs");
ResetWC();
return false;
}</code></p>
<p>And finally, this.</p>
<pre><code class="lang-auto"></code></pre>
<p>Pretty sure if you can find if(WCTimer &lt;= 0) {, you can easily change it to fix it, currently it means if WCTimer is less than, or equal to 0, proceed.<br>
Flip it and you eliminate the problem…</p>
<pre><code class="lang-auto">if(WCTimer &gt;= 0) {</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/woodcutting/460998/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/woodcutting/460998/2</link>
        <pubDate>Fri, 21 Sep 2012 12:10:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-460998-2</guid>
        <source url="https://forum.moparisthebest.com/t/woodcutting/460998.rss">Woodcutting</source>
      </item>
      <item>
        <title>Woodcutting</title>
        <dc:creator><![CDATA[@Joseph69 Joseph69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/joseph69">@Joseph69</a> wrote:</p>
          <blockquote>
              <p>Hey guys</p>
<p>I am making this subject about woodcutting because I want the trees in my server never drop. How am I mean’t to make it like this ? So they never fall down they keep cutting.</p>
<p>BASE : PROJECT INSANITY</p>
<p>Woodcutting.java</p>
<p>[code]<br>
package server.model.players.skills;</p>
<p>import server.event.CycleEvent;<br>
import server.event.CycleEventContainer;<br>
import server.event.CycleEventHandler;<br>
import server.model.objects.Object;<br>
import server.model.players.AchievementManager;<br>
import server.model.players.Achievements;<br>
import server.model.players.Client;<br>
import server.model.players.Player;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;</p>
<p>/**</p>
<ul>
<li>
<span class="mention">@Author</span> Null++<br>
*/</li>
</ul>
<p>public class Woodcutting {</p>
<pre><code>    private Client c;

    public final int[][] Axe_Settings = { { 1351, 1, 1, 879 }, // Bronze
                    { 1349, 1, 2, 877 }, // Iron
                    { 1353, 6, 3, 875 }, // Steel
                    { 1361, 6, 4, 873 }, // Black
                    { 1355, 21, 5, 871 }, // Mithril
                    { 1357, 31, 6, 869 }, // Addy
                    { 1359, 41, 7, 867 }, // Rune
                    { 6739, 61, 8, 2846 }, // Dragon
                    { 13661, 41, 8, 10251 } // Adze
    };

    public final int[][] Tree_Settings = {
                    { 1276, 1342, 1, 25, 1511, 45, 100 }, // Tree
                    { 1278, 1342, 1, 25, 1511, 45, 100 }, // Tree
                    { 1286, 1342, 1, 25, 1511, 45, 100 }, // Dead Tree
                    { 1281, 1356, 15, 38, 1521, 11, 20 }, // Oak
                    { 1308, 7399, 30, 68, 1519, 11, 8 }, // Willow
                    { 5552, 7399, 30, 68, 1519, 11, 8 }, // Willow
                    { 1307, 1343, 45, 100, 1517, 48, 8 }, // Maple
                    { 1309, 7402, 60, 175, 1515, 79, 5 }, // Yew
                    { 1306, 7401, 75, 250, 1513, 150, 3 }, // Magic
                    { 5551, 7399, 30, 68, 1519, 11, 8 }, // Willow
                    { 5553, 7399, 30, 68, 1519, 11, 8 } // Willow
    };

    int a = -1;

    public Woodcutting(Client c) {
            this.c = c;
    }

    public void startWoodcutting(final int j, final int x, final int y,
                    final int type) {
            if (c.isWc)
                    return;
            if (c.wcing)
                    return;
            int wcLevel = c.playerLevel[8];
            a = -1;
            c.turnPlayerTo(x, y);
            if (Tree_Settings[j][2] &gt; wcLevel) {
                    c.sendMessage("You need a Woodcutting level of "
                                    + Tree_Settings[j][2] + " to cut this tree.");
                    return;
            }
            for (int i = 0; i &lt; Axe_Settings.length; i++) {
                    if (c.getItems().playerHasItem(Axe_Settings[i][0])
                                    || c.playerEquipment[Player.playerWeapon] == Axe_Settings[i][0]) {
                            if (Axe_Settings[i][1] &lt;= wcLevel) {
                                    a = i;
                            }
                    }
            }
            if (a == -1) {
                    c.sendMessage("You need an axe to cut this tree.");
                    return;
            }
            if (c.getItems().freeSlots() &lt; 1) {
                    c.sendMessage("You do not have enough inventory slots to do that.");
                    return;
            }
            c.startAnimation(Axe_Settings[a][3]);
            c.isWc = true;
            c.treeX = x;
            c.treeY = y;
            c.wcing = true;
            CycleEventHandler.getSingleton().addEvent(c, new CycleEvent() {
                    @Override
                    public void execute(CycleEventContainer container) {
                            if (!c.isWc) {
                                    container.stop();
                                    return;
                            }
                            if (c.isWc)
                                    c.startAnimation(Axe_Settings[a][3]);
                            if (c.getItems().freeSlots() &lt; 1) {
                                    c.sendMessage("You have ran out of inventory slots.");
                                    container.stop();
                            }
                            int xp = Tree_Settings[j][3];
                            if (c.getItems().playerHasEquipped(10933)) {
                                    xp = (int) (xp * 1.002);
                            }
                            if (c.getItems().playerHasEquipped(10939)) {
                                    xp = (int) (xp * 1.008);
                            }
                            if (c.getItems().playerHasEquipped(10940)) {
                                    xp = (int) (xp * 1.006);
                            }
                            if (c.getItems().playerHasEquipped(10941)) {
                                    xp = (int) (xp * 1.004);
                            }
                            if (c.isWc) {
                                    c.getItems().addItem(Tree_Settings[j][4], 1);
                                    c.getPA().addSkillXP(xp, 8);
                            }
                            if (c.getItems().freeSlots() &lt; 1) {
                                    c.sendMessage("You have ran out of inventory slots.");
                                    container.stop();
                            }
                            if (c.isWc)
                                    birdNests();
                            if (c.getItems().freeSlots() &lt; 1) {
                                    c.sendMessage("You have ran out of inventory slots.");
                                    container.stop();
                            }
                            if (Misc.random(100) &lt;= Tree_Settings[j][6]) {
                                    cutDownTree(Tree_Settings[j][5], x, y, type,
                                                    Tree_Settings[j][1], Tree_Settings[j][0]);
                                    container.stop();
                            }
                    }

                    @Override
                    public void stop() {
                            c.getPA().removeAllWindows();
                            c.startAnimation(65535);
                            c.isWc = false;
                            c.treeX = 0;
                            c.treeY = 0;
                            c.wcing = false;
                            return;
                    }
            }, getTimer(j, a, wcLevel));
    }

    public int getTimer(int b, int c, int level) {
            double timer = ((Tree_Settings[b][2] * 2) + 20 + Misc.random(20))
                            - ((Axe_Settings[c][2] * (Axe_Settings[c][2] * 0.75)) + level);
            if (timer &lt; 3.0) {
                    return 3;
            } else {
                    return (int) timer;
            }
    }

    public void birdNests() {
            if (Misc.random(100) &lt; 5) {
                    c.getItems().addItem(5070, 1);
            }
    }

    public void cutDownTree(int respawnTime, int x, int y, int type, int i,
                    int j) {
            new Object(i, x, y, 0, type, 10, j, respawnTime);
            for (int t = 0; t &lt; PlayerHandler.players.length; t++) {
                    if (PlayerHandler.players[t] != null) {
                            if (PlayerHandler.players[t].treeX == x
                                            &amp;&amp; PlayerHandler.players[t].treeY == y) {
                                    PlayerHandler.players[t].isWc = false;
                                    PlayerHandler.players[t].startAnimation(65535);
                                    PlayerHandler.players[t].treeX = 0;
                                    PlayerHandler.players[t].treeY = 0;
                                    AchievementManager.increase(c, Achievements.Timberland);
                            }
                    }
            }
    }
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/woodcutting/460998/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/woodcutting/460998/1</link>
        <pubDate>Fri, 21 Sep 2012 11:03:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-460998-1</guid>
        <source url="https://forum.moparisthebest.com/t/woodcutting/460998.rss">Woodcutting</source>
      </item>
  </channel>
</rss>
