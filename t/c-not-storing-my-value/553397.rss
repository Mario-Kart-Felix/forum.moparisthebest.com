<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++]Not storing my value?</title>
    <link>https://forum.moparisthebest.com/t/c-not-storing-my-value/553397</link>
    <description>Edit: Nevermind this... had fudgeed up my overloaded [] operator... Caused this issue.

[s]Alright, so I&#39;ve got a project for my CS2 course that I&#39;m having an issue with. Our goal was to create an ADT for a &quot;big int&quot;, a bigint being an array of single digit numbers to be read as a whole number. I&#39;ve tested all of my constructors and they seem to work fine according to the test files we were provided. I moved on to the next step which is overloading the + operator allowing addition between bigints. It seems to work fine minus not storing the first digit into the array... Does anyone know why?

Here&#39;s the overloaded + operator:
[code=cpp]bigint bigint::operator+(const bigint&amp; rhs) {

	// initialize result
	bigint result;
	// initialize carry to 0
	int carry = 0;
	for (int i = 0; i &lt; MAX_SIZE; ++i) {
		if (carry &gt; 0) {                                                   // Carry is greater than zero. Add carry to the index.
			std::cout &lt;&lt; &quot;Sir, we&#39;ve obtained the carry.&quot; &lt;&lt; std::endl;
			result.intArray[i] = (intArray[i] + rhs.intArray[i]) + carry;  // set result[i] to (rhs.intArray[i] + intArray[i]) + carry
			if (result.intArray[i] &lt; 9) {                                  // if the result of the the indicies values + carry is less than 9
				carry = 0;                                                 // reset carry to 0
			}
		} else {                                                           // since carry was not greater than 0 then 
			result.intArray[i] = intArray[i] + rhs.intArray[i];            // set result to rhs.intArray[i] + intArray[i]
		}

		if (result.intArray[i] &gt; 9) {	                                  // if the value in the current result index is greater than 9 then we		
			carry = result.intArray[i] / 10;                              // set carry to the value in result / 10

			result.intArray[i] = result.intArray[i] % 10;                 // and set result&#39;s value to the % 10 of result.intArray[i]
		}

		std::cout &lt;&lt; &quot;Result[i] Value: &quot; &lt;&lt; result.intArray[i] &lt;&lt; std::endl;
		std::cout &lt;&lt; &quot;Carry Value: &quot; &lt;&lt; carry &lt;&lt; std::endl;
		std::cout &lt;&lt; &quot;Actual Result Value: &quot; &lt;&lt; result &lt;&lt; std::endl;
	}
	return result;
}
[/code]

Here&#39;s my main method:
[code=cpp]int main() {
	bigint left = 99;
	bigint right = 29;
	bigint result = left + right;

	std::cout &lt;&lt; &quot;Result: &quot; &lt;&lt; result &lt;&lt; std::endl;
	return 0;
}

}[/code]

And here&#39;s my output that I&#39;m getting:
[code]Result[i] Value: 8
Carry Value: 1
Actual Result Value: 0
Sir, we&#39;ve obtained the carry.
Result[i] Value: 2
Carry Value: 1
Actual Result Value: 20
Sir, we&#39;ve obtained the carry.
Result[i] Value: 1
Carry Value: 0
Actual Result Value: 120
Result: 120
Press any key to continue . . .[/code][/s]</description>
    
    <lastBuildDate>Fri, 25 Sep 2015 07:52:48 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-not-storing-my-value/553397.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++]Not storing my value?</title>
        <dc:creator><![CDATA[@Scully Scully]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scully">@Scully</a> wrote:</p>
          <blockquote>
              <p>Edit: Nevermind this… had fudgeed up my overloaded [] operator… Caused this issue.</p>
<p>[s]Alright, so I’ve got a project for my CS2 course that I’m having an issue with. Our goal was to create an ADT for a “big int”, a bigint being an array of single digit numbers to be read as a whole number. I’ve tested all of my constructors and they seem to work fine according to the test files we were provided. I moved on to the next step which is overloading the + operator allowing addition between bigints. It seems to work fine minus not storing the first digit into the array… Does anyone know why?</p>
<p>Here’s the overloaded + operator:</p>
<p>[code=cpp]bigint bigint::operator+(const bigint&amp; rhs) {</p>
<pre><code>// initialize result
bigint result;
// initialize carry to 0
int carry = 0;
for (int i = 0; i &lt; MAX_SIZE; ++i) {
	if (carry &gt; 0) {                                                   // Carry is greater than zero. Add carry to the index.
		std::cout &lt;&lt; "Sir, we've obtained the carry." &lt;&lt; std::endl;
		result.intArray[i] = (intArray[i] + rhs.intArray[i]) + carry;  // set result[i] to (rhs.intArray[i] + intArray[i]) + carry
		if (result.intArray[i] &lt; 9) {                                  // if the result of the the indicies values + carry is less than 9
			carry = 0;                                                 // reset carry to 0
		}
	} else {                                                           // since carry was not greater than 0 then 
		result.intArray[i] = intArray[i] + rhs.intArray[i];            // set result to rhs.intArray[i] + intArray[i]
	}

	if (result.intArray[i] &gt; 9) {	                                  // if the value in the current result index is greater than 9 then we		
		carry = result.intArray[i] / 10;                              // set carry to the value in result / 10

		result.intArray[i] = result.intArray[i] % 10;                 // and set result's value to the % 10 of result.intArray[i]
	}

	std::cout &lt;&lt; "Result[i] Value: " &lt;&lt; result.intArray[i] &lt;&lt; std::endl;
	std::cout &lt;&lt; "Carry Value: " &lt;&lt; carry &lt;&lt; std::endl;
	std::cout &lt;&lt; "Actual Result Value: " &lt;&lt; result &lt;&lt; std::endl;
}
return result;
</code></pre>
<p>}<br>
[/code]</p>
<p>Here’s my main method:</p>
<p>[code=cpp]int main() {<br>
bigint left = 99;<br>
bigint right = 29;<br>
bigint result = left + right;</p>
<pre><code>std::cout &lt;&lt; "Result: " &lt;&lt; result &lt;&lt; std::endl;
return 0;
</code></pre>
<p>}</p>
<p>}[/code]</p>
<p>And here’s my output that I’m getting:</p>
<p><code>Result[i] Value: 8
Carry Value: 1
Actual Result Value: 0
Sir, we've obtained the carry.
Result[i] Value: 2
Carry Value: 1
Actual Result Value: 20
Sir, we've obtained the carry.
Result[i] Value: 1
Carry Value: 0
Actual Result Value: 120
Result: 120
Press any key to continue . . .</code>[/s]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-not-storing-my-value/553397/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-not-storing-my-value/553397/1</link>
        <pubDate>Fri, 25 Sep 2015 07:52:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553397-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-not-storing-my-value/553397.rss">[C++]Not storing my value?</source>
      </item>
  </channel>
</rss>
