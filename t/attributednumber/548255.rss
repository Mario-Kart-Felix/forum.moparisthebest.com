<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>AttributedNumber</title>
    <link>https://forum.moparisthebest.com/t/attributednumber/548255</link>
    <description>I made this class because I thought it would come in handy for things like ProtectItem or RapidHead/RapidRestore prayer. I couldn&#39;t think of a better way to do this, so I made these couple of classes and thought they would come in handy for some other people.

The values are calculated from the beginning of the map to the end.

AttributedNumber.java
[code=java]
/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */
import java.util.LinkedHashMap;

/**
 * The {@code AttributedNumber} class allows linking 
 * multiple {@code Attribute} values for calculating
 * numbers only from the attributes linked.
 * 
 * @author Albert Beaupre
 */
public class AttributedNumber {
	
	private final LinkedHashMap&lt;String, Attribute&gt; values;		// A HashMap to hold to values for calculating
	private final double defaultNumber;					// The default value set to this AttributedNumber
	
	/**
	 * Contructs a new {@code AttributedNumber} from the specified {@code defaultNumber}.
	 * 
	 * @param defaultNumber the default number
	 */
	public AttributedNumber(double defaultNumber) {
		this.defaultNumber = defaultNumber;
		this.values = new LinkedHashMap&lt;&gt;();
	}
	
	/**
	 * Constructs a new {@code AttributedNumber} with a default number of 0.
	 */
	public AttributedNumber() {
		this(0);
	}
	
	/**
	 * Adds the specified {@code attribute} to this {@code AttributedNumber}
	 * for the specified {@code name}.
	 * 
	 * @param name the attribute name
	 * @param attribute the attribute associated with the name
	 */
	public void putAttribute(String name, Attribute attribute) {
		values.put(name, attribute);
	}
	
	/**
	 * Removes an {@code Attribute} from this {@code AttributedNumber},
	 * if possible, for the specified {@code name}
	 * 
	 * @param name the name of the attribute to remove
	 */
	public void removeAttribute(String name) {
		values.remove(name);
	}
	
	/**
	 * Returns the a divisible {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later divided
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the divisible attribute
	 * @param byValue the value to divide by
	 * @return the divisible attribute
	 */
	public Attribute divide(String name, double byValue) {
		Attribute atr = Attribute.divide(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the a multiplicable {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later multiplied
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the multiplicable attribute
	 * @param byValue the value to multiply by
	 * @return the multiplicable attribute
	 */
	public Attribute multiply(String name, double byValue) {
		Attribute atr = Attribute.multiply(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the an additive {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later added
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the additive attribute
	 * @param byValue the value to add by
	 * @return the additive attribute
	 */
	public Attribute add(String name, double byValue) {
		Attribute atr = Attribute.add(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the a subtractive {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later subtracted
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the subtractive attribute
	 * @param byValue the value to subtract by
	 * @return the subtractive attribute
	 */
	public Attribute subtract(String name, double byValue) {
		Attribute atr = Attribute.subtract(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the value of this {@code AttributedNumber}.
	 * 
	 * @return the value
	 */
	public double getValue() {
		double amount = defaultNumber;
		for (Attribute i : values.values()) 
			amount = i.getType().getCalculator().calculated(amount, i.getValue());
		return amount;
	}
	
	/**
	 * Returns the {@code int} value of this {@code AttributedNumber}.
	 * 
	 * @return the {@code int} value
	 */
	public int getIntValue() {
		return (int) getValue();
	}

	/**
	 * Returns the default number set to this {@code AttributedNumber}.
	 * 
	 * @return the default number
	 */
	public double getDefaultNumber() {
		return defaultNumber;
	}

}
[/code]

Attribute.java
[code=java]
/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */

/*
 * The {@code Attribute} class is used by the {@code AttributedNumber} to
 * hold the {@code AttributeType} and value for calculation.
 * 
 * @author Albert Beaupre
 */
public class Attribute {

	private final AttributeType type;				// The AttributeType assigned to this Attribute
	private final double value;					// The value assigned to this Attribute

	private Attribute(AttributeType type, double value) {
		this.type = type;
		this.value = value;
	}

	/**
	 * Creates a divisible {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to divide by
	 * @return the attribute object
	 */
	public static Attribute divide(double byValue) {
		return new Attribute(AttributeType.DIVIDE, byValue);
	}

	/**
	 * Creates a multiplicable {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to multiply by
	 * @return the attribute object
	 */
	public static Attribute multiply(double byValue) {
		return new Attribute(AttributeType.MULTIPLY, byValue);
	}

	/**
	 * Creates a additive {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to add by
	 * @return the attribute object
	 */
	public static Attribute add(double byValue) {
		return new Attribute(AttributeType.ADD, byValue);
	}

	/**
	 * Creates a subtractive {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to subtract by
	 * @return the attribute object
	 */
	public static Attribute subtract(double byValue) {
		return new Attribute(AttributeType.SUBTRACT, byValue);
	}

	/**
	 * Returns the {@code AttributeType} of this {@code Attribute}.
	 * 
	 * @return the attribute type
	 */
	public AttributeType getType() {
		return type;
	}

	/**
	 * Returns the value of this {@code Attribute}.
	 * 
	 * @return the value
	 */
	public double getValue() {
		return value;
	}

}
[/code]

AttributeType.java
[code=java]
/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */

/**
 * Represents the type of {@code Attribute} used for the {@code AttributedNumber}
 * implementation.
 * 
 * @author Albert Beaupre
 */
public enum AttributeType {
	DIVIDE((n, i) -&gt; n / i),
	MULTIPLY((n, i) -&gt; n * i),
	ADD((n, i) -&gt; n + i),
	SUBTRACT((n, i) -&gt; n - i);
	
	private final Calculator calculator;			// The calculator object used by the AttributeType
	
	private AttributeType(Calculator calculator) {
		this.calculator = calculator;
	}
	
	/**
	 * Returns the {@code Calculator} of this {@code AttributeType}.
	 * 
	 * @return calculator
	 */
	public Calculator getCalculator() {
		return calculator;
	}

	/**
	 * The {@code Calculator} interface is used by the {@code AttributeType}
	 * for calculations.
	 * 
	 * @author Albert Beaupre
	 */
	public static interface Calculator {
		double calculated(double n, double i);
	}
}
[/code]

This is an example of how to use the AttributedNumber
[code=java]
AttributedNumber num = new AttributedNumber(12);
num.multiply(&quot;MultiplyTest&quot;, 6);
num.divide(&quot;DivideTest&quot;, 2);
num.add(&quot;AddTest1&quot;, 64);
num.add(&quot;AddTest2&quot;, 100);

System.out.println(num.getValue());

num.removeAttribute(&quot;MultiplyTest&quot;);
System.out.println(num.getValue());
[/code]</description>
    
    <lastBuildDate>Tue, 16 Dec 2014 20:06:31 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/attributednumber/548255.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>[quote=“Int Bauk, post:5, topic:548255”]<code>int a = (b * c);</code></p>
<pre><code class="lang-auto"></code></pre>
<pre><code class="lang-auto"></code></pre>
<p>works like a charm  ;D</p>
<p>[code]public enum Operation {<br>
ADD,<br>
SUBTRACT,<br>
MULTIPLY,<br>
DIVIDE;<br>
}</p>
<pre><code>public void type(Operation operation, .....) {
	switch(operation) {
	case ADD:
		a = (b + c);
		break;
	case SUBTRACT:
		a = (b - c);
		break;
	case MULTIPLY:
		a = (b * c);
		break;
	case DIVIDE:
		a = (b / c);
		break;
	}
	
}[/code][/quote]
</code></pre>
<p>lol, that’s no different from declaring a variable and adding an expression. Handling variables with attributes comes in handy, trust me</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/6</link>
        <pubDate>Tue, 16 Dec 2014 20:06:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-6</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">[code]int d = (e / f);[/code]
[code]int g = (h - i);[/code]

works like a charm  ;D


[code]public enum Operation {
		ADD,
		SUBTRACT,
		MULTIPLY,
		DIVIDE;
	}
	
	public void type(Operation operation, .....) {
		switch(operation) {
		case ADD:
			a = (b + c);
			break;
		case SUBTRACT:
			a = (b - c);
			break;
		case MULTIPLY:
			a = (b * c);
			break;
		case DIVIDE:
			a = (b / c);
			break;
		}
		
	}[/code]</code></pre>
<pre><code class="lang-auto"></code></pre>
<pre><code class="lang-auto"></code></pre>
<p>works like a charm  ;D</p>
<p>[code]public enum Operation {<br>
ADD,<br>
SUBTRACT,<br>
MULTIPLY,<br>
DIVIDE;<br>
}</p>
<pre><code>public void type(Operation operation, .....) {
	switch(operation) {
	case ADD:
		a = (b + c);
		break;
	case SUBTRACT:
		a = (b - c);
		break;
	case MULTIPLY:
		a = (b * c);
		break;
	case DIVIDE:
		a = (b / c);
		break;
	}
	
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/5</link>
        <pubDate>Tue, 16 Dec 2014 16:51:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-5</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="548255">
<div class="title">
<div class="quote-controls"></div>
 lare69:</div>
<blockquote>
<p>a bit overkill in my opinion, also the values don’t have to be ordered so use a normal hashmap</p>
</blockquote>
</aside>
<p>The values need to be read the way they are placed in the map, that’s why I chose LinkedHashMap in the first place.</p>
<p>[quote=“Ashi, post:3, topic:548255”]Why would you make arithmetic functions?<br>
Take a look at: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html" rel="nofollow noopener">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html</a></p>
<p>If you really want a collection of objects, then fine use the hashmap.[/quote]<br>
I don’t think you guys even read or understand what is going on.</p>
<p>Here is an example of why I made this</p>
<pre><code class="lang-auto">@Override
public void onActivate(Actor actor) {
	if (actor.isPlayer()) {
		Player player = actor.getPlayer();
		player.getSettings().getHealthRestorationDelay().divide("RapidHeal", 2);
	}
}

@Override
public void onDeactivate(Actor actor) {
	if (actor.isPlayer()) {
		Player player = actor.getPlayer();
		player.getSettings().getHealthRestorationDelay().removeAttribute("RapidHeal");
	}
}</code></pre>
<p>What’s happening here is I am making the healthRestorationDelay inside my PlayerSettings class twice as fast by dividing the AttributedNumber value by 2 when I activate the RapidHeal prayer. When the prayer is deactivated, the attribute is removed and the delay is no longer being divided by 2.</p>
<p>It’s not smart to just divide the raw numbers by 2 on activation and then multiply it by later on deactivation. Things like that can cause some major delay bugs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/4</link>
        <pubDate>Fri, 05 Dec 2014 16:15:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-4</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>Why would you make arithmetic functions?<br>
Take a look at: <a href="https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html" rel="nofollow noopener">https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/AtomicInteger.html</a></p>
<p>If you really want a collection of objects, then fine use the hashmap.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/3</link>
        <pubDate>Fri, 05 Dec 2014 12:05:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-3</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>a bit overkill in my opinion, also the values don’t have to be ordered so use a normal hashmap</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/2</link>
        <pubDate>Fri, 05 Dec 2014 08:29:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-2</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
      <item>
        <title>AttributedNumber</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I made this class because I thought it would come in handy for things like ProtectItem or RapidHead/RapidRestore prayer. I couldn’t think of a better way to do this, so I made these couple of classes and thought they would come in handy for some other people.</p>
<p>The values are calculated from the beginning of the map to the end.</p>
<p>AttributedNumber.java</p>
<pre><code class="lang-auto">/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */
import java.util.LinkedHashMap;

/**
 * The {@code AttributedNumber} class allows linking 
 * multiple {@code Attribute} values for calculating
 * numbers only from the attributes linked.
 * 
 * @author Albert Beaupre
 */
public class AttributedNumber {
	
	private final LinkedHashMap&lt;String, Attribute&gt; values;		// A HashMap to hold to values for calculating
	private final double defaultNumber;					// The default value set to this AttributedNumber
	
	/**
	 * Contructs a new {@code AttributedNumber} from the specified {@code defaultNumber}.
	 * 
	 * @param defaultNumber the default number
	 */
	public AttributedNumber(double defaultNumber) {
		this.defaultNumber = defaultNumber;
		this.values = new LinkedHashMap&lt;&gt;();
	}
	
	/**
	 * Constructs a new {@code AttributedNumber} with a default number of 0.
	 */
	public AttributedNumber() {
		this(0);
	}
	
	/**
	 * Adds the specified {@code attribute} to this {@code AttributedNumber}
	 * for the specified {@code name}.
	 * 
	 * @param name the attribute name
	 * @param attribute the attribute associated with the name
	 */
	public void putAttribute(String name, Attribute attribute) {
		values.put(name, attribute);
	}
	
	/**
	 * Removes an {@code Attribute} from this {@code AttributedNumber},
	 * if possible, for the specified {@code name}
	 * 
	 * @param name the name of the attribute to remove
	 */
	public void removeAttribute(String name) {
		values.remove(name);
	}
	
	/**
	 * Returns the a divisible {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later divided
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the divisible attribute
	 * @param byValue the value to divide by
	 * @return the divisible attribute
	 */
	public Attribute divide(String name, double byValue) {
		Attribute atr = Attribute.divide(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the a multiplicable {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later multiplied
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the multiplicable attribute
	 * @param byValue the value to multiply by
	 * @return the multiplicable attribute
	 */
	public Attribute multiply(String name, double byValue) {
		Attribute atr = Attribute.multiply(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the an additive {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later added
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the additive attribute
	 * @param byValue the value to add by
	 * @return the additive attribute
	 */
	public Attribute add(String name, double byValue) {
		Attribute atr = Attribute.add(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the a subtractive {@code Attribute} and adds
	 * it to this {@code AttributedNumber} for the specified
	 * {@code name}. The default value is later subtracted
	 * by the specified {@code byValue}.
	 * 
	 * @param name the name of the subtractive attribute
	 * @param byValue the value to subtract by
	 * @return the subtractive attribute
	 */
	public Attribute subtract(String name, double byValue) {
		Attribute atr = Attribute.subtract(byValue);
		putAttribute(name, atr);
		return atr;
	}
	
	/**
	 * Returns the value of this {@code AttributedNumber}.
	 * 
	 * @return the value
	 */
	public double getValue() {
		double amount = defaultNumber;
		for (Attribute i : values.values()) 
			amount = i.getType().getCalculator().calculated(amount, i.getValue());
		return amount;
	}
	
	/**
	 * Returns the {@code int} value of this {@code AttributedNumber}.
	 * 
	 * @return the {@code int} value
	 */
	public int getIntValue() {
		return (int) getValue();
	}

	/**
	 * Returns the default number set to this {@code AttributedNumber}.
	 * 
	 * @return the default number
	 */
	public double getDefaultNumber() {
		return defaultNumber;
	}

}</code></pre>
<p>Attribute.java</p>
<pre><code class="lang-auto">/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */

/*
 * The {@code Attribute} class is used by the {@code AttributedNumber} to
 * hold the {@code AttributeType} and value for calculation.
 * 
 * @author Albert Beaupre
 */
public class Attribute {

	private final AttributeType type;				// The AttributeType assigned to this Attribute
	private final double value;					// The value assigned to this Attribute

	private Attribute(AttributeType type, double value) {
		this.type = type;
		this.value = value;
	}

	/**
	 * Creates a divisible {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to divide by
	 * @return the attribute object
	 */
	public static Attribute divide(double byValue) {
		return new Attribute(AttributeType.DIVIDE, byValue);
	}

	/**
	 * Creates a multiplicable {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to multiply by
	 * @return the attribute object
	 */
	public static Attribute multiply(double byValue) {
		return new Attribute(AttributeType.MULTIPLY, byValue);
	}

	/**
	 * Creates a additive {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to add by
	 * @return the attribute object
	 */
	public static Attribute add(double byValue) {
		return new Attribute(AttributeType.ADD, byValue);
	}

	/**
	 * Creates a subtractive {@code Attribute} object from the specified {@code byValue}.
	 * 
	 * @param byValue the value later to subtract by
	 * @return the attribute object
	 */
	public static Attribute subtract(double byValue) {
		return new Attribute(AttributeType.SUBTRACT, byValue);
	}

	/**
	 * Returns the {@code AttributeType} of this {@code Attribute}.
	 * 
	 * @return the attribute type
	 */
	public AttributeType getType() {
		return type;
	}

	/**
	 * Returns the value of this {@code Attribute}.
	 * 
	 * @return the value
	 */
	public double getValue() {
		return value;
	}

}</code></pre>
<p>AttributeType.java</p>
<pre><code class="lang-auto">/**
 * No copyright asserted on the source code of this class.
 * May be used for any purpose.
 */

/**
 * Represents the type of {@code Attribute} used for the {@code AttributedNumber}
 * implementation.
 * 
 * @author Albert Beaupre
 */
public enum AttributeType {
	DIVIDE((n, i) -&gt; n / i),
	MULTIPLY((n, i) -&gt; n * i),
	ADD((n, i) -&gt; n + i),
	SUBTRACT((n, i) -&gt; n - i);
	
	private final Calculator calculator;			// The calculator object used by the AttributeType
	
	private AttributeType(Calculator calculator) {
		this.calculator = calculator;
	}
	
	/**
	 * Returns the {@code Calculator} of this {@code AttributeType}.
	 * 
	 * @return calculator
	 */
	public Calculator getCalculator() {
		return calculator;
	}

	/**
	 * The {@code Calculator} interface is used by the {@code AttributeType}
	 * for calculations.
	 * 
	 * @author Albert Beaupre
	 */
	public static interface Calculator {
		double calculated(double n, double i);
	}
}</code></pre>
<p>This is an example of how to use the AttributedNumber</p>
<pre><code class="lang-auto">AttributedNumber num = new AttributedNumber(12);
num.multiply("MultiplyTest", 6);
num.divide("DivideTest", 2);
num.add("AddTest1", 64);
num.add("AddTest2", 100);

System.out.println(num.getValue());

num.removeAttribute("MultiplyTest");
System.out.println(num.getValue());</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/attributednumber/548255/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/attributednumber/548255/1</link>
        <pubDate>Fri, 05 Dec 2014 06:17:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548255-1</guid>
        <source url="https://forum.moparisthebest.com/t/attributednumber/548255.rss">AttributedNumber</source>
      </item>
  </channel>
</rss>
