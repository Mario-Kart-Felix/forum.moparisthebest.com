<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Signature (VerifyError)</title>
    <link>https://forum.moparisthebest.com/t/signature-verifyerror/441499</link>
    <description>Hi, I still haven&#39;t fixed this yet..

I&#39;m working with BCEL now and am having some problems.

This is my removeMethod() method.
[code]
	public void removeMethod()
	{
		try
		{
			//gets the old url method
			Method urlMethod = null;
			Method[] methods = classGen.getMethods();
			for (Method m : methods)
			{
				if (m.getName().equals(&quot;launchURL&quot;))
				{
					urlMethod = m;
					break;
				}
			}
			//System.out.println(urlMethod.getCode());
			
			//gets the constant pool
			ConstantPoolGen cPoolGen = classGen.getConstantPool();
			MethodGen methodGen = new MethodGen(urlMethod, classGen.getClassName(), cPoolGen);
			
			System.out.println(methodGen);
			
			InstructionList iList = methodGen.getInstructionList();
			
			Instruction getFieldInstruction = null;
			
			InstructionHandle[] iHandle = iList.getInstructionHandles();
			
			for (int i = 0; i &lt; iHandle.length; i++)
			{
				if (iHandle[i].getInstruction() instanceof INVOKEVIRTUAL)
				{
					getFieldInstruction = iHandle[i].getInstruction();
					System.out.println(&quot;Found the invoke virtual!&quot;);
					break;
				}
			}
			
			InstructionFactory iFactory = new InstructionFactory(classGen, cPoolGen);
			InvokeInstruction callBlankMethod = iFactory.createInvoke(&quot;Methods&quot;, &quot;launchURL&quot;,
					Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
		
			
			//Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
			
			
			
			iList.insert(getFieldInstruction, callBlankMethod);
			
			
			//set new instruction list
			methodGen.setInstructionList(iList);
			iList.setPositions();
			
			
			methodGen.setMaxStack();
			methodGen.setMaxLocals();
			methodGen.removeLineNumbers();	
			
			classGen.replaceMethod(urlMethod, methodGen.getMethod());
			//classGen.addMethod(methodGen.getMethod());
			
			System.out.println(&quot;Replaced. Did you dump file?&quot;);
			
			
			for (Method m : classGen.getMethods())
			{
				if (m.getName().equals(&quot;launchURL&quot;))
				{
					System.out.println(m.getName());
					//System.out.println(m.getCode());
				}
			}
			

		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
[/code]

Class containing the method to override.
[code]
package net.projectrainbow.reflection;

public class Methods
{
	public static void launchURL(String s)
	{
		System.out.println(&quot;Hello thar: &quot; + s);
	}
}
[/code]

I&#39;m trying to override a malicious method but it give me this error at runtime:

&lt;blockquote&gt;Exception in thread &quot;main&quot; java.lang.VerifyError: (class: net/projectrainbow/ref
lection/CoolServer, method: launchURL signature: (Ljava/lang/String;)V) Incompat
ible object argument for function call
Could not find the main class: net.projectrainbow.reflection.CoolServer.  Progra
m will exit.&lt;/blockquote&gt;

I&#39;ve tried changing INVOKESTATIC to INVOKEVIRTUAL, and adding a new method instead of replacing the method. I have no idea what&#39;s up. Double checked everything too.

CoolServer being a skeleton class.</description>
    
    <lastBuildDate>Mon, 07 May 2012 14:47:05 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/signature-verifyerror/441499.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Signature (VerifyError)</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Main Class (sorry, it contains a LOT of junk and unused code):</p>
<pre><code class="lang-auto">package net.projectrainbow.reflection;

//import java.lang.reflect.*;
//import java.lang.reflect.Method;

import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;

public class BcelTest
{
	public BcelTest()
	{
		System.out.println("Bytecode Engineering has begun!");
	}
	
	public static void main(String[] args)
	{
		BcelTest bcelTest = new BcelTest();
		bcelTest.go(); //starts the main process
	}
	
	private ClassGen classGen;
	
	private String className = "ItemDef"; //class name, do not enter .class as suffix
	
	public void go()
	{
		try
		{
			loadClass(className);
			deleteLaunchURL();
			dumpClass();
		}
		catch (Exception e)
		{
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	public void loadClass(String name)
	{
		try
		{
			classGen = new ClassGen(new ClassParser(name + ".class").parse());
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void deleteLaunchURL()
	{
		try
		{
			//gets the old url method
			Method urlMethod = null;
			Method[] methods = classGen.getMethods();
			for (Method m : methods)
			{
				if (m.getName().equals("launchURL"))
				{
					System.out.println("Found launch URL method:");
					urlMethod = m;
					break;
				}
			}
			//System.out.println(urlMethod.getCode());
			
			//gets the constant pool
			ConstantPoolGen cPoolGen = classGen.getConstantPool();
			MethodGen methodGen = new MethodGen(urlMethod, classGen.getClassName(), cPoolGen);
			
			System.out.println(methodGen);
			
			InstructionList iList = methodGen.getInstructionList();
			
			Instruction getFieldInstruction = null;
			
			InstructionHandle[] iHandle = iList.getInstructionHandles();
			
			for (int i = 0; i &lt; iHandle.length; i++)
			{
				if (iHandle[i].getInstruction() instanceof INVOKEVIRTUAL)
				{
					getFieldInstruction = iHandle[i].getInstruction();
					System.out.println("Found the invoke virtual!");
					break;
				}
			}
			
			InstructionFactory iFactory = new InstructionFactory(classGen, cPoolGen);
			InvokeInstruction callBlankMethod = iFactory.createInvoke("Methods", "launchURL",
					Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
		
			
			//Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
			
			
			
			iList.insert(getFieldInstruction, callBlankMethod);
			
			
			//set new instruction list
			methodGen.setInstructionList(iList);
			iList.setPositions();
			
			
			methodGen.setMaxStack();
			methodGen.setMaxLocals();
			methodGen.removeLineNumbers();	
			
			classGen.replaceMethod(urlMethod, methodGen.getMethod());
			//classGen.addMethod(methodGen.getMethod());
			
			System.out.println("Replaced. Did you dump file?");
			
			
			for (Method m : classGen.getMethods())
			{
				if (m.getName().equals("launchURL"))
				{
					System.out.println(m.getName());
					//System.out.println(m.getCode());
				}
			}
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void modify()
	{
		try
		{
			Method build = null;
			
			Method[] methods = classGen.getMethods();
			for (Method m : methods)
			{
				//System.out.println("Found method: " + m.getName());
				if (m.getName().equals("main"))
				{
					System.out.println("Found main method.");
					build = m;
					//break; //uncomment this if you want to exit after main method is found
				}
				//System.out.println("Method Name: " + m.getName());
				//System.out.println("Return Type: " + m.getReturnType());
			}
			
			ConstantPoolGen cPoolGen = classGen.getConstantPool();
			MethodGen methodGen = new MethodGen(build, classGen.getClassName(), cPoolGen);
			InstructionList iList = methodGen.getInstructionList();
			
			InstructionHandle titleLDC = null;
			InstructionHandle[] handles = iList.getInstructionHandles();
			for (int i = 0; i &lt; handles.length; i++)
			{
				if (handles[i].getInstruction() instanceof LDC)
				{
					titleLDC = handles[i];
					System.out.println("Found LDC: " + titleLDC);
					break;
				}
			}
			
			/*
			LDC ldcIns = new LDC(cPoolGen.addString("Lol I Like Steak"));
			titleLDC.setInstruction(ldcIns);
			
			iList.setPositions();
			methodGen.setInstructionList(iList);
			methodGen.setMaxStack();
			methodGen.setMaxLocals();
			methodGen.removeLineNumbers();
			*/
			
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public void constTest()
	{
		try
		{
			ConstantPoolGen cp = classGen.getConstantPool();
			int theString = cp.lookupUtf8("Bob");
			if (theString != -1)
			{
				cp.setConstant(theString, new ConstantUtf8("Joe"));
			}
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
	public boolean findAndRenameString(String oldString, String newString)
	{
		try
		{
			ConstantPoolGen cp = classGen.getConstantPool();
			int str = cp.lookupUtf8(oldString);
			if (str != -1)
			{
				ConstantUtf8 ct = new ConstantUtf8(newString);
				cp.setConstant(str, ct);
				System.out.println("Success! Renamed " + oldString + " to " + newString + ".");
				return true;
			}
			else
			{
				System.out.println("Failed to rename " + oldString + " to " + newString + ".");
			}
		}
		catch (Exception e)
		{
			System.out.println("Failed to rename " + oldString + " to " + newString + ".");
			e.printStackTrace();
			return false;
		}
		return false;
	}
	
	public boolean renameInt(int oldInt, int newInt)
	{
		try
		{
			ConstantPoolGen cp = classGen.getConstantPool();
			int str = cp.lookupInteger(oldInt);
			if (str != -1)
			{
				ConstantInteger ci = new ConstantInteger(newInt);
				cp.setConstant(str, ci);
				System.out.println("Success! Renamed " + oldInt + " to " + newInt + ".");
				return true;
			}
			else
			{
				System.out.println("Failed to rename " + oldInt + " to " + newInt + ".");
			}
			System.out.println("Str: " + str);
		}
		catch (Exception e)
		{
			System.out.println("Failed to rename " + oldInt + " to " + newInt + ".");
			e.printStackTrace();
			return false;
		}
		return false;
	}
	
	
	public void dumpClass()
	{
		try
		{
			classGen.getJavaClass().dump(className + ".class");
		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}
	
}</code></pre>
<p>Dummy class:</p>
<pre><code class="lang-auto">package net.projectrainbow.reflection;

public class ItemDef
{

}</code></pre>
<p>Method (class containing the new method to replace (this blank launchURL() for instance)):</p>
<pre><code class="lang-auto">package net.projectrainbow.reflection;

public class Methods
{
	public static void launchURL(String s)
	{
		System.out.println("Hello thar: " + s);
	}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/signature-verifyerror/441499/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/signature-verifyerror/441499/4</link>
        <pubDate>Mon, 07 May 2012 14:47:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-441499-4</guid>
        <source url="https://forum.moparisthebest.com/t/signature-verifyerror/441499.rss">Signature (VerifyError)</source>
      </item>
      <item>
        <title>Signature (VerifyError)</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>Upload all respective files.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/signature-verifyerror/441499/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/signature-verifyerror/441499/3</link>
        <pubDate>Sun, 06 May 2012 22:55:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-441499-3</guid>
        <source url="https://forum.moparisthebest.com/t/signature-verifyerror/441499.rss">Signature (VerifyError)</source>
      </item>
      <item>
        <title>Signature (VerifyError)</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>What’s the signature for the method you’re replacing? My only guess would be it requires a URL over a string</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/signature-verifyerror/441499/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/signature-verifyerror/441499/2</link>
        <pubDate>Sun, 06 May 2012 18:23:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-441499-2</guid>
        <source url="https://forum.moparisthebest.com/t/signature-verifyerror/441499.rss">Signature (VerifyError)</source>
      </item>
      <item>
        <title>Signature (VerifyError)</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Hi, I still haven’t fixed this yet…</p>
<p>I’m working with BCEL now and am having some problems.</p>
<p>This is my removeMethod() method.</p>
<pre><code class="lang-auto">	public void removeMethod()
	{
		try
		{
			//gets the old url method
			Method urlMethod = null;
			Method[] methods = classGen.getMethods();
			for (Method m : methods)
			{
				if (m.getName().equals("launchURL"))
				{
					urlMethod = m;
					break;
				}
			}
			//System.out.println(urlMethod.getCode());
			
			//gets the constant pool
			ConstantPoolGen cPoolGen = classGen.getConstantPool();
			MethodGen methodGen = new MethodGen(urlMethod, classGen.getClassName(), cPoolGen);
			
			System.out.println(methodGen);
			
			InstructionList iList = methodGen.getInstructionList();
			
			Instruction getFieldInstruction = null;
			
			InstructionHandle[] iHandle = iList.getInstructionHandles();
			
			for (int i = 0; i &lt; iHandle.length; i++)
			{
				if (iHandle[i].getInstruction() instanceof INVOKEVIRTUAL)
				{
					getFieldInstruction = iHandle[i].getInstruction();
					System.out.println("Found the invoke virtual!");
					break;
				}
			}
			
			InstructionFactory iFactory = new InstructionFactory(classGen, cPoolGen);
			InvokeInstruction callBlankMethod = iFactory.createInvoke("Methods", "launchURL",
					Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
		
			
			//Type.VOID, new Type[] {Type.STRING}, Constants.INVOKESTATIC);
			
			
			
			iList.insert(getFieldInstruction, callBlankMethod);
			
			
			//set new instruction list
			methodGen.setInstructionList(iList);
			iList.setPositions();
			
			
			methodGen.setMaxStack();
			methodGen.setMaxLocals();
			methodGen.removeLineNumbers();	
			
			classGen.replaceMethod(urlMethod, methodGen.getMethod());
			//classGen.addMethod(methodGen.getMethod());
			
			System.out.println("Replaced. Did you dump file?");
			
			
			for (Method m : classGen.getMethods())
			{
				if (m.getName().equals("launchURL"))
				{
					System.out.println(m.getName());
					//System.out.println(m.getCode());
				}
			}
			

		}
		catch (Exception e)
		{
			e.printStackTrace();
		}
	}</code></pre>
<p>Class containing the method to override.</p>
<pre><code class="lang-auto">package net.projectrainbow.reflection;

public class Methods
{
	public static void launchURL(String s)
	{
		System.out.println("Hello thar: " + s);
	}
}</code></pre>
<p>I’m trying to override a malicious method but it give me this error at runtime:</p>
<blockquote>Exception in thread "main" java.lang.VerifyError: (class: net/projectrainbow/ref
lection/CoolServer, method: launchURL signature: (Ljava/lang/String;)V) Incompat
ible object argument for function call
Could not find the main class: net.projectrainbow.reflection.CoolServer.  Progra
m will exit.</blockquote>
<p>I’ve tried changing INVOKESTATIC to INVOKEVIRTUAL, and adding a new method instead of replacing the method. I have no idea what’s up. Double checked everything too.</p>
<p>CoolServer being a skeleton class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/signature-verifyerror/441499/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/signature-verifyerror/441499/1</link>
        <pubDate>Sun, 06 May 2012 13:47:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-441499-1</guid>
        <source url="https://forum.moparisthebest.com/t/signature-verifyerror/441499.rss">Signature (VerifyError)</source>
      </item>
  </channel>
</rss>
