<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cryptography</title>
    <link>https://forum.moparisthebest.com/t/cryptography/533528</link>
    <description>You can use the following code to create a hash using any of the following cryptographic hash functions:
MD2
MD5
Sha1
Sha-256
Sha-384
Sha-512

[code]	
import java.security.*;


public static String createHash(String s) {
		try {
			MessageDigest md = MessageDigest.getInstance(&quot;Sha-512&quot;);//Change this to whatever Hash function you want to 
			byte[] array = md.digest(s.getBytes());
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i &lt; array.length; i++) {
				sb.append(Integer.toHexString((array[i] &amp; 0xFF) | 0x100).substring(1,3));
			}
			return sb.toString();
		} catch (NoSuchAlgorithmException e) {
		}
		return null;
    }
[/code]

There you go, secure hash for any string you want. Personally I use it to create a hash for the data I store on my MySQL Database, but there&#39;s multiple uses.</description>
    
    <lastBuildDate>Thu, 03 Oct 2013 21:08:39 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cryptography/533528.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <p>I have removed the spam, please keep that out of the thread in future. Also a note for roflmaodude1, take any advice you can get which will improve your knowledge. AtomicInt was not trying to start a fight, so don’t take offence to his posts.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/14</link>
        <pubDate>Thu, 03 Oct 2013 21:08:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-14</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>I’m sorry, we did get off on the wrong foot; I wasn’t trying to be disrespectful, that is just how I am.</p>
<p>I’m still going to nitpick because I feel that it needs done:</p>
<p><code>
public static String createHash(String s) {
                try {
                        MessageDigest md = MessageDigest.getInstance("Sha-512");//Change this to whatever Hash function you want to 
                        byte[] array = md.digest(s.getBytes());
                        StringBuffer sb = new StringBuffer();
                        for (int i = 0; i &lt; array.length; i++) {
                                sb.append(Integer.toHexString((array[i] &amp; 0xFF) | 0x100).substring(1,3));
                        }
                        return sb.toString();
                } catch (NoSuchAlgorithmException e) {
                }
                return null;
    }</code></p>
<p>[tt]public static String createHash(String s) {[/tt]<br>
The naming of the method sucks, if this was in an API it would be a pain in the ass to find out what exactly this is doing. What kind of hash? What is it hashing? What is “s”?<br>
Which leads me to my next point, the only time that single letter variable names should be used is when looping through indices in an array. The letter is usually “i”. “s” has no meaning to it and is not descriptive at all.</p>
<p>[tt]MessageDigest md = MessageDigest.getInstance(“Sha-512”);[/tt]</p>
<p>I would rather see a string for user input when calling the method rather than hardcoding the algorithm in the method.</p>
<p>[tt]byte[] array = md.digest(s.getBytes());[/tt]</p>
<p>You should specify the string encoding here otherwise your code will get different results on different OS’ or user settings.</p>
<p>[tt]StringBuffer sb = new StringBuffer();[/tt]</p>
<p>Why are you using a StringBuffer? It is not needed because no synchronization is needed, StringBuilder should be used instead as it is not synchronized, StringBuilder was added as a replacement to StringBuffer where synchronization is not required.</p>
<p>[tt]for (int i = 0; i &lt; array.length; i++) {<br>
sb.append(Integer.toHexString((array[i] &amp; 0xFF) | 0x100).substring(1,3));<br>
}[/tt]</p>
<p>Do I have to ask? This bit of code is horrid.</p>
<p>[tt]return sb.toString();[/tt]</p>
<p>Alright good.</p>
<p>[tt]} catch (NoSuchAlgorithmException e) {<br>
}[/tt]</p>
<p>Ignoring exceptions is a bad idea, the method should throw this exception instead.</p>
<p>[tt]return null;[/tt]</p>
<p>Ew, you should never return null, ever. It’s bad design. <a href="http://en.wikipedia.org/wiki/Null_Object_pattern" data-bbcode="true" rel="nofollow noopener">Null Object Pattern</a></p>
<p>Now the argument can be over unless you’re replying to my comment.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/13</link>
        <pubDate>Thu, 03 Oct 2013 02:11:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-13</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“Clawz fury, post:1, topic:533566”][quote author=AtomicInt_ link=topic=652323.msg4371060#msg4371060 date=1380668860]<br>
Yuck.<br>
[/quote]<br>
why are you going around on everyone’s topics saying this, the code he wrote was fine?[/quote]</p>
<p>Please clarify “everyone’s” topics, this has been the only topic which I said this in.</p>
<p>[quote=“roflmaodude1, post:11, topic:533528”][quote author=Clawz fury link=topic=652323.msg4371194#msg4371194 date=1380712816]</p>
<aside class="quote">
<blockquote>
<p>Yuck.</p>
</blockquote>
</aside>
<p>why are you going around on everyone’s topics saying this, the code he wrote was fine?<br>
[/quote]<br>
Thank you… Not sure what his problem is, doesn’t even check that his code produces the proper output…</p>
<aside class="quote">
<blockquote>
<p>Thanks for the information? I already knew this. As for it not being correct, to be honest I never even checked to see if it generated a true MD5 hash. I have fixed the method.</p>
</blockquote>
</aside>
<p>Works most of the time, but sometimes it throws in an extra digit or character that doesn’t belong, compared to mine that works 100% of the time. I believe your response of [quote author=AtomicInt_ link=topic=652323.msg4371060#msg4371060 date=1380668860]<br>
Yuck.<br>
[/quote]<br>
Doesn’t apply ;)[/quote]</p>
<p>It isn’t yours. Don’t claim it to be. Also it does apply, the code looks like shit.</p>
<p>Edit: I fixed the code, just for you. I also tested it.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.nio.charset.Charset;
import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * An enumeration of all of the possible provider algorithms used in
	 * cryptography.
	 * 
	 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
	 */
	public enum ProviderAlgorithm {

		/**
		 * Represents the MD2 hash.
		 */
		MD2,

		/**
		 * Represents the MD5 hash
		 */
		MD5,

		/**
		 * Represents the SHA1 hash
		 */
		SHA1,

		/**
		 * Represents the SHA-256 hash
		 */
		SHA_256,

		/**
		 * Represents the SHA-384 hash
		 */
		SHA_384,

		/**
		 * Represents the SHA-512 hash
		 */
		SHA_512;

		@Override
		public final String toString()
		{
			return name().replace( "_", "-" );
		}
	}

	/**
	 * A &lt;code&gt;char&lt;/code&gt; array of digits used to create a hex value.
	 */
	private static final char[] DIGITS =
	{
		'0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f'
	};


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm.
	 * @param characterSet
	 *            The character set {@code Charset#forName( name );} &lt;b&gt; Valid
	 *            character sets: ASCII, UTF8, UTF-16, Cp1252, ISO8859_1,
	 *            UnicodeBig, UnicodeBigUnmarked, UnicodeLittle,
	 *            UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( ProviderAlgorithm provider, Charset characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider.toString() );
		digest.update( characters );

		return new String( encode( digest.digest() ) );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm.
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( ProviderAlgorithm provider, String characterSet, String string ) throws Throwable
	{
		return encrypt( provider, Charset.forName( characterSet ), string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm.
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( ProviderAlgorithm provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the {@link ProviderAlgorithm#MD5} provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( ProviderAlgorithm.MD5, string );
	}


	/**
	 * Converts an array of &lt;code&gt;byte&lt;/code&gt;'s into an array of
	 * &lt;code&gt;char&lt;/code&gt;'s representing the hexadecimal values of each
	 * &lt;code&gt;byte&lt;/code&gt; in order. The returned array will be double the length
	 * of the passed array, as it takes two &lt;code&gt;char&lt;/code&gt;'s to represent any
	 * given byte.
	 * 
	 * @param data
	 *            a byte[] to convert to Hex characters
	 * @param toDigits
	 *            the output alphabet
	 * @return A char[] containing hexadecimal characters
	 * @see &lt;a
	 *      href="http://commons.apache.org/proper/commons-codec/apidocs/org/apache/commons/codec/binary/Hex.html#encodeHex(byte[])"&gt;Hex
	 *      Apache Commons&lt;/a&gt;
	 */
	public static char[] encode( byte[] data )
	{
		int length = data.length;
		char[] encoded = new char[length &lt;&lt; 1];
		for( int pointer = 0, index = 0; pointer &lt; length; pointer ++ ) {
			encoded[index ++ ] = DIGITS[( 0xF0 &amp; data[pointer] ) &gt;&gt;&gt; 4];
			encoded[index ++ ] = DIGITS[0x0F &amp; data[pointer]];
		}
		return encoded;
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
<p>I concluded 500 tests, not a single failure.</p>
<pre><code class="lang-auto">[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]
[hash, length] : [e680c34118460cb35273a8c60830ddc9, 32]</code></pre>
<p>I couldn’t add every test due to the character limit on posts.</p>
<p>I also used an online MD5 hash(er) to see if my outcome was correct:<br>
<img src="http://puu.sh/4FQpl/c9378a015f.png" alt width="" height=""></p>
<p>String used “Hello, I’m a test!”</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/12</link>
        <pubDate>Wed, 02 Oct 2013 17:27:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-12</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@roflmaodude1 roflmaodude1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roflmaodude1">@roflmaodude1</a> wrote:</p>
          <blockquote>
              <p>[quote=“Clawz fury, post:1, topic:533566”][quote author=AtomicInt_ link=topic=652323.msg4371060#msg4371060 date=1380668860]<br>
Yuck.<br>
[/quote]<br>
why are you going around on everyone’s topics saying this, the code he wrote was fine?[/quote]<br>
Thank you… Not sure what his problem is, doesn’t even check that his code produces the proper output…</p>
<aside class="quote" data-post="6" data-topic="533528">
<div class="title">
<div class="quote-controls"></div>
 AtomicInt_:</div>
<blockquote>
<p>Thanks for the information? I already knew this. As for it not being correct, to be honest I never even checked to see if it generated a true MD5 hash. I have fixed the method.</p>
</blockquote>
</aside>
<p>Works most of the time, but sometimes it throws in an extra digit or character that doesn’t belong, compared to mine that works 100% of the time. I believe your response of [quote=“AtomicInt_, post:2, topic:533528”]Yuck.[/quote]<br>
Doesn’t apply <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/11</link>
        <pubDate>Wed, 02 Oct 2013 12:01:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-11</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@roflmaodude1 roflmaodude1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roflmaodude1">@roflmaodude1</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:6, topic:533528”][quote author=roflmaodude1 link=topic=652323.msg4371061#msg4371061 date=1380669620]</p>
<aside class="quote">
<blockquote>
<p>Yuck. I wrote this for Zarketh for our character saves and other miscellaneous String’s that could need encrypted.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform most of these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider );
		digest.update( characters );

		return new String( digest.digest(), characterSet );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the MD5 provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrtpt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( "MD5", string );
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
<p>edit: javax.crypto.* has some good cryptographic utility classes, such as Cipher</p>
</blockquote>
</aside>
<p>That doesn’t create a proper md5 encryption.</p>
<pre><code class="lang-auto"> ?k═F!╙s╩▐Nâ&amp;'┤÷
Press any key to continue . . .</code></pre>
<p>No idea what you wanna call that, but it’s definitely not MD5. If you’re using this for database integration then your code is unusable, if you’re not using it for data transfer then there’s not really a purpose for having it and it’s just adding execution time to your code. MD5 is a cryptographic hash function, <span class="bbcode-b">32 digits long.</span><br>
[/quote]</p>
<p>Thanks for the information? I already knew this. As for it not being correct, to be honest I never even checked to see if it generated a true MD5 hash. I have fixed the method.</p>
<p>[code=java]</p>
<p>package org.niobe.util;</p>
<p>import java.math.BigInteger;<br>
import java.security.MessageDigest;</p>
<p>/**</p>
<ul>
<li>
<p>A static utility class for cryptographic implementations, we use</p>
</li>
<li>
<p><b>java.security.*</b> to perform most of these functions.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Ryley Kimmel <a href="mailto:ryley.kimmel@live.com">ryley.kimmel@live.com</a><br>
*/<br>
public final class CryptoUtil<br>
{</p>
<p>/**</p>
<ul>
<li>Encrypts a <code>String</code>’s <code>byte</code>’s using a specified</li>
<li>character set and using a specified provider algorithm</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> provider</li>
<li>
<pre><code>       The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
</code></pre>
</li>
<li>
<pre><code>       Sha-256, Sha-384, Sha-512 &lt;/b&gt;
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> characterSet</li>
<li>
<pre><code>       The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
</code></pre>
</li>
<li>
<pre><code>       UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
</code></pre>
</li>
<li>
<pre><code>       UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> string</li>
<li>
<pre><code>       The &lt;code&gt;String&lt;/code&gt; to encrypt.
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> The encrypted <code>String</code> object.</li>
<li>
<span class="mention">@throws</span> Throwable</li>
<li>
<pre><code>        If some unsupported exception occurs.
</code></pre>
</li>
</ul>
<p>*/<br>
public static String encrypt( String provider, String characterSet, String string ) throws Throwable<br>
{<br>
byte[] characters = string.getBytes( characterSet );</p>
<pre><code> MessageDigest digest = MessageDigest.getInstance( provider );
 digest.update( characters );

 return String.format( "%1$032x", new BigInteger( 1, digest.digest() ) );
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Encrypts a <code>String</code>’s <code>byte</code>’s using the UTF8</li>
<li>character set and the specified provider algorithm.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> provider</li>
<li>
<pre><code>       The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
</code></pre>
</li>
<li>
<pre><code>       Sha-256, Sha-384, Sha-512 &lt;/b&gt;
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> string</li>
<li>
<pre><code>       The &lt;code&gt;String&lt;/code&gt; to encrypt.
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> The encrypted <code>String</code> object.</li>
<li>
<span class="mention">@throws</span> Throwable</li>
<li>
<pre><code>        If some unsupported exception occurs.
</code></pre>
</li>
</ul>
<p>*/<br>
public static String encrypt( String provider, String string ) throws Throwable<br>
{<br>
return encrypt( provider, “UTF8”, string );<br>
}</p>
<p>/**</p>
<ul>
<li>Encrypts a <code>String</code>’s <code>byte</code>’s using the UTF8</li>
<li>character set and the MD5 provider algorithm.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> string</li>
<li>
<pre><code>       The &lt;code&gt;String&lt;/code&gt; to encrtpt.
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> The encrypted <code>String</code> object.</li>
<li>
<span class="mention">@throws</span> Throwable</li>
<li>
<pre><code>        If some unsupported exception occurs.
</code></pre>
</li>
</ul>
<p>*/<br>
public static String encrypt( String string ) throws Throwable<br>
{<br>
return encrypt( “MD5”, string );<br>
}</p>
<p>/**</p>
<ul>
<li>Default private constructor used to prevent this class from being</li>
<li>instantiated.<br>
*/<br>
private CryptoUtil()<br>
{</li>
</ul>
<p>}</p>
</li>
</ul>
<p>}<br>
[/code][/quote]<br>
Not sure what you’re trying to do here; 1 up me or provide an alternative way of doing it. I’ll check your new code after I get home from school.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/10</link>
        <pubDate>Wed, 02 Oct 2013 10:01:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-10</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>[quote=“eyeownyew, post:8, topic:533528”][quote author=arham 4 link=topic=652323.msg4371137#msg4371137 date=1380682209]<br>
So what use could this be in RSPS? Give example <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
[/quote]<br>
PASSWORT[/quote]<br>
Shoot, forgot this was Crpytion.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/9</link>
        <pubDate>Wed, 02 Oct 2013 03:02:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-9</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="7" data-topic="533528">
<div class="title">
<div class="quote-controls"></div>
 arham 4:</div>
<blockquote>
<p>So what use could this be in RSPS? Give example <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
</blockquote>
</aside>
<p>PASSWORT</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/8</link>
        <pubDate>Wed, 02 Oct 2013 02:59:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-8</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>So what use could this be in RSPS? Give example <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/7</link>
        <pubDate>Wed, 02 Oct 2013 02:50:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-7</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“roflmaodude1, post:3, topic:533528”][quote author=AtomicInt_ link=topic=652323.msg4371060#msg4371060 date=1380668860]<br>
Yuck. I wrote this for Zarketh for our character saves and other miscellaneous String’s that could need encrypted.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform most of these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider );
		digest.update( characters );

		return new String( digest.digest(), characterSet );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the MD5 provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrtpt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( "MD5", string );
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
<p>edit: javax.crypto.* has some good cryptographic utility classes, such as Cipher<br>
[/quote]</p>
<p>That doesn’t create a proper md5 encryption.</p>
<pre><code class="lang-auto"> ?k═F!╙s╩▐Nâ&amp;'┤÷
Press any key to continue . . .</code></pre>
<p>No idea what you wanna call that, but it’s definitely not MD5. If you’re using this for database integration then your code is unusable, if you’re not using it for data transfer then there’s not really a purpose for having it and it’s just adding execution time to your code. MD5 is a cryptographic hash function, <span class="bbcode-b">32 digits long.</span>[/quote]</p>
<p>Thanks for the information? I already knew this. As for it not being correct, to be honest I never even checked to see if it generated a true MD5 hash. I have fixed the method.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.math.BigInteger;
import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform most of these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider );
		digest.update( characters );

		return String.format( "%1$032x", new BigInteger( 1, digest.digest() ) );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the MD5 provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrtpt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( "MD5", string );
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/6</link>
        <pubDate>Wed, 02 Oct 2013 02:10:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-6</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@roflmaodude1 roflmaodude1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roflmaodude1">@roflmaodude1</a> wrote:</p>
          <blockquote>
              <p>[quote=“Cyberus, post:4, topic:533528”]class i made a while ago to apply salt</p>
<p>[code=Java]import java.io.UnsupportedEncodingException;<br>
import java.security.MessageDigest;<br>
import java.security.NoSuchAlgorithmException;</p>
<p>/**</p>
<ul>
<li>
<span class="mention">@author</span> Ryan Greene</li>
<li>
</li>
</ul>
<p>*/<br>
public final class Salt {</p>
<pre><code>/**
 * The message digest instance.
 */
private final MessageDigest messageDigest;

/**
 * The amount of iterations which the salt is applied.
 */
private final int iterations;

/**
 * The salt being applied.
 */
private final byte[] salt;

/**
 * Creates a new salt instance with the specified amount of iterations and
 * salt.
 * 
 * @param iterations The amount of iterations which the salt is applied.
 * @param salt The salt being applied.
 * @return The created salt instance.
 */
public static final Salt create(final int iterations, final byte[] salt) throws NoSuchAlgorithmException {
	return new Salt(MessageDigest.getInstance("SHA-1"), iterations, salt);
}

/**
 * Constructs a new salt instance with the specified message digest, amount
 * of iterations and salt.
 * 
 * @param messageDigest The message digest instance.
 * @param iterations The amount of iterations which the salt is applied.
 * @param salt The salt being applied.
 */
private Salt(final MessageDigest messageDigest, final int iterations, final byte[] salt) {
	this.messageDigest = messageDigest;
	this.iterations = iterations;
	this.salt = salt;
}

/**
 * Hashes and applies salt to the specified password.
 * 
 * @param password The password being hashed.
 * @return The hashed and salted password.
 * @throws NoSuchAlgorithmException If an exception is thrown.
 * @throws UnsupportedEncodingException If an exception is thrown.
 */
public final byte[] applySalt(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
	messageDigest.reset();
	messageDigest.update(salt);
	byte[] input = messageDigest.digest(password.getBytes("UTF-8"));
	for (int iteration = 0; iteration &lt; iterations; iteration++) {
		messageDigest.reset();
		input = messageDigest.digest(input);
	}
	return input;
}
</code></pre>
<p>}[/code][/quote]<br>
That’s actually pretty neat XD</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/5</link>
        <pubDate>Wed, 02 Oct 2013 01:02:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-5</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@Cyberus Cyberus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cyberus">@Cyberus</a> wrote:</p>
          <blockquote>
              <p>class i made a while ago to apply salt</p>
<p>[code=Java]import java.io.UnsupportedEncodingException;<br>
import java.security.MessageDigest;<br>
import java.security.NoSuchAlgorithmException;</p>
<p>/**</p>
<ul>
<li>
<span class="mention">@author</span> Ryan Greene</li>
<li>
</li>
</ul>
<p>*/<br>
public final class Salt {</p>
<pre><code>/**
 * The message digest instance.
 */
private final MessageDigest messageDigest;

/**
 * The amount of iterations which the salt is applied.
 */
private final int iterations;

/**
 * The salt being applied.
 */
private final byte[] salt;

/**
 * Creates a new salt instance with the specified amount of iterations and
 * salt.
 * 
 * @param iterations The amount of iterations which the salt is applied.
 * @param salt The salt being applied.
 * @return The created salt instance.
 */
public static final Salt create(final int iterations, final byte[] salt) throws NoSuchAlgorithmException {
	return new Salt(MessageDigest.getInstance("SHA-1"), iterations, salt);
}

/**
 * Constructs a new salt instance with the specified message digest, amount
 * of iterations and salt.
 * 
 * @param messageDigest The message digest instance.
 * @param iterations The amount of iterations which the salt is applied.
 * @param salt The salt being applied.
 */
private Salt(final MessageDigest messageDigest, final int iterations, final byte[] salt) {
	this.messageDigest = messageDigest;
	this.iterations = iterations;
	this.salt = salt;
}

/**
 * Hashes and applies salt to the specified password.
 * 
 * @param password The password being hashed.
 * @return The hashed and salted password.
 * @throws NoSuchAlgorithmException If an exception is thrown.
 * @throws UnsupportedEncodingException If an exception is thrown.
 */
public final byte[] applySalt(final String password) throws NoSuchAlgorithmException, UnsupportedEncodingException {
	messageDigest.reset();
	messageDigest.update(salt);
	byte[] input = messageDigest.digest(password.getBytes("UTF-8"));
	for (int iteration = 0; iteration &lt; iterations; iteration++) {
		messageDigest.reset();
		input = messageDigest.digest(input);
	}
	return input;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/4</link>
        <pubDate>Wed, 02 Oct 2013 00:53:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-4</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@roflmaodude1 roflmaodude1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roflmaodude1">@roflmaodude1</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:2, topic:533528”]Yuck. I wrote this for Zarketh for our character saves and other miscellaneous String’s that could need encrypted.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform most of these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider );
		digest.update( characters );

		return new String( digest.digest(), characterSet );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the MD5 provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrtpt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( "MD5", string );
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
<p>edit: javax.crypto.* has some good cryptographic utility classes, such as Cipher[/quote]</p>
<p>That doesn’t create a proper md5 encryption.</p>
<pre><code class="lang-auto"> ?k═F!╙s╩▐Nâ&amp;'┤÷
Press any key to continue . . .</code></pre>
<p>No idea what you wanna call that, but it’s definitely not MD5. If you’re using this for database integration then your code is unusable, if you’re not using it for data transfer then there’s not really a purpose for having it and it’s just adding execution time to your code. MD5 is a cryptographic hash function, <span class="bbcode-b">32 digits long.</span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/3</link>
        <pubDate>Tue, 01 Oct 2013 23:20:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-3</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Yuck. I wrote this for Zarketh for our character saves and other miscellaneous String’s that could need encrypted.</p>
<pre><code class="lang-auto">
package org.niobe.util;

import java.security.MessageDigest;

/**
 * A static utility class for cryptographic implementations, we use
 * &lt;b&gt;java.security.*&lt;/b&gt; to perform most of these functions.
 * 
 * @author Ryley Kimmel &lt;ryley.kimmel@live.com&gt;
 */
public final class CryptoUtil
{

	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using a specified
	 * character set and using a specified provider algorithm
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param characterSet
	 *            The character set &lt;b&gt; Valid character sets: ASCII, UTF8,
	 *            UTF-16, Cp1252, ISO8859_1, UnicodeBig, UnicodeBigUnmarked,
	 *            UnicodeLittle, UnicodeLittleUnmarked &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String characterSet, String string ) throws Throwable
	{
		byte[] characters = string.getBytes( characterSet );

		MessageDigest digest = MessageDigest.getInstance( provider );
		digest.update( characters );

		return new String( digest.digest(), characterSet );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the specified provider algorithm.
	 * 
	 * @param provider
	 *            The provider algorithm. &lt;b&gt; Valid Algorithms: MD2, MD5, Sha1,
	 *            Sha-256, Sha-384, Sha-512 &lt;/b&gt;
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrypt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String provider, String string ) throws Throwable
	{
		return encrypt( provider, "UTF8", string );
	}


	/**
	 * Encrypts a &lt;code&gt;String&lt;/code&gt;'s &lt;code&gt;byte&lt;/code&gt;'s using the UTF8
	 * character set and the MD5 provider algorithm.
	 * 
	 * @param string
	 *            The &lt;code&gt;String&lt;/code&gt; to encrtpt.
	 * @return The encrypted &lt;code&gt;String&lt;/code&gt; object.
	 * @throws Throwable
	 *             If some unsupported exception occurs.
	 */
	public static String encrypt( String string ) throws Throwable
	{
		return encrypt( "MD5", string );
	}


	/**
	 * Default private constructor used to prevent this class from being
	 * instantiated.
	 */
	private CryptoUtil()
	{

	}

}</code></pre>
<p>edit: javax.crypto.* has some good cryptographic utility classes, such as Cipher</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/2</link>
        <pubDate>Tue, 01 Oct 2013 23:07:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-2</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
      <item>
        <title>Cryptography</title>
        <dc:creator><![CDATA[@roflmaodude1 roflmaodude1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/roflmaodude1">@roflmaodude1</a> wrote:</p>
          <blockquote>
              <p>You can use the following code to create a hash using any of the following cryptographic hash functions:<br>
MD2<br>
MD5<br>
Sha1<br>
Sha-256<br>
Sha-384<br>
Sha-512</p>
<pre><code class="lang-auto">import java.security.*;


public static String createHash(String s) {
		try {
			MessageDigest md = MessageDigest.getInstance("Sha-512");//Change this to whatever Hash function you want to 
			byte[] array = md.digest(s.getBytes());
			StringBuffer sb = new StringBuffer();
			for (int i = 0; i &lt; array.length; i++) {
				sb.append(Integer.toHexString((array[i] &amp; 0xFF) | 0x100).substring(1,3));
			}
			return sb.toString();
		} catch (NoSuchAlgorithmException e) {
		}
		return null;
    }</code></pre>
<p>There you go, secure hash for any string you want. Personally I use it to create a hash for the data I store on my MySQL Database, but there’s multiple uses.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cryptography/533528/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cryptography/533528/1</link>
        <pubDate>Tue, 01 Oct 2013 21:44:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533528-1</guid>
        <source url="https://forum.moparisthebest.com/t/cryptography/533528.rss">Cryptography</source>
      </item>
  </channel>
</rss>
