<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compressing of a 3D coordinate within a cubic area</title>
    <link>https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631</link>
    <description>I&#39;m working on a 2D multiplayer (through TCP) game, in which the player is positioned amongst isometric tile blocks. When the data of a chunk changes server side I didn&#39;t want to send the whole chunk data again so I implemented a system which sends the updated tile blocks instead.

The chunk is this case is a 3D cube which holds the data for each tile block. Should something cause a change in a tile server-side, the client needs to be alerted of this. So the server sends a message to client telling which block to change and what to actually change. At first I was sending 3 doubles for x, y and z of the block but felt it would be more efficient to send a single integer with a hash of the position. It took me a little to think these two methods out so I thought I&#39;d share them here.

Note: this code only works for a cubic chunk or region.

[code=java]
public static int posToInt(Position position) {
    int x = position.getX(), y = position.getY(), z = position.getZ();
    return x + z * Chunk.GRANULARITY + y * (int) Math.pow(Chunk.GRANULARITY, 2);
}

public static Position intToPos(int id) {
    int wSq = (int) Math.pow(Chunk.GRANULARITY, 2);
    int y = (int) Math.floor(id / wSq);
    int z = (int) Math.floor((id - y * wSq) / Chunk.GRANULARITY);
    int x = id - y * wSq - z * Chunk.GRANULARITY;
    return new Position(x, y, z);
}
[/code]The Position object is basically just a struct class which holds the values of x (length), z (width) and y (height) for an entity. It was more useful to do this then store 3 integers, as the position class organises several utilities for calculating other location based mathematics.

The code is self-explanatory, especially the hashing (it&#39;s just basic geometry). The wSq integer just means the width of the chunk squared, and was only set as a variable so it only had to run the calculation once instead of 3 times. The chunk has a static granularity variable instead of a length, width and height because it is cubic.

I hope someone else finds this useful.</description>
    
    <lastBuildDate>Wed, 14 Sep 2011 16:01:39 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compressing of a 3D coordinate within a cubic area</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>Oh wow thank you for the improvements. I have to remember to use more than the basic operators.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/3</link>
        <pubDate>Wed, 14 Sep 2011 16:01:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414631-3</guid>
        <source url="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631.rss">Compressing of a 3D coordinate within a cubic area</source>
      </item>
      <item>
        <title>Compressing of a 3D coordinate within a cubic area</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Just noting you could also simplify the intToPos by something like:</p>
<pre><code class="lang-auto">public static Position intToPos(int id) {
	int granSq = Chunk.GRANULARITY * Chunk.GRANULARITY;
	int z = id / granSq; // extract z coord from xyz system
	id %= granSq; // convert index to xy system
	int y = id / Chunk.GRANULARITY;  // extract y from xy system
	int z = id % Chunk.GRANULARITY; // extract x by converting index to x system
	return new Position(x, y, z);
}</code></pre>
<p>And, of course, you could talk about packing 3D coordinates in a rectangular prism of nonequal dimensions, so it’s not as limiting.</p>
<p>[code=Java]<br>
public static int indexOf(Position p, Dimension3D dimensions) {<br>
// pack each xy plane along the z<br>
int index = p.z * dimensions.width * dimensions.height;<br>
// pack each horizontal row in the xy plane along the y<br>
index += p.y * dimensions.width;<br>
// pack each x value along the current horizontal row<br>
index += p.x;<br>
return index;<br>
}</p>
<p>public static Position positionFrom(int index, Dimension3D dimensions) {<br>
int xySpan = dimensions.width * dimensions.height;<br>
int z = index / xySpan; // extract z<br>
index %= xySpan; // select the exact xy plane<br>
int y = index / dimensions.width; // extract the y<br>
int z = index % dimensions.width; // extract x<br>
return new Position(x, y, z);<br>
}[/code]</p>
<p>And, of course, you could store floating-point positions if they have a respective integral location in a grid, thereby allowing you to use these simple integer systems with floating-point values.</p>
<p>Good tutorial. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/2</link>
        <pubDate>Wed, 14 Sep 2011 15:20:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414631-2</guid>
        <source url="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631.rss">Compressing of a 3D coordinate within a cubic area</source>
      </item>
      <item>
        <title>Compressing of a 3D coordinate within a cubic area</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>I’m working on a 2D multiplayer (through TCP) game, in which the player is positioned amongst isometric tile blocks. When the data of a chunk changes server side I didn’t want to send the whole chunk data again so I implemented a system which sends the updated tile blocks instead.</p>
<p>The chunk is this case is a 3D cube which holds the data for each tile block. Should something cause a change in a tile server-side, the client needs to be alerted of this. So the server sends a message to client telling which block to change and what to actually change. At first I was sending 3 doubles for x, y and z of the block but felt it would be more efficient to send a single integer with a hash of the position. It took me a little to think these two methods out so I thought I’d share them here.</p>
<p>Note: this code only works for a cubic chunk or region.</p>
<p>[code=java]<br>
public static int posToInt(Position position) {<br>
int x = position.getX(), y = position.getY(), z = position.getZ();<br>
return x + z * Chunk.GRANULARITY + y * (int) Math.pow(Chunk.GRANULARITY, 2);<br>
}</p>
<p>public static Position intToPos(int id) {<br>
int wSq = (int) Math.pow(Chunk.GRANULARITY, 2);<br>
int y = (int) Math.floor(id / wSq);<br>
int z = (int) Math.floor((id - y * wSq) / Chunk.GRANULARITY);<br>
int x = id - y * wSq - z * Chunk.GRANULARITY;<br>
return new Position(x, y, z);<br>
}<br>
[/code]The Position object is basically just a struct class which holds the values of x (length), z (width) and y (height) for an entity. It was more useful to do this then store 3 integers, as the position class organises several utilities for calculating other location based mathematics.</p>
<p>The code is self-explanatory, especially the hashing (it’s just basic geometry). The wSq integer just means the width of the chunk squared, and was only set as a variable so it only had to run the calculation once instead of 3 times. The chunk has a static granularity variable instead of a length, width and height because it is cubic.</p>
<p>I hope someone else finds this useful.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631/1</link>
        <pubDate>Wed, 14 Sep 2011 04:11:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414631-1</guid>
        <source url="https://forum.moparisthebest.com/t/compressing-of-a-3d-coordinate-within-a-cubic-area/414631.rss">Compressing of a 3D coordinate within a cubic area</source>
      </item>
  </channel>
</rss>
