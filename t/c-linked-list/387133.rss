<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Linked list</title>
    <link>https://forum.moparisthebest.com/t/c-linked-list/387133</link>
    <description>This is a type-specific linked list.
The header: http://pastie.org/private/jmndut1it0cmhg2zs1dswg
The file: http://pastie.org/private/yryfeai5sbf1xlalzqkuwq

Still fairly new to C++ and decided to reinvent the wheel. This is a basic implementation of a linked list. Also did I (de)allocate memory correctly? Constructive criticism welcome.

Edit: I decided to rewrite it to easily add different types into the linked list.
The header:
[code=cpp]#ifndef _LINKED_LIST_HPP
#define	_LINKED_LIST_HPP

#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#include &lt;new&gt;

using namespace std;

template&lt;class T&gt; class LinkedList {

private:
    struct node {
        T data;
        struct node *next;
        struct node *prev;
    };

public:
    struct list {
        int size;
        struct node *first;
        struct node *last;
    };

    LinkedList();
    ~LinkedList();
    void destroy(struct list *);
    void add(struct list *, T);
    void del(struct list *, T);
    void print(struct list *);
    int size(struct list *);

};

#endif	/* _LINKED_LIST_HPP */[/code]

The file:
[code=cpp]#include &quot;linked_list.hpp&quot;

template&lt;class T&gt; LinkedList&lt;T&gt;::LinkedList() {
    // Allocate memory for the list.
    struct list *linked_list = new list;
    linked_list-&gt;first = linked_list-&gt;last = NULL;
    linked_list-&gt;size = 0;
}

// Don&#39;t know what to do with destructor :|
template&lt;class T&gt; LinkedList&lt;T&gt;::~LinkedList() {}

/*
 * Destroys the list.
 */
template&lt;class T&gt; void LinkedList&lt;T&gt;::destroy(struct list *linked_list) {
    if (linked_list == NULL) {
        return;
    }
    struct node *current = linked_list-&gt;first;
    struct node *next;
    while (current != NULL) {
        next = current-&gt;next;
        delete current;
        current = next;
    }
    // Free memory of the list.
    delete linked_list;
}

/*
 * Adds an integer to the list.
 */
template&lt;class T&gt; void LinkedList&lt;T&gt;::add(struct list *linked_list, T i) {
    struct node *new_node = new node;
    new_node-&gt;data = i;
    new_node-&gt;next = linked_list-&gt;first;
    new_node-&gt;prev = NULL;
    if (linked_list-&gt;first == NULL)
        linked_list-&gt;last = new_node;
    linked_list-&gt;first = new_node;
    linked_list-&gt;size++;
}

/*
 * Removes an integer from the list.
 */
template&lt;class T&gt; void LinkedList&lt;T&gt;::del(struct list *linked_list, T i) {
    struct node *current = linked_list-&gt;first;
    struct node *next, *prev;
    prev = current;
    if (current == NULL) {
        return;
    } else {
        while (current != NULL) {
            next = current-&gt;next;
            if (current-&gt;data == i) {
                prev-&gt;next = next;
                current-&gt;data = NULL;
                current-&gt;prev = NULL;
                delete current-&gt;prev;
                current = next;
                linked_list-&gt;size--;
            } else {
                prev = current;
                current = next;
            }
        }
    }
}

/*
 * Prints the integers in the list.
 */
template&lt;class T&gt; void LinkedList&lt;T&gt;::print(struct list *linked_list) {
    struct node *node = linked_list-&gt;first;
    if (node == NULL) {
        return;
    } else {
        while (node != NULL) {
            cout &lt;&lt; node-&gt;data &lt;&lt; endl;
            node = node-&gt;next;
        }
    }
}

/*
 * Returns the size of the list.
 */
template&lt;class T&gt; int LinkedList&lt;T&gt;::size(struct list *linked_list) {
    return (linked_list == NULL) ? NULL : linked_list-&gt;size;
}

int main(int argc, char** argv) {
    LinkedList&lt;int&gt; l;
    struct LinkedList&lt;int&gt;::list *test = new LinkedList&lt;int&gt;::list;
    for (int i = 0; i &lt; 1000; i++) {
        l.add(test, i);
    }
    l.print(test);
    cout &lt;&lt; &quot;Size: &quot; &lt;&lt; l.size(test) &lt;&lt; endl;
    l.destroy(test);
    return (EXIT_SUCCESS);
}[/code]

As usual, any constructive criticism?</description>
    
    <lastBuildDate>Thu, 24 Mar 2011 23:26:11 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-linked-list/387133.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>I was mostly referring to the people above you.</p>
<p>But I don’t really understand how what he’s done is “c like”.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/15</link>
        <pubDate>Thu, 24 Mar 2011 23:26:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-15</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:11, topic:387133”]Yes, he’s clearly written a C implementation.</p>
<p>Using those C templates, and that C memory model. And the C IO he used right there.</p>
<p>Or, possibly, everyone is just spewing bullshit on the unknown guy, again.</p>
<p>It is truely a shame I know that not everyone is a clone of super_ and frank_, but perhaps if we could hold it in just occaisionally.</p>
<p>EDIT: If you can’t though, you could at least not be fundamentally wrong. If he’s using C++ and he used a struct, he <em>did</em> use a class. It’s perfectly fine to want to use the word struct to make it clear that it’s just a data structure and not a code-containing object.[/quote]<br>
I didn’t say it was a C implementation. I merely implied that he didn’t utilise objects, and had ‘kinda written a C implementation’.<br>
He was asking for feedback on the linked list, not how he was using it in code. The rest of the program doesn’t even matter.</p>
<p>The only thing that was worth pointing out in your post was his use of templates - use of templates instead of using a void pointer and explicit casts doesn’t change the fact that it was implemented in a C-like fashion rather than the typical C++ linkedlist, which is implemented as a class. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>EDIT: Also, I like Rix. eh posts in the general programming section knowing that someone will probably be mean to him, and doesn’t afraid of anything. Plus he’s not a new guy - he uses IRC all the time.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/14</link>
        <pubDate>Thu, 24 Mar 2011 21:05:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-14</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@teh_spede Teh Spede]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/teh_spede">@teh_spede</a> wrote:</p>
          <blockquote>
              <p>ramen is just stupid</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/13</link>
        <pubDate>Thu, 24 Mar 2011 19:35:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-13</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">
/* 
 * File:   main.c
 * Author: fc
 *
 * Created on October 26, 2010, 12:13 PM
 */

#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;

/*
 * 
 */


struct cock {
    int i;
    struct cock *next;
};

void addInt(struct cock *root, int i);
void printAll(struct cock *root);
int length(struct cock *root);
int get(struct cock *root, int i);
struct cock *del(struct cock *root, int i);

int main(int argc, char** argv) {
    struct cock *root = malloc(sizeof (root));
    int i;
    for (i = 0; i &lt; 10; i++) {
        addInt(root, i);
    }

    printAll(root);
    printf("length=%d\n", length(root));
    root = del(root, 0);

    printAll(root);
    printf("length=%d\n", length(root));
    return (EXIT_SUCCESS);
}

void addInt(struct cock *root, int i) {
    struct cock *curr = root;
    while (curr-&gt;next != NULL) {
        curr = curr-&gt;next;
    }
    curr-&gt;next = malloc(sizeof (root));
    curr-&gt;i = i;
}

void printAll(struct cock *root) {
    struct cock *curr = root;
    while (curr-&gt;next != NULL) {
        printf("%d\n", curr-&gt;i);
        curr = curr-&gt;next;
    }
}

int length(struct cock *root) {
    struct cock *curr = root;
    int i = 0;
    while (curr-&gt;next != NULL) {
        i++;
        curr = curr-&gt;next;
    }
    return i;
}

int get(struct cock *root, int i) {
    struct cock *curr = root;
    int j;
    for (j = 0; j &lt; i; j++) {
        if (curr-&gt;next != NULL) {
            curr = curr-&gt;next;
        } else {
            break;
        }
    }

    return curr-&gt;i;
}

struct cock *del(struct cock *root, int i) {
    if (i == 0) {
        struct cock *curr = root;
        free(root);
        curr = curr-&gt;next;
        root = curr;
        
    } else {
        struct cock *curr = root;
        int j;
        for (j = 0; j &lt; i - 1; j++) {
            if (curr-&gt;next != NULL) {
                curr = curr-&gt;next;
            } else {
                break;
            }
        }
        free(curr-&gt;next);
        curr-&gt;next = curr-&gt;next-&gt;next;
    }
    return root;
}</code></pre>
<p>A really basic/shit implementation I created in C ages ago…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/12</link>
        <pubDate>Thu, 24 Mar 2011 16:22:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-12</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>Yes, he’s clearly written a C implementation.</p>
<p>Using those C templates, and that C memory model. And the C IO he used right there.</p>
<p>Or, possibly, everyone is just spewing bullshit on the unknown guy, again.</p>
<p>It is truely a shame I know that not everyone is a clone of super_ and frank_, but perhaps if we could hold it in just occaisionally.</p>
<p>EDIT: If you can’t though, you could at least not be fundamentally wrong. If he’s using C++ and he used a struct, he <em>did</em> use a class. It’s perfectly fine to want to use the word struct to make it clear that it’s just a data structure and not a code-containing object.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/11</link>
        <pubDate>Thu, 24 Mar 2011 13:35:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-11</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>I didn’t know what I was doing. <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> Anyways I’m going to stay away from C++ from now on.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/10</link>
        <pubDate>Thu, 24 Mar 2011 09:47:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-10</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rix_, post:8, topic:387133”]Care to actually tell me what’s wrong with it?</p>
<p>inb4 everything[/quote]<br>
Basically you have functions that operate on a struct. C++ is object-oriented though, so your LinkedList could be a class that those functions belong to.<br>
You’ve kinda written a C implementation, basically.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/9</link>
        <pubDate>Mon, 21 Mar 2011 09:38:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>Care to actually tell me what’s wrong with it?</p>
<p>inb4 everything</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/8</link>
        <pubDate>Mon, 21 Mar 2011 08:19:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>…massive facepalm</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/7</link>
        <pubDate>Sun, 20 Mar 2011 18:27:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>what the hell</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/6</link>
        <pubDate>Sun, 20 Mar 2011 16:05:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>I rewrote it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/5</link>
        <pubDate>Sun, 20 Mar 2011 10:29:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:2, topic:387133”]why the fuck didn’t you create a LinkedList class[/quote]Why do you always expect people that are learning a language to do everything perfectly, and if they don’t you flame them? Are you incapable of saying something like ‘It would be a good idea to make a linked list class’…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/4</link>
        <pubDate>Sun, 20 Mar 2011 07:23:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rix_, post:1, topic:387133”]Still fairly new to C++ and decided to reinvent the wheel.[/quote][quote=“abraham2119, post:2, topic:387133”]why the fuck didn’t you create a LinkedList class[/quote]Why the fuck didn’t you read his whole post?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/3</link>
        <pubDate>Sun, 20 Mar 2011 07:20:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>why the fuck didn’t you create a LinkedList class</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/2</link>
        <pubDate>Sun, 20 Mar 2011 06:46:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
      <item>
        <title>[C++] Linked list</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>This is a type-specific linked list.<br>
The header: <a href="http://pastie.org/private/jmndut1it0cmhg2zs1dswg" rel="nofollow noopener">http://pastie.org/private/jmndut1it0cmhg2zs1dswg</a><br>
The file: <a href="http://pastie.org/private/yryfeai5sbf1xlalzqkuwq" rel="nofollow noopener">http://pastie.org/private/yryfeai5sbf1xlalzqkuwq</a></p>
<p>Still fairly new to C++ and decided to reinvent the wheel. This is a basic implementation of a linked list. Also did I (de)allocate memory correctly? Constructive criticism welcome.</p>
<p>Edit: I decided to rewrite it to easily add different types into the linked list.<br>
The header:</p>
<p>[code=cpp]<span class="hashtag">#ifndef</span> _LINKED_LIST_HPP<br>
<span class="hashtag">#define</span>	_LINKED_LIST_HPP</p>
<p><span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> </p>
<p>using namespace std;</p>
<p>template class LinkedList {</p>
<p>private:<br>
struct node {<br>
T data;<br>
struct node *next;<br>
struct node *prev;<br>
};</p>
<p>public:<br>
struct list {<br>
int size;<br>
struct node *first;<br>
struct node *last;<br>
};</p>
<pre><code>LinkedList();
~LinkedList();
void destroy(struct list *);
void add(struct list *, T);
void del(struct list *, T);
void print(struct list *);
int size(struct list *);
</code></pre>
<p>};</p>
<p><span class="hashtag">#endif</span>	/* _LINKED_LIST_HPP */[/code]</p>
<p>The file:</p>
<p>[code=cpp]<span class="hashtag">#include</span> “linked_list.hpp”</p>
<p>template LinkedList::LinkedList() {<br>
// Allocate memory for the list.<br>
struct list *linked_list = new list;<br>
linked_list-&gt;first = linked_list-&gt;last = NULL;<br>
linked_list-&gt;size = 0;<br>
}</p>
<p>// Don’t know what to do with destructor <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"><br>
template LinkedList::~LinkedList() {}</p>
<p>/*</p>
<ul>
<li>Destroys the list.<br>
*/<br>
template void LinkedList::destroy(struct list *linked_list) {<br>
if (linked_list == NULL) {<br>
return;<br>
}<br>
struct node *current = linked_list-&gt;first;<br>
struct node *next;<br>
while (current != NULL) {<br>
next = current-&gt;next;<br>
delete current;<br>
current = next;<br>
}<br>
// Free memory of the list.<br>
delete linked_list;<br>
}</li>
</ul>
<p>/*</p>
<ul>
<li>Adds an integer to the list.<br>
*/<br>
template void LinkedList::add(struct list *linked_list, T i) {<br>
struct node *new_node = new node;<br>
new_node-&gt;data = i;<br>
new_node-&gt;next = linked_list-&gt;first;<br>
new_node-&gt;prev = NULL;<br>
if (linked_list-&gt;first == NULL)<br>
linked_list-&gt;last = new_node;<br>
linked_list-&gt;first = new_node;<br>
linked_list-&gt;size++;<br>
}</li>
</ul>
<p>/*</p>
<ul>
<li>Removes an integer from the list.<br>
*/<br>
template void LinkedList::del(struct list *linked_list, T i) {<br>
struct node *current = linked_list-&gt;first;<br>
struct node *next, *prev;<br>
prev = current;<br>
if (current == NULL) {<br>
return;<br>
} else {<br>
while (current != NULL) {<br>
next = current-&gt;next;<br>
if (current-&gt;data == i) {<br>
prev-&gt;next = next;<br>
current-&gt;data = NULL;<br>
current-&gt;prev = NULL;<br>
delete current-&gt;prev;<br>
current = next;<br>
linked_list-&gt;size–;<br>
} else {<br>
prev = current;<br>
current = next;<br>
}<br>
}<br>
}<br>
}</li>
</ul>
<p>/*</p>
<ul>
<li>Prints the integers in the list.<br>
*/<br>
template void LinkedList::print(struct list *linked_list) {<br>
struct node *node = linked_list-&gt;first;<br>
if (node == NULL) {<br>
return;<br>
} else {<br>
while (node != NULL) {<br>
cout &lt;&lt; node-&gt;data &lt;&lt; endl;<br>
node = node-&gt;next;<br>
}<br>
}<br>
}</li>
</ul>
<p>/*</p>
<ul>
<li>Returns the size of the list.<br>
*/<br>
template int LinkedList::size(struct list *linked_list) {<br>
return (linked_list == NULL) ? NULL : linked_list-&gt;size;<br>
}</li>
</ul>
<p>int main(int argc, char** argv) {<br>
LinkedList l;<br>
struct LinkedList::list *test = new LinkedList::list;<br>
for (int i = 0; i &lt; 1000; i++) {<br>
l.add(test, i);<br>
}<br>
l.print(test);<br>
cout &lt;&lt; "Size: " &lt;&lt; l.size(test) &lt;&lt; endl;<br>
l.destroy(test);<br>
return (EXIT_SUCCESS);<br>
}[/code]</p>
<p>As usual, any constructive criticism?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-linked-list/387133/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-linked-list/387133/1</link>
        <pubDate>Sun, 20 Mar 2011 05:45:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387133-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-linked-list/387133.rss">[C++] Linked list</source>
      </item>
  </channel>
</rss>
