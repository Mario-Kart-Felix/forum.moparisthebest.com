<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Clojure] RS Loader</title>
    <link>https://forum.moparisthebest.com/t/clojure-rs-loader/449416</link>
    <description>I was bored, so I decided to write an RS client loader in Clojure :)

web.clj

[code=clojure](ns loader.web
  (:import (java.io BufferedReader InputStreamReader)
           (java.net URL)))

(def session-pattern #&quot;src=\&quot;(.*)\&quot; f&quot;)
(def archive-pattern #&quot;archive=(.*)\s+code=(.*)\.class m&quot;)
(def param-pattern #&quot;&lt;param name=\&quot;([^\s]+)\&quot;\s+value=\&quot;([^&gt;]*)\&quot;&gt;&quot;)

(defn- read-page [address]
  (with-open [reader (BufferedReader. (InputStreamReader. (.openStream (URL. address))))]
    (let [lines (line-seq reader)]
      (reduce #(str %1 &quot;\n&quot; %2) lines))))

(defn- read-session [html]
  (.trim (second (re-find session-pattern html))))

(defn- read-archive [html]
  (let [archive (re-find archive-pattern html)]
    {:jar (second archive) :code (last archive)}))

(defn- read-params [html]
  (loop [matches (re-seq param-pattern html)
         result {}]
    (if (empty? matches)
      result
      (recur (rest matches) (assoc result (-&gt; matches first second) (-&gt; matches first last))))))
	  
(defn read-info []
  (let [page (read-page &quot;http://www.runescape.com/game.ws?j=0&quot;)
        session (read-session page)
        frame (read-page session)
        url (.substring session 0 (.indexOf session &quot;/,&quot;))
        archive (read-archive frame)
        parameters (read-params frame)]
    (println &quot; - Loaded&quot; url)
    (println &quot; - SecretKeySpec =&quot; (parameters &quot;0&quot;))
    (println &quot; - IvParameterSpec =&quot; (parameters &quot;-1&quot;))
    {:session url :archive archive :parameters parameters}))	[/code]

gui.clj

[code=clojure](ns loader.gui
  (:require [loader.web :as web])
  (:import (java.applet Applet AppletStub)
           (java.awt BorderLayout Dimension)
           (java.net MalformedURLException URL URLClassLoader)
           (javax.swing JFrame JPanel)))

(defn- create-loader [session parameters]
  (proxy [JFrame AppletStub] []
    (appletResize [width height])
    (getAppletContext [] nil)
    (getCodeBase [] (URL. session))
    (getDocumentBase [] (.getCodeBase this))
    (getParameter [name] (parameters name))
    (isActive [] false)))

(defn init-loader []
  (let [info (web/read-info)
        loader (create-loader (info :session) (info :parameters))
        class-loader (URLClassLoader. (into-array [(URL. (str (info :session) &quot;/&quot; (-&gt; info :archive :jar)))]))
        applet-class (.loadClass class-loader (-&gt; info :archive :code))
        #^Applet applet-loader (.newInstance applet-class)
        game (JPanel. (BorderLayout.))]
    (.setStub applet-loader loader)
    (.setTitle loader &quot;RuneScape&quot;)
    (.setPreferredSize game (Dimension. 768 560))
    (.setDefaultCloseOperation loader JFrame/EXIT_ON_CLOSE)
    (.setSize loader 768 560)
    (.init applet-loader)
    (.start applet-loader)
    (.add game applet-loader)
    (.. loader getContentPane (add game BorderLayout/CENTER))
    (.setVisible loader true)))[/code]

main.clj

[code=clojure](ns loader.main
  (:require [loader.gui :as gui])
  (:gen-class))

(defn -main [&amp; args]
  (gui/init-loader))[/code]

Obviously not the safest way to load the client, but that can be fixed. I also attached the Clojure source code and compiled classes, because it&#39;s fun to see how Clojure compiles to Java bytecode :P</description>
    
    <lastBuildDate>Sat, 14 Jul 2012 18:37:30 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/clojure-rs-loader/449416.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Clojure] RS Loader</title>
        <dc:creator><![CDATA[@Echo3 Echo_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/echo3">@Echo3</a> wrote:</p>
          <blockquote>
              <p>[quote=“Omer_, post:1, topic:449607”]There is a function [font=courier]slurp[/font] in the <a href="http://clojure.java.io" rel="nofollow noopener">clojure.java.io</a> package. Use it to read input from files or web pages. For example:</p>
<pre><code class="lang-auto">(ns loader.web
  :use [clojure.java.io :only slurp])
(defn read-page [address]
  (slurp address))</code></pre>
<p>You can use [font=courier]re-seq[/font] to get a lazy sequence of successive matches of pattern in string.<br>
Otherwise, nice job. ;)[/quote]</p>
<p>Slurp isn’t in <a href="http://clojure.java.io" rel="nofollow noopener">clojure.java.io</a> (contrib library maybe?) and it doesn’t add newlines after each line. I thought of this solution though:</p>
<p><code>(let [lines (line-seq reader)]
  (reduce #(str %1 "\n" %2) lines))</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clojure-rs-loader/449416/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clojure-rs-loader/449416/2</link>
        <pubDate>Sat, 14 Jul 2012 18:37:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-449416-2</guid>
        <source url="https://forum.moparisthebest.com/t/clojure-rs-loader/449416.rss">[Clojure] RS Loader</source>
      </item>
      <item>
        <title>[Clojure] RS Loader</title>
        <dc:creator><![CDATA[@Echo3 Echo_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/echo3">@Echo3</a> wrote:</p>
          <blockquote>
              <p>I was bored, so I decided to write an RS client loader in Clojure <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>web.clj</p>
<p>[code=clojure](ns loader.web<br>
(:import (<a href="http://java.io" rel="nofollow noopener">java.io</a> BufferedReader InputStreamReader)<br>
(<a href="http://java.net" rel="nofollow noopener">java.net</a> URL)))</p>
<p>(def session-pattern #“src=”(.<em>)" f")<br>
(def archive-pattern #"archive=(.</em>)\s+code=(.<em>).class m")<br>
(def param-pattern #"&lt;param name="([^\s]+)"\s+value="([^&gt;]</em>)"&gt;")</p>
<p>(defn- read-page [address]<br>
(with-open [reader (BufferedReader. (InputStreamReader. (.openStream (URL. address))))]<br>
(let [lines (line-seq reader)]<br>
(reduce #(str %1 “\n” %2) lines))))</p>
<p>(defn- read-session [html]<br>
(.trim (second (re-find session-pattern html))))</p>
<p>(defn- read-archive [html]<br>
(let [archive (re-find archive-pattern html)]<br>
{:jar (second archive) :code (last archive)}))</p>
<p>(defn- read-params [html]<br>
(loop [matches (re-seq param-pattern html)<br>
result {}]<br>
(if (empty? matches)<br>
result<br>
(recur (rest matches) (assoc result (-&gt; matches first second) (-&gt; matches first last))))))</p>
<p>(defn read-info []<br>
(let [page (read-page “<a href="http://www.runescape.com/game.ws?j=0" rel="nofollow noopener">http://www.runescape.com/game.ws?j=0</a>”)<br>
session (read-session page)<br>
frame (read-page session)<br>
url (.substring session 0 (.indexOf session “/,”))<br>
archive (read-archive frame)<br>
parameters (read-params frame)]<br>
(println " - Loaded" url)<br>
(println " - SecretKeySpec =" (parameters “0”))<br>
(println " - IvParameterSpec =" (parameters “-1”))<br>
{:session url :archive archive :parameters parameters}))	[/code]</p>
<p>gui.clj</p>
<p>[code=clojure](ns loader.gui<br>
(:require [loader.web :as web])<br>
(:import (java.applet Applet AppletStub)<br>
(java.awt BorderLayout Dimension)<br>
(<a href="http://java.net" rel="nofollow noopener">java.net</a> MalformedURLException URL URLClassLoader)<br>
(javax.swing JFrame JPanel)))</p>
<p>(defn- create-loader [session parameters]<br>
(proxy [JFrame AppletStub] []<br>
(appletResize [width height])<br>
(getAppletContext [] nil)<br>
(getCodeBase [] (URL. session))<br>
(getDocumentBase [] (.getCodeBase this))<br>
(getParameter [name] (parameters name))<br>
(isActive [] false)))</p>
<p>(defn init-loader []<br>
(let [info (web/read-info)<br>
loader (create-loader (info :session) (info :parameters))<br>
class-loader (URLClassLoader. (into-array [(URL. (str (info :session) “/” (-&gt; info :archive :jar)))]))<br>
applet-class (.loadClass class-loader (-&gt; info :archive :code))<br>
#^Applet applet-loader (.newInstance applet-class)<br>
game (JPanel. (BorderLayout.))]<br>
(.setStub applet-loader loader)<br>
(.setTitle loader “RuneScape”)<br>
(.setPreferredSize game (Dimension. 768 560))<br>
(.setDefaultCloseOperation loader JFrame/EXIT_ON_CLOSE)<br>
(.setSize loader 768 560)<br>
(.init applet-loader)<br>
(.start applet-loader)<br>
(.add game applet-loader)<br>
(… loader getContentPane (add game BorderLayout/CENTER))<br>
(.setVisible loader true)))[/code]</p>
<p>main.clj</p>
<p>[code=clojure](ns loader.main<br>
(:require [loader.gui :as gui])<br>
(:gen-class))</p>
<p>(defn -main [&amp; args]<br>
(gui/init-loader))[/code]</p>
<p>Obviously not the safest way to load the client, but that can be fixed. I also attached the Clojure source code and compiled classes, because it’s fun to see how Clojure compiles to Java bytecode <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clojure-rs-loader/449416/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clojure-rs-loader/449416/1</link>
        <pubDate>Thu, 12 Jul 2012 19:55:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-449416-1</guid>
        <source url="https://forum.moparisthebest.com/t/clojure-rs-loader/449416.rss">[Clojure] RS Loader</source>
      </item>
  </channel>
</rss>
