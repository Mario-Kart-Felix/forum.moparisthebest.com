<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help with server sockets</title>
    <link>https://forum.moparisthebest.com/t/help-with-server-sockets/361134</link>
    <description>Hi,

below is code from a project that i am working on at university. It creates a server then i run a client which runs a sweet sweet protocol which does some cool stuff. What im after is when i run multiple clients how can i get information from the previouse client ie i run 1 instance of my BookALab class then i run another instance and check to see if that class is full. Each instance of the book a lab class runs independantly from another which is not what i want i want all information to be shared. I followed this tutorial here

http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html

and customised it to meet the requirements of my assigment now im just trying to make it better for extra marks

[code]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bookalab;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;
import java.net.UnknownHostException;

/**
 *
 * @author stuju133
 */
public class BookCli {

    public static void main(String[] args) throws IOException {
        Socket bookServerSocket = null;
        PrintWriter out = null;
        BufferedReader in = null;

        try {
            bookServerSocket = new Socket(&quot;localhost&quot;, 4444);
            out = new PrintWriter(bookServerSocket.getOutputStream(), true);
            in = new BufferedReader(new InputStreamReader(bookServerSocket.getInputStream()));
        } catch (UnknownHostException e) {
            System.out.println(&quot;could not connect to host&quot;);
            System.exit(1);
        } catch (IOException e) {
            System.err.println(&quot;Couldn&#39;t get I/O for the connection&quot;);
            System.exit(1);
        }

        BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
        String fromServer;
        String fromUser;

        while ((fromServer = in.readLine()) != null) {
            System.out.println(&quot;Server: &quot; + fromServer);
            if (fromServer.equals(&quot;Bye.&quot;)) {
                break;
            }

            fromUser = stdIn.readLine();
            if (fromUser != null) {
                System.out.println(&quot;Client: &quot; + fromUser);
                out.println(fromUser);
            }
        }

        out.close();
        in.close();
        stdIn.close();
        bookServerSocket.close();

    }
}
[/code]

[code]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package bookalab;

/**
 *
 * @author stuju133
 */

import java.net.*;
import java.io.*;

public class BookMultiServerThread extends Thread {
    private Socket socket = null;

    public BookMultiServerThread(Socket socket) {
	super(&quot;KKMultiServerThread&quot;);
	this.socket = socket;
    }

    @Override
    public void run() {

	try {
	    PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
	    BufferedReader in = new BufferedReader(
				    new InputStreamReader(
				    socket.getInputStream()));

	    String inputLine, outputLine;
	    BookProtocol kkp = new BookProtocol();
	    outputLine = kkp.processInput(null);
	    out.println(outputLine);

	    while ((inputLine = in.readLine()) != null) {
		outputLine = kkp.processInput(inputLine);
		out.println(outputLine);
		if (outputLine.equals(&quot;exit&quot;))
		    break;
	    }
	    out.close();
	    in.close();
	    socket.close();

	} catch (IOException e) {
	    e.printStackTrace();
	}
    }
}[/code]

[code]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bookalab;

import java.io.BufferedReader;
import java.io.IOException;

import java.net.Socket;
import java.util.ArrayList;

/**
 *
 * @author stuju133
 */
public class BookProtocol {

    //ArrayList students = new ArrayList(5);
    ArrayList s1 = new ArrayList(5);
    ArrayList s2 = new ArrayList(5);
    ArrayList s3 = new ArrayList(5);
    ArrayList s4 = new ArrayList(5);
    ArrayList s5 = new ArrayList(5);
    private static final int START = 0;
    private static final int STARTOPTION = 1;
    private static final int WAITING = 2;
    private static final int PICKSTREAM = 3;
    private static final int ADDSTREAM = 4;
    private static final int ADDSTREAM2 = 5;
    private static final int ADDSTREAM3 = 6;
    private static final int ADDSTREAM4 = 7;
    private static final int ADDSTREAM5 = 8;
    private static final int ENTERID = 9;
    private static final int ENTERID2 = 10;
    private static final int ENTERID3 = 11;
    private static final int ENTERID4 = 12;
    private static final int ENTERID5 = 13;
    private static final int ADDTOSTREAMSUCCES = 15;
    private static final int ADDTOSTREAMSUCCES2 = 16;
    private static final int ADDTOSTREAMSUCCES3 = 17;
    private static final int ADDTOSTREAMSUCCES4 = 18;
    private static final int ADDTOSTREAMSUCCES5 = 19;
    private static final int CHANGESTREAM = 20;
    private static final int CHECKSTREAM = 21;
    private static final int CHANGEID = 22;
    private int state = START;

    public String processInput(String theInput) throws IOException {
        String theOutput = null;
        BufferedReader incoming;
        String messageIn;
        Socket clientSocket = null;
        String studentID = null;
        if (state == START) {
            theOutput = &quot;would you like to either check your stream or enter a stream? check/add&quot;;
            state = STARTOPTION;
        } else if (state == STARTOPTION) {
            if (theInput.equalsIgnoreCase(&quot;check&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = CHECKSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;add&quot;)) {
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
                state = PICKSTREAM;
            }
        }  else if (state == PICKSTREAM) {
            theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            if (theInput.equalsIgnoreCase(&quot;s1&quot;) &amp;&amp; s1.size() &lt; 5) {
                theOutput = &quot;Their is room in stream S1 would you like to join it y/n?&quot;;
                state = ADDSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;s2&quot;) &amp;&amp; s2.size() &lt; 5) {
                theOutput = &quot;Their is room in stream S2 would you like to join it y/n?&quot;;
                state = ADDSTREAM2;
            } else if (theInput.equalsIgnoreCase(&quot;s3&quot;) &amp;&amp; s3.size() &lt; 5) {
                theOutput = &quot;Their is room in stream S3 would you like to join it y/n?&quot;;
                state = ADDSTREAM3;
            } else if (theInput.equalsIgnoreCase(&quot;s4&quot;) &amp;&amp; s4.size() &lt; 5) {
                theOutput = &quot;Their is room in stream S4 would you like to join it y/n?&quot;;
                state = ADDSTREAM4;
            } else if (theInput.equalsIgnoreCase(&quot;s5&quot;) &amp;&amp; s5.size() &lt; 5) {
                theOutput = &quot;Their is room in stream S5 would you like to join it y/n?&quot;;
                state = ADDSTREAM5;
            } else {
                theOutput = &quot;That stream is full please pick another one&quot;;
                state = WAITING;
            }
        } else if (state == ADDSTREAM) {
            if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = ENTERID;
            }
        } else if (state == ADDSTREAM2) {
            if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = ENTERID2;
            }
        } else if (state == ADDSTREAM3) {
            if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = ENTERID3;
            }
        } else if (state == ADDSTREAM4) {
            if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = ENTERID4;
            }
        } else if (state == ADDSTREAM5) {
            if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
                theOutput = &quot;please enter your student id&quot;;
                state = ENTERID5;
            }
        } else if (state == ENTERID) {
            studentID = theInput;
            s1.add(studentID);
            theOutput = &quot;You have been added to stream S1 the size now is &quot; + Integer.toString(s1.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            state = ADDTOSTREAMSUCCES;
        } else if (state == ENTERID2) {
            studentID = theInput;
            s2.add(studentID);
            theOutput = &quot;You have been added to stream S2 the size now is &quot; + Integer.toString(s2.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            state = ADDTOSTREAMSUCCES2;
        } else if (state == ENTERID3) {
            studentID = theInput;
            s3.add(studentID);
            theOutput = &quot;You have been added to stream S3 the size now is &quot; + Integer.toString(s3.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            state = ADDTOSTREAMSUCCES3;
        } else if (state == ENTERID4) {
            studentID = theInput;
            s4.add(studentID);
            theOutput = &quot;You have been added to stream S4 the size now is &quot; + Integer.toString(s4.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            state = ADDTOSTREAMSUCCES4;
        } else if (state == ENTERID5) {
            studentID = theInput;
            s5.add(studentID);
            theOutput = &quot;You have been added to stream S5 the size now is &quot; + Integer.toString(s5.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            state = ADDTOSTREAMSUCCES5;
        } else if (state == ADDTOSTREAMSUCCES) {
            theOutput = &quot;You have been added to stream the size now is &quot; + Integer.toString(s1.size()) + &quot;.&quot; + &quot; Woul you like to check or change your stream? or exit? yes/exit&quot;;
            if (theInput.equalsIgnoreCase(&quot;check&quot;)) {
                theOutput = &quot;Please enter your student ID&quot;;
                state = CHECKSTREAM;
            }
        } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
            System.exit(-1);
        } else if (state == ADDTOSTREAMSUCCES2) {
            theOutput = &quot;You have been added to stream the size now is &quot; + Integer.toString(s2.size()) + &quot;.&quot; + &quot; Woul you like to check/change your stream? or exit? check/exit&quot;;
            if (theInput.equalsIgnoreCase(&quot;yes&quot;)) {
                theOutput = &quot;Please enter your student ID&quot;;
                state = CHECKSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
                System.exit(-1);
            }
        } else if (state == ADDTOSTREAMSUCCES3) {
            theOutput = &quot;You have been added to stream the size now is &quot; + Integer.toString(s3.size()) + &quot;.&quot; + &quot; Woul you like to check/change your stream? or exit? check/exit&quot;;
            if (theInput.equalsIgnoreCase(&quot;yes&quot;)) {
                theOutput = &quot;Please enter your student ID&quot;;
                state = CHECKSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
                System.exit(-1);
            }
        } else if (state == ADDTOSTREAMSUCCES4) {
            theOutput = &quot;You have been added to stream the size now is &quot; + Integer.toString(s4.size()) + &quot;.&quot; + &quot; Woul you like to check/change your stream? or exit? check/exit&quot;;
            if (theInput.equalsIgnoreCase(&quot;yes&quot;)) {
                theOutput = &quot;Please enter your student ID&quot;;
                state = CHECKSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
                System.exit(-1);
            }
        } else if (state == ADDTOSTREAMSUCCES5) {
            theOutput = &quot;You have been added to stream the size now is &quot; + Integer.toString(s5.size()) + &quot;.&quot; + &quot; Woul you like to check/change your stream? or exit? check/exit&quot;;
            if (theInput.equalsIgnoreCase(&quot;yes&quot;)) {
                theOutput = &quot;Please enter your student ID&quot;;
                state = CHECKSTREAM;
            } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
                System.exit(-1);
            }
        } else if (state == CHECKSTREAM) {
            studentID = theInput;
            System.out.println(&quot;Student Id is this one: &quot; + studentID);
//            System.out.println(&quot;The First value is : &quot; + s1.get(0));
            if (s1.contains(studentID)) {
//                System.out.println(&quot;Im in the IF STATEMENT&quot;);
                theOutput = &quot;You are in Stream S1 would you like to change your stream?yes/exit&quot;;
                state = CHANGESTREAM;
            } else if (s2.contains(studentID)) {
                theOutput = &quot;You are in Stream S2 would you like to change your stream?yes/exit&quot;;
                state = CHANGESTREAM;
            } else if (s3.contains(studentID)) {
                theOutput = &quot;You are in Stream S3 would you like to change your stream?yes/exit&quot;;
                state = CHANGESTREAM;
            } else if (s4.contains(studentID)) {
                theOutput = &quot;You are in Stream S4 would you like to change your stream?yes/exit&quot;;
                state = CHANGESTREAM;
            } else if (s5.contains(studentID)) {
                theOutput = &quot;You are in Stream S5 would you like to change your stream?yes/exit&quot;;
                state = CHANGESTREAM;
            } else {
                theOutput = &quot;you are not streamed for any class would you like to pick a stream or exit?yes/exit&quot;;
                if (theInput.equalsIgnoreCase(&quot;yes&quot;)) {
                    theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
                    state = PICKSTREAM;
                } else if (theInput.equalsIgnoreCase(&quot;exit&quot;)) {
                    System.exit(-1);
                }
            }
        } else if (state == CHANGESTREAM) {
            if(theInput.equalsIgnoreCase(&quot;yes&quot;)){
            theOutput = &quot;Please enter your student ID to change streams&quot;;
            state = CHANGEID;
            }
        }else if (state==CHANGEID){
            studentID = theInput;
               System.out.println(&quot;The final input is: &quot;+ theInput);
            if(s1.contains(studentID)){
                System.out.println(&quot;we made it to if statement&quot;);
                s1.remove(studentID);                
                state = PICKSTREAM;
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            } else  if(s2.contains(studentID)){
                System.out.println(&quot;we made it to if statement&quot;);
                s2.remove(studentID);
                state = PICKSTREAM;
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            }else  if(s3.contains(studentID)){
                System.out.println(&quot;we made it to if statement&quot;);
                s3.remove(studentID);
                state = PICKSTREAM;
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            }else  if(s4.contains(studentID)){
                System.out.println(&quot;we made it to if statement&quot;);
                s4.remove(studentID);
                state = PICKSTREAM;
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            } if(s5.contains(studentID)){
                System.out.println(&quot;we made it to if statement&quot;);
                s5.remove(studentID);
                state = PICKSTREAM;
                theOutput = &quot;Hi please book a lab for either Streams S1,S2,S3,S4,S5&quot;;
            }
            }return theOutput;
    }
}
        


        




    

//                else if (theInput.equalsIgnoreCase(&quot;n&quot;)) {
//                    theOutput = &quot;would you like to pick a different stream or exit? y/n?&quot;;
//                    if (theInput.equalsIgnoreCase(&quot;y&quot;)) {
//                        state = WAITING;
//                    } else if (theInput.equalsIgnoreCase(&quot;n&quot;) || s1.size() &lt; 5) {
//                        System.exit(-1);
//                    }



    





[/code]

[code]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bookalab;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;

/**
 *
 * @author stuju133
 */
public class BookSvr1 {

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = null;
        try {
            serverSocket = new ServerSocket(4444);
        } catch (IOException e) {
            System.out.println(&quot;Could not listen on port: 4444&quot;);
            System.exit(-1);
        }
        //start listening for a connection

        Socket clientSocket = null;
        try {
            clientSocket = serverSocket.accept();
        } catch (IOException e) {
            System.out.println(&quot;Accept failed on port 4444&quot;);
            System.exit(-1);
        }
        // if a listening state successfull accept a new connection
        PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
        BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
        String inputLine, outputLine;
        //do the above so we can communicate with the client

        //KnockKnockProtocol kkp = new KnockKnockProtocol();
        BookProtocol bpc = new BookProtocol();
        //outputLine = kkp.processInput(null);
        outputLine = bpc.processInput(null);
        out.println(outputLine);

        while ((inputLine = in.readLine()) != null) {
           // outputLine = kkp.processInput(inputLine);
            outputLine = bpc.processInput(inputLine);
            out.println(outputLine);
            if (outputLine.equals(&quot;Bye.&quot;)) {
                break;
            }
        }
        out.close();
        in.close();
        clientSocket.close();
        serverSocket.close();

    }
}
[/code]

[code]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package bookalab;

/**
 *
 * @author stuju133
 */
import java.net.*;
import java.io.*;

public class BookSvr2 {
    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = null;
        boolean listening = true;

        try {
            serverSocket = new ServerSocket(4444);
        } catch (IOException e) {
            System.err.println(&quot;Could not listen on port: 4444.&quot;);
            System.exit(-1);
        }

        while (listening)
	    new BookMultiServerThread(serverSocket.accept()).start();

        serverSocket.close();
    }
}[/code]

any help would be greatly appreciated</description>
    
    <lastBuildDate>Mon, 20 Sep 2010 20:51:59 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-with-server-sockets/361134.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help with server sockets</title>
        <dc:creator><![CDATA[@Canownueazy Canownueazy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/canownueazy">@Canownueazy</a> wrote:</p>
          <blockquote>
              <p>Use Apache MINA and I’ll help you more <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>If you want, I made a server using MINA: <a href="http://www.comserver.tumblr.com" rel="nofollow noopener">www.comserver.tumblr.com</a></p>
<p>Anyway, what I’d do is make a storage class, and hold information in lists and such.</p>
<p>[code]import java.util.ArrayList;</p>
<p>public class Storage {</p>
<pre><code>public ArrayList&lt;Object&gt; stuff = new ArrayList&lt;Object&gt;();
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-server-sockets/361134/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-server-sockets/361134/3</link>
        <pubDate>Mon, 20 Sep 2010 20:51:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361134-3</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-server-sockets/361134.rss">Help with server sockets</source>
      </item>
      <item>
        <title>Help with server sockets</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>I don’t understand what your question is…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-server-sockets/361134/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-server-sockets/361134/2</link>
        <pubDate>Mon, 20 Sep 2010 16:14:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361134-2</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-server-sockets/361134.rss">Help with server sockets</source>
      </item>
      <item>
        <title>Help with server sockets</title>
        <dc:creator><![CDATA[@traitors traitors]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/traitors">@traitors</a> wrote:</p>
          <blockquote>
              <p>Hi,</p>
<p>below is code from a project that i am working on at university. It creates a server then i run a client which runs a sweet sweet protocol which does some cool stuff. What im after is when i run multiple clients how can i get information from the previouse client ie i run 1 instance of my BookALab class then i run another instance and check to see if that class is full. Each instance of the book a lab class runs independantly from another which is not what i want i want all information to be shared. I followed this tutorial here</p>
<p><a href="http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html" class="onebox" target="_blank" rel="nofollow noopener">http://download.oracle.com/javase/tutorial/networking/sockets/clientServer.html</a></p>
<p>and customised it to meet the requirements of my assigment now im just trying to make it better for extra marks</p>
<p>[code]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/<br>
package bookalab;</li>
</ul>
<p>import java.io.BufferedReader;<br>
import java.io.IOException;<br>
import java.io.InputStreamReader;<br>
import java.io.PrintWriter;<br>
import java.net.Socket;<br>
import java.net.UnknownHostException;</p>
<p>/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> stuju133<br>
*/<br>
public class BookCli {</p>
<p>public static void main(String[] args) throws IOException {<br>
Socket bookServerSocket = null;<br>
PrintWriter out = null;<br>
BufferedReader in = null;</p>
<pre><code> try {
     bookServerSocket = new Socket("localhost", 4444);
     out = new PrintWriter(bookServerSocket.getOutputStream(), true);
     in = new BufferedReader(new InputStreamReader(bookServerSocket.getInputStream()));
 } catch (UnknownHostException e) {
     System.out.println("could not connect to host");
     System.exit(1);
 } catch (IOException e) {
     System.err.println("Couldn't get I/O for the connection");
     System.exit(1);
 }

 BufferedReader stdIn = new BufferedReader(new InputStreamReader(System.in));
 String fromServer;
 String fromUser;

 while ((fromServer = in.readLine()) != null) {
     System.out.println("Server: " + fromServer);
     if (fromServer.equals("Bye.")) {
         break;
     }

     fromUser = stdIn.readLine();
     if (fromUser != null) {
         System.out.println("Client: " + fromUser);
         out.println(fromUser);
     }
 }

 out.close();
 in.close();
 stdIn.close();
 bookServerSocket.close();
</code></pre>
<p>}<br>
}<br>
[/code]</p>
</li>
</ul>
<p>[code]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/</li>
</ul>
<p>package bookalab;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> stuju133<br>
*/</li>
</ul>
<p>import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class BookMultiServerThread extends Thread {<br>
private Socket socket = null;</p>
<pre><code>public BookMultiServerThread(Socket socket) {
super("KKMultiServerThread");
this.socket = socket;
}

@Override
public void run() {

try {
    PrintWriter out = new PrintWriter(socket.getOutputStream(), true);
    BufferedReader in = new BufferedReader(
			    new InputStreamReader(
			    socket.getInputStream()));

    String inputLine, outputLine;
    BookProtocol kkp = new BookProtocol();
    outputLine = kkp.processInput(null);
    out.println(outputLine);

    while ((inputLine = in.readLine()) != null) {
	outputLine = kkp.processInput(inputLine);
	out.println(outputLine);
	if (outputLine.equals("exit"))
	    break;
    }
    out.close();
    in.close();
    socket.close();

} catch (IOException e) {
    e.printStackTrace();
}
}
</code></pre>
<p>}[/code]</p>
<p>[code]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/<br>
package bookalab;</li>
</ul>
<p>import java.io.BufferedReader;<br>
import java.io.IOException;</p>
<p>import java.net.Socket;<br>
import java.util.ArrayList;</p>
<p>/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> stuju133<br>
*/<br>
public class BookProtocol {</p>
<p>//ArrayList students = new ArrayList(5);<br>
ArrayList s1 = new ArrayList(5);<br>
ArrayList s2 = new ArrayList(5);<br>
ArrayList s3 = new ArrayList(5);<br>
ArrayList s4 = new ArrayList(5);<br>
ArrayList s5 = new ArrayList(5);<br>
private static final int START = 0;<br>
private static final int STARTOPTION = 1;<br>
private static final int WAITING = 2;<br>
private static final int PICKSTREAM = 3;<br>
private static final int ADDSTREAM = 4;<br>
private static final int ADDSTREAM2 = 5;<br>
private static final int ADDSTREAM3 = 6;<br>
private static final int ADDSTREAM4 = 7;<br>
private static final int ADDSTREAM5 = 8;<br>
private static final int ENTERID = 9;<br>
private static final int ENTERID2 = 10;<br>
private static final int ENTERID3 = 11;<br>
private static final int ENTERID4 = 12;<br>
private static final int ENTERID5 = 13;<br>
private static final int ADDTOSTREAMSUCCES = 15;<br>
private static final int ADDTOSTREAMSUCCES2 = 16;<br>
private static final int ADDTOSTREAMSUCCES3 = 17;<br>
private static final int ADDTOSTREAMSUCCES4 = 18;<br>
private static final int ADDTOSTREAMSUCCES5 = 19;<br>
private static final int CHANGESTREAM = 20;<br>
private static final int CHECKSTREAM = 21;<br>
private static final int CHANGEID = 22;<br>
private int state = START;</p>
<p>public String processInput(String theInput) throws IOException {<br>
String theOutput = null;<br>
BufferedReader incoming;<br>
String messageIn;<br>
Socket clientSocket = null;<br>
String studentID = null;<br>
if (state == START) {<br>
theOutput = “would you like to either check your stream or enter a stream? check/add”;<br>
state = STARTOPTION;<br>
} else if (state == STARTOPTION) {<br>
if (theInput.equalsIgnoreCase(“check”)) {<br>
theOutput = “please enter your student id”;<br>
state = CHECKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“add”)) {<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
state = PICKSTREAM;<br>
}<br>
}  else if (state == PICKSTREAM) {<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
if (theInput.equalsIgnoreCase(“s1”) &amp;&amp; s1.size() &lt; 5) {<br>
theOutput = “Their is room in stream S1 would you like to join it y/n?”;<br>
state = ADDSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“s2”) &amp;&amp; s2.size() &lt; 5) {<br>
theOutput = “Their is room in stream S2 would you like to join it y/n?”;<br>
state = ADDSTREAM2;<br>
} else if (theInput.equalsIgnoreCase(“s3”) &amp;&amp; s3.size() &lt; 5) {<br>
theOutput = “Their is room in stream S3 would you like to join it y/n?”;<br>
state = ADDSTREAM3;<br>
} else if (theInput.equalsIgnoreCase(“s4”) &amp;&amp; s4.size() &lt; 5) {<br>
theOutput = “Their is room in stream S4 would you like to join it y/n?”;<br>
state = ADDSTREAM4;<br>
} else if (theInput.equalsIgnoreCase(“s5”) &amp;&amp; s5.size() &lt; 5) {<br>
theOutput = “Their is room in stream S5 would you like to join it y/n?”;<br>
state = ADDSTREAM5;<br>
} else {<br>
theOutput = “That stream is full please pick another one”;<br>
state = WAITING;<br>
}<br>
} else if (state == ADDSTREAM) {<br>
if (theInput.equalsIgnoreCase(“y”)) {<br>
theOutput = “please enter your student id”;<br>
state = ENTERID;<br>
}<br>
} else if (state == ADDSTREAM2) {<br>
if (theInput.equalsIgnoreCase(“y”)) {<br>
theOutput = “please enter your student id”;<br>
state = ENTERID2;<br>
}<br>
} else if (state == ADDSTREAM3) {<br>
if (theInput.equalsIgnoreCase(“y”)) {<br>
theOutput = “please enter your student id”;<br>
state = ENTERID3;<br>
}<br>
} else if (state == ADDSTREAM4) {<br>
if (theInput.equalsIgnoreCase(“y”)) {<br>
theOutput = “please enter your student id”;<br>
state = ENTERID4;<br>
}<br>
} else if (state == ADDSTREAM5) {<br>
if (theInput.equalsIgnoreCase(“y”)) {<br>
theOutput = “please enter your student id”;<br>
state = ENTERID5;<br>
}<br>
} else if (state == ENTERID) {<br>
studentID = theInput;<br>
s1.add(studentID);<br>
theOutput = “You have been added to stream S1 the size now is " + Integer.toString(s1.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
state = ADDTOSTREAMSUCCES;<br>
} else if (state == ENTERID2) {<br>
studentID = theInput;<br>
s2.add(studentID);<br>
theOutput = “You have been added to stream S2 the size now is " + Integer.toString(s2.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
state = ADDTOSTREAMSUCCES2;<br>
} else if (state == ENTERID3) {<br>
studentID = theInput;<br>
s3.add(studentID);<br>
theOutput = “You have been added to stream S3 the size now is " + Integer.toString(s3.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
state = ADDTOSTREAMSUCCES3;<br>
} else if (state == ENTERID4) {<br>
studentID = theInput;<br>
s4.add(studentID);<br>
theOutput = “You have been added to stream S4 the size now is " + Integer.toString(s4.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
state = ADDTOSTREAMSUCCES4;<br>
} else if (state == ENTERID5) {<br>
studentID = theInput;<br>
s5.add(studentID);<br>
theOutput = “You have been added to stream S5 the size now is " + Integer.toString(s5.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
state = ADDTOSTREAMSUCCES5;<br>
} else if (state == ADDTOSTREAMSUCCES) {<br>
theOutput = “You have been added to stream the size now is " + Integer.toString(s1.size()) + “.” + " Woul you like to check or change your stream? or exit? yes/exit”;<br>
if (theInput.equalsIgnoreCase(“check”)) {<br>
theOutput = “Please enter your student ID”;<br>
state = CHECKSTREAM;<br>
}<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
} else if (state == ADDTOSTREAMSUCCES2) {<br>
theOutput = “You have been added to stream the size now is " + Integer.toString(s2.size()) + “.” + " Woul you like to check/change your stream? or exit? check/exit”;<br>
if (theInput.equalsIgnoreCase(“yes”)) {<br>
theOutput = “Please enter your student ID”;<br>
state = CHECKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
}<br>
} else if (state == ADDTOSTREAMSUCCES3) {<br>
theOutput = “You have been added to stream the size now is " + Integer.toString(s3.size()) + “.” + " Woul you like to check/change your stream? or exit? check/exit”;<br>
if (theInput.equalsIgnoreCase(“yes”)) {<br>
theOutput = “Please enter your student ID”;<br>
state = CHECKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
}<br>
} else if (state == ADDTOSTREAMSUCCES4) {<br>
theOutput = “You have been added to stream the size now is " + Integer.toString(s4.size()) + “.” + " Woul you like to check/change your stream? or exit? check/exit”;<br>
if (theInput.equalsIgnoreCase(“yes”)) {<br>
theOutput = “Please enter your student ID”;<br>
state = CHECKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
}<br>
} else if (state == ADDTOSTREAMSUCCES5) {<br>
theOutput = “You have been added to stream the size now is " + Integer.toString(s5.size()) + “.” + " Woul you like to check/change your stream? or exit? check/exit”;<br>
if (theInput.equalsIgnoreCase(“yes”)) {<br>
theOutput = “Please enter your student ID”;<br>
state = CHECKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
}<br>
} else if (state == CHECKSTREAM) {<br>
studentID = theInput;<br>
System.out.println("Student Id is this one: " + studentID);<br>
//            System.out.println("The First value is : " + s1.get(0));<br>
if (s1.contains(studentID)) {<br>
//                System.out.println(“Im in the IF STATEMENT”);<br>
theOutput = “You are in Stream S1 would you like to change your stream?yes/exit”;<br>
state = CHANGESTREAM;<br>
} else if (s2.contains(studentID)) {<br>
theOutput = “You are in Stream S2 would you like to change your stream?yes/exit”;<br>
state = CHANGESTREAM;<br>
} else if (s3.contains(studentID)) {<br>
theOutput = “You are in Stream S3 would you like to change your stream?yes/exit”;<br>
state = CHANGESTREAM;<br>
} else if (s4.contains(studentID)) {<br>
theOutput = “You are in Stream S4 would you like to change your stream?yes/exit”;<br>
state = CHANGESTREAM;<br>
} else if (s5.contains(studentID)) {<br>
theOutput = “You are in Stream S5 would you like to change your stream?yes/exit”;<br>
state = CHANGESTREAM;<br>
} else {<br>
theOutput = “you are not streamed for any class would you like to pick a stream or exit?yes/exit”;<br>
if (theInput.equalsIgnoreCase(“yes”)) {<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
state = PICKSTREAM;<br>
} else if (theInput.equalsIgnoreCase(“exit”)) {<br>
System.exit(-1);<br>
}<br>
}<br>
} else if (state == CHANGESTREAM) {<br>
if(theInput.equalsIgnoreCase(“yes”)){<br>
theOutput = “Please enter your student ID to change streams”;<br>
state = CHANGEID;<br>
}<br>
}else if (state==CHANGEID){<br>
studentID = theInput;<br>
System.out.println("The final input is: "+ theInput);<br>
if(s1.contains(studentID)){<br>
System.out.println(“we made it to if statement”);<br>
s1.remove(studentID);<br>
state = PICKSTREAM;<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
} else  if(s2.contains(studentID)){<br>
System.out.println(“we made it to if statement”);<br>
s2.remove(studentID);<br>
state = PICKSTREAM;<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
}else  if(s3.contains(studentID)){<br>
System.out.println(“we made it to if statement”);<br>
s3.remove(studentID);<br>
state = PICKSTREAM;<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
}else  if(s4.contains(studentID)){<br>
System.out.println(“we made it to if statement”);<br>
s4.remove(studentID);<br>
state = PICKSTREAM;<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
} if(s5.contains(studentID)){<br>
System.out.println(“we made it to if statement”);<br>
s5.remove(studentID);<br>
state = PICKSTREAM;<br>
theOutput = “Hi please book a lab for either Streams S1,S2,S3,S4,S5”;<br>
}<br>
}return theOutput;<br>
}<br>
}</p>
</li>
</ul>
<p>//                else if (theInput.equalsIgnoreCase(“n”)) {<br>
//                    theOutput = “would you like to pick a different stream or exit? y/n?”;<br>
//                    if (theInput.equalsIgnoreCase(“y”)) {<br>
//                        state = WAITING;<br>
//                    } else if (theInput.equalsIgnoreCase(“n”) || s1.size() &lt; 5) {<br>
//                        System.exit(-1);<br>
//                    }</p>
<p>[/code]</p>
<p>[code]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/<br>
package bookalab;</li>
</ul>
<p>import java.io.BufferedReader;<br>
import java.io.IOException;<br>
import java.io.InputStreamReader;<br>
import java.io.PrintWriter;<br>
import java.net.ServerSocket;<br>
import java.net.Socket;</p>
<p>/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> stuju133<br>
*/<br>
public class BookSvr1 {</p>
<p>public static void main(String[] args) throws IOException {<br>
ServerSocket serverSocket = null;<br>
try {<br>
serverSocket = new ServerSocket(4444);<br>
} catch (IOException e) {<br>
System.out.println(“Could not listen on port: 4444”);<br>
System.exit(-1);<br>
}<br>
//start listening for a connection</p>
<pre><code> Socket clientSocket = null;
 try {
     clientSocket = serverSocket.accept();
 } catch (IOException e) {
     System.out.println("Accept failed on port 4444");
     System.exit(-1);
 }
 // if a listening state successfull accept a new connection
 PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
 BufferedReader in = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
 String inputLine, outputLine;
 //do the above so we can communicate with the client

 //KnockKnockProtocol kkp = new KnockKnockProtocol();
 BookProtocol bpc = new BookProtocol();
 //outputLine = kkp.processInput(null);
 outputLine = bpc.processInput(null);
 out.println(outputLine);

 while ((inputLine = in.readLine()) != null) {
    // outputLine = kkp.processInput(inputLine);
     outputLine = bpc.processInput(inputLine);
     out.println(outputLine);
     if (outputLine.equals("Bye.")) {
         break;
     }
 }
 out.close();
 in.close();
 clientSocket.close();
 serverSocket.close();
</code></pre>
<p>}<br>
}<br>
[/code]</p>
</li>
</ul>
<p>[code]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/</li>
</ul>
<p>package bookalab;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> stuju133<br>
<em>/<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;</li>
</ul>
<p>public class BookSvr2 {<br>
public static void main(String[] args) throws IOException {<br>
ServerSocket serverSocket = null;<br>
boolean listening = true;</p>
<pre><code>    try {
        serverSocket = new ServerSocket(4444);
    } catch (IOException e) {
        System.err.println("Could not listen on port: 4444.");
        System.exit(-1);
    }

    while (listening)
    new BookMultiServerThread(serverSocket.accept()).start();

    serverSocket.close();
}
</code></pre>
<p>}[/code]</p>
<p>any help would be greatly appreciated</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-server-sockets/361134/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-server-sockets/361134/1</link>
        <pubDate>Mon, 20 Sep 2010 01:43:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-361134-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-server-sockets/361134.rss">Help with server sockets</source>
      </item>
  </channel>
</rss>
