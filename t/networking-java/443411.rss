<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Networking [Java]</title>
    <link>https://forum.moparisthebest.com/t/networking-java/443411</link>
    <description>It&#39;s nearly 3 AM and so I can&#39;t think clearly, but I was cooking up a networking protocol for a project I might continue with if this is successful. I&#39;m a beginner at both networking and concurrency so I don&#39;t know much about what&#39;s wrong and right.

I&#39;m having trouble mindmapping the execution flow of the program.

Another small error is that the connections arraylist doesn&#39;t seem to be working. I&#39;m sure I&#39;m forgetting something quite obvious.

The major problems started when I tried handling multiple clients.

Source code here:

Server.java
[code=Java]
package net.projectrainbow.game.server;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import java.io.*;

/**
 * Server.java
 * 
 * @author Whac
 */

public class Server implements Runnable
{

	/**
	 * The port which this server binds to.
	 */
	public static final int PORT = 81;

	/**
	 * The main server socket.
	 */
	private static ServerSocket server;

	/**
	 * The client.
	 */
	private Socket client;

	/**
	 * Disconnecting boolean.
	 */
	private boolean disconnected = false;

	/**
	 * The output stream.
	 */
	private PrintWriter out;

	/**
	 * The input stream.
	 */
	private BufferedReader in;

	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Server.class.getName());

	/**
	 * Entry point for the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		startServer();
		while (true)
		{
			Server server = new Server();
			server.waitForConnection();
			server.acceptClient();
			new Thread(server).start();
		}
	}

	public Server()
	{
		// empty initializer
	}

	public Server(Socket client)
	{
		this.client = client;
	}

	public void run()
	{
		while (true)
		{
			if (disconnected)
				break;
			else
				handleClient();
		}
	}

	/**
	 * Waits for a connection.
	 */
	private void waitForConnection()
	{
		Socket client = null;
		try
		{
			client = server.accept();
		}
		catch (IOException e)
		{
			logger.log(Level.WARNING, &quot;Client failed to be accepted.&quot;);
		}
		new Thread(new Server(client)).start();
	}

	/**
	 * Removes a connection.
	 */
	private void removeConnection()
	{
		try
		{
			Connections.removeConnection(client);
			Connections.removeHostname(client.getInetAddress().toString());
			String host = client.getInetAddress().toString();
			out.flush();
			out.close();
			in.close();
			client.close();
			logger.info(&quot;Client has disconnected (&quot; + host + &quot;)&quot;);
		}
		catch (IOException ioe)
		{
			logger.log(Level.WARNING, &quot;Client failed to be removed.&quot;);
		}
	}

	private static void startServer()
	{
		/**
		 * Starts the server on the specified port.
		 */
		logger.info(&quot;Server starting on port &quot; + PORT);
		try
		{
			server = new ServerSocket(PORT);
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			logger.log(Level.SEVERE, &quot;Failed to start server.&quot;, e);
		}
	}

	private void acceptClient()
	{
		/**
		 * Accepts the client.
		 */
		try
		{
			client = server.accept();
		}
		catch (IOException e)
		{
			logger.log(Level.WARNING, &quot;Failed to accept client.&quot;, e);
		}
		logger.info(&quot;Connection from &quot; + client.getInetAddress().getHostName());

		/**
		 * Adds the connection to the connections class.
		 */
		Connections.addConnection(client);
		Connections.addHostname(client.getInetAddress().toString());
	}

	/**
	 * Initializing the server. Good tutorial:
	 * http://www.oracle.com/technetwork/java/socket-140484.html
	 */
	private void handleClient()
	{
		if (disconnected)
			return;
		try
		{
			while (true)
			{
				/**
				 * Initializes input/output for the client socket.
				 */
				in = new BufferedReader(new InputStreamReader(
						client.getInputStream()));
				out = new PrintWriter(client.getOutputStream(), true);

				out.println(&quot;Welcome to the Server!&quot;);

				String command = &quot;~~~&quot;;

				int score = 0;

				try
				{
					/**
					 * The loop that handles the clients.
					 */
					while (!command.equalsIgnoreCase(&quot;exit&quot;))
					{
						/**
						 * Waits for client input to read.
						 */
						command = in.readLine();

						logger.info(&quot;[Client]: &quot; + command);

						/**
						 * Start of command handling (Delta style).
						 */
						if (command.equalsIgnoreCase(&quot;killserver&quot;))
						{
							logger.info(&quot;Server killed.&quot;);
							System.exit(0);
						}
						else if (command.equalsIgnoreCase(&quot;lol&quot;))
						{
							out.println(&quot;No way.&quot;);
						}
						else if (command.equalsIgnoreCase(&quot;commands&quot;))
						{
							out.println(&quot;No commands as of the moment faggot.&quot;);
						}
						else if (command.equalsIgnoreCase(&quot;connections&quot;))
						{
							for (int i = 0; i &lt; Connections.countConnections(); i++)
							{
								out.println(&quot;Connection(&quot; + i + &quot;): &quot;
										+ Connections.getHostname(i));
							}
						}
						else if (command.equalsIgnoreCase(&quot;score&quot;))
						{
							out.println(&quot;Score: &quot; + score);
						}
						else if (command.equalsIgnoreCase(&quot;train&quot;))
						{
							score++;
							out.println(&quot;You have trained.&quot;);
						}
						else if (command.equalsIgnoreCase(&quot;playerid&quot;))
						{
							int pid = Connections.getPlayerID(client);
							out.println(&quot;Your PID is &quot; + pid);
						}

						/**
						 * End of command handling.
						 */

						out.println(&quot;&quot;); // this is what the client expects, so
											// this must happen!
					}
				}
				catch (SocketException sE)
				{
					// logger.info(&quot;Client has disconnected.&quot;);
				}
				removeConnection();
			}
		}
		catch (Exception e)
		{
			logger.log(Level.SEVERE, &quot;Error with socket.&quot;, e);
			removeConnection();
		}
	}

}
[/code]

Connections.java
[code=Java]
package net.projectrainbow.game.server;

import java.util.ArrayList;
import java.util.List;
import java.net.Socket;

/**
 * Connections.java
 * 
 * @author Whac
 */

public class Connections
{
	/**
	 * The client socket connection array list.
	 */
	private static List&lt;Socket&gt; connections = new ArrayList&lt;Socket&gt;();

	/**
	 * Adds a connection to the connections array list.
	 * 
	 * @param socket
	 */
	public static void addConnection(Socket socket)
	{
		connections.add(socket);
	}

	/**
	 * Removes a connection from the connections array list.
	 * 
	 * @param socket
	 */
	public static void removeConnection(Socket socket)
	{
		connections.remove(socket);
	}

	/**
	 * Gets a connection from the array list&#39;s specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static Socket getConnection(int index)
	{
		return connections.get(index);
	}

	/**
	 * Counts how many connections there are.
	 * 
	 * @return
	 */
	public static int countConnections()
	{
		return connections.size();
	}

	public static int getPlayerID(Socket socket)
	{
		for (int i = 0; i &lt; countConnections(); i++)
		{
			if (getConnection(i).equals(socket))
			{
				return i;
			}
		}
		return -1;
	}

	/**
	 * The list of connected addresses.
	 */
	private static List&lt;String&gt; hostnames = new ArrayList&lt;String&gt;();

	/**
	 * Adds a hostname (IP address) to the connections.
	 * 
	 * @param hostName
	 */
	public static void addHostname(String hostName)
	{
		hostnames.add(hostName);
	}

	/**
	 * Removes a hostname (IP address) from the connections.
	 * 
	 * @param hostName
	 */
	public static void removeHostname(String hostName)
	{
		hostnames.remove(hostName);
	}

	/**
	 * Gets a hostname from the connections at a specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static String getHostname(int index)
	{
		return hostnames.get(index);
	}
}
[/code]

Client.java
[code=java]
package net.projectrainbow.game.client;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import java.io.*;

import net.projectrainbow.util.MainMethods;

/**
 * Client.java
 * 
 * @author Whac
 */

public class Client
{
	/**
	 * The hostname which this client connects to.
	 */
	public static final String IP = &quot;127.0.0.1&quot;;

	/**
	 * The port which this client connects to.
	 */
	public static final int PORT = 81;

	/**
	 * The client socket.
	 */
	private Socket socket;

	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Client.class.getName());

	/**
	 * The output stream.
	 */
	private PrintWriter out;

	/**
	 * The input stream.
	 */
	private BufferedReader in;

	/**
	 * Entry point for the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		new Client().init();
	}

	/**
	 * Initializing the client.
	 */
	private void init()
	{
		try
		{
			logger.info(&quot;Connecting to &quot; + IP + &quot; on port &quot; + PORT);
			socket = new Socket(IP, PORT);

			/**
			 * Get the first message (an announcement perhaps?).
			 */
			in = new BufferedReader(new InputStreamReader(
					socket.getInputStream()));
			logger.info(&quot;[Server]: &quot; + in.readLine());

			while (true)
			{
				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
				out = new PrintWriter(socket.getOutputStream(), true);

				String command = MainMethods.input(&quot;[Client]: &quot;);

				if (command == &quot;&quot; || command == null)
					command = &quot;\n&quot;;

				out.println(command); // println because the client needs a
										// newline

				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
				String serverInfo = in.readLine();

				if (!serverInfo.equals(&quot;&quot;))
				{
					logger.info(&quot;[Server]: &quot; + serverInfo);

					if (command.equalsIgnoreCase(&quot;exit&quot;))
					{
						socket.close();
						logger.info(&quot;Connection closed.&quot;);
						break;
					}
				}
			}
		}
		catch (Exception e)
		{
			logger.log(Level.SEVERE, &quot;Error connecting to server.&quot;, e);
		}
		logger.info(&quot;Server has shut down.\n&quot;);
	}

}
[/code]

[code]
May 30, 2012 2:39:58 AM net.projectrainbow.game.server.Server handleClient
SEVERE: Error with socket.
java.net.SocketException: Socket is closed
	at java.net.Socket.getInputStream(Unknown Source)
	at net.projectrainbow.game.server.Server.handleClient(Server.java:179)
	at net.projectrainbow.game.server.Server.run(Server.java:87)
	at java.lang.Thread.run(Unknown Source)
May 30, 2012 2:39:58 AM net.projectrainbow.game.server.Server removeConnection
INFO: Client has disconnected (127.0.0.1/127.0.0.1)
[/code]</description>
    
    <lastBuildDate>Sun, 03 Jun 2012 00:59:40 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/networking-java/443411.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p><code>        public Client(Socket client, boolean flag)
        {
                new Thread(new Client(client)).start();
        }</code><br>
You’re creating two Client instances per accepted socket… so when destructClient() is called from handleClient(), it’s called in the context of the second created Client. This means you’re passing the second Client to Server.clients.remove(), whereas only the first one is added to this list in acceptClient():</p>
<p><code>                        /**
                         * Adds the socket to the Client class.
                         */
                        client = server.accept();
                        Client instance = new Client(client, true);
                        clients.add(instance);
</code><br>
To fix this, try replacing that constructor with:</p>
<p><code>        public Client(Socket client)
        {
                this.client = client;
                new Thread(this).start();
        }</code><br>
Note I got rid of your pointless unused parameter. Ditch the other constructor and change the acceptClient() code to reflect the changes (I also inlined the pointless variable declaration):</p>
<p><code>                        /**
                         * Adds the socket to the Client class.
                         */
                        client = server.accept();
                        clients.add(new Client(client));</code></p>
<p>Aside from that, your code is full of a plethora of other glaring mistakes and flaws as well. For example, you maintain two lists of all connected clients when you truly ought to only need one (to be fair, one is of the Sockets, but every Socket is <span class="bbcode-i">meant</span> to have a corresponding Client). In addition, you’re using getter methods for fields that are local to the class and can be accessed directly, along with redundant, unnecessarily long method names like Client.handleClient() or Client.destructClient(); you also use other confusing names like Client.client to reflect a Client’s underlying socket. Something else I noticed while quickly gleaning through your code is that you will print that a client connected and register it via Connections.addConnection() even in cases where accepting failed:</p>
<p>[code=java]                try<br>
{<br>
/**<br>
* Adds the socket to the Client class.<br>
*/<br>
client = server.accept();<br>
Client instance = new Client(client, true);<br>
clients.add(instance);<br>
}<br>
catch (IOException e)<br>
{<br>
logger.log(Level.WARNING, “Failed to accept client.”, e);<br>
}<br>
logger.info("Connection from " + client.getInetAddress().getHostName());</p>
<pre><code>            /**
             * Adds the connection to the connections class.
             */
            Connections.addConnection(client);
            Connections.addHostname(client.getInetAddress().toString());[/code]
</code></pre>
<p>This will result in a NullPointerException in cases where the accepting fails, as you attempt to dereference client even when an IOException is thrown. Move that code into the try block to avoid this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/15</link>
        <pubDate>Sun, 03 Jun 2012 00:59:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-15</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>Perhaps the output stream code is serializing the class Server main in another thread, and sees the player location array after it’s been modified elsewhere in the server.</p>
<p>Try making a copy of the player location array before the final for loop in the server code, and passing the copy to the constructor.</p>
<p>Copying the array will also ensure that all of the client threads see a consistent set of player locations. With the synchronization shown above, the player locations could change between iterations of the final for loop.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/14</link>
        <pubDate>Sat, 02 Jun 2012 20:26:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-14</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>[quote=“iKilem, post:11, topic:443411”]It isn’t removed because you set it to null.</p>
<p><code>
client = null;
destroyClient(this);
</code>[/quote]</p>
<p>I commented that out already. It’s a problem with the array list.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/13</link>
        <pubDate>Thu, 31 May 2012 23:39:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-13</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>ahhh the thread-per-client model!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/12</link>
        <pubDate>Thu, 31 May 2012 16:27:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-12</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>It isn’t removed because you set it to null.</p>
<pre><code class="lang-auto">client = null;
destroyClient(this);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/11</link>
        <pubDate>Thu, 31 May 2012 16:06:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-11</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="9" data-topic="443411">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ikilem/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> iKilem:</div>
<blockquote>
<p>Then do what I told you.</p>
</blockquote>
</aside>
<p>Ok, I think I did it right, because there aren’t any problems what that anymore. I still have the same issue relating to looping through the clients to do, let’s say, a yell. Also, disconnecting is fine now, but it doesn’t update the player count. remove() doesn’t remove the client from the clients array list. It returns false.</p>
<pre><code class="lang-auto">	/**
	 * Removes a connection.
	 * @todo Remove the parameter.
	 */
	protected void destroyClient()
	{
		/**
		 * Checking to see if it's already dead (null).
		 */
		if (getClient() == null)
			return;
		try
		{
			System.out.println(Server.clients.size());
			
			Connections.removeConnection(getClient());
			//Connections.removeHostname(getClient().getInetAddress().toString());
			
			if (Server.clients.remove(this))
				System.out.println(true);
			else
				System.out.println(false);
			
			String host = getClient().getInetAddress().toString();
			getOut().flush();
			getOut().close();
			getIn().close();

			client.close();
			logger.info("Client has disconnected (" + host + ")");
			client = null;
			
			System.out.println(Server.clients.size());
		}
		catch (IOException ioe)
		{
			logger.log(Level.WARNING, "Client failed to be removed.");
		}
	}</code></pre>
<p>For some reason, I think the client object changes between the time where the client instance (the client class not the socket) was added into the array list and when the client + socket is about to destruct. So it isn’t the same when it’s removed. Is there a better solution? HcoJustin said something about using the index instead of object, but I’m not too sure how to implement that.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/10</link>
        <pubDate>Thu, 31 May 2012 15:01:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-10</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>Then do what I told you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/9</link>
        <pubDate>Thu, 31 May 2012 12:00:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-9</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Ok, thanks. I’ve gotten a little bit more done. So far, multiple clients are supported and they can connect and disconnect without any problems. However, I have a hard time managing each of the clients. For some reason I can’t even count the amount of players that are online as the program has trouble disconnecting the client. Also I’m trying to make a command that yells a message to all connected clients using a loop, that doesn’t work too well either.</p>
<p>Server.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.server;

import java.util.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import java.io.*;

/**
 * Server.java
 * 
 * @author Whac
 */

public class Server implements Runnable
{

	/**
	 * The port which this server binds to.
	 */
	public static final int PORT = 81;

	/**
	 * The main server socket.
	 */
	private static ServerSocket server;

	/**
	 * The clients.
	 */
	protected static List&lt;Client&gt; clients = new ArrayList&lt;Client&gt;();

	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Server.class.getName());

	/**
	 * Entry point for the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		//startServer();
		/*
		while (true)
		{
			Server server = new Server();
			server.acceptClient();
			new Thread(server).start();
		}
		*/
		startServer();
		new Thread(new Server()).start();
	}

	public Server()
	{
		// empty initializer
	}

	public void run()
	{
		while (true)
		{
			acceptClient();
		}
	}

	private static void startServer()
	{		
		/**
		 * Starts the server on the specified port.
		 */
		logger.info("Server starting on port " + PORT);
		try
		{
			server = new ServerSocket(PORT);
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			logger.log(Level.SEVERE, "Failed to start server.", e);
		}
	}

	private static void acceptClient()
	{
		/**
		 * Initializes a client.
		 */
		Socket client = null;
		
		/**
		 * Accepts the client.
		 */
		try
		{
			/**
			 * Adds the socket to the Client class.
			 */
			client = server.accept();
			Client instance = new Client(client, true);
			clients.add(instance);
		}
		catch (IOException e)
		{
			logger.log(Level.WARNING, "Failed to accept client.", e);
		}
		logger.info("Connection from " + client.getInetAddress().getHostName());

		/**
		 * Adds the connection to the connections class.
		 */
		Connections.addConnection(client);
		Connections.addHostname(client.getInetAddress().toString());
	}

}</code></pre>
<p>Client.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.server;

import java.util.logging.Logger;
import java.util.logging.Level;
import java.net.*;
import java.io.*;

public class Client implements Runnable
{
	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Client.class.getName());
	
	/**
	 * The output stream.
	 */
	private PrintWriter out;

	/**
	 * The input stream.
	 */
	private BufferedReader in;
	
	public PrintWriter getOut()
	{
		return out;
	}
	
	public void setOut(PrintWriter out)
	{
		this.out = out;
	}
	
	public BufferedReader getIn()
	{
		return in;
	}
	
	public void setIn(BufferedReader in)
	{
		this.in = in;
	}
	
	/**
	 * The socket instance for the particular player.
	 */
	private Socket client;
	
	/**
	 * The constructor is a socket.
	 * @param client
	 */
	public Client(Socket client)
	{
		this.client = client;
	}
	
	public Client(Socket client, boolean flag)
	{
		new Thread(new Client(client)).start();
	}
	
	public void setClient(Socket client)
	{
		this.client = client;
	}
	
	public Socket getClient()
	{
		return client;
	}
	
	/**
	 * Disconnecting boolean.
	 */
	private boolean disconnected = false;
	
	/**
	 * Handles the client.
	 * http://www.oracle.com/technetwork/java/socket-140484.html
	 */
	protected void handleClient()
	{
		if (disconnected)
			return;
		try
		{
			while (true)
			{
				/**
				 * Initializes input/output for the client socket.
				 */
				in = new BufferedReader(new InputStreamReader(
						client.getInputStream()));
				out = new PrintWriter(client.getOutputStream(), true);

				out.println("Welcome to the Server!");

				String command = "~~~";

				int score = 0;

				try
				{
					/**
					 * The loop that handles the clients.
					 */
					while (!command.equalsIgnoreCase("exit"))
					{
						/**
						 * Waits for client input to read.
						 */
						command = in.readLine();
						
						out = new PrintWriter(client.getOutputStream(), true);

						logger.info("[Client]: " + command);

						/**
						 * Start of command handling (Delta style).
						 */
						if (command.equalsIgnoreCase("killserver"))
						{
							logger.info("Server killed.");
							System.exit(0);
						}
						else if (command.equalsIgnoreCase("lol"))
						{
							out.println("No way.");
						}
						else if (command.equalsIgnoreCase("commands"))
						{
							out.println("No commands as of the moment faggot.");
						}
						else if (command.equalsIgnoreCase("connections"))
						{
							for (int i = 0; i &lt; Connections.countConnections(); i++)
							{
								out.println("Connection(" + i + "): "
										+ Connections.getHostname(i));
							}
						}
						else if (command.equalsIgnoreCase("score"))
						{
							out.println("Score: " + score);
						}
						else if (command.equalsIgnoreCase("train"))
						{
							score++;
							out.println("You have trained.");
						}
						else if (command.equalsIgnoreCase("playerid"))
						{
							int pid = Connections.getPlayerID(client);
							out.println("Your PID is " + pid);
						}
						else if (command.equalsIgnoreCase("players"))
						{
							int count = Server.clients.size();
							out.println("Players Online: " + count);
						}
						else if (command.startsWith("yell"))
						{
							if (command.length() &gt; 5)
							{
								String strToYell = command.substring(5);
								for (Client c : Server.clients)
								{
									if (c == null)
										continue;
									try
									{
										c.getOut().println("Hello.");
										System.out.println("Said 'hello' to one of the clients.");
									}
									catch (Exception e)
									{
										logger.log(Level.WARNING, "Failed to say hi..?", e);
									}
								}
							}
						}

						/**
						 * End of command handling.
						 */

						out.println(""); // this is what the client expects, so
											// this must happen!
					}
				}
				catch (SocketException sE)
				{
					client = null;
					// logger.info("Client has disconnected.");
				}
				client = null;
				destroyClient(this);
			}
		}
		catch (Exception e)
		{
			client = null;
			logger.log(Level.SEVERE, "Error with socket.", e);
			destroyClient(this);
		}
		destroyClient(this);
	}
	
	public void run()
	{
		while (true)
		{
			handleClient();
		}
	}
	
	/**
	 * Removes a connection.
	 * @todo Remove the parameter.
	 */
	protected void destroyClient(Client c)
	{
		try
		{
			Socket client = c.getClient();
			Connections.removeConnection(client);
			Connections.removeHostname(client.getInetAddress().toString());
			String host = client.getInetAddress().toString();
			c.getOut().flush();
			c.getOut().close();
			c.getIn().close();
			client.close();
			Server.clients.remove(c);
			logger.info("Client has disconnected (" + host + ")");
		}
		catch (IOException ioe)
		{
			logger.log(Level.WARNING, "Client failed to be removed.");
		}
	}
}</code></pre>
<p>Connections.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.server;

import java.util.ArrayList;
import java.util.List;
import java.net.Socket;

/**
 * Connections.java
 * 
 * @author Whac
 */

public class Connections
{
	/**
	 * The client socket connection array list.
	 */
	private static List&lt;Socket&gt; connections = new ArrayList&lt;Socket&gt;();

	/**
	 * Adds a connection to the connections array list.
	 * 
	 * @param socket
	 */
	public static void addConnection(Socket socket)
	{
		connections.add(socket);
	}

	/**
	 * Removes a connection from the connections array list.
	 * 
	 * @param socket
	 */
	public static void removeConnection(Socket socket)
	{
		connections.remove(socket);
	}

	/**
	 * Gets a connection from the array list's specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static Socket getConnection(int index)
	{
		return connections.get(index);
	}

	/**
	 * Counts how many connections there are.
	 * 
	 * @return
	 */
	public static int countConnections()
	{
		return connections.size();
	}

	public static int getPlayerID(Socket socket)
	{
		for (int i = 0; i &lt; countConnections(); i++)
		{
			if (getConnection(i).equals(socket))
			{
				return i;
			}
		}
		return -1;
	}

	/**
	 * The list of connected addresses.
	 */
	private static List&lt;String&gt; hostnames = new ArrayList&lt;String&gt;();

	/**
	 * Adds a hostname (IP address) to the connections.
	 * 
	 * @param hostName
	 */
	public static void addHostname(String hostName)
	{
		hostnames.add(hostName);
	}

	/**
	 * Removes a hostname (IP address) from the connections.
	 * 
	 * @param hostName
	 */
	public static void removeHostname(String hostName)
	{
		hostnames.remove(hostName);
	}

	/**
	 * Gets a hostname from the connections at a specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static String getHostname(int index)
	{
		return hostnames.get(index);
	}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/8</link>
        <pubDate>Thu, 31 May 2012 07:15:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-8</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>There are 2 redundant semicolons in your code and that’s what fucks it up. Accidental semicolons after conditionals and loops are quite dangerous, in a certain situation this may cost you your life.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/7</link>
        <pubDate>Wed, 30 May 2012 23:10:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-7</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>If the client disconnected gracefully, readLine() should return null (a SocketException isn’t thrown as you may have thought). At that point, you should break out of the loop. For some reason you have two loops when you only need one. Get rid of the outer loop.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/6</link>
        <pubDate>Wed, 30 May 2012 09:50:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-6</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Thanks, I’ve commented the waitForConnection(). The same problem still applies, whenever one client disconnects, the loop won’t stop. I want to like, kill the thread for that particular client. How can I do that?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/5</link>
        <pubDate>Wed, 30 May 2012 04:27:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-5</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>waitForConnection and acceptClient do the exact same thing.[quote=“zyle1992, post:3, topic:443411”]It also looks like you’re only allowing one connection[/quote]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/4</link>
        <pubDate>Tue, 29 May 2012 21:56:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-4</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>It also looks like you’re only allowing one connection</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/3</link>
        <pubDate>Tue, 29 May 2012 21:20:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-3</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>For starters, comment out waitForConnection().</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/2</link>
        <pubDate>Tue, 29 May 2012 21:01:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-2</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
      <item>
        <title>Networking [Java]</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>It’s nearly 3 AM and so I can’t think clearly, but I was cooking up a networking protocol for a project I might continue with if this is successful. I’m a beginner at both networking and concurrency so I don’t know much about what’s wrong and right.</p>
<p>I’m having trouble mindmapping the execution flow of the program.</p>
<p>Another small error is that the connections arraylist doesn’t seem to be working. I’m sure I’m forgetting something quite obvious.</p>
<p>The major problems started when I tried handling multiple clients.</p>
<p>Source code here:</p>
<p>Server.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.server;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import java.io.*;

/**
 * Server.java
 * 
 * @author Whac
 */

public class Server implements Runnable
{

	/**
	 * The port which this server binds to.
	 */
	public static final int PORT = 81;

	/**
	 * The main server socket.
	 */
	private static ServerSocket server;

	/**
	 * The client.
	 */
	private Socket client;

	/**
	 * Disconnecting boolean.
	 */
	private boolean disconnected = false;

	/**
	 * The output stream.
	 */
	private PrintWriter out;

	/**
	 * The input stream.
	 */
	private BufferedReader in;

	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Server.class.getName());

	/**
	 * Entry point for the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		startServer();
		while (true)
		{
			Server server = new Server();
			server.waitForConnection();
			server.acceptClient();
			new Thread(server).start();
		}
	}

	public Server()
	{
		// empty initializer
	}

	public Server(Socket client)
	{
		this.client = client;
	}

	public void run()
	{
		while (true)
		{
			if (disconnected)
				break;
			else
				handleClient();
		}
	}

	/**
	 * Waits for a connection.
	 */
	private void waitForConnection()
	{
		Socket client = null;
		try
		{
			client = server.accept();
		}
		catch (IOException e)
		{
			logger.log(Level.WARNING, "Client failed to be accepted.");
		}
		new Thread(new Server(client)).start();
	}

	/**
	 * Removes a connection.
	 */
	private void removeConnection()
	{
		try
		{
			Connections.removeConnection(client);
			Connections.removeHostname(client.getInetAddress().toString());
			String host = client.getInetAddress().toString();
			out.flush();
			out.close();
			in.close();
			client.close();
			logger.info("Client has disconnected (" + host + ")");
		}
		catch (IOException ioe)
		{
			logger.log(Level.WARNING, "Client failed to be removed.");
		}
	}

	private static void startServer()
	{
		/**
		 * Starts the server on the specified port.
		 */
		logger.info("Server starting on port " + PORT);
		try
		{
			server = new ServerSocket(PORT);
		}
		catch (IOException e)
		{
			// TODO Auto-generated catch block
			logger.log(Level.SEVERE, "Failed to start server.", e);
		}
	}

	private void acceptClient()
	{
		/**
		 * Accepts the client.
		 */
		try
		{
			client = server.accept();
		}
		catch (IOException e)
		{
			logger.log(Level.WARNING, "Failed to accept client.", e);
		}
		logger.info("Connection from " + client.getInetAddress().getHostName());

		/**
		 * Adds the connection to the connections class.
		 */
		Connections.addConnection(client);
		Connections.addHostname(client.getInetAddress().toString());
	}

	/**
	 * Initializing the server. Good tutorial:
	 * http://www.oracle.com/technetwork/java/socket-140484.html
	 */
	private void handleClient()
	{
		if (disconnected)
			return;
		try
		{
			while (true)
			{
				/**
				 * Initializes input/output for the client socket.
				 */
				in = new BufferedReader(new InputStreamReader(
						client.getInputStream()));
				out = new PrintWriter(client.getOutputStream(), true);

				out.println("Welcome to the Server!");

				String command = "~~~";

				int score = 0;

				try
				{
					/**
					 * The loop that handles the clients.
					 */
					while (!command.equalsIgnoreCase("exit"))
					{
						/**
						 * Waits for client input to read.
						 */
						command = in.readLine();

						logger.info("[Client]: " + command);

						/**
						 * Start of command handling (Delta style).
						 */
						if (command.equalsIgnoreCase("killserver"))
						{
							logger.info("Server killed.");
							System.exit(0);
						}
						else if (command.equalsIgnoreCase("lol"))
						{
							out.println("No way.");
						}
						else if (command.equalsIgnoreCase("commands"))
						{
							out.println("No commands as of the moment faggot.");
						}
						else if (command.equalsIgnoreCase("connections"))
						{
							for (int i = 0; i &lt; Connections.countConnections(); i++)
							{
								out.println("Connection(" + i + "): "
										+ Connections.getHostname(i));
							}
						}
						else if (command.equalsIgnoreCase("score"))
						{
							out.println("Score: " + score);
						}
						else if (command.equalsIgnoreCase("train"))
						{
							score++;
							out.println("You have trained.");
						}
						else if (command.equalsIgnoreCase("playerid"))
						{
							int pid = Connections.getPlayerID(client);
							out.println("Your PID is " + pid);
						}

						/**
						 * End of command handling.
						 */

						out.println(""); // this is what the client expects, so
											// this must happen!
					}
				}
				catch (SocketException sE)
				{
					// logger.info("Client has disconnected.");
				}
				removeConnection();
			}
		}
		catch (Exception e)
		{
			logger.log(Level.SEVERE, "Error with socket.", e);
			removeConnection();
		}
	}

}</code></pre>
<p>Connections.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.server;

import java.util.ArrayList;
import java.util.List;
import java.net.Socket;

/**
 * Connections.java
 * 
 * @author Whac
 */

public class Connections
{
	/**
	 * The client socket connection array list.
	 */
	private static List&lt;Socket&gt; connections = new ArrayList&lt;Socket&gt;();

	/**
	 * Adds a connection to the connections array list.
	 * 
	 * @param socket
	 */
	public static void addConnection(Socket socket)
	{
		connections.add(socket);
	}

	/**
	 * Removes a connection from the connections array list.
	 * 
	 * @param socket
	 */
	public static void removeConnection(Socket socket)
	{
		connections.remove(socket);
	}

	/**
	 * Gets a connection from the array list's specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static Socket getConnection(int index)
	{
		return connections.get(index);
	}

	/**
	 * Counts how many connections there are.
	 * 
	 * @return
	 */
	public static int countConnections()
	{
		return connections.size();
	}

	public static int getPlayerID(Socket socket)
	{
		for (int i = 0; i &lt; countConnections(); i++)
		{
			if (getConnection(i).equals(socket))
			{
				return i;
			}
		}
		return -1;
	}

	/**
	 * The list of connected addresses.
	 */
	private static List&lt;String&gt; hostnames = new ArrayList&lt;String&gt;();

	/**
	 * Adds a hostname (IP address) to the connections.
	 * 
	 * @param hostName
	 */
	public static void addHostname(String hostName)
	{
		hostnames.add(hostName);
	}

	/**
	 * Removes a hostname (IP address) from the connections.
	 * 
	 * @param hostName
	 */
	public static void removeHostname(String hostName)
	{
		hostnames.remove(hostName);
	}

	/**
	 * Gets a hostname from the connections at a specified index.
	 * 
	 * @param index
	 * @return
	 */
	public static String getHostname(int index)
	{
		return hostnames.get(index);
	}
}</code></pre>
<p>Client.java</p>
<pre><code class="lang-auto">package net.projectrainbow.game.client;

import java.util.logging.Level;
import java.util.logging.Logger;
import java.net.*;
import java.io.*;

import net.projectrainbow.util.MainMethods;

/**
 * Client.java
 * 
 * @author Whac
 */

public class Client
{
	/**
	 * The hostname which this client connects to.
	 */
	public static final String IP = "127.0.0.1";

	/**
	 * The port which this client connects to.
	 */
	public static final int PORT = 81;

	/**
	 * The client socket.
	 */
	private Socket socket;

	/**
	 * An instance of the logger.
	 */
	private static Logger logger = Logger.getLogger(Client.class.getName());

	/**
	 * The output stream.
	 */
	private PrintWriter out;

	/**
	 * The input stream.
	 */
	private BufferedReader in;

	/**
	 * Entry point for the program.
	 * 
	 * @param args
	 */
	public static void main(String[] args)
	{
		// TODO Auto-generated method stub
		new Client().init();
	}

	/**
	 * Initializing the client.
	 */
	private void init()
	{
		try
		{
			logger.info("Connecting to " + IP + " on port " + PORT);
			socket = new Socket(IP, PORT);

			/**
			 * Get the first message (an announcement perhaps?).
			 */
			in = new BufferedReader(new InputStreamReader(
					socket.getInputStream()));
			logger.info("[Server]: " + in.readLine());

			while (true)
			{
				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
				out = new PrintWriter(socket.getOutputStream(), true);

				String command = MainMethods.input("[Client]: ");

				if (command == "" || command == null)
					command = "\n";

				out.println(command); // println because the client needs a
										// newline

				in = new BufferedReader(new InputStreamReader(
						socket.getInputStream()));
				String serverInfo = in.readLine();

				if (!serverInfo.equals(""))
				{
					logger.info("[Server]: " + serverInfo);

					if (command.equalsIgnoreCase("exit"))
					{
						socket.close();
						logger.info("Connection closed.");
						break;
					}
				}
			}
		}
		catch (Exception e)
		{
			logger.log(Level.SEVERE, "Error connecting to server.", e);
		}
		logger.info("Server has shut down.\n");
	}

}</code></pre>
<pre><code class="lang-auto">May 30, 2012 2:39:58 AM net.projectrainbow.game.server.Server handleClient
SEVERE: Error with socket.
java.net.SocketException: Socket is closed
	at java.net.Socket.getInputStream(Unknown Source)
	at net.projectrainbow.game.server.Server.handleClient(Server.java:179)
	at net.projectrainbow.game.server.Server.run(Server.java:87)
	at java.lang.Thread.run(Unknown Source)
May 30, 2012 2:39:58 AM net.projectrainbow.game.server.Server removeConnection
INFO: Client has disconnected (127.0.0.1/127.0.0.1)</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-java/443411/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-java/443411/1</link>
        <pubDate>Tue, 29 May 2012 18:49:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-443411-1</guid>
        <source url="https://forum.moparisthebest.com/t/networking-java/443411.rss">Networking [Java]</source>
      </item>
  </channel>
</rss>
