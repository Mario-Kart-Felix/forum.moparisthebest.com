<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Java] Caching Object Pool</title>
    <link>https://forum.moparisthebest.com/t/java-caching-object-pool/344425</link>
    <description>[code]/*
 * Copyright (C) 2010 OpenRune Development Team
 *
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details.
 */

package org.openrune.test;

import java.io.*;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.CopyOnWriteArrayList;

/**
 * A caching pool that caches objects to the disk
 * when they have been untouched in twenty minutes.
 * Purpose is to save memory.
 *
 * @author Anthony Snavely
 */
public class CachingPool&lt;T extends Cacheable&gt; extends Thread {

    /* The amount of time in milliseconds between checking expiry. */
    private static final int CYCLE_TIME = 5000;

    /* The amount of time in milliseconds to store cached objects */
    private static final int STORE_TIME = 1200000; // 1200000 ms. e.g. twenty minutes

    /* Whether or not the cache is current running. */
    private boolean running = true;

    /* The current cached objects. */
    private Map&lt;String, T&gt; cachedObjects = new ConcurrentHashMap&lt;String, T&gt;();

    /* The list of current files on the disk */
    private List&lt;String&gt; diskFiles = new CopyOnWriteArrayList&lt;String&gt;();

    public CachingPool() {
        super(&quot;CachingThread&quot;);
        start();
    }

    /**
     * Restart the cache.
     */
    public void startRunning() {
        this.running = true;
        this.cachedObjects = new ConcurrentHashMap&lt;String, T&gt;();
        this.diskFiles = new CopyOnWriteArrayList&lt;String&gt;();
        start();
    }

    /**
     * Stop the cache.
     */
    public void stopRunning() {
        this.running = false;
        this.cachedObjects = null; // So the gc can collect the list and cached objects.
        this.diskFiles = null;
    }

    /**
     * Cache an object.
     * 
     * @param id The identifier
     * @param cacheable The cacheable object.
     */
    public void cacheObject(String id, T cacheable) {
        if (this.running)
            cachedObjects.put(id, cacheable);
    }

    /**
     * Get a cached object either from the dish or from memory.
     *
     * @param name The identifier
     * @return The cached object.
     */
    public T getCachedObject(String name) {
        if (!this.running)
            return null;
        if(diskFiles.contains(name)) {
            diskFiles.remove(name);
            try {
                File file = new File(&quot;./cache/&quot; + name);
                ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file));
                try {
                    T object = (T) inputStream.readObject();
                    object.setLastAccessed(0);
                    cacheObject(name, object);
                } catch (ClassNotFoundException e) {
                    e.printStackTrace();
                }
                file.delete();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }

        return cachedObjects.get(name);
    }

    /**
     * Go through all the cached objects and see if it is
     * their turn to be discarded.
     */
    @Override
    public void run() {
        File file = new File(&quot;./cache/&quot;);
        for(File subfile : file.listFiles()) {
            if(!subfile.isDirectory()) {
                subfile.delete();
            }
        }
        while (running) {
            for (String s : cachedObjects.keySet()) {
                Cacheable cacheable = cachedObjects.get(s);
                if(cacheable.getLastAccessed() &gt;= STORE_TIME) {
                    cachedObjects.remove(s);
                    try {
                        ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream(&quot;./cache/&quot; + s));
                        outputStream.writeObject(cacheable);
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    diskFiles.add(s);
                }
            }
            try {
                sleep(CYCLE_TIME);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}[/code]

[code]/*
 * Copyright (C) 2010 OpenRune Development Team
 *
 * This program is free software. It comes without any warranty, to
 * the extent permitted by applicable law. You can redistribute it
 * and/or modify it under the terms of the Do What The Fuck You Want
 * To Public License, Version 2, as published by Sam Hocevar. See
 * http://sam.zoy.org/wtfpl/COPYING for more details.
 */

package org.openrune.test;

/**
 * A cacheable object.
 *
 * @author Anthony Snavely
 */
public class Cacheable {

    private long lastAccessed = 0;

    public void setLastAccessed(long lastAccessed) {
        this.lastAccessed = lastAccessed;
    }

    public long getLastAccessed() {
        return lastAccessed;
    }

}[/code]

Idea originally given to me by sir pk p00n/sean.</description>
    
    <lastBuildDate>Thu, 17 Jun 2010 02:44:28 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-caching-object-pool/344425.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Java] Caching Object Pool</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>does this support eventmanager</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-caching-object-pool/344425/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-caching-object-pool/344425/2</link>
        <pubDate>Thu, 17 Jun 2010 02:44:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-344425-2</guid>
        <source url="https://forum.moparisthebest.com/t/java-caching-object-pool/344425.rss">[Java] Caching Object Pool</source>
      </item>
      <item>
        <title>[Java] Caching Object Pool</title>
        <dc:creator><![CDATA[@_bool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_bool">@_bool</a> wrote:</p>
          <blockquote>
              <p>[code]/*</p>
<ul>
<li>Copyright © 2010 OpenRune Development Team</li>
<li>
</li>
<li>This program is free software. It comes without any warranty, to</li>
<li>the extent permitted by applicable law. You can redistribute it</li>
<li>and/or modify it under the terms of the Do What The Fuck You Want</li>
<li>To Public License, Version 2, as published by Sam Hocevar. See</li>
<li>
<a href="http://sam.zoy.org/wtfpl/COPYING" rel="nofollow noopener">http://sam.zoy.org/wtfpl/COPYING</a> for more details.<br>
*/</li>
</ul>
<p>package org.openrune.test;</p>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
import java.util.List;<br>
import java.util.Map;<br>
import java.util.concurrent.ConcurrentHashMap;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>/**</p>
<ul>
<li>
<p>A caching pool that caches objects to the disk</p>
</li>
<li>
<p>when they have been untouched in twenty minutes.</p>
</li>
<li>
<p>Purpose is to save memory.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Anthony Snavely<br>
*/<br>
public class CachingPool extends Thread {</p>
<p>/* The amount of time in milliseconds between checking expiry. */<br>
private static final int CYCLE_TIME = 5000;</p>
<p>/* The amount of time in milliseconds to store cached objects */<br>
private static final int STORE_TIME = 1200000; // 1200000 ms. e.g. twenty minutes</p>
<p>/* Whether or not the cache is current running. */<br>
private boolean running = true;</p>
<p>/* The current cached objects. */<br>
private Map&lt;String, T&gt; cachedObjects = new ConcurrentHashMap&lt;String, T&gt;();</p>
<p>/* The list of current files on the disk */<br>
private List diskFiles = new CopyOnWriteArrayList();</p>
<p>public CachingPool() {<br>
super(“CachingThread”);<br>
start();<br>
}</p>
<p>/**</p>
<ul>
<li>Restart the cache.<br>
*/<br>
public void startRunning() {<br>
this.running = true;<br>
this.cachedObjects = new ConcurrentHashMap&lt;String, T&gt;();<br>
this.diskFiles = new CopyOnWriteArrayList();<br>
start();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Stop the cache.<br>
*/<br>
public void stopRunning() {<br>
this.running = false;<br>
this.cachedObjects = null; // So the gc can collect the list and cached objects.<br>
this.diskFiles = null;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Cache an object.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> id The identifier</li>
<li>
<a class="mention" href="/u/param">@param</a> cacheable The cacheable object.<br>
*/<br>
public void cacheObject(String id, T cacheable) {<br>
if (this.running)<br>
cachedObjects.put(id, cacheable);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Get a cached object either from the dish or from memory.</p>
</li>
<li>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> name The identifier</p>
</li>
<li>
<p><a class="mention" href="/u/return">@return</a> The cached object.<br>
*/<br>
public T getCachedObject(String name) {<br>
if (!this.running)<br>
return null;<br>
if(diskFiles.contains(name)) {<br>
diskFiles.remove(name);<br>
try {<br>
File file = new File("./cache/" + name);<br>
ObjectInputStream inputStream = new ObjectInputStream(new FileInputStream(file));<br>
try {<br>
T object = (T) inputStream.readObject();<br>
object.setLastAccessed(0);<br>
cacheObject(name, object);<br>
} catch (ClassNotFoundException e) {<br>
e.printStackTrace();<br>
}<br>
file.delete();<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
}</p>
<p>return cachedObjects.get(name);<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>Go through all the cached objects and see if it is</li>
<li>their turn to be discarded.<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void run() {<br>
File file = new File("./cache/");<br>
for(File subfile : file.listFiles()) {<br>
if(!subfile.isDirectory()) {<br>
subfile.delete();<br>
}<br>
}<br>
while (running) {<br>
for (String s : cachedObjects.keySet()) {<br>
Cacheable cacheable = cachedObjects.get(s);<br>
if(cacheable.getLastAccessed() &gt;= STORE_TIME) {<br>
cachedObjects.remove(s);<br>
try {<br>
ObjectOutputStream outputStream = new ObjectOutputStream(new FileOutputStream("./cache/" + s));<br>
outputStream.writeObject(cacheable);<br>
} catch (IOException e) {<br>
e.printStackTrace();<br>
}<br>
diskFiles.add(s);<br>
}<br>
}<br>
try {<br>
sleep(CYCLE_TIME);<br>
} catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]/*</p>
<ul>
<li>Copyright © 2010 OpenRune Development Team</li>
<li>
</li>
<li>This program is free software. It comes without any warranty, to</li>
<li>the extent permitted by applicable law. You can redistribute it</li>
<li>and/or modify it under the terms of the Do What The Fuck You Want</li>
<li>To Public License, Version 2, as published by Sam Hocevar. See</li>
<li>
<a href="http://sam.zoy.org/wtfpl/COPYING" rel="nofollow noopener">http://sam.zoy.org/wtfpl/COPYING</a> for more details.<br>
*/</li>
</ul>
<p>package org.openrune.test;</p>
<p>/**</p>
<ul>
<li>
<p>A cacheable object.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Anthony Snavely<br>
*/<br>
public class Cacheable {</p>
<p>private long lastAccessed = 0;</p>
<p>public void setLastAccessed(long lastAccessed) {<br>
this.lastAccessed = lastAccessed;<br>
}</p>
<p>public long getLastAccessed() {<br>
return lastAccessed;<br>
}</p>
</li>
</ul>
<p>}[/code]</p>
<p>Idea originally given to me by sir pk p00n/sean.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-caching-object-pool/344425/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-caching-object-pool/344425/1</link>
        <pubDate>Wed, 16 Jun 2010 10:44:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-344425-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-caching-object-pool/344425.rss">[Java] Caching Object Pool</source>
      </item>
  </channel>
</rss>
