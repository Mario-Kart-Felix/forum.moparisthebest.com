<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Game Server Design</title>
    <link>https://forum.moparisthebest.com/t/game-server-design/552183</link>
    <description>Hey guys, just need your opinion on a game server design. Apologies if this seems a bit scattered, analysis paralysis and all that.

So, I tried to separate things out into different domains. We&#39;ve got the game client, the game server, and the game engine. The game client and game server use the same codec. The client and server operate on packets, while the engine operates on events. I want to keep things as separate as possible. One example is the Player class in the game engine; it should never know about the client, the server, or anything outside of the game world. Similarly, the client should never know about the Player in the game world. It should only know about the user interactions, how to render the scene, and how to send packets.

So far, I&#39;ve broken it down into 3 separate entities. The client, the server, and the engine. However, it&#39;s the communication between them that I&#39;m getting stuck on. I think I&#39;m on the right path between the client and server, having a separate codec project; but between the server and the engine, I&#39;m not sure.

This model looks something like
User &lt;-&gt; Client &lt;-&gt; Server &lt;-&gt; Engine
But in this model, each component is not entirely separated. The client communicates with the server through the codec, which is fine, but the server has to issue events to the engine, and the engine has to do *something* with the engine.

I had an idea today, about adding elements between each of these, would be interfaces. Something like

User &lt;-&gt; Client &lt;-(Server API | Client API)-&gt; Server &lt;-(Engine API | Server API)-&gt; Engine

Or visually:
[code]
                +--&gt; (Server API) --+    +--&gt; (Engine API) --+
                |                   |    |                   |
                |                   v    |                   v
User  &lt;--&gt; Client                   Server                   Engine
                ^                   |    ^                   |
                |                   |    |                   |
                +-- (Client API) &lt;--+    +-- (Server API) &lt;--+
[/code]

In this model, the client and server API are essentially the same, but the server talks to the engine via the engine API, and the engine talks to the server API. But then again, this isn&#39;t really solving the problem, but splitting it into two separate problems, with no real benefit.

I&#39;ve thunk myself into a rut, and now I&#39;m finding myself trying to write unit tests for species, and really just looking at lines of code and bouncing between files. Any advice would be appreciated.</description>
    
    <lastBuildDate>Fri, 03 Jul 2015 05:07:46 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/game-server-design/552183.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Thanks mate. I’ve been doing all of those things at my job for a while now as part of the workflow. Good to know I’ve been on the right track with it all.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/12</link>
        <pubDate>Fri, 03 Jul 2015 05:07:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-12</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="552183">
<div class="title">
<div class="quote-controls"></div>
 Zymus:</div>
<blockquote>
<p>Yeah, I’d like to hear it. As well as any other thoughts from anyone else. When I’m done, I’ll probably release it here first, and have you guys explore it. Your comment about the process of refactoring helped me a bit.</p>
</blockquote>
</aside>
<p>There’s a development strategy called test-driven development. The idea here is pretty simple and here’s one approach to it:</p>
<ol>
<li>You have some sort of feature you want your code base to satisfy. You write a test to prove the feature works. Initially, this test fails because there is no working code for that feature.</li>
<li>You write the simplest and more straightforward code to make the test pass.</li>
<li>You refactor the code to make sure it satisfies SOLID principles and whatever design patterns are being used consistently in your code base.</li>
</ol>
<p>I personally don’t think this approach scales well, but it is a useful exercise to try and provides interesting insight into software engineering. Architecture is really just a result of maintaining a certain level of order and control over your code. Architecture that doesn’t evolve becomes stale, but architecture that is built upon the very idea of constant evolution in your code base will never get old because it’s always changing. I have yet to encounter a situation where designing a large scale piece of software ahead of time actually panned out. I find it’s better to implement functionality first and then make sure it is consistent with the designs of the code base and appropriately clean.</p>
<p>Peer code reviews are a good way of maintaining such a standard, as well. People looking over your code prior to checking it in will help ensure it’s consistent with the rest of the code base. If you run into a situation where a new feature just is not easily implementable in the current code base (and instead requires some sort of ad hoc or hardcoded workaround), then it’s probably time to refactor part of the code base, perhaps abstract something that was previously very specific, and adapt that portion of the architecture to better satisfy the new bit of functionality being implemented.</p>
<p>Essentially, the time you would have spent designing an architecture would instead be amortized across all these little pockets of refactoring. So rather than spending a long time with no product or code, only to design an architecture that is absolutely likely to change, you hit the ground running with a simple and easily maintainable small product that eventually grows (through many instances refactoring) to a large and flexible framework.</p>
<p>This now begs the questions of when is it a good time to refactor and how can refactoring be done in a safe. For the former, as mentioned earlier it is generally good to refactor in situations where the code feels messy or dirty. There is not an easy way to define these circumstances, but violating the SOLID principles seems to cover a lot of them. Experience with software engineering also helps pick up hints for bad code. And, finally, peer code reviews are absolutely essential to keep a squeaky clean code base.</p>
<p>The second part is safely refactoring. Automated testing is absolutely essential here (and code reviews along with those). Writing good tests which continuously demonstrate the policy of your classes and algorithms are essentially an automatic way of determining, “is my code doing what it’s supposed to do?” Having a lot of good tests combined with good test coverage leads to a high confidence when refactoring code. If you change something and make a mistake, it’s likely to break a test. Having this confidence requires both good testing coverage and high quality tests. Testing coverage is something that can be determined by any decent testing framework and uses instrumentation. Ie, the tests cover 90% lines of code and 85% of all conditional branches is an example of coverage. Coverage is absolutely not enough, though. You can easily write poor tests which have high coverage, but that leaves no confidence for refactoring. High quality tests without much coverage leads to high confidence, but only in some areas of code (leading to refactoring being scary, since it often touches very large portions of code and may affect parts that weren’t tested). Both together are necessary.</p>
<p>All of these ideas now lead to a central crux: how do you write good automated tests? I will not go into detail here on that topic, as there are a plethora of resources available to discuss this very thing. However, there are a couple of good ways to start. First of all, I like to differentiate between unit and integration tests. Unit tests are atomic testing instances where a very specific piece of functionality is being tested <span class="bbcode-b">in isolation</span>. Integration tests involve testing some sort of functionality which may use many other pieces of code. For instance, a unit test might test whether the dot product of a vector class is correct, whereas an integration test may test whether a triangle rasterization algorithm which uses matrices and vectors together is operating correctly. The distinction between these is not vital to understanding how to write good tests, but it’s important to understand how to write targeted tests.</p>
<p>When you write new code, such as a service or algorithm, it is a good idea to write as many unit tests as you can think of at the time to test any corner cases. Unit tests are a way of specifically showing your service or algorithm satisfies one specific property. The accumulation of these tests show that the entire policy of the algorithm works. It is a <span class="bbcode-b">very</span> good idea to have peer code reviews of tests. Tests are easy to read and usually pretty easy to write, but it’s always a good idea to make sure you are writing good, strong tests. Peer reviewers can suggest changes or additional tests for better coverage.</p>
<p>And, finally, I have one more bit of advice for tests. Overall, they often prevent bugs and reduce your time debugging your code base because they are constantly trying to prove your code works as expected. Tests do have their own maintenance and should be run constantly and they are, unfortunately, not perfect. You will run into bugs and you will need to debug them. My piece of advice is: if you find a bug during manual testing either done by yourself or another (and all your tests pass, because your tests should always deterministically pass–no flaky tests!), then you probably need to add a test targeted at that bug. This is definitely not a catch-all problem; you really might not need to add a test (use your discretion). But often you get a very nice advantage where, after adding a test, the bug will be very difficult to ever work back into the code base; that new test should fail if someone on the development team ever makes the mistake of reintroducing it. This is essential for bugs found in critical portions of your code base.</p>
<p>Although it seems I may have gone off the topic a bit, I feel this is all very much essential to the overall understanding of how to create and maintain a long-term and large-scale piece of software. I barely touched the surface of how deep the rabbit hole goes here, but hopefully your interest will carry you on to diving deeper into these topics and trying to get the most out of every moment you spend developing your software, with the hope that it can survive well into the future and receive contributions from many different developers of different backgrounds. I’ll be happy to answer any additional questions you may have regarding these topics.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/11</link>
        <pubDate>Fri, 03 Jul 2015 01:35:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-11</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="9" data-topic="552183">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sini/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sini:</div>
<blockquote>
<p>Interesting. I’ll wait for some commits before I look deeper at it.</p>
</blockquote>
</aside>
<p>No problem. That project will probably re organized to be the engine stuff, and the client/server/codec/etc stuff I’ll push a bit later.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/10</link>
        <pubDate>Tue, 30 Jun 2015 20:23:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-10</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Interesting. I’ll wait for some commits before I look deeper at it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/9</link>
        <pubDate>Tue, 30 Jun 2015 20:21:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-9</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Some of the code is available on <a href="https://github.com/Zymus/pokemod-game-api" data-bbcode="true">github</a>, but it’s not up to date. I merged some of the projects into this one, but haven’t pushed the changes. Also, none of the engine code is in the github repo yet. Just some skeletal DTO type things. I was experimenting with different things, so it’s pretty rugged.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/8</link>
        <pubDate>Tue, 30 Jun 2015 20:09:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-8</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Yas release it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/7</link>
        <pubDate>Tue, 30 Jun 2015 20:04:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-7</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Yeah, I’d like to hear it. As well as any other thoughts from anyone else. When I’m done, I’ll probably release it here first, and have you guys explore it. Your comment about the process of refactoring helped me a bit.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/6</link>
        <pubDate>Tue, 30 Jun 2015 04:49:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-6</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Take a look at the MVC design pattern. It’s pretty common for designing applications in general, but it might help with building a server. I recommend looking at how other servers are architected (don’t limit yourself to games, either). Finally, don’t spend too much time on engineering. You’re going to miss something regardless of how much time you spend thinking about it beforehand; that’s software engineering. The best approach (imo) is to simply start developing the software given the constraints that you currently understand. Make sure that it is well tested (preferably with test automation) and that it satisfies the policies you want it to right now. As the code starts to become messy, refactor it (which often means ensuring object oriented code satisfies the SOLID principles or generalizing code to be applied to a wide variety of circumstances instead of the specific circumstance it started with). The process of refactoring will lead to self-organizing and an evolved architecture that will be exactly what you need, when you need it.</p>
<p>If you want more information on that approach, I’ll be happy to delve further.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/5</link>
        <pubDate>Mon, 29 Jun 2015 01:04:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-5</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Oh okay that makes sense. I’m shocked no one has weighed in on this yet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/4</link>
        <pubDate>Sun, 28 Jun 2015 23:22:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-4</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“sini, post:2, topic:552183”]I’ve had trouble delegating separate responsibility from a player and its client in the past unless of course the responsibilities and data for each is segregated to each separate entities and that’s something you have to take into consideration for your design. I don’t know if it’s appropriate to designate the engine and server separately, I would specify the server as a layer which delegates requests to change the state of the virtual world or engine in your case.</p>
<p>I think the engine is a facet or should be built into the server, from the perspective of the application as a whole.[/quote]</p>
<p>In a way it is. I’m sorry if that was not clear. The server, on start up, is responsible for starting up the engine, which creates the world, etc.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/3</link>
        <pubDate>Fri, 26 Jun 2015 18:25:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-3</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>I’ve had trouble delegating separate responsibility from a player and its client in the past unless of course the responsibilities and data for each is segregated to each separate entities and that’s something you have to take into consideration for your design. I don’t know if it’s appropriate to designate the engine and server separately, I would specify the server as a layer which delegates requests to change the state of the virtual world or engine in your case.</p>
<p>I think the engine is a facet or should be built into the server, from the perspective of the application as a whole.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/2</link>
        <pubDate>Fri, 26 Jun 2015 18:14:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-2</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
      <item>
        <title>Game Server Design</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Hey guys, just need your opinion on a game server design. Apologies if this seems a bit scattered, analysis paralysis and all that.</p>
<p>So, I tried to separate things out into different domains. We’ve got the game client, the game server, and the game engine. The game client and game server use the same codec. The client and server operate on packets, while the engine operates on events. I want to keep things as separate as possible. One example is the Player class in the game engine; it should never know about the client, the server, or anything outside of the game world. Similarly, the client should never know about the Player in the game world. It should only know about the user interactions, how to render the scene, and how to send packets.</p>
<p>So far, I’ve broken it down into 3 separate entities. The client, the server, and the engine. However, it’s the communication between them that I’m getting stuck on. I think I’m on the right path between the client and server, having a separate codec project; but between the server and the engine, I’m not sure.</p>
<p>This model looks something like<br>
User &lt;-&gt; Client &lt;-&gt; Server &lt;-&gt; Engine<br>
But in this model, each component is not entirely separated. The client communicates with the server through the codec, which is fine, but the server has to issue events to the engine, and the engine has to do <em>something</em> with the engine.</p>
<p>I had an idea today, about adding elements between each of these, would be interfaces. Something like</p>
<p>User &lt;-&gt; Client &lt;-(Server API | Client API)-&gt; Server &lt;-(Engine API | Server API)-&gt; Engine</p>
<p>Or visually:</p>
<pre><code class="lang-auto">                +--&gt; (Server API) --+    +--&gt; (Engine API) --+
                |                   |    |                   |
                |                   v    |                   v
User  &lt;--&gt; Client                   Server                   Engine
                ^                   |    ^                   |
                |                   |    |                   |
                +-- (Client API) &lt;--+    +-- (Server API) &lt;--+</code></pre>
<p>In this model, the client and server API are essentially the same, but the server talks to the engine via the engine API, and the engine talks to the server API. But then again, this isn’t really solving the problem, but splitting it into two separate problems, with no real benefit.</p>
<p>I’ve thunk myself into a rut, and now I’m finding myself trying to write unit tests for species, and really just looking at lines of code and bouncing between files. Any advice would be appreciated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-server-design/552183/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-server-design/552183/1</link>
        <pubDate>Fri, 26 Jun 2015 04:21:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552183-1</guid>
        <source url="https://forum.moparisthebest.com/t/game-server-design/552183.rss">Game Server Design</source>
      </item>
  </channel>
</rss>
