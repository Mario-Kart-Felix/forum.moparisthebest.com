<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>317 Client RGB/HSL</title>
    <link>https://forum.moparisthebest.com/t/317-client-rgb-hsl/555067</link>
    <description>The older clients use a 16 bit color. The most significant 6 bits are used for hue, the least significant 7 bits are used for lightness or luminosity, and the other 3 bits are used for saturation. As you can see there isn&#39;t much room for variation in terms of saturation, which I find could be fairly limiting. But they did have support to where they could have effective lighting, but even if you&#39;re interpolating colors between vertices you only have 7 bits of variance which isn&#39;t much. I think it&#39;s easy to see why 32 bit color is superior.

You either had: Very grey, Very intense?, or normal.

http://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion

Here&#39;s more information on the subject.

[code=java]

  public static void initColorTable(double d) {
    d += Math.random() * 0.029999999999999999D - 0.014999999999999999D;
    int j = 0;
    // 6 bits of hue
    // 3 bits of saturation
    // 7 bits of lightness
    // hhhhhhssslllllll
    for (int i = 0; i &lt; 512; i++) {
      double hue = (double) (i &gt;&gt; 3) / 64D + 0.0078125D;
      double saturation = (double) (i &amp; 7) / 8D + 0.0625D;
      for (int lightness = 0; lightness &lt; 128; lightness++) {
        double l = (double) lightness / 128D;
        // Achromatic, no saturation.
        double r = l;
        double g = l;
        double b = l;
        if (saturation != 0.0D) {
          double p;
          if (l &lt; 0.5D) {
            p = l * (1.0D + saturation);
          } else {
            p = (l + saturation) - l * saturation;
          }
          double q = 2D * l - p;

          double redHue = hue + 0.33333333333333331D;
          if (redHue &gt; 1.0D) {
            redHue--;
          }

          double greenHue = hue;

          double blueHue = hue - 0.33333333333333331D;
          if (blueHue &lt; 0.0D) {
            blueHue++;
          }

          if (6D * redHue &lt; 1.0D) {
            r = q + (p - q) * 6D * redHue;
          } else if (2D * redHue &lt; 1.0D) {
            r = p;
          } else if (3D * redHue &lt; 2D) {
            r = q + (p - q) * (0.66666666666666663D - redHue) * 6D;
          } else {
            r = q;
          }

          if (6D * greenHue &lt; 1.0D)
            g = q + (p - q) * 6D * greenHue;
          else if (2D * greenHue &lt; 1.0D)
            g = p;
          else if (3D * greenHue &lt; 2D)
            g = q + (p - q) * (0.66666666666666663D - greenHue) * 6D;
          else
            g = q;

          if (6D * blueHue &lt; 1.0D)
            b = q + (p - q) * 6D * blueHue;
          else if (2D * blueHue &lt; 1.0D)
            b = p;
          else if (3D * blueHue &lt; 2D)
            b = q + (p - q) * (0.66666666666666663D - blueHue) * 6D;
          else
            b = q;
        }
        int ri = (int) (r * 256D);
        int gi = (int) (g * 256D);
        int bi = (int) (b * 256D);
        int rgb = (ri &lt;&lt; 16) + (gi &lt;&lt; 8) + bi;
        rgb = intensify(rgb, d);
        if (rgb == 0) {
          rgb = 1;
        }
        colorTable[j++] = rgb;
      }
    }
}

[/code]


[code=java]
  private static int repackHSL(int hsl, int lightIntensity, int mode) {
    if ((mode &amp; 2) == 2) {
      if (lightIntensity &lt; 0) {
        lightIntensity = 0;
      } else if (lightIntensity &gt; 127) {
        lightIntensity = 127;
      }
      lightIntensity = 127 - lightIntensity;
      return lightIntensity;
    }
    lightIntensity = lightIntensity * (hsl &amp; 0x7f) &gt;&gt; 7;
    if (lightIntensity &lt; 2) {
      lightIntensity = 2;
    } else if (lightIntensity &gt; 126) {
      lightIntensity = 126;
    }
    return (hsl &amp; 0xff80) + lightIntensity;
  }
[/code]</description>
    
    <lastBuildDate>Sat, 26 Mar 2016 11:21:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-client-rgb-hsl/555067.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>317 Client RGB/HSL</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>The older clients use a 16 bit color. The most significant 6 bits are used for hue, the least significant 7 bits are used for lightness or luminosity, and the other 3 bits are used for saturation. As you can see there isn’t much room for variation in terms of saturation, which I find could be fairly limiting. But they did have support to where they could have effective lighting, but even if you’re interpolating colors between vertices you only have 7 bits of variance which isn’t much. I think it’s easy to see why 32 bit color is superior.</p>
<p>You either had: Very grey, Very intense?, or normal.</p>
<aside class="onebox stackexchange">
  <header class="source">
      <a href="https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion" target="_blank" rel="nofollow noopener">stackoverflow.com</a>
  </header>
  <article class="onebox-body">
      <a href="https://stackoverflow.com/users/42303/hhafez" target="_blank" rel="nofollow noopener">
    <img alt="hhafez" src="https://www.gravatar.com/avatar/bf2caefd09a9e0914f0f0bd2f7f18e4e?s=128&amp;d=identicon&amp;r=PG" class="thumbnail onebox-avatar" width="128" height="128">
  </a>
<h4>
  <a href="https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion" target="_blank" rel="nofollow noopener">HSL to RGB color conversion</a>
</h4>

<div class="tags">
  <strong>colors, rgb, hsl</strong>
</div>

<div class="date">
  asked by
  
  <a href="https://stackoverflow.com/users/42303/hhafez" target="_blank" rel="nofollow noopener">
    hhafez
  </a>
  on <a href="https://stackoverflow.com/questions/2353211/hsl-to-rgb-color-conversion" target="_blank" rel="nofollow noopener">11:58PM - 28 Feb 10</a>
</div>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Here’s more information on the subject.</p>
<pre><code class="lang-auto">
  public static void initColorTable(double d) {
    d += Math.random() * 0.029999999999999999D - 0.014999999999999999D;
    int j = 0;
    // 6 bits of hue
    // 3 bits of saturation
    // 7 bits of lightness
    // hhhhhhssslllllll
    for (int i = 0; i &lt; 512; i++) {
      double hue = (double) (i &gt;&gt; 3) / 64D + 0.0078125D;
      double saturation = (double) (i &amp; 7) / 8D + 0.0625D;
      for (int lightness = 0; lightness &lt; 128; lightness++) {
        double l = (double) lightness / 128D;
        // Achromatic, no saturation.
        double r = l;
        double g = l;
        double b = l;
        if (saturation != 0.0D) {
          double p;
          if (l &lt; 0.5D) {
            p = l * (1.0D + saturation);
          } else {
            p = (l + saturation) - l * saturation;
          }
          double q = 2D * l - p;

          double redHue = hue + 0.33333333333333331D;
          if (redHue &gt; 1.0D) {
            redHue--;
          }

          double greenHue = hue;

          double blueHue = hue - 0.33333333333333331D;
          if (blueHue &lt; 0.0D) {
            blueHue++;
          }

          if (6D * redHue &lt; 1.0D) {
            r = q + (p - q) * 6D * redHue;
          } else if (2D * redHue &lt; 1.0D) {
            r = p;
          } else if (3D * redHue &lt; 2D) {
            r = q + (p - q) * (0.66666666666666663D - redHue) * 6D;
          } else {
            r = q;
          }

          if (6D * greenHue &lt; 1.0D)
            g = q + (p - q) * 6D * greenHue;
          else if (2D * greenHue &lt; 1.0D)
            g = p;
          else if (3D * greenHue &lt; 2D)
            g = q + (p - q) * (0.66666666666666663D - greenHue) * 6D;
          else
            g = q;

          if (6D * blueHue &lt; 1.0D)
            b = q + (p - q) * 6D * blueHue;
          else if (2D * blueHue &lt; 1.0D)
            b = p;
          else if (3D * blueHue &lt; 2D)
            b = q + (p - q) * (0.66666666666666663D - blueHue) * 6D;
          else
            b = q;
        }
        int ri = (int) (r * 256D);
        int gi = (int) (g * 256D);
        int bi = (int) (b * 256D);
        int rgb = (ri &lt;&lt; 16) + (gi &lt;&lt; 8) + bi;
        rgb = intensify(rgb, d);
        if (rgb == 0) {
          rgb = 1;
        }
        colorTable[j++] = rgb;
      }
    }
}
</code></pre>
<pre><code class="lang-auto">  private static int repackHSL(int hsl, int lightIntensity, int mode) {
    if ((mode &amp; 2) == 2) {
      if (lightIntensity &lt; 0) {
        lightIntensity = 0;
      } else if (lightIntensity &gt; 127) {
        lightIntensity = 127;
      }
      lightIntensity = 127 - lightIntensity;
      return lightIntensity;
    }
    lightIntensity = lightIntensity * (hsl &amp; 0x7f) &gt;&gt; 7;
    if (lightIntensity &lt; 2) {
      lightIntensity = 2;
    } else if (lightIntensity &gt; 126) {
      lightIntensity = 126;
    }
    return (hsl &amp; 0xff80) + lightIntensity;
  }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-client-rgb-hsl/555067/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-client-rgb-hsl/555067/1</link>
        <pubDate>Sat, 26 Mar 2016 11:21:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555067-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-client-rgb-hsl/555067.rss">317 Client RGB/HSL</source>
      </item>
  </channel>
</rss>
