<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Word Filtering System</title>
    <link>https://forum.moparisthebest.com/t/word-filtering-system/524985</link>
    <description>[center][size=36pt][b]Word Filtering System[/b][/size]
[b][size=16pt]by RandQm[/size][/b][/center]





[i]inb4 Why don&#39;t you do it client sided, that was not my goal, I want it server-sided.[/i]

[b]Note upfront: I&#39;ve written this out of my knowledge, no resources have been used,
therefore it definitely could be done a lot better. I know that, so only leave criticism about the existing code or the tutorial.[/b]



[size=14pt][b]What are we going to add?[/b][/size]
In this tutorial we are going to add a word filtering system.
This will make filtered words appear as ***** when used by players.
I decided to use 5 stars for every word and not replacing every letter by a *.
This way the players seeing it can&#39;t tell for sure what word has been said.
Why 5 and not 4? Because &quot;fuck&quot; contains 4 characters and it is for sure the most used word.
So everybody knows that the player is saying it, even it has been filtered out.

[img]http://i.imgur.com/PEg2gSN.png[/img]




[size=14pt][b]Adding the system?[/b][/size]
First of all, create a text file called: filteredWords
In this file you have to add the words you want to be filtered. (one per line!)
I&#39;m using the directory in my server files: Data
So either you use/make this directory as well in your server&#39;s root.
Or if you want it to be stored somewhere else, then don&#39;t forget to change that path in the code coming now.


Now create a new java file called WordFilterManager.java and add this code to it.
I have added explanation in the code itself.
[code=java]
package org.camelot.util; //Change this to your package (where you added the file)

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import org.camelot.Server; //Change the import to the path of your own Server class obviously.

/**
 * @Author: RandQm
 */

public class WordFilterManager {
	
	private WordFilter[] words;
	
	/*
	 * The maximum amount of filtered words.
	 */
	private static final int MAX_FILTERED_WORDS = 200; //since most probably don&#39;t have a constants class im adding it here for the tutorial
	//Same for the punctuation marks
	private static final char[] PUNCTUATION_MARKS = {&#39;!&#39;, &#39;.&#39;}; //add the rest yourself
	
	public WordFilterManager() {
		words = new WordFilter[MAX_FILTERED_WORDS];
		loadFilteredWords();
	}
	
	
	/*
	 * Checks if a specific word is filtered or not.
	 */
	public boolean wordFiltered(String word) {
		for (WordFilter wordFilter : words) { //We loop through our filtered words
			if (wordFilter != null) {
				if (wordFilter.getWord().equalsIgnoreCase(word) //If the word we have to check is indeed in the filter list
						|| word.contains(wordFilter.getWord()))
					return true; //we return the boolean as true
			}
		}
		return false; //else as false
	}
	
	/*
	 * Returns the filtered word if it matches the word to check.
	 */
	public String getFilteredWord(String word) {
		for (WordFilter wordFilter : words) { //We loop through our filtered words.
			if (wordFilter != null) {
				if (wordFilter.getWord().equalsIgnoreCase(word)
						|| word.contains(wordFilter.getWord())) //If the checked word is in the filtered list
					return wordFilter.getWord(); //we return the word
			}
		}
		System.out.println(&quot;[WordfilterManager] Unable to return filtered word for String &quot;+word+&quot;.&quot;);
		return null;
	}
	
	/*
	 * Rebuilds a whole string that contains filtered words by replacing them with ****.
	 */
	public String getRebuildedString(String text) {
		char punctuationMark = &#39; &#39;;
		String[] args = text.split(&quot; &quot;); //Splits our string into multiple parts. Every part is found by space between them.
		text = &quot;&quot;;
		for (int i = 0; i &lt; args.length; i ++) { //Looping through all the parts of our String
			char[] stringArray = args[i].toCharArray(); //Converting the part into chars. (e.g. noob becomes n o o b, every letter in an array slot)
			args[i] = &quot;&quot;; //Reset our arg to rebuild it later.
			for (char letter : stringArray) { //Loop through our chars
				for (char pM : PUNCTUATION_MARKS) {
					if (letter == pM) //If a char contains a punctuation mark
						punctuationMark = pM; //our punctuationMark char gets the value.
				}
				if (letter != punctuationMark) //If our char is NOT a punctuation mark it will add it to our arg. (the puncmark has been assigned earlier)
					args[i] += letter;
			} //Now we have the hole word back but without punc marks if there were any.
			if (args[i].equalsIgnoreCase(Server.getWordFilterManager().getFilteredWord(args[i]))) //We check here if the word is filtered
				args[i] = &quot;*****&quot;+punctuationMark; //if it is, then we replace the arg by *****, we also add our punc mark to it again since we dont filter that.
			punctuationMark = &#39; &#39;; //We reset the punc mark to not influence the build of the next arg in the loop.
			text += (args[i] + &quot; &quot;); //We rebuild our textstring with our args.
		}
		char[] stringArray = text.toCharArray(); //We turn the string in chars again
		stringArray[0] = Character.toUpperCase(stringArray[0]); //we make the first letter of the string uppercase
		text = new String(stringArray); //we build the string again
		return text; //we return the rebuilded string.
	}
	
	@SuppressWarnings(&quot;resource&quot;)
	public void loadFilteredWords() {
		try {
			Scanner s = new Scanner(new File(&quot;./data/filteredWords.txt&quot;)); //Building to scan the this specific file. Change to the path where you stored your file.
			int slot = 0;
			while (s.hasNextLine()) { //loop through the lines
				String line = s.nextLine(); //get the text on a line
				words[slot ++] = new WordFilter(line); //create a new filtered word
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println(&quot;[WordFilterManager] Failed to read filtered words list.&quot;);
		}
	}

}
[/code]

Make another java file in the same directory called WordFilter.java and add this code to it:
This is where we will load our filtered words too, to not have to check the file everytime.
[code=java]package org.camelot.util; //Change package to yours again

/**
 * @Author: RandQm
 */

public class WordFilter {
	
	private String word;
	
	
	public WordFilter(String word) {
		this.word = word;
	}
	
	public String getWord() {
		return word;
	}

}[/code]


Now open your Server.java file,
add this to it: (if you don&#39;t know were, look for similar ones and add it with them)
[code=java]	private static WordFilterManager wordFilterManager = new WordFilterManager();
	public static WordFilterManager getWordFilterManager() {
		return wordFilterManager;
	}[/code]
If your FilterManager file is not in the same dir as your Server file, you will also have to add the import for FilterManager. Look for example on top of your class
if you don&#39;t really now what to do.



Now open Player.java and search for your forced chat method, in PI servers this would be
[code=java]public void forcedChat(String text)[/code]
Right under that line add:
[code=java]if (Server.getWordFilterManager().wordFiltered(text))
			text = Server.getWordFilterManager().getRebuildedString(text);[/code]



Now you should still add the same as you did for forced text, to your private messaging and normal chat etc...
Wherever you want words to be filtered. Even for account creating if you want that.
I&#39;d show it but time has me and I got to go, I will still add it when I find time, or feel free to post when you did it yourself.
You could optionally also add a boolean to make players chose to toggle off or on the filter. Coming when I have time as well.


[i]Credits: Me[/i]</description>
    
    <lastBuildDate>Tue, 16 Jul 2013 04:23:16 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“arham 4, post:8, topic:524985”]this  code is pretty confusing:s</p>
<p>EDIT:  ah I  see why[/quote]</p>
<p>could be simplified tremendously by using either a java.lang.StringBuilder or the combination of a  java.lang.CharSequence and java.nio.CharBuffer#wrap(char[]) to trail the punctuation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/9</link>
        <pubDate>Tue, 16 Jul 2013 04:23:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-9</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>this  code is pretty confusing:s</p>
<p>EDIT:  ah I  see why</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/8</link>
        <pubDate>Tue, 16 Jul 2013 04:16:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-8</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@Vain1 Vain_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vain1">@Vain1</a> wrote:</p>
          <blockquote>
              <p>[quote=“RandQm, post:5, topic:524985”][quote author=AtomicInt_ link=topic=643678.msg4332387#msg4332387 date=1373846278]<br>
Also, here is a simplified version of your code:</p>
<pre><code class="lang-auto">	private static final String[] INVALIDS = new String[] {
		"shit", "ass", "love"
	};

	public static String filter(String string) {
		char[] characters = string.toCharArray();
		for (int i = 0; i &lt; characters.length; i++) {
			for (String invalid : INVALIDS) {
				if (string.contains(invalid) &amp;&amp; !Character.isWhitespace(characters[i])) {
					characters[i] = '\u002A'; // "\u002A" is the character code for an asterisk.
				}
			}
		}
		return new String(characters);
	}</code></pre>
<p>(I didn’t feel like including the trailing punctuation, loading from a file, or making it filter 5 asterisks instead of the word amount but it would be easy to implement)<br>
[/quote]<br>
Yeah the punctuation is what got me to that big code. But I feel like it should be there.<br>
“I’m wasted like ****!” and “I’m wasted like ****”  can be a big difference.[/quote]but what if they had punctuation themselves? would make them seem mad,</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/7</link>
        <pubDate>Tue, 16 Jul 2013 01:19:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-7</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Well, I cleaned it up again (added the 5 asterisks you wanted)</p>
<p>[code=java]<br>
private static final String[] INVALIDS = new String[] {<br>
“love”, “shit”, “ass”<br>
};</p>
<pre><code>private static final char[] ASTERISKS = new char[] {
	'\u002A', '\u002A', '\u002A', '\u002A', '\u002A' // "\u002A" is the character code for an asterisk.
};

public static String filter(String string) {
	char[] characters = string.toCharArray();

	for (int i = 0; i &lt; characters.length; i++) {
		for (String invalid : INVALIDS) {
			if (string.contains(invalid) &amp;&amp; !Character.isWhitespace(characters[i])) {
				string = new String(ASTERISKS);
			}
		}
	}
	return string;
}[/code]
</code></pre>
<p>as for the punctuation, I suggest looking into java.lang.CharSequence and java.nio.CharBuffer#wrap(char[]) to trail the punctuation at the end of your string. Shouldn’t be too difficult (or ugly!). <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/6</link>
        <pubDate>Mon, 15 Jul 2013 00:26:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-6</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:4, topic:524985”]Also, here is a simplified version of your code:</p>
<pre><code class="lang-auto">	private static final String[] INVALIDS = new String[] {
		"shit", "ass", "love"
	};

	public static String filter(String string) {
		char[] characters = string.toCharArray();
		for (int i = 0; i &lt; characters.length; i++) {
			for (String invalid : INVALIDS) {
				if (string.contains(invalid) &amp;&amp; !Character.isWhitespace(characters[i])) {
					characters[i] = '\u002A'; // "\u002A" is the character code for an asterisk.
				}
			}
		}
		return new String(characters);
	}</code></pre>
<p>(I didn’t feel like including the trailing punctuation, loading from a file, or making it filter 5 asterisks instead of the word amount but it would be easy to implement)[/quote]<br>
Yeah the punctuation is what got me to that big code. But I feel like it should be there.<br>
“I’m wasted like ****!” and “I’m wasted like ****”  can be a big difference.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/5</link>
        <pubDate>Mon, 15 Jul 2013 00:12:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-5</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Also, here is a simplified version of your code:</p>
<pre><code class="lang-auto">	private static final String[] INVALIDS = new String[] {
		"shit", "ass", "fuck"
	};

	public static String filter(String string) {
		char[] characters = string.toCharArray();
		for (int i = 0; i &lt; characters.length; i++) {
			for (String invalid : INVALIDS) {
				if (string.contains(invalid) &amp;&amp; !Character.isWhitespace(characters[i])) {
					characters[i] = '\u002A'; // "\u002A" is the character code for an asterisk.
				}
			}
		}
		return new String(characters);
	}</code></pre>
<p>(I didn’t feel like including the trailing punctuation, loading from a file, or making it filter 5 asterisks instead of the word amount but it would be easy to implement)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/4</link>
        <pubDate>Sun, 14 Jul 2013 23:57:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-4</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>Ah, I see you released it.</p>
<p>Nice.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/3</link>
        <pubDate>Sun, 14 Jul 2013 23:47:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-3</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>…or you could use the one within the cache…</p>
<p>Yes, I saw your “inb4” thing, but it is the more proper way to do it and you can easily dump the table and modify it to your needs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/2</link>
        <pubDate>Sun, 14 Jul 2013 23:37:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-2</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
      <item>
        <title>Word Filtering System</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>[center][size=36pt]<span class="bbcode-b">Word Filtering System</span>[/size]<br>
<span class="bbcode-b">[size=16pt]by RandQm[/size]</span>[/center]</p>
<p><span class="bbcode-i">inb4 Why don’t you do it client sided, that was not my goal, I want it server-sided.</span></p>
<p><span class="bbcode-b">Note upfront: I’ve written this out of my knowledge, no resources have been used,<br>
therefore it definitely could be done a lot better. I know that, so only leave criticism about the existing code or the tutorial.</span></p>
<p>[size=14pt]<span class="bbcode-b">What are we going to add?</span>[/size]<br>
In this tutorial we are going to add a word filtering system.<br>
This will make filtered words appear as ***** when used by players.<br>
I decided to use 5 stars for every word and not replacing every letter by a *.<br>
This way the players seeing it can’t tell for sure what word has been said.<br>
Why 5 and not 4? Because “fuck” contains 4 characters and it is for sure the most used word.<br>
So everybody knows that the player is saying it, even it has been filtered out.</p>
<p><img src="http://i.imgur.com/PEg2gSN.png" alt width="161" height="81"></p>
<p>[size=14pt]<span class="bbcode-b">Adding the system?</span>[/size]<br>
First of all, create a text file called: filteredWords<br>
In this file you have to add the words you want to be filtered. (one per line!)<br>
I’m using the directory in my server files: Data<br>
So either you use/make this directory as well in your server’s root.<br>
Or if you want it to be stored somewhere else, then don’t forget to change that path in the code coming now.</p>
<p>Now create a new java file called WordFilterManager.java and add this code to it.<br>
I have added explanation in the code itself.</p>
<pre><code class="lang-auto">package org.camelot.util; //Change this to your package (where you added the file)

import java.io.File;
import java.io.IOException;
import java.util.Scanner;

import org.camelot.Server; //Change the import to the path of your own Server class obviously.

/**
 * @Author: RandQm
 */

public class WordFilterManager {
	
	private WordFilter[] words;
	
	/*
	 * The maximum amount of filtered words.
	 */
	private static final int MAX_FILTERED_WORDS = 200; //since most probably don't have a constants class im adding it here for the tutorial
	//Same for the punctuation marks
	private static final char[] PUNCTUATION_MARKS = {'!', '.'}; //add the rest yourself
	
	public WordFilterManager() {
		words = new WordFilter[MAX_FILTERED_WORDS];
		loadFilteredWords();
	}
	
	
	/*
	 * Checks if a specific word is filtered or not.
	 */
	public boolean wordFiltered(String word) {
		for (WordFilter wordFilter : words) { //We loop through our filtered words
			if (wordFilter != null) {
				if (wordFilter.getWord().equalsIgnoreCase(word) //If the word we have to check is indeed in the filter list
						|| word.contains(wordFilter.getWord()))
					return true; //we return the boolean as true
			}
		}
		return false; //else as false
	}
	
	/*
	 * Returns the filtered word if it matches the word to check.
	 */
	public String getFilteredWord(String word) {
		for (WordFilter wordFilter : words) { //We loop through our filtered words.
			if (wordFilter != null) {
				if (wordFilter.getWord().equalsIgnoreCase(word)
						|| word.contains(wordFilter.getWord())) //If the checked word is in the filtered list
					return wordFilter.getWord(); //we return the word
			}
		}
		System.out.println("[WordfilterManager] Unable to return filtered word for String "+word+".");
		return null;
	}
	
	/*
	 * Rebuilds a whole string that contains filtered words by replacing them with ****.
	 */
	public String getRebuildedString(String text) {
		char punctuationMark = ' ';
		String[] args = text.split(" "); //Splits our string into multiple parts. Every part is found by space between them.
		text = "";
		for (int i = 0; i &lt; args.length; i ++) { //Looping through all the parts of our String
			char[] stringArray = args[i].toCharArray(); //Converting the part into chars. (e.g. noob becomes n o o b, every letter in an array slot)
			args[i] = ""; //Reset our arg to rebuild it later.
			for (char letter : stringArray) { //Loop through our chars
				for (char pM : PUNCTUATION_MARKS) {
					if (letter == pM) //If a char contains a punctuation mark
						punctuationMark = pM; //our punctuationMark char gets the value.
				}
				if (letter != punctuationMark) //If our char is NOT a punctuation mark it will add it to our arg. (the puncmark has been assigned earlier)
					args[i] += letter;
			} //Now we have the hole word back but without punc marks if there were any.
			if (args[i].equalsIgnoreCase(Server.getWordFilterManager().getFilteredWord(args[i]))) //We check here if the word is filtered
				args[i] = "*****"+punctuationMark; //if it is, then we replace the arg by *****, we also add our punc mark to it again since we dont filter that.
			punctuationMark = ' '; //We reset the punc mark to not influence the build of the next arg in the loop.
			text += (args[i] + " "); //We rebuild our textstring with our args.
		}
		char[] stringArray = text.toCharArray(); //We turn the string in chars again
		stringArray[0] = Character.toUpperCase(stringArray[0]); //we make the first letter of the string uppercase
		text = new String(stringArray); //we build the string again
		return text; //we return the rebuilded string.
	}
	
	@SuppressWarnings("resource")
	public void loadFilteredWords() {
		try {
			Scanner s = new Scanner(new File("./data/filteredWords.txt")); //Building to scan the this specific file. Change to the path where you stored your file.
			int slot = 0;
			while (s.hasNextLine()) { //loop through the lines
				String line = s.nextLine(); //get the text on a line
				words[slot ++] = new WordFilter(line); //create a new filtered word
			}
		} catch (IOException e) {
			e.printStackTrace();
			System.out.println("[WordFilterManager] Failed to read filtered words list.");
		}
	}

}</code></pre>
<p>Make another java file in the same directory called WordFilter.java and add this code to it:<br>
This is where we will load our filtered words too, to not have to check the file everytime.</p>
<p>[code=java]package org.camelot.util; //Change package to yours again</p>
<p>/**</p>
<ul>
<li>
<span class="mention">@Author</span>: RandQm<br>
*/</li>
</ul>
<p>public class WordFilter {</p>
<pre><code>private String word;


public WordFilter(String word) {
	this.word = word;
}

public String getWord() {
	return word;
}
</code></pre>
<p>}[/code]</p>
<p>Now open your Server.java file,<br>
add this to it: (if you don’t know were, look for similar ones and add it with them)</p>
<p><code>	private static WordFilterManager wordFilterManager = new WordFilterManager();
	public static WordFilterManager getWordFilterManager() {
		return wordFilterManager;
	}</code><br>
If your FilterManager file is not in the same dir as your Server file, you will also have to add the import for FilterManager. Look for example on top of your class<br>
if you don’t really now what to do.</p>
<p>Now open Player.java and search for your forced chat method, in PI servers this would be</p>
<pre><code class="lang-auto">public void forcedChat(String text)</code></pre>
<p>Right under that line add:</p>
<p><code>if (Server.getWordFilterManager().wordFiltered(text))
			text = Server.getWordFilterManager().getRebuildedString(text);</code></p>
<p>Now you should still add the same as you did for forced text, to your private messaging and normal chat etc…<br>
Wherever you want words to be filtered. Even for account creating if you want that.<br>
I’d show it but time has me and I got to go, I will still add it when I find time, or feel free to post when you did it yourself.<br>
You could optionally also add a boolean to make players chose to toggle off or on the filter. Coming when I have time as well.</p>
<p><span class="bbcode-i">Credits: Me</span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/word-filtering-system/524985/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/word-filtering-system/524985/1</link>
        <pubDate>Sun, 14 Jul 2013 23:35:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-524985-1</guid>
        <source url="https://forum.moparisthebest.com/t/word-filtering-system/524985.rss">Word Filtering System</source>
      </item>
  </channel>
</rss>
