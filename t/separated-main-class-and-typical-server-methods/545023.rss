<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Separated main class and typical server methods</title>
    <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023</link>
    <description>Hello ladies and gentlemen!  :cool:

After learning a bit of 317 winterLove and experimenting with it, tidying it and adding comments to make it:
 - More readable.
 - Better according to Javadoc.

...I felt like I wanted to make the server more kind of object oriented instead of having few classes stuffed with codeblocks screaming to be organized.
I have tried this a few times, but due to lack of Java-knowledge, many of my Fail.java-files have been moved to the recycle bin. :(
Today/this evening/this night I finally ended up with an attempt where I feel I can briefly see a light from the other side of the tunnel.

What I have done is to make a Server-class where I intend to store server related methods made more smooth than in a standard winterLove base
and leting another class manage it so I can create any class, create an object (preferably a singleton) and use quick calls to start the server,
open it for network connections, start it&#39;s cycle updating, stop the server, etc...

Here is a copy of the file:
[code]
/**
 * Import &quot;IOException&quot; from the java.io-package
 * to handle I/O exceptions when using the TCP-protocol.
 */
import java.io.IOException;

/**
 * Import both &quot;ServerSocket&quot; and &quot;Socket&quot; from the java.net-package
 * to establish TCP-connections between the server and connecting clients.
 */
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This class will establish a 317 RSPS-server.
 * It implements the Runnable-interface to handle multiple
 * tasks simutaneously.
 *
 * @author Ole Kristian MÃ¸ller-Hansen
 * @version 1.0
 * @since 16.07.2014
 * @see http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html
 */
public class Server implements Runnable {
    /**
     * A Socket-object that will simulate the connecting socket to the ServerSocket.
     */
    private Socket clientSocket;

    /**
     * A Thread-object intended to make cycle updating possible while doing other tasks.
     */
    private Thread cycleThread;

    /**
     * A void-method using the ServerSocket-object to listen for incoming Socket-connections.
     */
    public void listen() {
        //The &quot;listenThread&quot;-thread will be a new thread and called &quot;listeningThread&quot;.
        listenThread = new Thread(&quot;listeningThread&quot;) {

            /**
             * Create an anonymous void-method, so that the &quot;listeningThread&quot;-thread
             * will have it&#39;s task inside the listen-method instead of the class&#39; run-method.
             * This makes it possible to use seperate run-methods for each thread.
             *
             * @see http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html
             */
            public void run() {
                //The server will now be running.
                running = true;

                /*
                 * While the server should be running, run this loop.
                 * Since this is not a &quot;while (true)&quot;-loop,
                 * it&#39;s possible to end the loop in other ways than
                 * ending the process or using a break-statement.
                 */
                while (running == true) {
                    /*
                     * Try to wait for an incoming Socket-connection
                     * and accept it.
                     * An eventual I/O exception is handled if that occurs.
                     */
                    try {
                        /*
                         * Accept this client connection using the ServerSocket-object.
                         * This thread won&#39;t pass this command before a connection is made.
                         */
                        clientSocket = serverSocket.accept();

                        /*
            		     * setTcpNoDelay is set to true, so that Nagle&#39;s algorith does not kick in
            			 * and halt the packets sent to the client until they are full.
    	        		 */
                        clientSocket.setTcpNoDelay(true);
                    } catch (IOException IOException) {
                        //Print a message to the terminal that an I/O exception was caught.
                        printLine(&quot;I/O exception caught when waiting for a connection!&quot;);
                    }
                }
            }
        };

        //Now that the thread &quot;listeningThread&quot; has been created, start it.
        listenThread.start();
    }

    /**
     * A Thread-object intended to make listening for incoming connections
     * possible while doing other tasks.
     */
    private Thread listenThread;

    /**
     * A String-variable containing the name of the server.
     */
    private String name;

    /**
     * An integer-variable containing the port that the server-application
     * gets it&#39;s data sent to.
     */
    private int portNumber;

    /**
	 * This method will print text to the command prompt/terminal
	 * labeled with the class&#39; name.
	 */
    private void printLine(String text)	{
        //Print the class&#39; name followed with the text.
        System.out.println(&quot;Server: &quot; + text);
    }

    /**
     * This run-method HAS to be created since the class implements
     * the Runnable-interface. However, it will never be used,
     * as private, abstract run-methods are deligated to each
     * method that will use the effect of the interface.
     */
    @Override
    public void run()  {

    }

    /**
     * A void-method runing the update-cycle.
     */
    public void runCycle()  {
        //The &quot;cycleThread&quot;-thread will be a new thread and called &quot;cycleThread&quot;.
        cycleThread = new Thread(&quot;cycleThread&quot;) {

            /**
             * Create an anonymous void-method, so that the &quot;cycleThread&quot;-thread
             * will have it&#39;s task inside the runCycle-method instead of the class&#39; run-method.
             * This makes it possible to use seperate run-methods for each thread.
             *
             * @see http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html
             */
            public void run()   {

            }
        };

        //Now that the thread &quot;cycleThread&quot; has been created, start it.
        cycleThread.start();
    }

    /**
     * A handy boolean-variable to check if the server is running.
     * It&#39;s default value is going to be &quot;false&quot;.
     */
    private boolean running = false;

    /**
     * The constructor of this class, taking no parameters.
     *
     * @see http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html
     */
    public Server() {
        //Give this server a default name, since it was not specified.
        name = &quot;Nameless server&quot;;

        //Give this server a default port, since it was not specified.
        portNumber = 8284;
    }

    /**
     * An overloaded constructor of this class, taking one parameter.
     * It assigns the class-variable &quot;name&quot; the value of the parameter.
     * Therefor, the this-keyword is used.
     *
     * @param name The name of the server under creation.
     * @see http://www.leepoint.net/JavaBasics/oop/oop-45-constructor-overloading.html
     * @see http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html
     */
    public Server(String name) {
        //Give the server the name given from the instantiation.
        this.name = name;

        //Give this server a default port, since it was not specified.
        portNumber = 8284;
    }

    /**
     * An overloaded constructor of this class, taking two parameters.
     * It assigns the class-variables &quot;name&quot; and &quot;portNumber&quot;
     * with each respective parameter.
     * Therefor, the this-keyword is used.
     *
     * @param name The name of the server under creation.
     * @param portNumber The port number used to recieve TCP-data trough.
     */
    public Server(String name, int portNumber)  {
        //Give the server the name given from the instantiation.
        this.name = name;

        //Give the server the port number given from the instantiation.
        this.portNumber = portNumber;
    }

    /**
     * The server needs a ServerSocket-object to accept incoming Socket-connections.
     *
     * @see http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html
     */
    private ServerSocket serverSocket;

    /**
     * A void-method to start listening for incoming Socket-connections.
     */
    public void start() {
        /*
         * Try to establish the ServerSocket-object on the port.
         * An eventual I/O exception is handled if that occurs.
         */
        try {
            //Establish the ServerSocket-object and pass the portnumber as a parameter.
            serverSocket = new ServerSocket(portNumber);

            //Print a message that the ServerSocket-object has been bound to the port.
            printLine(&quot;Server socket bound to port &quot; + portNumber + &quot;.&quot;);
        } catch (IOException IOException)  {
            //Print a message to the terminal that an I/O exception was caught.
            printLine(&quot;I/O exception caught when binding the server socket to port &quot; + portNumber + &quot;!&quot;);
        }
    }

    /**
     * A void-method to stop listening for incoming TCP-connections
     */
    public void stop()  {
        running = false;
    }
}
[/code]

And here is just a sample class that will be using [b]Server.class[/b]:
[code]
/**
 * This is the class that used Server.class to create the server.
 *
 * @author Ole Kristian MÃ¸ller-Hansen
 * @version 1.0
 * @since 16.07.2014
 */
public class ClassToStartServerFrom   {
    public static void main(String[] args) {
        /*
         * Instantiates the Server-object and naming the server &quot;Cool&quot;.
         * How cool wouldn&#39;t that be?
         */
        server = new Server(&quot;Cool&quot;);

        //Tell the user that the server is going to start.
        System.out.println(&quot;Starting server...&quot;);

        //Starts the server.
        server.start();

        //Makes the server listen for incoming TCP-connections.
        server.listen();

        //Starts the cycle updating.
        server.runCycle();
    }

    /**
     * Creates a singleton-object of the Server-class.
     */
    private static Server server = null;
}
[/code]

Now, please tell me what you think of my work, wether it&#39;s good, wether it&#39;s bad, if it contain&#39;s fatal errors or if some of the comments are simply giving straight out missleading information.
I am aware that it&#39;s method for cycle updating is empty and that it&#39;s not doing anything with the connection like passing it to a [b]PlayerHandler.class[/b] to give it a player ID and so,
but that will be done trough the class with the main-method.

Thanks for you&#39;r time! :)</description>
    
    <lastBuildDate>Fri, 18 Jul 2014 00:52:21 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <blockquote>op make sure you're using an ide you will not get anywhere without one trust me on this</blockquote>
<p>I am using IntelliJ IDEA <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
<a href="http://www.jetbrains.com/idea/" class="onebox" target="_blank" rel="nofollow noopener">http://www.jetbrains.com/idea/</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/13</link>
        <pubDate>Fri, 18 Jul 2014 00:52:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-13</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>op make sure youâre using an ide you will not get anywhere without one trust me on this</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/12</link>
        <pubDate>Thu, 17 Jul 2014 19:26:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-12</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="545023">
<div class="title">
<div class="quote-controls"></div>
 Ole Kristian:</div>
<blockquote>
<p>[quote]I can assure you that you donât need to comment on import statements.</p>
</blockquote>
</aside>
<p>OK, thanks! Correction:</p>
<p>[code]<br>
import java.io.IOException;</p>
<p>import java.net.ServerSocket;<br>
import java.net.Socket;</p>
<p>/**</p>
<ul>
<li>This class will establish a 317 RSPS-server.</li>
<li>It implements the Runnable-interface to handle multiple</li>
<li>tasks simutaneously.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Ole Kristian MÃ¸ller-Hansen</li>
<li>
<a class="mention" href="/u/version">@version</a> 1.0</li>
<li>
<span class="mention">@since</span> 16.07.2014</li>
<li>
<span class="mention">@see</span> <a href="http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html" rel="nofollow noopener">http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html</a><br>
*/<br>
public class Server implements Runnable {<br>
[/code][/quote]Donât need a space between them either.</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/11</link>
        <pubDate>Thu, 17 Jul 2014 14:48:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-11</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <blockquote>I can assure you that you don't need to comment on import statements.</blockquote>
<p>OK, thanks! Correction:</p>
<pre><code class="lang-auto">import java.io.IOException;

import java.net.ServerSocket;
import java.net.Socket;

/**
 * This class will establish a 317 RSPS-server.
 * It implements the Runnable-interface to handle multiple
 * tasks simutaneously.
 *
 * @author Ole Kristian MÃ¸ller-Hansen
 * @version 1.0
 * @since 16.07.2014
 * @see http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html
 */
public class Server implements Runnable {</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/10</link>
        <pubDate>Thu, 17 Jul 2014 14:35:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-10</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Nice</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/9</link>
        <pubDate>Thu, 17 Jul 2014 08:23:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-9</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>[quote=âPure_, post:2, topic:545023â]A basic model (some of it may be messy, made up on the spot at 3AM).</p>
<p>[code=java]abstract class AbstractEngine {</p>
<p>protected String name;<br>
protected int port;<br>
protected boolean running;<br>
private ConnectionAcceptor acceptor;</p>
<p>public AbstractEngine(String name, int port) {<br>
this.name = name;<br>
this.port = port;<br>
acceptor = new ConnectionAcceptor();<br>
}</p>
<p>abstract void Init(); // use to load resources, item data etc.</p>
<p>abstract void Cycle(); // perform game tick per player, plugin processing, task processing etc etc.</p>
<p>public void Start() {<br>
acceptor.bind(port);<br>
acceptor.start(); // on new thread ofc or use your cycle function to call something like, acceptor.tryhandle<br>
running = true;<br>
Run();<br>
}</p>
<p>public void Stop() {<br>
acceptor.stop();<br>
running = false;<br>
}</p>
<p>public void Run() {<br>
while (running) {<br>
Cycle();<br>
Sleep();<br>
}<br>
}</p>
<p>public void Sleep() {<br>
// TODO impl<br>
}</p>
<p>}[/code]</p>
<p>My own preferred model varies a little from this though, ie I use a ServerProperties structure to load and store server info in (name, port, node-id, pass-salt [probably a bad idea] etc. etc.).[/quote]<br>
Terrible.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/8</link>
        <pubDate>Thu, 17 Jul 2014 07:55:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-8</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">/**
 * Import "IOException" from the java.io-package
 * to handle I/O exceptions when using the TCP-protocol.
 */
import java.io.IOException;

/**
 * Import both "ServerSocket" and "Socket" from the java.net-package
 * to establish TCP-connections between the server and connecting clients.
 */
import java.net.ServerSocket;
import java.net.Socket;</code></pre>
<p>I can assure you that you donât need to comment on import statements.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/7</link>
        <pubDate>Thu, 17 Jul 2014 07:08:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-7</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>pure basically tackled everything I was going to say. honestly Iâm impressed, Iâve been in the scene since 2008 and I didnât even learn how winterlove worked until 2011-2012ish lol I guess cause I was like 13 at the time</p>
<p>good job <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/6</link>
        <pubDate>Thu, 17 Jul 2014 06:13:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-6</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <blockquote>Runnable should be fine as long as you really want it on a separate thread.</blockquote>
Good to know. I first tried to compile the class, but it would not let me untill I wrote the run-method.
<blockquote>Good luck with your next project and try to move to better sources once you understand the basics to learn good habits.</blockquote>
Thank you very much. I understand that the server is simply communicating with the clients, but I need a clear overview to get the "AHA!",
and to get that view, I find it helpfull to write parts of the code myself to get some knowledge on other ways it could have been done instead
of just reading tons of tutorials. I am a slow learner. But I AM moving forward.
<p>I got the base <span class="bbcode-b">RuneSource</span> recommended. I think I will be moving to that next.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/5</link>
        <pubDate>Thu, 17 Jul 2014 03:08:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-5</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>[quote=âOle Kristian, post:3, topic:545023â]Many thanks for youâr reply, Pure_.</p>
<p>I thought I had to implement the Runnable interface to create the Thread-objects and the abstract run-methods. <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"><br>
(Would I in this case, be better of to NOT implement Runnable, but instead extend Thread.class)?<br>
I am a perfectionist, therefor I try to add comments to every variable/method in a class to ensure that everything is clear.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
<p>I have put little effort in the sample class youâd name <span class="bbcode-b">AppMain</span>, however, good habits are sure important to practice and to maintain.[/quote]My bad, Iâve worked on C# too long. Runnable should be fine as long as you really want it on a separate thread. Good luck with your next project and try to move to better sources once you understand the basics to learn good habits.</p>
<p>All the best.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/4</link>
        <pubDate>Thu, 17 Jul 2014 02:53:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-4</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <p>Many thanks for youâr reply, Pure_.</p>
<p>I thought I had to implement the Runnable interface to create the Thread-objects and the abstract run-methods. <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"><br>
(Would I in this case, be better of to NOT implement Runnable, but instead extend Thread.class)?<br>
I am a perfectionist, therefor I try to add comments to every variable/method in a class to ensure that everything is clear.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
<p>I have put little effort in the sample class youâd name <span class="bbcode-b">AppMain</span>, however, good habits are sure important to practice and to maintain.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/3</link>
        <pubDate>Thu, 17 Jul 2014 02:42:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-3</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>[ul][li]In your comments donât name classes by file name (ie someClass.java) use their class name (ie {<a class="mention" href="/u/link">@link</a> SomeClass}).[/li]<br>
[li]I would name your main-method housing class just AppMain or something, it seems very tedious at the moment.[/li]<br>
[li]If the runnable interface isnât used, then donât implement it. Pretty sure all it does it provide the Run function and note that the given class is probably going to be run on a separate thread (iirc). - Make sure to just stick to one thread for easy concurrency.[/li]<br>
[li]Also try to not comment every single thing (I over-comment sometimes too).[/li]<br>
[li]I would abstractize your server class and put your connection acceptor into another class.[/li][/ul]</p>
<p>A basic model (some of it may be messy, made up on the spot at 3AM).</p>
<p>[code=java]abstract class AbstractEngine {</p>
<p>protected String name;<br>
protected int port;<br>
protected boolean running;<br>
private ConnectionAcceptor acceptor;</p>
<p>public AbstractEngine(String name, int port) {<br>
this.name = name;<br>
this.port = port;<br>
acceptor = new ConnectionAcceptor();<br>
}</p>
<p>abstract void Init(); // use to load resources, item data etc.</p>
<p>abstract void Cycle(); // perform game tick per player, plugin processing, task processing etc etc.</p>
<p>public void Start() {<br>
acceptor.bind(port);<br>
acceptor.start(); // on new thread ofc or use your cycle function to call something like, acceptor.tryhandle<br>
running = true;<br>
Run();<br>
}</p>
<p>public void Stop() {<br>
acceptor.stop();<br>
running = false;<br>
}</p>
<p>public void Run() {<br>
while (running) {<br>
Cycle();<br>
Sleep();<br>
}<br>
}</p>
<p>public void Sleep() {<br>
// TODO impl<br>
}</p>
<p>}[/code]</p>
<p>My own preferred model varies a little from this though, ie I use a ServerProperties structure to load and store server info in (name, port, node-id, pass-salt [probably a bad idea] etc. etc.).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/2</link>
        <pubDate>Thu, 17 Jul 2014 02:24:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-2</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
      <item>
        <title>Separated main class and typical server methods</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <p>Hello ladies and gentlemen!  <img src="https://forum.moparisthebest.com/images/emoji/twitter/cool.png?v=5" title=":cool:" class="emoji" alt=":cool:"></p>
<p>After learning a bit of 317 winterLove and experimenting with it, tidying it and adding comments to make it:</p>
<ul>
<li>More readable.</li>
<li>Better according to Javadoc.</li>
</ul>
<p>â¦I felt like I wanted to make the server more kind of object oriented instead of having few classes stuffed with codeblocks screaming to be organized.<br>
I have tried this a few times, but due to lack of Java-knowledge, many of my Fail.java-files have been moved to the recycle bin. <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"><br>
Today/this evening/this night I finally ended up with an attempt where I feel I can briefly see a light from the other side of the tunnel.</p>
<p>What I have done is to make a Server-class where I intend to store server related methods made more smooth than in a standard winterLove base<br>
and leting another class manage it so I can create any class, create an object (preferably a singleton) and use quick calls to start the server,<br>
open it for network connections, start itâs cycle updating, stop the server, etcâ¦</p>
<p>Here is a copy of the file:</p>
<pre><code class="lang-auto">/**
 * Import "IOException" from the java.io-package
 * to handle I/O exceptions when using the TCP-protocol.
 */
import java.io.IOException;

/**
 * Import both "ServerSocket" and "Socket" from the java.net-package
 * to establish TCP-connections between the server and connecting clients.
 */
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This class will establish a 317 RSPS-server.
 * It implements the Runnable-interface to handle multiple
 * tasks simutaneously.
 *
 * @author Ole Kristian MÃ¸ller-Hansen
 * @version 1.0
 * @since 16.07.2014
 * @see http://docs.oracle.com/javase/6/docs/api/java/lang/Runnable.html
 */
public class Server implements Runnable {
    /**
     * A Socket-object that will simulate the connecting socket to the ServerSocket.
     */
    private Socket clientSocket;

    /**
     * A Thread-object intended to make cycle updating possible while doing other tasks.
     */
    private Thread cycleThread;

    /**
     * A void-method using the ServerSocket-object to listen for incoming Socket-connections.
     */
    public void listen() {
        //The "listenThread"-thread will be a new thread and called "listeningThread".
        listenThread = new Thread("listeningThread") {

            /**
             * Create an anonymous void-method, so that the "listeningThread"-thread
             * will have it's task inside the listen-method instead of the class' run-method.
             * This makes it possible to use seperate run-methods for each thread.
             *
             * @see http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html
             */
            public void run() {
                //The server will now be running.
                running = true;

                /*
                 * While the server should be running, run this loop.
                 * Since this is not a "while (true)"-loop,
                 * it's possible to end the loop in other ways than
                 * ending the process or using a break-statement.
                 */
                while (running == true) {
                    /*
                     * Try to wait for an incoming Socket-connection
                     * and accept it.
                     * An eventual I/O exception is handled if that occurs.
                     */
                    try {
                        /*
                         * Accept this client connection using the ServerSocket-object.
                         * This thread won't pass this command before a connection is made.
                         */
                        clientSocket = serverSocket.accept();

                        /*
            		     * setTcpNoDelay is set to true, so that Nagle's algorith does not kick in
            			 * and halt the packets sent to the client until they are full.
    	        		 */
                        clientSocket.setTcpNoDelay(true);
                    } catch (IOException IOException) {
                        //Print a message to the terminal that an I/O exception was caught.
                        printLine("I/O exception caught when waiting for a connection!");
                    }
                }
            }
        };

        //Now that the thread "listeningThread" has been created, start it.
        listenThread.start();
    }

    /**
     * A Thread-object intended to make listening for incoming connections
     * possible while doing other tasks.
     */
    private Thread listenThread;

    /**
     * A String-variable containing the name of the server.
     */
    private String name;

    /**
     * An integer-variable containing the port that the server-application
     * gets it's data sent to.
     */
    private int portNumber;

    /**
	 * This method will print text to the command prompt/terminal
	 * labeled with the class' name.
	 */
    private void printLine(String text)	{
        //Print the class' name followed with the text.
        System.out.println("Server: " + text);
    }

    /**
     * This run-method HAS to be created since the class implements
     * the Runnable-interface. However, it will never be used,
     * as private, abstract run-methods are deligated to each
     * method that will use the effect of the interface.
     */
    @Override
    public void run()  {

    }

    /**
     * A void-method runing the update-cycle.
     */
    public void runCycle()  {
        //The "cycleThread"-thread will be a new thread and called "cycleThread".
        cycleThread = new Thread("cycleThread") {

            /**
             * Create an anonymous void-method, so that the "cycleThread"-thread
             * will have it's task inside the runCycle-method instead of the class' run-method.
             * This makes it possible to use seperate run-methods for each thread.
             *
             * @see http://docs.oracle.com/javase/tutorial/java/javaOO/anonymousclasses.html
             */
            public void run()   {

            }
        };

        //Now that the thread "cycleThread" has been created, start it.
        cycleThread.start();
    }

    /**
     * A handy boolean-variable to check if the server is running.
     * It's default value is going to be "false".
     */
    private boolean running = false;

    /**
     * The constructor of this class, taking no parameters.
     *
     * @see http://docs.oracle.com/javase/tutorial/java/javaOO/constructors.html
     */
    public Server() {
        //Give this server a default name, since it was not specified.
        name = "Nameless server";

        //Give this server a default port, since it was not specified.
        portNumber = 8284;
    }

    /**
     * An overloaded constructor of this class, taking one parameter.
     * It assigns the class-variable "name" the value of the parameter.
     * Therefor, the this-keyword is used.
     *
     * @param name The name of the server under creation.
     * @see http://www.leepoint.net/JavaBasics/oop/oop-45-constructor-overloading.html
     * @see http://docs.oracle.com/javase/tutorial/java/javaOO/thiskey.html
     */
    public Server(String name) {
        //Give the server the name given from the instantiation.
        this.name = name;

        //Give this server a default port, since it was not specified.
        portNumber = 8284;
    }

    /**
     * An overloaded constructor of this class, taking two parameters.
     * It assigns the class-variables "name" and "portNumber"
     * with each respective parameter.
     * Therefor, the this-keyword is used.
     *
     * @param name The name of the server under creation.
     * @param portNumber The port number used to recieve TCP-data trough.
     */
    public Server(String name, int portNumber)  {
        //Give the server the name given from the instantiation.
        this.name = name;

        //Give the server the port number given from the instantiation.
        this.portNumber = portNumber;
    }

    /**
     * The server needs a ServerSocket-object to accept incoming Socket-connections.
     *
     * @see http://docs.oracle.com/javase/7/docs/api/java/net/ServerSocket.html
     */
    private ServerSocket serverSocket;

    /**
     * A void-method to start listening for incoming Socket-connections.
     */
    public void start() {
        /*
         * Try to establish the ServerSocket-object on the port.
         * An eventual I/O exception is handled if that occurs.
         */
        try {
            //Establish the ServerSocket-object and pass the portnumber as a parameter.
            serverSocket = new ServerSocket(portNumber);

            //Print a message that the ServerSocket-object has been bound to the port.
            printLine("Server socket bound to port " + portNumber + ".");
        } catch (IOException IOException)  {
            //Print a message to the terminal that an I/O exception was caught.
            printLine("I/O exception caught when binding the server socket to port " + portNumber + "!");
        }
    }

    /**
     * A void-method to stop listening for incoming TCP-connections
     */
    public void stop()  {
        running = false;
    }
}</code></pre>
<p>And here is just a sample class that will be using <span class="bbcode-b">Server.class</span>:</p>
<pre><code class="lang-auto">/**
 * This is the class that used Server.class to create the server.
 *
 * @author Ole Kristian MÃ¸ller-Hansen
 * @version 1.0
 * @since 16.07.2014
 */
public class ClassToStartServerFrom   {
    public static void main(String[] args) {
        /*
         * Instantiates the Server-object and naming the server "Cool".
         * How cool wouldn't that be?
         */
        server = new Server("Cool");

        //Tell the user that the server is going to start.
        System.out.println("Starting server...");

        //Starts the server.
        server.start();

        //Makes the server listen for incoming TCP-connections.
        server.listen();

        //Starts the cycle updating.
        server.runCycle();
    }

    /**
     * Creates a singleton-object of the Server-class.
     */
    private static Server server = null;
}</code></pre>
<p>Now, please tell me what you think of my work, wether itâs good, wether itâs bad, if it containâs fatal errors or if some of the comments are simply giving straight out missleading information.<br>
I am aware that itâs method for cycle updating is empty and that itâs not doing anything with the connection like passing it to a <span class="bbcode-b">PlayerHandler.class</span> to give it a player ID and so,<br>
but that will be done trough the class with the main-method.</p>
<p>Thanks for youâr time! <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023/1</link>
        <pubDate>Thu, 17 Jul 2014 02:12:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545023-1</guid>
        <source url="https://forum.moparisthebest.com/t/separated-main-class-and-typical-server-methods/545023.rss">Separated main class and typical server methods</source>
      </item>
  </channel>
</rss>
