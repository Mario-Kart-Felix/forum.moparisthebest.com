<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>General explanation to common collection data structures</title>
    <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930</link>
    <description>[b]Intro:[/b]
Hello Moparscape! I&#39;ve made this topic to provide an explanation to certain data structures that are found in many languages and in the Java API. I plan to cover Arrays, ArrayLists, LinkedLists, and HashMaps and plan to discuss the pros and cons in terms of time complexity and memory usage to each type of collection structure along with example usage; but first, I wish to direct your attention to big O notation.

[b]What is &#39;Big O&#39;?[/b]
&#39;Big O&#39; notation is a common notation found in mathematics and computer science that describes a function in terms of a more simplistic one. For those who have any background in pre-calculus, think of limits. As you can imagine, this notation can be very handy for visualizing the behavior of potentially complex equations. 

A mathematical example of Big O: [tt]f(x) = x + 23[/tt] is of linear order (also know as [tt]O(x)[/tt]) because the equation is best fit by f(x) = x.
A computer science example of Big O: [tt]for(int i = 0; i &lt; x; ++i);[/tt] is of linear order (also know as [tt]O(n)[/tt]) because the program must iterate x times.

Big O in computer science refers to the amount of operations needed to be done to complete a task. Obviously, a lesser amount of operations generally yields a lesser amount of time spent - which is a good thing!

Below are common time complexities found in algorithms along with their nomenclature (order from lowest to highest time complexity):

[ul][li]O(1) - constant[/li]
[li]O(log(n)) - logarithmic[/li]
[li]O(n^1/c) - fractional power[/li]
[li]O(n) - linear[/li]
[li]O(n^c) - polynomial[/li]
[li]O(c^n) - exponential[/li]
[li]O(n!) - factorial[/li][/ul]

Note: n is the variable and c is a known constant.

Generally in computer science, one wishes to find and use the algorithm with the lowest time complexity, however as one can imagine, it isn&#39;t always possible. One thing to note is that exponential and factorial functions can be EXTREMELY slow - sometimes on the order of 20 minutes, to days, to years depending on how large c is.

Now that the concepts of efficiency are out of the way, we can now effectively discuss each collection structure...


[b]Arrays:[/b]
[code=java]
int[] array = new int[300];
[/code]
This is an array. The above example show an array of integers that is 300 in length. In memory, all 300 integers are allocated next to each other. Integers are 4 bytes in length, thus the above array is utilizing 4 * 300 = 1,200 (1.2kb) bytes of memory. Because of the structure, accessing and modifying elements in the array for a particular index is very trivial. The location in memory of any given index is always [tt]array_start_address + (4 * index)[/tt]. In Java, this is all done for you when you use [tt]array[idx][/tt]. As you could imagine, this makes arrays quite fast for read and write access. Please note, arrays are backed with SIGNED integer indices - this means arrays have a maximum length of 2^31 = 2,147,483,647 elements (Integer.MAX_VALUE). If you have data that is a predictable size and you need quick access to its elements, I would recommend this structure.


[b]ArrayLists:[/b]
[code=java]
ArrayList&lt;Integer&gt; arraylist = new ArrayList&lt;Integer&gt;();
[/code]
This is an array list. An array list is quite like an array; under the hood there is an array that is wrapped in a templated (also know as Type Erasure/Java generics) class that provides functionality as dictated by the Java API&#39;s Collection interface. The main difference between an array list and an array is the fact that an array list&#39;s size is controlled by the structure - this means that the array list will resize itself when it has been filled. Consequentially, this also means that that the structure will allocate more space than it might need, thus &#39;wasting&#39; resources. This is a good thing, though - especially if you have a set of data with a very variable size. In order to expand it self, the array list must copy all of the existing element to a new location in memory (which costs CPU time). Bear in mind, though - the extra features of an array list aren&#39;t free. I would use this in the same context of an array, except only when I cannot predict the size of the data.


[b]LinkedLists:[/b]
[code=java]
LinkedList&lt;Integer&gt; linkedlist = new LinkedList&lt;Integer&gt;();
[/code]
Linked lists are very different beasts from arrays. Essentially, they are a series of nodes that reference each other (typically forward) and encapsulate data for that specific location. A good visualization is a chain link:
[tt][HEAD] -&gt; [NODE 1] -&gt; [NODE 2] -&gt; ... [NODE n][/tt]. The nice thing about linked lists is the fact that operations (adding and removing) on the head or tail (depending on implementation) are VERY fast. This is very helpful for more tailored structures such as stacks and queues (which are in fact LinkedLists with specific behaviors). As hinted, I would recommend this structure if you need to quickly access the head or tail of a collection.

A note about stacks and queues… stacks and queues are a set of standard functionalities usually wrapping a linked list. Stacks are a LIFO (Last In First Out) structure in which data is normally accessed from the head by popping it. What this means is the most recent element of the list is removed and returned to the program. To imagine how a stack looks, think of a stack of dishes – you want to take the top dish off and the top dish is always the one you put on last. Queues are a very similar beast, but they are a  FIFO (First In First Out) structure. What this means is the element added first in the list is removed and returned to the program. To imagine this, think of a road toll – there is a line of cars lined up to the booth, each paying in the order that they arrived (assuming no one cuts in line – then you’d have a priority queue hehe).


[b]HashMaps:[/b]
[code=java]
HashMap&lt;String, Integer&gt; hashmap = new HashMap&lt;String, Integer&gt;();
[/code]
HashMaps are different than the aforementioned structures, but surprisingly similar. Unlike the other structures, hash maps are templated with two elements (key and value). To make it simple, basically imagine a situation where you&#39;d like to use an array to store your data, but your indices aren&#39;t integers; how about Strings! So imagine you want to make &quot;Dog&quot; correspond to the number 24 (key=String, value=Integer). What hashmap does for you is it produces a hash for the key (in this case &quot;Dog&quot;) that is an integer value. This now makes it possible for you to index the underlying array by things other than integers. I would suggest using this structure if you have two sets of data that correspond to each other and need to address them quickly.

One thing to take note is that the hashing function in hash map is not perfect; meaning that the same result can occur on different data. This is known as a collision. To remedy this problem, hash map utilizes chaining – which basically creates a linked list of the keys that map to multiple colliding values.  Because of this, lookups on keys that collide can reach O(n) time complexity. Most of the time one doesn’t have to worry about the aforementioned. Please note: just because hash map uses chaining, it doesn’t mean you can put multiple values within the hash table on the same key. 


[b]Side note[/b]: 
Generics must be Objects (primitives will not do). Luckily for Java programmers, containers such as Integers are automatically unboxed (as well as their primitives, in this case int, boxed) when needed. This means that the following is completely valid:
[code=java]
ArrayList&lt;Integer&gt; example1 = new ArrayList&lt;Integer&gt;();
int x = 1;
example1.add(x);

ArrayList&lt;Long&gt; example2 = new ArrayList&lt;Long&gt;();
long y = example2.get(0);
[/code]

Below is a table of time complexities for all structures covered:
[b]Time Complexities:[/b]
[img]http://i.imgur.com/nayxN.png[/img]


[b]Conclusion:[/b]
In all, I feel as if I&#39;ve bastardized and skipped over a lot of nitty-gritty content for a few of the structure (in particular hashmap). If you have any questions (even if it&#39;s advice for what to use in a certain scenario) or wish to bring up a point OR even make correction feel free. I hope you&#39;ve learned something.</description>
    
    <lastBuildDate>Sun, 19 Aug 2012 14:19:44 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:26, topic:444930”]Without reading my OP again; yes, your first point is valid, but I never stated that was the only use of big O.</p>
<p>Oh, darn - i feared someone would bring up big theta/omega, haha![/quote]<br>
It was a good read, just wanted to clarify some additional things about Big O <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> namely that…</p>
<p>[1] When using Big O notation, people should specify whether they are describing the time or space complexity of an algorithm.<br>
[2] For a small value of n: just because an algorithm is classified in a better Big O category doesn’t necessarily mean that it outperforms an algorithm classified in a worse Big O category.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/27">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/27</link>
        <pubDate>Sun, 19 Aug 2012 14:19:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-27</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Vrunk, post:25, topic:444930”]It is also worth noting the following about Big O notation:</p>
<p>[ul][li]It is not used solely to describe processing time, it can also be used to describe space requirements.[/li]<br>
[li]It is used to specify an asymptotic <span class="bbcode-i">upper bound</span> on the <span class="bbcode-i">growth rate</span> of a function. It does not provide a lower bound (Big Omega) or both an upper and lower bound (Big Theta). An algorithm that is classified as O(n^2) can potentially outperform an algorithm that is O(n) for a sufficiently small value of n (once again, Big O provides an upper bound).[/li][/ul][/quote]<br>
Without reading my OP again; yes, your first point is valid, but I never stated that was the only use of big O.</p>
<p>Oh, darn - i feared someone would bring up big theta/omega, haha!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/26">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/26</link>
        <pubDate>Sun, 19 Aug 2012 00:23:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-26</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Vrunk Vrunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vrunk">@Vrunk</a> wrote:</p>
          <blockquote>
              <p>It is also worth noting the following about Big O notation:</p>
<p>[ul][li]It is not used solely to describe processing time, it can also be used to describe space requirements.[/li]<br>
[li]It is used to specify an asymptotic <span class="bbcode-i">upper bound</span> on the <span class="bbcode-i">growth rate</span> of a function. It does not provide a lower bound (Big Omega) or both an upper and lower bound (Big Theta). An algorithm that is classified as O(n^2) can potentially outperform an algorithm that is O(n) for a sufficiently small value of n (once again, Big O provides an upper bound).[/li][/ul]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/25">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/25</link>
        <pubDate>Sat, 18 Aug 2012 23:22:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-25</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Ok, you’ve beaten me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/24">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/24</link>
        <pubDate>Sat, 18 Aug 2012 21:32:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-24</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>[quote=“Native^, post:22, topic:444930”][quote author=veer link=topic=547606.msg4076506#msg4076506 date=1344892496]<br>
Actually, Stack is more like <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html" data-bbcode="true" rel="nofollow noopener">ArrayDeque</a>.<br>
[/quote]<br>
Not really. ArrayDeque is double-ended, while Stack is single-ended. It’s not really a LinkedList either though, but they both have the same funcionality.[/quote]</p>
<p>Please don’t respond to my posts in the future unless you’re sure you know what you’re talking about.</p>
<p><code>ArrayDeque</code> is implemented around an array, just like how <code>Stack</code> subclasses <code>Vector</code> (which is implemented around an array, too). By the way, <code>Stack</code> is thus not single-ended anyways, since it supports random access.<br>
<code>LinkedList</code> on the other hand is well a <em>doubly-linked list</em>. I hope you recognize that <code>LinkedList</code> is double-ended, <span class="bbcode-i">too</span> – notice it implements <code>Deque</code>. Now, you’re telling me that a <code>LinkedList</code> is more analogous to a <code>Stack</code>? To put it frankly, you’re wrong. Both can support LIFO operations, but <code>ArrayDeque</code> is much more similar to <code>Stack</code>. Take a look at the <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Stack.html" data-bbcode="true" rel="nofollow noopener">API specification for <code>Stack</code></a>:</p>
<blockquote>A more complete and consistent set of LIFO stack operations is provided by the `Deque` interface and its implementations, which should be used in preference to this class. For example:
<p><code>Deque&lt;Integer&gt; stack = new ArrayDeque&lt;Integer&gt;();</code></p>
</blockquote>
<p>PS if you want something with <span class="bbcode-b">strictly</span> LIFO access, you can use <a href="http://docs.oracle.com/javase/7/docs/api/java/util/Collections.html#asLifoQueue(java.util.Deque)" data-bbcode="true" rel="nofollow noopener"><code>Collections.asLifoQueue</code></a>.</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/23</link>
        <pubDate>Sat, 18 Aug 2012 19:07:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-23</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="21" data-topic="444930">
<div class="title">
<div class="quote-controls"></div>
 veer:</div>
<blockquote>
<p>Actually, Stack is more like <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html" data-bbcode="true" rel="nofollow noopener">ArrayDeque</a>.</p>
</blockquote>
</aside>
<p>Not really. ArrayDeque is double-ended, while Stack is single-ended. It’s not really a LinkedList either though, but they both have the same funcionality.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/22</link>
        <pubDate>Mon, 13 Aug 2012 22:35:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-22</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Actually, Stack is more like <a href="http://docs.oracle.com/javase/7/docs/api/java/util/ArrayDeque.html" data-bbcode="true" rel="nofollow noopener">ArrayDeque</a>.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/21</link>
        <pubDate>Mon, 13 Aug 2012 21:14:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-21</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:19, topic:444930”][quote author=Native^ link=topic=547606.msg4076339#msg4076339 date=1344881041]<br>
Good read, thanks for the contribution.<br>
Just something to everyone. The classes Stack, Hashtable, and Vector work the same as LinkedList, HashMap and ArrayList, but are legacy classes and should be avoided.<br>
[/quote]<br>
Stack is a know set of behaviors, whereas linked list isn’t. Vector is a thread-safe equivalent of ArrayList; same goes for HashTable.[/quote]<br>
Therefore they should be avoided. Because of all those thread safe methods they are relatively slower than their equivalents. If you want a thread safe method for one of the improved classes you can easily add that yourself.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/20</link>
        <pubDate>Mon, 13 Aug 2012 20:32:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-20</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Native^, post:18, topic:444930”]Good read, thanks for the contribution.<br>
Just something to everyone. The classes Stack, Hashtable, and Vector work the same as LinkedList, HashMap and ArrayList, but are legacy classes and should be avoided.[/quote]<br>
Stack is a know set of behaviors, whereas linked list isn’t. Vector is a thread-safe equivalent of ArrayList; same goes for HashTable.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/19</link>
        <pubDate>Mon, 13 Aug 2012 20:05:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-19</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Good read, thanks for the contribution.<br>
Just something to everyone. The classes Stack, Hashtable, and Vector work the same as LinkedList, HashMap and ArrayList, but are legacy classes and should be avoided.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/18</link>
        <pubDate>Mon, 13 Aug 2012 18:04:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-18</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-s">Only the smartest would understand a bit of that.</span></p>
<p>Ok, I lied, this is actually understandable for me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/17</link>
        <pubDate>Mon, 13 Aug 2012 03:43:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-17</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:14, topic:444930”][quote author=t4 link=topic=547606.msg4015762#msg4015762 date=1339618699]</p>
<p>[quote author=Davidi2 link=topic=547606.msg4015652#msg4015652 date=1339609352]</p>
<aside class="quote">
<blockquote>
<p>What exactly is a signed integer…<br>
What’s the difference.<br>
[/quote]Signed integers have one byte that indicates whether the number is positive or negative, unsigned doesn’t and always assumes positive. Basically this means the unsigned byte can have one extra byte for the actual number, which is why you have approximately twice as large a (positive) number range, without any negatives.</p>
</blockquote>
</aside>
<p>slightly incorrect, signed integers are stored using the diminished radix (aka two’s compliment) - it isn’t as simple as tacking on an extra bit for sign - else there would be -0 and +0.<br>
[/quote]Bit*'s in my post btw, didn’t notice that.</p>
<p>But no, no matter how you look at it, the first (reading left to right) bit indicates the sign in a signed integer. It’s not ‘tacking’ anything on, not sure where you read that.[/quote]<br>
as stated on irc, i wanted to make sure people didn’t mistake this for:<br>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Signed_number_representations" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <img src="//upload.wikimedia.org/wikipedia/commons/thumb/d/d2/Internet_map_1024.jpg/28px-Internet_map_1024.jpg" class="thumbnail onebox-full-image" width="28" height="28">

<h3><a href="https://en.wikipedia.org/wiki/Signed_number_representations" target="_blank" rel="nofollow noopener">Signed number representations</a></h3>

<p>In computing, signed number representations are required to encode negative numbers in binary number systems. In mathematics, negative numbers in any base are represented by prefixing them with a minus ("−") sign. However, in computer hardware, numbers are represented only as sequences of bits, without extra symbols. The four best-known methods of extending the binary numeral system to represent signed numbers are: sign-and-magnitude, ones' complement, two's complement, and offset binary. Some of...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/16</link>
        <pubDate>Wed, 13 Jun 2012 21:29:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-16</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <p>This is actually a good read. I haven’t really touched anything programming-wise in about a year or more, however this tutorial was well-worded and very understandable.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/15</link>
        <pubDate>Wed, 13 Jun 2012 20:57:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-15</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:13, topic:444930”][quote author=Davidi2 link=topic=547606.msg4015652#msg4015652 date=1339609352]</p>
<aside class="quote">
<blockquote>
<p>What exactly is a signed integer…<br>
What’s the difference.<br>
[/quote]Signed integers have one byte that indicates whether the number is positive or negative, unsigned doesn’t and always assumes positive. Basically this means the unsigned byte can have one extra byte for the actual number, which is why you have approximately twice as large a (positive) number range, without any negatives.</p>
</blockquote>
</aside>
<p>slightly incorrect, signed integers are stored using the diminished radix (aka two’s compliment) - it isn’t as simple as tacking on an extra bit for sign - else there would be -0 and +0.[/quote]Bit*'s in my post btw, didn’t notice that.</p>
<p>But no, no matter how you look at it, the first (reading left to right) bit indicates the sign in a signed integer. It’s not ‘tacking’ anything on, not sure where you read that.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/14</link>
        <pubDate>Wed, 13 Jun 2012 20:27:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-14</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:10, topic:444930”][quote author=ravekitty link=topic=547606.msg4015648#msg4015648 date=1339608752]<br>
What exactly is a signed integer…<br>
What’s the difference.<br>
[/quote]Signed integers have one byte that indicates whether the number is positive or negative, unsigned doesn’t and always assumes positive. Basically this means the unsigned byte can have one extra byte for the actual number, which is why you have approximately twice as large a (positive) number range, without any negatives.[/quote]<br>
slightly incorrect, signed integers are stored using the diminished radix (aka two’s compliment) - it isn’t as simple as tacking on an extra bit for sign - else there would be -0 and +0.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/13</link>
        <pubDate>Wed, 13 Jun 2012 20:18:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-13</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>It all makes sense now! thanks for this!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/12</link>
        <pubDate>Wed, 13 Jun 2012 19:08:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-12</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>‘big O’ went a little over my head, but thank you so much for the explanation of all those data structures.</p>
<p>Edit:</p>
<p>And if you could explain a CopyOnWriteArrayList is, and the difference between it and a regular arraylist, that would be sweet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/11</link>
        <pubDate>Wed, 13 Jun 2012 18:39:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-11</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“ravekitty, post:9, topic:444930”]What exactly is a signed integer…<br>
What’s the difference.[/quote]Signed integers have one bit* that indicates whether the number is positive or negative, unsigned doesn’t and always assumes positive. Basically this means the unsigned byte can have one extra bit* for the actual number, which is why you have approximately twice as large a (positive) number range, without any negatives.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/10</link>
        <pubDate>Wed, 13 Jun 2012 17:42:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-10</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@ravekitty ravekitty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ravekitty">@ravekitty</a> wrote:</p>
          <blockquote>
              <p>What exactly is a signed integer…<br>
What’s the difference.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/9</link>
        <pubDate>Wed, 13 Jun 2012 17:32:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-9</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>Added more infos via mobile <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/8</link>
        <pubDate>Wed, 13 Jun 2012 13:46:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-8</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:6, topic:444930”][quote author=s1gma link=topic=547606.msg4015202#msg4015202 date=1339556232]<br>
you may want to mention that hash tables are vulnerable to collisions and the key insertion time can become linear in respect to number of collisions (java’s HashMap uses separate chaining for collision resolution)</p>
<p>edit: explain queues and stacks too pls<br>
[/quote]<br>
sure, i suppose i can add that when i return. i was thinking of adding the collision aspect, but my excuse was that the algorithm used in hashmap is pretty decent for most cases.</p>
<aside class="quote">
<blockquote>
<p>Thanks, hopefully this will help a lot of programmers.</p>
<p>EDIT: Good read, but 80% of people who read this won’t have a clue about anything.</p>
</blockquote>
</aside>
<p>how so? i think i’ve done a pretty good job relaying the information in a basic manner[/quote]</p>
<p>You sure did. c:</p>
<p>But I can guess what most people would think after reading this article:</p>
<blockquote>ok so where do i add this code
ok so what does this nice code do
wtf 100 errors plz help and tv me k</blockquote>
You get my point.
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/7</link>
        <pubDate>Wed, 13 Jun 2012 12:40:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-7</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“s1gma, post:2, topic:444930”]you may want to mention that hash tables are vulnerable to collisions and the key insertion time can become linear in respect to number of collisions (java’s HashMap uses separate chaining for collision resolution)</p>
<p>edit: explain queues and stacks too pls[/quote]<br>
sure, i suppose i can add that when i return. i was thinking of adding the collision aspect, but my excuse was that the algorithm used in hashmap is pretty decent for most cases.</p>
<p>[quote=“Whackatre, post:5, topic:444930”]Thanks, hopefully this will help a lot of programmers.</p>
<p>EDIT: Good read, but 80% of people who read this won’t have a clue about anything.[/quote]<br>
how so? i think i’ve done a pretty good job relaying the information in a basic manner</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/6</link>
        <pubDate>Wed, 13 Jun 2012 12:27:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-6</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Thanks, hopefully this will help a lot of programmers.</p>
<p>EDIT: Good read, but 80% of people who read this won’t have a clue about anything.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/5</link>
        <pubDate>Wed, 13 Jun 2012 09:23:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-5</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <p>This helped a lot, I’m more or less new a noob to anything other than website development languages, and this gave me a general understanding, thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/4</link>
        <pubDate>Wed, 13 Jun 2012 09:04:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-4</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
      <item>
        <title>General explanation to common collection data structures</title>
        <dc:creator><![CDATA[@doom_j doom_j]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/doom_j">@doom_j</a> wrote:</p>
          <blockquote>
              <p>Great read so far, what S1gma suggested would also be a lovely add on. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930/3</link>
        <pubDate>Wed, 13 Jun 2012 03:32:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444930-3</guid>
        <source url="https://forum.moparisthebest.com/t/general-explanation-to-common-collection-data-structures/444930.rss">General explanation to common collection data structures</source>
      </item>
  </channel>
</rss>
