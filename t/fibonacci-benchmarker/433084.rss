<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fibonacci Benchmarker</title>
    <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084</link>
    <description>[b]What:[/b]
The benchmarks the time needed to evaluate the Fibonacci sequence over a series of implementations. 

[b]Source:[/b]
[code=java]
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * Fibonacci Benchmarker
 * @author t4
 */
public class Fib {
	
	/** The positive golden ratio constant */
	static final BigDecimal postive_golden_ratio = new BigDecimal(1.61803399F);

	/** The negative golden ratio constant */
	static final BigDecimal negative_golden_ratio = new BigDecimal(0.618033989F);

	/** The constant of 1/sqrt(5) */
	static final BigDecimal one_sqrt_fifth = new BigDecimal(0.447213595F);
	
	/** The constant 1/2 */
	static final BigDecimal one_half = new BigDecimal(0.5F);
	
	/** Constants */
	static final BigInteger ZERO = new BigInteger(&quot;0&quot;), 
							ONE = new BigInteger(&quot;1&quot;);
	
	/**
	 * Standard recursive implementation of fibonacci sequence
	 * @param n
	 * @return
	 */
	private static BigInteger fib_recursive(int n) {
		if(n == 0)
			return ZERO;
		if(n == 1)
			return ONE;
		return fib_recursive(n - 1).add(fib_recursive(n - 2));		
	}
	
	/**
	 * Recursive implementation of fibonacci sequence w/ memoization
	 * @param n
	 * @param table
	 * @return
	 */
	private static BigInteger fib_recursive_memo(int n, BigInteger[] table) {
		if(table == null) {
			table = new BigInteger[n + 1];
			table[0] = ZERO;
			table[1] = ONE;
		}
		if(table[n] != null)
			return table[n];		
		return fib_recursive_memo(n - 1, table).add(fib_recursive_memo(n - 2, table));	
	}
	
	/**
	 * Standard closed-form implementation of fibonacci sequence
	 * @param n
	 * @return
	 */
	private static BigInteger fib_closed_form(int n) {
       		return one_sqrt_fifth.multiply(postive_golden_ratio.pow(n).subtract(negative_golden_ratio.pow(n))).toBigInteger();
	}
	
	/**
	 * Closed-form implementation of fibonacci sequence w/ rounding
	 * @param n
	 * @return
	 */
	private static BigInteger fib_closed_form_est(int n) {
		return (one_sqrt_fifth.multiply(postive_golden_ratio.pow(n)).add(one_half)).toBigInteger();
	}

	/**
	 * Entry point
	 * @param args
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @throws IllegalArgumentException 
	 */
	public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		final int n = 32;
        Method[] methods = Fib.class.getDeclaredMethods();
    	System.out.println(&quot;Method Name\t\t\tResult\t\tTime Taken&quot;);
    	for(int i = 0; i &lt; methods.length; ++i) {
        	if(methods[i].getName().equals(&quot;main&quot;))
        		continue;        	
        	long start = 0L, end = 0L;
        	
        	Object[] margs;
        	if(methods[i].getName().equals(&quot;fib_recursive_memo&quot;))
            	margs = new Object[]{ n, null };
        	else
        		margs = new Object[]{ n };
        	
        	start = System.nanoTime();
        	BigInteger answer = (BigInteger) methods[i].invoke(methods[i], margs);
        	end = System.nanoTime();
        	
        	System.out.println(methods[i].getName() + &quot;(&quot; + n + &quot;)\t\t&quot; + answer + &quot;\t\t&quot; + (end - start) + &quot;ns&quot;);
        }
	}

}
[/code]
No idea why the formatting got mucked up on these forums.

[b]Results:[/b]
[tt]
Method Name					Result		Time Taken
fib_recursive(32)		   2178309		196957890ns
fib_recursive_memo(32)	 2178309		121258715ns
fib_closed_form(32)		 2178309		1078813ns
fib_closed_form_est(32)	2178310		1853781ns
[/tt]</description>
    
    <lastBuildDate>Thu, 16 Feb 2012 16:56:13 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>It may be more own inadequacy, but I have noticed that the time complexity when benchmarking different algorithms in Java is not predictable. I’ve benchmarked miniature methods before, and they were about the same speed. However, one was marked faster than the other based on which order they were invoked. Your best bet for a somewhat believable benchmark is to ensure all methods invoked in that class and in subsequent classes are natively compiled before actually benchmarking.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/6</link>
        <pubDate>Thu, 16 Feb 2012 16:56:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-6</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="4" data-topic="433084">
<div class="title">
<div class="quote-controls"></div>
 Taharok:</div>
<blockquote>
<p>You have some logic flaws in your “benchmark.” First of all (I hope I don’t get bashed for this), Java is not a great language to benchmark in. It’s fine to benchmark applications over different languages against one written in Java, but a benchmark purely in Java is not nearly as reliable as one in a lower-level language. Why? There are always Java services running in the background of the VM, such as the garbage collector, that are actually doing things even in a simple application like this. Although that’s not nearly as important, you never seemed to consider the hotspot compiler.</p>
</blockquote>
</aside>
<p>I originally wrote this in C++.</p>
<aside class="quote quote-modified" data-post="4" data-topic="433084">
<div class="title">
<div class="quote-controls"></div>
 Taharok:</div>
<blockquote>
<p>veer brings up an excellent point regarding reflection. A significant portion your benchmark time could be wasted from generically invoking the methods. There’s really no reason not to spend an extra 5 minutes writing out the specific code for each method.</p>
</blockquote>
</aside>
<p>Valid point, i wanted more of a comparison (i’d imagine the added time complexity to be about the same across each method). I was lazy.</p>
<p>[quote=“Taharok, post:4, topic:433084”]And finally, you should consider adding this as a fifth method:</p>
<pre><code class="lang-auto">	private static BigInteger fibonacci(int n) {
		BigInteger nm1 = BigInteger.ONE;
		BigInteger nm2 = BigInteger.ZERO;
		if (n == 0)
			return nm2;
		BigInteger fib = nm1.add(nm2);
		for (int i = 2; i &lt; n; i++) {
			nm2 = nm1;
			nm1 = fib;
			fib = nm1.add(nm2);
		}
		return fib;
	}</code></pre>
<p>It’s simpler than using a table or recursion, and is much faster. Also, it’s worth noting that it’s much slower to load a field (static or dynamic) versus loading a local variable. I’d consider a more local approach to your algorithms, which should shave off a few nanoseconds. The only reason I consider that worth mentioning is because a benchmark should not be slowed down due to the nature of the language. Benchmarks should be consistent across multiple domains, when you aren’t specifically trying to benchmark the processing and management of the language itself.</p>
<p>Just some food for thought.[/quote]<br>
Didn’t think of that implementation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/5</link>
        <pubDate>Thu, 16 Feb 2012 14:54:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-5</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>You have some logic flaws in your “benchmark.” First of all (I hope I don’t get bashed for this), Java is not a great language to benchmark in. It’s fine to benchmark applications over different languages against one written in Java, but a benchmark purely in Java is not nearly as reliable as one in a lower-level language. Why? There are always Java services running in the background of the VM, such as the garbage collector, that are actually doing things even in a simple application like this. Although that’s not nearly as important, you never seemed to consider the hotspot compiler.</p>
<p>So basically, the hotspot compiler’s most basic condition is to compile a Java method to native code if it’s executed n number of times (I think the default value is around 1000). It will also compile a method if it is taking a long time to execute (which is several milliseconds, surely). As far as more complex behavior goes (such as nested calling like in a recursive situation), I’m not sure. Unless you are, I would consider an approach that ensures all the methods are compiled to native code before testing them against each other. Why would you want to benchmark in interpreted mode, anyway?</p>
<p>veer brings up an excellent point regarding reflection. A significant portion your benchmark time could be wasted from generically invoking the methods. There’s really no reason not to spend an extra 5 minutes writing out the specific code for each method.</p>
<p>And finally, you should consider adding this as a fifth method:</p>
<pre><code class="lang-auto">	private static BigInteger fibonacci(int n) {
		BigInteger nm1 = BigInteger.ONE;
		BigInteger nm2 = BigInteger.ZERO;
		if (n == 0)
			return nm2;
		BigInteger fib = nm1.add(nm2);
		for (int i = 2; i &lt; n; i++) {
			nm2 = nm1;
			nm1 = fib;
			fib = nm1.add(nm2);
		}
		return fib;
	}</code></pre>
<p>It’s simpler than using a table or recursion, and is much faster. Also, it’s worth noting that it’s much slower to load a field (static or dynamic) versus loading a local variable. I’d consider a more local approach to your algorithms, which should shave off a few nanoseconds. The only reason I consider that worth mentioning is because a benchmark should not be slowed down due to the nature of the language. Benchmarks should be consistent across multiple domains, when you aren’t specifically trying to benchmark the processing and management of the language itself.</p>
<p>Just some food for thought.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/4</link>
        <pubDate>Thu, 16 Feb 2012 14:15:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-4</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:2, topic:433084”]Using reflection to invoke the methods will make things unnecessarily slow by adding a level of indirection. I get that you were trying to make the code generic, however when you have things where your code is suddenly more-so coupled with the methods themselves like so:</p>
<p><code>                if(methods[i].getName().equals("fib_recursive_memo"))
                margs = new Object[]{ n, null };
                else
                        margs = new Object[]{ n };</code><br>
… then it becomes rather pointless. On a tangential point, why are you needing to pass the table? Usually whether or not an implementation of an algorithm uses memoization is a hidden detail… the table would be hidden from sight.[/quote]<br>
I figured as much as per the time added to the operations by using reflection, but the benchmarks still prove their relativity towards one another.</p>
<p>I am passing the table because I wasn’t thinking/wanting to make a field for it - no real reason.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/3</link>
        <pubDate>Thu, 16 Feb 2012 04:57:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-3</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Using reflection to invoke the methods will make things unnecessarily slow by adding a level of indirection. I get that you were trying to make the code generic, however when you have things where your code is suddenly more-so coupled with the methods themselves like so:</p>
<p><code>                if(methods[i].getName().equals("fib_recursive_memo"))
                margs = new Object[]{ n, null };
                else
                        margs = new Object[]{ n };</code><br>
… then it becomes rather pointless. On a tangential point, why are you needing to pass the table? Usually whether or not an implementation of an algorithm uses memoization is a hidden detail… the table would be hidden from sight.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/2</link>
        <pubDate>Thu, 16 Feb 2012 04:27:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-2</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
      <item>
        <title>Fibonacci Benchmarker</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">What:</span><br>
The benchmarks the time needed to evaluate the Fibonacci sequence over a series of implementations.</p>
<p><span class="bbcode-b">Source:</span></p>
<pre><code class="lang-auto">import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.math.BigDecimal;
import java.math.BigInteger;

/**
 * Fibonacci Benchmarker
 * @author t4
 */
public class Fib {
	
	/** The positive golden ratio constant */
	static final BigDecimal postive_golden_ratio = new BigDecimal(1.61803399F);

	/** The negative golden ratio constant */
	static final BigDecimal negative_golden_ratio = new BigDecimal(0.618033989F);

	/** The constant of 1/sqrt(5) */
	static final BigDecimal one_sqrt_fifth = new BigDecimal(0.447213595F);
	
	/** The constant 1/2 */
	static final BigDecimal one_half = new BigDecimal(0.5F);
	
	/** Constants */
	static final BigInteger ZERO = new BigInteger("0"), 
							ONE = new BigInteger("1");
	
	/**
	 * Standard recursive implementation of fibonacci sequence
	 * @param n
	 * @return
	 */
	private static BigInteger fib_recursive(int n) {
		if(n == 0)
			return ZERO;
		if(n == 1)
			return ONE;
		return fib_recursive(n - 1).add(fib_recursive(n - 2));		
	}
	
	/**
	 * Recursive implementation of fibonacci sequence w/ memoization
	 * @param n
	 * @param table
	 * @return
	 */
	private static BigInteger fib_recursive_memo(int n, BigInteger[] table) {
		if(table == null) {
			table = new BigInteger[n + 1];
			table[0] = ZERO;
			table[1] = ONE;
		}
		if(table[n] != null)
			return table[n];		
		return fib_recursive_memo(n - 1, table).add(fib_recursive_memo(n - 2, table));	
	}
	
	/**
	 * Standard closed-form implementation of fibonacci sequence
	 * @param n
	 * @return
	 */
	private static BigInteger fib_closed_form(int n) {
       		return one_sqrt_fifth.multiply(postive_golden_ratio.pow(n).subtract(negative_golden_ratio.pow(n))).toBigInteger();
	}
	
	/**
	 * Closed-form implementation of fibonacci sequence w/ rounding
	 * @param n
	 * @return
	 */
	private static BigInteger fib_closed_form_est(int n) {
		return (one_sqrt_fifth.multiply(postive_golden_ratio.pow(n)).add(one_half)).toBigInteger();
	}

	/**
	 * Entry point
	 * @param args
	 * @throws InvocationTargetException 
	 * @throws IllegalAccessException 
	 * @throws IllegalArgumentException 
	 */
	public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException {
		final int n = 32;
        Method[] methods = Fib.class.getDeclaredMethods();
    	System.out.println("Method Name\t\t\tResult\t\tTime Taken");
    	for(int i = 0; i &lt; methods.length; ++i) {
        	if(methods[i].getName().equals("main"))
        		continue;        	
        	long start = 0L, end = 0L;
        	
        	Object[] margs;
        	if(methods[i].getName().equals("fib_recursive_memo"))
            	margs = new Object[]{ n, null };
        	else
        		margs = new Object[]{ n };
        	
        	start = System.nanoTime();
        	BigInteger answer = (BigInteger) methods[i].invoke(methods[i], margs);
        	end = System.nanoTime();
        	
        	System.out.println(methods[i].getName() + "(" + n + ")\t\t" + answer + "\t\t" + (end - start) + "ns");
        }
	}

}</code></pre>
<p>No idea why the formatting got mucked up on these forums.</p>
<p><span class="bbcode-b">Results:</span><br>
[tt]<br>
Method Name					Result		Time Taken<br>
fib_recursive(32)		   2178309		196957890ns<br>
fib_recursive_memo(32)	 2178309		121258715ns<br>
fib_closed_form(32)		 2178309		1078813ns<br>
fib_closed_form_est(32)	2178310		1853781ns<br>
[/tt]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084/1</link>
        <pubDate>Wed, 15 Feb 2012 22:17:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433084-1</guid>
        <source url="https://forum.moparisthebest.com/t/fibonacci-benchmarker/433084.rss">Fibonacci Benchmarker</source>
      </item>
  </channel>
</rss>
