<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Overriding Types in Java</title>
    <link>https://forum.moparisthebest.com/t/overriding-types-in-java/469262</link>
    <description>[code=Java]
public class Foo {

    public Foo(Object source) {
        this.source = source;
    }

    public Object getSource() {
        return source;
    }

    private Object source;
}
[/code]

[code=Java]
public class Bar extends Foo {

    public Bar(SomeClass source) {
        super(source);
    }

    @Override
    public SomeClass getSource() {
        return (SomeClass) super.getSource();
    }
}
[/code]

Now, this is something I discovered in a state of curiosity. You can override a superclass&#39;s definition for a method, if the new type is a subclass of the defining type (SomeClass is the eventual subclass of Object). This seemed a bit odd, as how can the resulting type be guaranteed (in the case of Object) as all classes are the subclass of Object, but may not be SomeClass.

At first I thought it was because there&#39;s only 1 constructor, and the source is created from that type, so it&#39;s implied that the source will be of that type. However, changing the constructor arg to Object in class Bar still did not result in a compilation error. I believe it&#39;s because a ClassCastException would be thrown if you call [i]getSource[/i] and the supplied object isn&#39;t SomeClass.

But then I tried to change it up a bit.
[code=Java]
public class Foo {
    // ...
    public Object getSource(final Object obj) {
        return obj;
    }
}
[/code]
[code=Java]
public class Bar{
    // ...
    @Override
    public SomeClass getSource(final SomeClass obj) {
        return obj;
    }
}
[/code]

Now my expectation was that I would be able to compile without issues, due to my belief from the prior experiemnt (that I could replace the declaring type, as long as it was a subclass). However, I get the compilation error that I cannot override the specified method, as the declaration is different.

How then does it allow me to have different types as the return parameter, but not as the input parameter?</description>
    
    <lastBuildDate>Sat, 24 Nov 2012 00:45:07 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/overriding-types-in-java/469262.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Overriding Types in Java</title>
        <dc:creator><![CDATA[@Sunder Sunder]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sunder">@Sunder</a> wrote:</p>
          <blockquote>
              <p>When you override a method, the signature needs to be the same. Same return type, parameters, etc. Yet, when you call said method(When you call super), you can pass in an instance of the Object class because all classes derive from Object. So, when you pass your own class to a method that takes a parameter of type ‘Object’ the JVM implicitly casts your class to ‘Object’. I think this is called boxing and unboxing, I don’t quite remember lol. But, you can’t pass an ‘Object’ to a method that requires ‘Foo’ because an ‘Object’ is not a ‘Foo’, but ‘Foo’ is an ‘Object’.</p>
<p>Edit: Forgot to mention, when you have a method that returns ‘Object’ you can return an instance of any type, but not the other way around. A method returning ‘Foo’ cannot return an ‘Object’ I don’t think. But maybe if the ‘Object’ was just a boxed version of the type the method is supposed to return. I’m not sure if the JVM will handle this. Seems to me like it would be a runtime error if you tried to give it something like (Object)Bar if the method was supposed to return ‘Foo’. Could produce some wild results.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/overriding-types-in-java/469262/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/overriding-types-in-java/469262/3</link>
        <pubDate>Sat, 24 Nov 2012 00:45:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469262-3</guid>
        <source url="https://forum.moparisthebest.com/t/overriding-types-in-java/469262.rss">Overriding Types in Java</source>
      </item>
      <item>
        <title>Overriding Types in Java</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Anyone have any ideas on why this is so?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/overriding-types-in-java/469262/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/overriding-types-in-java/469262/2</link>
        <pubDate>Fri, 23 Nov 2012 23:59:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469262-2</guid>
        <source url="https://forum.moparisthebest.com/t/overriding-types-in-java/469262.rss">Overriding Types in Java</source>
      </item>
      <item>
        <title>Overriding Types in Java</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">public class Foo {

    public Foo(Object source) {
        this.source = source;
    }

    public Object getSource() {
        return source;
    }

    private Object source;
}</code></pre>
<pre><code class="lang-auto">public class Bar extends Foo {

    public Bar(SomeClass source) {
        super(source);
    }

    @Override
    public SomeClass getSource() {
        return (SomeClass) super.getSource();
    }
}</code></pre>
<p>Now, this is something I discovered in a state of curiosity. You can override a superclass’s definition for a method, if the new type is a subclass of the defining type (SomeClass is the eventual subclass of Object). This seemed a bit odd, as how can the resulting type be guaranteed (in the case of Object) as all classes are the subclass of Object, but may not be SomeClass.</p>
<p>At first I thought it was because there’s only 1 constructor, and the source is created from that type, so it’s implied that the source will be of that type. However, changing the constructor arg to Object in class Bar still did not result in a compilation error. I believe it’s because a ClassCastException would be thrown if you call <span class="bbcode-i">getSource</span> and the supplied object isn’t SomeClass.</p>
<p>But then I tried to change it up a bit.</p>
<pre><code class="lang-auto">public class Foo {
    // ...
    public Object getSource(final Object obj) {
        return obj;
    }
}</code></pre>
<pre><code class="lang-auto">public class Bar{
    // ...
    @Override
    public SomeClass getSource(final SomeClass obj) {
        return obj;
    }
}</code></pre>
<p>Now my expectation was that I would be able to compile without issues, due to my belief from the prior experiemnt (that I could replace the declaring type, as long as it was a subclass). However, I get the compilation error that I cannot override the specified method, as the declaration is different.</p>
<p>How then does it allow me to have different types as the return parameter, but not as the input parameter?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/overriding-types-in-java/469262/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/overriding-types-in-java/469262/1</link>
        <pubDate>Tue, 20 Nov 2012 01:19:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469262-1</guid>
        <source url="https://forum.moparisthebest.com/t/overriding-types-in-java/469262.rss">Overriding Types in Java</source>
      </item>
  </channel>
</rss>
