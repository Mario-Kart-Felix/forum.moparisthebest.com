<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>RuneVersi Draughts</title>
    <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896</link>
    <description>Well this is RuneVersi.. i coded it in a hour cause some guy put it in show-off and i got bored. Its not perfect you still have to make people request and accept.

This was done in a rush and its messy but it works =]

Client:
[CODE] public int runeVersiTeam = 0;
    public int requestedMatch;
    public int runeRank = 0;
    public int[] piecesTeam1 = new int[80];
   // public int[] piecesTeam2 = new int[80];
    public int turn;
    public int eaten = 0;[/CODE]


RuneVersi.java

[CODE]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package server.model.minigames;

import server.model.players.Client;
import server.Server;
/**
 *
 * @author Arrowzflame
 */
public class RuneVersi {
    
    private static final int INTERFACE = 10380;
    private static final int Child = 10494;
    private static final int king1 = 9691;
    private static final int king2 = 9699;
    
     private static int[] team1 = {1,3,5,7,8,10,12,14,17,19,21,23};
     private static int[] team2 = {40,42,44,46,49,51,53,55,56,58,60,62};      
    
    /*
     * 2 is water
     * 1 is fire
     * TODO requirements (In trade)
     */
    
    
    public static void resetRuneVersi(Client c) {
        if(c == null) {
            return;
        }
         c.getPA().closeAllWindows();
        c.runeVersiTeam = -1;
        c.requestedMatch = -1;
        c.playingRuneVersi = false;
        c.turn = 0;
        c.eaten = 0;
       
        
        for(int i = 0; i &lt; c.piecesTeam1.length; i++) {
            c.piecesTeam1[i] = -1;
            
        }
        
        
    }
    public static void interfaceText(Client c) {
        if(c == null) {
            //resetRuneVersi(c);
            return;
        }
        c.getPA().sendFrame126(&quot;Draughts&quot;, 10472);
        c.getPA().sendFrame126(&quot;Vs&quot;, 10456);
      c.getPA().sendFrame126(&quot;Draw&quot;, 10476);
       c.getPA().sendFrame126(&quot;Resign&quot;, 10474);
        c.getPA().sendFrame126(&quot;&quot;, 10469);
        c.getPA().sendFrame126(&quot;&quot;, 10479);
        c.getPA().sendFrame126(&quot;&quot;, 10499);
        c.getPA().sendFrame126(&quot;&quot;, 10492);
        
            if(c.runeVersiTeam == 1) {
                 c.getPA().sendFrame126(c.playerName, 10448);
            } else if(c.runeVersiTeam == 2) {
                c.getPA().sendFrame126(c.playerName, 10457);
            }
     
           if(c.requestedMatch &lt; 0) {
            return;
        }
            if(Server.playerHandler.players[c.requestedMatch] != null) {
                Client o = (Client) Server.playerHandler.players[c.requestedMatch];
             
            if(o.runeVersiTeam == 1) {
                c.getPA().sendFrame126(o.playerName, 10448);
            } else if(o.runeVersiTeam == 2) {
                c.getPA().sendFrame126(o.playerName, 10457);
            }
            }
     
     
   }
    
    public static void requestMatch(Client c, Client o) {
              if(o == null) {
                    resetRuneVersi(c);
                    return;
                }
        if(c == null) {
            resetRuneVersi(o);
            return;
        }
        if(c != null &amp;&amp; o != null) {
            o.sendMessage(&quot;@red@&quot;+c.playerName+&quot; @bla@wishes to play @mag@RuneVersi@bla@ with you&quot;);
            c.requestedMatch = o.playerId;
            o.requestedMatch = c.playerId;
         }
    }
    
       public static void acceptMatch(Client c) {
           
        if(c == null) {
           // resetRuneVersi(c);
            return;
        }
              if(c.requestedMatch &lt; 0) {
            return;
        }
        if(c != null &amp;&amp; Server.playerHandler.players[c.requestedMatch] != null) {
            Client o = (Client) Server.playerHandler.players[c.requestedMatch];
             o.runeVersiTeam = 1;
           c.runeVersiTeam = 2;
          interfaceText(c);
           setUpBoard(c, o);
                     interfaceText(o);
           setUpBoard(o, c);
          
           c.playingRuneVersi = true;
           o.playingRuneVersi = true;
           c.turn = 1;
           o.turn = 1;
           o.getPA().showInterface(INTERFACE);
           c.getPA().showInterface(INTERFACE);
        }
    }
    
       
       
       public static void makeKing(Client c , int i) {
           if(c.runeVersiTeam == 2) {
           if(c.piecesTeam1[1] == 555 || c.piecesTeam1[3] == 555 || c.piecesTeam1[5] == 555 || c.piecesTeam1[7] == 555) {
               setPiece(c, king2, i);
               c.sendMessage(&quot;This piece becomes a king&quot;);
           }
           } else if(c.runeVersiTeam == 1) {
           if(c.piecesTeam1[57] == 554 || c.piecesTeam1[59] == 554 || c.piecesTeam1[61] == 554 || c.piecesTeam1[63] == 554) {
               setPiece(c, king1, i);
               c.sendMessage(&quot;This piece becomes a king&quot;);
           }
           }
       }
       
       
              public static void winGame(Client c) {
                        if(c.requestedMatch &lt; 0) {
            return;
        }
                  if(Server.playerHandler.players[c.requestedMatch] == null) {
                      resetRuneVersi(c); 
                      return;
                  }
                    if(c.eaten &gt;= 12) {
                        c.runeRank += 5;
                        c.sendMessage(&quot;You get 5 points for winnning&quot;);
                        Client o = (Client) Server.playerHandler.players[c.requestedMatch];
                        o.runeRank += 3;
                        o.sendMessage(&quot;You get 3 point for trying&quot;);
                        resetRuneVersi(c); 
                        resetRuneVersi(o);
                    }
                }
              
       public static void setPiece(Client c, int item, int slot) {
         
                if(c.requestedMatch &lt; 0) {
            return;
        }
          if(Server.playerHandler.players[c.requestedMatch] == null) {
              resetRuneVersi(c);
              return;
          }
          Client o = (Client) Server.playerHandler.players[c.requestedMatch];
         
          
            
            c.piecesTeam1[slot] = item;
            o.piecesTeam1[slot] = item;
        
       int amount = 1;
     
        c.getPA().Frame34(Child, item, slot, 1);
        o.getPA().Frame34(Child, item, slot, 1);
       }
    public static void setUpBoard(Client c, Client o) {
        if(o == null) {
            resetRuneVersi(c);
            return;
        }
        if(c == null) {
            resetRuneVersi(o);
            return;
        }
        for(int i = 0; i &lt; 63; i++) {
            setPiece(c, -1, i); 
        }
               
        if(c.runeVersiTeam == 0) {
            c.sendMessage(&quot;You are not on a team&quot;);
            resetRuneVersi(c);
            
        } else if(c.runeVersiTeam == 1) {
            for(int i = 0; i &lt; team1.length; i++) {
               
           
                if(team1[i] &gt;= 0) {
                  setPiece(c, 554, team1[i]);
                  
               }
                
            }
         } else if(c.runeVersiTeam == 2) {
            for(int i = 0; i &lt; team2.length; i++) {
               
           
                if(team2[i] &gt;= 0) {
                  setPiece(c, 555, team2[i]);
                  
               }
                
            }
         }
        
        
        
               if(o.runeVersiTeam == 0) {
            c.sendMessage(&quot;You are not on a team&quot;);
            resetRuneVersi(o);
            
        } else if(o.runeVersiTeam == 1) {
            for(int i = 0; i &lt; team1.length; i++) {
              
               if(team1[i] &gt;= 0) {
                  setPiece(c, 554, team1[i]);
               }
                
            }
        } else if(o.runeVersiTeam == 2) {
            for(int i = 0; i &lt; team2.length; i++) {
              
               if(team2[i] &gt;= 0) {
                  setPiece(c, 555, team2[i]);
               }
                
            }
        } 
               
    }
    public static int getPieceForTeam(Client c) {
        if(c.runeVersiTeam == 2) {
           return 555;
        }
        if(c.runeVersiTeam == 1) {
            return 554;
        }
       
        return -1;
    }
    
        public static int getKingForTeam(Client c) {
        if(c.runeVersiTeam == 2) {
           return king2;
        }
        if(c.runeVersiTeam == 1) {
            return king1;
        }
        
        return -1;
    }
    
    public static int getTeamPiece(Client c, int inside) {
        if(c.runeVersiTeam == 1) {
            return c.piecesTeam1[inside];
        }
        if(c.runeVersiTeam == 2) {
            return c.piecesTeam1[inside];
        }
       
        return -1;
    }
    
        public static int getOtherPiece(Client c, int inside) {
        if(c.runeVersiTeam == 1) {
            return c.piecesTeam1[inside];
        }
        if(c.runeVersiTeam == 2) {
            return c.piecesTeam1[inside];
        }
        
        return -1;
    }
        
       public static int getTeam(Client c) {
        return c.runeVersiTeam;
       }
       
              public static int pieceIsThere(Client c, int i) {
                  
                  if(i &gt; 0 &amp;&amp; i &lt; c.piecesTeam1.length) {
                  if(c.piecesTeam1[i] == 555) {
                      return 2;
                  }
                if(c.piecesTeam1[i] == 554) {
                      return 1;
                  }
                
                
                  }
         
        return 0;
       }
              
              
        
              
    public static boolean validMove(Client c, Client vsing, int movedFrom, int movedTo, int itemId) {
        if(vsing == null) {
            resetRuneVersi(c);
            return false;
        }
        if(c == null) {
            resetRuneVersi(vsing);
            return false;
        }
        itemId = getTeamPiece(c, movedFrom);
         
       int oldPiece = c.piecesTeam1[movedFrom];
        int oldPiece2 = c.piecesTeam1[movedFrom];
        if(itemId != getPieceForTeam(c)) {
            setPiece(c,c.piecesTeam1[movedTo], movedTo);
            setPiece(c,c.piecesTeam1[movedFrom], movedFrom);
            c.sendMessage(&quot;This is not your playing piece&quot;);
            return false;
        }
        if(c.piecesTeam1[movedTo] &gt; 10) {
            setPiece(c,c.piecesTeam1[movedTo], movedTo);
            setPiece(c,c.piecesTeam1[movedFrom], movedFrom);
            c.sendMessage(&quot;You cannot move here&quot;);
            return false;
        }
        
   
        
        if(c.turn != c.runeVersiTeam) {
            setPiece(c,getTeamPiece(c, movedTo), movedTo);
            setPiece(c,getTeamPiece(c, movedFrom), movedFrom);
            c.sendMessage(&quot;It is not your turn&quot;);
            return false;    
        }

        
        
        
        if(c.runeVersiTeam == 1) {
            
            
            if(itemId != getKingForTeam(c)) {
             
                 if(pieceIsThere(c, movedTo-9) == 2) { //TAKE PIECE
            setPiece(c,-1, movedTo-9);
            setPiece(c,oldPiece, movedTo);
            c.eaten += 1;
            return true;
             } else
            
             
                       
            if(pieceIsThere(c, movedTo-7) == 2) { // TAKE PIECE
            setPiece(c,-1, movedTo-7);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
            return true;
             } else
            
             
             if(movedTo == movedFrom+9 || movedTo == movedFrom+7) { // NORMAL MOVEMENT
            setPiece(c,-1, movedFrom);
            setPiece(c,oldPiece, movedTo);
            
                 return true;
             } 
            } else if(itemId == getKingForTeam(c)) {//KING
                 
                 if(pieceIsThere(c, movedTo-9) == 2) { //KING TAKE
            setPiece(c,-1, movedTo-9);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
            return true;
             } else
            
                 
                                  
                 if(pieceIsThere(c, movedTo-7) == 2) {
            setPiece(c,-1, movedTo-7);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
            return true;
            } else
                 
            if(pieceIsThere(c, movedTo+9) == 2) {
            setPiece(c,-1, movedTo+9);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
            return true;
             } else
            
                 
                       
                 if(pieceIsThere(c, movedTo+7) == 2) {
            setPiece(c,-1, movedTo+7);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
           return true;
             } else
            
                 
                 
            if(movedTo == movedFrom+9 || movedTo == movedFrom+7 || movedTo == movedFrom-9 || movedTo == movedFrom-7) {
            setPiece(c,-1, movedFrom);
            setPiece(c,oldPiece, movedTo);
             
                 return true;
             }
           
            }
             
            
        } else if(c.runeVersiTeam == 2) { //TEAM 2
            if(itemId != getKingForTeam(c)) { // NO KING
             
                 if(pieceIsThere(c, movedTo+9) == 1) { // TAKE
            setPiece(c,-1, movedTo+9);
            setPiece(c,oldPiece2, movedTo);
             c.eaten += 1;
            return true;
             } else
            
             
                     
                 if(pieceIsThere(c, movedTo+7) == 2) { // TAKE
            setPiece(c,-1, movedTo+7);
            setPiece(c,oldPiece, movedTo);
             c.eaten += 1;
            return true;
             } else
             
             
             if(movedTo == movedFrom-9 || movedTo == movedFrom-7) { //NORMAL MOVE
            setPiece(c,-1, movedFrom);
            setPiece(c,oldPiece2, movedTo);
                 return true;
             }
            } else if(itemId == getKingForTeam(c)) { //KING
                
                 if(pieceIsThere(c, movedTo-9) == 1) { // TAKE
            setPiece(c,-1, movedTo-9);
            setPiece(c,oldPiece2, movedTo);
             c.eaten += 1;
            return true;
             } else
            
                 
                                 
                 if(pieceIsThere(c, movedTo-7) == 1) { // TAKE
            setPiece(c,-1, movedTo-7);
            setPiece(c,oldPiece2, movedTo);
             c.eaten += 1;
            return true;
             } else
            
                 
                 
                 if(pieceIsThere(c, movedTo+9) == 1) { //TAKE
            setPiece(c,-1, movedTo+9);
            setPiece(c,oldPiece2, movedTo);
             c.eaten += 1;
            return true;
             } else
                 
                                  
                 if(pieceIsThere(c, movedTo+7) == 1) { //TAKE
            setPiece(c,-1, movedTo+7);
            setPiece(c,oldPiece2, movedTo);
             c.eaten += 1;
            return true;
             } else
            
                 
                 
                  if(movedTo == movedFrom+9 || movedTo == movedFrom+7 || movedTo == movedFrom-9 || movedTo == movedFrom-7) {
            setPiece(c,-1, movedFrom);
            setPiece(c,oldPiece2, movedTo);
                 return true;
             }
           
            }
             
        }
        
        
        
        
    
 
        return false;
    }

    public static void leaveGame(Client c) {
        if(c.requestedMatch &lt; 0) {
            return;
        }
        if(Server.playerHandler.players[c.requestedMatch] != null) {
                      Client o = (Client) Server.playerHandler.players[c.requestedMatch];
                      if(o != null ) {
                       if(o.runeVersiTeam &gt; 0) {
                      
                      RuneVersi.resetRuneVersi(o);
                      o.sendMessage(&quot;The player has logged out you get no reward&quot;);
                       }
                  }
                  }
    }
    
}
[/CODE]


MoveWindow in itemAssistant:

[CODE]  if(moveWindow == 32424) {
                          if(c.requestedMatch &lt; 0) {
            return;
        }
                   if(Server.playerHandler.players[c.requestedMatch] != null) {
                       Client o = (Client) Server.playerHandler.players[c.requestedMatch];
                       if(RuneVersi.validMove(c, o, from,to, 0)) {
                           if(c.runeVersiTeam == 1) {
                               c.turn = 2;
                               o.turn = 2;
                           }
                           if(c.runeVersiTeam == 2) {
                               c.turn = 1;
                               o.turn = 1;
                           }
                       } else {
                        c.getPA().Frame34(10494, c.piecesTeam1[from], from, 1);
                        
                         c.getPA().Frame34(10494, c.piecesTeam1[to], to, 1);  
                       }
                    
                }
                   RuneVersi.winGame(c);
                   RuneVersi.makeKing(c, to);
                }[/CODE]


In destruct add:

[CODE]leaveGame(this);[/CODE]


Heres the command you might want to add the real request and accepting:

[CODE]if (playerCommand.equalsIgnoreCase(&quot;request&quot;) &amp;&amp; c.playerRights == 3) {
				Client o = c.getClient(&quot;bmx&quot;);
                                
                                if(o == null) {
                                    return;
                                }
                                
                                RuneVersi.requestMatch(c, o);
			}


if (playerCommand.equalsIgnoreCase(&quot;accept&quot;) &amp;&amp; c.playerRights == 3) {
 Client o = c.getClient(&quot;bmx&quot;);
			
                                
                                if(o == null) {
                                    return;
                                }
                                
                                RuneVersi.acceptMatch(o);
			}


 public Client getClient(String playerNamez) {
            for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
                if(Server.playerHandler.players[i] != null) {
                if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerNamez)) {
                   return (Client) Server.playerHandler.players[i];
            }
                }
               
        }
             return null;
        }[/CODE]</description>
    
    <lastBuildDate>Sat, 03 Sep 2011 16:37:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@I_am_beast I am beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_am_beast">@I_am_beast</a> wrote:</p>
          <blockquote>
              <p>Snippet. Not explained.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/7</link>
        <pubDate>Sat, 03 Sep 2011 16:37:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-7</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@zoomer zoomer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zoomer">@zoomer</a> wrote:</p>
          <blockquote>
              <p>May I ask whats this for?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/6</link>
        <pubDate>Fri, 02 Sep 2011 21:52:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-6</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@Coelho Coelho]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coelho">@Coelho</a> wrote:</p>
          <blockquote>
              <p>Looks good, however you need a bit more organization and explaining.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/5</link>
        <pubDate>Thu, 01 Sep 2011 03:02:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-5</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@fasthop10 fasthop10]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fasthop10">@fasthop10</a> wrote:</p>
          <blockquote>
              <p>nice i liek it, probably wont use but i like it, good job</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/4</link>
        <pubDate>Thu, 01 Sep 2011 01:29:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-4</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Always with the accept command -.-…</p>
<aside class="quote" data-post="2" data-topic="412896">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/asshole_rule/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> asshole_rule:</div>
<blockquote>
<p>Very messy indeed, lol.</p>
</blockquote>
</aside>
<p>But good job, if you really made this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/3</link>
        <pubDate>Wed, 31 Aug 2011 16:06:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-3</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>Very messy indeed, lol.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/2</link>
        <pubDate>Wed, 31 Aug 2011 15:04:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-2</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
      <item>
        <title>RuneVersi Draughts</title>
        <dc:creator><![CDATA[@bob_is_bob bob is bob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bob_is_bob">@bob_is_bob</a> wrote:</p>
          <blockquote>
              <p>Well this is RuneVersi… i coded it in a hour cause some guy put it in show-off and i got bored. Its not perfect you still have to make people request and accept.</p>
<p>This was done in a rush and its messy but it works =]</p>
<p>Client:</p>
<p><code> public int runeVersiTeam = 0;
    public int requestedMatch;
    public int runeRank = 0;
    public int[] piecesTeam1 = new int[80];
   // public int[] piecesTeam2 = new int[80];
    public int turn;
    public int eaten = 0;</code></p>
<p>RuneVersi.java</p>
<p>[CODE]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/<br>
package server.model.minigames;</li>
</ul>
<p>import server.model.players.Client;<br>
import server.Server;<br>
/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> Arrowzflame<br>
*/<br>
public class RuneVersi {</p>
<p>private static final int INTERFACE = 10380;<br>
private static final int Child = 10494;<br>
private static final int king1 = 9691;<br>
private static final int king2 = 9699;</p>
<p>private static int[] team1 = {1,3,5,7,8,10,12,14,17,19,21,23};<br>
private static int[] team2 = {40,42,44,46,49,51,53,55,56,58,60,62};</p>
<p>/*</p>
<ul>
<li>2 is water</li>
<li>1 is fire</li>
<li>TODO requirements (In trade)<br>
*/</li>
</ul>
<p>public static void resetRuneVersi(Client c) {<br>
if(c == null) {<br>
return;<br>
}<br>
c.getPA().closeAllWindows();<br>
c.runeVersiTeam = -1;<br>
c.requestedMatch = -1;<br>
c.playingRuneVersi = false;<br>
c.turn = 0;<br>
c.eaten = 0;</p>
<pre><code> for(int i = 0; i &lt; c.piecesTeam1.length; i++) {
     c.piecesTeam1[i] = -1;
     
 }
</code></pre>
<p>}<br>
public static void interfaceText(Client c) {<br>
if(c == null) {<br>
//resetRuneVersi©;<br>
return;<br>
}<br>
c.getPA().sendFrame126(“Draughts”, 10472);<br>
c.getPA().sendFrame126(“Vs”, 10456);<br>
c.getPA().sendFrame126(“Draw”, 10476);<br>
c.getPA().sendFrame126(“Resign”, 10474);<br>
c.getPA().sendFrame126("", 10469);<br>
c.getPA().sendFrame126("", 10479);<br>
c.getPA().sendFrame126("", 10499);<br>
c.getPA().sendFrame126("", 10492);</p>
<pre><code>     if(c.runeVersiTeam == 1) {
          c.getPA().sendFrame126(c.playerName, 10448);
     } else if(c.runeVersiTeam == 2) {
         c.getPA().sendFrame126(c.playerName, 10457);
     }

    if(c.requestedMatch &lt; 0) {
     return;
 }
     if(Server.playerHandler.players[c.requestedMatch] != null) {
         Client o = (Client) Server.playerHandler.players[c.requestedMatch];
      
     if(o.runeVersiTeam == 1) {
         c.getPA().sendFrame126(o.playerName, 10448);
     } else if(o.runeVersiTeam == 2) {
         c.getPA().sendFrame126(o.playerName, 10457);
     }
     }
</code></pre>
<p>}</p>
<p>public static void requestMatch(Client c, Client o) {<br>
if(o == null) {<br>
resetRuneVersi©;<br>
return;<br>
}<br>
if(c == null) {<br>
resetRuneVersi(o);<br>
return;<br>
}<br>
if(c != null &amp;&amp; o != null) {<br>
o.sendMessage("<a class="mention" href="/u/red">@red</a>@"+c.playerName+" <span class="mention">@bla</span>@wishes to play <a class="mention" href="/u/mag">@mag</a>@RuneVersi@bla@ with you");<br>
c.requestedMatch = o.playerId;<br>
o.requestedMatch = c.playerId;<br>
}<br>
}</p>
<pre><code>public static void acceptMatch(Client c) {
    
 if(c == null) {
    // resetRuneVersi(c);
     return;
 }
       if(c.requestedMatch &lt; 0) {
     return;
 }
 if(c != null &amp;&amp; Server.playerHandler.players[c.requestedMatch] != null) {
     Client o = (Client) Server.playerHandler.players[c.requestedMatch];
      o.runeVersiTeam = 1;
    c.runeVersiTeam = 2;
   interfaceText(c);
    setUpBoard(c, o);
              interfaceText(o);
    setUpBoard(o, c);
   
    c.playingRuneVersi = true;
    o.playingRuneVersi = true;
    c.turn = 1;
    o.turn = 1;
    o.getPA().showInterface(INTERFACE);
    c.getPA().showInterface(INTERFACE);
 }
</code></pre>
<p>}</p>
<pre><code>public static void makeKing(Client c , int i) {
    if(c.runeVersiTeam == 2) {
    if(c.piecesTeam1[1] == 555 || c.piecesTeam1[3] == 555 || c.piecesTeam1[5] == 555 || c.piecesTeam1[7] == 555) {
        setPiece(c, king2, i);
        c.sendMessage("This piece becomes a king");
    }
    } else if(c.runeVersiTeam == 1) {
    if(c.piecesTeam1[57] == 554 || c.piecesTeam1[59] == 554 || c.piecesTeam1[61] == 554 || c.piecesTeam1[63] == 554) {
        setPiece(c, king1, i);
        c.sendMessage("This piece becomes a king");
    }
    }
}


       public static void winGame(Client c) {
                 if(c.requestedMatch &lt; 0) {
     return;
 }
           if(Server.playerHandler.players[c.requestedMatch] == null) {
               resetRuneVersi(c); 
               return;
           }
             if(c.eaten &gt;= 12) {
                 c.runeRank += 5;
                 c.sendMessage("You get 5 points for winnning");
                 Client o = (Client) Server.playerHandler.players[c.requestedMatch];
                 o.runeRank += 3;
                 o.sendMessage("You get 3 point for trying");
                 resetRuneVersi(c); 
                 resetRuneVersi(o);
             }
         }
       
public static void setPiece(Client c, int item, int slot) {
  
         if(c.requestedMatch &lt; 0) {
     return;
 }
   if(Server.playerHandler.players[c.requestedMatch] == null) {
       resetRuneVersi(c);
       return;
   }
   Client o = (Client) Server.playerHandler.players[c.requestedMatch];
  
   
     
     c.piecesTeam1[slot] = item;
     o.piecesTeam1[slot] = item;
 
int amount = 1;

 c.getPA().Frame34(Child, item, slot, 1);
 o.getPA().Frame34(Child, item, slot, 1);
}
</code></pre>
<p>public static void setUpBoard(Client c, Client o) {<br>
if(o == null) {<br>
resetRuneVersi©;<br>
return;<br>
}<br>
if(c == null) {<br>
resetRuneVersi(o);<br>
return;<br>
}<br>
for(int i = 0; i &lt; 63; i++) {<br>
setPiece(c, -1, i);<br>
}</p>
<pre><code> if(c.runeVersiTeam == 0) {
     c.sendMessage("You are not on a team");
     resetRuneVersi(c);
     
 } else if(c.runeVersiTeam == 1) {
     for(int i = 0; i &lt; team1.length; i++) {
        
    
         if(team1[i] &gt;= 0) {
           setPiece(c, 554, team1[i]);
           
        }
         
     }
  } else if(c.runeVersiTeam == 2) {
     for(int i = 0; i &lt; team2.length; i++) {
        
    
         if(team2[i] &gt;= 0) {
           setPiece(c, 555, team2[i]);
           
        }
         
     }
  }
 
 
 
        if(o.runeVersiTeam == 0) {
     c.sendMessage("You are not on a team");
     resetRuneVersi(o);
     
 } else if(o.runeVersiTeam == 1) {
     for(int i = 0; i &lt; team1.length; i++) {
       
        if(team1[i] &gt;= 0) {
           setPiece(c, 554, team1[i]);
        }
         
     }
 } else if(o.runeVersiTeam == 2) {
     for(int i = 0; i &lt; team2.length; i++) {
       
        if(team2[i] &gt;= 0) {
           setPiece(c, 555, team2[i]);
        }
         
     }
 } 
</code></pre>
<p>}<br>
public static int getPieceForTeam(Client c) {<br>
if(c.runeVersiTeam == 2) {<br>
return 555;<br>
}<br>
if(c.runeVersiTeam == 1) {<br>
return 554;<br>
}</p>
<pre><code> return -1;
</code></pre>
<p>}</p>
<pre><code> public static int getKingForTeam(Client c) {
 if(c.runeVersiTeam == 2) {
    return king2;
 }
 if(c.runeVersiTeam == 1) {
     return king1;
 }
 
 return -1;
</code></pre>
<p>}</p>
<p>public static int getTeamPiece(Client c, int inside) {<br>
if(c.runeVersiTeam == 1) {<br>
return c.piecesTeam1[inside];<br>
}<br>
if(c.runeVersiTeam == 2) {<br>
return c.piecesTeam1[inside];<br>
}</p>
<pre><code> return -1;
</code></pre>
<p>}</p>
<pre><code> public static int getOtherPiece(Client c, int inside) {
 if(c.runeVersiTeam == 1) {
     return c.piecesTeam1[inside];
 }
 if(c.runeVersiTeam == 2) {
     return c.piecesTeam1[inside];
 }
 
 return -1;
</code></pre>
<p>}</p>
<pre><code>public static int getTeam(Client c) {
 return c.runeVersiTeam;
}

       public static int pieceIsThere(Client c, int i) {
           
           if(i &gt; 0 &amp;&amp; i &lt; c.piecesTeam1.length) {
           if(c.piecesTeam1[i] == 555) {
               return 2;
           }
         if(c.piecesTeam1[i] == 554) {
               return 1;
           }
         
         
           }
  
 return 0;
}
</code></pre>
<p>public static boolean validMove(Client c, Client vsing, int movedFrom, int movedTo, int itemId) {<br>
if(vsing == null) {<br>
resetRuneVersi©;<br>
return false;<br>
}<br>
if(c == null) {<br>
resetRuneVersi(vsing);<br>
return false;<br>
}<br>
itemId = getTeamPiece(c, movedFrom);</p>
<pre><code>int oldPiece = c.piecesTeam1[movedFrom];
 int oldPiece2 = c.piecesTeam1[movedFrom];
 if(itemId != getPieceForTeam(c)) {
     setPiece(c,c.piecesTeam1[movedTo], movedTo);
     setPiece(c,c.piecesTeam1[movedFrom], movedFrom);
     c.sendMessage("This is not your playing piece");
     return false;
 }
 if(c.piecesTeam1[movedTo] &gt; 10) {
     setPiece(c,c.piecesTeam1[movedTo], movedTo);
     setPiece(c,c.piecesTeam1[movedFrom], movedFrom);
     c.sendMessage("You cannot move here");
     return false;
 }
 

 
 if(c.turn != c.runeVersiTeam) {
     setPiece(c,getTeamPiece(c, movedTo), movedTo);
     setPiece(c,getTeamPiece(c, movedFrom), movedFrom);
     c.sendMessage("It is not your turn");
     return false;    
 }

 
 
 
 if(c.runeVersiTeam == 1) {
     
     
     if(itemId != getKingForTeam(c)) {
      
          if(pieceIsThere(c, movedTo-9) == 2) { //TAKE PIECE
     setPiece(c,-1, movedTo-9);
     setPiece(c,oldPiece, movedTo);
     c.eaten += 1;
     return true;
      } else
     
      
                
     if(pieceIsThere(c, movedTo-7) == 2) { // TAKE PIECE
     setPiece(c,-1, movedTo-7);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
     return true;
      } else
     
      
      if(movedTo == movedFrom+9 || movedTo == movedFrom+7) { // NORMAL MOVEMENT
     setPiece(c,-1, movedFrom);
     setPiece(c,oldPiece, movedTo);
     
          return true;
      } 
     } else if(itemId == getKingForTeam(c)) {//KING
          
          if(pieceIsThere(c, movedTo-9) == 2) { //KING TAKE
     setPiece(c,-1, movedTo-9);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
     return true;
      } else
     
          
                           
          if(pieceIsThere(c, movedTo-7) == 2) {
     setPiece(c,-1, movedTo-7);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
     return true;
     } else
          
     if(pieceIsThere(c, movedTo+9) == 2) {
     setPiece(c,-1, movedTo+9);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
     return true;
      } else
     
          
                
          if(pieceIsThere(c, movedTo+7) == 2) {
     setPiece(c,-1, movedTo+7);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
    return true;
      } else
     
          
          
     if(movedTo == movedFrom+9 || movedTo == movedFrom+7 || movedTo == movedFrom-9 || movedTo == movedFrom-7) {
     setPiece(c,-1, movedFrom);
     setPiece(c,oldPiece, movedTo);
      
          return true;
      }
    
     }
      
     
 } else if(c.runeVersiTeam == 2) { //TEAM 2
     if(itemId != getKingForTeam(c)) { // NO KING
      
          if(pieceIsThere(c, movedTo+9) == 1) { // TAKE
     setPiece(c,-1, movedTo+9);
     setPiece(c,oldPiece2, movedTo);
      c.eaten += 1;
     return true;
      } else
     
      
              
          if(pieceIsThere(c, movedTo+7) == 2) { // TAKE
     setPiece(c,-1, movedTo+7);
     setPiece(c,oldPiece, movedTo);
      c.eaten += 1;
     return true;
      } else
      
      
      if(movedTo == movedFrom-9 || movedTo == movedFrom-7) { //NORMAL MOVE
     setPiece(c,-1, movedFrom);
     setPiece(c,oldPiece2, movedTo);
          return true;
      }
     } else if(itemId == getKingForTeam(c)) { //KING
         
          if(pieceIsThere(c, movedTo-9) == 1) { // TAKE
     setPiece(c,-1, movedTo-9);
     setPiece(c,oldPiece2, movedTo);
      c.eaten += 1;
     return true;
      } else
     
          
                          
          if(pieceIsThere(c, movedTo-7) == 1) { // TAKE
     setPiece(c,-1, movedTo-7);
     setPiece(c,oldPiece2, movedTo);
      c.eaten += 1;
     return true;
      } else
     
          
          
          if(pieceIsThere(c, movedTo+9) == 1) { //TAKE
     setPiece(c,-1, movedTo+9);
     setPiece(c,oldPiece2, movedTo);
      c.eaten += 1;
     return true;
      } else
          
                           
          if(pieceIsThere(c, movedTo+7) == 1) { //TAKE
     setPiece(c,-1, movedTo+7);
     setPiece(c,oldPiece2, movedTo);
      c.eaten += 1;
     return true;
      } else
     
          
          
           if(movedTo == movedFrom+9 || movedTo == movedFrom+7 || movedTo == movedFrom-9 || movedTo == movedFrom-7) {
     setPiece(c,-1, movedFrom);
     setPiece(c,oldPiece2, movedTo);
          return true;
      }
    
     }
      
 }
 
 
 
 


 return false;
</code></pre>
<p>}</p>
<p>public static void leaveGame(Client c) {<br>
if(c.requestedMatch &lt; 0) {<br>
return;<br>
}<br>
if(Server.playerHandler.players[c.requestedMatch] != null) {<br>
Client o = (Client) Server.playerHandler.players[c.requestedMatch];<br>
if(o != null ) {<br>
if(o.runeVersiTeam &gt; 0) {</p>
<pre><code>               RuneVersi.resetRuneVersi(o);
               o.sendMessage("The player has logged out you get no reward");
                }
           }
           }
</code></pre>
<p>}</p>
</li>
</ul>
<p>}<br>
[/CODE]</p>
<p>MoveWindow in itemAssistant:</p>
<p>[CODE]  if(moveWindow == 32424) {<br>
if(c.requestedMatch &lt; 0) {<br>
return;<br>
}<br>
if(Server.playerHandler.players[c.requestedMatch] != null) {<br>
Client o = (Client) Server.playerHandler.players[c.requestedMatch];<br>
if(RuneVersi.validMove(c, o, from,to, 0)) {<br>
if(c.runeVersiTeam == 1) {<br>
c.turn = 2;<br>
o.turn = 2;<br>
}<br>
if(c.runeVersiTeam == 2) {<br>
c.turn = 1;<br>
o.turn = 1;<br>
}<br>
} else {<br>
c.getPA().Frame34(10494, c.piecesTeam1[from], from, 1);</p>
<pre><code>                     c.getPA().Frame34(10494, c.piecesTeam1[to], to, 1);  
                   }
                
            }
               RuneVersi.winGame(c);
               RuneVersi.makeKing(c, to);
            }[/CODE]
</code></pre>
<p>In destruct add:</p>
<pre><code class="lang-auto"></code></pre>
<p>Heres the command you might want to add the real request and accepting:</p>
<p>[CODE]if (playerCommand.equalsIgnoreCase(“request”) &amp;&amp; c.playerRights == 3) {<br>
Client o = c.getClient(“bmx”);</p>
<pre><code>                            if(o == null) {
                                return;
                            }
                            
                            RuneVersi.requestMatch(c, o);
		}
</code></pre>
<p>if (playerCommand.equalsIgnoreCase(“accept”) &amp;&amp; c.playerRights == 3) {<br>
Client o = c.getClient(“bmx”);</p>
<pre><code>                            if(o == null) {
                                return;
                            }
                            
                            RuneVersi.acceptMatch(o);
		}
</code></pre>
<p>public Client getClient(String playerNamez) {<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerNamez)) {<br>
return (Client) Server.playerHandler.players[i];<br>
}<br>
}</p>
<pre><code>    }
         return null;
    }[/CODE]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runeversi-draughts/412896/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runeversi-draughts/412896/1</link>
        <pubDate>Wed, 31 Aug 2011 14:41:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412896-1</guid>
        <source url="https://forum.moparisthebest.com/t/runeversi-draughts/412896.rss">RuneVersi Draughts</source>
      </item>
  </channel>
</rss>
