<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Sorting algorithms</title>
    <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374</link>
    <description>Bubblesort:
[code=c++]/* Sorts an array of integers from ascending to
 * descending order using the bubblesort algorithm.
 */

#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#define ARRAY_SIZE 50
using namespace std;

void init(int);
void bubblesort(int[]);

int main(int argc, char** argv) {
    init(ARRAY_SIZE);
    return (EXIT_SUCCESS);
}

void init(int counts) {
    int numbers[counts]; // array of integers
    cout &lt;&lt; &quot;Before sorting: &quot; &lt;&lt; endl;
    for (int i = 0; i &lt; counts; i++) {
        numbers[i] = rand(); // generate a random integer
        cout &lt;&lt; numbers[i] &lt;&lt; endl;
    }
    bubblesort(numbers);
}

void bubblesort(int numbers[]) {
    bool sorted = false;
    while (!sorted) {
        sorted = true;
        for (int i = 0; i &lt; ARRAY_SIZE - 1; i++) {
            if (numbers[i] &gt; numbers[i+1]) {
                int temp = numbers[i+1];
                numbers[i+1] = numbers[i];
                numbers[i] = temp;
                sorted = false;
            }
        }
    }
    cout &lt;&lt; &quot;After sorting: &quot; &lt;&lt; endl;
    for (int i = 0; i &lt; ARRAY_SIZE; i++) {
        cout &lt;&lt; numbers[i] &lt;&lt; endl;
    }
}[/code]

Selection-sort:
[code=c++]/* Sorts an array of integers from ascending to
 * descending order using the selection-sort algorithm.
 */

#include &lt;cstdlib&gt;
#include &lt;iostream&gt;
#define ARRAY_SIZE 50
using namespace std;

void init(int);
void selection_sort(int[]);

int main(int argc, char** argv) {
    init(ARRAY_SIZE);
    return (EXIT_SUCCESS);
}

void init(int counts) {
    int numbers[counts];
    cout &lt;&lt; &quot;Before sorting: &quot; &lt;&lt; endl;
    for (int i = 0; i &lt; counts; i++) {
        numbers[i] = rand(); // generate a random integer
        cout &lt;&lt; numbers[i] &lt;&lt; endl;
    }
    selection_sort(numbers);
}

void selection_sort(int numbers[]) {
    int minimum = 0;
    int current = 0;
    for (current = 0; current &lt; ARRAY_SIZE - 1; current++) {
        minimum = current;
        for (int i = current + 1; i &lt; ARRAY_SIZE; i++) {
            if (numbers[i] &lt; numbers[minimum]) {
                minimum = i;
            }
        }
        int temp = numbers[minimum]; // swap
        numbers[minimum] = numbers[current];
        numbers[current] = temp;
    }
    cout &lt;&lt; &quot;After sorting: &quot; &lt;&lt; endl;
    for (int i = 0; i &lt; ARRAY_SIZE; i++) {
        cout &lt;&lt; numbers[i] &lt;&lt; endl;
    }
}
[/code]

I&#39;m currently looking at C++. Any criticism?</description>
    
    <lastBuildDate>Fri, 18 Mar 2011 08:53:21 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>I was thinking about going beyond this sorting algorithm and doing the quicksort, gnome sort, shell sort and merge sort.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/12</link>
        <pubDate>Fri, 18 Mar 2011 08:53:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-12</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="384374">
<div class="title">
<div class="quote-controls"></div>
 Evil_:</div>
<blockquote>
<p>retrieve the size with sizeof(numbers) / sizeof(numbers[0])</p>
</blockquote>
</aside>
<p>I actually did that but it always returned 1 because I was carelessly doing [tt]sizeof(numbers)/sizeof(numbers)[/tt] instead of that.</p>
<aside class="quote" data-post="6" data-topic="384374">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>cstdlib not stdlib.h</p>
</blockquote>
</aside>
<p>Thanks, changed.</p>
<p>[quote=“zachera, post:10, topic:384374”]Also, I don’t know if this is relevant, but did you test two numbers in the array being the same? (i.e. 6, 4, 1, 3, <span class="bbcode-b">7</span>, <span class="bbcode-b">7</span>, 9, 8)</p>
<p>I wrote my own sorting algorithm, which is very similar to yours, Rix_, with some modifications. Then again, mostly all C/++ sorting algorithms will be similarly programmed, with some being more terribly coded than others. Hopefully mine isn’t more terrible. I’m a beginner at C++ myself. <a href="http://pastie.org/1684585%5B/quote%5D" rel="nofollow noopener">http://pastie.org/1684585[/quote]</a><br>
Didn’t actually test it with an array of integers of my choice. It should print out normally.</p>
<p>As for your algorithm, you should include the C++ headers (i.e. cstdlib instead of stdlib.h, ctime instead of time.h), not the C ones.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/11</link>
        <pubDate>Fri, 18 Mar 2011 08:07:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-11</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[quote=“Rix_, post:1, topic:384374”]<code>
        int temp = numbers[minimum]; // swap
</code>[/quote]Why not just rename the variable to ‘swap’?</p>
<p>Also, I don’t know if this is relevant, but did you test two numbers in the array being the same? (i.e. 6, 4, 1, 3, <span class="bbcode-b">7</span>, <span class="bbcode-b">7</span>, 9, 8)</p>
<p>[quote=“headlights, post:3, topic:384374”]You should call srand() to initialize the PRNG before using rand().</p>
<aside class="quote">
<blockquote>
<p>array size should be a parameter unless you are told otherwise</p>
</blockquote>
</aside>
<p>It is a parameter. ARRAY_SIZE is just a default value for testing purposes.[/quote]ARRAY_SIZE is a constant in the global scope, not a function parameter.</p>
<p>[quote=“super_, post:7, topic:384374”]if C treats array parameters as pointers (don’t remember) then you would not get expected result evil_[/quote]Yes, C/++ treats it has a pointer.</p>
<p>I wrote my own sorting algorithm, which is very similar to yours, Rix_, with some modifications. Then again, mostly all C/++ sorting algorithms will be similarly programmed, with some being more terribly coded than others. Hopefully mine isn’t more terrible. I’m a beginner at C++ myself. <a href="http://pastie.org/1684585" rel="nofollow noopener">http://pastie.org/1684585</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/10</link>
        <pubDate>Fri, 18 Mar 2011 00:44:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-10</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“super_, post:7, topic:384374”]if C treats array parameters as pointers (don’t remember) then you would not get expected result evil_[/quote]it does:</p>
<pre><code class="lang-auto">
#include &lt;stdio.h&gt;

void test(int test_array[])
{
	printf("[test] size: %d\n", sizeof(test_array) / sizeof(int));
}

int main(int argc, char **argv)
{
	int test_array[] = { 1, 2, 3 };

	printf("[main] size: %d\n", sizeof(test_array) / sizeof(int));

	test(test_array);

	return 0;
}</code></pre>
<blockquote>[main] size: 3
[test] size: 1</blockquote>
<p>evil_: as super_ said, array parameters are treated as pointers, therefore any sizeof operation on the array from inside the function would return sizeof(int) (since a pointer is an integer) rather than returning the total size of data within it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/9</link>
        <pubDate>Thu, 03 Mar 2011 05:20:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>Separate logic from presentation i.e. don’t print out your results inside your sorting algorithm.</p>
<p>You used the same swap algorithm twice, so maybe you should make a separate function for it.</p>
<p>In both methods, you call an initiation method, and inside that method, you call the sort method. What if I wanted to initialize an array without sorting?</p>
<p>Most importantly, the only 2 things you used that were C++ specific was “using namespace std;” and output. Maybe you should learn the spirit of C++ and why a developer would use it instead of C.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/8</link>
        <pubDate>Thu, 03 Mar 2011 03:33:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>if C treats array parameters as pointers (don’t remember) then you would not get expected result evil_</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/7</link>
        <pubDate>Thu, 03 Mar 2011 02:21:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>cstdlib not stdlib.h</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/6</link>
        <pubDate>Mon, 28 Feb 2011 23:50:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@headlights headlights]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/headlights">@headlights</a> wrote:</p>
          <blockquote>
              <p>I should really learn to read the code more thoroughly next time :o. I thought, since init() read the length as a parameter, bubblesort()/selection_sort() did as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/5</link>
        <pubDate>Mon, 28 Feb 2011 20:46:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>[quote=“headlights, post:3, topic:384374”]You should call srand() to initialize the PRNG before using rand().</p>
<aside class="quote">
<blockquote>
<p>array size should be a parameter unless you are told otherwise</p>
</blockquote>
</aside>
<p>It is a parameter. ARRAY_SIZE is just a default value for testing purposes.[/quote]</p>
<pre><code class="lang-auto">void selection_sort(int numbers[]) {
    int minimum = 0;
    int current = 0;
    for (current = 0; current &lt; ARRAY_SIZE - 1; current++) {</code></pre>
<p>No it’s not.  Although I guess you could use some sort of hackup and retrieve the size with sizeof(numbers) / sizeof(numbers[0]), it would still be better to pass the size, or since it’s C++ he could just use a vector</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/4</link>
        <pubDate>Mon, 28 Feb 2011 20:32:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@headlights headlights]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/headlights">@headlights</a> wrote:</p>
          <blockquote>
              <p>You should call srand() to initialize the PRNG before using rand().</p>
<aside class="quote" data-post="2" data-topic="384374">
<div class="title">
<div class="quote-controls"></div>
 frank_:</div>
<blockquote>
<p>array size should be a parameter unless you are told otherwise</p>
</blockquote>
</aside>
<p>It is a parameter. ARRAY_SIZE is just a default value for testing purposes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/3</link>
        <pubDate>Mon, 28 Feb 2011 18:03:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>array size should be a parameter unless you are told otherwise</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/2</link>
        <pubDate>Mon, 28 Feb 2011 10:19:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
      <item>
        <title>[C++] Sorting algorithms</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>Bubblesort:</p>
<p>[code=c++]/* Sorts an array of integers from ascending to</p>
<ul>
<li>descending order using the bubblesort algorithm.<br>
*/</li>
</ul>
<p><span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#define</span> ARRAY_SIZE 50<br>
using namespace std;</p>
<p>void init(int);<br>
void bubblesort(int[]);</p>
<p>int main(int argc, char** argv) {<br>
init(ARRAY_SIZE);<br>
return (EXIT_SUCCESS);<br>
}</p>
<p>void init(int counts) {<br>
int numbers[counts]; // array of integers<br>
cout &lt;&lt; "Before sorting: " &lt;&lt; endl;<br>
for (int i = 0; i &lt; counts; i++) {<br>
numbers[i] = rand(); // generate a random integer<br>
cout &lt;&lt; numbers[i] &lt;&lt; endl;<br>
}<br>
bubblesort(numbers);<br>
}</p>
<p>void bubblesort(int numbers[]) {<br>
bool sorted = false;<br>
while (!sorted) {<br>
sorted = true;<br>
for (int i = 0; i &lt; ARRAY_SIZE - 1; i++) {<br>
if (numbers[i] &gt; numbers[i+1]) {<br>
int temp = numbers[i+1];<br>
numbers[i+1] = numbers[i];<br>
numbers[i] = temp;<br>
sorted = false;<br>
}<br>
}<br>
}<br>
cout &lt;&lt; "After sorting: " &lt;&lt; endl;<br>
for (int i = 0; i &lt; ARRAY_SIZE; i++) {<br>
cout &lt;&lt; numbers[i] &lt;&lt; endl;<br>
}<br>
}[/code]</p>
<p>Selection-sort:</p>
<p>[code=c++]/* Sorts an array of integers from ascending to</p>
<ul>
<li>descending order using the selection-sort algorithm.<br>
*/</li>
</ul>
<p><span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#define</span> ARRAY_SIZE 50<br>
using namespace std;</p>
<p>void init(int);<br>
void selection_sort(int[]);</p>
<p>int main(int argc, char** argv) {<br>
init(ARRAY_SIZE);<br>
return (EXIT_SUCCESS);<br>
}</p>
<p>void init(int counts) {<br>
int numbers[counts];<br>
cout &lt;&lt; "Before sorting: " &lt;&lt; endl;<br>
for (int i = 0; i &lt; counts; i++) {<br>
numbers[i] = rand(); // generate a random integer<br>
cout &lt;&lt; numbers[i] &lt;&lt; endl;<br>
}<br>
selection_sort(numbers);<br>
}</p>
<p>void selection_sort(int numbers[]) {<br>
int minimum = 0;<br>
int current = 0;<br>
for (current = 0; current &lt; ARRAY_SIZE - 1; current++) {<br>
minimum = current;<br>
for (int i = current + 1; i &lt; ARRAY_SIZE; i++) {<br>
if (numbers[i] &lt; numbers[minimum]) {<br>
minimum = i;<br>
}<br>
}<br>
int temp = numbers[minimum]; // swap<br>
numbers[minimum] = numbers[current];<br>
numbers[current] = temp;<br>
}<br>
cout &lt;&lt; "After sorting: " &lt;&lt; endl;<br>
for (int i = 0; i &lt; ARRAY_SIZE; i++) {<br>
cout &lt;&lt; numbers[i] &lt;&lt; endl;<br>
}<br>
}<br>
[/code]</p>
<p>I’m currently looking at C++. Any criticism?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-sorting-algorithms/384374/1</link>
        <pubDate>Mon, 28 Feb 2011 09:42:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-384374-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-sorting-algorithms/384374.rss">[C++] Sorting algorithms</source>
      </item>
  </channel>
</rss>
