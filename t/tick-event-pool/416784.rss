<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Tick Event Pool</title>
    <link>https://forum.moparisthebest.com/t/tick-event-pool/416784</link>
    <description>So I was recently looking at how to implement Grahams Event Manager (I know how, I was just posting :P) and I thought about restarting my old tool set (little utilities I made a while ago). When I found this, I tested it and instantly declared it deprecated (I will be remaking it). I just thought you might want to look at it (for the lol&#39;s).

[code=java]package org.spattz.util;

import java.util.ArrayList;
import java.util.List;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
 * This class executes runnable events after a certain amount of
 * time a certain amount of times. This is called &#39;EventPool&#39; due
 * to it running events in a cached thread pool, which increases
 * in size whenever a new event is called, and when an event ends
 * the thread is which is was ran on is re-used, making the events
 * run faster. Inactive threads are removed after 60 seconds to
 * stop the increasing use of memory.
 * @deprecated This is not, in terms of speed, accurate. This can
 * be used in loops which require a roughly accurate speed (can
 * accept ~50ms of fluctuation).
 * @author Andrew
 */
@Deprecated
public class EventPool implements Runnable {

    /**
     * This is the &#39;ExecutorService&#39;. This calls the runnable
     * tasks whenever necessary.
     */
    private ExecutorService service = Executors.newCachedThreadPool();
    /**
     * This is the list in which the events are held and read
     * off until they need to be called.
     */
    private List&lt;Object[]&gt; waitingList = new ArrayList&lt;Object[]&gt;();
    /**
     * This is whether the EventPool should die. It is set to
     * true when the EventPool is closed.
     */
    private boolean shouldDie = false;
    /**
     * This is the speed in which the EventPool should tick.
     */
    private long tickSpeed;

    /**
     * @param time This is the time in which the EventPool should
     * waiting (the amount of time in which a tick takes). This is
     * in milliseconds. Be reasonable in the amount of time in 
     * which the EventPool should tick. Only non-negative numbers
     * above 0 are acceptable.
     */
    public EventPool(long time) {
        tickSpeed = time;
    }
    
    /**
     * This submits an event to be ran after a certain amount
     * of ticks, a certain amount of times.
     * @param runnable This is the runnable task which is ran
     * each time a certain amount of ticks occurs.
     * @param ticks This is the amount of ticks it takes for
     * the runnable task to run. For example, if the tick speed
     * is set at &#39;1000ms&#39;, and the &#39;ticks&#39; are set as &#39;3&#39;, then
     * the runnable will be ran every 3 seconds.
     * @param timesToRun This is the amount of times the event
     * should occur. When this is set to -1, the event will run
     * an infinite amount of times. Other than this case, this
     * number MUST be non-negative. This number cannot be zero
     * or the thread in which the event pool is running will
     * freeze forever.
     */
    public void submit(Runnable runnable, int ticks, int timesToRun) {
        Object object[] = {runnable, ticks, ticks, timesToRun};
        waitingList.add(object);
    }

    /**
     * This is called on a new thread when you are ready to
     * start the EventPool. Runnable events are not required
     * to be submitted at any time.
     */
    @Override
    public void run() {
        while (!shouldDie) {
            try {
                long time = System.currentTimeMillis();
                for (int loop = 0; loop &lt; waitingList.size(); loop++) {
                    Object objects[] = waitingList.get(loop);
                    objects[1] = (int) objects[1] - 1;
                    if ((int) objects[1] == 0) {
                        objects[1] = (int) objects[2];
                        service.submit((Runnable) waitingList.get(loop)[0]);
                        objects[3] = (int) objects[3] - 1;
                        if (objects[3] == 0) {
                            waitingList.remove(loop);
                            continue;
                        } else if (objects[3] == -1) {
                            objects[3] = 0;
                        }
                    }
                    waitingList.remove(loop);
                    waitingList.add(objects);
                }
                time = (tickSpeed - (System.currentTimeMillis() - time));
                Thread.sleep(time);
                System.out.println(time);
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    /**
     * This attempts to close and stop the EventPool. The 
     * ExecutorService is shutdown (disallowing anymore tasks
     * to be submitted), the waiting list is cleared (removing
     * all tasks) and the loop is killed.
     */
    public void shutdown() {
        service.shutdown();
        waitingList.clear();
        shouldDie = true;
    }
}[/code]

Although I have a few ideas myself, I was wondering what ideas you guys have?</description>
    
    <lastBuildDate>Thu, 06 Oct 2011 09:32:11 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@Svitkona Svitkona]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/svitkona">@Svitkona</a> wrote:</p>
          <blockquote>
              <p>Make an event manager class with a Queue of Event objects and make a list of listeners to that event then when an event triggers check the listeners and call a method ( onEvent() )?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/12</link>
        <pubDate>Thu, 06 Oct 2011 09:32:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-12</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@Pure_Slay Pure Slay]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure_slay">@Pure_Slay</a> wrote:</p>
          <blockquote>
              <p>[quote=“Coelho, post:10, topic:416784”]<code>
private BlockingQueue&lt;Event&gt; queue = new LinkedBlockingQueue&lt;Event&gt;();
</code></p>
<pre><code class="lang-auto">public void run() {
    while(true) {
        try {
            Event event = this.queue.take();
            if(event != null) {
                event.run();
                if(event.isRunning()) {
                    this.queue.put(event);
                }
            }
        } catch(Exception exception) {
            exception.printStackTrace();
        }
    }
}</code></pre>
<pre><code class="lang-auto">public class Event implements Runnable {

    private Runnable runnable;
    private int tickRate;
    private int ticksLeft;
    private int repetitions;
    private boolean running;
    
    public Event(Runnable runnable, int tickRate, int repetitions) {
        if(tickRate &lt; 0) {
            throw new IllegalArgumentException("Rate must be positive or 0");
        }
        if(repetitions &lt;= 0) {
            throw new IllegalArgumentException("Repetitions must be positive");
        }
        this.runnable = runnable;
        this.tickRate = tickRate;
        this.ticksLeft = tickRate;
        this.repetitions = repetitions;
        
    }

    public void run() {
        if(!this.running) {
            throw new IllegalStateException("Not running.");
        }
        if(this.ticksLeft == 0) {
            if(this.repetitions-- == 0) {
                this.running = false;
            }
            this.runnable.run();
            this.ticksLeft = this.tickRate;
        } else {
            this.ticksLeft--;
        }
    }

    public boolean isRunning() {
        return this.running;
    }

}</code></pre>
<p>Simpler. The run method (quote 2/3) would have to be redone though, as it was thrown together and is fairly crap. I wrote it in my webbrowser, so excuse the spaces.[/quote]</p>
<p>Event’s do not run. They don’t use the word running, run, execute, or anything related. All they do is trigger an action or ‘drive’ an action. Either call it handle, trigger, or drive. Atleast those are using somewhat related words to the use of an event…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/11</link>
        <pubDate>Thu, 06 Oct 2011 03:49:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-11</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@Coelho Coelho]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coelho">@Coelho</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">private BlockingQueue&lt;Event&gt; queue = new LinkedBlockingQueue&lt;Event&gt;();</code></pre>
<pre><code class="lang-auto">public void run() {
    while(true) {
        try {
            Event event = this.queue.take();
            if(event != null) {
                event.run();
                if(event.isRunning()) {
                    this.queue.put(event);
                }
            }
        } catch(Exception exception) {
            exception.printStackTrace();
        }
    }
}</code></pre>
<pre><code class="lang-auto">public class Event implements Runnable {

    private Runnable runnable;
    private int tickRate;
    private int ticksLeft;
    private int repetitions;
    private boolean running;
    
    public Event(Runnable runnable, int tickRate, int repetitions) {
        if(tickRate &lt; 0) {
            throw new IllegalArgumentException("Rate must be positive or 0");
        }
        if(repetitions &lt;= 0) {
            throw new IllegalArgumentException("Repetitions must be positive");
        }
        this.runnable = runnable;
        this.tickRate = tickRate;
        this.ticksLeft = tickRate;
        this.repetitions = repetitions;
        
    }

    public void run() {
        if(!this.running) {
            throw new IllegalStateException("Not running.");
        }
        if(this.ticksLeft == 0) {
            if(this.repetitions-- == 0) {
                this.running = false;
            }
            this.runnable.run();
            this.ticksLeft = this.tickRate;
        } else {
            this.ticksLeft--;
        }
    }

    public boolean isRunning() {
        return this.running;
    }

}</code></pre>
<p>Simpler. The run method (quote 2/3) would have to be redone though, as it was thrown together and is fairly crap. I wrote it in my webbrowser, so excuse the spaces.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/10</link>
        <pubDate>Tue, 04 Oct 2011 22:47:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-10</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p><a href="http://download.oracle.com/javase/7/docs/api/java/util/concurrent/DelayQueue.html" class="onebox" target="_blank" rel="nofollow noopener">http://download.oracle.com/javase/7/docs/api/java/util/concurrent/DelayQueue.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/9</link>
        <pubDate>Tue, 04 Oct 2011 22:46:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-9</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="7" data-topic="416784">
<div class="title">
<div class="quote-controls"></div>
 ytuio9`:</div>
<blockquote>
<p>Queue ?</p>
</blockquote>
</aside>
<p>I need to store the information of the amount of ticks to take, and how many ticks the runnable takes to execute.</p>
<p>Having 3 Queues would be retarded.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/8</link>
        <pubDate>Tue, 04 Oct 2011 22:06:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-8</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@Svitkona Svitkona]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/svitkona">@Svitkona</a> wrote:</p>
          <blockquote>
              <p>Queue ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/7</link>
        <pubDate>Tue, 04 Oct 2011 15:16:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-7</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>Right. That’s good but what about the Object[] which is being used? I think it’s fucking stupid and needs to be replaced. What about a hashset or something (seems heavyweight)?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/6</link>
        <pubDate>Mon, 03 Oct 2011 05:52:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-6</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Be better to just stay away from using ArrayList and use a Queue. Why are you arrays to encapsulate data? (Already said but meh, just wondering) Not a terrible design as everyone is saying but I could see some improvements.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/5</link>
        <pubDate>Mon, 03 Oct 2011 05:42:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-5</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>[quote=“Pure Slay, post:3, topic:416784”]Event’s don’t ‘run’ they ‘trigger’ tasks.</p>
<ul>
<li>terrible design as stated, stop using arrays for scheduled events/tasks.[/quote]<br>
It implements runnable…<br>
and then what should I use exactly?</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/4</link>
        <pubDate>Mon, 03 Oct 2011 03:32:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-4</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@Pure_Slay Pure Slay]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure_slay">@Pure_Slay</a> wrote:</p>
          <blockquote>
              <p>Event’s don’t ‘run’ they ‘trigger’ tasks.</p>
<ul>
<li>terrible design as stated, stop using arrays for scheduled events/tasks.</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/3</link>
        <pubDate>Sun, 02 Oct 2011 23:43:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-3</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Stop using arrays for scheduled tasks and encapsulate the data in objects.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/2</link>
        <pubDate>Sun, 02 Oct 2011 18:55:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-2</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
      <item>
        <title>Tick Event Pool</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>So I was recently looking at how to implement Grahams Event Manager (I know how, I was just posting :P) and I thought about restarting my old tool set (little utilities I made a while ago). When I found this, I tested it and instantly declared it deprecated (I will be remaking it). I just thought you might want to look at it (for the lol’s).</p>
<p>[code=java]package org.spattz.util;</p>
<p>import java.util.ArrayList;<br>
import java.util.List;<br>
import java.util.concurrent.ExecutorService;<br>
import java.util.concurrent.Executors;</p>
<p>/**</p>
<ul>
<li>
<p>This class executes runnable events after a certain amount of</p>
</li>
<li>
<p>time a certain amount of times. This is called ‘EventPool’ due</p>
</li>
<li>
<p>to it running events in a cached thread pool, which increases</p>
</li>
<li>
<p>in size whenever a new event is called, and when an event ends</p>
</li>
<li>
<p>the thread is which is was ran on is re-used, making the events</p>
</li>
<li>
<p>run faster. Inactive threads are removed after 60 seconds to</p>
</li>
<li>
<p>stop the increasing use of memory.</p>
</li>
<li>
<p><a class="mention" href="/u/deprecated">@deprecated</a> This is not, in terms of speed, accurate. This can</p>
</li>
<li>
<p>be used in loops which require a roughly accurate speed (can</p>
</li>
<li>
<p>accept ~50ms of fluctuation).</p>
</li>
<li>
<p><span class="mention">@author</span> Andrew<br>
*/<br>
<a class="mention" href="/u/deprecated">@Deprecated</a><br>
public class EventPool implements Runnable {</p>
<p>/**</p>
<ul>
<li>This is the ‘ExecutorService’. This calls the runnable</li>
<li>tasks whenever necessary.<br>
<em>/<br>
private ExecutorService service = Executors.newCachedThreadPool();<br>
/</em>*</li>
<li>This is the list in which the events are held and read</li>
<li>off until they need to be called.<br>
<em>/<br>
private List&lt;Object[]&gt; waitingList = new ArrayList&lt;Object[]&gt;();<br>
/</em>*</li>
<li>This is whether the EventPool should die. It is set to</li>
<li>true when the EventPool is closed.<br>
<em>/<br>
private boolean shouldDie = false;<br>
/</em>*</li>
<li>This is the speed in which the EventPool should tick.<br>
*/<br>
private long tickSpeed;</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> time This is the time in which the EventPool should</li>
<li>waiting (the amount of time in which a tick takes). This is</li>
<li>in milliseconds. Be reasonable in the amount of time in</li>
<li>which the EventPool should tick. Only non-negative numbers</li>
<li>above 0 are acceptable.<br>
*/<br>
public EventPool(long time) {<br>
tickSpeed = time;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This submits an event to be ran after a certain amount</li>
<li>of ticks, a certain amount of times.</li>
<li>
<a class="mention" href="/u/param">@param</a> runnable This is the runnable task which is ran</li>
<li>each time a certain amount of ticks occurs.</li>
<li>
<a class="mention" href="/u/param">@param</a> ticks This is the amount of ticks it takes for</li>
<li>the runnable task to run. For example, if the tick speed</li>
<li>is set at ‘1000ms’, and the ‘ticks’ are set as ‘3’, then</li>
<li>the runnable will be ran every 3 seconds.</li>
<li>
<a class="mention" href="/u/param">@param</a> timesToRun This is the amount of times the event</li>
<li>should occur. When this is set to -1, the event will run</li>
<li>an infinite amount of times. Other than this case, this</li>
<li>number MUST be non-negative. This number cannot be zero</li>
<li>or the thread in which the event pool is running will</li>
<li>freeze forever.<br>
*/<br>
public void submit(Runnable runnable, int ticks, int timesToRun) {<br>
Object object[] = {runnable, ticks, ticks, timesToRun};<br>
waitingList.add(object);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This is called on a new thread when you are ready to</li>
<li>start the EventPool. Runnable events are not required</li>
<li>to be submitted at any time.<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void run() {<br>
while (!shouldDie) {<br>
try {<br>
long time = System.currentTimeMillis();<br>
for (int loop = 0; loop &lt; waitingList.size(); loop++) {<br>
Object objects[] = waitingList.get(loop);<br>
objects[1] = (int) objects[1] - 1;<br>
if ((int) objects[1] == 0) {<br>
objects[1] = (int) objects[2];<br>
service.submit((Runnable) waitingList.get(loop)[0]);<br>
objects[3] = (int) objects[3] - 1;<br>
if (objects[3] == 0) {<br>
waitingList.remove(loop);<br>
continue;<br>
} else if (objects[3] == -1) {<br>
objects[3] = 0;<br>
}<br>
}<br>
waitingList.remove(loop);<br>
waitingList.add(objects);<br>
}<br>
time = (tickSpeed - (System.currentTimeMillis() - time));<br>
Thread.sleep(time);<br>
System.out.println(time);<br>
} catch (Exception ex) {<br>
ex.printStackTrace();<br>
}<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>This attempts to close and stop the EventPool. The</li>
<li>ExecutorService is shutdown (disallowing anymore tasks</li>
<li>to be submitted), the waiting list is cleared (removing</li>
<li>all tasks) and the loop is killed.<br>
*/<br>
public void shutdown() {<br>
service.shutdown();<br>
waitingList.clear();<br>
shouldDie = true;<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>Although I have a few ideas myself, I was wondering what ideas you guys have?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tick-event-pool/416784/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tick-event-pool/416784/1</link>
        <pubDate>Sun, 02 Oct 2011 13:04:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-416784-1</guid>
        <source url="https://forum.moparisthebest.com/t/tick-event-pool/416784.rss">Tick Event Pool</source>
      </item>
  </channel>
</rss>
