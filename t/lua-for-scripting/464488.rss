<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lua for Scripting</title>
    <link>https://forum.moparisthebest.com/t/lua-for-scripting/464488</link>
    <description>I&#39;ve decided to try Lua for fun after Spel recommended it to me. Lua is a pretty cool language, and although it&#39;s much more commonly integrated with C (as both languages are very small and lightweight), it also works fine with Java.

The script class I created:
[code=java]
import org.keplerproject.luajava.LuaException;
import org.keplerproject.luajava.LuaState;
import org.keplerproject.luajava.LuaStateFactory;

/**
 * LuaScript.java
 * @author Mew
 *
 * Provides a slightly easier and more user-friendly
 * approach in the integration of Lua scripting
 * (using LuaJava) in standard Java applications.
 */

public class LuaScript {

	/**
	 * The current &lt;code&gt;LuaState&lt;/code&gt;.
	 */
	private LuaState luaState;

	/**
	 * The path to the scripts directory.
	 */
	public static final String PATH = &quot;./&quot;;

	/**
	 *
	 * The constructor of this class, which
	 * initializes the &lt;code&gt;LuaState&lt;/code&gt;.
	 */
	public LuaScript(final String file) {
		luaState = LuaStateFactory.newLuaState();
		luaState.openLibs();
		luaState.LdoFile(PATH + file);
	}

	/**
	 *
	 * Executes a function in the Lua script.
	 * @param function	The name of the function.
	 * @param args		A varargs of Object as parameters.
	 */
	public void executeFunction(final String function, final Object... args) {
		luaState.getGlobal(function);
		for (Object o : args) {
			try {
				luaState.pushObjectValue(o);
			} catch (LuaException le) {
				le.printStackTrace();
			}
		}
		luaState.call(args.length, 0);
	}

	/**
	 * Closes the &lt;code&gt;LuaState&lt;/code&gt;.
	 */
	public void close() {
		luaState.close();
	}
}[/code]

A demonstration:
[code=java]
import org.keplerproject.luajava.LuaException;
import org.keplerproject.luajava.LuaState;
import org.keplerproject.luajava.LuaStateFactory;

/**
 * LuaScriptDemo.java
 * @author Mew
 *
 * Compile: javac -cp &quot;luajava-1.1.jar&quot; *.java
 * To Run: java -cp luajava-1.1.jar:. LuaScriptDemo
 */

public class LuaScriptDemo {

	public static void main(String[] args) {
		LuaScript ls = new LuaScript(&quot;utils.lua&quot;);
		ls.executeFunction(&quot;print_type&quot;, &quot;sup123&quot;);
		ls.executeFunction(&quot;print_type&quot;, 12345);
		ls.executeFunction(&quot;print_type&quot;, Long.MAX_VALUE);
		ls.executeFunction(&quot;boost_exp&quot;, new Player(0, &quot;Whac&quot;));
		ls.executeFunction(&quot;primes_test&quot;);
		ls.close();
	}
}[/code]

The script of the demonstration:
[code=lua]
function print_type(o)
	print(type(o) .. &quot;: &quot; .. o)
end

function boost_exp(plr)
	print(&#39;Old Exp: &#39; .. plr:getExp())
	plr:addExp(1000)
	print(&#39;New Exp: &#39; .. plr:getExp())
end

function is_prime(num)
	if (num % 2 == 0 and num ~= 2) or num == 1 then
		return false
	end
	for i = 2, math.sqrt(num) do
		if num % i == 0 then
			return false
		end
	end
	return true
end

function primes_test()
	local count = 2000000
	print(&#39;Calculating primes up to &#39; .. count .. &#39;..&#39;)

	for i = 1, count do
		is_prime(i)
	end
end[/code]

Player class (used as an example of a Java object in the aforementioned demonstration):
[code=java]
/**
 * Player.java
 * @author Mew
 *
 * Represents a player.
 *
 */

public class Player extends Entity {
	
	private double exp;

	public Player(int id, String name) {
		super(id, name);
		exp = 0;
	}

	public double getExp() {
		return exp;
	}

	public void addExp(double exp) {
		this.exp += exp;
	}
}[/code]

Output:
&lt;blockquote&gt;string: sup123
number: 12345
number: 9.2233720368548e+18
Old Exp: 0
New Exp: 1000
Calculating primes up to 2000000..

real	0m6.823s
user	0m6.828s
sys	0m0.041s&lt;/blockquote&gt;

It&#39;s a pain in the ass to build LuaJava though.. I have included the JAR and the Mac OS X JNILIB and after some time I got it working successfully on my Mac. I haven&#39;t tried the DLL inside the archive, but I believe it should work for 32 bit Windows operating systems (it&#39;s not compatible with 64 bit Windows). Is there an alternative way to build LuaJava other than installing VC++?

http://www.keplerproject.org/luajava/manual.html

http://up.ht/PbuahS

Thoughts on my implementation or the general usage of Lua as a scripting language in Java applications?</description>
    
    <lastBuildDate>Mon, 22 Oct 2012 15:38:23 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/lua-for-scripting/464488.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lua for Scripting</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>[quote=“iDominic, post:2, topic:464488”]This seems very win.<br>
I will make us of this, yet.[/quote]</p>
<p>Thanks. I actually found this library to be a little less than decent depite the fact that it was developed by the developers of Lua (if I recall correctly) due to the fact that it handles runtime exceptions pretty poorly (as it just terminates the entire JVM whenever there is a parsing error which is extremely stupid in my opinion; it should at least throw an exception). Although I think I’m going to give up Lua for now and focus on other languages, I did find this before I left; I found it a lot better in my opinion at least. Hope this helps:</p>
<p><aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://a.fsdn.com/con/img/sandiego/logo-180x180.png" class="site-icon" width="180" height="180">
      <a href="https://sourceforge.net/projects/luaj/" target="_blank" rel="nofollow noopener">SourceForge</a>
  </header>
  <article class="onebox-body">
    <img src="https://a.fsdn.com/allura/p/luaj/icon?1516658750" class="thumbnail onebox-avatar" width="48" height="48">

<h3><a href="https://sourceforge.net/projects/luaj/" target="_blank" rel="nofollow noopener">Luaj</a></h3>

<p>Download Luaj for free.  Lightweight, fast, Java-centric Lua interpreter written for JME and JSE, with string, table, package, math, io, os, debug, coroutine &amp; luajava libraries, JSR-223 bindings, all metatags, weak tables and unique direct...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<a href="http://luaj.org/luaj/README.html" class="onebox" target="_blank" rel="nofollow noopener">http://luaj.org/luaj/README.html</a></p>
<p>I still find the regular Lua much faster (and obviously that is not surprising), despite the benchmarks on the official website.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lua-for-scripting/464488/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lua-for-scripting/464488/3</link>
        <pubDate>Mon, 22 Oct 2012 15:38:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464488-3</guid>
        <source url="https://forum.moparisthebest.com/t/lua-for-scripting/464488.rss">Lua for Scripting</source>
      </item>
      <item>
        <title>Lua for Scripting</title>
        <dc:creator><![CDATA[@iDominic iDominic]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/idominic">@iDominic</a> wrote:</p>
          <blockquote>
              <p>This seems very win.<br>
I will make us of this, yet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lua-for-scripting/464488/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lua-for-scripting/464488/2</link>
        <pubDate>Mon, 22 Oct 2012 15:12:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464488-2</guid>
        <source url="https://forum.moparisthebest.com/t/lua-for-scripting/464488.rss">Lua for Scripting</source>
      </item>
      <item>
        <title>Lua for Scripting</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>I’ve decided to try Lua for fun after Spel recommended it to me. Lua is a pretty cool language, and although it’s much more commonly integrated with C (as both languages are very small and lightweight), it also works fine with Java.</p>
<p>The script class I created:</p>
<p>[code=java]<br>
import org.keplerproject.luajava.LuaException;<br>
import org.keplerproject.luajava.LuaState;<br>
import org.keplerproject.luajava.LuaStateFactory;</p>
<p>/**</p>
<ul>
<li>LuaScript.java</li>
<li>
<span class="mention">@author</span> Mew</li>
<li>
</li>
<li>Provides a slightly easier and more user-friendly</li>
<li>approach in the integration of Lua scripting</li>
<li>(using LuaJava) in standard Java applications.<br>
*/</li>
</ul>
<p>public class LuaScript {</p>
<pre><code>/**
 * The current &lt;code&gt;LuaState&lt;/code&gt;.
 */
private LuaState luaState;

/**
 * The path to the scripts directory.
 */
public static final String PATH = "./";

/**
 *
 * The constructor of this class, which
 * initializes the &lt;code&gt;LuaState&lt;/code&gt;.
 */
public LuaScript(final String file) {
	luaState = LuaStateFactory.newLuaState();
	luaState.openLibs();
	luaState.LdoFile(PATH + file);
}

/**
 *
 * Executes a function in the Lua script.
 * @param function	The name of the function.
 * @param args		A varargs of Object as parameters.
 */
public void executeFunction(final String function, final Object... args) {
	luaState.getGlobal(function);
	for (Object o : args) {
		try {
			luaState.pushObjectValue(o);
		} catch (LuaException le) {
			le.printStackTrace();
		}
	}
	luaState.call(args.length, 0);
}

/**
 * Closes the &lt;code&gt;LuaState&lt;/code&gt;.
 */
public void close() {
	luaState.close();
}
</code></pre>
<p>}[/code]</p>
<p>A demonstration:</p>
<p>[code=java]<br>
import org.keplerproject.luajava.LuaException;<br>
import org.keplerproject.luajava.LuaState;<br>
import org.keplerproject.luajava.LuaStateFactory;</p>
<p>/**</p>
<ul>
<li>LuaScriptDemo.java</li>
<li>
<span class="mention">@author</span> Mew</li>
<li>
</li>
<li>Compile: javac -cp “luajava-1.1.jar” *.java</li>
<li>To Run: java -cp luajava-1.1.jar:. LuaScriptDemo<br>
*/</li>
</ul>
<p>public class LuaScriptDemo {</p>
<pre><code>public static void main(String[] args) {
	LuaScript ls = new LuaScript("utils.lua");
	ls.executeFunction("print_type", "sup123");
	ls.executeFunction("print_type", 12345);
	ls.executeFunction("print_type", Long.MAX_VALUE);
	ls.executeFunction("boost_exp", new Player(0, "Whac"));
	ls.executeFunction("primes_test");
	ls.close();
}
</code></pre>
<p>}[/code]</p>
<p>The script of the demonstration:</p>
<p>[code=lua]<br>
function print_type(o)<br>
print(type(o) … ": " … o)<br>
end</p>
<p>function boost_exp(plr)<br>
print('Old Exp: ’ … plr:getExp())<br>
plr:addExp(1000)<br>
print('New Exp: ’ … plr:getExp())<br>
end</p>
<p>function is_prime(num)<br>
if (num % 2 == 0 and num ~= 2) or num == 1 then<br>
return false<br>
end<br>
for i = 2, math.sqrt(num) do<br>
if num % i == 0 then<br>
return false<br>
end<br>
end<br>
return true<br>
end</p>
<p>function primes_test()<br>
local count = 2000000<br>
print('Calculating primes up to ’ … count … ‘…’)</p>
<pre><code>for i = 1, count do
	is_prime(i)
end
</code></pre>
<p>end[/code]</p>
<p>Player class (used as an example of a Java object in the aforementioned demonstration):</p>
<p>[code=java]<br>
/**</p>
<ul>
<li>Player.java</li>
<li>
<span class="mention">@author</span> Mew</li>
<li>
</li>
<li>Represents a player.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class Player extends Entity {</p>
<pre><code>private double exp;

public Player(int id, String name) {
	super(id, name);
	exp = 0;
}

public double getExp() {
	return exp;
}

public void addExp(double exp) {
	this.exp += exp;
}
</code></pre>
<p>}[/code]</p>
<p>Output:</p>
<blockquote>string: sup123
number: 12345
number: 9.2233720368548e+18
Old Exp: 0
New Exp: 1000
Calculating primes up to 2000000..
<p>real	0m6.823s<br>
user	0m6.828s<br>
sys	0m0.041s</p>
</blockquote>
<p>It’s a pain in the ass to build LuaJava though… I have included the JAR and the Mac OS X JNILIB and after some time I got it working successfully on my Mac. I haven’t tried the DLL inside the archive, but I believe it should work for 32 bit Windows operating systems (it’s not compatible with 64 bit Windows). Is there an alternative way to build LuaJava other than installing VC++?</p>
<p><a href="http://www.keplerproject.org/luajava/manual.html" class="onebox" target="_blank" rel="nofollow noopener">http://www.keplerproject.org/luajava/manual.html</a></p>
<p><a href="http://up.ht/PbuahS" class="onebox" target="_blank" rel="nofollow noopener">http://up.ht/PbuahS</a></p>
<p>Thoughts on my implementation or the general usage of Lua as a scripting language in Java applications?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lua-for-scripting/464488/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lua-for-scripting/464488/1</link>
        <pubDate>Thu, 18 Oct 2012 06:32:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-464488-1</guid>
        <source url="https://forum.moparisthebest.com/t/lua-for-scripting/464488.rss">Lua for Scripting</source>
      </item>
  </channel>
</rss>
