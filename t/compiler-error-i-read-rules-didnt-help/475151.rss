<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compiler error, I read rules, didn&#39;t help</title>
    <link>https://forum.moparisthebest.com/t/compiler-error-i-read-rules-didnt-help/475151</link>
    <description>[CODE]src\server\model\items\ItemAssistant.java:247: error: cannot find symbol
                PvPDrops.handleDrops(c);
                        ^
  symbol:   method handleDrops(Client)
  location: variable PvPDrops of type int[]
src\server\model\players\PvPHandler.java:45: error: cannot find symbol
                        difference = (int)player.getCombatLevel() + player.wildL
evel;
                                                ^
 1 error
Press any key to continue . . .[/CODE]

Got these while following this tutorial: 

[url=http://www.rune-server.org/runescape-development/google/tutorials/448327-real-bounty-hunter-worlds-release.html]http://www.rune-server.org/runescape-development/google/tutorials/448327-real-bounty-hunter-worlds-release.html[/url]

The first error referred to this section of code.
[CODE]public static void handleDrops(Client player) {
		Client o = (Client) PlayerHandler.players[player.killerId];
		if (o != null) {[/CODE]
Does that mean that it&#39;s trying to access the above code, and  can&#39;t because the name is different? (c) vs (Client Player)? What do I need to change??

[/CODE]


ItemAssistant.java

[CODE]package server.model.items;

import server.Config;
import server.Server;
import server.model.players.Client;
import server.util.Misc;
import server.model.players.combat.range.DwarfMultiCannon;
import server.model.players.*;
import server.model.players.Player;
import server.model.players.PvPDrops;
public class ItemAssistant {

	private Client c;
	
	public ItemAssistant(Client client) {
		this.c = client;
	}
		
	/**
	Items
	**/
	
	public int[][] brokenBarrows = {{4708,4860},{4710,4866},{4712,4872},{4714,4878},{4716,4884},
	{4720,4896},{4718,4890},{4720,4896},{4722,4902},{4732,4932},{4734,4938},{4736,4944},{4738,4950},
	{4724,4908},{4726,4914},{4728,4920},{4730,4926},{4745,4956},{4747,4926},{4749,4968},{4751,4794},
	{4753,4980},{4755,4986},{4757,4992},{4759,4998}};
	
	public void resetItems(int WriteFrame) {
		synchronized(c) {
			if(c.getOutStream() != null &amp;&amp; c != null) {
				c.getOutStream().createFrameVarSizeWord(53);
				c.getOutStream().writeWord(WriteFrame);
				c.getOutStream().writeWord(c.playerItems.length);
				for (int i = 0; i &lt; c.playerItems.length; i++) {
					if(c.playerItemsN[i] &gt; 254) {
						c.getOutStream().writeByte(255); 		
						c.getOutStream().writeDWord_v2(c.playerItemsN[i]);
					} else {
						c.getOutStream().writeByte(c.playerItemsN[i]);
					}
					c.getOutStream().writeWordBigEndianA(c.playerItems[i]); 
				}
				c.getOutStream().endFrameVarSizeWord();
				c.flushOutStream();
			}
		}
	}
	
	/**
	 * Adds an item to the bank without checking if the player has it in there inventory
	 * @param itemId the id of the item were banking
	 * @param amount amount of items to bank
	 */
	public void addItemToBank(int itemId, int amount) {
		for (int i = 0; i &lt; Config.BANK_SIZE; i++) {
			if (c.bankItems[i] &lt;= 0 || c.bankItems[i] == itemId + 1
					&amp;&amp; c.bankItemsN[i] + amount &lt; Integer.MAX_VALUE) {
				c.bankItems[i] = itemId + 1;
				c.bankItemsN[i] += amount;
				resetBank();
				return;
			}
		}
	}
	
	public int getItemCount(int itemID) {
		int count = 0;	
		for (int j = 0; j &lt; c.playerItems.length; j++) {
			if (c.playerItems[j] == itemID + 1) {
				count += c.playerItemsN[j];
			}		
		}
		return count;
	}
	
	public void writeBonus() {
		int offset = 0;
		String send = &quot;&quot;;
		for (int i = 0; i &lt; c.playerBonus.length; i++) {
			if (c.playerBonus[i] &gt;= 0) {
				send = BONUS_NAMES[i]+&quot;: +&quot;+c.playerBonus[i];
			} else {
				send = BONUS_NAMES[i]+&quot;: -&quot;+java.lang.Math.abs(c.playerBonus[i]);
			}

			if (i == 10) {
				offset = 1;
			}
			c.getPA().sendFrame126(send, (1675+i+offset));
		}

	}
	
	public int getTotalCount(int itemID) {
		int count = 0;	
		for (int j = 0; j &lt; c.playerItems.length; j++) {
			if (Item.itemIsNote[itemID+1]) {
				if (itemID+2 == c.playerItems[j])
					count += c.playerItemsN[j];
			} 
			if (!Item.itemIsNote[itemID+1]) {
				if (itemID+1 == c.playerItems[j]) {
					count += c.playerItemsN[j];
				}
			}
		}
		for (int j = 0; j &lt; c.bankItems.length; j++) {
			if (c.bankItems[j] == itemID + 1) {
				count += c.bankItemsN[j];
			}		
		}
		return count;
	}
	
	public void sendItemsKept() {
		synchronized(c) {
			if(c.getOutStream() != null &amp;&amp; c != null ) {
				c.getOutStream().createFrameVarSizeWord(53);
				c.getOutStream().writeWord(6963);
				c.getOutStream().writeWord(c.itemKeptId.length);
				for (int i = 0; i &lt; c.itemKeptId.length; i++) {
					if(c.playerItemsN[i] &gt; 254) {
						c.getOutStream().writeByte(255); 
						c.getOutStream().writeDWord_v2(1);
					} else {
						c.getOutStream().writeByte(1);
					}
					if(c.itemKeptId[i] &gt; 0) {
					   c.getOutStream().writeWordBigEndianA(c.itemKeptId[i]+1);
					} else {
						c.getOutStream().writeWordBigEndianA(0);
					}
				}
				c.getOutStream().endFrameVarSizeWord();   
				c.flushOutStream();
			}
		}
    }
	
	
	/**
	* Item kept on death
	**/
	
	public void keepItem(int keepItem, boolean deleteItem) { 	
		int value = 0;
		int item = 0;
		int slotId = 0;
		boolean itemInInventory = false;
		for(int i = 0; i &lt; c.playerItems.length; i++) {
			if(c.playerItems[i]-1 &gt; 0) {
				int inventoryItemValue = c.getShops().getItemShopValue(c.playerItems[i] - 1);
				if(inventoryItemValue &gt; value &amp;&amp; (!c.invSlot[i])) {
					value = inventoryItemValue;
					item = c.playerItems[i] - 1;
					slotId = i;
					itemInInventory = true;			
				}
			}
		}
		for(int i1 = 0; i1 &lt; c.playerEquipment.length; i1++) {
			if(c.playerEquipment[i1] &gt; 0) {
				int equipmentItemValue = c.getShops().getItemShopValue(c.playerEquipment[i1]);
				if(equipmentItemValue &gt; value &amp;&amp; (!c.equipSlot[i1])) {
					value = equipmentItemValue;
					item = c.playerEquipment[i1];
					slotId = i1;
					itemInInventory = false;			
				}
			}
		}	
		if(itemInInventory) {
			c.invSlot[slotId] = true;
			if(deleteItem) {					
				deleteItem(c.playerItems[slotId]-1, getItemSlot(c.playerItems[slotId]-1), 1);
			}
		} else {
			c.equipSlot[slotId] = true;
			if(deleteItem) {
				deleteEquipment(item, slotId);
			}		
		}
		c.itemKeptId[keepItem] = item;	
	}
		
	/**
	* Reset items kept on death
	**/
	
	public void resetKeepItems() {
		for(int i = 0; i &lt; c.itemKeptId.length; i++) {
			c.itemKeptId[i] = -1;
		}
		for(int i1 = 0; i1 &lt; c.invSlot.length; i1++) {
			c.invSlot[i1] = false;
		}
		for(int i2 = 0; i2 &lt; c.equipSlot.length; i2++) {
			c.equipSlot[i2] = false;
		}		
	}
	
	/**
	* delete all items
	**/
	
	public void deleteAllItems() {	
		for(int i1 = 0; i1 &lt; c.playerEquipment.length; i1++) {
			deleteEquipment(c.playerEquipment[i1], i1);
		}
		for(int i = 0; i &lt; c.playerItems.length; i++) {
			deleteItem(c.playerItems[i]-1, getItemSlot(c.playerItems[i]-1), c.playerItemsN[i]);
		}
	}
	
	
	/**
	* Drop all items for your killer
	**/
	
	public void dropAllItems() {
		Client o = (Client) PlayerHandler.players[c.killerId];
		if (c.getPA().calculateUntradeableWealth() &gt; 0)
			Server.itemHandler.createGroundItem(o, 995, c.getX(), c.getY(), c.getPA().calculateUntradeableWealth(), c.killerId);
			/*for(int i = 0; i &lt; c.playerItems.length; i++) {
				if(o != null) {
					if (tradeable(c.playerItems[i] - 1)) {
						Server.itemHandler.createGroundItem(o, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.killerId);
					} else {
						Server.itemHandler.createGroundItem(c, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.playerId);
					}
				} else {
					Server.itemHandler.createGroundItem(c, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.playerId);
				}
			} 
			for(int e = 0; e &lt; c.playerEquipment.length; e++) {
				if(o != null) {
					if (tradeable(c.playerEquipment[e])) {
						Server.itemHandler.createGroundItem(o, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.killerId);
					} else {
						if (specialCase(c.playerEquipment[e]))
							Server.itemHandler.createGroundItem(o, 995, c.getX(), c.getY(), getUntradePrice(c.playerEquipment[e]), c.killerId);
						Server.itemHandler.createGroundItem(c, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.playerId);
					}
				} else {
					Server.itemHandler.createGroundItem(c, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.playerId);
				}
			}*/
		PvPDrops.handleDrops(c);
		if(o != null) {	
			Server.itemHandler.createGroundItem(o, 526, c.getX(), c.getY(), 1, c.killerId);
		}	
	}
	
[/CODE]

PvPDrops.java:

[CODE]package server.model.players;

import server.Server;
import server.model.players.Client;
import server.model.players.PlayerHandler;
import server.util.Misc;
import server.model.players.*;
import server.model.players.PvPHandler;
public class PvPDrops {


	
	
	/*
	 * ItemId, amount (Leave amount 0 if its a non stackable item)
	 */
	static int [][] LOW_DROPS = {{11118,0},{554,15}, {557, 15}, {555,9}, {556,10}, {558,20}, {559,12},
										{560,9}, {561, 10}, {562,20}, {563,15}, {564, 12}, {565, 5}, {1073, 0}, {1091, 0}, {1111, 0}, {1123, 0}, {1145, 0}, {1161,0}, {1183, 0}, {1199, 0},{1211,1},{1317, 0}, {1430,0}, {1185, 0}, {1213, 0},{1147, 0}};
	
	/*
	 * Medium drops itemId max item amount
	 */
	static int [][] MEDIUM_DROPS = {{1215,0},{1434,0},{1079,0}, {1093,0}, {1113,0}, {1127,0}, {1163,0}, {1201,0}, {1319,0}, {1373,0}, {6524,0}, {6525,0}, {1704,0}, {1706,0}, {1708,0}, {1710,0}, {1712,0}, {4675,0}, {3751,0}};
	
	/*
	 * high drops same shit as above..
	 */
	static int [][] HIGH_DROPS = {{1377,0}, {3204,0}, {1149,0}, {4587,0}, {1187,0},{4093,0}, {4091,0}, {4101,0}, {4103,0}, {4111,0}, {4113,0}, {6568,0}};
	/*
	 * Contain a few food drops.. itemId max item amount
	 */
	static int [][] FOOD_DROPS = {{379,4}, {385,2}, {391, 2}, {373, 4}, {7946, 4}};
	
	/*
	 * Artefacts
	 */
	static int[][] LOW_ARTEFACTS = { { 14888, 0 }, { 14889, 0 }, { 14890, 0 },
			{ 14891, 0 }, { 14892, 0 } };
	static int[][] MED_ARTEFACTS = { { 14883, 0 }, { 14884, 0 }, { 14885, 0 },
			{ 14886, 0 } };
	static int[][] HIGH_ARTEFACTS = { { 14878, 0 }, { 14879, 0 }, { 14880, 0 },
			{ 14881, 0 }, { 14882, 0 } };
	static int[][] EXR_ARTEFACTS = { { 14876, 0 }, { 14877, 0 } };
	
	/*
	 * PvP armour
	 */
	
	static int[][] ANCIENT_ARMOUR = {{13858,0}, {13861,0}, {13864,0}, {13867,0}, {13870, 0},
		{13873,0}, {13876,0}, {13879, 25}, {13880, 25}, {13881, 25}, {13882, 25}, {13883, 25},
		{13884,0}, {13887,0}, {13890, 0}, {13893,0}, {13896, 0}, {13899, 0}, {13902, 0}, {13905, 0},
		{13908,0}, {13911,0}, {13914, 0}, {13917,0}, {13920, 0}, {13923,0}, {13926, 0}, {13929, 0},
		{13932,0}, {13935,0}, {13938,0}, {13941,0}, {13944,0}, {13947,0}, {13950,0}, {13953, 25},
		{13954,25}, {13955,25}, {13956,25}, {13957,25}};
	
	/**
	 * Creates a drop for:
	 * @param player player dying
	 * @param item item send (randomizeLowDrop for example)
	 * @param array the array of the item (LOW_DROPS for example)
	 */
	static void createDrop(Client player, Client o, int item, int [][] array) {
		int amount = 0;
		for (int i = 0; i &lt; array.length; i++)
			if (array[i][0] == item)
				amount = 1 + Misc.random(array[i][1]);
		Server.itemHandler.createGroundItem(o, item, player.getX(), player.getY(), amount, o.playerId);
		o.dropWealth += player.getShops().getItemShopValue(item) * amount;
	}
	
	/**
	 * Randomizes a random low drop
	 * @return a low item drop
	 */
	static int randomizeDrop(int [][] array) {
		return array[(int) (Math.random() * array.length)][0];
	}
	
	/**
	 * Handles the drops
	 * @param player player dying
	 */
	public static void handleDrops(Client player) {
		Client o = (Client) PlayerHandler.players[player.killerId];
		if (o != null) {
			/*
			 * Drops 1 item from inventory
			 */
			for(int i = 0; i &lt; player.playerItems.length; i++) {
				if (1 + Misc.random(27) == i &amp;&amp; !player.getItems().tradeable(player.playerItems[i] - 1)) {
					Server.itemHandler.createGroundItem(o, player.playerItems[i] - 1, player.getX(), player.getY(), player.playerItemsN[i], o.playerId);
					o.dropWealth += player.getShops().getItemShopValue(player.playerItems[i] - 1) * player.playerItemsN[i];
				}
			}
			/*
			 * Drops 1 item from equipment
			 */
			for (int i = 0; i &lt; player.playerEquipment.length; i++) {
				if (1 + Misc.random(13) == i &amp;&amp; !player.getItems().tradeable(player.playerEquipment[i])) {
					Server.itemHandler.createGroundItem(o, player.playerEquipment[i], player.getX(), player.getY(), player.playerEquipmentN[i], o.playerId);
					o.dropWealth += player.getShops().getItemShopValue(player.playerEquipment[i]) * player.playerEquipmentN[i];
				}
			}
			/*
			 * Creates a low item drop
			 * everything x2 :) for these
			 */
			if (getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
				createDrop(player, o, randomizeDrop(MEDIUM_DROPS), MEDIUM_DROPS);
			if (Misc.random(getLowArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0)
				createDrop(player, o, randomizeDrop(LOW_ARTEFACTS), LOW_ARTEFACTS);
			if (Misc.random(getAncientArmourChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
				createDrop(player, o, randomizeDrop(ANCIENT_ARMOUR), ANCIENT_ARMOUR);
			if (Misc.random(getMedArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
				createDrop(player, o, randomizeDrop(MED_ARTEFACTS), MED_ARTEFACTS);
			if (Misc.random(getHighArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
				createDrop(player, o, randomizeDrop(HIGH_ARTEFACTS), HIGH_ARTEFACTS);
			if (getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000 &amp;&amp; o.EP &gt; 10 || o.playerId == player.targetIndex)
				createDrop(player, o, randomizeDrop(HIGH_DROPS), HIGH_DROPS);
			if ((getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000 &amp;&amp; o.EP &gt; 25 || o.playerId == player.targetIndex) &amp;&amp; Misc.random(getExtremeArtefactChance(player.EP, PvPHandler.playerHasTarget(player))) == 0)
				createDrop(player, o, randomizeDrop(EXR_ARTEFACTS), EXR_ARTEFACTS);
			createDrop(player, o, randomizeDrop(LOW_DROPS), LOW_DROPS);
			createDrop(player, o, randomizeDrop(FOOD_DROPS), FOOD_DROPS);
			createDrop(player, o, randomizeDrop(LOW_DROPS), LOW_DROPS);
			createDrop(player, o, randomizeDrop(FOOD_DROPS), FOOD_DROPS);
			/*
			 * removes the ep
			 */
			int decreaseAmount = getEarnedPotentialDecrease(o.dropWealth) + Misc.random(getEarnedPotentialDecrease(o.dropWealth));
			if (o.EP - decreaseAmount &lt; 0)
				o.EP = 0;
				else
				o.EP -= decreaseAmount;
			/*
			 * resets the target
			 */
			if (o.playerId == player.targetIndex) {
				PvPHandler.resetTarget(player);
				o.targetPercentage = 0;
			}
		}
	}

	/**
	 * Decreases the earned potential
	 * @param totalValue total drop value
	 * @return decrease amount
	 */
	static int getEarnedPotentialDecrease(int totalValue) {
		if (totalValue &gt; 10000 &amp;&amp; totalValue &lt;= 50000)
			return 4;
		else if (totalValue &gt; 50000 &amp;&amp; totalValue &lt;= 100000)
			return 6;
		else if (totalValue &gt; 100000 &amp;&amp; totalValue &lt;= 200000)
			return 8;
		else if (totalValue &gt; 200000 &amp;&amp; totalValue &lt;= 500000)
			return 11;
		else if (totalValue &gt; 500000 &amp;&amp; totalValue &lt;= 1000000)
			return 16;
		else if (totalValue &gt; 1000000 &amp;&amp; totalValue &lt;= 2000000)
			return 24;
		else if (totalValue &gt;= 2000000)
			return 30;
		return 2;
	}
	
	/**
	 * Gets the total net wealth from the
	 * @param player
	 * @return
	 */
	public static int getTotalNet(Client player) {
		int totalAmount = 0;
		for (int j = 0; j &lt; player.playerEquipment.length; j++) {
			totalAmount += player.getShops().getItemShopValue(player.playerEquipment[j])
					* player.playerEquipmentN[j];
		}
		for (int i = 0; i &lt; player.playerItems.length; i++) {
			if (player.playerItems[i] - 1 &gt; 0) {
				int inventoryItemValue = player.getShops().getItemShopValue(
						player.playerItems[i] - 1);
				if (inventoryItemValue &gt; 0) {
					totalAmount += inventoryItemValue;
				}
			}
		}
		return totalAmount;
	}
	
	/**
	 * 
	 * @param ep
	 * @param target
	 * @return
	 */
	static int getExtremeArtefactChance(int ep, boolean target) {
		if (target &amp;&amp; ep &gt;= 50)
			return 5;
		else if (target &amp;&amp; ep &gt;= 0)
			return 15;
		else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
			return 40;
		else if (ep &gt;= 50)
			return 30;
		return 50;
	}
	
	/**
	 * 
	 * @param ep
	 * @param target
	 * @return
	 */
	static int getMedArtefactChance(int ep, boolean target) {
		if (target &amp;&amp; ep &gt;= 50)
			return 0;
		else if (target &amp;&amp; ep &gt;= 10)
			return 1;
		else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
			return 1;
		else if (ep &gt;= 50)
			return 0;
		return 10;
	}
	
	/**
	 * 
	 * @param ep
	 * @param target
	 * @return
	 */
	static int getHighArtefactChance(int ep, boolean target) {
		if (target &amp;&amp; ep &gt;= 50)
			return 2;
		else if (target &amp;&amp; ep &gt;= 10)
			return 5;
		else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
			return 8;
		else if (ep &gt;= 50)
			return 6;
		return 20;
	}
	
	/**
	 * 
	 * @param ep
	 * @param target
	 * @return
	 */
	static int getLowArtefactChance(int ep, boolean target) {
		if (target &amp;&amp; ep &gt;= 50)
			return 0;
		else if (target &amp;&amp; ep &gt;= 0)
			return 0;
		else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
			return 1;
		else if (ep &gt;= 50)
			return 0;
		return 2;
	}
	
	/**
	 * 
	 * @param ep
	 * @param target
	 * @return
	 */
	static int getAncientArmourChance(int ep, boolean target) {
		if (target &amp;&amp; ep &gt;= 50)
			return 5;
		else if (target &amp;&amp; ep &gt;= 0)
			return 10;
		else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
			return 15;
		else if (ep &gt;= 50)
			return 10;
		return 40;
	}
}[/CODE]

I have no idea what to do to it..
 Someone help me? Tell me what needs to be fixed..?</description>
    
    <lastBuildDate>Sat, 22 Dec 2012 09:26:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/compiler-error-i-read-rules-didnt-help/475151.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compiler error, I read rules, didn&#39;t help</title>
        <dc:creator><![CDATA[@kleber883 kleber883]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kleber883">@kleber883</a> wrote:</p>
          <blockquote>
              <p><code>src\server\model\items\ItemAssistant.java:247: error: cannot find symbol
                PvPDrops.handleDrops(c);
                        ^
  symbol:   method handleDrops(Client)
  location: variable PvPDrops of type int[]
src\server\model\players\PvPHandler.java:45: error: cannot find symbol
                        difference = (int)player.getCombatLevel() + player.wildL
evel;
                                                ^
 1 error
Press any key to continue . . .</code></p>
<p>Got these while following this tutorial:</p>
<p><a href="http://www.rune-server.org/runescape-development/google/tutorials/448327-real-bounty-hunter-worlds-release.html" data-bbcode="true" rel="nofollow noopener">http://www.rune-server.org/runescape-development/google/tutorials/448327-real-bounty-hunter-worlds-release.html</a></p>
<p>The first error referred to this section of code.</p>
<p><code>public static void handleDrops(Client player) {
		Client o = (Client) PlayerHandler.players[player.killerId];
		if (o != null) {</code><br>
Does that mean that it’s trying to access the above code, and  can’t because the name is different? © vs (Client Player)? What do I need to change??</p>
<p>[/CODE]</p>
<p>ItemAssistant.java</p>
<p>[CODE]package server.model.items;</p>
<p>import server.Config;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.util.Misc;<br>
import server.model.players.combat.range.DwarfMultiCannon;<br>
import server.model.players.*;<br>
import server.model.players.Player;<br>
import server.model.players.PvPDrops;<br>
public class ItemAssistant {</p>
<pre><code>private Client c;

public ItemAssistant(Client client) {
	this.c = client;
}
	
/**
Items
**/

public int[][] brokenBarrows = {{4708,4860},{4710,4866},{4712,4872},{4714,4878},{4716,4884},
{4720,4896},{4718,4890},{4720,4896},{4722,4902},{4732,4932},{4734,4938},{4736,4944},{4738,4950},
{4724,4908},{4726,4914},{4728,4920},{4730,4926},{4745,4956},{4747,4926},{4749,4968},{4751,4794},
{4753,4980},{4755,4986},{4757,4992},{4759,4998}};

public void resetItems(int WriteFrame) {
	synchronized(c) {
		if(c.getOutStream() != null &amp;&amp; c != null) {
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(WriteFrame);
			c.getOutStream().writeWord(c.playerItems.length);
			for (int i = 0; i &lt; c.playerItems.length; i++) {
				if(c.playerItemsN[i] &gt; 254) {
					c.getOutStream().writeByte(255); 		
					c.getOutStream().writeDWord_v2(c.playerItemsN[i]);
				} else {
					c.getOutStream().writeByte(c.playerItemsN[i]);
				}
				c.getOutStream().writeWordBigEndianA(c.playerItems[i]); 
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();
		}
	}
}

/**
 * Adds an item to the bank without checking if the player has it in there inventory
 * @param itemId the id of the item were banking
 * @param amount amount of items to bank
 */
public void addItemToBank(int itemId, int amount) {
	for (int i = 0; i &lt; Config.BANK_SIZE; i++) {
		if (c.bankItems[i] &lt;= 0 || c.bankItems[i] == itemId + 1
				&amp;&amp; c.bankItemsN[i] + amount &lt; Integer.MAX_VALUE) {
			c.bankItems[i] = itemId + 1;
			c.bankItemsN[i] += amount;
			resetBank();
			return;
		}
	}
}

public int getItemCount(int itemID) {
	int count = 0;	
	for (int j = 0; j &lt; c.playerItems.length; j++) {
		if (c.playerItems[j] == itemID + 1) {
			count += c.playerItemsN[j];
		}		
	}
	return count;
}

public void writeBonus() {
	int offset = 0;
	String send = "";
	for (int i = 0; i &lt; c.playerBonus.length; i++) {
		if (c.playerBonus[i] &gt;= 0) {
			send = BONUS_NAMES[i]+": +"+c.playerBonus[i];
		} else {
			send = BONUS_NAMES[i]+": -"+java.lang.Math.abs(c.playerBonus[i]);
		}

		if (i == 10) {
			offset = 1;
		}
		c.getPA().sendFrame126(send, (1675+i+offset));
	}

}

public int getTotalCount(int itemID) {
	int count = 0;	
	for (int j = 0; j &lt; c.playerItems.length; j++) {
		if (Item.itemIsNote[itemID+1]) {
			if (itemID+2 == c.playerItems[j])
				count += c.playerItemsN[j];
		} 
		if (!Item.itemIsNote[itemID+1]) {
			if (itemID+1 == c.playerItems[j]) {
				count += c.playerItemsN[j];
			}
		}
	}
	for (int j = 0; j &lt; c.bankItems.length; j++) {
		if (c.bankItems[j] == itemID + 1) {
			count += c.bankItemsN[j];
		}		
	}
	return count;
}

public void sendItemsKept() {
	synchronized(c) {
		if(c.getOutStream() != null &amp;&amp; c != null ) {
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(6963);
			c.getOutStream().writeWord(c.itemKeptId.length);
			for (int i = 0; i &lt; c.itemKeptId.length; i++) {
				if(c.playerItemsN[i] &gt; 254) {
					c.getOutStream().writeByte(255); 
					c.getOutStream().writeDWord_v2(1);
				} else {
					c.getOutStream().writeByte(1);
				}
				if(c.itemKeptId[i] &gt; 0) {
				   c.getOutStream().writeWordBigEndianA(c.itemKeptId[i]+1);
				} else {
					c.getOutStream().writeWordBigEndianA(0);
				}
			}
			c.getOutStream().endFrameVarSizeWord();   
			c.flushOutStream();
		}
	}
}


/**
* Item kept on death
**/

public void keepItem(int keepItem, boolean deleteItem) { 	
	int value = 0;
	int item = 0;
	int slotId = 0;
	boolean itemInInventory = false;
	for(int i = 0; i &lt; c.playerItems.length; i++) {
		if(c.playerItems[i]-1 &gt; 0) {
			int inventoryItemValue = c.getShops().getItemShopValue(c.playerItems[i] - 1);
			if(inventoryItemValue &gt; value &amp;&amp; (!c.invSlot[i])) {
				value = inventoryItemValue;
				item = c.playerItems[i] - 1;
				slotId = i;
				itemInInventory = true;			
			}
		}
	}
	for(int i1 = 0; i1 &lt; c.playerEquipment.length; i1++) {
		if(c.playerEquipment[i1] &gt; 0) {
			int equipmentItemValue = c.getShops().getItemShopValue(c.playerEquipment[i1]);
			if(equipmentItemValue &gt; value &amp;&amp; (!c.equipSlot[i1])) {
				value = equipmentItemValue;
				item = c.playerEquipment[i1];
				slotId = i1;
				itemInInventory = false;			
			}
		}
	}	
	if(itemInInventory) {
		c.invSlot[slotId] = true;
		if(deleteItem) {					
			deleteItem(c.playerItems[slotId]-1, getItemSlot(c.playerItems[slotId]-1), 1);
		}
	} else {
		c.equipSlot[slotId] = true;
		if(deleteItem) {
			deleteEquipment(item, slotId);
		}		
	}
	c.itemKeptId[keepItem] = item;	
}
	
/**
* Reset items kept on death
**/

public void resetKeepItems() {
	for(int i = 0; i &lt; c.itemKeptId.length; i++) {
		c.itemKeptId[i] = -1;
	}
	for(int i1 = 0; i1 &lt; c.invSlot.length; i1++) {
		c.invSlot[i1] = false;
	}
	for(int i2 = 0; i2 &lt; c.equipSlot.length; i2++) {
		c.equipSlot[i2] = false;
	}		
}

/**
* delete all items
**/

public void deleteAllItems() {	
	for(int i1 = 0; i1 &lt; c.playerEquipment.length; i1++) {
		deleteEquipment(c.playerEquipment[i1], i1);
	}
	for(int i = 0; i &lt; c.playerItems.length; i++) {
		deleteItem(c.playerItems[i]-1, getItemSlot(c.playerItems[i]-1), c.playerItemsN[i]);
	}
}


/**
* Drop all items for your killer
**/

public void dropAllItems() {
	Client o = (Client) PlayerHandler.players[c.killerId];
	if (c.getPA().calculateUntradeableWealth() &gt; 0)
		Server.itemHandler.createGroundItem(o, 995, c.getX(), c.getY(), c.getPA().calculateUntradeableWealth(), c.killerId);
		/*for(int i = 0; i &lt; c.playerItems.length; i++) {
			if(o != null) {
				if (tradeable(c.playerItems[i] - 1)) {
					Server.itemHandler.createGroundItem(o, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.killerId);
				} else {
					Server.itemHandler.createGroundItem(c, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.playerId);
				}
			} else {
				Server.itemHandler.createGroundItem(c, c.playerItems[i] -1, c.getX(), c.getY(), c.playerItemsN[i], c.playerId);
			}
		} 
		for(int e = 0; e &lt; c.playerEquipment.length; e++) {
			if(o != null) {
				if (tradeable(c.playerEquipment[e])) {
					Server.itemHandler.createGroundItem(o, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.killerId);
				} else {
					if (specialCase(c.playerEquipment[e]))
						Server.itemHandler.createGroundItem(o, 995, c.getX(), c.getY(), getUntradePrice(c.playerEquipment[e]), c.killerId);
					Server.itemHandler.createGroundItem(c, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.playerId);
				}
			} else {
				Server.itemHandler.createGroundItem(c, c.playerEquipment[e], c.getX(), c.getY(), c.playerEquipmentN[e], c.playerId);
			}
		}*/
	PvPDrops.handleDrops(c);
	if(o != null) {	
		Server.itemHandler.createGroundItem(o, 526, c.getX(), c.getY(), 1, c.killerId);
	}	
}
</code></pre>
<p>[/CODE]</p>
<p>PvPDrops.java:</p>
<p>[CODE]package server.model.players;</p>
<p>import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;<br>
import server.model.players.*;<br>
import server.model.players.PvPHandler;<br>
public class PvPDrops {</p>
<pre><code>/*
 * ItemId, amount (Leave amount 0 if its a non stackable item)
 */
static int [][] LOW_DROPS = {{11118,0},{554,15}, {557, 15}, {555,9}, {556,10}, {558,20}, {559,12},
									{560,9}, {561, 10}, {562,20}, {563,15}, {564, 12}, {565, 5}, {1073, 0}, {1091, 0}, {1111, 0}, {1123, 0}, {1145, 0}, {1161,0}, {1183, 0}, {1199, 0},{1211,1},{1317, 0}, {1430,0}, {1185, 0}, {1213, 0},{1147, 0}};

/*
 * Medium drops itemId max item amount
 */
static int [][] MEDIUM_DROPS = {{1215,0},{1434,0},{1079,0}, {1093,0}, {1113,0}, {1127,0}, {1163,0}, {1201,0}, {1319,0}, {1373,0}, {6524,0}, {6525,0}, {1704,0}, {1706,0}, {1708,0}, {1710,0}, {1712,0}, {4675,0}, {3751,0}};

/*
 * high drops same shit as above..
 */
static int [][] HIGH_DROPS = {{1377,0}, {3204,0}, {1149,0}, {4587,0}, {1187,0},{4093,0}, {4091,0}, {4101,0}, {4103,0}, {4111,0}, {4113,0}, {6568,0}};
/*
 * Contain a few food drops.. itemId max item amount
 */
static int [][] FOOD_DROPS = {{379,4}, {385,2}, {391, 2}, {373, 4}, {7946, 4}};

/*
 * Artefacts
 */
static int[][] LOW_ARTEFACTS = { { 14888, 0 }, { 14889, 0 }, { 14890, 0 },
		{ 14891, 0 }, { 14892, 0 } };
static int[][] MED_ARTEFACTS = { { 14883, 0 }, { 14884, 0 }, { 14885, 0 },
		{ 14886, 0 } };
static int[][] HIGH_ARTEFACTS = { { 14878, 0 }, { 14879, 0 }, { 14880, 0 },
		{ 14881, 0 }, { 14882, 0 } };
static int[][] EXR_ARTEFACTS = { { 14876, 0 }, { 14877, 0 } };

/*
 * PvP armour
 */

static int[][] ANCIENT_ARMOUR = {{13858,0}, {13861,0}, {13864,0}, {13867,0}, {13870, 0},
	{13873,0}, {13876,0}, {13879, 25}, {13880, 25}, {13881, 25}, {13882, 25}, {13883, 25},
	{13884,0}, {13887,0}, {13890, 0}, {13893,0}, {13896, 0}, {13899, 0}, {13902, 0}, {13905, 0},
	{13908,0}, {13911,0}, {13914, 0}, {13917,0}, {13920, 0}, {13923,0}, {13926, 0}, {13929, 0},
	{13932,0}, {13935,0}, {13938,0}, {13941,0}, {13944,0}, {13947,0}, {13950,0}, {13953, 25},
	{13954,25}, {13955,25}, {13956,25}, {13957,25}};

/**
 * Creates a drop for:
 * @param player player dying
 * @param item item send (randomizeLowDrop for example)
 * @param array the array of the item (LOW_DROPS for example)
 */
static void createDrop(Client player, Client o, int item, int [][] array) {
	int amount = 0;
	for (int i = 0; i &lt; array.length; i++)
		if (array[i][0] == item)
			amount = 1 + Misc.random(array[i][1]);
	Server.itemHandler.createGroundItem(o, item, player.getX(), player.getY(), amount, o.playerId);
	o.dropWealth += player.getShops().getItemShopValue(item) * amount;
}

/**
 * Randomizes a random low drop
 * @return a low item drop
 */
static int randomizeDrop(int [][] array) {
	return array[(int) (Math.random() * array.length)][0];
}

/**
 * Handles the drops
 * @param player player dying
 */
public static void handleDrops(Client player) {
	Client o = (Client) PlayerHandler.players[player.killerId];
	if (o != null) {
		/*
		 * Drops 1 item from inventory
		 */
		for(int i = 0; i &lt; player.playerItems.length; i++) {
			if (1 + Misc.random(27) == i &amp;&amp; !player.getItems().tradeable(player.playerItems[i] - 1)) {
				Server.itemHandler.createGroundItem(o, player.playerItems[i] - 1, player.getX(), player.getY(), player.playerItemsN[i], o.playerId);
				o.dropWealth += player.getShops().getItemShopValue(player.playerItems[i] - 1) * player.playerItemsN[i];
			}
		}
		/*
		 * Drops 1 item from equipment
		 */
		for (int i = 0; i &lt; player.playerEquipment.length; i++) {
			if (1 + Misc.random(13) == i &amp;&amp; !player.getItems().tradeable(player.playerEquipment[i])) {
				Server.itemHandler.createGroundItem(o, player.playerEquipment[i], player.getX(), player.getY(), player.playerEquipmentN[i], o.playerId);
				o.dropWealth += player.getShops().getItemShopValue(player.playerEquipment[i]) * player.playerEquipmentN[i];
			}
		}
		/*
		 * Creates a low item drop
		 * everything x2 :) for these
		 */
		if (getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
			createDrop(player, o, randomizeDrop(MEDIUM_DROPS), MEDIUM_DROPS);
		if (Misc.random(getLowArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0)
			createDrop(player, o, randomizeDrop(LOW_ARTEFACTS), LOW_ARTEFACTS);
		if (Misc.random(getAncientArmourChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
			createDrop(player, o, randomizeDrop(ANCIENT_ARMOUR), ANCIENT_ARMOUR);
		if (Misc.random(getMedArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
			createDrop(player, o, randomizeDrop(MED_ARTEFACTS), MED_ARTEFACTS);
		if (Misc.random(getHighArtefactChance(o.EP, PvPHandler.playerHasTarget(o))) == 0 &amp;&amp; getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000)
			createDrop(player, o, randomizeDrop(HIGH_ARTEFACTS), HIGH_ARTEFACTS);
		if (getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000 &amp;&amp; o.EP &gt; 10 || o.playerId == player.targetIndex)
			createDrop(player, o, randomizeDrop(HIGH_DROPS), HIGH_DROPS);
		if ((getTotalNet(player) &gt;= 76000 &amp;&amp; getTotalNet(o) &gt;= 76000 &amp;&amp; o.EP &gt; 25 || o.playerId == player.targetIndex) &amp;&amp; Misc.random(getExtremeArtefactChance(player.EP, PvPHandler.playerHasTarget(player))) == 0)
			createDrop(player, o, randomizeDrop(EXR_ARTEFACTS), EXR_ARTEFACTS);
		createDrop(player, o, randomizeDrop(LOW_DROPS), LOW_DROPS);
		createDrop(player, o, randomizeDrop(FOOD_DROPS), FOOD_DROPS);
		createDrop(player, o, randomizeDrop(LOW_DROPS), LOW_DROPS);
		createDrop(player, o, randomizeDrop(FOOD_DROPS), FOOD_DROPS);
		/*
		 * removes the ep
		 */
		int decreaseAmount = getEarnedPotentialDecrease(o.dropWealth) + Misc.random(getEarnedPotentialDecrease(o.dropWealth));
		if (o.EP - decreaseAmount &lt; 0)
			o.EP = 0;
			else
			o.EP -= decreaseAmount;
		/*
		 * resets the target
		 */
		if (o.playerId == player.targetIndex) {
			PvPHandler.resetTarget(player);
			o.targetPercentage = 0;
		}
	}
}

/**
 * Decreases the earned potential
 * @param totalValue total drop value
 * @return decrease amount
 */
static int getEarnedPotentialDecrease(int totalValue) {
	if (totalValue &gt; 10000 &amp;&amp; totalValue &lt;= 50000)
		return 4;
	else if (totalValue &gt; 50000 &amp;&amp; totalValue &lt;= 100000)
		return 6;
	else if (totalValue &gt; 100000 &amp;&amp; totalValue &lt;= 200000)
		return 8;
	else if (totalValue &gt; 200000 &amp;&amp; totalValue &lt;= 500000)
		return 11;
	else if (totalValue &gt; 500000 &amp;&amp; totalValue &lt;= 1000000)
		return 16;
	else if (totalValue &gt; 1000000 &amp;&amp; totalValue &lt;= 2000000)
		return 24;
	else if (totalValue &gt;= 2000000)
		return 30;
	return 2;
}

/**
 * Gets the total net wealth from the
 * @param player
 * @return
 */
public static int getTotalNet(Client player) {
	int totalAmount = 0;
	for (int j = 0; j &lt; player.playerEquipment.length; j++) {
		totalAmount += player.getShops().getItemShopValue(player.playerEquipment[j])
				* player.playerEquipmentN[j];
	}
	for (int i = 0; i &lt; player.playerItems.length; i++) {
		if (player.playerItems[i] - 1 &gt; 0) {
			int inventoryItemValue = player.getShops().getItemShopValue(
					player.playerItems[i] - 1);
			if (inventoryItemValue &gt; 0) {
				totalAmount += inventoryItemValue;
			}
		}
	}
	return totalAmount;
}

/**
 * 
 * @param ep
 * @param target
 * @return
 */
static int getExtremeArtefactChance(int ep, boolean target) {
	if (target &amp;&amp; ep &gt;= 50)
		return 5;
	else if (target &amp;&amp; ep &gt;= 0)
		return 15;
	else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
		return 40;
	else if (ep &gt;= 50)
		return 30;
	return 50;
}

/**
 * 
 * @param ep
 * @param target
 * @return
 */
static int getMedArtefactChance(int ep, boolean target) {
	if (target &amp;&amp; ep &gt;= 50)
		return 0;
	else if (target &amp;&amp; ep &gt;= 10)
		return 1;
	else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
		return 1;
	else if (ep &gt;= 50)
		return 0;
	return 10;
}

/**
 * 
 * @param ep
 * @param target
 * @return
 */
static int getHighArtefactChance(int ep, boolean target) {
	if (target &amp;&amp; ep &gt;= 50)
		return 2;
	else if (target &amp;&amp; ep &gt;= 10)
		return 5;
	else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
		return 8;
	else if (ep &gt;= 50)
		return 6;
	return 20;
}

/**
 * 
 * @param ep
 * @param target
 * @return
 */
static int getLowArtefactChance(int ep, boolean target) {
	if (target &amp;&amp; ep &gt;= 50)
		return 0;
	else if (target &amp;&amp; ep &gt;= 0)
		return 0;
	else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
		return 1;
	else if (ep &gt;= 50)
		return 0;
	return 2;
}

/**
 * 
 * @param ep
 * @param target
 * @return
 */
static int getAncientArmourChance(int ep, boolean target) {
	if (target &amp;&amp; ep &gt;= 50)
		return 5;
	else if (target &amp;&amp; ep &gt;= 0)
		return 10;
	else if (ep &gt;= 20 &amp;&amp; ep &lt; 50)
		return 15;
	else if (ep &gt;= 50)
		return 10;
	return 40;
}
</code></pre>
<p>}[/CODE]</p>
<p>I have no idea what to do to it…<br>
Someone help me? Tell me what needs to be fixed…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-error-i-read-rules-didnt-help/475151/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-error-i-read-rules-didnt-help/475151/1</link>
        <pubDate>Sat, 22 Dec 2012 09:26:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-475151-1</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-error-i-read-rules-didnt-help/475151.rss">Compiler error, I read rules, didn&#39;t help</source>
      </item>
  </channel>
</rss>
