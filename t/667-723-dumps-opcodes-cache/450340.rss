<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>667/723 Dumps/Opcodes/Cache</title>
    <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340</link>
    <description>This is all the Dumps Anim&#39;s, Itemdefs, etc
[url=http://uppit.com/am6rf3kesshd/DUMPS723.rar]http://uppit.com/am6rf3kesshd/DUMPS723.rar[/url]

This is the cache for 723
[url=http://uppit.com/4p12ll5awei5/cache.rar]http://uppit.com/4p12ll5awei5/cache.rar[/url]

SERVER SIDED

look for in itemdefinitions.java
[code]private final void readValues(InputStream stream, int opcode) {[/code]
[code]private final void readValues(InputStream stream, int opcode) {
		if (opcode == 1)
			modelId = stream.readBigSmart();
		else if (opcode == 2)
			name = stream.readString();
		else if (opcode == 4)
			modelZoom = stream.readUnsignedShort();
		else if (opcode == 5)
			modelRotation1 = stream.readUnsignedShort();
		else if (opcode == 6)
			modelRotation2 = stream.readUnsignedShort();
		else if (opcode == 7) {
			modelOffset1 = stream.readUnsignedShort();
			if (modelOffset1 &gt; 32767)
				modelOffset1 -= 65536;
			modelOffset1 &lt;&lt;= 0;
		} else if (opcode == 8) {
			modelOffset2 = stream.readUnsignedShort();
			if (modelOffset2 &gt; 32767)
				modelOffset2 -= 65536;
			modelOffset2 &lt;&lt;= 0;
		} else if (opcode == 11)
			stackable = 1;
		else if (opcode == 12)
			value = stream.readInt();
		else if (opcode == 117)
			opcode117 = stream.readUnsignedByte();
		else if (opcode == 82)
			opcode82 = stream.readUnsignedByte();
		else if (opcode == 13)
			opcode13 = stream.readUnsignedByte();
		else if (opcode == 14)
			opcode14 = stream.readUnsignedByte();
		else if (opcode == 9)
			opcode9 = stream.readUnsignedByte();
		else if (opcode == 27)
			opcode27 = stream.readUnsignedByte();
		else if (opcode == 66)
			opcode66 = stream.readUnsignedByte();
		else if (opcode == 116)
			opcode116 = stream.readUnsignedByte();
		else if (opcode == 157)
			opcode157 = stream.readUnsignedByte();
		else if (opcode == 244)
			opcode244 = stream.readUnsignedByte();
		else if (opcode == 170)
			opcode170 = stream.readUnsignedByte();
		else if (opcode == 151)
			opcode151 = stream.readUnsignedByte();//		14 66 116 157 244 170 151 9 27
		else if (opcode == 16)
			membersOnly = true;
		else if (opcode == 18) // added
			stream.readUnsignedShort();
		else if (opcode == 23)
			maleEquip1 = stream.readBigSmart();
		else if (opcode == 24)
			maleEquip2 = stream.readBigSmart();
		else if (opcode == 25)
			femaleEquip1 = stream.readBigSmart();
		else if (opcode == 26)
			femaleEquip2 = stream.readBigSmart();
		else if (opcode &gt;= 30 &amp;&amp; opcode &lt; 35)
			groundOptions[opcode - 30] = stream.readString();
		else if (opcode &gt;= 35 &amp;&amp; opcode &lt; 40)
			inventoryOptions[opcode - 35] = stream.readString();
		else if (opcode == 40) {
			int length = stream.readUnsignedByte();
			originalModelColors = new int[length];
			modifiedModelColors = new int[length];
			for (int index = 0; index &lt; length; index++) {
				originalModelColors[index] = stream.readUnsignedShort();
				modifiedModelColors[index] = stream.readUnsignedShort();
			}
		} else if (opcode == 41) {
			int length = stream.readUnsignedByte();
			originalTextureColors = new short[length];
			modifiedTextureColors = new short[length];
			for (int index = 0; index &lt; length; index++) {
				originalTextureColors[index] = (short) stream
						.readUnsignedShort();
				modifiedTextureColors[index] = (short) stream
						.readUnsignedShort();
			}
		} else if (opcode == 42) {
			int length = stream.readUnsignedByte();
			unknownArray1 = new byte[length];
			for (int index = 0; index &lt; length; index++)
				unknownArray1[index] = (byte) stream.readByte();
		} else if (opcode == 65)
			unnoted = true;
		else if (opcode == 78)
			maleEquipModelId3 = stream.readBigSmart();
		else if (opcode == 79)
			femaleEquipModelId3 = stream.readBigSmart();
		else if (opcode == 90)
			unknownInt1 = stream.readBigSmart();
		else if (opcode == 91)
			unknownInt2 = stream.readBigSmart();
		else if (opcode == 92)
			unknownInt3 = stream.readBigSmart();
		else if (opcode == 93)
			unknownInt4 = stream.readBigSmart();
		else if (opcode == 95)
			unknownInt5 = stream.readUnsignedShort();
		else if (opcode == 96)
			unknownInt6 = stream.readUnsignedByte();
		else if (opcode == 97)
			certId = stream.readUnsignedShort();
		else if (opcode == 98)
			certTemplateId = stream.readUnsignedShort();
		else if (opcode &gt;= 100 &amp;&amp; opcode &lt; 110) {
			if (stackIds == null) {
				stackIds = new int[10];
				stackAmounts = new int[10];
			}
			stackIds[opcode - 100] = stream.readUnsignedShort();
			stackAmounts[opcode - 100] = stream.readUnsignedShort();
		} else if (opcode == 110)
			unknownInt7 = stream.readUnsignedShort();
		else if (opcode == 111)
			unknownInt8 = stream.readUnsignedShort();
		else if (opcode == 112)
			unknownInt9 = stream.readUnsignedShort();
		else if (opcode == 113)
			unknownInt10 = stream.readByte();
		else if (opcode == 114)
			unknownInt11 = stream.readByte() * 5;
		else if (opcode == 115)
			teamId = stream.readUnsignedByte();
		else if (opcode == 121)
			lendId = stream.readUnsignedShort();
		else if (opcode == 122)
			lendTemplateId = stream.readUnsignedShort();
		else if (opcode == 125) {
			unknownInt12 = stream.readByte() &lt;&lt; 0;
			unknownInt13 = stream.readByte() &lt;&lt; 0;
			unknownInt14 = stream.readByte() &lt;&lt; 0;
		} else if (opcode == 126) {
			unknownInt15 = stream.readByte() &lt;&lt; 0;
			unknownInt16 = stream.readByte() &lt;&lt; 0;
			unknownInt17 = stream.readByte() &lt;&lt; 0;
		} else if (opcode == 127) {
			unknownInt18 = stream.readUnsignedByte();
			unknownInt19 = stream.readUnsignedShort();
		} else if (opcode == 128) {
			unknownInt20 = stream.readUnsignedByte();
			unknownInt21 = stream.readUnsignedShort();
		} else if (opcode == 129) {
			unknownInt20 = stream.readUnsignedByte();
			unknownInt21 = stream.readUnsignedShort();
		} else if (opcode == 130) {
			unknownInt22 = stream.readUnsignedByte();
			unknownInt23 = stream.readUnsignedShort();
		} else if (opcode == 132) {
			int length = stream.readUnsignedByte();
			unknownArray2 = new int[length];
			for (int index = 0; index &lt; length; index++)
				unknownArray2[index] = stream.readUnsignedShort();
		} else if (opcode == 134) {
			int unknownValue = stream.readUnsignedByte();
		} else if (opcode == 139) {
			unknownValue2 = stream.readUnsignedShort();
		} else if (opcode == 140) {
			unknownValue1 = stream.readUnsignedShort();
		} else if (opcode == 249) {
			int length = stream.readUnsignedByte();
			if (clientScriptData == null)
				clientScriptData = new HashMap&lt;Integer, Object&gt;(length);
			for (int index = 0; index &lt; length; index++) {
				boolean stringInstance = stream.readUnsignedByte() == 1;
				int key = stream.read24BitInt();
				Object value = stringInstance ? stream.readString() : stream
						.readInt();
				clientScriptData.put(key, value);
			}
		} else
			throw new RuntimeException(&quot;MISSING OPCODE &quot; + opcode
					+ &quot; FOR ITEM &quot; + id);
	}
private int opcode13;
	private int opcode82;
	private int opcode117;
	private int opcode66;
	private int opcode116;
	private int opcode157;
	private int opcode244;
	private int opcode170;
	private int opcode151;
	private int opcode14;
	private int opcode27;
	private int opcode9;[/code]

CLIENT SIDED
look for in itemdefinitions.java method1681
[code]private final void method1681(BufferedStream buffer, boolean bool,
			int opcode) {
		if (opcode == 1) {
			anInt1898 = buffer.readBigSmart();
		} else if (opcode != 2) {
			if (opcode == 4) {
				anInt1874 = buffer.readUnsignedShort();
			} else if (opcode == 5) {
				anInt1884 = buffer.readUnsignedShort();
			} else if ((opcode ^ 0xffffffff) == -7) {
				anInt1869 = buffer.readUnsignedShort();
			} else if (opcode == 7) {
				anInt1905 = buffer.readUnsignedShort();
				if ((anInt1905 ^ 0xffffffff) &lt; -32768) {
					anInt1905 -= 65536;
				}
			} else if (opcode == 8) {
				anInt1875 = buffer.readUnsignedShort();
				if (anInt1875 &gt; 32767) {
					anInt1875 -= 65536;
				}
			} else if ((opcode ^ 0xffffffff) == -12) {
				anInt1892 = 1;
			} else if (opcode == 12) {
				anInt1924 = buffer.readInt();
			}		else if (opcode == 13)
			opcode13 = buffer.readUnsignedByte();
		else if (opcode == 14)
			opcode14 = buffer.readUnsignedByte();
		else if (opcode == 9)
			opcode9 = buffer.readUnsignedByte();
		else if (opcode == 27)
			opcode27 = buffer.readUnsignedByte();
		else if (opcode == 66)
			opcode66 = buffer.readUnsignedByte();
		else if (opcode == 116)
			opcode116 = buffer.readUnsignedByte();
		else if (opcode == 157)
			opcode157 = buffer.readUnsignedByte();
		else if (opcode == 244)
			opcode244 = buffer.readUnsignedByte();
		else if (opcode == 170)
			opcode170 = buffer.readUnsignedByte();
		else if (opcode == 151)
			opcode151 = buffer.readUnsignedByte();//		14 66 116 157 244 170 151 9 27 
		else if (opcode == 82)
			opcode82 = buffer.readUnsignedByte();
		else if (opcode == 117)
			opcode117 = buffer.readUnsignedByte();
		else if ((opcode ^ 0xffffffff) != -17) {
				if (opcode != 18) {
					if ((opcode ^ 0xffffffff) != -24) {
						if (opcode != 24) {
							if (opcode != 25) {
								if ((opcode ^ 0xffffffff) == -27) {
									femaleWornModelId2 = buffer.readBigSmart();
								} else if ((opcode ^ 0xffffffff) &gt; -31
										|| (opcode ^ 0xffffffff) &lt;= -36) {
									if ((opcode ^ 0xffffffff) &lt;= -36
											&amp;&amp; (opcode ^ 0xffffffff) &gt; -41) {
										aStringArray1901[-35 + opcode] = buffer
												.readString();
									} else if (opcode != 40) {
										if (opcode == 41) {
											int i_18_ = buffer
													.readUnsignedByte();
											originalTextureColors = new short[i_18_];
											modifiedTextureColors = new short[i_18_];
											for (int i_19_ = 0; (i_18_ ^ 0xffffffff) &lt; (i_19_ ^ 0xffffffff); i_19_++) {
												originalTextureColors[i_19_] = (short) buffer
														.readUnsignedShort();
												modifiedTextureColors[i_19_] = (short) buffer
														.readUnsignedShort();
											}
										} else if (opcode != 42) {
											if ((opcode ^ 0xffffffff) != -66) {
												if ((opcode ^ 0xffffffff) == -79) {
													maleWornModelId3 = buffer
															.readBigSmart();
												} else if (opcode != 79) {
													if (opcode != 90) {
														if (opcode == 91) {
															anInt1863 = buffer
																	.readBigSmart();
														} else if (opcode != 92) {
															if ((opcode ^ 0xffffffff) == -94) {
																anInt1897 = buffer
																		.readBigSmart();
															} else if ((opcode ^ 0xffffffff) != -96) {
																if ((opcode ^ 0xffffffff) != -97) {
																	if (opcode != 97) {
																		if ((opcode ^ 0xffffffff) == -99) {
																			anInt1857 = buffer
																					.readUnsignedShort();
																		} else if (opcode &lt; 100
																				|| opcode &gt;= 110) {
																			if ((opcode ^ 0xffffffff) != -111) {
																				if (opcode != 111) {
																					if ((opcode ^ 0xffffffff) == -113) {
																						anInt1896 = buffer
																								.readUnsignedShort();
																					} else if ((opcode ^ 0xffffffff) == -114) {
																						anInt1876 = buffer
																								.readByte();
																					} else if ((opcode ^ 0xffffffff) != -115) {
																						if (opcode != 115) {
																							if (opcode != 121) {
																								if (opcode == 122) {
																									anInt1852 = buffer
																											.readUnsignedShort();
																								} else if ((opcode ^ 0xffffffff) != -126) {
																									if (opcode != 126) {
																										if ((opcode ^ 0xffffffff) == -128) {
																											anInt1908 = buffer
																													.readUnsignedByte();
																											anInt1889 = buffer
																													.readUnsignedShort();
																										} else if (opcode != 128) {
																											if (opcode != 129) {
																												if (opcode == 130) {
																													anInt1864 = buffer
																															.readUnsignedByte();
																													anInt1862 = buffer
																															.readUnsignedShort();
																												} else if (opcode == 132) {
																													int i_20_ = buffer
																															.readUnsignedByte();
																													anIntArray1926 = new int[i_20_];
																													for (int i_21_ = 0; i_20_ &gt; i_21_; i_21_++)
																														anIntArray1926[i_21_] = buffer
																																.readUnsignedShort();
																												} else if (opcode == 134) {
																													anInt1919 = buffer
																															.readUnsignedByte();
																												} else if ((opcode ^ 0xffffffff) == -140) {
																													anInt1891 = buffer
																															.readUnsignedShort();
																												} else if ((opcode ^ 0xffffffff) == -141) {
																													anInt1928 = buffer
																															.readUnsignedShort();
																												} else if ((opcode ^ 0xffffffff) == -250) {
																													int i_22_ = buffer
																															.readUnsignedByte();
																													if (aHashTable1873 == null) {
																														int i_23_ = Class320_Sub19
																																.method3753(
																																		i_22_,
																																		-729073628);
																														aHashTable1873 = new HashTable(
																																i_23_);
																													}
																													for (int i_24_ = 0; i_22_ &gt; i_24_; i_24_++) {
																														boolean bool_25_ = buffer
																																.readUnsignedByte() == 1;
																														int i_26_ = buffer
																																.read24BitInteger();
																														Node node;
																														if (!bool_25_) {
																															node = new Node_Sub32(
																																	buffer.readInt());
																														} else {
																															node = new Node_Sub18(
																																	buffer.readString());
																														}
																														aHashTable1873
																																.method1515(
																																		(long) i_26_,
																																		node,
																																		-127);
																													}
																												}
																											} else {
																												anInt1900 = buffer
																														.readUnsignedByte();
																												anInt1859 = buffer
																														.readUnsignedShort();
																											}
																										} else {
																											anInt1849 = buffer
																													.readUnsignedByte();
																											anInt1851 = buffer
																													.readUnsignedShort();
																										}
																									} else {
																										anInt1890 = buffer
																												.readByte() &lt;&lt; 2;
																										anInt1893 = buffer
																												.readByte() &lt;&lt; 2;
																										anInt1916 = buffer
																												.readByte() &lt;&lt; 2;
																									}
																								} else {
																									anInt1931 = buffer
																											.readByte() &lt;&lt; 2;
																									anInt1930 = buffer
																											.readByte() &lt;&lt; 2;
																									anInt1895 = buffer
																											.readByte() &lt;&lt; 2;
																								}
																							} else {
																								anInt1927 = buffer
																										.readUnsignedShort();
																							}
																						} else {
																							anInt1899 = buffer
																									.readUnsignedByte();
																						}
																					} else {
																						anInt1886 = buffer
																								.readByte() * 5;
																					}
																				} else {
																					anInt1911 = buffer
																							.readUnsignedShort();
																				}
																			} else {
																				anInt1904 = buffer
																						.readUnsignedShort();
																			}
																		} else {
																			if (anIntArray1918 == null) {
																				anIntArray1872 = new int[10];
																				anIntArray1918 = new int[10];
																			}
																			anIntArray1918[opcode - 100] = buffer
																					.readUnsignedShort();
																			anIntArray1872[-100
																					+ opcode] = buffer
																					.readUnsignedShort();
																		}
																	} else {
																		anInt1887 = buffer
																				.readUnsignedShort();
																	}
																} else {
																	anInt1877 = buffer
																			.readUnsignedByte();
																}
															} else {
																anInt1866 = buffer
																		.readUnsignedShort();
															}
														} else {
															anInt1888 = buffer
																	.readBigSmart();
														}
													} else {
														anInt1913 = buffer
																.readBigSmart();
													}
												} else {
													femaleWornModelId3 = buffer
															.readBigSmart();
												}
											} else {
												aBoolean1933 = true;
											}
										} else {
											int i_27_ = buffer
													.readUnsignedByte();
											aByteArray1882 = new byte[i_27_];
											for (int i_28_ = 0; i_27_ &gt; i_28_; i_28_++)
												aByteArray1882[i_28_] = buffer
														.readByte();
										}
									} else {
										int i_29_ = buffer.readUnsignedByte();
										aShortArray1856 = new short[i_29_];
										aShortArray1865 = new short[i_29_];
										for (int i_30_ = 0; i_29_ &gt; i_30_; i_30_++) {
											aShortArray1856[i_30_] = (short) buffer
													.readUnsignedShort();
											aShortArray1865[i_30_] = (short) buffer
													.readUnsignedShort();
										}
									}
								} else {
									aStringArray1920[opcode + -30] = buffer
											.readString();
								}
							} else {
								femaleWornModelId1 = buffer.readBigSmart();
							}
						} else {
							maleWornModelId2 = buffer.readBigSmart();
						}
					} else {
						maleWornModelId1 = buffer.readBigSmart();
					}
				} else {
					anInt1879 = buffer.readUnsignedShort();
				}
			} else {
				aBoolean1871 = true;
			}
		} else {
			aString1860 = buffer.readString();
		}
		anInt1922++;
		if (bool != false) {
			anInt1879 = 4;
		}
	}
	private int opcode13;
	private int opcode82;
	private int opcode117;
	private int opcode66;
	private int opcode116;
	private int opcode157;
	private int opcode244;
	private int opcode170;
	private int opcode151;
	private int opcode14;
	private int opcode27;
	private int opcode9;
[/code]

[img]http://i47.tinypic.com/2zdwpw3.png[/img]

The opcodes are all within the first file just replace old files with these new ones you may or may not get 1 or 2 errors depending on how well you do this lol

[center]Credits to
Zamorak (dumps/cache) 
TimeRS3 (opcodes)[/center]</description>
    
    <lastBuildDate>Sun, 22 Jul 2012 14:03:16 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>667/723 Dumps/Opcodes/Cache</title>
        <dc:creator><![CDATA[@vyre-scape vyre-scape]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vyre-scape">@vyre-scape</a> wrote:</p>
          <blockquote>
              <p>The first link is down. Can u reupload it?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/5</link>
        <pubDate>Sun, 22 Jul 2012 14:03:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450340-5</guid>
        <source url="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss">667/723 Dumps/Opcodes/Cache</source>
      </item>
      <item>
        <title>667/723 Dumps/Opcodes/Cache</title>
        <dc:creator><![CDATA[@David321 David321]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/david321">@David321</a> wrote:</p>
          <blockquote>
              <p>How to use dumps?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/4</link>
        <pubDate>Fri, 20 Jul 2012 00:33:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450340-4</guid>
        <source url="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss">667/723 Dumps/Opcodes/Cache</source>
      </item>
      <item>
        <title>667/723 Dumps/Opcodes/Cache</title>
        <dc:creator><![CDATA[@TimeRS3 TimeRS3]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/timers3">@TimeRS3</a> wrote:</p>
          <blockquote>
              <p>i love how theres a dragon head on the wolf</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/3</link>
        <pubDate>Thu, 19 Jul 2012 23:17:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450340-3</guid>
        <source url="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss">667/723 Dumps/Opcodes/Cache</source>
      </item>
      <item>
        <title>667/723 Dumps/Opcodes/Cache</title>
        <dc:creator><![CDATA[@shabba_56 shabba 56]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shabba_56">@shabba_56</a> wrote:</p>
          <blockquote>
              <p>ocodes was fixed on R-S along time ago just bu there thread if u need it o.o</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/2</link>
        <pubDate>Thu, 19 Jul 2012 21:16:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450340-2</guid>
        <source url="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss">667/723 Dumps/Opcodes/Cache</source>
      </item>
      <item>
        <title>667/723 Dumps/Opcodes/Cache</title>
        <dc:creator><![CDATA[@zingerman111 zingerman111]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zingerman111">@zingerman111</a> wrote:</p>
          <blockquote>
              <p>This is all the Dumps Anim’s, Itemdefs, etc<br>
<a href="http://uppit.com/am6rf3kesshd/DUMPS723.rar" data-bbcode="true" rel="nofollow noopener">http://uppit.com/am6rf3kesshd/DUMPS723.rar</a></p>
<p>This is the cache for 723<br>
<a href="http://uppit.com/4p12ll5awei5/cache.rar" data-bbcode="true" rel="nofollow noopener">http://uppit.com/4p12ll5awei5/cache.rar</a></p>
<p>SERVER SIDED</p>
<p>look for in itemdefinitions.java</p>
<pre><code class="lang-auto">private final void readValues(InputStream stream, int opcode) {</code></pre>
<p><code>private final void readValues(InputStream stream, int opcode) {
		if (opcode == 1)
			modelId = stream.readBigSmart();
		else if (opcode == 2)
			name = stream.readString();
		else if (opcode == 4)
			modelZoom = stream.readUnsignedShort();
		else if (opcode == 5)
			modelRotation1 = stream.readUnsignedShort();
		else if (opcode == 6)
			modelRotation2 = stream.readUnsignedShort();
		else if (opcode == 7) {
			modelOffset1 = stream.readUnsignedShort();
			if (modelOffset1 &gt; 32767)
				modelOffset1 -= 65536;
			modelOffset1 &lt;&lt;= 0;
		} else if (opcode == 8) {
			modelOffset2 = stream.readUnsignedShort();
			if (modelOffset2 &gt; 32767)
				modelOffset2 -= 65536;
			modelOffset2 &lt;&lt;= 0;
		} else if (opcode == 11)
			stackable = 1;
		else if (opcode == 12)
			value = stream.readInt();
		else if (opcode == 117)
			opcode117 = stream.readUnsignedByte();
		else if (opcode == 82)
			opcode82 = stream.readUnsignedByte();
		else if (opcode == 13)
			opcode13 = stream.readUnsignedByte();
		else if (opcode == 14)
			opcode14 = stream.readUnsignedByte();
		else if (opcode == 9)
			opcode9 = stream.readUnsignedByte();
		else if (opcode == 27)
			opcode27 = stream.readUnsignedByte();
		else if (opcode == 66)
			opcode66 = stream.readUnsignedByte();
		else if (opcode == 116)
			opcode116 = stream.readUnsignedByte();
		else if (opcode == 157)
			opcode157 = stream.readUnsignedByte();
		else if (opcode == 244)
			opcode244 = stream.readUnsignedByte();
		else if (opcode == 170)
			opcode170 = stream.readUnsignedByte();
		else if (opcode == 151)
			opcode151 = stream.readUnsignedByte();//		14 66 116 157 244 170 151 9 27
		else if (opcode == 16)
			membersOnly = true;
		else if (opcode == 18) // added
			stream.readUnsignedShort();
		else if (opcode == 23)
			maleEquip1 = stream.readBigSmart();
		else if (opcode == 24)
			maleEquip2 = stream.readBigSmart();
		else if (opcode == 25)
			femaleEquip1 = stream.readBigSmart();
		else if (opcode == 26)
			femaleEquip2 = stream.readBigSmart();
		else if (opcode &gt;= 30 &amp;&amp; opcode &lt; 35)
			groundOptions[opcode - 30] = stream.readString();
		else if (opcode &gt;= 35 &amp;&amp; opcode &lt; 40)
			inventoryOptions[opcode - 35] = stream.readString();
		else if (opcode == 40) {
			int length = stream.readUnsignedByte();
			originalModelColors = new int[length];
			modifiedModelColors = new int[length];
			for (int index = 0; index &lt; length; index++) {
				originalModelColors[index] = stream.readUnsignedShort();
				modifiedModelColors[index] = stream.readUnsignedShort();
			}
		} else if (opcode == 41) {
			int length = stream.readUnsignedByte();
			originalTextureColors = new short[length];
			modifiedTextureColors = new short[length];
			for (int index = 0; index &lt; length; index++) {
				originalTextureColors[index] = (short) stream
						.readUnsignedShort();
				modifiedTextureColors[index] = (short) stream
						.readUnsignedShort();
			}
		} else if (opcode == 42) {
			int length = stream.readUnsignedByte();
			unknownArray1 = new byte[length];
			for (int index = 0; index &lt; length; index++)
				unknownArray1[index] = (byte) stream.readByte();
		} else if (opcode == 65)
			unnoted = true;
		else if (opcode == 78)
			maleEquipModelId3 = stream.readBigSmart();
		else if (opcode == 79)
			femaleEquipModelId3 = stream.readBigSmart();
		else if (opcode == 90)
			unknownInt1 = stream.readBigSmart();
		else if (opcode == 91)
			unknownInt2 = stream.readBigSmart();
		else if (opcode == 92)
			unknownInt3 = stream.readBigSmart();
		else if (opcode == 93)
			unknownInt4 = stream.readBigSmart();
		else if (opcode == 95)
			unknownInt5 = stream.readUnsignedShort();
		else if (opcode == 96)
			unknownInt6 = stream.readUnsignedByte();
		else if (opcode == 97)
			certId = stream.readUnsignedShort();
		else if (opcode == 98)
			certTemplateId = stream.readUnsignedShort();
		else if (opcode &gt;= 100 &amp;&amp; opcode &lt; 110) {
			if (stackIds == null) {
				stackIds = new int[10];
				stackAmounts = new int[10];
			}
			stackIds[opcode - 100] = stream.readUnsignedShort();
			stackAmounts[opcode - 100] = stream.readUnsignedShort();
		} else if (opcode == 110)
			unknownInt7 = stream.readUnsignedShort();
		else if (opcode == 111)
			unknownInt8 = stream.readUnsignedShort();
		else if (opcode == 112)
			unknownInt9 = stream.readUnsignedShort();
		else if (opcode == 113)
			unknownInt10 = stream.readByte();
		else if (opcode == 114)
			unknownInt11 = stream.readByte() * 5;
		else if (opcode == 115)
			teamId = stream.readUnsignedByte();
		else if (opcode == 121)
			lendId = stream.readUnsignedShort();
		else if (opcode == 122)
			lendTemplateId = stream.readUnsignedShort();
		else if (opcode == 125) {
			unknownInt12 = stream.readByte() &lt;&lt; 0;
			unknownInt13 = stream.readByte() &lt;&lt; 0;
			unknownInt14 = stream.readByte() &lt;&lt; 0;
		} else if (opcode == 126) {
			unknownInt15 = stream.readByte() &lt;&lt; 0;
			unknownInt16 = stream.readByte() &lt;&lt; 0;
			unknownInt17 = stream.readByte() &lt;&lt; 0;
		} else if (opcode == 127) {
			unknownInt18 = stream.readUnsignedByte();
			unknownInt19 = stream.readUnsignedShort();
		} else if (opcode == 128) {
			unknownInt20 = stream.readUnsignedByte();
			unknownInt21 = stream.readUnsignedShort();
		} else if (opcode == 129) {
			unknownInt20 = stream.readUnsignedByte();
			unknownInt21 = stream.readUnsignedShort();
		} else if (opcode == 130) {
			unknownInt22 = stream.readUnsignedByte();
			unknownInt23 = stream.readUnsignedShort();
		} else if (opcode == 132) {
			int length = stream.readUnsignedByte();
			unknownArray2 = new int[length];
			for (int index = 0; index &lt; length; index++)
				unknownArray2[index] = stream.readUnsignedShort();
		} else if (opcode == 134) {
			int unknownValue = stream.readUnsignedByte();
		} else if (opcode == 139) {
			unknownValue2 = stream.readUnsignedShort();
		} else if (opcode == 140) {
			unknownValue1 = stream.readUnsignedShort();
		} else if (opcode == 249) {
			int length = stream.readUnsignedByte();
			if (clientScriptData == null)
				clientScriptData = new HashMap&lt;Integer, Object&gt;(length);
			for (int index = 0; index &lt; length; index++) {
				boolean stringInstance = stream.readUnsignedByte() == 1;
				int key = stream.read24BitInt();
				Object value = stringInstance ? stream.readString() : stream
						.readInt();
				clientScriptData.put(key, value);
			}
		} else
			throw new RuntimeException("MISSING OPCODE " + opcode
					+ " FOR ITEM " + id);
	}
private int opcode13;
	private int opcode82;
	private int opcode117;
	private int opcode66;
	private int opcode116;
	private int opcode157;
	private int opcode244;
	private int opcode170;
	private int opcode151;
	private int opcode14;
	private int opcode27;
	private int opcode9;</code></p>
<p>CLIENT SIDED<br>
look for in itemdefinitions.java method1681</p>
<p><code>private final void method1681(BufferedStream buffer, boolean bool,
			int opcode) {
		if (opcode == 1) {
			anInt1898 = buffer.readBigSmart();
		} else if (opcode != 2) {
			if (opcode == 4) {
				anInt1874 = buffer.readUnsignedShort();
			} else if (opcode == 5) {
				anInt1884 = buffer.readUnsignedShort();
			} else if ((opcode ^ 0xffffffff) == -7) {
				anInt1869 = buffer.readUnsignedShort();
			} else if (opcode == 7) {
				anInt1905 = buffer.readUnsignedShort();
				if ((anInt1905 ^ 0xffffffff) &lt; -32768) {
					anInt1905 -= 65536;
				}
			} else if (opcode == 8) {
				anInt1875 = buffer.readUnsignedShort();
				if (anInt1875 &gt; 32767) {
					anInt1875 -= 65536;
				}
			} else if ((opcode ^ 0xffffffff) == -12) {
				anInt1892 = 1;
			} else if (opcode == 12) {
				anInt1924 = buffer.readInt();
			}		else if (opcode == 13)
			opcode13 = buffer.readUnsignedByte();
		else if (opcode == 14)
			opcode14 = buffer.readUnsignedByte();
		else if (opcode == 9)
			opcode9 = buffer.readUnsignedByte();
		else if (opcode == 27)
			opcode27 = buffer.readUnsignedByte();
		else if (opcode == 66)
			opcode66 = buffer.readUnsignedByte();
		else if (opcode == 116)
			opcode116 = buffer.readUnsignedByte();
		else if (opcode == 157)
			opcode157 = buffer.readUnsignedByte();
		else if (opcode == 244)
			opcode244 = buffer.readUnsignedByte();
		else if (opcode == 170)
			opcode170 = buffer.readUnsignedByte();
		else if (opcode == 151)
			opcode151 = buffer.readUnsignedByte();//		14 66 116 157 244 170 151 9 27 
		else if (opcode == 82)
			opcode82 = buffer.readUnsignedByte();
		else if (opcode == 117)
			opcode117 = buffer.readUnsignedByte();
		else if ((opcode ^ 0xffffffff) != -17) {
				if (opcode != 18) {
					if ((opcode ^ 0xffffffff) != -24) {
						if (opcode != 24) {
							if (opcode != 25) {
								if ((opcode ^ 0xffffffff) == -27) {
									femaleWornModelId2 = buffer.readBigSmart();
								} else if ((opcode ^ 0xffffffff) &gt; -31
										|| (opcode ^ 0xffffffff) &lt;= -36) {
									if ((opcode ^ 0xffffffff) &lt;= -36
											&amp;&amp; (opcode ^ 0xffffffff) &gt; -41) {
										aStringArray1901[-35 + opcode] = buffer
												.readString();
									} else if (opcode != 40) {
										if (opcode == 41) {
											int i_18_ = buffer
													.readUnsignedByte();
											originalTextureColors = new short[i_18_];
											modifiedTextureColors = new short[i_18_];
											for (int i_19_ = 0; (i_18_ ^ 0xffffffff) &lt; (i_19_ ^ 0xffffffff); i_19_++) {
												originalTextureColors[i_19_] = (short) buffer
														.readUnsignedShort();
												modifiedTextureColors[i_19_] = (short) buffer
														.readUnsignedShort();
											}
										} else if (opcode != 42) {
											if ((opcode ^ 0xffffffff) != -66) {
												if ((opcode ^ 0xffffffff) == -79) {
													maleWornModelId3 = buffer
															.readBigSmart();
												} else if (opcode != 79) {
													if (opcode != 90) {
														if (opcode == 91) {
															anInt1863 = buffer
																	.readBigSmart();
														} else if (opcode != 92) {
															if ((opcode ^ 0xffffffff) == -94) {
																anInt1897 = buffer
																		.readBigSmart();
															} else if ((opcode ^ 0xffffffff) != -96) {
																if ((opcode ^ 0xffffffff) != -97) {
																	if (opcode != 97) {
																		if ((opcode ^ 0xffffffff) == -99) {
																			anInt1857 = buffer
																					.readUnsignedShort();
																		} else if (opcode &lt; 100
																				|| opcode &gt;= 110) {
																			if ((opcode ^ 0xffffffff) != -111) {
																				if (opcode != 111) {
																					if ((opcode ^ 0xffffffff) == -113) {
																						anInt1896 = buffer
																								.readUnsignedShort();
																					} else if ((opcode ^ 0xffffffff) == -114) {
																						anInt1876 = buffer
																								.readByte();
																					} else if ((opcode ^ 0xffffffff) != -115) {
																						if (opcode != 115) {
																							if (opcode != 121) {
																								if (opcode == 122) {
																									anInt1852 = buffer
																											.readUnsignedShort();
																								} else if ((opcode ^ 0xffffffff) != -126) {
																									if (opcode != 126) {
																										if ((opcode ^ 0xffffffff) == -128) {
																											anInt1908 = buffer
																													.readUnsignedByte();
																											anInt1889 = buffer
																													.readUnsignedShort();
																										} else if (opcode != 128) {
																											if (opcode != 129) {
																												if (opcode == 130) {
																													anInt1864 = buffer
																															.readUnsignedByte();
																													anInt1862 = buffer
																															.readUnsignedShort();
																												} else if (opcode == 132) {
																													int i_20_ = buffer
																															.readUnsignedByte();
																													anIntArray1926 = new int[i_20_];
																													for (int i_21_ = 0; i_20_ &gt; i_21_; i_21_++)
																														anIntArray1926[i_21_] = buffer
																																.readUnsignedShort();
																												} else if (opcode == 134) {
																													anInt1919 = buffer
																															.readUnsignedByte();
																												} else if ((opcode ^ 0xffffffff) == -140) {
																													anInt1891 = buffer
																															.readUnsignedShort();
																												} else if ((opcode ^ 0xffffffff) == -141) {
																													anInt1928 = buffer
																															.readUnsignedShort();
																												} else if ((opcode ^ 0xffffffff) == -250) {
																													int i_22_ = buffer
																															.readUnsignedByte();
																													if (aHashTable1873 == null) {
																														int i_23_ = Class320_Sub19
																																.method3753(
																																		i_22_,
																																		-729073628);
																														aHashTable1873 = new HashTable(
																																i_23_);
																													}
																													for (int i_24_ = 0; i_22_ &gt; i_24_; i_24_++) {
																														boolean bool_25_ = buffer
																																.readUnsignedByte() == 1;
																														int i_26_ = buffer
																																.read24BitInteger();
																														Node node;
																														if (!bool_25_) {
																															node = new Node_Sub32(
																																	buffer.readInt());
																														} else {
																															node = new Node_Sub18(
																																	buffer.readString());
																														}
																														aHashTable1873
																																.method1515(
																																		(long) i_26_,
																																		node,
																																		-127);
																													}
																												}
																											} else {
																												anInt1900 = buffer
																														.readUnsignedByte();
																												anInt1859 = buffer
																														.readUnsignedShort();
																											}
																										} else {
																											anInt1849 = buffer
																													.readUnsignedByte();
																											anInt1851 = buffer
																													.readUnsignedShort();
																										}
																									} else {
																										anInt1890 = buffer
																												.readByte() &lt;&lt; 2;
																										anInt1893 = buffer
																												.readByte() &lt;&lt; 2;
																										anInt1916 = buffer
																												.readByte() &lt;&lt; 2;
																									}
																								} else {
																									anInt1931 = buffer
																											.readByte() &lt;&lt; 2;
																									anInt1930 = buffer
																											.readByte() &lt;&lt; 2;
																									anInt1895 = buffer
																											.readByte() &lt;&lt; 2;
																								}
																							} else {
																								anInt1927 = buffer
																										.readUnsignedShort();
																							}
																						} else {
																							anInt1899 = buffer
																									.readUnsignedByte();
																						}
																					} else {
																						anInt1886 = buffer
																								.readByte() * 5;
																					}
																				} else {
																					anInt1911 = buffer
																							.readUnsignedShort();
																				}
																			} else {
																				anInt1904 = buffer
																						.readUnsignedShort();
																			}
																		} else {
																			if (anIntArray1918 == null) {
																				anIntArray1872 = new int[10];
																				anIntArray1918 = new int[10];
																			}
																			anIntArray1918[opcode - 100] = buffer
																					.readUnsignedShort();
																			anIntArray1872[-100
																					+ opcode] = buffer
																					.readUnsignedShort();
																		}
																	} else {
																		anInt1887 = buffer
																				.readUnsignedShort();
																	}
																} else {
																	anInt1877 = buffer
																			.readUnsignedByte();
																}
															} else {
																anInt1866 = buffer
																		.readUnsignedShort();
															}
														} else {
															anInt1888 = buffer
																	.readBigSmart();
														}
													} else {
														anInt1913 = buffer
																.readBigSmart();
													}
												} else {
													femaleWornModelId3 = buffer
															.readBigSmart();
												}
											} else {
												aBoolean1933 = true;
											}
										} else {
											int i_27_ = buffer
													.readUnsignedByte();
											aByteArray1882 = new byte[i_27_];
											for (int i_28_ = 0; i_27_ &gt; i_28_; i_28_++)
												aByteArray1882[i_28_] = buffer
														.readByte();
										}
									} else {
										int i_29_ = buffer.readUnsignedByte();
										aShortArray1856 = new short[i_29_];
										aShortArray1865 = new short[i_29_];
										for (int i_30_ = 0; i_29_ &gt; i_30_; i_30_++) {
											aShortArray1856[i_30_] = (short) buffer
													.readUnsignedShort();
											aShortArray1865[i_30_] = (short) buffer
													.readUnsignedShort();
										}
									}
								} else {
									aStringArray1920[opcode + -30] = buffer
											.readString();
								}
							} else {
								femaleWornModelId1 = buffer.readBigSmart();
							}
						} else {
							maleWornModelId2 = buffer.readBigSmart();
						}
					} else {
						maleWornModelId1 = buffer.readBigSmart();
					}
				} else {
					anInt1879 = buffer.readUnsignedShort();
				}
			} else {
				aBoolean1871 = true;
			}
		} else {
			aString1860 = buffer.readString();
		}
		anInt1922++;
		if (bool != false) {
			anInt1879 = 4;
		}
	}
	private int opcode13;
	private int opcode82;
	private int opcode117;
	private int opcode66;
	private int opcode116;
	private int opcode157;
	private int opcode244;
	private int opcode170;
	private int opcode151;
	private int opcode14;
	private int opcode27;
	private int opcode9;
</code></p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="http://i47.tinypic.com/2zdwpw3.png" title="2zdwpw3.png" rel="nofollow noopener"><img src="http://i47.tinypic.com/2zdwpw3.png" alt width="690" height="335"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">2zdwpw3.png</span><span class="informations">760×370</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
<p>The opcodes are all within the first file just replace old files with these new ones you may or may not get 1 or 2 errors depending on how well you do this lol</p>
<p>[center]Credits to<br>
Zamorak (dumps/cache)<br>
TimeRS3 (opcodes)[/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340/1</link>
        <pubDate>Thu, 19 Jul 2012 20:55:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450340-1</guid>
        <source url="https://forum.moparisthebest.com/t/667-723-dumps-opcodes-cache/450340.rss">667/723 Dumps/Opcodes/Cache</source>
      </item>
  </channel>
</rss>
