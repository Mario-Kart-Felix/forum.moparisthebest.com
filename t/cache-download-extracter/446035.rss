<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache download extracter</title>
    <link>https://forum.moparisthebest.com/t/cache-download-extracter/446035</link>
    <description>Okay so I&#39;m hoping this is the right section...

Well I&#39;ve spent over 15+ hours just on one simple thing, but I&#39;m stuck on this last part.

So here is some scripts...

CacheDownloader 1

[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
etc...
[/code]




CacheDownloader 2

[code]
etc.. here ; next section...
@author: Google411

06/11/2011

CacheDownloader.java
Version: 2.00.12

Notes:
Thank-you openice123 for this. Thank-you Onlyme for a quick fix.
And thank you JUSTINNN for the original post! FROM Rune-Server
ORIGINAL RAW CODE: http://paste.rune-server.org/905

$$ If you want to disable the pipup messages just null out these lines

Line: 102 - 
cacheHasUpdated();
Line: 108 - 
cacheHasUpdated();
With
Line: 102 - 
//cacheHasUpdated();
Line: 108 - 
//cacheHasUpdated();

For you&#39;z nub&#39;z  &lt;¤&gt;¿&lt;¤&gt; Google411 Me


**********************************************/

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import sign.signlink;

public class CacheDownloader {

        private client client;
		client frame;
        private final int BUFFER = 1024;
		/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
		/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
        /* OPTION 3*/private String cacheLink = &quot;https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1&quot; ;   // URL of cache on remote server. IE: &quot;http://google.com/cache.zip&quot;
		/* OPTION 4 */private String cacheDir = &quot;C:/VadePK/&quot; ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing &#39;/&#39; 
		/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        private String fileToExtract = getCacheDir() + getArchivedName();
        public CacheDownloader(client client) {
                this.client = client;
        }

etc... character limit :P
[/code]

Cache Updater
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheUpdater {

	private client client;

	private final int BUFFER = 1024;

	private final int UPDATE = 11; // Version of cache
	private String updateLink = &quot;https://dl.dropbox.com/s/3mgra0upzjmoezh/update4.zip?dl=1&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheUpdater(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(2, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getUpdateLink() {
		return updateLink;
	}

	private int getUpdateVersion() {
		return UPDATE;
	}

	public CacheUpdater updateCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getUpdateVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getUpdateLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getUpdateVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getUpdateLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getUpdateVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Loading new updates &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Unpacking...&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getUpdateLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getUpdateLink().length() -1) { 
			return getUpdateLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
[/code]

client
[code]
private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k)
	{
		byte abyte0[] = null;
		int l = 5;
        try
        {
            if(decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
			}
            if(abyte0 == null)
            {
                drawLoadingText(0, &quot;Connecting to File Server...&quot;);
                new Update(&quot;https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1&quot;, &quot;VadePK.zip&quot;, signlink.findcachedir());
                  abyte0 = decompressors[0].decompress(i);
			}
        } catch (Exception e) {
			e.printStackTrace();
		}
		if(abyte0 != null)
		{
			NamedArchive archive = new NamedArchive(abyte0, s);
			return archive;
		}
		while (true) {
			drawLoadingText(0, &quot;Error loading... Please report!&quot;);
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void dropClient()
    {
        if(anInt1011 &gt; 0)
        {
            resetLogout();
            return;
        }
        inGameScreen.initDrawingArea();
        reestablish.drawSprite(8,9);
        inGameScreen.drawGraphics(4, super.graphics, 4);
        anInt1021 = 0;
        destX = 0;
        RSSocket rsSocket = socketStream;
        loggedIn = false;
        loginFailures = 0;
        login(myUsername, myPassword, true);
        if(!loggedIn)
            resetLogout();
        try
        {
            rsSocket.close();
        }
        catch(Exception _ex)
        {
        }
    }
[/code]

So basically I have this...

[IMG]http://i623.photobucket.com/albums/tt313/magemaniac33/vadepk.png[/img]

[IMG]http://i623.photobucket.com/albums/tt313/magemaniac33/cachestarting.png[/img]

[IMG]http://i623.photobucket.com/albums/tt313/magemaniac33/cachedownloading.png[/img]

[IMG]http://i623.photobucket.com/albums/tt313/magemaniac33/cacheerror.png[/img]

[IMG]http://i623.photobucket.com/albums/tt313/magemaniac33/insidefolder.png[/img]

So yeah this is basically it. It will only extract one ZIP folder. Not the other. I&#39;ve used one link for all, but it still will not work. I really am not sure what to do. I&#39;ve coded so much making a auto detector for jdk and java with downloader and silent install. If you help me I will give you it.</description>
    
    <lastBuildDate>Wed, 20 Jun 2012 13:29:13 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-download-extracter/446035.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache download extracter</title>
        <dc:creator><![CDATA[@magemaniac33 magemaniac33]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/magemaniac33">@magemaniac33</a> wrote:</p>
          <blockquote>
              <p>Okay so I’m hoping this is the right section…</p>
<p>Well I’ve spent over 15+ hours just on one simple thing, but I’m stuck on this last part.</p>
<p>So here is some scripts…</p>
<p>CacheDownloader 1</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = "https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1"; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
		
		if(!location.exists()) {
			//drawLoadingText("Loading new Updates....");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText("~ First Time Installation, Only Once! ~");
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
etc...</code></pre>
<p>CacheDownloader 2</p>
<pre><code class="lang-auto">etc.. here ; next section...
@author: Google411

06/11/2011

CacheDownloader.java
Version: 2.00.12

Notes:
Thank-you openice123 for this. Thank-you Onlyme for a quick fix.
And thank you JUSTINNN for the original post! FROM Rune-Server
ORIGINAL RAW CODE: http://paste.rune-server.org/905

$$ If you want to disable the pipup messages just null out these lines

Line: 102 - 
cacheHasUpdated();
Line: 108 - 
cacheHasUpdated();
With
Line: 102 - 
//cacheHasUpdated();
Line: 108 - 
//cacheHasUpdated();

For you'z nub'z  &lt;¤&gt;¿&lt;¤&gt; Google411 Me


**********************************************/

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import sign.signlink;

public class CacheDownloader {

        private client client;
		client frame;
        private final int BUFFER = 1024;
		/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
		/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
        /* OPTION 3*/private String cacheLink = "https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1" ;   // URL of cache on remote server. IE: "http://google.com/cache.zip"
		/* OPTION 4 */private String cacheDir = "C:/VadePK/" ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing '/' 
		/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        private String fileToExtract = getCacheDir() + getArchivedName();
        public CacheDownloader(client client) {
                this.client = client;
        }

etc... character limit :P</code></pre>
<p>Cache Updater</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheUpdater {

	private client client;

	private final int BUFFER = 1024;

	private final int UPDATE = 11; // Version of cache
	private String updateLink = "https://dl.dropbox.com/s/3mgra0upzjmoezh/update4.zip?dl=1"; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheUpdater(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(2, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getUpdateLink() {
		return updateLink;
	}

	private int getUpdateVersion() {
		return UPDATE;
	}

	public CacheUpdater updateCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getUpdateVersion() + ".dat");
		
		if(!location.exists()) {
			//drawLoadingText("Loading new Updates....");
			downloadFile(getUpdateLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getUpdateVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText("~ First Time Installation, Only Once! ~");
				downloadFile(getUpdateLink(), getArchivedName());

				unZip();
				//System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getUpdateVersion() + ".dat"));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + "/" +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, "Loading new updates " + percentage + "%...");

			}

			System.out.println(localFileName + "\t" + numWritten);
			drawLoadingText("Unpacking...");

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getUpdateLink().lastIndexOf('/');
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getUpdateLink().length() -1) { 
			return getUpdateLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println("error retreiving archivaed name.");
		}
		return "";
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println("unzipping2 " + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn't write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          "Delete: no such file or directory: " + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException("Delete: write protected: "
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            "Delete: directory not empty: " + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException("Delete: deletion failed");

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println("unzipping " + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}</code></pre>
<p>client</p>
<pre><code class="lang-auto">private NamedArchive streamLoaderForName(int i, String s, String s1, int j, int k)
	{
		byte abyte0[] = null;
		int l = 5;
        try
        {
            if(decompressors[0] != null) {
                abyte0 = decompressors[0].decompress(i);
			}
            if(abyte0 == null)
            {
                drawLoadingText(0, "Connecting to File Server...");
                new Update("https://dl.dropbox.com/s/7t7mvcvbijuk98n/uacache3.zip?dl=1", "VadePK.zip", signlink.findcachedir());
                  abyte0 = decompressors[0].decompress(i);
			}
        } catch (Exception e) {
			e.printStackTrace();
		}
		if(abyte0 != null)
		{
			NamedArchive archive = new NamedArchive(abyte0, s);
			return archive;
		}
		while (true) {
			drawLoadingText(0, "Error loading... Please report!");
			try {
				Thread.sleep(1000);
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private void dropClient()
    {
        if(anInt1011 &gt; 0)
        {
            resetLogout();
            return;
        }
        inGameScreen.initDrawingArea();
        reestablish.drawSprite(8,9);
        inGameScreen.drawGraphics(4, super.graphics, 4);
        anInt1021 = 0;
        destX = 0;
        RSSocket rsSocket = socketStream;
        loggedIn = false;
        loginFailures = 0;
        login(myUsername, myPassword, true);
        if(!loggedIn)
            resetLogout();
        try
        {
            rsSocket.close();
        }
        catch(Exception _ex)
        {
        }
    }</code></pre>
<p>So basically I have this…</p>
<p><img src="http://i623.photobucket.com/albums/tt313/magemaniac33/vadepk.png" alt width="320" height="320"></p>
<p><img src="http://i623.photobucket.com/albums/tt313/magemaniac33/cachestarting.png" alt width="320" height="320"></p>
<p><img src="http://i623.photobucket.com/albums/tt313/magemaniac33/cachedownloading.png" alt width="320" height="320"></p>
<p><img src="http://i623.photobucket.com/albums/tt313/magemaniac33/cacheerror.png" alt width="320" height="320"></p>
<p><img src="http://i623.photobucket.com/albums/tt313/magemaniac33/insidefolder.png" alt width="320" height="320"></p>
<p>So yeah this is basically it. It will only extract one ZIP folder. Not the other. I’ve used one link for all, but it still will not work. I really am not sure what to do. I’ve coded so much making a auto detector for jdk and java with downloader and silent install. If you help me I will give you it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-download-extracter/446035/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-download-extracter/446035/1</link>
        <pubDate>Wed, 20 Jun 2012 13:29:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-446035-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-download-extracter/446035.rss">Cache download extracter</source>
      </item>
  </channel>
</rss>
