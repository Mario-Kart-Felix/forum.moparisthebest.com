<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Codeusa base {Urgent} need help getting real drops working</title>
    <link>https://forum.moparisthebest.com/t/codeusa-base-urgent-need-help-getting-real-drops-working/373477</link>
    <description>hey guys, i am using the codeusa, pulsepk source.... it had random pvp drops which i have removed and i have been trying for weeks to add real drops [like players drop what they are wearing and in inventory] no one is helping me and this is like the last thing i need to get finished so my server can start becoming more popular. 

i have all of the codes for drops here... what is happening is when i kill someone nothing shows up and same for when someone kills me. if anyone could help me out here i would really appreciate it. thank you

[code]/**
     * Unequip and delete all items player has.
     */
    public void dropAllStuff() {
        if (this == null)
            return;
        PlayerItems pi = new PlayerItems();
        for (int i = 0; i &lt; items.length; i++) {
            if (items[i] == 6570)
                break;
            if (items[i] &gt;= 0) {
                if (Engine.items.isUntradable((items[i]))) {
                    Engine.playerItems.deleteItem(this, items[i], pi.getItemSlot(this, items[i]), itemsN[i]);
                } else {
                    Engine.playerItems.deleteItem(this, items[i], pi.getItemSlot(this, items[i]), itemsN[i]);
                }
            }
        }
        for (int i = 0; i &lt; equipment.length; i++) {
            if (equipment[i] == 6570)
                break;
            if (equipment[i] &gt;= 0) {
                actionSender.removeEquipment(this, equipment[i], i);
                if (Engine.items.isUntradable((items[0]))) {
                    Engine.playerItems.deleteItem(this, items[0], pi.getItemSlot(this, items[0]), itemsN[0]);

                } else {
                    Engine.playerItems.deleteItem(this, items[0], pi.getItemSlot(this, items[0]), itemsN[0]);
                }
            }
        }
        combatType = 0;
    }

    public boolean arrayContains(int[] array, int value) {
        for (int i : array) {
            if (value == i) {
                return true;
            }
        }
        return false;
    }

    public int[] removeValueFromArray(int[] array, int value) {
        int index = -1;
        for (int i = 0; i &lt; array.length; i++) {
            if (value == array[i]) {
                index = i;
            }
        }
        if (index != -1) {
            array[index] = 0;
        }
        return array;
    }

    public int[][] removeValueFromArray(int[][] array, int value) {
        int indexI = -1;
        int indexJ = -1;
        for (int i = 0; i &lt; array.length; i++) {
            for (int j = 0; j &lt; array[i].length; j++) {
                if (value == array[i][j]) {
                    indexI = i;
                    indexJ = j;
                }
            }
        }
        if (indexI != -1 &amp;&amp; indexJ != -1) {
            array[indexI][indexJ] = -1;
        }
        return array;
    }

    public void dropStuff(String opp) {
        if (!wildernessZone(absX, absY)) {
            // Non-wildy - Don&#39;t lose items
            return;
        }
        try {
            Player opponent = Engine.players[Engine.getIdFromName(opp)];
            int amountOfKeptItems = isSkulled ? (usingPrayer(10) ? 1 : 0) : (usingPrayer(10) ? 4 : 3);
            int[] allItems = new int[items.length + equipment.length];
            int[] allItemsN = new int[itemsN.length + equipmentN.length];
            int[] keptItems = new int[amountOfKeptItems];
            int[] toAdd = new int[keptItems.length];
            System.arraycopy(items, 0, allItems, 0, items.length);
            System.arraycopy(equipment, 0, allItems, items.length, equipment.length);
            System.arraycopy(itemsN, 0, allItemsN, 0, itemsN.length);
            System.arraycopy(equipmentN, 0, allItemsN, itemsN.length, equipmentN.length);
            for (int i = 0; i &lt; keptItems.length; i++) {
                int index = 0;
                int standing = 0;
                for (int j = 0; j &lt; allItems.length; j++) {
                    if (allItems[j] &lt; 1) {
                        continue;
                    }
                    int price = Engine.items.itemLists[allItems[j]].shopValue;
                    if (price &gt; standing) {
                        index = j;
                        standing = price;
                    }
                }
                keptItems[i] = allItems[index];
                toAdd[i] = allItems[index];
                allItemsN[index]--;
                if (allItemsN[index] == 0) {
                    allItems[index] = 0;
                }
            }
            for (int i = 0; i &lt; items.length; i++) {
                if (items[i] &gt; 0) {
                    if (!arrayContains(keptItems, items[i])) {
                        if (Engine.items.isUntradable((items[i]))) {
                            if (items[i] != 13290) {
                                Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, username);
                            } else {
                                actionSender.sendMessage(this, &quot;Your Vesta&#39;s longsword shatters as it hits the ground.&quot;);
                                degrade = 6000;
                                degrades = false;
                            }
                            Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
                        } else {
                            //Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, opp);
                        }
                    } else {
                        keptItems = removeValueFromArray(keptItems, items[i]);
                    }
                    Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
                }
            }
            for (int i = 0; i &lt; equipment.length; i++) {
                if (equipment[i] &gt; 0) {
                    actionSender.removeEquipment(this, equipment[i], i);
                    if (!arrayContains(keptItems, items[0])) {
                        if (Engine.items.isUntradable((items[0]))) {
                            if (items[0] != 13290) {
                                Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, username);
                            } else {
                                actionSender.sendMessage(this, &quot;Your Vesta&#39;s longsword shatters as it hits the ground.&quot;);
                                degrade = 6000;
                                degrades = false;
                            }
                            Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                        } else {
                            //Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, opp);
                        }
                    } else {
                        keptItems = removeValueFromArray(keptItems, items[0]);
                    }
                    Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                }
            }
            for (int i : toAdd) {
                if (i &gt; 0) {
                    Engine.playerItems.addItem(this, i, 1);
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(&quot;Null drop: &quot; + opp);
        }
    }
    public void dropRealItems(String opp) {
        try {
            Player opponent = Engine.players[Engine.getIdFromName(opp)];
            int amountOfKeptItems = usingPrayer(10) ? 1 : 0;
            int[] allItems = new int[items.length + equipment.length];
            int[] allItemsN = new int[itemsN.length + equipmentN.length];
            int[] keptItems = new int[amountOfKeptItems];
            int[] toAdd = new int[keptItems.length];
            System.arraycopy(items, 0, allItems, 0, items.length);
            System.arraycopy(equipment, 0, allItems, items.length, equipment.length);
            System.arraycopy(itemsN, 0, allItemsN, 0, itemsN.length);
            System.arraycopy(equipmentN, 0, allItemsN, itemsN.length, equipmentN.length);
            for (int i = 0; i &lt; keptItems.length; i++) {
                int index = 0;
                int standing = 0;
                for (int j = 0; j &lt; allItems.length; j++) {
                    if (allItems[j] &lt; 1) {
                        continue;
                    }
                    int price = Engine.items.itemLists[allItems[j]].shopValue;
                    if (price &gt; standing) {
                        index = j;
                        standing = price;
                    }
                }
                keptItems[i] = allItems[index];
                toAdd[i] = allItems[index];
                allItemsN[index]--;
                if (allItemsN[index] == 0) {
                    allItems[index] = 0;
                }
            }
            for (int i = 0; i &lt; items.length; i++) {
                if (items[i] &gt; 0) {
                    if (!arrayContains(keptItems, items[i])) {
                        if (Engine.items.isUntradable((items[i]))) {
                            Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, username);
                            Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this,
                                    items[i]), itemsN[i]);
                        } else {
                            Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, opp, username);
                        }
                    } else {
                        keptItems = removeValueFromArray(keptItems, items[i]);
                    }
                    Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
                }
            }
            for (int i = 0; i &lt; equipment.length; i++) {
                if (equipment[i] &gt; 0) {
                    actionSender.removeEquipment(this, equipment[i], i);
                    if (!arrayContains(keptItems, items[0])) {
                        if (Engine.items.isUntradable((items[0]))) {
                            Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, username);
                            Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                        } else {
                            Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, opp, username);
                        }
                    } else {
                        keptItems = removeValueFromArray(keptItems, items[0]);
                    }
                    Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                }
            }
            for (int i : toAdd) {
                if (i &gt; 0) {
                    Engine.playerItems.addItem(this, i, 1);
                }
            }
            Engine.items.createGroundItem(526, 1, absX, absY, heightLevel, opp);
        } catch (Exception e) {
            e.printStackTrace();
            System.out.println(&quot;Null drop: &quot; + opp);
        }
    }

    public int totalValue(int[] items) {
        int totalValue = 0;
        try {
            int[] allItems = new int[items.length + equipment.length];
            System.arraycopy(items, 0, allItems, 0, items.length);
            System.arraycopy(equipment, 0, allItems, items.length, equipment.length);

            for (int i : allItems) {
                totalValue += getItemValue(i);
            }
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
        return totalValue;
    }[/code]</description>
    
    <lastBuildDate>Thu, 16 Dec 2010 04:25:52 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/codeusa-base-urgent-need-help-getting-real-drops-working/373477.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Codeusa base {Urgent} need help getting real drops working</title>
        <dc:creator><![CDATA[@fashofasho fashofasho]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fashofasho">@fashofasho</a> wrote:</p>
          <blockquote>
              <p>hey guys, i am using the codeusa, pulsepk source… it had random pvp drops which i have removed and i have been trying for weeks to add real drops [like players drop what they are wearing and in inventory] no one is helping me and this is like the last thing i need to get finished so my server can start becoming more popular.</p>
<p>i have all of the codes for drops here… what is happening is when i kill someone nothing shows up and same for when someone kills me. if anyone could help me out here i would really appreciate it. thank you</p>
<p>[code]/**<br>
* Unequip and delete all items player has.<br>
*/<br>
public void dropAllStuff() {<br>
if (this == null)<br>
return;<br>
PlayerItems pi = new PlayerItems();<br>
for (int i = 0; i &lt; items.length; i++) {<br>
if (items[i] == 6570)<br>
break;<br>
if (items[i] &gt;= 0) {<br>
if (Engine.items.isUntradable((items[i]))) {<br>
Engine.playerItems.deleteItem(this, items[i], pi.getItemSlot(this, items[i]), itemsN[i]);<br>
} else {<br>
Engine.playerItems.deleteItem(this, items[i], pi.getItemSlot(this, items[i]), itemsN[i]);<br>
}<br>
}<br>
}<br>
for (int i = 0; i &lt; equipment.length; i++) {<br>
if (equipment[i] == 6570)<br>
break;<br>
if (equipment[i] &gt;= 0) {<br>
actionSender.removeEquipment(this, equipment[i], i);<br>
if (Engine.items.isUntradable((items[0]))) {<br>
Engine.playerItems.deleteItem(this, items[0], pi.getItemSlot(this, items[0]), itemsN[0]);</p>
<pre><code>            } else {
                Engine.playerItems.deleteItem(this, items[0], pi.getItemSlot(this, items[0]), itemsN[0]);
            }
        }
    }
    combatType = 0;
}

public boolean arrayContains(int[] array, int value) {
    for (int i : array) {
        if (value == i) {
            return true;
        }
    }
    return false;
}

public int[] removeValueFromArray(int[] array, int value) {
    int index = -1;
    for (int i = 0; i &lt; array.length; i++) {
        if (value == array[i]) {
            index = i;
        }
    }
    if (index != -1) {
        array[index] = 0;
    }
    return array;
}

public int[][] removeValueFromArray(int[][] array, int value) {
    int indexI = -1;
    int indexJ = -1;
    for (int i = 0; i &lt; array.length; i++) {
        for (int j = 0; j &lt; array[i].length; j++) {
            if (value == array[i][j]) {
                indexI = i;
                indexJ = j;
            }
        }
    }
    if (indexI != -1 &amp;&amp; indexJ != -1) {
        array[indexI][indexJ] = -1;
    }
    return array;
}

public void dropStuff(String opp) {
    if (!wildernessZone(absX, absY)) {
        // Non-wildy - Don't lose items
        return;
    }
    try {
        Player opponent = Engine.players[Engine.getIdFromName(opp)];
        int amountOfKeptItems = isSkulled ? (usingPrayer(10) ? 1 : 0) : (usingPrayer(10) ? 4 : 3);
        int[] allItems = new int[items.length + equipment.length];
        int[] allItemsN = new int[itemsN.length + equipmentN.length];
        int[] keptItems = new int[amountOfKeptItems];
        int[] toAdd = new int[keptItems.length];
        System.arraycopy(items, 0, allItems, 0, items.length);
        System.arraycopy(equipment, 0, allItems, items.length, equipment.length);
        System.arraycopy(itemsN, 0, allItemsN, 0, itemsN.length);
        System.arraycopy(equipmentN, 0, allItemsN, itemsN.length, equipmentN.length);
        for (int i = 0; i &lt; keptItems.length; i++) {
            int index = 0;
            int standing = 0;
            for (int j = 0; j &lt; allItems.length; j++) {
                if (allItems[j] &lt; 1) {
                    continue;
                }
                int price = Engine.items.itemLists[allItems[j]].shopValue;
                if (price &gt; standing) {
                    index = j;
                    standing = price;
                }
            }
            keptItems[i] = allItems[index];
            toAdd[i] = allItems[index];
            allItemsN[index]--;
            if (allItemsN[index] == 0) {
                allItems[index] = 0;
            }
        }
        for (int i = 0; i &lt; items.length; i++) {
            if (items[i] &gt; 0) {
                if (!arrayContains(keptItems, items[i])) {
                    if (Engine.items.isUntradable((items[i]))) {
                        if (items[i] != 13290) {
                            Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, username);
                        } else {
                            actionSender.sendMessage(this, "Your Vesta's longsword shatters as it hits the ground.");
                            degrade = 6000;
                            degrades = false;
                        }
                        Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
                    } else {
                        //Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, opp);
                    }
                } else {
                    keptItems = removeValueFromArray(keptItems, items[i]);
                }
                Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
            }
        }
        for (int i = 0; i &lt; equipment.length; i++) {
            if (equipment[i] &gt; 0) {
                actionSender.removeEquipment(this, equipment[i], i);
                if (!arrayContains(keptItems, items[0])) {
                    if (Engine.items.isUntradable((items[0]))) {
                        if (items[0] != 13290) {
                            Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, username);
                        } else {
                            actionSender.sendMessage(this, "Your Vesta's longsword shatters as it hits the ground.");
                            degrade = 6000;
                            degrades = false;
                        }
                        Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                    } else {
                        //Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, opp);
                    }
                } else {
                    keptItems = removeValueFromArray(keptItems, items[0]);
                }
                Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
            }
        }
        for (int i : toAdd) {
            if (i &gt; 0) {
                Engine.playerItems.addItem(this, i, 1);
            }
        }
    } catch (Exception e) {
        e.printStackTrace();
        System.out.println("Null drop: " + opp);
    }
}
public void dropRealItems(String opp) {
    try {
        Player opponent = Engine.players[Engine.getIdFromName(opp)];
        int amountOfKeptItems = usingPrayer(10) ? 1 : 0;
        int[] allItems = new int[items.length + equipment.length];
        int[] allItemsN = new int[itemsN.length + equipmentN.length];
        int[] keptItems = new int[amountOfKeptItems];
        int[] toAdd = new int[keptItems.length];
        System.arraycopy(items, 0, allItems, 0, items.length);
        System.arraycopy(equipment, 0, allItems, items.length, equipment.length);
        System.arraycopy(itemsN, 0, allItemsN, 0, itemsN.length);
        System.arraycopy(equipmentN, 0, allItemsN, itemsN.length, equipmentN.length);
        for (int i = 0; i &lt; keptItems.length; i++) {
            int index = 0;
            int standing = 0;
            for (int j = 0; j &lt; allItems.length; j++) {
                if (allItems[j] &lt; 1) {
                    continue;
                }
                int price = Engine.items.itemLists[allItems[j]].shopValue;
                if (price &gt; standing) {
                    index = j;
                    standing = price;
                }
            }
            keptItems[i] = allItems[index];
            toAdd[i] = allItems[index];
            allItemsN[index]--;
            if (allItemsN[index] == 0) {
                allItems[index] = 0;
            }
        }
        for (int i = 0; i &lt; items.length; i++) {
            if (items[i] &gt; 0) {
                if (!arrayContains(keptItems, items[i])) {
                    if (Engine.items.isUntradable((items[i]))) {
                        Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, username);
                        Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this,
                                items[i]), itemsN[i]);
                    } else {
                        Engine.items.createGroundItem(items[i], itemsN[i], absX, absY, heightLevel, opp, username);
                    }
                } else {
                    keptItems = removeValueFromArray(keptItems, items[i]);
                }
                Engine.playerItems.deleteItem(this, items[i], Engine.playerItems.getItemSlot(this, items[i]), itemsN[i]);
            }
        }
        for (int i = 0; i &lt; equipment.length; i++) {
            if (equipment[i] &gt; 0) {
                actionSender.removeEquipment(this, equipment[i], i);
                if (!arrayContains(keptItems, items[0])) {
                    if (Engine.items.isUntradable((items[0]))) {
                        Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, username);
                        Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
                    } else {
                        Engine.items.createGroundItem(items[0], itemsN[0], absX, absY, heightLevel, opp, username);
                    }
                } else {
                    keptItems = removeValueFromArray(keptItems, items[0]);
                }
                Engine.playerItems.deleteItem(this, items[0], Engine.playerItems.getItemSlot(this, items[0]), itemsN[0]);
            }
        }
        for (int i : toAdd) {
            if (i &gt; 0) {
                Engine.playerItems.addItem(this, i, 1);
            }
        }
        Engine.items.createGroundItem(526, 1, absX, absY, heightLevel, opp);
    } catch (Exception e) {
        e.printStackTrace();
        System.out.println("Null drop: " + opp);
    }
}

public int totalValue(int[] items) {
    int totalValue = 0;
    try {
        int[] allItems = new int[items.length + equipment.length];
        System.arraycopy(items, 0, allItems, 0, items.length);
        System.arraycopy(equipment, 0, allItems, items.length, equipment.length);

        for (int i : allItems) {
            totalValue += getItemValue(i);
        }
    } catch (Exception e) {
        e.printStackTrace();
        return 0;
    }
    return totalValue;
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/codeusa-base-urgent-need-help-getting-real-drops-working/373477/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/codeusa-base-urgent-need-help-getting-real-drops-working/373477/1</link>
        <pubDate>Thu, 16 Dec 2010 04:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-373477-1</guid>
        <source url="https://forum.moparisthebest.com/t/codeusa-base-urgent-need-help-getting-real-drops-working/373477.rss">Codeusa base {Urgent} need help getting real drops working</source>
      </item>
  </channel>
</rss>
