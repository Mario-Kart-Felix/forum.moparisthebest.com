<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A Better Way To Save Entity Credentials</title>
    <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622</link>
    <description>Today I was going through my old rs2 documents regarding client and server development and stumbled upon something I wrote up a few years ago (which is still helpful in this day and age).

Basically, many servers commonly used place the account credentials of each player entity in individual text files or save to a SQL database. The first option is obviously a VERY poor decision due to the constant writes to the disk and the fragmentation/overall clutter of having thousands of tiny to medium-sized text files laying around. The second option seems a little bit extreme and requires quite a bit of resources considering one must have a SQL server running and must also learn a little bit about SQL syntax and whatnot.

So, what&#39;s the solution? Create your own database-like structure that only reads/writes to the disk when necessary.

The database would be a Map (or Dictionary in other languages). This being said, each entry in the map will have a key and value pair. The key should be something that is unique to the entity and the value should be the entity (or the credentials) itself. In the case of player entities, the unique identifier is the username - since it will never change for that account (or login name).

Okay, the database structure is settled; when should one read or write to the disk? Well, obviously the database would need to be loaded on start-up and saved on shut-down (or at a periodic interval of 30 minutes to one hour to prevent data loss on unexpected shutdowns, perhaps?).

Now we know when to read/write, how do we read/write the database to the disk? Simple, use ObjectInputStream and ObjectOutputStream for a quick one-time read and infrequent writes.

What are the other advantages to using this method of storing data? Well, for one, they values are iterable which means one could easily search through the database if he/she wished to find an entity that contained a certain credential value. (Example: the administrator wants to see what players in the database have a Red Partyhat equipped). The database class also takes a generic value data-type; meaning that this database implementation isn&#39;t limited to just player entities.

Okay, we&#39;ve heard you ramble long enough - can we actually see functionality? To test this, we will need a class that is an entity and another class to execute the database functionality.

The serializable entity:
[code=java]
import java.io.Serializable;

/**
 * Arbitrary class containing encapsulated data
 * to demonstrate database functionality
 * @author T4_
 */
public class TestDataChunk implements Serializable {

	/** Serial ID */
	private static final long serialVersionUID = 5154610144003298195L;
	
	/** Arbitrary piece of data */
	private String str;

	/**
	 * Arbitrary constructor to create an instance
	 * @param str
	 */
	public TestDataChunk(String str) {
		this.str = str;
	}

	/**
	 * Arbitrary method to &#39;compare&#39; DataChunks
	 */
	@Override
	public String toString() {
		return str;
	}

}
[/code]

The test class:
[code=java]
import org.t4.database.Database;
import org.t4.database.DatabaseSaveException;

/**
 * Testing class
 * @author T4_
 */
public class Test {

	/**
	 * Testing method
	 * @param args
	 */
	public static void main(String[] args) {
		
		String dbName = &quot;myDatabase.db&quot;;
		
		if(new java.io.File(dbName).exists()) {
			
			/*
			 * The database does exist, so running through loading processes
			 */
			
			/* The database */
			Database&lt;TestDataChunk&gt; dbExample = new Database&lt;TestDataChunk&gt;(dbName);
			
			/* Print the database */
			dbExample.print();
			
		} else {
			/*
			 * The database doesn&#39;t exist, so running through first creation processes
			 */
			
			/* The database */
			Database&lt;TestDataChunk&gt; dbExample = new Database&lt;TestDataChunk&gt;(dbName);
			
			/* Create various instances of the chunks containing different data */
			TestDataChunk dataChunk1 = new TestDataChunk(&quot;I am dataChunk1&quot;);
			TestDataChunk dataChunk2 = new TestDataChunk(&quot;I am dataChunk2&quot;);
			TestDataChunk dataChunk3 = new TestDataChunk(&quot;I am dataChunk3&quot;);
	
			/* Add the chunks to the database (each assigned a name) */
			dbExample.put(&quot;dc1&quot;, dataChunk1);
			dbExample.put(&quot;dc2&quot;, dataChunk2);
			dbExample.put(&quot;dc3&quot;, dataChunk3);
			
			/* Print the database */
			dbExample.print();
			
			/* Remove a chunk */
			dbExample.remove(&quot;dc2&quot;);
			
			/* Print the database */
			dbExample.print();
			
			/* Look up a chunk by name */
			TestDataChunk dataChunk1_ = dbExample.get(&quot;dc1&quot;);
			System.out.println(dataChunk1_);
			
			/* Save the database */
			try {
				dbExample.saveDatabase();
			} catch (DatabaseSaveException e) {
				System.err.println(&quot;Couldn&#39;t save database!&quot;);
			}			
		}
		
		
	}
	
}
[/code]

The output is fairly obvious, and I won&#39;t waste time posting it - you can run it yourself if you&#39;re curious.

All in all, the approach and the implementation is very easy and straightforward. This isn&#39;t anything amazing - just an improvement from the other implementations out there.

Below is a download link which is an archive containing a binary jar, a source jar, (both containing all needed classes to implement this) and a javadoc.

Download Link:
[code]http://gyrat.in/downloads/software/database.zip[/code]

If you have any questions regarding this thread, post here and [b]do not[/b] PM me.</description>
    
    <lastBuildDate>Thu, 07 Jul 2011 16:44:04 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="402622">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/demps2k9/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> demps2k9:</div>
<blockquote>
<p>I will try this out along with your other tutorials and give you feedback on how I think it works.</p>
</blockquote>
</aside>
<p>thanks hope to hear</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/9</link>
        <pubDate>Thu, 07 Jul 2011 16:44:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-9</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@demps2k9 demps2k9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/demps2k9">@demps2k9</a> wrote:</p>
          <blockquote>
              <p>I will try this out along with your other tutorials and give you feedback on how I think it works.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/8</link>
        <pubDate>Thu, 07 Jul 2011 01:02:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-8</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>I like it!</p>
<p>There must be a way to instead have like a HashMap&lt;DataType, HashMap&lt;String, E&gt;&gt;</p>
<p>&lt;Integer, &lt;pkpoints, 5&gt;&gt; ya kno?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/7</link>
        <pubDate>Wed, 06 Jul 2011 05:50:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-7</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:5, topic:402622”]Lol, random shit idea:</p>
<p>Have a hashmap&lt;String, Object&gt; encapsulate all player variables in an EntityVariable class and use (Integer)(hm.get(“variablename”)) for all types of variables.</p>
<p>Problem?[/quote]<br>
Fuck that’s ugly.</p>
<p>HashMap&lt;String, Integer&gt; myIntegers; !!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/6</link>
        <pubDate>Wed, 06 Jul 2011 05:21:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-6</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Lol, random shit idea:</p>
<p>Have a hashmap&lt;String, Object&gt; encapsulate all player variables in an EntityVariable class and use (Integer)(hm.get(“variablename”)) for all types of variables.</p>
<p>Problem?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/5</link>
        <pubDate>Wed, 06 Jul 2011 05:12:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-5</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:3, topic:402622”]But now you’d have to have the transient modifier for all fields you don’t want to be saved</p>
<p>Good idea still[/quote]<br>
Or you could still have an EntitySave class which encapsulates all the data you’d want to save - tad bit redundant; both ways work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/4</link>
        <pubDate>Wed, 06 Jul 2011 04:52:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-4</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>But now you’d have to have the transient modifier for all fields you don’t want to be saved</p>
<p>Good idea still</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/3</link>
        <pubDate>Wed, 06 Jul 2011 03:02:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@xxxtilllyxxx xxxtilllyxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxxtilllyxxx">@xxxtilllyxxx</a> wrote:</p>
          <blockquote>
              <p>Great Job!!! Lets hope people use this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/2</link>
        <pubDate>Wed, 06 Jul 2011 02:35:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
      <item>
        <title>A Better Way To Save Entity Credentials</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>Today I was going through my old rs2 documents regarding client and server development and stumbled upon something I wrote up a few years ago (which is still helpful in this day and age).</p>
<p>Basically, many servers commonly used place the account credentials of each player entity in individual text files or save to a SQL database. The first option is obviously a VERY poor decision due to the constant writes to the disk and the fragmentation/overall clutter of having thousands of tiny to medium-sized text files laying around. The second option seems a little bit extreme and requires quite a bit of resources considering one must have a SQL server running and must also learn a little bit about SQL syntax and whatnot.</p>
<p>So, what’s the solution? Create your own database-like structure that only reads/writes to the disk when necessary.</p>
<p>The database would be a Map (or Dictionary in other languages). This being said, each entry in the map will have a key and value pair. The key should be something that is unique to the entity and the value should be the entity (or the credentials) itself. In the case of player entities, the unique identifier is the username - since it will never change for that account (or login name).</p>
<p>Okay, the database structure is settled; when should one read or write to the disk? Well, obviously the database would need to be loaded on start-up and saved on shut-down (or at a periodic interval of 30 minutes to one hour to prevent data loss on unexpected shutdowns, perhaps?).</p>
<p>Now we know when to read/write, how do we read/write the database to the disk? Simple, use ObjectInputStream and ObjectOutputStream for a quick one-time read and infrequent writes.</p>
<p>What are the other advantages to using this method of storing data? Well, for one, they values are iterable which means one could easily search through the database if he/she wished to find an entity that contained a certain credential value. (Example: the administrator wants to see what players in the database have a Red Partyhat equipped). The database class also takes a generic value data-type; meaning that this database implementation isn’t limited to just player entities.</p>
<p>Okay, we’ve heard you ramble long enough - can we actually see functionality? To test this, we will need a class that is an entity and another class to execute the database functionality.</p>
<p>The serializable entity:</p>
<pre><code class="lang-auto">import java.io.Serializable;

/**
 * Arbitrary class containing encapsulated data
 * to demonstrate database functionality
 * @author T4_
 */
public class TestDataChunk implements Serializable {

	/** Serial ID */
	private static final long serialVersionUID = 5154610144003298195L;
	
	/** Arbitrary piece of data */
	private String str;

	/**
	 * Arbitrary constructor to create an instance
	 * @param str
	 */
	public TestDataChunk(String str) {
		this.str = str;
	}

	/**
	 * Arbitrary method to 'compare' DataChunks
	 */
	@Override
	public String toString() {
		return str;
	}

}</code></pre>
<p>The test class:</p>
<pre><code class="lang-auto">import org.t4.database.Database;
import org.t4.database.DatabaseSaveException;

/**
 * Testing class
 * @author T4_
 */
public class Test {

	/**
	 * Testing method
	 * @param args
	 */
	public static void main(String[] args) {
		
		String dbName = "myDatabase.db";
		
		if(new java.io.File(dbName).exists()) {
			
			/*
			 * The database does exist, so running through loading processes
			 */
			
			/* The database */
			Database&lt;TestDataChunk&gt; dbExample = new Database&lt;TestDataChunk&gt;(dbName);
			
			/* Print the database */
			dbExample.print();
			
		} else {
			/*
			 * The database doesn't exist, so running through first creation processes
			 */
			
			/* The database */
			Database&lt;TestDataChunk&gt; dbExample = new Database&lt;TestDataChunk&gt;(dbName);
			
			/* Create various instances of the chunks containing different data */
			TestDataChunk dataChunk1 = new TestDataChunk("I am dataChunk1");
			TestDataChunk dataChunk2 = new TestDataChunk("I am dataChunk2");
			TestDataChunk dataChunk3 = new TestDataChunk("I am dataChunk3");
	
			/* Add the chunks to the database (each assigned a name) */
			dbExample.put("dc1", dataChunk1);
			dbExample.put("dc2", dataChunk2);
			dbExample.put("dc3", dataChunk3);
			
			/* Print the database */
			dbExample.print();
			
			/* Remove a chunk */
			dbExample.remove("dc2");
			
			/* Print the database */
			dbExample.print();
			
			/* Look up a chunk by name */
			TestDataChunk dataChunk1_ = dbExample.get("dc1");
			System.out.println(dataChunk1_);
			
			/* Save the database */
			try {
				dbExample.saveDatabase();
			} catch (DatabaseSaveException e) {
				System.err.println("Couldn't save database!");
			}			
		}
		
		
	}
	
}</code></pre>
<p>The output is fairly obvious, and I won’t waste time posting it - you can run it yourself if you’re curious.</p>
<p>All in all, the approach and the implementation is very easy and straightforward. This isn’t anything amazing - just an improvement from the other implementations out there.</p>
<p>Below is a download link which is an archive containing a binary jar, a source jar, (both containing all needed classes to implement this) and a javadoc.</p>
<p>Download Link:</p>
<pre><code class="lang-auto"></code></pre>
<p>If you have any questions regarding this thread, post here and <span class="bbcode-b">do not</span> PM me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622/1</link>
        <pubDate>Wed, 06 Jul 2011 02:30:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-402622-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-better-way-to-save-entity-credentials/402622.rss">A Better Way To Save Entity Credentials</source>
      </item>
  </channel>
</rss>
