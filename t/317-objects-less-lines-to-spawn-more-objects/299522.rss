<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[317][Objects]Less lines to spawn more objects</title>
    <link>https://forum.moparisthebest.com/t/317-objects-less-lines-to-spawn-more-objects/299522</link>
    <description>[b][u]How to make a &quot;better&quot; makeGlobalObject method that can do more with less lines.[/u][/b]

[b]Note: This tutorial does not contain any tabs in the code, you may put them in as you wish.[/b]

Difficulty: 6/10 Unless lazy 2/10
Files Edited: Client.java, MassObjectHandler.java(MassObjectHandler is made in this tutorial)
Back-up: Client.java(You never know if you will be making a mistake)

For learning purposes, All [b]bold[/b] words can be found at the bottom of this post since they are of importance to you so you can expand your vocabulary.

First off, I have a few questions for you.

1:  Are you sick of having thousands upon thousands of lines in your code just for objects?         -[b]Dramatization[/b]
2:  Are you sick of having to figure out what way X and Y go and how to make a box out of objects etc. ?
3:  Are you looking for an easier way to spawn objects?

If you answered &quot;Yes&quot; to any of the previous questions then this is the tutorial for you.
So, On that note let&#39;s get started! :)

[b]1[/b]. First lets fix a few things in Client.java (Again, Remember to back-up your files)

Open Client.java and find:
[code]makeGlobalObject(int x, int y, int typeID, int orientation, int tileObjectType)[/code]

and before void, put [b]static[/b].
Save and close Client.java and compile to see if anything messed up(Post any error&#39;s)
If thats working fine, Continue; else, Open your backup(Assuming you made one!) and copy and paste the scripts into your messed up client.java and compile.

[b]2[/b]. Now, Let us get to constructing your MassObjectHandler! (YAY! The fun part!)
First off, What this will do is help you by making your objects load a bit quicker also make 1 line of code do tons of things. (For you lazy, not wanting to learn bums, I loaded the premade class into the bottom, but its a class, not a java file so you can&#39;t edit it! HA!)

Anyway, Make a NEW java file(Class) called MassObjectHandler.java and open it up.
(Yay....Now for the explaining part....)

Lets start with the imports.
[code]    [/code]
WOOT! NO IMPORTS XD 1 line of code saved!

Anyway....

Next, Lets name the class file.
[code]public class MassObjectHandler {[/code]

All this did was define that we are making a class file.

Now, for the fun parts and the meat of this java file!
[code]public static void ObjLine(int absX, int absY, int Size, int Padding, int Direction, int ObjID, int Type, int Face) {[/code]

This method can be called from client it is what puts all the required int&#39;s into makeGlobalObject.

Now, Pay attention, This will/might get confusing. I&#39;ma give you 3 lines of code to make this go a little quicker. I will still explain fully.
[code]
if(Direction == 0){
client.makeGlobalObject(absX, absY, ObjID, Face, Type);
[/code]

These lines start a [b]if-statement[/b] it check the direction of the line.  If it is 0 the line of objects will go north and south, if it is 1 it will go east and west.
The next line calls makeGlobalObject() from client with the variables absX, absY, ObjID, Face, and Type.  These are: X-Coord, Y-Coord, Object ID, Direction Facing, and Type of object.

The next one decreases the size of the the line of objects by 1. (This is needed to make the code work properly.

Next 3 lines....
[code]for(int i = 0; i &lt; Size; ++i) {
client.makeGlobalObject(absX, absY + i + Padding, ObjID, Face, Type);
}[/code]

First line is a [b]For-Loop[/b] that makes an [b]int[/b], checks if the [b]int[/b] is smaller then Size, if it is, increases i by one then does the stuff in the brackets.

Second line calls makeGlobalObject() from client with the variables absX, absY, ObjID, Face, and Type. But, this time, absY is increased by i then increased more by Padding(or, space between the objects).
Third is a close bracket.

The next 3 lines:
[code]
else if(Direction == 1){
client.makeGlobalObject(absX, absY, ObjID, Face, Type);
[/code]
Same thing as before, but has an [b]Else-If-Statement[/b], what is an if-statement supposed to do if Direction was 1? Well, what else-if is,  If is NOT 0 ELSE try this if. Next lines makes another call to client and asks to speak to makeGlobalObject() so it can tell it when the int&#39;s are.

Next 3 lines:
[code]for(int i = 0; i &lt; Size; ++i) {
client.makeGlobalObject(absX + i + Padding, absY, ObjID, Face, Type);
}[/code]

Accentually the same thing as before the other [b]for-loop[/b], but this time, instead of y being increased by i and then Padding, x is increased because the objects are going east and west this time.
Then a close bracket.

Now, I want you to guess.  If we have all 4 directions covered in the previous 12 lines of code, what do we do now...
If you guessed close the file and go play WoW then you falled...Horribly.....

If you guessed make an [b]if-statement[/b] that checks the direction for anything higher then 1 then your correct!
[code]} else if(Direction &gt; 1) {
System.out.println(&quot;Direction is not existent. 0 or 1 are the only directions.&quot;);
}
[/code]
This makes an [b]Else-If-Statement[/b] that checks if direction is more then 1 and if it is...
Prints in the run.bat file that the direction is not existent, then another awesome close bracket! infact, make [b]2[/b] close brackets because we are done with that method!!

Alright!
Now, I&#39;ma give you the whole method since its pretty simple. 
[code]public static void ObjSQ(int absX, int absY, int Size, int Padding, int Direction, int ObjID, int Type, int Face) {
ObjLine(absX, absY, Size, Padding, Direction, ObjID, Type, Face); // ^---V
ObjLine(absX + Size, absY + 1, Size, Padding, Direction, ObjID, Type, Face); // ^---V
ObjLine(absX, absY + Size, Size, Padding, Direction + 1, ObjID, Type, Face); // &lt;&lt;---&gt;&gt;
ObjLine(absX + 1, absY, Size, Padding, Direction + 1, ObjID, Type, Face); // &lt;&lt;---&gt;&gt;
}[/code]


First line makes a method called ObjSQ.  This is used for the caller to give you the int&#39;s for ObjLine, which then give the int&#39;s to makeglobalobject()....Long line of stuff but it works.

Second - fifth line, sends the int&#39;s to Objline for it to deal with.

But, instead of just sending the regular int&#39;s, this method changes them a little bit so that it makes a Box, hence the method name ObjSQ.  I&#39;m not going to go into detail on what int&#39;s it changes because you can pretty much see that. 

Now, make sure you put another } after the last } in the ObjSQ method, because if you don&#39;t then you WILL get an error.  The last } will close the class and make it use able.

Now, To use this class you are going to need to do something very special(not really just normal).  When you are going to make an object and you don&#39;t want to make tons of line of code for a simple line of code.  You would put(under the same place you would put makeGlobalObject()) 
[code]MassObjectHandler.ObjLine(x,y,Size,padding,direction,objid,type,face);[/code] 
They are all int&#39;s, and you MUST, I repeat, you MUST put them in that order or it will mess up. 

If you want to make a box, which is just 4 objlines in 1 code, Put:  [code]MassObjectHandler.ObjSQ(x,y,Size,padding,direction,objid,type,face);[/code]
And it will put all of the int&#39;s into the right places and make a box for you!

Definitions of INT&#39;s for the methods:
X: The X-Coord for the first object then the rest will spawn around it.
Y: The Y-Coord for the first object then the rest will spawn around it.
Size: The size or amount of Objects you want to spawn in this line/Square.
Padding: The space between each object.
Direction: The direction the objects will line up. Only use 0 and 1.  0 is north and south, 1 is east and west.
ObjID: The ID of the Object you want to spawn.
Type: The type of object, usually 10 so just put 10 for the type.
Face: The direction the object will face.  This is different from direction because the objects will line of in the direction of the direction int but they might face a different direction. So, put 0 1 2 or 3 here.  Just experiment with the numbers, I am not sure which is which since they are usually different for each object.

Pics:

Box
[IMG]http://i26.tinypic.com/nefcb7.png[/img]

Line
[IMG]http://i25.tinypic.com/200z2vo.png[/img]



Credits:
Me - I made this method all by my self xD
Mod Demolish - I used his source for testing because my custom source doesn&#39;t support object creation yet xD.


STAY TUNED:

You know that one version of something can get pretty boring...Well, I believe that anyway.  So, I am going to be making a few versions that will be compatible with this one.  This is only v1.0.  Pretty soon I will probably make a circle method. I know it won&#39;t look &quot;exactly&quot; like a circle it will just be a regular square tilted probably but you know...Since we can use float&#39;s we can&#39;t use coords with points....Well, Ya....Stay tuned, I will release more!



[b]Vocabulary:[/b]

- Dramatization: Act of making things seem worse/better then they really are. ex:&quot; &quot;I have a million bunnies!&quot; When really they have 7.
- Static:  Making things static means allowing other class&#39;s to see that method.
- Int: Is just an Integer, All WHOLE numbers are integers.
- Caller: A method that can be used to call another method inside of a certain class file.
- if-Statement:  A check in variables to see IF something is whatever. Ex: if Impure equals two then there is a copy.  In code: [code]if(Impure == 2) {
System.out.println(&quot;There is a copy of impure!&quot;); 
}[/code]
- Else-If-Statement:  First, an If-Statement should be made, and IF that statement is false, it runs the ELSE-IF statement to see if that statement is true.</description>
    
    <lastBuildDate>Wed, 02 Sep 2009 01:36:24 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-objects-less-lines-to-spawn-more-objects/299522.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[317][Objects]Less lines to spawn more objects</title>
        <dc:creator><![CDATA[@TheImpureOne TheImpureOne]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/theimpureone">@TheImpureOne</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b"><span class="bbcode-u">How to make a “better” makeGlobalObject method that can do more with less lines.</span></span></p>
<p><span class="bbcode-b">Note: This tutorial does not contain any tabs in the code, you may put them in as you wish.</span></p>
<p>Difficulty: 6/10 Unless lazy 2/10<br>
Files Edited: Client.java, MassObjectHandler.java(MassObjectHandler is made in this tutorial)<br>
Back-up: Client.java(You never know if you will be making a mistake)</p>
<p>For learning purposes, All <span class="bbcode-b">bold</span> words can be found at the bottom of this post since they are of importance to you so you can expand your vocabulary.</p>
<p>First off, I have a few questions for you.</p>
<p>1:  Are you sick of having thousands upon thousands of lines in your code just for objects?         -<span class="bbcode-b">Dramatization</span><br>
2:  Are you sick of having to figure out what way X and Y go and how to make a box out of objects etc. ?<br>
3:  Are you looking for an easier way to spawn objects?</p>
<p>If you answered “Yes” to any of the previous questions then this is the tutorial for you.<br>
So, On that note let’s get started! <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p><span class="bbcode-b">1</span>. First lets fix a few things in Client.java (Again, Remember to back-up your files)</p>
<p>Open Client.java and find:</p>
<pre><code class="lang-auto">makeGlobalObject(int x, int y, int typeID, int orientation, int tileObjectType)</code></pre>
<p>and before void, put <span class="bbcode-b">static</span>.<br>
Save and close Client.java and compile to see if anything messed up(Post any error’s)<br>
If thats working fine, Continue; else, Open your backup(Assuming you made one!) and copy and paste the scripts into your messed up client.java and compile.</p>
<p><span class="bbcode-b">2</span>. Now, Let us get to constructing your MassObjectHandler! (YAY! The fun part!)<br>
First off, What this will do is help you by making your objects load a bit quicker also make 1 line of code do tons of things. (For you lazy, not wanting to learn bums, I loaded the premade class into the bottom, but its a class, not a java file so you can’t edit it! HA!)</p>
<p>Anyway, Make a NEW java file(Class) called MassObjectHandler.java and open it up.<br>
(Yay…Now for the explaining part…)</p>
<p>Lets start with the imports.</p>
<pre><code class="lang-auto">    </code></pre>
<p>WOOT! NO IMPORTS XD 1 line of code saved!</p>
<p>Anyway…</p>
<p>Next, Lets name the class file.</p>
<pre><code class="lang-auto">public class MassObjectHandler {</code></pre>
<p>All this did was define that we are making a class file.</p>
<p>Now, for the fun parts and the meat of this java file!</p>
<pre><code class="lang-auto">public static void ObjLine(int absX, int absY, int Size, int Padding, int Direction, int ObjID, int Type, int Face) {</code></pre>
<p>This method can be called from client it is what puts all the required int’s into makeGlobalObject.</p>
<p>Now, Pay attention, This will/might get confusing. I’ma give you 3 lines of code to make this go a little quicker. I will still explain fully.</p>
<pre><code class="lang-auto">if(Direction == 0){
client.makeGlobalObject(absX, absY, ObjID, Face, Type);</code></pre>
<p>These lines start a <span class="bbcode-b">if-statement</span> it check the direction of the line.  If it is 0 the line of objects will go north and south, if it is 1 it will go east and west.<br>
The next line calls makeGlobalObject() from client with the variables absX, absY, ObjID, Face, and Type.  These are: X-Coord, Y-Coord, Object ID, Direction Facing, and Type of object.</p>
<p>The next one decreases the size of the the line of objects by 1. (This is needed to make the code work properly.</p>
<p>Next 3 lines…</p>
<p><code>for(int i = 0; i &lt; Size; ++i) {
client.makeGlobalObject(absX, absY + i + Padding, ObjID, Face, Type);
}</code></p>
<p>First line is a <span class="bbcode-b">For-Loop</span> that makes an <span class="bbcode-b">int</span>, checks if the <span class="bbcode-b">int</span> is smaller then Size, if it is, increases i by one then does the stuff in the brackets.</p>
<p>Second line calls makeGlobalObject() from client with the variables absX, absY, ObjID, Face, and Type. But, this time, absY is increased by i then increased more by Padding(or, space between the objects).<br>
Third is a close bracket.</p>
<p>The next 3 lines:</p>
<pre><code class="lang-auto">else if(Direction == 1){
client.makeGlobalObject(absX, absY, ObjID, Face, Type);</code></pre>
<p>Same thing as before, but has an <span class="bbcode-b">Else-If-Statement</span>, what is an if-statement supposed to do if Direction was 1? Well, what else-if is,  If is NOT 0 ELSE try this if. Next lines makes another call to client and asks to speak to makeGlobalObject() so it can tell it when the int’s are.</p>
<p>Next 3 lines:</p>
<p><code>for(int i = 0; i &lt; Size; ++i) {
client.makeGlobalObject(absX + i + Padding, absY, ObjID, Face, Type);
}</code></p>
<p>Accentually the same thing as before the other <span class="bbcode-b">for-loop</span>, but this time, instead of y being increased by i and then Padding, x is increased because the objects are going east and west this time.<br>
Then a close bracket.</p>
<p>Now, I want you to guess.  If we have all 4 directions covered in the previous 12 lines of code, what do we do now…<br>
If you guessed close the file and go play WoW then you falled…Horribly…</p>
<p>If you guessed make an <span class="bbcode-b">if-statement</span> that checks the direction for anything higher then 1 then your correct!</p>
<p><code>} else if(Direction &gt; 1) {
System.out.println("Direction is not existent. 0 or 1 are the only directions.");
}
</code><br>
This makes an <span class="bbcode-b">Else-If-Statement</span> that checks if direction is more then 1 and if it is…<br>
Prints in the run.bat file that the direction is not existent, then another awesome close bracket! infact, make <span class="bbcode-b">2</span> close brackets because we are done with that method!!</p>
<p>Alright!<br>
Now, I’ma give you the whole method since its pretty simple.</p>
<p><code>public static void ObjSQ(int absX, int absY, int Size, int Padding, int Direction, int ObjID, int Type, int Face) {
ObjLine(absX, absY, Size, Padding, Direction, ObjID, Type, Face); // ^---V
ObjLine(absX + Size, absY + 1, Size, Padding, Direction, ObjID, Type, Face); // ^---V
ObjLine(absX, absY + Size, Size, Padding, Direction + 1, ObjID, Type, Face); // &lt;&lt;---&gt;&gt;
ObjLine(absX + 1, absY, Size, Padding, Direction + 1, ObjID, Type, Face); // &lt;&lt;---&gt;&gt;
}</code></p>
<p>First line makes a method called ObjSQ.  This is used for the caller to give you the int’s for ObjLine, which then give the int’s to makeglobalobject()…Long line of stuff but it works.</p>
<p>Second - fifth line, sends the int’s to Objline for it to deal with.</p>
<p>But, instead of just sending the regular int’s, this method changes them a little bit so that it makes a Box, hence the method name ObjSQ.  I’m not going to go into detail on what int’s it changes because you can pretty much see that.</p>
<p>Now, make sure you put another } after the last } in the ObjSQ method, because if you don’t then you WILL get an error.  The last } will close the class and make it use able.</p>
<p>Now, To use this class you are going to need to do something very special(not really just normal).  When you are going to make an object and you don’t want to make tons of line of code for a simple line of code.  You would put(under the same place you would put makeGlobalObject())</p>
<pre><code class="lang-auto">MassObjectHandler.ObjLine(x,y,Size,padding,direction,objid,type,face);</code></pre>
<p>They are all int’s, and you MUST, I repeat, you MUST put them in that order or it will mess up.</p>
<p>If you want to make a box, which is just 4 objlines in 1 code, Put:  <code>MassObjectHandler.ObjSQ(x,y,Size,padding,direction,objid,type,face);</code><br>
And it will put all of the int’s into the right places and make a box for you!</p>
<p>Definitions of INT’s for the methods:<br>
X: The X-Coord for the first object then the rest will spawn around it.<br>
Y: The Y-Coord for the first object then the rest will spawn around it.<br>
Size: The size or amount of Objects you want to spawn in this line/Square.<br>
Padding: The space between each object.<br>
Direction: The direction the objects will line up. Only use 0 and 1.  0 is north and south, 1 is east and west.<br>
ObjID: The ID of the Object you want to spawn.<br>
Type: The type of object, usually 10 so just put 10 for the type.<br>
Face: The direction the object will face.  This is different from direction because the objects will line of in the direction of the direction int but they might face a different direction. So, put 0 1 2 or 3 here.  Just experiment with the numbers, I am not sure which is which since they are usually different for each object.</p>
<p>Pics:</p>
<p>Box<br>
<img src="http://i26.tinypic.com/nefcb7.png" alt width="439" height="267"></p>
<p>Line<br>
<img src="http://i25.tinypic.com/200z2vo.png" alt width="459" height="135"></p>
<p>Credits:<br>
Me - I made this method all by my self xD<br>
Mod Demolish - I used his source for testing because my custom source doesn’t support object creation yet xD.</p>
<p>STAY TUNED:</p>
<p>You know that one version of something can get pretty boring…Well, I believe that anyway.  So, I am going to be making a few versions that will be compatible with this one.  This is only v1.0.  Pretty soon I will probably make a circle method. I know it won’t look “exactly” like a circle it will just be a regular square tilted probably but you know…Since we can use float’s we can’t use coords with points…Well, Ya…Stay tuned, I will release more!</p>
<p><span class="bbcode-b">Vocabulary:</span></p>
<ul>
<li>Dramatization: Act of making things seem worse/better then they really are. ex:" “I have a million bunnies!” When really they have 7.</li>
<li>Static:  Making things static means allowing other class’s to see that method.</li>
<li>Int: Is just an Integer, All WHOLE numbers are integers.</li>
<li>Caller: A method that can be used to call another method inside of a certain class file.</li>
<li>if-Statement:  A check in variables to see IF something is whatever. Ex: if Impure equals two then there is a copy.  In code: <code>if(Impure == 2) {
System.out.println("There is a copy of impure!"); 
}</code>
</li>
<li>Else-If-Statement:  First, an If-Statement should be made, and IF that statement is false, it runs the ELSE-IF statement to see if that statement is true.</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-objects-less-lines-to-spawn-more-objects/299522/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-objects-less-lines-to-spawn-more-objects/299522/1</link>
        <pubDate>Wed, 02 Sep 2009 01:36:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-299522-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-objects-less-lines-to-spawn-more-objects/299522.rss">[317][Objects]Less lines to spawn more objects</source>
      </item>
  </channel>
</rss>
