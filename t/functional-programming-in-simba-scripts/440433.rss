<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Functional Programming in Simba Scripts</title>
    <link>https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433</link>
    <description>[center][size=24pt]Functional Programming in Scripts[/size]
[size=24pt]by Echo_[/size][/center]

Welcome to my third tutorial. This tutorial will focus on the functional programming paradigm and how we can use it to make writing and debugging Simba scripts easier. You do not have to use this paradigm to have a better script, it&#39;s just a different way of approaching script writing. Some people may prefer this style once they learn it, and some will not. It really doesn&#39;t matter. Note that some of the examples in this tutorial are only compatible with Lape and not PascalScript, so if you want to try the examples for yourself you will have to switch interpreters. So let&#39;s get started.

[center][COLOR=purple][SIZE=18pt]What is Functional Programming?[/SIZE][/COLOR][/CENTER]

[URL=http://en.wikipedia.org/wiki/Functional_programming]Functional Programming[/URL] is a style of programming that focuses on ideas found in lambda calculus. You do not need any previous knowledge in calculus to understand this style, but having some knowledge of math would be to your advantage.

Functional programming emphasizes the structural building of a program through &quot;pure functions&quot;. You start with a few small functions, you write functions using those functions, and the script builds up from there. Now don&#39;t worry if you don&#39;t know what a pure function is right now, it will all be explained later. Functional Programming also focuses on &quot;higher-order functions&quot; and &quot;recursion&quot;, which will also be explained in more detail later.

Functional programming doesn&#39;t really rely upon complicated data types for its power, the main data type used is the function. Many languages have constructs that support functional programming, one of them being Pascal, but you can also find these in mixed-paradigm languages like [url=http://www.python.org/]Python[/url] and [url=http://www.scala-lang.org/]Scala[/url]. Some of my favorite programming languages with a focus on functional programming include [url=http://clojure.org/]Clojure[/url] and [url=http://www.haskell.org/haskellwiki/Haskell]Haskell[/url]. Because these languages require you to program functionally, it is much easier to implement multithreading and other features that would otherwise be hard to implement in a language with mutable data. But since Simba does not support multithreading at the moment, we won&#39;t discuss this advantage to programming in a functional style.

[CENTER][COLOR=purple][SIZE=18pt]Pure Functions[/SIZE][/COLOR][/CENTER]

You may remember functions from your earlier math classes. An simple example would be the following:

f(x) = x + 2

Making a table of the results:

----------
| x | f(x) |
----------
| 0 | 2    |
| 1 | 3    |
| 2 | 4    |
| 3 | 5    |
| 4 | 6    |
| 5 | 7    |
----------

As you can see, this function has one input and one output. The same input will always produce the same output. The function does not rely upon any global state to produce its result, it only relies upon its input. In functional programming, these attributes classify this function as &quot;pure&quot;. Any function that relies upon global variables, outside IO (this includes grabbing colors from the screen and reading files), or changing global variables is not a pure function.

Now the goal of functional programming is not to completely eliminate impure functions, because without IO our script wouldn&#39;t really do anything. It would just be a black box. The goal is to limit impure functions and have most of the work done in pure functions that are controlled in the script. Since you are 100% sure of the outcome of a pure function by knowing its input, there is less searching for you when you have a bug in your script. Because at that point the only thing that could be causing the bug is outside contact, and that narrows your searching to the impure functions. It also helps to limit your use of global variables, an easy way to accomplish this is by declaring them just above your main loop and using them locally. Now this is hard for counters that need to be held throughout the runtime of the script, such as total logs chopped or whatever. But that can easily be fixed:

[code=pascal]
//LogsChopped can be accessed by every function in the script
var
  LogsChopped: Integer;

procedure BankLogs;
begin
  IncEx(LogsChopped, 28);
end;

begin
  BankLogs;
end.
[/code]

[code=pascal]
procedure BankLogs(var LogsChopped: Integer);
begin
  IncEx(LogsChopped, 28);
end;

//LogsChopped can only be accessed by the main loop
var
  LogsChopped: Integer;

begin
  BankLogs(LogsChopped);
end.
[/code]

By using this strategy you are keeping the variables in a place that they can be accessed at runtime, but they are encapsulated within the main loop and inaccessible by all other functions. 

[CENTER][COLOR=purple][SIZE=18pt]Higher-order Functions[/SIZE][/COLOR][/CENTER]

And now for something interesting. Higher-order functions are functions that can take functions as arguments ore return functions as a result. Pascal has the ability to store procedures and functions in a variable so it has what we need to create higher order functions. The following will print &quot;Hello, World!&quot; when run:

[code=pascal]
procedure Proc;
begin
  WriteLn(&#39;Hello, World!&#39;);
end;

var
  P: procedure;

begin
  P := @Proc;
  P();
end.
[/code]

As you can see, the &quot;@&quot; operator points the variable P to procedure Proc. Then you can execute it by calling P as if it is a function. Keep in mind that the parenthesis are mandatory in this context.

So say we want to write a higher-order function that filters unwanted elements out of an array and returns the remaining elements. We could accomplish that with the following higher-order function:

[code=pascal]
function Filter(P: function(I: Integer): Boolean; A: array of Integer): array of Integer;
var
  J: Integer;
begin
  for J := 0 to High(A) do
    if P(A[J]) then begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := A[J];
    end;
end;
[/code]

P is the predicate, or test function. It is run on each element of A, testing each element and removing it if it doesn&#39;t fit the requirements. This function is quite powerful because it is so abstract. You could pass in a million different predicates to fit your needs, the possibilities are endless. Here&#39;s an example of removing all odd numbers, all numbers less than five, and all numbers that aren&#39;t an even square:

[code=pascal]
function Even(I: Integer): Boolean;
begin
  Result := I mod 2 = 0;
end;

function LessThanFive(I: Integer): Boolean;
begin
  Result := I &lt; 5;
end;

function EvenSquare(I: Integer): Boolean;
begin
  if Int(Sqrt(I)) &lt;&gt; Sqrt(I) then
    Result := False
  else
    Result := True;
end;

var
  A, Evens, LessThanFives, EvenSquares: array of Integer;

begin
  A := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  Evens := Filter(@Even, A);
  LessThanFives := Filter(@LessThanFive, A);
  EvenSquares := Filter(@EvenSquare, A);
end.
[/code]

As I said before, higher-order functions are also functions that return procedures or functions. Here is an example of this:

[code=pascal]
procedure Hello;
begin
  WriteLn(&#39;Hello, World!&#39;);
end;

procedure Goodbye;
begin
  WriteLn(&#39;Goodbye, World!&#39;);
end;

function Greeting(Morning: Boolean): procedure;
begin
  if Morning then
    Result := @Hello
  else
    Result := @Goodbye;
end;

var
  Say: procedure;

begin
  Say := Greeting(True);
  //Prints Hello, World!
  Say();
end.
[/code]

And that&#39;s all there is to it :) Higher order functions can slim down your scripts by creating a generic algorithm and passing in a predicate for that algorithm to work with.

[CENTER][COLOR=purple][SIZE=18pt]Recursion[/SIZE][/COLOR][/CENTER]

Recursion is a method of creating looping behavior without using looping constructs (for and while loops for example). In a language with built in looping constructs like Pascal, recursion isn&#39;t really a requirement to script in a functional style. Believe it or not, there are languages (Haskell being one of them) that rely completely upon recursion to provide looping behavior in programs. Since understanding recursion is still important programming knowledge, here&#39;s how it works.

Recursion emulates looping by a function calling itself. There are different kinds of recursion. Linear recursion is a loop where the function can only call itself once per call. A perfect example of linear recursion would be an implementation of Pow:

[code=pascal]
function Power(Base: Extended; Exponent: Cardinal): Extended;
begin
  if Exponent = 0 then
    Result := 1
  else
    Result := Base * Power(Base, Exponent - 1);
end;
[/code]

This may look confusing at first, but it makes perfect mathematical sense. We know that if the exponent is 0 then the answer is 1. We use this as the edge condition of the recursion. Edge conditions are meant to stop recursive calls from entering infinite loops by providing a condition that will eventually be met.

If the exponent isn&#39;t 0 then the answer is the base times the power of the base to the decremented exponent. We must decrement the exponent so that it eventually reaches the edge condition. You can think of it in this way for the problem 2 to the power of 8:

&lt;blockquote&gt;Power(2, 8)
0: Power(2, 8)
  1: Power(2, 7)
    2: Power(2, 6)
      3: Power(2, 5)
        4: Power(2, 4)
          5: Power(2, 3)
            6: Power(2, 2)
              7: Power(2, 1)
                8: Power(2, 0)
                8: Result := 1
              7: Result := 2
            6: Result := 4
          5: Result := 8
        4: Result := 16
      3: Result := 32
    2: Result := 64
  1: Result := 128
0: Result := 256
256&lt;/blockquote&gt;


Once the function reaches the edge condition, it &quot;bounces back&quot; through the call stack and eventually returns the answer :)

Another way to approach linear recursion is using tail recursion. Tail recursion is often more effective for languages that feature tail call optimization, and I am unsure if either the PascalScript or Lape interpreters feature this. But this is how it works for the Power function we wrote earlier:

[code=pascal]
function Power(B: Extended; E: Cardinal; A: Extended = 1.0): Extended;
begin
  if E = 0 then
    Result := A
  else
    Result := Power(B, E - 1, A * B);
end;
[/code]


This function uses the default parameters feature in Lape. Instead of multiplying the base by the result of the function, it just returns to the top of the function with new parameters. That tail call is what makes it more effective. With tail call optimization, the function will just return to the top of the function rather than making calls to the function and saving the parameters for each call.

In the Power function, we see that the result is &quot;accumulated&quot; in A, A is the accumulator variable. It holds the value of the function after each call. The invocation would look something like this:

&lt;blockquote&gt;Power(2, 8)
0: Power(2, 8, 1)
  1: Power(2, 7, 2)
    2: Power(2, 6, 4)
      3: Power(2, 5, 8)
        4: Power(2, 4, 16)
          5: Power(2, 3, 32)
            6: Power(2, 2, 64)
              7: Power(2, 1, 128)
                8: Power(2, 0, 256)
                8: Result := 256
              7: Result := 256
            6: Result := 256
          5: Result := 256
        4: Result := 256
      3: Result := 256
    2: Result := 256
  1: Result := 256
0: Result := 256
256&lt;/blockquote&gt;

Multiple recursion is also possible, but it can get pretty slow. An example would be computing the Fibonacci numbers:

[code=pascal]
function Fibonacci(I: Cardinal): Cardinal;
begin
  if I &lt; 2 then
    Result := I
  else
    Result := Fibonacci(I - 1) + Fibonacci(I - 2);
end;
[/code]

As the call stack gets deeper, the function takes much longer to return a result. So recursion is not always a good way of approaching an algorithm.

[CENTER][COLOR=purple][SIZE=18pt]Conclusion[/SIZE][/COLOR][/CENTER]

This tutorial is shorter than I expected, but I will probably add more code examples and explanations later. Functional programming is a large topic, there are entire books dedicated to the subject. I hope you learned something, and if you have any questions or comments feel free to post :)</description>
    
    <lastBuildDate>Wed, 25 Apr 2012 09:26:40 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Functional Programming in Simba Scripts</title>
        <dc:creator><![CDATA[@Wizzup Wizzup?]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wizzup">@Wizzup</a> wrote:</p>
          <blockquote>
              <p>Nice. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433/2</link>
        <pubDate>Wed, 25 Apr 2012 09:26:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440433-2</guid>
        <source url="https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433.rss">Functional Programming in Simba Scripts</source>
      </item>
      <item>
        <title>Functional Programming in Simba Scripts</title>
        <dc:creator><![CDATA[@Echo3 Echo_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/echo3">@Echo3</a> wrote:</p>
          <blockquote>
              <p>[center][size=24pt]Functional Programming in Scripts[/size]<br>
[size=24pt]by Echo_[/size][/center]</p>
<p>Welcome to my third tutorial. This tutorial will focus on the functional programming paradigm and how we can use it to make writing and debugging Simba scripts easier. You do not have to use this paradigm to have a better script, it’s just a different way of approaching script writing. Some people may prefer this style once they learn it, and some will not. It really doesn’t matter. Note that some of the examples in this tutorial are only compatible with Lape and not PascalScript, so if you want to try the examples for yourself you will have to switch interpreters. So let’s get started.</p>
<p>[center][COLOR=purple][SIZE=18pt]What is Functional Programming?[/SIZE][/COLOR][/CENTER]</p>
<p><a href="http://en.wikipedia.org/wiki/Functional_programming" data-bbcode="true" rel="nofollow noopener">Functional Programming</a> is a style of programming that focuses on ideas found in lambda calculus. You do not need any previous knowledge in calculus to understand this style, but having some knowledge of math would be to your advantage.</p>
<p>Functional programming emphasizes the structural building of a program through “pure functions”. You start with a few small functions, you write functions using those functions, and the script builds up from there. Now don’t worry if you don’t know what a pure function is right now, it will all be explained later. Functional Programming also focuses on “higher-order functions” and “recursion”, which will also be explained in more detail later.</p>
<p>Functional programming doesn’t really rely upon complicated data types for its power, the main data type used is the function. Many languages have constructs that support functional programming, one of them being Pascal, but you can also find these in mixed-paradigm languages like <a href="http://www.python.org/" data-bbcode="true" rel="nofollow noopener">Python</a> and <a href="http://www.scala-lang.org/" data-bbcode="true" rel="nofollow noopener">Scala</a>. Some of my favorite programming languages with a focus on functional programming include <a href="http://clojure.org/" data-bbcode="true" rel="nofollow noopener">Clojure</a> and <a href="http://www.haskell.org/haskellwiki/Haskell" data-bbcode="true" rel="nofollow noopener">Haskell</a>. Because these languages require you to program functionally, it is much easier to implement multithreading and other features that would otherwise be hard to implement in a language with mutable data. But since Simba does not support multithreading at the moment, we won’t discuss this advantage to programming in a functional style.</p>
<p>[CENTER][COLOR=purple][SIZE=18pt]Pure Functions[/SIZE][/COLOR][/CENTER]</p>
<p>You may remember functions from your earlier math classes. An simple example would be the following:</p>
<p>f(x) = x + 2</p>
<p>Making a table of the results:</p>
<hr>
<h2>| x | f(x) |</h2>
<h2>| 0 | 2    |<br>
| 1 | 3    |<br>
| 2 | 4    |<br>
| 3 | 5    |<br>
| 4 | 6    |<br>
| 5 | 7    |</h2>
<p>As you can see, this function has one input and one output. The same input will always produce the same output. The function does not rely upon any global state to produce its result, it only relies upon its input. In functional programming, these attributes classify this function as “pure”. Any function that relies upon global variables, outside IO (this includes grabbing colors from the screen and reading files), or changing global variables is not a pure function.</p>
<p>Now the goal of functional programming is not to completely eliminate impure functions, because without IO our script wouldn’t really do anything. It would just be a black box. The goal is to limit impure functions and have most of the work done in pure functions that are controlled in the script. Since you are 100% sure of the outcome of a pure function by knowing its input, there is less searching for you when you have a bug in your script. Because at that point the only thing that could be causing the bug is outside contact, and that narrows your searching to the impure functions. It also helps to limit your use of global variables, an easy way to accomplish this is by declaring them just above your main loop and using them locally. Now this is hard for counters that need to be held throughout the runtime of the script, such as total logs chopped or whatever. But that can easily be fixed:</p>
<pre><code class="lang-auto">//LogsChopped can be accessed by every function in the script
var
  LogsChopped: Integer;

procedure BankLogs;
begin
  IncEx(LogsChopped, 28);
end;

begin
  BankLogs;
end.</code></pre>
<pre><code class="lang-auto">procedure BankLogs(var LogsChopped: Integer);
begin
  IncEx(LogsChopped, 28);
end;

//LogsChopped can only be accessed by the main loop
var
  LogsChopped: Integer;

begin
  BankLogs(LogsChopped);
end.</code></pre>
<p>By using this strategy you are keeping the variables in a place that they can be accessed at runtime, but they are encapsulated within the main loop and inaccessible by all other functions.</p>
<p>[CENTER][COLOR=purple][SIZE=18pt]Higher-order Functions[/SIZE][/COLOR][/CENTER]</p>
<p>And now for something interesting. Higher-order functions are functions that can take functions as arguments ore return functions as a result. Pascal has the ability to store procedures and functions in a variable so it has what we need to create higher order functions. The following will print “Hello, World!” when run:</p>
<pre><code class="lang-auto">procedure Proc;
begin
  WriteLn('Hello, World!');
end;

var
  P: procedure;

begin
  P := @Proc;
  P();
end.</code></pre>
<p>As you can see, the “@” operator points the variable P to procedure Proc. Then you can execute it by calling P as if it is a function. Keep in mind that the parenthesis are mandatory in this context.</p>
<p>So say we want to write a higher-order function that filters unwanted elements out of an array and returns the remaining elements. We could accomplish that with the following higher-order function:</p>
<pre><code class="lang-auto">function Filter(P: function(I: Integer): Boolean; A: array of Integer): array of Integer;
var
  J: Integer;
begin
  for J := 0 to High(A) do
    if P(A[J]) then begin
      SetLength(Result, Length(Result) + 1);
      Result[High(Result)] := A[J];
    end;
end;</code></pre>
<p>P is the predicate, or test function. It is run on each element of A, testing each element and removing it if it doesn’t fit the requirements. This function is quite powerful because it is so abstract. You could pass in a million different predicates to fit your needs, the possibilities are endless. Here’s an example of removing all odd numbers, all numbers less than five, and all numbers that aren’t an even square:</p>
<pre><code class="lang-auto">function Even(I: Integer): Boolean;
begin
  Result := I mod 2 = 0;
end;

function LessThanFive(I: Integer): Boolean;
begin
  Result := I &lt; 5;
end;

function EvenSquare(I: Integer): Boolean;
begin
  if Int(Sqrt(I)) &lt;&gt; Sqrt(I) then
    Result := False
  else
    Result := True;
end;

var
  A, Evens, LessThanFives, EvenSquares: array of Integer;

begin
  A := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  Evens := Filter(@Even, A);
  LessThanFives := Filter(@LessThanFive, A);
  EvenSquares := Filter(@EvenSquare, A);
end.</code></pre>
<p>As I said before, higher-order functions are also functions that return procedures or functions. Here is an example of this:</p>
<pre><code class="lang-auto">procedure Hello;
begin
  WriteLn('Hello, World!');
end;

procedure Goodbye;
begin
  WriteLn('Goodbye, World!');
end;

function Greeting(Morning: Boolean): procedure;
begin
  if Morning then
    Result := @Hello
  else
    Result := @Goodbye;
end;

var
  Say: procedure;

begin
  Say := Greeting(True);
  //Prints Hello, World!
  Say();
end.</code></pre>
<p>And that’s all there is to it <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> Higher order functions can slim down your scripts by creating a generic algorithm and passing in a predicate for that algorithm to work with.</p>
<p>[CENTER][COLOR=purple][SIZE=18pt]Recursion[/SIZE][/COLOR][/CENTER]</p>
<p>Recursion is a method of creating looping behavior without using looping constructs (for and while loops for example). In a language with built in looping constructs like Pascal, recursion isn’t really a requirement to script in a functional style. Believe it or not, there are languages (Haskell being one of them) that rely completely upon recursion to provide looping behavior in programs. Since understanding recursion is still important programming knowledge, here’s how it works.</p>
<p>Recursion emulates looping by a function calling itself. There are different kinds of recursion. Linear recursion is a loop where the function can only call itself once per call. A perfect example of linear recursion would be an implementation of Pow:</p>
<pre><code class="lang-auto">function Power(Base: Extended; Exponent: Cardinal): Extended;
begin
  if Exponent = 0 then
    Result := 1
  else
    Result := Base * Power(Base, Exponent - 1);
end;</code></pre>
<p>This may look confusing at first, but it makes perfect mathematical sense. We know that if the exponent is 0 then the answer is 1. We use this as the edge condition of the recursion. Edge conditions are meant to stop recursive calls from entering infinite loops by providing a condition that will eventually be met.</p>
<p>If the exponent isn’t 0 then the answer is the base times the power of the base to the decremented exponent. We must decrement the exponent so that it eventually reaches the edge condition. You can think of it in this way for the problem 2 to the power of 8:</p>
<blockquote>Power(2, 8)
0: Power(2, 8)
  1: Power(2, 7)
    2: Power(2, 6)
      3: Power(2, 5)
        4: Power(2, 4)
          5: Power(2, 3)
            6: Power(2, 2)
              7: Power(2, 1)
                8: Power(2, 0)
                8: Result := 1
              7: Result := 2
            6: Result := 4
          5: Result := 8
        4: Result := 16
      3: Result := 32
    2: Result := 64
  1: Result := 128
0: Result := 256
256</blockquote>
<p>Once the function reaches the edge condition, it “bounces back” through the call stack and eventually returns the answer <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Another way to approach linear recursion is using tail recursion. Tail recursion is often more effective for languages that feature tail call optimization, and I am unsure if either the PascalScript or Lape interpreters feature this. But this is how it works for the Power function we wrote earlier:</p>
<pre><code class="lang-auto">function Power(B: Extended; E: Cardinal; A: Extended = 1.0): Extended;
begin
  if E = 0 then
    Result := A
  else
    Result := Power(B, E - 1, A * B);
end;</code></pre>
<p>This function uses the default parameters feature in Lape. Instead of multiplying the base by the result of the function, it just returns to the top of the function with new parameters. That tail call is what makes it more effective. With tail call optimization, the function will just return to the top of the function rather than making calls to the function and saving the parameters for each call.</p>
<p>In the Power function, we see that the result is “accumulated” in A, A is the accumulator variable. It holds the value of the function after each call. The invocation would look something like this:</p>
<blockquote>Power(2, 8)
0: Power(2, 8, 1)
  1: Power(2, 7, 2)
    2: Power(2, 6, 4)
      3: Power(2, 5, 8)
        4: Power(2, 4, 16)
          5: Power(2, 3, 32)
            6: Power(2, 2, 64)
              7: Power(2, 1, 128)
                8: Power(2, 0, 256)
                8: Result := 256
              7: Result := 256
            6: Result := 256
          5: Result := 256
        4: Result := 256
      3: Result := 256
    2: Result := 256
  1: Result := 256
0: Result := 256
256</blockquote>
<p>Multiple recursion is also possible, but it can get pretty slow. An example would be computing the Fibonacci numbers:</p>
<pre><code class="lang-auto">function Fibonacci(I: Cardinal): Cardinal;
begin
  if I &lt; 2 then
    Result := I
  else
    Result := Fibonacci(I - 1) + Fibonacci(I - 2);
end;</code></pre>
<p>As the call stack gets deeper, the function takes much longer to return a result. So recursion is not always a good way of approaching an algorithm.</p>
<p>[CENTER][COLOR=purple][SIZE=18pt]Conclusion[/SIZE][/COLOR][/CENTER]</p>
<p>This tutorial is shorter than I expected, but I will probably add more code examples and explanations later. Functional programming is a large topic, there are entire books dedicated to the subject. I hope you learned something, and if you have any questions or comments feel free to post <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433/1</link>
        <pubDate>Mon, 23 Apr 2012 19:27:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440433-1</guid>
        <source url="https://forum.moparisthebest.com/t/functional-programming-in-simba-scripts/440433.rss">Functional Programming in Simba Scripts</source>
      </item>
  </channel>
</rss>
