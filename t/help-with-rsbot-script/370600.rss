<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help with RSbot script</title>
    <link>https://forum.moparisthebest.com/t/help-with-rsbot-script/370600</link>
    <description>K, so I&#39;ve never worked with scripts before and did my best to do this, but couldn&#39;t do it. I asked someone else to, and neither did they.

K I did one thing, but now I have a new issue. There are 4-5 yew trees behind lumbridge. I want this bot to go from one tree to the next after it&#39;s cut one down. Any help?

http://www.mediafire.com/?2czod6yrravn9lq

^ That&#39;s the script I want the new one to be like, if you want to look.

[code] import java.awt.*;
import org.rsbot.script.wrappers.RSGroundItem;
import org.rsbot.script.Script;
import org.rsbot.script.ScriptManifest;
import org.rsbot.script.methods.Skills;
import org.rsbot.script.wrappers.RSObject;
import org.rsbot.script.wrappers.RSTile;
import org.rsbot.script.wrappers.RSArea;
import org.rsbot.event.listeners.PaintListener;
import org.rsbot.event.listeners.ServerMessageListener;
import org.rsbot.event.events.ServerMessageEvent;
 
@ScriptManifest(authors = &quot;torpedo101&quot;, keywords = &quot;Woodcutting&quot;, name = &quot;Draynor Willows&quot;, version = 1.0, description =
 &quot;Cuts and banks willows in Draynor.&quot;)
         public class DraynorWillows extends Script implements PaintListener, ServerMessageListener {
 
       private final static int WILLOW_ID[] = {5551, 5552, 5553};
       private final static int WILLOW_LOGS = 1519;
       private final static int HATCHET_ID[] = {1349, 1351, 1353, 1355, 1357, 1359, 1361, 4031, 6739, 13470, 13661, 14069, 14108, 1346, 1357};
       private final static int NEST_ID[] = {5070, 5071, 5072, 5073, 5074, 5075, 5076, 7413, 11966}; 
       private final static int BANKER_ID[] = {494, 495};
       private final static int BANK_BOOTH_ID = 2213;

       //Paths.
       RSTile willowsToBank[] = {new RSTile(3093, 3243)};
       RSTile bankToWillows[] = {new RSTile(3088, 3236)};
       //Paint related.
        
    private final Color color1 = new Color(222, 22, 22, 112);
    private final Color color2 = new Color(0, 0, 0);
    private final Color color3 = new Color(40, 240, 6, 85);
    private final Font font1 = new Font(&quot;Arial&quot;, 1, 20);
    private final Font font2 = new Font(&quot;Arial&quot;, 1, 14);
   
    public long startTime = System.currentTimeMillis();
    private String status = &quot;&quot;;
    public int LOGS_CUT = 0, NESTS_COLLECTED = 0;
    public int START_XP, START_LVL;
    public int WC_LEVEL, NEXT_LVL;
    public int percent, randomRunEnergy; 
    
 
    // On start.
    public boolean onStart() {
    if (game.isLoggedIn()) {
    log(&quot;Welcome to Draynor Willows...&quot;);
    log(&quot;setting mouse speed...&quot;);
    log(&quot;Make sure you have your hatchet equipped or in your inventory.&quot;);
    mouse.setSpeed(random(5, 7));
    camera.setPitch(true);
     }
    return true;
  } 
    // Path methods.
  private boolean randomToBank() {
            RSTile[] randomizedPath = walking.randomizePath(willowsToBank, 2, 2);
            return walking.walkPathMM(randomizedPath, 15);
        }
 
 
  private boolean randomToTrees() {
           RSTile[] randomizedPath = walking.randomizePath(bankToWillows, 2, 2);
           return walking.walkPathMM(randomizedPath, 15);
        }
 

    // Checking where you are.
    private boolean atWillows(){
    RSArea area = new RSArea(new RSTile(3018, 3203), new RSTile(3090, 3238));
    return area.contains(getMyPlayer().getLocation());
     }
    private boolean atBank(){
    RSArea area = new RSArea(new RSTile(3092, 3240), new RSTile(3097, 3247));
    return area.contains(getMyPlayer().getLocation());
     }
    // Run method.
    public int useRun() {
    randomRunEnergy = random(45, 75);
    if (randomRunEnergy &lt;= walking.getEnergy() &amp;&amp; !walking.isRunEnabled()) {
       walking.setRun(true);
      }
   return random(1, 5);
   }
     // Mouse anti-ban method.
     public void hand_on_mouse() {
     int i = random(0, 10);
     if (i == 5) {
     mouse.moveSlightly();
         }
       }
     // Anti-ban method.
     private void antiban() {
   int gamble = random(0, 1000);
   if (gamble &gt;= 200 &amp;&amp; gamble &lt; 203) {
    camera.setPitch(random(1, 160));
    }
   
   if (gamble == 150) {
   mouse.moveSlightly();
   mouse.moveRandomly(70, 380);
   }
   if (gamble == 603) {
   randomTab();
   }
   
   if (gamble &gt; 3 &amp;&amp; gamble &lt; 9) {
   mouse.moveRandomly(40, 280);
   camera.setAngle(random(0, 140));
   mouse.moveSlightly();
   }
   if (gamble &gt;= 400 &amp;&amp; gamble &lt; 403) {
   mouse.moveSlightly();
   camera.setAngle(random(0, 180));
   camera.setPitch(random(0, 100));
   }
 
   if (gamble &gt;= 550 &amp;&amp; gamble &lt; 553) {
   camera.setAngle(random(0, 140));
   }
   
   if (gamble &gt;= 1 &amp;&amp; gamble &lt; 10) {
    mouse.moveSlightly();
   }
   if (gamble &gt;= 20 &amp;&amp; gamble &lt; 23) {
    camera.setPitch(random(1, 90));
   }
   
   if (gamble &gt;= 40 &amp;&amp; gamble &lt; 41) {
     sleep(random(4000, 15000));
   }
    if (gamble &gt;= 20 &amp;&amp; gamble &lt; 23) {
   camera.setAngle(random(190, 230));
   } 
   
   if (gamble &gt;= 45 &amp;&amp; gamble &lt; 47) {
     mouse.moveRandomly(70, 380);
   }
   
   if (gamble &gt;= 700 &amp;&amp; gamble &lt; 703) {
   camera.setAngle(random(1, 350));
   }
   
   if (gamble &gt;= 995) {
    camera.setAngle(random(1, 345));
    sleep(random(20, 130));
    mouse.moveSlightly();
    }
   
   if (gamble &gt;= 600 &amp;&amp; gamble &lt; 610) {
    mouse.moveSlightly();
   }
   
   if (gamble &gt;= 15 &amp;&amp; gamble &lt; 18) {
    camera.setAngle(random(100, 120));
   } 
   if (gamble &gt;= 1 &amp;&amp; gamble &lt; 5) {
       mouse.move(random(1, 600), random(1, 600));
   }
   if (gamble &gt;= 990 &amp;&amp; gamble &lt; 995) {
       if (game.getCurrentTab() != 1) {
           game.openTab(1);
           sleep(120, 220);
       }
       if (game.getCurrentTab() == 1) {
           mouse.move(695, 361);
           sleep(320, 575);
       }
   }
} 

   //Tab Anti-ban
   public void randomTab() {
   int gamble = random(0, 1000);
 if (gamble &gt;= 1 &amp;&amp; gamble &lt; 5) {
         game.openTab(game.TAB_STATS);
         sleep(random(100, 300));
         game.openTab(game.TAB_INVENTORY);
         }
         if (gamble &gt;= 6 &amp;&amp; gamble &lt; 10) {
         game.openTab(game.TAB_INVENTORY);
         }
       if (gamble &gt;= 15 &amp;&amp; gamble &lt; 17) {
       game.openTab(game.TAB_CLAN);
       sleep(random(100,300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 25 &amp;&amp; gamble &lt; 30) {
       game.openTab(game.TAB_FRIENDS);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 35 &amp;&amp; gamble &lt; 38) {
       game.openTab(game.TAB_IGNORE);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 40 &amp;&amp; gamble &lt; 42) {
       game.openTab(game.TAB_EQUIPMENT);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 100 &amp;&amp; gamble &lt; 104) {
       game.openTab(game.TAB_QUESTS);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 160 &amp;&amp; gamble &lt; 164) {
       game.openTab(game.TAB_NOTES);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
       }
       if (gamble &gt;= 700 &amp;&amp; gamble &lt; 706) {
   
       game.openTab(game.TAB_MUSIC);
       sleep(random(100, 300));
       game.openTab(game.TAB_INVENTORY);
                   }
                }
 
 

    // Cut method.
    public void cutWillow() {
    final RSObject willow = objects.getNearest(WILLOW_ID);
    if (!willow.isOnScreen()) {
    walking.walkTo(willow.getLocation());   
    } else {
    camera.turnToTile(willow.getLocation());   
    if (getMyPlayer().getAnimation() == -1 &amp;&amp; willow != null) {
    willow.doAction(&quot;Chop down&quot;);
    sleep(random(5, 40));
     }
    }
   }

    // Banking method.
   private void openBank() {
   RSObject bankBooth = objects.getNearest(BANK_BOOTH_ID);
   if (bankBooth != null &amp;&amp; !bank.isOpen()) {
   camera.turnToTile(bankBooth.getLocation());
   bankBooth.doAction(&quot;use-quickly&quot;);
   sleep(200,400);
     }
   }
  private void depositWillow() {
    if(bank.isOpen()){
      while(inventory.getCount(WILLOW_LOGS) &gt;= 1){
        bank.depositAllExcept(HATCHET_ID);
        sleep(150, 350);
       }
    }
  }
  private void closeBank() {
    if(bank.isOpen()){
      mouse.move(490, 36, 3, 3);
      sleep(20, 100);
      mouse.click(true);
      sleep(150, 350);
    }
  }
 private void Bank(){
    openBank();
      sleep(20, 100);
    depositWillow();
      sleep(20, 100);
    closeBank();
      sleep(20, 100);
  }
   
public void onFinish() {
   log(&quot;Bye&quot;);
   log(&quot;Thank you for using Draynor Willows...&quot;);
   game.logout(true);
}
 
       public int loop() {
       useRun();
       antiban();
       RSGroundItem NEST = groundItems.getNearest(NEST_ID);
       if (NEST != null &amp;&amp; !inventory.isFull()) {
       NEST.doAction(&quot;Take&quot;);
       sleep(random(1000, 1500));
       NESTS_COLLECTED++;
       antiban();
   }
       camera.setPitch(true);
       if(atWillows() &amp;&amp; inventory.isFull()){
       useRun();
       antiban();
       randomToBank();
       sleep(random(300, 500));
     } else if(atBank() &amp;&amp; inventory.isFull()){
       Bank();
     } else if(atWillows() &amp;&amp; !inventory.isFull()){
        
        cutWillow();
        hand_on_mouse();
        antiban();
        useRun();
     }  
      if(atBank() &amp;&amp; !inventory.isFull()){
       useRun();
       antiban();
       randomToTrees();
       sleep(random(300, 500));
     }
      if(!atBank() &amp;&amp; !atWillows() &amp;&amp; !inventory.isFull()){
       useRun();
       randomToTrees();
       sleep(random(300, 500));
       
         
    } else if( !atBank() &amp;&amp; !atWillows() &amp;&amp; inventory.isFull()){
      useRun();
      
      randomToBank();
      sleep(random(300, 500));
    }
      return (random(500, 1100));
  }
//Paint Details\\
public void serverMessageRecieved(ServerMessageEvent e) {
   String c = e.getMessage();
   if (c.contains(&quot;get&quot;)) {
       LOGS_CUT++;
           }
        }
        @Override
        public void onRepaint(Graphics g1) {
        Graphics2D g = (Graphics2D)g1;
         if (game.isLoggedIn()) {
       long millis = System.currentTimeMillis() - startTime;
       long hours = millis / (1000 * 60 * 60);
       millis -= hours * (1000 * 60 * 60);
       long minutes = millis / (1000 * 60);
       millis -= minutes * (1000 * 60);
       long seconds = millis / 1000;
       int GAINED_XP = 0;
       if (START_XP == 0) {
           START_XP = skills.getCurrentExp(skills.WOODCUTTING);
       }
        GAINED_XP = skills.getCurrentExp(skills.WOODCUTTING) - START_XP;
       WC_LEVEL = skills.getCurrentLevel(skills.WOODCUTTING);
       if (START_LVL == 0) {
           START_LVL = skills.getRealLevel(Skills.WOODCUTTING);
       }
         NEXT_LVL = skills.getRealLevel(Skills.WOODCUTTING) + 1;
       int XP_TNL = skills.getExpToNextLevel(Skills.WOODCUTTING);
       int XP_HOUR = (int) ((GAINED_XP) * 3600000D / (System.currentTimeMillis() - startTime));
       percent = skills.getPercentToNextLevel(Skills.WOODCUTTING); 
 
        g.setFont(font1);
        g.setColor(color1);
        g.drawString(&quot;Draynor Willows&quot;, 564, 228);
        g.fillRoundRect(552, 235, 180, 107, 16, 16);
        g.setFont(font2);
        g.setColor(color2);
        g.drawString(&quot;Willows Chopped: &quot; + LOGS_CUT, 555, 255);
        g.drawString(&quot;Run Time:  &quot; + hours + &quot;:&quot; + minutes + &quot;:&quot; + seconds, 555, 271);
        g.drawString(&quot;Nests Gained: &quot; + NESTS_COLLECTED, 554, 285);
        g.drawString(&quot;XP Gained: &quot; + GAINED_XP + &quot;&quot; + &quot;(&quot; + XP_HOUR / 1000 + &quot;k XP/H)&quot;, 554, 301);
        g.setColor(color3);
        g.fillRoundRect(271, 5, 243, 43, 16, 16);
        g.setColor(color2);
        g.drawString(&quot;Percent To level: &quot; + percent + &quot;% to &quot; + NEXT_LVL + &quot; WC&quot;, 285, 29);
    }
  }
}[/code]

^ and the new one that works with 2.0</description>
    
    <lastBuildDate>Sat, 27 Nov 2010 06:35:32 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-with-rsbot-script/370600.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help with RSbot script</title>
        <dc:creator><![CDATA[@ChaosPkers ChaosPkers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chaospkers">@ChaosPkers</a> wrote:</p>
          <blockquote>
              <p>K, so I’ve never worked with scripts before and did my best to do this, but couldn’t do it. I asked someone else to, and neither did they.</p>
<p>K I did one thing, but now I have a new issue. There are 4-5 yew trees behind lumbridge. I want this bot to go from one tree to the next after it’s cut one down. Any help?</p>
<p><a href="http://www.mediafire.com/?2czod6yrravn9lq" class="onebox" target="_blank" rel="nofollow noopener">http://www.mediafire.com/?2czod6yrravn9lq</a></p>
<p>^ That’s the script I want the new one to be like, if you want to look.</p>
<p>[code] import java.awt.*;<br>
import org.rsbot.script.wrappers.RSGroundItem;<br>
import org.rsbot.script.Script;<br>
import org.rsbot.script.ScriptManifest;<br>
import org.rsbot.script.methods.Skills;<br>
import org.rsbot.script.wrappers.RSObject;<br>
import org.rsbot.script.wrappers.RSTile;<br>
import org.rsbot.script.wrappers.RSArea;<br>
import org.rsbot.event.listeners.PaintListener;<br>
import org.rsbot.event.listeners.ServerMessageListener;<br>
import org.rsbot.event.events.ServerMessageEvent;</p>
<p><span class="mention">@ScriptManifest</span>(authors = “torpedo101”, keywords = “Woodcutting”, name = “Draynor Willows”, version = 1.0, description =<br>
“Cuts and banks willows in Draynor.”)<br>
public class DraynorWillows extends Script implements PaintListener, ServerMessageListener {</p>
<pre><code>   private final static int WILLOW_ID[] = {5551, 5552, 5553};
   private final static int WILLOW_LOGS = 1519;
   private final static int HATCHET_ID[] = {1349, 1351, 1353, 1355, 1357, 1359, 1361, 4031, 6739, 13470, 13661, 14069, 14108, 1346, 1357};
   private final static int NEST_ID[] = {5070, 5071, 5072, 5073, 5074, 5075, 5076, 7413, 11966}; 
   private final static int BANKER_ID[] = {494, 495};
   private final static int BANK_BOOTH_ID = 2213;

   //Paths.
   RSTile willowsToBank[] = {new RSTile(3093, 3243)};
   RSTile bankToWillows[] = {new RSTile(3088, 3236)};
   //Paint related.
    
private final Color color1 = new Color(222, 22, 22, 112);
private final Color color2 = new Color(0, 0, 0);
private final Color color3 = new Color(40, 240, 6, 85);
private final Font font1 = new Font("Arial", 1, 20);
private final Font font2 = new Font("Arial", 1, 14);

public long startTime = System.currentTimeMillis();
private String status = "";
public int LOGS_CUT = 0, NESTS_COLLECTED = 0;
public int START_XP, START_LVL;
public int WC_LEVEL, NEXT_LVL;
public int percent, randomRunEnergy; 


// On start.
public boolean onStart() {
if (game.isLoggedIn()) {
log("Welcome to Draynor Willows...");
log("setting mouse speed...");
log("Make sure you have your hatchet equipped or in your inventory.");
mouse.setSpeed(random(5, 7));
camera.setPitch(true);
 }
return true;
</code></pre>
<p>}<br>
// Path methods.<br>
private boolean randomToBank() {<br>
RSTile[] randomizedPath = walking.randomizePath(willowsToBank, 2, 2);<br>
return walking.walkPathMM(randomizedPath, 15);<br>
}</p>
<p>private boolean randomToTrees() {<br>
RSTile[] randomizedPath = walking.randomizePath(bankToWillows, 2, 2);<br>
return walking.walkPathMM(randomizedPath, 15);<br>
}</p>
<pre><code>// Checking where you are.
private boolean atWillows(){
RSArea area = new RSArea(new RSTile(3018, 3203), new RSTile(3090, 3238));
return area.contains(getMyPlayer().getLocation());
 }
private boolean atBank(){
RSArea area = new RSArea(new RSTile(3092, 3240), new RSTile(3097, 3247));
return area.contains(getMyPlayer().getLocation());
 }
// Run method.
public int useRun() {
randomRunEnergy = random(45, 75);
if (randomRunEnergy &lt;= walking.getEnergy() &amp;&amp; !walking.isRunEnabled()) {
   walking.setRun(true);
  }
</code></pre>
<p>return random(1, 5);<br>
}<br>
// Mouse anti-ban method.<br>
public void hand_on_mouse() {<br>
int i = random(0, 10);<br>
if (i == 5) {<br>
mouse.moveSlightly();<br>
}<br>
}<br>
// Anti-ban method.<br>
private void antiban() {<br>
int gamble = random(0, 1000);<br>
if (gamble &gt;= 200 &amp;&amp; gamble &lt; 203) {<br>
camera.setPitch(random(1, 160));<br>
}</p>
<p>if (gamble == 150) {<br>
mouse.moveSlightly();<br>
mouse.moveRandomly(70, 380);<br>
}<br>
if (gamble == 603) {<br>
randomTab();<br>
}</p>
<p>if (gamble &gt; 3 &amp;&amp; gamble &lt; 9) {<br>
mouse.moveRandomly(40, 280);<br>
camera.setAngle(random(0, 140));<br>
mouse.moveSlightly();<br>
}<br>
if (gamble &gt;= 400 &amp;&amp; gamble &lt; 403) {<br>
mouse.moveSlightly();<br>
camera.setAngle(random(0, 180));<br>
camera.setPitch(random(0, 100));<br>
}</p>
<p>if (gamble &gt;= 550 &amp;&amp; gamble &lt; 553) {<br>
camera.setAngle(random(0, 140));<br>
}</p>
<p>if (gamble &gt;= 1 &amp;&amp; gamble &lt; 10) {<br>
mouse.moveSlightly();<br>
}<br>
if (gamble &gt;= 20 &amp;&amp; gamble &lt; 23) {<br>
camera.setPitch(random(1, 90));<br>
}</p>
<p>if (gamble &gt;= 40 &amp;&amp; gamble &lt; 41) {<br>
sleep(random(4000, 15000));<br>
}<br>
if (gamble &gt;= 20 &amp;&amp; gamble &lt; 23) {<br>
camera.setAngle(random(190, 230));<br>
}</p>
<p>if (gamble &gt;= 45 &amp;&amp; gamble &lt; 47) {<br>
mouse.moveRandomly(70, 380);<br>
}</p>
<p>if (gamble &gt;= 700 &amp;&amp; gamble &lt; 703) {<br>
camera.setAngle(random(1, 350));<br>
}</p>
<p>if (gamble &gt;= 995) {<br>
camera.setAngle(random(1, 345));<br>
sleep(random(20, 130));<br>
mouse.moveSlightly();<br>
}</p>
<p>if (gamble &gt;= 600 &amp;&amp; gamble &lt; 610) {<br>
mouse.moveSlightly();<br>
}</p>
<p>if (gamble &gt;= 15 &amp;&amp; gamble &lt; 18) {<br>
camera.setAngle(random(100, 120));<br>
}<br>
if (gamble &gt;= 1 &amp;&amp; gamble &lt; 5) {<br>
mouse.move(random(1, 600), random(1, 600));<br>
}<br>
if (gamble &gt;= 990 &amp;&amp; gamble &lt; 995) {<br>
if (game.getCurrentTab() != 1) {<br>
game.openTab(1);<br>
sleep(120, 220);<br>
}<br>
if (game.getCurrentTab() == 1) {<br>
mouse.move(695, 361);<br>
sleep(320, 575);<br>
}<br>
}<br>
}</p>
<p>//Tab Anti-ban<br>
public void randomTab() {<br>
int gamble = random(0, 1000);<br>
if (gamble &gt;= 1 &amp;&amp; gamble &lt; 5) {<br>
game.openTab(game.TAB_STATS);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 6 &amp;&amp; gamble &lt; 10) {<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 15 &amp;&amp; gamble &lt; 17) {<br>
game.openTab(game.TAB_CLAN);<br>
sleep(random(100,300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 25 &amp;&amp; gamble &lt; 30) {<br>
game.openTab(game.TAB_FRIENDS);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 35 &amp;&amp; gamble &lt; 38) {<br>
game.openTab(game.TAB_IGNORE);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 40 &amp;&amp; gamble &lt; 42) {<br>
game.openTab(game.TAB_EQUIPMENT);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 100 &amp;&amp; gamble &lt; 104) {<br>
game.openTab(game.TAB_QUESTS);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 160 &amp;&amp; gamble &lt; 164) {<br>
game.openTab(game.TAB_NOTES);<br>
sleep(random(100, 300));<br>
game.openTab(game.TAB_INVENTORY);<br>
}<br>
if (gamble &gt;= 700 &amp;&amp; gamble &lt; 706) {</p>
<pre><code>   game.openTab(game.TAB_MUSIC);
   sleep(random(100, 300));
   game.openTab(game.TAB_INVENTORY);
               }
            }



// Cut method.
public void cutWillow() {
final RSObject willow = objects.getNearest(WILLOW_ID);
if (!willow.isOnScreen()) {
walking.walkTo(willow.getLocation());   
} else {
camera.turnToTile(willow.getLocation());   
if (getMyPlayer().getAnimation() == -1 &amp;&amp; willow != null) {
willow.doAction("Chop down");
sleep(random(5, 40));
 }
}
</code></pre>
<p>}</p>
<pre><code>// Banking method.
</code></pre>
<p>private void openBank() {<br>
RSObject bankBooth = objects.getNearest(BANK_BOOTH_ID);<br>
if (bankBooth != null &amp;&amp; !bank.isOpen()) {<br>
camera.turnToTile(bankBooth.getLocation());<br>
bankBooth.doAction(“use-quickly”);<br>
sleep(200,400);<br>
}<br>
}<br>
private void depositWillow() {<br>
if(bank.isOpen()){<br>
while(inventory.getCount(WILLOW_LOGS) &gt;= 1){<br>
bank.depositAllExcept(HATCHET_ID);<br>
sleep(150, 350);<br>
}<br>
}<br>
}<br>
private void closeBank() {<br>
if(bank.isOpen()){<br>
mouse.move(490, 36, 3, 3);<br>
sleep(20, 100);<br>
mouse.click(true);<br>
sleep(150, 350);<br>
}<br>
}<br>
private void Bank(){<br>
openBank();<br>
sleep(20, 100);<br>
depositWillow();<br>
sleep(20, 100);<br>
closeBank();<br>
sleep(20, 100);<br>
}</p>
<p>public void onFinish() {<br>
log(“Bye”);<br>
log(“Thank you for using Draynor Willows…”);<br>
game.logout(true);<br>
}</p>
<pre><code>   public int loop() {
   useRun();
   antiban();
   RSGroundItem NEST = groundItems.getNearest(NEST_ID);
   if (NEST != null &amp;&amp; !inventory.isFull()) {
   NEST.doAction("Take");
   sleep(random(1000, 1500));
   NESTS_COLLECTED++;
   antiban();
</code></pre>
<p>}<br>
camera.setPitch(true);<br>
if(atWillows() &amp;&amp; inventory.isFull()){<br>
useRun();<br>
antiban();<br>
randomToBank();<br>
sleep(random(300, 500));<br>
} else if(atBank() &amp;&amp; inventory.isFull()){<br>
Bank();<br>
} else if(atWillows() &amp;&amp; !inventory.isFull()){</p>
<pre><code>    cutWillow();
    hand_on_mouse();
    antiban();
    useRun();
 }  
  if(atBank() &amp;&amp; !inventory.isFull()){
   useRun();
   antiban();
   randomToTrees();
   sleep(random(300, 500));
 }
  if(!atBank() &amp;&amp; !atWillows() &amp;&amp; !inventory.isFull()){
   useRun();
   randomToTrees();
   sleep(random(300, 500));
   
     
} else if( !atBank() &amp;&amp; !atWillows() &amp;&amp; inventory.isFull()){
  useRun();
  
  randomToBank();
  sleep(random(300, 500));
}
  return (random(500, 1100));
</code></pre>
<p>}<br>
//Paint Details\<br>
public void serverMessageRecieved(ServerMessageEvent e) {<br>
String c = e.getMessage();<br>
if (c.contains(“get”)) {<br>
LOGS_CUT++;<br>
}<br>
}<br>
<a class="mention" href="/u/override">@Override</a><br>
public void onRepaint(Graphics g1) {<br>
Graphics2D g = (Graphics2D)g1;<br>
if (game.isLoggedIn()) {<br>
long millis = System.currentTimeMillis() - startTime;<br>
long hours = millis / (1000 * 60 * 60);<br>
millis -= hours * (1000 * 60 * 60);<br>
long minutes = millis / (1000 * 60);<br>
millis -= minutes * (1000 * 60);<br>
long seconds = millis / 1000;<br>
int GAINED_XP = 0;<br>
if (START_XP == 0) {<br>
START_XP = skills.getCurrentExp(skills.WOODCUTTING);<br>
}<br>
GAINED_XP = skills.getCurrentExp(skills.WOODCUTTING) - START_XP;<br>
WC_LEVEL = skills.getCurrentLevel(skills.WOODCUTTING);<br>
if (START_LVL == 0) {<br>
START_LVL = skills.getRealLevel(Skills.WOODCUTTING);<br>
}<br>
NEXT_LVL = skills.getRealLevel(Skills.WOODCUTTING) + 1;<br>
int XP_TNL = skills.getExpToNextLevel(Skills.WOODCUTTING);<br>
int XP_HOUR = (int) ((GAINED_XP) * 3600000D / (System.currentTimeMillis() - startTime));<br>
percent = skills.getPercentToNextLevel(Skills.WOODCUTTING);</p>
<pre><code>    g.setFont(font1);
    g.setColor(color1);
    g.drawString("Draynor Willows", 564, 228);
    g.fillRoundRect(552, 235, 180, 107, 16, 16);
    g.setFont(font2);
    g.setColor(color2);
    g.drawString("Willows Chopped: " + LOGS_CUT, 555, 255);
    g.drawString("Run Time:  " + hours + ":" + minutes + ":" + seconds, 555, 271);
    g.drawString("Nests Gained: " + NESTS_COLLECTED, 554, 285);
    g.drawString("XP Gained: " + GAINED_XP + "" + "(" + XP_HOUR / 1000 + "k XP/H)", 554, 301);
    g.setColor(color3);
    g.fillRoundRect(271, 5, 243, 43, 16, 16);
    g.setColor(color2);
    g.drawString("Percent To level: " + percent + "% to " + NEXT_LVL + " WC", 285, 29);
}
</code></pre>
<p>}<br>
}[/code]</p>
<p>^ and the new one that works with 2.0</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-rsbot-script/370600/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-rsbot-script/370600/1</link>
        <pubDate>Sat, 27 Nov 2010 06:35:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-370600-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-rsbot-script/370600.rss">Help with RSbot script</source>
      </item>
  </channel>
</rss>
