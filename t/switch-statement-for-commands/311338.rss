<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Switch statement for commands!</title>
    <link>https://forum.moparisthebest.com/t/switch-statement-for-commands/311338</link>
    <description>[size=13pt][u][b]Intro:[/b][/u][/size]
No more if statements! I have programmed into my server a method of dealing with player commands, so that you can use a switch statement on them, this means you wont have to type a long if statement for every command you create. This method is also more efficient, although you probably won&#39;t be able to tell the difference. (Except the fact you can make commands easier -_-)

Another thing is that this may help newbie programmers make less mistakes when programming new commands. The most common mistake is this:
[code]
if (command.equalsIgnoreCase(&quot;master&quot;)) {
    ...
} else {
   sendMessage(&quot;You already did master!&quot;);
}
[/code]
^ Quick example of a common mistake i&#39;ve seen alot.

I have let my friend post this as a snippet over at R-S, his name was Zealous. But now i am creating a tutorial for it. 
[u][b]ONLY POSTED HERE ON MOPAR. IF IT&#39;S ANYWHERE ELSE - IT WAS LEECHED.[/b][/u]

Okay, tutorial time!

[u][b]Credits[/b][/u]: Me, The guy who first created the customCommand() method
[b]Purpose:[/b] To handle commands in a more effective, and efficient way.
[b]Difficulty:[/b] 1-3/10
[b]Files modified:[/b] Client.java, Commands.java
[b]Source Base:[/b] Devolution 2.7 (Bakatool) 
Should work on any base, although servers such as Deltascape will need a few things/methods modified.

[size=13pt][u][b]Step 1 - Creating the Enum[/b][/u][/size]
Okay, so the first thing we are going to do is create a new Java file, which will just contain an Enum for the command names!
To do this, just open up the editor you use (Eg: Notepad) and create a public enum:
[code]
/**
 * !Joshua
 * Command enum, just contains the names of the commands so that they can
 * be used in the switch statement.
 */
public enum Commands {
    /** Just put your commands names here **/
    MASTER, YELL, SKILLER 
}
[/code]
Okay, so basically an enum is just a set of constants used to represent something. In this case, the constants represent our commands. We create this enum so that we can use the name of the command in a switch statement.
I have given 3 command names as an example. As they are constants, following Java conventions the command names should all be capital letters. (this doesn&#39;t affect when the user types a command) Once you have this, just save it as Commands.java

[size=13pt][u][b]Step 2 - Backing up all of your old commands[/b][/u][/size]
Now, we don&#39;t want you to lose all of your commands, incase you mess up following this tutorial, do we? So to be on the safe side, you should either C+P all of your commands (or just your whole customCommand method). Either that, or just make it a comment block, like so:
[code]
/*
public void customCommand(String command) {
    if (command.equalsIgnoreCase(&quot;afk&quot;)) {
        ...
    }
    else if (command.equalsIgnoreCase(&quot;back&quot;)) {
        ...
    }
    else if (command.equalsIgnoreCase(&quot;master&quot;)) {
        ...
    }
}
*/
[/code]
Now we have our commands backed up, we may proceed with getting this finished.

[size=13pt][u][b]Step 3 - Modifying the customCommand() method.[/b][/u][/size]
Open up Client.java, and scroll down to where your old customCommand method was.
If you have commented it all out, as the example shows above ^ then you need to create the method again:
[code]
public void customCommand(String command) {

}
[/code]
Okay, now let&#39;s put the command into an array, so if the player who types the command inputs a value (for example in the ::tele command) then the customCommand method can still recognise that it isn&#39;t part of the command.
[code]
String commandArray[] = command.split(&quot; &quot;);
[/code]
This does what i just explained, so for example if the user typed &quot;::tele 5000 4000&quot;, the server would put &quot;tele&quot; into commandArray[0], &quot;5000&quot; into commandArray[1], and &quot;4000&quot; into commandArray[2].

Now let&#39;s make the command name it&#39;s own variable:
[code]
String command2 = commandArray[0]; // Just puts the command name into it&#39;s own variable.
[/code]

Now let&#39;s create the actual switch statement. This just asks the server to match up what the user typed with any of the enum constants, and if it finds a match, it does as instructed, if not.. then it just won&#39;t do anything. Simple as.
[code]
switch(Commands.valueOf(command2.toUpperCase())) {
// Just checks if the command typed exists in the server
}
[/code]

Your final command should look something like this, so far:
[code]
public void customCommand(String command) {
    String commandArray[] = command.split(&quot; &quot;);
    String command2 = commandArray[0];
    switch(Commands.valueOf(command2.toUpperCase())) {
        // Commands here
    }
}
[/code]

Now it&#39;s as simple as can be, you can now create commands. I&#39;ll give a few examples and explain usage.

Here is how it works.
Your command2 variable is the command typed, so if the user types &quot;::yell hello moto&quot; then the command2 variable is just &quot;yell&quot;.
The commandArray[] String, however, is different. For each space the user inputs, it creates a new String, and puts it into this array. For example:
[code]
::yell hi i am so sexy pls lol
[/code]
This would return an array of:
[code]
String commandArray[] = {
        &quot;yell&quot;, // Not used, we use command2 variable instead
        &quot;hi&quot;, // commandArray[1]
         &quot;i&quot;, // commandArray[2]
         &quot;am&quot;, //commandArray[3]
         &quot;so&quot;, // ^ Etc ^
         &quot;sexy&quot;,
         &quot;pls&quot;,
         &quot;lol&quot;
};
[/code]
Yes, this is a fucker, and this is why commandArray is not used in commands such as yell, only in commands where the user inputs values seperated with a space, for example the ::tele command.

For a yell command, the way we do this is we just use the good old substring() method. Like so:
[code]
case YELL:
    String msg = command.substring(5); // Starting with the space after ::yell
    yell(playerName+&quot;: &quot;+msg);
    break;
[/code]
That&#39;s still as simple as, eh?

Now heres a few examples inside the customCommand() method.

[code]
public void customCommand(String command) {
    String commandArray[] = command.split(&quot; &quot;);
    String command2 = commandArray[0];
    switch(Commands.valueOf(command2.toUpperCase())) {
        case YELL:
            String msg = command.substring(5); // Starting with the space after ::yell
            yell(playerName+&quot;: &quot;+msg);
            break;
        case MASTER:
            for (int i = 0; i &lt; 21; i++) {
                addSkillXP(15000000, i); // Adds 15m xp to each skill
            }
            break;
        case TELE:
            teleportToX = Integer.parseInt(commandArray[1]); // First input after space
            teleportToY = Integer.parseInt(commandArray[2]); // Second input after space after first input
            heightLevel = Integer.parseInt(commandArray[3]); // Third input after space after second input
            break;
    }
}
[/code]

[size=11pt][i][u][b]Note: When adding new commands, make sure you add the constant to the enum in Commands.java![/b][/u][/i][/size]

I think it should be understandable now, but if you need anything else explained, just tell me and i will be sure to edit my post ;)
Good luck :)</description>
    
    <lastBuildDate>Thu, 29 Oct 2009 04:04:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/switch-statement-for-commands/311338.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Switch statement for commands!</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Intro:</span></span>[/size]<br>
No more if statements! I have programmed into my server a method of dealing with player commands, so that you can use a switch statement on them, this means you wont have to type a long if statement for every command you create. This method is also more efficient, although you probably won’t be able to tell the difference. (Except the fact you can make commands easier -_-)</p>
<p>Another thing is that this may help newbie programmers make less mistakes when programming new commands. The most common mistake is this:</p>
<pre><code class="lang-auto">if (command.equalsIgnoreCase("master")) {
    ...
} else {
   sendMessage("You already did master!");
}</code></pre>
<p>^ Quick example of a common mistake i’ve seen alot.</p>
<p>I have let my friend post this as a snippet over at R-S, his name was Zealous. But now i am creating a tutorial for it.<br>
<span class="bbcode-u"><span class="bbcode-b">ONLY POSTED HERE ON MOPAR. IF IT’S ANYWHERE ELSE - IT WAS LEECHED.</span></span></p>
<p>Okay, tutorial time!</p>
<p><span class="bbcode-u"><span class="bbcode-b">Credits</span></span>: Me, The guy who first created the customCommand() method<br>
<span class="bbcode-b">Purpose:</span> To handle commands in a more effective, and efficient way.<br>
<span class="bbcode-b">Difficulty:</span> 1-3/10<br>
<span class="bbcode-b">Files modified:</span> Client.java, Commands.java<br>
<span class="bbcode-b">Source Base:</span> Devolution 2.7 (Bakatool)<br>
Should work on any base, although servers such as Deltascape will need a few things/methods modified.</p>
<p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Step 1 - Creating the Enum</span></span>[/size]<br>
Okay, so the first thing we are going to do is create a new Java file, which will just contain an Enum for the command names!<br>
To do this, just open up the editor you use (Eg: Notepad) and create a public enum:</p>
<pre><code class="lang-auto">/**
 * !Joshua
 * Command enum, just contains the names of the commands so that they can
 * be used in the switch statement.
 */
public enum Commands {
    /** Just put your commands names here **/
    MASTER, YELL, SKILLER 
}</code></pre>
<p>Okay, so basically an enum is just a set of constants used to represent something. In this case, the constants represent our commands. We create this enum so that we can use the name of the command in a switch statement.<br>
I have given 3 command names as an example. As they are constants, following Java conventions the command names should all be capital letters. (this doesn’t affect when the user types a command) Once you have this, just save it as Commands.java</p>
<p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Step 2 - Backing up all of your old commands</span></span>[/size]<br>
Now, we don’t want you to lose all of your commands, incase you mess up following this tutorial, do we? So to be on the safe side, you should either C+P all of your commands (or just your whole customCommand method). Either that, or just make it a comment block, like so:</p>
<pre><code class="lang-auto">/*
public void customCommand(String command) {
    if (command.equalsIgnoreCase("afk")) {
        ...
    }
    else if (command.equalsIgnoreCase("back")) {
        ...
    }
    else if (command.equalsIgnoreCase("master")) {
        ...
    }
}
*/</code></pre>
<p>Now we have our commands backed up, we may proceed with getting this finished.</p>
<p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Step 3 - Modifying the customCommand() method.</span></span>[/size]<br>
Open up Client.java, and scroll down to where your old customCommand method was.<br>
If you have commented it all out, as the example shows above ^ then you need to create the method again:</p>
<pre><code class="lang-auto">public void customCommand(String command) {

}</code></pre>
<p>Okay, now let’s put the command into an array, so if the player who types the command inputs a value (for example in the ::tele command) then the customCommand method can still recognise that it isn’t part of the command.</p>
<pre><code class="lang-auto">String commandArray[] = command.split(" ");</code></pre>
<p>This does what i just explained, so for example if the user typed “::tele 5000 4000”, the server would put “tele” into commandArray[0], “5000” into commandArray[1], and “4000” into commandArray[2].</p>
<p>Now let’s make the command name it’s own variable:</p>
<pre><code class="lang-auto">String command2 = commandArray[0]; // Just puts the command name into it's own variable.</code></pre>
<p>Now let’s create the actual switch statement. This just asks the server to match up what the user typed with any of the enum constants, and if it finds a match, it does as instructed, if not… then it just won’t do anything. Simple as.</p>
<pre><code class="lang-auto">switch(Commands.valueOf(command2.toUpperCase())) {
// Just checks if the command typed exists in the server
}</code></pre>
<p>Your final command should look something like this, so far:</p>
<pre><code class="lang-auto">public void customCommand(String command) {
    String commandArray[] = command.split(" ");
    String command2 = commandArray[0];
    switch(Commands.valueOf(command2.toUpperCase())) {
        // Commands here
    }
}</code></pre>
<p>Now it’s as simple as can be, you can now create commands. I’ll give a few examples and explain usage.</p>
<p>Here is how it works.<br>
Your command2 variable is the command typed, so if the user types “::yell hello moto” then the command2 variable is just “yell”.<br>
The commandArray[] String, however, is different. For each space the user inputs, it creates a new String, and puts it into this array. For example:</p>
<pre><code class="lang-auto">::yell hi i am so sexy pls lol</code></pre>
<p>This would return an array of:</p>
<pre><code class="lang-auto">String commandArray[] = {
        "yell", // Not used, we use command2 variable instead
        "hi", // commandArray[1]
         "i", // commandArray[2]
         "am", //commandArray[3]
         "so", // ^ Etc ^
         "sexy",
         "pls",
         "lol"
};</code></pre>
<p>Yes, this is a fucker, and this is why commandArray is not used in commands such as yell, only in commands where the user inputs values seperated with a space, for example the ::tele command.</p>
<p>For a yell command, the way we do this is we just use the good old substring() method. Like so:</p>
<pre><code class="lang-auto">case YELL:
    String msg = command.substring(5); // Starting with the space after ::yell
    yell(playerName+": "+msg);
    break;</code></pre>
<p>That’s still as simple as, eh?</p>
<p>Now heres a few examples inside the customCommand() method.</p>
<pre><code class="lang-auto">public void customCommand(String command) {
    String commandArray[] = command.split(" ");
    String command2 = commandArray[0];
    switch(Commands.valueOf(command2.toUpperCase())) {
        case YELL:
            String msg = command.substring(5); // Starting with the space after ::yell
            yell(playerName+": "+msg);
            break;
        case MASTER:
            for (int i = 0; i &lt; 21; i++) {
                addSkillXP(15000000, i); // Adds 15m xp to each skill
            }
            break;
        case TELE:
            teleportToX = Integer.parseInt(commandArray[1]); // First input after space
            teleportToY = Integer.parseInt(commandArray[2]); // Second input after space after first input
            heightLevel = Integer.parseInt(commandArray[3]); // Third input after space after second input
            break;
    }
}</code></pre>
<p>[size=11pt]<span class="bbcode-i"><span class="bbcode-u"><span class="bbcode-b">Note: When adding new commands, make sure you add the constant to the enum in Commands.java!</span></span></span>[/size]</p>
<p>I think it should be understandable now, but if you need anything else explained, just tell me and i will be sure to edit my post <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"><br>
Good luck <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/switch-statement-for-commands/311338/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/switch-statement-for-commands/311338/1</link>
        <pubDate>Thu, 29 Oct 2009 04:04:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311338-1</guid>
        <source url="https://forum.moparisthebest.com/t/switch-statement-for-commands/311338.rss">Switch statement for commands!</source>
      </item>
  </channel>
</rss>
