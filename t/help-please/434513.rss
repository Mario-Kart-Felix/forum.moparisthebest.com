<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help please</title>
    <link>https://forum.moparisthebest.com/t/help-please/434513</link>
    <description>Hey guys, lately I&#39;v been having troubles with my 317 delta auto downloader so I was wondering if someone could give me a download or just the contents of an original 317 delta signlink, like the one Ric has from his webclient tutorial, my signlink currently isn&#39;t working very well, so if someone could please help :( Or if for some reason you wanna look at my signlink.java, here it is.

&lt;blockquote&gt;// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   signlink.java

package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;
import javax.sound.midi.*;
import javax.sound.sampled.*;

public final class signlink
    implements Runnable
{

    public static final void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active) 
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public final void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {

                    String wave = s + savereq;
                    waveplay = false;




//System.out.println(&quot;WAVE &quot;+wave);
		AudioInputStream audioInputStream = null;
		try {
			audioInputStream = AudioSystem.getAudioInputStream(new File(wave/*soundFile*/));
		} catch (UnsupportedAudioFileException e1) {
			e1.printStackTrace();
			return;
		} catch (IOException e1) {
			e1.printStackTrace();
			return;
		}
 
		AudioFormat format = audioInputStream.getFormat();
		SourceDataLine auline = null;
		DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);
 
		try {
			auline = (SourceDataLine) AudioSystem.getLine(info);
			auline.open(format);
		} catch (LineUnavailableException e) {
			e.printStackTrace();
			return;
		} catch (Exception e) {
			e.printStackTrace();
			return;
		}
 
		if (auline.isControlSupported(FloatControl.Type.PAN)) {
			FloatControl pan = (FloatControl) auline
					.getControl(FloatControl.Type.PAN);
			if (curPosition == Position.RIGHT)
				pan.setValue(1.0f);
			else if (curPosition == Position.LEFT)
				pan.setValue(-1.0f);
		} 
 
		auline.start();
		int nBytesRead = 0;
		byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];
 
		try {
			while (nBytesRead != -1) {
				nBytesRead = audioInputStream.read(abData, 0, abData.length);
				if (nBytesRead &gt;= 0)
					auline.write(abData, 0, nBytesRead);
			}
		} catch (IOException e) {
			e.printStackTrace();
			return;
		} finally {
			auline.drain();
			auline.close();
		}
 
	
 


                }
                if(midiplay)
                {

                    midi = s + savereq;
                                try {
                                    //System.out.println(&quot;Play MIDI &quot; + midi);
                                    if (musicSr != null)
                                    {
                                        musicSr.stop();
                                        musicSr.close();
                                    }
                                    musicSr = null;
                                    musicS = null;
                                    
                                    File music = new File(midi);
                                    if(music.exists())
                                    {
                                        musicS = MidiSystem.getSequence(music);
                                    }
                                } catch (Exception ex) {
                                    ex.printStackTrace();
                                }
                    
                    
                    midiplay = false;
                
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }
Sequencer musicSr = null;
Sequence musicS = null;
	enum Position {
		LEFT, RIGHT, NORMAL
	};
private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb
private Position curPosition;
    public static final String findcachedir()
    {
            try
            {
            	String s = &quot;C:/.haizscape_file_store_32/&quot;;
                String s1 = &quot;&quot;;
                File file = new File(s1 + s);
                if(file.exists() || file.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }

        return null;
    }

    private static final int getuid(String s)
    {
      return 74558541;
    }

    public static final synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static final synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static final synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static final synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static final synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static final synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static final synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
            return;
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
            return;
        }
    }

    public static final void reporterror(String s)
    {
        if(!reporterror)
            return;
        if(!active)
            return;
        System.out.println(&quot;Error: &quot; + s);
        try
        {
            s = s.replace(&#39;:&#39;, &#39;_&#39;);
            s = s.replace(&#39;@&#39;, &#39;_&#39;);
            s = s.replace(&#39;&amp;&#39;, &#39;_&#39;);
            s = s.replace(&#39;#&#39;, &#39;_&#39;);
            DataInputStream datainputstream = openurl(&quot;reporterror&quot; + 317 + &quot;.cgi?error=&quot; + errorname + &quot; &quot; + s);
            datainputstream.readLine();
            datainputstream.close();
            return;
        }
        catch(IOException _ex)
        {
            return;
        }
    }

    public signlink()
    {
    }

    private static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static RandomAccessFile cache_idx[] = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte savebuf[] = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static String wave = null;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}&lt;/blockquote&gt;</description>
    
    <lastBuildDate>Tue, 28 Feb 2012 02:54:45 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-please/434513.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help please</title>
        <dc:creator><![CDATA[@b00mz1029 b00mz1029]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/b00mz1029">@b00mz1029</a> wrote:</p>
          <blockquote>
              <p>Lol sorry I have no idea what that means, not your fault. (me=stupid and clueless)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-please/434513/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-please/434513/3</link>
        <pubDate>Tue, 28 Feb 2012 02:54:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-434513-3</guid>
        <source url="https://forum.moparisthebest.com/t/help-please/434513.rss">Help please</source>
      </item>
      <item>
        <title>Help please</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <p>Code tags work wonders.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-please/434513/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-please/434513/2</link>
        <pubDate>Tue, 28 Feb 2012 02:52:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-434513-2</guid>
        <source url="https://forum.moparisthebest.com/t/help-please/434513.rss">Help please</source>
      </item>
      <item>
        <title>Help please</title>
        <dc:creator><![CDATA[@b00mz1029 b00mz1029]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/b00mz1029">@b00mz1029</a> wrote:</p>
          <blockquote>
              <p>Hey guys, lately I’v been having troubles with my 317 delta auto downloader so I was wondering if someone could give me a download or just the contents of an original 317 delta signlink, like the one Ric has from his webclient tutorial, my signlink currently isn’t working very well, so if someone could please help <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> Or if for some reason you wanna look at my signlink.java, here it is.</p>
<blockquote>// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 
// Source File Name:   signlink.java
<p>package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import javax.sound.midi.<em>;<br>
import javax.sound.sampled.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static final void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active) 
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public final void run()
{
    active = true;
    String s = findcachedir();
    uid = getuid(s);
    try
    {
        File file = new File(s + "main_file_cache.dat");
        if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
            file.delete();
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++)
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {

                String wave = s + savereq;
                waveplay = false;
</code></pre>
<p><a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>("WAVE "+wave);<br>
AudioInputStream audioInputStream = null;<br>
try {<br>
audioInputStream = AudioSystem.getAudioInputStream(new File(wave/<em>soundFile</em>/));<br>
} catch (UnsupportedAudioFileException e1) {<br>
e1.printStackTrace();<br>
return;<br>
} catch (IOException e1) {<br>
e1.printStackTrace();<br>
return;<br>
}</p>
<pre><code>	AudioFormat format = audioInputStream.getFormat();
	SourceDataLine auline = null;
	DataLine.Info info = new DataLine.Info(SourceDataLine.class, format);

	try {
		auline = (SourceDataLine) AudioSystem.getLine(info);
		auline.open(format);
	} catch (LineUnavailableException e) {
		e.printStackTrace();
		return;
	} catch (Exception e) {
		e.printStackTrace();
		return;
	}

	if (auline.isControlSupported(FloatControl.Type.PAN)) {
		FloatControl pan = (FloatControl) auline
				.getControl(FloatControl.Type.PAN);
		if (curPosition == Position.RIGHT)
			pan.setValue(1.0f);
		else if (curPosition == Position.LEFT)
			pan.setValue(-1.0f);
	} 

	auline.start();
	int nBytesRead = 0;
	byte[] abData = new byte[EXTERNAL_BUFFER_SIZE];

	try {
		while (nBytesRead != -1) {
			nBytesRead = audioInputStream.read(abData, 0, abData.length);
			if (nBytesRead &gt;= 0)
				auline.write(abData, 0, nBytesRead);
		}
	} catch (IOException e) {
		e.printStackTrace();
		return;
	} finally {
		auline.drain();
		auline.close();
	}





            }
            if(midiplay)
            {

                midi = s + savereq;
                            try {
                                //System.out.println("Play MIDI " + midi);
                                if (musicSr != null)
                                {
                                    musicSr.stop();
                                    musicSr.close();
                                }
                                musicSr = null;
                                musicS = null;
                                
                                File music = new File(midi);
                                if(music.exists())
                                {
                                    musicS = MidiSystem.getSequence(music);
                                }
                            } catch (Exception ex) {
                                ex.printStackTrace();
                            }
                
                
                midiplay = false;
            
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}
</code></pre>
<p>Sequencer musicSr = null;<br>
Sequence musicS = null;<br>
enum Position {<br>
LEFT, RIGHT, NORMAL<br>
};<br>
private final int EXTERNAL_BUFFER_SIZE = 524288; // 128Kb<br>
private Position curPosition;<br>
public static final String findcachedir()<br>
{<br>
try<br>
{<br>
String s = “C:/.haizscape_file_store_32/”;<br>
String s1 = “”;<br>
File file = new File(s1 + s);<br>
if(file.exists() || file.mkdir())<br>
return s1 + s + “/”;<br>
}<br>
catch(Exception _ex) { }</p>
<pre><code>    return null;
}

private static final int getuid(String s)
{
  return 74558541;
}

public static final synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static final synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static final synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static final synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static final synchronized boolean wavesave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static final synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static final synchronized void midisave(byte abyte0[], int i)
{
    if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
        return;
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
        return;
    }
}

public static final void reporterror(String s)
{
    if(!reporterror)
        return;
    if(!active)
        return;
    System.out.println("Error: " + s);
    try
    {
        s = s.replace(':', '_');
        s = s.replace('@', '_');
        s = s.replace('&amp;', '_');
        s = s.replace('#', '_');
        DataInputStream datainputstream = openurl("reporterror" + 317 + ".cgi?error=" + errorname + " " + s);
        datainputstream.readLine();
        datainputstream.close();
        return;
    }
    catch(IOException _ex)
    {
        return;
    }
}

public signlink()
{
}

private static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static RandomAccessFile cache_idx[] = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte savebuf[] = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static String wave = null;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}</p>
</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-please/434513/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-please/434513/1</link>
        <pubDate>Tue, 28 Feb 2012 02:42:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-434513-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-please/434513.rss">Help please</source>
      </item>
  </channel>
</rss>
