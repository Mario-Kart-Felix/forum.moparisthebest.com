<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Resumable scripts in C#</title>
    <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147</link>
    <description>You can run the code and see the result yourself here: https://dotnetfiddle.net/WcUSzT


Java doesn&#39;t support coroutines at the language level, but there are tools out there that provide them (e.g.: https://github.com/offbynull/coroutines).
There are also tools that result in a comparable outcome (e.g.: http://docs.paralleluniverse.co/quasar/).


But yeah, C# has language level support for this using the yield return construct. The compiler builds up a state machine and does the work for you.


Thoughts?


-----


The tl;dr version containing just the trivial script. The script prints a line, waits one tick, prints another, and then waits 3 seconds (6 ticks) before printing the last line:
[code]

    internal class BlahScript : AbstractScript
    {
        public override IEnumerator&lt;IContinueTrigger&gt; RunInner()
        {
            Console.WriteLine(&quot;Hi there!&quot;);


            yield return SleepOne();


            Console.WriteLine(&quot;Let&#39;s talk in a few seconds...&quot;);


            yield return Sleep(TimeSpan.FromSeconds(3));


            Console.WriteLine(&quot;Scratch that, I have to go. :(&quot;);
        }
    }
[/code]


The entire code sample:
[code]

using System;
using System.Collections.Generic;
using System.Threading;


namespace ConsoleApplication1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var l = new Looper();
            l.Loop();
        }
    }


    public class Looper
    {
        public Looper()
        {
            for (var i = 0; i &lt; 5; i++)
            {
                var e = new Entity
                {
                    CurrentScript = new BlahScript()
                };


                Entities.Add(e);
            }
        }


        private List&lt;Entity&gt; Entities { get; } = new List&lt;Entity&gt;();


        public void Loop()
        {
            while (true)
            {
                foreach (var e in Entities)
                {
                    var script = e.CurrentScript;


                    if (script.IsReadyToContinue)
                    {
                        script.Run();
                    }
                }


                Console.WriteLine(&quot;Tick&quot;);


                if (Entities.TrueForAll(x =&gt; x.CurrentScript.IsFinished)) break;


                Thread.Sleep(500);
            }


            Console.WriteLine(&quot;\nEnd of loop.&quot;);
        }
    }


    internal class Entity
    {
        public IScript CurrentScript { get; set; }
        public IContinueTrigger CurrentActionTrigger { get; set; }
    }


    #region Script


    internal interface IScript
    {
        bool IsReadyToContinue { get; }
        bool IsFinished { get; }
        void Run();
    }


    internal abstract class AbstractScript : IScript
    {
        private readonly IEnumerator&lt;IContinueTrigger&gt; _scriptSteps;
        private IContinueTrigger _trigger;


        protected AbstractScript()
        {
            _scriptSteps = RunInner();
        }


        public void Run()
        {
            var e = _scriptSteps;
            var hasMore = e.MoveNext();


            if (!hasMore)
            {
                IsFinished = true;
                _trigger = null;
                return;
            }


            _trigger = e.Current;
        }


        public bool IsReadyToContinue =&gt; _trigger?.IsReady ?? true;
        public bool IsFinished { get; private set; }
        public abstract IEnumerator&lt;IContinueTrigger&gt; RunInner();


        protected IContinueTrigger SleepOne()
        {
            return new ContinueImmediatelyTrigger();
        }


        protected IContinueTrigger Sleep(TimeSpan ts)
        {
            return new ContinueAfterElapsedTimeTrigger(ts);
        }
    }


    internal class BlahScript : AbstractScript
    {
        public override IEnumerator&lt;IContinueTrigger&gt; RunInner()
        {
            Console.WriteLine(&quot;Hi there!&quot;);


            yield return SleepOne();


            Console.WriteLine(&quot;Let&#39;s talk in a few seconds...&quot;);


            yield return Sleep(TimeSpan.FromSeconds(3));


            Console.WriteLine(&quot;Scratch that, I have to go. :(&quot;);
        }
    }


    #endregion


    #region Continue triggers


    internal interface IContinueTrigger
    {
        bool IsReady { get; }
    }


    internal class ContinueImmediatelyTrigger : IContinueTrigger
    {
        public bool IsReady =&gt; true;
    }


    internal class ContinueAfterElapsedTimeTrigger : IContinueTrigger
    {
        private readonly DateTime _timeToRun;


        public ContinueAfterElapsedTimeTrigger(TimeSpan ts)
        {
            _timeToRun = DateTime.Now.Add(ts);
        }


        public bool IsReady =&gt; DateTime.Now &gt;= _timeToRun;
    }


    #endregion
}
[/code]</description>
    
    <lastBuildDate>Sat, 09 Apr 2016 22:06:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">A.define('&gt;', ['p', function(p) {}]);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/12</link>
        <pubDate>Sat, 09 Apr 2016 22:06:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-12</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@Death_Style Death Style]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/death_style">@Death_Style</a> wrote:</p>
          <blockquote>
              <p>[quote=“sini, post:10, topic:555147”]Sorry I meant something similar to this:</p>
<p><code>
Action.define('PlayAnimation', function([ 'player' ], player, animationId) {
</code>[/quote]<br>
WTF are you trying to do with the array? it doesn’t work like that</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/11</link>
        <pubDate>Sat, 09 Apr 2016 20:23:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-11</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Sorry I meant something similar to this:</p>
<pre><code class="lang-auto">A.define('&gt;', ['p', function(p) {}]);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/10</link>
        <pubDate>Sat, 09 Apr 2016 20:15:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-10</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@Death_Style Death Style]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/death_style">@Death_Style</a> wrote:</p>
          <blockquote>
              <p>[quote=“sini, post:6, topic:555147”]<code>
function walk(['player', 'target'], player, target) { ... }
</code>[/quote]</p>
<p>this (and your gist) isn’t valid javascript what are you trying to do here</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/9</link>
        <pubDate>Sat, 09 Apr 2016 20:08:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-9</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>My code is made to interface with Java, just on the nashorn and LuaJ engines for configuration and implementation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/8</link>
        <pubDate>Thu, 07 Apr 2016 13:24:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-8</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>You could pass in a ScriptContext parameter in my approach if you wanted to, and such a context could encapsulate everything the script writer might reasonably want access to.<br>
I didn’t bother because it was just a demonstration.</p>
<p>Suppose you took your ‘action list’ approach and did it in pure Java - what would it look like? I hadn’t considered that sort of approach, but I suppose it could be distilled down to running a sequence of Runnables one after another. I doubt it’d be quite as clean though as the snippet in your gist link though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/7</link>
        <pubDate>Thu, 07 Apr 2016 13:10:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-7</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lothy, post:5, topic:555147”]If they can’t understand that yielding means ‘leave the script and return sometime in the future’ then they’re going to struggle with a hand-coded state machine.<br>
<span class="bbcode-b">As for concurrency, there’s little benefit on the scale you’ve described (i.e., concurrency within the context of a single script).</span></p>
<p>I’m not really convinced by your arguments. Not to be a rude, but you’re effectively suggesting a whole bunch of if/else-if boilerplate (the state machine) as not only a viable alternative but a ‘better’ alternative to sequential code and compile-time state machine creation. =[/quote]</p>
<p>Uh, we’re talking about the entire program.</p>
<p>ie:</p>
<pre><code class="lang-auto">function walk(['player', 'target'], player, target) { ... }</code></pre>
<p>From this code you can understand when a certain entity is executing an action what data it <em>MAY</em> manipulate and then run actions in parallel that don’t touch the same data or wait until data synchronization has occurred.</p>
<blockquote>Not to be a rude, but you're effectively suggesting a whole bunch of if/else-if boilerplate (the state machine) as not only a viable alternative but a 'better' alternative to sequential code and compile-time state machine creation. =\</blockquote>
<p>It’s the same sequential code split into two hierarchies:</p>
<p>Here’s a semi-working example</p>
<p><a href="https://gist.github.com/Hadyn/4d1f344b9ba49cd4f6b9" class="onebox" target="_blank" rel="nofollow noopener">https://gist.github.com/Hadyn/4d1f344b9ba49cd4f6b9</a></p>
<p>Point of the matter is that each action has a frame of reference or variable set, the entire action set has a variable set (well this by definition is questionable if its even needed), and you’re good to go. You could literally have an action in this code, that doesn’t block an entire thread or have to save its frame state, that waits for someone to input into the chat a word then handle it after.</p>
<p>Like:</p>
<pre><code class="lang-auto">WaitForInput();
DoSomethingWithInput();</code></pre>
<p>The wait part just sort of announces “hey I wait until I get input”.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/6</link>
        <pubDate>Thu, 07 Apr 2016 12:33:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-6</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>If they can’t understand that yielding means ‘leave the script and return sometime in the future’ then they’re going to struggle with a hand-coded state machine.<br>
As for concurrency, there’s little benefit on the scale you’ve described (i.e., concurrency within the context of a single script).</p>
<p>I’m not really convinced by your arguments. Not to be a rude, but you’re effectively suggesting a whole bunch of if/else-if boilerplate (the state machine) as not only a viable alternative but a ‘better’ alternative to sequential code and compile-time state machine creation. =\</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/5</link>
        <pubDate>Thu, 07 Apr 2016 11:57:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-5</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>It involves extra steps but it’s really easy for someone to yield inappropriately or not understand the flow of how the program functions if they don’t understand the underlying mechanics. Yielding is weird for some people because it isn’t very straight forward and usually you’d be building a wrapper around it anyway. That’s why I prefer the pure code approach.</p>
<p>Another advantage of having a state machine is you can explicitly state your dependencies and then at runtime determine how you can run actions in parallel. As in if you know two actions will not change state of two different players then you can run them at the same time, with definite policies.</p>
<p>Effectively there isn’t any other way design wise to handle temporal logic with different frames of reference. It boils down to the same mechanics but they’re just handled either on a language or software level.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/4</link>
        <pubDate>Thu, 07 Apr 2016 11:37:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-4</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>[quote=“sini, post:2, topic:555147”]You can effectively do this without subroutines and I think it’s kinda detrimental to package and try and ship a system you may want to be multi platform with the requirement that your system must have subroutines available.</p>
<p>Since blocking has to do with temporal logic you can create frames of reference for the string of actions your are executing then pass a mechanism of logic control to each action that is created when the string of actions start being executed. Similarly to what a coroutine does just in a much friendlier way that can be designed and implemented in various systems like Java, C++, C#, etc :)[/quote]<br>
There are alternative approaches but the point is that the coroutines in C# (well, in truth, it’s the a generator) lead to the compiler handling the state machine.<br>
Essentially your proposed solution is to implement the state machine manually (‘frames of reference’), which is error-prone and tedious.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/3</link>
        <pubDate>Thu, 07 Apr 2016 11:18:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-3</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>You can effectively do this without subroutines and I think it’s kinda detrimental to package and try and ship a system you may want to be multi platform with the requirement that your system must have subroutines available.</p>
<p>Since blocking has to do with temporal logic you can create frames of reference for the string of actions your are executing then pass a mechanism of logic control to each action that is created when the string of actions start being executed. Similarly to what a coroutine does just in a much friendlier way that can be designed and implemented in various systems like Java, C++, C#, etc <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/2</link>
        <pubDate>Thu, 07 Apr 2016 10:54:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-2</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
      <item>
        <title>Resumable scripts in C#</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>You can run the code and see the result yourself here: <a href="https://dotnetfiddle.net/WcUSzT" rel="nofollow noopener">https://dotnetfiddle.net/WcUSzT</a></p>
<p>Java doesn’t support coroutines at the language level, but there are tools out there that provide them (e.g.: <a href="https://github.com/offbynull/coroutines" rel="nofollow noopener">https://github.com/offbynull/coroutines</a>).<br>
There are also tools that result in a comparable outcome (e.g.: <a href="http://docs.paralleluniverse.co/quasar/" rel="nofollow noopener">http://docs.paralleluniverse.co/quasar/</a>).</p>
<p>But yeah, C# has language level support for this using the yield return construct. The compiler builds up a state machine and does the work for you.</p>
<p>Thoughts?</p>
<hr>
<p>The tl;dr version containing just the trivial script. The script prints a line, waits one tick, prints another, and then waits 3 seconds (6 ticks) before printing the last line:</p>
<pre><code class="lang-auto">
    internal class BlahScript : AbstractScript
    {
        public override IEnumerator&lt;IContinueTrigger&gt; RunInner()
        {
            Console.WriteLine("Hi there!");


            yield return SleepOne();


            Console.WriteLine("Let's talk in a few seconds...");


            yield return Sleep(TimeSpan.FromSeconds(3));


            Console.WriteLine("Scratch that, I have to go. :(");
        }
    }</code></pre>
<p>The entire code sample:</p>
<pre><code class="lang-auto">
using System;
using System.Collections.Generic;
using System.Threading;


namespace ConsoleApplication1
{
    public class Program
    {
        public static void Main(string[] args)
        {
            var l = new Looper();
            l.Loop();
        }
    }


    public class Looper
    {
        public Looper()
        {
            for (var i = 0; i &lt; 5; i++)
            {
                var e = new Entity
                {
                    CurrentScript = new BlahScript()
                };


                Entities.Add(e);
            }
        }


        private List&lt;Entity&gt; Entities { get; } = new List&lt;Entity&gt;();


        public void Loop()
        {
            while (true)
            {
                foreach (var e in Entities)
                {
                    var script = e.CurrentScript;


                    if (script.IsReadyToContinue)
                    {
                        script.Run();
                    }
                }


                Console.WriteLine("Tick");


                if (Entities.TrueForAll(x =&gt; x.CurrentScript.IsFinished)) break;


                Thread.Sleep(500);
            }


            Console.WriteLine("\nEnd of loop.");
        }
    }


    internal class Entity
    {
        public IScript CurrentScript { get; set; }
        public IContinueTrigger CurrentActionTrigger { get; set; }
    }


    #region Script


    internal interface IScript
    {
        bool IsReadyToContinue { get; }
        bool IsFinished { get; }
        void Run();
    }


    internal abstract class AbstractScript : IScript
    {
        private readonly IEnumerator&lt;IContinueTrigger&gt; _scriptSteps;
        private IContinueTrigger _trigger;


        protected AbstractScript()
        {
            _scriptSteps = RunInner();
        }


        public void Run()
        {
            var e = _scriptSteps;
            var hasMore = e.MoveNext();


            if (!hasMore)
            {
                IsFinished = true;
                _trigger = null;
                return;
            }


            _trigger = e.Current;
        }


        public bool IsReadyToContinue =&gt; _trigger?.IsReady ?? true;
        public bool IsFinished { get; private set; }
        public abstract IEnumerator&lt;IContinueTrigger&gt; RunInner();


        protected IContinueTrigger SleepOne()
        {
            return new ContinueImmediatelyTrigger();
        }


        protected IContinueTrigger Sleep(TimeSpan ts)
        {
            return new ContinueAfterElapsedTimeTrigger(ts);
        }
    }


    internal class BlahScript : AbstractScript
    {
        public override IEnumerator&lt;IContinueTrigger&gt; RunInner()
        {
            Console.WriteLine("Hi there!");


            yield return SleepOne();


            Console.WriteLine("Let's talk in a few seconds...");


            yield return Sleep(TimeSpan.FromSeconds(3));


            Console.WriteLine("Scratch that, I have to go. :(");
        }
    }


    #endregion


    #region Continue triggers


    internal interface IContinueTrigger
    {
        bool IsReady { get; }
    }


    internal class ContinueImmediatelyTrigger : IContinueTrigger
    {
        public bool IsReady =&gt; true;
    }


    internal class ContinueAfterElapsedTimeTrigger : IContinueTrigger
    {
        private readonly DateTime _timeToRun;


        public ContinueAfterElapsedTimeTrigger(TimeSpan ts)
        {
            _timeToRun = DateTime.Now.Add(ts);
        }


        public bool IsReady =&gt; DateTime.Now &gt;= _timeToRun;
    }


    #endregion
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147/1</link>
        <pubDate>Thu, 07 Apr 2016 10:26:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555147-1</guid>
        <source url="https://forum.moparisthebest.com/t/resumable-scripts-in-c/555147.rss">Resumable scripts in C#</source>
      </item>
  </channel>
</rss>
