<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Defining Strings as static final for exception messages</title>
    <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566</link>
    <description>At my job, before we&#39;re allowed to check in code, we have to make sure that there are no FxCop/StyleCop warnings present (the ruleset is slightly modified, but most of them are intact). Part of that is that all strings must be defined as a [code]private const string[/code], same with all magic numbers. Because of this, I got into the habit of doing it in Java as well in my own projects, and that ends up with code that looks like this:

[code=Java]
import java.util.Map;

/**
 * 
 * @version 0.1
 * @since 0.1
 */
public class LoginServerConfig {

    /**
     * 
     * @param config
     */
    protected LoginServerConfig(final Map&lt;String, String&gt; config) {
        if (config == null) {
            throw new IllegalArgumentException(CONFIG_MUST_NOT_BE_NULL_MESSAGE);
        }
        
        final String portValue = config.get(SERVER_PORT);
        if (portValue == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, SERVER_PORT));
        }
        
        final int port = Integer.parseInt(portValue);
        
        final String gameServerHost = config.get(GAME_SERVER_HOST);
        if (gameServerHost == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, GAME_SERVER_HOST));
        }
        
        final String gameServerPortValue = config.get(GAME_SERVER_PORT);
        
        if (gameServerPortValue == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, GAME_SERVER_PORT));
        }
        
        final int gameServerPort = Integer.parseInt(gameServerPortValue);
        
        this.port = port;
        this.gameServerHost = gameServerHost;
        this.gameServerPort = gameServerPort;
    }

    /**
     * 
     * @param port
     *        the port to start the LoginServer on; throws an IllegalArgumentException if {@code port &lt; 0}
     * @param gameServerHost
     *        the host of the game server; throws an IllegalArgumentException if {@code gameServerHost == null}
     * @param gameServerPort
     *        the port of the game server; throws an IllegalArgumentException if {@code gameServerPort &lt; 0}
     */
    protected LoginServerConfig(final int port, final String gameServerHost, final int gameServerPort) {
        if (port &lt; 0) {
            throw new IllegalArgumentException(String.format(PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE, port));
        }
        if (gameServerHost == null) {
            throw new IllegalArgumentException(GAME_SERVER_HOST_MUST_NOT_BE_NULL_MESSAGE);
        }
        if (gameServerPort &lt; 0) {
            throw new IllegalArgumentException(String.format(GAME_SERVER_PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE, gameServerPort));
        }
        this.port = port;
        this.gameServerHost = gameServerHost;
        this.gameServerPort = gameServerPort;
    }

    /**
     * 
     * @return
     */
    public final int getPort() {
        return port;
    }

    /**
     * 
     * @return
     */
    public final String getGameServerHost() {
        return gameServerHost;
    }

    /**
     * 
     * @return
     */
    public final int getGameServerPort() {
        return gameServerPort;
    }

    private static final String CONFIG_MUST_NOT_BE_NULL_MESSAGE = &quot;config must not be null&quot;;
    private static final String CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE = &quot;config does not contain key \&quot;%s\&quot;&quot;;
    private static final String PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE = &quot;port must be positive integer: %d&quot;;
    private static final String GAME_SERVER_HOST_MUST_NOT_BE_NULL_MESSAGE = &quot;gameServerHost must not be null&quot;;
    private static final String GAME_SERVER_PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE = &quot;gameServerPort must be positive integer: %d&quot;;
    private static final String SERVER_PORT = &quot;server.port&quot;;
    private static final String GAME_SERVER_HOST = &quot;game_server.host&quot;;
    private static final String GAME_SERVER_PORT = &quot;game_server.port&quot;;
    private final int port;
    private final String gameServerHost;
    private final int gameServerPort;
}
[/code]

So what do you guys think? What sort of benefits are there doing it this way (other than the obvious that it doesn&#39;t instantiate a new string with each call)? Does it make the code cleaner? Or make it more cluttered, but easier to maintain? Note that this is not meant to be localizable, so don&#39;t worry about that aspect.</description>
    
    <lastBuildDate>Tue, 23 Dec 2014 00:40:34 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="548566">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/exemplar/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> eXemplar:</div>
<blockquote>
<p>The only reason to do this is if you plan on internationalisation and localisation. Translation to another language can be easier to deploy a wad of static variables in a class like this. Otherwise it’s just annoying and silly.</p>
</blockquote>
</aside>
<p>Seems like it would be easier to replace strings in the constant pool. You wouldn’t have to recompile for every translation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/9</link>
        <pubDate>Tue, 23 Dec 2014 00:40:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-9</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@eXemplar eXemplar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exemplar">@eXemplar</a> wrote:</p>
          <blockquote>
              <p>The only reason to do this is if you plan on internationalisation and localisation. Translation to another language can be easier to deploy a wad of static variables in a class like this. Otherwise it’s just annoying and silly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/8</link>
        <pubDate>Tue, 23 Dec 2014 00:37:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-8</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>This makes a lot more sense with macros and as stated has no effect on the compiled bytecode.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/7</link>
        <pubDate>Tue, 23 Dec 2014 00:33:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-7</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Meh. I don’t think it’s that bad. It’s what Jagex does in the client iirc and you end up having to do this type of thing anyway if you do translations. I don’t think you need to be that verbose in the names though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/6</link>
        <pubDate>Fri, 19 Dec 2014 09:57:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-6</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>lol, strange rule</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/5</link>
        <pubDate>Fri, 19 Dec 2014 08:58:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-5</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>[quote=“Zymus, post:3, topic:548566”][quote author=Whackatre link=topic=667477.msg4463902#msg4463902 date=1418963838]<br>
it looks very cluttered, and it doesn’t look any easier to maintain. i think readability is very important. write code for adults.<br>
[/quote]</p>
<p>In my job this is the way we have to do it. We’re not allowed to check-in code if there are any warnings (and we’re not allowed to suppress them or modify the ruleset).</p>
<p>If we had the following code</p>
<p><code>
throw new IllegalArgumentException("some string");</code></p>
<p>Would that instantiate a new string every time the code block gets called? Or is the compiler smart enough to automatically convert it to a constant?[/quote]</p>
<p>new java/lang/IllegalArgumentException<br>
dup<br>
<span class="bbcode-b">ldc</span> "PANIC! RANDOMISED BLOCK!"<br>
invokespecial java/lang/IllegalArgumentException/(Ljava/lang/String;)V<br>
athrow</p>
<p>ldc pushes a one-word constant onto the operand stack. ldc takes a single parameter, , which is the value to push</p>
<p>string would be constant.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/4</link>
        <pubDate>Fri, 19 Dec 2014 05:33:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-4</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="548566">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/whackatre/40/7608_1.png" class="avatar"> Whackatre:</div>
<blockquote>
<p>it looks very cluttered, and it doesn’t look any easier to maintain. i think readability is very important. write code for adults.</p>
</blockquote>
</aside>
<p>In my job this is the way we have to do it. We’re not allowed to check-in code if there are any warnings (and we’re not allowed to suppress them or modify the ruleset).</p>
<p>If we had the following code</p>
<p><code>
throw new IllegalArgumentException("some string");</code></p>
<p>Would that instantiate a new string every time the code block gets called? Or is the compiler smart enough to automatically convert it to a constant?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/3</link>
        <pubDate>Fri, 19 Dec 2014 04:42:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-3</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>it looks very cluttered, and it doesn’t look any easier to maintain. i think readability is very important. write code for adults.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/2</link>
        <pubDate>Fri, 19 Dec 2014 04:37:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-2</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
      <item>
        <title>Defining Strings as static final for exception messages</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>At my job, before we’re allowed to check in code, we have to make sure that there are no FxCop/StyleCop warnings present (the ruleset is slightly modified, but most of them are intact). Part of that is that all strings must be defined as a <code>private const string</code>, same with all magic numbers. Because of this, I got into the habit of doing it in Java as well in my own projects, and that ends up with code that looks like this:</p>
<pre><code class="lang-auto">import java.util.Map;

/**
 * 
 * @version 0.1
 * @since 0.1
 */
public class LoginServerConfig {

    /**
     * 
     * @param config
     */
    protected LoginServerConfig(final Map&lt;String, String&gt; config) {
        if (config == null) {
            throw new IllegalArgumentException(CONFIG_MUST_NOT_BE_NULL_MESSAGE);
        }
        
        final String portValue = config.get(SERVER_PORT);
        if (portValue == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, SERVER_PORT));
        }
        
        final int port = Integer.parseInt(portValue);
        
        final String gameServerHost = config.get(GAME_SERVER_HOST);
        if (gameServerHost == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, GAME_SERVER_HOST));
        }
        
        final String gameServerPortValue = config.get(GAME_SERVER_PORT);
        
        if (gameServerPortValue == null) {
            throw new IllegalStateException(String.format(CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE, GAME_SERVER_PORT));
        }
        
        final int gameServerPort = Integer.parseInt(gameServerPortValue);
        
        this.port = port;
        this.gameServerHost = gameServerHost;
        this.gameServerPort = gameServerPort;
    }

    /**
     * 
     * @param port
     *        the port to start the LoginServer on; throws an IllegalArgumentException if {@code port &lt; 0}
     * @param gameServerHost
     *        the host of the game server; throws an IllegalArgumentException if {@code gameServerHost == null}
     * @param gameServerPort
     *        the port of the game server; throws an IllegalArgumentException if {@code gameServerPort &lt; 0}
     */
    protected LoginServerConfig(final int port, final String gameServerHost, final int gameServerPort) {
        if (port &lt; 0) {
            throw new IllegalArgumentException(String.format(PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE, port));
        }
        if (gameServerHost == null) {
            throw new IllegalArgumentException(GAME_SERVER_HOST_MUST_NOT_BE_NULL_MESSAGE);
        }
        if (gameServerPort &lt; 0) {
            throw new IllegalArgumentException(String.format(GAME_SERVER_PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE, gameServerPort));
        }
        this.port = port;
        this.gameServerHost = gameServerHost;
        this.gameServerPort = gameServerPort;
    }

    /**
     * 
     * @return
     */
    public final int getPort() {
        return port;
    }

    /**
     * 
     * @return
     */
    public final String getGameServerHost() {
        return gameServerHost;
    }

    /**
     * 
     * @return
     */
    public final int getGameServerPort() {
        return gameServerPort;
    }

    private static final String CONFIG_MUST_NOT_BE_NULL_MESSAGE = "config must not be null";
    private static final String CONFIG_DOES_NOT_CONTAIN_KEY_MESSAGE = "config does not contain key \"%s\"";
    private static final String PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE = "port must be positive integer: %d";
    private static final String GAME_SERVER_HOST_MUST_NOT_BE_NULL_MESSAGE = "gameServerHost must not be null";
    private static final String GAME_SERVER_PORT_MUST_BE_POSITIVE_INTEGER_MESSAGE = "gameServerPort must be positive integer: %d";
    private static final String SERVER_PORT = "server.port";
    private static final String GAME_SERVER_HOST = "game_server.host";
    private static final String GAME_SERVER_PORT = "game_server.port";
    private final int port;
    private final String gameServerHost;
    private final int gameServerPort;
}</code></pre>
<p>So what do you guys think? What sort of benefits are there doing it this way (other than the obvious that it doesn’t instantiate a new string with each call)? Does it make the code cleaner? Or make it more cluttered, but easier to maintain? Note that this is not meant to be localizable, so don’t worry about that aspect.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566/1</link>
        <pubDate>Fri, 19 Dec 2014 04:20:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548566-1</guid>
        <source url="https://forum.moparisthebest.com/t/defining-strings-as-static-final-for-exception-messages/548566.rss">Defining Strings as static final for exception messages</source>
      </item>
  </channel>
</rss>
