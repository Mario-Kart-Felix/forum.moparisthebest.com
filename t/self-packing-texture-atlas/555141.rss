<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Self packing texture atlas</title>
    <link>https://forum.moparisthebest.com/t/self-packing-texture-atlas/555141</link>
    <description>Praised be GL3+

[code=java]
public class TextureAtlas {
  private int size;
  public byte[] buffer;
  private byte[] occupied;

  /**
   * Creates a new {@link TextureAtlas}.
   *
   * @param size        the size of the atlas as an exponent for a power of two.
   * @param elementSize the size of the elements for the atlas in bytes.
   *
   * @throws IllegalArgumentException if the size is less than two.
   * @throws IllegalArgumentException if the element size is less than one.
   */
  public TextureAtlas(int size, int elementSize) {
    if (size &lt; 1) {
      throw new IllegalArgumentException(&quot;Expected size to be greater than one.&quot;);
    }

    if (elementSize &lt; 1) {
      throw new IllegalArgumentException(&quot;Expected element size to be greater than zero.&quot;);
    }

    this.size = size;
    buffer = new byte[(1 &lt;&lt; size + size) * elementSize];
    occupied = new byte[(1 &lt;&lt; size + size &gt;&gt; 4) + 1];
  }

  /**
   * Finds a free section in the atlas of a provided size. The space will be aligned with
   * all the other spaces of the same size.
   *
   * @param exp the size of the space as an exponent for a power of two.
   * @return the z order number of the free space. The z order number will be in the lowest
   * unit of measurement allowed so 2**1.
   */
  private int findFree(int exp) {
    int bitLen = (1 &lt;&lt; exp + exp) &gt;&gt; 2;
    for (int bitOff = 0; bitOff &lt; (1 &lt;&lt; size + size) &gt;&gt; 2; bitOff += bitLen) {
      if (!occupied(bitOff, bitLen)) {
        return bitOff;
      }
    }
    return -1;
  }

  /**
   * Gets if a section of bits are marked as occupied.
   *
   * @param start the start bit offset.
   * @param len   the amount of bits to test if occupied.
   * @return if the section of bits aren&#39;t occupied.
   */
  private boolean occupied(int start, int len) {
    int off = start;
    while (len &gt; 0) {
      int readLen = Math.min(len, ((off &gt;&gt; 3) + 1 &lt;&lt; 3) - off);
      int mask = (1 &lt;&lt; readLen) - 1;
      byte b = occupied[off &gt;&gt; 3];
      if (((b &gt;&gt;&gt; (off &amp; 7)) &amp; mask) != 0) {
        return true;
      }
      off += readLen;
      len -= readLen;
    }
    return false;
  }

  /**
   * Marks a section of bits as occupied.
   *
   * @param start the start bit offset.
   * @param len   the amount of bits to mark as occupied.
   */
  private void mark(int start, int len) {
    int off = start;
    while (len &gt; 0) {
      int writeLen = Math.min(len, ((off &gt;&gt; 3) + 1 &lt;&lt; 3) - off);
      int mask = (1 &lt;&lt; writeLen) - 1;
      occupied[off &gt;&gt; 3] |= mask &lt;&lt; (off &amp; 7);
      off += writeLen;
      len -= writeLen;
    }
  }

  public boolean insert(byte[] bytes, int off, int len) {
    if(off &lt; 0 || off + len &gt;= bytes.length) {
      throw new ArrayIndexOutOfBoundsException();
    }
    if (!isPo2(len)) {
      throw new IllegalArgumentException(&quot;Expected length to be a power of two.&quot;);
    }
    int exp = log2(len) &gt;&gt; 1;
    int free = findFree(exp);
    if (free == -1) {
      return false;
    }
    mark(free, (1 &lt;&lt; exp + exp) &gt;&gt; 2);
    int mx = mortonCodeX(free) &lt;&lt; 1;
    int my = mortonCodeY(free) &lt;&lt; 1;
    int span = 1 &lt;&lt; exp;
    for (int y = my; y &lt; my + span; y++) {
      int destOff = y * (1 &lt;&lt; size) + mx;
      System.arraycopy(bytes, off, buffer, destOff, span);
      off += span;
    }
    return true;
  }

  private static boolean isPo2(int n) {
    return (n &amp; (-n)) == n;
  }

  private static int mortonCodeX(int code) {
    return compactBy1(code);
  }

  private static int mortonCodeY(int code) {
    return compactBy1(code &gt;&gt; 1);
  }

  private static int compactBy1(int x) {
    x &amp;= 0x55555555;
    x = (x ^ (x &gt;&gt; 1)) &amp; 0x33333333;
    x = (x ^ (x &gt;&gt; 2)) &amp; 0x0f0f0f0f;
    x = (x ^ (x &gt;&gt; 4)) &amp; 0x00ff00ff;
    x = (x ^ (x &gt;&gt; 8)) &amp; 0x0000ffff;
    return x;
  }

  private static int log2(int i) {
    int n = 1;
    if (i &gt;&gt;&gt; 16 == 0) {
      n += 16;
      i &lt;&lt;= 16;
    }
    if (i &gt;&gt;&gt; 24 == 0) {
      n += 8;
      i &lt;&lt;= 8;
    }
    if (i &gt;&gt;&gt; 28 == 0) {
      n += 4;
      i &lt;&lt;= 4;
    }
    if (i &gt;&gt;&gt; 30 == 0) {
      n += 2;
      i &lt;&lt;= 2;
    }
    n -= i &gt;&gt;&gt; 31;
    return 31 - n;
  }
}

[/code]</description>
    
    <lastBuildDate>Tue, 05 Apr 2016 21:28:51 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/self-packing-texture-atlas/555141.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Self packing texture atlas</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Praised be GL3+</p>
<pre><code class="lang-auto">public class TextureAtlas {
  private int size;
  public byte[] buffer;
  private byte[] occupied;

  /**
   * Creates a new {@link TextureAtlas}.
   *
   * @param size        the size of the atlas as an exponent for a power of two.
   * @param elementSize the size of the elements for the atlas in bytes.
   *
   * @throws IllegalArgumentException if the size is less than two.
   * @throws IllegalArgumentException if the element size is less than one.
   */
  public TextureAtlas(int size, int elementSize) {
    if (size &lt; 1) {
      throw new IllegalArgumentException("Expected size to be greater than one.");
    }

    if (elementSize &lt; 1) {
      throw new IllegalArgumentException("Expected element size to be greater than zero.");
    }

    this.size = size;
    buffer = new byte[(1 &lt;&lt; size + size) * elementSize];
    occupied = new byte[(1 &lt;&lt; size + size &gt;&gt; 4) + 1];
  }

  /**
   * Finds a free section in the atlas of a provided size. The space will be aligned with
   * all the other spaces of the same size.
   *
   * @param exp the size of the space as an exponent for a power of two.
   * @return the z order number of the free space. The z order number will be in the lowest
   * unit of measurement allowed so 2**1.
   */
  private int findFree(int exp) {
    int bitLen = (1 &lt;&lt; exp + exp) &gt;&gt; 2;
    for (int bitOff = 0; bitOff &lt; (1 &lt;&lt; size + size) &gt;&gt; 2; bitOff += bitLen) {
      if (!occupied(bitOff, bitLen)) {
        return bitOff;
      }
    }
    return -1;
  }

  /**
   * Gets if a section of bits are marked as occupied.
   *
   * @param start the start bit offset.
   * @param len   the amount of bits to test if occupied.
   * @return if the section of bits aren't occupied.
   */
  private boolean occupied(int start, int len) {
    int off = start;
    while (len &gt; 0) {
      int readLen = Math.min(len, ((off &gt;&gt; 3) + 1 &lt;&lt; 3) - off);
      int mask = (1 &lt;&lt; readLen) - 1;
      byte b = occupied[off &gt;&gt; 3];
      if (((b &gt;&gt;&gt; (off &amp; 7)) &amp; mask) != 0) {
        return true;
      }
      off += readLen;
      len -= readLen;
    }
    return false;
  }

  /**
   * Marks a section of bits as occupied.
   *
   * @param start the start bit offset.
   * @param len   the amount of bits to mark as occupied.
   */
  private void mark(int start, int len) {
    int off = start;
    while (len &gt; 0) {
      int writeLen = Math.min(len, ((off &gt;&gt; 3) + 1 &lt;&lt; 3) - off);
      int mask = (1 &lt;&lt; writeLen) - 1;
      occupied[off &gt;&gt; 3] |= mask &lt;&lt; (off &amp; 7);
      off += writeLen;
      len -= writeLen;
    }
  }

  public boolean insert(byte[] bytes, int off, int len) {
    if(off &lt; 0 || off + len &gt;= bytes.length) {
      throw new ArrayIndexOutOfBoundsException();
    }
    if (!isPo2(len)) {
      throw new IllegalArgumentException("Expected length to be a power of two.");
    }
    int exp = log2(len) &gt;&gt; 1;
    int free = findFree(exp);
    if (free == -1) {
      return false;
    }
    mark(free, (1 &lt;&lt; exp + exp) &gt;&gt; 2);
    int mx = mortonCodeX(free) &lt;&lt; 1;
    int my = mortonCodeY(free) &lt;&lt; 1;
    int span = 1 &lt;&lt; exp;
    for (int y = my; y &lt; my + span; y++) {
      int destOff = y * (1 &lt;&lt; size) + mx;
      System.arraycopy(bytes, off, buffer, destOff, span);
      off += span;
    }
    return true;
  }

  private static boolean isPo2(int n) {
    return (n &amp; (-n)) == n;
  }

  private static int mortonCodeX(int code) {
    return compactBy1(code);
  }

  private static int mortonCodeY(int code) {
    return compactBy1(code &gt;&gt; 1);
  }

  private static int compactBy1(int x) {
    x &amp;= 0x55555555;
    x = (x ^ (x &gt;&gt; 1)) &amp; 0x33333333;
    x = (x ^ (x &gt;&gt; 2)) &amp; 0x0f0f0f0f;
    x = (x ^ (x &gt;&gt; 4)) &amp; 0x00ff00ff;
    x = (x ^ (x &gt;&gt; 8)) &amp; 0x0000ffff;
    return x;
  }

  private static int log2(int i) {
    int n = 1;
    if (i &gt;&gt;&gt; 16 == 0) {
      n += 16;
      i &lt;&lt;= 16;
    }
    if (i &gt;&gt;&gt; 24 == 0) {
      n += 8;
      i &lt;&lt;= 8;
    }
    if (i &gt;&gt;&gt; 28 == 0) {
      n += 4;
      i &lt;&lt;= 4;
    }
    if (i &gt;&gt;&gt; 30 == 0) {
      n += 2;
      i &lt;&lt;= 2;
    }
    n -= i &gt;&gt;&gt; 31;
    return 31 - n;
  }
}
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/self-packing-texture-atlas/555141/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/self-packing-texture-atlas/555141/1</link>
        <pubDate>Tue, 05 Apr 2016 21:28:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555141-1</guid>
        <source url="https://forum.moparisthebest.com/t/self-packing-texture-atlas/555141.rss">Self packing texture atlas</source>
      </item>
  </channel>
</rss>
