<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Returncode:5</title>
    <link>https://forum.moparisthebest.com/t/returncode-5/546063</link>
    <description>So I&#39;m running a basic PI, I&#39;ve put a lot of work into it, but when I&#39;m on the server, along with 6 or 7 of my friends, it can run for a while but every once in a while we&#39;ll get a returncode:5 spammed in the server cmd. I&#39;m not sure as to why it does this, but when it does, it disconnects everyone, and you can&#39;t log back in sometimes, saying your account is already logged in. I have a feeling it&#39;s to do with something in my Rs2loginprotocol and playerhandler classes, so I&#39;ll post them in case. Returncode = 5 is checking for double logs I&#39;m pretty sure, but no one is double logging, so I don&#39;t see why it would do that.

[code]package server.model.players;

import java.net.InetSocketAddress;

import server.Config;
import server.Server;
import server.model.npcs.NPCHandler;
import server.util.Stream;

public class PlayerHandler {

	public static Object lock = new Object();
	public static Player players[] = new Player[Config.MAX_PLAYERS];
	public static String messageToAll = &quot;&quot;;

	public static boolean updateAnnounced;
	public static boolean updateRunning;
	public static int updateSeconds;
	public static long updateStartTime;
	private boolean kickAllPlayers = false;

	public static PlayerSave save;

	static {
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++)
			players[i] = null;
	}

	public static Player getPlayer(String name) {
		for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
			if (PlayerHandler.players[d] != null) {
				Player p = PlayerHandler.players[d];
				if (p.playerName.equalsIgnoreCase(name)) {
					return p;
				}
			}
		}
		return null;
	}
	
	public boolean newPlayerClient(Client client1) {
		int slot = -1;
		for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
			if ((players[i] == null) || players[i].disconnected) {
				slot = i;
				break;
			}
		}
		if (slot == -1)
			return false;
		client1.handler = this;
		client1.playerId = slot;
		players[slot] = client1;
		players[slot].isActive = true;
		players[slot].connectedFrom = ((InetSocketAddress) client1.getSession()
				.getRemoteAddress()).getAddress().getHostAddress();
		// if (Config.SERVER_DEBUG)
		// Misc.println(&quot;Player Slot &quot; + slot + &quot; slot 0 &quot; + players[0] +
		// &quot; Player Hit &quot; + players[slot]);
		return true;
	}

	public void destruct() {
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null)
				continue;
			players[i].destruct();
			players[i] = null;
		}
	}

	public static int getPlayerCount() {
		int count = 0;
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] != null) {
				count++;
			}
		}
		return count;
	}

	public static boolean isPlayerOn(String playerName) {
		// synchronized (PlayerHandler.players) {
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] != null) {
				if (players[i].playerName.equalsIgnoreCase(playerName)) {
					return true;
				}
			}
		}
		return false;
		// }
	}

	public void process() {
		synchronized (lock) {
			if (kickAllPlayers) {
				for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
					if (players[i] != null) {
						players[i].disconnected = true;
					}
				}
			}
			/*
			 * for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) { if (players[i] ==
			 * null || !players[i].isActive) continue; if
			 * (!players[i].initialized) { players[i].initialize();
			 * players[i].initialized = true; } }
			 */
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] == null || !players[i].isActive
						|| !players[i].initialized)
					continue;
				try {
					if (players[i].disconnected
							&amp;&amp; (System.currentTimeMillis()
									- players[i].logoutDelay &gt; 10000
									|| players[i].properLogout || kickAllPlayers)) {
						if (players[i].inTrade) {
							Client o = (Client) PlayerHandler.players[players[i].tradeWith];
							if (o != null) {
								o.getTradeAndDuel().declineTrade();
							}
						}
						if (players[i].duelStatus == 5) {
							Client o = (Client) PlayerHandler.players[players[i].duelingWith];
							if (o != null) {
								o.getTradeAndDuel().duelVictory();
							}
						} else if (players[i].duelStatus &lt;= 4
								&amp;&amp; players[i].duelStatus &gt;= 1) {
							Client o = (Client) PlayerHandler.players[players[i].duelingWith];
							if (o != null) {
								o.getTradeAndDuel().declineDuel();
							}
						}
						Client o = (Client) PlayerHandler.players[i];
						if (PlayerSave.saveGame(o)) {
							System.out.println(&quot;Game saved for player &quot;
									+ players[i].playerName);
						} else {
							System.out.println(&quot;Could not save for &quot;
									+ players[i].playerName);
						}
						removePlayer(players[i]);
						players[i] = null;
						continue;
					}
					players[i].preProcessing();
					players[i].processQueuedPackets();
					players[i].process();
					players[i].postProcessing();
					players[i].getNextPlayerMovement();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] == null || !players[i].isActive
						|| !players[i].initialized)
					continue;
				try {
					players[i].update();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] == null || !players[i].isActive
						|| !players[i].initialized)
					continue;
				try {
					players[i].clearUpdateFlags();
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			if (updateRunning &amp;&amp; !updateAnnounced) {
				updateAnnounced = true;
				Server.UpdateServer = true;
			}
			if (updateRunning
					&amp;&amp; (System.currentTimeMillis() - updateStartTime &gt; (updateSeconds * 1000))) {
				kickAllPlayers = true;
			}
		}
	}

	public void updateNPC(Player plr, Stream str) {
		// synchronized(plr) {
		updateBlock.currentOffset = 0;

		str.createFrameVarSizeWord(65);
		str.initBitAccess();

		str.writeBits(8, plr.npcListSize);
		int size = plr.npcListSize;
		plr.npcListSize = 0;
		for (int i = 0; i &lt; size; i++) {
			if (plr.RebuildNPCList == false
					&amp;&amp; plr.withinDistance(plr.npcList[i]) == true) {
				plr.npcList[i].updateNPCMovement(str);
				plr.npcList[i].appendNPCUpdateBlock(updateBlock);
				plr.npcList[plr.npcListSize++] = plr.npcList[i];
			} else {
				int id = plr.npcList[i].npcId;
				plr.npcInListBitmap[id &gt;&gt; 3] &amp;= ~(1 &lt;&lt; (id &amp; 7));
				str.writeBits(1, 1);
				str.writeBits(2, 3);
			}
		}

		for (int i = 0; i &lt; NPCHandler.maxNPCs; i++) {
			if (NPCHandler.npcs[i] != null) {
				int id = NPCHandler.npcs[i].npcId;
				if (plr.RebuildNPCList == false
						&amp;&amp; (plr.npcInListBitmap[id &gt;&gt; 3] &amp; (1 &lt;&lt; (id &amp; 7))) != 0) {

				} else if (plr.withinDistance(NPCHandler.npcs[i]) == false) {

				} else {
					plr.addNewNPC(NPCHandler.npcs[i], str, updateBlock);
				}
			}
		}

		plr.RebuildNPCList = false;

		if (updateBlock.currentOffset &gt; 0) {
			str.writeBits(14, 16383);
			str.finishBitAccess();
			str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
		} else {
			str.finishBitAccess();
		}
		str.endFrameVarSizeWord();
		// }
	}

	private Stream updateBlock = new Stream(new byte[Config.BUFFER_SIZE]);

	public void updatePlayer(Player plr, Stream str) {
		// synchronized(plr) {
		updateBlock.currentOffset = 0;
		if (updateRunning &amp;&amp; !updateAnnounced) {
			str.createFrame(114);
			str.writeWordBigEndian(updateSeconds * 50 / 30);
		}
		plr.updateThisPlayerMovement(str);
		boolean saveChatTextUpdate = plr.isChatTextUpdateRequired();
		plr.setChatTextUpdateRequired(false);
		plr.appendPlayerUpdateBlock(updateBlock);
		plr.setChatTextUpdateRequired(saveChatTextUpdate);
		str.writeBits(8, plr.playerListSize);
		int size = plr.playerListSize;
		if (size &gt;= 79)
			size = 79;
		plr.playerListSize = 0;
		for (int i = 0; i &lt; size; i++) {
			if (!plr.didTeleport &amp;&amp; !plr.playerList[i].didTeleport
					&amp;&amp; plr.withinDistance(plr.playerList[i])) {
				plr.playerList[i].updatePlayerMovement(str);
				plr.playerList[i].appendPlayerUpdateBlock(updateBlock);
				plr.playerList[plr.playerListSize++] = plr.playerList[i];
			} else {
				int id = plr.playerList[i].playerId;
				plr.playerInListBitmap[id &gt;&gt; 3] &amp;= ~(1 &lt;&lt; (id &amp; 7));
				str.writeBits(1, 1);
				str.writeBits(2, 3);
			}
		}

		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || !players[i].isActive || players[i] == plr)
				continue;
			int id = players[i].playerId;
			if ((plr.playerInListBitmap[id &gt;&gt; 3] &amp; (1 &lt;&lt; (id &amp; 7))) != 0)
				continue;
			if (!plr.withinDistance(players[i]))
				continue;
			plr.addNewPlayer(players[i], str, updateBlock);
		}

		if (updateBlock.currentOffset &gt; 0) {
			str.writeBits(11, 2047);
			str.finishBitAccess();
			str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
		} else
			str.finishBitAccess();

		str.endFrameVarSizeWord();
		// }
	}

	private void removePlayer(Player plr) {
		if (plr.privateChat != 2) {
			for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] == null || players[i].isActive == false)
					continue;
				Client o = (Client) PlayerHandler.players[i];
				if (o != null) {
					o.getPA().updatePM(plr.playerId, 0);
				}
			}
		}
		plr.destruct();
	}

}
[/code]

[code]package server.net.login;

import java.net.InetSocketAddress;
import java.security.SecureRandom;

import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelFutureListener;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.handler.codec.frame.FrameDecoder;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PlayerHandler;
import server.model.players.PlayerSave;
import server.net.PacketBuilder;
import server.util.ISAACCipher;
import server.util.Misc;

public class RS2LoginProtocol extends FrameDecoder {

	private static final int CONNECTED = 0;
	private static final int LOGGING_IN = 1;
	private int state = CONNECTED;

	@Override
	protected Object decode(ChannelHandlerContext ctx, Channel channel,
			ChannelBuffer buffer) throws Exception {
		if (!channel.isConnected()) {
			return null;
		}
		switch (state) {
		case CONNECTED:
			if (buffer.readableBytes() &lt; 2)
				return null;
			int request = buffer.readUnsignedByte();
			if (request != 14) {
				System.out.println(&quot;Invalid login request: &quot; + request);
				channel.close();
				return null;
			}
			buffer.readUnsignedByte();
			channel.write(new PacketBuilder().putLong(0).put((byte) 0)
					.putLong(new SecureRandom().nextLong()).toPacket());
			state = LOGGING_IN;
			return null;
		case LOGGING_IN:

			if (buffer.readableBytes() &lt; 2) {
				return null;
			}
			int loginType = buffer.readByte();
			if (loginType != 16 &amp;&amp; loginType != 18) {
				System.out.println(&quot;Invalid login type: &quot; + loginType);
			}
			int blockLength = buffer.readByte() &amp; 0xff;
			if (buffer.readableBytes() &lt; blockLength) {
				return null;
			}

			buffer.readByte();

			int clientVersion = buffer.readShort();

			buffer.readByte();

			for (int i = 0; i &lt; 9; i++)
				buffer.readInt();

			buffer.readByte();

			int rsaOpcode = buffer.readByte();
			if (rsaOpcode != 10) {
				System.out.println(&quot;Unable to decode RSA block properly!&quot;);
				channel.close();
				return null;
			}

			final long clientHalf = buffer.readLong();
			final long serverHalf = buffer.readLong();
			final int[] isaacSeed = { (int) (clientHalf &gt;&gt; 32),
					(int) clientHalf, (int) (serverHalf &gt;&gt; 32),
					(int) serverHalf };
			final ISAACCipher inCipher = new ISAACCipher(isaacSeed);
			for (int i = 0; i &lt; isaacSeed.length; i++)
				isaacSeed[i] += 50;
			final ISAACCipher outCipher = new ISAACCipher(isaacSeed);
			final int version = buffer.readInt();
			final String name = Misc
					.formatPlayerName(Misc.getRS2String(buffer));
			final String pass = Misc.getRS2String(buffer);
			channel.getPipeline().replace(&quot;decoder&quot;, &quot;decoder&quot;,
					new RS2Decoder(inCipher));
			return login(channel, inCipher, outCipher, version, name, pass);
		}
		return null;
	}

	private static Client login(Channel channel, ISAACCipher inCipher,
			ISAACCipher outCipher, int version, String name, String pass) {
		int returnCode = 2;
		if (Connection.isIpBanned(((InetSocketAddress) channel
				.getRemoteAddress()).getAddress().getHostAddress().toString())) {
			returnCode = 4;
		}
		if (!name.matches(&quot;[A-Za-z0-9 ]+&quot;)) {
			returnCode = 4;
		}
		if (name.length() &gt; 12) {
			returnCode = 8;
		}
		Client cl = new Client(channel, -1);
		cl.playerName = name;
		cl.playerName2 = cl.playerName;
		cl.playerPass = pass;
		cl.outStream.packetEncryption = outCipher;
		cl.saveCharacter = false;
		cl.isActive = true;

		if (Connection.isNamedBanned(cl.playerName)) {
			returnCode = 4;
		}
		if (PlayerHandler.isPlayerOn(name)) {
			returnCode = 5;
		}
		if (PlayerHandler.getPlayerCount() &gt;= Config.MAX_PLAYERS) {
			returnCode = 7;
		}
		if (Server.UpdateServer) {
			returnCode = 14;
		}
		if (returnCode == 2) {
			int load = PlayerSave.loadGame(cl, cl.playerName, cl.playerPass);
			if (load == 0)
				cl.addStarter = true;
			if (load == 3) {
				returnCode = 3;
				cl.saveFile = false;
			} else {
				for (int i = 0; i &lt; cl.playerEquipment.length; i++) {
					if (cl.playerEquipment[i] == 0) {
						cl.playerEquipment[i] = -1;
						cl.playerEquipmentN[i] = 0;
					}
				}
				if (!Server.playerHandler.newPlayerClient(cl)) {
					returnCode = 7;
					cl.saveFile = false;
				} else {
					cl.saveFile = true;
				}
			}
		}
		if (returnCode == 2) {
			cl.saveCharacter = true;
			cl.packetType = -1;
			cl.packetSize = 0;
			final PacketBuilder bldr = new PacketBuilder();
			bldr.put((byte) 2);
			if (cl.playerRights == 3) {
				bldr.put((byte) 2);
			} else {
				bldr.put((byte) cl.playerRights);
			}
			bldr.put((byte) 0);
			channel.write(bldr.toPacket());
		} else {
			System.out.println(&quot;returncode:&quot; + returnCode);
			sendReturnCode(channel, returnCode);
			return null;
		}
		synchronized (PlayerHandler.lock) {
			cl.initialize();
			cl.initialized = true;
		}
		return cl;
	}

	public static void sendReturnCode(final Channel channel, final int code) {
		channel.write(new PacketBuilder().put((byte) code).toPacket())
				.addListener(new ChannelFutureListener() {
					@Override
					public void operationComplete(final ChannelFuture arg0)
							throws Exception {
						arg0.getChannel().close();
					}
				});
	}

}
[/code]</description>
    
    <lastBuildDate>Mon, 18 Aug 2014 23:17:58 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/returncode-5/546063.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Returncode:5</title>
        <dc:creator><![CDATA[@Camballer Camballer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/camballer">@Camballer</a> wrote:</p>
          <blockquote>
              <p>So I’m running a basic PI, I’ve put a lot of work into it, but when I’m on the server, along with 6 or 7 of my friends, it can run for a while but every once in a while we’ll get a returncode:5 spammed in the server cmd. I’m not sure as to why it does this, but when it does, it disconnects everyone, and you can’t log back in sometimes, saying your account is already logged in. I have a feeling it’s to do with something in my Rs2loginprotocol and playerhandler classes, so I’ll post them in case. Returncode = 5 is checking for double logs I’m pretty sure, but no one is double logging, so I don’t see why it would do that.</p>
<p>[code]package server.model.players;</p>
<p>import java.net.InetSocketAddress;</p>
<p>import server.Config;<br>
import server.Server;<br>
import server.model.npcs.NPCHandler;<br>
import server.util.Stream;</p>
<p>public class PlayerHandler {</p>
<pre><code>public static Object lock = new Object();
public static Player players[] = new Player[Config.MAX_PLAYERS];
public static String messageToAll = "";

public static boolean updateAnnounced;
public static boolean updateRunning;
public static int updateSeconds;
public static long updateStartTime;
private boolean kickAllPlayers = false;

public static PlayerSave save;

static {
	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++)
		players[i] = null;
}

public static Player getPlayer(String name) {
	for (int d = 0; d &lt; Config.MAX_PLAYERS; d++) {
		if (PlayerHandler.players[d] != null) {
			Player p = PlayerHandler.players[d];
			if (p.playerName.equalsIgnoreCase(name)) {
				return p;
			}
		}
	}
	return null;
}

public boolean newPlayerClient(Client client1) {
	int slot = -1;
	for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
		if ((players[i] == null) || players[i].disconnected) {
			slot = i;
			break;
		}
	}
	if (slot == -1)
		return false;
	client1.handler = this;
	client1.playerId = slot;
	players[slot] = client1;
	players[slot].isActive = true;
	players[slot].connectedFrom = ((InetSocketAddress) client1.getSession()
			.getRemoteAddress()).getAddress().getHostAddress();
	// if (Config.SERVER_DEBUG)
	// Misc.println("Player Slot " + slot + " slot 0 " + players[0] +
	// " Player Hit " + players[slot]);
	return true;
}

public void destruct() {
	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if (players[i] == null)
			continue;
		players[i].destruct();
		players[i] = null;
	}
}

public static int getPlayerCount() {
	int count = 0;
	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if (players[i] != null) {
			count++;
		}
	}
	return count;
}

public static boolean isPlayerOn(String playerName) {
	// synchronized (PlayerHandler.players) {
	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if (players[i] != null) {
			if (players[i].playerName.equalsIgnoreCase(playerName)) {
				return true;
			}
		}
	}
	return false;
	// }
}

public void process() {
	synchronized (lock) {
		if (kickAllPlayers) {
			for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] != null) {
					players[i].disconnected = true;
				}
			}
		}
		/*
		 * for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) { if (players[i] ==
		 * null || !players[i].isActive) continue; if
		 * (!players[i].initialized) { players[i].initialize();
		 * players[i].initialized = true; } }
		 */
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || !players[i].isActive
					|| !players[i].initialized)
				continue;
			try {
				if (players[i].disconnected
						&amp;&amp; (System.currentTimeMillis()
								- players[i].logoutDelay &gt; 10000
								|| players[i].properLogout || kickAllPlayers)) {
					if (players[i].inTrade) {
						Client o = (Client) PlayerHandler.players[players[i].tradeWith];
						if (o != null) {
							o.getTradeAndDuel().declineTrade();
						}
					}
					if (players[i].duelStatus == 5) {
						Client o = (Client) PlayerHandler.players[players[i].duelingWith];
						if (o != null) {
							o.getTradeAndDuel().duelVictory();
						}
					} else if (players[i].duelStatus &lt;= 4
							&amp;&amp; players[i].duelStatus &gt;= 1) {
						Client o = (Client) PlayerHandler.players[players[i].duelingWith];
						if (o != null) {
							o.getTradeAndDuel().declineDuel();
						}
					}
					Client o = (Client) PlayerHandler.players[i];
					if (PlayerSave.saveGame(o)) {
						System.out.println("Game saved for player "
								+ players[i].playerName);
					} else {
						System.out.println("Could not save for "
								+ players[i].playerName);
					}
					removePlayer(players[i]);
					players[i] = null;
					continue;
				}
				players[i].preProcessing();
				players[i].processQueuedPackets();
				players[i].process();
				players[i].postProcessing();
				players[i].getNextPlayerMovement();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || !players[i].isActive
					|| !players[i].initialized)
				continue;
			try {
				players[i].update();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || !players[i].isActive
					|| !players[i].initialized)
				continue;
			try {
				players[i].clearUpdateFlags();
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		if (updateRunning &amp;&amp; !updateAnnounced) {
			updateAnnounced = true;
			Server.UpdateServer = true;
		}
		if (updateRunning
				&amp;&amp; (System.currentTimeMillis() - updateStartTime &gt; (updateSeconds * 1000))) {
			kickAllPlayers = true;
		}
	}
}

public void updateNPC(Player plr, Stream str) {
	// synchronized(plr) {
	updateBlock.currentOffset = 0;

	str.createFrameVarSizeWord(65);
	str.initBitAccess();

	str.writeBits(8, plr.npcListSize);
	int size = plr.npcListSize;
	plr.npcListSize = 0;
	for (int i = 0; i &lt; size; i++) {
		if (plr.RebuildNPCList == false
				&amp;&amp; plr.withinDistance(plr.npcList[i]) == true) {
			plr.npcList[i].updateNPCMovement(str);
			plr.npcList[i].appendNPCUpdateBlock(updateBlock);
			plr.npcList[plr.npcListSize++] = plr.npcList[i];
		} else {
			int id = plr.npcList[i].npcId;
			plr.npcInListBitmap[id &gt;&gt; 3] &amp;= ~(1 &lt;&lt; (id &amp; 7));
			str.writeBits(1, 1);
			str.writeBits(2, 3);
		}
	}

	for (int i = 0; i &lt; NPCHandler.maxNPCs; i++) {
		if (NPCHandler.npcs[i] != null) {
			int id = NPCHandler.npcs[i].npcId;
			if (plr.RebuildNPCList == false
					&amp;&amp; (plr.npcInListBitmap[id &gt;&gt; 3] &amp; (1 &lt;&lt; (id &amp; 7))) != 0) {

			} else if (plr.withinDistance(NPCHandler.npcs[i]) == false) {

			} else {
				plr.addNewNPC(NPCHandler.npcs[i], str, updateBlock);
			}
		}
	}

	plr.RebuildNPCList = false;

	if (updateBlock.currentOffset &gt; 0) {
		str.writeBits(14, 16383);
		str.finishBitAccess();
		str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
	} else {
		str.finishBitAccess();
	}
	str.endFrameVarSizeWord();
	// }
}

private Stream updateBlock = new Stream(new byte[Config.BUFFER_SIZE]);

public void updatePlayer(Player plr, Stream str) {
	// synchronized(plr) {
	updateBlock.currentOffset = 0;
	if (updateRunning &amp;&amp; !updateAnnounced) {
		str.createFrame(114);
		str.writeWordBigEndian(updateSeconds * 50 / 30);
	}
	plr.updateThisPlayerMovement(str);
	boolean saveChatTextUpdate = plr.isChatTextUpdateRequired();
	plr.setChatTextUpdateRequired(false);
	plr.appendPlayerUpdateBlock(updateBlock);
	plr.setChatTextUpdateRequired(saveChatTextUpdate);
	str.writeBits(8, plr.playerListSize);
	int size = plr.playerListSize;
	if (size &gt;= 79)
		size = 79;
	plr.playerListSize = 0;
	for (int i = 0; i &lt; size; i++) {
		if (!plr.didTeleport &amp;&amp; !plr.playerList[i].didTeleport
				&amp;&amp; plr.withinDistance(plr.playerList[i])) {
			plr.playerList[i].updatePlayerMovement(str);
			plr.playerList[i].appendPlayerUpdateBlock(updateBlock);
			plr.playerList[plr.playerListSize++] = plr.playerList[i];
		} else {
			int id = plr.playerList[i].playerId;
			plr.playerInListBitmap[id &gt;&gt; 3] &amp;= ~(1 &lt;&lt; (id &amp; 7));
			str.writeBits(1, 1);
			str.writeBits(2, 3);
		}
	}

	for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if (players[i] == null || !players[i].isActive || players[i] == plr)
			continue;
		int id = players[i].playerId;
		if ((plr.playerInListBitmap[id &gt;&gt; 3] &amp; (1 &lt;&lt; (id &amp; 7))) != 0)
			continue;
		if (!plr.withinDistance(players[i]))
			continue;
		plr.addNewPlayer(players[i], str, updateBlock);
	}

	if (updateBlock.currentOffset &gt; 0) {
		str.writeBits(11, 2047);
		str.finishBitAccess();
		str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
	} else
		str.finishBitAccess();

	str.endFrameVarSizeWord();
	// }
}

private void removePlayer(Player plr) {
	if (plr.privateChat != 2) {
		for (int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || players[i].isActive == false)
				continue;
			Client o = (Client) PlayerHandler.players[i];
			if (o != null) {
				o.getPA().updatePM(plr.playerId, 0);
			}
		}
	}
	plr.destruct();
}
</code></pre>
<p>}<br>
[/code]</p>
<p>[code]package server.net.login;</p>
<p>import java.net.InetSocketAddress;<br>
import java.security.SecureRandom;</p>
<p>import org.jboss.netty.buffer.ChannelBuffer;<br>
import org.jboss.netty.channel.Channel;<br>
import org.jboss.netty.channel.ChannelFuture;<br>
import org.jboss.netty.channel.ChannelFutureListener;<br>
import org.jboss.netty.channel.ChannelHandlerContext;<br>
import org.jboss.netty.handler.codec.frame.FrameDecoder;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PlayerHandler;<br>
import server.model.players.PlayerSave;<br>
import server.net.PacketBuilder;<br>
import server.util.ISAACCipher;<br>
import server.util.Misc;</p>
<p>public class RS2LoginProtocol extends FrameDecoder {</p>
<pre><code>private static final int CONNECTED = 0;
private static final int LOGGING_IN = 1;
private int state = CONNECTED;

@Override
protected Object decode(ChannelHandlerContext ctx, Channel channel,
		ChannelBuffer buffer) throws Exception {
	if (!channel.isConnected()) {
		return null;
	}
	switch (state) {
	case CONNECTED:
		if (buffer.readableBytes() &lt; 2)
			return null;
		int request = buffer.readUnsignedByte();
		if (request != 14) {
			System.out.println("Invalid login request: " + request);
			channel.close();
			return null;
		}
		buffer.readUnsignedByte();
		channel.write(new PacketBuilder().putLong(0).put((byte) 0)
				.putLong(new SecureRandom().nextLong()).toPacket());
		state = LOGGING_IN;
		return null;
	case LOGGING_IN:

		if (buffer.readableBytes() &lt; 2) {
			return null;
		}
		int loginType = buffer.readByte();
		if (loginType != 16 &amp;&amp; loginType != 18) {
			System.out.println("Invalid login type: " + loginType);
		}
		int blockLength = buffer.readByte() &amp; 0xff;
		if (buffer.readableBytes() &lt; blockLength) {
			return null;
		}

		buffer.readByte();

		int clientVersion = buffer.readShort();

		buffer.readByte();

		for (int i = 0; i &lt; 9; i++)
			buffer.readInt();

		buffer.readByte();

		int rsaOpcode = buffer.readByte();
		if (rsaOpcode != 10) {
			System.out.println("Unable to decode RSA block properly!");
			channel.close();
			return null;
		}

		final long clientHalf = buffer.readLong();
		final long serverHalf = buffer.readLong();
		final int[] isaacSeed = { (int) (clientHalf &gt;&gt; 32),
				(int) clientHalf, (int) (serverHalf &gt;&gt; 32),
				(int) serverHalf };
		final ISAACCipher inCipher = new ISAACCipher(isaacSeed);
		for (int i = 0; i &lt; isaacSeed.length; i++)
			isaacSeed[i] += 50;
		final ISAACCipher outCipher = new ISAACCipher(isaacSeed);
		final int version = buffer.readInt();
		final String name = Misc
				.formatPlayerName(Misc.getRS2String(buffer));
		final String pass = Misc.getRS2String(buffer);
		channel.getPipeline().replace("decoder", "decoder",
				new RS2Decoder(inCipher));
		return login(channel, inCipher, outCipher, version, name, pass);
	}
	return null;
}

private static Client login(Channel channel, ISAACCipher inCipher,
		ISAACCipher outCipher, int version, String name, String pass) {
	int returnCode = 2;
	if (Connection.isIpBanned(((InetSocketAddress) channel
			.getRemoteAddress()).getAddress().getHostAddress().toString())) {
		returnCode = 4;
	}
	if (!name.matches("[A-Za-z0-9 ]+")) {
		returnCode = 4;
	}
	if (name.length() &gt; 12) {
		returnCode = 8;
	}
	Client cl = new Client(channel, -1);
	cl.playerName = name;
	cl.playerName2 = cl.playerName;
	cl.playerPass = pass;
	cl.outStream.packetEncryption = outCipher;
	cl.saveCharacter = false;
	cl.isActive = true;

	if (Connection.isNamedBanned(cl.playerName)) {
		returnCode = 4;
	}
	if (PlayerHandler.isPlayerOn(name)) {
		returnCode = 5;
	}
	if (PlayerHandler.getPlayerCount() &gt;= Config.MAX_PLAYERS) {
		returnCode = 7;
	}
	if (Server.UpdateServer) {
		returnCode = 14;
	}
	if (returnCode == 2) {
		int load = PlayerSave.loadGame(cl, cl.playerName, cl.playerPass);
		if (load == 0)
			cl.addStarter = true;
		if (load == 3) {
			returnCode = 3;
			cl.saveFile = false;
		} else {
			for (int i = 0; i &lt; cl.playerEquipment.length; i++) {
				if (cl.playerEquipment[i] == 0) {
					cl.playerEquipment[i] = -1;
					cl.playerEquipmentN[i] = 0;
				}
			}
			if (!Server.playerHandler.newPlayerClient(cl)) {
				returnCode = 7;
				cl.saveFile = false;
			} else {
				cl.saveFile = true;
			}
		}
	}
	if (returnCode == 2) {
		cl.saveCharacter = true;
		cl.packetType = -1;
		cl.packetSize = 0;
		final PacketBuilder bldr = new PacketBuilder();
		bldr.put((byte) 2);
		if (cl.playerRights == 3) {
			bldr.put((byte) 2);
		} else {
			bldr.put((byte) cl.playerRights);
		}
		bldr.put((byte) 0);
		channel.write(bldr.toPacket());
	} else {
		System.out.println("returncode:" + returnCode);
		sendReturnCode(channel, returnCode);
		return null;
	}
	synchronized (PlayerHandler.lock) {
		cl.initialize();
		cl.initialized = true;
	}
	return cl;
}

public static void sendReturnCode(final Channel channel, final int code) {
	channel.write(new PacketBuilder().put((byte) code).toPacket())
			.addListener(new ChannelFutureListener() {
				@Override
				public void operationComplete(final ChannelFuture arg0)
						throws Exception {
					arg0.getChannel().close();
				}
			});
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/returncode-5/546063/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/returncode-5/546063/1</link>
        <pubDate>Mon, 18 Aug 2014 23:17:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546063-1</guid>
        <source url="https://forum.moparisthebest.com/t/returncode-5/546063.rss">Returncode:5</source>
      </item>
  </channel>
</rss>
