<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Networking error flushing</title>
    <link>https://forum.moparisthebest.com/t/networking-error-flushing/544914</link>
    <description>Why can&#39;t I write anything to the update block? When I try to flush the out buffer after writing data to the update block, I get an error which says &quot;Error flushing: Unable to write data to the transport connection: An established connection was aborted by the software in your host machine.&quot;

PlayerUpdater.cs
[CODE]
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using Smith317.Communications;
using Smith317.Communications.Codec.OutPackets;
using Smith317.Model.Container.ContainerTypes;
using Smith317.Util;

namespace Smith317.Model.Update
{
    class PlayerUpdater
    {
        private PlayerEntity _player;

        public PlayerUpdater(PlayerEntity player)
        {
            _player = player;
        }

        public void AppendAnimation(RSBuffer buffer, PlayerEntity target)
        {
            buffer.WriteWordBigEndian((target.Animation.Id == -1) ? 65535 : target.Animation.Id);
            buffer.WriteWordBigEndian(target.Animation.Wait);
        }

        	protected void AppendAppearance(RSBuffer buffer, PlayerEntity target) {
            RSBuffer properties = new RSBuffer(new byte[100]);
            Appearance appearance = target.Appearance;
            Equipment equipment = target.Equipment;
		properties.CurrentOffset = 0;

        properties.WriteByte(0);
        properties.WriteByte(0);

        if (equipment.Item[Equipment.HelmetSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.HelmetSlot].Id);
        }
        else
        {
            properties.WriteByte(0);
        }

        if (equipment.Item[Equipment.CapeSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.CapeSlot].Id);
        }
        else
        {
            properties.WriteByte(0);
        }

        if (equipment.Item[Equipment.AmuletSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.AmuletSlot].Id);
        }
        else
        {
            properties.WriteByte(0);
        }

        if (equipment.Item[Equipment.WeaponSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.WeaponSlot].Id);
        }
        else
        {
            properties.WriteByte(0);
        }

        if (equipment.Item[Equipment.ChestSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.ChestSlot].Id);
        }
        else
        {
            properties.WriteWord(0x100 + appearance.Look[Appearance.Chest]);
        }

        if (equipment.Item[Equipment.ShieldSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.ShieldSlot].Id);
        }
        else
        {
            properties.WriteByte(0);
        }

        properties.WriteWord(0x100 + appearance.Look[Appearance.Arms]);

        if (equipment.Item[Equipment.LegSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.LegSlot].Id);
        }
        else
        {
            properties.WriteWord(0x100 + appearance.Look[Appearance.Legs]);
        }


        properties.WriteWord(0x100 + appearance.Look[Appearance.Head]); // head

        if (equipment.Item[Equipment.GloveSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.GloveSlot].Id);
        }
        else
        {
            properties.WriteWord(0x100 + appearance.Look[Appearance.Hands]);
        }

        if (equipment.Item[Equipment.FeetSlot].Id &gt; 1)
        {
            properties
                    .WriteWord(0x200 + equipment.Item[Equipment.FeetSlot].Id);
        }
        else
        {
            properties.WriteWord(0x100 + appearance.Look[Appearance.Feet]);
        }

        if (appearance.Look[Appearance.Beard] != -1 &amp;&amp; !appearance.Gender.Equals(Gender.Female))
        {
            properties.WriteWord(0x100 + appearance.Look[Appearance.Beard]); // Beard
        }
        else
        {
            properties.WriteByte(0);
        }

		properties.WriteByte(appearance.Look[Appearance.HairColour]); // hair color
		properties.WriteByte(appearance.Look[Appearance.TorsoColour]); // torso color.
		properties.WriteByte(appearance.Look[Appearance.LegColour]); // leg color
		properties.WriteByte(appearance.Look[Appearance.FeetColour]); // feet color
		properties.WriteByte(appearance.Look[Appearance.SkinColour]); // skin color (0-6)

		// player animation indices
		properties.WriteWord(0x328); // standAnimIndex
		properties.WriteWord(0x337); // standTurnAnimIndex
		properties.WriteWord(0x333); // walkAnimIndex
		properties.WriteWord(0x334); // turn180AnimIndex
		properties.WriteWord(0x335); // turn90CWAnimIndex
		properties.WriteWord(0x336); // turn90CCWAnimIndex
		properties.WriteWord(0x338); // runAnimIndex

        properties.WriteQWord(NumberUtil.PlayerNameToInt64(_player.Name));

		properties.WriteByte(3); // combat level
		properties.WriteWord(0); // incase != 0, Writes skill-%d

		buffer.WriteByteC(properties.CurrentOffset); // size of player appearance
													// block
		buffer.WriteBytes(properties.Buffer, properties.CurrentOffset, 0);
	}

        public void Update()
        {
            //new SendMapPacket().Execute(_player, null);
            UpdatePlayer();
            _player.FlushBuffer();
        }

        public void UpdatePlayer()
        {
            RSBuffer update = new RSBuffer(new byte[10000]);
            update.CurrentOffset = 0;
            _player.OutBuffer.CreateFrame(73);
            _player.OutBuffer.WriteWordA(_player.Position.GetMapRegionX()+6);
            _player.OutBuffer.WriteWord(_player.Position.GetMapRegionY() + 6);
            _player.OutBuffer.CreateFrameVarSizeWord(81);
            _player.OutBuffer.InitBitAccess();
            _player.OutBuffer.WriteBits(1, 1);
            _player.OutBuffer.WriteBits(2, 3);
            _player.OutBuffer.WriteBits(2, 0);
            _player.OutBuffer.WriteBits(1, 1);
            _player.OutBuffer.WriteBits(1, 0);
            _player.OutBuffer.WriteBits(7, _player.Position.X - 8 * _player.Position.GetMapRegionX());
            _player.OutBuffer.WriteBits(7, _player.Position.Y - 8 * _player.Position.GetMapRegionY());
            AppendUpdateBlock(_player, update);
            _player.OutBuffer.WriteBits(8, 0);
            if (update.CurrentOffset &gt; 0)
            {
                _player.OutBuffer.WriteBits(11, 2047);
                _player.OutBuffer.FinishBitAccess();
                _player.OutBuffer.WriteBytes(update.Buffer, update.CurrentOffset, 0);
            }
            else
                _player.OutBuffer.FinishBitAccess();
            _player.OutBuffer.EndFrameVarSize();
        }

        public void AppendUpdateBlock(PlayerEntity target, RSBuffer bufferUpdate)
        {
            int update = 0;
            if (target.UpdateFlags.GetBit(UpdateFlags.Animation))
            {
                update |= 8;
            }
            if (target.UpdateFlags.GetBit(UpdateFlags.Appearance))
            {
                update |= 0x10;
            }
            if (update &gt;= 0x100)
            {
                update |= 0x40;
                bufferUpdate.WriteByte(update &amp; 0xff);
                bufferUpdate.WriteByte(update &gt;&gt; 8);
            }
            else
                //bufferUpdate.WriteByte(update);
                //new RSBuffer(new byte[200]).WriteByte(update);
            if (target.UpdateFlags.GetBit(UpdateFlags.Animation))
            {
                //AppendAnimation(bufferUpdate, target);
            }
            if(target.UpdateFlags.GetBit(UpdateFlags.Appearance))
            {
                //AppendAppearance(bufferUpdate, target);
            }
            //ClearBlock(bufferUpdate);
        }

        public void ClearBlock()
        {
            _player.UpdateFlags.ClearAll();
        }
    }
}
[/CODE]

FlushBuffer()
[CODE]
        public void Flush()
        {
            try
            {
                _netOutStream.Write(OutBuffer.Buffer, 0, OutBuffer.CurrentOffset);
                OutBuffer.CurrentOffset = 0;
            }
            catch (Exception e)
            {
                Console.WriteLine(&quot;Error flushing: &quot; + e.Message);
            }
        }
[/CODE]

Could someone explain to me why I cannot write data to the updateblock and what needs to be changed? Thanks</description>
    
    <lastBuildDate>Sun, 13 Jul 2014 15:46:23 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/networking-error-flushing/544914.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Networking error flushing</title>
        <dc:creator><![CDATA[@legionx legionx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/legionx">@legionx</a> wrote:</p>
          <blockquote>
              <p>Why can’t I write anything to the update block? When I try to flush the out buffer after writing data to the update block, I get an error which says “Error flushing: Unable to write data to the transport connection: An established connection was aborted by the software in your host machine.”</p>
<p>PlayerUpdater.cs</p>
<p>[CODE]<br>
using System;<br>
using System.Collections.Generic;<br>
using System.Linq;<br>
using System.Text;<br>
using Smith317.Communications;<br>
using Smith317.Communications.Codec.OutPackets;<br>
using Smith317.Model.Container.ContainerTypes;<br>
using Smith317.Util;</p>
<p>namespace Smith317.Model.Update<br>
{<br>
class PlayerUpdater<br>
{<br>
private PlayerEntity _player;</p>
<pre><code>    public PlayerUpdater(PlayerEntity player)
    {
        _player = player;
    }

    public void AppendAnimation(RSBuffer buffer, PlayerEntity target)
    {
        buffer.WriteWordBigEndian((target.Animation.Id == -1) ? 65535 : target.Animation.Id);
        buffer.WriteWordBigEndian(target.Animation.Wait);
    }

    	protected void AppendAppearance(RSBuffer buffer, PlayerEntity target) {
        RSBuffer properties = new RSBuffer(new byte[100]);
        Appearance appearance = target.Appearance;
        Equipment equipment = target.Equipment;
	properties.CurrentOffset = 0;

    properties.WriteByte(0);
    properties.WriteByte(0);

    if (equipment.Item[Equipment.HelmetSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.HelmetSlot].Id);
    }
    else
    {
        properties.WriteByte(0);
    }

    if (equipment.Item[Equipment.CapeSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.CapeSlot].Id);
    }
    else
    {
        properties.WriteByte(0);
    }

    if (equipment.Item[Equipment.AmuletSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.AmuletSlot].Id);
    }
    else
    {
        properties.WriteByte(0);
    }

    if (equipment.Item[Equipment.WeaponSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.WeaponSlot].Id);
    }
    else
    {
        properties.WriteByte(0);
    }

    if (equipment.Item[Equipment.ChestSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.ChestSlot].Id);
    }
    else
    {
        properties.WriteWord(0x100 + appearance.Look[Appearance.Chest]);
    }

    if (equipment.Item[Equipment.ShieldSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.ShieldSlot].Id);
    }
    else
    {
        properties.WriteByte(0);
    }

    properties.WriteWord(0x100 + appearance.Look[Appearance.Arms]);

    if (equipment.Item[Equipment.LegSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.LegSlot].Id);
    }
    else
    {
        properties.WriteWord(0x100 + appearance.Look[Appearance.Legs]);
    }


    properties.WriteWord(0x100 + appearance.Look[Appearance.Head]); // head

    if (equipment.Item[Equipment.GloveSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.GloveSlot].Id);
    }
    else
    {
        properties.WriteWord(0x100 + appearance.Look[Appearance.Hands]);
    }

    if (equipment.Item[Equipment.FeetSlot].Id &gt; 1)
    {
        properties
                .WriteWord(0x200 + equipment.Item[Equipment.FeetSlot].Id);
    }
    else
    {
        properties.WriteWord(0x100 + appearance.Look[Appearance.Feet]);
    }

    if (appearance.Look[Appearance.Beard] != -1 &amp;&amp; !appearance.Gender.Equals(Gender.Female))
    {
        properties.WriteWord(0x100 + appearance.Look[Appearance.Beard]); // Beard
    }
    else
    {
        properties.WriteByte(0);
    }

	properties.WriteByte(appearance.Look[Appearance.HairColour]); // hair color
	properties.WriteByte(appearance.Look[Appearance.TorsoColour]); // torso color.
	properties.WriteByte(appearance.Look[Appearance.LegColour]); // leg color
	properties.WriteByte(appearance.Look[Appearance.FeetColour]); // feet color
	properties.WriteByte(appearance.Look[Appearance.SkinColour]); // skin color (0-6)

	// player animation indices
	properties.WriteWord(0x328); // standAnimIndex
	properties.WriteWord(0x337); // standTurnAnimIndex
	properties.WriteWord(0x333); // walkAnimIndex
	properties.WriteWord(0x334); // turn180AnimIndex
	properties.WriteWord(0x335); // turn90CWAnimIndex
	properties.WriteWord(0x336); // turn90CCWAnimIndex
	properties.WriteWord(0x338); // runAnimIndex

    properties.WriteQWord(NumberUtil.PlayerNameToInt64(_player.Name));

	properties.WriteByte(3); // combat level
	properties.WriteWord(0); // incase != 0, Writes skill-%d

	buffer.WriteByteC(properties.CurrentOffset); // size of player appearance
												// block
	buffer.WriteBytes(properties.Buffer, properties.CurrentOffset, 0);
}

    public void Update()
    {
        //new SendMapPacket().Execute(_player, null);
        UpdatePlayer();
        _player.FlushBuffer();
    }

    public void UpdatePlayer()
    {
        RSBuffer update = new RSBuffer(new byte[10000]);
        update.CurrentOffset = 0;
        _player.OutBuffer.CreateFrame(73);
        _player.OutBuffer.WriteWordA(_player.Position.GetMapRegionX()+6);
        _player.OutBuffer.WriteWord(_player.Position.GetMapRegionY() + 6);
        _player.OutBuffer.CreateFrameVarSizeWord(81);
        _player.OutBuffer.InitBitAccess();
        _player.OutBuffer.WriteBits(1, 1);
        _player.OutBuffer.WriteBits(2, 3);
        _player.OutBuffer.WriteBits(2, 0);
        _player.OutBuffer.WriteBits(1, 1);
        _player.OutBuffer.WriteBits(1, 0);
        _player.OutBuffer.WriteBits(7, _player.Position.X - 8 * _player.Position.GetMapRegionX());
        _player.OutBuffer.WriteBits(7, _player.Position.Y - 8 * _player.Position.GetMapRegionY());
        AppendUpdateBlock(_player, update);
        _player.OutBuffer.WriteBits(8, 0);
        if (update.CurrentOffset &gt; 0)
        {
            _player.OutBuffer.WriteBits(11, 2047);
            _player.OutBuffer.FinishBitAccess();
            _player.OutBuffer.WriteBytes(update.Buffer, update.CurrentOffset, 0);
        }
        else
            _player.OutBuffer.FinishBitAccess();
        _player.OutBuffer.EndFrameVarSize();
    }

    public void AppendUpdateBlock(PlayerEntity target, RSBuffer bufferUpdate)
    {
        int update = 0;
        if (target.UpdateFlags.GetBit(UpdateFlags.Animation))
        {
            update |= 8;
        }
        if (target.UpdateFlags.GetBit(UpdateFlags.Appearance))
        {
            update |= 0x10;
        }
        if (update &gt;= 0x100)
        {
            update |= 0x40;
            bufferUpdate.WriteByte(update &amp; 0xff);
            bufferUpdate.WriteByte(update &gt;&gt; 8);
        }
        else
            //bufferUpdate.WriteByte(update);
            //new RSBuffer(new byte[200]).WriteByte(update);
        if (target.UpdateFlags.GetBit(UpdateFlags.Animation))
        {
            //AppendAnimation(bufferUpdate, target);
        }
        if(target.UpdateFlags.GetBit(UpdateFlags.Appearance))
        {
            //AppendAppearance(bufferUpdate, target);
        }
        //ClearBlock(bufferUpdate);
    }

    public void ClearBlock()
    {
        _player.UpdateFlags.ClearAll();
    }
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>FlushBuffer()</p>
<p><code>
        public void Flush()
        {
            try
            {
                _netOutStream.Write(OutBuffer.Buffer, 0, OutBuffer.CurrentOffset);
                OutBuffer.CurrentOffset = 0;
            }
            catch (Exception e)
            {
                Console.WriteLine("Error flushing: " + e.Message);
            }
        }
</code></p>
<p>Could someone explain to me why I cannot write data to the updateblock and what needs to be changed? Thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/networking-error-flushing/544914/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/networking-error-flushing/544914/1</link>
        <pubDate>Sun, 13 Jul 2014 15:46:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544914-1</guid>
        <source url="https://forum.moparisthebest.com/t/networking-error-flushing/544914.rss">Networking error flushing</source>
      </item>
  </channel>
</rss>
