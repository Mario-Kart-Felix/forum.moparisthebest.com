<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>508 drop help! Please!</title>
    <link>https://forum.moparisthebest.com/t/508-drop-help-please/322414</link>
    <description>Hi, I keep asking the same thing and one person keeps awnsering me, but how do I make it to where poeple cant see other people drops???? I am told it is in world then item, but he said to search for something, and I cant find it!?!?!?!? Please help, this is what I have in item 





package DavidScape.world.items;


import java.io.*;
import DavidScape.Engine;
import DavidScape.players.Player;
import DavidScape.io.Frames;
import DavidScape.util.Misc;
import DavidScape.players.items.*;


public class Items {
    public int maxItemAmount = 2147000000;
    public int maxBankSize = 1000;
    public int maxListedItems = 15000;
    public ItemList[] itemLists = new ItemList[maxListedItems];
    public GroundItem[] groundItems = new GroundItem[1000];
    private int untradable[] = {6570};
    private Engine engine;
    private Frames frames;
private BankUtils bu = new BankUtils();

    /**
     * Constructs a new Items class.
     * @param game The engine to get data from.
     */
    public Items(Engine game) {
        engine = game;
        frames = engine.frames;

        loadItemList();
        loadItemLists();
    }

    /**
     * Checks if an item is tradable or not.
     * @param The item to check.
     * @return Returns if the itemId is tradable.
     */
    public boolean isUntradable(int item) {
        for (int i = 0; i &lt; untradable.length; i++) {
            if (untradable[i] == item) {
                return true;
            }
        }
        return false;
    }

    /**
     * This method is called every 600 milliseconds.
     */
    public void process() {
        for (GroundItem g : groundItems) {
            if (g == null) {
                continue;
            } else if (g.itemId &gt; -1 &amp;&amp; g.itemAmt &gt; 0) {
                g.itemGroundTime--;
                if (g.itemGroundTime == 60) {
                    if (!isUntradable(g.itemId) &amp;&amp; !g.itemDroppedBy.equals(&quot;&quot;)) {
                        frames.removeGroundItem(
                                engine.players[engine.getIdFromName(g.itemDroppedBy)],
                                g.itemId, g.itemX, g.itemY, g.itemHeight);
                        createGlobalItem(g.itemId, g.itemAmt, g.itemX, g.itemY,
                                g.itemHeight);
                    }
                } else if (g.itemGroundTime &lt;= 0) {
                    if (isUntradable(g.itemId)) {
                        frames.removeGroundItem(
                                engine.players[engine.getIdFromName(g.itemDroppedBy)],
                                g.itemId, g.itemX, g.itemY, g.itemHeight);
                    } else {
                        removeGlobalItem(g.itemId, g.itemX, g.itemY,
                                g.itemHeight);
                    }
                    discardItem(g);
                }
            } else if (g.itemId &lt; 0) {
                discardItem(g);
            } else if (g.itemAmt &lt;= 0) {
                discardItem(g);
            }
        }
    }

    /**
     * Remove a ground item.
     * @param g The ground item to discard.
     */
    public void discardItem(GroundItem g) {
        groundItems[g.index] = null;
    }

    /**
     * Removes an item for everyone within distance.
     */
    public void removeGlobalItem(int id, int x, int y, int height) {
        if (id &lt; 0 || id &gt;= maxListedItems) {
            return;
        }
        for (Player p : engine.players) {
            if (p == null) {
                continue;
            }
            frames.removeGroundItem(p, id, x, y, height);
        }
    }

    /**
     * Creates an item on the ground for everyone within distance.
     */
    public void createGlobalItem(int id, int amt, int x, int y, int height) {
        if (id &lt; 0 || amt &lt; 0 || id &gt;= maxListedItems) {
            return;
        }
        for (Player p : engine.players) {
            if (p == null) {
                continue;
            }
            frames.createGroundItem(p, id, amt, x, y, height);
        }
    }

    /**
     * Creates a new ground item.
     */
    public void createGroundItem(int id, int amt, int x, int y, int height, String owner) {
        if (id &lt; 0 || amt &lt; 0 || id &gt;= maxListedItems) {
            return;
        }
 if(id &gt;= 9747 &amp;&amp; id &lt;= 9814 || id &gt;= 9848 &amp;&amp; id &lt;= 9950 || id &gt;= 12169 &amp;&amp; id &lt;= 12171)//Skill Capes don&#39;t show up on the ground so no one can loot.
{ 
    return;
        }

        /*
         * Set the owner to &quot;&quot; for an item everyone can see.
         */
        int index = -1;

        for (int i = 0; i &lt; groundItems.length; i++) {
            if (groundItems[i] == null) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            Misc.println(&quot;Max number of items spawned.&quot;);
            return;
        }
        groundItems[index] = new GroundItem(index, id, amt, x, y, height, owner);
        if (groundItems[index].itemDroppedBy.equals(&quot;&quot;)) {
            createGlobalItem(id, amt, x, y, height);
        } else {
            frames.createGroundItem(engine.players[engine.getIdFromName(owner)],
                    id, amt, x, y, height);
        }
    }

    /**
     * Checks if an item exists at the params.
     * @param itemId The item id to look for.
     * @param itemX The x coordinate to look for the item.
     * @param itemY The y coordinate to look for the item.
     * @param height The height level to look for the item.
     * @return Returns the ground item index, or -1 if the item isnt found.
     */
    public int itemExists(int itemId, int itemX, int itemY, int height) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
            return -1;
        }
        for (GroundItem g : groundItems) {
            if (g == null) {
                continue;
            }
            if (g.itemId == itemId &amp;&amp; g.itemX == itemX &amp;&amp; g.itemY == itemY
                    &amp;&amp; g.itemHeight == height) {
                return g.index;
            }
        }
        return -1;
    }

    /**
     * Finds an item at the params and removes it.
     * @param itemId The item id to look for.
     * @param itemX The x coordinate of the item.
     * @param itemY The y coordinate of the item.
     * @param height The height level of the item.
     * @param Returns true if the item was successfully found and removed.
     */
    public boolean itemPickedup(int itemId, int itemX, int itemY, int height) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
            return false;
        }
        int amt = 0;

        for (GroundItem g : groundItems) {
            if (g == null) {
                continue;
            }
            if (g.itemId == itemId &amp;&amp; g.itemX == itemX &amp;&amp; g.itemY == itemY
                    &amp;&amp; g.itemHeight == height) {
                amt = g.itemAmt;
                if ((g.itemGroundTime &lt;= 60 || g.itemDroppedBy.equals(&quot;&quot;))
                        &amp;&amp; !isUntradable(g.itemId)) {
                    removeGlobalItem(g.itemId, g.itemX, g.itemY, g.itemHeight);
                } else {
                    frames.removeGroundItem(
                            engine.players[engine.getIdFromName(g.itemDroppedBy)],
                            g.itemId, g.itemX, g.itemY, g.itemHeight);
                }
                discardItem(g);
                return true;
            }
        }
        return false;
    }

    /**
     * Loads other item lists.
     */
    private void loadItemLists() {
        int itemId = -1, counter = 0;
        String name = null;

        try {
            BufferedReader in = new BufferedReader(
                    new FileReader(&quot;./data/items/stackable.dat&quot;));

            while ((name = in.readLine()) != null) {
                itemId = Integer.parseInt(name);
                if (itemId != -1) {
                    if (itemLists[itemId] != null) {
                        itemLists[itemId].itemStackable = true;
                    }
                }
            }
            in.close();
            in = null;
        } catch (Exception e) {
            Misc.println(&quot;Error loading stackable list.&quot;);
        }
        try {
            BufferedReader in = new BufferedReader(
                    new FileReader(&quot;./data/items/equipment.dat&quot;));

            while ((name = in.readLine()) != null) {
                itemId = Integer.parseInt(name.substring(0, name.indexOf(&quot;:&quot;)));
                int equipId = Integer.parseInt(
                        name.substring(name.indexOf(&quot;:&quot;) + 1));

                if (itemLists[itemId] != null) {
                    itemLists[itemId].equipId = equipId;
                }
            }
            in.close();
            in = null;
        } catch (Exception e) {
            Misc.println(&quot;Error loading equipment list.&quot;);
        }
    }

    /**
     * Returns if the itemId is stackable.
     */
public boolean notedAndStackable(int itemId) {
	String itemName = getItemName(itemId);
	String item2Name = getItemName(itemId - 1);
	if(itemName.startsWith(item2Name) &amp;&amp; itemName.endsWith(item2Name)){
	    itemLists[itemId].itemStackable = true;
	    return true;
	}

        return false;
    }
    public boolean stackable(int itemId) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems || itemLists[itemId] == null) {
            return false;
        }
if(bu.isNote(itemId)) {
        return true;
    }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].itemStackable);
        }
return false;
}

    /**
     * Returns if the itemId is noted.
     */
    public boolean noted(int itemId) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
            return false;
        }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].itemIsNote);
        }
        return false;
    }

    /**
     * Returns the name of itemId.
     */
    public String getItemName(int itemId) {
        if (itemId == -1 || itemId &gt;= maxListedItems) {
            return new String(&quot;Unarmed&quot;);
        }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].itemName);
        }
        return new String(&quot;Item &quot; + itemId);
    }

public int getIdFromName(String itemName) {
for (int i = 0; i &lt;= maxListedItems; i++) {
if (itemLists[i] == null) {
return -1;
}
if (itemLists[i].itemName.toLowerCase() == itemName.toLowerCase()) {
return i;
}
}
return -1;
}
    /**
     * Returns the equipment mask of itemId.
     */
    public int getEquipId(int itemId) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
            return 0;
        }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].equipId);
        }
        return 0;
    }

    /**
     * Returns the description of itemId.
     */
    public String getItemDescription(int itemId) {
        if (itemId == -1 || itemId &gt;= maxListedItems) {
            return new String(&quot;An item.&quot;);
        }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].itemDescription);
        }
        return new String(&quot;Item &quot; + itemId);
    }

    /**
     * Returns the value of itemId.
     */
    public int getItemValue(int itemId) {
        if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
            return 0;
        }
        if (itemLists[itemId] != null) {
            return (itemLists[itemId].lowAlch);
        }
        return 1;
    }

    /**
     * Load item data from a file.
     */
    private boolean loadItemList() {
        String line = &quot;&quot;, token = &quot;&quot;, token2 = &quot;&quot;, token2_2 = &quot;&quot;, token3[] = new String[10];
        BufferedReader list = null;

        try {
            list = new BufferedReader(new FileReader(&quot;./data/items/items.cfg&quot;));
            line = list.readLine().trim();
        } catch (Exception e) {
            Misc.println(&quot;Error loading item list.&quot;);
            return false;
        }
        while (line != null) {
            int spot = line.indexOf(&quot;=&quot;);

            if (spot &gt; -1) {
                token = line.substring(0, spot).trim();
                token2 = line.substring(spot + 1).trim();
                token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token3 = token2_2.split(&quot;\t&quot;);
                if (token.equals(&quot;item&quot;)) {
                    int[] bonuses = new int[12];

                    for (int i = 0; i &lt; 12; i++) {
                        if (token3[(6 + i)] != null) {
                            bonuses[i] = Integer.parseInt(token3[(6 + i)]);
                        } else {
                            break;
                        }
                    }
                    newItemList(Integer.parseInt(token3[0]),
                            token3[1].replaceAll(&quot;_&quot;, &quot; &quot;),
                            token3[2].replaceAll(&quot;_&quot;, &quot; &quot;),
                            Integer.parseInt(token3[4]),
                            Integer.parseInt(token3[4]),
                            Integer.parseInt(token3[6]), bonuses);
                }
            } else {
                if (line.equals(&quot;[ENDOFITEMLIST]&quot;)) {
                    try {
                        list.close();
                    } catch (Exception exception) {}
                    list = null;
                    return true;
                }
            }
            try {
                line = list.readLine().trim();
            } catch (Exception exception1) {
                try {
                    list.close();
                } catch (Exception exception) {}
                list = null;
                return true;
            }
        }
        return false;
    }

    /**
     * Sets a new item list.
     */
    private void newItemList(int ItemId, String ItemName, String ItemDescription, int ShopValue, int LowAlch, int HighAlch, int Bonuses[]) {
        if (ItemId &gt; maxListedItems) {
            Misc.println(&quot;maxListedItems to low.&quot;);
            return;
        }
        itemLists[ItemId] = new ItemList(ItemId, ItemName, ItemDescription,
                ShopValue, LowAlch, Bonuses);
    }
}


Can anyone please help me?</description>
    
    <lastBuildDate>Mon, 28 Dec 2009 14:54:54 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/508-drop-help-please/322414.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>508 drop help! Please!</title>
        <dc:creator><![CDATA[@kiddryan77 kiddryan77]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kiddryan77">@kiddryan77</a> wrote:</p>
          <blockquote>
              <p>I mean like monster drops, one person will kill it and everyone can see the drop and can loot it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-drop-help-please/322414/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-drop-help-please/322414/3</link>
        <pubDate>Mon, 28 Dec 2009 14:54:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-322414-3</guid>
        <source url="https://forum.moparisthebest.com/t/508-drop-help-please/322414.rss">508 drop help! Please!</source>
      </item>
      <item>
        <title>508 drop help! Please!</title>
        <dc:creator><![CDATA[@Rile0120 Rile0120]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rile0120">@Rile0120</a> wrote:</p>
          <blockquote>
              <p>ok, do you mean like the person monster drop or the item that the person drops? or a pvp kill and that drop.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-drop-help-please/322414/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-drop-help-please/322414/2</link>
        <pubDate>Mon, 28 Dec 2009 05:32:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-322414-2</guid>
        <source url="https://forum.moparisthebest.com/t/508-drop-help-please/322414.rss">508 drop help! Please!</source>
      </item>
      <item>
        <title>508 drop help! Please!</title>
        <dc:creator><![CDATA[@kiddryan77 kiddryan77]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kiddryan77">@kiddryan77</a> wrote:</p>
          <blockquote>
              <p>Hi, I keep asking the same thing and one person keeps awnsering me, but how do I make it to where poeple cant see other people drops??? I am told it is in world then item, but he said to search for something, and I cant find it??? Please help, this is what I have in item</p>
<p>package DavidScape.world.items;</p>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import DavidScape.Engine;<br>
import DavidScape.players.Player;<br>
import DavidScape.io.Frames;<br>
import DavidScape.util.Misc;<br>
import DavidScape.players.items.</em>;</p>
<p>public class Items {<br>
public int maxItemAmount = 2147000000;<br>
public int maxBankSize = 1000;<br>
public int maxListedItems = 15000;<br>
public ItemList[] itemLists = new ItemList[maxListedItems];<br>
public GroundItem[] groundItems = new GroundItem[1000];<br>
private int untradable[] = {6570};<br>
private Engine engine;<br>
private Frames frames;<br>
private BankUtils bu = new BankUtils();</p>
<pre><code>/**
 * Constructs a new Items class.
 * @param game The engine to get data from.
 */
public Items(Engine game) {
    engine = game;
    frames = engine.frames;

    loadItemList();
    loadItemLists();
}

/**
 * Checks if an item is tradable or not.
 * @param The item to check.
 * @return Returns if the itemId is tradable.
 */
public boolean isUntradable(int item) {
    for (int i = 0; i &lt; untradable.length; i++) {
        if (untradable[i] == item) {
            return true;
        }
    }
    return false;
}

/**
 * This method is called every 600 milliseconds.
 */
public void process() {
    for (GroundItem g : groundItems) {
        if (g == null) {
            continue;
        } else if (g.itemId &gt; -1 &amp;&amp; g.itemAmt &gt; 0) {
            g.itemGroundTime--;
            if (g.itemGroundTime == 60) {
                if (!isUntradable(g.itemId) &amp;&amp; !g.itemDroppedBy.equals("")) {
                    frames.removeGroundItem(
                            engine.players[engine.getIdFromName(g.itemDroppedBy)],
                            g.itemId, g.itemX, g.itemY, g.itemHeight);
                    createGlobalItem(g.itemId, g.itemAmt, g.itemX, g.itemY,
                            g.itemHeight);
                }
            } else if (g.itemGroundTime &lt;= 0) {
                if (isUntradable(g.itemId)) {
                    frames.removeGroundItem(
                            engine.players[engine.getIdFromName(g.itemDroppedBy)],
                            g.itemId, g.itemX, g.itemY, g.itemHeight);
                } else {
                    removeGlobalItem(g.itemId, g.itemX, g.itemY,
                            g.itemHeight);
                }
                discardItem(g);
            }
        } else if (g.itemId &lt; 0) {
            discardItem(g);
        } else if (g.itemAmt &lt;= 0) {
            discardItem(g);
        }
    }
}

/**
 * Remove a ground item.
 * @param g The ground item to discard.
 */
public void discardItem(GroundItem g) {
    groundItems[g.index] = null;
}

/**
 * Removes an item for everyone within distance.
 */
public void removeGlobalItem(int id, int x, int y, int height) {
    if (id &lt; 0 || id &gt;= maxListedItems) {
        return;
    }
    for (Player p : engine.players) {
        if (p == null) {
            continue;
        }
        frames.removeGroundItem(p, id, x, y, height);
    }
}

/**
 * Creates an item on the ground for everyone within distance.
 */
public void createGlobalItem(int id, int amt, int x, int y, int height) {
    if (id &lt; 0 || amt &lt; 0 || id &gt;= maxListedItems) {
        return;
    }
    for (Player p : engine.players) {
        if (p == null) {
            continue;
        }
        frames.createGroundItem(p, id, amt, x, y, height);
    }
}

/**
 * Creates a new ground item.
 */
public void createGroundItem(int id, int amt, int x, int y, int height, String owner) {
    if (id &lt; 0 || amt &lt; 0 || id &gt;= maxListedItems) {
        return;
    }
</code></pre>
<p>if(id &gt;= 9747 &amp;&amp; id &lt;= 9814 || id &gt;= 9848 &amp;&amp; id &lt;= 9950 || id &gt;= 12169 &amp;&amp; id &lt;= 12171)//Skill Capes don’t show up on the ground so no one can loot.<br>
{<br>
return;<br>
}</p>
<pre><code>    /*
     * Set the owner to "" for an item everyone can see.
     */
    int index = -1;

    for (int i = 0; i &lt; groundItems.length; i++) {
        if (groundItems[i] == null) {
            index = i;
            break;
        }
    }
    if (index == -1) {
        Misc.println("Max number of items spawned.");
        return;
    }
    groundItems[index] = new GroundItem(index, id, amt, x, y, height, owner);
    if (groundItems[index].itemDroppedBy.equals("")) {
        createGlobalItem(id, amt, x, y, height);
    } else {
        frames.createGroundItem(engine.players[engine.getIdFromName(owner)],
                id, amt, x, y, height);
    }
}

/**
 * Checks if an item exists at the params.
 * @param itemId The item id to look for.
 * @param itemX The x coordinate to look for the item.
 * @param itemY The y coordinate to look for the item.
 * @param height The height level to look for the item.
 * @return Returns the ground item index, or -1 if the item isnt found.
 */
public int itemExists(int itemId, int itemX, int itemY, int height) {
    if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
        return -1;
    }
    for (GroundItem g : groundItems) {
        if (g == null) {
            continue;
        }
        if (g.itemId == itemId &amp;&amp; g.itemX == itemX &amp;&amp; g.itemY == itemY
                &amp;&amp; g.itemHeight == height) {
            return g.index;
        }
    }
    return -1;
}

/**
 * Finds an item at the params and removes it.
 * @param itemId The item id to look for.
 * @param itemX The x coordinate of the item.
 * @param itemY The y coordinate of the item.
 * @param height The height level of the item.
 * @param Returns true if the item was successfully found and removed.
 */
public boolean itemPickedup(int itemId, int itemX, int itemY, int height) {
    if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
        return false;
    }
    int amt = 0;

    for (GroundItem g : groundItems) {
        if (g == null) {
            continue;
        }
        if (g.itemId == itemId &amp;&amp; g.itemX == itemX &amp;&amp; g.itemY == itemY
                &amp;&amp; g.itemHeight == height) {
            amt = g.itemAmt;
            if ((g.itemGroundTime &lt;= 60 || g.itemDroppedBy.equals(""))
                    &amp;&amp; !isUntradable(g.itemId)) {
                removeGlobalItem(g.itemId, g.itemX, g.itemY, g.itemHeight);
            } else {
                frames.removeGroundItem(
                        engine.players[engine.getIdFromName(g.itemDroppedBy)],
                        g.itemId, g.itemX, g.itemY, g.itemHeight);
            }
            discardItem(g);
            return true;
        }
    }
    return false;
}

/**
 * Loads other item lists.
 */
private void loadItemLists() {
    int itemId = -1, counter = 0;
    String name = null;

    try {
        BufferedReader in = new BufferedReader(
                new FileReader("./data/items/stackable.dat"));

        while ((name = in.readLine()) != null) {
            itemId = Integer.parseInt(name);
            if (itemId != -1) {
                if (itemLists[itemId] != null) {
                    itemLists[itemId].itemStackable = true;
                }
            }
        }
        in.close();
        in = null;
    } catch (Exception e) {
        Misc.println("Error loading stackable list.");
    }
    try {
        BufferedReader in = new BufferedReader(
                new FileReader("./data/items/equipment.dat"));

        while ((name = in.readLine()) != null) {
            itemId = Integer.parseInt(name.substring(0, name.indexOf(":")));
            int equipId = Integer.parseInt(
                    name.substring(name.indexOf(":") + 1));

            if (itemLists[itemId] != null) {
                itemLists[itemId].equipId = equipId;
            }
        }
        in.close();
        in = null;
    } catch (Exception e) {
        Misc.println("Error loading equipment list.");
    }
}

/**
 * Returns if the itemId is stackable.
 */
</code></pre>
<p>public boolean notedAndStackable(int itemId) {<br>
String itemName = getItemName(itemId);<br>
String item2Name = getItemName(itemId - 1);<br>
if(itemName.startsWith(item2Name) &amp;&amp; itemName.endsWith(item2Name)){<br>
itemLists[itemId].itemStackable = true;<br>
return true;<br>
}</p>
<pre><code>    return false;
}
public boolean stackable(int itemId) {
    if (itemId &lt; 0 || itemId &gt;= maxListedItems || itemLists[itemId] == null) {
        return false;
    }
</code></pre>
<p>if(bu.isNote(itemId)) {<br>
return true;<br>
}<br>
if (itemLists[itemId] != null) {<br>
return (itemLists[itemId].itemStackable);<br>
}<br>
return false;<br>
}</p>
<pre><code>/**
 * Returns if the itemId is noted.
 */
public boolean noted(int itemId) {
    if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
        return false;
    }
    if (itemLists[itemId] != null) {
        return (itemLists[itemId].itemIsNote);
    }
    return false;
}

/**
 * Returns the name of itemId.
 */
public String getItemName(int itemId) {
    if (itemId == -1 || itemId &gt;= maxListedItems) {
        return new String("Unarmed");
    }
    if (itemLists[itemId] != null) {
        return (itemLists[itemId].itemName);
    }
    return new String("Item " + itemId);
}
</code></pre>
<p>public int getIdFromName(String itemName) {<br>
for (int i = 0; i &lt;= maxListedItems; i++) {<br>
if (itemLists[i] == null) {<br>
return -1;<br>
}<br>
if (itemLists[i].itemName.toLowerCase() == itemName.toLowerCase()) {<br>
return i;<br>
}<br>
}<br>
return -1;<br>
}<br>
/**<br>
* Returns the equipment mask of itemId.<br>
*/<br>
public int getEquipId(int itemId) {<br>
if (itemId &lt; 0 || itemId &gt;= maxListedItems) {<br>
return 0;<br>
}<br>
if (itemLists[itemId] != null) {<br>
return (itemLists[itemId].equipId);<br>
}<br>
return 0;<br>
}</p>
<pre><code>/**
 * Returns the description of itemId.
 */
public String getItemDescription(int itemId) {
    if (itemId == -1 || itemId &gt;= maxListedItems) {
        return new String("An item.");
    }
    if (itemLists[itemId] != null) {
        return (itemLists[itemId].itemDescription);
    }
    return new String("Item " + itemId);
}

/**
 * Returns the value of itemId.
 */
public int getItemValue(int itemId) {
    if (itemId &lt; 0 || itemId &gt;= maxListedItems) {
        return 0;
    }
    if (itemLists[itemId] != null) {
        return (itemLists[itemId].lowAlch);
    }
    return 1;
}

/**
 * Load item data from a file.
 */
private boolean loadItemList() {
    String line = "", token = "", token2 = "", token2_2 = "", token3[] = new String[10];
    BufferedReader list = null;

    try {
        list = new BufferedReader(new FileReader("./data/items/items.cfg"));
        line = list.readLine().trim();
    } catch (Exception e) {
        Misc.println("Error loading item list.");
        return false;
    }
    while (line != null) {
        int spot = line.indexOf("=");

        if (spot &gt; -1) {
            token = line.substring(0, spot).trim();
            token2 = line.substring(spot + 1).trim();
            token2_2 = token2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token3 = token2_2.split("\t");
            if (token.equals("item")) {
                int[] bonuses = new int[12];

                for (int i = 0; i &lt; 12; i++) {
                    if (token3[(6 + i)] != null) {
                        bonuses[i] = Integer.parseInt(token3[(6 + i)]);
                    } else {
                        break;
                    }
                }
                newItemList(Integer.parseInt(token3[0]),
                        token3[1].replaceAll("_", " "),
                        token3[2].replaceAll("_", " "),
                        Integer.parseInt(token3[4]),
                        Integer.parseInt(token3[4]),
                        Integer.parseInt(token3[6]), bonuses);
            }
        } else {
            if (line.equals("[ENDOFITEMLIST]")) {
                try {
                    list.close();
                } catch (Exception exception) {}
                list = null;
                return true;
            }
        }
        try {
            line = list.readLine().trim();
        } catch (Exception exception1) {
            try {
                list.close();
            } catch (Exception exception) {}
            list = null;
            return true;
        }
    }
    return false;
}

/**
 * Sets a new item list.
 */
private void newItemList(int ItemId, String ItemName, String ItemDescription, int ShopValue, int LowAlch, int HighAlch, int Bonuses[]) {
    if (ItemId &gt; maxListedItems) {
        Misc.println("maxListedItems to low.");
        return;
    }
    itemLists[ItemId] = new ItemList(ItemId, ItemName, ItemDescription,
            ShopValue, LowAlch, Bonuses);
}
</code></pre>
<p>}</p>
<p>Can anyone please help me?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-drop-help-please/322414/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-drop-help-please/322414/1</link>
        <pubDate>Sun, 27 Dec 2009 23:30:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-322414-1</guid>
        <source url="https://forum.moparisthebest.com/t/508-drop-help-please/322414.rss">508 drop help! Please!</source>
      </item>
  </channel>
</rss>
