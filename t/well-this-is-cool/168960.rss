<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Well this is cool</title>
    <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960</link>
    <description>[img]http://xs122.xs.to/xs122/07520/wpf3d.PNG[/img]
WPF XAML in C#.net 3.5 can do 3D now? Wow.
[code]
&lt;Window x:Class=&quot;WPF3D.Window1&quot;
    xmlns=&quot;http://schemas.microsoft.com/winfx/2006/xaml/presentation&quot;
    xmlns:x=&quot;http://schemas.microsoft.com/winfx/2006/xaml&quot;
    Title=&quot;Window1&quot; Height=&quot;600&quot; Width=&quot;600&quot;&gt;
    &lt;Grid&gt;
        &lt;DockPanel 
  Width=&quot;Auto&quot; 
  VerticalAlignment=&quot;Stretch&quot; 
  Height=&quot;Auto&quot; 
  HorizontalAlignment=&quot;Stretch&quot; 
  Grid.ColumnSpan=&quot;1&quot; 
  Grid.Column=&quot;0&quot; 
  Grid.Row=&quot;0&quot; 
  Margin=&quot;0,0,0,0&quot; 
  Grid.RowSpan=&quot;1&quot;&gt;
            &lt;StackPanel&gt;
                &lt;StackPanel.Background&gt;
                    &lt;LinearGradientBrush&gt;
                        &lt;GradientStop Color=&quot;White&quot; Offset=&quot;0&quot;/&gt;
                        &lt;GradientStop Color=&quot;LightBlue&quot; Offset=&quot;.3&quot;/&gt;
                        &lt;GradientStop Color=&quot;LightBlue&quot; Offset=&quot;.7&quot;/&gt;
                        &lt;GradientStop Color=&quot;White&quot; Offset=&quot;1&quot;/&gt;
                    &lt;/LinearGradientBrush&gt;
                &lt;/StackPanel.Background&gt;
                &lt;StackPanel Name=&quot;Controls&quot; Margin=&quot;10&quot;&gt;
                    &lt;TextBlock Text=&quot;Camera X Position:&quot;/&gt;
                    &lt;TextBox Name=&quot;cameraPositionXTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;11&quot;/&gt;
                    &lt;TextBlock Text=&quot;Camera Y Position:&quot;/&gt;
                    &lt;TextBox Name=&quot;cameraPositionYTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;10&quot;/&gt;
                    &lt;TextBlock Text=&quot;Camera Z Position:&quot;/&gt;
                    &lt;TextBox Name=&quot;cameraPositionZTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;9&quot;/&gt;
                    &lt;Separator/&gt;
                    &lt;TextBlock Text=&quot;Look Direction X:&quot;/&gt;
                    &lt;TextBox Name=&quot;lookAtXTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;-11&quot;/&gt;
                    &lt;TextBlock Text=&quot;Look Direction Y:&quot;/&gt;
                    &lt;TextBox Name=&quot;lookAtYTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;-10&quot;/&gt;
                    &lt;TextBlock Text=&quot;Look Direction Z:&quot;/&gt;
                    &lt;TextBox Name=&quot;lookAtZTextBox&quot; MaxLength=&quot;5&quot; HorizontalAlignment=&quot;Left&quot; Text=&quot;-9&quot;/&gt;
                    &lt;Separator/&gt;
                    &lt;Button Name=&quot;DrawCube&quot; Click=&quot;DrawCube_Click&quot;&gt;Draw Cube&lt;/Button&gt;
                    &lt;Button Name=&quot;Redraw&quot; Click=&quot;Redraw_Click&quot;&gt;Redraw&lt;/Button&gt;
                &lt;/StackPanel&gt;
        &lt;/StackPanel&gt;
            &lt;Viewport3D Name=&quot;mainViewport&quot; ClipToBounds=&quot;True&quot;&gt;
                &lt;Viewport3D.Camera&gt;
                    &lt;PerspectiveCamera
	  FarPlaneDistance=&quot;100&quot;
	  LookDirection=&quot;-11,-10,-9&quot;
	  UpDirection=&quot;0,1,0&quot;
	  NearPlaneDistance=&quot;1&quot; 
	  Position=&quot;11,10,9&quot; 
	  FieldOfView=&quot;70&quot; /&gt;
                &lt;/Viewport3D.Camera&gt;
                &lt;ModelVisual3D&gt;
                    &lt;ModelVisual3D.Content&gt;
                        &lt;DirectionalLight Color=&quot;White&quot; Direction=&quot;-2,-3,-1&quot;/&gt;
                    &lt;/ModelVisual3D.Content&gt;
                &lt;/ModelVisual3D&gt;
            &lt;/Viewport3D&gt;
        &lt;/DockPanel&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;
[/code]
[code]
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WPF3D
{
    /// &lt;summary&gt;
    /// Interaction logic for Window1.xaml
    /// &lt;/summary&gt;
    public partial class Window1 : Window
    {
        int side = 0;
        SolidColorBrush[] col = new SolidColorBrush[13];
        public Window1()
        {
            InitializeComponent();
            col[0] = new SolidColorBrush(Colors.Red);
            col[1] = new SolidColorBrush(Colors.Blue);
            col[2] = new SolidColorBrush(Colors.Green);
            col[3] = new SolidColorBrush(Colors.Orange);
            col[4] = new SolidColorBrush(Colors.Red);
            col[5] = new SolidColorBrush(Colors.Blue);
            col[6] = new SolidColorBrush(Colors.Green);
            col[7] = new SolidColorBrush(Colors.Orange);
            col[8] = new SolidColorBrush(Colors.Red);
            col[9] = new SolidColorBrush(Colors.Blue);
            col[10] = new SolidColorBrush(Colors.Green);
            col[11] = new SolidColorBrush(Colors.Orange);
            col[12] = new SolidColorBrush(Colors.Red);
        }
        private void DrawCube_Click(object sender, RoutedEventArgs e)
        {
            Model3DGroup cube = new Model3DGroup();
            Point3D p0 = new Point3D(0, 0, 0);
            Point3D p1 = new Point3D(5, 0, 0);
            Point3D p2 = new Point3D(5, 0, 5);
            Point3D p3 = new Point3D(0, 0, 5);
            Point3D p4 = new Point3D(0, 5, 0);
            Point3D p5 = new Point3D(5, 5, 0);
            Point3D p6 = new Point3D(5, 5, 5);
            Point3D p7 = new Point3D(0, 5, 5);
            //front side triangles
            cube.Children.Add(CreateTriangleModel(p3, p2, p6));
            cube.Children.Add(CreateTriangleModel(p3, p6, p7));
            //right side triangles
            cube.Children.Add(CreateTriangleModel(p2, p1, p5));
            cube.Children.Add(CreateTriangleModel(p2, p5, p6));
            //back side triangles
            cube.Children.Add(CreateTriangleModel(p1, p0, p4));
            cube.Children.Add(CreateTriangleModel(p1, p4, p5));
            //left side triangles
            cube.Children.Add(CreateTriangleModel(p0, p3, p7));
            cube.Children.Add(CreateTriangleModel(p0, p7, p4));
            //top side triangles
            cube.Children.Add(CreateTriangleModel(p7, p6, p5));
            cube.Children.Add(CreateTriangleModel(p7, p5, p4));
            //bottom side triangles
            cube.Children.Add(CreateTriangleModel(p2, p3, p0));
            cube.Children.Add(CreateTriangleModel(p2, p0, p1));

            ModelVisual3D model = new ModelVisual3D();
            model.Content = cube;
            this.mainViewport.Children.Add(model);
        }
        private Model3DGroup CreateTriangleModel(Point3D p0, Point3D p1, Point3D p2)
        {
            side++;
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.Positions.Add(p0);
            mesh.Positions.Add(p1);
            mesh.Positions.Add(p2);
            mesh.TriangleIndices.Add(0);
            mesh.TriangleIndices.Add(1);
            mesh.TriangleIndices.Add(2);
            Vector3D normal = CalculateNormal(p0, p1, p2);
            mesh.Normals.Add(normal);
            mesh.Normals.Add(normal);
            mesh.Normals.Add(normal);
            Material material = new DiffuseMaterial(col[side]);
            GeometryModel3D model = new GeometryModel3D(mesh, material);
            Model3DGroup group = new Model3DGroup();
            group.Children.Add(model);
            return group;
        }
        
        private Vector3D CalculateNormal(Point3D p0, Point3D p1, Point3D p2)
        {
            Vector3D v0 = new Vector3D(p1.X - p0.X, p1.Y - p0.Y, p1.Z - p0.Z);
            Vector3D v1 = new Vector3D(p2.X - p1.X, p2.Y - p1.Y, p2.Z - p1.Z);
            return Vector3D.CrossProduct(v0, v1);
        }
        private void SetCamera()
        {
            PerspectiveCamera camera = (PerspectiveCamera)mainViewport.Camera;
            Point3D position = new Point3D(
                Convert.ToDouble(cameraPositionXTextBox.Text),
                Convert.ToDouble(cameraPositionYTextBox.Text),
                Convert.ToDouble(cameraPositionZTextBox.Text)
            );
            Vector3D lookDirection = new Vector3D(
                Convert.ToDouble(lookAtXTextBox.Text),
                Convert.ToDouble(lookAtYTextBox.Text),
                Convert.ToDouble(lookAtZTextBox.Text)
            );
            camera.Position = position;
            camera.LookDirection = lookDirection;
        }

        private void Redraw_Click(object sender, RoutedEventArgs e)
        {
            SetCamera();
        }
    }
}
[/code]
Just something I hacked together, so don&#39;t pick at my programming skills. I think it&#39;s rather neat...and there goes my 3D engine project.
Comment, question, flame C#.net, whatever.</description>
    
    <lastBuildDate>Sun, 30 Dec 2007 07:37:43 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Well this is cool</title>
        <dc:creator><![CDATA[@Exception Exception]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exception">@Exception</a> wrote:</p>
          <blockquote>
              <p>[quote=“VB7 Rocks, post:4, topic:168960”][quote author=Exception link=topic=228605.msg1962605#msg1962605 date=1198997806]<br>
WinForms-&gt;.NET-&gt;GDI±&gt;Win32 API-&gt;Graphics Card.<br>
[/quote]</p>
<p>Does the Win32 API serve as the hardware abstraction layer then, or does it not use one? Just wondering.[/quote]<br>
I believe so, but it could be that GDI+ interacts directly. I’m not so sure on all the low level stuff. Technically they are all hardware abstraction layers, just becoming continually more abstract.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/well-this-is-cool/168960/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960/5</link>
        <pubDate>Sun, 30 Dec 2007 07:37:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-168960-5</guid>
        <source url="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss">Well this is cool</source>
      </item>
      <item>
        <title>Well this is cool</title>
        <dc:creator><![CDATA[@VB7_Rocks VB7 Rocks]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vb7_rocks">@VB7_Rocks</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="3" data-topic="168960">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/exception/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> Exception:</div>
<blockquote>
<p>WinForms-&gt;.NET-&gt;GDI±&gt;Win32 API-&gt;Graphics Card.</p>
</blockquote>
</aside>
<p>Does the Win32 API serve as the hardware abstraction layer then, or does it not use one? Just wondering.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/well-this-is-cool/168960/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960/4</link>
        <pubDate>Sun, 30 Dec 2007 07:07:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-168960-4</guid>
        <source url="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss">Well this is cool</source>
      </item>
      <item>
        <title>Well this is cool</title>
        <dc:creator><![CDATA[@Exception Exception]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exception">@Exception</a> wrote:</p>
          <blockquote>
              <p>[quote=“VB7 Rocks, post:2, topic:168960”]Yes, but how fast can the 3d access the hardware?</p>
<p>Have you tried testing it, like to see how many FPS you can get out of a constant redraw?[/quote]<br>
Good question. I know for a fact normal WinForms drawing is quite slow. WinForms-&gt;.NET-&gt;GDI±&gt;Win32 API-&gt;Graphics Card.<br>
Lemme set up a timer and test it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/well-this-is-cool/168960/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960/3</link>
        <pubDate>Sun, 30 Dec 2007 06:56:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-168960-3</guid>
        <source url="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss">Well this is cool</source>
      </item>
      <item>
        <title>Well this is cool</title>
        <dc:creator><![CDATA[@VB7_Rocks VB7 Rocks]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vb7_rocks">@VB7_Rocks</a> wrote:</p>
          <blockquote>
              <p>Yes, but how fast can the 3d access the hardware?</p>
<p>Have you tried testing it, like to see how many FPS you can get out of a constant redraw?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/well-this-is-cool/168960/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960/2</link>
        <pubDate>Sun, 30 Dec 2007 06:21:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-168960-2</guid>
        <source url="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss">Well this is cool</source>
      </item>
      <item>
        <title>Well this is cool</title>
        <dc:creator><![CDATA[@Exception Exception]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exception">@Exception</a> wrote:</p>
          <blockquote>
              <p><img src="http://xs122.xs.to/xs122/07520/wpf3d.PNG" alt width="" height=""><br>
WPF XAML in C#.net 3.5 can do 3D now? Wow.</p>
<pre><code class="lang-auto">&lt;Window x:Class="WPF3D.Window1"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    Title="Window1" Height="600" Width="600"&gt;
    &lt;Grid&gt;
        &lt;DockPanel 
  Width="Auto" 
  VerticalAlignment="Stretch" 
  Height="Auto" 
  HorizontalAlignment="Stretch" 
  Grid.ColumnSpan="1" 
  Grid.Column="0" 
  Grid.Row="0" 
  Margin="0,0,0,0" 
  Grid.RowSpan="1"&gt;
            &lt;StackPanel&gt;
                &lt;StackPanel.Background&gt;
                    &lt;LinearGradientBrush&gt;
                        &lt;GradientStop Color="White" Offset="0"/&gt;
                        &lt;GradientStop Color="LightBlue" Offset=".3"/&gt;
                        &lt;GradientStop Color="LightBlue" Offset=".7"/&gt;
                        &lt;GradientStop Color="White" Offset="1"/&gt;
                    &lt;/LinearGradientBrush&gt;
                &lt;/StackPanel.Background&gt;
                &lt;StackPanel Name="Controls" Margin="10"&gt;
                    &lt;TextBlock Text="Camera X Position:"/&gt;
                    &lt;TextBox Name="cameraPositionXTextBox" MaxLength="5" HorizontalAlignment="Left" Text="11"/&gt;
                    &lt;TextBlock Text="Camera Y Position:"/&gt;
                    &lt;TextBox Name="cameraPositionYTextBox" MaxLength="5" HorizontalAlignment="Left" Text="10"/&gt;
                    &lt;TextBlock Text="Camera Z Position:"/&gt;
                    &lt;TextBox Name="cameraPositionZTextBox" MaxLength="5" HorizontalAlignment="Left" Text="9"/&gt;
                    &lt;Separator/&gt;
                    &lt;TextBlock Text="Look Direction X:"/&gt;
                    &lt;TextBox Name="lookAtXTextBox" MaxLength="5" HorizontalAlignment="Left" Text="-11"/&gt;
                    &lt;TextBlock Text="Look Direction Y:"/&gt;
                    &lt;TextBox Name="lookAtYTextBox" MaxLength="5" HorizontalAlignment="Left" Text="-10"/&gt;
                    &lt;TextBlock Text="Look Direction Z:"/&gt;
                    &lt;TextBox Name="lookAtZTextBox" MaxLength="5" HorizontalAlignment="Left" Text="-9"/&gt;
                    &lt;Separator/&gt;
                    &lt;Button Name="DrawCube" Click="DrawCube_Click"&gt;Draw Cube&lt;/Button&gt;
                    &lt;Button Name="Redraw" Click="Redraw_Click"&gt;Redraw&lt;/Button&gt;
                &lt;/StackPanel&gt;
        &lt;/StackPanel&gt;
            &lt;Viewport3D Name="mainViewport" ClipToBounds="True"&gt;
                &lt;Viewport3D.Camera&gt;
                    &lt;PerspectiveCamera
	  FarPlaneDistance="100"
	  LookDirection="-11,-10,-9"
	  UpDirection="0,1,0"
	  NearPlaneDistance="1" 
	  Position="11,10,9" 
	  FieldOfView="70" /&gt;
                &lt;/Viewport3D.Camera&gt;
                &lt;ModelVisual3D&gt;
                    &lt;ModelVisual3D.Content&gt;
                        &lt;DirectionalLight Color="White" Direction="-2,-3,-1"/&gt;
                    &lt;/ModelVisual3D.Content&gt;
                &lt;/ModelVisual3D&gt;
            &lt;/Viewport3D&gt;
        &lt;/DockPanel&gt;
    &lt;/Grid&gt;
&lt;/Window&gt;</code></pre>
<pre><code class="lang-auto">using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Media3D;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace WPF3D
{
    /// &lt;summary&gt;
    /// Interaction logic for Window1.xaml
    /// &lt;/summary&gt;
    public partial class Window1 : Window
    {
        int side = 0;
        SolidColorBrush[] col = new SolidColorBrush[13];
        public Window1()
        {
            InitializeComponent();
            col[0] = new SolidColorBrush(Colors.Red);
            col[1] = new SolidColorBrush(Colors.Blue);
            col[2] = new SolidColorBrush(Colors.Green);
            col[3] = new SolidColorBrush(Colors.Orange);
            col[4] = new SolidColorBrush(Colors.Red);
            col[5] = new SolidColorBrush(Colors.Blue);
            col[6] = new SolidColorBrush(Colors.Green);
            col[7] = new SolidColorBrush(Colors.Orange);
            col[8] = new SolidColorBrush(Colors.Red);
            col[9] = new SolidColorBrush(Colors.Blue);
            col[10] = new SolidColorBrush(Colors.Green);
            col[11] = new SolidColorBrush(Colors.Orange);
            col[12] = new SolidColorBrush(Colors.Red);
        }
        private void DrawCube_Click(object sender, RoutedEventArgs e)
        {
            Model3DGroup cube = new Model3DGroup();
            Point3D p0 = new Point3D(0, 0, 0);
            Point3D p1 = new Point3D(5, 0, 0);
            Point3D p2 = new Point3D(5, 0, 5);
            Point3D p3 = new Point3D(0, 0, 5);
            Point3D p4 = new Point3D(0, 5, 0);
            Point3D p5 = new Point3D(5, 5, 0);
            Point3D p6 = new Point3D(5, 5, 5);
            Point3D p7 = new Point3D(0, 5, 5);
            //front side triangles
            cube.Children.Add(CreateTriangleModel(p3, p2, p6));
            cube.Children.Add(CreateTriangleModel(p3, p6, p7));
            //right side triangles
            cube.Children.Add(CreateTriangleModel(p2, p1, p5));
            cube.Children.Add(CreateTriangleModel(p2, p5, p6));
            //back side triangles
            cube.Children.Add(CreateTriangleModel(p1, p0, p4));
            cube.Children.Add(CreateTriangleModel(p1, p4, p5));
            //left side triangles
            cube.Children.Add(CreateTriangleModel(p0, p3, p7));
            cube.Children.Add(CreateTriangleModel(p0, p7, p4));
            //top side triangles
            cube.Children.Add(CreateTriangleModel(p7, p6, p5));
            cube.Children.Add(CreateTriangleModel(p7, p5, p4));
            //bottom side triangles
            cube.Children.Add(CreateTriangleModel(p2, p3, p0));
            cube.Children.Add(CreateTriangleModel(p2, p0, p1));

            ModelVisual3D model = new ModelVisual3D();
            model.Content = cube;
            this.mainViewport.Children.Add(model);
        }
        private Model3DGroup CreateTriangleModel(Point3D p0, Point3D p1, Point3D p2)
        {
            side++;
            MeshGeometry3D mesh = new MeshGeometry3D();
            mesh.Positions.Add(p0);
            mesh.Positions.Add(p1);
            mesh.Positions.Add(p2);
            mesh.TriangleIndices.Add(0);
            mesh.TriangleIndices.Add(1);
            mesh.TriangleIndices.Add(2);
            Vector3D normal = CalculateNormal(p0, p1, p2);
            mesh.Normals.Add(normal);
            mesh.Normals.Add(normal);
            mesh.Normals.Add(normal);
            Material material = new DiffuseMaterial(col[side]);
            GeometryModel3D model = new GeometryModel3D(mesh, material);
            Model3DGroup group = new Model3DGroup();
            group.Children.Add(model);
            return group;
        }
        
        private Vector3D CalculateNormal(Point3D p0, Point3D p1, Point3D p2)
        {
            Vector3D v0 = new Vector3D(p1.X - p0.X, p1.Y - p0.Y, p1.Z - p0.Z);
            Vector3D v1 = new Vector3D(p2.X - p1.X, p2.Y - p1.Y, p2.Z - p1.Z);
            return Vector3D.CrossProduct(v0, v1);
        }
        private void SetCamera()
        {
            PerspectiveCamera camera = (PerspectiveCamera)mainViewport.Camera;
            Point3D position = new Point3D(
                Convert.ToDouble(cameraPositionXTextBox.Text),
                Convert.ToDouble(cameraPositionYTextBox.Text),
                Convert.ToDouble(cameraPositionZTextBox.Text)
            );
            Vector3D lookDirection = new Vector3D(
                Convert.ToDouble(lookAtXTextBox.Text),
                Convert.ToDouble(lookAtYTextBox.Text),
                Convert.ToDouble(lookAtZTextBox.Text)
            );
            camera.Position = position;
            camera.LookDirection = lookDirection;
        }

        private void Redraw_Click(object sender, RoutedEventArgs e)
        {
            SetCamera();
        }
    }
}</code></pre>
<p>Just something I hacked together, so don’t pick at my programming skills. I think it’s rather neat…and there goes my 3D engine project.<br>
Comment, question, flame C#.net, whatever.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/well-this-is-cool/168960/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/well-this-is-cool/168960/1</link>
        <pubDate>Sun, 30 Dec 2007 06:09:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-168960-1</guid>
        <source url="https://forum.moparisthebest.com/t/well-this-is-cool/168960.rss">Well this is cool</source>
      </item>
  </channel>
</rss>
