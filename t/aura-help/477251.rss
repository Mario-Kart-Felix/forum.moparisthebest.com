<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Aura Help</title>
    <link>https://forum.moparisthebest.com/t/aura-help/477251</link>
    <description>ok i am using a 718/737 and i want to change how long it takes for the aura to charge...Right now its about 17 hours...I want to change it to 1 second............................................................

Thank you.</description>
    
    <lastBuildDate>Wed, 02 Jan 2013 05:16:05 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/aura-help/477251.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>[quote=“strucker, post:10, topic:477251”][code] public String getFormatedTime(long seconds) {<br>
long minutes = seconds / 60;<br>
long hours = minutes / 60;<br>
minutes -= hours * 60;<br>
seconds -= (hours * 60 * 60) + (minutes * 60);<br>
String minutesString = (minutes &lt; 10 ? “0” : “”) + minutes;<br>
String secondsString = (seconds &lt; 10 ? “0” : “”) + seconds;<br>
return hours + “:” + minutesString + “:” + secondsString;<br>
}</p>
<pre><code>    public void sendTimeRemaining(int aura) {
            long cooldown = getCoolDown(aura);
            if (cooldown &lt; Utils.currentTimeMillis()) {
                    player.getPackets().sendGameMessage(
                                    "The aura has finished recharging. It is ready to use.");
                    return;
            }
            player.getPackets()
                            .sendGameMessage(
                                            "Currently recharging. &lt;col=ff0000&gt;"
                                                            + getFormatedTime((cooldown - Utils
                                                                            .currentTimeMillis()) / 1000)
                                                            + " remaining.");
    }[/code]Is that being used? if so, where?[/quote]
</code></pre>
<p>Good catch sir, I was messing around with this earlier and when i put the numbers to about 99999999 the numbers would all go to the seconds spot but it would be 55000+…I tried for a while then stopped.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/11</link>
        <pubDate>Wed, 02 Jan 2013 05:16:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-11</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>[code] public String getFormatedTime(long seconds) {<br>
long minutes = seconds / 60;<br>
long hours = minutes / 60;<br>
minutes -= hours * 60;<br>
seconds -= (hours * 60 * 60) + (minutes * 60);<br>
String minutesString = (minutes &lt; 10 ? “0” : “”) + minutes;<br>
String secondsString = (seconds &lt; 10 ? “0” : “”) + seconds;<br>
return hours + “:” + minutesString + “:” + secondsString;<br>
}</p>
<pre><code>    public void sendTimeRemaining(int aura) {
            long cooldown = getCoolDown(aura);
            if (cooldown &lt; Utils.currentTimeMillis()) {
                    player.getPackets().sendGameMessage(
                                    "The aura has finished recharging. It is ready to use.");
                    return;
            }
            player.getPackets()
                            .sendGameMessage(
                                            "Currently recharging. &lt;col=ff0000&gt;"
                                                            + getFormatedTime((cooldown - Utils
                                                                            .currentTimeMillis()) / 1000)
                                                            + " remaining.");
    }[/code]Is that being used? if so, where?</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/10</link>
        <pubDate>Wed, 02 Jan 2013 05:03:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-10</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>I am sure because i complied a couple of times…Can you tell me what you changed? I might be able to fool around with it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/9</link>
        <pubDate>Wed, 02 Jan 2013 03:33:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-9</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@aciraccar aciraccar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aciraccar">@aciraccar</a> wrote:</p>
          <blockquote>
              <p>are you sure your compiling correctly sometimes the default compiler given from source only compiles certain areas .-. or certain files</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/8</link>
        <pubDate>Wed, 02 Jan 2013 02:58:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-8</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>[quote=“aciraccar, post:6, topic:477251”][code]package com.rs.game.player;</p>
<p>import java.io.Serializable;<br>
import java.util.HashMap;</p>
<p>import com.rs.game.Animation;<br>
import com.rs.game.Graphics;<br>
import com.rs.game.World;<br>
import com.rs.game.item.Item;<br>
import com.rs.utils.Logger;<br>
import com.rs.utils.Utils;</p>
<p>public class AuraManager implements Serializable {</p>
<pre><code>private static final long serialVersionUID = -8860530757819448608L;

private transient Player player;
private transient boolean warned;
private long activation;
private HashMap&lt;Integer, Long&gt; cooldowns;

public AuraManager() {
	cooldowns = new HashMap&lt;Integer, Long&gt;();
}

protected void setPlayer(Player player) {
	this.player = player;
}

public void process() {
	if(!isActivated())
		return;
	if(activation - Utils.currentTimeMillis() &lt;= 0 &amp;&amp; !warned) {
		player.getPackets().sendGameMessage("Your aura will deplete in 1 minute.");
		warned = true;
		return;
	}
	if (Utils.currentTimeMillis() &lt; activation)
		return;
	desactive();
	player.getAppearence().generateAppearenceData();
}

public void removeAura() {
	if (isActivated()) 
		desactive();
}

public void desactive() {
	activation = 0;
	warned = false;
	player.getPackets().sendGameMessage("Your aura has depleted.");
}

public long getCoolDown(int aura) {
	Long coolDown = cooldowns.get(aura);
	if (coolDown == null)
		return 0;
	return coolDown;
}

public void activate() {
	Item item = player.getEquipment().getItem(Equipment.SLOT_AURA);
	if(item == null)
		return;
	//temp fix, discard useless once eco since they wont be ingame
	if (item.getDefinitions().containsOption("Discard")) 
		return;
	player.stopAll(false);	
	int toId = getTransformIntoAura(item.getId());
	if(toId != -1) {
		player.getEquipment().getItem(Equipment.SLOT_AURA).setId(toId);
		player.getEquipment().refresh(Equipment.SLOT_AURA);
		player.getAppearence().generateAppearenceData();
	}else{
		if (activation != 0) {
			// TODO message already activated
			return;
		}
		if (Utils.currentTimeMillis() &lt;= getCoolDown(item.getId())) {
			// TODO message cooldown
			return;
		}
		int tier = getTier(item.getId());
		activation = Utils.currentTimeMillis() + getActivationTime(item.getId()) * 1000;
		cooldowns.put(item.getId(), activation + getCooldown(item.getId()) * 1000);
		player.setNextAnimation(new Animation(2231));
		player.setNextGraphics(new Graphics(getActiveGraphic(tier)));
		player.getAppearence().generateAppearenceData();
	}
}

public int getTransformIntoAura(int aura) {
	switch(aura) {
	case 23896: //infernal
		return 23880;
	case 23880: //infernal
		return 23896;
	case 23898: //serene
		return 23882;
	case 23882: //serene
		return 23898;
	case 23900: //vernal
		return 23884;
	case 23884: //vernal
		return 23900;
	case 23902: //nocturnal
		return 23886;
	case 23886: //nocturnal
		return 23902;
	case 23904: //mystical
		return 23888;
	case 23888: //mystical
		return 23904;
	case 23906: //blazing
		return 23890;
	case 23890: //blazing
		return 23906;
	case 23908: //abyssal
		return 23892;
	case 23892: //abyssal
		return 23908;
	case 23910: //divine
		return 23894;
	case 23894: //divine
		return 23910;
	default:
		return -1;
	}
}

public void sendAuraRemainingTime() {
	if (!isActivated()) {
		long cooldown = getCoolDown(player.getEquipment().getAuraId());
		if (Utils.currentTimeMillis() &lt;= cooldown) {
			player.getPackets().sendGameMessage(
					"Currently recharging. &lt;col=ff0000&gt;"
							+ getFormatedTime((cooldown - Utils
									.currentTimeMillis()) / 1000)
							+ " remaining.");
			return;
		}
		player.getPackets().sendGameMessage(
				"Currently desactivate. It is ready to use.");
		return;
	}
	player.getPackets().sendGameMessage(
			"Currently active. &lt;col=00ff00&gt;"
					+ getFormatedTime((activation - Utils
							.currentTimeMillis()) / 1000) + " remaining");
}

public String getFormatedTime(long seconds) {
	long minutes = seconds / 60;
	long hours = minutes / 60;
	minutes -= hours * 60;
	seconds -= (hours * 60 * 60) + (minutes * 60);
	String minutesString = (minutes &lt; 10 ? "0" : "") + minutes;
	String secondsString = (seconds &lt; 10 ? "0" : "") + seconds;
	return hours + ":" + minutesString + ":" + secondsString;
}

public void sendTimeRemaining(int aura) {
	long cooldown = getCoolDown(aura);
	if (cooldown &lt; Utils.currentTimeMillis()) {
		player.getPackets().sendGameMessage(
				"The aura has finished recharging. It is ready to use.");
		return;
	}
	player.getPackets()
			.sendGameMessage(
					"Currently recharging. &lt;col=ff0000&gt;"
							+ getFormatedTime((cooldown - Utils
									.currentTimeMillis()) / 1000)
							+ " remaining.");
}

public boolean isActivated() {
	return activation != 0;
}


/*
16449 - Corruption
16464 - Greater corruption
16429 - Master corruption
68615 - Supreme corruption

16465 - Salvation
16524 - Greater salvation
16450 - Master salvation
68611 - supreme salvation.

68605 - Harmony.
68610 - Greater harmony.
68607 - Master harmony.
68613 - Supreme harmony.
</code></pre>
<p>*/<br>
public int getAuraModelId2() {<br>
int aura = player.getEquipment().getAuraId();<br>
switch (aura) {<br>
case 22905:	//Corruption.<br>
return 16449;<br>
case 22899:	//Salvation.<br>
return 16465;<br>
case 23848:	//Harmony.<br>
return 68605;<br>
case 22907:	//Greater corruption.<br>
return 16464;<br>
case 22901:	//Greater salvation.<br>
return 16524;<br>
case 23850:	//Greater harmony.<br>
return 68610;<br>
case 22909:	//Master corruption.<br>
return 16429;<br>
case 22903:	//Master salvation.<br>
return 16450;<br>
case 23852:	//Master harmony.<br>
return 68607;<br>
case 23874:	//Supreme corruption.<br>
return 68615;<br>
case 23876:	//Supreme salvation.<br>
return 68611;<br>
case 23854:	//Supreme harmony.<br>
return 68613;<br>
default:<br>
Logger.log(“AurasManager”, "Unknown wings: "+aura);<br>
return -1;<br>
}<br>
}</p>
<pre><code>public int getAuraModelId() {
	Item weapon = player.getEquipment().getItem(Equipment.SLOT_WEAPON);
	if (weapon == null)
		return 8719;
	String name = weapon.getDefinitions().getName().toLowerCase();
	if (name.contains("dagger"))
		return 8724;
	if (name.contains("whip"))
		return 8725;
	if (name.contains("2h sword") || name.contains("godsword"))
		return 8773;
	if (name.contains("sword") || name.contains("scimitar")
			|| name.contains("korasi"))
		return 8722;
	return 8719;
}

public int getActiveGraphic(int tier) {
	if (tier == 2)
		return 1764;
	if (tier == 3)
		return 1763;
	return 370; // default gold
}

public boolean hasPoisonPurge() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 20958 || aura == 22268;
}

public double getMagicAccurayMultiplier() {
	if (!isActivated() || World.isPvpArea(player))
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20962)
		return 1.03;
	if (aura == 22270)
		return 1.05;
	return 1;
}

public double getRangeAccurayMultiplier() {
	if (!isActivated() || World.isPvpArea(player))
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20967)
		return 1.03;
	if (aura == 22272)
		return 1.05;
	return 1;
}

public double getWoodcuttingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22280)
		return 1.03;
	if (aura == 22282)
		return 1.05;
	return 1;
}

public double getMininingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22284)
		return 1.03;
	if (aura == 22286)
		return 1.05;
	return 1;
}

public double getFishingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20966)
		return 1.03;
	if (aura == 22274)
		return 1.05;
	return 1;
}

public double getPrayerPotsRestoreMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20965)
		return 1.03;
	if (aura == 22276)
		return 1.05;
	return 1;
}

public double getThievingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22288)
		return 1.03;
	if (aura == 22290)
		return 1.05;
	return 1;
}

public double getChanceNotDepleteMN_WC() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22292)
		return 1.1;
	return 1;
}

public boolean usingEquilibrium() {
	if (!isActivated() || World.isPvpArea(player))
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22294;
}

public boolean usingPenance() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22300;
}

/**
 * Gets the prayer experience multiplier.
 * @return The prayer experience multiplier.
 */
public double getPrayerMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
		return 1.01;
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
		return 1.015;
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
		return 1.02;
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return 1.025;
	}
	return 1.0;
}

/**
 * Gets the amount of prayer points to restore (when getting 500 prayer experience).
 * @return The prayer restoration multiplier.
 */
public double getPrayerRestoration() {
	if (!isActivated())
		return 0;
	int aura = player.getEquipment().getAuraId();
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
		return 0.03;
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
		return 0.05;
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
		return 0.07;
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return 0.1;
	}
	return 0;
}

public void checkSuccefulHits(int damage) {
	if (!isActivated() || World.isPvpArea(player))
		return;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22296)
		useInspiration();
	else if (aura == 22298)
		useVampyrism(damage);
}

public void useVampyrism(int damage) {
	int heal = (int) (damage * 0.05);
	if (heal &gt; 0)
		player.heal(heal);
}

public void useInspiration() {
	Integer atts = (Integer) player.getTemporaryAttributtes().get(
			"InspirationAura");
	if (atts == null)
		atts = 0;
	atts++;
	if (atts == 5) {
		atts = 0;
		player.getCombatDefinitions().restoreSpecialAttack(1);
	}
	player.getTemporaryAttributtes().put("InspirationAura", atts);
}

public boolean usingWisdom() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22302;
}

/**
 * Checks if the aura worn is a winged aura.
 * @return {@code True}.
 */
public boolean isWingedAura(int aura) {
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return true;
	}
	return false;
}
/*
 * return seconds
 */
public static int getActivationTime(int aura) {
	switch (aura) {
	case 20958:
		return 1; // 10minutes
	case 22268:
		return 1; // 20minutes
	case 22302:
		return 1; // 30minutes
	case 22294:
		return 1; // 2hours
	case 20959:
		return 1; // 3hours
	case 23854:
		return 1;
	case 23874:
		return 1;
	case 23876:
		return 1;
	default:
		return 1; // default 1hour
	}
}

public static int getCooldown(int aura) {
	switch (aura) {
	case 23854:
		return 1;
	case 23874:
		return 1;
	case 23876:
		return 1;
	default:
	    return 1;
	}
}

public static int getTier(int aura) {
	switch (aura) {
	case 23874:
	case 23876:
	case 23854:
		return 4;
	case 22302:
	case 22909:
	case 22903:
	case 23852:
		return 3;
	case 22907:
	case 22901:
	case 23850:
	case 20959:
	case 22270:
	case 22272:
	case 22282:
	case 22286:
	case 22274:
	case 22276:
	case 22290:
	case 22292:
	case 22294:
	case 22296:
	case 22298:
	case 22300:
		return 2;
	default:
		return 1; // default 1
	}
}
</code></pre>
<p>}<br>
[/code]<br>
try it[/quote]</p>
<p>Thanks for the effort but it didnt work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/7</link>
        <pubDate>Wed, 02 Jan 2013 02:46:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-7</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@aciraccar aciraccar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aciraccar">@aciraccar</a> wrote:</p>
          <blockquote>
              <p>[code]package com.rs.game.player;</p>
<p>import java.io.Serializable;<br>
import java.util.HashMap;</p>
<p>import com.rs.game.Animation;<br>
import com.rs.game.Graphics;<br>
import com.rs.game.World;<br>
import com.rs.game.item.Item;<br>
import com.rs.utils.Logger;<br>
import com.rs.utils.Utils;</p>
<p>public class AuraManager implements Serializable {</p>
<pre><code>private static final long serialVersionUID = -8860530757819448608L;

private transient Player player;
private transient boolean warned;
private long activation;
private HashMap&lt;Integer, Long&gt; cooldowns;

public AuraManager() {
	cooldowns = new HashMap&lt;Integer, Long&gt;();
}

protected void setPlayer(Player player) {
	this.player = player;
}

public void process() {
	if(!isActivated())
		return;
	if(activation - Utils.currentTimeMillis() &lt;= 0 &amp;&amp; !warned) {
		player.getPackets().sendGameMessage("Your aura will deplete in 1 minute.");
		warned = true;
		return;
	}
	if (Utils.currentTimeMillis() &lt; activation)
		return;
	desactive();
	player.getAppearence().generateAppearenceData();
}

public void removeAura() {
	if (isActivated()) 
		desactive();
}

public void desactive() {
	activation = 0;
	warned = false;
	player.getPackets().sendGameMessage("Your aura has depleted.");
}

public long getCoolDown(int aura) {
	Long coolDown = cooldowns.get(aura);
	if (coolDown == null)
		return 0;
	return coolDown;
}

public void activate() {
	Item item = player.getEquipment().getItem(Equipment.SLOT_AURA);
	if(item == null)
		return;
	//temp fix, discard useless once eco since they wont be ingame
	if (item.getDefinitions().containsOption("Discard")) 
		return;
	player.stopAll(false);	
	int toId = getTransformIntoAura(item.getId());
	if(toId != -1) {
		player.getEquipment().getItem(Equipment.SLOT_AURA).setId(toId);
		player.getEquipment().refresh(Equipment.SLOT_AURA);
		player.getAppearence().generateAppearenceData();
	}else{
		if (activation != 0) {
			// TODO message already activated
			return;
		}
		if (Utils.currentTimeMillis() &lt;= getCoolDown(item.getId())) {
			// TODO message cooldown
			return;
		}
		int tier = getTier(item.getId());
		activation = Utils.currentTimeMillis() + getActivationTime(item.getId()) * 1000;
		cooldowns.put(item.getId(), activation + getCooldown(item.getId()) * 1000);
		player.setNextAnimation(new Animation(2231));
		player.setNextGraphics(new Graphics(getActiveGraphic(tier)));
		player.getAppearence().generateAppearenceData();
	}
}

public int getTransformIntoAura(int aura) {
	switch(aura) {
	case 23896: //infernal
		return 23880;
	case 23880: //infernal
		return 23896;
	case 23898: //serene
		return 23882;
	case 23882: //serene
		return 23898;
	case 23900: //vernal
		return 23884;
	case 23884: //vernal
		return 23900;
	case 23902: //nocturnal
		return 23886;
	case 23886: //nocturnal
		return 23902;
	case 23904: //mystical
		return 23888;
	case 23888: //mystical
		return 23904;
	case 23906: //blazing
		return 23890;
	case 23890: //blazing
		return 23906;
	case 23908: //abyssal
		return 23892;
	case 23892: //abyssal
		return 23908;
	case 23910: //divine
		return 23894;
	case 23894: //divine
		return 23910;
	default:
		return -1;
	}
}

public void sendAuraRemainingTime() {
	if (!isActivated()) {
		long cooldown = getCoolDown(player.getEquipment().getAuraId());
		if (Utils.currentTimeMillis() &lt;= cooldown) {
			player.getPackets().sendGameMessage(
					"Currently recharging. &lt;col=ff0000&gt;"
							+ getFormatedTime((cooldown - Utils
									.currentTimeMillis()) / 1000)
							+ " remaining.");
			return;
		}
		player.getPackets().sendGameMessage(
				"Currently desactivate. It is ready to use.");
		return;
	}
	player.getPackets().sendGameMessage(
			"Currently active. &lt;col=00ff00&gt;"
					+ getFormatedTime((activation - Utils
							.currentTimeMillis()) / 1000) + " remaining");
}

public String getFormatedTime(long seconds) {
	long minutes = seconds / 60;
	long hours = minutes / 60;
	minutes -= hours * 60;
	seconds -= (hours * 60 * 60) + (minutes * 60);
	String minutesString = (minutes &lt; 10 ? "0" : "") + minutes;
	String secondsString = (seconds &lt; 10 ? "0" : "") + seconds;
	return hours + ":" + minutesString + ":" + secondsString;
}

public void sendTimeRemaining(int aura) {
	long cooldown = getCoolDown(aura);
	if (cooldown &lt; Utils.currentTimeMillis()) {
		player.getPackets().sendGameMessage(
				"The aura has finished recharging. It is ready to use.");
		return;
	}
	player.getPackets()
			.sendGameMessage(
					"Currently recharging. &lt;col=ff0000&gt;"
							+ getFormatedTime((cooldown - Utils
									.currentTimeMillis()) / 1000)
							+ " remaining.");
}

public boolean isActivated() {
	return activation != 0;
}


/*
16449 - Corruption
16464 - Greater corruption
16429 - Master corruption
68615 - Supreme corruption

16465 - Salvation
16524 - Greater salvation
16450 - Master salvation
68611 - supreme salvation.

68605 - Harmony.
68610 - Greater harmony.
68607 - Master harmony.
68613 - Supreme harmony.
</code></pre>
<p>*/<br>
public int getAuraModelId2() {<br>
int aura = player.getEquipment().getAuraId();<br>
switch (aura) {<br>
case 22905:	//Corruption.<br>
return 16449;<br>
case 22899:	//Salvation.<br>
return 16465;<br>
case 23848:	//Harmony.<br>
return 68605;<br>
case 22907:	//Greater corruption.<br>
return 16464;<br>
case 22901:	//Greater salvation.<br>
return 16524;<br>
case 23850:	//Greater harmony.<br>
return 68610;<br>
case 22909:	//Master corruption.<br>
return 16429;<br>
case 22903:	//Master salvation.<br>
return 16450;<br>
case 23852:	//Master harmony.<br>
return 68607;<br>
case 23874:	//Supreme corruption.<br>
return 68615;<br>
case 23876:	//Supreme salvation.<br>
return 68611;<br>
case 23854:	//Supreme harmony.<br>
return 68613;<br>
default:<br>
Logger.log(“AurasManager”, "Unknown wings: "+aura);<br>
return -1;<br>
}<br>
}</p>
<pre><code>public int getAuraModelId() {
	Item weapon = player.getEquipment().getItem(Equipment.SLOT_WEAPON);
	if (weapon == null)
		return 8719;
	String name = weapon.getDefinitions().getName().toLowerCase();
	if (name.contains("dagger"))
		return 8724;
	if (name.contains("whip"))
		return 8725;
	if (name.contains("2h sword") || name.contains("godsword"))
		return 8773;
	if (name.contains("sword") || name.contains("scimitar")
			|| name.contains("korasi"))
		return 8722;
	return 8719;
}

public int getActiveGraphic(int tier) {
	if (tier == 2)
		return 1764;
	if (tier == 3)
		return 1763;
	return 370; // default gold
}

public boolean hasPoisonPurge() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 20958 || aura == 22268;
}

public double getMagicAccurayMultiplier() {
	if (!isActivated() || World.isPvpArea(player))
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20962)
		return 1.03;
	if (aura == 22270)
		return 1.05;
	return 1;
}

public double getRangeAccurayMultiplier() {
	if (!isActivated() || World.isPvpArea(player))
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20967)
		return 1.03;
	if (aura == 22272)
		return 1.05;
	return 1;
}

public double getWoodcuttingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22280)
		return 1.03;
	if (aura == 22282)
		return 1.05;
	return 1;
}

public double getMininingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22284)
		return 1.03;
	if (aura == 22286)
		return 1.05;
	return 1;
}

public double getFishingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20966)
		return 1.03;
	if (aura == 22274)
		return 1.05;
	return 1;
}

public double getPrayerPotsRestoreMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 20965)
		return 1.03;
	if (aura == 22276)
		return 1.05;
	return 1;
}

public double getThievingAccurayMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22288)
		return 1.03;
	if (aura == 22290)
		return 1.05;
	return 1;
}

public double getChanceNotDepleteMN_WC() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22292)
		return 1.1;
	return 1;
}

public boolean usingEquilibrium() {
	if (!isActivated() || World.isPvpArea(player))
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22294;
}

public boolean usingPenance() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22300;
}

/**
 * Gets the prayer experience multiplier.
 * @return The prayer experience multiplier.
 */
public double getPrayerMultiplier() {
	if (!isActivated())
		return 1;
	int aura = player.getEquipment().getAuraId();
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
		return 1.01;
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
		return 1.015;
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
		return 1.02;
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return 1.025;
	}
	return 1.0;
}

/**
 * Gets the amount of prayer points to restore (when getting 500 prayer experience).
 * @return The prayer restoration multiplier.
 */
public double getPrayerRestoration() {
	if (!isActivated())
		return 0;
	int aura = player.getEquipment().getAuraId();
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
		return 0.03;
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
		return 0.05;
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
		return 0.07;
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return 0.1;
	}
	return 0;
}

public void checkSuccefulHits(int damage) {
	if (!isActivated() || World.isPvpArea(player))
		return;
	int aura = player.getEquipment().getAuraId();
	if (aura == 22296)
		useInspiration();
	else if (aura == 22298)
		useVampyrism(damage);
}

public void useVampyrism(int damage) {
	int heal = (int) (damage * 0.05);
	if (heal &gt; 0)
		player.heal(heal);
}

public void useInspiration() {
	Integer atts = (Integer) player.getTemporaryAttributtes().get(
			"InspirationAura");
	if (atts == null)
		atts = 0;
	atts++;
	if (atts == 5) {
		atts = 0;
		player.getCombatDefinitions().restoreSpecialAttack(1);
	}
	player.getTemporaryAttributtes().put("InspirationAura", atts);
}

public boolean usingWisdom() {
	if (!isActivated())
		return false;
	int aura = player.getEquipment().getAuraId();
	return aura == 22302;
}

/**
 * Checks if the aura worn is a winged aura.
 * @return {@code True}.
 */
public boolean isWingedAura(int aura) {
	switch (aura) {
	case 22905:	//Corruption.
	case 22899:	//Salvation.
	case 23848:	//Harmony.
	case 22907:	//Greater corruption.
	case 22901:	//Greater salvation.
	case 23850:	//Greater harmony.
	case 22909:	//Master corruption.
	case 22903:	//Master salvation.
	case 23852:	//Master harmony.
	case 23874:	//Supreme corruption.
	case 23876:	//Supreme salvation.
	case 23854:	//Supreme harmony.
		return true;
	}
	return false;
}
/*
 * return seconds
 */
public static int getActivationTime(int aura) {
	switch (aura) {
	case 20958:
		return 1; // 10minutes
	case 22268:
		return 1; // 20minutes
	case 22302:
		return 1; // 30minutes
	case 22294:
		return 1; // 2hours
	case 20959:
		return 1; // 3hours
	case 23854:
		return 1;
	case 23874:
		return 1;
	case 23876:
		return 1;
	default:
		return 1; // default 1hour
	}
}

public static int getCooldown(int aura) {
	switch (aura) {
	case 23854:
		return 1;
	case 23874:
		return 1;
	case 23876:
		return 1;
	default:
	    return 1;
	}
}

public static int getTier(int aura) {
	switch (aura) {
	case 23874:
	case 23876:
	case 23854:
		return 4;
	case 22302:
	case 22909:
	case 22903:
	case 23852:
		return 3;
	case 22907:
	case 22901:
	case 23850:
	case 20959:
	case 22270:
	case 22272:
	case 22282:
	case 22286:
	case 22274:
	case 22276:
	case 22290:
	case 22292:
	case 22294:
	case 22296:
	case 22298:
	case 22300:
		return 2;
	default:
		return 1; // default 1
	}
}
</code></pre>
<p>}<br>
[/code]<br>
try it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/6</link>
        <pubDate>Tue, 01 Jan 2013 23:41:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-6</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>Here is the link to download the whole aura manager file:<br>
<a href="http://www.mediafire.com/?j60j3axp8x7tyqn" class="onebox" target="_blank" rel="nofollow noopener">http://www.mediafire.com/?j60j3axp8x7tyqn</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/5</link>
        <pubDate>Tue, 01 Jan 2013 21:42:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-5</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@aciraccar aciraccar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aciraccar">@aciraccar</a> wrote:</p>
          <blockquote>
              <p>mind posting the code or something…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/4</link>
        <pubDate>Tue, 01 Jan 2013 20:43:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-4</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>Dont you think i already tried? Ive found out that it is in auramanager but i dont know what to change…i tested some stuff but it didnt work…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/3</link>
        <pubDate>Tue, 01 Jan 2013 19:43:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-3</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@ohokay ohokay]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ohokay">@ohokay</a> wrote:</p>
          <blockquote>
              <p>Look for the timer?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/2</link>
        <pubDate>Tue, 01 Jan 2013 13:10:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-2</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
      <item>
        <title>Aura Help</title>
        <dc:creator><![CDATA[@Host_Gushers Host Gushers]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/host_gushers">@Host_Gushers</a> wrote:</p>
          <blockquote>
              <p>ok i am using a 718/737 and i want to change how long it takes for the aura to charge…Right now its about 17 hours…I want to change it to 1 second…</p>
<p>Thank you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/aura-help/477251/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/aura-help/477251/1</link>
        <pubDate>Tue, 01 Jan 2013 10:15:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477251-1</guid>
        <source url="https://forum.moparisthebest.com/t/aura-help/477251.rss">Aura Help</source>
      </item>
  </channel>
</rss>
