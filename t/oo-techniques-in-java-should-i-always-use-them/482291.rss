<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>OO techniques in Java, should I ALWAYS use them?</title>
    <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291</link>
    <description>I know Java is verbose in itself but making it so that all of your code is re-usable tends to become just SO clumsy after a while...
Is it bad if I just program things as-is?
Like, is it OK if I just use my width/height in the program itself? (constants)
And for user-input (keyboard/mouse) is it OK if I just fill the methods in in the object itself rather than having to do

comp = new comp();
comp.addKeyListener(new KeyListerner() {
very very very long ugly shit goes in here....
});

I just find it annoying to feel guilty every single time I fill everything in on the spot...</description>
    
    <lastBuildDate>Tue, 19 Feb 2013 00:59:19 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“s1gma, post:9, topic:482291”][quote author=sinisoul link=topic=600530.msg4217183#msg4217183 date=1360433256]<br>
I hate using anonymous classes usually because they look ugly and also it screws with your information flow unless it has one specific purpose.<br>
[/quote]<br>
u fukin wot[/quote]</p>
<p>You heard me you scrub</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/10</link>
        <pubDate>Tue, 19 Feb 2013 00:59:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-10</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="482291">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sinisoul/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sinisoul:</div>
<blockquote>
<p>I hate using anonymous classes usually because they look ugly and also it screws with your information flow unless it has one specific purpose.</p>
</blockquote>
</aside>
<p>u fukin wot</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/9</link>
        <pubDate>Sun, 17 Feb 2013 14:14:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-9</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@Cres Cres]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cres">@Cres</a> wrote:</p>
          <blockquote>
              <p>[quote=“sinisoul, post:7, topic:482291”][quote author=Cres link=topic=600530.msg4220414#msg4220414 date=1360708920]</p>
<aside class="quote">
<blockquote>
<p>I’m not sure what you mean by this question. Java is an exclusively object oriented language. You can only facilitate its object oriented features and nothing else. Which design patterns you decide upon is different. We can’t necessarily recommend one design pattern over another, as what you need changes with the application you’re developing. All I can really recommend is that you are smart about designing things and focus on abstraction. If you write a very specific and unabstract application, then it will get very difficult to maintain and is far more bug-prone. Adding and removing features will also be very difficult and complex. Abstraction solves all of these. You just need to make sure you figure out what you’re abstracting before you begin development.</p>
</blockquote>
</aside>
<p>It’s the very same abstraction of over 5 classes altogether that makes it so…clumsy… In the end I only have 1 use for somthing that I had programmed abstractly. Why wouldn’t I be able to just make it do it’s specific job?<br>
[/quote]</p>
<p>You’re doing something wrong then.[/quote]</p>
<p>Actually it looks all fancy ‘n’ stuff, it looks like somthing that would be in the JDK. I did my very best to get it to what is but still, maybe I can’t imagine another use for it atm but it looks like a waste. It’s meant to be ‘re-usable’ but I only see a handfull of uses for it o.o</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/8</link>
        <pubDate>Wed, 13 Feb 2013 12:27:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-8</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“Cres, post:5, topic:482291”][quote author=Taharok link=topic=600530.msg4218202#msg4218202 date=1360530926]<br>
I’m not sure what you mean by this question. Java is an exclusively object oriented language. You can only facilitate its object oriented features and nothing else. Which design patterns you decide upon is different. We can’t necessarily recommend one design pattern over another, as what you need changes with the application you’re developing. All I can really recommend is that you are smart about designing things and focus on abstraction. If you write a very specific and unabstract application, then it will get very difficult to maintain and is far more bug-prone. Adding and removing features will also be very difficult and complex. Abstraction solves all of these. You just need to make sure you figure out what you’re abstracting before you begin development.<br>
[/quote]</p>
<p>It’s the very same abstraction of over 5 classes altogether that makes it so…clumsy… In the end I only have 1 use for somthing that I had programmed abstractly. Why wouldn’t I be able to just make it do it’s specific job?[/quote]</p>
<p>You’re doing something wrong then.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/7</link>
        <pubDate>Wed, 13 Feb 2013 06:32:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-7</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@Hash1 Hash1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hash1">@Hash1</a> wrote:</p>
          <blockquote>
              <p>[quote=“Cres, post:5, topic:482291”][quote author=Taharok link=topic=600530.msg4218202#msg4218202 date=1360530926]<br>
I’m not sure what you mean by this question. Java is an exclusively object oriented language. You can only facilitate its object oriented features and nothing else. Which design patterns you decide upon is different. We can’t necessarily recommend one design pattern over another, as what you need changes with the application you’re developing. All I can really recommend is that you are smart about designing things and focus on abstraction. If you write a very specific and unabstract application, then it will get very difficult to maintain and is far more bug-prone. Adding and removing features will also be very difficult and complex. Abstraction solves all of these. You just need to make sure you figure out what you’re abstracting before you begin development.<br>
[/quote]</p>
<p>It’s the very same abstraction of over 5 classes altogether that makes it so…clumsy… In the end I only have 1 use for somthing that I had programmed abstractly. Why wouldn’t I be able to just make it do it’s specific job?[/quote]</p>
<p>Imagine this:</p>
<p><code>public void init() {
    crafting.start();
    herblore.start();
    firemaking.start();
    Etc...
}</code></p>
<p>While you could have done:</p>
<p><code>
public void init() {
  skills.start();
}</code></p>
<p>And then implement the start method in every skills class. It saves you a lot of work and is by far easier. That’s an example of abstraction.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/6</link>
        <pubDate>Tue, 12 Feb 2013 23:34:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-6</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@Cres Cres]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cres">@Cres</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="4" data-topic="482291">
<div class="title">
<div class="quote-controls"></div>
 Taharok:</div>
<blockquote>
<p>I’m not sure what you mean by this question. Java is an exclusively object oriented language. You can only facilitate its object oriented features and nothing else. Which design patterns you decide upon is different. We can’t necessarily recommend one design pattern over another, as what you need changes with the application you’re developing. All I can really recommend is that you are smart about designing things and focus on abstraction. If you write a very specific and unabstract application, then it will get very difficult to maintain and is far more bug-prone. Adding and removing features will also be very difficult and complex. Abstraction solves all of these. You just need to make sure you figure out what you’re abstracting before you begin development.</p>
</blockquote>
</aside>
<p>It’s the very same abstraction of over 5 classes altogether that makes it so…clumsy… In the end I only have 1 use for somthing that I had programmed abstractly. Why wouldn’t I be able to just make it do it’s specific job?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/5</link>
        <pubDate>Tue, 12 Feb 2013 22:42:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-5</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>I’m not sure what you mean by this question. Java is an exclusively object oriented language. You can only facilitate its object oriented features and nothing else. Which design patterns you decide upon is different. We can’t necessarily recommend one design pattern over another, as what you need changes with the application you’re developing. All I can really recommend is that you are smart about designing things and focus on abstraction. If you write a very specific and unabstract application, then it will get very difficult to maintain and is far more bug-prone. Adding and removing features will also be very difficult and complex. Abstraction solves all of these. You just need to make sure you figure out what you’re abstracting before you begin development.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/4</link>
        <pubDate>Sun, 10 Feb 2013 21:15:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-4</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@Cres Cres]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cres">@Cres</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="482291">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sinisoul/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> sinisoul:</div>
<blockquote>
<p>It’s not clumsy if you do it right. I hate using anonymous classes usually because they look ugly and also it screws with your information flow unless it has one specific purpose. There’s nothing wrong with creating a key listener, for one, it will allow you to declare functionality you may need later in a separate location then the method you would have declared the anonymous class at. There is always a trade off in your methodology.</p>
</blockquote>
</aside>
<p>IMO whether you’re using the method I mentioned above or this method:</p>
<p>[code=java]public class GameScreen extends JPanel implements KeyListener, MouseListener {</p>
<pre><code>private boolean crossMenuOpen;

private long lastKeyInput;
private long lastMouseInput;

private Player p;

public GameScreen() {
	setFocusable(true);
	setDoubleBuffered(true);
	addMouseListener(this);
	addKeyListener(this);
	setCrossMenuOpen(false);
	p = new Player();
	lastKeyInput = System.currentTimeMillis();
	lastMouseInput = System.currentTimeMillis();
}[/code]
</code></pre>
<p>You get the same result (also note, the whole game will be based off of that class and the Player class will be containing the data for the current user). I only recently used the latest method. Why? The other one gets so chaotic to work with…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/3</link>
        <pubDate>Sat, 09 Feb 2013 18:14:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-3</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>It’s not clumsy if you do it right. I hate using anonymous classes usually because they look ugly and also it screws with your information flow unless it has one specific purpose. There’s nothing wrong with creating a key listener, for one, it will allow you to declare functionality you may need later in a separate location then the method you would have declared the anonymous class at. There is always a trade off in your methodology.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/2</link>
        <pubDate>Sat, 09 Feb 2013 18:07:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-2</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
      <item>
        <title>OO techniques in Java, should I ALWAYS use them?</title>
        <dc:creator><![CDATA[@Cres Cres]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cres">@Cres</a> wrote:</p>
          <blockquote>
              <p>I know Java is verbose in itself but making it so that all of your code is re-usable tends to become just SO clumsy after a while…<br>
Is it bad if I just program things as-is?<br>
Like, is it OK if I just use my width/height in the program itself? (constants)<br>
And for user-input (keyboard/mouse) is it OK if I just fill the methods in in the object itself rather than having to do</p>
<p>comp = new comp();<br>
comp.addKeyListener(new KeyListerner() {<br>
very very very long ugly shit goes in here…<br>
});</p>
<p>I just find it annoying to feel guilty every single time I fill everything in on the spot…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291/1</link>
        <pubDate>Sat, 09 Feb 2013 18:00:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-482291-1</guid>
        <source url="https://forum.moparisthebest.com/t/oo-techniques-in-java-should-i-always-use-them/482291.rss">OO techniques in Java, should I ALWAYS use them?</source>
      </item>
  </channel>
</rss>
