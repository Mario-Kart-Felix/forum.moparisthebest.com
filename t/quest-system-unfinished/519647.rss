<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Quest System - Unfinished</title>
    <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647</link>
    <description>This is a quest base that I worked on around a year ago or so; I haven&#39;t really got round to finishing it. I haven&#39;t tested it at all - it should work in theory, though.

Things missing:

[ul][li]Quest journal interface (The scroll interface that contains what you have done hints for the ques etc).[/li]
[li]Quest progression saving/loading.[/li][/ul]


Should be easy enough to implement and finish with a bit of time.

The template Quest abstract class:
[code=java]package org.iClarity.rs2.content.quest.quests;

import org.iClarity.rs2.content.quest.QuestRequirements;
import org.iClarity.rs2.content.quest.QuestReward;

/**
 * The template for a quest.
 * @author PrimaDude.
 */
public abstract class Quest {
	
	/**
	 * The current quest progression.
	 */
	private int progression;
	
	/**
	 * The progression value at quest completion.
	 */
	public abstract int getMaximumProgression();
	
	/**
	 * The name of the quest.
	 */
	public abstract String getName();
	
	/**
	 * The string id of the quest name in the quest log.
	 */
	public abstract int getQuestLogId();
	
	/**
	 * The requirements for the quest.
	 */
	public abstract QuestRequirements getRequirements();
	
	/**
	 * The reward for the quest.
	 */
	public abstract QuestReward getReward();

	/**
	 * Gets the quest progression.
	 * @return The progression.
	 */
	public int getProgression() {
		return progression;
	}
	
	/**
	 * If the quest is finished.
	 * @return True or false.
	 */
	public boolean isCompleted() {
		return (progression == getMaximumProgression());
	}
	
	/**
	 * Sets the quest progression.
	 * @param progression The progression to set.
	 */
	public void setProgression(int progression) {
		this.progression = progression;
	}

}[/code]

The QuestRequirement class:
[code=java]package org.iClarity.rs2.content.quest;

import java.util.Map;

import org.iClarity.rs2.content.quest.quests.Quest;

/**
 * The requirements needed to start this quest.
 * @author PrimaDude.
 */
public class QuestRequirements {
	
	/**
	 * The minimum number of quest points required to start this quest.
	 */
	private int questPoints;
	
	/**
	 * The completed quests required to start this quest.
	 */
	private Quest[] completedQuests;
	
	/**
	 * The level requirements to start this quest.
	 * - The key for a value is the skill type.
	 * - The value of that key is the level required.
	 */
	private Map&lt;Integer, Integer&gt; levels;

	/**
	 * Gets the level requirements.
	 * @return The level requirements.
	 */
	public Map&lt;Integer, Integer&gt; getLevels() {
		return levels;
	}
	
	/**
	 * Gets the quest point requirement.
	 * @return The quest point requirement.
	 */
	public int getQuestPoints() {
		return questPoints;
	}
	
	/**
	 * Gets the completed quest requirements.
	 * @return The completed quest requirements.
	 */
	public Quest[] getCompletedQuests() {
		return completedQuests;
	}

	/**
	 * Constructs a new QuestRequirements instance.
	 * @param completedQuests The completed quests required.
	 * @param levels The levels required.
	 */
	public QuestRequirements(int questPoints, Quest[] completedQuests, Map&lt;Integer, Integer&gt; levels) {
		this.questPoints = questPoints;
		this.completedQuests = completedQuests;
		this.levels = levels;
	}

}[/code]

The QuestReward class:
[code=java]package org.iClarity.rs2.content.quest;

import java.util.Map;

import org.iClarity.rs2.util.items.Item;

/**
 * Represents the quest reward given to the
 * player upon completion of the quest.
 * @author PrimaDude.
 */
public class QuestReward {
	
	/**
	 * The item rewards given.
	 */
	private Item[] itemRewards;
	
	/**
	 * The experience rewards given.
	 * - The key for a value is the skill type.
	 * - The value of that key is the amount of experience to be given in that skill.
	 */
	private Map&lt;Integer, Integer&gt; experience;

	/**
	 * Gets the item rewards.
	 * @return The item rewards.
	 */
	public Item[] getItemRewards() {
		return itemRewards;
	}

	/**
	 * Gets the experience rewards.
	 * @return The experience.
	 */
	public Map&lt;Integer, Integer&gt; getExperience() {
		return experience;
	}
	
	/**
	 * Constructs a new QuestReward.
	 * @param itemRewards The item rewards given.
	 * @param experience The experience given.
	 */
	public QuestReward(Item[] itemRewards, Map&lt;Integer, Integer&gt; experience) {
		this.itemRewards = itemRewards;
		this.experience = experience;
	}

}[/code]

The QuestValues class:
[code=java]package org.iClarity.rs2.content.quest;

import java.util.Map;

/**
 * Contains each player&#39;s quest values.
 * @author PrimaDude.
 */
public class QuestValues {
	
	private int questPoints;
	
	/**
	 * Contains each quest progression for the player.
	 * &lt;Quest Name, Progression Value&gt;.
	 */
	public Map&lt;String, Integer&gt; questProgression;
	
	/**
	 * Gets the player&#39;s quest point value.
	 * @return The quest points.
	 */
	public int getQuestPoints() {
		return questPoints;
	}

	/**
	 * Gets the player&#39;s quest progression values.
	 * @return The quest progression.
	 */
	public Map&lt;String, Integer&gt; getQuestProgression() {
		return questProgression;
	}
	
	/**
	 * Gets the player&#39;s quest progression values.
	 * @return The quest progression.
	 */
	public int getQuestProgression(String quest) {
		return questProgression.get(quest);
	}

	/**
	 * Sets the player&#39;s quest points.
	 * @param questPoints The quest points to set.
	 */
	public void setQuestPoints(int questPoints) {
		this.questPoints = questPoints;
	}

	/**
	 * Sets the player&#39;s quest progressions.
	 * @param questProgression The quest progressions to set.
	 */
	public void setQuestProgression(Map&lt;String, Integer&gt; questProgression) {
		this.questProgression = questProgression;
	}	

}[/code]

Finally, where most of the quest logic is done; the QuestWork class:
[code=java]package org.iClarity.rs2.content.quest;

import org.iClarity.rs2.Constants;
import org.iClarity.rs2.content.quest.quests.Quest;
import org.iClarity.rs2.model.player.Player;
import org.iClarity.rs2.util.TextUtil;
import org.iClarity.rs2.util.items.Item;
import org.iClarity.rs2.util.items.ItemDefinition;
import org.iClarity.rs2.util.items.ItemDefinitions;
import org.iClarity.rs2.util.items.ItemHandler;

/**
 * Represents a quest.
 * @author PrimaDude.
 */
public class QuestWork {
	
	/**
	 * The string ids of each line in the quest journal interface.
	 */
	public static int[] journalIds = {
		8145, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158, 
		8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171, 
		8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184, 
		8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194, 8195, 12174, 12175, 
		12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184, 12185, 12186, 12187, 
		12188, 12189, 12190, 12191, 12192, 12193, 12194, 12195, 12196, 12197, 12198, 12199, 
		12200, 12201, 12202, 12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211, 
		12212, 12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220, 12221, 12222, 12223
	};

	/**
	 * Opens the quest journal for the player.
	 * @param player The player.
	 */
	public static void openJournal(Player player) {
		// TODO
	}
	
	/**
	 * Checks quest data upon login and changes the quest log accordingly.
	 * @param player The player.
	 */
	public static void logChange(Player player, Quest quest) {
		if ((quest.getProgression() &gt; 0) &amp;&amp; (quest.getProgression() != quest.getMaximumProgression())) {
			player.getActionSender().sendString(&quot;@yel&quot; + quest.getName(), quest.getQuestLogId());
		} else if (quest.getProgression() == quest.getMaximumProgression()) {
			player.getActionSender().sendString(&quot;@gre&quot; + quest.getName(), quest.getQuestLogId());
		}
	}
	
	/**
	 * Progresses this quest for the player.
	 * This should be placed in events like dialogue, killing an NPC,
	 * using an object, obtaining an item etc.
	 * @param player The player.
	 */
	public static void progress(Player player, Quest quest) {
		if (quest.isCompleted()) {
			return;
		}
		quest.setProgression(quest.getProgression() + 1);
		if ((quest.getProgression() &gt; 0) &amp;&amp; (quest.getProgression() != quest.getMaximumProgression())) {
			if (quest.getProgression() == 1) {
				if (!meetsRequirements(player, quest)) {
					quest.setProgression(0);
					return;
				}
			}
		} else if (quest.getProgression() == quest.getMaximumProgression()) {
			completion(player, quest);
		}
		logChange(player, quest);
	}
	
	/**
	 * Checks if the player meets the quest starting requirements.
	 * @param player The player.
	 * @return True or false.
	 */
	public static boolean meetsRequirements(Player player, Quest quest) {
		if (quest.getRequirements() != null) {
			if (quest.getRequirements().getQuestPoints() &gt; player.getQuestValues().getQuestPoints()) {
				return false;
			}
			if (quest.getRequirements().getLevels() != null) {
				for (int skill = 0; skill &lt; quest.getRequirements().getLevels().size(); skill++) {
					if (quest.getRequirements().getLevels().get(skill) == null) {
						continue;
					} else if (player.getSkills().get()[skill].getLevel() &lt; quest.getRequirements().getLevels().get(skill)) {
						return false;
					}
				}
			}
			if (quest.getRequirements().getCompletedQuests() != null) {
				for (Quest q : quest.getRequirements().getCompletedQuests()) {
					if (q == null) {
						continue;
					} else if (!q.isCompleted()) {
						return false;
					}
				}				
			}
		}
		return true;
	}

	/**
	 * Completes the quest for the player.
	 * @param player The player.
	 */
	public static void completion(Player player, Quest quest) {
		int id = 0;
		player.getActionSender().sendInterface(12140);
		player.getActionSender().sendString(&quot;You have completed &quot;+ quest.getName() +&quot;!&quot;, 12144);
		for (int skill = 0; skill &lt; quest.getReward().getExperience().size(); skill++) {
			if (quest.getReward().getExperience().get(skill) != null) {
				id++;
				player.getSkills().addSkillXP(player, skill, quest.getReward().getExperience().get(skill));
				player.getActionSender().sendString(quest.getReward().getExperience().get(skill)+&quot; &quot;+ TextUtil.capitalise(Constants.SKILL_NAMES[skill]) +&quot; XP.&quot;, 12150 + id);
			}
		}
		ItemDefinition definition = null;
		for (Item item : quest.getReward().getItemRewards()) {
			if (item == null) {
				continue;
			} else if (!player.getInventory().get().insert(item)) {
					ItemHandler.createGroundItem(item, player);
			}
			id++;
			definition = ItemDefinitions.get(item.getId());
			player.getActionSender().sendString((definition.isStackable() ? (item.getAmount() +&quot; &quot;) : &quot;&quot;)+definition.getName(), 12150 + id);
		}	
		player.getActionSender().sendInventory();
	}

}[/code]</description>
    
    <lastBuildDate>Sat, 08 Jun 2013 22:00:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@Fire_capez Fire capez]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fire_capez">@Fire_capez</a> wrote:</p>
          <blockquote>
              <p>lol you still use the name iclarity, welcome back.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/7</link>
        <pubDate>Sat, 08 Jun 2013 22:00:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-7</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@Ambokile Ambokile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ambokile">@Ambokile</a> wrote:</p>
          <blockquote>
              <p>Very clean, nice job!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/6</link>
        <pubDate>Fri, 07 Jun 2013 22:58:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-6</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I wouldn’t think you would need an extra class just for the reward.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/5</link>
        <pubDate>Fri, 07 Jun 2013 22:47:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-5</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>Great work, don’t understand most of the things tbh, but it looks neat.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/4</link>
        <pubDate>Tue, 21 May 2013 03:48:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-4</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>this is great, ill definitely reference this when creating a quest system. thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/3</link>
        <pubDate>Tue, 21 May 2013 03:37:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-3</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>Your back!!! My inspiration man!!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/2</link>
        <pubDate>Tue, 21 May 2013 01:52:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-2</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
      <item>
        <title>Quest System - Unfinished</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <p>This is a quest base that I worked on around a year ago or so; I haven’t really got round to finishing it. I haven’t tested it at all - it should work in theory, though.</p>
<p>Things missing:</p>
<p>[ul][li]Quest journal interface (The scroll interface that contains what you have done hints for the ques etc).[/li]<br>
[li]Quest progression saving/loading.[/li][/ul]</p>
<p>Should be easy enough to implement and finish with a bit of time.</p>
<p>The template Quest abstract class:</p>
<p>[code=java]package org.iClarity.rs2.content.quest.quests;</p>
<p>import org.iClarity.rs2.content.quest.QuestRequirements;<br>
import org.iClarity.rs2.content.quest.QuestReward;</p>
<p>/**</p>
<ul>
<li>
<p>The template for a quest.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public abstract class Quest {</p>
<p>/**</p>
<ul>
<li>The current quest progression.<br>
*/<br>
private int progression;</li>
</ul>
<p>/**</p>
<ul>
<li>The progression value at quest completion.<br>
*/<br>
public abstract int getMaximumProgression();</li>
</ul>
<p>/**</p>
<ul>
<li>The name of the quest.<br>
*/<br>
public abstract String getName();</li>
</ul>
<p>/**</p>
<ul>
<li>The string id of the quest name in the quest log.<br>
*/<br>
public abstract int getQuestLogId();</li>
</ul>
<p>/**</p>
<ul>
<li>The requirements for the quest.<br>
*/<br>
public abstract QuestRequirements getRequirements();</li>
</ul>
<p>/**</p>
<ul>
<li>The reward for the quest.<br>
*/<br>
public abstract QuestReward getReward();</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the quest progression.</li>
<li>
<a class="mention" href="/u/return">@return</a> The progression.<br>
*/<br>
public int getProgression() {<br>
return progression;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>If the quest is finished.</li>
<li>
<a class="mention" href="/u/return">@return</a> True or false.<br>
*/<br>
public boolean isCompleted() {<br>
return (progression == getMaximumProgression());<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the quest progression.</li>
<li>
<a class="mention" href="/u/param">@param</a> progression The progression to set.<br>
*/<br>
public void setProgression(int progression) {<br>
this.progression = progression;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The QuestRequirement class:</p>
<p>[code=java]package org.iClarity.rs2.content.quest;</p>
<p>import java.util.Map;</p>
<p>import org.iClarity.rs2.content.quest.quests.Quest;</p>
<p>/**</p>
<ul>
<li>
<p>The requirements needed to start this quest.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class QuestRequirements {</p>
<p>/**</p>
<ul>
<li>The minimum number of quest points required to start this quest.<br>
*/<br>
private int questPoints;</li>
</ul>
<p>/**</p>
<ul>
<li>The completed quests required to start this quest.<br>
*/<br>
private Quest[] completedQuests;</li>
</ul>
<p>/**</p>
<ul>
<li>The level requirements to start this quest.</li>
<li>
<ul>
<li>The key for a value is the skill type.</li>
</ul>
</li>
<li>
<ul>
<li>The value of that key is the level required.<br>
*/<br>
private Map&lt;Integer, Integer&gt; levels;</li>
</ul>
</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the level requirements.</li>
<li>
<a class="mention" href="/u/return">@return</a> The level requirements.<br>
*/<br>
public Map&lt;Integer, Integer&gt; getLevels() {<br>
return levels;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the quest point requirement.</li>
<li>
<a class="mention" href="/u/return">@return</a> The quest point requirement.<br>
*/<br>
public int getQuestPoints() {<br>
return questPoints;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the completed quest requirements.</li>
<li>
<a class="mention" href="/u/return">@return</a> The completed quest requirements.<br>
*/<br>
public Quest[] getCompletedQuests() {<br>
return completedQuests;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new QuestRequirements instance.</li>
<li>
<a class="mention" href="/u/param">@param</a> completedQuests The completed quests required.</li>
<li>
<a class="mention" href="/u/param">@param</a> levels The levels required.<br>
*/<br>
public QuestRequirements(int questPoints, Quest[] completedQuests, Map&lt;Integer, Integer&gt; levels) {<br>
this.questPoints = questPoints;<br>
this.completedQuests = completedQuests;<br>
this.levels = levels;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The QuestReward class:</p>
<p>[code=java]package org.iClarity.rs2.content.quest;</p>
<p>import java.util.Map;</p>
<p>import org.iClarity.rs2.util.items.Item;</p>
<p>/**</p>
<ul>
<li>
<p>Represents the quest reward given to the</p>
</li>
<li>
<p>player upon completion of the quest.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class QuestReward {</p>
<p>/**</p>
<ul>
<li>The item rewards given.<br>
*/<br>
private Item[] itemRewards;</li>
</ul>
<p>/**</p>
<ul>
<li>The experience rewards given.</li>
<li>
<ul>
<li>The key for a value is the skill type.</li>
</ul>
</li>
<li>
<ul>
<li>The value of that key is the amount of experience to be given in that skill.<br>
*/<br>
private Map&lt;Integer, Integer&gt; experience;</li>
</ul>
</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the item rewards.</li>
<li>
<a class="mention" href="/u/return">@return</a> The item rewards.<br>
*/<br>
public Item[] getItemRewards() {<br>
return itemRewards;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the experience rewards.</li>
<li>
<a class="mention" href="/u/return">@return</a> The experience.<br>
*/<br>
public Map&lt;Integer, Integer&gt; getExperience() {<br>
return experience;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new QuestReward.</li>
<li>
<a class="mention" href="/u/param">@param</a> itemRewards The item rewards given.</li>
<li>
<a class="mention" href="/u/param">@param</a> experience The experience given.<br>
*/<br>
public QuestReward(Item[] itemRewards, Map&lt;Integer, Integer&gt; experience) {<br>
this.itemRewards = itemRewards;<br>
this.experience = experience;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The QuestValues class:</p>
<p>[code=java]package org.iClarity.rs2.content.quest;</p>
<p>import java.util.Map;</p>
<p>/**</p>
<ul>
<li>
<p>Contains each player’s quest values.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class QuestValues {</p>
<p>private int questPoints;</p>
<p>/**</p>
<ul>
<li>Contains each quest progression for the player.</li>
<li>&lt;Quest Name, Progression Value&gt;.<br>
*/<br>
public Map&lt;String, Integer&gt; questProgression;</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the player’s quest point value.</li>
<li>
<a class="mention" href="/u/return">@return</a> The quest points.<br>
*/<br>
public int getQuestPoints() {<br>
return questPoints;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the player’s quest progression values.</li>
<li>
<a class="mention" href="/u/return">@return</a> The quest progression.<br>
*/<br>
public Map&lt;String, Integer&gt; getQuestProgression() {<br>
return questProgression;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the player’s quest progression values.</li>
<li>
<a class="mention" href="/u/return">@return</a> The quest progression.<br>
*/<br>
public int getQuestProgression(String quest) {<br>
return questProgression.get(quest);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the player’s quest points.</li>
<li>
<a class="mention" href="/u/param">@param</a> questPoints The quest points to set.<br>
*/<br>
public void setQuestPoints(int questPoints) {<br>
this.questPoints = questPoints;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the player’s quest progressions.</li>
<li>
<a class="mention" href="/u/param">@param</a> questProgression The quest progressions to set.<br>
*/<br>
public void setQuestProgression(Map&lt;String, Integer&gt; questProgression) {<br>
this.questProgression = questProgression;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>Finally, where most of the quest logic is done; the QuestWork class:</p>
<p>[code=java]package org.iClarity.rs2.content.quest;</p>
<p>import org.iClarity.rs2.Constants;<br>
import org.iClarity.rs2.content.quest.quests.Quest;<br>
import org.iClarity.rs2.model.player.Player;<br>
import org.iClarity.rs2.util.TextUtil;<br>
import org.iClarity.rs2.util.items.Item;<br>
import org.iClarity.rs2.util.items.ItemDefinition;<br>
import org.iClarity.rs2.util.items.ItemDefinitions;<br>
import org.iClarity.rs2.util.items.ItemHandler;</p>
<p>/**</p>
<ul>
<li>
<p>Represents a quest.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class QuestWork {</p>
<p>/**</p>
<ul>
<li>The string ids of each line in the quest journal interface.<br>
*/<br>
public static int[] journalIds = {<br>
8145, 8147, 8148, 8149, 8150, 8151, 8152, 8153, 8154, 8155, 8156, 8157, 8158,<br>
8159, 8160, 8161, 8162, 8163, 8164, 8165, 8166, 8167, 8168, 8169, 8170, 8171,<br>
8172, 8173, 8174, 8175, 8176, 8177, 8178, 8179, 8180, 8181, 8182, 8183, 8184,<br>
8185, 8186, 8187, 8188, 8189, 8190, 8191, 8192, 8193, 8194, 8195, 12174, 12175,<br>
12176, 12177, 12178, 12179, 12180, 12181, 12182, 12183, 12184, 12185, 12186, 12187,<br>
12188, 12189, 12190, 12191, 12192, 12193, 12194, 12195, 12196, 12197, 12198, 12199,<br>
12200, 12201, 12202, 12203, 12204, 12205, 12206, 12207, 12208, 12209, 12210, 12211,<br>
12212, 12213, 12214, 12215, 12216, 12217, 12218, 12219, 12220, 12221, 12222, 12223<br>
};</li>
</ul>
<p>/**</p>
<ul>
<li>Opens the quest journal for the player.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.<br>
*/<br>
public static void openJournal(Player player) {<br>
// TODO<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks quest data upon login and changes the quest log accordingly.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.<br>
*/<br>
public static void logChange(Player player, Quest quest) {<br>
if ((quest.getProgression() &gt; 0) &amp;&amp; (quest.getProgression() != quest.getMaximumProgression())) {<br>
player.getActionSender().sendString("<span class="mention">@yel</span>" + quest.getName(), quest.getQuestLogId());<br>
} else if (quest.getProgression() == quest.getMaximumProgression()) {<br>
player.getActionSender().sendString("<span class="mention">@gre</span>" + quest.getName(), quest.getQuestLogId());<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Progresses this quest for the player.</li>
<li>This should be placed in events like dialogue, killing an NPC,</li>
<li>using an object, obtaining an item etc.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.<br>
*/<br>
public static void progress(Player player, Quest quest) {<br>
if (quest.isCompleted()) {<br>
return;<br>
}<br>
quest.setProgression(quest.getProgression() + 1);<br>
if ((quest.getProgression() &gt; 0) &amp;&amp; (quest.getProgression() != quest.getMaximumProgression())) {<br>
if (quest.getProgression() == 1) {<br>
if (!meetsRequirements(player, quest)) {<br>
quest.setProgression(0);<br>
return;<br>
}<br>
}<br>
} else if (quest.getProgression() == quest.getMaximumProgression()) {<br>
completion(player, quest);<br>
}<br>
logChange(player, quest);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if the player meets the quest starting requirements.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.</li>
<li>
<a class="mention" href="/u/return">@return</a> True or false.<br>
*/<br>
public static boolean meetsRequirements(Player player, Quest quest) {<br>
if (quest.getRequirements() != null) {<br>
if (quest.getRequirements().getQuestPoints() &gt; player.getQuestValues().getQuestPoints()) {<br>
return false;<br>
}<br>
if (quest.getRequirements().getLevels() != null) {<br>
for (int skill = 0; skill &lt; quest.getRequirements().getLevels().size(); skill++) {<br>
if (quest.getRequirements().getLevels().get(skill) == null) {<br>
continue;<br>
} else if (player.getSkills().get()[skill].getLevel() &lt; quest.getRequirements().getLevels().get(skill)) {<br>
return false;<br>
}<br>
}<br>
}<br>
if (quest.getRequirements().getCompletedQuests() != null) {<br>
for (Quest q : quest.getRequirements().getCompletedQuests()) {<br>
if (q == null) {<br>
continue;<br>
} else if (!q.isCompleted()) {<br>
return false;<br>
}<br>
}				<br>
}<br>
}<br>
return true;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Completes the quest for the player.</li>
<li>
<a class="mention" href="/u/param">@param</a> player The player.<br>
*/<br>
public static void completion(Player player, Quest quest) {<br>
int id = 0;<br>
player.getActionSender().sendInterface(12140);<br>
player.getActionSender().sendString(“You have completed “+ quest.getName() +”!”, 12144);<br>
for (int skill = 0; skill &lt; quest.getReward().getExperience().size(); skill++) {<br>
if (quest.getReward().getExperience().get(skill) != null) {<br>
id++;<br>
player.getSkills().addSkillXP(player, skill, quest.getReward().getExperience().get(skill));<br>
player.getActionSender().sendString(quest.getReward().getExperience().get(skill)+" “+ TextUtil.capitalise(Constants.SKILL_NAMES[skill]) +” XP.", 12150 + id);<br>
}<br>
}<br>
ItemDefinition definition = null;<br>
for (Item item : quest.getReward().getItemRewards()) {<br>
if (item == null) {<br>
continue;<br>
} else if (!player.getInventory().get().insert(item)) {<br>
ItemHandler.createGroundItem(item, player);<br>
}<br>
id++;<br>
definition = ItemDefinitions.get(item.getId());<br>
player.getActionSender().sendString((definition.isStackable() ? (item.getAmount() +" ") : “”)+definition.getName(), 12150 + id);<br>
}	<br>
player.getActionSender().sendInventory();<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/quest-system-unfinished/519647/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/quest-system-unfinished/519647/1</link>
        <pubDate>Sun, 19 May 2013 17:52:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-519647-1</guid>
        <source url="https://forum.moparisthebest.com/t/quest-system-unfinished/519647.rss">Quest System - Unfinished</source>
      </item>
  </channel>
</rss>
