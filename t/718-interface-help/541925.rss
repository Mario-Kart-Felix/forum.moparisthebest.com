<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>718 interface help</title>
    <link>https://forum.moparisthebest.com/t/718-interface-help/541925</link>
    <description>ok so far ive made it when you use a gold bar with furnace it brings up interface 446 which is:[img]http://imageshack.com/a/img18/1245/kdwr.png[/img] now it recognizes the mould and gem and bar(i know i messed up with necklace and ammy) but now im at a standstill and just overwhelmed and cant figure out how to make the make 1,make 5..ect.. and actually delete bar and gem and add ring to inv. i know its something in buttonhandler but im not sure how to connect my jewellerycrafting.java file to buttonhandler and get the items. heres what ive got. [code]package com.rs.game.player.actions;

import com.rs.cache.loaders.ItemDefinitions;
import com.rs.game.Animation;
import com.rs.game.item.Item;
import com.rs.game.player.Player;
import com.rs.game.player.Skills;

/**
 * @author Kova+ (Alex)
 *
 */
public class JewerlyCrafting extends Action {
	
	private static int[] GEMS = { 0, 1607, 1605, 1603, 1601, 1615, 6573 };
	private static int[] RINGS = { 1635, 2550, 2552, 2568, 2570, 2572, 6583 };
	private static int[] BRACELETS = { 11069, 11074, 11079, 11088, 11095, 11118, 11133 };
	private static int[] NECKLACES = { 1654, 3853, 5521, 11194, 11090, 11105, 11128 };
	private static int[] AMULETS = { 1673, 1675, 1677, 1679, 1681, 1683, 6579 };
	private static int[] RING_COMPONENTS = { 81, 83, 85, 87, 89, 91, 93, 96 };
	private static int[] NECKLACE_COMPONENTS = { 67, 69, 71, 73, 75, 77, 79 };
	private static int[] AMULET_COMPONENTS = { 52, 54, 56, 58, 60, 62, 64 };
	private static int[] BRACELET_COMPONENTS = { 32, 34, 36, 38, 40, 42, 44 };
	private static int[] MOULDS = { 1592, 1595, 1597, 11065 };
	private static int NO_RING = 1647, NO_NECKLACE = 1666, NO_AMULET = 1685, NO_BRACELET = 11067, GOLD_BAR = 2357;
	
	public static void sendInterface(Player player) {
		player.getInterfaceManager().sendInterface(446);
		if (player.getInventory().containsItem(MOULDS[0], 1)) {	
			for (int i = 0; i &lt; RING_COMPONENTS.length; i++) {
				player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[i], NO_RING, 1);
				player.getPackets().sendIComponentText(446, 98, &quot;&quot;);
			}
			for (int i = 0; i &lt; GEMS.length; i++) {
				if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
					player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[i], RINGS[i], 1);
				}
			}
			if (player.getInventory().containsItem(MOULDS[0], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
				player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[0], RINGS[0], 1);	
			}
		}
		if (player.getInventory().containsItem(MOULDS[1], 1)) {
			for (int i = 0; i &lt; NECKLACE_COMPONENTS.length; i++) {
				player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[i], NO_NECKLACE, 1);
				player.getPackets().sendIComponentText(446, 22, &quot;&quot;);
			}
			for (int i = 0; i &lt; GEMS.length; i++) {
				if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
					player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[i], NECKLACES[i], 1);
				}
			}
			if (player.getInventory().containsItem(MOULDS[1], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
				player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[0], NECKLACES[0], 1);	
			}
		}
		if (player.getInventory().containsItem(MOULDS[2], 1)) {
			for (int i = 0; i &lt; AMULET_COMPONENTS.length; i++) {
				player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[i], NO_AMULET, 1);
				player.getPackets().sendIComponentText(446, 66, &quot;&quot;);
			}
			for (int i = 0; i &lt; GEMS.length; i++) {
				if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
					player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[i], AMULETS[i], 1);
				}
			}
			if (player.getInventory().containsItem(MOULDS[2], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
				player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[0], AMULETS[0], 1);	
			}
		}
		if (player.getInventory().containsItem(MOULDS[3], 1)) {
			for (int i = 0; i &lt; BRACELET_COMPONENTS.length; i++) {
				player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[i], NO_BRACELET, 1);
				player.getPackets().sendIComponentText(446, 51, &quot;&quot;);
			}
			for (int i = 0; i &lt; GEMS.length; i++) {
				if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
					player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[i], BRACELETS[i], 1);
				}
			}
			if (player.getInventory().containsItem(MOULDS[3], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
				player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[0], BRACELETS[0], 1);	
			}
		}
	}
	
	
	
	public enum JewerlyData {
		GOLD_RING(5, 15, 1635),
		SAPPHIRE_RING(20, 40, 2550),
		EMERALD_RING(27, 55, 2552),
		RUBY_RING(34, 70, 2568),
		DIAMOND_RING(43, 85, 2570),
		DRAGONSTONE_RING(55, 100, 2572),
		ONYX_RING(67, 115, 6583),

		GOLD_NECKLACE(6, 20, 1654),
		SAPPHIRE_NECKLACE(22, 55, 3853),
		EMERALD_NECKLACE(29, 60, 5521),
		RUBY_NECKLACE(40, 75, 11194),
		DIAMOND_NECKLACE(56, 90, 11090),
		DRAGONSTONE_NECKLACE(72, 105, 11105),
		ONYX_NECKLACE(82, 120, 11128),

		GOLD_BRACELET(7, 25, 11069),
		SAPPHIRE_BRACELET( 23, 60, 11074),
		EMERALD_BRACELET(30, 65, 11079),
		RUBY_BRACELET(42, 80, 11088),
		DIAMOND_BRACELET(58, 95, 11095),
		DRAGONSTONE_BRACELET(74, 110, 11118),
		ONYX_BRACELET(84, 125, 11133),

		GOLD_AMULET(8, 30, 1673),
		SAPPHIRE_AMULET(24, 65, 1675),
		EMERALD_AMULET(31, 70, 1677),
		RUBY_AMULET(50, 85, 1679),
		DIAMOND_AMULET(70, 100, 1681),
		DRAGONSTONE_AMULET(80, 150, 1683),
		ONYX_AMULET(90, 165, 6579);

		
		private int level, outcome;
		private double xp;
		
		private JewerlyData(int levelNeeded, double xp, int outcome) {
			this.level = levelNeeded;
			this.xp = xp;
			this.outcome = outcome;
		}
		
		private int getLevel() {
			return level;
		}
		
		private int getOutcome() {
			return outcome;
		}   
		
		private double getXp() {
			return xp;
		}
	}
	
	private int amount;
	private Item gold, gem;
	private JewerlyData data;
	
	public JewerlyCrafting(JewerlyData data, Item gold, Item gem, int amount) {
		this.data = data;
		this.gold = gold;
		this.gem = gem;
		this.amount = amount;
	}
	
	@Override
	public boolean start(Player player) {
		if (checkAll(player)) {
			setActionDelay(player, 1);
			return true;
		}
		return false;
	}
	
	public boolean checkAll(Player player) {
		if (player.getSkills().getLevel(Skills.CRAFTING) &lt; data
				.getLevel()) {
			player.getDialogueManager().startDialogue(
					&quot;SimpleMessage&quot;,
					&quot;You need a crafting level of &quot; + data.getLevel()
					+ &quot; to create that.&quot;);
			return false;
		}
		if (!player.getInventory().containsItem(gold.getId(), 1)) {
			player.getDialogueManager().startDialogue(
					&quot;SimpleMessage&quot;,
					&quot;You don&#39;t have any more &quot;
							+ ItemDefinitions
							.getItemDefinitions(gold.getId())
							.getName().toLowerCase() + &quot;s to use.&quot;);
			return false;
		}
		if (!player.getInventory().containsItem(gem.getId(), 1)) {
			if (gem.getId() == -1) {
				return true;
			}
				player.getDialogueManager().startDialogue(
					&quot;SimpleMessage&quot;,
					&quot;You don&#39;t have any more &quot;
							+ ItemDefinitions
							.getItemDefinitions(gem.getId())
							.getName().toLowerCase() + &quot;s to use.&quot;);
			return false;
		}
		return true;
	}

	@Override
	public boolean process(Player player) {
		return checkAll(player);
	}

	@Override
	public int processWithDelay(Player player) {
		if (gem.getId() == -1) {
			player.getInventory().deleteItem(gold.getId(), 1);
			player.getInventory().addItem(data.getOutcome(), 1);
			player.getSkills().addXp(Skills.CRAFTING, data.getXp());
			player.getPackets().sendGameMessage(
					&quot;You shape the gold bar with the mould to make  &quot; 
							+ ItemDefinitions.getItemDefinitions(data.getOutcome())
							.getName().toLowerCase() + &quot;.&quot;, true);
		} else {
			player.getInventory().deleteItem(gold.getId(), 1);
			player.getInventory().deleteItem(gem.getId(), 1);
			player.getInventory().addItem(data.getOutcome(), 1);
			player.getSkills().addXp(Skills.CRAFTING, data.getXp());
			player.getPackets().sendGameMessage(
				&quot;You bind the Gold bar and the &quot; 
						+ ItemDefinitions.getItemDefinitions(gem.getId())
						.getName().toLowerCase() + &quot; together to make a &quot; + ItemDefinitions.getItemDefinitions(data.getOutcome())
						.getName().toLowerCase() + &quot;.&quot;, true);
		}
		amount--;
		if (amount &lt;= 0)
			return -1;
		player.setNextAnimation(new Animation(3243));
		return 0;
	}

	@Override
	public void stop(final Player player) {
		setActionDelay(player, 3);
	}
}[/code] and this is how i set it up in objecthandler [code]
				if (itemId == 2357 &amp;&amp; object.getId() == 11010) {
					JewerlyCrafting.sendInterface(player); [/code] if someone could help me that would be just fantastic. thanks!a</description>
    
    <lastBuildDate>Sun, 06 Apr 2014 07:55:48 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/718-interface-help/541925.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>718 interface help</title>
        <dc:creator><![CDATA[@jefersonpang jefersonpang]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jefersonpang">@jefersonpang</a> wrote:</p>
          <blockquote>
              <p>ok so far ive made it when you use a gold bar with furnace it brings up interface 446 which is:<img src="http://imageshack.com/a/img18/1245/kdwr.png" alt width="" height=""> now it recognizes the mould and gem and bar(i know i messed up with necklace and ammy) but now im at a standstill and just overwhelmed and cant figure out how to make the make 1,make 5…ect… and actually delete bar and gem and add ring to inv. i know its something in buttonhandler but im not sure how to connect my jewellerycrafting.java file to buttonhandler and get the items. heres what ive got. [code]package com.rs.game.player.actions;</p>
<p>import com.rs.cache.loaders.ItemDefinitions;<br>
import com.rs.game.Animation;<br>
import com.rs.game.item.Item;<br>
import com.rs.game.player.Player;<br>
import com.rs.game.player.Skills;</p>
<p>/**</p>
<ul>
<li>
<span class="mention">@author</span> Kova+ (Alex)</li>
<li>
</li>
</ul>
<p>*/<br>
public class JewerlyCrafting extends Action {</p>
<pre><code>private static int[] GEMS = { 0, 1607, 1605, 1603, 1601, 1615, 6573 };
private static int[] RINGS = { 1635, 2550, 2552, 2568, 2570, 2572, 6583 };
private static int[] BRACELETS = { 11069, 11074, 11079, 11088, 11095, 11118, 11133 };
private static int[] NECKLACES = { 1654, 3853, 5521, 11194, 11090, 11105, 11128 };
private static int[] AMULETS = { 1673, 1675, 1677, 1679, 1681, 1683, 6579 };
private static int[] RING_COMPONENTS = { 81, 83, 85, 87, 89, 91, 93, 96 };
private static int[] NECKLACE_COMPONENTS = { 67, 69, 71, 73, 75, 77, 79 };
private static int[] AMULET_COMPONENTS = { 52, 54, 56, 58, 60, 62, 64 };
private static int[] BRACELET_COMPONENTS = { 32, 34, 36, 38, 40, 42, 44 };
private static int[] MOULDS = { 1592, 1595, 1597, 11065 };
private static int NO_RING = 1647, NO_NECKLACE = 1666, NO_AMULET = 1685, NO_BRACELET = 11067, GOLD_BAR = 2357;

public static void sendInterface(Player player) {
	player.getInterfaceManager().sendInterface(446);
	if (player.getInventory().containsItem(MOULDS[0], 1)) {	
		for (int i = 0; i &lt; RING_COMPONENTS.length; i++) {
			player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[i], NO_RING, 1);
			player.getPackets().sendIComponentText(446, 98, "");
		}
		for (int i = 0; i &lt; GEMS.length; i++) {
			if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
				player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[i], RINGS[i], 1);
			}
		}
		if (player.getInventory().containsItem(MOULDS[0], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
			player.getPackets().sendItemOnIComponent(446, RING_COMPONENTS[0], RINGS[0], 1);	
		}
	}
	if (player.getInventory().containsItem(MOULDS[1], 1)) {
		for (int i = 0; i &lt; NECKLACE_COMPONENTS.length; i++) {
			player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[i], NO_NECKLACE, 1);
			player.getPackets().sendIComponentText(446, 22, "");
		}
		for (int i = 0; i &lt; GEMS.length; i++) {
			if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
				player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[i], NECKLACES[i], 1);
			}
		}
		if (player.getInventory().containsItem(MOULDS[1], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
			player.getPackets().sendItemOnIComponent(446, NECKLACE_COMPONENTS[0], NECKLACES[0], 1);	
		}
	}
	if (player.getInventory().containsItem(MOULDS[2], 1)) {
		for (int i = 0; i &lt; AMULET_COMPONENTS.length; i++) {
			player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[i], NO_AMULET, 1);
			player.getPackets().sendIComponentText(446, 66, "");
		}
		for (int i = 0; i &lt; GEMS.length; i++) {
			if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
				player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[i], AMULETS[i], 1);
			}
		}
		if (player.getInventory().containsItem(MOULDS[2], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
			player.getPackets().sendItemOnIComponent(446, AMULET_COMPONENTS[0], AMULETS[0], 1);	
		}
	}
	if (player.getInventory().containsItem(MOULDS[3], 1)) {
		for (int i = 0; i &lt; BRACELET_COMPONENTS.length; i++) {
			player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[i], NO_BRACELET, 1);
			player.getPackets().sendIComponentText(446, 51, "");
		}
		for (int i = 0; i &lt; GEMS.length; i++) {
			if (player.getInventory().containsItem(GOLD_BAR, 1) &amp;&amp; player.getInventory().containsItem(GEMS[i], 1)) {
				player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[i], BRACELETS[i], 1);
			}
		}
		if (player.getInventory().containsItem(MOULDS[3], 1) &amp;&amp; player.getInventory().containsItem(GOLD_BAR, 1)) {
			player.getPackets().sendItemOnIComponent(446, BRACELET_COMPONENTS[0], BRACELETS[0], 1);	
		}
	}
}



public enum JewerlyData {
	GOLD_RING(5, 15, 1635),
	SAPPHIRE_RING(20, 40, 2550),
	EMERALD_RING(27, 55, 2552),
	RUBY_RING(34, 70, 2568),
	DIAMOND_RING(43, 85, 2570),
	DRAGONSTONE_RING(55, 100, 2572),
	ONYX_RING(67, 115, 6583),

	GOLD_NECKLACE(6, 20, 1654),
	SAPPHIRE_NECKLACE(22, 55, 3853),
	EMERALD_NECKLACE(29, 60, 5521),
	RUBY_NECKLACE(40, 75, 11194),
	DIAMOND_NECKLACE(56, 90, 11090),
	DRAGONSTONE_NECKLACE(72, 105, 11105),
	ONYX_NECKLACE(82, 120, 11128),

	GOLD_BRACELET(7, 25, 11069),
	SAPPHIRE_BRACELET( 23, 60, 11074),
	EMERALD_BRACELET(30, 65, 11079),
	RUBY_BRACELET(42, 80, 11088),
	DIAMOND_BRACELET(58, 95, 11095),
	DRAGONSTONE_BRACELET(74, 110, 11118),
	ONYX_BRACELET(84, 125, 11133),

	GOLD_AMULET(8, 30, 1673),
	SAPPHIRE_AMULET(24, 65, 1675),
	EMERALD_AMULET(31, 70, 1677),
	RUBY_AMULET(50, 85, 1679),
	DIAMOND_AMULET(70, 100, 1681),
	DRAGONSTONE_AMULET(80, 150, 1683),
	ONYX_AMULET(90, 165, 6579);

	
	private int level, outcome;
	private double xp;
	
	private JewerlyData(int levelNeeded, double xp, int outcome) {
		this.level = levelNeeded;
		this.xp = xp;
		this.outcome = outcome;
	}
	
	private int getLevel() {
		return level;
	}
	
	private int getOutcome() {
		return outcome;
	}   
	
	private double getXp() {
		return xp;
	}
}

private int amount;
private Item gold, gem;
private JewerlyData data;

public JewerlyCrafting(JewerlyData data, Item gold, Item gem, int amount) {
	this.data = data;
	this.gold = gold;
	this.gem = gem;
	this.amount = amount;
}

@Override
public boolean start(Player player) {
	if (checkAll(player)) {
		setActionDelay(player, 1);
		return true;
	}
	return false;
}

public boolean checkAll(Player player) {
	if (player.getSkills().getLevel(Skills.CRAFTING) &lt; data
			.getLevel()) {
		player.getDialogueManager().startDialogue(
				"SimpleMessage",
				"You need a crafting level of " + data.getLevel()
				+ " to create that.");
		return false;
	}
	if (!player.getInventory().containsItem(gold.getId(), 1)) {
		player.getDialogueManager().startDialogue(
				"SimpleMessage",
				"You don't have any more "
						+ ItemDefinitions
						.getItemDefinitions(gold.getId())
						.getName().toLowerCase() + "s to use.");
		return false;
	}
	if (!player.getInventory().containsItem(gem.getId(), 1)) {
		if (gem.getId() == -1) {
			return true;
		}
			player.getDialogueManager().startDialogue(
				"SimpleMessage",
				"You don't have any more "
						+ ItemDefinitions
						.getItemDefinitions(gem.getId())
						.getName().toLowerCase() + "s to use.");
		return false;
	}
	return true;
}

@Override
public boolean process(Player player) {
	return checkAll(player);
}

@Override
public int processWithDelay(Player player) {
	if (gem.getId() == -1) {
		player.getInventory().deleteItem(gold.getId(), 1);
		player.getInventory().addItem(data.getOutcome(), 1);
		player.getSkills().addXp(Skills.CRAFTING, data.getXp());
		player.getPackets().sendGameMessage(
				"You shape the gold bar with the mould to make  " 
						+ ItemDefinitions.getItemDefinitions(data.getOutcome())
						.getName().toLowerCase() + ".", true);
	} else {
		player.getInventory().deleteItem(gold.getId(), 1);
		player.getInventory().deleteItem(gem.getId(), 1);
		player.getInventory().addItem(data.getOutcome(), 1);
		player.getSkills().addXp(Skills.CRAFTING, data.getXp());
		player.getPackets().sendGameMessage(
			"You bind the Gold bar and the " 
					+ ItemDefinitions.getItemDefinitions(gem.getId())
					.getName().toLowerCase() + " together to make a " + ItemDefinitions.getItemDefinitions(data.getOutcome())
					.getName().toLowerCase() + ".", true);
	}
	amount--;
	if (amount &lt;= 0)
		return -1;
	player.setNextAnimation(new Animation(3243));
	return 0;
}

@Override
public void stop(final Player player) {
	setActionDelay(player, 3);
}
</code></pre>
<p>}[/code] and this is how i set it up in objecthandler <code>
				if (itemId == 2357 &amp;&amp; object.getId() == 11010) {
					JewerlyCrafting.sendInterface(player); </code> if someone could help me that would be just fantastic. thanks!a</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/718-interface-help/541925/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/718-interface-help/541925/1</link>
        <pubDate>Sun, 06 Apr 2014 07:55:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-541925-1</guid>
        <source url="https://forum.moparisthebest.com/t/718-interface-help/541925.rss">718 interface help</source>
      </item>
  </channel>
</rss>
