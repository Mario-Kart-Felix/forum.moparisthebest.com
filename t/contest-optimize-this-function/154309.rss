<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Contest: Optimize this function!</title>
    <link>https://forum.moparisthebest.com/t/contest-optimize-this-function/154309</link>
    <description>As you all know, when you go to optimize a CPU intensive program, you optimize the parts that are ran the most.  This particular function is called twice every time a new node is added to a game tree, literally thousands of times each run.  Currently going down to a depth of 5 takes ~30 seconds, while going down to a depth of 6 takes ~900 seconds, huge difference right?

Both I and a graduate student I am working with were charged with the responsibility of optimizing the following function so that we can go down to a depth of 6 feasibly, so I thought it would be fun to make it into a contest, I will submit my entry probably Sunday, and then will run all submissions on this computer so as to compare them.

[code]
    public static double possibleScore(HijaraState brd, boolean home) {
        double possibleScore = 0;
        char opponentsSym = HijaraState.awaySym;
        char ourSym = HijaraState.homeSym;
        if (!home) {
            opponentsSym = HijaraState.homeSym;
            ourSym = HijaraState.awaySym;
        }
        //calculates potential score for single square
        for (int r = 0; r &lt; HijaraState.ROWS; ++r)
            for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                //if square does not contain opponents piece, and square is not full
                int emptySpots = 4 - brd.board[r][c].indexOf(&quot;&quot; + HijaraState.emptySym);
                if ((brd.board[r][c].indexOf(&quot;&quot; + opponentsSym) == -1) &amp;&amp; (emptySpots != 0) &amp;&amp; (emptySpots &lt; 4))
                    possibleScore += 20 * ((4.0 - emptySpots) / 4.0);
            }
        boolean sequential = true;
        int ourCount = 0;
        int emptySpacesToFill = 0;
        //calculates sequential numbers in rows (1,2,3,4)
        //calculates sequential numbers in rows (4,3,2,1)
        for (int x = 0; x &lt; 2; ++x) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    int index = (x == 0) ? c : 3 - c;
                    if (brd.board[r][c].charAt(index) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[r][c].charAt(index) == ourSym) {
                        emptySpacesToFill += (index + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[r][c].indexOf(&quot;&quot; + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates sequential numbers in cols (1,2,3,4)
        //calculates sequential numbers in cols (4,3,2,1)
        for (int x = 0; x &lt; 2; ++x) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    int index = x == 0 ? c : 3 - c;
                    if (brd.board[c][r].charAt(index) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][r].charAt(index) == ourSym) {
                        emptySpacesToFill += (index + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][r].indexOf(&quot;&quot; + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates sequential numbers in diagonal (4,3,2,1)&amp;&amp;(1,2,3,4)
        for (int x = 0; x &lt; 2; ++x) {
            for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                int index = x == 0 ? c : 3 - c;
                if (brd.board[c][index].charAt(index) == opponentsSym) {
                    sequential = false;
                    break;
                } else if (brd.board[c][index].charAt(index) == ourSym) {
                    emptySpacesToFill += (index + 1);
                    ++ourCount;
                } else { //if spot is empty
                    emptySpacesToFill += brd.board[c][index].indexOf(&quot;&quot; + HijaraState.emptySym);
                }

            }
            if (sequential &amp;&amp; ourCount != 4)
                possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in rows (1,2,3,4)
        //calculates same numbers in rows (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[r][c].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[r][c].charAt(spot) == ourSym) {
                        emptySpacesToFill += (spot + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[r][c].indexOf(&quot;&quot; + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in columns (1,2,3,4)
        //calculates same numbers in columns (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[c][r].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][r].charAt(spot) == ourSym) {
                        ++ourCount;
                        emptySpacesToFill += (spot + 1);
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][r].indexOf(&quot;&quot; + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in diagonals (1,2,3,4)
        //calculates same numbers in diagonals (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[c][c].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][c].charAt(spot) == ourSym) {
                        emptySpacesToFill += spot + 1;
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][c].indexOf(&quot;&quot; + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        return possibleScore;
    }
[/code]

You really shouldn&#39;t need more than this function, as it must return the same amount no matter how you do it, if you have a good reason to request more code post it.

Some hints: I know at least a few of the loops can be merged into a single loop with the addition of a few local variables, in this case, CPU cycles is much more important than memory, which really isn&#39;t a problem at all.  (ie, the time it takes to run this as is triples when changing my CPU speed from 1600mhz to 800mhz)

As to a reward for the contest, this has not been decided as of yet, it may be a java cup, or it may be a new award, such as a &#39;Java Contest Winner&#39; something like the &#39;sig of the week&#39; award in the graphics section.

edit: At request:
I have attached HijaraState.java, note that no changes can be made to this class, only the function.</description>
    
    <lastBuildDate>Fri, 26 Oct 2007 13:42:33 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Contest: Optimize this function!</title>
        <dc:creator><![CDATA[@sh_ft sh!ft]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sh_ft">@sh_ft</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="3" data-topic="154309">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>While I agree with you, I can’t change HijaraState and therefore can’t change the way the board is represented in memory or anything else of that nature.  All I can change is the function itself, that’s a professor for you.</p>
</blockquote>
</aside>
<p>Yeah, no kidding… I enjoy professors that pretend like their students are lesser beings… Like in Biology 2, the first day of class she says “In todays’ lesson we will be extracting DNA from a banana…” Uninterested in discovering how and why we were going to defy evolution altogether, I dropped that class later that day.<br>
[hr]<br>
Rearrange the if statements, numerical ahead of string computation, that should help out quite a bit. Numerical comparisons are quicker, and if one of them fails, it doesn’t have to iterate the characters in String in order to check.</p>
<p>Collapse the dual for loops for x and y. Also  , and replace it with <code>
int limit = COLS * ROWS;
for(int i = 0; i &lt; limit; i++); {
  Object value = board[i % COLS][i / ROWS];
}</code><br>
That’s all I can think of, I’m beyond tired.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/4</link>
        <pubDate>Fri, 26 Oct 2007 13:42:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154309-4</guid>
        <source url="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309.rss">Contest: Optimize this function!</source>
      </item>
      <item>
        <title>Contest: Optimize this function!</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>While I agree with you, I can’t change HijaraState and therefore can’t change the way the board is represented in memory or anything else of that nature.  All I can change is the function itself, that’s a professor for you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/3</link>
        <pubDate>Fri, 26 Oct 2007 13:08:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154309-3</guid>
        <source url="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309.rss">Contest: Optimize this function!</source>
      </item>
      <item>
        <title>Contest: Optimize this function!</title>
        <dc:creator><![CDATA[@sh_ft sh!ft]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sh_ft">@sh_ft</a> wrote:</p>
          <blockquote>
              <blockquote>Some hints: I know at least a few of the loops can be merged into a single loop with the addition of a few local variables, in this case, CPU cycles is much more important than memory, which really isn't a problem at all.  (ie, the time it takes to run this as is triples when changing my CPU speed from 1600mhz to 800mhz)</blockquote>
[b] The Issues [/b]
<p>They’re equally important, Java handles memory internally, so the more of the Runtime Constant Pool it has to cache, clear, access, and store within, the more cycles that occur… Adding the local variables actually takes much less memory than multiple dimensioned arrays.</p>
<p>Multi dimensional arrays work something like this in Java:<br>
[table]<br>
[tr][td]array[2]-&gt;[/td][td]array[][/td][/tr]<br>
[tr][td][right]-&gt;[/right][/td][td]array[][/td][/tr]<br>
[/table]</p>
<p>And they continue on like that for each dimension until you reach the goal array from which you grab the value from.</p>
<p>But that’s only half the battle, the operation performed in the cycle is most likely a virtual one, and this is just the array’s we’re talking about… The management of multiple loops and bytecode based retocycle adds many more iterations of the same, mediocre code.</p>
<p>Last but not least, loading from an array multiple times is a very bad practice. The local stack for that method is somewhat quicker than accessing the runtime constant pool.</p>
<p><span class="bbcode-b">The Solutions</span><br>
Collapsing the array is a great choice. It not only helps with the memory management, it also uses bitwise instructions so that you can still access the 2d coordinates x and y using the one dimensional array: <code>array[y * width + x] == array[x][y]</code>… As a bonus, most processors have FAST bitwise operations.</p>
<p>Now, we have to fix the issue of “looping-loops”, and the “duplicate loads” of the same object</p>
<pre><code class="lang-auto">for(int i = 0; i &lt; array.length; i++) {
  int j = array[i];
  if(j == value) {
    System.out.println("Match at (" + (i  % width)  + ", " + (i / width) + ");");
  }
}</code></pre>
<p>There’s no need to use <span class="bbcode-b">char</span>, it’s treated as an integer anyway. And at last thought, the “charAt()” function should be replaced with an array.</p>
<p>[hr]<br>
Sorry I didn’t do any optimizing myself, I’ve just been up all night for 2 nights in a row and I’m having a hard time thinking clearly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/2</link>
        <pubDate>Fri, 26 Oct 2007 13:00:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154309-2</guid>
        <source url="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309.rss">Contest: Optimize this function!</source>
      </item>
      <item>
        <title>Contest: Optimize this function!</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>As you all know, when you go to optimize a CPU intensive program, you optimize the parts that are ran the most.  This particular function is called twice every time a new node is added to a game tree, literally thousands of times each run.  Currently going down to a depth of 5 takes ~30 seconds, while going down to a depth of 6 takes ~900 seconds, huge difference right?</p>
<p>Both I and a graduate student I am working with were charged with the responsibility of optimizing the following function so that we can go down to a depth of 6 feasibly, so I thought it would be fun to make it into a contest, I will submit my entry probably Sunday, and then will run all submissions on this computer so as to compare them.</p>
<pre><code class="lang-auto">    public static double possibleScore(HijaraState brd, boolean home) {
        double possibleScore = 0;
        char opponentsSym = HijaraState.awaySym;
        char ourSym = HijaraState.homeSym;
        if (!home) {
            opponentsSym = HijaraState.homeSym;
            ourSym = HijaraState.awaySym;
        }
        //calculates potential score for single square
        for (int r = 0; r &lt; HijaraState.ROWS; ++r)
            for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                //if square does not contain opponents piece, and square is not full
                int emptySpots = 4 - brd.board[r][c].indexOf("" + HijaraState.emptySym);
                if ((brd.board[r][c].indexOf("" + opponentsSym) == -1) &amp;&amp; (emptySpots != 0) &amp;&amp; (emptySpots &lt; 4))
                    possibleScore += 20 * ((4.0 - emptySpots) / 4.0);
            }
        boolean sequential = true;
        int ourCount = 0;
        int emptySpacesToFill = 0;
        //calculates sequential numbers in rows (1,2,3,4)
        //calculates sequential numbers in rows (4,3,2,1)
        for (int x = 0; x &lt; 2; ++x) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    int index = (x == 0) ? c : 3 - c;
                    if (brd.board[r][c].charAt(index) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[r][c].charAt(index) == ourSym) {
                        emptySpacesToFill += (index + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[r][c].indexOf("" + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates sequential numbers in cols (1,2,3,4)
        //calculates sequential numbers in cols (4,3,2,1)
        for (int x = 0; x &lt; 2; ++x) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    int index = x == 0 ? c : 3 - c;
                    if (brd.board[c][r].charAt(index) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][r].charAt(index) == ourSym) {
                        emptySpacesToFill += (index + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][r].indexOf("" + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates sequential numbers in diagonal (4,3,2,1)&amp;&amp;(1,2,3,4)
        for (int x = 0; x &lt; 2; ++x) {
            for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                int index = x == 0 ? c : 3 - c;
                if (brd.board[c][index].charAt(index) == opponentsSym) {
                    sequential = false;
                    break;
                } else if (brd.board[c][index].charAt(index) == ourSym) {
                    emptySpacesToFill += (index + 1);
                    ++ourCount;
                } else { //if spot is empty
                    emptySpacesToFill += brd.board[c][index].indexOf("" + HijaraState.emptySym);
                }

            }
            if (sequential &amp;&amp; ourCount != 4)
                possibleScore += 15 * (ourCount / 4.0) * (emptySpacesToFill / 10.0);
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in rows (1,2,3,4)
        //calculates same numbers in rows (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[r][c].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[r][c].charAt(spot) == ourSym) {
                        emptySpacesToFill += (spot + 1);
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[r][c].indexOf("" + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in columns (1,2,3,4)
        //calculates same numbers in columns (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[c][r].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][r].charAt(spot) == ourSym) {
                        ++ourCount;
                        emptySpacesToFill += (spot + 1);
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][r].indexOf("" + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        //calculates same numbers in diagonals (1,2,3,4)
        //calculates same numbers in diagonals (4,3,2,1)
        for (int spot = 0; spot &lt; 4; ++spot) {
            for (int r = 0; r &lt; HijaraState.ROWS; ++r) {
                for (int c = 0; c &lt; HijaraState.COLS; ++c) {
                    if (brd.board[c][c].charAt(spot) == opponentsSym) {
                        sequential = false;
                        break;
                    } else if (brd.board[c][c].charAt(spot) == ourSym) {
                        emptySpacesToFill += spot + 1;
                        ++ourCount;
                    } else { //if spot is empty
                        emptySpacesToFill += brd.board[c][c].indexOf("" + HijaraState.emptySym);
                    }
                }
                if (sequential &amp;&amp; ourCount != 4)
                    possibleScore += 10 * (ourCount / 4.0) * (emptySpacesToFill / ((spot + 1.0) * 4.0));
            }
            sequential = true;
            ourCount = 0;
            emptySpacesToFill = 0;
        }
        return possibleScore;
    }</code></pre>
<p>You really shouldn’t need more than this function, as it must return the same amount no matter how you do it, if you have a good reason to request more code post it.</p>
<p>Some hints: I know at least a few of the loops can be merged into a single loop with the addition of a few local variables, in this case, CPU cycles is much more important than memory, which really isn’t a problem at all.  (ie, the time it takes to run this as is triples when changing my CPU speed from 1600mhz to 800mhz)</p>
<p>As to a reward for the contest, this has not been decided as of yet, it may be a java cup, or it may be a new award, such as a ‘Java Contest Winner’ something like the ‘sig of the week’ award in the graphics section.</p>
<p>edit: At request:<br>
I have attached HijaraState.java, note that no changes can be made to this class, only the function.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/contest-optimize-this-function/154309/1</link>
        <pubDate>Fri, 26 Oct 2007 11:48:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154309-1</guid>
        <source url="https://forum.moparisthebest.com/t/contest-optimize-this-function/154309.rss">Contest: Optimize this function!</source>
      </item>
  </channel>
</rss>
