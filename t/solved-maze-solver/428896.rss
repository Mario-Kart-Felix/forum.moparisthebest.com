<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[SOLVED] Maze Solver</title>
    <link>https://forum.moparisthebest.com/t/solved-maze-solver/428896</link>
    <description>Im having some trouble understanding prolog at the moment, I am trying to iterate through a maze to find a solution.

I have solved it using a DFS however I want to solve it using a BFS as it will give me a shorter path.

Working Solution:
[code]
path([tower|Tail], [tower|Tail]).

path([Current|Tail],Solution) :-
        connected_to(Current,Next), % check if the nodes are connected
        \+ member(Next,Tail),  % check to make sure we haven&#39;t visited it before, stops cycle    path([Next,Current|Tail],Solution). % recursion to visit all until final is found[/code]

This is my WIP, I will explain it a little bit.

[b]findall[/b] gets all of the child nodes of the current node and puts it into a variable called Children

[b]sortChildren[/b] organises the children into which one should be visited first

[b]append[/b] adds the sorted list onto the end of the current tail, currently it adds the whole sorted list, but I just want it to add the next one to iterate?

then path recursively searches again.

now what I want to do next is to then use the head of the sorted list and search its children etc etc, recursively so if a dead end is found then it will fail and will then go back and get the next index from the children array. This is where I am stuck, I know what I want to do, but I don&#39;t know how to do it in prolog :(

[code]path([Current|Tail], Solution) :-
       	findall(X, (connected_to(Current, X), 
		\+ member(X, Tail)), Children), 	% find all child nodes
	sortChildren(Children, SortedList),		% sort the child nodes into loudest first
	append(Tail, SortedList, NewTail),	% bfs, append the sorted list to the 
       	path(NewTail, Solution).[/code]

I hope this is enough information, I can try explain myself more if needs be.

edit:

If i am correct i currently have a to visit list, and i need to store a visited list which would be the nodes which i have traversed along?

edit2:

I was correct, just needed to have a visited list and add add a check for an empty list for the children. I wasn&#39;t so far off initially, should have been to more prolog lectures :P</description>
    
    <lastBuildDate>Tue, 17 Jan 2012 23:44:24 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/solved-maze-solver/428896.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[SOLVED] Maze Solver</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>My problem wasn’t with the algorithm, was more understanding how prolog worked. Soon as I discovered this and got my head around it it was very easy.</p>
<p>Plus, I cannot create an OpenGL bot as I get an error when I try load my own library, so I’m sticking to colour searching and OCR <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> simple but its good for repetitive tasks like fletching.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-maze-solver/428896/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-maze-solver/428896/3</link>
        <pubDate>Tue, 17 Jan 2012 23:44:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428896-3</guid>
        <source url="https://forum.moparisthebest.com/t/solved-maze-solver/428896.rss">[SOLVED] Maze Solver</source>
      </item>
      <item>
        <title>[SOLVED] Maze Solver</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>you create openGL bots and don’t know BFS? <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-maze-solver/428896/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-maze-solver/428896/2</link>
        <pubDate>Tue, 17 Jan 2012 19:41:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428896-2</guid>
        <source url="https://forum.moparisthebest.com/t/solved-maze-solver/428896.rss">[SOLVED] Maze Solver</source>
      </item>
      <item>
        <title>[SOLVED] Maze Solver</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>Im having some trouble understanding prolog at the moment, I am trying to iterate through a maze to find a solution.</p>
<p>I have solved it using a DFS however I want to solve it using a BFS as it will give me a shorter path.</p>
<p>Working Solution:</p>
<p>[code]<br>
path([tower|Tail], [tower|Tail]).</p>
<p>path([Current|Tail],Solution) :-<br>
connected_to(Current,Next), % check if the nodes are connected<br>
+ member(Next,Tail),  % check to make sure we haven’t visited it before, stops cycle    path([Next,Current|Tail],Solution). % recursion to visit all until final is found[/code]</p>
<p>This is my WIP, I will explain it a little bit.</p>
<p><span class="bbcode-b">findall</span> gets all of the child nodes of the current node and puts it into a variable called Children</p>
<p><span class="bbcode-b">sortChildren</span> organises the children into which one should be visited first</p>
<p><span class="bbcode-b">append</span> adds the sorted list onto the end of the current tail, currently it adds the whole sorted list, but I just want it to add the next one to iterate?</p>
<p>then path recursively searches again.</p>
<p>now what I want to do next is to then use the head of the sorted list and search its children etc etc, recursively so if a dead end is found then it will fail and will then go back and get the next index from the children array. This is where I am stuck, I know what I want to do, but I don’t know how to do it in prolog <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p><code>path([Current|Tail], Solution) :-
       	findall(X, (connected_to(Current, X), 
		\+ member(X, Tail)), Children), 	% find all child nodes
	sortChildren(Children, SortedList),		% sort the child nodes into loudest first
	append(Tail, SortedList, NewTail),	% bfs, append the sorted list to the 
       	path(NewTail, Solution).</code></p>
<p>I hope this is enough information, I can try explain myself more if needs be.</p>
<p>edit:</p>
<p>If i am correct i currently have a to visit list, and i need to store a visited list which would be the nodes which i have traversed along?</p>
<p>edit2:</p>
<p>I was correct, just needed to have a visited list and add add a check for an empty list for the children. I wasn’t so far off initially, should have been to more prolog lectures <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-maze-solver/428896/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-maze-solver/428896/1</link>
        <pubDate>Wed, 11 Jan 2012 22:04:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428896-1</guid>
        <source url="https://forum.moparisthebest.com/t/solved-maze-solver/428896.rss">[SOLVED] Maze Solver</source>
      </item>
  </channel>
</rss>
