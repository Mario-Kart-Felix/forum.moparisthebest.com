<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>317 auto cache downloader not work</title>
    <link>https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558</link>
    <description>Any help how i can get my auto cache downloader work I have Tryed but Cant get it work

Cachedownloader
[code]/**********************************************

@author: Google411 

06/11/2011 -- 9/19/2011

CacheDownloader.java
Version: 2.00.12


$$ If you want to disable the pipup messages just null out these lines

Line: 102 - 
cacheHasUpdated();
Line: 108 - 
cacheHasUpdated();
With
Line: 102 - 
//cacheHasUpdated();
Line: 108 - 
//cacheHasUpdated();

&lt;¤&gt;¿&lt;¤&gt; Google411 Me - Revised by Kozs


**********************************************/

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import sign.signlink;

public class CacheDownloader {

        private client client;
		client frame;
        private final int BUFFER = 1024;
		/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
		/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
        /* OPTION 3*/private String cacheLink = &quot;https://www.dropbox.com/s/j6s1l91twzvvw28/cache.zip&quot; ;   // URL of cache on remote server. IE: &quot;http://DropBox.com/cache.zip&quot; Add to dropbox or FileDen
		/* OPTION 4 */private String cacheDir = &quot;C:/&quot; ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing &#39;/&#39; 
		/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        private String fileToExtract = getCacheDir() + getArchivedName();
        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
        }
		
        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
        }

        private String getCacheLink() {
                return cacheLink;
        }
		
        private String getCacheDir() {
                return cacheDir;
        }

        private int getCacheVersion() {
                return VERSION;
        }
		
		private int pauseHandlerDelay1000Equals1Second() {
				return pauseHandlerDelay;
		}
	
		private String localCacheFile() {
				return getCacheDir() + getArchivedName();
		}
        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                if(!location.exists()) {
						cacheHasUpdated();
                        downloadFile(getCacheLink(), getArchivedName());
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
								cacheHasUpdated();
                                downloadFile(getCacheLink(), getArchivedName());
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();
                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {
                }
                return null;
        }			
			public void cacheHasUpdated() {
				JOptionPane.showMessageDialog(frame, &quot;It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.&quot;, &quot;Cache Version Invalid&quot;, JOptionPane.WARNING_MESSAGE);
				}
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                try {
                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                        new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                        byte[] data = new byte[BUFFER]; 
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
                        }
                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }
				fileExists();
        }
        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }
	public void fileExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;The cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please download it manually at:&quot;);
	  System.out.println(localCacheFile());
	  System.out.println(&quot;File Directory:&quot;);
	  System.out.println(getCacheDir());
	  pauseHandler();
	cacheDownloadError();
    }else {
      drawLoadingText(&quot;Your cache is downloaded and ready to un-zip!&quot;);
	  pauseHandler();
	  unZip();	  
    }
	}
	        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;
                while((e=zin.getNextEntry()) != null) {
                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {
                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
					drawLoadingText(&quot;[UN-ZIP]: &quot; + e.getName());
                }
                zin.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
			pauseHandler();
			unNeededCacheExists();
        }
        private void unzip(ZipInputStream zin, String s) 
                throws IOException {
                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
				}
        }
	public void unNeededCacheExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;Your cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please try to re re run the client.&quot;);
    }else {
      System.out.println(&quot;Your cache is on your HDD&quot;);
	  System.out.println(&quot;Auto Cache Deleter Attempting to delete...&quot;);
	  delete();	  
    }
	}
	    public void delete() {	
    	try{
    		File file = new File(localCacheFile());
    		if(file.delete()){
    			drawLoadingText(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
				System.out.println(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
    		}else{
    			drawLoadingText(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
				System.out.println(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
    		}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
	public void cacheDownloadError() {
		try {
            drawLoadingText(&quot;Cache Download Error - Contact an admin&quot;);
			}
			catch(Exception e){
    		e.printStackTrace();
    	}
			}
  public void pauseHandler() {
     try {
       Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }  
}
/*************************
@author Google - Revised by Kozs
*************************/[/code]

Any1 Can help me?</description>
    
    <lastBuildDate>Fri, 18 May 2012 19:21:55 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>317 auto cache downloader not work</title>
        <dc:creator><![CDATA[@Nikkeboy4 Nikkeboy4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nikkeboy4">@Nikkeboy4</a> wrote:</p>
          <blockquote>
              <p>Now it Download The cache but Cant Play becaus when its done i get error and its start download it again when i start the client srry bad english <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/3</link>
        <pubDate>Fri, 18 May 2012 19:21:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442558-3</guid>
        <source url="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558.rss">317 auto cache downloader not work</source>
      </item>
      <item>
        <title>317 auto cache downloader not work</title>
        <dc:creator><![CDATA[@pray4urlife pray4urlife]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pray4urlife">@pray4urlife</a> wrote:</p>
          <blockquote>
              <p>Re-zip the cache and put it in the dropbox again and try it from there. I would help you through tv but i’m getting ready to leave.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/2</link>
        <pubDate>Fri, 18 May 2012 19:02:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442558-2</guid>
        <source url="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558.rss">317 auto cache downloader not work</source>
      </item>
      <item>
        <title>317 auto cache downloader not work</title>
        <dc:creator><![CDATA[@Nikkeboy4 Nikkeboy4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nikkeboy4">@Nikkeboy4</a> wrote:</p>
          <blockquote>
              <p>Any help how i can get my auto cache downloader work I have Tryed but Cant get it work</p>
<p>Cachedownloader</p>
<p>[code]/**********************************************</p>
<p><span class="mention">@author</span>: Google411</p>
<p>06/11/2011 – 9/19/2011</p>
<p>CacheDownloader.java<br>
Version: 2.00.12</p>
<p>$$ If you want to disable the pipup messages just null out these lines</p>
<p>Line: 102 -<br>
cacheHasUpdated();<br>
Line: 108 -<br>
cacheHasUpdated();<br>
With<br>
Line: 102 -<br>
//cacheHasUpdated();<br>
Line: 108 -<br>
//cacheHasUpdated();</p>
<p>&lt;¤&gt;¿&lt;¤&gt; Google411 Me - Revised by Kozs</p>
<p>**********************************************/</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;<br>
import javax.swing.<em>;<br>
import java.awt.event.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;
	client frame;
    private final int BUFFER = 1024;
	/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
	/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
    /* OPTION 3*/private String cacheLink = "https://www.dropbox.com/s/j6s1l91twzvvw28/cache.zip" ;   // URL of cache on remote server. IE: "http://DropBox.com/cache.zip" Add to dropbox or FileDen
	/* OPTION 4 */private String cacheDir = "C:/" ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing '/' 
	/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    private String fileToExtract = getCacheDir() + getArchivedName();
    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
    }
	
    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
    }

    private String getCacheLink() {
            return cacheLink;
    }
	
    private String getCacheDir() {
            return cacheDir;
    }

    private int getCacheVersion() {
            return VERSION;
    }
	
	private int pauseHandlerDelay1000Equals1Second() {
			return pauseHandlerDelay;
	}

	private String localCacheFile() {
			return getCacheDir() + getArchivedName();
	}
    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            if(!location.exists()) {
					cacheHasUpdated();
                    downloadFile(getCacheLink(), getArchivedName());
                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
							cacheHasUpdated();
                            downloadFile(getCacheLink(), getArchivedName());
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();
                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {
            }
            return null;
    }			
		public void cacheHasUpdated() {
			JOptionPane.showMessageDialog(frame, "It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.", "Cache Version Invalid", JOptionPane.WARNING_MESSAGE);
			}
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + "/" +localFileName)); 
                    conn = url.openConnection();
                    in = conn.getInputStream(); 
                    byte[] data = new byte[BUFFER]; 
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;
                            int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
                    }
                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");
            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }
			fileExists();
    }
    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }
public void fileExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("The cache was not downloaded correctly.");
  System.out.println("Please download it manually at:");
  System.out.println(localCacheFile());
  System.out.println("File Directory:");
  System.out.println(getCacheDir());
  pauseHandler();
cacheDownloadError();
}else {
  drawLoadingText("Your cache is downloaded and ready to un-zip!");
  pauseHandler();
  unZip();	  
}
}
        private void unZip() {
        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;
            while((e=zin.getNextEntry()) != null) {
                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {
                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
				drawLoadingText("[UN-ZIP]: " + e.getName());
            }
            zin.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
		pauseHandler();
		unNeededCacheExists();
    }
    private void unzip(ZipInputStream zin, String s) 
            throws IOException {
            FileOutputStream out = new FileOutputStream(s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
			}
    }
public void unNeededCacheExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("Your cache was not downloaded correctly.");
  System.out.println("Please try to re re run the client.");
}else {
  System.out.println("Your cache is on your HDD");
  System.out.println("Auto Cache Deleter Attempting to delete...");
  delete();	  
}
}
    public void delete() {	
	try{
		File file = new File(localCacheFile());
		if(file.delete()){
			drawLoadingText("[SUCCESS]" +file.getName()+ " was deleted!");
			System.out.println("[SUCCESS]" +file.getName()+ " was deleted!");
		}else{
			drawLoadingText("[ERROR]" +file.getName()+ " was not deleted.");
			System.out.println("[ERROR]" +file.getName()+ " was not deleted.");
		}
	}catch(Exception e){
		e.printStackTrace();
	}
}
public void cacheDownloadError() {
	try {
        drawLoadingText("Cache Download Error - Contact an admin");
		}
		catch(Exception e){
		e.printStackTrace();
	}
		}
</code></pre>
<p>public void pauseHandler() {<br>
try {<br>
Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());<br>
}<br>
catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
/*************************<br>
<span class="mention">@author</span> Google - Revised by Kozs<br>
*************************/[/code]</p>
<p>Any1 Can help me?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558/1</link>
        <pubDate>Fri, 18 May 2012 18:50:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442558-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-auto-cache-downloader-not-work/442558.rss">317 auto cache downloader not work</source>
      </item>
  </channel>
</rss>
