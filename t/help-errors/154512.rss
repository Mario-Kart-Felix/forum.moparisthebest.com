<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help [errors]</title>
    <link>https://forum.moparisthebest.com/t/help-errors/154512</link>
    <description>[code]Error loading settings
java.lang.NumberFormatException: For input string: &quot;&quot;
        at java.lang.NumberFormatException.forInputString(Unknown Source)
        at java.lang.Integer.parseInt(Unknown Source)
        at java.lang.Integer.parseInt(Unknown Source)
        at server.main(server.java:91)
No suitable driver found for localhost
Server is already in use.
No suitable driver found for localhost
Loading npcs... java.lang.NullPointerException
        at NPCHandler.loadNPCList(NPCHandler.java:1324)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:67)
        at server.main(server.java:108)
drops... null
java.lang.NullPointerException
        at NPCHandler.loadNPCDrops(NPCHandler.java:1338)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:69)
        at server.main(server.java:108)
spawn list...java.lang.NullPointerException
        at NPCHandler.loadAutoSpawn(NPCHandler.java:1251)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:71)
        at server.main(server.java:108)
done!
null
java.lang.NullPointerException
        at DoorHandler.mysql_connect(DoorHandler.java:36)
        at DoorHandler.&lt;init&gt;(DoorHandler.java:15)
        at server.main(server.java:110)
java.lang.NullPointerException
        at DoorHandler.&lt;init&gt;(DoorHandler.java:16)
        at server.main(server.java:110)
java.lang.NullPointerException
        at server.loadObjects(server.java:310)
        at server.main(server.java:116)[/code]

Need help fixing these errors ^^ here is my server.java [code]
import java.io.*;
import java.net.*;
import java.sql.*;
import java.util.*;

public class server
    implements Runnable
{

    public server()
    {
        ips = new int[1000];
        lastConnect = new long[1000];
    }

    public static boolean mysql_connect()
    {
        Class.forName(&quot;com.mysql.jdbc.Driver&quot;).newInstance();
        conn = DriverManager.getConnection(jdbc:mysql://rbdkx.bottlehost.com:runescape, ---, ---);
        statement = conn.createStatement();
        return true;
        Exception exception;
        exception;
        mysql_error(exception.getMessage());
        return false;
    }

    public static ResultSet mysql_query(String s)
    {
        return statement.executeQuery(s);
        Exception exception;
        exception;
        mysql_error(exception.getMessage());
        return null;
    }

    public static void mysql_update(String s)
    {
        try
        {
            statement.executeUpdate(s);
        }
        catch(Exception exception)
        {
            mysql_error(exception.getMessage());
        }
    }

    public static void mysql_disconnect()
    {
        try
        {
            conn.close();
        }
        catch(Exception exception)
        {
            mysql_error(exception.getMessage());
        }
    }

    public static void mysql_error(String s)
    {
        System.out.println(s);
    }

    public static void main(String args[])
        throws NullPointerException
    {
        GraphicsHandler = new GraphicsHandler();
        misc.println(&quot;Jangan Server&quot;);
        misc.println(&quot;-------------------------------------------------------&quot;);
        try
        {
            File file = new File(&quot;server.ini&quot;);
            if(!file.exists())
                misc.println(&quot;server.ini doesn&#39;t exist!&quot;);
            Properties properties = new Properties();
            properties.load(new FileInputStream(&quot;./server.ini&quot;));
            int i = Integer.parseInt(properties.getProperty(&quot;ClientRequired&quot;).trim());
            world = Integer.parseInt(properties.getProperty(&quot;WorldId&quot;).trim());
            serverlistenerPort = Integer.parseInt(properties.getProperty(&quot;ServerPort&quot;).trim());
            MySQLUser = properties.getProperty(&quot;-----&quot;);
            MySQLPassword = properties.getProperty(&quot;------&quot;);
            MySQLDataBase = properties.getProperty(&quot;rbdkxbo_runescape&quot;);
            MySQLURL = (new StringBuilder()).append(properties.getProperty(&quot;MySQL&quot;)).append(MySQLDataBase).toString();
            if(i &gt; 0)
            {
                misc.println(&quot;Enforcing dodian.com client requirement&quot;);
                enforceClient = true;
            }
        }
        catch(Exception exception)
        {
            misc.println(&quot;Error loading settings&quot;);
            exception.printStackTrace();
        }
        Database.init();
        clientHandler = new server();
        (new Thread(clientHandler)).start();
        playerHandler = new PlayerHandler();
        npcHandler = new NPCHandler();
        itemHandler = new ItemHandler();
        doorHandler = new DoorHandler();
        if(itemHandler == null)
            misc.println(&quot;ERROR NULL&quot;);
        shopHandler = new ShopHandler();
        objectHandler = new ObjectHandler();
        GraphicsHandler = new GraphicsHandler();
        process process1 = new process();
        loadObjects();
        (new Thread(process1)).start();
    }

    public static void calcTime()
    {
        long l = System.currentTimeMillis();
        updateSeconds = 180 - (int)(l - startTime) / 1000;
        if(updateSeconds == 0)
            shutdownServer = true;
    }

    public void run()
    {
        try
        {
            shutdownClientHandler = false;
            clientListener = new ServerSocket(serverlistenerPort, 1, null);
            do
                try
                {
                    Socket socket = clientListener.accept();
                    socket.setTcpNoDelay(true);
                    String s = socket.getInetAddress().getHostName();
                    if(s.startsWith(&quot;rbdkx.bottlehost.com&quot;) || s.startsWith(&quot;server2&quot;) || s.startsWith(&quot;dodian.com&quot;) || s.startsWith(&quot;newgamersworld.com&quot;) || s.startsWith(&quot;sputnik&quot;) || s.startsWith(&quot;sugardaddy&quot;))
                    {
                        misc.println(&quot;Checking Server Status...&quot;);
                        socket.close();
                    } else
                    {
                        connections.add(s);
                        if(checkHost(s))
                        {
                            misc.println((new StringBuilder()).append(&quot;Connection from &quot;).append(s).append(&quot;:&quot;).append(socket.getPort()).toString());
                            playerHandler.newPlayerClient(socket, s);
                        } else
                        {
                            misc.println((new StringBuilder()).append(&quot;ClientHandler: Rejected &quot;).append(s).append(&quot;:&quot;).append(socket.getPort()).toString());
                            socket.close();
                        }
                    }
                    if(delayUpdate &gt; 0L &amp;&amp; System.currentTimeMillis() &gt; delayUpdate)
                    {
                        delay = 500;
                        delayUpdate = 0L;
                    }
                    Thread.sleep(delay);
                }
                catch(Exception exception)
                {
                    logError(exception.getMessage());
                }
            while(true);
        }
        catch(IOException ioexception) { }
        if(!shutdownClientHandler)
            misc.println(&quot;Server is already in use.&quot;);
        else
            misc.println(&quot;ClientHandler was shut down.&quot;);
    }

    public void killServer()
    {
        try
        {
            shutdownClientHandler = true;
            if(clientListener != null)
                clientListener.close();
            clientListener = null;
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
    }

    public static void logError(String s)
    {
        misc.println(s);
    }

    public int getConnections(String s)
    {
        int i;
label0:
        {
            i = 0;
            int j = 0;
            do
            {
                PlayerHandler _tmp = playerHandler;
                if(j &gt;= PlayerHandler.players.length)
                    break label0;
                PlayerHandler _tmp1 = playerHandler;
                Player player = PlayerHandler.players[j];
                if(player != null &amp;&amp; !player.disconnected &amp;&amp; player.connectedFrom.equalsIgnoreCase(s))
                    i++;
                j++;
            } while(true);
        }
        return i;
    }

    public boolean checkHost(String s)
    {
        for(Iterator iterator = banned.iterator(); iterator.hasNext();)
        {
            String s1 = (String)iterator.next();
            if(s1.equals(s))
                return false;
        }

        int i = 0;
        Iterator iterator1 = connections.iterator();
        do
        {
            if(!iterator1.hasNext())
                break;
            String s2 = (String)iterator1.next();
            if(s.equals(s2))
                i++;
        } while(true);
        if(i &gt; 5)
        {
            banHost(s, i);
            return false;
        } else
        {
            return true;
        }
    }

    public void banHost(String s, int i)
    {
        try
        {
            misc.println((new StringBuilder()).append(&quot;BANNING HOST &quot;).append(s).append(&quot; (flooding)&quot;).toString());
            openPage((new StringBuilder()).append(&quot;http://dodian.com/ban.php?host=&quot;).append(s).toString());
            banned.add(s);
            delay = 2000;
            delayUpdate = System.currentTimeMillis() + 60000L;
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
    }

    public static void openPage(String s)
    {
        try
        {
            URL url = new URL(s);
            URLConnection urlconnection = url.openConnection();
            DataInputStream datainputstream = new DataInputStream(urlconnection.getInputStream());
            String s1;
            for(String s2 = &quot;&quot;; (s1 = datainputstream.readLine()) != null; s2 = (new StringBuilder()).append(s2).append(s1).toString());
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
            return;
        }
    }

    public static void loadObjects()
    {
        try
        {
            Statement statement1 = Database.conn.createStatement();
            for(ResultSet resultset = statement1.executeQuery(&quot;SELECT * from uber3_objects&quot;); resultset.next(); objects.add(new Object(resultset.getInt(&quot;id&quot;), resultset.getInt(&quot;x&quot;), resultset.getInt(&quot;y&quot;), resultset.getInt(&quot;type&quot;))));
        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
    }

    public static boolean trading = true;
    public static boolean dueling = true;
    public static int delay = 500;
    public static long delayUpdate = 0L;
    public static long lastRunite = 0L;
    public static ArrayList bannedUid = new ArrayList();
    public static int world = 1;
    public static boolean enforceClient = false;
    public static boolean loginServerConnected = true;
    public static final int cycleTime = 500;
    public static boolean updateServer = false;
    public static int updateSeconds = 180;
    public static long startTime;
    public static GraphicsHandler GraphicsHandler = null;
    public static String MySQLDataBase = &quot;runescape&quot;;
    public static String MySQLURL = &quot;localhost&quot;;
    public static String MySQLUser = &quot;root&quot;;
    public static String MySQLPassword = &quot;&quot;;
    public static Connection conn = null;
    public static Statement statement = null;
    public static ResultSet results = null;
    public int ips[];
    public long lastConnect[];
    public static int runesRequired[][] = new int[24][9];
    public static DoorHandler doorHandler;
    public static ArrayList connections = new ArrayList();
    public static ArrayList banned = new ArrayList();
    public static ArrayList objects = new ArrayList();
    public static server clientHandler = null;
    public static ServerSocket clientListener = null;
    public static boolean shutdownServer = false;
    public static boolean shutdownClientHandler;
    public static int serverlistenerPort = 43594;
    public static PlayerHandler playerHandler = null;
    public static NPCHandler npcHandler = null;
    public static ItemHandler itemHandler = null;
    public static ShopHandler shopHandler = null;
    public static ObjectHandler objectHandler = null;
    public static int EnergyRegian = 60;
    public static int MaxConnections;
    public static String Connections[];
    public static int ConnectionCount[];
    public static boolean ShutDown = false;
    public static int ShutDownCounter = 0;

    static 
    {
        MaxConnections = 0x186a0;
        Connections = new String[MaxConnections];
        ConnectionCount = new int[MaxConnections];
    }
}[/code]</description>
    
    <lastBuildDate>Sat, 27 Oct 2007 05:04:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-errors/154512.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help [errors]</title>
        <dc:creator><![CDATA[@weaving8 weaving8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weaving8">@weaving8</a> wrote:</p>
          <blockquote>
              <p>whats your paths or code</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-errors/154512/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-errors/154512/2</link>
        <pubDate>Sat, 27 Oct 2007 05:04:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154512-2</guid>
        <source url="https://forum.moparisthebest.com/t/help-errors/154512.rss">Help [errors]</source>
      </item>
      <item>
        <title>Help [errors]</title>
        <dc:creator><![CDATA[@fungame4u fungame4u]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fungame4u">@fungame4u</a> wrote:</p>
          <blockquote>
              <p><code>Error loading settings
java.lang.NumberFormatException: For input string: ""
        at java.lang.NumberFormatException.forInputString(Unknown Source)
        at java.lang.Integer.parseInt(Unknown Source)
        at java.lang.Integer.parseInt(Unknown Source)
        at server.main(server.java:91)
No suitable driver found for localhost
Server is already in use.
No suitable driver found for localhost
Loading npcs... java.lang.NullPointerException
        at NPCHandler.loadNPCList(NPCHandler.java:1324)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:67)
        at server.main(server.java:108)
drops... null
java.lang.NullPointerException
        at NPCHandler.loadNPCDrops(NPCHandler.java:1338)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:69)
        at server.main(server.java:108)
spawn list...java.lang.NullPointerException
        at NPCHandler.loadAutoSpawn(NPCHandler.java:1251)
        at NPCHandler.&lt;init&gt;(NPCHandler.java:71)
        at server.main(server.java:108)
done!
null
java.lang.NullPointerException
        at DoorHandler.mysql_connect(DoorHandler.java:36)
        at DoorHandler.&lt;init&gt;(DoorHandler.java:15)
        at server.main(server.java:110)
java.lang.NullPointerException
        at DoorHandler.&lt;init&gt;(DoorHandler.java:16)
        at server.main(server.java:110)
java.lang.NullPointerException
        at server.loadObjects(server.java:310)
        at server.main(server.java:116)</code></p>
<p>Need help fixing these errors ^^ here is my server.java [code]<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import java.sql.<em>;<br>
import java.util.</em>;</p>
<p>public class server<br>
implements Runnable<br>
{</p>
<pre><code>public server()
{
    ips = new int[1000];
    lastConnect = new long[1000];
}

public static boolean mysql_connect()
{
    Class.forName("com.mysql.jdbc.Driver").newInstance();
    conn = DriverManager.getConnection(jdbc:mysql://rbdkx.bottlehost.com:runescape, ---, ---);
    statement = conn.createStatement();
    return true;
    Exception exception;
    exception;
    mysql_error(exception.getMessage());
    return false;
}

public static ResultSet mysql_query(String s)
{
    return statement.executeQuery(s);
    Exception exception;
    exception;
    mysql_error(exception.getMessage());
    return null;
}

public static void mysql_update(String s)
{
    try
    {
        statement.executeUpdate(s);
    }
    catch(Exception exception)
    {
        mysql_error(exception.getMessage());
    }
}

public static void mysql_disconnect()
{
    try
    {
        conn.close();
    }
    catch(Exception exception)
    {
        mysql_error(exception.getMessage());
    }
}

public static void mysql_error(String s)
{
    System.out.println(s);
}

public static void main(String args[])
    throws NullPointerException
{
    GraphicsHandler = new GraphicsHandler();
    misc.println("Jangan Server");
    misc.println("-------------------------------------------------------");
    try
    {
        File file = new File("server.ini");
        if(!file.exists())
            misc.println("server.ini doesn't exist!");
        Properties properties = new Properties();
        properties.load(new FileInputStream("./server.ini"));
        int i = Integer.parseInt(properties.getProperty("ClientRequired").trim());
        world = Integer.parseInt(properties.getProperty("WorldId").trim());
        serverlistenerPort = Integer.parseInt(properties.getProperty("ServerPort").trim());
        MySQLUser = properties.getProperty("-----");
        MySQLPassword = properties.getProperty("------");
        MySQLDataBase = properties.getProperty("rbdkxbo_runescape");
        MySQLURL = (new StringBuilder()).append(properties.getProperty("MySQL")).append(MySQLDataBase).toString();
        if(i &gt; 0)
        {
            misc.println("Enforcing dodian.com client requirement");
            enforceClient = true;
        }
    }
    catch(Exception exception)
    {
        misc.println("Error loading settings");
        exception.printStackTrace();
    }
    Database.init();
    clientHandler = new server();
    (new Thread(clientHandler)).start();
    playerHandler = new PlayerHandler();
    npcHandler = new NPCHandler();
    itemHandler = new ItemHandler();
    doorHandler = new DoorHandler();
    if(itemHandler == null)
        misc.println("ERROR NULL");
    shopHandler = new ShopHandler();
    objectHandler = new ObjectHandler();
    GraphicsHandler = new GraphicsHandler();
    process process1 = new process();
    loadObjects();
    (new Thread(process1)).start();
}

public static void calcTime()
{
    long l = System.currentTimeMillis();
    updateSeconds = 180 - (int)(l - startTime) / 1000;
    if(updateSeconds == 0)
        shutdownServer = true;
}

public void run()
{
    try
    {
        shutdownClientHandler = false;
        clientListener = new ServerSocket(serverlistenerPort, 1, null);
        do
            try
            {
                Socket socket = clientListener.accept();
                socket.setTcpNoDelay(true);
                String s = socket.getInetAddress().getHostName();
                if(s.startsWith("rbdkx.bottlehost.com") || s.startsWith("server2") || s.startsWith("dodian.com") || s.startsWith("newgamersworld.com") || s.startsWith("sputnik") || s.startsWith("sugardaddy"))
                {
                    misc.println("Checking Server Status...");
                    socket.close();
                } else
                {
                    connections.add(s);
                    if(checkHost(s))
                    {
                        misc.println((new StringBuilder()).append("Connection from ").append(s).append(":").append(socket.getPort()).toString());
                        playerHandler.newPlayerClient(socket, s);
                    } else
                    {
                        misc.println((new StringBuilder()).append("ClientHandler: Rejected ").append(s).append(":").append(socket.getPort()).toString());
                        socket.close();
                    }
                }
                if(delayUpdate &gt; 0L &amp;&amp; System.currentTimeMillis() &gt; delayUpdate)
                {
                    delay = 500;
                    delayUpdate = 0L;
                }
                Thread.sleep(delay);
            }
            catch(Exception exception)
            {
                logError(exception.getMessage());
            }
        while(true);
    }
    catch(IOException ioexception) { }
    if(!shutdownClientHandler)
        misc.println("Server is already in use.");
    else
        misc.println("ClientHandler was shut down.");
}

public void killServer()
{
    try
    {
        shutdownClientHandler = true;
        if(clientListener != null)
            clientListener.close();
        clientListener = null;
    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
}

public static void logError(String s)
{
    misc.println(s);
}

public int getConnections(String s)
{
    int i;
</code></pre>
<p>label0:<br>
{<br>
i = 0;<br>
int j = 0;<br>
do<br>
{<br>
PlayerHandler _tmp = playerHandler;<br>
if(j &gt;= PlayerHandler.players.length)<br>
break label0;<br>
PlayerHandler _tmp1 = playerHandler;<br>
Player player = PlayerHandler.players[j];<br>
if(player != null &amp;&amp; !player.disconnected &amp;&amp; player.connectedFrom.equalsIgnoreCase(s))<br>
i++;<br>
j++;<br>
} while(true);<br>
}<br>
return i;<br>
}</p>
<pre><code>public boolean checkHost(String s)
{
    for(Iterator iterator = banned.iterator(); iterator.hasNext();)
    {
        String s1 = (String)iterator.next();
        if(s1.equals(s))
            return false;
    }

    int i = 0;
    Iterator iterator1 = connections.iterator();
    do
    {
        if(!iterator1.hasNext())
            break;
        String s2 = (String)iterator1.next();
        if(s.equals(s2))
            i++;
    } while(true);
    if(i &gt; 5)
    {
        banHost(s, i);
        return false;
    } else
    {
        return true;
    }
}

public void banHost(String s, int i)
{
    try
    {
        misc.println((new StringBuilder()).append("BANNING HOST ").append(s).append(" (flooding)").toString());
        openPage((new StringBuilder()).append("http://dodian.com/ban.php?host=").append(s).toString());
        banned.add(s);
        delay = 2000;
        delayUpdate = System.currentTimeMillis() + 60000L;
    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
}

public static void openPage(String s)
{
    try
    {
        URL url = new URL(s);
        URLConnection urlconnection = url.openConnection();
        DataInputStream datainputstream = new DataInputStream(urlconnection.getInputStream());
        String s1;
        for(String s2 = ""; (s1 = datainputstream.readLine()) != null; s2 = (new StringBuilder()).append(s2).append(s1).toString());
    }
    catch(Exception exception)
    {
        exception.printStackTrace();
        return;
    }
}

public static void loadObjects()
{
    try
    {
        Statement statement1 = Database.conn.createStatement();
        for(ResultSet resultset = statement1.executeQuery("SELECT * from uber3_objects"); resultset.next(); objects.add(new Object(resultset.getInt("id"), resultset.getInt("x"), resultset.getInt("y"), resultset.getInt("type"))));
    }
    catch(Exception exception)
    {
        exception.printStackTrace();
    }
}

public static boolean trading = true;
public static boolean dueling = true;
public static int delay = 500;
public static long delayUpdate = 0L;
public static long lastRunite = 0L;
public static ArrayList bannedUid = new ArrayList();
public static int world = 1;
public static boolean enforceClient = false;
public static boolean loginServerConnected = true;
public static final int cycleTime = 500;
public static boolean updateServer = false;
public static int updateSeconds = 180;
public static long startTime;
public static GraphicsHandler GraphicsHandler = null;
public static String MySQLDataBase = "runescape";
public static String MySQLURL = "localhost";
public static String MySQLUser = "root";
public static String MySQLPassword = "";
public static Connection conn = null;
public static Statement statement = null;
public static ResultSet results = null;
public int ips[];
public long lastConnect[];
public static int runesRequired[][] = new int[24][9];
public static DoorHandler doorHandler;
public static ArrayList connections = new ArrayList();
public static ArrayList banned = new ArrayList();
public static ArrayList objects = new ArrayList();
public static server clientHandler = null;
public static ServerSocket clientListener = null;
public static boolean shutdownServer = false;
public static boolean shutdownClientHandler;
public static int serverlistenerPort = 43594;
public static PlayerHandler playerHandler = null;
public static NPCHandler npcHandler = null;
public static ItemHandler itemHandler = null;
public static ShopHandler shopHandler = null;
public static ObjectHandler objectHandler = null;
public static int EnergyRegian = 60;
public static int MaxConnections;
public static String Connections[];
public static int ConnectionCount[];
public static boolean ShutDown = false;
public static int ShutDownCounter = 0;

static 
{
    MaxConnections = 0x186a0;
    Connections = new String[MaxConnections];
    ConnectionCount = new int[MaxConnections];
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-errors/154512/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-errors/154512/1</link>
        <pubDate>Sat, 27 Oct 2007 04:32:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-154512-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-errors/154512.rss">Help [errors]</source>
      </item>
  </channel>
</rss>
