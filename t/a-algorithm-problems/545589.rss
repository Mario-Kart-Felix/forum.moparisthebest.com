<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A* Algorithm problems</title>
    <link>https://forum.moparisthebest.com/t/a-algorithm-problems/545589</link>
    <description>[s]So, my problem is that the current node x and y coordinates will NEVER be the same as the goal x and y coordinates at the same time. The x coordinate could be the same, but the y coordinate can&#39;t, and vice versa. I see no reason as to why this happens, so I&#39;m just blaming the algorithm at the moment....[/s]
[s]
I have tried changing the comparator and heuristics, but neither had helped the situation[/s]
[code=java]
import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

public class AStarPathFinder {
	
	private AStarMap map;
	
	public AStarPathFinder(AStarMap map) {
		this.map = map;
	}
	
	public List&lt;Node&gt; find(Node start, Node goal) {
		List&lt;Node&gt; path = findPath(start, goal);
		Collections.reverse(path);
		return path;
	}
	
	private List&lt;Node&gt; findPath(Node start, Node goal) {
		ArrayList&lt;Node&gt; open = new ArrayList&lt;Node&gt;();
		ArrayList&lt;Node&gt; closed = new ArrayList&lt;Node&gt;();
		start.heuristic = map.getHeuristic(start, goal);
		open.add(start);
		while (open.size() &gt; 0) {
			Collections.sort(open, comparator());
			Node current = open.get(0);
			if (current.equals(goal))
				return reconstruct_path(start, current);
			open.remove(current);
			closed.add(current);
			for (Node neighbor : current.getNeighbors(goal)) {
				if (closed.contains(neighbor) || map.isBlocked(neighbor.x, neighbor.y))
					continue;
				double tentative_cost = current.cost + distance(current, neighbor);
				if (!open.contains(neighbor) || tentative_cost &lt;= neighbor.cost) {
					neighbor.cost = tentative_cost;
					if (!open.contains(neighbor))
						open.add(neighbor);
				}
			}
		}
		return null;
	}
	
	public List&lt;Node&gt; reconstruct_path(Node start, Node goal) {
		List&lt;Node&gt; path = new ArrayList&lt;Node&gt;();
		Node last = goal;
		while (!last.equals(start)) {
			last = last.parent;
			path.add(last);
		}
		return path;
	}
	
	public double distance(Node start, Node goal) {
		int dx = Math.abs(goal.x - start.x);
		int dy = Math.abs(goal.y - start.y);
		return Math.sqrt((dx*dx)+(dy*dy));
	}
	
	public Comparator&lt;Node&gt; comparator() {
		return new Comparator&lt;Node&gt;() {
			@Override
			public int compare(Node o1, Node o2) {
				return Double.compare(o1.getF_Value(), o2.getF_Value());
			}
		};
	}
}
[/code]

[s]Here are some example outputs from 10816 loops[/s]
[code]
[CurrentX, CurrentY : GoalX, GoalY]
3223, 3235 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3219, 3221 : 3223, 3241
3220, 3222 : 3223, 3241
3221, 3223 : 3223, 3241
3222, 3224 : 3223, 3241
[/code]

Oh yeah, I forgot about this post. I already solved this by fixing a wrong calculation with the neighboring nodes.</description>
    
    <lastBuildDate>Mon, 04 Aug 2014 19:18:32 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-algorithm-problems/545589.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A* Algorithm problems</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="545589">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/lothy/40/51_1.png" class="avatar"> Lothy:</div>
<blockquote>
<p>Today you all learned: Blame the implementation, not the algorithm.</p>
</blockquote>
</aside>
<p>Yeah, I will never doubt the algorithm again…</p>
<p>After I fixed it, I wrote a little program to see how it was working<br>
[youtube]<a href="https://www.youtube.com/watch?v=YPttje1NLmk&amp;feature=youtu.be%5B/youtube%5D" rel="nofollow noopener">https://www.youtube.com/watch?v=YPttje1NLmk&amp;feature=youtu.be[/youtube]</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-algorithm-problems/545589/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-algorithm-problems/545589/3</link>
        <pubDate>Mon, 04 Aug 2014 19:18:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545589-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-algorithm-problems/545589.rss">A* Algorithm problems</source>
      </item>
      <item>
        <title>A* Algorithm problems</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>Today you all learned: Blame the implementation, not the algorithm.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-algorithm-problems/545589/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-algorithm-problems/545589/2</link>
        <pubDate>Mon, 04 Aug 2014 11:49:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545589-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-algorithm-problems/545589.rss">A* Algorithm problems</source>
      </item>
      <item>
        <title>A* Algorithm problems</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-s">So, my problem is that the current node x and y coordinates will NEVER be the same as the goal x and y coordinates at the same time. The x coordinate could be the same, but the y coordinate can’t, and vice versa. I see no reason as to why this happens, so I’m just blaming the algorithm at the moment…</span><br>
<span class="bbcode-s"><br>
I have tried changing the comparator and heuristics, but neither had helped the situation</span></p>
<pre><code class="lang-auto">import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;

public class AStarPathFinder {
	
	private AStarMap map;
	
	public AStarPathFinder(AStarMap map) {
		this.map = map;
	}
	
	public List&lt;Node&gt; find(Node start, Node goal) {
		List&lt;Node&gt; path = findPath(start, goal);
		Collections.reverse(path);
		return path;
	}
	
	private List&lt;Node&gt; findPath(Node start, Node goal) {
		ArrayList&lt;Node&gt; open = new ArrayList&lt;Node&gt;();
		ArrayList&lt;Node&gt; closed = new ArrayList&lt;Node&gt;();
		start.heuristic = map.getHeuristic(start, goal);
		open.add(start);
		while (open.size() &gt; 0) {
			Collections.sort(open, comparator());
			Node current = open.get(0);
			if (current.equals(goal))
				return reconstruct_path(start, current);
			open.remove(current);
			closed.add(current);
			for (Node neighbor : current.getNeighbors(goal)) {
				if (closed.contains(neighbor) || map.isBlocked(neighbor.x, neighbor.y))
					continue;
				double tentative_cost = current.cost + distance(current, neighbor);
				if (!open.contains(neighbor) || tentative_cost &lt;= neighbor.cost) {
					neighbor.cost = tentative_cost;
					if (!open.contains(neighbor))
						open.add(neighbor);
				}
			}
		}
		return null;
	}
	
	public List&lt;Node&gt; reconstruct_path(Node start, Node goal) {
		List&lt;Node&gt; path = new ArrayList&lt;Node&gt;();
		Node last = goal;
		while (!last.equals(start)) {
			last = last.parent;
			path.add(last);
		}
		return path;
	}
	
	public double distance(Node start, Node goal) {
		int dx = Math.abs(goal.x - start.x);
		int dy = Math.abs(goal.y - start.y);
		return Math.sqrt((dx*dx)+(dy*dy));
	}
	
	public Comparator&lt;Node&gt; comparator() {
		return new Comparator&lt;Node&gt;() {
			@Override
			public int compare(Node o1, Node o2) {
				return Double.compare(o1.getF_Value(), o2.getF_Value());
			}
		};
	}
}</code></pre>
<p><span class="bbcode-s">Here are some example outputs from 10816 loops</span></p>
<pre><code class="lang-auto">[CurrentX, CurrentY : GoalX, GoalY]
3223, 3235 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3222, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3224, 3228 : 3223, 3241
3223, 3229 : 3223, 3241
3219, 3221 : 3223, 3241
3220, 3222 : 3223, 3241
3221, 3223 : 3223, 3241
3222, 3224 : 3223, 3241</code></pre>
<p>Oh yeah, I forgot about this post. I already solved this by fixing a wrong calculation with the neighboring nodes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-algorithm-problems/545589/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-algorithm-problems/545589/1</link>
        <pubDate>Sat, 02 Aug 2014 08:29:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545589-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-algorithm-problems/545589.rss">A* Algorithm problems</source>
      </item>
  </channel>
</rss>
