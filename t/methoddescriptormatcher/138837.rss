<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>MethodDescriptorMatcher</title>
    <link>https://forum.moparisthebest.com/t/methoddescriptormatcher/138837</link>
    <description>This is a little thing I made tonight. It&#39;s fucking awesome imo. I haven&#39;t tested this in BCEL(which this is ported into), but it&#39;s probably slower than driving through a wet spot at Palisades. Look it over though, it took forever to work the bugs out and half of them are probably still there. Hopefully you can work out [i]how[/i] to use it if you want to use it; it&#39;s fairly simple. It&#39;s definitely more easy to use in BBL because of how it works, but whatever, it&#39;s just a bit more work on your part to use it.[code]package com.sl.bytecode;

import java.util.ArrayList;

public class MethodDescriptorMatcher{
    private String return_type;
    private String[] arguments;
    private boolean is_static;
    public MethodDescriptorMatcher(String methodtype, String methodargs, boolean stat){
        return_type = new org.apache.bcel.generic.ObjectType(methodtype).getSignature();
        parseArgs(methodargs);
        is_static = stat;
    }

    private void parseArgs(String args){
        SpecialString s = new SpecialString(args);
        ArrayList&lt;String&gt; inttypes = s.deleteAll(&quot;byte&quot;);
        inttypes.addAll(s.deleteAll(&quot;char&quot;));
        inttypes.addAll(s.deleteAll(&quot;short&quot;));
        inttypes.addAll(s.deleteAll(&quot;int&quot;));
        ArrayList&lt;String&gt; bools = s.deleteAll(&quot;boolean&quot;);
        ArrayList&lt;String&gt; floats = s.deleteAll(&quot;float&quot;);
        ArrayList&lt;String&gt; longs = s.deleteAll(&quot;long&quot;);
        ArrayList&lt;String&gt; doubles = s.deleteAll(&quot;double&quot;);
        String remaining = s.toString();
        ArrayList&lt;String&gt; objects = new ArrayList&lt;String&gt;();
        String[] sts = remaining.split(&quot;,&quot;);
        for(String st : sts)
            objects.add(&quot;L&quot;+st.replaceAll(&quot;.&quot;, &quot;/&quot;)+&quot;;&quot;);
        arguments = new String[inttypes.size() + bools.size() + floats.size() + longs.size() + doubles.size() + objects.size()];
        int overallindex = 0;
        for(int i = 0; i &lt; inttypes.size(); i++){
            arguments[overallindex] = &quot;I&quot;;
            overallindex++;
        }

        for(int i = 0; i &lt; bools.size(); i++){
            arguments[overallindex] = &quot;Z&quot;;
            overallindex++;
        }
        for(int i = 0; i &lt; floats.size(); i++){
            arguments[overallindex] = &quot;F&quot;;
            overallindex++;
        }

        for(int i = 0; i &lt; longs.size(); i++){
            arguments[overallindex] = &quot;J&quot;;
            overallindex++;
        }

        for(int i = 0; i &lt; doubles.size(); i++){
            arguments[overallindex] = &quot;D&quot;;
            overallindex++;
        }

        for(int i = 0; i &lt; objects.size(); i++){
            arguments[overallindex] = &quot;L&quot;+objects.get(i).replaceAll(&quot;.&quot;, &quot;/&quot;)+&quot;;&quot;;
            overallindex++;
        }
    }

    private class SpecialString{
        private char[] characters;
        public SpecialString(String s){
            this.characters = s.toCharArray();
        }

        public ArrayList&lt;String&gt; deleteAll(String pattern){
            String s = new String(characters);
            ArrayList&lt;String&gt; a = new ArrayList&lt;String&gt;();
            int index;
            int end;
            String temp;
            char endchar = pattern.charAt(pattern.length() - 1);
            while((index = s.indexOf(pattern)) != -1){
                end = s.substring(index + 1).indexOf(endchar) + index + 1;
                String s1 = s.substring(0, index);
                String s2 = s.substring(end + 1);
                s = s1 + s2;
                characters = s.toCharArray();
                a.add(pattern);
            }
            return a;
        }

        public void delete(String s){
            String c = new String(characters);
            int index = c.indexOf(s);
            String s1 = c.substring(0, index);
            String s2 = c.substring(index + s.length());
            characters = (s1 + s2).toCharArray();
        }

        public boolean hasSequence(String s){
            return indexOf(s) != -1;
        }

        public int indexOf(String s){
            return new String(characters).indexOf(s);
        }

        public void appendString(String s){
            characters = (new String(characters) + s).toCharArray();
        }

        public int size(){
            return characters.length;
        }

        public String toString(){
            return new String(characters);
        }
    }
    
public boolean accept(org.apache.bcel.classfile.Method m){
        if((is_static &amp;&amp; !m.isStatic()) || (!is_static &amp;&amp; m.isStatic()))
            return false;
        return accept(m.getSignature());
    }

    private boolean accept(String string){
        SpecialString s = new SpecialString(string);
        String ret = string.substring(string.indexOf(&quot;)&quot;) + 1, string.length());
        if(!ret.equals(return_type)){
            //System.out.println(&quot;wrong type&quot;);
            return false;
        }
        for(String st : arguments){
            //System.out.println(st);
            if(!s.hasSequence(st)){
                if(st.equals(&quot;I&quot;)){
                    if(s.hasSequence(&quot;B&quot;) || s.hasSequence(&quot;S&quot;) || s.hasSequence(&quot;C&quot;))
                        continue;
                    else
                        return false;
                }
                else{
                    //System.out.println(&quot;wrong sequence: &quot;+s+&quot;:&quot;+st);
                    return false;
                }
            }
            s.delete(st);
        }
        return true;
    }

    public String toString(){
        String s = &quot;(&quot;;
        for(String st : arguments)
            s += st;
        s += &quot;)&quot;+return_type;
        return s + &quot;:&quot; + is_static;
    }
}[/code]</description>
    
    <lastBuildDate>Fri, 31 Aug 2007 10:41:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/methoddescriptormatcher/138837.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>MethodDescriptorMatcher</title>
        <dc:creator><![CDATA[@Silver_Lining Silver Lining]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silver_lining">@Silver_Lining</a> wrote:</p>
          <blockquote>
              <p>This is a little thing I made tonight. It’s fucking awesome imo. I haven’t tested this in BCEL(which this is ported into), but it’s probably slower than driving through a wet spot at Palisades. Look it over though, it took forever to work the bugs out and half of them are probably still there. Hopefully you can work out <span class="bbcode-i">how</span> to use it if you want to use it; it’s fairly simple. It’s definitely more easy to use in BBL because of how it works, but whatever, it’s just a bit more work on your part to use it.[code]package com.sl.bytecode;</p>
<p>import java.util.ArrayList;</p>
<p>public class MethodDescriptorMatcher{<br>
private String return_type;<br>
private String[] arguments;<br>
private boolean is_static;<br>
public MethodDescriptorMatcher(String methodtype, String methodargs, boolean stat){<br>
return_type = new org.apache.bcel.generic.ObjectType(methodtype).getSignature();<br>
parseArgs(methodargs);<br>
is_static = stat;<br>
}</p>
<pre><code>private void parseArgs(String args){
    SpecialString s = new SpecialString(args);
    ArrayList&lt;String&gt; inttypes = s.deleteAll("byte");
    inttypes.addAll(s.deleteAll("char"));
    inttypes.addAll(s.deleteAll("short"));
    inttypes.addAll(s.deleteAll("int"));
    ArrayList&lt;String&gt; bools = s.deleteAll("boolean");
    ArrayList&lt;String&gt; floats = s.deleteAll("float");
    ArrayList&lt;String&gt; longs = s.deleteAll("long");
    ArrayList&lt;String&gt; doubles = s.deleteAll("double");
    String remaining = s.toString();
    ArrayList&lt;String&gt; objects = new ArrayList&lt;String&gt;();
    String[] sts = remaining.split(",");
    for(String st : sts)
        objects.add("L"+st.replaceAll(".", "/")+";");
    arguments = new String[inttypes.size() + bools.size() + floats.size() + longs.size() + doubles.size() + objects.size()];
    int overallindex = 0;
    for(int i = 0; i &lt; inttypes.size(); i++){
        arguments[overallindex] = "I";
        overallindex++;
    }

    for(int i = 0; i &lt; bools.size(); i++){
        arguments[overallindex] = "Z";
        overallindex++;
    }
    for(int i = 0; i &lt; floats.size(); i++){
        arguments[overallindex] = "F";
        overallindex++;
    }

    for(int i = 0; i &lt; longs.size(); i++){
        arguments[overallindex] = "J";
        overallindex++;
    }

    for(int i = 0; i &lt; doubles.size(); i++){
        arguments[overallindex] = "D";
        overallindex++;
    }

    for(int i = 0; i &lt; objects.size(); i++){
        arguments[overallindex] = "L"+objects.get(i).replaceAll(".", "/")+";";
        overallindex++;
    }
}

private class SpecialString{
    private char[] characters;
    public SpecialString(String s){
        this.characters = s.toCharArray();
    }

    public ArrayList&lt;String&gt; deleteAll(String pattern){
        String s = new String(characters);
        ArrayList&lt;String&gt; a = new ArrayList&lt;String&gt;();
        int index;
        int end;
        String temp;
        char endchar = pattern.charAt(pattern.length() - 1);
        while((index = s.indexOf(pattern)) != -1){
            end = s.substring(index + 1).indexOf(endchar) + index + 1;
            String s1 = s.substring(0, index);
            String s2 = s.substring(end + 1);
            s = s1 + s2;
            characters = s.toCharArray();
            a.add(pattern);
        }
        return a;
    }

    public void delete(String s){
        String c = new String(characters);
        int index = c.indexOf(s);
        String s1 = c.substring(0, index);
        String s2 = c.substring(index + s.length());
        characters = (s1 + s2).toCharArray();
    }

    public boolean hasSequence(String s){
        return indexOf(s) != -1;
    }

    public int indexOf(String s){
        return new String(characters).indexOf(s);
    }

    public void appendString(String s){
        characters = (new String(characters) + s).toCharArray();
    }

    public int size(){
        return characters.length;
    }

    public String toString(){
        return new String(characters);
    }
}
</code></pre>
<p>public boolean accept(org.apache.bcel.classfile.Method m){<br>
if((is_static &amp;&amp; !m.isStatic()) || (!is_static &amp;&amp; m.isStatic()))<br>
return false;<br>
return accept(m.getSignature());<br>
}</p>
<pre><code>private boolean accept(String string){
    SpecialString s = new SpecialString(string);
    String ret = string.substring(string.indexOf(")") + 1, string.length());
    if(!ret.equals(return_type)){
        //System.out.println("wrong type");
        return false;
    }
    for(String st : arguments){
        //System.out.println(st);
        if(!s.hasSequence(st)){
            if(st.equals("I")){
                if(s.hasSequence("B") || s.hasSequence("S") || s.hasSequence("C"))
                    continue;
                else
                    return false;
            }
            else{
                //System.out.println("wrong sequence: "+s+":"+st);
                return false;
            }
        }
        s.delete(st);
    }
    return true;
}

public String toString(){
    String s = "(";
    for(String st : arguments)
        s += st;
    s += ")"+return_type;
    return s + ":" + is_static;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/methoddescriptormatcher/138837/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/methoddescriptormatcher/138837/1</link>
        <pubDate>Fri, 31 Aug 2007 10:41:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-138837-1</guid>
        <source url="https://forum.moparisthebest.com/t/methoddescriptormatcher/138837.rss">MethodDescriptorMatcher</source>
      </item>
  </channel>
</rss>
