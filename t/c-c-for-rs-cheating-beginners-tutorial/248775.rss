<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
    <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775</link>
    <description>I am SMR from Sythe and this is an exact copy of the tutorial I posted there for those who have seen it there.

For this tutorial I will assume that you have a C++ IDE / compiler on Windows and you know how to create and add files to projects.  Create an empty/blank Win32 Application (or whatever the equivalent is for your IDE) and add a new file.  If your compiler automatically adds files with default code for Windows applications, then erase it all.  You&#39;ll then have a blank file.  I have tried to make this tutorial as beginner-friendly as possible but it doesn&#39;t hurt if you have some previous experience with C/C++ or programming in general.

Most tutorials will start with a basic &quot;Hello World&quot; example, which is neither useful nor challenging, or even ideal for beginners with an IQ higher than a raisin, as far as I care.  We&#39;re doing something a bit more complex, and, because this is an RS cheating forum, geared towards RS cheating.  Paste the following code into your editor:

[code]#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;
void ClickMouse(ULONG x, ULONG y, DWORD nMinSleepTime, DWORD nMaxSleepTime)
{
    srand(GetTickCount());
    mouse_event(MOUSEEVENTF_LEFTDOWN,x,y,NULL,NULL);
    mouse_event(MOUSEEVENTF_LEFTUP,x,y,NULL,NULL);
    Sleep((rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime);
}

int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)
{
    int nResult = MessageBox(NULL,&quot;Are you sure you want to start the clicker?\n(You will be able to stop at any time by pressing and releasing the F8 key...)&quot;,&quot;MouseClicker&quot;,MB_YESNO|MB_ICONQUESTION);
    POINT p;
    switch(nResult)
    {
    case IDYES:
        while(!(GetAsyncKeyState(VK_F8)))
        {
            GetCursorPos(&amp;p);
            ClickMouse(p.x,p.y,1000,2000);
        }
        break;
    case IDNO:
    default:
        ExitProcess(0x0);
        break;
    }
    return 0;
}[/code]Compile and run your project.  You will find that it keeps clicking wherever your mouse is, rests for about 1-2 seconds between clicks, and terminates when you press F8.  I&#39;ll run you through how this works. 

[code]#define WIN32_LEAN_AND_MEAN
#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;[/code]These [i]#include[/i] and [i]#define[/i] statements are not actual C/C++ programming statements.  They are [i]directives[/i] to the compiler.  #define WIN32_LEAN_AND_MEAN tells the compiler that wherever it spots the symbol WIN32_LEAN_AND_MEAN in the code it compiles, to consider it a &#39;defined symbol&#39;.  You might not understand how this works at first, but this line results in a smaller executable by causing rarely-used functions and classes to be ignored when compiling the contents of windows.h.

The #include statements are pretty straightforward - the compiler searches its predefined include directories (you typically don&#39;t need to know or care what those are) and replaces the lines #include &lt;windows.h&gt; and #include &lt;stdlib.h&gt; with the contents of windows.h and stdlib.h respectively.  This makes the various functions and structures we use in the code that we actually write available to us, like mouse_event, rand, Sleep, MessageBox, and so on.

[code]void ClickMouse(ULONG x, ULONG y, DWORD nMinSleepTime, DWORD nMaxSleepTime)[/code]This is a [i]function definition[/i].  If you understand the concept of a mathematical function, like, for example f(x)=x^2+3x+3, then the idea here may seem somewhat familiar to you.  A C++ function is declared with the following syntax:
[code]returntype functionname(argument list)[/code]
You&#39;ll notice that the returntype for our function here is void.  This is our way of saying that this function won&#39;t produce anything.  The function name is ClickMouse.  The compiler isn&#39;t picky about what you name your functions and variables, but it is good programming practice to name your functions and variables in a way that reflects what they do, so that if you decide to take a break on one of your projects, then come back and see a function named qwertyasdf, you might not remember what that function does.  Since this function here is designed to click the left mouse button, a name like ClickMouse is appropriate. 

The argument list, is, believe it or not, a list of arguments.  These arguments are variables (there will be a time when you deal with arguments that are [i]arrays, pointers, and references[/i] rather than simple variables, but for now, function arguments are just variables).   The arguments will effect the output and behaviour of the function.  ULONG x and ULONG y specify what the x and y mouse coordinates should be for the click.  The ULONG type is the same thing as an &#39;unsigned long&#39;, aka, a positive integer.  If you&#39;re scratching your head right now, then read [url=http://www.cppreference.com/data_types.html]this[/url].  DWORD nMinSleepTime and nMaxSleepTime will be used to determine the minimum and maximum time to wait between clicks.

NOTE: DWORD and ULONG are [b]NOT[/b] innate C/C++ data types.  They are defined in windows.h and you will not be able to use them unless your code includes windows.h or you define these types yourself.

Now, lets look at the function body:
[code]{
    srand(GetTickCount());
    mouse_event(MOUSEEVENTF_LEFTDOWN,x,y,NULL,NULL);
    mouse_event(MOUSEEVENTF_LEFTUP,x,y,NULL,NULL);
    Sleep((rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime);
}[/code]The curly brackets {} are used to enclose the function body.  Each line inside these brackets is executed in order.  srand() is a function declared in stdlib.h and is used to seed random number generation to any integer.  GetTickCount returns the number of milliseconds since the system started, so the line srand((GetTickCount()) seeds random number generation to the number of milliseconds since the system has started - which ensures that the sequence of random numbers will be truly random and not the same sequence repeated over and over again.  If you don&#39;t understand exactly what I&#39;m trying to say here, don&#39;t worry - just remember to add this line in any program where you want &#39;true&#39; random number generation.  Let&#39;s look at the next two lines.

mouse_event is a function which simulates mouse input, which can include moving, left or right clicking, and scrolling the mouse.  The only arguments to this function which we truly care about are the first three.  The first parameter indicates what type of mouse action we want to simulate, in this case, pressing and releasing the left mouse button, so we use MOUSEEVENTF_LEFTDOWN and MOUSEEVENTF_LEFTUP in that order.  This is considered a left click.  The next two parameters specify where on the screen, in (x,y) coordinates to make the click.  In this case, we take x and y from the first two arguments to ClickMouse and pass them into mouse_event.

The next line uses the Sleep() API.  This causes the program to wait, or &quot;sleep&quot; for the specified number of milliseconds.  Since we&#39;re trying to reduce detectability, we want this time to be random.  More specifically, we want the time to be anywhere between nMinSleepTime and nMaxSleepTime.  The line (rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime will accomplish this.  The % modulus operator returns the remainder of integer division of Left side/Right side, so any random number generated will be less than the difference between nMaxSleepTime and nMinSleepTime, and nMinSleepTime is added to that number, making the Sleep time anywhere between nMinSleepTime and nMaxSleepTime.  If you can understand basic mathematical concepts, then this should make sense to you.

So, if you&#39;ve chewed all that then you should understand what makes the ClickMouse function simulate a left click and rest for an amount of time between two specified milliseconds.

The next line is just something you&#39;ll have to add whenever you want to write a Windows application.  If you&#39;ve written C/C++ console applications, you&#39;ll be used to using a main() function to place all the code executed at runtime.  For Windows applications, you must use WinMain, and the four arguments are nothing to worry about for the time being.  Just remember that everything inside WinMain() is executed at runtime.

The first line inside this function introduces the MessageBox API.  This displays a prompt with a title, caption, buttons and icon which you specify, and stores the user&#39;s answer in a variable called nResult.  It is conventional to prefix all integer variable names with a lowercase n.  MessageBox takes four arguments - the first we don&#39;t care about right now.  The second contains the text which the user will be prompted with.  The third contains the window caption for the message box.  The last is a combination of both what buttons and what icon for the message box to have:
Icons:
MB_ICONINFORMATION - That little blue speech bubble with the &quot;i&quot; which you&#39;ve surely seen before
MB_ICONQUESTION - A blue question mark which is usually accompanied by Yes/No or Yes/No/Cancel
MB_ICONEXCLAMATION - That annoying little yellow exclamation mark which causes a small, frustrating, sound which is typically used to indicate that the user did something wrong.
MB_ICONSTOP - A small red &quot;X&quot; which is typically seen when a program fault occurs.

Buttons:
MB_OK - Simply an &quot;OK&quot; button with nothing else
MB_OKCANCEL - Ok and Cancel
MB_YESNO - Yes and No buttons
MB_YESNOCANCEL - Yes, No and Cancel
MB_ABORTRETRYIGNORE - Abort, Retry and Ignore buttons.

There are probably a few more than this, but I can&#39;t remember them all.  You can combine icons and buttons by using the | operator.  For example, if you wanted the MB_ICONINFORMATION icon and the MB_OK button, use MB_OK|MB_ICONINFORMATION (the order that you place these in doesn&#39;t matter).  Whichever button the user pushes will be stored in nResult.  This will be IDYES if the user presses Yes, or IDNO if the user presses No.  The next line creates a new POINT structure called p.  This is only used if the user presses Yes to the MessageBox.  The switch statement takes any integer quantity, or any quantity which can be implicitly convert into an integer, and compares them to different case labels.  Whichever label matches the integer quality will be executed.  So, if the user presses yes, then the case IDYES: label is executed.  

A while loop continues execution repeatedly until the condition in the brackets becomes false.  The ! (logical NOT) operator reverses the sense of of any logical expression following it - so if it is true, it becomes false, and if it is false, it becomes true.  The GetAsyncKeyState() function returns true if the key specified is down, and false otherwise.  So the while loop is true until the user pushes F8, and the clicking will continue until then.  GetCursorPos takes a [i]pointer[/i] to a POINT structure.  You can tell if a function requires a pointer or reference parameter if the function&#39;s argument list adds a * or an &amp; to the argument name.  In this case, we use GetCursorPos(&amp;p) to assign the current mouse position to p.

The next line calls the ClickMouse function - the one that we wrote earlier.  It clicks on the x and y coordinates stored in p, and because we called GetCursorPos(&amp;p), the p.x and p.y values will be the current x and y coordinates of the cursor.  The next arguments, 1000 and 2000, specify that the sleep time should be any random number between 1000 and 2000 milliseconds, in other words, 1 to 2 seconds.

Should the user press F8 and break out of the while loop, the next line will be the break; statement.  When used in a switch statement, break causes the program to break out of the switch and continue program execution following the terminating } of the switch block.

You may be wondering what will happen if the user presses No instead of Yes, and correctly so - you&#39;ll see that there is no code for case IDNO:, it moves directly on to the default: statement.  But, you&#39;ll also see that there is no break statement for case IDNO.  This means that the next label, in this case, default, which is executed whenever none of the case labels satisfy the integer quantity passed to the switch statement, will be executed following all the statements in case IDNO, but since there are none, it will fall directly into the default: handler.   The ExitProcess function causes the calling process and the current one to terminate, and the return code 0x0 (aka 0, NULL, etc) means (on Windows at least) that the program ran okay.  As far as we care right now, ExitProcess just kills the program. You&#39;re familiar with what the following break statement does.  The last statement, return 0, accomplishes the exact same thing as ExitProcess(0x0) - the only reason I included ExitProcess was to give you an idea of how it was used.  All functions that are not void must return a value.  main and WinMain return integer values to the operating system.  A return value of zero typically means that execution was successful.

There, now you have your first taste of programming C++ for RS cheating.</description>
    
    <lastBuildDate>Fri, 05 Dec 2008 05:55:38 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>Locked by request.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/14</link>
        <pubDate>Fri, 05 Dec 2008 05:55:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-14</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>Good thing intelligence and knowing something that has been taught to you are not the same thing.</p>
<p>By the way, <a href="http://www.google.com/search?q=anger+management&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-GB:official&amp;client=firefox-a" rel="nofollow noopener">http://www.google.com/search?q=anger+management&amp;ie=utf-8&amp;oe=utf-8&amp;aq=t&amp;rls=org.mozilla:en-GB:official&amp;client=firefox-a</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/13</link>
        <pubDate>Fri, 05 Dec 2008 05:49:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-13</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>Which is why this entire tutorial uses “C/C++” to refer to the language used.  This code is compatible with either language.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/12</link>
        <pubDate>Fri, 05 Dec 2008 05:44:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-12</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>Intelligent enough to determine whether a post is terrible without reading it?  I wish I had psychic powers.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/11</link>
        <pubDate>Fri, 05 Dec 2008 05:39:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-11</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>How would you know it’s terrible if you didn’t read it?</p>
<p>Every time I read retarded posts like yours I can feel my IQ dropping.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/10</link>
        <pubDate>Fri, 05 Dec 2008 05:33:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-10</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>i didnt read it because it is terrible</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/9</link>
        <pubDate>Fri, 05 Dec 2008 04:36:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:7, topic:248775”][quote author=Unhandled link=topic=327888.msg2567231#msg2567231 date=1228445387]<br>
You’ll find beginners don’t tend to hang around here for very long.<br>
[/quote]</p>
<p>Stop and think about why that is for a minute?</p>
<p>Could it have something to do with posts like:</p>
<p>[quote author=Unhandled link=topic=327888.msg2567219#msg2567219 date=1228444897]<br>
gg we now know how to call ONE FUCKING WINDOWS API FUNCTION.<br>
[/quote][/quote]Fortunately, I don’t hold much consideration for the opinions of people who are clearly confused about the location of their caps lock key.</p>
<p>Thanks, though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/8</link>
        <pubDate>Fri, 05 Dec 2008 02:58:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="5" data-topic="248775">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/unhandled/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> Unhandled:</div>
<blockquote>
<p>You’ll find beginners don’t tend to hang around here for very long.</p>
</blockquote>
</aside>
<p>Stop and think about why that is for a minute?</p>
<p>Could it have something to do with posts like:</p>
<aside class="quote no-group" data-post="3" data-topic="248775">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/unhandled/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> Unhandled:</div>
<blockquote>
<p>gg we now know how to call ONE FUCKING WINDOWS API FUNCTION.</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/7</link>
        <pubDate>Fri, 05 Dec 2008 02:52:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>I’m just trying to be helpful and contribute.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/6</link>
        <pubDate>Fri, 05 Dec 2008 02:51:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>You’ll find beginners don’t tend to hang around here for very long.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/5</link>
        <pubDate>Fri, 05 Dec 2008 02:49:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>I just didn’t want people to think I was some random idiot who rips tutorials from Sythe, seeing as I actually WROTE this tutorial on Sythe.</p>
<p>And Unhandled, that’s why this is for beginners, I’m not writing this for people who already know how to use the Windows API.  And there is more than one Windows API call in this code.</p>
<p>GetTickCount, MessageBox, GetAsyncKeyState and ExitProcess are all used here.</p>
<p>l2count kthx</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/4</link>
        <pubDate>Fri, 05 Dec 2008 02:41:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>gg we now know how to call ONE FUCKING WINDOWS API FUNCTION.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/3</link>
        <pubDate>Fri, 05 Dec 2008 02:41:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@Tree Tree]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tree">@Tree</a> wrote:</p>
          <blockquote>
              <p>You shouldn’t have mentioned Sythe.<br>
This thread will simply attract flame now.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/2</link>
        <pubDate>Fri, 05 Dec 2008 02:39:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
      <item>
        <title>C/C++ for RS cheating - beginner&#39;s tutorial</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>I am SMR from Sythe and this is an exact copy of the tutorial I posted there for those who have seen it there.</p>
<p>For this tutorial I will assume that you have a C++ IDE / compiler on Windows and you know how to create and add files to projects.  Create an empty/blank Win32 Application (or whatever the equivalent is for your IDE) and add a new file.  If your compiler automatically adds files with default code for Windows applications, then erase it all.  You’ll then have a blank file.  I have tried to make this tutorial as beginner-friendly as possible but it doesn’t hurt if you have some previous experience with C/C++ or programming in general.</p>
<p>Most tutorials will start with a basic “Hello World” example, which is neither useful nor challenging, or even ideal for beginners with an IQ higher than a raisin, as far as I care.  We’re doing something a bit more complex, and, because this is an RS cheating forum, geared towards RS cheating.  Paste the following code into your editor:</p>
<p>[code]<span class="hashtag">#include</span> &lt;windows.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;<br>
void ClickMouse(ULONG x, ULONG y, DWORD nMinSleepTime, DWORD nMaxSleepTime)<br>
{<br>
srand(GetTickCount());<br>
mouse_event(MOUSEEVENTF_LEFTDOWN,x,y,NULL,NULL);<br>
mouse_event(MOUSEEVENTF_LEFTUP,x,y,NULL,NULL);<br>
Sleep((rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime);<br>
}</p>
<p>int APIENTRY WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nShowCmd)<br>
{<br>
int nResult = MessageBox(NULL,“Are you sure you want to start the clicker?\n(You will be able to stop at any time by pressing and releasing the F8 key…)”,“MouseClicker”,MB_YESNO|MB_ICONQUESTION);<br>
POINT p;<br>
switch(nResult)<br>
{<br>
case IDYES:<br>
while(!(GetAsyncKeyState(VK_F8)))<br>
{<br>
GetCursorPos(&amp;p);<br>
ClickMouse(p.x,p.y,1000,2000);<br>
}<br>
break;<br>
case IDNO:<br>
default:<br>
ExitProcess(0x0);<br>
break;<br>
}<br>
return 0;<br>
}[/code]Compile and run your project.  You will find that it keeps clicking wherever your mouse is, rests for about 1-2 seconds between clicks, and terminates when you press F8.  I’ll run you through how this works.</p>
<p><code>#define WIN32_LEAN_AND_MEAN
#include &lt;windows.h&gt;
#include &lt;stdlib.h&gt;</code>These <span class="bbcode-i"><span class="hashtag">#include</span></span> and <span class="bbcode-i"><span class="hashtag">#define</span></span> statements are not actual C/C++ programming statements.  They are <span class="bbcode-i">directives</span> to the compiler.  <span class="hashtag">#define</span> WIN32_LEAN_AND_MEAN tells the compiler that wherever it spots the symbol WIN32_LEAN_AND_MEAN in the code it compiles, to consider it a ‘defined symbol’.  You might not understand how this works at first, but this line results in a smaller executable by causing rarely-used functions and classes to be ignored when compiling the contents of windows.h.</p>
<p>The <span class="hashtag">#include</span> statements are pretty straightforward - the compiler searches its predefined include directories (you typically don’t need to know or care what those are) and replaces the lines <span class="hashtag">#include</span> &lt;windows.h&gt; and <span class="hashtag">#include</span> &lt;stdlib.h&gt; with the contents of windows.h and stdlib.h respectively.  This makes the various functions and structures we use in the code that we actually write available to us, like mouse_event, rand, Sleep, MessageBox, and so on.</p>
<p><code>void ClickMouse(ULONG x, ULONG y, DWORD nMinSleepTime, DWORD nMaxSleepTime)</code>This is a <span class="bbcode-i">function definition</span>.  If you understand the concept of a mathematical function, like, for example f(x)=x^2+3x+3, then the idea here may seem somewhat familiar to you.  A C++ function is declared with the following syntax:</p>
<pre><code class="lang-auto">returntype functionname(argument list)</code></pre>
<p>You’ll notice that the returntype for our function here is void.  This is our way of saying that this function won’t produce anything.  The function name is ClickMouse.  The compiler isn’t picky about what you name your functions and variables, but it is good programming practice to name your functions and variables in a way that reflects what they do, so that if you decide to take a break on one of your projects, then come back and see a function named qwertyasdf, you might not remember what that function does.  Since this function here is designed to click the left mouse button, a name like ClickMouse is appropriate.</p>
<p>The argument list, is, believe it or not, a list of arguments.  These arguments are variables (there will be a time when you deal with arguments that are <span class="bbcode-i">arrays, pointers, and references</span> rather than simple variables, but for now, function arguments are just variables).   The arguments will effect the output and behaviour of the function.  ULONG x and ULONG y specify what the x and y mouse coordinates should be for the click.  The ULONG type is the same thing as an ‘unsigned long’, aka, a positive integer.  If you’re scratching your head right now, then read <a href="http://www.cppreference.com/data_types.html" data-bbcode="true" rel="nofollow noopener">this</a>.  DWORD nMinSleepTime and nMaxSleepTime will be used to determine the minimum and maximum time to wait between clicks.</p>
<p>NOTE: DWORD and ULONG are <span class="bbcode-b">NOT</span> innate C/C++ data types.  They are defined in windows.h and you will not be able to use them unless your code includes windows.h or you define these types yourself.</p>
<p>Now, lets look at the function body:</p>
<p><code>{
    srand(GetTickCount());
    mouse_event(MOUSEEVENTF_LEFTDOWN,x,y,NULL,NULL);
    mouse_event(MOUSEEVENTF_LEFTUP,x,y,NULL,NULL);
    Sleep((rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime);
}</code>The curly brackets {} are used to enclose the function body.  Each line inside these brackets is executed in order.  srand() is a function declared in stdlib.h and is used to seed random number generation to any integer.  GetTickCount returns the number of milliseconds since the system started, so the line srand((GetTickCount()) seeds random number generation to the number of milliseconds since the system has started - which ensures that the sequence of random numbers will be truly random and not the same sequence repeated over and over again.  If you don’t understand exactly what I’m trying to say here, don’t worry - just remember to add this line in any program where you want ‘true’ random number generation.  Let’s look at the next two lines.</p>
<p>mouse_event is a function which simulates mouse input, which can include moving, left or right clicking, and scrolling the mouse.  The only arguments to this function which we truly care about are the first three.  The first parameter indicates what type of mouse action we want to simulate, in this case, pressing and releasing the left mouse button, so we use MOUSEEVENTF_LEFTDOWN and MOUSEEVENTF_LEFTUP in that order.  This is considered a left click.  The next two parameters specify where on the screen, in (x,y) coordinates to make the click.  In this case, we take x and y from the first two arguments to ClickMouse and pass them into mouse_event.</p>
<p>The next line uses the Sleep() API.  This causes the program to wait, or “sleep” for the specified number of milliseconds.  Since we’re trying to reduce detectability, we want this time to be random.  More specifically, we want the time to be anywhere between nMinSleepTime and nMaxSleepTime.  The line (rand()%nMaxSleepTime-nMinSleepTime)+nMinSleepTime will accomplish this.  The % modulus operator returns the remainder of integer division of Left side/Right side, so any random number generated will be less than the difference between nMaxSleepTime and nMinSleepTime, and nMinSleepTime is added to that number, making the Sleep time anywhere between nMinSleepTime and nMaxSleepTime.  If you can understand basic mathematical concepts, then this should make sense to you.</p>
<p>So, if you’ve chewed all that then you should understand what makes the ClickMouse function simulate a left click and rest for an amount of time between two specified milliseconds.</p>
<p>The next line is just something you’ll have to add whenever you want to write a Windows application.  If you’ve written C/C++ console applications, you’ll be used to using a main() function to place all the code executed at runtime.  For Windows applications, you must use WinMain, and the four arguments are nothing to worry about for the time being.  Just remember that everything inside WinMain() is executed at runtime.</p>
<p>The first line inside this function introduces the MessageBox API.  This displays a prompt with a title, caption, buttons and icon which you specify, and stores the user’s answer in a variable called nResult.  It is conventional to prefix all integer variable names with a lowercase n.  MessageBox takes four arguments - the first we don’t care about right now.  The second contains the text which the user will be prompted with.  The third contains the window caption for the message box.  The last is a combination of both what buttons and what icon for the message box to have:<br>
Icons:<br>
MB_ICONINFORMATION - That little blue speech bubble with the “i” which you’ve surely seen before<br>
MB_ICONQUESTION - A blue question mark which is usually accompanied by Yes/No or Yes/No/Cancel<br>
MB_ICONEXCLAMATION - That annoying little yellow exclamation mark which causes a small, frustrating, sound which is typically used to indicate that the user did something wrong.<br>
MB_ICONSTOP - A small red “X” which is typically seen when a program fault occurs.</p>
<p>Buttons:<br>
MB_OK - Simply an “OK” button with nothing else<br>
MB_OKCANCEL - Ok and Cancel<br>
MB_YESNO - Yes and No buttons<br>
MB_YESNOCANCEL - Yes, No and Cancel<br>
MB_ABORTRETRYIGNORE - Abort, Retry and Ignore buttons.</p>
<p>There are probably a few more than this, but I can’t remember them all.  You can combine icons and buttons by using the | operator.  For example, if you wanted the MB_ICONINFORMATION icon and the MB_OK button, use MB_OK|MB_ICONINFORMATION (the order that you place these in doesn’t matter).  Whichever button the user pushes will be stored in nResult.  This will be IDYES if the user presses Yes, or IDNO if the user presses No.  The next line creates a new POINT structure called p.  This is only used if the user presses Yes to the MessageBox.  The switch statement takes any integer quantity, or any quantity which can be implicitly convert into an integer, and compares them to different case labels.  Whichever label matches the integer quality will be executed.  So, if the user presses yes, then the case IDYES: label is executed.</p>
<p>A while loop continues execution repeatedly until the condition in the brackets becomes false.  The ! (logical NOT) operator reverses the sense of of any logical expression following it - so if it is true, it becomes false, and if it is false, it becomes true.  The GetAsyncKeyState() function returns true if the key specified is down, and false otherwise.  So the while loop is true until the user pushes F8, and the clicking will continue until then.  GetCursorPos takes a <span class="bbcode-i">pointer</span> to a POINT structure.  You can tell if a function requires a pointer or reference parameter if the function’s argument list adds a * or an &amp; to the argument name.  In this case, we use GetCursorPos(&amp;p) to assign the current mouse position to p.</p>
<p>The next line calls the ClickMouse function - the one that we wrote earlier.  It clicks on the x and y coordinates stored in p, and because we called GetCursorPos(&amp;p), the p.x and p.y values will be the current x and y coordinates of the cursor.  The next arguments, 1000 and 2000, specify that the sleep time should be any random number between 1000 and 2000 milliseconds, in other words, 1 to 2 seconds.</p>
<p>Should the user press F8 and break out of the while loop, the next line will be the break; statement.  When used in a switch statement, break causes the program to break out of the switch and continue program execution following the terminating } of the switch block.</p>
<p>You may be wondering what will happen if the user presses No instead of Yes, and correctly so - you’ll see that there is no code for case IDNO:, it moves directly on to the default: statement.  But, you’ll also see that there is no break statement for case IDNO.  This means that the next label, in this case, default, which is executed whenever none of the case labels satisfy the integer quantity passed to the switch statement, will be executed following all the statements in case IDNO, but since there are none, it will fall directly into the default: handler.   The ExitProcess function causes the calling process and the current one to terminate, and the return code 0x0 (aka 0, NULL, etc) means (on Windows at least) that the program ran okay.  As far as we care right now, ExitProcess just kills the program. You’re familiar with what the following break statement does.  The last statement, return 0, accomplishes the exact same thing as ExitProcess(0x0) - the only reason I included ExitProcess was to give you an idea of how it was used.  All functions that are not void must return a value.  main and WinMain return integer values to the operating system.  A return value of zero typically means that execution was successful.</p>
<p>There, now you have your first taste of programming C++ for RS cheating.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775/1</link>
        <pubDate>Fri, 05 Dec 2008 02:27:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-248775-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-c-for-rs-cheating-beginners-tutorial/248775.rss">C/C++ for RS cheating - beginner&#39;s tutorial</source>
      </item>
  </channel>
</rss>
