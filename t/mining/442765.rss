<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mining</title>
    <link>https://forum.moparisthebest.com/t/mining/442765</link>
    <description>Well this is the first enum i&#39;ve ever created..
so  I might be making a stupid mistake.
but.
When you mine... It gives 6 ores at a time.
&amp; it doesn&#39;t check if you have a pickaxe.
[code]
package server.model.players.skills;

import server.model.players.*;
import server.model.players.Client;
import server.model.players.Player;
import server.model.players.PlayerAssistant;
import server.model.items.ItemAssistant;
import server.Config;
import server.util.Misc;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import server.model.items.Item;


/**
* @Author Sanity
*/
public class Mining {
		private	Client c;
		public Mining (Client c) {
		this.c = c;
		}
		private int exp;
		private int oreType;
		private int pickType;
		private int levelReq;
			private final int[] RANDOM_GEMS = {1623,1621,1619,1617,1631};


	public enum Picks {
	BRONZE(1265,6747,1,&quot;Bronze pickaxe&quot;),
	IRON(1267,6748,1,&quot;Iron pickaxe&quot;),
	STEEL(1269,6749,6,&quot;Steel pickaxe&quot;),
	MITHRIL(1273,6751,6,&quot;Mithril pickaxe&quot;),
	ADDY(1271,6750,21,&quot;Adamant pickaxe&quot;),
	RUNE(1275,6746,31,&quot;Rune pickaxe&quot;);

		public static HashMap &lt;Integer,Picks&gt; Mining = new HashMap&lt;Integer,Picks&gt;();
		int Id, animation, levelreq;
		String name;
		
		static {
    for (Picks m : Picks.values())
      Mining.put(m.getId(), m);
    }
	      /**
         * 
         * @param Id
         * @param ANIMATION
         * @param LEVELREQUIRED
         * @param Name
         */
		Picks(final int Id, final int animation,final int levelreq,final String name) {
		this.Id = Id;
		this.animation = animation;
		this.levelreq = levelreq;
		this.name = name;
		}
		public int getId(){
		return Id;
		}
		public int getanimation(){
		return animation;
		}
		public int getlevelreq(){
		return animation;
		}
		public String getname(){
		return name;
		}
		public static Picks forId(int Id) {
      return Mining.get(Id);
    }
    
  }


	public void startMining(int oreType, int levelReq, int exp) {
		c.turnPlayerTo(c.objectX, c.objectY);
		for (final Picks m : Picks.values()) {
		if (c.getItems().playerHasItem(m.getId(), 1)){
			if (c.playerLevel[c.playerMining] &gt;= levelReq) {
				c.startAnimation(m.getId());
				c.sendMessage(&quot;You swing your pick at the rock.&quot;);
				this.oreType = oreType;
				this.exp = exp;
				this.levelReq = levelReq;
				this.pickType = m.getId();
				c.miningTimer = getMiningTimer(2000);
			

		} else if (c.playerLevel[c.playerMining] &lt; levelReq) {
				resetMining();
				c.sendMessage(&quot;You need a mining level of &quot; + levelReq + &quot; to mine this rock.&quot;);
				c.startAnimation(65535);
		} else if (!c.getItems().playerHasItem(m.getId(), 1)) {
			resetMining();
			c.sendMessage(&quot;You need a pickaxe to mine this rock.&quot;);
			c.startAnimation(65535);
			c.getPA().resetVariables();
				}
			}
		}
	}
	public void mineOre() {
			for (final Picks m : Picks.values()) {
			
		if (c.getItems().addItem(oreType,1)) {
			c.startAnimation(m.getId());
			c.sendMessage(&quot;You manage to mine some ore.&quot;);
			c.getPA().addSkillXP(exp * Config.MINING_EXPERIENCE, c.playerMining);
			c.getPA().refreshSkill(c.playerMining);
			c.miningTimer = getMiningTimer(oreType);
			if (Misc.random(25) == 10) {
				c.getItems().addItem(RANDOM_GEMS[(int)(RANDOM_GEMS.length * Math.random())], 1);
				c.sendMessage(&quot;You find a gem!&quot;);
				
			}
		} else {
			c.getPA().resetVariables();
			c.startAnimation(65535);
				}
			}
		}
	

	public void resetMining() {
		this.oreType = -1;
		this.exp = -1;
		this.levelReq = -1;
		this.pickType = -1;
	//	this.getId = -1;
	}
	
public boolean validPick(int Id) {
        for (final Picks m : Picks.values()) {
            if (c.getItems().playerHasItem(m.getId(), 1)) {
                if (m.getId() == Id) {
                    return true;
                }
            }
        }
        return false;
    }
	
	public int getMiningTimer(int ore) {
		int time = Misc.random(5);
		if (ore == 451) {
			time += 4;
		}
		return time;
	}
	
}
[/code]
Here&#39;s my mining class
PLOX help c;</description>
    
    <lastBuildDate>Mon, 21 May 2012 00:36:46 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/mining/442765.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mining</title>
        <dc:creator><![CDATA[@ravekitty ravekitty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ravekitty">@ravekitty</a> wrote:</p>
          <blockquote>
              <p>Well this is the first enum i’ve ever created…<br>
so  I might be making a stupid mistake.<br>
but.<br>
When you mine… It gives 6 ores at a time.<br>
&amp; it doesn’t check if you have a pickaxe.</p>
<pre><code class="lang-auto">package server.model.players.skills;

import server.model.players.*;
import server.model.players.Client;
import server.model.players.Player;
import server.model.players.PlayerAssistant;
import server.model.items.ItemAssistant;
import server.Config;
import server.util.Misc;
import java.sql.Date;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.HashMap;
import server.model.items.Item;


/**
* @Author Sanity
*/
public class Mining {
		private	Client c;
		public Mining (Client c) {
		this.c = c;
		}
		private int exp;
		private int oreType;
		private int pickType;
		private int levelReq;
			private final int[] RANDOM_GEMS = {1623,1621,1619,1617,1631};


	public enum Picks {
	BRONZE(1265,6747,1,"Bronze pickaxe"),
	IRON(1267,6748,1,"Iron pickaxe"),
	STEEL(1269,6749,6,"Steel pickaxe"),
	MITHRIL(1273,6751,6,"Mithril pickaxe"),
	ADDY(1271,6750,21,"Adamant pickaxe"),
	RUNE(1275,6746,31,"Rune pickaxe");

		public static HashMap &lt;Integer,Picks&gt; Mining = new HashMap&lt;Integer,Picks&gt;();
		int Id, animation, levelreq;
		String name;
		
		static {
    for (Picks m : Picks.values())
      Mining.put(m.getId(), m);
    }
	      /**
         * 
         * @param Id
         * @param ANIMATION
         * @param LEVELREQUIRED
         * @param Name
         */
		Picks(final int Id, final int animation,final int levelreq,final String name) {
		this.Id = Id;
		this.animation = animation;
		this.levelreq = levelreq;
		this.name = name;
		}
		public int getId(){
		return Id;
		}
		public int getanimation(){
		return animation;
		}
		public int getlevelreq(){
		return animation;
		}
		public String getname(){
		return name;
		}
		public static Picks forId(int Id) {
      return Mining.get(Id);
    }
    
  }


	public void startMining(int oreType, int levelReq, int exp) {
		c.turnPlayerTo(c.objectX, c.objectY);
		for (final Picks m : Picks.values()) {
		if (c.getItems().playerHasItem(m.getId(), 1)){
			if (c.playerLevel[c.playerMining] &gt;= levelReq) {
				c.startAnimation(m.getId());
				c.sendMessage("You swing your pick at the rock.");
				this.oreType = oreType;
				this.exp = exp;
				this.levelReq = levelReq;
				this.pickType = m.getId();
				c.miningTimer = getMiningTimer(2000);
			

		} else if (c.playerLevel[c.playerMining] &lt; levelReq) {
				resetMining();
				c.sendMessage("You need a mining level of " + levelReq + " to mine this rock.");
				c.startAnimation(65535);
		} else if (!c.getItems().playerHasItem(m.getId(), 1)) {
			resetMining();
			c.sendMessage("You need a pickaxe to mine this rock.");
			c.startAnimation(65535);
			c.getPA().resetVariables();
				}
			}
		}
	}
	public void mineOre() {
			for (final Picks m : Picks.values()) {
			
		if (c.getItems().addItem(oreType,1)) {
			c.startAnimation(m.getId());
			c.sendMessage("You manage to mine some ore.");
			c.getPA().addSkillXP(exp * Config.MINING_EXPERIENCE, c.playerMining);
			c.getPA().refreshSkill(c.playerMining);
			c.miningTimer = getMiningTimer(oreType);
			if (Misc.random(25) == 10) {
				c.getItems().addItem(RANDOM_GEMS[(int)(RANDOM_GEMS.length * Math.random())], 1);
				c.sendMessage("You find a gem!");
				
			}
		} else {
			c.getPA().resetVariables();
			c.startAnimation(65535);
				}
			}
		}
	

	public void resetMining() {
		this.oreType = -1;
		this.exp = -1;
		this.levelReq = -1;
		this.pickType = -1;
	//	this.getId = -1;
	}
	
public boolean validPick(int Id) {
        for (final Picks m : Picks.values()) {
            if (c.getItems().playerHasItem(m.getId(), 1)) {
                if (m.getId() == Id) {
                    return true;
                }
            }
        }
        return false;
    }
	
	public int getMiningTimer(int ore) {
		int time = Misc.random(5);
		if (ore == 451) {
			time += 4;
		}
		return time;
	}
	
}</code></pre>
<p>Here’s my mining class<br>
PLOX help c;</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mining/442765/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mining/442765/1</link>
        <pubDate>Mon, 21 May 2012 00:36:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442765-1</guid>
        <source url="https://forum.moparisthebest.com/t/mining/442765.rss">Mining</source>
      </item>
  </channel>
</rss>
