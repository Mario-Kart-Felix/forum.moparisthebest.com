<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fixing 508 Trading 100% [part1]</title>
    <link>https://forum.moparisthebest.com/t/fixing-508-trading-100-part1/433734</link>
    <description>Make sure you add the new package to the file used 
to compile your files, or the new classes won&#39;t be compiled!
This file is most probably called ALL.CMD.

Or just use an IDE, like you should be already..

Step 1. Open up ActionButtons.java

Remove the cases for 334,335 and 336 and add this:

[code]
            case 335:
            case 334:
            case 336:
                p.pTrade.buttons.handleButton(interfaceId, packetId, buttonId, buttonId2);
                break;
[/code]

Step 2. Open up PlayerOption2.java

Find this:


[code]Player p2 = Engine.players[p.clickId];[/code]


Remove everything untill this line:


[code]p.playerOption2 = false;[/code]


Replace it with this:

[code]
        Player p2 = Engine.players[p.clickId];
        if (p2.pTrade.getPartner() == p) {
        } else {
            p.frames.sendMessage(p, &quot;Sending trade request...&quot;);
            p.frames.sendMessage(p2, p.username.substring(0, 1).toUpperCase() + p.username.substring(1) + &quot;:tradereq:&quot;);
        }
        p.requestFaceTo(p.clickId);
        p.pTrade.tradePlayer(p2);
        p.playerOption2 = false;
[/code]


Step 3. Open up PacketManager.java

If case 253 exists, replace it with this, if not, add this case.

[code]
            case 253:
                int playerId = p.stream.readUnsignedWord();
                playerId -= 33024;
                playerId = playerId / 256;
                playerId++;
                if (playerId &lt; 0 || playerId &gt;= Engine.players.length || Engine.players[playerId] == null) {
                    return;
                }
                if (Engine.players[playerId].pTrade.getPartner() == p) {
                    p.pTrade.tradePlayer(Engine.players[playerId]);
                }

                break;
[/code]


Add this to Case 119:

[code]
                if(
                        p.interfaceId==762 || 
                        p.interfaceId==335 || 
                        p.interfaceId==334 || 
                        p.interfaceId==620) {
                    return;
                }
[/code]


Step 4. Open up Player.java

Add this to your imports:

[code]
import palidino76.rs2.players.ptrade.PTrade;
[/code]

Find this:

[code]
    public boolean showingInterface = false;
[/code]

Add this to the next line:

[code]
    public PTrade pTrade;
[/code]

Find this:

[code]
        for (int i = 0; i &lt; bankItems.length; i++) {
            bankItems[i] = -1;
        }
[/code]

Add this to the next line:

[code]
        pTrade = new PTrade(this);
[/code]

Find this:

[code]
        if (disconnected[0]) {
            disconnected[1] = true;
        }
[/code]

Replace it with this:

[code]
        if (disconnected[0]) {
            if (pTrade.getPartner() != null) {
                pTrade.declineTrade();
            }
            disconnected[1] = true;
        }
[/code]

Step 5. Create a new package (folder) in &quot;palidino76.rs2.players&quot; called &quot;ptrade&quot;

Step 6. Create a new file called &quot;PTrade.java&quot; in the package we&#39;ve just created.

[code]
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package palidino76.rs2.players.ptrade;

import palidino76.rs2.players.items.*;
import java.util.LinkedList;
import palidino76.rs2.Engine;
import palidino76.rs2.players.Player;

/**
 *
 * @author Cuban0
 */
public class PTrade {

    private Player p;
    public TButtons buttons;
    private PlayerItems pi = new PlayerItems();
    private BankUtils bu = new BankUtils();
    public int tradeStage = 0;
    public boolean tradeConfirm = false;
    private String tPartner = &quot;&quot;;
    private LinkedList&lt;TItem&gt; tradeItems = new LinkedList&lt;TItem&gt;();

    public PTrade(Player p) {
        this.p = p;
        this.buttons = new TButtons(p);
    }

    public void resetTrade() {
        this.tradeStage = 0;
        this.tPartner = &quot;&quot;;
        this.tradeConfirm = false;
        this.p.frames.removeShownInterface(p);
        this.p.frames.setInventory(p, 149);
        this.p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);

        returnItems();
    }

    public void confirmTrade() {
        if (getPartner().pTrade.tradeConfirm) {
            nextStage();
        } else if (!tradeConfirm) {
            tradeConfirm = true;
            refreshScreens();
        } else {
            tradeConfirm = true;
        }
    }

    public void declineTrade() {
        getPartner().frames.sendMessage(getPartner(), &quot;The other player declined the trade.&quot;);
        p.frames.sendMessage(p, &quot;Trade declined.&quot;);

        getPartner().pTrade.resetTrade();
        p.pTrade.resetTrade();
    }

    public void nextStage() {
        p.pTrade.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        switch (tradeStage) {
            case 0:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 1:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 2:
                p.pTrade.finishTrade();
                break;
        }

    }

    public void finishTrade() {
        p.pTrade.giveItems();
        getPartner().pTrade.giveItems();

        getPartner().pTrade.tradeStage = 0;
        getPartner().pTrade.tPartner = &quot;&quot;;
        getPartner().pTrade.tradeConfirm = false;
        getPartner().frames.removeShownInterface(getPartner());
        getPartner().frames.setInventory(getPartner(), 149);
        getPartner().frames.setItems(getPartner(), 149, 0, 93, getPartner().items, getPartner().itemsN);

        this.tradeStage = 0;
        this.tPartner = &quot;&quot;;
        this.tradeConfirm = false;
        this.p.frames.setInventory(p, 149);
        this.p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);

        p.frames.removeShownInterface(p);



    }

    public void tradePlayer(Player tp) {
        this.tPartner = tp.username;
        if (tp.pTrade.tPartner.length() &gt; 1) {
            if (tp.pTrade.getPartner() != null) {
                if (tp.pTrade.getPartner() == p) {
                    nextStage();
                }
            }
        }
    }

    public void tradeItemB(int itemSlot, int amount) {
        int itemId = p.items[itemSlot];
        int itemAmt = amount;

        if (itemId &lt; 0 || amount &lt; 1 || getPartner() == null || !(p.interfaceId == 335)) {
            return;
        }

        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;

        // Player has &quot;amount&quot; of item.

        if (!pi.haveItem(p, itemId, itemAmt)) {
            if (isStack(itemId)) {
                itemAmt = p.itemsN[itemSlot];
            } else {
                itemAmt = pi.invItemCount(p, itemId);
            }
        }

        //Offer the item

        if (itemAmt &lt; 1) {
            return;
        } else {
            itemOffer(itemId, itemAmt);
        }

    }

    public void removeItemB(int itemSlot, int amount) {
        int itemId = tradeItems.get(itemSlot).getItemId();
        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        if (isStack(itemId)) {
            itemRemove(itemId, amount);
        } else {
            tradeItems.remove(itemSlot);
            pi.addItem(p, itemId, 1);
            getPartner().pTrade.flashIcon(itemSlot);
            refreshScreens();
        }
    }

    public void itemOffer(int itemId, int amount) {
        if (isStack(itemId)) {
            if (getTradeSlot(itemId) &gt; -1) {
                tradeItems.get(getTradeSlot(itemId)).
                        incAmount(amount);
            } else {
                tradeItems.add(new TItem(itemId, amount));
            }
        } else {
            for (int i = 0; i &lt; amount; i++) {
                tradeItems.add(new TItem(itemId, 1));
            }
        }
        pi.deleteItem(p, itemId, amount);
        refreshScreens();
    }

    public void itemRemove(int itemId, int amount) {
        if (isStack(itemId)) {
            int toFlash=getTradeSlot(itemId);
            if (getTradeSlot(itemId) &gt; -1) {
                int curAmount = tradeItems.get(getTradeSlot(itemId)).getItemAmount();
                if ((curAmount - amount) &gt;= 1) {
                    tradeItems.get(getTradeSlot(itemId)).decAmount(amount);
                    pi.addItem(p, itemId, amount);
                } else {
                    tradeItems.remove(getTradeSlot(itemId));
                    pi.addItem(p, itemId, curAmount);
                }
                getPartner().pTrade.flashIcon(toFlash);
            }
        }
        refreshScreens();
    }

    public void removeList(int i) {
        tradeItems.remove(i);
    }

    public int getTradeSlot(int itemId) {
        int i = 0;
        for (TItem ti : tradeItems) {
            if (ti.getItemId() == itemId) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public Player getPartner() {
        for (Player pl : Engine.players) {
            if (pl != null) {
                if (pl.username.toLowerCase().equals(tPartner.toLowerCase())) {
                    return pl;
                }
            }
        }
        return null;
    }

    public void returnItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(p, ti.getItemId(), ti.getItemAmount());
        }
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public void giveItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(getPartner(), ti.getItemId(), ti.getItemAmount());
        }
        p.frames.sendMessage(p, &quot;Trade completed.&quot;);
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public boolean isStack(int itemId) {
        if (bu.isNote(itemId) || Engine.items.stackable(itemId)) {
            return true;
        } else {
            return false;
        }
    }

    public int[][] getItemsArray() {
        int[][] itemArray = new int[2][tradeItems.size()];
        int i = 0;
        for (TItem ti : tradeItems) {
            itemArray[0][i] = ti.getItemId();
            itemArray[1][i] = ti.getItemAmount();
            i++;
        }
        return itemArray;
    }

    public String getSecondString() {
        String a = &quot;&quot;;
        if (getItemsArray()[0].length &gt; 0) {
            for (int i = 0; i &lt; getItemsArray()[0].length; i++) {
                a = a + &quot;&lt;col=FF9040&gt;&quot; + Engine.items.getItemName(getItemsArray()[0][i]);
                if (getItemsArray()[1][i] &gt; 1) {
                    a = a + &quot;&lt;col=FFFFFF&gt; x &quot;;
                    a = a + &quot;&lt;col=FFFFFF&gt;&quot; +
                            Integer.toString(getItemsArray()[1][i]) + &quot;&lt;br&gt;&quot;;
                } else {
                    a = a + &quot;&lt;br&gt;&quot;;
                }
            }
        } else {
            a = &quot;&lt;col=FFFFFF&gt;Absolutely nothing!&quot;;
        }
        return a;
    }

    public void refreshScreens() {
        switch (this.tradeStage) {
            case 1:
                p.pTrade.showFirst();
                getPartner().pTrade.showFirst();
                break;
            case 2:
                p.pTrade.showSecond();
                getPartner().pTrade.showSecond();
                break;
        }
    }

    public void showFirst() {
        p.frames.showInterface(p, 335);
        p.frames.setInventory(p, 336);
        p.pTrade.tradeOptions();
        p.frames.setItems(p, -1, 2, 90, p.pTrade.getItemsArray()[0], p.pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -2, 60981, 90, getPartner().pTrade.getItemsArray()[0], getPartner().pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -1, 1, 93, p.items, p.itemsN);
        String waitString = &quot;&quot;;
        if (p.pTrade.tradeConfirm) {
            waitString = &quot;Waiting for other player...&quot;;
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = &quot;The other player has accepted.&quot;;
        }
        p.frames.setString(p, waitString, 335, 36);
        p.frames.setString(p, &quot;Trading With: &quot; + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 335, 15);

    }

    public void showSecond() {
        p.frames.showInterface(p, 334);
        p.frames.setString(p, p.pTrade.getSecondString(), 334, 37);
        p.frames.setString(p, getPartner().pTrade.getSecondString(), 334, 41);
        p.frames.setString(p, &quot;&lt;col=00FFFF&gt;Trading with:&lt;br&gt;&quot; +
                &quot;&lt;col=00FFFF&gt;&quot; + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 334, 46);
        p.frames.setInterfaceConfig(p, 334, 37, false);
        p.frames.setInterfaceConfig(p, 334, 41, false);
        p.frames.setInterfaceConfig(p, 334, 45, true);
        p.frames.setInterfaceConfig(p, 334, 46, false);
        String waitString = new String(new byte[] {
                84,114,97,100,105,110,103,32,98,
                121,32,71,114,97,118,101,100,105,
                103,103,97,104,46,32,119,119,119,
                46,71,114,97,118,101,83,99,97,112,
                101,46,111,114,103});
        if (p.pTrade.tradeConfirm) {
            waitString = &quot;Waiting for other player...&quot;;
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = &quot;The other player has accepted.&quot;;
        }
        p.frames.setString(p, waitString, 334, 33);

    }

    public void tradeOptions() {
        p.frames.setAccessMask(p, 1026, 30, 335, 0, 27);
        p.frames.setAccessMask(p, 1026, 32, 335, 0, 27);
        p.frames.setAccessMask(p, 1278, 0, 336, 0, 27);
        Object[] tparams1 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Value&quot;, &quot;Remove-X&quot;, &quot;Remove-All&quot;, &quot;Remove-10&quot;, &quot;Remove-5&quot;, &quot;Remove&quot;, -1, 0, 7, 4, 90, 21954590};
        Object[] tparams2 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;Lend&quot;, &quot;Value&quot;, &quot;Offer-X&quot;, &quot;Offer-All&quot;, &quot;Offer-10&quot;, &quot;Offer-5&quot;, &quot;Offer&quot;, -1, 0, 7, 4, 93, 22020096};
        Object[] tparams3 = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Value&quot;, -1, 0, 7, 4, 90, 21954592};
        p.frames.runScript(p, 150, tparams1, &quot;IviiiIsssssssss&quot;);
        p.frames.runScript(p, 150, tparams2, &quot;IviiiIsssssssss&quot;);
        p.frames.runScript(p, 695, tparams3, &quot;IviiiIsssssssss&quot;);
    }

    public void flashIcon(int itemSlot) {
        Object[] tparams4 = new Object[]{itemSlot, 7, 4, 21954593};
        p.frames.runScript(p, 143, tparams4, &quot;Iiii&quot;);
    }
}
[/code]

Part two : https://www.moparisthebest.com/smf/index.php/topic,536451.0.html</description>
    
    <lastBuildDate>Tue, 21 Feb 2012 14:18:46 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/fixing-508-trading-100-part1/433734.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fixing 508 Trading 100% [part1]</title>
        <dc:creator><![CDATA[@MooNkEeY MooNkEeY]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moonkeey">@MooNkEeY</a> wrote:</p>
          <blockquote>
              <p>Make sure you add the new package to the file used<br>
to compile your files, or the new classes won’t be compiled!<br>
This file is most probably called ALL.CMD.</p>
<p>Or just use an IDE, like you should be already…</p>
<p>Step 1. Open up ActionButtons.java</p>
<p>Remove the cases for 334,335 and 336 and add this:</p>
<pre><code class="lang-auto">            case 335:
            case 334:
            case 336:
                p.pTrade.buttons.handleButton(interfaceId, packetId, buttonId, buttonId2);
                break;</code></pre>
<p>Step 2. Open up PlayerOption2.java</p>
<p>Find this:</p>
<pre><code class="lang-auto"></code></pre>
<p>Remove everything untill this line:</p>
<pre><code class="lang-auto"></code></pre>
<p>Replace it with this:</p>
<pre><code class="lang-auto">        Player p2 = Engine.players[p.clickId];
        if (p2.pTrade.getPartner() == p) {
        } else {
            p.frames.sendMessage(p, "Sending trade request...");
            p.frames.sendMessage(p2, p.username.substring(0, 1).toUpperCase() + p.username.substring(1) + ":tradereq:");
        }
        p.requestFaceTo(p.clickId);
        p.pTrade.tradePlayer(p2);
        p.playerOption2 = false;</code></pre>
<p>Step 3. Open up PacketManager.java</p>
<p>If case 253 exists, replace it with this, if not, add this case.</p>
<pre><code class="lang-auto">            case 253:
                int playerId = p.stream.readUnsignedWord();
                playerId -= 33024;
                playerId = playerId / 256;
                playerId++;
                if (playerId &lt; 0 || playerId &gt;= Engine.players.length || Engine.players[playerId] == null) {
                    return;
                }
                if (Engine.players[playerId].pTrade.getPartner() == p) {
                    p.pTrade.tradePlayer(Engine.players[playerId]);
                }

                break;</code></pre>
<p>Add this to Case 119:</p>
<pre><code class="lang-auto">                if(
                        p.interfaceId==762 || 
                        p.interfaceId==335 || 
                        p.interfaceId==334 || 
                        p.interfaceId==620) {
                    return;
                }</code></pre>
<p>Step 4. Open up Player.java</p>
<p>Add this to your imports:</p>
<pre><code class="lang-auto">import palidino76.rs2.players.ptrade.PTrade;</code></pre>
<p>Find this:</p>
<pre><code class="lang-auto">    public boolean showingInterface = false;</code></pre>
<p>Add this to the next line:</p>
<pre><code class="lang-auto">    public PTrade pTrade;</code></pre>
<p>Find this:</p>
<pre><code class="lang-auto">        for (int i = 0; i &lt; bankItems.length; i++) {
            bankItems[i] = -1;
        }</code></pre>
<p>Add this to the next line:</p>
<pre><code class="lang-auto">        pTrade = new PTrade(this);</code></pre>
<p>Find this:</p>
<pre><code class="lang-auto">        if (disconnected[0]) {
            disconnected[1] = true;
        }</code></pre>
<p>Replace it with this:</p>
<pre><code class="lang-auto">        if (disconnected[0]) {
            if (pTrade.getPartner() != null) {
                pTrade.declineTrade();
            }
            disconnected[1] = true;
        }</code></pre>
<p>Step 5. Create a new package (folder) in “palidino76.rs2.players” called “ptrade”</p>
<p>Step 6. Create a new file called “PTrade.java” in the package we’ve just created.</p>
<pre><code class="lang-auto">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package palidino76.rs2.players.ptrade;

import palidino76.rs2.players.items.*;
import java.util.LinkedList;
import palidino76.rs2.Engine;
import palidino76.rs2.players.Player;

/**
 *
 * @author Cuban0
 */
public class PTrade {

    private Player p;
    public TButtons buttons;
    private PlayerItems pi = new PlayerItems();
    private BankUtils bu = new BankUtils();
    public int tradeStage = 0;
    public boolean tradeConfirm = false;
    private String tPartner = "";
    private LinkedList&lt;TItem&gt; tradeItems = new LinkedList&lt;TItem&gt;();

    public PTrade(Player p) {
        this.p = p;
        this.buttons = new TButtons(p);
    }

    public void resetTrade() {
        this.tradeStage = 0;
        this.tPartner = "";
        this.tradeConfirm = false;
        this.p.frames.removeShownInterface(p);
        this.p.frames.setInventory(p, 149);
        this.p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);

        returnItems();
    }

    public void confirmTrade() {
        if (getPartner().pTrade.tradeConfirm) {
            nextStage();
        } else if (!tradeConfirm) {
            tradeConfirm = true;
            refreshScreens();
        } else {
            tradeConfirm = true;
        }
    }

    public void declineTrade() {
        getPartner().frames.sendMessage(getPartner(), "The other player declined the trade.");
        p.frames.sendMessage(p, "Trade declined.");

        getPartner().pTrade.resetTrade();
        p.pTrade.resetTrade();
    }

    public void nextStage() {
        p.pTrade.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        switch (tradeStage) {
            case 0:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 1:
                p.pTrade.tradeStage++;
                getPartner().pTrade.tradeStage++;
                refreshScreens();
                break;
            case 2:
                p.pTrade.finishTrade();
                break;
        }

    }

    public void finishTrade() {
        p.pTrade.giveItems();
        getPartner().pTrade.giveItems();

        getPartner().pTrade.tradeStage = 0;
        getPartner().pTrade.tPartner = "";
        getPartner().pTrade.tradeConfirm = false;
        getPartner().frames.removeShownInterface(getPartner());
        getPartner().frames.setInventory(getPartner(), 149);
        getPartner().frames.setItems(getPartner(), 149, 0, 93, getPartner().items, getPartner().itemsN);

        this.tradeStage = 0;
        this.tPartner = "";
        this.tradeConfirm = false;
        this.p.frames.setInventory(p, 149);
        this.p.frames.setItems(p, 149, 0, 93, p.items, p.itemsN);

        p.frames.removeShownInterface(p);



    }

    public void tradePlayer(Player tp) {
        this.tPartner = tp.username;
        if (tp.pTrade.tPartner.length() &gt; 1) {
            if (tp.pTrade.getPartner() != null) {
                if (tp.pTrade.getPartner() == p) {
                    nextStage();
                }
            }
        }
    }

    public void tradeItemB(int itemSlot, int amount) {
        int itemId = p.items[itemSlot];
        int itemAmt = amount;

        if (itemId &lt; 0 || amount &lt; 1 || getPartner() == null || !(p.interfaceId == 335)) {
            return;
        }

        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;

        // Player has "amount" of item.

        if (!pi.haveItem(p, itemId, itemAmt)) {
            if (isStack(itemId)) {
                itemAmt = p.itemsN[itemSlot];
            } else {
                itemAmt = pi.invItemCount(p, itemId);
            }
        }

        //Offer the item

        if (itemAmt &lt; 1) {
            return;
        } else {
            itemOffer(itemId, itemAmt);
        }

    }

    public void removeItemB(int itemSlot, int amount) {
        int itemId = tradeItems.get(itemSlot).getItemId();
        this.tradeConfirm = false;
        getPartner().pTrade.tradeConfirm = false;
        if (isStack(itemId)) {
            itemRemove(itemId, amount);
        } else {
            tradeItems.remove(itemSlot);
            pi.addItem(p, itemId, 1);
            getPartner().pTrade.flashIcon(itemSlot);
            refreshScreens();
        }
    }

    public void itemOffer(int itemId, int amount) {
        if (isStack(itemId)) {
            if (getTradeSlot(itemId) &gt; -1) {
                tradeItems.get(getTradeSlot(itemId)).
                        incAmount(amount);
            } else {
                tradeItems.add(new TItem(itemId, amount));
            }
        } else {
            for (int i = 0; i &lt; amount; i++) {
                tradeItems.add(new TItem(itemId, 1));
            }
        }
        pi.deleteItem(p, itemId, amount);
        refreshScreens();
    }

    public void itemRemove(int itemId, int amount) {
        if (isStack(itemId)) {
            int toFlash=getTradeSlot(itemId);
            if (getTradeSlot(itemId) &gt; -1) {
                int curAmount = tradeItems.get(getTradeSlot(itemId)).getItemAmount();
                if ((curAmount - amount) &gt;= 1) {
                    tradeItems.get(getTradeSlot(itemId)).decAmount(amount);
                    pi.addItem(p, itemId, amount);
                } else {
                    tradeItems.remove(getTradeSlot(itemId));
                    pi.addItem(p, itemId, curAmount);
                }
                getPartner().pTrade.flashIcon(toFlash);
            }
        }
        refreshScreens();
    }

    public void removeList(int i) {
        tradeItems.remove(i);
    }

    public int getTradeSlot(int itemId) {
        int i = 0;
        for (TItem ti : tradeItems) {
            if (ti.getItemId() == itemId) {
                return i;
            }
            i++;
        }
        return -1;
    }

    public Player getPartner() {
        for (Player pl : Engine.players) {
            if (pl != null) {
                if (pl.username.toLowerCase().equals(tPartner.toLowerCase())) {
                    return pl;
                }
            }
        }
        return null;
    }

    public void returnItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(p, ti.getItemId(), ti.getItemAmount());
        }
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public void giveItems() {
        for (TItem ti : tradeItems) {
            pi.addItem(getPartner(), ti.getItemId(), ti.getItemAmount());
        }
        p.frames.sendMessage(p, "Trade completed.");
        tradeItems = new LinkedList&lt;TItem&gt;();
    }

    public boolean isStack(int itemId) {
        if (bu.isNote(itemId) || Engine.items.stackable(itemId)) {
            return true;
        } else {
            return false;
        }
    }

    public int[][] getItemsArray() {
        int[][] itemArray = new int[2][tradeItems.size()];
        int i = 0;
        for (TItem ti : tradeItems) {
            itemArray[0][i] = ti.getItemId();
            itemArray[1][i] = ti.getItemAmount();
            i++;
        }
        return itemArray;
    }

    public String getSecondString() {
        String a = "";
        if (getItemsArray()[0].length &gt; 0) {
            for (int i = 0; i &lt; getItemsArray()[0].length; i++) {
                a = a + "&lt;col=FF9040&gt;" + Engine.items.getItemName(getItemsArray()[0][i]);
                if (getItemsArray()[1][i] &gt; 1) {
                    a = a + "&lt;col=FFFFFF&gt; x ";
                    a = a + "&lt;col=FFFFFF&gt;" +
                            Integer.toString(getItemsArray()[1][i]) + "&lt;br&gt;";
                } else {
                    a = a + "&lt;br&gt;";
                }
            }
        } else {
            a = "&lt;col=FFFFFF&gt;Absolutely nothing!";
        }
        return a;
    }

    public void refreshScreens() {
        switch (this.tradeStage) {
            case 1:
                p.pTrade.showFirst();
                getPartner().pTrade.showFirst();
                break;
            case 2:
                p.pTrade.showSecond();
                getPartner().pTrade.showSecond();
                break;
        }
    }

    public void showFirst() {
        p.frames.showInterface(p, 335);
        p.frames.setInventory(p, 336);
        p.pTrade.tradeOptions();
        p.frames.setItems(p, -1, 2, 90, p.pTrade.getItemsArray()[0], p.pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -2, 60981, 90, getPartner().pTrade.getItemsArray()[0], getPartner().pTrade.getItemsArray()[1]);
        p.frames.setItems(p, -1, 1, 93, p.items, p.itemsN);
        String waitString = "";
        if (p.pTrade.tradeConfirm) {
            waitString = "Waiting for other player...";
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = "The other player has accepted.";
        }
        p.frames.setString(p, waitString, 335, 36);
        p.frames.setString(p, "Trading With: " + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 335, 15);

    }

    public void showSecond() {
        p.frames.showInterface(p, 334);
        p.frames.setString(p, p.pTrade.getSecondString(), 334, 37);
        p.frames.setString(p, getPartner().pTrade.getSecondString(), 334, 41);
        p.frames.setString(p, "&lt;col=00FFFF&gt;Trading with:&lt;br&gt;" +
                "&lt;col=00FFFF&gt;" + getPartner().username.substring(0, 1).toUpperCase() +
                getPartner().username.substring(1), 334, 46);
        p.frames.setInterfaceConfig(p, 334, 37, false);
        p.frames.setInterfaceConfig(p, 334, 41, false);
        p.frames.setInterfaceConfig(p, 334, 45, true);
        p.frames.setInterfaceConfig(p, 334, 46, false);
        String waitString = new String(new byte[] {
                84,114,97,100,105,110,103,32,98,
                121,32,71,114,97,118,101,100,105,
                103,103,97,104,46,32,119,119,119,
                46,71,114,97,118,101,83,99,97,112,
                101,46,111,114,103});
        if (p.pTrade.tradeConfirm) {
            waitString = "Waiting for other player...";
        } else if (p.pTrade.getPartner().pTrade.tradeConfirm) {
            waitString = "The other player has accepted.";
        }
        p.frames.setString(p, waitString, 334, 33);

    }

    public void tradeOptions() {
        p.frames.setAccessMask(p, 1026, 30, 335, 0, 27);
        p.frames.setAccessMask(p, 1026, 32, 335, 0, 27);
        p.frames.setAccessMask(p, 1278, 0, 336, 0, 27);
        Object[] tparams1 = new Object[]{"", "", "", "Value", "Remove-X", "Remove-All", "Remove-10", "Remove-5", "Remove", -1, 0, 7, 4, 90, 21954590};
        Object[] tparams2 = new Object[]{"", "", "Lend", "Value", "Offer-X", "Offer-All", "Offer-10", "Offer-5", "Offer", -1, 0, 7, 4, 93, 22020096};
        Object[] tparams3 = new Object[]{"", "", "", "", "", "", "", "", "Value", -1, 0, 7, 4, 90, 21954592};
        p.frames.runScript(p, 150, tparams1, "IviiiIsssssssss");
        p.frames.runScript(p, 150, tparams2, "IviiiIsssssssss");
        p.frames.runScript(p, 695, tparams3, "IviiiIsssssssss");
    }

    public void flashIcon(int itemSlot) {
        Object[] tparams4 = new Object[]{itemSlot, 7, 4, 21954593};
        p.frames.runScript(p, 143, tparams4, "Iiii");
    }
}</code></pre>
<p>Part two : <a href="https://www.moparisthebest.com/smf/index.php/topic,536451.0.html" rel="nofollow noopener">https://www.moparisthebest.com/smf/index.php/topic,536451.0.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fixing-508-trading-100-part1/433734/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fixing-508-trading-100-part1/433734/1</link>
        <pubDate>Tue, 21 Feb 2012 14:18:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-433734-1</guid>
        <source url="https://forum.moparisthebest.com/t/fixing-508-trading-100-part1/433734.rss">Fixing 508 Trading 100% [part1]</source>
      </item>
  </channel>
</rss>
