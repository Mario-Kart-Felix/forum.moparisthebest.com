<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Java Coding for beggineers!</title>
    <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393</link>
    <description>I will admit, I put alot of time and effort into making this, And it will help most people. This is good for basic things, but nothing complex. All this is for, is to teach the basics, from there learn by other methods. 

Also credits to http://www.cafeaulait.org/javatutorial.html#xtocid2801972, for i based this off of that, etc.

[size=24pt]GET NETBEANS VERSION 7.0, HERE[/size]
http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html
Only If You dont have jdk, otherwise just google it. 


[b][i]Part 1- The syntax[/i][/b]
[size=18pt]Hello World! The Program[/size]
Since the C language, it has been normal for people to start out learning with the &quot;Hello World&quot; Program.
The following is the Hello World Program written in Java. Copy This into a new java project on netbeans, called HelloWorld.java.

[code] class HelloWorld { // This defines the class

  public static void main (String args[]) { // Almost all new class files begin with this, It can be public, private, but just public for now

    System.out.println(&quot;Hello World!&quot;); // this &quot;prints&quot; out the line &quot;hello world!&quot;

  }
  
}[/code]
Now in Netbeans, You do not have to Compile, just save the file, then right click in the file and press &quot;run&quot;, This will make the box in the bottom say &quot;Hello World!&quot;.
Congrats! This is your first Java program, although very simple, this does what you want it to do.

[size=18pt]Examining Hello World[/size]
Hello world is one the the simplest programs you can write in java, however a lot goes into it.
For now the initial class statement can be thought can be thought as defining the program name, which in this case is [i]HelloWorld[/i]. Now the class file, got its name from that class statement in which we defined. (Not from the name of the java file).
The initial class statement is actually quite a bit more than that since this program can be called not just from the command line but also by other parts of the same or different programs, which has to do with classes and methods, Not covered in this tutorial. (will be writing an advanced java tutorial soon.)
he HelloWorld class contains one method, the main method, which is where the program begins executing. The method is declared public meaning that the method can be called from anywhere. It is declared static meaning that all instances of this class share this one method. It is declared void, which means this method does not return a value. Finally we pass any command line arguments to the method in an array of Strings called args. In this simple program there aren&#39;t any command line arguments though. Finally when the main method is called it does exactly one thing: print &quot;Hello World&quot; to the standard output, generally a terminal monitor or console window of some sort. This is accomplished by the System.out.println method. To be more precise this is accomplished by calling the println() method of the static out field belonging to the System class; but for now we&#39;ll just treat this as one method. 


[size=18pt]Braces and Blocks[/size]
Let&#39;s investigate the Hello World program a little more closely. In Java a source code file is broken up into parts separated by opening and closing braces, i.e. the { and } characters. Everything between { and } is a block and exists more or less independently of everything outside of the braces. 
      Blocks are important both syntactically and logically. Without the braces the code wouldn&#39;t compile. (You would either get 100 errors, or reached end of file while parsing error, tho you wouldnt in this method for not much happens) Similarly it would be very difficult for someone else reading your code to understand what was going on. For that matter it would be very difficult for you, yourself to understand what was going on. The braces are used to group related statements together. In the broadest sense everything between matching braces is executed as one statement (though depending not necessarily everything inside the braces is executed every time). 
Blocks can be assigned a rank, so one block can contain more than one block. In this case we have one main block that defines the Hello World class. Within the Hello World block, we have a method block called main. 
         In this tutorial we help to identify different blocks with indentation. Every time we enter a new block we indent our source code by two spaces. When we leave a block we deindent by two spaces. This is a common convention in many programming languages. However it is not part of the language. The code would produce identical output if we didn&#39;t indent it. This is java coding conventions, and it makes the code easier to read. In a nutshell, indentation makes the code easier to read and understand, but it does not change its meaning. 

As you saw, I added these things called comments. Comments can appear anywhere in a source file. Comments are identical to those in C and C++; everything between /* and */ is ignored by the compiler and everything on a line after two consecutive slashes is also thrown away. Therefore the following program is, as far as the compiler is concerned, identical to the first one.

[code] class HelloWorld { // This defines the class

  public static void main (String args[]) { // Almost all new class files begin with this, It can be public, private, but just public for now

    System.out.println(&quot;Hello World!&quot;); // this &quot;prints&quot; out the line &quot;hello world!&quot;

  }
  
}[/code]

As you can see, I highlighted what exactly i am talking about.  That&#39;s all for comments, they are pretty easy.

[size=18pt]Data and Variables[/size]

[code]// This is the Hello Mopar program in Java
class HelloMopar {

    public static void main (String args[]) {
    
      // You may feel free to replace &quot;Mopar&quot; with whatever you want!
      String name = &quot;Mopar&quot;;
      
      /* Now let&#39;s say hello */
      System.out.print(&quot;Hello &quot;);
      System.out.println(name);
  }

}[/code]
Here, rather than saying hello to a rather generic world, we allow Java to say hello to a specific individual. We do this by creating a String variable called &quot;name&quot; and storing the value &quot;Mopar&quot; in it. (You may, of course, have replaced Rusty with whatever.). Then we print out &quot;Hello &quot;. Notice that we&#39;ve switched here from System.out.println method to the similar System.out.print method. System.out.print is just like System.out.println except that it doesn&#39;t break the line after it&#39;s finished. Therefore when we reach the next line of code, the cursor is still located on the same line as the word &quot;Hello&quot; and we&#39;re ready to print out the name.

[size=18pt]First look at Classes and Objects.[/size]
Classes are the single most important feature of Java. Everything in Java is either a class, a part of a class, or describes how a class behaves, I will give you an introduction on them now.

Create a new project, called &quot;FahrToCelcius&quot; (I am just using this as an example). Now obviously unless your lazy, you won&#39;t need this, But this type of stuff is what computers were originally designed for, so lets try it out :D)

[code]// Print a Fahrenheit to Celsius table

class FahrToCelsius  {

  public static void main (String args[]) {
  
  int fahr, celsius; 
  int lower, upper, step;

  lower = 0;      // lower limit of temperature table, feel free to change 
  upper = 300;  // upper limit of temperature table, feel free to change
  step  = 20;     // step size, feel free to change

  fahr = lower;
  while (fahr &lt;= upper) {  // while loop begins here
    celsius = 5 * (fahr-32) / 9;
    System.out.print(fahr);
    System.out.print(&quot; &quot;);
    System.out.println(celsius);
    fahr = fahr + step;
  } // while loop ends here
} // main ends here

} //FahrToCelsius ends here [/code]

This program calculates the Celsius equivalent of Fahrenheit temperatures between zero and three hundred degrees. (feel free to change, of course) The first two lines of the main method declare the variables we&#39;ll use. That is they specify the names and the types. For now we use only integers. In Java an int can have a value between -2,147,483,648 to 2,147,483,647. More types will be forthcoming. 
Then we initialize the variables using statements like &quot;lower = 0&quot;. This sets lower&#39;s initial value to 0. When used this way the equals sign is called the assignment operator. 
     
After establishing the initial values for all our variables we go into the loop which does the main work of our program. At the beginning of each iteration of the loop (fahr &lt;= upper) checks to see if the value of fahr is in fact less than or equal to the current value of upper. If it is then the computer executes the statements in the loop block (everything between &quot;while loop begins here&quot; and &quot;while loop ends here&quot;.) Loops in Java are marked off by matching pairs of braces and may be nested. 

celsius = 5 * (fahr-32) / 9; actually calculates the Celsius temperature given the fahrenheit temperature. The arithmetic operators here do exactly what you&#39;d expect. * means multiplication. - is subtraction. / is division; and +, though not used in here, is addition. Precedence follows normal algebraic conventions, and can be rearranged through parentheses.

Java contains an almost complete set of arithmetic operators. Like C it is missing an exponentiation operator. For exponentiation you need to use the pow methods in the java.lang.Math package.

Printing output is very similar to what you&#39;ve seen before. We use System.out.print(fahr) to print the fahrenheit value, then System.out.print(&quot; &quot;) to print a one-character string containing a space, and finally System.out.println(celsius); the Celsius value.

Finally we increment the value of fahr by step to move on to the next value in the table. 

[size=18pt]The For Statement[/size]
In java there is more than one way to write any program. The following program produces identical output to the Fahrenheit to Celsius program in the preceding section. The main difference is the for loop instead of a while loop.


[code]// Print a Fahrenheit to Celsius table

class FahrToCelsius  {

  public static void main (String args[]) {
  
    int fahr, celsius;
    int lower, upper, step;

    lower = 0;      // lower limit of temperature table
    upper = 300;  // upper limit of temperature table
    step  = 20;     // step size

    for (fahr=lower; fahr &lt;= upper; fahr = fahr + step) {  
      celsius = 5 * (fahr-32) / 9;
      System.out.println(fahr + &quot; &quot; + celsius);
    } // for loop ends here

  } // main ends here

}[/code]

The only difference between this program and the previous one is that here we&#39;ve used a for loop instead of a while loop. The for loop has identical syntax to C&#39;s for loops. i.e.
for (initialization; test; increment) The initialization, in this case setting the variable fahr equal to the lower limit, happens the first time the loop is entered and only the first time. Then the first time and every time after that when control reaches the top of the loop a test is made. In our example the test is whether the variable fahr is less than or equal to the upper limit. If it is we execute the code in the loop one more time. If not we begin executing the code that follows the loop. Finally at the end of each loop the increment step is made. In this case we increase fahr by step.

If that&#39;s unclear let&#39;s look at a simpler example here.

[code]//Count to ten

class CountToTen  {

  public static void main (String args[]) {
  
    int i;
    for (i=1; i &lt;=10; i = i + 1) {  
      System.out.println(i);
    } 
    System.out.println(&quot;All done!&quot;);

}

}[/code]

This program prints out the numbers from one to ten. It begins by setting the variable i to 1. Then it checks to see if one is in fact less than or equal to ten. Since one is less than ten, the program prints it. Finally it adds one to i and starts over. i is now 2. The program checks to see if 2 is less than 10. It is! so the program prints &quot;2&quot; and adds one to i again. i is now three. Once again the code checks to see that 3 is less than or equal to 10. This is getting rather boring rather quickly. Fortunately computers don&#39;t get bored, and very soon computer has counted to the point where i is now ten. The computer prints &quot;10&quot; and adds one to ten. Now i is eleven. Eleven is not less than or equal to ten so the computer does not print it. Rather it moves to the next statement after the end of the for loop, System.out.println(&quot;All done!);. The computer prints &quot;All Done!&quot; and the program ends.

[code]//Count to ten??

class BuggyCountToTen  {

  public static void main (String args[]) {
  
    int i;
    for (i=1; i &lt;=10; i = i - 1) {  
      System.out.println(i);
    } 
    System.out.println(&quot;All done!&quot;);

}

}[/code]

After you ran this, you will find the problem, this program counts BACKWARDS!! Although there is nothing wrong with a program counting backwards, for this we want to count to 10, not to negative w/e. The main problem here, is we are testing for i being greater then 10. i will never be greater than ten in this program, so the program never stops. (That&#39;s not completely true. If you have a very fast machine or you wait long enough somewhere below negative two billion i will suddenly become a very large positive number and the program will halt). This is referred to as an &quot;infinite loop&quot; and is more common in programming than one might expect.

[code]Assignment, Increment and Decrement Operators[/code]

In reality almost nobody writes for loops like we did in the previous sections. They would almost certainly use the increment or decrement operators instead. There are two of these, ++ and -- and they work like this.

[code]//Count to ten

class CountToTen  {

  public static void main (String args[]) {
    int i;
    for (i=1; i &lt;=10; i++) {  
      System.out.println(i);
    } 
    System.out.println(&quot;All done!&quot;);

}

}[/code]

And like this.

[code]//Count to ten??

class BuggyCountToTen  {

  public static void main (String args[]) {
    int i;
    for (i=1; i &lt;=10; i--) {  
      System.out.println(i);
    } 
    System.out.println(&quot;All done!&quot;);

  }

}[/code]

When we write i++ we&#39;re using shorthand for i = i + 1. When we say i-- we&#39;re using shorthand for i = i - 1. Adding and subtracting one from a number are such common operations that these special increment and decrement operators have been added to the language. They also allow the compiler to be smarter about certain optimizations on some CPU architectures, but mainly they make code easier to write and read.
However, what if you want to count by more than just 1? We could write i = i + 2 But that is not how we will do it. For the general add and subtract operator, we use -= and +=, and for multiplication and division, we use *= and /=. 
For instance

[code]class CountToTwentyByTwos  {

  public static void main (String args[]) {
    int i; 
    for (i=0; i &lt;=20; i += 2) {  // notice, we had to make i equal 0, for we want to count from 0, so that it will be 2,4, etc.
      System.out.println(i);
    } 
    System.out.println(&quot;All done!&quot;);

 } //main ends here

}[/code]

We do not normally use *= or /=, for the speed at which variables increase. 

Well that is all for my basic Tutorial, This should help for anything in RSPS, and i will be writing a more advanced tutorial later.

Please leave a comment if there are any grammer errors, or any other errors. Thank you for reading this, took a long time to write.</description>
    
    <lastBuildDate>Fri, 24 Jun 2011 06:29:59 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>Its my understanding that tutorials were not to be posted in this board, so I’m locking this. If another mod believes this thread should be unlocked please do so.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/20</link>
        <pubDate>Fri, 24 Jun 2011 06:29:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-20</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>This is kinda all handled by javadocs already. So… yeah pointless.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/19</link>
        <pubDate>Wed, 22 Jun 2011 19:12:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-19</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@Marine5287 Marine5287]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/marine5287">@Marine5287</a> wrote:</p>
          <blockquote>
              <p>At least you put a lot of effort into this, good job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/18</link>
        <pubDate>Wed, 22 Jun 2011 18:05:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-18</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p><img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"> i have.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/17</link>
        <pubDate>Wed, 22 Jun 2011 17:40:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-17</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <p>As long as you have credits for the original creator, this will be allowed. It seems that the longer paragraphs are copied and pasted, so make sure to give appropriate credits or else i’ll have to lock this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/16</link>
        <pubDate>Wed, 22 Jun 2011 16:33:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-16</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@Nasz Nasz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nasz">@Nasz</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="14" data-topic="400393">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ilikearrays/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> IlikeArrays:</div>
<blockquote>
<p>worthless</p>
</blockquote>
</aside>
<p>Hurtful lol. :P.</p>
<p>OT: I think it’s better then most of the tutorials out there, as he does make it more simpler for people who are new :P. Gj.  :rolleyes:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/15</link>
        <pubDate>Wed, 22 Jun 2011 08:18:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-15</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@IlikeArrays IlikeArrays]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ilikearrays">@IlikeArrays</a> wrote:</p>
          <blockquote>
              <p>worthless</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/14</link>
        <pubDate>Wed, 22 Jun 2011 07:09:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-14</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>Well, the main reason i made this is 1) so that people who can’t understand (like young people, 10-14) can understand it, people who (yes, there are many) won’t use google to search and just ask (maybe it’s just me lol) and 3) it’s what u need for a rsps, editing wise atleast. Thats pretty much what u need, I mean it’s close. Anyways, some people will get help out of this</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/13</link>
        <pubDate>Wed, 22 Jun 2011 06:18:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-13</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@vManlyMan vManlyMan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vmanlyman">@vManlyMan</a> wrote:</p>
          <blockquote>
              <p>This will be (not) helpful.  It’s not that you did a bad job, just that this stuff is already all over the internet.  A beginner would most likely just search google for tutorials and this won’t show up on the first page.  This is a good tutorial, but nothing new.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/12</link>
        <pubDate>Wed, 22 Jun 2011 06:14:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-12</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>Thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/11</link>
        <pubDate>Wed, 22 Jun 2011 06:04:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-11</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@I_Hybrid_I1 I_Hybrid_I]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_hybrid_i1">@I_Hybrid_I1</a> wrote:</p>
          <blockquote>
              <p>Guys, this isn’t leeched, l2read what he says.<br>
Thanks for this amazing tutorial it helped me soo much. (The other1 was way to big :()<br>
Gg</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/10</link>
        <pubDate>Wed, 22 Jun 2011 06:02:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-10</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>This is just a tutorial for beginners, based for the stuff u really need for basic rsps editing. That’s it. I know there as tutorials on the web, this is just what u need to edit the stuff.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/9</link>
        <pubDate>Wed, 22 Jun 2011 05:57:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-9</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p><a href="http://download.oracle.com/javase/tutorial/reallybigindex.html" class="onebox" target="_blank" rel="nofollow noopener">http://download.oracle.com/javase/tutorial/reallybigindex.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/8</link>
        <pubDate>Wed, 22 Jun 2011 05:26:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-8</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>Wow really, still arguing with me. I followed this <a href="http://www.cafeaulait.org/javatutorial.html#xtocid2801972" rel="nofollow noopener">http://www.cafeaulait.org/javatutorial.html#xtocid2801972</a>, Not your other stupid thing. Read it, and find out that nearly everything is not what it says in there! I didnt even know what that building blocks java website thingy was before you posted it. Now I put alot of effort into this, Yeah, okay, I leeched, But i didnt copy. I followed the tutorial, to make a user friendly, and better used for RSPS, tutorial. So gtfo kid and stop flaming my post, it is really annoying considering the time i did spend on this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/7</link>
        <pubDate>Wed, 22 Jun 2011 03:31:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-7</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@Ajdakiwii Ajdakiwii]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ajdakiwii">@Ajdakiwii</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="400393">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/baddy351/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> baddy351:</div>
<blockquote>
<p>Says you, I did not steal this from anywhere, i kind of followed this though.</p>
</blockquote>
</aside>
<p>I havent released anything on this forum</p>
<p>If it was supposedly hand written, how come it pretty much matches the one i posted word for word</p>
<p>Leecher</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/6</link>
        <pubDate>Wed, 22 Jun 2011 03:26:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-6</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>Lol yeah, essentially, though this is much more user friendly, and has stuff explained better. Plus its compacted into what we can use <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>Also I added credits.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/5</link>
        <pubDate>Wed, 22 Jun 2011 03:13:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-5</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>So lemme get this straight, you followed a tutorial to write a tutorial? Lol <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/4</link>
        <pubDate>Wed, 22 Jun 2011 03:12:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-4</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>Says you, I did not steal this from anywhere, i kind of followed this though.<br>
<a href="http://www.cafeaulait.org/javatutorial.html#xtocid2801972" class="onebox" target="_blank" rel="nofollow noopener">http://www.cafeaulait.org/javatutorial.html#xtocid2801972</a><br>
How ever around 3 or 4 hours of work went into this, So before you try to say anything, just stop. Most of this is handwritten, except in parts i couldn’t explain any better myself.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/3</link>
        <pubDate>Wed, 22 Jun 2011 03:10:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-3</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@Ajdakiwii Ajdakiwii]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ajdakiwii">@Ajdakiwii</a> wrote:</p>
          <blockquote>
              <p>Mod lock this please, He stole this from <a href="http://buildingblocksjava.com/hello-world-the-application/" rel="nofollow noopener">http://buildingblocksjava.com/hello-world-the-application/</a><br>
<a href="http://buildingblocksjava.com/braces-and-blocks/" rel="nofollow noopener">http://buildingblocksjava.com/braces-and-blocks/</a><br>
etc</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/2</link>
        <pubDate>Wed, 22 Jun 2011 03:08:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-2</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
      <item>
        <title>Java Coding for beggineers!</title>
        <dc:creator><![CDATA[@baddy351 baddy351]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/baddy351">@baddy351</a> wrote:</p>
          <blockquote>
              <p>I will admit, I put alot of time and effort into making this, And it will help most people. This is good for basic things, but nothing complex. All this is for, is to teach the basics, from there learn by other methods.</p>
<p>Also credits to <a href="http://www.cafeaulait.org/javatutorial.html#xtocid2801972" rel="nofollow noopener">http://www.cafeaulait.org/javatutorial.html#xtocid2801972</a>, for i based this off of that, etc.</p>
<p>[size=24pt]GET NETBEANS VERSION 7.0, HERE[/size]<br>
<a href="http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html" class="onebox" target="_blank" rel="nofollow noopener">http://www.oracle.com/technetwork/java/javase/downloads/jdk-netbeans-jsp-142931.html</a><br>
Only If You dont have jdk, otherwise just google it.</p>
<p><span class="bbcode-b"><span class="bbcode-i">Part 1- The syntax</span></span><br>
[size=18pt]Hello World! The Program[/size]<br>
Since the C language, it has been normal for people to start out learning with the “Hello World” Program.<br>
The following is the Hello World Program written in Java. Copy This into a new java project on netbeans, called HelloWorld.java.</p>
<p>[code] class HelloWorld { // This defines the class</p>
<p>public static void main (String args[]) { // Almost all new class files begin with this, It can be public, private, but just public for now</p>
<pre><code>System.out.println("Hello World!"); // this "prints" out the line "hello world!"
</code></pre>
<p>}</p>
<p>}[/code]<br>
Now in Netbeans, You do not have to Compile, just save the file, then right click in the file and press “run”, This will make the box in the bottom say “Hello World!”.<br>
Congrats! This is your first Java program, although very simple, this does what you want it to do.</p>
<p>[size=18pt]Examining Hello World[/size]<br>
Hello world is one the the simplest programs you can write in java, however a lot goes into it.<br>
For now the initial class statement can be thought can be thought as defining the program name, which in this case is <span class="bbcode-i">HelloWorld</span>. Now the class file, got its name from that class statement in which we defined. (Not from the name of the java file).<br>
The initial class statement is actually quite a bit more than that since this program can be called not just from the command line but also by other parts of the same or different programs, which has to do with classes and methods, Not covered in this tutorial. (will be writing an advanced java tutorial soon.)<br>
he HelloWorld class contains one method, the main method, which is where the program begins executing. The method is declared public meaning that the method can be called from anywhere. It is declared static meaning that all instances of this class share this one method. It is declared void, which means this method does not return a value. Finally we pass any command line arguments to the method in an array of Strings called args. In this simple program there aren’t any command line arguments though. Finally when the main method is called it does exactly one thing: print “Hello World” to the standard output, generally a terminal monitor or console window of some sort. This is accomplished by the System.out.println method. To be more precise this is accomplished by calling the println() method of the static out field belonging to the System class; but for now we’ll just treat this as one method.</p>
<p>[size=18pt]Braces and Blocks[/size]<br>
Let’s investigate the Hello World program a little more closely. In Java a source code file is broken up into parts separated by opening and closing braces, i.e. the { and } characters. Everything between { and } is a block and exists more or less independently of everything outside of the braces.<br>
Blocks are important both syntactically and logically. Without the braces the code wouldn’t compile. (You would either get 100 errors, or reached end of file while parsing error, tho you wouldnt in this method for not much happens) Similarly it would be very difficult for someone else reading your code to understand what was going on. For that matter it would be very difficult for you, yourself to understand what was going on. The braces are used to group related statements together. In the broadest sense everything between matching braces is executed as one statement (though depending not necessarily everything inside the braces is executed every time).<br>
Blocks can be assigned a rank, so one block can contain more than one block. In this case we have one main block that defines the Hello World class. Within the Hello World block, we have a method block called main.<br>
In this tutorial we help to identify different blocks with indentation. Every time we enter a new block we indent our source code by two spaces. When we leave a block we deindent by two spaces. This is a common convention in many programming languages. However it is not part of the language. The code would produce identical output if we didn’t indent it. This is java coding conventions, and it makes the code easier to read. In a nutshell, indentation makes the code easier to read and understand, but it does not change its meaning.</p>
<p>As you saw, I added these things called comments. Comments can appear anywhere in a source file. Comments are identical to those in C and C++; everything between /* and */ is ignored by the compiler and everything on a line after two consecutive slashes is also thrown away. Therefore the following program is, as far as the compiler is concerned, identical to the first one.</p>
<p>[code] class HelloWorld { // This defines the class</p>
<p>public static void main (String args[]) { // Almost all new class files begin with this, It can be public, private, but just public for now</p>
<pre><code>System.out.println("Hello World!"); // this "prints" out the line "hello world!"
</code></pre>
<p>}</p>
<p>}[/code]</p>
<p>As you can see, I highlighted what exactly i am talking about.  That’s all for comments, they are pretty easy.</p>
<p>[size=18pt]Data and Variables[/size]</p>
<p>[code]// This is the Hello Mopar program in Java<br>
class HelloMopar {</p>
<pre><code>public static void main (String args[]) {

  // You may feel free to replace "Mopar" with whatever you want!
  String name = "Mopar";
  
  /* Now let's say hello */
  System.out.print("Hello ");
  System.out.println(name);
</code></pre>
<p>}</p>
<p>}[/code]<br>
Here, rather than saying hello to a rather generic world, we allow Java to say hello to a specific individual. We do this by creating a String variable called “name” and storing the value “Mopar” in it. (You may, of course, have replaced Rusty with whatever.). Then we print out "Hello ". Notice that we’ve switched here from System.out.println method to the similar System.out.print method. System.out.print is just like System.out.println except that it doesn’t break the line after it’s finished. Therefore when we reach the next line of code, the cursor is still located on the same line as the word “Hello” and we’re ready to print out the name.</p>
<p>[size=18pt]First look at Classes and Objects.[/size]<br>
Classes are the single most important feature of Java. Everything in Java is either a class, a part of a class, or describes how a class behaves, I will give you an introduction on them now.</p>
<p>Create a new project, called “FahrToCelcius” (I am just using this as an example). Now obviously unless your lazy, you won’t need this, But this type of stuff is what computers were originally designed for, so lets try it out :D)</p>
<p>[code]// Print a Fahrenheit to Celsius table</p>
<p>class FahrToCelsius  {</p>
<p>public static void main (String args[]) {</p>
<p>int fahr, celsius;<br>
int lower, upper, step;</p>
<p>lower = 0;      // lower limit of temperature table, feel free to change<br>
upper = 300;  // upper limit of temperature table, feel free to change<br>
step  = 20;     // step size, feel free to change</p>
<p>fahr = lower;<br>
while (fahr &lt;= upper) {  // while loop begins here<br>
celsius = 5 * (fahr-32) / 9;<br>
System.out.print(fahr);<br>
System.out.print(" ");<br>
System.out.println(celsius);<br>
fahr = fahr + step;<br>
} // while loop ends here<br>
} // main ends here</p>
<p>} //FahrToCelsius ends here [/code]</p>
<p>This program calculates the Celsius equivalent of Fahrenheit temperatures between zero and three hundred degrees. (feel free to change, of course) The first two lines of the main method declare the variables we’ll use. That is they specify the names and the types. For now we use only integers. In Java an int can have a value between -2,147,483,648 to 2,147,483,647. More types will be forthcoming.<br>
Then we initialize the variables using statements like “lower = 0”. This sets lower’s initial value to 0. When used this way the equals sign is called the assignment operator.</p>
<p>After establishing the initial values for all our variables we go into the loop which does the main work of our program. At the beginning of each iteration of the loop (fahr &lt;= upper) checks to see if the value of fahr is in fact less than or equal to the current value of upper. If it is then the computer executes the statements in the loop block (everything between “while loop begins here” and “while loop ends here”.) Loops in Java are marked off by matching pairs of braces and may be nested.</p>
<p>celsius = 5 * (fahr-32) / 9; actually calculates the Celsius temperature given the fahrenheit temperature. The arithmetic operators here do exactly what you’d expect. * means multiplication. - is subtraction. / is division; and +, though not used in here, is addition. Precedence follows normal algebraic conventions, and can be rearranged through parentheses.</p>
<p>Java contains an almost complete set of arithmetic operators. Like C it is missing an exponentiation operator. For exponentiation you need to use the pow methods in the java.lang.Math package.</p>
<p>Printing output is very similar to what you’ve seen before. We use System.out.print(fahr) to print the fahrenheit value, then System.out.print(" ") to print a one-character string containing a space, and finally System.out.println(celsius); the Celsius value.</p>
<p>Finally we increment the value of fahr by step to move on to the next value in the table.</p>
<p>[size=18pt]The For Statement[/size]<br>
In java there is more than one way to write any program. The following program produces identical output to the Fahrenheit to Celsius program in the preceding section. The main difference is the for loop instead of a while loop.</p>
<p>[code]// Print a Fahrenheit to Celsius table</p>
<p>class FahrToCelsius  {</p>
<p>public static void main (String args[]) {</p>
<pre><code>int fahr, celsius;
int lower, upper, step;

lower = 0;      // lower limit of temperature table
upper = 300;  // upper limit of temperature table
step  = 20;     // step size

for (fahr=lower; fahr &lt;= upper; fahr = fahr + step) {  
  celsius = 5 * (fahr-32) / 9;
  System.out.println(fahr + " " + celsius);
} // for loop ends here
</code></pre>
<p>} // main ends here</p>
<p>}[/code]</p>
<p>The only difference between this program and the previous one is that here we’ve used a for loop instead of a while loop. The for loop has identical syntax to C’s for loops. i.e.<br>
for (initialization; test; increment) The initialization, in this case setting the variable fahr equal to the lower limit, happens the first time the loop is entered and only the first time. Then the first time and every time after that when control reaches the top of the loop a test is made. In our example the test is whether the variable fahr is less than or equal to the upper limit. If it is we execute the code in the loop one more time. If not we begin executing the code that follows the loop. Finally at the end of each loop the increment step is made. In this case we increase fahr by step.</p>
<p>If that’s unclear let’s look at a simpler example here.</p>
<p>[code]//Count to ten</p>
<p>class CountToTen  {</p>
<p>public static void main (String args[]) {</p>
<pre><code>int i;
for (i=1; i &lt;=10; i = i + 1) {  
  System.out.println(i);
} 
System.out.println("All done!");
</code></pre>
<p>}</p>
<p>}[/code]</p>
<p>This program prints out the numbers from one to ten. It begins by setting the variable i to 1. Then it checks to see if one is in fact less than or equal to ten. Since one is less than ten, the program prints it. Finally it adds one to i and starts over. i is now 2. The program checks to see if 2 is less than 10. It is! so the program prints “2” and adds one to i again. i is now three. Once again the code checks to see that 3 is less than or equal to 10. This is getting rather boring rather quickly. Fortunately computers don’t get bored, and very soon computer has counted to the point where i is now ten. The computer prints “10” and adds one to ten. Now i is eleven. Eleven is not less than or equal to ten so the computer does not print it. Rather it moves to the next statement after the end of the for loop, System.out.println("All done!);. The computer prints “All Done!” and the program ends.</p>
<p>[code]//Count to ten??</p>
<p>class BuggyCountToTen  {</p>
<p>public static void main (String args[]) {</p>
<pre><code>int i;
for (i=1; i &lt;=10; i = i - 1) {  
  System.out.println(i);
} 
System.out.println("All done!");
</code></pre>
<p>}</p>
<p>}[/code]</p>
<p>After you ran this, you will find the problem, this program counts BACKWARDS!! Although there is nothing wrong with a program counting backwards, for this we want to count to 10, not to negative w/e. The main problem here, is we are testing for i being greater then 10. i will never be greater than ten in this program, so the program never stops. (That’s not completely true. If you have a very fast machine or you wait long enough somewhere below negative two billion i will suddenly become a very large positive number and the program will halt). This is referred to as an “infinite loop” and is more common in programming than one might expect.</p>
<pre><code class="lang-auto"></code></pre>
<p>In reality almost nobody writes for loops like we did in the previous sections. They would almost certainly use the increment or decrement operators instead. There are two of these, ++ and – and they work like this.</p>
<p>[code]//Count to ten</p>
<p>class CountToTen  {</p>
<p>public static void main (String args[]) {<br>
int i;<br>
for (i=1; i &lt;=10; i++) {<br>
System.out.println(i);<br>
}<br>
System.out.println(“All done!”);</p>
<p>}</p>
<p>}[/code]</p>
<p>And like this.</p>
<p>[code]//Count to ten??</p>
<p>class BuggyCountToTen  {</p>
<p>public static void main (String args[]) {<br>
int i;<br>
for (i=1; i &lt;=10; i–) {<br>
System.out.println(i);<br>
}<br>
System.out.println(“All done!”);</p>
<p>}</p>
<p>}[/code]</p>
<p>When we write i++ we’re using shorthand for i = i + 1. When we say i-- we’re using shorthand for i = i - 1. Adding and subtracting one from a number are such common operations that these special increment and decrement operators have been added to the language. They also allow the compiler to be smarter about certain optimizations on some CPU architectures, but mainly they make code easier to write and read.<br>
However, what if you want to count by more than just 1? We could write i = i + 2 But that is not how we will do it. For the general add and subtract operator, we use -= and +=, and for multiplication and division, we use *= and /=.<br>
For instance</p>
<p>[code]class CountToTwentyByTwos  {</p>
<p>public static void main (String args[]) {<br>
int i;<br>
for (i=0; i &lt;=20; i += 2) {  // notice, we had to make i equal 0, for we want to count from 0, so that it will be 2,4, etc.<br>
System.out.println(i);<br>
}<br>
System.out.println(“All done!”);</p>
<p>} //main ends here</p>
<p>}[/code]</p>
<p>We do not normally use *= or /=, for the speed at which variables increase.</p>
<p>Well that is all for my basic Tutorial, This should help for anything in RSPS, and i will be writing a more advanced tutorial later.</p>
<p>Please leave a comment if there are any grammer errors, or any other errors. Thank you for reading this, took a long time to write.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393/1</link>
        <pubDate>Wed, 22 Jun 2011 03:00:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-400393-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-coding-for-beggineers/400393.rss">Java Coding for beggineers!</source>
      </item>
  </channel>
</rss>
