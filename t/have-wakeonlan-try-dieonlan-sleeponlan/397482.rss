<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Have WakeOnLan? Try DieOnLan / SleepOnLan</title>
    <link>https://forum.moparisthebest.com/t/have-wakeonlan-try-dieonlan-sleeponlan/397482</link>
    <description>I&#39;ve been using WakeOnLan with my desktop for years, it&#39;s great that I can turn it on from anywhere to grab a file or two.  The painful part is shutting it down, I have to ssh into it, run &#39;sudo poweroff&#39; then type in my password.  That is annoying to do, especially from my cell phone, so I came up with an idea.

This protocol follows the exact spec of WakeOnLan, except when it receives the &#39;magic&#39; packet it shuts down the server.  This allows you to use any of the multitude of tools written for WakeOnLan, I just make it listen on a different port than my card listens to for the WakeOnLan packet (9 instead of 7 for me, you can make it listen on any port though).

Anyway, I didn&#39;t want to program anything, and found a pretty decent way to do it as a shell script.  You need the programs &#39;socat&#39; and &#39;xxd&#39;, but otherwise you should have everything else.  If you have any problems, or suggestions, feel free to post them:

[code=bash]
#!/bin/bash
iface=&quot;eth1&quot;
death_port=&quot;9&quot;

shutdown_cmd=&quot;poweroff&quot;
#                                     remove before mac   | remove after mac | remove colons
mac=$(ifconfig $iface | grep HWaddr | sed &quot;s/.*HWaddr //&quot; | sed &quot;s/ .*//&quot; | sed &quot;s/://g&quot;)
#echo &quot;mac: &#39;$mac&#39;&quot;
expected_string=&quot;ffffffffffff&quot;
for i in {1..16}
do
	expected_string=&quot;$expected_string$mac&quot;
done
#echo &quot;expected_string: $expected_string&quot;
while true; do 
	recieved_packet=$(socat -T1 UDP-LISTEN:$death_port - | xxd -p | tr -d &#39;\n&#39;)
#	echo &quot;recieved_packet: $recieved_packet&quot;
	if [ &quot;$recieved_packet&quot; == &quot;$expected_string&quot; ]
	then
		echo &quot;DOL packet recieved, shutting down...&quot;
		$shutdown_cmd
	fi
done
[/code]

The shutdown command generally needs root access, so you might as well run the whole thing as root, but if you don&#39;t want to you can set up sudo to allow that specific command, and then make the port one of the non-privileged ones, since you need root to listen on low ports like 9 as well.</description>
    
    <lastBuildDate>Thu, 02 Jun 2011 03:16:42 +0000</lastBuildDate>
    <category>Technology</category>
    <atom:link href="https://forum.moparisthebest.com/t/have-wakeonlan-try-dieonlan-sleeponlan/397482.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Have WakeOnLan? Try DieOnLan / SleepOnLan</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I’ve been using WakeOnLan with my desktop for years, it’s great that I can turn it on from anywhere to grab a file or two.  The painful part is shutting it down, I have to ssh into it, run ‘sudo poweroff’ then type in my password.  That is annoying to do, especially from my cell phone, so I came up with an idea.</p>
<p>This protocol follows the exact spec of WakeOnLan, except when it receives the ‘magic’ packet it shuts down the server.  This allows you to use any of the multitude of tools written for WakeOnLan, I just make it listen on a different port than my card listens to for the WakeOnLan packet (9 instead of 7 for me, you can make it listen on any port though).</p>
<p>Anyway, I didn’t want to program anything, and found a pretty decent way to do it as a shell script.  You need the programs ‘socat’ and ‘xxd’, but otherwise you should have everything else.  If you have any problems, or suggestions, feel free to post them:</p>
<pre><code class="lang-auto">#!/bin/bash
iface="eth1"
death_port="9"

shutdown_cmd="poweroff"
#                                     remove before mac   | remove after mac | remove colons
mac=$(ifconfig $iface | grep HWaddr | sed "s/.*HWaddr //" | sed "s/ .*//" | sed "s/://g")
#echo "mac: '$mac'"
expected_string="ffffffffffff"
for i in {1..16}
do
	expected_string="$expected_string$mac"
done
#echo "expected_string: $expected_string"
while true; do 
	recieved_packet=$(socat -T1 UDP-LISTEN:$death_port - | xxd -p | tr -d '\n')
#	echo "recieved_packet: $recieved_packet"
	if [ "$recieved_packet" == "$expected_string" ]
	then
		echo "DOL packet recieved, shutting down..."
		$shutdown_cmd
	fi
done</code></pre>
<p>The shutdown command generally needs root access, so you might as well run the whole thing as root, but if you don’t want to you can set up sudo to allow that specific command, and then make the port one of the non-privileged ones, since you need root to listen on low ports like 9 as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/have-wakeonlan-try-dieonlan-sleeponlan/397482/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/have-wakeonlan-try-dieonlan-sleeponlan/397482/1</link>
        <pubDate>Thu, 02 Jun 2011 03:16:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-397482-1</guid>
        <source url="https://forum.moparisthebest.com/t/have-wakeonlan-try-dieonlan-sleeponlan/397482.rss">Have WakeOnLan? Try DieOnLan / SleepOnLan</source>
      </item>
  </channel>
</rss>
