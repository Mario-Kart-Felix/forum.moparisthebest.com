<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using a switch statement for commands</title>
    <link>https://forum.moparisthebest.com/t/using-a-switch-statement-for-commands/311334</link>
    <description>[size=13pt][u][b]Intro:[/b][/u][/size]
No more if statements! I have programmed into my server a method of dealing with player commands, so that you can use a switch statement on them, this means you wont have to type a long if statement for every command you create. This method is also more efficient, although you probably won&#39;t be able to tell the difference. (Except the fact you can make commands easier -_-)

Another thing is that this may help newbie programmers make less mistakes when programming new commands. The most common mistake is this:
[code]
if (command.equalsIgnoreCase(&quot;master&quot;)) {
    ...
} else {
   sendMessage(&quot;You already did master!&quot;);
}
[/code]
^ Quick example of a common mistake i&#39;ve seen alot.

I have let my friend post this as a snippet over at R-S, his name was Zealous. But now i am creating a tutorial for it. 
[u][b]ONLY POSTED HERE ON MOPAR. IF IT&#39;S ANYWHERE ELSE - IT WAS LEECHED.[/b][/u]

Okay, tutorial time!

[b]Purpose:[/b] To handle commands in a more effective, and efficient way.
[b]Difficulty:[/b] 1-3/10
[b]Files modified:[/b] Client.java, Commands.java
[b]Source Base:[/b] Devolution 2.7 (Bakatool) 
Should work on any base, although servers such as Deltascape will need a few things/methods modified.

[size=13pt][u][b]Step 1 - Creating the Enum[/b][/u][/size]
Okay, so the first thing we are going to do is create a new Java file, which will just contain an Enum for the command names!
To do this, just open up the editor you use (Eg: Notepad) and create a public enum:
[code]
/**
 * !Joshua
 * Command enum, just contains the names of the commands so that they can
 * be used in the switch statement.
 */
public enum Commands {
    /** Just put your commands names here **/
    MASTER, YELL, SKILLER 
}
[/code]
Okay, so basically an enum is just a set of constants used to represent something. In this case, the constants represent our commands. We create this enum so that we can use the name of the command in a switch statement.
I have given 3 command names as an example. As they are constants, following Java conventions the command names should all be capital letters. (this doesn&#39;t affect when the user types a command) Once you have this, just save it as Commands.java

[size=13pt][u][b]Step 2 - Backing up all of your old commands[/b][/u][/size]
Now, we don&#39;t want you to lose all of your commands, incase you mess up following this tutorial, do we? So to be on the safe side, you should either C+P all of your commands (or just your whole customCommand method). Either that, or just make it a comment block, like so:
[code]
/*
public void customCommand(String command) {
    if (command.equalsIgnoreCase(&quot;afk&quot;)) {
        ...
    }
    else if (command.equalsIgnoreCase(&quot;back&quot;)) {
        ...
    }
    else if (command.equalsIgnoreCase(&quot;master&quot;)) {
        ...
    }
}
*/
[/code]</description>
    
    <lastBuildDate>Thu, 29 Oct 2009 03:34:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/using-a-switch-statement-for-commands/311334.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using a switch statement for commands</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Intro:</span></span>[/size]<br>
No more if statements! I have programmed into my server a method of dealing with player commands, so that you can use a switch statement on them, this means you wont have to type a long if statement for every command you create. This method is also more efficient, although you probably won’t be able to tell the difference. (Except the fact you can make commands easier -_-)</p>
<p>Another thing is that this may help newbie programmers make less mistakes when programming new commands. The most common mistake is this:</p>
<pre><code class="lang-auto">if (command.equalsIgnoreCase("master")) {
    ...
} else {
   sendMessage("You already did master!");
}</code></pre>
<p>^ Quick example of a common mistake i’ve seen alot.</p>
<p>I have let my friend post this as a snippet over at R-S, his name was Zealous. But now i am creating a tutorial for it.<br>
<span class="bbcode-u"><span class="bbcode-b">ONLY POSTED HERE ON MOPAR. IF IT’S ANYWHERE ELSE - IT WAS LEECHED.</span></span></p>
<p>Okay, tutorial time!</p>
<p><span class="bbcode-b">Purpose:</span> To handle commands in a more effective, and efficient way.<br>
<span class="bbcode-b">Difficulty:</span> 1-3/10<br>
<span class="bbcode-b">Files modified:</span> Client.java, Commands.java<br>
<span class="bbcode-b">Source Base:</span> Devolution 2.7 (Bakatool)<br>
Should work on any base, although servers such as Deltascape will need a few things/methods modified.</p>
<p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Step 1 - Creating the Enum</span></span>[/size]<br>
Okay, so the first thing we are going to do is create a new Java file, which will just contain an Enum for the command names!<br>
To do this, just open up the editor you use (Eg: Notepad) and create a public enum:</p>
<pre><code class="lang-auto">/**
 * !Joshua
 * Command enum, just contains the names of the commands so that they can
 * be used in the switch statement.
 */
public enum Commands {
    /** Just put your commands names here **/
    MASTER, YELL, SKILLER 
}</code></pre>
<p>Okay, so basically an enum is just a set of constants used to represent something. In this case, the constants represent our commands. We create this enum so that we can use the name of the command in a switch statement.<br>
I have given 3 command names as an example. As they are constants, following Java conventions the command names should all be capital letters. (this doesn’t affect when the user types a command) Once you have this, just save it as Commands.java</p>
<p>[size=13pt]<span class="bbcode-u"><span class="bbcode-b">Step 2 - Backing up all of your old commands</span></span>[/size]<br>
Now, we don’t want you to lose all of your commands, incase you mess up following this tutorial, do we? So to be on the safe side, you should either C+P all of your commands (or just your whole customCommand method). Either that, or just make it a comment block, like so:</p>
<pre><code class="lang-auto">/*
public void customCommand(String command) {
    if (command.equalsIgnoreCase("afk")) {
        ...
    }
    else if (command.equalsIgnoreCase("back")) {
        ...
    }
    else if (command.equalsIgnoreCase("master")) {
        ...
    }
}
*/</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/using-a-switch-statement-for-commands/311334/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/using-a-switch-statement-for-commands/311334/1</link>
        <pubDate>Thu, 29 Oct 2009 03:34:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311334-1</guid>
        <source url="https://forum.moparisthebest.com/t/using-a-switch-statement-for-commands/311334.rss">Using a switch statement for commands</source>
      </item>
  </channel>
</rss>
