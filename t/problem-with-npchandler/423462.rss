<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Problem with NPCHandler</title>
    <link>https://forum.moparisthebest.com/t/problem-with-npchandler/423462</link>
    <description>[code]
public boolean AttackNPC(int NPCID) {
		if (NpcHandler.npcs[npcs[NPCID].attacknpc] != null) {
			int EnemyX = NpcHandler.npcs[npcs[NPCID].attacknpc].absX;
			int EnemyY = NpcHandler.npcs[npcs[NPCID].attacknpc].absY;
			int EnemyHP = NpcHandler.npcs[npcs[NPCID].attacknpc].HP;
			int hitDiff = 0;

			hitDiff = Misc.random(npcs[NPCID].MaxHit);
			if (GoodDistance(EnemyX, EnemyY, npcs[NPCID].absX,
					npcs[NPCID].absY, 1) == true) {
				if (NpcHandler.npcs[npcs[NPCID].attacknpc].IsDead) {
					ResetAttackNPC(NPCID);
					//FIXME
					npcs[NPCID].animNumber = die[npcs[NPCID].npcType];
					npcs[NPCID].animUpdateRequired = true;
					npcs[NPCID].updateRequired = true;
				} else {
					if ((EnemyHP - hitDiff) &lt;= 0) {
						hitDiff = EnemyHP;
					}
					//FIXME
					npcs[NPCID].animNumber = block[NPCID];
					npcs[NPCID].animUpdateRequired = true;
					npcs[NPCID].updateRequired = true;
					NpcHandler.npcs[npcs[NPCID].attacknpc].hitDiff = hitDiff;
					NpcHandler.npcs[npcs[NPCID].attacknpc].attacknpc = NPCID;
					NpcHandler.npcs[npcs[NPCID].attacknpc].updateRequired = true;
					NpcHandler.npcs[npcs[NPCID].attacknpc].hitUpdateRequired = true;
					npcs[NPCID].actionTimer = 7;
					return true;
				}
			}
		}
		return false;
	}

	public boolean AttackNPCMage(int NPCID) {
		int EnemyX = NpcHandler.npcs[npcs[NPCID].attacknpc].absX;
		int EnemyY = NpcHandler.npcs[npcs[NPCID].attacknpc].absY;
		int EnemyHP = NpcHandler.npcs[npcs[NPCID].attacknpc].HP;
		int hitDiff = 0;
		if (npcs[NPCID].actionTimer == 0) {
			if (NpcHandler.npcs[npcs[NPCID].attacknpc].IsDead) {
				ResetAttackNPC(NPCID);
				//FIXME
				npcs[NPCID].animNumber = die[npcs[NPCID].npcType];
				npcs[NPCID].animUpdateRequired = true;
				npcs[NPCID].updateRequired = true;
			} else {
				npcs[NPCID].animNumber = 500;
				if (npcs[NPCID].npcType == 1645) {
					gfxAll(369, EnemyY, EnemyX);
					hitDiff = 6 + Misc.random(43);
				}
				if (npcs[NPCID].npcType == 1645) {
					gfxAll(369, EnemyY, EnemyX);
					hitDiff = 6 + Misc.random(43);
				}
				if (npcs[NPCID].npcType == 509) {
					gfxAll(365, EnemyY, EnemyX);
					hitDiff = 8 + Misc.random(51);
				}
				if (npcs[NPCID].npcType == 1241) {
					gfxAll(363, EnemyY, EnemyX);
					hitDiff = 2 + Misc.random(19);
				}
				if (npcs[NPCID].npcType == 1246) {
					gfxAll(368, npcs[NPCID].absY, npcs[NPCID].absX);
					gfxAll(367, EnemyY, EnemyX);
					hitDiff = 4 + Misc.random(35);
				}
				npcs[NPCID].animUpdateRequired = true;
				npcs[NPCID].updateRequired = true;
				if ((EnemyHP - hitDiff) &lt; 0) {
					hitDiff = EnemyHP;
				}
				NpcHandler.npcs[npcs[NPCID].attacknpc].hitDiff = hitDiff;
				NpcHandler.npcs[npcs[NPCID].attacknpc].attacknpc = NPCID;
				NpcHandler.npcs[npcs[NPCID].attacknpc].updateRequired = true;
				NpcHandler.npcs[npcs[NPCID].attacknpc].hitUpdateRequired = true;
				npcs[NPCID].actionTimer = 7;
				return true;
			}
			return false;
		}
		return false;
	}

	public boolean AttackPlayer(int NPCID) {
		if (npcs[NPCID].getKiller() &lt;= 0) {
			return false;
		}
		int Player = npcs[NPCID].getKiller();
		if (PlayerHandler.players[Player] == null) {
			ResetAttackPlayer(NPCID);
			return false;
		} else if (PlayerHandler.players[Player].DirectionCount &lt; 2) {
			return false;
		}
		int EnemyX = PlayerHandler.players[Player].absX;
		int EnemyY = PlayerHandler.players[Player].absY;
		npcs[NPCID].enemyX = EnemyX;
		npcs[NPCID].enemyY = EnemyY;
		if ((Math.abs(npcs[NPCID].absX - EnemyX) &gt; 20) || (Math.abs(npcs[NPCID].absY - EnemyY) &gt; 20)) {
			ResetAttackPlayer(NPCID);
		}
		int EnemyHP = PlayerHandler.players[Player].playerLevel[PlayerHandler.players[Player].playerHitpoints];
		int EnemyMaxHP = getLevelForXP(PlayerHandler.players[Player].playerXP[PlayerHandler.players[Player].playerHitpoints]);
		if (PlayerHandler.players[Player].attacknpc == NPCID) {
			PlayerHandler.players[Player].attacknpc = NPCID;
			PlayerHandler.players[Player].IsAttackingNPC = true;
		}
		int hitDiff = 0;
		hitDiff = Misc.random(npcs[NPCID].MaxHit);
		Client player = (Client) PlayerHandler.players[Player];
		if (player != null) {
			int def = player.playerBonus[6];
			int rand = Misc.random(def);
			if (NPCID == 1961) {
				combatLevel[NPCID] = 105;
			}
			int rand_npc = Misc.random(combatLevel[NPCID] * 5);
			if (npcs[NPCID].npcType == 1472) {
				rand_npc = Misc.random(800);
			}
			if (npcs[NPCID].npcType == 80) {
				rand_npc = Misc.random(500);
			}
			if (npcs[NPCID].npcType == 1913) {
				rand_npc = Misc.random(1500);
			}
			if (npcs[NPCID].npcType == 936) {
				rand_npc = Misc.random(100);
			}
			if (npcs[NPCID].npcType == 110) {
				rand_npc = Misc.random(20);
			}
			int blocked = (int) (def / 10);
			if (rand_npc &gt; rand) {
				hitDiff = Misc.random(npcs[NPCID].MaxHit) - blocked;
				if (hitDiff &lt; 0) {
					hitDiff = 0;
				}
			} else {
				hitDiff = 0;
			}
		}
		if ((npcs[NPCID].npcType != 3200) &amp;&amp; (npcs[NPCID].npcType != 1645)) {
			FollowPlayerCB(NPCID, Player);
		}
		if ((GoodDistance(npcs[NPCID].absX, npcs[NPCID].absY, EnemyX, EnemyY, 1) == true)
				|| (npcs[NPCID].npcType == 3200)
				|| (npcs[NPCID].npcType == 2745)) {
			if (npcs[NPCID].actionTimer == 0) {
				if (EnemyHP &lt;= (int) ((double) ((double) EnemyMaxHP / 10.0) + 0.5)) {
				} else {
					if (PlayerHandler.players[Player].deathStage &gt; 0) {
						ResetAttackPlayer(NPCID);
					} else {
						//FIXME
						npcs[NPCID].animNumber = attack[npcs[NPCID].npcType];
						npcs[NPCID].animUpdateRequired = true;
						npcs[NPCID].updateRequired = true;
						if ((EnemyHP - hitDiff) &lt; 0) {
							hitDiff = EnemyHP;
							ResetAttackPlayer(NPCID);
						}
						PlayerHandler.players[Player]
								.dealDamage(hitDiff);
						PlayerHandler.players[Player].hitDiff = hitDiff;
						PlayerHandler.players[Player].updateRequired = true;
						PlayerHandler.players[Player].hitUpdateRequired = true;
						PlayerHandler.players[Player].appearanceUpdateRequired = true;
						npcs[NPCID].actionTimer = 7;
					}
				}
				return true;
			}
		}
		return false;
	}
[/code]

This is part of the code for the NPCHandler on my new server. For some reason, I cannot attack NPCs. I know where the problem is coming from, I just don&#39;t know how to fix it.

Press CTRL+F and type &quot;//FIXME&quot;, and you will see all the areas in which I have no clue how to fix. Please help, thanks!

Edit: I am able to hit the NPC but I cannot do damage, and the NPC does not move...</description>
    
    <lastBuildDate>Tue, 29 Nov 2011 23:52:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/problem-with-npchandler/423462.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Problem with NPCHandler</title>
        <dc:creator><![CDATA[@Eternal_Knights Eternal Knights]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eternal_knights">@Eternal_Knights</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">public boolean AttackNPC(int NPCID) {
		if (NpcHandler.npcs[npcs[NPCID].attacknpc] != null) {
			int EnemyX = NpcHandler.npcs[npcs[NPCID].attacknpc].absX;
			int EnemyY = NpcHandler.npcs[npcs[NPCID].attacknpc].absY;
			int EnemyHP = NpcHandler.npcs[npcs[NPCID].attacknpc].HP;
			int hitDiff = 0;

			hitDiff = Misc.random(npcs[NPCID].MaxHit);
			if (GoodDistance(EnemyX, EnemyY, npcs[NPCID].absX,
					npcs[NPCID].absY, 1) == true) {
				if (NpcHandler.npcs[npcs[NPCID].attacknpc].IsDead) {
					ResetAttackNPC(NPCID);
					//FIXME
					npcs[NPCID].animNumber = die[npcs[NPCID].npcType];
					npcs[NPCID].animUpdateRequired = true;
					npcs[NPCID].updateRequired = true;
				} else {
					if ((EnemyHP - hitDiff) &lt;= 0) {
						hitDiff = EnemyHP;
					}
					//FIXME
					npcs[NPCID].animNumber = block[NPCID];
					npcs[NPCID].animUpdateRequired = true;
					npcs[NPCID].updateRequired = true;
					NpcHandler.npcs[npcs[NPCID].attacknpc].hitDiff = hitDiff;
					NpcHandler.npcs[npcs[NPCID].attacknpc].attacknpc = NPCID;
					NpcHandler.npcs[npcs[NPCID].attacknpc].updateRequired = true;
					NpcHandler.npcs[npcs[NPCID].attacknpc].hitUpdateRequired = true;
					npcs[NPCID].actionTimer = 7;
					return true;
				}
			}
		}
		return false;
	}

	public boolean AttackNPCMage(int NPCID) {
		int EnemyX = NpcHandler.npcs[npcs[NPCID].attacknpc].absX;
		int EnemyY = NpcHandler.npcs[npcs[NPCID].attacknpc].absY;
		int EnemyHP = NpcHandler.npcs[npcs[NPCID].attacknpc].HP;
		int hitDiff = 0;
		if (npcs[NPCID].actionTimer == 0) {
			if (NpcHandler.npcs[npcs[NPCID].attacknpc].IsDead) {
				ResetAttackNPC(NPCID);
				//FIXME
				npcs[NPCID].animNumber = die[npcs[NPCID].npcType];
				npcs[NPCID].animUpdateRequired = true;
				npcs[NPCID].updateRequired = true;
			} else {
				npcs[NPCID].animNumber = 500;
				if (npcs[NPCID].npcType == 1645) {
					gfxAll(369, EnemyY, EnemyX);
					hitDiff = 6 + Misc.random(43);
				}
				if (npcs[NPCID].npcType == 1645) {
					gfxAll(369, EnemyY, EnemyX);
					hitDiff = 6 + Misc.random(43);
				}
				if (npcs[NPCID].npcType == 509) {
					gfxAll(365, EnemyY, EnemyX);
					hitDiff = 8 + Misc.random(51);
				}
				if (npcs[NPCID].npcType == 1241) {
					gfxAll(363, EnemyY, EnemyX);
					hitDiff = 2 + Misc.random(19);
				}
				if (npcs[NPCID].npcType == 1246) {
					gfxAll(368, npcs[NPCID].absY, npcs[NPCID].absX);
					gfxAll(367, EnemyY, EnemyX);
					hitDiff = 4 + Misc.random(35);
				}
				npcs[NPCID].animUpdateRequired = true;
				npcs[NPCID].updateRequired = true;
				if ((EnemyHP - hitDiff) &lt; 0) {
					hitDiff = EnemyHP;
				}
				NpcHandler.npcs[npcs[NPCID].attacknpc].hitDiff = hitDiff;
				NpcHandler.npcs[npcs[NPCID].attacknpc].attacknpc = NPCID;
				NpcHandler.npcs[npcs[NPCID].attacknpc].updateRequired = true;
				NpcHandler.npcs[npcs[NPCID].attacknpc].hitUpdateRequired = true;
				npcs[NPCID].actionTimer = 7;
				return true;
			}
			return false;
		}
		return false;
	}

	public boolean AttackPlayer(int NPCID) {
		if (npcs[NPCID].getKiller() &lt;= 0) {
			return false;
		}
		int Player = npcs[NPCID].getKiller();
		if (PlayerHandler.players[Player] == null) {
			ResetAttackPlayer(NPCID);
			return false;
		} else if (PlayerHandler.players[Player].DirectionCount &lt; 2) {
			return false;
		}
		int EnemyX = PlayerHandler.players[Player].absX;
		int EnemyY = PlayerHandler.players[Player].absY;
		npcs[NPCID].enemyX = EnemyX;
		npcs[NPCID].enemyY = EnemyY;
		if ((Math.abs(npcs[NPCID].absX - EnemyX) &gt; 20) || (Math.abs(npcs[NPCID].absY - EnemyY) &gt; 20)) {
			ResetAttackPlayer(NPCID);
		}
		int EnemyHP = PlayerHandler.players[Player].playerLevel[PlayerHandler.players[Player].playerHitpoints];
		int EnemyMaxHP = getLevelForXP(PlayerHandler.players[Player].playerXP[PlayerHandler.players[Player].playerHitpoints]);
		if (PlayerHandler.players[Player].attacknpc == NPCID) {
			PlayerHandler.players[Player].attacknpc = NPCID;
			PlayerHandler.players[Player].IsAttackingNPC = true;
		}
		int hitDiff = 0;
		hitDiff = Misc.random(npcs[NPCID].MaxHit);
		Client player = (Client) PlayerHandler.players[Player];
		if (player != null) {
			int def = player.playerBonus[6];
			int rand = Misc.random(def);
			if (NPCID == 1961) {
				combatLevel[NPCID] = 105;
			}
			int rand_npc = Misc.random(combatLevel[NPCID] * 5);
			if (npcs[NPCID].npcType == 1472) {
				rand_npc = Misc.random(800);
			}
			if (npcs[NPCID].npcType == 80) {
				rand_npc = Misc.random(500);
			}
			if (npcs[NPCID].npcType == 1913) {
				rand_npc = Misc.random(1500);
			}
			if (npcs[NPCID].npcType == 936) {
				rand_npc = Misc.random(100);
			}
			if (npcs[NPCID].npcType == 110) {
				rand_npc = Misc.random(20);
			}
			int blocked = (int) (def / 10);
			if (rand_npc &gt; rand) {
				hitDiff = Misc.random(npcs[NPCID].MaxHit) - blocked;
				if (hitDiff &lt; 0) {
					hitDiff = 0;
				}
			} else {
				hitDiff = 0;
			}
		}
		if ((npcs[NPCID].npcType != 3200) &amp;&amp; (npcs[NPCID].npcType != 1645)) {
			FollowPlayerCB(NPCID, Player);
		}
		if ((GoodDistance(npcs[NPCID].absX, npcs[NPCID].absY, EnemyX, EnemyY, 1) == true)
				|| (npcs[NPCID].npcType == 3200)
				|| (npcs[NPCID].npcType == 2745)) {
			if (npcs[NPCID].actionTimer == 0) {
				if (EnemyHP &lt;= (int) ((double) ((double) EnemyMaxHP / 10.0) + 0.5)) {
				} else {
					if (PlayerHandler.players[Player].deathStage &gt; 0) {
						ResetAttackPlayer(NPCID);
					} else {
						//FIXME
						npcs[NPCID].animNumber = attack[npcs[NPCID].npcType];
						npcs[NPCID].animUpdateRequired = true;
						npcs[NPCID].updateRequired = true;
						if ((EnemyHP - hitDiff) &lt; 0) {
							hitDiff = EnemyHP;
							ResetAttackPlayer(NPCID);
						}
						PlayerHandler.players[Player]
								.dealDamage(hitDiff);
						PlayerHandler.players[Player].hitDiff = hitDiff;
						PlayerHandler.players[Player].updateRequired = true;
						PlayerHandler.players[Player].hitUpdateRequired = true;
						PlayerHandler.players[Player].appearanceUpdateRequired = true;
						npcs[NPCID].actionTimer = 7;
					}
				}
				return true;
			}
		}
		return false;
	}</code></pre>
<p>This is part of the code for the NPCHandler on my new server. For some reason, I cannot attack NPCs. I know where the problem is coming from, I just don’t know how to fix it.</p>
<p>Press CTRL+F and type “//FIXME”, and you will see all the areas in which I have no clue how to fix. Please help, thanks!</p>
<p>Edit: I am able to hit the NPC but I cannot do damage, and the NPC does not move…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/problem-with-npchandler/423462/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/problem-with-npchandler/423462/1</link>
        <pubDate>Tue, 29 Nov 2011 23:52:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-423462-1</guid>
        <source url="https://forum.moparisthebest.com/t/problem-with-npchandler/423462.rss">Problem with NPCHandler</source>
      </item>
  </channel>
</rss>
