<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>667 Mining Rocks Disappear</title>
    <link>https://forum.moparisthebest.com/t/667-mining-rocks-disappear/460689</link>
    <description>Does anyone know why the rocks I mine, disappear after I get one ore from them?

This is my mining.java..


[CODE]package com.rs.game.player.actions;

import com.rs.cache.loaders.ItemDefinitions;
import com.rs.game.Animation;
import com.rs.game.World;
import com.rs.game.WorldObject;
import com.rs.game.player.Player;
import com.rs.game.player.Skills;
import com.rs.utils.Utils;

public final class Mining extends Action {

	public static enum RockDefinitions {

		Copper_Ore(1, 10, 436, 10, 10, 14906, 0, 1), 
		Tin_Ore(1, 10, 438, 10, 10, 14902, 0, 1), 
		Iron_Ore(15, 15, 440, 10, 10, 14856, 0, 1), 
		Sandstone_Ore(35, 30, 6971, 30, 1, 11552, 10, 1), 
		Silver_Ore(20, 20, 442, 25, 1, 11552, 20, 1), 
		Coal_Ore(30, 25, 453, 10, 10, 14850, 0, 1), 
		Granite_Ore(45, 1, 6979, 50, 10, 11552, 20, 1), 
		Gold_Ore(40, 32, 444, 10, 10, 2098, 0, 1), 
		Mithril_Ore(55, 40, 447, 10, 10, 14853, 0, 1), 
		Adamant_Ore(70, 45, 449, 10, 10, 14862, 0, 1), 
		Runite_Ore(85, 50, 451, 20, 20, 14859, 0, 1);

		private int level;
		private double xp;
		private int oreId;
		private int oreBaseTime;
		private int oreRandomTime;
		private int emptySpot;
		private int respawnDelay;
		private int randomLifeProbability;

		private RockDefinitions(int level, double xp, int oreId,
				int oreBaseTime, int oreRandomTime, int emptySpot,
				int respawnDelay, int randomLifeProbability) {
			this.level = level;
			this.xp = xp;
			this.oreId = oreId;
			this.oreBaseTime = oreBaseTime;
			this.oreRandomTime = oreRandomTime;
			this.emptySpot = emptySpot;
			this.respawnDelay = respawnDelay;
			this.randomLifeProbability = randomLifeProbability;
		}

		public int getLevel() {
			return level;
		}

		public double getXp() {
			return xp;
		}

		public int getOreId() {
			return oreId;
		}

		public int getOreBaseTime() {
			return oreBaseTime;

		}

		public int getOreRandomTime() {
			return oreRandomTime;
		}

		public int getEmptyId() {
			return emptySpot;
		}

		public int getRespawnDelay() {
			return respawnDelay;
		}

		public int getRandomLifeProbability() {
			return randomLifeProbability;
		}
	}

	private WorldObject rock;
	private RockDefinitions definitions;

	private int emoteId;
	private int pickaxeTime;

	public Mining(WorldObject rock, RockDefinitions definitions) {
		this.rock = rock;
		this.definitions = definitions;
	}

	@Override
	public boolean start(Player player) {
		if (!checkAll(player))
			return false;
		player.getPackets().sendGameMessage(
				&quot;You swing your pickaxe at the rock...&quot;);
		setActionDelay(player, getMiningDelay(player));
		rock.setLife(definitions.getRandomLifeProbability());
		return true;
	}

	private int getMiningDelay(Player player) {
		int summoningBonus = 0;
		if (player.getFamiliar() != null) {
			if (player.getFamiliar().getId() == 7342
					|| player.getFamiliar().getId() == 7342)
				summoningBonus += 10;
			else if (player.getFamiliar().getId() == 6832
					|| player.getFamiliar().getId() == 6831)
				summoningBonus += 1;
		}
		int mineTimer = definitions.getOreBaseTime()
				- (player.getSkills().getLevel(Skills.MINING) + summoningBonus)
				- Utils.getRandom(pickaxeTime);
		if (mineTimer &lt; 1 + definitions.getOreRandomTime())
			mineTimer = 1 + Utils.getRandom(definitions.getOreRandomTime());
		mineTimer /= player.getAuraManager().getMininingAccurayMultiplier();
		return mineTimer;
	}

	private boolean checkAll(Player player) {
		if (!hasPickaxe(player)) {
			player.getPackets().sendGameMessage(
					&quot;You need a pickaxe to mine this rock.&quot;);
			return false;
		}
		if (!setPickaxe(player)) {
			player.getPackets().sendGameMessage(
					&quot;You do not have the required level to use this pickaxe.&quot;);
			return false;
		}
		if (!hasMiningLevel(player))
			return false;
		if (!player.getInventory().hasFreeSlots()) {
			player.getPackets().sendGameMessage(
					&quot;Not enough space in your inventory.&quot;);
			return false;
		}
		return true;
	}

	private boolean hasMiningLevel(Player player) {
		if (definitions.getLevel() &gt; player.getSkills().getLevel(Skills.MINING)) {
			player.getPackets().sendGameMessage(
					&quot;You need a mining level of &quot; + definitions.getLevel()
							+ &quot; to mine this rock.&quot;);
			return false;
		}
		return true;
	}

	private boolean setPickaxe(Player player) {
		int level = player.getSkills().getLevel(Skills.MINING);
		int weaponId = player.getEquipment().getWeaponId();
		if (weaponId != -1) {
			switch (weaponId) {
			case 15259: // dragon pickaxe
				if (level &gt;= 61) {
					emoteId = 12190;
					pickaxeTime = 13;
					return true;
				}
				break;
			case 1275: // rune pickaxe
				if (level &gt;= 1) {
					emoteId = 624;
					pickaxeTime = 5;
					return true;
				}
				break;
			case 1271: // adam pickaxe
				if (level &gt;= 1) {
					emoteId = 628;
					pickaxeTime = 5;
					return true;
				}
				break;
			case 1273: // mith pickaxe
				if (level &gt;= 1) {
					emoteId = 629;
					pickaxeTime = 5;
					return true;
				}
				break;
			case 1269: // steel pickaxe
				if (level &gt;= 1) {
					emoteId = 627;
					pickaxeTime = 5;
					return true;
				}
				break;
			case 1267: // iron pickaxe
				emoteId = 626;
				pickaxeTime = 5;
				return true;
			case 1265: // bronze pickaxe
				emoteId = 625;
				pickaxeTime = 5;
				return true;
			case 13661: // Inferno adze
				if (level &gt;= 61) {
					emoteId = 10222;
					pickaxeTime = 5;
					return true;
				}
				break;
			}
		}
		if (player.getInventory().containsOneItem(15259)) {
			if (level &gt;= 61) {
				emoteId = 12190;
				pickaxeTime = 5;
				return true;
			}
		}
		if (player.getInventory().containsOneItem(1275)) {
			if (level &gt;= 41) {
				emoteId = 624;
				pickaxeTime = 5;
				return true;
			}
		}
		if (player.getInventory().containsOneItem(1271)) {
			if (level &gt;= 31) {
				emoteId = 628;
				pickaxeTime = 5;
				return true;
			}
		}
		if (player.getInventory().containsOneItem(1273)) {
			if (level &gt;= 21) {
				emoteId = 629;
				pickaxeTime = 5;
				return true;
			}
		}
		if (player.getInventory().containsOneItem(1269)) {
			if (level &gt;= 6) {
				emoteId = 627;
				pickaxeTime = 5;
				return true;
			}
		}
		if (player.getInventory().containsOneItem(1267)) {
			emoteId = 626;
			pickaxeTime = 5;
			return true;
		}
		if (player.getInventory().containsOneItem(1265)) {
			emoteId = 625;
			pickaxeTime = 5;
			return true;
		}
		if (player.getInventory().containsOneItem(13661)) {
			if (level &gt;= 61) {
				emoteId = 10222;
				pickaxeTime = 13;
				return true;
			}
		}
		return false;

	}

	private boolean hasPickaxe(Player player) {
		if (player.getInventory().containsOneItem(15259, 1275, 1271, 1273,
				1269, 1267, 1265, 13661))
			return true;
		int weaponId = player.getEquipment().getWeaponId();
		if (weaponId == -1)
			return false;
		switch (weaponId) {
		case 1265:// Bronze Pickaxe
		case 1267:// Iron Pickaxe
		case 1269:// Steel Pickaxe
		case 1273:// Mithril Pickaxe
		case 1271:// Adamant Pickaxe
		case 1275:// Rune Pickaxe
		case 15259:// Dragon Pickaxe
		case 13661: // Inferno adze
			return true;
		default:
			return false;
		}

	}

	@Override
	public boolean process(Player player) {
		player.setNextAnimation(new Animation(emoteId));
		return checkRock(player);
	}

	private boolean usedDeplateAurora;

	@Override
	public int processWithDelay(Player player) {
		addOre(player);
		rock.decrementObjectLife();
		if (!usedDeplateAurora
				&amp;&amp; (1 + Math.random()) &lt; player.getAuraManager()
						.getChanceNotDepleteMN_WC()) {
			usedDeplateAurora = true;
		} else if (rock.getLife() == 0) {
			World.spawnTemporaryObject(
					new WorldObject(definitions.getEmptyId(), rock.getType(),
							rock.getRotation(), rock.getX(), rock.getY(), rock
									.getPlane()),
					definitions.respawnDelay * 600, false);
			player.setNextAnimation(new Animation(-1));
			return -1;
		}
		if (!player.getInventory().hasFreeSlots()
				&amp;&amp; definitions.getOreId() != -1) {
			player.setNextAnimation(new Animation(-1));
			player.getPackets().sendGameMessage(
					&quot;Not enough space in your inventory.&quot;);
			return -1;
		}
		return getMiningDelay(player);
	}

	private void addOre(Player player) {
		double xpBoost = 0;
		int idSome = 0;
		if (definitions == RockDefinitions.Granite_Ore) {
			idSome = Utils.getRandom(2) * 2;
			if (idSome == 2)
				xpBoost += 10;
			else if (idSome == 4)
				xpBoost += 25;
		} else if (definitions == RockDefinitions.Sandstone_Ore) {
			idSome = Utils.getRandom(3) * 2;
			xpBoost += idSome / 2 * 10;
		} else if (player.getFamiliar() != null
				&amp;&amp; (player.getFamiliar().getId() == 7342 || player
						.getFamiliar().getId() == 7342))
			xpBoost += 40;
		player.getSkills().addXp(Skills.MINING, definitions.getXp() + xpBoost);
		if (definitions.getOreId() != -1) {
			player.getInventory().addItem(definitions.getOreId() + idSome, 1);
			String oreName = ItemDefinitions
					.getItemDefinitions(definitions.getOreId() + idSome)
					.getName().toLowerCase();
			player.getPackets().sendGameMessage(
					&quot;You mine some &quot; + oreName + &quot;.&quot;, true);
		}
	}

	private boolean checkRock(Player player) {
		return World.getRegion(rock.getRegionId()).containsObject(rock.getId(),
				rock);
	}

	@Override
	public void stop(Player player) {
		setActionDelay(player, 9);
	}

}
[/CODE]</description>
    
    <lastBuildDate>Wed, 19 Sep 2012 23:17:40 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/667-mining-rocks-disappear/460689.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>667 Mining Rocks Disappear</title>
        <dc:creator><![CDATA[@TeeBark TeeBark]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/teebark">@TeeBark</a> wrote:</p>
          <blockquote>
              <p>Does anyone know why the rocks I mine, disappear after I get one ore from them?</p>
<p>This is my mining.java…</p>
<p>[CODE]package com.rs.game.player.actions;</p>
<p>import com.rs.cache.loaders.ItemDefinitions;<br>
import com.rs.game.Animation;<br>
import com.rs.game.World;<br>
import com.rs.game.WorldObject;<br>
import com.rs.game.player.Player;<br>
import com.rs.game.player.Skills;<br>
import com.rs.utils.Utils;</p>
<p>public final class Mining extends Action {</p>
<pre><code>public static enum RockDefinitions {

	Copper_Ore(1, 10, 436, 10, 10, 14906, 0, 1), 
	Tin_Ore(1, 10, 438, 10, 10, 14902, 0, 1), 
	Iron_Ore(15, 15, 440, 10, 10, 14856, 0, 1), 
	Sandstone_Ore(35, 30, 6971, 30, 1, 11552, 10, 1), 
	Silver_Ore(20, 20, 442, 25, 1, 11552, 20, 1), 
	Coal_Ore(30, 25, 453, 10, 10, 14850, 0, 1), 
	Granite_Ore(45, 1, 6979, 50, 10, 11552, 20, 1), 
	Gold_Ore(40, 32, 444, 10, 10, 2098, 0, 1), 
	Mithril_Ore(55, 40, 447, 10, 10, 14853, 0, 1), 
	Adamant_Ore(70, 45, 449, 10, 10, 14862, 0, 1), 
	Runite_Ore(85, 50, 451, 20, 20, 14859, 0, 1);

	private int level;
	private double xp;
	private int oreId;
	private int oreBaseTime;
	private int oreRandomTime;
	private int emptySpot;
	private int respawnDelay;
	private int randomLifeProbability;

	private RockDefinitions(int level, double xp, int oreId,
			int oreBaseTime, int oreRandomTime, int emptySpot,
			int respawnDelay, int randomLifeProbability) {
		this.level = level;
		this.xp = xp;
		this.oreId = oreId;
		this.oreBaseTime = oreBaseTime;
		this.oreRandomTime = oreRandomTime;
		this.emptySpot = emptySpot;
		this.respawnDelay = respawnDelay;
		this.randomLifeProbability = randomLifeProbability;
	}

	public int getLevel() {
		return level;
	}

	public double getXp() {
		return xp;
	}

	public int getOreId() {
		return oreId;
	}

	public int getOreBaseTime() {
		return oreBaseTime;

	}

	public int getOreRandomTime() {
		return oreRandomTime;
	}

	public int getEmptyId() {
		return emptySpot;
	}

	public int getRespawnDelay() {
		return respawnDelay;
	}

	public int getRandomLifeProbability() {
		return randomLifeProbability;
	}
}

private WorldObject rock;
private RockDefinitions definitions;

private int emoteId;
private int pickaxeTime;

public Mining(WorldObject rock, RockDefinitions definitions) {
	this.rock = rock;
	this.definitions = definitions;
}

@Override
public boolean start(Player player) {
	if (!checkAll(player))
		return false;
	player.getPackets().sendGameMessage(
			"You swing your pickaxe at the rock...");
	setActionDelay(player, getMiningDelay(player));
	rock.setLife(definitions.getRandomLifeProbability());
	return true;
}

private int getMiningDelay(Player player) {
	int summoningBonus = 0;
	if (player.getFamiliar() != null) {
		if (player.getFamiliar().getId() == 7342
				|| player.getFamiliar().getId() == 7342)
			summoningBonus += 10;
		else if (player.getFamiliar().getId() == 6832
				|| player.getFamiliar().getId() == 6831)
			summoningBonus += 1;
	}
	int mineTimer = definitions.getOreBaseTime()
			- (player.getSkills().getLevel(Skills.MINING) + summoningBonus)
			- Utils.getRandom(pickaxeTime);
	if (mineTimer &lt; 1 + definitions.getOreRandomTime())
		mineTimer = 1 + Utils.getRandom(definitions.getOreRandomTime());
	mineTimer /= player.getAuraManager().getMininingAccurayMultiplier();
	return mineTimer;
}

private boolean checkAll(Player player) {
	if (!hasPickaxe(player)) {
		player.getPackets().sendGameMessage(
				"You need a pickaxe to mine this rock.");
		return false;
	}
	if (!setPickaxe(player)) {
		player.getPackets().sendGameMessage(
				"You do not have the required level to use this pickaxe.");
		return false;
	}
	if (!hasMiningLevel(player))
		return false;
	if (!player.getInventory().hasFreeSlots()) {
		player.getPackets().sendGameMessage(
				"Not enough space in your inventory.");
		return false;
	}
	return true;
}

private boolean hasMiningLevel(Player player) {
	if (definitions.getLevel() &gt; player.getSkills().getLevel(Skills.MINING)) {
		player.getPackets().sendGameMessage(
				"You need a mining level of " + definitions.getLevel()
						+ " to mine this rock.");
		return false;
	}
	return true;
}

private boolean setPickaxe(Player player) {
	int level = player.getSkills().getLevel(Skills.MINING);
	int weaponId = player.getEquipment().getWeaponId();
	if (weaponId != -1) {
		switch (weaponId) {
		case 15259: // dragon pickaxe
			if (level &gt;= 61) {
				emoteId = 12190;
				pickaxeTime = 13;
				return true;
			}
			break;
		case 1275: // rune pickaxe
			if (level &gt;= 1) {
				emoteId = 624;
				pickaxeTime = 5;
				return true;
			}
			break;
		case 1271: // adam pickaxe
			if (level &gt;= 1) {
				emoteId = 628;
				pickaxeTime = 5;
				return true;
			}
			break;
		case 1273: // mith pickaxe
			if (level &gt;= 1) {
				emoteId = 629;
				pickaxeTime = 5;
				return true;
			}
			break;
		case 1269: // steel pickaxe
			if (level &gt;= 1) {
				emoteId = 627;
				pickaxeTime = 5;
				return true;
			}
			break;
		case 1267: // iron pickaxe
			emoteId = 626;
			pickaxeTime = 5;
			return true;
		case 1265: // bronze pickaxe
			emoteId = 625;
			pickaxeTime = 5;
			return true;
		case 13661: // Inferno adze
			if (level &gt;= 61) {
				emoteId = 10222;
				pickaxeTime = 5;
				return true;
			}
			break;
		}
	}
	if (player.getInventory().containsOneItem(15259)) {
		if (level &gt;= 61) {
			emoteId = 12190;
			pickaxeTime = 5;
			return true;
		}
	}
	if (player.getInventory().containsOneItem(1275)) {
		if (level &gt;= 41) {
			emoteId = 624;
			pickaxeTime = 5;
			return true;
		}
	}
	if (player.getInventory().containsOneItem(1271)) {
		if (level &gt;= 31) {
			emoteId = 628;
			pickaxeTime = 5;
			return true;
		}
	}
	if (player.getInventory().containsOneItem(1273)) {
		if (level &gt;= 21) {
			emoteId = 629;
			pickaxeTime = 5;
			return true;
		}
	}
	if (player.getInventory().containsOneItem(1269)) {
		if (level &gt;= 6) {
			emoteId = 627;
			pickaxeTime = 5;
			return true;
		}
	}
	if (player.getInventory().containsOneItem(1267)) {
		emoteId = 626;
		pickaxeTime = 5;
		return true;
	}
	if (player.getInventory().containsOneItem(1265)) {
		emoteId = 625;
		pickaxeTime = 5;
		return true;
	}
	if (player.getInventory().containsOneItem(13661)) {
		if (level &gt;= 61) {
			emoteId = 10222;
			pickaxeTime = 13;
			return true;
		}
	}
	return false;

}

private boolean hasPickaxe(Player player) {
	if (player.getInventory().containsOneItem(15259, 1275, 1271, 1273,
			1269, 1267, 1265, 13661))
		return true;
	int weaponId = player.getEquipment().getWeaponId();
	if (weaponId == -1)
		return false;
	switch (weaponId) {
	case 1265:// Bronze Pickaxe
	case 1267:// Iron Pickaxe
	case 1269:// Steel Pickaxe
	case 1273:// Mithril Pickaxe
	case 1271:// Adamant Pickaxe
	case 1275:// Rune Pickaxe
	case 15259:// Dragon Pickaxe
	case 13661: // Inferno adze
		return true;
	default:
		return false;
	}

}

@Override
public boolean process(Player player) {
	player.setNextAnimation(new Animation(emoteId));
	return checkRock(player);
}

private boolean usedDeplateAurora;

@Override
public int processWithDelay(Player player) {
	addOre(player);
	rock.decrementObjectLife();
	if (!usedDeplateAurora
			&amp;&amp; (1 + Math.random()) &lt; player.getAuraManager()
					.getChanceNotDepleteMN_WC()) {
		usedDeplateAurora = true;
	} else if (rock.getLife() == 0) {
		World.spawnTemporaryObject(
				new WorldObject(definitions.getEmptyId(), rock.getType(),
						rock.getRotation(), rock.getX(), rock.getY(), rock
								.getPlane()),
				definitions.respawnDelay * 600, false);
		player.setNextAnimation(new Animation(-1));
		return -1;
	}
	if (!player.getInventory().hasFreeSlots()
			&amp;&amp; definitions.getOreId() != -1) {
		player.setNextAnimation(new Animation(-1));
		player.getPackets().sendGameMessage(
				"Not enough space in your inventory.");
		return -1;
	}
	return getMiningDelay(player);
}

private void addOre(Player player) {
	double xpBoost = 0;
	int idSome = 0;
	if (definitions == RockDefinitions.Granite_Ore) {
		idSome = Utils.getRandom(2) * 2;
		if (idSome == 2)
			xpBoost += 10;
		else if (idSome == 4)
			xpBoost += 25;
	} else if (definitions == RockDefinitions.Sandstone_Ore) {
		idSome = Utils.getRandom(3) * 2;
		xpBoost += idSome / 2 * 10;
	} else if (player.getFamiliar() != null
			&amp;&amp; (player.getFamiliar().getId() == 7342 || player
					.getFamiliar().getId() == 7342))
		xpBoost += 40;
	player.getSkills().addXp(Skills.MINING, definitions.getXp() + xpBoost);
	if (definitions.getOreId() != -1) {
		player.getInventory().addItem(definitions.getOreId() + idSome, 1);
		String oreName = ItemDefinitions
				.getItemDefinitions(definitions.getOreId() + idSome)
				.getName().toLowerCase();
		player.getPackets().sendGameMessage(
				"You mine some " + oreName + ".", true);
	}
}

private boolean checkRock(Player player) {
	return World.getRegion(rock.getRegionId()).containsObject(rock.getId(),
			rock);
}

@Override
public void stop(Player player) {
	setActionDelay(player, 9);
}
</code></pre>
<p>}<br>
[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-mining-rocks-disappear/460689/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-mining-rocks-disappear/460689/1</link>
        <pubDate>Wed, 19 Sep 2012 23:17:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-460689-1</guid>
        <source url="https://forum.moparisthebest.com/t/667-mining-rocks-disappear/460689.rss">667 Mining Rocks Disappear</source>
      </item>
  </channel>
</rss>
