<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Loading and using Object Sizes</title>
    <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738</link>
    <description>[b]Description:[/b] In this tutorial, I will teach you how to load and use Object Sizes in your server.
[b]Server Base:[/b] This is compatible with any server.
[b]Difficulty[/b]: May be hard to understand, but shouldn&#39;t be hard to complete the tutorial.

Firstly, you will need to download the [url=http://dl.dropbox.com/u/2505112/Data/objectSizes.txt]Object Sizes File[/url] that we will be using to load the object sizes from. You will need to either place this file in a folder named &quot;data&quot;, or change the directory that the &quot;loadObjectSizes()&quot; method is attempting to load the file from. If you prefer to use XML (This is what I use), download the [url=http://dl.dropbox.com/u/2505112/Data/objectSizes.xml]XML file[/url] and load the sizes in your own way.

Both of the above files [u][i]only[/i][/u] contain the object ids and sizes of the objects that [b]do not have a size of 1[/b]. This is because we can just use a method to iterate through all the object ids to get the sizes, and if the object id isn&#39;t found, the size of 1 will be returned by default.

[u][b]Step 1: Creating the class to load the data.[/b][/u]

This is the class that we will be using to load and store the object sizes.
[code=java]import java.io.BufferedReader;
import java.io.FileReader;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * Loads and stores object sizes.
 * @author Primadude.
 */
public class ObjectSizes {
	
	/**
	 * ID index constant.
	 */
	private final int ID = 0;
	
	/**
	 * Size index constant.
	 */
	private final int SIZE = 1;
	
	/**
	 * Maximum object constant.
	 */
	private static final int MAX_OBJECTS = 1773;

	/**
	 * The Object sizes.
	 */
	private static int[][] sizes = new int[MAX_OBJECTS][2];
	
	/**
	 * The Logger instance.
	 */
	private Logger logger = Logger.getLogger(ObjectSizes.class.getName());
	
	/**
	 * Gets the size of the specific object.
	 * @param objectID The ID of the object to return the size for.
	 * @return The size of the object.
	 */
	public int getSize(int objectID) {
		for (int i = 0; i &lt; sizes.length; i++) {
			if (sizes[i][ID] == objectID) {
				return sizes[i][SIZE];
			}
		}
		return 1;
	}
	
	/**
	 * Loads the object sizes.
	 */
	public void loadObjectSizes() {
		int lineID = 0;
		String line = &quot;&quot;;
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;data/objectSizes.txt&quot;));
			while((line = in.readLine()) != null &amp;&amp; lineID &lt; MAX_OBJECTS) {
				String[] lineArray = line.split(&quot;\t&quot;);
				int id = Integer.valueOf(lineArray[0]);
				int size = Integer.valueOf(lineArray[1]);
				sizes[lineID][ID] = id;
				sizes[lineID][SIZE] = size;
				lineID++;
			}
			in.close();
		} catch(Exception exception) {
			logger.log(Level.WARNING, &quot;Exception caught whilst loading object sizes:&quot;);
			exception.printStackTrace();
			return;
		}
	}
}[/code]

This class is pretty self-explanatory, however, I will explain it anyway.

The first Objects we see within the class are two integer constants; we use these for the indexes in the second dimension of the 2D array in this class (Object ID and Object Size).
After these two, we see another integer constant, however this is used for the Maximum amount of object sizes that are loaded from the file (1773).

We next see our two-dimensional array that stores the object IDs and Sizes.

After this, there is the logger instance. This is used to log information/warnings in the output.

Our first method comes up after this; the &quot;getSize&quot; method. This returns the value of the object size for the object ID that is input in the &quot;objectID&quot; parameter of the method. If the object ID cannot be found within the &quot;sizes&quot; 2D array, then the default size of 1 is returned.

The final method loads the object Sizes from the file, using a BufferedReader. Each line that is loaded is split by the tab in-between the ID and the size in the line, converted to an array, then put into the &quot;sizes&quot; 2D array. If an exception is thrown whilst loading the data, it is caught, the logger prints a message in the output and the exception is printed in the output.

[u][b]Step 2: Calling the &quot;loadObjectSizes()&quot; method to load the data.[/b][/u]

We now need to call the &quot;loadObjectSizes()&quot; method upon the start-up of the server. This will make it so we can get the size of any object at any time after this.

In your main method, in most servers it&#39;s in the &quot;Server&quot; class, you will need to add this:
[code=java]new ObjectSizes().loadObjectSizes();[/code]

Don&#39;t forget to import the ObjectSizes class if required.

[u][b]Step 3: Using the object sizes.[/b][/u]

The most common usage of object sizes, is checking if you&#39;re within an object&#39;s distance to execute an action. We can do this by using these two methods:
[code=java]	public boolean isWithinDistance(int x, int y, int otherX, int otherY, int size, int distance) {
		return (double) distance &gt;= getDistance(x, y, otherX, otherY, size);
	}

	public double getDistance(int x, int y, int otherX, int otherY, int size) {
		return Math.hypot((double) otherX + (double) size / 2.0D - (double) x - 0.5D, (double) otherY + (double) size / 2.0D - (double) y - 0.5D);
	}[/code]

We then use the &quot;isWithinDistance&quot; method to check if the player is within the correct distance of the object:
[code=java]int distance = 1;
int size = new ObjectSizes().getSize(objectID);
if (isWithinDistance(objectX, objectY, playerX, playerY, size, distance)) {
        // Execute action.
}[/code]


Thanks for using or reading this tutorial. If you have any problems at all, either post a reply here or PM me ;).</description>
    
    <lastBuildDate>Sat, 31 Jul 2010 00:32:29 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Loading and using Object Sizes</title>
        <dc:creator><![CDATA[@sorecheeny sorecheeny]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sorecheeny">@sorecheeny</a> wrote:</p>
          <blockquote>
              <p>xD thats wut i ment both ways</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/5</link>
        <pubDate>Sat, 31 Jul 2010 00:32:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351738-5</guid>
        <source url="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss">Loading and using Object Sizes</source>
      </item>
      <item>
        <title>Loading and using Object Sizes</title>
        <dc:creator><![CDATA[@usman555 usman555]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/usman555">@usman555</a> wrote:</p>
          <blockquote>
              <p>[quote=“sorecheeny, post:3, topic:351738”]Very nice tutorial. I would rep++ but i can’t. :l[/quote]And he already has 200 <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
<span class="mention">@Ontopic</span>:<br>
Nice tutorial.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/4</link>
        <pubDate>Sat, 31 Jul 2010 00:10:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351738-4</guid>
        <source url="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss">Loading and using Object Sizes</source>
      </item>
      <item>
        <title>Loading and using Object Sizes</title>
        <dc:creator><![CDATA[@sorecheeny sorecheeny]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sorecheeny">@sorecheeny</a> wrote:</p>
          <blockquote>
              <p>Very nice tutorial. I would rep++ but i can’t. :l</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/3</link>
        <pubDate>Fri, 30 Jul 2010 16:55:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351738-3</guid>
        <source url="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss">Loading and using Object Sizes</source>
      </item>
      <item>
        <title>Loading and using Object Sizes</title>
        <dc:creator><![CDATA[@AuDiOdreams AuDiOdreams]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/audiodreams">@AuDiOdreams</a> wrote:</p>
          <blockquote>
              <p>Very good job!  <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/2</link>
        <pubDate>Thu, 29 Jul 2010 01:16:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351738-2</guid>
        <source url="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss">Loading and using Object Sizes</source>
      </item>
      <item>
        <title>Loading and using Object Sizes</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">Description:</span> In this tutorial, I will teach you how to load and use Object Sizes in your server.<br>
<span class="bbcode-b">Server Base:</span> This is compatible with any server.<br>
<span class="bbcode-b">Difficulty</span>: May be hard to understand, but shouldn’t be hard to complete the tutorial.</p>
<p>Firstly, you will need to download the <a href="http://dl.dropbox.com/u/2505112/Data/objectSizes.txt" data-bbcode="true" rel="nofollow noopener">Object Sizes File</a> that we will be using to load the object sizes from. You will need to either place this file in a folder named “data”, or change the directory that the “loadObjectSizes()” method is attempting to load the file from. If you prefer to use XML (This is what I use), download the <a href="http://dl.dropbox.com/u/2505112/Data/objectSizes.xml" data-bbcode="true" rel="nofollow noopener">XML file</a> and load the sizes in your own way.</p>
<p>Both of the above files <span class="bbcode-u"><span class="bbcode-i">only</span></span> contain the object ids and sizes of the objects that <span class="bbcode-b">do not have a size of 1</span>. This is because we can just use a method to iterate through all the object ids to get the sizes, and if the object id isn’t found, the size of 1 will be returned by default.</p>
<p><span class="bbcode-u"><span class="bbcode-b">Step 1: Creating the class to load the data.</span></span></p>
<p>This is the class that we will be using to load and store the object sizes.</p>
<p>[code=java]import java.io.BufferedReader;<br>
import java.io.FileReader;<br>
import java.util.logging.Level;<br>
import java.util.logging.Logger;</p>
<p>/**</p>
<ul>
<li>
<p>Loads and stores object sizes.</p>
</li>
<li>
<p><span class="mention">@author</span> Primadude.<br>
*/<br>
public class ObjectSizes {</p>
<p>/**</p>
<ul>
<li>ID index constant.<br>
*/<br>
private final int ID = 0;</li>
</ul>
<p>/**</p>
<ul>
<li>Size index constant.<br>
*/<br>
private final int SIZE = 1;</li>
</ul>
<p>/**</p>
<ul>
<li>Maximum object constant.<br>
*/<br>
private static final int MAX_OBJECTS = 1773;</li>
</ul>
<p>/**</p>
<ul>
<li>The Object sizes.<br>
*/<br>
private static int[][] sizes = new int[MAX_OBJECTS][2];</li>
</ul>
<p>/**</p>
<ul>
<li>The Logger instance.<br>
*/<br>
private Logger logger = Logger.getLogger(ObjectSizes.class.getName());</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the size of the specific object.</li>
<li>
<a class="mention" href="/u/param">@param</a> objectID The ID of the object to return the size for.</li>
<li>
<a class="mention" href="/u/return">@return</a> The size of the object.<br>
*/<br>
public int getSize(int objectID) {<br>
for (int i = 0; i &lt; sizes.length; i++) {<br>
if (sizes[i][ID] == objectID) {<br>
return sizes[i][SIZE];<br>
}<br>
}<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Loads the object sizes.<br>
*/<br>
public void loadObjectSizes() {<br>
int lineID = 0;<br>
String line = “”;<br>
try {<br>
BufferedReader in = new BufferedReader(new FileReader(“data/objectSizes.txt”));<br>
while((line = in.readLine()) != null &amp;&amp; lineID &lt; MAX_OBJECTS) {<br>
String[] lineArray = line.split("\t");<br>
int id = Integer.valueOf(lineArray[0]);<br>
int size = Integer.valueOf(lineArray[1]);<br>
sizes[lineID][ID] = id;<br>
sizes[lineID][SIZE] = size;<br>
lineID++;<br>
}<br>
in.close();<br>
} catch(Exception exception) {<br>
logger.log(Level.WARNING, “Exception caught whilst loading object sizes:”);<br>
exception.printStackTrace();<br>
return;<br>
}<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>This class is pretty self-explanatory, however, I will explain it anyway.</p>
<p>The first Objects we see within the class are two integer constants; we use these for the indexes in the second dimension of the 2D array in this class (Object ID and Object Size).<br>
After these two, we see another integer constant, however this is used for the Maximum amount of object sizes that are loaded from the file (1773).</p>
<p>We next see our two-dimensional array that stores the object IDs and Sizes.</p>
<p>After this, there is the logger instance. This is used to log information/warnings in the output.</p>
<p>Our first method comes up after this; the “getSize” method. This returns the value of the object size for the object ID that is input in the “objectID” parameter of the method. If the object ID cannot be found within the “sizes” 2D array, then the default size of 1 is returned.</p>
<p>The final method loads the object Sizes from the file, using a BufferedReader. Each line that is loaded is split by the tab in-between the ID and the size in the line, converted to an array, then put into the “sizes” 2D array. If an exception is thrown whilst loading the data, it is caught, the logger prints a message in the output and the exception is printed in the output.</p>
<p><span class="bbcode-u"><span class="bbcode-b">Step 2: Calling the “loadObjectSizes()” method to load the data.</span></span></p>
<p>We now need to call the “loadObjectSizes()” method upon the start-up of the server. This will make it so we can get the size of any object at any time after this.</p>
<p>In your main method, in most servers it’s in the “Server” class, you will need to add this:</p>
<pre><code class="lang-auto">new ObjectSizes().loadObjectSizes();</code></pre>
<p>Don’t forget to import the ObjectSizes class if required.</p>
<p><span class="bbcode-u"><span class="bbcode-b">Step 3: Using the object sizes.</span></span></p>
<p>The most common usage of object sizes, is checking if you’re within an object’s distance to execute an action. We can do this by using these two methods:</p>
<p>[code=java]	public boolean isWithinDistance(int x, int y, int otherX, int otherY, int size, int distance) {<br>
return (double) distance &gt;= getDistance(x, y, otherX, otherY, size);<br>
}</p>
<pre><code>public double getDistance(int x, int y, int otherX, int otherY, int size) {
	return Math.hypot((double) otherX + (double) size / 2.0D - (double) x - 0.5D, (double) otherY + (double) size / 2.0D - (double) y - 0.5D);
}[/code]
</code></pre>
<p>We then use the “isWithinDistance” method to check if the player is within the correct distance of the object:</p>
<p><code>int distance = 1;
int size = new ObjectSizes().getSize(objectID);
if (isWithinDistance(objectX, objectY, playerX, playerY, size, distance)) {
        // Execute action.
}</code></p>
<p>Thanks for using or reading this tutorial. If you have any problems at all, either post a reply here or PM me ;).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738/1</link>
        <pubDate>Thu, 29 Jul 2010 01:15:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-351738-1</guid>
        <source url="https://forum.moparisthebest.com/t/loading-and-using-object-sizes/351738.rss">Loading and using Object Sizes</source>
      </item>
  </channel>
</rss>
