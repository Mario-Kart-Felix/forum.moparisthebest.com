<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Why I Don&#39;t Use Java</title>
    <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684</link>
    <description>Brace yourselves, it&#39;s a long&#39;un. I like to ramble. Skim it, maybe something will catch your eye.

This topic&#39;s come up a few times recently, so I decided to spew forth here on the forums thinkin they could use some content, even if it&#39;s not useful to you bottin&#39; cats.

First off: Read that topic title again. It does not say &quot;Why Java sucks the big one,&quot; nor &quot;Why my language of choice is just so much better than yours.&quot; And I don&#39;t recall having typed in &quot;Seriously people, my opinion is infallible.&quot; Not in the title, anyway.

Secondly: I am a [i]hobbyist[/i]. I have no desire at all to pursue coding as a career. I program cuz I&#39;m a nerd with vast quantities free time falling outta my ass, and because it entertains me. I have never at any point studied formally (save a high school course years back, but that was just a free credit as anyone who&#39;s done the same can tell you). This informs all of my decisions: it really means jack all to me whether I&#39;m acquainted with ThatHotNewTechnology or XYZAcronym Enterprise Server Edition++ 73.5. I like what lets me do the work I want to do in the environment I want to do that work in.

Java&#39;s selling points as a language [i]for me[/i] are:

[ul][li]First and foremost in every respect, the API. This is a given even for people who despise Java. It&#39;s just hands down the most inclusive, beautiful stdlib I&#39;ve ever come across. 99% of it works exactly as you want it to. In comparison, every other language has little more than hacked together garbage. I can&#39;t stress enough how much I sometimes miss it.[/li]
[li]As a corollary, properly hiding the details of networking. I haven&#39;t found another language that managed it -- even Ruby, which normally does a decent job, really just provides wrappers around C&#39;s socket(), read(), and so on. Which then means you need to require special things for Win32 to work, I think. Either way, Java got it right the first time.[/li]
[li]Portability, even though it&#39;s never been needed on my end. I can appreciate just how much magic goes into making &quot;Build once, run everywhere&quot; the (slightly illusory) reality that it is. Applause all around.[/li]
[li]Ant -- it&#39;s not Rake, and reading a build.xml is sometimes akin to driving a steel spike through your eye, but it&#39;s craploads better than what&#39;s available for most languages. Why isn&#39;t it formally adopted?[/li]
[li]JUnit. I never actually used unit testing when I was still working with Java, but it looks like they did a lot of pioneering work there, and I love them very much for it. Unit tests are your best friend, especially  when you often code in drunken stupors as I do.[/li]
[li]For sheer technical marvel, Hotspot. Everyone in the Ruby crowd, when explaining why ruby2 will use JIT, points to Hotspot -- not a single one mentions Python&#39;s .pyc crap. (Admittedly, some name drop pugs, but I think that&#39;s just so they&#39;ll feel hip)[/li]
[li]To some degree, widespread adoption. There&#39;s a lot of good resources available to you on the web: libraries, examples, papers. Good deal. Sadly, popularity is often a double-edged sword. See below.[/li][/ul]


That&#39;s all that instantly came to mind. Someone&#39;s response will surely trigger the inevitable &quot;argh, why didn&#39;t I mention that?!&quot; Just because I left something out doesn&#39;t mean I think it wasn&#39;t worth putting in a list of quality features.

With all of those great features, what the hell is so wrong with me that I don&#39;t use Java? Plenty, but that&#39;s beside the point. My gripes, which have eventually coalesced and cancelled the Duke Late Late Night Show:

[ul][li]First and foremost in every respect, [b]verbosity[/b]. Holy mother of sweet monkey jesus, verbosity. You&#39;d think with this much crap posted on a forum, verbosity would be my best friend -- but not when coding. I can write a 90 page diatribe in Aramaic on Kantian metaphysics&#39; influence on modern pop music faster than I can put down some fairly routine and simplistic code into my editor. And, to top it all off, what&#39;s the standard response to this complaint? &quot;Just use a code generator!&quot; Ugggggh. I won&#39;t waste time on my qualms with that just yet, so a &quot;No god damnit.&quot; will have to suffice.[/li]
[li]My #1 problem with the verbosity of Java? No function pointers! Or something that at least resembles them. The Java alternative is either jumping through reflection hoops, or, more typically, wrapper classes. This is possibly the ugliest thing I&#39;ve ever seen in a full-fledged language.  Having to define an interface, some base class, and *then* create your object (adding some 80 gajillion indent levels, unless you break them all out of the call to the method to which you actually want to provide the callback) -- it&#39;s bloody absurd. Flat out, no way around it, off the wall stupid.

To me, this adds tons of complications to what would be routine and trivial in other languages. A minimal example: I&#39;ve got some lines of text coming in, and I want to send them to various methods depending on the first word. In C, I use something like the following:[/li][/ul]


[code]
struct {
        char *cmd;
        int (*f)(const char *);
} handlers[] = {
        { &quot;hello&quot;, handle_hello },
        { &quot;goodbye&quot;, handle_goodbye },
        {NULL},
};
[/code]


[ul][li]Where [tt]handle_hello[/tt] and [tt]handle_goodbye[/tt] are two functions defined elsewhere. Clean, simple, and a very tiny little loop will properly deliver everything. Takes all of 2 minutes to write.

For giggles, in Ruby:[/li][/ul]


[code]
handlers = {
        :hello =&gt; method(:handle_hello),
        :goodbye =&gt; method(:handle_goodbye),
}
[/code]


[ul][li]Can anyone tell me the Java version? So, the above is something like a HashMap&lt;String, Method&gt; definition, but more likely you&#39;ll be defining a InputHandler interface/class, and using a HashMap&lt;String, InputHandler&gt;. Okay, so you had to define a class -- really not a big deal. Except, how do you then stick those into the HashMap? You can&#39;t just do it in the declaration, as I did above. Well, maybe you&#39;ll use clinit. But, I&#39;m aware of no concise syntax to do so, unless you&#39;re seriously just going to do it all manually -- indeed, the solution I&#39;ve seen in the past is to use some external file (XML), which maps input commands to the class+method that will be handling them, and then at startup, you need to parse all of that, reflect to find the methods, and then fill in your HashMap. This is Kool-Aid drinking at its finest.

The lack of function pointers (&quot;or something that at least resembles them&quot;) without over the top hackery is enough to make me gouge my eyes out. No, not every program you write will use them. But many do. And they are *handy*. Sean told me that something, possibly called delegates following C#, is up for consideration for Java 1.7, or maybe 1.8, or maybe ...

They should have been there from the beginning. That&#39;s all there is to it, methinks.

&quot;What the hell?!&quot; I ask. Please tell me I have been deluded all this time and there&#39;s a woefully obvious solution that I&#39;ve just never stumbled upon.[/li]

[li]Verbosity #2 -- writing accessor methods. This is possibly &quot;controversial,&quot; but everyone acknowledges it can be a pain. Some people say accessors themselves are a code smell and that proper encapsulation eliminates the need for them (especially those who take &quot;Tell, don&#39;t ask&quot; to its ultimate conclusion). Or, you could just forsake it and make your fields public, but that really is not a rational solution, as far as I&#39;m concerned. And then you run into the code generator crowd again. Once more, say it with me: Ugggggh. I should not need some random IDE just to write three lines of code (a couple times). Nor should I need to copy and paste and s/// a crapload. Here, I think Ruby did a great job -- there aren&#39;t actually fields to access, just class private variables, which happen to correspond to methods. Simplicity and brevity:[/li][/ul]


[code]
class SomeClass
    attr_accessor :readwrite # defines &#39;readwrite&#39; and &#39;readwrite=&#39; methods
    attr_reader   :readonly  # defines &#39;readonly&#39; method

    def initialize
        @readwrite = &#39;whatever&#39; # the variable the &#39;readwrite&#39; methods access
        @readonly  = &#39;again&#39;
        @magic     = &#39;hrmph&#39;
    end

    def magic=(str)
        @magic = str.reverse
    end
end

sc = SomeClass.new
sc.readwrite = &#39;blahblah&#39; # say goodbye, sc.setReadWrite(&#39;blah&#39;)
[/code]


[ul][li]This seems pretty ideal, to me. The elimination of the plethora of get*() and set*() methods really tidies up code more than it at first seems like it might. And the &#39;magic=&#39; method properly hides magic. You also get a very short, readable list of your public interface right at the top of a class. I like it.[/li]

[li]Verbosity #3, and this is really just the first two reiterated: a lot of my time in Java was spent writing scaffolding code, not implementing what I actually wanted to write. I suppose if you&#39;ve got a grunt at work who you can pay peanuts to do this for you, it&#39;s not a problem, but it gets to be a hassle for one man code machines. I&#39;m sure others have felt this pain before.[/li]
[li]The &quot;just short of required&quot; mapping of Filename.java to Filename the class. This seems like a real great idea at first, but then turns into a fairly arbitrary restriction. Maybe I&#39;m just not seeing it -- what&#39;s the point? Protecting people who can&#39;t organize code from themselves? Thanks Sun, but I want my compiler to compile, not dictate code layout. You still end up with Blah$0.class files anyhow, so it&#39;s not as if there&#39;s an issue with naming schemes. Anyone want to explain the rationale here?[/li]
[li]Hashtable vs HashMap. I mention this a lot, but I&#39;ve simply never gotten over it. For some reason I smell a committee. It should have been fixed a long, long time ago -- the amount of code broken really wouldn&#39;t have been too astounding. Really, it shouldn&#39;t have happened in the first place, but it was bound to occur in something as large as Java. It&#39;s tiny inconsistencies like this that start to stack up and be ludicrous.[/li]
[li]J2EE, Beans, and their most immediate product: hype. It&#39;s not the products themselves I have a problem with here; I understand how they can be helpful, as a codification of a single way to handle common problems. And moreover, I don&#39;t do professional coding, I don&#39;t write servlets or deal with transactional databases and so on, so they are more a mystery to me than most of the rest of Java. My opinion on the technical details would thus mean zilch. And I don&#39;t doubt that Sun [i]had[/i] to do it -- they need something to market, and rapid deployment of complex applications isn&#39;t just a gimmick. I have, however, seen many complaints about them. I just can&#39;t evaluate them objectively, so I&#39;ll leave that to someone else. My problem is the culture of buzzwords that sprouted up around them. It&#39;s completely inevitable, and this is just as much something I hate about Ruby. But it annoyed me to no end to read the impenetrable stream of drivel which were many articles on the subject.[/li]
[li]Similarly, as I said above: the rope with which to shoot yourself in the foot which is popularity. There are countless examples of the most god awful code I&#39;ve ever seen (and don&#39;t forget that I&#39;ve been &#39;round these forums for a while), all of it masquerading as respectable works by notable people at reliable websites (OnJava, I&#39;m thinking of you). But this is neither Sun&#39;s nor Java&#39;s fault.[/li]
[li]And last but not least, Gosling. He wrote Emacs. &#39;nuff said. The vi cult shall prevail. =)[/li][/ul]


As with the first list, there&#39;s surely something I&#39;ve left out, and I&#39;ll be at a loss as to how I could neglect to cast the shadow of my disdain upon the horrible malcodism (coinage?) someone else brings up.

Finally, if you can sympathize with such a harrowing harangue, my recommendations for how to go about washing off your keyboard and getting back to enjoying writing code:

[ul][li]Ruby. It&#39;s a shining example of being able to get down to business in your code again. This is what OO can and should be. This is what dynamic languages can and should be. I love just about everything about Ruby. Don&#39;t get me wrong; it&#39;s got [b]tons[/b] of downsides: the libraries, compared to Java, are complete crap, and half of them are only documented in Japanese; it&#39;s slower than constipated men passing Volvos; Rails needs to be clubbed to death like a seal, and then eaten by polar bears; it&#39;s got fanboys, exposure to whom will result in ceaseless ocular bleeding; and the hype is intolerable at times, especially when you see the illegible messes that some of the &quot;top rubyists&quot; are writing.

Bearing all of that in mind, I have no reservations in asserting that I&#39;ve never had a simpler, more pleasant time in making my code &quot;flow.&quot; Matz took seriously his idea that the most important optimizations that a language should allow for are of *the coder&#39;s time and effort*. This is something I&#39;d never before imagined.

And its problems are rapidly being addressed, to the point that ruby2 is being looked at not as &quot;what can we add&quot;, but rather, &quot;what do you not like about ruby, so that we can stop doing that?&quot; Backwards compatibility is *not* a goal. Rather, the goal is to provide the most kick-ass language they can. The changes are all open to public comment, suggestion and review (all three main ruby implementations are completely open source, with public source control, and maintainers who you can speak to -- as in, they will take the time to discuss their changes with you. I have seen this firsthand.)

Finally, setting aside some of the grouchy fanboys just itching to prove how much better they are than you, Ruby can boast of the nicest, most helpful community I&#39;ve encountered in a decade of haunting such things. It&#39;s tough to believe, but apparently there are actually polite, considerate people on the internets.[/li]

[li]Lisp. There&#39;s a reason that you&#39;ve a voice in the back of your head which tells you that all of the programming demigods say any serious programmer (which a hobbyist can certainly be) should take the time to learn Lisp. I had, for many years, looked at Lisp as some archaic, half-magic art that had no relevance today. In two months, it&#39;s significantly altered the way I look at the code I am designing and writing. Significantly.

Code which is itself a valid data structure? Lisp had it ages ago.
Meaning: Metaprogramming and dynamic language redefinition? Lisp had it ages ago. 
Functional programming? Lisp had it ages ago.
If-Then-Else? Lisp fuckin invented it! What the hell?!
Readable code? Okay, it takes some getting used to. =)

Even if it&#39;s only to kill a boring evening, [b]look into Lisp[/b]. The best introduction I could get ahold of was [url=http://www.gigamonkeys.com/book/]this one[/url]. It&#39;s thoroughly enjoyable, and even teaches with useful code, rather than pointless exercises no one on earth will ever again look at.[/li]

[li]Haskell or another functional language. Learning some Lisp first will possibly ease some of the pain involved. The syntax for Haskell is, I think, even stranger than Lisp&#39;s, for those of us who grew up on the Algalikes. But that&#39;s not what proved difficult for me: it was wrapping my head around the paradigm. Anyone else tried FP on before? After only a brief foray, I have an eversoslight impression of its value, I just haven&#39;t yet managed to grok it. I will come back to FP in the future, without a doubt.[/li][/ul]


I have intentionally left C off of this list, not because it doesn&#39;t belong, but because it should be considered prerequisite knowledge for anyone who has been programming for more than a year or two. I believe it was semaphore who said, in some other thread possibly ages ago, something along the lines of, &quot;if you can hack it in C, you can hack it in any language.&quot; And while new paradigms can and [i]will[/i] pose a challenge, that is largely true. Having begun with C is probably the only reason I have not yet given up in utter despair.

That is more than enough for now, no? I&#39;ve broken the 250 line mark in vim. I have a sneaking suspicion that formatting this in SMF will require a secret handshake and the dismemberment of puppies. [Indeed, it&#39;s not very pretty, and god knows what&#39;ll it turn into once I hit post, but it&#39;s the best I could muster. It was either that or just one giant code block and my own original manual formatting, which very well may have been a better choice...]

I am hoping this can be, for once, a topic that doesn&#39;t generate into someone being called a fag. Please.

PS: Proofreading is for pansies. It was typed in one sitting with two cups of coffee. Forgive me.</description>
    
    <lastBuildDate>Fri, 30 Mar 2007 17:56:09 +0000</lastBuildDate>
    <category>Community Inside Talk</category>
    <atom:link href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@Kamu Kamu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kamu">@Kamu</a> wrote:</p>
          <blockquote>
              <p>[quote=“newbiehacker, post:11, topic:69684”][quote author=ruler link=topic=102378.msg1036444#msg1036444 date=1174539696]<br>
I also think java programmers should at least read up on .NET<br>
[/quote]<br>
Unfortunately the way I’m using ruby at the moment is in a scripting engine that uses JRuby, which is pretty much the same, but MUCH slower and just not as much fun.[/quote]</p>
<p>There is nothing NOT fun about inventory.each(IronOre) { |ore| smelter.smelt(ore) }.</p>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/12</link>
        <pubDate>Fri, 30 Mar 2007 17:56:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-12</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@newbiehacker newbiehacker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/newbiehacker">@newbiehacker</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="3" data-topic="69684">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ruler/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"> ruler:</div>
<blockquote>
<p>I also think java programmers should at least read up on .NET</p>
</blockquote>
</aside>
<p>.NET is by far (in my opinion) the worst addition/hack to any language I have ever seen, the reflect API in java doesn’t even come close to sucking as bad as .NET.</p>
<p>Admittedly I only ever tried c# .NET (the java-like syntax went down well with me), but with no documentation (illegal version) and random “magic” methods all over my project I was lost.</p>
<p>pd, I loved your post and I think you made MANY good points.  I’m still just experimenting with ruby but it is by far the most fun language I have ever used (and it should be fun).  I have to say that I have NEVER used Ant though, seeing as my IDE handles everything I need (I enjoy simply writing code and pressing the run button), but I do agree it is very widely used.</p>
<p>Unfortunately the way I’m using ruby at the moment is in a scripting engine that uses JRuby, which is pretty much the same, but MUCH slower and just not as much fun.</p>
<p>But you post was a good read and I agreed with pretty much every single point that you made.</p>
<p>P.S. at least your rambling isn’t 5 minutes about the same subject.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/11</link>
        <pubDate>Wed, 28 Mar 2007 03:08:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-11</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <blockquote>If you code just for the shit of it, take on projects that will inevitably come crumbling down around you. It's fun stuff.</blockquote>
This is exactly me.  I started one project; found out it wasn't going to far.  Started a new one; still in development but I'm stuck.  But it's fun and gives me something to do.
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/10</link>
        <pubDate>Sat, 24 Mar 2007 00:07:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-10</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="8" data-topic="69684">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/philodespotos/40/158_2.png" class="avatar"> philodespotos:</div>
<blockquote>
<p>When starting out, coders seem to be hugely obsessed with writing something better than/different from XYZ project. For some, that phase never ends which results in essentially writing nothing at all. I believe this is a significant factor in the talentlessness of particular people floating around the internet.</p>
</blockquote>
</aside>
<p>It’s a shame my life on the internet can be summed up in such a short paragraph, it really is.</p>
<p>As a sidenote, I see no problem with portability of code using wchar_t to Win32, unless I’m missing something not-so-obvious.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/9</link>
        <pubDate>Fri, 23 Mar 2007 23:44:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-9</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@philodespotos philodespotos]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/philodespotos">@philodespotos</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="6" data-topic="69684">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/semaphore/40/252_2.png" class="avatar"> semaphore:</div>
<blockquote>
<p>There was one point I wanted to question about Ant. When you ask about its formal adoption, were you meaning formal adoption into the core java packaging?</p>
</blockquote>
</aside>
<p>Indeed. I am simply surprised that Sun hasn’t made an effort to gobble it up. Nearly every public project I’ve seen makes use of it.</p>
<p>Asking if anyone had tried their hand at a functional language was primarily directed at you (I’m excluding Lisp as FP fanatics seem to, since it’s not “pure”). So?</p>
<aside class="quote no-group" data-post="4" data-topic="69684">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/pplsuqbawlz/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"> pplsuqbawlz:</div>
<blockquote>
<p>Three or four different string management classes and still none dealing with a unicode format such as utf-8/16/32?</p>
</blockquote>
</aside>
<p>I was under the impression that wchar_t suffices perfectly well [multibyte(3): The wchar_t type is wide enough to hold the largest value in the wide character representations for all locales]. I know nothing about portability to Win32. It is worth noting that Plan9 has supported UTF-8 since its birth, given that Pike&amp;Thompson had their hands in it.</p>
<p>Either way, it’s definitely a friggin mess that I don’t even bother trying to understand.</p>
<aside class="quote no-group quote-modified" data-post="2" data-topic="69684">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/mr.chris/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"> Mr.Chris:</div>
<blockquote>
<p>The thing that is currently stopping me from continuing hardcore with it, is that I have no inspiration to code with it. I don’t feel I need it, and it benefits me in the slightest. I know the possibilities of Java are giant, but, I feel everything is either too hard, or just too useless.</p>
</blockquote>
</aside>
<p>Everything is going to be too hard for a while to come. So it goes.</p>
<p>But – who cares if it’s useless? When starting out, coders seem to be hugely obsessed with writing something better than/different from XYZ project. For some, that phase never ends which results in essentially writing nothing at all. I believe this is a significant factor in the talentlessness of particular people floating around the internet.</p>
<p>Personal example. I wrote a chess engine, first in Java. Running tournaments against other little engines, I lost every single bloody game. Out of maybe 30. Didn’t even come close in most of them. But I had tons of fun writing it (“I’m a nerd” was an understatement), and I learned a crapload, both about how to design a project so that it won’t be illegible 5 minutes after you put it away, and even a lil’ bit bout chess. Eventually, I rewrote it in C, got a tenfold speed increase (not an exaggeration), figured out how to evaluate positions a little bit better, and suddenly it could win games! Yaaay. Not many, but still…</p>
<p>Point being: a chess engine was <span class="bbcode-i">far</span> beyond my abilities when I started, but by the time I moved on to another toy, I had a slight clue what I was doing. And I’ll never release the engine, because it’s comparative garbage, so it’s “useless.” I just don’t care.</p>
<p>If you aren’t big on coding, “usefulness” and “ability” and all that are probably important. If you code just for the shit of it, take on projects that will inevitably come crumbling down around you. It’s fun stuff.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/8</link>
        <pubDate>Fri, 23 Mar 2007 22:59:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-8</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@Mr.Chris Mr.Chris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mr.chris">@Mr.Chris</a> wrote:</p>
          <blockquote>
              <p>[quote=“semaphore, post:6, topic:69684”]Nice read. I did skim the message mainly because I intend to read it more fully later. You make many good points, and I’d only add that there is one glaring reason Java has risen to its invasive state that it currently enjoys: time to market.</p>
<p>No other language has the same balance of power and ease of coding. This community could be a serious testimony to how simple the language is to grasp syntactically. I started out as a c programmer writing various and sundry tools for win32 developers. When java came around, I thought it would never last. How wrong I was.</p>
<p>Now, it has such a huge backing in India, I’m being serious, that I doubt it is going anywhere soon.</p>
<p>I agree with you that EJBs are an absolute flop. Rod and his crew of <span class="bbcode-i">spring</span> wizards put EJBs to sleep. Lightweight is good.</p>
<p>All in all, good read. I enjoyed the parts I skimmed and plan on reading the rest in full. I’ve never touched ruby. Lisp is great. Vi… nothing compares. Emacs eats yellow snow.</p>
<p>There was one point I wanted to question about Ant. When you ask about its formal adoption, were you meaning formal adoption into the core java packaging? As far as I’ve seen, it is used in just about every development shop I’ve worked in. Maven (Maven2) is becoming more prevalent because of its vast simplification of code dependency including. If that’s what you meant, I don’t think it needs to be adopted by sun to make it a standard. It already is a <span class="bbcode-i">de-facto</span> standard everywhere I’ve been.[/quote]</p>
<p>You wouldn’t mind me asking how old you are? Also, again, if you allow me to ask, do you code professionally?</p>
<p>PS - Sorry for going off-topic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/7</link>
        <pubDate>Fri, 23 Mar 2007 22:14:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-7</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@semaphore semaphore]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/semaphore">@semaphore</a> wrote:</p>
          <blockquote>
              <p>Nice read. I did skim the message mainly because I intend to read it more fully later. You make many good points, and I’d only add that there is one glaring reason Java has risen to its invasive state that it currently enjoys: time to market.</p>
<p>No other language has the same balance of power and ease of coding. This community could be a serious testimony to how simple the language is to grasp syntactically. I started out as a c programmer writing various and sundry tools for win32 developers. When java came around, I thought it would never last. How wrong I was.</p>
<p>Now, it has such a huge backing in India, I’m being serious, that I doubt it is going anywhere soon.</p>
<p>I agree with you that EJBs are an absolute flop. Rod and his crew of <span class="bbcode-i">spring</span> wizards put EJBs to sleep. Lightweight is good.</p>
<p>All in all, good read. I enjoyed the parts I skimmed and plan on reading the rest in full. I’ve never touched ruby. Lisp is great. Vi… nothing compares. Emacs eats yellow snow.</p>
<p>There was one point I wanted to question about Ant. When you ask about its formal adoption, were you meaning formal adoption into the core java packaging? As far as I’ve seen, it is used in just about every development shop I’ve worked in. Maven (Maven2) is becoming more prevalent because of its vast simplification of code dependency including. If that’s what you meant, I don’t think it needs to be adopted by sun to make it a standard. It already is a <span class="bbcode-i">de-facto</span> standard everywhere I’ve been.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/6</link>
        <pubDate>Fri, 23 Mar 2007 17:16:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-6</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@eXemplar eXemplar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exemplar">@eXemplar</a> wrote:</p>
          <blockquote>
              <p>tl;dr</p>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/5</link>
        <pubDate>Thu, 22 Mar 2007 07:19:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-5</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <p>I read it all and I agree for the most part with most if not all of your statements. Yes the standard lib with Java is vast and very well documented which is one reason it’s so widely adored; However, the reason I believe it is such a widely used language is because of it’s dastardly simplistic object orientated-ness. (Not a word, I know…) Beginner programmers often get lost in the difference between pointer’s, object reference’s, and various other aspects such as c/cpp’s ability to read and write to the memory directly, even change a processes’ code while executing if need-be(Though this takes MUCH experience.) They also get lost in the somewhat POORLY documented libs… What does the standard lib have now? Three or four different string management classes and still none dealing with a unicode format such as utf-8/16/32?</p>
<p>The major pitfall with most other programming languages is the utter lack of planning on the developer’s part; If anyone has ever looked at the MFC-You’ll notice that it seems to be thrown together AS NEEDED and rather poorly documented. And though some people, such as ‘binrapt’ a kid I’ve been aquainted with in Diablo 2 cheating, can recite how to utilize libs like it was a Bible, I still find it HARD to find any sort of useful, concise, and frankly easily understood information. Though like you, with an inordinate amount of time on my hands I eventually do or can.</p>
<p>All in all, however much I like  C, CPP, Delphi, Ruby, Python(lol for kicks mate), they still seem to stack up as “inadequate” when shared across multiple platforms AND machines. For example, this nasty little Diablo 2 hack I’ve been trying (and failing) to work with on my laptop, will not and cannot be run on my pc. Mostly because I used AMD’s optimization routines for ASM, but also because there is no “true” standard in use.</p>
<p>I’ve said enough, hehe, thank you for your insights but I really need to finish this book on the ASVAB sooner rather than later. (When it could bite me in the ass.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/4</link>
        <pubDate>Thu, 22 Mar 2007 05:02:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-4</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@ruler ruler]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruler">@ruler</a> wrote:</p>
          <blockquote>
              <p>Well i think people should learn c before learning java.</p>
<p>I view ruby more as a scripting language then a programming language.</p>
<p>I also think java programmers should at least read up on .NET</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/3</link>
        <pubDate>Thu, 22 Mar 2007 05:01:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-3</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@Mr.Chris Mr.Chris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mr.chris">@Mr.Chris</a> wrote:</p>
          <blockquote>
              <p>Lol @ your comment about proofreading.</p>
<p>I can’t say I read it all, but I skimmed. Now, I’m not the greatest Java coder about, lol, but I’m learning my way aroung the language…slowly. The thing that is currently stopping me from continuing hardcore with it, is that I have no inspiration to code with it. I don’t feel I need it, and it benefits me in the slightest. I know the possibilities of Java are giant, but, I feel everything is either too hard, or just too useless. The only think I’m starting to use Java for is scripting for iBot and ARGA. To the most part, although I don’t know Java as well as, more or less, all the CMs do, I do understand where you are coming from about the whole verbosity thing.</p>
<p>Great post though. Definitly slips in to my top 10 xD</p>
<p>Well, that’s my thoughts. I’m sure my response is going to be the least intelligent of what’s coming, but hey, why not <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/2</link>
        <pubDate>Thu, 22 Mar 2007 04:32:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-2</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
      <item>
        <title>Why I Don&#39;t Use Java</title>
        <dc:creator><![CDATA[@philodespotos philodespotos]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/philodespotos">@philodespotos</a> wrote:</p>
          <blockquote>
              <p>Brace yourselves, it’s a long’un. I like to ramble. Skim it, maybe something will catch your eye.</p>
<p>This topic’s come up a few times recently, so I decided to spew forth here on the forums thinkin they could use some content, even if it’s not useful to you bottin’ cats.</p>
<p>First off: Read that topic title again. It does not say “Why Java sucks the big one,” nor “Why my language of choice is just so much better than yours.” And I don’t recall having typed in “Seriously people, my opinion is infallible.” Not in the title, anyway.</p>
<p>Secondly: I am a <span class="bbcode-i">hobbyist</span>. I have no desire at all to pursue coding as a career. I program cuz I’m a nerd with vast quantities free time falling outta my ass, and because it entertains me. I have never at any point studied formally (save a high school course years back, but that was just a free credit as anyone who’s done the same can tell you). This informs all of my decisions: it really means jack all to me whether I’m acquainted with ThatHotNewTechnology or XYZAcronym Enterprise Server Edition++ 73.5. I like what lets me do the work I want to do in the environment I want to do that work in.</p>
<p>Java’s selling points as a language <span class="bbcode-i">for me</span> are:</p>
<p>[ul][li]First and foremost in every respect, the API. This is a given even for people who despise Java. It’s just hands down the most inclusive, beautiful stdlib I’ve ever come across. 99% of it works exactly as you want it to. In comparison, every other language has little more than hacked together garbage. I can’t stress enough how much I sometimes miss it.[/li]<br>
[li]As a corollary, properly hiding the details of networking. I haven’t found another language that managed it – even Ruby, which normally does a decent job, really just provides wrappers around C’s socket(), read(), and so on. Which then means you need to require special things for Win32 to work, I think. Either way, Java got it right the first time.[/li]<br>
[li]Portability, even though it’s never been needed on my end. I can appreciate just how much magic goes into making “Build once, run everywhere” the (slightly illusory) reality that it is. Applause all around.[/li]<br>
[li]Ant – it’s not Rake, and reading a build.xml is sometimes akin to driving a steel spike through your eye, but it’s craploads better than what’s available for most languages. Why isn’t it formally adopted?[/li]<br>
[li]JUnit. I never actually used unit testing when I was still working with Java, but it looks like they did a lot of pioneering work there, and I love them very much for it. Unit tests are your best friend, especially  when you often code in drunken stupors as I do.[/li]<br>
[li]For sheer technical marvel, Hotspot. Everyone in the Ruby crowd, when explaining why ruby2 will use JIT, points to Hotspot – not a single one mentions Python’s .pyc crap. (Admittedly, some name drop pugs, but I think that’s just so they’ll feel hip)[/li]<br>
[li]To some degree, widespread adoption. There’s a lot of good resources available to you on the web: libraries, examples, papers. Good deal. Sadly, popularity is often a double-edged sword. See below.[/li][/ul]</p>
<p>That’s all that instantly came to mind. Someone’s response will surely trigger the inevitable “argh, why didn’t I mention that?!” Just because I left something out doesn’t mean I think it wasn’t worth putting in a list of quality features.</p>
<p>With all of those great features, what the hell is so wrong with me that I don’t use Java? Plenty, but that’s beside the point. My gripes, which have eventually coalesced and cancelled the Duke Late Late Night Show:</p>
<p>[ul][li]First and foremost in every respect, <span class="bbcode-b">verbosity</span>. Holy mother of sweet monkey jesus, verbosity. You’d think with this much crap posted on a forum, verbosity would be my best friend – but not when coding. I can write a 90 page diatribe in Aramaic on Kantian metaphysics’ influence on modern pop music faster than I can put down some fairly routine and simplistic code into my editor. And, to top it all off, what’s the standard response to this complaint? “Just use a code generator!” Ugggggh. I won’t waste time on my qualms with that just yet, so a “No god damnit.” will have to suffice.[/li]<br>
[li]My <span class="hashtag">#1</span> problem with the verbosity of Java? No function pointers! Or something that at least resembles them. The Java alternative is either jumping through reflection hoops, or, more typically, wrapper classes. This is possibly the ugliest thing I’ve ever seen in a full-fledged language.  Having to define an interface, some base class, and <em>then</em> create your object (adding some 80 gajillion indent levels, unless you break them all out of the call to the method to which you actually want to provide the callback) – it’s bloody absurd. Flat out, no way around it, off the wall stupid.</p>
<p>To me, this adds tons of complications to what would be routine and trivial in other languages. A minimal example: I’ve got some lines of text coming in, and I want to send them to various methods depending on the first word. In C, I use something like the following:[/li][/ul]</p>
<pre><code class="lang-auto">struct {
        char *cmd;
        int (*f)(const char *);
} handlers[] = {
        { "hello", handle_hello },
        { "goodbye", handle_goodbye },
        {NULL},
};</code></pre>
<p>[ul][li]Where [tt]handle_hello[/tt] and [tt]handle_goodbye[/tt] are two functions defined elsewhere. Clean, simple, and a very tiny little loop will properly deliver everything. Takes all of 2 minutes to write.</p>
<p>For giggles, in Ruby:[/li][/ul]</p>
<pre><code class="lang-auto">handlers = {
        :hello =&gt; method(:handle_hello),
        :goodbye =&gt; method(:handle_goodbye),
}</code></pre>
<p>[ul][li]Can anyone tell me the Java version? So, the above is something like a HashMap&lt;String, Method&gt; definition, but more likely you’ll be defining a InputHandler interface/class, and using a HashMap&lt;String, InputHandler&gt;. Okay, so you had to define a class – really not a big deal. Except, how do you then stick those into the HashMap? You can’t just do it in the declaration, as I did above. Well, maybe you’ll use clinit. But, I’m aware of no concise syntax to do so, unless you’re seriously just going to do it all manually – indeed, the solution I’ve seen in the past is to use some external file (XML), which maps input commands to the class+method that will be handling them, and then at startup, you need to parse all of that, reflect to find the methods, and then fill in your HashMap. This is Kool-Aid drinking at its finest.</p>
<p>The lack of function pointers (“or something that at least resembles them”) without over the top hackery is enough to make me gouge my eyes out. No, not every program you write will use them. But many do. And they are <em>handy</em>. Sean told me that something, possibly called delegates following C#, is up for consideration for Java 1.7, or maybe 1.8, or maybe …</p>
<p>They should have been there from the beginning. That’s all there is to it, methinks.</p>
<p>“What the hell?!” I ask. Please tell me I have been deluded all this time and there’s a woefully obvious solution that I’ve just never stumbled upon.[/li]</p>
<p>[li]Verbosity <span class="hashtag">#2</span> – writing accessor methods. This is possibly “controversial,” but everyone acknowledges it can be a pain. Some people say accessors themselves are a code smell and that proper encapsulation eliminates the need for them (especially those who take “Tell, don’t ask” to its ultimate conclusion). Or, you could just forsake it and make your fields public, but that really is not a rational solution, as far as I’m concerned. And then you run into the code generator crowd again. Once more, say it with me: Ugggggh. I should not need some random IDE just to write three lines of code (a couple times). Nor should I need to copy and paste and s/// a crapload. Here, I think Ruby did a great job – there aren’t actually fields to access, just class private variables, which happen to correspond to methods. Simplicity and brevity:[/li][/ul]</p>
<pre><code class="lang-auto">class SomeClass
    attr_accessor :readwrite # defines 'readwrite' and 'readwrite=' methods
    attr_reader   :readonly  # defines 'readonly' method

    def initialize
        @readwrite = 'whatever' # the variable the 'readwrite' methods access
        @readonly  = 'again'
        @magic     = 'hrmph'
    end

    def magic=(str)
        @magic = str.reverse
    end
end

sc = SomeClass.new
sc.readwrite = 'blahblah' # say goodbye, sc.setReadWrite('blah')</code></pre>
<p>[ul][li]This seems pretty ideal, to me. The elimination of the plethora of get*() and set*() methods really tidies up code more than it at first seems like it might. And the ‘magic=’ method properly hides magic. You also get a very short, readable list of your public interface right at the top of a class. I like it.[/li]</p>
<p>[li]Verbosity <span class="hashtag">#3</span>, and this is really just the first two reiterated: a lot of my time in Java was spent writing scaffolding code, not implementing what I actually wanted to write. I suppose if you’ve got a grunt at work who you can pay peanuts to do this for you, it’s not a problem, but it gets to be a hassle for one man code machines. I’m sure others have felt this pain before.[/li]<br>
[li]The “just short of required” mapping of Filename.java to Filename the class. This seems like a real great idea at first, but then turns into a fairly arbitrary restriction. Maybe I’m just not seeing it – what’s the point? Protecting people who can’t organize code from themselves? Thanks Sun, but I want my compiler to compile, not dictate code layout. You still end up with Blah$0.class files anyhow, so it’s not as if there’s an issue with naming schemes. Anyone want to explain the rationale here?[/li]<br>
[li]Hashtable vs HashMap. I mention this a lot, but I’ve simply never gotten over it. For some reason I smell a committee. It should have been fixed a long, long time ago – the amount of code broken really wouldn’t have been too astounding. Really, it shouldn’t have happened in the first place, but it was bound to occur in something as large as Java. It’s tiny inconsistencies like this that start to stack up and be ludicrous.[/li]<br>
[li]J2EE, Beans, and their most immediate product: hype. It’s not the products themselves I have a problem with here; I understand how they can be helpful, as a codification of a single way to handle common problems. And moreover, I don’t do professional coding, I don’t write servlets or deal with transactional databases and so on, so they are more a mystery to me than most of the rest of Java. My opinion on the technical details would thus mean zilch. And I don’t doubt that Sun <span class="bbcode-i">had</span> to do it – they need something to market, and rapid deployment of complex applications isn’t just a gimmick. I have, however, seen many complaints about them. I just can’t evaluate them objectively, so I’ll leave that to someone else. My problem is the culture of buzzwords that sprouted up around them. It’s completely inevitable, and this is just as much something I hate about Ruby. But it annoyed me to no end to read the impenetrable stream of drivel which were many articles on the subject.[/li]<br>
[li]Similarly, as I said above: the rope with which to shoot yourself in the foot which is popularity. There are countless examples of the most god awful code I’ve ever seen (and don’t forget that I’ve been 'round these forums for a while), all of it masquerading as respectable works by notable people at reliable websites (OnJava, I’m thinking of you). But this is neither Sun’s nor Java’s fault.[/li]<br>
[li]And last but not least, Gosling. He wrote Emacs. 'nuff said. The vi cult shall prevail. =)[/li][/ul]</p>
<p>As with the first list, there’s surely something I’ve left out, and I’ll be at a loss as to how I could neglect to cast the shadow of my disdain upon the horrible malcodism (coinage?) someone else brings up.</p>
<p>Finally, if you can sympathize with such a harrowing harangue, my recommendations for how to go about washing off your keyboard and getting back to enjoying writing code:</p>
<p>[ul][li]Ruby. It’s a shining example of being able to get down to business in your code again. This is what OO can and should be. This is what dynamic languages can and should be. I love just about everything about Ruby. Don’t get me wrong; it’s got <span class="bbcode-b">tons</span> of downsides: the libraries, compared to Java, are complete crap, and half of them are only documented in Japanese; it’s slower than constipated men passing Volvos; Rails needs to be clubbed to death like a seal, and then eaten by polar bears; it’s got fanboys, exposure to whom will result in ceaseless ocular bleeding; and the hype is intolerable at times, especially when you see the illegible messes that some of the “top rubyists” are writing.</p>
<p>Bearing all of that in mind, I have no reservations in asserting that I’ve never had a simpler, more pleasant time in making my code “flow.” Matz took seriously his idea that the most important optimizations that a language should allow for are of <em>the coder’s time and effort</em>. This is something I’d never before imagined.</p>
<p>And its problems are rapidly being addressed, to the point that ruby2 is being looked at not as “what can we add”, but rather, “what do you not like about ruby, so that we can stop doing that?” Backwards compatibility is <em>not</em> a goal. Rather, the goal is to provide the most kick-ass language they can. The changes are all open to public comment, suggestion and review (all three main ruby implementations are completely open source, with public source control, and maintainers who you can speak to – as in, they will take the time to discuss their changes with you. I have seen this firsthand.)</p>
<p>Finally, setting aside some of the grouchy fanboys just itching to prove how much better they are than you, Ruby can boast of the nicest, most helpful community I’ve encountered in a decade of haunting such things. It’s tough to believe, but apparently there are actually polite, considerate people on the internets.[/li]</p>
<p>[li]Lisp. There’s a reason that you’ve a voice in the back of your head which tells you that all of the programming demigods say any serious programmer (which a hobbyist can certainly be) should take the time to learn Lisp. I had, for many years, looked at Lisp as some archaic, half-magic art that had no relevance today. In two months, it’s significantly altered the way I look at the code I am designing and writing. Significantly.</p>
<p>Code which is itself a valid data structure? Lisp had it ages ago.<br>
Meaning: Metaprogramming and dynamic language redefinition? Lisp had it ages ago.<br>
Functional programming? Lisp had it ages ago.<br>
If-Then-Else? Lisp fuckin invented it! What the hell?!<br>
Readable code? Okay, it takes some getting used to. =)</p>
<p>Even if it’s only to kill a boring evening, <span class="bbcode-b">look into Lisp</span>. The best introduction I could get ahold of was <a href="http://www.gigamonkeys.com/book/" data-bbcode="true" rel="nofollow noopener">this one</a>. It’s thoroughly enjoyable, and even teaches with useful code, rather than pointless exercises no one on earth will ever again look at.[/li]</p>
<p>[li]Haskell or another functional language. Learning some Lisp first will possibly ease some of the pain involved. The syntax for Haskell is, I think, even stranger than Lisp’s, for those of us who grew up on the Algalikes. But that’s not what proved difficult for me: it was wrapping my head around the paradigm. Anyone else tried FP on before? After only a brief foray, I have an eversoslight impression of its value, I just haven’t yet managed to grok it. I will come back to FP in the future, without a doubt.[/li][/ul]</p>
<p>I have intentionally left C off of this list, not because it doesn’t belong, but because it should be considered prerequisite knowledge for anyone who has been programming for more than a year or two. I believe it was semaphore who said, in some other thread possibly ages ago, something along the lines of, “if you can hack it in C, you can hack it in any language.” And while new paradigms can and <span class="bbcode-i">will</span> pose a challenge, that is largely true. Having begun with C is probably the only reason I have not yet given up in utter despair.</p>
<p>That is more than enough for now, no? I’ve broken the 250 line mark in vim. I have a sneaking suspicion that formatting this in SMF will require a secret handshake and the dismemberment of puppies. [Indeed, it’s not very pretty, and god knows what’ll it turn into once I hit post, but it’s the best I could muster. It was either that or just one giant code block and my own original manual formatting, which very well may have been a better choice…]</p>
<p>I am hoping this can be, for once, a topic that doesn’t generate into someone being called a fag. Please.</p>
<p>PS: Proofreading is for pansies. It was typed in one sitting with two cups of coffee. Forgive me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/why-i-dont-use-java/69684/1</link>
        <pubDate>Thu, 22 Mar 2007 04:12:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-69684-1</guid>
        <source url="https://forum.moparisthebest.com/t/why-i-dont-use-java/69684.rss">Why I Don&#39;t Use Java</source>
      </item>
  </channel>
</rss>
