<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Basic memory management [c(++)]</title>
    <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346</link>
    <description>When ever you call malloc(size_t size), calloc, and etc., always [b]free()[/b] that memory.
Example:
[code]
public:
    unsigned long hax() {
        int* lolptr = malloc(sizeof(int));
        unsigned long address = reinterpret_cast&lt;unsigned long&gt;(&amp;lolptr); //careful, can&#39;t be sure the long is large enough to hold address
        free(lolptr);
        return address;
   }
[/code]

When ever you use the &#39;new&#39; keyword with a variable, you must always [b]delete[/b] that variable.
There are two types of [b]delete[/b]s:
[b]Singlular delete (or at least thats what I call it)[/b]
[b]Array delete (again, or at least thats what I call it)[/b]
Example of singular delete:
[code]
    unsigned long hax() {
        int* lolptr = new int;
        unsigned long address = reinterpret_cast&lt;unsigned long&gt;(&amp;lolptr); //careful, can&#39;t be sure the long is large enough to hold address
        delete lolptr;
        return address;
    }
[/code]
Example of array delete:
[code]
    void hax() {
        int[] array = new int[4];
        delete[] array;
    }
[/code]</description>
    
    <lastBuildDate>Mon, 26 Nov 2007 04:30:37 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Ideally, you would indeed be able to recognize which part of the project will be the bottleneck, so that you don’t waste time “remaking” it. However, it is very hard to really know which parts these are without actually using a profiler, and over-optimization can actually affect performance negatively. But this only applies to low level optimization, and is mainly directed to the programmers who write pseudo-C++, so you are right that keeping a good design is always important. Even a small design error, such as a list that stores objects by value instead of pointers, can really destroy the performance.</p>
<p>Regarding malloc, though indeed, when used with care, it is not strictly wrong, it is said to be better to avoid it, because it puts a burden on the programmer and it is less safe. All bugs are avoidable, yet every program has bugs. Better to reduce the chance.</p>
<p>Specifically, one of the problems of malloc, apart from not calling constructors, and apart from not being type-safe, is that, unlike new and delete, it can’t be overloaded. Many programs overload new and delete to, for example, find memory leaks. In such a program, malloc’ed data would escape all controls.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/18</link>
        <pubDate>Mon, 26 Nov 2007 04:30:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-18</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>regardless, you can’t code every project without worrying about efficiency. what if efficiency is one of the goals of the project? sometimes you can’t just code the whole project and then go back and change it, because then you have to factor in the time it takes to develop it.</p>
<p>and who’s to say that efficiency is the inverse of clean code? there are countless other factors that are more important to a project than clean code, examples being design and the requirements.</p>
<p>by the way, we’re not talking about low-level optimizations… a choice to make use of placement new or to overload the new/delete operators is more a change in design. although i do agree with you on the low-level stuff… you just can’t beat compiler optimizations <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>also:</p>
<blockquote>Ideally though, malloc should be avoided in C++. Sure, you've raised a fair point but, from what I've read somewhere, it seems as if use of new is an expectation by most C++ programmers.</blockquote>
<p>the only real reason people recommend you don’t use malloc is because most people are too dumb to know how to use it correctly, and new is safer</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/17</link>
        <pubDate>Mon, 26 Nov 2007 04:14:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-17</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Statistics show that almost always a very small percent of the code takes the greatest percent of the processor time. That’s why optimizing the whole code is basically a waste of time, which can very easily lead to an actually worse performance and to countless bugs and difficulty to maintain the code.</p>
<p>(Note: By optimizing I mean low-level optimizing, such as replacing std::string for char *, choosing the best algorithms and design is of course always extremelly important)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/16</link>
        <pubDate>Sun, 25 Nov 2007 22:28:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-16</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>[quote=“zstars, post:13, topic:159346”]Generally, in C++, it tends to be a good idea to try to code as cleanly as possible, without worrying too much about efficiency.<br>
Once you have finished your program, you can always profile it, and if memory allocation is really a bottleneck (That’s, if the profiler proves it, not if you just have the feeling) you can then start sacrificing coding style for performance (by using the clib, or placement new, or custom new / delete operators)[/quote]</p>
<p>i don’t see how you can make that generalization for every C++ project</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/15</link>
        <pubDate>Sat, 24 Nov 2007 03:51:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-15</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <p>seand hat ever happened to you ‘capndurk’ account?<br>
and lothy, you barely know c++ hahaha</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/14</link>
        <pubDate>Fri, 23 Nov 2007 22:55:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-14</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Generally, in C++, it tends to be a good idea to try to code as cleanly as possible, without worrying too much about efficiency.<br>
Once you have finished your program, you can always profile it, and if memory allocation is really a bottleneck (That’s, if the profiler proves it, not if you just have the feeling) you can then start sacrificing coding style for performance (by using the clib, or placement new, or custom new / delete operators)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/13</link>
        <pubDate>Fri, 23 Nov 2007 18:09:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-13</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>[quote=“seand, post:11, topic:159346”][quote author=Moparisthebest link=topic=217005.msg1889303#msg1889303 date=1195643479]<br>
Yes, you use malloc() as little as you can in C, but never in C++.  Any C++ programmer that uses it is wrong, they probably don’t know any better.<br>
[/quote]</p>
<p>completely wrong. a small difference between malloc and new is that new calls the constructor of whatever object(s) you’re creating (delete calls destructor), and malloc/free do not. this can be important if you want to allocate space for a group of objects, but only construct/destruct them as needed. if you use new, you get a lot of unnecessary constructions/destructions of objects, making things pretty inefficient.[/quote]<br>
Haha, apparently “What’s the difference between malloc and new?” is a common question if you go for C++ jobs.</p>
<p>Ideally though, malloc should be avoided in C++. Sure, you’ve raised a fair point but, from what I’ve read somewhere, it seems as if use of new is an expectation by most C++ programmers.</p>
<p>Doesn’t really worry me at the end of the day though - Out of all OOP paradigm languages, C++ would be the last I’d choose to use.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/12</link>
        <pubDate>Fri, 23 Nov 2007 12:11:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-12</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="5" data-topic="159346">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>Yes, you use malloc() as little as you can in C, but never in C++.  Any C++ programmer that uses it is wrong, they probably don’t know any better.</p>
</blockquote>
</aside>
<p>completely wrong. a small difference between malloc and new is that new calls the constructor of whatever object(s) you’re creating (delete calls destructor), and malloc/free do not. this can be important if you want to allocate space for a group of objects, but only construct/destruct them as needed. if you use new, you get a lot of unnecessary constructions/destructions of objects, making things pretty inefficient.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/11</link>
        <pubDate>Fri, 23 Nov 2007 11:03:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-11</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <p>[quote=“Cheese_Police, post:9, topic:159346”][quote author=frank_ link=topic=217005.msg1891221#msg1891221 date=1195727343]<br>
c++ is for girls, real men use malloc<br>
[/quote]</p>
<p>Real men don’t use C++, either[/quote]<br>
haha exactly, real men don’t program at all!<br>
*waits for thousands of pms of ‘fhk u nub’</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/10</link>
        <pubDate>Thu, 22 Nov 2007 23:21:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-10</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@Cheese_Police c|p]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheese_police">@Cheese_Police</a> wrote:</p>
          <blockquote>
              <p>Real men don’t use C++, either</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/9</link>
        <pubDate>Thu, 22 Nov 2007 19:29:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-9</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>c++ is for girls, real men use malloc</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/8</link>
        <pubDate>Thu, 22 Nov 2007 10:29:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-8</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>You seemed to have left out delete[] tbh</p>
<p>You are suppose to delete arrays with delete[] not the usual delete</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/7</link>
        <pubDate>Thu, 22 Nov 2007 10:27:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-7</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="4" data-topic="159346">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/pk4pk/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> pk4pk:</div>
<blockquote>
<p>Lol malloc() in C++</p>
</blockquote>
</aside>
<p>gtfo you have no idea what any of this means, so stop spamming.</p>
<p>and lawl,</p>
<blockquote>Basic memory management [c(++)]</blockquote>
<blockquote>[b]Basic[/b]</blockquote>
<blockquote>[size=35pt]BASIC[/size]</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/6</link>
        <pubDate>Thu, 22 Nov 2007 00:47:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-6</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Yes, you use malloc() as little as you can in C, but never in C++.  Any C++ programmer that uses it is wrong, they probably don’t know any better.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/5</link>
        <pubDate>Wed, 21 Nov 2007 11:11:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-5</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@pk4pk pk4pk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pk4pk">@pk4pk</a> wrote:</p>
          <blockquote>
              <p>Lol malloc() in C++<br>
[center]<img src="http://www.moparisthebest.org/smf/Themes/default/images/warnpmod.gif" alt width="" height=""> You spammed to get to 400.</p>
<p>You can GTFO now.[/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/4</link>
        <pubDate>Wed, 21 Nov 2007 09:44:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-4</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="2" data-topic="159346">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>Sorry, but there is no reason to ever use malloc() in C++, and you should never find yourself using it.  Instead, use the ‘new’ keyword.</p>
</blockquote>
</aside>
<p>well, I use it in c and I believe there are countless c++ programmers who use it also.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/3</link>
        <pubDate>Wed, 21 Nov 2007 07:15:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-3</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Sorry, but there is no reason to ever use malloc() in C++, and you should never find yourself using it.  Instead, use the ‘new’ keyword.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/2</link>
        <pubDate>Wed, 21 Nov 2007 06:10:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-2</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
      <item>
        <title>Basic memory management [c(++)]</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <p>When ever you call malloc(size_t size), calloc, and etc., always <span class="bbcode-b">free()</span> that memory.<br>
Example:</p>
<pre><code class="lang-auto">public:
    unsigned long hax() {
        int* lolptr = malloc(sizeof(int));
        unsigned long address = reinterpret_cast&lt;unsigned long&gt;(&amp;lolptr); //careful, can't be sure the long is large enough to hold address
        free(lolptr);
        return address;
   }</code></pre>
<p>When ever you use the ‘new’ keyword with a variable, you must always <span class="bbcode-b">delete</span> that variable.<br>
There are two types of <span class="bbcode-b">delete</span>s:<br>
<span class="bbcode-b">Singlular delete (or at least thats what I call it)</span><br>
<span class="bbcode-b">Array delete (again, or at least thats what I call it)</span><br>
Example of singular delete:</p>
<pre><code class="lang-auto">    unsigned long hax() {
        int* lolptr = new int;
        unsigned long address = reinterpret_cast&lt;unsigned long&gt;(&amp;lolptr); //careful, can't be sure the long is large enough to hold address
        delete lolptr;
        return address;
    }</code></pre>
<p>Example of array delete:</p>
<pre><code class="lang-auto">    void hax() {
        int[] array = new int[4];
        delete[] array;
    }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-memory-management-c/159346/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-memory-management-c/159346/1</link>
        <pubDate>Wed, 21 Nov 2007 04:03:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-159346-1</guid>
        <source url="https://forum.moparisthebest.com/t/basic-memory-management-c/159346.rss">Basic memory management [c(++)]</source>
      </item>
  </channel>
</rss>
