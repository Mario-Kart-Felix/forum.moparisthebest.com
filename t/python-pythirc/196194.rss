<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Python]Pythirc</title>
    <link>https://forum.moparisthebest.com/t/python-pythirc/196194</link>
    <description>Pythirc.py:
[code]import socket
import re
import os
from time import sleep
import urllib
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

class IRCon(object):
    def __init__(self, server, port):
        sock.connect((server, port))
        
    def closeIRCon(self):
        sock.send(&#39;QUIT Pythirc lib\r\n&#39;)
        sock.shutdown(1)
        sock.close
    
    def read(self):
        return str(sock.recv(500))
    
    def parseText(self, String):
        ex = String.find(&#39;!&#39;)
        seper = String.find(&#39;!&#39;)
        sender = String[1:seper]
        ex = String.find(&#39; &#39;)
        host = String[String.find(&#39;@&#39;) + 1:ex]
        ex = ex + 1
        ex2 = String.find(&#39; &#39;, ex)
        mode = String[ex:ex2]
        ex = ex2 + 1
        ex2 = String.find(&#39; &#39;, ex)
        channel = String[ex:ex2]
        text = String[String.find(&#39;:&#39;, 1) + 1:].strip()

        return {&#39;text&#39;:text, &#39;channel&#39;:channel, &#39;sender&#39;:sender, &#39;host&#39;:host, &#39;mode&#39;:mode}
        
    def isController(self, theHost):
        f = open(&#39;controllers.txt&#39;, &#39;r&#39;)
        for line in f.readlines():
            if line.find(theHost) &gt; -1:
                f.close()
                return True
            else:
                continue
        f.close()
        return False
    
class IRCFun(object):
    def sendRaw(self, text):
        sock.send(text + &#39;\r\n&#39;)
           
    def identify(self, nick, passw, channel):
        self.sendRaw(&#39;PASS &#39; + passw)
        self.sendRaw(&#39;NICK &#39; + nick)
        self.sendRaw(&#39;USER &#39; + nick + &#39; 8 * :&#39; + nick)
        self.sendRaw(&#39;JOIN &#39; + channel)
        
    def joinChan(self, channel):
        self.sendRaw(&#39;JOIN &#39;+ channel)
        
    def partChan(self, channel):
        self.sendRaw(&#39;PART &#39;+ channel)
    
    def kickUser(self, channel, user):
        self.sendRaw(&#39;KICK &#39; + channel + &#39; &#39; + user)
        
    def chanSend(self, channel, text):
        self.sendRaw(&#39;PRIVMSG &#39;+ channel + &#39; :&#39; + text)
    
    def userSend(self, user, text):
        self.sendRaw(&#39;PRIVMSG &#39; + user + &#39; :&#39; + text)
        
    def noticeUser(self, user, text):
        self.sendRaw(&#39;NOTICE &#39; + user + &#39; :&#39; + text)
        
    def noticeChan(self, channel, text):
        self.sendRaw(&#39;NOTICE &#39; + channel + &#39; :&#39; + text)
        
    def changeMode(self, channel, mode):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; &#39; + mode)
        
    def giveOp(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; +o &#39; + user)
    
    def removeOp(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; -o &#39; + user)
    
    def giveHalfop(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; +h &#39; + user)
    
    def removeHalfop(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; -h &#39; + user)
    
    def giveVoice(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; +v &#39; + user)
        
    def removeVoice(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; -v &#39; + user)
    
    def giveAdmin(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; +a &#39; + user)
        
    def removeAdmin(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; -a &#39; + user)
    
    def giveFounder(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; +q &#39; + user)
        
    def removeFounder(self, channel, user):
        self.sendRaw(&#39;MODE &#39; + channel + &#39; -q &#39; + user)[/code]

TestBot.py:
[code]import Pythirc
import sys
import re
from time import sleep

print &quot;Pythirc - Welcome \n&quot;
connection = Pythirc.IRCon(&#39;Network&#39;, 6667)
IRCFunc = Pythirc.IRCFun()
IRCFunc.identify(&quot;Username&quot;, &quot;Password&quot;, &quot;#Channel&quot;)
chaName = &quot;#Channel again&quot;

while 1:
    read = connection.read()
    ugly = read
    removeugly = re.compile(&quot;:(.+?)!(.+?)@(.+?) (.+?) (.+?) :(.+)&quot;) 
    match = removeugly.search(ugly)
        
    if match:
        cleaned = &quot;[&quot; + match.group(1) + &quot;/&quot; + match.group(4) + &quot;/&quot; + match.group(5) + &quot;]: &quot; + match.group(6)
        print cleaned
        f = open(&quot;Log.txt&quot;, &quot;a&quot;)
        f.write(cleaned + &quot;\n&quot;)
        f.close()
    
    dic = None

    if read.startswith(&#39;PING&#39;):
        space = read.find(&#39; &#39;) + 1
        IRCFunc.sendRaw(&#39;PONG &#39; + read[space:])
        print &#39;Replied to a PONG - &#39; + read[space:]

    if read.startswith(&#39;:&#39;):
        dic = connection.parseText(read)

    if dic is not None:
        text = dic[&#39;text&#39;]
        sender = dic[&#39;sender&#39;]
        channel = dic[&#39;channel&#39;]
        host = dic[&#39;host&#39;]
        mode = dic[&#39;mode&#39;]
        
        if text.startswith(&quot;!say&quot;):
            toSay = text[text.find(&quot; &quot;) + 1:]
            IRCFunc.chanSend(channel, &quot;[&quot; + dic[&#39;sender&#39;] + &quot;]: &quot; + toSay)
            
        if text.startswith(&quot;!quit&quot;) and connection.isController(host):
            sys.exit(1)
        
        if text.startswith(&quot;!exec&quot;) and connection.isController(host):
            code = text[text.find(&quot; &quot;) + 1:]
            try:
                exec(str(code))
            except Exception, e:
                IRCFunc.chanSend(channel, &#39; Error: &#39; + str(e)) 
[/code]

It will be pretty buggy since this is sort of a &quot; Beta release &quot; but, oh well.</description>
    
    <lastBuildDate>Sat, 05 Apr 2008 16:47:39 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/python-pythirc/196194.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Python]Pythirc</title>
        <dc:creator><![CDATA[@eVokki1 Cowie`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evokki1">@eVokki1</a> wrote:</p>
          <blockquote>
              <p>Pythirc.py:</p>
<p>[code]import socket<br>
import re<br>
import os<br>
from time import sleep<br>
import urllib<br>
sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</p>
<p>class IRCon(object):<br>
def <strong>init</strong>(self, server, port):<br>
sock.connect((server, port))</p>
<pre><code>def closeIRCon(self):
    sock.send('QUIT Pythirc lib\r\n')
    sock.shutdown(1)
    sock.close

def read(self):
    return str(sock.recv(500))

def parseText(self, String):
    ex = String.find('!')
    seper = String.find('!')
    sender = String[1:seper]
    ex = String.find(' ')
    host = String[String.find('@') + 1:ex]
    ex = ex + 1
    ex2 = String.find(' ', ex)
    mode = String[ex:ex2]
    ex = ex2 + 1
    ex2 = String.find(' ', ex)
    channel = String[ex:ex2]
    text = String[String.find(':', 1) + 1:].strip()

    return {'text':text, 'channel':channel, 'sender':sender, 'host':host, 'mode':mode}
    
def isController(self, theHost):
    f = open('controllers.txt', 'r')
    for line in f.readlines():
        if line.find(theHost) &gt; -1:
            f.close()
            return True
        else:
            continue
    f.close()
    return False
</code></pre>
<p>class IRCFun(object):<br>
def sendRaw(self, text):<br>
sock.send(text + ‘\r\n’)</p>
<pre><code>def identify(self, nick, passw, channel):
    self.sendRaw('PASS ' + passw)
    self.sendRaw('NICK ' + nick)
    self.sendRaw('USER ' + nick + ' 8 * :' + nick)
    self.sendRaw('JOIN ' + channel)
    
def joinChan(self, channel):
    self.sendRaw('JOIN '+ channel)
    
def partChan(self, channel):
    self.sendRaw('PART '+ channel)

def kickUser(self, channel, user):
    self.sendRaw('KICK ' + channel + ' ' + user)
    
def chanSend(self, channel, text):
    self.sendRaw('PRIVMSG '+ channel + ' :' + text)

def userSend(self, user, text):
    self.sendRaw('PRIVMSG ' + user + ' :' + text)
    
def noticeUser(self, user, text):
    self.sendRaw('NOTICE ' + user + ' :' + text)
    
def noticeChan(self, channel, text):
    self.sendRaw('NOTICE ' + channel + ' :' + text)
    
def changeMode(self, channel, mode):
    self.sendRaw('MODE ' + channel + ' ' + mode)
    
def giveOp(self, channel, user):
    self.sendRaw('MODE ' + channel + ' +o ' + user)

def removeOp(self, channel, user):
    self.sendRaw('MODE ' + channel + ' -o ' + user)

def giveHalfop(self, channel, user):
    self.sendRaw('MODE ' + channel + ' +h ' + user)

def removeHalfop(self, channel, user):
    self.sendRaw('MODE ' + channel + ' -h ' + user)

def giveVoice(self, channel, user):
    self.sendRaw('MODE ' + channel + ' +v ' + user)
    
def removeVoice(self, channel, user):
    self.sendRaw('MODE ' + channel + ' -v ' + user)

def giveAdmin(self, channel, user):
    self.sendRaw('MODE ' + channel + ' +a ' + user)
    
def removeAdmin(self, channel, user):
    self.sendRaw('MODE ' + channel + ' -a ' + user)

def giveFounder(self, channel, user):
    self.sendRaw('MODE ' + channel + ' +q ' + user)
    
def removeFounder(self, channel, user):
    self.sendRaw('MODE ' + channel + ' -q ' + user)[/code]
</code></pre>
<p>TestBot.py:</p>
<p>[code]import Pythirc<br>
import sys<br>
import re<br>
from time import sleep</p>
<p>print “Pythirc - Welcome \n”<br>
connection = Pythirc.IRCon(‘Network’, 6667)<br>
IRCFunc = Pythirc.IRCFun()<br>
IRCFunc.identify(“Username”, “Password”, “<span class="hashtag">#Channel</span>”)<br>
chaName = “<span class="hashtag">#Channel</span> again”</p>
<p>while 1:<br>
read = connection.read()<br>
ugly = read<br>
removeugly = re.compile(":(.+?)!(.+?)@(.+?) (.+?) (.+?) :(.+)")<br>
match = removeugly.search(ugly)</p>
<pre><code>if match:
    cleaned = "[" + match.group(1) + "/" + match.group(4) + "/" + match.group(5) + "]: " + match.group(6)
    print cleaned
    f = open("Log.txt", "a")
    f.write(cleaned + "\n")
    f.close()

dic = None

if read.startswith('PING'):
    space = read.find(' ') + 1
    IRCFunc.sendRaw('PONG ' + read[space:])
    print 'Replied to a PONG - ' + read[space:]

if read.startswith(':'):
    dic = connection.parseText(read)

if dic is not None:
    text = dic['text']
    sender = dic['sender']
    channel = dic['channel']
    host = dic['host']
    mode = dic['mode']
    
    if text.startswith("!say"):
        toSay = text[text.find(" ") + 1:]
        IRCFunc.chanSend(channel, "[" + dic['sender'] + "]: " + toSay)
        
    if text.startswith("!quit") and connection.isController(host):
        sys.exit(1)
    
    if text.startswith("!exec") and connection.isController(host):
        code = text[text.find(" ") + 1:]
        try:
            exec(str(code))
        except Exception, e:
            IRCFunc.chanSend(channel, ' Error: ' + str(e)) 
</code></pre>
<p>[/code]</p>
<p>It will be pretty buggy since this is sort of a " Beta release " but, oh well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/python-pythirc/196194/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/python-pythirc/196194/1</link>
        <pubDate>Sat, 05 Apr 2008 16:47:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196194-1</guid>
        <source url="https://forum.moparisthebest.com/t/python-pythirc/196194.rss">[Python]Pythirc</source>
      </item>
  </channel>
</rss>
