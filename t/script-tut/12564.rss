<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Script Tut</title>
    <link>https://forum.moparisthebest.com/t/script-tut/12564</link>
    <description>[size=12pt][b]Ron: This script tutorial was created by Infantry001 his tutorial resides here. MasterXXScripter, please give credit when credit is due. You posted this and made it seem as if you wrote it.  :rolleyes:[/b][/size]
http://www.sythe.org/showthread.php?t=146232

=-----Basics-----=

Open up SCAR, and there should be some words ready to be turned into a script! It should look like this:


Code:
 program New;
begin
end.
Now, where it says new, put whatever you want your program to be named. For this tutorial, we are going to be making an Auto Talker, so put:


Code:
 program autotalker;
begin
end.
//This lets people know what your script is. Also, let me tell you about the “begin” and “end.” These are for your main loop. The main loop is what SCAR executes when the script is ready to go.\\

Let me tell you about includes. They are pieces of code that give you easy-to-access function and procedures (covered later). The only living one, though, is the SRL, and it is an amazing include indeed! So this is how you well, include and include!


Code:
 program New;

{.include SRL\SRL.scar}

begin

end.
//You put the comment (covered later) above to let SCAR know to include that particular file in the script. Don’t forget the period!\\

Time to talk about constants. Constants are usually put in a script to be used as a setup. They are things you declare at the beginning of the script that stay true throughout the whole script. For this auto talker, you can make the constant the message you want to auto-talk. So put this in…


Code:
 program New;

{.include SRL\SRL.scar}

const
SentenceToType=’Type Sentence Here’;

begin

end.
//Constant is abbreviated “const” in SCAR, so that is there to let scar know that that’s a constant. Because what we want to type is text, we put the apostrophes there to let SCAR know that it’s a text string. Also, don’t forget the semi-colon at the end of the constant!\\

Now the next step is not required for this particular script, because you can put all of your procedure into your main loop, but I am putting it in to teach you. How nice of me . We are going to make a Procedure! A procedure is part of a script that lets you call up on it later. So, this will be the procedure called “talk”. Put this into your script:


Code:
 program New;

{.include SRL\SRL.scar}

const
SentenceToType=’Type Sentence Here’;

procedure talk;
begin
end;

begin

end.
//This is always how you declare a procedure. The “begin” and “end;” here is like the main loop, except for the procedure.\\

Now, it is time to use Functions… Functions are commands that are in SCAR (or includes, in this case) that you can use for your own devilish purposes… :lol: Now, we can make a working procedure! If you look through the core of SRL, you will find hundreds of working functions and procedures. Most of them are very undetectable by Jagex. For today, we are going to be using the typing procedures. I find the procedure “TypeSend” to be very effective. This is the procedure in SRL:


Code:
 {*******************************************************************************
procedure TypeSend(Text: String);
By: Mutant Squirrle
Description: Types text humanlike using random timeing on keys.
*******************************************************************************}
procedure TypeSend(text:string);
var
  i: Integer;
begin
  for i := 1 to Length(Text) do
  begin
    TypeByte(GetKeyCode(Text[i]));
    Wait(50 + Random(120));
  end;
  wait(200 + Random(500));
  TypeByte(13);
end;
So as you can see, it types humanlike with random timing on keys. Now, to incorporate it into your script, put the procedure in like so:


Code:
 program New;

{.include SRL\SRL.scar}

const
SentenceToType=&#39;Type Sentence Here&#39;;

procedure talk;
begin
repeat
  TypeSend(SentenceToType+chr(13));
  Wait(750+random(250));
Until(false)
end;

begin

end.
//Notice the “repeat” and “until(false)” I put in there? That makes everything between repeat forever (because the condition for until is never met).

Notice instead of a text string next to TypeSend, I put in the name of the constant. This makes “TypeSend” type whatever the constant “SentenceToType” is. Also, don’t forget the semi-colon! It is important for ending all procedures and functions.

Notice the “+chr(13)” in the text string? That is used to press enter. Enter is designated as the character number 13 on the keyboard, so this is how you make the text send itself out. And, the wait time is, well, the wait time is how long you wait, of course!\\

So now your script can type stuff! But you still need to add the talkl procedure to your main loop. This is how you add it:


Code:
 program New;

{.include SRL\SRL.scar}

const
SentenceToType=&#39;Type Sentence Here&#39;;

procedure talk;
begin
repeat
  TypeSend(SentenceToType+chr(13));
  Wait(750+random(250));
Until(false)
end;

begin
  ActivateClient;
  talk;
end.
//ActivateClient is a procedure that is there so that people don’t have to switch to the runescape screen right after you start the script.\\

Congratulations! You have made a working script! But…hehehe I’m not done with you yet!

=-----Extras-----=

You can make a fully functioning script, but there’s more to it than that, isn’t there! In this section, I will teach you about comments and progress reports.

Comments

Comments are little tidbits of information the author of the script puts in to help users understand what parts mean what. They are also overlooked by SCAR so they aren’t incorporated into the script. There are two ways to do this:

~One

Code:
{Everything inside the curvy parenthesis is green in SCAR and is treated as a comment.}
~Two

Code:
//Everything on the same line as and after the double slash is a comment.

This is not a comment.
So lets put some comments in our script:


Code:
 {Welcome to my tutorial script! Hope you learned something from me!}

program New;

{.include SRL\SRL.scar}

//*****SETUP*****\\
const
SentenceToType=&#39;Type Sentence Here&#39;;
//***END SETUP***\\ 

procedure talk;
begin
repeat
  TypeSend(SentenceToType+chr(13));
  Wait(750+random(250));
Until(false)
end;

begin
  ActivateClient;
  talk;
end.
//As you can see, I added the sentence at the top as a comment, as well as the little setup comment above and below the constants.\\

Progress Reports

I am sure that if you have used other people’s scripts, you have seen the little box at the end that tells you how many monsters you have fought, randoms encountered, stuff like that. I can show you the path to take in order to make those… yippe for me! Er…and you…

First off, you must have global variables declared at the top of your script. 

~DETOUR~Variables are things that can vary, hence the name variables. To declare a variable, put them at the top. There are 3 types of variables: Integers, Strings, and Booleans. 

~Integers

Code:
var
wordstyped:integer;
//Integers are numbers…duh. That’s pretty much all you need to know. They can range from any negative to and positive, but must be a whole number.\\

~Strings

Code:
var
wordstyped:string;
//Strings are text. They’re placed within two apostrophes. That’s it!\\

~Booleans

Code:
var
wordstyped:Boolean;
//Booleans are one of two options; true or false.\\

For this example, we will put “wordstyped” as a variable. Now, to make wordstyped actually be words that have been typed, we must do this:


Code:
procedure talk;
begin
repeat
  TypeSend(SentenceToType+chr(13));
  wordstyped :=wordstyped + 1;
  Wait(750+random(250));
Until(false)
end;
//This will make the variable “wordstyped” go up by one every time you type text and press enter.\\

Now, make a procedure called “progress report”. For your progress report, you have to write into the debug box of SCAR. Let me show you how my progress reports look:


Code:
 Procedure ProgressReport;
begin
  ClearDebug;
  Writeln(&#39;[]---////////////////////\\\\\\\\\\\\\\\\\\\\---[]&#39;);
  Writeln(&#39;         Thanks for using Infantry001s&#39;&#39;s   &#39;);
  Writeln(&#39;               Tutorial Auto-Talker             &#39;);
  Writeln(&#39;       Worked for:&#39; +ScriptTime2(2));
  Writeln(&#39;               Sentences typed:&#39; +IntToStr(wordstyped));
  Writeln(&#39;[]---////////////////////\\\\\\\\\\\\\\\\\\\\---[]&#39;);
end;
//Writeln is a procedure that writes a text string into the debug box (the bottom box of SCAR). You can put it in any style you want.

ClearDebug is a command that, well, clears the debug box under SCAR!

ScriptTime2(2)) is a function I used (that is in SRL) to say how long I have worked for. You can find it in SRL\SRL\core\timing.scar.

IntToStr(wordstyped) is a function that returns the integer specified (in this case, the integer is wordstyped) into a text string. So here, it would result in “Sentences typed: #”.\\

Time to make the progress report come out after specified increments! Add this stuff into your script…


Code:
const
progress=integer here    //How often in minutes you want your progress report to print out.

Begin  //Main loop
  SetTimeOut(progress * 60,&#39;ProgressReport&#39;);
  ActivateClient;
  talk;
end.
//Add the progress constant to allow users to choose how often a progress report prints out. Also, SetTimeOut is a function that allows you to set how often you use a procedure (procedure in this case, ProgressReport). Remember to make the procedure name a string!\\

=-----Ending-----=

So I hope you have learned something from this tutorial! You better have, or I spent my whole afternoon for nuthin… This is what your end product should look like:


Code:
 {Welcome to my tutorial script! Hope you learned something from me!}

program autotalker;

{.include SRL\SRL.scar}

var
wordstyped:integer;

//*****SETUP*****\\
const
SentenceToType=&#39;Type Sentence Here&#39;;
progress=1                             //How often in minutes you want your progress report to print
//***END SETUP***\\

procedure talk;
begin
repeat
  TypeSend(SentenceToType+chr(13));
  wordstyped :=wordstyped + 1;
  Wait(750+random(250));
Until(false)
end;

Procedure ProgressReport;
begin
  ClearDebug;
  Writeln(&#39;[]---////////////////////\\\\\\\\\\\\\\\\\\\\---[]&#39;);
  Writeln(&#39;         Thanks for using Infantry001s&#39;&#39;s   &#39;);
  Writeln(&#39;               Tutorial Auto-Talker             &#39;);
  Writeln(&#39;       Worked for:&#39; +ScriptTime2(2));
  Writeln(&#39;               Sentences typed:&#39; +IntToStr(wordstyped));
  Writeln(&#39;[]---////////////////////\\\\\\\\\\\\\\\\\\\\---[]&#39;);
end;

begin
  SetTimeOut(progress * 60,&#39;ProgressReport&#39;);
  ActivateClient;
  talk;
end.
…Or something to that degree :P. Thank you for reading, and I hope I have cast you on your way to SCAR scripting!</description>
    
    <lastBuildDate>Tue, 05 Sep 2006 11:48:22 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/script-tut/12564.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Script Tut</title>
        <dc:creator><![CDATA[@Nashi Nashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nashi">@Nashi</a> wrote:</p>
          <blockquote>
              <p>You can tell because of: [scar]  Writeln(’         Thanks for using Infantry001s’'s   ‘);<br>
Writeln(’               Tutorial Auto-Talker             ');<br>
[/scar]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/script-tut/12564/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/script-tut/12564/4</link>
        <pubDate>Tue, 05 Sep 2006 11:48:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-12564-4</guid>
        <source url="https://forum.moparisthebest.com/t/script-tut/12564.rss">Script Tut</source>
      </item>
      <item>
        <title>Script Tut</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>This script was a copy/paste. You can tell by seeing “Code:” which is from the code tags on a different forum. The real person who created this tutorial was Infantry001.</p>
<p>Source:<br>
<a href="http://www.sythe.org/showthread.php?t=146232" class="onebox" target="_blank" rel="nofollow noopener">http://www.sythe.org/showthread.php?t=146232</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/script-tut/12564/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/script-tut/12564/3</link>
        <pubDate>Tue, 05 Sep 2006 06:33:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-12564-3</guid>
        <source url="https://forum.moparisthebest.com/t/script-tut/12564.rss">Script Tut</source>
      </item>
      <item>
        <title>Script Tut</title>
        <dc:creator><![CDATA[@Mad_Cow Mad Cow]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mad_cow">@Mad_Cow</a> wrote:</p>
          <blockquote>
              <p>Try using code tags…</p>
<p>eg.<br>
begin<br>
//Do Stuff<br>
end.</p>
<p><code>begin
  //Do Stuff
end.</code></p>
<p>[scar]begin<br>
//Do Stuff<br>
end.[/scar]</p>
<p>I didn’t read through it but it looks alright,<br>
Mad Cow</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/script-tut/12564/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/script-tut/12564/2</link>
        <pubDate>Mon, 04 Sep 2006 16:12:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-12564-2</guid>
        <source url="https://forum.moparisthebest.com/t/script-tut/12564.rss">Script Tut</source>
      </item>
      <item>
        <title>Script Tut</title>
        <dc:creator><![CDATA[@MasterXXScripter MasterXXScripter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/masterxxscripter">@MasterXXScripter</a> wrote:</p>
          <blockquote>
              <p>[size=12pt]<span class="bbcode-b">Ron: This script tutorial was created by Infantry001 his tutorial resides here. MasterXXScripter, please give credit when credit is due. You posted this and made it seem as if you wrote it.  :rolleyes:</span>[/size]<br>
<a href="http://www.sythe.org/showthread.php?t=146232" class="onebox" target="_blank" rel="nofollow noopener">http://www.sythe.org/showthread.php?t=146232</a></p>
<p>=-----Basics-----=</p>
<p>Open up SCAR, and there should be some words ready to be turned into a script! It should look like this:</p>
<p>Code:<br>
program New;<br>
begin<br>
end.<br>
Now, where it says new, put whatever you want your program to be named. For this tutorial, we are going to be making an Auto Talker, so put:</p>
<p>Code:<br>
program autotalker;<br>
begin<br>
end.<br>
//This lets people know what your script is. Also, let me tell you about the “begin” and “end.” These are for your main loop. The main loop is what SCAR executes when the script is ready to go.\</p>
<p>Let me tell you about includes. They are pieces of code that give you easy-to-access function and procedures (covered later). The only living one, though, is the SRL, and it is an amazing include indeed! So this is how you well, include and include!</p>
<p>Code:<br>
program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>begin</p>
<p>end.<br>
//You put the comment (covered later) above to let SCAR know to include that particular file in the script. Don’t forget the period!\</p>
<p>Time to talk about constants. Constants are usually put in a script to be used as a setup. They are things you declare at the beginning of the script that stay true throughout the whole script. For this auto talker, you can make the constant the message you want to auto-talk. So put this in…</p>
<p>Code:<br>
program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>const<br>
SentenceToType=’Type Sentence Here’;</p>
<p>begin</p>
<p>end.<br>
//Constant is abbreviated “const” in SCAR, so that is there to let scar know that that’s a constant. Because what we want to type is text, we put the apostrophes there to let SCAR know that it’s a text string. Also, don’t forget the semi-colon at the end of the constant!\</p>
<p>Now the next step is not required for this particular script, because you can put all of your procedure into your main loop, but I am putting it in to teach you. How nice of me . We are going to make a Procedure! A procedure is part of a script that lets you call up on it later. So, this will be the procedure called “talk”. Put this into your script:</p>
<p>Code:<br>
program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>const<br>
SentenceToType=’Type Sentence Here’;</p>
<p>procedure talk;<br>
begin<br>
end;</p>
<p>begin</p>
<p>end.<br>
//This is always how you declare a procedure. The “begin” and “end;” here is like the main loop, except for the procedure.\</p>
<p>Now, it is time to use Functions… Functions are commands that are in SCAR (or includes, in this case) that you can use for your own devilish purposes… :lol: Now, we can make a working procedure! If you look through the core of SRL, you will find hundreds of working functions and procedures. Most of them are very undetectable by Jagex. For today, we are going to be using the typing procedures. I find the procedure “TypeSend” to be very effective. This is the procedure in SRL:</p>
<p>Code:<br>
{*******************************************************************************<br>
procedure TypeSend(Text: String);<br>
By: Mutant Squirrle<br>
Description: Types text humanlike using random timeing on keys.<br>
*******************************************************************************}<br>
procedure TypeSend(text:string);<br>
var<br>
i: Integer;<br>
begin<br>
for i := 1 to Length(Text) do<br>
begin<br>
TypeByte(GetKeyCode(Text[i]));<br>
Wait(50 + Random(120));<br>
end;<br>
wait(200 + Random(500));<br>
TypeByte(13);<br>
end;<br>
So as you can see, it types humanlike with random timing on keys. Now, to incorporate it into your script, put the procedure in like so:</p>
<p>Code:<br>
program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>const<br>
SentenceToType=‘Type Sentence Here’;</p>
<p>procedure talk;<br>
begin<br>
repeat<br>
TypeSend(SentenceToType+chr(13));<br>
Wait(750+random(250));<br>
Until(false)<br>
end;</p>
<p>begin</p>
<p>end.<br>
//Notice the “repeat” and “until(false)” I put in there? That makes everything between repeat forever (because the condition for until is never met).</p>
<p>Notice instead of a text string next to TypeSend, I put in the name of the constant. This makes “TypeSend” type whatever the constant “SentenceToType” is. Also, don’t forget the semi-colon! It is important for ending all procedures and functions.</p>
<p>Notice the “+chr(13)” in the text string? That is used to press enter. Enter is designated as the character number 13 on the keyboard, so this is how you make the text send itself out. And, the wait time is, well, the wait time is how long you wait, of course!\</p>
<p>So now your script can type stuff! But you still need to add the talkl procedure to your main loop. This is how you add it:</p>
<p>Code:<br>
program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>const<br>
SentenceToType=‘Type Sentence Here’;</p>
<p>procedure talk;<br>
begin<br>
repeat<br>
TypeSend(SentenceToType+chr(13));<br>
Wait(750+random(250));<br>
Until(false)<br>
end;</p>
<p>begin<br>
ActivateClient;<br>
talk;<br>
end.<br>
//ActivateClient is a procedure that is there so that people don’t have to switch to the runescape screen right after you start the script.\</p>
<p>Congratulations! You have made a working script! But…hehehe I’m not done with you yet!</p>
<p>=-----Extras-----=</p>
<p>You can make a fully functioning script, but there’s more to it than that, isn’t there! In this section, I will teach you about comments and progress reports.</p>
<p>Comments</p>
<p>Comments are little tidbits of information the author of the script puts in to help users understand what parts mean what. They are also overlooked by SCAR so they aren’t incorporated into the script. There are two ways to do this:</p>
<p>~One</p>
<p>Code:<br>
{Everything inside the curvy parenthesis is green in SCAR and is treated as a comment.}<br>
~Two</p>
<p>Code:<br>
//Everything on the same line as and after the double slash is a comment.</p>
<p>This is not a comment.<br>
So lets put some comments in our script:</p>
<p>Code:<br>
{Welcome to my tutorial script! Hope you learned something from me!}</p>
<p>program New;</p>
<p>{.include SRL\SRL.scar}</p>
<p>//<em><strong><strong>SETUP</strong></strong></em>\<br>
const<br>
SentenceToType=‘Type Sentence Here’;<br>
//<em><strong>END SETUP</strong></em>\</p>
<p>procedure talk;<br>
begin<br>
repeat<br>
TypeSend(SentenceToType+chr(13));<br>
Wait(750+random(250));<br>
Until(false)<br>
end;</p>
<p>begin<br>
ActivateClient;<br>
talk;<br>
end.<br>
//As you can see, I added the sentence at the top as a comment, as well as the little setup comment above and below the constants.\</p>
<p>Progress Reports</p>
<p>I am sure that if you have used other people’s scripts, you have seen the little box at the end that tells you how many monsters you have fought, randoms encountered, stuff like that. I can show you the path to take in order to make those… yippe for me! Er…and you…</p>
<p>First off, you must have global variables declared at the top of your script.</p>
<p>~DETOUR~Variables are things that can vary, hence the name variables. To declare a variable, put them at the top. There are 3 types of variables: Integers, Strings, and Booleans.</p>
<p>~Integers</p>
<p>Code:<br>
var<br>
wordstyped:integer;<br>
//Integers are numbers…duh. That’s pretty much all you need to know. They can range from any negative to and positive, but must be a whole number.\</p>
<p>~Strings</p>
<p>Code:<br>
var<br>
wordstyped:string;<br>
//Strings are text. They’re placed within two apostrophes. That’s it!\</p>
<p>~Booleans</p>
<p>Code:<br>
var<br>
wordstyped:Boolean;<br>
//Booleans are one of two options; true or false.\</p>
<p>For this example, we will put “wordstyped” as a variable. Now, to make wordstyped actually be words that have been typed, we must do this:</p>
<p>Code:<br>
procedure talk;<br>
begin<br>
repeat<br>
TypeSend(SentenceToType+chr(13));<br>
wordstyped :=wordstyped + 1;<br>
Wait(750+random(250));<br>
Until(false)<br>
end;<br>
//This will make the variable “wordstyped” go up by one every time you type text and press enter.\</p>
<p>Now, make a procedure called “progress report”. For your progress report, you have to write into the debug box of SCAR. Let me show you how my progress reports look:</p>
<p>Code:<br>
Procedure ProgressReport;<br>
begin<br>
ClearDebug;<br>
Writeln(’[]—////////////////////\\\\\\\\\\—[]’);<br>
Writeln(’         Thanks for using Infantry001s’‘s   ‘);<br>
Writeln(’               Tutorial Auto-Talker             ‘);<br>
Writeln(’       Worked for:’ +ScriptTime2(2));<br>
Writeln(’               Sentences typed:’ +IntToStr(wordstyped));<br>
Writeln(’[]—////////////////////\\\\\\\\\\—[]’);<br>
end;<br>
//Writeln is a procedure that writes a text string into the debug box (the bottom box of SCAR). You can put it in any style you want.</p>
<p>ClearDebug is a command that, well, clears the debug box under SCAR!</p>
<p>ScriptTime2(2)) is a function I used (that is in SRL) to say how long I have worked for. You can find it in SRL\SRL\core\timing.scar.</p>
<p>IntToStr(wordstyped) is a function that returns the integer specified (in this case, the integer is wordstyped) into a text string. So here, it would result in “Sentences typed: #”.\</p>
<p>Time to make the progress report come out after specified increments! Add this stuff into your script…</p>
<p>Code:<br>
const<br>
progress=integer here    //How often in minutes you want your progress report to print out.</p>
<p>Begin  //Main loop<br>
SetTimeOut(progress * 60,‘ProgressReport’);<br>
ActivateClient;<br>
talk;<br>
end.<br>
//Add the progress constant to allow users to choose how often a progress report prints out. Also, SetTimeOut is a function that allows you to set how often you use a procedure (procedure in this case, ProgressReport). Remember to make the procedure name a string!\</p>
<p>=-----Ending-----=</p>
<p>So I hope you have learned something from this tutorial! You better have, or I spent my whole afternoon for nuthin… This is what your end product should look like:</p>
<p>Code:<br>
{Welcome to my tutorial script! Hope you learned something from me!}</p>
<p>program autotalker;</p>
<p>{.include SRL\SRL.scar}</p>
<p>var<br>
wordstyped:integer;</p>
<p>//<em><strong><strong>SETUP</strong></strong></em>\<br>
const<br>
SentenceToType=‘Type Sentence Here’;<br>
progress=1                             //How often in minutes you want your progress report to print<br>
//<em><strong>END SETUP</strong></em>\</p>
<p>procedure talk;<br>
begin<br>
repeat<br>
TypeSend(SentenceToType+chr(13));<br>
wordstyped :=wordstyped + 1;<br>
Wait(750+random(250));<br>
Until(false)<br>
end;</p>
<p>Procedure ProgressReport;<br>
begin<br>
ClearDebug;<br>
Writeln(’[]—////////////////////\\\\\\\\\\—[]’);<br>
Writeln(’         Thanks for using Infantry001s’‘s   ‘);<br>
Writeln(’               Tutorial Auto-Talker             ‘);<br>
Writeln(’       Worked for:’ +ScriptTime2(2));<br>
Writeln(’               Sentences typed:’ +IntToStr(wordstyped));<br>
Writeln(’[]—////////////////////\\\\\\\\\\—[]’);<br>
end;</p>
<p>begin<br>
SetTimeOut(progress * 60,‘ProgressReport’);<br>
ActivateClient;<br>
talk;<br>
end.<br>
…Or something to that degree :P. Thank you for reading, and I hope I have cast you on your way to SCAR scripting!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/script-tut/12564/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/script-tut/12564/1</link>
        <pubDate>Sun, 03 Sep 2006 13:26:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-12564-1</guid>
        <source url="https://forum.moparisthebest.com/t/script-tut/12564.rss">Script Tut</source>
      </item>
  </channel>
</rss>
