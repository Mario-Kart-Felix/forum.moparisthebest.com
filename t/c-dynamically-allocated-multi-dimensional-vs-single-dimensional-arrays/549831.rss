<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
    <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831</link>
    <description>I&#39;ve been working on a project that requires heavy usage of 3D arrays and were creating them on-the-fly. After profiling the code, I found almost all of the slowdowns were caused when allocating the third dimension of the array, and after switching to single-dimensional arrays the performance massively increased and the allocations were no longer an issue.

Does anyone know specifically why this is? Since the issue was [i]creating[/i] the arrays and not accessing them, the problem isn&#39;t related to cache misses. Here&#39;s the code used in both contexts:

[code=CPP]	template &lt;typename T&gt;
	inline T*** Create3DArray(int x, int y, int z)
	{
		T*** a = new T**[x];
		for (int i = 0; i &lt; x; i++)
		{
			a[i] = new T*[y];
			for (int k = 0; k &lt; y; k++)
			{
				a[i][k] = new T[z];
				for (int j = 0; j &lt; z; j++)
					a[i][k][j] = 0;
			}
		}
		return a;
	}[/code]

[code=CPP]terrain_data = new MeshPoint[CHUNK_SIZE * CHUNK_SIZE * CHUNK_SIZE];[/code]

Are allocations themselves just generally really slow? I can&#39;t think of a list of reasons as to why the performance increases would be so big. We&#39;re talking over 50% of the profiling samples coming from allocations and the program stalling to a small percentage and smooth sailing.

Thanks,

~Lin</description>
    
    <lastBuildDate>Fri, 01 May 2015 03:12:56 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">char ***threedee = malloc(x * y * z);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/9</link>
        <pubDate>Fri, 01 May 2015 03:12:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-9</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@justaguy justaguy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/justaguy">@justaguy</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lin, post:7, topic:549831”][quote author=justaguy link=topic=668716.msg4472306#msg4472306 date=1423805546]<br>
After benchmarking your code it seems zeroing out your memory manually slows your code down about 5 times (averaged about 50-60ms) compared to just allocating memory (which is a relatively expensive operation).<br>
[/quote]Oh wow, that’s very interesting. So even though most of the samples were on the allocation line, manually setting the pointers to 0 had a major impact? That’s not something I would’ve expected. Anyways I guess the conclusion to draw is allocating any sort of memory is very expensive, as Fat Cookies and imthenull pointed out, as it’s not related to the size but the amount of times you allocate it. Still, I find it odd the improvements would be as major as they were, but that’s memory for you I guess. Thanks all for the help and insights <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[quote author=justaguy link=topic=668716.msg4472306#msg4472306 date=1423805546]<br>
Otherwise, what Fat Cookies said makes sense since a lot of jumping around is going to be done in memory with several blocks in different places as opposed to one giant block as a single dimensional array. As a consequence of that, I’d be willing to bet you’re still missing out on cache. Since a single dimension is one contiguous block and since cache these days are somewhat large (relatively speaking of course) in size, I would imagine a large chunk of that contiguous block can be cached. But if blocks are spread apart throughout memory, this isn’t cache-friendly.<br>
[/quote]Yeah, I was thinking about all of the cache misses using a 3D array, but I had (probably falsely) assumed that since the arrays were created sequentially, they would also mostly be laid out sequentially. Clearly that wasn’t the case.[/quote]</p>
<p>No problem. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> You’ll probably squeeze out as much speed as possible using memset() when it comes to zeroing your memory.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/8</link>
        <pubDate>Sat, 14 Feb 2015 04:30:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-8</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>[quote=“justaguy, post:6, topic:549831”]After benchmarking your code it seems zeroing out your memory manually slows your code down about 5 times (averaged about 50-60ms) compared to just allocating memory (which is a relatively expensive operation).[/quote]Oh wow, that’s very interesting. So even though most of the samples were on the allocation line, manually setting the pointers to 0 had a major impact? That’s not something I would’ve expected. Anyways I guess the conclusion to draw is allocating any sort of memory is very expensive, as Fat Cookies and imthenull pointed out, as it’s not related to the size but the amount of times you allocate it. Still, I find it odd the improvements would be as major as they were, but that’s memory for you I guess. Thanks all for the help and insights <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[quote=“justaguy, post:6, topic:549831”]Otherwise, what Fat Cookies said makes sense since a lot of jumping around is going to be done in memory with several blocks in different places as opposed to one giant block as a single dimensional array. As a consequence of that, I’d be willing to bet you’re still missing out on cache. Since a single dimension is one contiguous block and since cache these days are somewhat large (relatively speaking of course) in size, I would imagine a large chunk of that contiguous block can be cached. But if blocks are spread apart throughout memory, this isn’t cache-friendly.[/quote]Yeah, I was thinking about all of the cache misses using a 3D array, but I had (probably falsely) assumed that since the arrays were created sequentially, they would also mostly be laid out sequentially. Clearly that wasn’t the case.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/7</link>
        <pubDate>Sat, 14 Feb 2015 03:55:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@justaguy justaguy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/justaguy">@justaguy</a> wrote:</p>
          <blockquote>
              <p>After benchmarking your code it seems zeroing out your memory manually slows your code down about 5 times (averaged about 50-60ms) compared to just allocating memory (which is a relatively expensive operation). Just out of curiosity, I decided to initialize the array each time using the following code:</p>
<pre><code class="lang-auto"></code></pre>
<p>and removed the last for-loop altogether. Now I was getting an average of about 15-20ms.</p>
<p>[quote=“imthenull, post:5, topic:549831”]Edit: after some quick googling, it appears you can allocate a chunk of memory without initializing it using a similar method to malloc. This could potentially resolve your issue to some extent.</p>
<pre><code class="lang-auto"></code></pre>
<p>In C++ (atleast in C++03) allocations using ‘new’ are uninitialized also. However, I’m sure he wants his memory zero’d/initialized since he is doing so explicitly in the code.</p>
<p>Otherwise, what Fat Cookies said makes sense since a lot of jumping around is going to be done in memory with several blocks in different places as opposed to one giant block as a single dimensional array. As a consequence of that, I’d be willing to bet you’re still missing out on cache. Since a single dimension is one contiguous block and since cache these days are somewhat large (relatively speaking of course) in size, I would imagine a large chunk of that contiguous block can be cached. But if blocks are spread apart throughout memory, this isn’t cache-friendly.</p>
<p>My code:<br>
[spoiler][code=c++]<br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> </p>
<p><span class="hashtag">#define</span> NUM_TIMES 1000<br>
<span class="hashtag">#define</span> BLOCK_SIZE  256</p>
<p>template inline T*** Create3DArray(int x, int y, int z) {<br>
T*** a = new T**[x];<br>
for (int i = 0; i &lt; x; i++) {<br>
a[i] = new T*[y];<br>
for (int k = 0; k &lt; y; k++) {<br>
a[i][k] = new T<a>z</a>;<br>
}<br>
}</p>
<p>return a;<br>
}</p>
<p>template void Free3DArray(T*** a) {<br>
for (int i = 0; i &lt; BLOCK_SIZE; i++) {<br>
for (int k = 0; k &lt; BLOCK_SIZE; k++) {<br>
delete[] a[i][k];<br>
}</p>
<pre><code>delete[] a[i];
</code></pre>
<p>}</p>
<p>delete[] a;<br>
}</p>
<p>int main() {<br>
srand(time(NULL));<br>
clock_t t;<br>
double timeSpent = 0, avgTime = 0;<br>
int count = 0;<br>
while (count &lt; NUM_TIMES) {<br>
int ***arr;<br>
t = clock();<br>
arr = Create3DArray(BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);<br>
t = clock() - t;</p>
<pre><code>Free3DArray(arr);

timeSpent = (((double) t) / CLOCKS_PER_SEC) * 1000;
avgTime += timeSpent;
count++;
</code></pre>
<p>}</p>
<p>std::cout &lt;&lt; "The average time spent on " &lt;&lt; NUM_TIMES &lt;&lt; " allocations is “<br>
&lt;&lt; (avgTime / NUM_TIMES) &lt;&lt; " milliseconds.” &lt;&lt; std::endl;<br>
return EXIT_SUCCESS;<br>
}<br>
[/code][/spoiler]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/6</link>
        <pubDate>Fri, 13 Feb 2015 05:32:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>[quote=“Fat Cookies, post:4, topic:549831”]To hazard a guess:<br>
A 3d array requires x*y + x arrays to be created. I presume malloc is used to dynamically get the memory for EACH array. malloc is a pretty expensive function call. To make matters worse if all those allocations do not fit in contiguous memory when the array is freed you’ll have some nasty memory fragmentation. I would have assumed the compiler would try and optimise this though.</p>
<p>That probably makes no sense because I’m pretty tired.[/quote]</p>
<aside class="quote" data-post="1" data-topic="549831">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/lin/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Lin:</div>
<blockquote>
<p>and after switching to single-dimensional arrays the performance massively increased and the allocations were no longer an issue.</p>
</blockquote>
</aside>
<p>As Fat Cookies said, allocating memory is expensive. The mass amounts of allocation calls is probably the culprit behind this issue.</p>
<p>Edit: after some quick googling, it appears you can allocate a chunk of memory without initializing it using a similar method to malloc. This could potentially resolve your issue to some extent.</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/5</link>
        <pubDate>Thu, 12 Feb 2015 23:39:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>To hazard a guess:<br>
A 3d array requires x*y + x arrays to be created. I presume malloc is used to dynamically get the memory for EACH array. malloc is a pretty expensive function call. To make matters worse if all those allocations do not fit in contiguous memory when the array is freed you’ll have some nasty memory fragmentation. I would have assumed the compiler would try and optimise this though.</p>
<p>That probably makes no sense because I’m pretty tired.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/4</link>
        <pubDate>Thu, 12 Feb 2015 23:15:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>How big is the chunk size? 1 allocation versus chunk_size[sup]3[/sup] makes a huge difference</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/3</link>
        <pubDate>Wed, 11 Feb 2015 17:45:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@marcbob marcbob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/marcbob">@marcbob</a> wrote:</p>
          <blockquote>
              <p>EDIT: nvm what I originally said wouldn’t be the problem</p>
<p>I haven’t worked with multi dimensional arrays in c++, but perhaps when you make a 2D the 1D is still there and you need to delete it to save memory. Then when 3D delete the 2D. No idea though, what I originally thought was your problem it wouldn’t be.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/2</link>
        <pubDate>Wed, 11 Feb 2015 16:32:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
      <item>
        <title>[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>I’ve been working on a project that requires heavy usage of 3D arrays and were creating them on-the-fly. After profiling the code, I found almost all of the slowdowns were caused when allocating the third dimension of the array, and after switching to single-dimensional arrays the performance massively increased and the allocations were no longer an issue.</p>
<p>Does anyone know specifically why this is? Since the issue was <span class="bbcode-i">creating</span> the arrays and not accessing them, the problem isn’t related to cache misses. Here’s the code used in both contexts:</p>
<p><code>	template &lt;typename T&gt;
	inline T*** Create3DArray(int x, int y, int z)
	{
		T*** a = new T**[x];
		for (int i = 0; i &lt; x; i++)
		{
			a[i] = new T*[y];
			for (int k = 0; k &lt; y; k++)
			{
				a[i][k] = new T[z];
				for (int j = 0; j &lt; z; j++)
					a[i][k][j] = 0;
			}
		}
		return a;
	}</code></p>
<pre><code class="lang-auto"></code></pre>
<p>Are allocations themselves just generally really slow? I can’t think of a list of reasons as to why the performance increases would be so big. We’re talking over 50% of the profiling samples coming from allocations and the program stalling to a small percentage and smooth sailing.</p>
<p>Thanks,</p>
<p>~Lin</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831/1</link>
        <pubDate>Wed, 11 Feb 2015 04:39:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549831-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-dynamically-allocated-multi-dimensional-vs-single-dimensional-arrays/549831.rss">[C++] Dynamically Allocated Multi-dimensional vs Single-dimensional Arrays</source>
      </item>
  </channel>
</rss>
