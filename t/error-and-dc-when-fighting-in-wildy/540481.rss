<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Error and DC when fighting in wildy</title>
    <link>https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481</link>
    <description>Trisidia V3 cache/source/client. When me and a friend are hybriding in wildy, about halfway in we dc and I get an error on client that floods it and says:
 &quot;[EventManager] - Player logged out during an event (Caught)
about 500 times. Although when we just rune fight, we don&#39;t dc. Its almost as if when we are spamming buttons to switch gear its boots the server.I read another thread about this and they never seemed to solve it. Any help or ideas are greatly appreciated. Here is my EventManager.java file:
[code=javapackage server.event;

import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import server.util.Misc;

/**
 * Manages events which will be run in the future. Has its own thread since some
 * events may need to be ran faster than the cycle time in the main thread.
 * 
 * @author Graham
 * 
 */
public class EventManager implements Runnable {

	/**
	 * A reference to the singleton;
	 */
	private static EventManager singleton = null;

	/**
	 * The waitFor variable is multiplied by this before the call to wait() is
	 * made. We do this because other events may be executed after waitFor is
	 * set (and take time). We may need to modify this depending on event count?
	 * Some proper tests need to be done.
	 */
	private static final double WAIT_FOR_FACTOR = 0.5;

	/**
	 * Gets the event manager singleton. If there is no singleton, the singleton
	 * is created.
	 * 
	 * @return The event manager singleton.
	 */
	public static EventManager getSingleton() {
		if (singleton == null) {
			singleton = new EventManager();
			singleton.thread = new Thread(singleton);
			singleton.thread.start();
		}
		return singleton;
	}

	/**
	 * Initialises the event manager (if it needs to be).
	 */
	public static void initialize() {
		getSingleton();
	}

	/**
	 * A list of events that are being executed.
	 */
	private List&lt;EventContainer&gt; events;

	/**
	 * The event manager thread. So we can interrupt it and end it nicely on
	 * shutdown.
	 */
	private Thread thread;

	/**
	 * Initialise the event manager.
	 */
	private EventManager() {
		events = new ArrayList&lt;EventContainer&gt;();
	}

	/**
	 * Adds an event.
	 * 
	 * @param event
	 *            The event to add.
	 * @param tick
	 *            The tick time.
	 */
	public synchronized void addEvent(Event event, int tick) {
		events.add(new EventContainer(event, tick));
		notify();
	}

	@Override
	/*
	 * Processes events. Works kinda like newer versions of cron.
	 */
	public synchronized void run() {
		long waitFor = -1;
		List&lt;EventContainer&gt; remove = new ArrayList&lt;EventContainer&gt;();
		
		while(true) {
			
			// reset wait time
			waitFor = -1;
			
			// process all events
			for(EventContainer container : events) {
				if(container.isRunning()) {
					if((System.currentTimeMillis() - container.getLastRun()) &gt;= container.getTick()) {
						try {
							container.execute();
						} catch (Exception exception) {
							Misc.println(&quot;[EventManager] - Player logged out during an event (Caught)&quot;);
							container.isRunning = false;
							//events.stop();
						}
					}
					if(container.getTick() &lt; waitFor || waitFor == -1) {
						waitFor = container.getTick();
					}
				} else {
					// add to remove list
					remove.add(container);
				}
			}
			
			// remove events that have completed
			for(EventContainer container : remove) {
				events.remove(container);
			}
			remove.clear();
			
			// no events running
			try {
				if(waitFor == -1) {
					wait(); // wait with no timeout
				} else {
					// an event is running, wait for that time or until a new event is added
					int decimalWaitFor = (int)(Math.ceil(waitFor*WAIT_FOR_FACTOR));
					wait(decimalWaitFor);
				}
			} catch(InterruptedException e) {
				break; // stop running
			}
		}
	}

	/**
	 * Shuts the event manager down.
	 */
	public void shutdown() {
		this.thread.interrupt();
	}

}
][/code]</description>
    
    <lastBuildDate>Sat, 22 Feb 2014 23:25:02 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Error and DC when fighting in wildy</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>One of the events is throwing an exception, I would use <span class="bbcode-i">Exception#printStackTrace</span> to capture it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/4</link>
        <pubDate>Sat, 22 Feb 2014 23:25:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540481-4</guid>
        <source url="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481.rss">Error and DC when fighting in wildy</source>
      </item>
      <item>
        <title>Error and DC when fighting in wildy</title>
        <dc:creator><![CDATA[@gwinter gwinter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gwinter">@gwinter</a> wrote:</p>
          <blockquote>
              <p>[code=java]package server.event;</p>
<p>import java.io.IOException;<br>
import java.util.ArrayList;<br>
import java.util.List;<br>
import server.util.Misc;</p>
<p>/**</p>
<ul>
<li>Manages events which will be run in the future. Has its own thread since some</li>
<li>events may need to be ran faster than the cycle time in the main thread.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Graham</li>
<li>
</li>
</ul>
<p>*/<br>
public class EventManager implements Runnable {</p>
<pre><code>/**
 * A reference to the singleton;
 */
private static EventManager singleton = null;

/**
 * The waitFor variable is multiplied by this before the call to wait() is
 * made. We do this because other events may be executed after waitFor is
 * set (and take time). We may need to modify this depending on event count?
 * Some proper tests need to be done.
 */
private static final double WAIT_FOR_FACTOR = 0.5;

/**
 * Gets the event manager singleton. If there is no singleton, the singleton
 * is created.
 * 
 * @return The event manager singleton.
 */
public static EventManager getSingleton() {
	if (singleton == null) {
		singleton = new EventManager();
		singleton.thread = new Thread(singleton);
		singleton.thread.start();
	}
	return singleton;
}

/**
 * Initialises the event manager (if it needs to be).
 */
public static void initialize() {
	getSingleton();
}

/**
 * A list of events that are being executed.
 */
private List&lt;EventContainer&gt; events;

/**
 * The event manager thread. So we can interrupt it and end it nicely on
 * shutdown.
 */
private Thread thread;

/**
 * Initialise the event manager.
 */
private EventManager() {
	events = new ArrayList&lt;EventContainer&gt;();
}

/**
 * Adds an event.
 * 
 * @param event
 *            The event to add.
 * @param tick
 *            The tick time.
 */
public synchronized void addEvent(Event event, int tick) {
	events.add(new EventContainer(event, tick));
	notify();
}

@Override
/*
 * Processes events. Works kinda like newer versions of cron.
 */
public synchronized void run() {
	long waitFor = -1;
	List&lt;EventContainer&gt; remove = new ArrayList&lt;EventContainer&gt;();
	
	while(true) {
		
		// reset wait time
		waitFor = -1;
		
		// process all events
		for(EventContainer container : events) {
			if(container.isRunning()) {
				if((System.currentTimeMillis() - container.getLastRun()) &gt;= container.getTick()) {
					try {
						container.execute();
					} catch (Exception exception) {
						Misc.println("[EventManager] - Player logged out during an event (Caught)");
						container.isRunning = false;
						//events.stop();
					}
				}
				if(container.getTick() &lt; waitFor || waitFor == -1) {
					waitFor = container.getTick();
				}
			} else {
				// add to remove list
				remove.add(container);
			}
		}
		
		// remove events that have completed
		for(EventContainer container : remove) {
			events.remove(container);
		}
		remove.clear();
		
		// no events running
		try {
			if(waitFor == -1) {
				wait(); // wait with no timeout
			} else {
				// an event is running, wait for that time or until a new event is added
				int decimalWaitFor = (int)(Math.ceil(waitFor*WAIT_FOR_FACTOR));
				wait(decimalWaitFor);
			}
		} catch(InterruptedException e) {
			break; // stop running
		}
	}
}

/**
 * Shuts the event manager down.
 */
public void shutdown() {
	this.thread.interrupt();
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/3</link>
        <pubDate>Sat, 22 Feb 2014 23:13:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540481-3</guid>
        <source url="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481.rss">Error and DC when fighting in wildy</source>
      </item>
      <item>
        <title>Error and DC when fighting in wildy</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>Can you give a bit above that block as well? I think I see a part of it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/2</link>
        <pubDate>Sat, 22 Feb 2014 18:41:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540481-2</guid>
        <source url="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481.rss">Error and DC when fighting in wildy</source>
      </item>
      <item>
        <title>Error and DC when fighting in wildy</title>
        <dc:creator><![CDATA[@gwinter gwinter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gwinter">@gwinter</a> wrote:</p>
          <blockquote>
              <p>Trisidia V3 cache/source/client. When me and a friend are hybriding in wildy, about halfway in we dc and I get an error on client that floods it and says:<br>
"[EventManager] - Player logged out during an event (Caught)<br>
about 500 times. Although when we just rune fight, we don’t dc. Its almost as if when we are spamming buttons to switch gear its boots the server.I read another thread about this and they never seemed to solve it. Any help or ideas are greatly appreciated. Here is my EventManager.java file:<br>
[code=javapackage server.event;</p>
<p>import java.io.IOException;<br>
import java.util.ArrayList;<br>
import java.util.List;<br>
import server.util.Misc;</p>
<p>/**</p>
<ul>
<li>Manages events which will be run in the future. Has its own thread since some</li>
<li>events may need to be ran faster than the cycle time in the main thread.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Graham</li>
<li>
</li>
</ul>
<p>*/<br>
public class EventManager implements Runnable {</p>
<pre><code>/**
 * A reference to the singleton;
 */
private static EventManager singleton = null;

/**
 * The waitFor variable is multiplied by this before the call to wait() is
 * made. We do this because other events may be executed after waitFor is
 * set (and take time). We may need to modify this depending on event count?
 * Some proper tests need to be done.
 */
private static final double WAIT_FOR_FACTOR = 0.5;

/**
 * Gets the event manager singleton. If there is no singleton, the singleton
 * is created.
 * 
 * @return The event manager singleton.
 */
public static EventManager getSingleton() {
	if (singleton == null) {
		singleton = new EventManager();
		singleton.thread = new Thread(singleton);
		singleton.thread.start();
	}
	return singleton;
}

/**
 * Initialises the event manager (if it needs to be).
 */
public static void initialize() {
	getSingleton();
}

/**
 * A list of events that are being executed.
 */
private List&lt;EventContainer&gt; events;

/**
 * The event manager thread. So we can interrupt it and end it nicely on
 * shutdown.
 */
private Thread thread;

/**
 * Initialise the event manager.
 */
private EventManager() {
	events = new ArrayList&lt;EventContainer&gt;();
}

/**
 * Adds an event.
 * 
 * @param event
 *            The event to add.
 * @param tick
 *            The tick time.
 */
public synchronized void addEvent(Event event, int tick) {
	events.add(new EventContainer(event, tick));
	notify();
}

@Override
/*
 * Processes events. Works kinda like newer versions of cron.
 */
public synchronized void run() {
	long waitFor = -1;
	List&lt;EventContainer&gt; remove = new ArrayList&lt;EventContainer&gt;();
	
	while(true) {
		
		// reset wait time
		waitFor = -1;
		
		// process all events
		for(EventContainer container : events) {
			if(container.isRunning()) {
				if((System.currentTimeMillis() - container.getLastRun()) &gt;= container.getTick()) {
					try {
						container.execute();
					} catch (Exception exception) {
						Misc.println("[EventManager] - Player logged out during an event (Caught)");
						container.isRunning = false;
						//events.stop();
					}
				}
				if(container.getTick() &lt; waitFor || waitFor == -1) {
					waitFor = container.getTick();
				}
			} else {
				// add to remove list
				remove.add(container);
			}
		}
		
		// remove events that have completed
		for(EventContainer container : remove) {
			events.remove(container);
		}
		remove.clear();
		
		// no events running
		try {
			if(waitFor == -1) {
				wait(); // wait with no timeout
			} else {
				// an event is running, wait for that time or until a new event is added
				int decimalWaitFor = (int)(Math.ceil(waitFor*WAIT_FOR_FACTOR));
				wait(decimalWaitFor);
			}
		} catch(InterruptedException e) {
			break; // stop running
		}
	}
}

/**
 * Shuts the event manager down.
 */
public void shutdown() {
	this.thread.interrupt();
}
</code></pre>
<p>}<br>
][/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481/1</link>
        <pubDate>Sat, 22 Feb 2014 07:41:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540481-1</guid>
        <source url="https://forum.moparisthebest.com/t/error-and-dc-when-fighting-in-wildy/540481.rss">Error and DC when fighting in wildy</source>
      </item>
  </channel>
</rss>
