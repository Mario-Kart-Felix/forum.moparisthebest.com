<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>I hate static &gt;_&lt;</title>
    <link>https://forum.moparisthebest.com/t/i-hate-static--/469367</link>
    <description>problem is i cant get dropList to work. but i keep getting issues with static when i try to make it work.

Tell me what i need please ~_~
class=DropManager
[code]

import java.util.Scanner;
import java.io.File;
import java.util.Collection;

public class DropManager {
    Collection&lt;npcWithDrops&gt; dropList;
   public static void main(String args[]) {
      
   }
   public void getDropTest(int t) {
       
       loadDrops();
       for (int i=0;i&lt;100;i++) {
       Drop drop=getnpcWithDrops(13).getRandomDrop();
       int item= drop.item,amount=drop.getDropValue()+getRandom(0, drop.getDropRange()/getRandom(drop.getProbabilityOutOf()/drop.getProbabilityChance(), drop.getDropRange()));
       System.out.println(item+&quot; &quot;+amount);
       }
   }
   public Drop[] getNpcDrops(int npcId) {
       npcWithDrops t[]= (npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) {
           if (t[i].getNpc()==npcId)
               return t[i].getDrops();
               
       }
       return new Drop[]{new Drop(-1)};
   }
   public npcWithDrops getnpcWithDrops(int npcID) {
       npcWithDrops[] t=(npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) 
           if (t[i].getNpc()==npcID) 
               return t[i];
       return new npcWithDrops(-1, new Drop[]{new Drop(-1)});
   }
   
 	public void loadDrops() {
            
		try {
			
			//int npcDrops[];
                        Drop dropArray[];
			int left=0,right=0;
			String part=&quot;&quot;,part2=&quot;&quot;;
                        
			File f = new File(&quot;c:/npcCrap.cfg&quot;);
                        if (!f.exists())
                            throw new java.io.FileNotFoundException(f.getPath()+&quot; not found&quot;);
			Scanner s = new Scanner(f);

			while (s.hasNextLine()) {
			int npcId=0;
			int c=0;
			int numb=0;
				int counter=0;
				String line = s.nextLine();
				
				npcId=-1;
				line=line.replaceAll(&quot;\t&quot;,&quot;&quot;);
				line=line.replaceAll(&quot; &quot;,&quot;&quot;);
				if (line.length()==0)
					continue;
				if (line.startsWith(&quot;#&quot;)||line.startsWith(&quot;//&quot;))
					continue;
				left=line.indexOf(&quot;[&quot;);
				right=line.indexOf(&quot;]&quot;);
				
				if (left==-1||right==-1) {
					System.out.println(&quot;Error: Droptable is missing closing \&quot;]\&quot;&quot;);
					continue;
				}
				npcId=Integer.parseInt(line.substring(line.indexOf(&quot;+&quot;)+1,line.indexOf(&quot;+&quot;,line.indexOf(&quot;+&quot;)+1)));
				if (npcId&lt;0)
					continue;
				System.out.println(&quot;NPC: &quot;+npcId);


				while (line.indexOf(&quot;)&quot;,c)&gt;0)//learns how many drops are needed, must be initialized before it is written too.
				{
					c=line.indexOf(&quot;)&quot;,c)+1;
					numb++;
				}
				dropArray=new Drop[numb];//sets number of Drops for current npc
				while (line.indexOf(&quot;]&quot;)&gt;1) {
					if (line.indexOf(&quot;(&quot;)==-1||line.indexOf(&quot;)&quot;)==-1||line.indexOf(&quot;:&quot;)==-1||line.indexOf(&quot;&lt;&quot;)==-1||line.indexOf(&quot;&gt;&quot;)==-1)
						break;
					
					if (!line.substring(line.indexOf(&quot;(&quot;),line.indexOf(&quot;)&quot;)).contains(&quot;-&quot;)) {
						dropArray[counter]= new Drop(Integer.parseInt(line.substring(line.indexOf(&quot;(&quot;)+1,line.indexOf(&quot;:&quot;))));
						
						dropArray[counter].setDropValue(Integer.parseInt(line.substring(line.indexOf(&quot;:&quot;)+1,line.indexOf(&quot;&lt;&quot;))));
						
						dropArray[counter].setProbability(Integer.parseInt(line.substring(line.indexOf(&quot;&lt;&quot;)+1,line.indexOf(&quot;:&quot;,line.indexOf(&quot;:&quot;)+1))),Integer.parseInt(line.substring(line.indexOf(&quot;:&quot;,line.indexOf(&quot;:&quot;)+1)+1,line.indexOf(&quot;&gt;&quot;))));
						
					} else {
						try {
							dropArray[counter] = new Drop(Integer.parseInt(line.substring(line.indexOf(&quot;(&quot;)+1,line.indexOf(&quot;:&quot;))));
							
							dropArray[counter].setDropRange(Integer.parseInt(line.substring(line.indexOf(&quot;:&quot;)+1,line.indexOf(&quot;-&quot;))),Integer.parseInt(line.substring(line.indexOf(&quot;-&quot;)+1,line.indexOf(&quot;&lt;&quot;))));
							
                                                        dropArray[counter].setProbability(
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf(&quot;&lt;&quot;)+1,line.indexOf(&quot;:&quot;,line.indexOf(&quot;:&quot;)+1)))
                                                                ,
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf(&quot;:&quot;,line.indexOf(&quot;:&quot;)+1)+1,line.indexOf(&quot;&gt;&quot;))));
							
						} catch (java.lang.NullPointerException ie) {
							ie.getMessage();
						}
					}
					counter++;
					line=line.substring(line.indexOf(&quot;)&quot;)+1);
					
				}
				if (counter&gt;0&amp;&amp;dropArray.length&gt;0) {
					System.out.println(&quot;loaded &quot;+dropArray.length+&quot; drops for npc &quot;+ npcId);
                                        dropList.add(new npcWithDrops(npcId, dropArray));
                                }
			}
			//loadConstants();
		} catch (Exception e) {
			e.printStackTrace();
		}
                
	}

private class npcWithDrops {
    int npc;
    Collection&lt;Drop&gt; dropSet;
   npcWithDrops(int npcID, Drop[] d) {
       try {
        npc=npcID;
        for (int i=0;i&lt;d.length-1;i++)
            dropSet.add(d[i]);
       } catch (java.lang.NullPointerException npe) {npe.printStackTrace();}
        
    }
    int getNpc() {
        return npc;
    }
    Drop[] getDrops() {
        return (Drop[])dropSet.toArray();
    }
    Drop getRandomDrop() {
        //Has to do with probability here
        int total_top=0,total_bottom=0;
        Drop[] d=(Drop[])dropSet.toArray();
        for (int i=0;i&lt;d.length;i++) {
            total_top+=d[i].getProbabilityChance();
            total_bottom+=d[i].getProbabilityOutOf();
        }
        int[] chance=new int[d.length];
        for (int i=0;i&lt;d.length;i++) {
            chance[i]=(int)Math.floor(d[i].getProbability()*total_bottom);
        }
        int dropNumber=getRandom(0, total_bottom);
                for (int i=0;dropNumber&gt;0;i++) {
                    dropNumber-=chance[i];
                    if (dropNumber&lt;=0) 
                        return d[i];
                    }
                    return new Drop();
                }
                
    }
    int getRandom(int min,int max) {
        return (int)Math.random()*max+min;
    }
    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Brock
 */
class Drop {
    short item;
    int lowerValue;
    int upperValue;
    int probabilitya;
    int probabilityb;
    Drop(int itemID) {
        item=(short)itemID;
    }
    
    
    Drop(Drop drop) {
        item=drop.item;
        lowerValue=drop.lowerValue;
        upperValue=drop.upperValue;
        probabilitya=drop.probabilitya;
        probabilityb=drop.probabilityb;
    }
    Drop() {
        item=-1;
        upperValue=-1;
        lowerValue=-1;
        probabilitya=0;
        probabilityb=0;
        
        
    }
    void setDropValue(int numberToDrop) {
        lowerValue=numberToDrop;
        upperValue=numberToDrop;
    }
    void setItem(int itemID) {
        item=(short)itemID;
    }
    int getItem() {
        return item;
    }
    void setProbability(int chance, int outOf) {
        probabilitya=chance;
        probabilityb=outOf;
    }
    void setDropRange(int lowerValue, int upperValue) {
        this.lowerValue=lowerValue;
        this.upperValue=upperValue;
    }
    /**
     * 
     * @return probability of this object being dropped
     */
    double getProbability() {
        return probabilitya/probabilityb*1.0;
    }
    /**
     * @return in the ratio chancesToWin:outOf, this returns chancesToWin
     */
        int getProbabilityChance() {
        return probabilitya;
    }
        /**
         * 
         * @return in the ratio chancesToWin:outOf, this returns outOf
         */
    int getProbabilityOutOf() {
        return probabilityb;
    }
    /**
     * 
     * @return
     * difference between lower and upper item values
     * returns 0 if they are the same.
     */
    int getDropRange() {
       return Math.abs(lowerValue - upperValue); 
    }
    /**
     * 
     * @return lowerValue
     */
    int getDropValue() {
        return lowerValue;
    }
    /**
     * 
     * @param dropMax 
     */
    void setDropMax(int dropMax) {
        upperValue=dropMax;
    }
    /**
     * @return upperValue
     */
    int getDropMax() {
        return upperValue;
    }
     /**
     * 
     * @return boolean (lowerValue!=upperValue)
     */
    boolean hasRange() {
        return (lowerValue!=upperValue);
    }
}

}


[/code]</description>
    
    <lastBuildDate>Wed, 21 Nov 2012 20:24:20 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/i-hate-static--/469367.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>I hate static &gt;_&lt;</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>im using the main method cuz im building a standalone, i do this with all of my code before i put it in a server.</p>
<pre><code class="lang-auto">import java.util.Scanner;
import java.io.File;
import java.util.Collection;

public class DropManager {
    static Collection&lt;npcWithDrops&gt; dropList;
   public static void main(String args[]) {
      getDropTest();
   }
   public static void getDropTest() {
       
       loadDrops();
       for (int i=0;i&lt;100;i++) {
       Drop drop=getnpcWithDrops(13).getRandomDrop();
       int item= drop.item,amount=drop.getDropValue()+getRandom(0, drop.getDropRange()/getRandom(drop.getProbabilityOutOf()/drop.getProbabilityChance(), drop.getDropRange()));
       System.out.println(item+" "+amount);
       }
   }
   public Drop[] getNpcDrops(int npcId) {
       npcWithDrops t[]= (npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) {
           if (t[i].getNpc()==npcId)
               return t[i].getDrops();
               
       }
       return new Drop[]{new Drop(-1)};
   }
   public static npcWithDrops getnpcWithDrops(int npcID) {
       npcWithDrops[] t=(npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) 
           if (t[i].getNpc()==npcID) 
               return t[i];
       return new npcWithDrops(-1, new Drop[]{new Drop(-1)});
   }
   
 	public static void loadDrops() {
            
		try {
			
			//int npcDrops[];
                        Drop dropArray[];
			int left=0,right=0;
			String part="",part2="";
                        
			File f = new File("c:/npcCrap.cfg");
                        if (!f.exists())
                            throw new java.io.FileNotFoundException(f.getPath()+" not found");
			Scanner s = new Scanner(f);

			while (s.hasNextLine()) {
			int npcId=0;
			int c=0;
			int numb=0;
				int counter=0;
				String line = s.nextLine();
				
				npcId=-1;
				line=line.replaceAll("\t","");
				line=line.replaceAll(" ","");
				if (line.length()==0)
					continue;
				if (line.startsWith("#")||line.startsWith("//"))
					continue;
				left=line.indexOf("[");
				right=line.indexOf("]");
				
				if (left==-1||right==-1) {
					System.out.println("Error: Droptable is missing closing \"]\"");
					continue;
				}
				npcId=Integer.parseInt(line.substring(line.indexOf("+")+1,line.indexOf("+",line.indexOf("+")+1)));
				if (npcId&lt;0)
					continue;
				System.out.println("NPC: "+npcId);


				while (line.indexOf(")",c)&gt;0)//learns how many drops are needed, must be initialized before it is written too.
				{
					c=line.indexOf(")",c)+1;
					numb++;
				}
				dropArray=new Drop[numb];//sets number of Drops for current npc
				while (line.indexOf("]")&gt;1) {
					if (line.indexOf("(")==-1||line.indexOf(")")==-1||line.indexOf(":")==-1||line.indexOf("&lt;")==-1||line.indexOf("&gt;")==-1)
						break;
					
					if (!line.substring(line.indexOf("("),line.indexOf(")")).contains("-")) {
						dropArray[counter]= new Drop(Integer.parseInt(line.substring(line.indexOf("(")+1,line.indexOf(":"))));
						
						dropArray[counter].setDropValue(Integer.parseInt(line.substring(line.indexOf(":")+1,line.indexOf("&lt;"))));
						
						dropArray[counter].setProbability(Integer.parseInt(line.substring(line.indexOf("&lt;")+1,line.indexOf(":",line.indexOf(":")+1))),Integer.parseInt(line.substring(line.indexOf(":",line.indexOf(":")+1)+1,line.indexOf("&gt;"))));
						
					} else {
						try {
							dropArray[counter] = new Drop(Integer.parseInt(line.substring(line.indexOf("(")+1,line.indexOf(":"))));
							
							dropArray[counter].setDropRange(Integer.parseInt(line.substring(line.indexOf(":")+1,line.indexOf("-"))),Integer.parseInt(line.substring(line.indexOf("-")+1,line.indexOf("&lt;"))));
							
                                                        dropArray[counter].setProbability(
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf("&lt;")+1,line.indexOf(":",line.indexOf(":")+1)))
                                                                ,
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf(":",line.indexOf(":")+1)+1,line.indexOf("&gt;"))));
							
						} catch (java.lang.NullPointerException ie) {
							ie.getMessage();
						}
					}
					counter++;
					line=line.substring(line.indexOf(")")+1);
					
				}
				if (counter&gt;0&amp;&amp;dropArray.length&gt;0) {
					System.out.println("loaded "+dropArray.length+" drops for npc "+ npcId);
                                        npcWithDrops t=new npcWithDrops(npcId, dropArray);
                                        dropList.add(t);
                                }
			}
			//loadConstants();
		} catch (Exception e) {
			e.printStackTrace();
		}
                
	}

private static class npcWithDrops {
    int npc;
    Collection&lt;Drop&gt; dropSet;
   npcWithDrops(int npcID, Drop[] d) {
       try {
        npc=npcID;
        for (int i=0;i&lt;d.length-1;i++)
            dropSet.add(d[i]);
       } catch (java.lang.NullPointerException npe) {npe.printStackTrace();}
        
    }
    int getNpc() {
        return npc;
    }
    Drop[] getDrops() {
        return (Drop[])dropSet.toArray();
    }
    Drop getRandomDrop() {
        //Has to do with probability here
        int total_top=0,total_bottom=0;
        Drop[] d=(Drop[])dropSet.toArray();
        for (int i=0;i&lt;d.length;i++) {
            total_top+=d[i].getProbabilityChance();
            total_bottom+=d[i].getProbabilityOutOf();
        }
        int[] chance=new int[d.length];
        for (int i=0;i&lt;d.length;i++) {
            chance[i]=(int)Math.floor(d[i].getProbability()*total_bottom);
        }
        int dropNumber=getRandom(0, total_bottom);
                for (int i=0;dropNumber&gt;0;i++) {
                    dropNumber-=chance[i];
                    if (dropNumber&lt;=0) 
                        return d[i];
                    }
                    return new Drop();
                }
                
    }
    static int getRandom(int min,int max) {
        return (int)Math.random()*max+min;
    }
    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Brock
 */
static class Drop {
    short item;
    int lowerValue;
    int upperValue;
    int probabilitya;
    int probabilityb;
    Drop(int itemID) {
        item=(short)itemID;
    }
    
    
    Drop(Drop drop) {
        item=drop.item;
        lowerValue=drop.lowerValue;
        upperValue=drop.upperValue;
        probabilitya=drop.probabilitya;
        probabilityb=drop.probabilityb;
    }
    Drop() {
        item=-1;
        upperValue=-1;
        lowerValue=-1;
        probabilitya=0;
        probabilityb=0;
        
        
    }
    void setDropValue(int numberToDrop) {
        lowerValue=numberToDrop;
        upperValue=numberToDrop;
    }
    void setItem(int itemID) {
        item=(short)itemID;
    }
    int getItem() {
        return item;
    }
    void setProbability(int chance, int outOf) {
        probabilitya=chance;
        probabilityb=outOf;
    }
    void setDropRange(int lowerValue, int upperValue) {
        this.lowerValue=lowerValue;
        this.upperValue=upperValue;
    }
    /**
     * 
     * @return probability of this object being dropped
     */
    double getProbability() {
        return probabilitya/probabilityb*1.0;
    }
    /**
     * @return in the ratio chancesToWin:outOf, this returns chancesToWin
     */
        int getProbabilityChance() {
        return probabilitya;
    }
        /**
         * 
         * @return in the ratio chancesToWin:outOf, this returns outOf
         */
    int getProbabilityOutOf() {
        return probabilityb;
    }
    /**
     * 
     * @return
     * difference between lower and upper item values
     * returns 0 if they are the same.
     */
    int getDropRange() {
       return Math.abs(lowerValue - upperValue); 
    }
    /**
     * 
     * @return lowerValue
     */
    int getDropValue() {
        return lowerValue;
    }
    /**
     * 
     * @param dropMax 
     */
    void setDropMax(int dropMax) {
        upperValue=dropMax;
    }
    /**
     * @return upperValue
     */
    int getDropMax() {
        return upperValue;
    }
     /**
     * 
     * @return boolean (lowerValue!=upperValue)
     */
    boolean hasRange() {
        return (lowerValue!=upperValue);
    }
}

}
</code></pre>
<p><code>run:
NPC: 13
loaded 1 drops for npc 13
java.lang.NullPointerException
	at DropManager.loadDrops(DropManager.java:119)
	at DropManager.getDropTest(DropManager.java:13)
	at DropManager.main(DropManager.java:9)
Exception in thread "main" java.lang.NullPointerException
	at DropManager.getnpcWithDrops(DropManager.java:30)
	at DropManager.getDropTest(DropManager.java:15)
	at DropManager.main(DropManager.java:9)
Java Result: 1
BUILD SUCCESSFUL (total time: 0 seconds)
</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-hate-static--/469367/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-hate-static--/469367/3</link>
        <pubDate>Wed, 21 Nov 2012 20:24:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469367-3</guid>
        <source url="https://forum.moparisthebest.com/t/i-hate-static--/469367.rss">I hate static &gt;_&lt;</source>
      </item>
      <item>
        <title>I hate static &gt;_&lt;</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>What is the error exactly… we need more information if you want help.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-hate-static--/469367/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-hate-static--/469367/2</link>
        <pubDate>Wed, 21 Nov 2012 11:23:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469367-2</guid>
        <source url="https://forum.moparisthebest.com/t/i-hate-static--/469367.rss">I hate static &gt;_&lt;</source>
      </item>
      <item>
        <title>I hate static &gt;_&lt;</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>problem is i cant get dropList to work. but i keep getting issues with static when i try to make it work.</p>
<p>Tell me what i need please ~_~<br>
class=DropManager</p>
<pre><code class="lang-auto">
import java.util.Scanner;
import java.io.File;
import java.util.Collection;

public class DropManager {
    Collection&lt;npcWithDrops&gt; dropList;
   public static void main(String args[]) {
      
   }
   public void getDropTest(int t) {
       
       loadDrops();
       for (int i=0;i&lt;100;i++) {
       Drop drop=getnpcWithDrops(13).getRandomDrop();
       int item= drop.item,amount=drop.getDropValue()+getRandom(0, drop.getDropRange()/getRandom(drop.getProbabilityOutOf()/drop.getProbabilityChance(), drop.getDropRange()));
       System.out.println(item+" "+amount);
       }
   }
   public Drop[] getNpcDrops(int npcId) {
       npcWithDrops t[]= (npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) {
           if (t[i].getNpc()==npcId)
               return t[i].getDrops();
               
       }
       return new Drop[]{new Drop(-1)};
   }
   public npcWithDrops getnpcWithDrops(int npcID) {
       npcWithDrops[] t=(npcWithDrops[])dropList.toArray();
       for (int i=0;i&lt;t.length;i++) 
           if (t[i].getNpc()==npcID) 
               return t[i];
       return new npcWithDrops(-1, new Drop[]{new Drop(-1)});
   }
   
 	public void loadDrops() {
            
		try {
			
			//int npcDrops[];
                        Drop dropArray[];
			int left=0,right=0;
			String part="",part2="";
                        
			File f = new File("c:/npcCrap.cfg");
                        if (!f.exists())
                            throw new java.io.FileNotFoundException(f.getPath()+" not found");
			Scanner s = new Scanner(f);

			while (s.hasNextLine()) {
			int npcId=0;
			int c=0;
			int numb=0;
				int counter=0;
				String line = s.nextLine();
				
				npcId=-1;
				line=line.replaceAll("\t","");
				line=line.replaceAll(" ","");
				if (line.length()==0)
					continue;
				if (line.startsWith("#")||line.startsWith("//"))
					continue;
				left=line.indexOf("[");
				right=line.indexOf("]");
				
				if (left==-1||right==-1) {
					System.out.println("Error: Droptable is missing closing \"]\"");
					continue;
				}
				npcId=Integer.parseInt(line.substring(line.indexOf("+")+1,line.indexOf("+",line.indexOf("+")+1)));
				if (npcId&lt;0)
					continue;
				System.out.println("NPC: "+npcId);


				while (line.indexOf(")",c)&gt;0)//learns how many drops are needed, must be initialized before it is written too.
				{
					c=line.indexOf(")",c)+1;
					numb++;
				}
				dropArray=new Drop[numb];//sets number of Drops for current npc
				while (line.indexOf("]")&gt;1) {
					if (line.indexOf("(")==-1||line.indexOf(")")==-1||line.indexOf(":")==-1||line.indexOf("&lt;")==-1||line.indexOf("&gt;")==-1)
						break;
					
					if (!line.substring(line.indexOf("("),line.indexOf(")")).contains("-")) {
						dropArray[counter]= new Drop(Integer.parseInt(line.substring(line.indexOf("(")+1,line.indexOf(":"))));
						
						dropArray[counter].setDropValue(Integer.parseInt(line.substring(line.indexOf(":")+1,line.indexOf("&lt;"))));
						
						dropArray[counter].setProbability(Integer.parseInt(line.substring(line.indexOf("&lt;")+1,line.indexOf(":",line.indexOf(":")+1))),Integer.parseInt(line.substring(line.indexOf(":",line.indexOf(":")+1)+1,line.indexOf("&gt;"))));
						
					} else {
						try {
							dropArray[counter] = new Drop(Integer.parseInt(line.substring(line.indexOf("(")+1,line.indexOf(":"))));
							
							dropArray[counter].setDropRange(Integer.parseInt(line.substring(line.indexOf(":")+1,line.indexOf("-"))),Integer.parseInt(line.substring(line.indexOf("-")+1,line.indexOf("&lt;"))));
							
                                                        dropArray[counter].setProbability(
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf("&lt;")+1,line.indexOf(":",line.indexOf(":")+1)))
                                                                ,
                                                                Integer.parseInt(line.substring(
                                                                line.indexOf(":",line.indexOf(":")+1)+1,line.indexOf("&gt;"))));
							
						} catch (java.lang.NullPointerException ie) {
							ie.getMessage();
						}
					}
					counter++;
					line=line.substring(line.indexOf(")")+1);
					
				}
				if (counter&gt;0&amp;&amp;dropArray.length&gt;0) {
					System.out.println("loaded "+dropArray.length+" drops for npc "+ npcId);
                                        dropList.add(new npcWithDrops(npcId, dropArray));
                                }
			}
			//loadConstants();
		} catch (Exception e) {
			e.printStackTrace();
		}
                
	}

private class npcWithDrops {
    int npc;
    Collection&lt;Drop&gt; dropSet;
   npcWithDrops(int npcID, Drop[] d) {
       try {
        npc=npcID;
        for (int i=0;i&lt;d.length-1;i++)
            dropSet.add(d[i]);
       } catch (java.lang.NullPointerException npe) {npe.printStackTrace();}
        
    }
    int getNpc() {
        return npc;
    }
    Drop[] getDrops() {
        return (Drop[])dropSet.toArray();
    }
    Drop getRandomDrop() {
        //Has to do with probability here
        int total_top=0,total_bottom=0;
        Drop[] d=(Drop[])dropSet.toArray();
        for (int i=0;i&lt;d.length;i++) {
            total_top+=d[i].getProbabilityChance();
            total_bottom+=d[i].getProbabilityOutOf();
        }
        int[] chance=new int[d.length];
        for (int i=0;i&lt;d.length;i++) {
            chance[i]=(int)Math.floor(d[i].getProbability()*total_bottom);
        }
        int dropNumber=getRandom(0, total_bottom);
                for (int i=0;dropNumber&gt;0;i++) {
                    dropNumber-=chance[i];
                    if (dropNumber&lt;=0) 
                        return d[i];
                    }
                    return new Drop();
                }
                
    }
    int getRandom(int min,int max) {
        return (int)Math.random()*max+min;
    }
    /*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Brock
 */
class Drop {
    short item;
    int lowerValue;
    int upperValue;
    int probabilitya;
    int probabilityb;
    Drop(int itemID) {
        item=(short)itemID;
    }
    
    
    Drop(Drop drop) {
        item=drop.item;
        lowerValue=drop.lowerValue;
        upperValue=drop.upperValue;
        probabilitya=drop.probabilitya;
        probabilityb=drop.probabilityb;
    }
    Drop() {
        item=-1;
        upperValue=-1;
        lowerValue=-1;
        probabilitya=0;
        probabilityb=0;
        
        
    }
    void setDropValue(int numberToDrop) {
        lowerValue=numberToDrop;
        upperValue=numberToDrop;
    }
    void setItem(int itemID) {
        item=(short)itemID;
    }
    int getItem() {
        return item;
    }
    void setProbability(int chance, int outOf) {
        probabilitya=chance;
        probabilityb=outOf;
    }
    void setDropRange(int lowerValue, int upperValue) {
        this.lowerValue=lowerValue;
        this.upperValue=upperValue;
    }
    /**
     * 
     * @return probability of this object being dropped
     */
    double getProbability() {
        return probabilitya/probabilityb*1.0;
    }
    /**
     * @return in the ratio chancesToWin:outOf, this returns chancesToWin
     */
        int getProbabilityChance() {
        return probabilitya;
    }
        /**
         * 
         * @return in the ratio chancesToWin:outOf, this returns outOf
         */
    int getProbabilityOutOf() {
        return probabilityb;
    }
    /**
     * 
     * @return
     * difference between lower and upper item values
     * returns 0 if they are the same.
     */
    int getDropRange() {
       return Math.abs(lowerValue - upperValue); 
    }
    /**
     * 
     * @return lowerValue
     */
    int getDropValue() {
        return lowerValue;
    }
    /**
     * 
     * @param dropMax 
     */
    void setDropMax(int dropMax) {
        upperValue=dropMax;
    }
    /**
     * @return upperValue
     */
    int getDropMax() {
        return upperValue;
    }
     /**
     * 
     * @return boolean (lowerValue!=upperValue)
     */
    boolean hasRange() {
        return (lowerValue!=upperValue);
    }
}

}

</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-hate-static--/469367/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-hate-static--/469367/1</link>
        <pubDate>Wed, 21 Nov 2012 06:16:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469367-1</guid>
        <source url="https://forum.moparisthebest.com/t/i-hate-static--/469367.rss">I hate static &gt;_&lt;</source>
      </item>
  </channel>
</rss>
