<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>UDP vs TCP</title>
    <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332</link>
    <description>Since these two types of connection would be used in networking a game, I am going to explain them in some good detail. In case you didn&#39;t know, RuneScape was networked using TCP.

[hr]

[size=12pt][b]User Datagram Protocol (UDP)[/b][/size]

[b]Features and Flaws[/b]

[ul][li][i]Lightweight[/i] - It is incredibly lightweight, due to the fact that complicated information checking is not being used, the messages sent aren&#39;t ordered, and by default, no connections are tracked.[/li]
[li][i]Lower Latency[/i] - UDP introduces protocol &#39;features&#39; for lower latency.[/li]
[li][i]Simply Quality Checks[/i] - Information received are checked for quality, meaning that the information received can be judged accordingly.[/li]
[li][i]Updates[/i] - With newer networking hardware, UDP is becoming more and more reliable, but it definitely isn&#39;t as good as TCP.[/li]
[li][i]Flexibility[/i] - It allows it&#39;s own form of application error control.[/li]
[li][i]Unreliable[/i] - It is almost like shooting something at a relatively long distance... Once the shot has been taken, there is no guarantee that the bullet will hit.[/li]
[li][i]Unordered[/i] - For example, when two pieces of information are sent, the second message may overtake the first one, and be presented first.[/li]
[li][i]Server Checks[/i] - UDP has a tendency of not dropping connections when the situation calls for it, so checking for client disconnections are key.[/li]
[li][i]Size Limitation[/i] - 64k is all that UDP can handle at once, so you may need to work with that.[/li]
[li][i]No Establishing Connection[/i] - UDP jumps right into sending and receiving useful data from the server and client, rather than having a three-way handshake.[/li]
[li][i]Extra Work[/i] - There may be quite a bit of extra work making this secure, reliable and controlled. It may be worth it though.[/li][/ul]


[b]Example[/b]
This is a very simple example which can only hold one client, and can only receive a single message before closing.
[code=java]
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * This is an extremely simple example on how a UDP client and
 * server would work. Server and client in one.
 * @author Andrew
 */
public class Engine implements Runnable {

    /**
     * We are going to create a new thread for the server to run
     * off first, since the client cannot be ran, connecting to
     * a non-existent server. The client is than ran on the
     * original thread.
     * @param args The command line arguments.
     */
    public static void main(String args[]) {
        new Thread(new Engine()).start();
        new Engine().runClient();
    }

    /**
     * It&#39;s pretty simple. All we need to do is create a datagram
     * socket, a packet (which holds the byte&#39;ed message) &amp; length,
     * and send the packet over the socket.
     */
    public void runClient() {
        try {
            DatagramSocket clientSocket = new DatagramSocket();
            byte str[] = &quot;hello, this is the message&quot;.getBytes();
            System.out.println(&quot;[client] Sending data!&quot;);
            DatagramPacket sendPacket = new DatagramPacket(str, str.length, InetAddress.getByName(&quot;127.0.0.1&quot;), 5555);
            clientSocket.send(sendPacket);
            System.out.println(&quot;[client] Sent data!&quot;);
            clientSocket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Very simple too. We need to create a datagram socket, connecting
     * to a specific port, create a new byte[1024] for each message
     * we will receive, and make the datagram socket read onto a new
     * datagram packet (which has the size of the bytes create, and
     * is holding the bytes to be written to).
     */
    @Override
    public void run() {
        try {
            DatagramSocket dataSocket = new DatagramSocket(5555);
            byte[] input = new byte[1024];
            DatagramPacket receivePacket = new DatagramPacket(input, input.length);
            System.out.println(&quot;[server] Getting datagram packet!&quot;);
            dataSocket.receive(receivePacket);
            String str = new String(receivePacket.getData());
            System.out.println(&quot;[server] Message: &quot; + str);
            dataSocket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
[/code]

[hr]

[size=12pt][b]Transmission Control Protocol (TCP)[/b][/size]

[b]Features and Flaws[/b]

[ul][li][i]Very Reliable[/i] - What is sent is almost guaranteed to be received.[/li]
[li][i]Ordered[/i] - Packets that are send are received in the same order they were sent.[/li]
[li][i]Server Checks[/i] - You will not need to check for dropped connections, since this is automatically done. You should, though.[/li]
[li][i]Size Limitation[/i] - Has a rather large size limitation (in the megabytes). Although this shouldn&#39;t be done, it&#39;s possible.[/li]
[li][i]Congestion Control [/i]- This is automatically supported with TCP, whereas UDP doesn&#39;t support it.[/li]
[li][i]Data Duplication[/i] - This is detected by TCP![/li]
[li][i]Error Checking[/i] - It supply&#39;s error checking.[/li]
[li][i]Three-way Handshake[/i] - Both a good and bad point! Although it ensures the connection is legit, etc, it also introduces a higher connection latency.[/li]
[li][i]Latency[/i] - Due to the large amount of features provided by TCP (overhead), latency can be quite high; much higher than UDP![/li]
[li][i]Heavyweight[/i] - Has to use much more resources than UDP.[/li][/ul]


[b]Example[/b]
This example also is very simple, and can also only hold one client and can only send / receive one message.
[code=java]
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This is an extremely simple example on how a TCP client and
 * server would work. Server and client in one.
 * @author Andrew
 */
public class Engine implements Runnable {

    /**
     * We are going to create a new thread for the server to run
     * off first, since the client cannot be ran, connecting to
     * a non-existent server. The client is than ran on the
     * original thread.
     * @param args The command line arguments.
     */
    public static void main(String args[]) {
        new Thread(new Engine()).start();
        new Engine().runClient();
    }

    /**
     * All we need to do is create a new socket which the IP of
     * the server we are connecting to, followed by the port.
     * Than, we create a bufferedwriter which writes to the
     * sockets outputstream, which can be read by the server.
     */
    public void runClient() {
        try {
            Socket socket = new Socket(&quot;127.0.0.1&quot;, 5555);
            System.out.println(&quot;[client] Connected, sending string!&quot;);
            BufferedWriter buf = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            buf.write(&quot;This is the string to send!&quot;);
            buf.close();
            socket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * We create a server socket on the port of our choice (the
     * client needs to be connecting to this port), than we
     * set a new socket as the connection the server *first*
     * accepts. We than create a bufferedreader to read the
     * sockets inputstream (where the message can be read),
     * and we simply read it!
     */
    @Override
    public void run() {
        try {
            ServerSocket server = new ServerSocket(5555);
            Socket socket = server.accept();
            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            System.out.println(&quot;[server] Message: &quot; + input.readLine());
            socket.close();
            server.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}
[/code]

[hr]

To put it simply, if you&#39;re creating a game which needs fast reactions (such as COD), than you should use UDP. If you&#39;re creating a game which can afford to have a larger amount of latency, and needs extra features to keep the packets in a perfect condition, than you should choose TCP.</description>
    
    <lastBuildDate>Tue, 19 Jun 2012 19:36:04 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>Will the bytes be reordered, or just the overall message order? Meaning, two packets reordered or all of the bytes within those packets?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/16</link>
        <pubDate>Tue, 19 Jun 2012 19:36:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-16</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@GreenSage GreenSage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/greensage">@GreenSage</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lothy, post:8, topic:411332”]Generally speaking, you should make use of UDP regardless. There are some games that use TCP for networking (Runescape, World of Warcraft iirc, etc), but it’s largely a mistake in my opinion.</p>
<p>As you’ve mentioned, two big problems with UDP are reliability and the order in which packets are received.<br>
This blog (<a href="http://gafferongames.com/networking-for-game-programmers" rel="nofollow noopener">http://gafferongames.com/networking-for-game-programmers</a>), written by a guy called Glenn Fiedler, provides an excellent overview of how to make use of UDP in a game.<br>
He covers things such as reliability (ensuring packets arrive if they’re high-priority packets, for example) and flow control (not flooding a connection with too many packets) among other things.</p>
<p>Definitely read it, because his tutorials are excellent.[/quote]</p>
<p>Why the fuck would Runescape use TCP… Runescape bases their timing based on 600 milliseconds so why the hell do you say TCP… Anyways, UDP does order the sent/received packets correctly, but due to that jagex adds extra timers on their servers to align actions perfectly, timers can be different, then also that some UDP protocols handle multiple Clients that packets send them in differ order for what gets started first and what ends last… Yes I am a hater about how you say Runescape uses TCP…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/15</link>
        <pubDate>Mon, 18 Jun 2012 06:03:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-15</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@matiasmunk matiasmunk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matiasmunk">@matiasmunk</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="5" data-topic="411332">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>I’d tell you a UDP joke, but you might not get it.</p>
</blockquote>
</aside>
<p>I had a funny UDP joke to tell, but I lost it somewhere…<br>
The best thing about UDP jokes is that I don’t care if you get them or not.<br>
the problem with UDP jokes: I don’t get half of them</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/14</link>
        <pubDate>Wed, 13 Jun 2012 13:04:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-14</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@PokeNation PokeNation]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pokenation">@PokeNation</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="5" data-topic="411332">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>I’d tell you a UDP joke, but you might not get it.</p>
</blockquote>
</aside>
<p>Haha, nice one <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Already knew about this but its always good to have informative threads on this section of forum <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/13</link>
        <pubDate>Fri, 24 Feb 2012 13:56:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-13</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>[quote=“SETO, post:10, topic:411332”][quote author=Lothy link=topic=512597.msg3729095#msg3729095 date=1314490579]<br>
Generally speaking, you should make use of UDP regardless. There are some games that use TCP for networking (Runescape, World of Warcraft iirc, etc), but it’s largely a mistake in my opinion.</p>
<p>As you’ve mentioned, two big problems with UDP are reliability and the order in which packets are received.<br>
This blog (<a href="http://gafferongames.com/networking-for-game-programmers" rel="nofollow noopener">http://gafferongames.com/networking-for-game-programmers</a>), written by a guy called Glenn Fiedler, provides an excellent overview of how to make use of UDP in a game.<br>
He covers things such as reliability (ensuring packets arrive if they’re high-priority packets, for example) and flow control (not flooding a connection with too many packets) among other things.</p>
<p>Definitely read it, because his tutorials are excellent.<br>
[/quote]<br>
check sum[/quote]</p>
<p>Ordering matters too. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/12</link>
        <pubDate>Thu, 17 Nov 2011 01:57:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-12</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@TheCyberMan TheCyberMan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thecyberman">@TheCyberMan</a> wrote:</p>
          <blockquote>
              <p>Ah! Now I have a better understanding of their differences. Rep++; good job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/11</link>
        <pubDate>Thu, 10 Nov 2011 05:53:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-11</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@SETO SETO]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/seto">@SETO</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lothy, post:8, topic:411332”]Generally speaking, you should make use of UDP regardless. There are some games that use TCP for networking (Runescape, World of Warcraft iirc, etc), but it’s largely a mistake in my opinion.</p>
<p>As you’ve mentioned, two big problems with UDP are reliability and the order in which packets are received.<br>
This blog (<a href="http://gafferongames.com/networking-for-game-programmers" rel="nofollow noopener">http://gafferongames.com/networking-for-game-programmers</a>), written by a guy called Glenn Fiedler, provides an excellent overview of how to make use of UDP in a game.<br>
He covers things such as reliability (ensuring packets arrive if they’re high-priority packets, for example) and flow control (not flooding a connection with too many packets) among other things.</p>
<p>Definitely read it, because his tutorials are excellent.[/quote]<br>
check sum</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/10</link>
        <pubDate>Wed, 09 Nov 2011 18:54:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-10</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@ripzone Triton]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ripzone">@ripzone</a> wrote:</p>
          <blockquote>
              <p>I would also recommend the enet library: <a href="http://enet.bespin.org/" rel="nofollow noopener">http://enet.bespin.org/</a></p>
<p>It implements a reliability layer atop UDP and is easy to work with.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/9</link>
        <pubDate>Sun, 28 Aug 2011 00:27:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-9</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>Generally speaking, you should make use of UDP regardless. There are some games that use TCP for networking (Runescape, World of Warcraft iirc, etc), but it’s largely a mistake in my opinion.</p>
<p>As you’ve mentioned, two big problems with UDP are reliability and the order in which packets are received.<br>
This blog (<a href="http://gafferongames.com/networking-for-game-programmers" rel="nofollow noopener">http://gafferongames.com/networking-for-game-programmers</a>), written by a guy called Glenn Fiedler, provides an excellent overview of how to make use of UDP in a game.<br>
He covers things such as reliability (ensuring packets arrive if they’re high-priority packets, for example) and flow control (not flooding a connection with too many packets) among other things.</p>
<p>Definitely read it, because his tutorials are excellent.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/8</link>
        <pubDate>Sun, 28 Aug 2011 00:16:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-8</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@Daniel8 Daniel™]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daniel8">@Daniel8</a> wrote:</p>
          <blockquote>
              <p>Thanks for the speech, teach!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/7</link>
        <pubDate>Thu, 25 Aug 2011 00:58:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-7</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:5, topic:411332”]I’d tell you a UDP joke, but you might not get it.[/quote]rofl</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/6</link>
        <pubDate>Mon, 22 Aug 2011 22:44:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-6</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>I’d tell you a UDP joke, but you might not get it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/5</link>
        <pubDate>Mon, 22 Aug 2011 22:37:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-5</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>note: you can combine the two, as WoW does (UDP for movement related shit afaik; TCP for player details like items, looks etc.)</p>
<p>also you may want to go into detail about making udp more reliable (ordering and queueing, verifying data integrity etc.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/4</link>
        <pubDate>Sun, 21 Aug 2011 14:48:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-4</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@Morx Morx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/morx">@Morx</a> wrote:</p>
          <blockquote>
              <p>Thanks for this, helped me out abit.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/3</link>
        <pubDate>Sun, 21 Aug 2011 06:21:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-3</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@Racist_Turtle Racist Turtle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/racist_turtle">@Racist_Turtle</a> wrote:</p>
          <blockquote>
              <p>Very good tutorial, I’ve had not much practice with networking, and this cleared things up a bit for me between the different between user datagram protocol and transmission control protocol. Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/2</link>
        <pubDate>Sun, 21 Aug 2011 06:06:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-2</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
      <item>
        <title>UDP vs TCP</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>Since these two types of connection would be used in networking a game, I am going to explain them in some good detail. In case you didn’t know, RuneScape was networked using TCP.</p>
<p>[hr]</p>
<p>[size=12pt]<span class="bbcode-b">User Datagram Protocol (UDP)</span>[/size]</p>
<p><span class="bbcode-b">Features and Flaws</span></p>
<p>[ul][li]<span class="bbcode-i">Lightweight</span> - It is incredibly lightweight, due to the fact that complicated information checking is not being used, the messages sent aren’t ordered, and by default, no connections are tracked.[/li]<br>
[li]<span class="bbcode-i">Lower Latency</span> - UDP introduces protocol ‘features’ for lower latency.[/li]<br>
[li]<span class="bbcode-i">Simply Quality Checks</span> - Information received are checked for quality, meaning that the information received can be judged accordingly.[/li]<br>
[li]<span class="bbcode-i">Updates</span> - With newer networking hardware, UDP is becoming more and more reliable, but it definitely isn’t as good as TCP.[/li]<br>
[li]<span class="bbcode-i">Flexibility</span> - It allows it’s own form of application error control.[/li]<br>
[li]<span class="bbcode-i">Unreliable</span> - It is almost like shooting something at a relatively long distance… Once the shot has been taken, there is no guarantee that the bullet will hit.[/li]<br>
[li]<span class="bbcode-i">Unordered</span> - For example, when two pieces of information are sent, the second message may overtake the first one, and be presented first.[/li]<br>
[li]<span class="bbcode-i">Server Checks</span> - UDP has a tendency of not dropping connections when the situation calls for it, so checking for client disconnections are key.[/li]<br>
[li]<span class="bbcode-i">Size Limitation</span> - 64k is all that UDP can handle at once, so you may need to work with that.[/li]<br>
[li]<span class="bbcode-i">No Establishing Connection</span> - UDP jumps right into sending and receiving useful data from the server and client, rather than having a three-way handshake.[/li]<br>
[li]<span class="bbcode-i">Extra Work</span> - There may be quite a bit of extra work making this secure, reliable and controlled. It may be worth it though.[/li][/ul]</p>
<p><span class="bbcode-b">Example</span><br>
This is a very simple example which can only hold one client, and can only receive a single message before closing.</p>
<pre><code class="lang-auto">import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;

/**
 * This is an extremely simple example on how a UDP client and
 * server would work. Server and client in one.
 * @author Andrew
 */
public class Engine implements Runnable {

    /**
     * We are going to create a new thread for the server to run
     * off first, since the client cannot be ran, connecting to
     * a non-existent server. The client is than ran on the
     * original thread.
     * @param args The command line arguments.
     */
    public static void main(String args[]) {
        new Thread(new Engine()).start();
        new Engine().runClient();
    }

    /**
     * It's pretty simple. All we need to do is create a datagram
     * socket, a packet (which holds the byte'ed message) &amp; length,
     * and send the packet over the socket.
     */
    public void runClient() {
        try {
            DatagramSocket clientSocket = new DatagramSocket();
            byte str[] = "hello, this is the message".getBytes();
            System.out.println("[client] Sending data!");
            DatagramPacket sendPacket = new DatagramPacket(str, str.length, InetAddress.getByName("127.0.0.1"), 5555);
            clientSocket.send(sendPacket);
            System.out.println("[client] Sent data!");
            clientSocket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Very simple too. We need to create a datagram socket, connecting
     * to a specific port, create a new byte[1024] for each message
     * we will receive, and make the datagram socket read onto a new
     * datagram packet (which has the size of the bytes create, and
     * is holding the bytes to be written to).
     */
    @Override
    public void run() {
        try {
            DatagramSocket dataSocket = new DatagramSocket(5555);
            byte[] input = new byte[1024];
            DatagramPacket receivePacket = new DatagramPacket(input, input.length);
            System.out.println("[server] Getting datagram packet!");
            dataSocket.receive(receivePacket);
            String str = new String(receivePacket.getData());
            System.out.println("[server] Message: " + str);
            dataSocket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}</code></pre>
<p>[hr]</p>
<p>[size=12pt]<span class="bbcode-b">Transmission Control Protocol (TCP)</span>[/size]</p>
<p><span class="bbcode-b">Features and Flaws</span></p>
<p>[ul][li]<span class="bbcode-i">Very Reliable</span> - What is sent is almost guaranteed to be received.[/li]<br>
[li]<span class="bbcode-i">Ordered</span> - Packets that are send are received in the same order they were sent.[/li]<br>
[li]<span class="bbcode-i">Server Checks</span> - You will not need to check for dropped connections, since this is automatically done. You should, though.[/li]<br>
[li]<span class="bbcode-i">Size Limitation</span> - Has a rather large size limitation (in the megabytes). Although this shouldn’t be done, it’s possible.[/li]<br>
[li]<span class="bbcode-i">Congestion Control </span>- This is automatically supported with TCP, whereas UDP doesn’t support it.[/li]<br>
[li]<span class="bbcode-i">Data Duplication</span> - This is detected by TCP![/li]<br>
[li]<span class="bbcode-i">Error Checking</span> - It supply’s error checking.[/li]<br>
[li]<span class="bbcode-i">Three-way Handshake</span> - Both a good and bad point! Although it ensures the connection is legit, etc, it also introduces a higher connection latency.[/li]<br>
[li]<span class="bbcode-i">Latency</span> - Due to the large amount of features provided by TCP (overhead), latency can be quite high; much higher than UDP![/li]<br>
[li]<span class="bbcode-i">Heavyweight</span> - Has to use much more resources than UDP.[/li][/ul]</p>
<p><span class="bbcode-b">Example</span><br>
This example also is very simple, and can also only hold one client and can only send / receive one message.</p>
<pre><code class="lang-auto">import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;

/**
 * This is an extremely simple example on how a TCP client and
 * server would work. Server and client in one.
 * @author Andrew
 */
public class Engine implements Runnable {

    /**
     * We are going to create a new thread for the server to run
     * off first, since the client cannot be ran, connecting to
     * a non-existent server. The client is than ran on the
     * original thread.
     * @param args The command line arguments.
     */
    public static void main(String args[]) {
        new Thread(new Engine()).start();
        new Engine().runClient();
    }

    /**
     * All we need to do is create a new socket which the IP of
     * the server we are connecting to, followed by the port.
     * Than, we create a bufferedwriter which writes to the
     * sockets outputstream, which can be read by the server.
     */
    public void runClient() {
        try {
            Socket socket = new Socket("127.0.0.1", 5555);
            System.out.println("[client] Connected, sending string!");
            BufferedWriter buf = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));
            buf.write("This is the string to send!");
            buf.close();
            socket.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * We create a server socket on the port of our choice (the
     * client needs to be connecting to this port), than we
     * set a new socket as the connection the server *first*
     * accepts. We than create a bufferedreader to read the
     * sockets inputstream (where the message can be read),
     * and we simply read it!
     */
    @Override
    public void run() {
        try {
            ServerSocket server = new ServerSocket(5555);
            Socket socket = server.accept();
            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            System.out.println("[server] Message: " + input.readLine());
            socket.close();
            server.close();
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }
}</code></pre>
<p>[hr]</p>
<p>To put it simply, if you’re creating a game which needs fast reactions (such as COD), than you should use UDP. If you’re creating a game which can afford to have a larger amount of latency, and needs extra features to keep the packets in a perfect condition, than you should choose TCP.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/udp-vs-tcp/411332/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/udp-vs-tcp/411332/1</link>
        <pubDate>Sun, 21 Aug 2011 05:23:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-411332-1</guid>
        <source url="https://forum.moparisthebest.com/t/udp-vs-tcp/411332.rss">UDP vs TCP</source>
      </item>
  </channel>
</rss>
