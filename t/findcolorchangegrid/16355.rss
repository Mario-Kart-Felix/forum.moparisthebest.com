<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FindColorChangeGrid</title>
    <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355</link>
    <description>Cliffnotes version: I made this procedure that creates a grid of points in a box and monitors them for color changes. Tell me what you think.

History: I was fighting a monster and spent a while trying to find a world where no one else was doing the same. A few minutes after I finally did, someone else came and was right clicking it and choosing attack faster than me, so I didn&#39;t get my kill, and more importantly the drops. So I made a script to do it for me (just the right clicking it and choosing attack when it appears, I didn&#39;t leave it alone). I tried findcolor and popup, and about 4 other methods, but they either didn&#39;t work properly or were too slow(even after changing mousespeed in srl.scar). Then I realised, I don&#39;t need to find the monster when it appears, I know the general area where it will appear, I jsut need to know when it appears. So I wrote a script that created 5 points (1 was the mouse point, the other 4 created a square around it with the mouse point being in the center) and checked when the color changed (not to any specific color of the monster, just a color different to what it started as). Then it right clicked at the point that changed and choose attack (by going 50 or so pixels lower instead of popup etc but that&#39;s not the point). This worked very well. I expanded on the checking points for color changes instead of looking at every pixel and created FindColorChangeGrid.

Info: FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer)  sets up a box with the top left point being x1,y1 and the bottom right being x2,y2. It then sets up a grid of points d distance apart (NOTE: in case of having a width of say 100 and having a d of 26 you would have a left over of 22 which is not enough for another point, so it put another point at the end anyway so that 22 is not wasted, same goes for height). It will then remember the color at each of these points and then continuely check each one to see if the color changes. Once it finds a change, it checks whether it should ignore the change (see next paragraph) and if it should ignore it, it continues checking, otherwise it sets srl global x and y to the point where it found the change, and heracles2 global FCCGfound to true (to be used in failsafes to let the script it didn&#39;t work). If it doesn&#39;t find a change after giveuptime ms it will set FCCGfound to false and exit. The script can now do an action (such as right click and attack) at x,y (or if it didn&#39;t work change the parameters and try again etc). 

FindColorChangeGridEx(xposex,yposex,which:integer):boolean defines what changes FindColorChangeGrid (FCCG) should ignore. It is put in the script and lets the scripter make custom exceptions. It allows for multiple exceptions which can be choosen in WhichEx in FCCG. The parameters all come from FCCG and are not changed. What the scripter can change is adding branches to the case of, each branch being an exception. For FCCG to ignore a change at a point FindColorChangeGridEx must return false at that point. 

It is pretty fast at finding things that move or appear/spawn. A drawback is the hassle of putting FindColorChangeGridEx in the top of the script. Also, the include that it is contained in can only be included if you are going to use it, (therefore no other procs/funcs can be in the same include) due to the forward of FindColorChangeGridEx. Also, it probably has more false positives than other methods (this depends on how good your exceptions are). Trees and mining rocks coming back, enemies and drops respawning come to mind as uses. Walking etc obviously not. Perhaps for randoms but probably not. 


So how can I improve it? 
Also I know the instructions aren&#39;t great, it&#39;s hard for me to write because I already know it in my head and I don&#39;t want to write a whole tutorial on 1 procedure. So any tips on that would be great too.
Questions/comments/suggestions?
Sorry for the long post, thanks for reading.



 


There it is

[scar]
{Save as Heracles2.scar in includes folder}

{.include srl\srl.scar}

//Contents
//FindColorChangeGrid

var FCCGfound:boolean;
//**************************************************
//procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer); By Boreas
//Checks a grid of points in a box for color changes
//will set x and y to point where color changes,
//x1,y1 is top left corner of box and x2,y2 is bottom right of box to scan
//d is the distance between points
//will give up after giveuptime (ms) and make detectorfound false
//whichex is which exception to use (you must set this in FindColoChangeGridEx first)
//put 1 for no exceptions
//will set de
{Note to scripters: If you don&#39;t do this you will get errors!!

Copy between the ---- lines and paste in procedure section of
your script. Then edit the case section to have more exceptions.
XPosEx, and YPosEx are the coords of a change FindColorChangeGrid found.
For example, if you want it to ignore changes in a certain box, add 2: to
the case part and make result false when xposex,yposex is in the box. When you
want to use FindColorChangeGrid and ignore that box, put 2 for WhichEx
If you don&#39;t want any exceptions you still have to copy as it is before you
can call FindColorChangeGrid
-------------------------------------------------
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;
begin
case which of
  //This is for when you want no exceptions in the box    //
  1:                                                      //
    begin                                                 //
      if (xposex = xposex) and (yposex=yposex) then       //
      result:=true;                                       //
    end;                                                  //
  //add more exceptions here

  else writeln(&#39;Error in detector exceptions&#39;);
  end;
end;
-------------------------------------------------------------}
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean; forward;

procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, whichex: integer);
var
  a, b, sttime,currentrow, goat, goat1, currentcolumn, numberacross, numberdown, numberofpoints, hat: Integer;
  points,xpos,ypos: array of Integer;
  found:boolean;
begin
//------------ Finds number across
  hat := 0;
  numberacross := 1;
  repeat
    hat := hat + d;
    numberacross := numberacross + 1;
  until (hat &gt;= (x2 - x1));
//----------------------------------
//------------ Finds number down
  hat := 0;
  numberdown := 1;
  repeat
    hat := hat + d;
    numberdown := numberdown + 1;
  until (hat &gt;= (y2 - y1));
//----------------------------------
//---------Sets number of points
  numberofpoints := numberacross * numberdown;
  Setarraylength(points, numberofpoints+1);
  Setarraylength(xpos, numberofpoints+1);
  Setarraylength(ypos, numberofpoints+1);

//----------------------------------
//--------------Sets points
  repeat
    currentcolumn := (0-1);
    repeat
      currentcolumn := currentcolumn + 1;
      goat := goat + 1;
      xpos[goat] := x1 + (d*currentcolumn);
      ypos[goat] := y1 + (d*currentrow);
    until currentcolumn=(numberacross-2);
    goat:=goat+1;
    xpos[goat] := x2;
    ypos[goat] := (y1+(d*currentrow));
    currentrow := currentrow + 1;
  until currentrow = (numberdown-1);
  currentcolumn :=0;
  repeat
    goat := goat + 1;
    xpos[goat]:=(x1+(d*currentcolumn));
    ypos[goat]:=y2;
    currentcolumn := currentcolumn + 1;
  until (currentcolumn=numberacross-1);
  goat := goat + 1;
  xpos[goat] := x2;
  ypos[goat] := y2;
//----------------------------------
////-----------------test --------------------- //Unblank this section to
//repeat                                        //make the points on paint.
//goat1:=goat1+1;                               //
//clickmouse(xpos[goat1],ypos[goat1],true);     //
//until goat1=numberofpoints;                             //
////--------------------------------------------//
//-------------------callibrate colors
goat1:=0
repeat
goat1 := goat1 + 1;
points[goat1] := getcolor(xpos[goat1],ypos[goat1]);
until goat1=numberofpoints;
//------------------------------------------
//-----------------check colors
b:=-1;
sttime := getsystemtime;
repeat
  b:=b+1;
  a:= (b mod numberofpoints)+1;
  if ((not(getcolor(xpos[a],ypos[a])=points[a])) and (FindColorChangeGridEx(xpos[a],ypos[a],whichex)))then
  begin
    x := xpos[a];
    y := ypos[a];
    found:=true;
    FCCGfound:=true;
  end else FCCGfound:=false;
 until (found) or ((getsystemtime-sttime)&gt;=giveuptime);
//------------------------------------
end;
//************************************************************[/scar]


A little test
[scar]program FCCGTest;
{.include heracles2.scar}
// use it in paint
//unblank the test section in the heracles2.scar to actually where the points
//are. select the paintbrush and a color. run. it will make the points in
//that color. then change colors and move the mouse across the screen







function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;
begin
case which of
  //This is for when you want no exceptions in the box    //
  1:                                                      //
    begin                                                 //
      if (xposex = xposex) and (yposex=yposex) then       //
      result:=true;                                       //
    end;                                                  //
  //add more exceptions here

  else writeln(&#39;Error in detector exceptions&#39;);
  end;
end;
begin
  cleardebug;
  FindColorChangeGrid(15, 15, 516, 338, 20, 10000,1);
  clickmouse(x,y,true);
end.[/scar]</description>
    
    <lastBuildDate>Wed, 11 Oct 2006 02:28:47 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Weibs Weibs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weibs">@Weibs</a> wrote:</p>
          <blockquote>
              <p>I think its a great procedure. Very creative. <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"> It would be good for checking for spawns, or reappearing monsters, or even waiting for a rock/tree to come back.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/6</link>
        <pubDate>Wed, 11 Oct 2006 02:28:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-6</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Boreas Boreas]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boreas">@Boreas</a> wrote:</p>
          <blockquote>
              <p>Thanks Ron. I just wanted to test it out here first because I’m worried that it will be a pain in the ass. It has to have it’s own include, be the only thing on that include, and that include can only be included when you’re going to use it. Plus you have to put the exception function in the script. You have to do all of that to not get a forward error. So it’s a little awkward to use.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/5</link>
        <pubDate>Tue, 10 Oct 2006 19:53:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-5</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>You should <span class="bbcode-b">definitely</span> send this to SRL.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/4</link>
        <pubDate>Mon, 09 Oct 2006 20:18:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-4</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Boreas Boreas]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boreas">@Boreas</a> wrote:</p>
          <blockquote>
              <p>Thanks, let me know what you think, especially about the ease of use.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/3</link>
        <pubDate>Mon, 09 Oct 2006 03:46:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-3</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Infintry001 Infintry001]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/infintry001">@Infintry001</a> wrote:</p>
          <blockquote>
              <p>wow thats pretty cool! i havnet tested it yet, but thats a neat little function</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/2</link>
        <pubDate>Sun, 08 Oct 2006 18:05:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-2</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
      <item>
        <title>FindColorChangeGrid</title>
        <dc:creator><![CDATA[@Boreas Boreas]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/boreas">@Boreas</a> wrote:</p>
          <blockquote>
              <p>Cliffnotes version: I made this procedure that creates a grid of points in a box and monitors them for color changes. Tell me what you think.</p>
<p>History: I was fighting a monster and spent a while trying to find a world where no one else was doing the same. A few minutes after I finally did, someone else came and was right clicking it and choosing attack faster than me, so I didn’t get my kill, and more importantly the drops. So I made a script to do it for me (just the right clicking it and choosing attack when it appears, I didn’t leave it alone). I tried findcolor and popup, and about 4 other methods, but they either didn’t work properly or were too slow(even after changing mousespeed in srl.scar). Then I realised, I don’t need to find the monster when it appears, I know the general area where it will appear, I jsut need to know when it appears. So I wrote a script that created 5 points (1 was the mouse point, the other 4 created a square around it with the mouse point being in the center) and checked when the color changed (not to any specific color of the monster, just a color different to what it started as). Then it right clicked at the point that changed and choose attack (by going 50 or so pixels lower instead of popup etc but that’s not the point). This worked very well. I expanded on the checking points for color changes instead of looking at every pixel and created FindColorChangeGrid.</p>
<p>Info: FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer)  sets up a box with the top left point being x1,y1 and the bottom right being x2,y2. It then sets up a grid of points d distance apart (NOTE: in case of having a width of say 100 and having a d of 26 you would have a left over of 22 which is not enough for another point, so it put another point at the end anyway so that 22 is not wasted, same goes for height). It will then remember the color at each of these points and then continuely check each one to see if the color changes. Once it finds a change, it checks whether it should ignore the change (see next paragraph) and if it should ignore it, it continues checking, otherwise it sets srl global x and y to the point where it found the change, and heracles2 global FCCGfound to true (to be used in failsafes to let the script it didn’t work). If it doesn’t find a change after giveuptime ms it will set FCCGfound to false and exit. The script can now do an action (such as right click and attack) at x,y (or if it didn’t work change the parameters and try again etc).</p>
<p>FindColorChangeGridEx(xposex,yposex,which:integer):boolean defines what changes FindColorChangeGrid (FCCG) should ignore. It is put in the script and lets the scripter make custom exceptions. It allows for multiple exceptions which can be choosen in WhichEx in FCCG. The parameters all come from FCCG and are not changed. What the scripter can change is adding branches to the case of, each branch being an exception. For FCCG to ignore a change at a point FindColorChangeGridEx must return false at that point.</p>
<p>It is pretty fast at finding things that move or appear/spawn. A drawback is the hassle of putting FindColorChangeGridEx in the top of the script. Also, the include that it is contained in can only be included if you are going to use it, (therefore no other procs/funcs can be in the same include) due to the forward of FindColorChangeGridEx. Also, it probably has more false positives than other methods (this depends on how good your exceptions are). Trees and mining rocks coming back, enemies and drops respawning come to mind as uses. Walking etc obviously not. Perhaps for randoms but probably not.</p>
<p>So how can I improve it?<br>
Also I know the instructions aren’t great, it’s hard for me to write because I already know it in my head and I don’t want to write a whole tutorial on 1 procedure. So any tips on that would be great too.<br>
Questions/comments/suggestions?<br>
Sorry for the long post, thanks for reading.</p>
<p>There it is</p>
<p>[scar]<br>
{Save as Heracles2.scar in includes folder}</p>
<p>{.include srl\srl.scar}</p>
<p>//Contents<br>
//FindColorChangeGrid</p>
<p>var FCCGfound:boolean;<br>
//**************************************************<br>
//procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, WhichEx: integer); By Boreas<br>
//Checks a grid of points in a box for color changes<br>
//will set x and y to point where color changes,<br>
//x1,y1 is top left corner of box and x2,y2 is bottom right of box to scan<br>
//d is the distance between points<br>
//will give up after giveuptime (ms) and make detectorfound false<br>
//whichex is which exception to use (you must set this in FindColoChangeGridEx first)<br>
//put 1 for no exceptions<br>
//will set de<br>
{Note to scripters: If you don’t do this you will get errors!!</p>
<h2>Copy between the ---- lines and paste in procedure section of<br>
your script. Then edit the case section to have more exceptions.<br>
XPosEx, and YPosEx are the coords of a change FindColorChangeGrid found.<br>
For example, if you want it to ignore changes in a certain box, add 2: to<br>
the case part and make result false when xposex,yposex is in the box. When you<br>
want to use FindColorChangeGrid and ignore that box, put 2 for WhichEx<br>
If you don’t want any exceptions you still have to copy as it is before you<br>
can call FindColorChangeGrid</h2>
<p>function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;<br>
begin<br>
case which of<br>
//This is for when you want no exceptions in the box    //<br>
1:                                                      //<br>
begin                                                 //<br>
if (xposex = xposex) and (yposex=yposex) then       //<br>
result:=true;                                       //<br>
end;                                                  //<br>
//add more exceptions here</p>
<p>else writeln(‘Error in detector exceptions’);<br>
end;<br>
end;<br>
-------------------------------------------------------------}<br>
function FindColorChangeGridEx(xposex,yposex,which:integer):boolean; forward;</p>
<p>procedure FindColorChangeGrid(x1, y1, x2, y2, d, giveuptime, whichex: integer);<br>
var<br>
a, b, sttime,currentrow, goat, goat1, currentcolumn, numberacross, numberdown, numberofpoints, hat: Integer;<br>
points,xpos,ypos: array of Integer;<br>
found:boolean;<br>
begin<br>
//------------ Finds number across<br>
hat := 0;<br>
numberacross := 1;<br>
repeat<br>
hat := hat + d;<br>
numberacross := numberacross + 1;<br>
until (hat &gt;= (x2 - x1));<br>
//----------------------------------<br>
//------------ Finds number down<br>
hat := 0;<br>
numberdown := 1;<br>
repeat<br>
hat := hat + d;<br>
numberdown := numberdown + 1;<br>
until (hat &gt;= (y2 - y1));<br>
//----------------------------------<br>
//---------Sets number of points<br>
numberofpoints := numberacross * numberdown;<br>
Setarraylength(points, numberofpoints+1);<br>
Setarraylength(xpos, numberofpoints+1);<br>
Setarraylength(ypos, numberofpoints+1);</p>
<p>//----------------------------------<br>
//--------------Sets points<br>
repeat<br>
currentcolumn := (0-1);<br>
repeat<br>
currentcolumn := currentcolumn + 1;<br>
goat := goat + 1;<br>
xpos[goat] := x1 + (d<em>currentcolumn);<br>
ypos[goat] := y1 + (d</em>currentrow);<br>
until currentcolumn=(numberacross-2);<br>
goat:=goat+1;<br>
xpos[goat] := x2;<br>
ypos[goat] := (y1+(d<em>currentrow));<br>
currentrow := currentrow + 1;<br>
until currentrow = (numberdown-1);<br>
currentcolumn :=0;<br>
repeat<br>
goat := goat + 1;<br>
xpos[goat]:=(x1+(d</em>currentcolumn));<br>
ypos[goat]:=y2;<br>
currentcolumn := currentcolumn + 1;<br>
until (currentcolumn=numberacross-1);<br>
goat := goat + 1;<br>
xpos[goat] := x2;<br>
ypos[goat] := y2;<br>
//----------------------------------<br>
////-----------------test --------------------- //Unblank this section to<br>
//repeat                                        //make the points on paint.<br>
//goat1:=goat1+1;                               //<br>
//clickmouse(xpos[goat1],ypos[goat1],true);     //<br>
//until goat1=numberofpoints;                             //<br>
////--------------------------------------------//<br>
//-------------------callibrate colors<br>
goat1:=0<br>
repeat<br>
goat1 := goat1 + 1;<br>
points[goat1] := getcolor(xpos[goat1],ypos[goat1]);<br>
until goat1=numberofpoints;<br>
//------------------------------------------<br>
//-----------------check colors<br>
b:=-1;<br>
sttime := getsystemtime;<br>
repeat<br>
b:=b+1;<br>
a:= (b mod numberofpoints)+1;<br>
if ((not(getcolor(xpos[a],ypos[a])=points[a])) and (FindColorChangeGridEx(xpos[a],ypos[a],whichex)))then<br>
begin<br>
x := xpos[a];<br>
y := ypos[a];<br>
found:=true;<br>
FCCGfound:=true;<br>
end else FCCGfound:=false;<br>
until (found) or ((getsystemtime-sttime)&gt;=giveuptime);<br>
//------------------------------------<br>
end;<br>
//************************************************************[/scar]</p>
<p>A little test<br>
[scar]program FCCGTest;<br>
{.include heracles2.scar}<br>
// use it in paint<br>
//unblank the test section in the heracles2.scar to actually where the points<br>
//are. select the paintbrush and a color. run. it will make the points in<br>
//that color. then change colors and move the mouse across the screen</p>
<p>function FindColorChangeGridEx(xposex,yposex,which:integer):boolean;<br>
begin<br>
case which of<br>
//This is for when you want no exceptions in the box    //<br>
1:                                                      //<br>
begin                                                 //<br>
if (xposex = xposex) and (yposex=yposex) then       //<br>
result:=true;                                       //<br>
end;                                                  //<br>
//add more exceptions here</p>
<p>else writeln(‘Error in detector exceptions’);<br>
end;<br>
end;<br>
begin<br>
cleardebug;<br>
FindColorChangeGrid(15, 15, 516, 338, 20, 10000,1);<br>
clickmouse(x,y,true);<br>
end.[/scar]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findcolorchangegrid/16355/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findcolorchangegrid/16355/1</link>
        <pubDate>Wed, 27 Sep 2006 22:49:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-16355-1</guid>
        <source url="https://forum.moparisthebest.com/t/findcolorchangegrid/16355.rss">FindColorChangeGrid</source>
      </item>
  </channel>
</rss>
