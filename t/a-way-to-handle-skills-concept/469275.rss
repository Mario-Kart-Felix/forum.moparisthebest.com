<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A way to handle skills (Concept)</title>
    <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275</link>
    <description>I know there are better ways. This is just one way that came to my head.

Okay, let&#39;s say we are using a clean PI. Lets make a package for skills. In there, make the handlers and constants and stuff. You know, usual things. Now, in there, make a class named Skill.java. Skill.java will handle all your skills (Like by how the actions are performed). So, let&#39;s fill up the file.

[code=java]
package server.model.skills;

/**
 * All the skills layout for seperating actions performed in the skills.
 *
 * @author Arham 4
 *
 */
public abstract class Skill {
	/**
	 * Handling a skill is seperated via the string section.
	 * @section 
	 *		handles the actions for the skill
	 */
	public static abstract void handleSkill(String section);

}
[/code]

Now, lets make us a simple Crafting skill. My way of doing it is making a whole new package for the skill, but it&#39;s your choice.

Crafting.java
[code=java]
package server.model.skills.crafting;

import server.model.skills.Skill;

/**
 * Handles the actions of the skill Crafting.
 *
 * @author Arham 4
 *
 */
public class Crafting extends Skill {
	@Override
	public static void handleSkill(String section) {
		if (section = &quot;gemCrafting&quot;)
			GemCrafting.initialize();
	}
}
[/code]

Notice

[code=java]
		if (section = &quot;gemCrafting&quot;)
			GemCrafting.initialize();
[/code]

CraftingData.java
[code=java]
package server.model.skills.CraftingData;

/**
 * Handles the data of the skill Crafting.
 *
 * @author Arham 4
 *
 */
public enum CraftingData {
	SAPPHIRE(1623, 1607, 20, 50);

	private int uncutID, cutID, levelRequired;
	private double expGiven;

	CraftingData(int uncutID, int cutID, int levelRequired, double expGiven) {
		this.uncutID = uncutID;
		this.cutID = cutID;
		this.levelRequired = levelRequired;
		this.expGiven = expGiven;
	}

	public int getUncutID() {
		return uncutID;
	}

	public int getCutID() {
		return cutID;
	}

	public int getLevelRequired() {
		return levelRequired;
	}

	public double getExpGiven() {
		return expGiven;
	}
}
[/code]

CraftingGems.java
[code=java]
package server.model.skills.crafting;

import server.model.player.Client;
import server.model.skills.SkillConstants;
import server.model.skills.crafting.CraftingData;

/**
 * Handles the action of skill Crafting called gem crafting.
 *
 * @author Arham 4
 *
 */
public class CraftingGems extends CraftingData {

	Client c;
	CraftingData cd;

	public CraftingGems(Client c) {
		this.c = c;
	}

	public void initialize() {
		if (c.skillLevel[SkillConstants.CRAFTING] &gt;= cd.getLevelRequired())
			startCrafting();
		else
			c.sendMessage(&quot;You need a level of &quot;+cd.getLevelRequired+&quot; to craft this gem.&quot;);
	}

	private void startCrafting() {
		c.getItems().deleteItem(cd.getUncutID(), 1);
		c.startAnimation(885);
		c.getItems().addItem(cd.getCutID(), 1);
		c.getPA().addSkillXP(cd.getExpGiven(), SkillConstants.CRAFTING);
	}
}
[/code]

And also, if your wondering about the section thing. The section is described in the packet. So, I go to ItemOnItem and do,

[code=java]
if (blah == blah)
	Crafting.handleSkill(&quot;craftingGems&quot;);
[/code]</description>
    
    <lastBuildDate>Thu, 22 Nov 2012 16:26:27 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>Thanks for the advice relax <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/10</link>
        <pubDate>Thu, 22 Nov 2012 16:26:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-10</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@relexlawl relexlawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/relexlawl">@relexlawl</a> wrote:</p>
          <blockquote>
              <p>Why make it abstract when you’re only going to make 1 abstract method, should be interface if anything.</p>
<p>But you were going in the right direction, something like this should in fact be abstract, but something more along the lines of:</p>
<p>The point of abstraction and OOP is basically to make it a lot cleaner, easier to use and to not have to over-write things that generally do the same thing (in this case harvesting skills such as woodcutting, fishing, mining, etc), since they have the same process, click on entity (object or npc [fishing]), random timer sets off, when timer is 0 player harvests an item, repeat.</p>
<p>[code]package org.xithyl.skills;</p>
<p>import org.xithyl.model.Animation;<br>
import org.xithyl.model.Character.WalkingState;<br>
import org.xithyl.model.Entity;<br>
import org.xithyl.model.GameObject;<br>
import org.xithyl.model.Item;<br>
import org.xithyl.model.Player;<br>
import org.xithyl.model.Position;<br>
import org.xithyl.model.World;<br>
import org.xithyl.model.Skills.Skill;<br>
import org.xithyl.model.event.Event;</p>
<p>/**</p>
<ul>
<li>Manages all skills that are categorized as being harvested, such as mining, woodcutting,</li>
<li>fishing, and so on.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Relex lawl / iRageQuit2012</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public abstract class HarvestAction {</p>
<pre><code>/**
 * Initializes the harvest event.
 */
public abstract boolean init(Player player, Entity entity);

/**
 * Gets the skill player is training/harvesting.
 */
public abstract Skill getSkill();

/**
 * Gets the amount of experience per harvest player will receive.
 */
public abstract int getExperience();

/**
 * Gets the animation object.
 */
public abstract Animation getAnimation();

/**
 * Gets the reward item instance that player will harvest.
 */
public abstract Item getReward();

/**
 * Gets the message player receives upon harvest action.
 */
public abstract String getHarvestMessage();

/**
 * Gets the reward message.
 */
public abstract String getRewardMessage();

/**
 * Checks if player will get periodic rewards over time, such as in woodcutting and fishing.
 */
public abstract boolean consecutiveRewards();

/**
 * Gets the cycles player needs to wait to get rewarded.
 */
public abstract int getCycles(Player player);

/**
 * Gets the total amount of harvested items to be given.
 */
public abstract int getHarvestAmount();

/**
 * Gets the new object to replace old object, such as stomps for trees.
 */
public abstract GameObject getNewObject();

/**
 * The harvest source's position.
 */
private Position position;

/**
 * Gets the source's position.
 * @return	position.
 */
public Position getPosition() {
	return position;
}

/**
 * Executes the harvest action.
 * @param player	Player trying to harvest.
 * @param entity	Entity being clicked upon.
 */
public void execute(final Player player, final Entity entity) {
	if (player.getInventory().isFull()) {
		player.getPacketSender().sendMessage("Not enough inventory space.");
		return;
	}
	if (!init(player, entity)) {
		return;
	}
	this.position = entity.getPosition();
	player.performAnimation(getAnimation());
	player.setFacePosition(entity.getPosition());
	player.getPacketSender().sendMessage(getHarvestMessage());
	World.getWorld().submit(new Event(600) {
		int rewardTime = getCycles(player), harvest = getHarvestAmount();
		@Override
		public void execute() {
			if (!player.getWalkingState().equals(WalkingState.NOT_WALKING) || !init(player, entity)) {
				stop();
				return;
			}
			if (rewardTime &gt; 0) {
				rewardTime--;
			} else {
				player.performAnimation(getAnimation());
				player.setFacePosition(entity.getPosition());
				if (player.getInventory().isFull()) {
					player.getPacketSender().sendMessage("Not enough inventory space.");
					stop();
				} else {
					harvest--;
					player.getInventory().add(getReward());
					player.getSkills().addExperience(getSkill().ordinal(), getExperience());
					player.getPacketSender().sendMessage(getRewardMessage());
					if (consecutiveRewards() &amp;&amp; harvest &gt; 0)
						rewardTime = getCycles(player);
					else {
						if (entity instanceof GameObject)
							replaceObject((GameObject) entity);
						stop();
					}
				}
			}
		}
	});
}

/**
 * Replaces an object with a new object.
 * @param object		Object to replace.
 */
private void replaceObject(GameObject object) {
	final GameObject oldObject = object;
	final GameObject newObject = getNewObject();
	for (Player players : object.getRegion().getPlayers()) {
		if (players != null) {
			final Player player = players;
			player.getPacketSender().removeObject(object);
			player.getPacketSender().sendObject(newObject);
			World.getWorld().submit(new Event(2400) {
				@Override
				public void execute() {
					player.getPacketSender().removeObject(newObject);
					player.getPacketSender().sendObject(oldObject);
				}
			});
		}
	}
}
</code></pre>
<p>}[/code]</p>
<p>[code]package org.xithyl.skills.impl;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.xithyl.model.Animation;<br>
import org.xithyl.model.Entity;<br>
import org.xithyl.model.GameObject;<br>
import org.xithyl.model.Item;<br>
import org.xithyl.model.Player;<br>
import org.xithyl.model.Skills.Skill;<br>
import org.xithyl.model.definitions.ItemDefinition;<br>
import org.xithyl.skills.HarvestAction;<br>
import org.xithyl.util.MathUtils;</p>
<p>/**</p>
<ul>
<li>Manages the woodcutting skill.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Relex lawl / iRageQuit2012</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class Woodcutting extends HarvestAction {</p>
<pre><code>private static enum Tree {
	/**
	 * Normal tree.
	 */
	NORMAL(1511, 1, 50, 1276, 1277, 1278, 1279, 1280, 1282, 1283, 1284, 1285, 1286, 1289,
						1290, 1291, 1315, 1316, 1318, 1319, 1330, 1331, 1332, 1365, 1383,
						1384, 2409, 3033, 3034, 3035, 3036, 3881, 3882, 3883, 5902, 5903,
						5904, 38760, 38787, 38785),
	
	/**
	 * Willow tree.
	 */
	WILLOW(1519, 30, 135, 1308, 5551, 5552, 5553, 38616),
	
	/**
	 * Oak tree.
	 */
	OAK(1521, 15, 75, 1281, 3037, 38732),
	
	/**
	 * Magic tree.
	 */
	MAGIC(1513, 75, 500, 1292, 1306),
	
	/**
	 * Maple tree.
	 */
	MAPLE(1517, 45, 200, 1307, 4677),
	
	/**
	 * Mahogany tree.
	 */
	MAHOGANY(6332, 50, 250, 9034),
	
	/**
	 * Teak tree.
	 */
	TEAK(6333, 35, 170, 9036),
	
	/**
	 * Achey tree.
	 */
	ACHEY(2862, 1, 50, 2023),
	
	/**
	 * Yew tree.
	 */
	YEW(1515, 60, 350, 1309);
	
	/**
	 * The tree Object constructor.
	 * @param log			The log id .
	 * @param level 		The required level to cut tree.
	 * @param experience 	The experience per log.
	 * @param objects 		The tree's object ids.
	 */
	private Tree(int log, int level, int experience, int... objects) {
		this.log = log;
		this.level = level;
		this.experience = experience;
		this.objectIds = objects;
	}
	
	/**
	 * The tree's object ids.
	 */
	private int[] objectIds;
	
	/**
	 * The minimum level to cut tree.
	 */
	private int level;
	
	/**
	 * The experience per log given.
	 */
	private int experience;
	
	/**
	 * The log id the tree gives.
	 */
	private int log;
	
	/**
	 * Gets the log item.
	 * @return	new Item(log, 1).
	 */
	public Item getLog() {
		return new Item(log, 1);
	}
	
	/**
	 * Gets the required level to cut tree.
	 * @return	The required level.
	 */
	public int getRequiredLevel() {
		return level;
	}
	
	/**
	 * Gets the experience per log.
	 * @return	experience.
	 */
	public int getExperience() {
		return experience;
	}
	
	/**
	 * A map containing tree ids.
	 */
	private static Map&lt;Integer, Tree&gt; trees = new HashMap&lt;Integer, Tree&gt;();
	
	/**
	 * Populates the tree map.
	 */
	static {
		for(Tree tree : Tree.values()) {
			for(int object : tree.objectIds) {
				trees.put(object, tree);
			}
		}
	}
}

private Tree tree;

private static enum Axe {
	
	/**
	 * Rune axe.
	 */
	RUNE(1359, 41, new Animation(867)),
	
	/**
	 * Adamant axe.
	 */
	ADAMANT(1357, 31, new Animation(869)),
	
	/**
	 * Mithril axe.
	 */
	MITHRIL(1355, 21, new Animation(871)),
	
	/**
	 * Black axe.
	 */
	BLACK(1361, 6, new Animation(873)),
	
	/**
	 * Steel axe.
	 */
	STEEL(1353, 6, new Animation(875)),
	
	/**
	 * Iron axe.
	 */
	IRON(1349, 1, new Animation(877)),
	
	/**
	 * Bronze axe.
	 */
	BRONZE(1351, 1, new Animation(879));
	
	/**
	 * Creates the axe.
	 * @param id The id.
	 * @param level The required level.
	 * @param animation The animation id.
	 */
	private Axe(int id, int level, Animation animation) {
		this.id = id;
		this.level = level;
		this.animation = animation;
	}
	
	/**
	 * The id.
	 */
	private int id;
	
	/**
	 * The level.
	 */
	private int level;
	
	/**
	 * The animation.
	 */
	private Animation animation;
	
	/**
	 * Gets the id.
	 * @return The id.
	 */
	public int getId() {
		return id;
	}
	
	/**
	 * Gets the required level.
	 * @return The required level.
	 */
	public int getRequiredLevel() {
		return level;
	}
	
	/**
	 * Gets the animation id.
	 * @return The animation id.
	 */
	public Animation getAnimation() {
		return animation;
	}
}

private Axe axe;

@Override
public boolean init(Player player, Entity object) {
	for (Axe axe : Axe.values()) {
		if ((player.getInventory().contains(axe.getId()) || player.getEquipment().contains(axe.getId())) &amp;&amp; player.getSkills().getLevelForSkill(Skill.WOODCUTTING) &gt;= axe.getRequiredLevel()) {
			this.axe = axe;
			break;
		}
	}
	if (axe == null) {
		player.getPacketSender().sendMessage("You do not have a hatchet which you have the required level to use.");
		return false;
	}
	tree = Tree.trees.get(object.getIndex());
	if (tree.getRequiredLevel() &gt; player.getSkills().getLevelForSkill(Skill.WOODCUTTING)) {
		player.getPacketSender().sendMessage("You need a woodcutting level of " + tree.getRequiredLevel() + " to chop this tree.");
		return false;
	}
	return true;
}

/**
 * Checks if {@code object} is a tree object.
 * @param object	GameObject to check.
 * @return			GameObject is a cuttable tree.
 */
public static boolean isTree(GameObject object) {
	return Tree.trees.containsKey(object.getDefinition().getId());
}

@Override
public Skill getSkill() {
	return Skill.WOODCUTTING;
}

@Override
public int getExperience() {
	return tree.getExperience();
}

@Override
public Animation getAnimation() {
	return axe.getAnimation();
}

@Override
public Item getReward() {
	return tree.getLog();
}

@Override
public boolean consecutiveRewards() {
	return true;
}

@Override
public int getCycles(Player player) {
	return tree.equals(Tree.NORMAL) ? 1 : MathUtils.random(5);
}

@Override
public String getHarvestMessage() {
	return "You swing your hatchet at the tree.";
}

@Override
public String getRewardMessage() {
	return "You managed to chop down some " + ItemDefinition.forId(tree.getLog().getId()).getName().toLowerCase() + ".";
}

@Override
public int getHarvestAmount() {
	return tree.equals(Tree.NORMAL) ? 1 : MathUtils.random(7);
}

@Override
public GameObject getNewObject() {
	/*
	 * TODO: add individual stump ids to tree enum and replace 1341 with tree.getStump()
	 */
	return new GameObject(1341, getPosition());
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/9</link>
        <pubDate>Thu, 22 Nov 2012 04:57:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-9</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[quote=“arham 4, post:7, topic:469275”]NOTE: You can make it</p>
<pre><code class="lang-auto">public abstract interface</code></pre>
<p>If you’d like to use</p>
<pre><code class="lang-auto">implements</code></pre>
<p>Instead of</p>
<pre><code class="lang-auto">extends</code></pre>
<p>Since you make need to extend another thing.[/quote]<br>
i didn’t know you could have an abstract interface. hm. thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/8</link>
        <pubDate>Thu, 22 Nov 2012 03:41:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-8</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>NOTE: You can make it</p>
<pre><code class="lang-auto">public abstract interface</code></pre>
<p>If you’d like to use</p>
<pre><code class="lang-auto">implements</code></pre>
<p>Instead of</p>
<pre><code class="lang-auto">extends</code></pre>
<p>Since you make need to extend another thing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/7</link>
        <pubDate>Thu, 22 Nov 2012 03:17:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-7</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[quote=“arham 4, post:5, topic:469275”][quote author=Clawz fury link=topic=586388.msg4163768#msg4163768 date=1353436235]<br>
Wow, you’ve really gotten better since you first came arham. (: although this isn’t great and I personally wouldn’t use it, good job &lt;3<br>
[/quote]</p>
<p>Thanks haha. I remember WroldRUINS. You flamed me so hard saying I can’t program ANYTHING.</p>
<aside class="quote">
<blockquote>
<p>this design is overly complex and not very extendable :o</p>
</blockquote>
</aside>
<p>What do you mean?[/quote]<br>
Yeah I know I was such a twat man I’m sorry</p>
<p>I think he meant like, someone using your source would not be able to understand how to use it very well, and the design as a whole is just somewhat confusing. But as he said you can still make improvements and keep the general design, go for it <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/6</link>
        <pubDate>Wed, 21 Nov 2012 11:29:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-6</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="469275">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/team_rocket/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Team_Rocket:</div>
<blockquote>
<p>Utilizing Enums and working on Object Orientation I see. You’re progressing lol.</p>
</blockquote>
</aside>
<p>Yay :).</p>
<aside class="quote quote-modified" data-post="3" data-topic="469275">
<div class="title">
<div class="quote-controls"></div>
 Clawz fury:</div>
<blockquote>
<p>Wow, you’ve really gotten better since you first came arham. (: although this isn’t great and I personally wouldn’t use it, good job &lt;3</p>
</blockquote>
</aside>
<p>Thanks haha. I remember WroldRUINS. You flamed me so hard saying I can’t program ANYTHING.</p>
<aside class="quote" data-post="4" data-topic="469275">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>this design is overly complex and not very extendable :o</p>
</blockquote>
</aside>
<p>What do you mean?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/5</link>
        <pubDate>Wed, 21 Nov 2012 00:20:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-5</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Using strings is a bad idea like this:<br>
[tt]                if (section = “gemCrafting”)<br>
GemCrafting.initialize();[/tt]</p>
<p>Instead, just have another enum:<br>
[tt]enum CraftingType {<br>
GEM_CRAFTING, LEATHER_MAKING<br>
}[/tt]</p>
<p>etc, and then you can use a switch statement:<br>
[tt]        public static void handleSkill(CraftingType section) {<br>
switch(section) {<br>
case GEM_CRAFTING:<br>
GemCrafting.initialize();<br>
break;<br>
}<br>
}[/tt]</p>
<p>However, not to burst any bubbles, but this design is overly complex and not very extendable :o You could make some changes to make it better while keeping the overall design concept though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/4</link>
        <pubDate>Tue, 20 Nov 2012 18:40:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-4</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>Wow, you’ve really gotten better since you first came arham. (: although this isn’t great and I personally wouldn’t use it, good job &lt;3</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/3</link>
        <pubDate>Tue, 20 Nov 2012 18:30:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@Team_Rocket Team_Rocket]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/team_rocket">@Team_Rocket</a> wrote:</p>
          <blockquote>
              <p>Utilizing Enums and working on Object Orientation I see. You’re progressing lol.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/2</link>
        <pubDate>Tue, 20 Nov 2012 10:31:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
      <item>
        <title>A way to handle skills (Concept)</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>I know there are better ways. This is just one way that came to my head.</p>
<p>Okay, let’s say we are using a clean PI. Lets make a package for skills. In there, make the handlers and constants and stuff. You know, usual things. Now, in there, make a class named Skill.java. Skill.java will handle all your skills (Like by how the actions are performed). So, let’s fill up the file.</p>
<pre><code class="lang-auto">package server.model.skills;

/**
 * All the skills layout for seperating actions performed in the skills.
 *
 * @author Arham 4
 *
 */
public abstract class Skill {
	/**
	 * Handling a skill is seperated via the string section.
	 * @section 
	 *		handles the actions for the skill
	 */
	public static abstract void handleSkill(String section);

}</code></pre>
<p>Now, lets make us a simple Crafting skill. My way of doing it is making a whole new package for the skill, but it’s your choice.</p>
<p>Crafting.java</p>
<pre><code class="lang-auto">package server.model.skills.crafting;

import server.model.skills.Skill;

/**
 * Handles the actions of the skill Crafting.
 *
 * @author Arham 4
 *
 */
public class Crafting extends Skill {
	@Override
	public static void handleSkill(String section) {
		if (section = "gemCrafting")
			GemCrafting.initialize();
	}
}</code></pre>
<p>Notice</p>
<pre><code class="lang-auto">		if (section = "gemCrafting")
			GemCrafting.initialize();</code></pre>
<p>CraftingData.java</p>
<pre><code class="lang-auto">package server.model.skills.CraftingData;

/**
 * Handles the data of the skill Crafting.
 *
 * @author Arham 4
 *
 */
public enum CraftingData {
	SAPPHIRE(1623, 1607, 20, 50);

	private int uncutID, cutID, levelRequired;
	private double expGiven;

	CraftingData(int uncutID, int cutID, int levelRequired, double expGiven) {
		this.uncutID = uncutID;
		this.cutID = cutID;
		this.levelRequired = levelRequired;
		this.expGiven = expGiven;
	}

	public int getUncutID() {
		return uncutID;
	}

	public int getCutID() {
		return cutID;
	}

	public int getLevelRequired() {
		return levelRequired;
	}

	public double getExpGiven() {
		return expGiven;
	}
}</code></pre>
<p>CraftingGems.java</p>
<pre><code class="lang-auto">package server.model.skills.crafting;

import server.model.player.Client;
import server.model.skills.SkillConstants;
import server.model.skills.crafting.CraftingData;

/**
 * Handles the action of skill Crafting called gem crafting.
 *
 * @author Arham 4
 *
 */
public class CraftingGems extends CraftingData {

	Client c;
	CraftingData cd;

	public CraftingGems(Client c) {
		this.c = c;
	}

	public void initialize() {
		if (c.skillLevel[SkillConstants.CRAFTING] &gt;= cd.getLevelRequired())
			startCrafting();
		else
			c.sendMessage("You need a level of "+cd.getLevelRequired+" to craft this gem.");
	}

	private void startCrafting() {
		c.getItems().deleteItem(cd.getUncutID(), 1);
		c.startAnimation(885);
		c.getItems().addItem(cd.getCutID(), 1);
		c.getPA().addSkillXP(cd.getExpGiven(), SkillConstants.CRAFTING);
	}
}</code></pre>
<p>And also, if your wondering about the section thing. The section is described in the packet. So, I go to ItemOnItem and do,</p>
<pre><code class="lang-auto">if (blah == blah)
	Crafting.handleSkill("craftingGems");</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275/1</link>
        <pubDate>Tue, 20 Nov 2012 05:16:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-469275-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-way-to-handle-skills-concept/469275.rss">A way to handle skills (Concept)</source>
      </item>
  </channel>
</rss>
