<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>718 Several issues (Combat and Squeal)</title>
    <link>https://forum.moparisthebest.com/t/718-several-issues-combat-and-squeal/549713</link>
    <description>I&#39;m having several problems.
First of all my Magic only gives 1-10 xp as I mentioned before.

Second of all my Squeal of Fortune is an issue. It puts the wrong items you win in your bank.
For example if you win Bandos Chestplate, it will put a Iron ore sometimes.

Squeal.java:
[code]package com.rs.game.player.content;

import java.util.concurrent.TimeUnit;

import com.rs.Settings;
import com.rs.cores.CoresManager;
import com.rs.game.item.Item;
import com.rs.game.item.ItemsContainer;
import com.rs.game.player.Player;
import com.rs.utils.Logger;
import com.rs.utils.Utils;


public class Squeal {
	
	public static void openWindow(Player player) {
		if (player.getRights() &gt;= 2) {
			if (player.getAttackedByDelay() + 10000 &gt; Utils.currentTimeMillis()) {
				player.getPackets()
						.sendGameMessage(
								&quot;You cannot open Squeal of Fortune while in combat.&quot;);
				return;
				}
			if (player.getInterfaceManager().containsScreenInter()) {
					player.getPackets()
					.sendGameMessage(
							&quot;Please finish what you&#39;re doing before opening Squeal of Fortune.&quot;);
					return;
				}
		player.isSpining = false;
		player.stopAll();
		
		player.getPackets().sendRunScript(5879);
		player.getPackets().sendConfigByFile(11155, 3);
		player.getPackets().sendWindowsPane(1253, 0);
		sendItems(player);
		refresh(player);
	} else {
		player.sm(&quot;Not available.&quot;);
	}
	}
	public static void sendTicket(Player player) {
		  player.sm(&quot;Congratulations! You have earned a spin on the Squeal of Fortune!&quot;);
		   player.squealSpins += 1;
		   refresh(player);
		   //TODO find config for this.
		 }
	 public static void sendRandomTicket(Player player, int chance) {
		  if(Utils.random(chance) == 1) {
		   if(player.squealSpins &gt; 10) {
		    player.sm(&quot;You must have no more than 10 spins to be eligible to recieve random activity spins.&quot;);
		    return;
		   }
		  player.sm(&quot;Congratulations! You&#39;ve earned a ticket for a free spin on the Squeal of Fortune!&quot;);
		  if(!player.getInventory().hasFreeSlots()) {
		   player.squealSpins += 1;
		   refresh(player);
		   player.sm(&quot;Your inventory was full, so your spin ticket was automatically redeemed into spins.&quot;, true);
		  } else
		  player.getInventory().addItem(24154, 1);
		 }
		 }
	public static void sendButton(Player player) {
		if (player.getRights() &gt;= 2) {
		if (player.squealSpins &gt;= 1) {
		player.getInterfaceManager().sendOverlay(1252, true);
		refresh(player);
		} else {
			player.getInterfaceManager().closeOverlay(true);
			refresh(player);
		}
	}
	}
	public static void closeButton(Player player) {
		player.getInterfaceManager().closeOverlay(true);
		player.sm(&quot;You can access the Squeal of Fortune from the side panel, and you can show the button again by logging out and back in.&quot;);
	}
	public static void close(Player player) {
		player.getPackets().sendWindowsPane(
				player.getInterfaceManager().hasRezizableScreen() ? 746
						: 548, 0);
		Squeal.sendButton(player);
	}
	public static void decreaseSpins(Player player) {
		player.squealSpins -= 1;
		refresh(player);
	}
	public static void increaseSpins(Player player, int i) {
		player.squealSpins += i;
		refresh(player);
	}
	public static void refresh(Player player) {
		player.getPackets().sendConfigByFile(11026, player.squealSpins + 1);
		}
	public static void sendDailySpins(Player player) {
		if (player.squealSpins &gt;= 2) {
		//int hours   = (int) ((player.getSqueal() / (1000*60*60)) % 24);
			if (player.getSqueal() &lt; Utils.currentTimeMillis()) {
		player.setSqueal(Utils.currentTimeMillis()
				+ (24 * 60 * 60 * 1000));
		player.squealSpins += 2;
		refresh(player);
		player.sm(&quot;You have received your daily spins for Squeal of Fortune!&quot;, true);
			/*} else {
				player.sm(&quot;You will receive your daily spins for Squeal of Fortune in &quot;+hours * 2+&quot; hours.&quot;, true);TODO

			}*/
		}
		}
	}

	public static void buySpins(final Player player) {
			close(player);
			sendDelayedLogout(player);
	}
	public static void spin(Player player) {
		if(player.squealSpins &lt; 1) {
			close(player);
			player.getPackets().sendGameMessage(&quot;You do not have enough spins to continue.&quot;);
			return;
		} else {	
			if(player.isSpining == true)
				return;
			player.isSpining = true;
			decreaseSpins(player);
			int reward = Utils.random(1, 1000);
			int slot = 0;
			int slotchange = Utils.getRandom(6);
			if (reward &gt;= 1 &amp;&amp; reward &lt;= 920) {
				if (slotchange == 1) {
					slot = 1;
				} else if (slotchange == 2) {
					slot = 3;
				} else if (slotchange == 3) {
					slot = 5;
				} else if (slotchange == 4) {
					slot = 7;
				} else if (slotchange == 5) {
					slot = 10;
				} else if (slotchange == 6) {
					slot = 12;
				}
			} else if (reward &gt;= 921 &amp;&amp; reward &lt;= 987) {
				if (slotchange &gt;= 5) {
					slot = 6;
				} else if (slotchange &lt;= 2) {
					slot = 9;
				} else if (slotchange &gt;= 3 &amp;&amp; slotchange &lt; 5) {
					slot = 11;
				}
			} else if (reward &gt;= 988 &amp;&amp; reward &lt;= 997) {
				if (slotchange &gt;= 5) {
					slot = 0;
				} else if (slotchange &lt;= 2) {
					slot = 4;
				} else if (slotchange &gt;= 3 &amp;&amp; slotchange &lt; 5) {
					slot = 8;
				}
			} else if (reward &gt;= 998) {
				slot = 2;
			}
			
			//Logger.log(&quot;Squeal&quot;, player.getDisplayName()+&quot; has used a spin. Spins remaining: &quot;+player.squealSpins);
			player.getPackets().sendConfigByFile(10860, slot); // Squeal Reward
			player.getPackets().sendGlobalConfig(1781, 0);
			player.getPackets().sendGlobalConfig(1781, 0);
			 player.getPackets().sendGlobalConfig(1781, Utils.getRandom(13));
			   player.getPackets().sendConfigByFile(10860, itemWon);
			   player.getPackets().sendGlobalConfig(1790, 1);
			   player.getPackets().sendConfigByFile(10861, itemWon);
			itemWon = slotchange;
		}
		}
	
		public static void claimItem(Player player) {
			int amount = getBox().getAmount();
			int id = getBox().getId();
			player.isSpining = false;
			if (id == 995) {
				player.getMoneyPouch().addMoney(amount,
						amount, true, true);
				close(player);
			} else {
				player.getBank().addItem(id, amount,
						true);
				close(player);
				player.getPackets().sendGameMessage(
						&quot;&quot;+amount+&quot; &quot; + getBox().getName() +(amount == 1 ? &quot; &quot; : &quot;s &quot;)+(amount == 1 ? &quot;has&quot; : &quot;have&quot;)+&quot;  been added to your bank.&quot;);
			}
		}
		public static void discardItem(Player player) {
			player.sm(&quot;You discard your prize.&quot;);
			close(player);
		}
		public static void sendDelayedLogout(final Player player) {
			int LOGOUT_ALERT = 1254;
			int LOGGING_OUT = 1255;
			@SuppressWarnings(&quot;unused&quot;)
			int LOGOUT_REQUEST = 1256;
			if (player.getAttackedByDelay() + 10000 &gt; Utils.currentTimeMillis()) {
				player.getInterfaceManager().sendInterface(LOGOUT_ALERT);
				return;
			}
			player.getInterfaceManager().sendInterface(LOGGING_OUT);
			CoresManager.slowExecutor.schedule(new Runnable() {
				@Override
				public void run() {
					player.getPackets().sendOpenURL(Settings.PAYMENTS_LINK);
					player.forceLogout();
				}
				
			}, 5, TimeUnit.SECONDS);
		}
		public static void sendItems(Player player) {
			items.clear();
			items.add(getRare(1)); // Rare
			items.add(getCommon(1)); // Common
			items.add(getSRare()); // Super-Rare
			items.add(getCommon(2)); // Common
			items.add(getRare(2)); // Rare
			items.add(getCommon(3)); // Common
			items.add(getUnCommon(1)); // UnCommon
			items.add(getCommon(4)); // Common
			items.add(getRare(3)); // Rare
			items.add(getUnCommon(2)); // UnCommon
			items.add(getCommon(5)); // Com
			items.add(getUnCommon(3)); // UnCom
			items.add(getCommon(6)); // Common
			player.getPackets().sendItems(665, false, items);
		}
	    public static Item getBox() {
			Item[] box = items.getItems();
	                return box[itemWon];
		}
		private static int itemWon;
		static ItemsContainer&lt;Item&gt; items = new ItemsContainer&lt;Item&gt;(13, true);
		
		private static Item[] SUPER_RARE_ITEM = { new Item(995, 200000000), new Item(995, 10000000), new Item(989, 5), new Item(24440, 1), new Item(23716, 1), new Item(23671, 1),
			new Item(23674) 
			};
		 
			private static Item[] RARE_SLOT1 = { new Item(23715), new Item(23679), new Item(23680),
			new Item(23681), new Item(23682), new Item(23683), new Item(23690) 
			},
			RARE_SLOT2 = { new Item(23684), new Item(23685), new Item(23686),
			new Item(23687), new Item(23688), new Item(23689) 
			},
			RARE_SLOT3 = { new Item(23691), new Item(23692), new Item(23693),
			new Item(23694), new Item(23695), new Item(23696),
			new Item(23697), new Item(23698), new Item(23699),
			new Item(23700) };
		 
			private static Item[] UNCOMMON_SLOT1 = { new Item(9181), new Item(9183),
			new Item(857) }, UNCOMMON_SLOT2 = { new Item(1119), new Item(1121),
			new Item(1123), new Item(1127) },
			UNCOMMON_SLOT3 = { new Item(12976), new Item(1133), new Item(23714) 
			};
		 
			private static Item[] COMMON_SLOT1 = { new Item(23713), new Item(9177), new Item(9179),
			new Item(9174) }, COMMON_SLOT2 = { new Item(2, 30),
			new Item(886, 300) }, COMMON_SLOT3 = { new Item(1515, 15),
			new Item(444, 20) }, COMMON_SLOT4 = { new Item(563, 40),
			new Item(843), new Item(1325), new Item(1313), new Item(1361) },
			COMMON_SLOT5 = { new Item(1367), new Item(1297), new Item(1327),
			new Item(1205) }, COMMON_SLOT6 = { new Item(853),
			new Item(1311), new Item(1365), new Item(1353),
			new Item(1295), new Item(1325) };
			public static Item getSRare() {
				return SUPER_RARE_ITEM[(int) (Math.random() * SUPER_RARE_ITEM.length)];
			}

			public static Item getRare(int slot) {
				if (slot == 2) {
				return RARE_SLOT2[(int) (Math.random() * RARE_SLOT2.length)];
			} else if (slot == 3) {
				return RARE_SLOT3[(int) (Math.random() * RARE_SLOT3.length)];
			} else {
				//System.out.println(&quot;&quot;
						//+ RARE_SLOT1[(int) (Math.random() * RARE_SLOT1.length)]);
				return RARE_SLOT1[(int) (Math.random() * RARE_SLOT1.length)];
				}
			}

			public static Item getCommon(int slot) {
				if (slot == 2) {
				return COMMON_SLOT1[(int) (Math.random() * COMMON_SLOT1.length)];
			} else if (slot == 3) {
				return COMMON_SLOT2[(int) (Math.random() * COMMON_SLOT2.length)];
			} else if (slot == 4) {
				return COMMON_SLOT3[(int) (Math.random() * COMMON_SLOT3.length)];
			} else if (slot == 5) {
				return COMMON_SLOT4[(int) (Math.random() * COMMON_SLOT4.length)];
			} else if (slot == 6) {
				return COMMON_SLOT5[(int) (Math.random() * COMMON_SLOT5.length)];
			} else {
				return COMMON_SLOT6[(int) (Math.random() * COMMON_SLOT6.length)];
				}
			}

			public static Item getUnCommon(int slot) {
				if (slot == 2) {
				return UNCOMMON_SLOT1[(int) (Math.random() * UNCOMMON_SLOT1.length)];
			} else if (slot == 3) {
				return UNCOMMON_SLOT2[(int) (Math.random() * UNCOMMON_SLOT2.length)];
			} else {
				return UNCOMMON_SLOT3[(int) (Math.random() * UNCOMMON_SLOT3.length)];
				}
			}
	
	
}[/code]

The last problem I have is every weapon says &quot;kick, punch, and block&quot; instead of the proper attacks.
All I ask is someone to help please.</description>
    
    <lastBuildDate>Thu, 05 Feb 2015 20:20:03 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/718-several-issues-combat-and-squeal/549713.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>718 Several issues (Combat and Squeal)</title>
        <dc:creator><![CDATA[@ic3cr34m ic3cr34m]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ic3cr34m">@ic3cr34m</a> wrote:</p>
          <blockquote>
              <p>I’m having several problems.<br>
First of all my Magic only gives 1-10 xp as I mentioned before.</p>
<p>Second of all my Squeal of Fortune is an issue. It puts the wrong items you win in your bank.<br>
For example if you win Bandos Chestplate, it will put a Iron ore sometimes.</p>
<p>Squeal.java:</p>
<p>[code]package com.rs.game.player.content;</p>
<p>import java.util.concurrent.TimeUnit;</p>
<p>import com.rs.Settings;<br>
import com.rs.cores.CoresManager;<br>
import com.rs.game.item.Item;<br>
import com.rs.game.item.ItemsContainer;<br>
import com.rs.game.player.Player;<br>
import com.rs.utils.Logger;<br>
import com.rs.utils.Utils;</p>
<p>public class Squeal {</p>
<pre><code>public static void openWindow(Player player) {
	if (player.getRights() &gt;= 2) {
		if (player.getAttackedByDelay() + 10000 &gt; Utils.currentTimeMillis()) {
			player.getPackets()
					.sendGameMessage(
							"You cannot open Squeal of Fortune while in combat.");
			return;
			}
		if (player.getInterfaceManager().containsScreenInter()) {
				player.getPackets()
				.sendGameMessage(
						"Please finish what you're doing before opening Squeal of Fortune.");
				return;
			}
	player.isSpining = false;
	player.stopAll();
	
	player.getPackets().sendRunScript(5879);
	player.getPackets().sendConfigByFile(11155, 3);
	player.getPackets().sendWindowsPane(1253, 0);
	sendItems(player);
	refresh(player);
} else {
	player.sm("Not available.");
}
}
public static void sendTicket(Player player) {
	  player.sm("Congratulations! You have earned a spin on the Squeal of Fortune!");
	   player.squealSpins += 1;
	   refresh(player);
	   //TODO find config for this.
	 }
 public static void sendRandomTicket(Player player, int chance) {
	  if(Utils.random(chance) == 1) {
	   if(player.squealSpins &gt; 10) {
	    player.sm("You must have no more than 10 spins to be eligible to recieve random activity spins.");
	    return;
	   }
	  player.sm("Congratulations! You've earned a ticket for a free spin on the Squeal of Fortune!");
	  if(!player.getInventory().hasFreeSlots()) {
	   player.squealSpins += 1;
	   refresh(player);
	   player.sm("Your inventory was full, so your spin ticket was automatically redeemed into spins.", true);
	  } else
	  player.getInventory().addItem(24154, 1);
	 }
	 }
public static void sendButton(Player player) {
	if (player.getRights() &gt;= 2) {
	if (player.squealSpins &gt;= 1) {
	player.getInterfaceManager().sendOverlay(1252, true);
	refresh(player);
	} else {
		player.getInterfaceManager().closeOverlay(true);
		refresh(player);
	}
}
}
public static void closeButton(Player player) {
	player.getInterfaceManager().closeOverlay(true);
	player.sm("You can access the Squeal of Fortune from the side panel, and you can show the button again by logging out and back in.");
}
public static void close(Player player) {
	player.getPackets().sendWindowsPane(
			player.getInterfaceManager().hasRezizableScreen() ? 746
					: 548, 0);
	Squeal.sendButton(player);
}
public static void decreaseSpins(Player player) {
	player.squealSpins -= 1;
	refresh(player);
}
public static void increaseSpins(Player player, int i) {
	player.squealSpins += i;
	refresh(player);
}
public static void refresh(Player player) {
	player.getPackets().sendConfigByFile(11026, player.squealSpins + 1);
	}
public static void sendDailySpins(Player player) {
	if (player.squealSpins &gt;= 2) {
	//int hours   = (int) ((player.getSqueal() / (1000*60*60)) % 24);
		if (player.getSqueal() &lt; Utils.currentTimeMillis()) {
	player.setSqueal(Utils.currentTimeMillis()
			+ (24 * 60 * 60 * 1000));
	player.squealSpins += 2;
	refresh(player);
	player.sm("You have received your daily spins for Squeal of Fortune!", true);
		/*} else {
			player.sm("You will receive your daily spins for Squeal of Fortune in "+hours * 2+" hours.", true);TODO

		}*/
	}
	}
}

public static void buySpins(final Player player) {
		close(player);
		sendDelayedLogout(player);
}
public static void spin(Player player) {
	if(player.squealSpins &lt; 1) {
		close(player);
		player.getPackets().sendGameMessage("You do not have enough spins to continue.");
		return;
	} else {	
		if(player.isSpining == true)
			return;
		player.isSpining = true;
		decreaseSpins(player);
		int reward = Utils.random(1, 1000);
		int slot = 0;
		int slotchange = Utils.getRandom(6);
		if (reward &gt;= 1 &amp;&amp; reward &lt;= 920) {
			if (slotchange == 1) {
				slot = 1;
			} else if (slotchange == 2) {
				slot = 3;
			} else if (slotchange == 3) {
				slot = 5;
			} else if (slotchange == 4) {
				slot = 7;
			} else if (slotchange == 5) {
				slot = 10;
			} else if (slotchange == 6) {
				slot = 12;
			}
		} else if (reward &gt;= 921 &amp;&amp; reward &lt;= 987) {
			if (slotchange &gt;= 5) {
				slot = 6;
			} else if (slotchange &lt;= 2) {
				slot = 9;
			} else if (slotchange &gt;= 3 &amp;&amp; slotchange &lt; 5) {
				slot = 11;
			}
		} else if (reward &gt;= 988 &amp;&amp; reward &lt;= 997) {
			if (slotchange &gt;= 5) {
				slot = 0;
			} else if (slotchange &lt;= 2) {
				slot = 4;
			} else if (slotchange &gt;= 3 &amp;&amp; slotchange &lt; 5) {
				slot = 8;
			}
		} else if (reward &gt;= 998) {
			slot = 2;
		}
		
		//Logger.log("Squeal", player.getDisplayName()+" has used a spin. Spins remaining: "+player.squealSpins);
		player.getPackets().sendConfigByFile(10860, slot); // Squeal Reward
		player.getPackets().sendGlobalConfig(1781, 0);
		player.getPackets().sendGlobalConfig(1781, 0);
		 player.getPackets().sendGlobalConfig(1781, Utils.getRandom(13));
		   player.getPackets().sendConfigByFile(10860, itemWon);
		   player.getPackets().sendGlobalConfig(1790, 1);
		   player.getPackets().sendConfigByFile(10861, itemWon);
		itemWon = slotchange;
	}
	}

	public static void claimItem(Player player) {
		int amount = getBox().getAmount();
		int id = getBox().getId();
		player.isSpining = false;
		if (id == 995) {
			player.getMoneyPouch().addMoney(amount,
					amount, true, true);
			close(player);
		} else {
			player.getBank().addItem(id, amount,
					true);
			close(player);
			player.getPackets().sendGameMessage(
					""+amount+" " + getBox().getName() +(amount == 1 ? " " : "s ")+(amount == 1 ? "has" : "have")+"  been added to your bank.");
		}
	}
	public static void discardItem(Player player) {
		player.sm("You discard your prize.");
		close(player);
	}
	public static void sendDelayedLogout(final Player player) {
		int LOGOUT_ALERT = 1254;
		int LOGGING_OUT = 1255;
		@SuppressWarnings("unused")
		int LOGOUT_REQUEST = 1256;
		if (player.getAttackedByDelay() + 10000 &gt; Utils.currentTimeMillis()) {
			player.getInterfaceManager().sendInterface(LOGOUT_ALERT);
			return;
		}
		player.getInterfaceManager().sendInterface(LOGGING_OUT);
		CoresManager.slowExecutor.schedule(new Runnable() {
			@Override
			public void run() {
				player.getPackets().sendOpenURL(Settings.PAYMENTS_LINK);
				player.forceLogout();
			}
			
		}, 5, TimeUnit.SECONDS);
	}
	public static void sendItems(Player player) {
		items.clear();
		items.add(getRare(1)); // Rare
		items.add(getCommon(1)); // Common
		items.add(getSRare()); // Super-Rare
		items.add(getCommon(2)); // Common
		items.add(getRare(2)); // Rare
		items.add(getCommon(3)); // Common
		items.add(getUnCommon(1)); // UnCommon
		items.add(getCommon(4)); // Common
		items.add(getRare(3)); // Rare
		items.add(getUnCommon(2)); // UnCommon
		items.add(getCommon(5)); // Com
		items.add(getUnCommon(3)); // UnCom
		items.add(getCommon(6)); // Common
		player.getPackets().sendItems(665, false, items);
	}
    public static Item getBox() {
		Item[] box = items.getItems();
                return box[itemWon];
	}
	private static int itemWon;
	static ItemsContainer&lt;Item&gt; items = new ItemsContainer&lt;Item&gt;(13, true);
	
	private static Item[] SUPER_RARE_ITEM = { new Item(995, 200000000), new Item(995, 10000000), new Item(989, 5), new Item(24440, 1), new Item(23716, 1), new Item(23671, 1),
		new Item(23674) 
		};
	 
		private static Item[] RARE_SLOT1 = { new Item(23715), new Item(23679), new Item(23680),
		new Item(23681), new Item(23682), new Item(23683), new Item(23690) 
		},
		RARE_SLOT2 = { new Item(23684), new Item(23685), new Item(23686),
		new Item(23687), new Item(23688), new Item(23689) 
		},
		RARE_SLOT3 = { new Item(23691), new Item(23692), new Item(23693),
		new Item(23694), new Item(23695), new Item(23696),
		new Item(23697), new Item(23698), new Item(23699),
		new Item(23700) };
	 
		private static Item[] UNCOMMON_SLOT1 = { new Item(9181), new Item(9183),
		new Item(857) }, UNCOMMON_SLOT2 = { new Item(1119), new Item(1121),
		new Item(1123), new Item(1127) },
		UNCOMMON_SLOT3 = { new Item(12976), new Item(1133), new Item(23714) 
		};
	 
		private static Item[] COMMON_SLOT1 = { new Item(23713), new Item(9177), new Item(9179),
		new Item(9174) }, COMMON_SLOT2 = { new Item(2, 30),
		new Item(886, 300) }, COMMON_SLOT3 = { new Item(1515, 15),
		new Item(444, 20) }, COMMON_SLOT4 = { new Item(563, 40),
		new Item(843), new Item(1325), new Item(1313), new Item(1361) },
		COMMON_SLOT5 = { new Item(1367), new Item(1297), new Item(1327),
		new Item(1205) }, COMMON_SLOT6 = { new Item(853),
		new Item(1311), new Item(1365), new Item(1353),
		new Item(1295), new Item(1325) };
		public static Item getSRare() {
			return SUPER_RARE_ITEM[(int) (Math.random() * SUPER_RARE_ITEM.length)];
		}

		public static Item getRare(int slot) {
			if (slot == 2) {
			return RARE_SLOT2[(int) (Math.random() * RARE_SLOT2.length)];
		} else if (slot == 3) {
			return RARE_SLOT3[(int) (Math.random() * RARE_SLOT3.length)];
		} else {
			//System.out.println(""
					//+ RARE_SLOT1[(int) (Math.random() * RARE_SLOT1.length)]);
			return RARE_SLOT1[(int) (Math.random() * RARE_SLOT1.length)];
			}
		}

		public static Item getCommon(int slot) {
			if (slot == 2) {
			return COMMON_SLOT1[(int) (Math.random() * COMMON_SLOT1.length)];
		} else if (slot == 3) {
			return COMMON_SLOT2[(int) (Math.random() * COMMON_SLOT2.length)];
		} else if (slot == 4) {
			return COMMON_SLOT3[(int) (Math.random() * COMMON_SLOT3.length)];
		} else if (slot == 5) {
			return COMMON_SLOT4[(int) (Math.random() * COMMON_SLOT4.length)];
		} else if (slot == 6) {
			return COMMON_SLOT5[(int) (Math.random() * COMMON_SLOT5.length)];
		} else {
			return COMMON_SLOT6[(int) (Math.random() * COMMON_SLOT6.length)];
			}
		}

		public static Item getUnCommon(int slot) {
			if (slot == 2) {
			return UNCOMMON_SLOT1[(int) (Math.random() * UNCOMMON_SLOT1.length)];
		} else if (slot == 3) {
			return UNCOMMON_SLOT2[(int) (Math.random() * UNCOMMON_SLOT2.length)];
		} else {
			return UNCOMMON_SLOT3[(int) (Math.random() * UNCOMMON_SLOT3.length)];
			}
		}
</code></pre>
<p>}[/code]</p>
<p>The last problem I have is every weapon says “kick, punch, and block” instead of the proper attacks.<br>
All I ask is someone to help please.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/718-several-issues-combat-and-squeal/549713/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/718-several-issues-combat-and-squeal/549713/1</link>
        <pubDate>Thu, 05 Feb 2015 20:20:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549713-1</guid>
        <source url="https://forum.moparisthebest.com/t/718-several-issues-combat-and-squeal/549713.rss">718 Several issues (Combat and Squeal)</source>
      </item>
  </channel>
</rss>
