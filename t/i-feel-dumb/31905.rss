<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>I feel dumb</title>
    <link>https://forum.moparisthebest.com/t/i-feel-dumb/31905</link>
    <description>Hey everyone,
    I feel really stupid for this, but I honestly can&#39;t figure this out...Yes me a CSA274 student helping out a CSA174 (basic java) is stumped.  So if you can help, here&#39;s my code:

Card Class:
[code]
public class Card {
	//constants
	public static final int SPADES = 1;
	public static final int HEARTS = 2;
	public static final int CLUBS = 3;
	public static final int DIAMONDS = 4;
	
	public static final int JACK = 11;
	public static final int QUEEN = 12;
	public static final int KING = 13;
	public static final int ACE = 14;
	
	//instance variables
	private int suit;
	private int rank;
	
	//does nothing outside of class 
	private Card() {
	}
	
	//creates a card
	private Card(int s, int r) {
		suit = s;
		rank = r;
	}
	
	//creates the deck containing all of the cards
	public static Card[] initializeDeck(){
		Card[] initializeDeck = new Card[52];
		int index = 0;
		for (int i = SPADES; i &lt;= DIAMONDS; i++){
			for (int j = 2; j &lt;= ACE; j++){
				initializeDeck[index] = new Card(i, j);
				index++;				
			}
		}
		return initializeDeck;
	}
	
	//returns the rank of the card
	public int getRank(){
		return rank;
	}
	
	//gets the suit of the card
	public int getSuit(){
		return suit;
	}
	
	//checks to see if suits are the same between 2 cards
	public boolean sameSuit(Card o){
		return suit == o.suit;
	}
	
	//compares card rank to another card rank
	public int compareTo(Card o) {
		if (this.rank &lt; o.rank){
			return -1;
		}
		else if (this.rank==o.rank){
			return 0;
		}
		else {
			return 1;		
		}
	}
	
	//returns face card value
	public int getOrdinalValue(){
		if (rank==JACK || rank==QUEEN || rank==KING){
			return 10;
		}
		else if (rank==ACE){
			return 11;
		}
		else {
			return rank;
		}
	}
	
	//returns suit and rank 
	public String toString(){
		String suitCard=&quot;&quot;;
		String rankCard=&quot;&quot;;
		if (suit==SPADES){
			suitCard=&quot;S&quot;;
		}
		else if (suit==HEARTS){
			suitCard=&quot;H&quot;;
		}
		else if (suit==DIAMONDS){
			suitCard=&quot;D&quot;;
		}
		else{
			suitCard=&quot;C&quot;;
		}
		
		if (rank==JACK){
			rankCard=&quot;J&quot;;
		}
		else if (rank==QUEEN){
			rankCard=&quot;Q&quot;;
		}
		else if (rank==KING){
			rankCard=&quot;K&quot;;
		}
		else if (rank==ACE){
			rankCard=&quot;A&quot;;
		}
		else {
			rankCard=Integer.toString(rank);
		}
		return rankCard + &quot;-&quot; + suitCard;
	}
}

[/code]

Deck Class:
[code]
public class Deck {
//instance variables	
private Card[] deck;
private int cardsDealt;

//creates a deck
public Deck(){
	deck = Card.initializeDeck();
	cardsDealt = 0;
}

//returns the number of cards left in the deck
public int getCardsLeft(){
	return 52-cardsDealt;
}

//returns the number of cards dealt
public int getCardsDealt(){
	return cardsDealt;
}

//deals a card to a player
public Card dealCard(){
	Card c = deck[cardsDealt];
	cardsDealt++;
	return c;
}

//shuffles the deck randomly
public void randomShuffle(){
	Random r = new Random();
	int rInt;
	for(int i=0; i&lt;deck.length; i++){
		rInt = r.nextInt(52);
		Card c = deck[i];
		deck[i] = deck[rInt];
		deck[rInt] = c;
	}
}

}
[/code]

MemoryMatch Class (The one I need help with):
[code]
public class MemoryMatch {

	public static final int ROWS = 4;
	public static final int COLS = 4;

	private Deck deck = new Deck();
	private Card [][] board;
	private boolean[][] isMatched;
	private int nMatches;


	public MemoryMatch(){
		//Initialize the instance variables
		deck = new Deck();
		board = new Card[ROWS][COLS];
		isMatched = new boolean[ROWS][COLS];
		nMatches = 0;
	}
             //HELP HERE!!!!!
	public void reset(){
		//board creation
		deck.randomShuffle();
		for(int i=0; i&lt;ROWS; i++){
			for(int j=0; j&lt;COLS; j++){
				Card c = deck.dealCard();
				if(c.getRank() &gt;= 2 &amp;&amp; c.getRank() &lt;= 9 &amp;&amp; c.getSuit() == 1 || c.getSuit() == 2){
					board[i][j] = c;
				}
			}
		}
		
		//boolean[][] creation
		for(int i=0; i&lt;ROWS; i++){
			for(int j=0; j&lt;COLS; j++){
				isMatched[i][j] = false;
			}
		}
	}
            //HELP HERE!!!!!
	public String showBoard(){
		String result = &quot;    1    2    3    4   \n&quot;;
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + &quot; &quot;;
			for(int j=0; j&lt;board.length; j++){
				if(isMatched[i][j]){
					result += &quot;  &quot; + board[i][j];
				}
				else if(isMatched[i][j] == false){
					result += &quot;  *  &quot;;
				}
			}
			result += &quot;\n&quot;;
		}
		return result;
	}
             //HELP HERE!!!!!
	public String showBoard (int r, int c){
		String result = &quot;    1    2    3    4   \n&quot;;
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + &quot;   &quot;;
			for(int j=0; j&lt;board.length; j++){
				if(i == (r-1) &amp;&amp; j == (c-1)){
					result += board[i][j] + &quot;    &quot;;
				}
				if(isMatched[i][j]){
					result += &quot;-    &quot;;
				}
				else if(isMatched[i][j] == false){
					result += &quot;*    &quot;;
				}
			}
			result += &quot;\n&quot;;
		}
		return result;
	}
             //HELP HERE!!!!!
	public String showBoard(int r1, int c1, int r2, int c2){
		String result = &quot;    1    2    3    4   \n&quot;;
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + &quot;   &quot;;
			for(int j=0; j&lt;board.length; j++){
				if(i == (r1-1) &amp;&amp; j == (c1-1)){
					result += board[i][j] + &quot;  &quot;;
				}
				if(i == (r2-1) &amp;&amp; j == (c2-1)){
					result += board[i][j].toString() + &quot;  &quot;;
				}
				if(isMatched[i][j]){
					result += &quot;-   &quot;;
				}
				else if(isMatched[i][j] == false){
					result += &quot;*   &quot;;
				}
			}
			result += &quot;\n&quot;;
		}
		return result;
	}
	public boolean checkForMatch(int r1, int c1, int r2, int c2){
		if(board[r1][c1].getRank() == board[r2][c2].getRank()){
			nMatches++;
			isMatched[r1][c1] = true;
			isMatched[r2][c2] = true;
			return true;
		}
		else{
			return false;
		}
	}
	public boolean isValid(int r, int c){
		if(r &lt; 0 || r &gt; ROWS){
			return false;
		}
		if(c &lt; 0 || c &gt; COLS){
			return false;
		}
		if(isMatched[r][c]){
			return false;
		}
		else{
			return true;
		}
	}
	public boolean gameOver(){
		return nMatches == (ROWS*COLS)/ 2; //16 cards has 8 matches
	}
	//just to check to see if cards added correctly
	public void showFullBoard(){
		for(int i=0; i&lt;board.length; i++){
			for(int j=0; j&lt;board.length; j++){
				System.out.print(board[i][j] + &quot;  &quot;);
			}
			System.out.println();
		}
	}
}
[/code]

Here&#39;s the actual project .pdf and what is supposed to happen.  I&#39;m sure you can all read my code...it&#39;s pretty simple.

Thanks for any help,
Alex</description>
    
    <lastBuildDate>Thu, 07 Dec 2006 07:55:14 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/i-feel-dumb/31905.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>I feel dumb</title>
        <dc:creator><![CDATA[@ilyaostr9 io9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ilyaostr9">@ilyaostr9</a> wrote:</p>
          <blockquote>
              <p>lol, just googled enums, and it came out with a card deck example take a look lols</p>
<p><a href="http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html" class="onebox" target="_blank" rel="nofollow noopener">http://java.sun.com/j2se/1.5.0/docs/guide/language/enums.html</a></p>
<p>but yeah, too bad they didn’t teach about enums…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-feel-dumb/31905/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-feel-dumb/31905/4</link>
        <pubDate>Thu, 07 Dec 2006 07:55:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-31905-4</guid>
        <source url="https://forum.moparisthebest.com/t/i-feel-dumb/31905.rss">I feel dumb</source>
      </item>
      <item>
        <title>I feel dumb</title>
        <dc:creator><![CDATA[@iwasinmoparseas101cl iwasinmoparseas101class]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iwasinmoparseas101cl">@iwasinmoparseas101cl</a> wrote:</p>
          <blockquote>
              <p>they haven’t learned enums yet, I’m trying to code it in ways that they would know and understand<br>
I got the reset method to work in the MemoryMatch class:</p>
<pre><code class="lang-auto">public void reset(){
		//board creation
		deck.randomShuffle();
		int i=0, j=0;
		while(deck.getCardsLeft() != 0 &amp;&amp; i &lt; ROWS){
			Card c = deck.dealCard();
			if((c.getRank() &gt;= 2 &amp;&amp; c.getRank() &lt;= 9) &amp;&amp; (c.getSuit() == 1 || c.getSuit() == 2)){
				board[i][j] = c;
				j++;
			}
			if(j == COLS){
				i++;
				j=0;
			}
		}
		
		//boolean[][] creation
		for(int r=0; i&lt;ROWS; i++){
			for(int c=0; j&lt;COLS; j++){
				isMatched[r][c] = false;
			}
		}
	}</code></pre>
<p>So all I need help with are the show board methods.  Thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-feel-dumb/31905/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-feel-dumb/31905/3</link>
        <pubDate>Mon, 04 Dec 2006 03:21:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-31905-3</guid>
        <source url="https://forum.moparisthebest.com/t/i-feel-dumb/31905.rss">I feel dumb</source>
      </item>
      <item>
        <title>I feel dumb</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>First, instead of all those constant variables, it’s better to use enums. I’ll take a look at what you’re trying to do though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-feel-dumb/31905/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-feel-dumb/31905/2</link>
        <pubDate>Mon, 04 Dec 2006 03:04:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-31905-2</guid>
        <source url="https://forum.moparisthebest.com/t/i-feel-dumb/31905.rss">I feel dumb</source>
      </item>
      <item>
        <title>I feel dumb</title>
        <dc:creator><![CDATA[@iwasinmoparseas101cl iwasinmoparseas101class]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iwasinmoparseas101cl">@iwasinmoparseas101cl</a> wrote:</p>
          <blockquote>
              <p>Hey everyone,<br>
I feel really stupid for this, but I honestly can’t figure this out…Yes me a CSA274 student helping out a CSA174 (basic java) is stumped.  So if you can help, here’s my code:</p>
<p>Card Class:</p>
<pre><code class="lang-auto">public class Card {
	//constants
	public static final int SPADES = 1;
	public static final int HEARTS = 2;
	public static final int CLUBS = 3;
	public static final int DIAMONDS = 4;
	
	public static final int JACK = 11;
	public static final int QUEEN = 12;
	public static final int KING = 13;
	public static final int ACE = 14;
	
	//instance variables
	private int suit;
	private int rank;
	
	//does nothing outside of class 
	private Card() {
	}
	
	//creates a card
	private Card(int s, int r) {
		suit = s;
		rank = r;
	}
	
	//creates the deck containing all of the cards
	public static Card[] initializeDeck(){
		Card[] initializeDeck = new Card[52];
		int index = 0;
		for (int i = SPADES; i &lt;= DIAMONDS; i++){
			for (int j = 2; j &lt;= ACE; j++){
				initializeDeck[index] = new Card(i, j);
				index++;				
			}
		}
		return initializeDeck;
	}
	
	//returns the rank of the card
	public int getRank(){
		return rank;
	}
	
	//gets the suit of the card
	public int getSuit(){
		return suit;
	}
	
	//checks to see if suits are the same between 2 cards
	public boolean sameSuit(Card o){
		return suit == o.suit;
	}
	
	//compares card rank to another card rank
	public int compareTo(Card o) {
		if (this.rank &lt; o.rank){
			return -1;
		}
		else if (this.rank==o.rank){
			return 0;
		}
		else {
			return 1;		
		}
	}
	
	//returns face card value
	public int getOrdinalValue(){
		if (rank==JACK || rank==QUEEN || rank==KING){
			return 10;
		}
		else if (rank==ACE){
			return 11;
		}
		else {
			return rank;
		}
	}
	
	//returns suit and rank 
	public String toString(){
		String suitCard="";
		String rankCard="";
		if (suit==SPADES){
			suitCard="S";
		}
		else if (suit==HEARTS){
			suitCard="H";
		}
		else if (suit==DIAMONDS){
			suitCard="D";
		}
		else{
			suitCard="C";
		}
		
		if (rank==JACK){
			rankCard="J";
		}
		else if (rank==QUEEN){
			rankCard="Q";
		}
		else if (rank==KING){
			rankCard="K";
		}
		else if (rank==ACE){
			rankCard="A";
		}
		else {
			rankCard=Integer.toString(rank);
		}
		return rankCard + "-" + suitCard;
	}
}
</code></pre>
<p>Deck Class:</p>
<pre><code class="lang-auto">public class Deck {
//instance variables	
private Card[] deck;
private int cardsDealt;

//creates a deck
public Deck(){
	deck = Card.initializeDeck();
	cardsDealt = 0;
}

//returns the number of cards left in the deck
public int getCardsLeft(){
	return 52-cardsDealt;
}

//returns the number of cards dealt
public int getCardsDealt(){
	return cardsDealt;
}

//deals a card to a player
public Card dealCard(){
	Card c = deck[cardsDealt];
	cardsDealt++;
	return c;
}

//shuffles the deck randomly
public void randomShuffle(){
	Random r = new Random();
	int rInt;
	for(int i=0; i&lt;deck.length; i++){
		rInt = r.nextInt(52);
		Card c = deck[i];
		deck[i] = deck[rInt];
		deck[rInt] = c;
	}
}

}</code></pre>
<p>MemoryMatch Class (The one I need help with):</p>
<pre><code class="lang-auto">public class MemoryMatch {

	public static final int ROWS = 4;
	public static final int COLS = 4;

	private Deck deck = new Deck();
	private Card [][] board;
	private boolean[][] isMatched;
	private int nMatches;


	public MemoryMatch(){
		//Initialize the instance variables
		deck = new Deck();
		board = new Card[ROWS][COLS];
		isMatched = new boolean[ROWS][COLS];
		nMatches = 0;
	}
             //HELP HERE!!!!!
	public void reset(){
		//board creation
		deck.randomShuffle();
		for(int i=0; i&lt;ROWS; i++){
			for(int j=0; j&lt;COLS; j++){
				Card c = deck.dealCard();
				if(c.getRank() &gt;= 2 &amp;&amp; c.getRank() &lt;= 9 &amp;&amp; c.getSuit() == 1 || c.getSuit() == 2){
					board[i][j] = c;
				}
			}
		}
		
		//boolean[][] creation
		for(int i=0; i&lt;ROWS; i++){
			for(int j=0; j&lt;COLS; j++){
				isMatched[i][j] = false;
			}
		}
	}
            //HELP HERE!!!!!
	public String showBoard(){
		String result = "    1    2    3    4   \n";
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + " ";
			for(int j=0; j&lt;board.length; j++){
				if(isMatched[i][j]){
					result += "  " + board[i][j];
				}
				else if(isMatched[i][j] == false){
					result += "  *  ";
				}
			}
			result += "\n";
		}
		return result;
	}
             //HELP HERE!!!!!
	public String showBoard (int r, int c){
		String result = "    1    2    3    4   \n";
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + "   ";
			for(int j=0; j&lt;board.length; j++){
				if(i == (r-1) &amp;&amp; j == (c-1)){
					result += board[i][j] + "    ";
				}
				if(isMatched[i][j]){
					result += "-    ";
				}
				else if(isMatched[i][j] == false){
					result += "*    ";
				}
			}
			result += "\n";
		}
		return result;
	}
             //HELP HERE!!!!!
	public String showBoard(int r1, int c1, int r2, int c2){
		String result = "    1    2    3    4   \n";
		for(int i=0; i&lt;board.length; i++){
			result += (i+1) + "   ";
			for(int j=0; j&lt;board.length; j++){
				if(i == (r1-1) &amp;&amp; j == (c1-1)){
					result += board[i][j] + "  ";
				}
				if(i == (r2-1) &amp;&amp; j == (c2-1)){
					result += board[i][j].toString() + "  ";
				}
				if(isMatched[i][j]){
					result += "-   ";
				}
				else if(isMatched[i][j] == false){
					result += "*   ";
				}
			}
			result += "\n";
		}
		return result;
	}
	public boolean checkForMatch(int r1, int c1, int r2, int c2){
		if(board[r1][c1].getRank() == board[r2][c2].getRank()){
			nMatches++;
			isMatched[r1][c1] = true;
			isMatched[r2][c2] = true;
			return true;
		}
		else{
			return false;
		}
	}
	public boolean isValid(int r, int c){
		if(r &lt; 0 || r &gt; ROWS){
			return false;
		}
		if(c &lt; 0 || c &gt; COLS){
			return false;
		}
		if(isMatched[r][c]){
			return false;
		}
		else{
			return true;
		}
	}
	public boolean gameOver(){
		return nMatches == (ROWS*COLS)/ 2; //16 cards has 8 matches
	}
	//just to check to see if cards added correctly
	public void showFullBoard(){
		for(int i=0; i&lt;board.length; i++){
			for(int j=0; j&lt;board.length; j++){
				System.out.print(board[i][j] + "  ");
			}
			System.out.println();
		}
	}
}</code></pre>
<p>Here’s the actual project .pdf and what is supposed to happen.  I’m sure you can all read my code…it’s pretty simple.</p>
<p>Thanks for any help,<br>
Alex</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/i-feel-dumb/31905/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/i-feel-dumb/31905/1</link>
        <pubDate>Mon, 04 Dec 2006 01:54:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-31905-1</guid>
        <source url="https://forum.moparisthebest.com/t/i-feel-dumb/31905.rss">I feel dumb</source>
      </item>
  </channel>
</rss>
