<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Object Action Traveling System - (Features/Base)</title>
    <link>https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463</link>
    <description>[center][size=18pt][b]Object Action Traveling System[/b][/size][/center]

[B][SIZE=3][FONT=Arial Narrow]Features:[/FONT][/SIZE][/B]
- Easy to implement a new travel object
- Supports object&#39;s action priorities
- Supports for all object click packets
- Events
- Easy to add on more features
- Cleaner rather storing massive cases in object packets
- HashMap for storing a new travel object

The SimpleTravel.class:
[CODE=java]
package com.rs2.game.objects.traveling;

import com.rs2.game.model.Client;

/**
 * A class to handle random traveling methods such as bridges, boats and other
 * means of travel.
 * 
 * @author Hybris
 * 
 */
public abstract class SimpleTravel {
    
    public enum Priority{
	/**
	 * No actions disabled.
	 */
	NEVER,
	/**
	 * Walking disabled.
	 */
	WALKING,
	/**
	 * Only disables the minimap.
	 */
	MINIMAP,
	/**
	 * Displays an interface which blocks global interactions.
	 */
	INTERFACE,
	/**
	 * Disables all.
	 */
	HIGH
    }

    /**
     * The object id.
     */
    private final int objectId;

    /**
     * The delay of the action before executing a command.
     */
    private final int cycle;

    /**
     * The object packet id.
     */
    private final String objectPacket;

    /**
     * The constructor for the &lt;code&gt;SimpleTravel&lt;/code&gt;.
     * 
     * @param objectId
     *            the &lt;code&gt;objectId&lt;/code&gt;
     * @param objectPacket
     *            the &lt;code&gt;objectPacket&lt;/code&gt;
     */
    public SimpleTravel(int objectId, String objectPacket, int cycle) {
	this.objectId = objectId;
	this.objectPacket = objectPacket;
	this.cycle = cycle;
    }

    /**
     * Gets the object id.
     * 
     * @return &lt;code&gt;objectId&lt;/code&gt;
     */
    public int getObjectId() {
	return objectId;
    }

    /**
     * Gets the object packet id.
     * 
     * @return &lt;code&gt;objectPacket&lt;/code&gt;
     */
    public String getObjectPacket() {
	return objectPacket;
    }

    /**
     * Gets the event cycle.
     * 
     * @return &lt;code&gt;cycle&lt;/code&gt;
     */
    public int getCycle() {
	return cycle;
    }


    /**
     * Gets any messages to be displayed.
     * 
     * @return a collection of messages
     */
    public String[] getInitialMessages() {
	return new String[] {};
    }
    
    /**
     * The messages executed during a running event.
     * @return a collection of messages
     */
    public String[] getFinalMessages(){
	return new String[]{};
    }

    /**
     * If the player has the requirements then the execution phase will only
     * start.
     * 
     * @return false
     */
    public boolean checkRequirements() {
	return false;
    }
    
    /**
     * Gets the object&#39;s interaction priority level.
     * @return &lt;code&gt;Priority.NEVER&lt;/code&gt;
     */
    public Priority getPriority(){
	return Priority.HIGH;
    }
    
    /**
     * gets the interface id.
     * @return -1
     */
    public int getInterface(){
	return -1;
    }

    public abstract void execute(Client c);

}

[/CODE]

The SimpleTravelManager.class
[CODE=java]
package com.rs2.game.objects.traveling;

import java.util.HashMap;
import java.util.Map;

import com.rs2.game.event.CycleEvent;
import com.rs2.game.event.CycleEventContainer;
import com.rs2.game.event.CycleEventHandler;
import com.rs2.game.model.Client;
import com.rs2.game.model.player.ClientInitialize;

/**
 * This class stores the information of the current objects implementing the
 * &lt;code&gt;SimpleTravel&lt;/code&gt; interface.
 * 
 * @author Hybris
 * 
 */
public class SimpleTravelManager {

    private final Map&lt;Integer, SimpleTravel&gt; simpleTravel = new HashMap&lt;Integer, SimpleTravel&gt;();

    public SimpleTravelManager() {
    }

    private void bind(SimpleTravel travel) {
	simpleTravel.put(travel.getObjectId(), travel);
    }
    
    public boolean handle(final Client client, int objectId, String packetType){
	final SimpleTravel sTravel = simpleTravel.get(objectId);
	if(sTravel==null){
	    return true;
	}
	if(packetType!=sTravel.getObjectPacket()){
	    return true;
	}
	switch(sTravel.getPriority().HIGH){
	case HIGH:
	    client.getActionAssistant().showMinitureMap(true);
	    client.getActionSender().sendRemoveSidebars();
	    client.setCanWalk(false);
	    break;
	}
	for(String messageString : sTravel.getInitialMessages()){
	    client.getActionSender().sendMessage(messageString);
	}
	if(sTravel.getInterface()&gt;0){
	client.getActionSender().showInterface(sTravel.getInterface());
	}
	CycleEventHandler.getSingleton().addEvent(client, new CycleEvent() {

	    @Override
	    public void execute(CycleEventContainer container) {
		// TODO Auto-generated method stub
		sTravel.execute(client);
		container.stop();
	    }

	    @Override
	    public void stop() {
		// TODO Auto-generated method stub
		ClientInitialize.getSingleton(client).createSidebar(client);
		client.getActionAssistant().showMinitureMap(false);
		client.getActionSender().sendRemoveInterfaces();
		client.getActionAssistant().requestUpdates();
		client.setCanWalk(true);
	    }
	    
	},sTravel.getCycle());
	return false;
    }

}

[/CODE]

Add this in your ActionHandler or wherever you handle your object actions.
[CODE=java]private final SimpleTravelManager simpleTravelManager = new SimpleTravelManager();[/CODE]

Under each object click packet: (&quot;first&quot; for first click object etc)
[CODE=java]
if(simpleTravelManager.handle(c, objectType, &quot;first&quot;)){
	    
}
[/CODE]

[B]Example of usage:[/B]
[CODE=java]
package com.rs2.game.objects.traveling;

import com.rs2.game.model.Client;

/**
 * Class to handle the boat to travel the player near Barrows.
 * 
 * @author Hybris
 * 
 */
public class BarrowsBoatSimpleTravel extends SimpleTravel {

    /**
     * The automatically generated constructor.
     */
    public BarrowsBoatSimpleTravel() {
	super(6970, &quot;first&quot;, 10);
	// TODO Auto-generated constructor stub
    }

    @Override
    public Priority getPriority(){
	return Priority.HIGH;
    }

    @Override
    public String[] getInitialMessages(){
	return new String[]{&quot;You get on the boat.&quot;};	
    }
    
    @Override
    public int getInterface(){
	return 18460;
    }

    @Override
    public void execute(Client c) {
	// TODO Auto-generated method stub
	c.getActionAssistant().movePlayer(3521, 3284, 0);
    }

}

[/CODE]
To simply make this work add this:
[CODE=java]bind(new BarrowsBoatSimpleTravel());[/CODE]
in this:
[CODE=java]
public SimpleTravelManager() {
}
[/CODE]

Import the correct packages and change the package in these files. Any errors, problems please post them. This is a base so does need a lot of work and feedback I appreciate thanks</description>
    
    <lastBuildDate>Wed, 23 Apr 2014 03:27:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Object Action Traveling System - (Features/Base)</title>
        <dc:creator><![CDATA[@sorecheeny sorecheeny]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sorecheeny">@sorecheeny</a> wrote:</p>
          <blockquote>
              <p>Very clever!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/3</link>
        <pubDate>Wed, 23 Apr 2014 03:27:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542463-3</guid>
        <source url="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463.rss">Object Action Traveling System - (Features/Base)</source>
      </item>
      <item>
        <title>Object Action Traveling System - (Features/Base)</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Instead of creating systems for specific purposes I think things like this should be integral to a scripting system. Good job! I enjoy your usage of objects, enums, and your easy to read comments.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/2</link>
        <pubDate>Wed, 23 Apr 2014 03:10:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542463-2</guid>
        <source url="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463.rss">Object Action Traveling System - (Features/Base)</source>
      </item>
      <item>
        <title>Object Action Traveling System - (Features/Base)</title>
        <dc:creator><![CDATA[@Hybris Hybris]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hybris">@Hybris</a> wrote:</p>
          <blockquote>
              <p>[center][size=18pt]<span class="bbcode-b">Object Action Traveling System</span>[/size][/center]</p>
<p>[B][SIZE=3][FONT=Arial Narrow]Features:[/FONT][/SIZE][/B]</p>
<ul>
<li>Easy to implement a new travel object</li>
<li>Supports object’s action priorities</li>
<li>Supports for all object click packets</li>
<li>Events</li>
<li>Easy to add on more features</li>
<li>Cleaner rather storing massive cases in object packets</li>
<li>HashMap for storing a new travel object</li>
</ul>
<p>The SimpleTravel.class:</p>
<p>[CODE=java]<br>
package com.rs2.game.objects.traveling;</p>
<p>import com.rs2.game.model.Client;</p>
<p>/**</p>
<ul>
<li>A class to handle random traveling methods such as bridges, boats and other</li>
<li>means of travel.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Hybris</li>
<li>
</li>
</ul>
<p>*/<br>
public abstract class SimpleTravel {</p>
<pre><code>public enum Priority{
/**
 * No actions disabled.
 */
NEVER,
/**
 * Walking disabled.
 */
WALKING,
/**
 * Only disables the minimap.
 */
MINIMAP,
/**
 * Displays an interface which blocks global interactions.
 */
INTERFACE,
/**
 * Disables all.
 */
HIGH
}

/**
 * The object id.
 */
private final int objectId;

/**
 * The delay of the action before executing a command.
 */
private final int cycle;

/**
 * The object packet id.
 */
private final String objectPacket;

/**
 * The constructor for the &lt;code&gt;SimpleTravel&lt;/code&gt;.
 * 
 * @param objectId
 *            the &lt;code&gt;objectId&lt;/code&gt;
 * @param objectPacket
 *            the &lt;code&gt;objectPacket&lt;/code&gt;
 */
public SimpleTravel(int objectId, String objectPacket, int cycle) {
this.objectId = objectId;
this.objectPacket = objectPacket;
this.cycle = cycle;
}

/**
 * Gets the object id.
 * 
 * @return &lt;code&gt;objectId&lt;/code&gt;
 */
public int getObjectId() {
return objectId;
}

/**
 * Gets the object packet id.
 * 
 * @return &lt;code&gt;objectPacket&lt;/code&gt;
 */
public String getObjectPacket() {
return objectPacket;
}

/**
 * Gets the event cycle.
 * 
 * @return &lt;code&gt;cycle&lt;/code&gt;
 */
public int getCycle() {
return cycle;
}


/**
 * Gets any messages to be displayed.
 * 
 * @return a collection of messages
 */
public String[] getInitialMessages() {
return new String[] {};
}

/**
 * The messages executed during a running event.
 * @return a collection of messages
 */
public String[] getFinalMessages(){
return new String[]{};
}

/**
 * If the player has the requirements then the execution phase will only
 * start.
 * 
 * @return false
 */
public boolean checkRequirements() {
return false;
}

/**
 * Gets the object's interaction priority level.
 * @return &lt;code&gt;Priority.NEVER&lt;/code&gt;
 */
public Priority getPriority(){
return Priority.HIGH;
}

/**
 * gets the interface id.
 * @return -1
 */
public int getInterface(){
return -1;
}

public abstract void execute(Client c);
</code></pre>
<p>}</p>
<p>[/CODE]</p>
<p>The SimpleTravelManager.class</p>
<p>[CODE=java]<br>
package com.rs2.game.objects.traveling;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import com.rs2.game.event.CycleEvent;<br>
import com.rs2.game.event.CycleEventContainer;<br>
import com.rs2.game.event.CycleEventHandler;<br>
import com.rs2.game.model.Client;<br>
import com.rs2.game.model.player.ClientInitialize;</p>
<p>/**</p>
<ul>
<li>This class stores the information of the current objects implementing the</li>
<li>
<code>SimpleTravel</code> interface.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Hybris</li>
<li>
</li>
</ul>
<p>*/<br>
public class SimpleTravelManager {</p>
<pre><code>private final Map&lt;Integer, SimpleTravel&gt; simpleTravel = new HashMap&lt;Integer, SimpleTravel&gt;();

public SimpleTravelManager() {
}

private void bind(SimpleTravel travel) {
simpleTravel.put(travel.getObjectId(), travel);
}

public boolean handle(final Client client, int objectId, String packetType){
final SimpleTravel sTravel = simpleTravel.get(objectId);
if(sTravel==null){
    return true;
}
if(packetType!=sTravel.getObjectPacket()){
    return true;
}
switch(sTravel.getPriority().HIGH){
case HIGH:
    client.getActionAssistant().showMinitureMap(true);
    client.getActionSender().sendRemoveSidebars();
    client.setCanWalk(false);
    break;
}
for(String messageString : sTravel.getInitialMessages()){
    client.getActionSender().sendMessage(messageString);
}
if(sTravel.getInterface()&gt;0){
client.getActionSender().showInterface(sTravel.getInterface());
}
CycleEventHandler.getSingleton().addEvent(client, new CycleEvent() {

    @Override
    public void execute(CycleEventContainer container) {
	// TODO Auto-generated method stub
	sTravel.execute(client);
	container.stop();
    }

    @Override
    public void stop() {
	// TODO Auto-generated method stub
	ClientInitialize.getSingleton(client).createSidebar(client);
	client.getActionAssistant().showMinitureMap(false);
	client.getActionSender().sendRemoveInterfaces();
	client.getActionAssistant().requestUpdates();
	client.setCanWalk(true);
    }
    
},sTravel.getCycle());
return false;
}
</code></pre>
<p>}</p>
<p>[/CODE]</p>
<p>Add this in your ActionHandler or wherever you handle your object actions.</p>
<p><code>private final SimpleTravelManager simpleTravelManager = new SimpleTravelManager();</code></p>
<p>Under each object click packet: (“first” for first click object etc)</p>
<p>[CODE=java]<br>
if(simpleTravelManager.handle(c, objectType, “first”)){</p>
<p>}<br>
[/CODE]</p>
<p>[B]Example of usage:[/B]</p>
<p>[CODE=java]<br>
package com.rs2.game.objects.traveling;</p>
<p>import com.rs2.game.model.Client;</p>
<p>/**</p>
<ul>
<li>Class to handle the boat to travel the player near Barrows.</li>
<li>
</li>
<li>
<span class="mention">@author</span> Hybris</li>
<li>
</li>
</ul>
<p>*/<br>
public class BarrowsBoatSimpleTravel extends SimpleTravel {</p>
<pre><code>/**
 * The automatically generated constructor.
 */
public BarrowsBoatSimpleTravel() {
super(6970, "first", 10);
// TODO Auto-generated constructor stub
}

@Override
public Priority getPriority(){
return Priority.HIGH;
}

@Override
public String[] getInitialMessages(){
return new String[]{"You get on the boat."};	
}

@Override
public int getInterface(){
return 18460;
}

@Override
public void execute(Client c) {
// TODO Auto-generated method stub
c.getActionAssistant().movePlayer(3521, 3284, 0);
}
</code></pre>
<p>}</p>
<p>[/CODE]<br>
To simply make this work add this:</p>
<p><code>bind(new BarrowsBoatSimpleTravel());</code><br>
in this:</p>
<p><code>
public SimpleTravelManager() {
}
</code></p>
<p>Import the correct packages and change the package in these files. Any errors, problems please post them. This is a base so does need a lot of work and feedback I appreciate thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463/1</link>
        <pubDate>Wed, 23 Apr 2014 02:04:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542463-1</guid>
        <source url="https://forum.moparisthebest.com/t/object-action-traveling-system-features-base/542463.rss">Object Action Traveling System - (Features/Base)</source>
      </item>
  </channel>
</rss>
