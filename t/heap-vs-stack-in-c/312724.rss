<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Heap Vs Stack in C++</title>
    <link>https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724</link>
    <description>Stack Vs Heap

Stack:
When you write simple programs in C and C++, you don&#39;t care where the memory for your variables are allocated, as by default they all ended up on Stack.

The stack is where memory is allocated for automatic variables within functions. A stack is a Last In First Out (LIFO) storage device where new storage is allocated and deallocated at only one ``end&#39;&#39;, called the Top of the stack.

Example program;
[code]
#include &lt;iostream.h&gt;
using namespace std;
void myFunction()
{
    int myArray[10] = {1,2,3,4,5,6,7,8,9,10};
    for(int i = 0; i &lt; 10; i++)
        cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;

}
int main()
{
    myFunction();
    return 0;
}[/code]

In the program, shown above the scope of array myArray is limited to enclosing braces {}, once we return from myFunction, the scope of myArray ends, which will cleaned up and in the main function there is no way to access myArray anymore.

There are couple of problems in the program which used allocations on Stack.
First you can&#39;t access the memory once we reached the scope brace.
Second you have to know in advance how much memory will be needed, which is sometimes hard to predict.
Third there is a certain limit on how much can be allocated on Stack, memory allocations on Heap also suffer from this problem, but in the case of Stack the limit is too low.

The memory allocated on Stack is also called Static Memory Allocation.

Heap:
When a variable is defined in the source program, the type of the variable determines how much memory the compiler allocates. When the program executes, the variable consumes this amount of memory regardless of whether the program actually uses the memory allocated. This is particularly true for arrays. However, in many problems, it is not clear at the outset how much memory the program will actually need. Up to now, we have declared arrays to be ``large enough&#39;&#39; to hold the maximum number of elements we expect our application to handle. If too much memory is allocated and then not used, there is a waste of memory. If not enough memory is allocated, the program is not able to handle the input data. 

We can make our program more flexible if, during execution, it could allocate additional memory when needed and free memory when not needed. Allocation of memory during execution is called dynamic memory allocation. C provides library functions to allocate and free memory dynamically during program execution. Dynamic memory is allocated on the heap by the system. 
It is important to realize that dynamic memory allocation also has limits. If memory is repeatedly allocated, eventually the system will run out of memory. 

Look at another example which uses memory allocated on heap.

[code]#include &lt;iostream.h&gt;
using namespace std;
int* myFunction()
{
    int *myArray = malloc(10 * sizeof(int));
    for(int i = 0; i &lt; 10; i++)
        cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;
    return myArray;

}
int main()
{
    int *array = myFunction();
    //in this case the array allocated in myFunction is available here.
    return 0;
}[/code]

There is one big problem using Heap, which is once you have allocated memory on Heap, now its your responsibility to free that memory once you are done with it.

In the program above we definitely leaked 4 bytes of memory. This is not a problem for small programs but once you started to write complicated programs then it can become a big problem.

The following program frees the memory once the user is done with the allocated memory.
[code]
#include &lt;iostream.h&gt;
using namespace std;
int* myFunction()
{
    int *myArray = malloc(10 * sizeof(int));
    for(int i = 0; i &lt; 10; i++)
        cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;
    return myArray;

}
int main()
{
    int *array = myFunction();
    //in this case the array allocated in myFunction is available here.
    free(array);
    return 0;
}[/code]

C programmers use malloc to allocate memory and free to deallocate memory
C++ programmers use new to allocated memory and delete to deallocate memory.

Be careful malloc is incompatible with delete, same is true for new which is incompatible with free. Always use free to deallocate memory allocated using malloc.
Always use delete to deallocate memory allocated using new.
[b]Javedman0208[/b]
[center][img]http://www.moparisthebest.com/smf/Themes/default/images/warnwarn.gif[/img] Do not rip tutorials from other sources unless giving proper credit[/center]</description>
    
    <lastBuildDate>Fri, 06 Nov 2009 18:49:49 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Heap Vs Stack in C++</title>
        <dc:creator><![CDATA[@ownagesbot ownagesbot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ownagesbot">@ownagesbot</a> wrote:</p>
          <blockquote>
              <blockquote>When you write simple programs in C and C++, you don't care where the memory for your variables are allocated</blockquote>
<p>I stopped reading there… if I didn’t care then why would methods like malloc exist?</p>
<p>Also, I read zstars post, seems kinda lame to rip a tutorial, nevermind a fuckin shit one.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/3</link>
        <pubDate>Fri, 06 Nov 2009 18:49:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-312724-3</guid>
        <source url="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724.rss">Heap Vs Stack in C++</source>
      </item>
      <item>
        <title>Heap Vs Stack in C++</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Leeched off <a href="http://www.tenouk.com/ModuleZ.html" rel="nofollow noopener">http://www.tenouk.com/ModuleZ.html</a> ?</p>
<p>Next time leech off a good book at least please. The tutorial is crap. The examples wouldn’t even compile on a current conforming compiler, either due to the bunch of syntax errors present, or to the usage of pre-standard constructs such as <span class="hashtag">#include</span> &lt;iostream.h&gt;. And you don’t even explain or provide any meaningful example about new, which is actually the one that C++ programmers should use. Guess at least it did explain that malloc / delete cannot be mixed etc. But new [], which would be the logical counterpart for malloc(10 * sizeof(int)) wasn’t even mentioned.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/2</link>
        <pubDate>Fri, 06 Nov 2009 15:21:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-312724-2</guid>
        <source url="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724.rss">Heap Vs Stack in C++</source>
      </item>
      <item>
        <title>Heap Vs Stack in C++</title>
        <dc:creator><![CDATA[@javedman0208 javedman0208]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/javedman0208">@javedman0208</a> wrote:</p>
          <blockquote>
              <p>Stack Vs Heap</p>
<p>Stack:<br>
When you write simple programs in C and C++, you don’t care where the memory for your variables are allocated, as by default they all ended up on Stack.</p>
<p>The stack is where memory is allocated for automatic variables within functions. A stack is a Last In First Out (LIFO) storage device where new storage is allocated and deallocated at only one ``end’’, called the Top of the stack.</p>
<p>Example program;</p>
<p>[code]<br>
<span class="hashtag">#include</span> &lt;iostream.h&gt;<br>
using namespace std;<br>
void myFunction()<br>
{<br>
int myArray[10] = {1,2,3,4,5,6,7,8,9,10};<br>
for(int i = 0; i &lt; 10; i++)<br>
cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;</p>
<p>}<br>
int main()<br>
{<br>
myFunction();<br>
return 0;<br>
}[/code]</p>
<p>In the program, shown above the scope of array myArray is limited to enclosing braces {}, once we return from myFunction, the scope of myArray ends, which will cleaned up and in the main function there is no way to access myArray anymore.</p>
<p>There are couple of problems in the program which used allocations on Stack.<br>
First you can’t access the memory once we reached the scope brace.<br>
Second you have to know in advance how much memory will be needed, which is sometimes hard to predict.<br>
Third there is a certain limit on how much can be allocated on Stack, memory allocations on Heap also suffer from this problem, but in the case of Stack the limit is too low.</p>
<p>The memory allocated on Stack is also called Static Memory Allocation.</p>
<p>Heap:<br>
When a variable is defined in the source program, the type of the variable determines how much memory the compiler allocates. When the program executes, the variable consumes this amount of memory regardless of whether the program actually uses the memory allocated. This is particularly true for arrays. However, in many problems, it is not clear at the outset how much memory the program will actually need. Up to now, we have declared arrays to be ``large enough’’ to hold the maximum number of elements we expect our application to handle. If too much memory is allocated and then not used, there is a waste of memory. If not enough memory is allocated, the program is not able to handle the input data.</p>
<p>We can make our program more flexible if, during execution, it could allocate additional memory when needed and free memory when not needed. Allocation of memory during execution is called dynamic memory allocation. C provides library functions to allocate and free memory dynamically during program execution. Dynamic memory is allocated on the heap by the system.<br>
It is important to realize that dynamic memory allocation also has limits. If memory is repeatedly allocated, eventually the system will run out of memory.</p>
<p>Look at another example which uses memory allocated on heap.</p>
<p>[code]<span class="hashtag">#include</span> &lt;iostream.h&gt;<br>
using namespace std;<br>
int* myFunction()<br>
{<br>
int *myArray = malloc(10 * sizeof(int));<br>
for(int i = 0; i &lt; 10; i++)<br>
cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;<br>
return myArray;</p>
<p>}<br>
int main()<br>
{<br>
int *array = myFunction();<br>
//in this case the array allocated in myFunction is available here.<br>
return 0;<br>
}[/code]</p>
<p>There is one big problem using Heap, which is once you have allocated memory on Heap, now its your responsibility to free that memory once you are done with it.</p>
<p>In the program above we definitely leaked 4 bytes of memory. This is not a problem for small programs but once you started to write complicated programs then it can become a big problem.</p>
<p>The following program frees the memory once the user is done with the allocated memory.</p>
<p>[code]<br>
<span class="hashtag">#include</span> &lt;iostream.h&gt;<br>
using namespace std;<br>
int* myFunction()<br>
{<br>
int *myArray = malloc(10 * sizeof(int));<br>
for(int i = 0; i &lt; 10; i++)<br>
cout&lt;&lt;&lt;&lt;myArray[i]&lt;&lt;endl;<br>
return myArray;</p>
<p>}<br>
int main()<br>
{<br>
int *array = myFunction();<br>
//in this case the array allocated in myFunction is available here.<br>
free(array);<br>
return 0;<br>
}[/code]</p>
<p>C programmers use malloc to allocate memory and free to deallocate memory<br>
C++ programmers use new to allocated memory and delete to deallocate memory.</p>
<p>Be careful malloc is incompatible with delete, same is true for new which is incompatible with free. Always use free to deallocate memory allocated using malloc.<br>
Always use delete to deallocate memory allocated using new.<br>
<span class="bbcode-b">Javedman0208</span><br>
[center]<img src="http://www.moparisthebest.com/smf/Themes/default/images/warnwarn.gif" alt width="" height=""> Do not rip tutorials from other sources unless giving proper credit[/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724/1</link>
        <pubDate>Fri, 06 Nov 2009 15:08:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-312724-1</guid>
        <source url="https://forum.moparisthebest.com/t/heap-vs-stack-in-c/312724.rss">Heap Vs Stack in C++</source>
      </item>
  </channel>
</rss>
