<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C Help</title>
    <link>https://forum.moparisthebest.com/t/c-help/425145</link>
    <description>Hi how are we all?

So I&#39;ve being trying to learn C lately and since I&#39;ve being having a little trouble with grasping pointers/dynamic memory I thought of trying to create a sort of Memory profiling system. I wanted to hide as much from the user as possible. Although it works I was wondering if the following can be improved on. At the moment it&#39;s messy and MemoryManager was a poor naming choice, I really dislike the macros...


The [b]__FILE__[/b] and [b]__LINE__[/b] would  be for logging if I ever could get to it.
If you&#39;re wondering about the structure names it was a convention in a book I&#39;m learning from which I took a liking too.

[code=c]
#ifndef MEMORY_MANAGER_H
#define MEMORY_MANAGER_H

#include &lt;assert.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;

#define alloc(x, y) allocateMemory(x,y, __FILE__, __LINE__)
#define dealloc(x, y) deallocateMemory(x,y, __FILE__, __LINE__)

#ifdef __cplusplus
extern &quot;C&quot; {
#endif

    typedef void* MemoryManager;

    void createMemoryManager(MemoryManager manager);

    void destroyMemoryManager(MemoryManager manager);

    size_t getRemainingMemory(MemoryManager manager);

    void* allocateMemory(MemoryManager manager, size_t mem, const char* file, uint16_t line);

    void deallocateMemory(MemoryManager manager, void* data, const char* file, uint16_t line);

    size_t getAllocatedMemory(MemoryManager manager);

    size_t getMemoryAllocations(MemoryManager manager);

    size_t getPeekMemoryUsage(MemoryManager manager);

#ifdef __cplusplus
}
#endif

#endif
[/code]

[code=c]
#include &quot;MemoryManager.h&quot;

typedef struct __memory_node {
    size_t memory_size;
    void* block;
    
    struct __memory_node *next;
    struct __memory_node *previous;
} MemoryNode;

typedef struct {
    size_t allocated_memory;
    size_t memory_allocations;

    size_t peek_memory_usage;

    MemoryNode* memory_nodes;
} __memory_manager;

void createMemoryManager(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) malloc(sizeof (__memory_manager));
    m-&gt;allocated_memory = 0;
    m-&gt;memory_allocations = 0;
    m-&gt;peek_memory_usage = 0;
    m-&gt;memory_nodes = NULL;
    manager = m;
}

void destroyMemoryManager(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    free(m);
}

size_t getRemainingMemory(MemoryManager m) {
    __memory_manager* manager = (__memory_manager*) m;
    if (manager-&gt;memory_nodes == NULL) {
        return 0;
    }

    size_t remaining = 0;
    MemoryNode* node = manager-&gt;memory_nodes-&gt;next;
    do {
        remaining++;
        node = node-&gt;next;
    } while (node != manager-&gt;memory_nodes);
    return remaining;
}

void* allocateMemory(MemoryManager m, size_t mem, const char* file_name, uint16_t line) {
    __memory_manager* manager = (__memory_manager*) m;
    void* block = malloc(sizeof (MemoryNode) + mem);

    assert(block);

    MemoryNode* node = (MemoryNode*) block;

    node-&gt;memory_size = mem;
    node-&gt;block = block + sizeof (MemoryNode);

    if (manager-&gt;memory_nodes == NULL) {
        manager-&gt;memory_nodes = node;
        node-&gt;next = node-&gt;previous = node;
    } else {
        node-&gt;next = manager-&gt;memory_nodes;
        node-&gt;previous = manager-&gt;memory_nodes-&gt;previous;
        node-&gt;previous-&gt;next = node;
        manager-&gt;memory_nodes-&gt;previous = node;
    }

    manager-&gt;allocated_memory += mem;
    manager-&gt;memory_allocations++;
    if (manager-&gt;peek_memory_usage &lt; manager-&gt;allocated_memory) {
        manager-&gt;peek_memory_usage = manager-&gt;allocated_memory;
    }
    return node-&gt;block;
}

void deallocateMemory(MemoryManager m, void* data, const char* file_name, uint16_t line) {
    __memory_manager* manager = (__memory_manager*) m;
    MemoryNode* node = (MemoryNode*) (data - sizeof (MemoryNode));

    manager-&gt;allocated_memory -= node-&gt;memory_size;
    manager-&gt;memory_allocations--;

    if (manager-&gt;memory_nodes == node &amp;&amp; node-&gt;previous == node) {
        manager-&gt;memory_nodes = NULL;
    } else {
        node-&gt;next-&gt;previous = node-&gt;previous;
        node-&gt;previous-&gt;next = node-&gt;next;
    }
    free((void*) node);
}

size_t getAllocatedMemory(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;allocated_memory;
}

size_t getMemoryAllocations(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;memory_allocations;
}

size_t getPeekMemoryUsage(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;peek_memory_usage;
}

[/code]</description>
    
    <lastBuildDate>Wed, 14 Dec 2011 06:00:18 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-help/425145.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@surfer25 surfer25]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/surfer25">@surfer25</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:3, topic:425145”]c, not c++.</p>
<p>i’m not sure what your goal is with this, to be honest. if your intention is to cut down on tons of calls out to the OS memory manager, like for example game engines tend to do when allocating lots of little objects regularly, why hide the calls behind potentially dangerous macros? just have the user use your stuff directly.[/quote]</p>
<p>My original post didn’t really explain what I need at; sorry about that… But nothing like that at all.</p>
<p>I’m was having a lot of trouble grasping memory/pointers so I made this program to just test myself but because I’m new to this I was wondering if there are parts that can be improved on. For example you said ‘dangerous macros’ - why are they dangerous? It’s hard coming from Java to C. Just any pointers (pun intended <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> ) that could make the program… better?</p>
<p>Particularly with hiding the details…</p>
<pre><code class="lang-auto">typedef void* MemoryManager</code></pre>
<p>It just seems… messy</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/7</link>
        <pubDate>Wed, 14 Dec 2011 06:00:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:5, topic:425145”]well you also talked about destructors and smart pointers</p>
<p>there is no way to create a smart pointer in c, because there is no way to do automatic destruction in c.</p>
<p>there are massive massive differences between a c struct and c++ class - in c++, struct is just a synonym for class with different access like you say, but a c struct doesnt have the concept of a destructor, for example. theres no way to automatically call a method when a reference drops out of scope, so no smart pointers[/quote]<br>
i was not aware struct don’t have destructor. if this is true, which i don’t doubt, then smart pointers are an impossibility as stated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/6</link>
        <pubDate>Tue, 13 Dec 2011 20:07:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>well you also talked about destructors and smart pointers</p>
<p>there is no way to create a smart pointer in c, because there is no way to do automatic destruction in c.</p>
<p>there are massive massive differences between a c struct and c++ class - in c++, struct is just a synonym for class with different access like you say, but a c struct doesnt have the concept of a destructor, for example. theres no way to automatically call a method when a reference drops out of scope, so no smart pointers</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/5</link>
        <pubDate>Tue, 13 Dec 2011 19:48:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:3, topic:425145”]c, not c++.</p>
<p>i’m not sure what your goal is with this, to be honest. if your intention is to cut down on tons of calls out to the OS memory manager, like for example game engines tend to do when allocating lots of little objects regularly, why hide the calls behind potentially dangerous macros? just have the user use your stuff directly.[/quote]<br>
i figured someone would get on me about using the name ‘class’. couldn’t you just use native C structs to accomplish this? or are there more differences between a class and a struct other than naming and permissions?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/4</link>
        <pubDate>Tue, 13 Dec 2011 19:02:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>c, not c++.</p>
<p>i’m not sure what your goal is with this, to be honest. if your intention is to cut down on tons of calls out to the OS memory manager, like for example game engines tend to do when allocating lots of little objects regularly, why hide the calls behind potentially dangerous macros? just have the user use your stuff directly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/3</link>
        <pubDate>Tue, 13 Dec 2011 17:37:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“surfer25, post:1, topic:425145”]Hi how are we all?</p>
<p><span class="bbcode-b">So I’ve being trying to learn C lately and since I’ve being having a little trouble with grasping pointers/dynamic memory</span> I thought of trying to create a sort of Memory profiling system. <span class="bbcode-b">I wanted to hide as much from the user as possible.</span>[/quote]<br>
Smart pointers (basically an encapsulation of a pointer with the primary pointer operators overridden for the class and a destructor that deletes the memory allocation)?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/2</link>
        <pubDate>Tue, 13 Dec 2011 16:50:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
      <item>
        <title>C Help</title>
        <dc:creator><![CDATA[@surfer25 surfer25]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/surfer25">@surfer25</a> wrote:</p>
          <blockquote>
              <p>Hi how are we all?</p>
<p>So I’ve being trying to learn C lately and since I’ve being having a little trouble with grasping pointers/dynamic memory I thought of trying to create a sort of Memory profiling system. I wanted to hide as much from the user as possible. Although it works I was wondering if the following can be improved on. At the moment it’s messy and MemoryManager was a poor naming choice, I really dislike the macros…</p>
<p>The <span class="bbcode-b"><strong>FILE</strong></span> and <span class="bbcode-b"><strong>LINE</strong></span> would  be for logging if I ever could get to it.<br>
If you’re wondering about the structure names it was a convention in a book I’m learning from which I took a liking too.</p>
<pre><code class="lang-auto">#ifndef MEMORY_MANAGER_H
#define MEMORY_MANAGER_H

#include &lt;assert.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdint.h&gt;

#define alloc(x, y) allocateMemory(x,y, __FILE__, __LINE__)
#define dealloc(x, y) deallocateMemory(x,y, __FILE__, __LINE__)

#ifdef __cplusplus
extern "C" {
#endif

    typedef void* MemoryManager;

    void createMemoryManager(MemoryManager manager);

    void destroyMemoryManager(MemoryManager manager);

    size_t getRemainingMemory(MemoryManager manager);

    void* allocateMemory(MemoryManager manager, size_t mem, const char* file, uint16_t line);

    void deallocateMemory(MemoryManager manager, void* data, const char* file, uint16_t line);

    size_t getAllocatedMemory(MemoryManager manager);

    size_t getMemoryAllocations(MemoryManager manager);

    size_t getPeekMemoryUsage(MemoryManager manager);

#ifdef __cplusplus
}
#endif

#endif</code></pre>
<pre><code class="lang-auto">#include "MemoryManager.h"

typedef struct __memory_node {
    size_t memory_size;
    void* block;
    
    struct __memory_node *next;
    struct __memory_node *previous;
} MemoryNode;

typedef struct {
    size_t allocated_memory;
    size_t memory_allocations;

    size_t peek_memory_usage;

    MemoryNode* memory_nodes;
} __memory_manager;

void createMemoryManager(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) malloc(sizeof (__memory_manager));
    m-&gt;allocated_memory = 0;
    m-&gt;memory_allocations = 0;
    m-&gt;peek_memory_usage = 0;
    m-&gt;memory_nodes = NULL;
    manager = m;
}

void destroyMemoryManager(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    free(m);
}

size_t getRemainingMemory(MemoryManager m) {
    __memory_manager* manager = (__memory_manager*) m;
    if (manager-&gt;memory_nodes == NULL) {
        return 0;
    }

    size_t remaining = 0;
    MemoryNode* node = manager-&gt;memory_nodes-&gt;next;
    do {
        remaining++;
        node = node-&gt;next;
    } while (node != manager-&gt;memory_nodes);
    return remaining;
}

void* allocateMemory(MemoryManager m, size_t mem, const char* file_name, uint16_t line) {
    __memory_manager* manager = (__memory_manager*) m;
    void* block = malloc(sizeof (MemoryNode) + mem);

    assert(block);

    MemoryNode* node = (MemoryNode*) block;

    node-&gt;memory_size = mem;
    node-&gt;block = block + sizeof (MemoryNode);

    if (manager-&gt;memory_nodes == NULL) {
        manager-&gt;memory_nodes = node;
        node-&gt;next = node-&gt;previous = node;
    } else {
        node-&gt;next = manager-&gt;memory_nodes;
        node-&gt;previous = manager-&gt;memory_nodes-&gt;previous;
        node-&gt;previous-&gt;next = node;
        manager-&gt;memory_nodes-&gt;previous = node;
    }

    manager-&gt;allocated_memory += mem;
    manager-&gt;memory_allocations++;
    if (manager-&gt;peek_memory_usage &lt; manager-&gt;allocated_memory) {
        manager-&gt;peek_memory_usage = manager-&gt;allocated_memory;
    }
    return node-&gt;block;
}

void deallocateMemory(MemoryManager m, void* data, const char* file_name, uint16_t line) {
    __memory_manager* manager = (__memory_manager*) m;
    MemoryNode* node = (MemoryNode*) (data - sizeof (MemoryNode));

    manager-&gt;allocated_memory -= node-&gt;memory_size;
    manager-&gt;memory_allocations--;

    if (manager-&gt;memory_nodes == node &amp;&amp; node-&gt;previous == node) {
        manager-&gt;memory_nodes = NULL;
    } else {
        node-&gt;next-&gt;previous = node-&gt;previous;
        node-&gt;previous-&gt;next = node-&gt;next;
    }
    free((void*) node);
}

size_t getAllocatedMemory(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;allocated_memory;
}

size_t getMemoryAllocations(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;memory_allocations;
}

size_t getPeekMemoryUsage(MemoryManager manager) {
    __memory_manager* m = (__memory_manager*) manager;
    return m-&gt;peek_memory_usage;
}
</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-help/425145/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-help/425145/1</link>
        <pubDate>Tue, 13 Dec 2011 09:44:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425145-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-help/425145.rss">C Help</source>
      </item>
  </channel>
</rss>
