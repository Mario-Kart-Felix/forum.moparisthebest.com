<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>TVector</title>
    <link>https://forum.moparisthebest.com/t/tvector/480888</link>
    <description>This is my Simba implementation of a vector type. It provides most of the functionality of vectors found in other languages (minus the object orientation of course).

[code=pascal]type
  TVector = record
    Size: Cardinal;
    Elements: TVariantArray;
  end;

{*******************************************************************************
function Vector(Size: Cardinal): TVector;
by: Echo_
Description: Creates a new TVector with the given size.
*******************************************************************************}
function Vector(Size: Cardinal): TVector; overload;
begin
  Result.Size := Size;
  SetLength(Result.Elements, Result.Size);
end;

{*******************************************************************************
function Vector: TVector;
by: Echo_
Description: Creates a new TVector with a size of 0.
*******************************************************************************}
function Vector: TVector; overload;
begin
  Result := Vector(0);
end;

{*******************************************************************************
function Vector(Elements: TVariantArray): TVector;
by: Echo_
Description: Creates a new TVector containing the given elements.
*******************************************************************************}
function Vector(Elements: TVariantArray): TVector; overload;
var
  I: Integer;
begin
  Result := Vector(Length(Elements));
  for I := 0 to High(Elements) do
    Result.Elements[I] := Elements[I];
end;

{*******************************************************************************
function TVector.IsEmpty: Boolean;
by: Echo_
Description: Returns true i the size is 0, false otherwise.
*******************************************************************************}
function TVector.IsEmpty: Boolean;
begin
  Result := Size = 0;
end;

{*******************************************************************************
function TVector.IndexOf(X: Variant): Integer;
by: Echo_
Description: Returns the first index of X, -1 otherwise.
*******************************************************************************}
function TVector.IndexOf(X: Variant): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := 0 to Size - 1 do
    if Elements[I] = X then begin
      Result := I;
      Break;
    end;
end;

{*******************************************************************************
function TVector.LastIndexOf(X: Variant): Integer;
by: Echo_
Description: Returns the last index of X, -1 otherwise.
*******************************************************************************}
function TVector.LastIndexOf(X: Variant): Integer;
var
  I: Integer;
begin
  Result := -1;
  for I := Size - 1 downto 0 do
    if Elements[I] = X then begin
      Result := I;
      Break;
    end;
end;

{*******************************************************************************
function TVector.ContainsElement(X: Variant): Boolean;
by: Echo_
Description: True X is in the TVector, false otherwise.
*******************************************************************************}
function TVector.ContainsElement(X: Variant): Boolean;
begin
  Result := IndexOf(X) &gt;= 0;
end;

{*******************************************************************************
function TVector.GetElement(Index: Cardinal): Variant;
by: Echo_
Description: Returns the value at elements[index].
*******************************************************************************}
function TVector.GetElement(Index: Cardinal): Variant;
begin
  Result := Elements[Index];
end;

{*******************************************************************************
procedure TVector.SetElement(Index: Cardinal; X: Variant);
by: Echo_
Description: Sets the value at elements[index] to x.
*******************************************************************************}
procedure TVector.SetElement(Index: Cardinal; X: Variant);
begin
  Elements[Index] := X;
end;

{*******************************************************************************
procedure TVector.AddElement(X: Variant);
by: Echo_
Description: Adds X to the end of the TVector.
*******************************************************************************}
procedure TVector.AddElement(X: Variant); overload;
begin
  Inc(Size);
  SetLength(Elements, Size);
  Elements[Size - 1] := X;
end;

{*******************************************************************************
procedure TVector.AddElement(X: Variant; Index: Cardinal);
by: Echo_
Description: Adds X at elements[index], shifting the remaining values right.
*******************************************************************************}
procedure TVector.AddElement(X: Variant; Index: Cardinal); overload;
var
  I: Integer;
  A: TVariantArray;
begin
  Inc(Size);
  SetLength(Elements, Size);
  for I := Size - 1 downto Index + 1 do
    Elements[I] := Elements[I - 1];

  Elements[Index] := X;
end;

{*******************************************************************************
procedure TVector.AddElements(X: TVariantArray);
by: Echo_
Description: Adds X to the end of the TVector.
*******************************************************************************}
procedure TVector.AddElements(X: TVariantArray); overload;
var
  S, I: Integer;
begin
  S := Size;
  Size := Size + Length(X);
  SetLength(Elements, Size);
  for I := S to Size - 1 do
    Elements[I] := X[I - S];
end;

{*******************************************************************************
procedure TVector.AddElements(X: TVariantArray; Index: Cardinal);
by: Echo_
Description: Adds X at elements[index], shifting the remaining values right.
*******************************************************************************}
procedure TVector.AddElements(X: TVariantArray; Index: Cardinal); overload;
var
  I: Integer;
begin
  Size := Size + Length(X);
  SetLength(Elements, Size);
  for I := Index + High(X) downto Index do
    Elements[I + Length(X)] := Elements[I];

  for I := 0 to High(X) do
    Elements[I + Index] := X[I];
end;

{*******************************************************************************
procedure TVector.DeleteElement(Index: Cardinal);
by: Echo_
Description: Deletes elements[index], shifting the remaining values left.
*******************************************************************************}
procedure TVector.DeleteElement(Index: Cardinal);
var
  I: Integer;
begin
  for I := Index + 1 to Size - 1 do
    Elements[I - 1] := Elements[I];

  Dec(Size);
  SetLength(Elements, Size);
end;

{*******************************************************************************
procedure TVector.DeleteElements(Start, Finish: Cardinal);
by: Echo_
Description: Deletes elements between start (inclusive) and finish (exclusive).
*******************************************************************************}
procedure TVector.DeleteElements(Start, Finish: Cardinal);
var
  Offset, I: Integer;
begin
  Offset := Finish - Start;
  for I := Finish to Size - 1 do
    Elements[I - Offset] := Elements[I];

  Size := Size - Offset;
  SetLength(Elements, Size);
end;

{*******************************************************************************
procedure TVector.DeleteOccurrence(X: Variant);
by: Echo_
Description: Deletes the first element equal to X.
*******************************************************************************}
procedure TVector.DeleteOccurrence(X: Variant);
var
  Index: Integer;
begin
  Index := IndexOf(X);
  if Index = -1 then
    Exit;

  DeleteElement(Index);
end;

{*******************************************************************************
procedure TVector.DeleteLastOccurrence(X: Variant);
by: Echo_
Description: Deletes the last element equal to X.
*******************************************************************************}
procedure TVector.DeleteLastOccurrence(X: Variant);
var
  Index: Integer;
begin
  Index := LastIndexOf(X);
  if Index = -1 then
    Exit;

  DeleteElement(Index);
end;

{*******************************************************************************
procedure TVector.Clear;
by: Echo_
Description: Sets size to 0 and deletes all elements.
*******************************************************************************}
procedure TVector.Clear;
begin
  Size := 0;
  SetLength(Elements, Size);
end;

{*******************************************************************************
function Map(F: function(X: Variant): Variant; const V: TVector): TVector;
by: Echo_
Description: Applies function F to each element in V, returning a new TVector
containing the results.
*******************************************************************************}
function Map(F: function(X: Variant): Variant; const V: TVector): TVector;
var
  I: Integer;
begin
  Result := Vector(V.Size);
  for I := 0 to High(V.Elements) do
    Result.SetElement(I, F(V.GetElement(I)));
end;[/code]

An example of using Map for people unfamiliar with first-class functions:
[code=pascal]function Add2(A: Variant): Variant;
begin
  Result := VarAsType(A, varInteger) + 2;
end;

var
  A: TVariantArray;
  X, Y: TVector;
begin
  ClearDebug;
  A := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
  X := Vector(A);
  Y := Map(@Add2, X);
  WriteLn(X);
  WriteLn(Y);
end.[/code]

This will output:
[code]{SIZE = 10, ELEMENTS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
{SIZE = 10, ELEMENTS = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}
Successfully executed.[/code]

Enjoy :)

EDIT: Removed unnecessary code, replaced procedural approach with Lape&#39;s type methods.</description>
    
    <lastBuildDate>Thu, 31 Jan 2013 11:52:48 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tvector/480888.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>TVector</title>
        <dc:creator><![CDATA[@latifundio latifundio]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/latifundio">@latifundio</a> wrote:</p>
          <blockquote>
              <p>Well done!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tvector/480888/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tvector/480888/2</link>
        <pubDate>Thu, 31 Jan 2013 11:52:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-480888-2</guid>
        <source url="https://forum.moparisthebest.com/t/tvector/480888.rss">TVector</source>
      </item>
      <item>
        <title>TVector</title>
        <dc:creator><![CDATA[@Echo3 Echo_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/echo3">@Echo3</a> wrote:</p>
          <blockquote>
              <p>This is my Simba implementation of a vector type. It provides most of the functionality of vectors found in other languages (minus the object orientation of course).</p>
<p>[code=pascal]type<br>
TVector = record<br>
Size: Cardinal;<br>
Elements: TVariantArray;<br>
end;</p>
<p>{*******************************************************************************<br>
function Vector(Size: Cardinal): TVector;<br>
by: Echo_<br>
Description: Creates a new TVector with the given size.<br>
*******************************************************************************}<br>
function Vector(Size: Cardinal): TVector; overload;<br>
begin<br>
Result.Size := Size;<br>
SetLength(Result.Elements, Result.Size);<br>
end;</p>
<p>{*******************************************************************************<br>
function Vector: TVector;<br>
by: Echo_<br>
Description: Creates a new TVector with a size of 0.<br>
*******************************************************************************}<br>
function Vector: TVector; overload;<br>
begin<br>
Result := Vector(0);<br>
end;</p>
<p>{*******************************************************************************<br>
function Vector(Elements: TVariantArray): TVector;<br>
by: Echo_<br>
Description: Creates a new TVector containing the given elements.<br>
*******************************************************************************}<br>
function Vector(Elements: TVariantArray): TVector; overload;<br>
var<br>
I: Integer;<br>
begin<br>
Result := Vector(Length(Elements));<br>
for I := 0 to High(Elements) do<br>
Result.Elements[I] := Elements[I];<br>
end;</p>
<p>{*******************************************************************************<br>
function TVector.IsEmpty: Boolean;<br>
by: Echo_<br>
Description: Returns true i the size is 0, false otherwise.<br>
*******************************************************************************}<br>
function TVector.IsEmpty: Boolean;<br>
begin<br>
Result := Size = 0;<br>
end;</p>
<p>{*******************************************************************************<br>
function TVector.IndexOf(X: Variant): Integer;<br>
by: Echo_<br>
Description: Returns the first index of X, -1 otherwise.<br>
*******************************************************************************}<br>
function TVector.IndexOf(X: Variant): Integer;<br>
var<br>
I: Integer;<br>
begin<br>
Result := -1;<br>
for I := 0 to Size - 1 do<br>
if Elements[I] = X then begin<br>
Result := I;<br>
Break;<br>
end;<br>
end;</p>
<p>{*******************************************************************************<br>
function TVector.LastIndexOf(X: Variant): Integer;<br>
by: Echo_<br>
Description: Returns the last index of X, -1 otherwise.<br>
*******************************************************************************}<br>
function TVector.LastIndexOf(X: Variant): Integer;<br>
var<br>
I: Integer;<br>
begin<br>
Result := -1;<br>
for I := Size - 1 downto 0 do<br>
if Elements[I] = X then begin<br>
Result := I;<br>
Break;<br>
end;<br>
end;</p>
<p>{*******************************************************************************<br>
function TVector.ContainsElement(X: Variant): Boolean;<br>
by: Echo_<br>
Description: True X is in the TVector, false otherwise.<br>
*******************************************************************************}<br>
function TVector.ContainsElement(X: Variant): Boolean;<br>
begin<br>
Result := IndexOf(X) &gt;= 0;<br>
end;</p>
<p>{*******************************************************************************<br>
function TVector.GetElement(Index: Cardinal): Variant;<br>
by: Echo_<br>
Description: Returns the value at elements[index].<br>
*******************************************************************************}<br>
function TVector.GetElement(Index: Cardinal): Variant;<br>
begin<br>
Result := Elements[Index];<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.SetElement(Index: Cardinal; X: Variant);<br>
by: Echo_<br>
Description: Sets the value at elements[index] to x.<br>
*******************************************************************************}<br>
procedure TVector.SetElement(Index: Cardinal; X: Variant);<br>
begin<br>
Elements[Index] := X;<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.AddElement(X: Variant);<br>
by: Echo_<br>
Description: Adds X to the end of the TVector.<br>
*******************************************************************************}<br>
procedure TVector.AddElement(X: Variant); overload;<br>
begin<br>
Inc(Size);<br>
SetLength(Elements, Size);<br>
Elements[Size - 1] := X;<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.AddElement(X: Variant; Index: Cardinal);<br>
by: Echo_<br>
Description: Adds X at elements[index], shifting the remaining values right.<br>
*******************************************************************************}<br>
procedure TVector.AddElement(X: Variant; Index: Cardinal); overload;<br>
var<br>
I: Integer;<br>
A: TVariantArray;<br>
begin<br>
Inc(Size);<br>
SetLength(Elements, Size);<br>
for I := Size - 1 downto Index + 1 do<br>
Elements[I] := Elements[I - 1];</p>
<p>Elements[Index] := X;<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.AddElements(X: TVariantArray);<br>
by: Echo_<br>
Description: Adds X to the end of the TVector.<br>
*******************************************************************************}<br>
procedure TVector.AddElements(X: TVariantArray); overload;<br>
var<br>
S, I: Integer;<br>
begin<br>
S := Size;<br>
Size := Size + Length(X);<br>
SetLength(Elements, Size);<br>
for I := S to Size - 1 do<br>
Elements[I] := X[I - S];<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.AddElements(X: TVariantArray; Index: Cardinal);<br>
by: Echo_<br>
Description: Adds X at elements[index], shifting the remaining values right.<br>
*******************************************************************************}<br>
procedure TVector.AddElements(X: TVariantArray; Index: Cardinal); overload;<br>
var<br>
I: Integer;<br>
begin<br>
Size := Size + Length(X);<br>
SetLength(Elements, Size);<br>
for I := Index + High(X) downto Index do<br>
Elements[I + Length(X)] := Elements[I];</p>
<p>for I := 0 to High(X) do<br>
Elements[I + Index] := X[I];<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.DeleteElement(Index: Cardinal);<br>
by: Echo_<br>
Description: Deletes elements[index], shifting the remaining values left.<br>
*******************************************************************************}<br>
procedure TVector.DeleteElement(Index: Cardinal);<br>
var<br>
I: Integer;<br>
begin<br>
for I := Index + 1 to Size - 1 do<br>
Elements[I - 1] := Elements[I];</p>
<p>Dec(Size);<br>
SetLength(Elements, Size);<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.DeleteElements(Start, Finish: Cardinal);<br>
by: Echo_<br>
Description: Deletes elements between start (inclusive) and finish (exclusive).<br>
*******************************************************************************}<br>
procedure TVector.DeleteElements(Start, Finish: Cardinal);<br>
var<br>
Offset, I: Integer;<br>
begin<br>
Offset := Finish - Start;<br>
for I := Finish to Size - 1 do<br>
Elements[I - Offset] := Elements[I];</p>
<p>Size := Size - Offset;<br>
SetLength(Elements, Size);<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.DeleteOccurrence(X: Variant);<br>
by: Echo_<br>
Description: Deletes the first element equal to X.<br>
*******************************************************************************}<br>
procedure TVector.DeleteOccurrence(X: Variant);<br>
var<br>
Index: Integer;<br>
begin<br>
Index := IndexOf(X);<br>
if Index = -1 then<br>
Exit;</p>
<p>DeleteElement(Index);<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.DeleteLastOccurrence(X: Variant);<br>
by: Echo_<br>
Description: Deletes the last element equal to X.<br>
*******************************************************************************}<br>
procedure TVector.DeleteLastOccurrence(X: Variant);<br>
var<br>
Index: Integer;<br>
begin<br>
Index := LastIndexOf(X);<br>
if Index = -1 then<br>
Exit;</p>
<p>DeleteElement(Index);<br>
end;</p>
<p>{*******************************************************************************<br>
procedure TVector.Clear;<br>
by: Echo_<br>
Description: Sets size to 0 and deletes all elements.<br>
*******************************************************************************}<br>
procedure TVector.Clear;<br>
begin<br>
Size := 0;<br>
SetLength(Elements, Size);<br>
end;</p>
<p>{*******************************************************************************<br>
function Map(F: function(X: Variant): Variant; const V: TVector): TVector;<br>
by: Echo_<br>
Description: Applies function F to each element in V, returning a new TVector<br>
containing the results.<br>
*******************************************************************************}<br>
function Map(F: function(X: Variant): Variant; const V: TVector): TVector;<br>
var<br>
I: Integer;<br>
begin<br>
Result := Vector(V.Size);<br>
for I := 0 to High(V.Elements) do<br>
Result.SetElement(I, F(V.GetElement(I)));<br>
end;[/code]</p>
<p>An example of using Map for people unfamiliar with first-class functions:</p>
<p>[code=pascal]function Add2(A: Variant): Variant;<br>
begin<br>
Result := VarAsType(A, varInteger) + 2;<br>
end;</p>
<p>var<br>
A: TVariantArray;<br>
X, Y: TVector;<br>
begin<br>
ClearDebug;<br>
A := [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];<br>
X := Vector(A);<br>
Y := Map(<span class="mention">@Add2</span>, X);<br>
WriteLn(X);<br>
WriteLn(Y);<br>
end.[/code]</p>
<p>This will output:</p>
<p><code>{SIZE = 10, ELEMENTS = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]}
{SIZE = 10, ELEMENTS = [3, 4, 5, 6, 7, 8, 9, 10, 11, 12]}
Successfully executed.</code></p>
<p>Enjoy <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>EDIT: Removed unnecessary code, replaced procedural approach with Lape’s type methods.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tvector/480888/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tvector/480888/1</link>
        <pubDate>Thu, 31 Jan 2013 04:36:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-480888-1</guid>
        <source url="https://forum.moparisthebest.com/t/tvector/480888.rss">TVector</source>
      </item>
  </channel>
</rss>
