<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[SOLVED]Bug. [Java]</title>
    <link>https://forum.moparisthebest.com/t/solved-bug-java/420977</link>
    <description>Alright, I&#39;m with this bug. If I press the button it does a small loop till 60000 but while the loop is busy I cannon click any other buttons. So I created a new Thread and started it, but it does not work.

[code=java]
                @Override
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == button[0]) {
				Record r = new Record();
				r.start();
				r.test();
			}
		}[/code]

Record class:
[code=java]
public class Record extends Thread {

	public void test() {
		for (int i = 0; i &lt; 60000; i++)
			System.out.println(i);
	}

}[/code]

Vid:
http://www.youtube.com/watch?v=zNW_mBiEc7M</description>
    
    <lastBuildDate>Thu, 10 Nov 2011 04:35:14 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Native^, post:5, topic:420977”][quote author=Fat Cookies link=topic=523652.msg3810347#msg3810347 date=1320858838]<br>
Protip: Don’t extend the Thread class. You should uses the implements keyword to implement the Runnable interface. You create a instance of your class, then create a thread instance with your classes object as a parameter. Just like extending “Thread” you’ll need to override the run() method.<br>
[/quote]<br>
Ah, okay. I thought my book said extending Thread is the best way? Whatever, thanks.[/quote]<br>
you can only extend one class in java, you can extend how ever many you want in c++!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/9</link>
        <pubDate>Thu, 10 Nov 2011 04:35:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-9</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@_Java8 ..::Java::..]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_java8">@_Java8</a> wrote:</p>
          <blockquote>
              <p>To me, this just looks like a bunch of random letters…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/8</link>
        <pubDate>Thu, 10 Nov 2011 03:31:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-8</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>^Thank you!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/7</link>
        <pubDate>Wed, 09 Nov 2011 20:17:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-7</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>I posted the following regarding implementing Runnable vs. extending Thread in another topic (unreachable to most people, so I cannot just link you there):</p>
<blockquote>There are many reasons to prefer implementing Runnable over extending Thread. I can name a few of them here aswell.
<ol>
<li>
<p>Separation of concerns. An operation and the one performing this operation are both distinct concepts.</p>
</li>
<li>
<p>You can only run a Thread once; its life-cycle ends and it cannot be run again. But you can run a Runnable more than once, if you implemented it that way.</p>
</li>
<li>
<p>The java.util.concurrent API uses Runnable and Callable. Although, Thread is itself a Runnable, it (conceptually) makes no sense to use it as a Runnable in an ExecutorService.</p>
</li>
<li>
<p>As you already know, implementing an interface is more flexible than extending a class.</p>
</li>
<li>
<p>To extend a class means that an instance of your class actually is an instance of your parent class. To benefit from using your class, it should contain more functionality than your parent class. It should also not change the existing functionality of your parent class, because then there’s no guarantee it will work in all situations your parent class already works. So, instead, implement Runnable in pretty much all cases. Thread after all has an aggregation alternative, which is much more flexible. It delegates its own Runnable operation to the aggregated Runnable.</p>
</li>
</ol>
</blockquote>


          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/6</link>
        <pubDate>Wed, 09 Nov 2011 18:23:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-6</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="4" data-topic="420977">
<div class="title">
<div class="quote-controls"></div>
 Fat Cookies:</div>
<blockquote>
<p>Protip: Don’t extend the Thread class. You should uses the implements keyword to implement the Runnable interface. You create a instance of your class, then create a thread instance with your classes object as a parameter. Just like extending “Thread” you’ll need to override the run() method.</p>
</blockquote>
</aside>
<p>Ah, okay. I thought my book said extending Thread is the best way? Whatever, thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/5</link>
        <pubDate>Wed, 09 Nov 2011 17:29:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-5</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>Protip: Don’t extend the Thread class. You should uses the implements keyword to implement the Runnable interface. You create a instance of your class, then create a thread instance with your classes object as a parameter. Just like extending “Thread” you’ll need to override the run() method.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/4</link>
        <pubDate>Wed, 09 Nov 2011 17:13:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-4</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>[quote=“object, post:2, topic:420977”]Your Thread (Record) isn’t alive when you call your method test(). The most probable cause is that it takes longer for your Thread to actually start than it takes for your method to complete. But also, you’re not overriding the run() method, so it will complete immediately anyway.</p>
<p>Edit: Perhaps I should say that the Thread that invokes the test() method, isn’t the Thread I assume you want it to be. Override the run() method in your Record Thread and invoke the test() method from within that run() method.[/quote]<br>
Wow, thanks that actually worked.<br>
Edit: I think I had a misunderstanding of threading, I thought it is always running untill you stop the thread by hand (=code), but it obviously stops automatically when all the methods are done.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/3</link>
        <pubDate>Tue, 08 Nov 2011 17:47:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-3</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>Your Thread (Record) isn’t alive when you call your method test(). The most probable cause is that it takes longer for your Thread to actually start than it takes for your method to complete. But also, you’re not overriding the run() method, so it will complete immediately anyway.</p>
<p>Edit: Perhaps I should say that the Thread that invokes the test() method, isn’t the Thread I assume you want it to be. Override the run() method in your Record Thread and invoke the test() method from within that run() method.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/2</link>
        <pubDate>Tue, 08 Nov 2011 17:37:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-2</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
      <item>
        <title>[SOLVED]Bug. [Java]</title>
        <dc:creator><![CDATA[@Native1 Native^]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/native1">@Native1</a> wrote:</p>
          <blockquote>
              <p>Alright, I’m with this bug. If I press the button it does a small loop till 60000 but while the loop is busy I cannon click any other buttons. So I created a new Thread and started it, but it does not work.</p>
<p><code>
                @Override
		public void actionPerformed(ActionEvent e) {
			if (e.getSource() == button[0]) {
				Record r = new Record();
				r.start();
				r.test();
			}
		}</code></p>
<p>Record class:</p>
<p>[code=java]<br>
public class Record extends Thread {</p>
<pre><code>public void test() {
	for (int i = 0; i &lt; 60000; i++)
		System.out.println(i);
}
</code></pre>
<p>}[/code]</p>
<p>Vid:<br>
<a href="http://www.youtube.com/watch?v=zNW_mBiEc7M" class="onebox" target="_blank" rel="nofollow noopener">http://www.youtube.com/watch?v=zNW_mBiEc7M</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/solved-bug-java/420977/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/solved-bug-java/420977/1</link>
        <pubDate>Tue, 08 Nov 2011 17:21:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420977-1</guid>
        <source url="https://forum.moparisthebest.com/t/solved-bug-java/420977.rss">[SOLVED]Bug. [Java]</source>
      </item>
  </channel>
</rss>
