<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hiscores?</title>
    <link>https://forum.moparisthebest.com/t/hiscores/417275</link>
    <description>[code]im using 000webhost im so confused it doesnt connect can anyone help.

[code=]package server.util;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.util.Properties;

import server.model.players.Client;

/**
 * 
 * @author Joshua F
 * @author PJNoMore
 *
 */

public class HiscoresHandler {
	private static boolean HiScores = true;
	
	private static final String DB = &quot;database&quot;;
	private static final String URL = &quot;mysql12.000webhost.com&quot;;
	private static final String USER = &quot;user&quot;;
	private static final String PASS = &quot;password&quot;;
	private static final Properties prop;
	static {
		prop = new Properties();
		prop.put(&quot;user&quot;, USER);
		prop.put(&quot;password&quot;, PASS);
		//prop.put(&quot;autoReconnect&quot;, &quot;true&quot;);
		//prop.put(&quot;maxReconnects&quot;, &quot;4&quot;);
	}
	
	public static Connection conn = null;
	
	/**
	 * Connects to the database
	 */
	public static synchronized void connect() {
		try {
			Class.forName(&quot;com.mysql.jdbc.Driver&quot;);
			conn = DriverManager.getConnection(&quot;jdbc:mysql://&quot; + URL + &quot;/&quot; + DB, prop);
			System.out.println(&quot;Hiscores Handler: Success&quot;);
		} catch (Exception e) {
			System.out.println(&quot;Hiscores Handler Error: &quot;+ e);
			System.out.println(&quot;Setting hiscores to false to help not cause anymore errors.&quot;);
			HiScores = false;
		}
	}
	
	public static synchronized Connection getConnection() {
		try {
			if (conn == null || conn.isClosed()) {
				conn = DriverManager.getConnection(&quot;jdbc:mysql://&quot; + URL + &quot;/&quot;
						+ DB, prop);
			}
		} catch (SQLException e) {
			System.out.println(e);
			e.printStackTrace();
		}
		return conn;
	}
	
	/**
	 * The main method that is called upon logout
	 */
	public static void hiscoresHandler(Client c) {
		if (HiScores == true) {
			deleteHiscores(c);
			saveHiscores(c);
		}
	} 
	
	/**
	 * Part of the main method to save the hiscores
	 */
	private static synchronized void saveHiscores(Client c) {
		try {
			int playerLevel = 0;
			double overallXP = 0;
			for (int i = 0; i &lt; 21; i++) {
				playerLevel += c.getPA().getLevelForXP(c.playerXP[5], 5);
				overallXP += c.playerXP[i];
			}
			getConnection().createStatement().execute(
					&quot;INSERT INTO `hiscores` VALUES (&#39;&quot; + c.playerName + &quot;&#39;, &#39;&quot;
							+ c.playerRights + &quot;&#39;, &#39;&quot; + c.isDonator + &quot;&#39;, &#39;&quot;
							+ playerLevel + &quot;&#39;, &#39;&quot; + overallXP + &quot;&#39;, &#39;&quot;
							+ c.playerXP[0] + &quot;&#39;, &#39;&quot; + c.playerXP[1] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[2] + &quot;&#39;, &#39;&quot; + c.playerXP[3] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[4] + &quot;&#39;, &#39;&quot; + c.playerXP[5] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[6] + &quot;&#39;, &#39;&quot; + c.playerXP[7] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[8] + &quot;&#39;, &#39;&quot; + c.playerXP[9] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[10] + &quot;&#39;, &#39;&quot; + c.playerXP[11] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[12] + &quot;&#39;, &#39;&quot; + c.playerXP[13] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[14] + &quot;&#39;, &#39;&quot; + c.playerXP[15] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[16] + &quot;&#39;, &#39;&quot; + c.playerXP[17] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[18] + &quot;&#39;, &#39;&quot; + c.playerXP[19] + &quot;&#39;, &#39;&quot;
							+ c.playerXP[20] + &quot;&#39;)&quot;);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	/**
	 * Part of the main method to save the hiscores
	 */
	private static synchronized void deleteHiscores(Client c) {
		try {
			getConnection().createStatement().execute(
					&quot;DELETE FROM `hiscores` WHERE `playerName` = &#39;&quot;
							+ c.playerName + &quot;&#39;&quot;);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	
	/**
	 * Will wipe out the hiscores table, therefor cleaning them
	 */
	public static synchronized void clearHiscores() {
		try {
			getConnection().createStatement().execute(
					&quot;TRUNCATE TABLE `hiscores`&quot;);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
[/code]</description>
    
    <lastBuildDate>Fri, 07 Oct 2011 05:30:14 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hiscores/417275.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hiscores?</title>
        <dc:creator><![CDATA[@stnbarton12 stnbarton12]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/stnbarton12">@stnbarton12</a> wrote:</p>
          <blockquote>
              <p>[code]im using 000webhost im so confused it doesnt connect can anyone help.</p>
<p>[code=]package server.util;</p>
<p>import java.sql.Connection;<br>
import java.sql.DriverManager;<br>
import java.sql.SQLException;<br>
import java.util.Properties;</p>
<p>import server.model.players.Client;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Joshua F</li>
<li>
<span class="mention">@author</span> PJNoMore</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class HiscoresHandler {<br>
private static boolean HiScores = true;</p>
<pre><code>private static final String DB = "database";
private static final String URL = "mysql12.000webhost.com";
private static final String USER = "user";
private static final String PASS = "password";
private static final Properties prop;
static {
	prop = new Properties();
	prop.put("user", USER);
	prop.put("password", PASS);
	//prop.put("autoReconnect", "true");
	//prop.put("maxReconnects", "4");
}

public static Connection conn = null;

/**
 * Connects to the database
 */
public static synchronized void connect() {
	try {
		Class.forName("com.mysql.jdbc.Driver");
		conn = DriverManager.getConnection("jdbc:mysql://" + URL + "/" + DB, prop);
		System.out.println("Hiscores Handler: Success");
	} catch (Exception e) {
		System.out.println("Hiscores Handler Error: "+ e);
		System.out.println("Setting hiscores to false to help not cause anymore errors.");
		HiScores = false;
	}
}

public static synchronized Connection getConnection() {
	try {
		if (conn == null || conn.isClosed()) {
			conn = DriverManager.getConnection("jdbc:mysql://" + URL + "/"
					+ DB, prop);
		}
	} catch (SQLException e) {
		System.out.println(e);
		e.printStackTrace();
	}
	return conn;
}

/**
 * The main method that is called upon logout
 */
public static void hiscoresHandler(Client c) {
	if (HiScores == true) {
		deleteHiscores(c);
		saveHiscores(c);
	}
} 

/**
 * Part of the main method to save the hiscores
 */
private static synchronized void saveHiscores(Client c) {
	try {
		int playerLevel = 0;
		double overallXP = 0;
		for (int i = 0; i &lt; 21; i++) {
			playerLevel += c.getPA().getLevelForXP(c.playerXP[5], 5);
			overallXP += c.playerXP[i];
		}
		getConnection().createStatement().execute(
				"INSERT INTO `hiscores` VALUES ('" + c.playerName + "', '"
						+ c.playerRights + "', '" + c.isDonator + "', '"
						+ playerLevel + "', '" + overallXP + "', '"
						+ c.playerXP[0] + "', '" + c.playerXP[1] + "', '"
						+ c.playerXP[2] + "', '" + c.playerXP[3] + "', '"
						+ c.playerXP[4] + "', '" + c.playerXP[5] + "', '"
						+ c.playerXP[6] + "', '" + c.playerXP[7] + "', '"
						+ c.playerXP[8] + "', '" + c.playerXP[9] + "', '"
						+ c.playerXP[10] + "', '" + c.playerXP[11] + "', '"
						+ c.playerXP[12] + "', '" + c.playerXP[13] + "', '"
						+ c.playerXP[14] + "', '" + c.playerXP[15] + "', '"
						+ c.playerXP[16] + "', '" + c.playerXP[17] + "', '"
						+ c.playerXP[18] + "', '" + c.playerXP[19] + "', '"
						+ c.playerXP[20] + "')");
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/**
 * Part of the main method to save the hiscores
 */
private static synchronized void deleteHiscores(Client c) {
	try {
		getConnection().createStatement().execute(
				"DELETE FROM `hiscores` WHERE `playerName` = '"
						+ c.playerName + "'");
	} catch (Exception e) {
		e.printStackTrace();
	}
}

/**
 * Will wipe out the hiscores table, therefor cleaning them
 */
public static synchronized void clearHiscores() {
	try {
		getConnection().createStatement().execute(
				"TRUNCATE TABLE `hiscores`");
	} catch (Exception e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hiscores/417275/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hiscores/417275/1</link>
        <pubDate>Fri, 07 Oct 2011 05:30:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417275-1</guid>
        <source url="https://forum.moparisthebest.com/t/hiscores/417275.rss">Hiscores?</source>
      </item>
  </channel>
</rss>
