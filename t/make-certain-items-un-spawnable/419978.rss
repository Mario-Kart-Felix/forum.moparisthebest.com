<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Make certain items un-spawnable</title>
    <link>https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978</link>
    <description>Put this in commands.java     I dont see where i can explain much but ill try.

where it has the &lt;blockquote&gt;||&lt;/blockquote&gt; stands for an exeption

where it says &lt;blockquote&gt;if (c.inWild() || c.isInArd() || c.isInPbox() || c.isInFala() || c.inFunPk())&lt;/blockquote&gt;
It shows where you cant spawn.

This is pretty obvious where it says &lt;blockquote&gt;int[] unspawnable = {};&lt;/blockquote&gt;
Just put the numbers you want to be unspawnable between the {} and separate with commas 

&lt;blockquote&gt;if (playerCommand.startsWith(&quot;item&quot;) || playerCommand.startsWith(&quot;pickup&quot;)) {
				if (c.inWild() || c.isInArd() || c.isInPbox() || c.isInFala() || c.inFunPk())
					return;
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int[] unspawnable = {};
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					int itemID = Integer.parseInt(args[1]);
					for(int i : unspawnable) {
						if(c.playerRights &lt;= 2) {
							if(itemID == i) {
								c.sendMessage(&quot;You cannot spawn this item.&quot;);
								return;
							}
						}
					}
					if ((newItemID &lt;= 30000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
						//System.out.println(&quot;Spawned: &quot; + newItemID + &quot; by: &quot; + c.playerName);
						c.sendMessage(&quot;Spawned: &quot; + newItemID + &quot;&quot;);
					} else {
						c.sendMessage(&quot;That item ID does not exist.&quot;);
					}
				} else {
					c.sendMessage(&quot;Wrong command or doesn&#39;t exist&quot;);
				}
				} catch (Exception e) {
				
				}
			}&lt;/blockquote&gt;


&lt;blockquote&gt;package server.model.players;

import java.net.InetSocketAddress;

import server.Config;
import server.Server;
import server.model.npcs.NPCHandler;
import server.util.Misc;
import server.util.Stream;

public class PlayerHandler {

	
	public static Player players[] = new Player[Config.MAX_PLAYERS];
	public static String messageToAll = &quot;&quot;;
	public static int playerCount = 0;
	public static String playersCurrentlyOn[] = new String[Config.MAX_PLAYERS];
	public static boolean updateAnnounced;
	public static boolean updateRunning;
	public static int updateSeconds;
	public static long updateStartTime;
	private boolean kickAllPlayers = false;
        public static PlayerSave save;
	
	
	static {
	Runtime.getRuntime().addShutdownHook(new Thread());
		PlayerSave playerSave;
		Client cliento1;
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++)
		if(players[i] != null)
                                       ((Client)players[i]).save.saveGame(Client.cliento2);
                }

    public boolean newPlayerClient(Client client1)
    {
    	int slot = -1;
    	for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
    		if(players[i] == null || players[i].disconnected) {
    			slot = i;
    			break;
    		}
    	}
    	if(slot == -1)
            return false;
        client1.handler = this;
        client1.playerId = slot;
        players[slot] = client1;
        players[slot].isActive = true;
        players[slot].connectedFrom = ((InetSocketAddress) client1.getSession().getRemoteAddress()).getAddress().getHostAddress();
        if(Config.SERVER_DEBUG)	
        	Misc.println(&quot;Player Slot &quot;+slot+&quot; slot 0 &quot;+players[0]+&quot; Player Hit &quot;+players[slot]);//does nothing.... ;;players dont give the right amount of playesr? i am getting the right amount why not me? logout log inand u wont get the right
        return true;
    }

	public void destruct() {
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(players[i] == null) 
				continue;
			players[i].destruct();
			players[i] = null;
		}
	}

	public static int getPlayerCount() {
		return playerCount;
	}

	public void updatePlayerNames() {
		playerCount = 0;
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(players[i] != null) {
				playersCurrentlyOn[i] = players[i].playerName;
				playerCount++;
			} else {
				playersCurrentlyOn[i] = &quot;&quot;;
			}
		}
	}

	public static boolean isPlayerOn(String playerName) {
		synchronized (PlayerHandler.players) {
			for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if(playersCurrentlyOn[i] != null){
					if(playersCurrentlyOn[i].equalsIgnoreCase(playerName)) {
						return true;
					}
				}
			}
			return false;
		}
	}
	public void process() {
		synchronized (PlayerHandler.players) {
			long start = System.currentTimeMillis();
			updatePlayerNames();
			
			if(kickAllPlayers) {
				for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
					if(players[i] != null) {
						players[i].disconnected = true;
					}
				}
			}

			for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if(players[i] == null || !players[i].isActive) continue;
				try {					
					
					if(players[i].disconnected &amp;&amp; (System.currentTimeMillis() - players[i].logoutDelay &gt; 10000 || players[i].properLogout || kickAllPlayers)) {
						if(players[i].inTrade) {
							Client o = (Client) Server.playerHandler.players[players[i].tradeWith];
							if(o != null) {
								o.getTradeAndDuel().declineTrade();
							}
						}
						if(players[i].duelStatus == 5) {
							Client o = (Client) Server.playerHandler.players[players[i].duelingWith];
							if(o != null) {
								o.getTradeAndDuel().duelVictory();
							}
						} else if (players[i].duelStatus &lt;= 4 &amp;&amp; players[i].duelStatus &gt;= 1) {
							Client o = (Client) Server.playerHandler.players[players[i].duelingWith];
							if(o != null) {
								o.getTradeAndDuel().declineDuel();
							}
						}
						Client o = (Client) Server.playerHandler.players[i];
						if(PlayerSave.saveGame(o)) { 
							System.out.println(&quot;Game saved for player &quot;+players[i].playerName); 
						} else { 
							System.out.println(&quot;Could not save for &quot;+players[i].playerName); 
						}
						removePlayer(players[i]);
						players[i] = null;
						continue;
					}
					
					players[i].preProcessing();			
					while(players[i].processQueuedPackets());
					players[i].processPackets = 0;
					players[i].process();
					players[i].postProcessing();
					players[i].getNextPlayerMovement();
					
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
	
			
			for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if(players[i] == null || !players[i].isActive) continue;
				try {
					if(players[i].disconnected &amp;&amp; (System.currentTimeMillis() - players[i].logoutDelay &gt; 10000 || players[i].properLogout || kickAllPlayers)) {
						if(players[i].inTrade) {
							Client o = (Client) Server.playerHandler.players[players[i].tradeWith];
							if(o != null) {
								o.getTradeAndDuel().declineTrade();
							}
						}
						if(players[i].duelStatus == 5) {
							Client o1 = (Client) Server.playerHandler.players[players[i].duelingWith];
							if(o1 != null) {
								o1.getTradeAndDuel().duelVictory();
							}
						} else if (players[i].duelStatus &lt;= 4 &amp;&amp; players[i].duelStatus &gt;= 1) {
							Client o1 = (Client) Server.playerHandler.players[players[i].duelingWith];
							if(o1 != null) {
								o1.getTradeAndDuel().declineDuel();
							}
						}
						
						Client o1 = (Client) Server.playerHandler.players[i];
						if(PlayerSave.saveGame(o1)){ 
							System.out.println(&quot;Game saved for player &quot;+players[i].playerName); 
						} else { 
							System.out.println(&quot;Could not save for &quot;+players[i].playerName); 
						}
						removePlayer(players[i]);
						players[i] = null;
					} else {
						Client o = (Client) Server.playerHandler.players[i];
						//if(o.g) {
							if(!players[i].initialized) {
								players[i].initialize();
								players[i].initialized = true;
							}
							else {
								players[i].update();
							}
						//}
					}
				} catch(Exception e) {
					e.printStackTrace();
				}
			}
			
			if(updateRunning &amp;&amp; !updateAnnounced) {
				updateAnnounced = true;
				Server.UpdateServer = true;
			}
			if(updateRunning &amp;&amp; (System.currentTimeMillis() - updateStartTime &gt; (updateSeconds*1000))) {
				kickAllPlayers  = true;
			}
			
			for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if(players[i] == null || !players[i].isActive) continue;
				try {
					players[i].clearUpdateFlags();
				} catch(Exception e) {
					e.printStackTrace();
				}	
			}
		Server.TIMES[2] = start - System.currentTimeMillis();
		}
	}
	
	public void updateNPC(Player plr, Stream str) {
		//synchronized(plr) {
			updateBlock.currentOffset = 0;
			
			str.createFrameVarSizeWord(65);
			str.initBitAccess();
			
			str.writeBits(8, plr.npcListSize);
			int size = plr.npcListSize;
			plr.npcListSize = 0;
			for(int i = 0; i &lt; size; i++) {
				if(plr.RebuildNPCList == false &amp;&amp; plr.withinDistance(plr.npcList[i]) == true) {
					plr.npcList[i].updateNPCMovement(str);
					plr.npcList[i].appendNPCUpdateBlock(updateBlock);
					plr.npcList[plr.npcListSize++] = plr.npcList[i];
				} else {
					int id = plr.npcList[i].npcId;
					plr.npcInListBitmap[id&gt;&gt;3] &amp;= ~(1 &lt;&lt; (id&amp;7));		
					str.writeBits(1, 1);
					str.writeBits(2, 3);		
				}
			}

			
			for(int i = 0; i &lt; NPCHandler.maxNPCs; i++) {
				if(Server.npcHandler.npcs[i] != null) {
					int id = Server.npcHandler.npcs[i].npcId;
					if (plr.RebuildNPCList == false &amp;&amp; (plr.npcInListBitmap[id&gt;&gt;3]&amp;(1 &lt;&lt; (id&amp;7))) != 0) {
						
					} else if (plr.withinDistance(Server.npcHandler.npcs[i]) == false) {
						
					} else {
						plr.addNewNPC(Server.npcHandler.npcs[i], str, updateBlock);
					}
				}
			}
			
			plr.RebuildNPCList = false;

			if(updateBlock.currentOffset &gt; 0) {
				str.writeBits(14, 16383);	
				str.finishBitAccess();
				str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
			} else {
				str.finishBitAccess();
			}
			str.endFrameVarSizeWord();
		//}
	}

	private Stream updateBlock = new Stream(new byte[Config.BUFFER_SIZE]);
	
	public void updatePlayer(Player plr, Stream str) {
	//synchronized(plr) {
			updateBlock.currentOffset = 0;
			if(updateRunning &amp;&amp; !updateAnnounced) {
				str.createFrame(114);
				str.writeWordBigEndian(updateSeconds*50/30);
			}
			plr.updateThisPlayerMovement(str);		
			boolean saveChatTextUpdate = plr.isChatTextUpdateRequired();
			plr.setChatTextUpdateRequired(false);
			plr.appendPlayerUpdateBlock(updateBlock);
			plr.setChatTextUpdateRequired(saveChatTextUpdate);
			str.writeBits(8, plr.playerListSize);
			int size = plr.playerListSize;
			plr.playerListSize = 0;	
			for(int i = 0; i &lt; size; i++) {			
				if(!plr.didTeleport &amp;&amp; !plr.playerList[i].didTeleport &amp;&amp; plr.withinDistance(plr.playerList[i])) {
					plr.playerList[i].updatePlayerMovement(str);
					plr.playerList[i].appendPlayerUpdateBlock(updateBlock);
					plr.playerList[plr.playerListSize++] = plr.playerList[i];
				} else {
					int id = plr.playerList[i].playerId;
					plr.playerInListBitmap[id&gt;&gt;3] &amp;= ~(1 &lt;&lt; (id&amp;7));
					str.writeBits(1, 1);
					str.writeBits(2, 3);
				}
			}
			int j = 0;
			for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				//if(updateBlock.currentOffset &gt;= 4000)
				//break;
				if(plr.playerListSize &gt;= 254) break;
				if(updateBlock.currentOffset+str.currentOffset &gt;= 4900)
				break;
				if(players[i] == null || !players[i].isActive || players[i] == plr) continue;
				int id = players[i].playerId;
				if((plr.playerInListBitmap[id&gt;&gt;3]&amp;(1 &lt;&lt; (id&amp;7))) != 0) continue;
				if(j &gt;= 10) break;	
				if(!plr.withinDistance(players[i])) continue;		
				plr.addNewPlayer(players[i], str, updateBlock);//open player .java for me
				j++;
			}
	
			if(updateBlock.currentOffset &gt; 0) {
				str.writeBits(11, 2047);	
				str.finishBitAccess();
	
				
				str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
			}
			else str.finishBitAccess();
	
			str.endFrameVarSizeWord();
		
	}

	private void removePlayer(Player plr) {
		if(plr.privateChat != 2) { 
			for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
				if (players[i] == null || players[i].isActive == false) continue;
				Client o = (Client)Server.playerHandler.players[i];
				if(o != null) {
					o.getPA().updatePM(plr.playerId, 0);
				}
			}
		}
		plr.saveCharacter = true;
		plr.destruct();
               
		
	}
	
}&lt;/blockquote&gt;</description>
    
    <lastBuildDate>Sun, 30 Oct 2011 14:55:27 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Make certain items un-spawnable</title>
        <dc:creator><![CDATA[@Mod_L Mod L]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_l">@Mod_L</a> wrote:</p>
          <blockquote>
              <p>gj,wont use tho. code looks good.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978/2</link>
        <pubDate>Sun, 30 Oct 2011 14:55:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-419978-2</guid>
        <source url="https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978.rss">Make certain items un-spawnable</source>
      </item>
      <item>
        <title>Make certain items un-spawnable</title>
        <dc:creator><![CDATA[@zach55200 zach55200]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zach55200">@zach55200</a> wrote:</p>
          <blockquote>
              <p>Put this in commands.java     I dont see where i can explain much but ill try.</p>
<p>where it has the </p><blockquote>||</blockquote> stands for an exeption
<p>where it says </p><blockquote>if (c.inWild() || c.isInArd() || c.isInPbox() || c.isInFala() || c.inFunPk())</blockquote><br>
It shows where you cant spawn.
<p>This is pretty obvious where it says </p><blockquote>int[] unspawnable = {};</blockquote><br>
Just put the numbers you want to be unspawnable between the {} and separate with commas
<blockquote>if (playerCommand.startsWith("item") || playerCommand.startsWith("pickup")) {
				if (c.inWild() || c.isInArd() || c.isInPbox() || c.isInFala() || c.inFunPk())
					return;
				try {
				String[] args = playerCommand.split(" ");
				int[] unspawnable = {};
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					int itemID = Integer.parseInt(args[1]);
					for(int i : unspawnable) {
						if(c.playerRights &lt;= 2) {
							if(itemID == i) {
								c.sendMessage("You cannot spawn this item.");
								return;
							}
						}
					}
					if ((newItemID &lt;= 30000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
						//System.out.println("Spawned: " + newItemID + " by: " + c.playerName);
						c.sendMessage("Spawned: " + newItemID + "");
					} else {
						c.sendMessage("That item ID does not exist.");
					}
				} else {
					c.sendMessage("Wrong command or doesn't exist");
				}
				} catch (Exception e) {
<pre><code>			}
		}&lt;/blockquote&gt;
</code></pre>
<blockquote>package server.model.players;
<p>import java.net.InetSocketAddress;</p>
<p>import server.Config;<br>
import server.Server;<br>
import server.model.npcs.NPCHandler;<br>
import server.util.Misc;<br>
import server.util.Stream;</p>
<p>public class PlayerHandler {</p>
<pre><code>public static Player players[] = new Player[Config.MAX_PLAYERS];
public static String messageToAll = "";
public static int playerCount = 0;
public static String playersCurrentlyOn[] = new String[Config.MAX_PLAYERS];
public static boolean updateAnnounced;
public static boolean updateRunning;
public static int updateSeconds;
public static long updateStartTime;
private boolean kickAllPlayers = false;
    public static PlayerSave save;


static {
Runtime.getRuntime().addShutdownHook(new Thread());
	PlayerSave playerSave;
	Client cliento1;
	for(int i = 0; i &lt; Config.MAX_PLAYERS; i++)
	if(players[i] != null)
                                   ((Client)players[i]).save.saveGame(Client.cliento2);
            }

public boolean newPlayerClient(Client client1)
{
	int slot = -1;
	for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
		if(players[i] == null || players[i].disconnected) {
			slot = i;
			break;
		}
	}
	if(slot == -1)
        return false;
    client1.handler = this;
    client1.playerId = slot;
    players[slot] = client1;
    players[slot].isActive = true;
    players[slot].connectedFrom = ((InetSocketAddress) client1.getSession().getRemoteAddress()).getAddress().getHostAddress();
    if(Config.SERVER_DEBUG)	
    	Misc.println("Player Slot "+slot+" slot 0 "+players[0]+" Player Hit "+players[slot]);//does nothing.... ;;players dont give the right amount of playesr? i am getting the right amount why not me? logout log inand u wont get the right
    return true;
}

public void destruct() {
	for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if(players[i] == null) 
			continue;
		players[i].destruct();
		players[i] = null;
	}
}

public static int getPlayerCount() {
	return playerCount;
}

public void updatePlayerNames() {
	playerCount = 0;
	for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
		if(players[i] != null) {
			playersCurrentlyOn[i] = players[i].playerName;
			playerCount++;
		} else {
			playersCurrentlyOn[i] = "";
		}
	}
}

public static boolean isPlayerOn(String playerName) {
	synchronized (PlayerHandler.players) {
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(playersCurrentlyOn[i] != null){
				if(playersCurrentlyOn[i].equalsIgnoreCase(playerName)) {
					return true;
				}
			}
		}
		return false;
	}
}
public void process() {
	synchronized (PlayerHandler.players) {
		long start = System.currentTimeMillis();
		updatePlayerNames();
		
		if(kickAllPlayers) {
			for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
				if(players[i] != null) {
					players[i].disconnected = true;
				}
			}
		}

		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(players[i] == null || !players[i].isActive) continue;
			try {					
				
				if(players[i].disconnected &amp;&amp; (System.currentTimeMillis() - players[i].logoutDelay &gt; 10000 || players[i].properLogout || kickAllPlayers)) {
					if(players[i].inTrade) {
						Client o = (Client) Server.playerHandler.players[players[i].tradeWith];
						if(o != null) {
							o.getTradeAndDuel().declineTrade();
						}
					}
					if(players[i].duelStatus == 5) {
						Client o = (Client) Server.playerHandler.players[players[i].duelingWith];
						if(o != null) {
							o.getTradeAndDuel().duelVictory();
						}
					} else if (players[i].duelStatus &lt;= 4 &amp;&amp; players[i].duelStatus &gt;= 1) {
						Client o = (Client) Server.playerHandler.players[players[i].duelingWith];
						if(o != null) {
							o.getTradeAndDuel().declineDuel();
						}
					}
					Client o = (Client) Server.playerHandler.players[i];
					if(PlayerSave.saveGame(o)) { 
						System.out.println("Game saved for player "+players[i].playerName); 
					} else { 
						System.out.println("Could not save for "+players[i].playerName); 
					}
					removePlayer(players[i]);
					players[i] = null;
					continue;
				}
				
				players[i].preProcessing();			
				while(players[i].processQueuedPackets());
				players[i].processPackets = 0;
				players[i].process();
				players[i].postProcessing();
				players[i].getNextPlayerMovement();
				
			} catch(Exception e) {
				e.printStackTrace();
			}
		}

		
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(players[i] == null || !players[i].isActive) continue;
			try {
				if(players[i].disconnected &amp;&amp; (System.currentTimeMillis() - players[i].logoutDelay &gt; 10000 || players[i].properLogout || kickAllPlayers)) {
					if(players[i].inTrade) {
						Client o = (Client) Server.playerHandler.players[players[i].tradeWith];
						if(o != null) {
							o.getTradeAndDuel().declineTrade();
						}
					}
					if(players[i].duelStatus == 5) {
						Client o1 = (Client) Server.playerHandler.players[players[i].duelingWith];
						if(o1 != null) {
							o1.getTradeAndDuel().duelVictory();
						}
					} else if (players[i].duelStatus &lt;= 4 &amp;&amp; players[i].duelStatus &gt;= 1) {
						Client o1 = (Client) Server.playerHandler.players[players[i].duelingWith];
						if(o1 != null) {
							o1.getTradeAndDuel().declineDuel();
						}
					}
					
					Client o1 = (Client) Server.playerHandler.players[i];
					if(PlayerSave.saveGame(o1)){ 
						System.out.println("Game saved for player "+players[i].playerName); 
					} else { 
						System.out.println("Could not save for "+players[i].playerName); 
					}
					removePlayer(players[i]);
					players[i] = null;
				} else {
					Client o = (Client) Server.playerHandler.players[i];
					//if(o.g) {
						if(!players[i].initialized) {
							players[i].initialize();
							players[i].initialized = true;
						}
						else {
							players[i].update();
						}
					//}
				}
			} catch(Exception e) {
				e.printStackTrace();
			}
		}
		
		if(updateRunning &amp;&amp; !updateAnnounced) {
			updateAnnounced = true;
			Server.UpdateServer = true;
		}
		if(updateRunning &amp;&amp; (System.currentTimeMillis() - updateStartTime &gt; (updateSeconds*1000))) {
			kickAllPlayers  = true;
		}
		
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			if(players[i] == null || !players[i].isActive) continue;
			try {
				players[i].clearUpdateFlags();
			} catch(Exception e) {
				e.printStackTrace();
			}	
		}
	Server.TIMES[2] = start - System.currentTimeMillis();
	}
}

public void updateNPC(Player plr, Stream str) {
	//synchronized(plr) {
		updateBlock.currentOffset = 0;
		
		str.createFrameVarSizeWord(65);
		str.initBitAccess();
		
		str.writeBits(8, plr.npcListSize);
		int size = plr.npcListSize;
		plr.npcListSize = 0;
		for(int i = 0; i &lt; size; i++) {
			if(plr.RebuildNPCList == false &amp;&amp; plr.withinDistance(plr.npcList[i]) == true) {
				plr.npcList[i].updateNPCMovement(str);
				plr.npcList[i].appendNPCUpdateBlock(updateBlock);
				plr.npcList[plr.npcListSize++] = plr.npcList[i];
			} else {
				int id = plr.npcList[i].npcId;
				plr.npcInListBitmap[id&gt;&gt;3] &amp;= ~(1 &lt;&lt; (id&amp;7));		
				str.writeBits(1, 1);
				str.writeBits(2, 3);		
			}
		}

		
		for(int i = 0; i &lt; NPCHandler.maxNPCs; i++) {
			if(Server.npcHandler.npcs[i] != null) {
				int id = Server.npcHandler.npcs[i].npcId;
				if (plr.RebuildNPCList == false &amp;&amp; (plr.npcInListBitmap[id&gt;&gt;3]&amp;(1 &lt;&lt; (id&amp;7))) != 0) {
					
				} else if (plr.withinDistance(Server.npcHandler.npcs[i]) == false) {
					
				} else {
					plr.addNewNPC(Server.npcHandler.npcs[i], str, updateBlock);
				}
			}
		}
		
		plr.RebuildNPCList = false;

		if(updateBlock.currentOffset &gt; 0) {
			str.writeBits(14, 16383);	
			str.finishBitAccess();
			str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
		} else {
			str.finishBitAccess();
		}
		str.endFrameVarSizeWord();
	//}
}

private Stream updateBlock = new Stream(new byte[Config.BUFFER_SIZE]);

public void updatePlayer(Player plr, Stream str) {
//synchronized(plr) {
		updateBlock.currentOffset = 0;
		if(updateRunning &amp;&amp; !updateAnnounced) {
			str.createFrame(114);
			str.writeWordBigEndian(updateSeconds*50/30);
		}
		plr.updateThisPlayerMovement(str);		
		boolean saveChatTextUpdate = plr.isChatTextUpdateRequired();
		plr.setChatTextUpdateRequired(false);
		plr.appendPlayerUpdateBlock(updateBlock);
		plr.setChatTextUpdateRequired(saveChatTextUpdate);
		str.writeBits(8, plr.playerListSize);
		int size = plr.playerListSize;
		plr.playerListSize = 0;	
		for(int i = 0; i &lt; size; i++) {			
			if(!plr.didTeleport &amp;&amp; !plr.playerList[i].didTeleport &amp;&amp; plr.withinDistance(plr.playerList[i])) {
				plr.playerList[i].updatePlayerMovement(str);
				plr.playerList[i].appendPlayerUpdateBlock(updateBlock);
				plr.playerList[plr.playerListSize++] = plr.playerList[i];
			} else {
				int id = plr.playerList[i].playerId;
				plr.playerInListBitmap[id&gt;&gt;3] &amp;= ~(1 &lt;&lt; (id&amp;7));
				str.writeBits(1, 1);
				str.writeBits(2, 3);
			}
		}
		int j = 0;
		for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
			//if(updateBlock.currentOffset &gt;= 4000)
			//break;
			if(plr.playerListSize &gt;= 254) break;
			if(updateBlock.currentOffset+str.currentOffset &gt;= 4900)
			break;
			if(players[i] == null || !players[i].isActive || players[i] == plr) continue;
			int id = players[i].playerId;
			if((plr.playerInListBitmap[id&gt;&gt;3]&amp;(1 &lt;&lt; (id&amp;7))) != 0) continue;
			if(j &gt;= 10) break;	
			if(!plr.withinDistance(players[i])) continue;		
			plr.addNewPlayer(players[i], str, updateBlock);//open player .java for me
			j++;
		}

		if(updateBlock.currentOffset &gt; 0) {
			str.writeBits(11, 2047);	
			str.finishBitAccess();

			
			str.writeBytes(updateBlock.buffer, updateBlock.currentOffset, 0);
		}
		else str.finishBitAccess();

		str.endFrameVarSizeWord();
	
}

private void removePlayer(Player plr) {
	if(plr.privateChat != 2) { 
		for(int i = 1; i &lt; Config.MAX_PLAYERS; i++) {
			if (players[i] == null || players[i].isActive == false) continue;
			Client o = (Client)Server.playerHandler.players[i];
			if(o != null) {
				o.getPA().updatePM(plr.playerId, 0);
			}
		}
	}
	plr.saveCharacter = true;
	plr.destruct();
           
	
}
</code></pre>
<p>}</p>
</blockquote>
</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978/1</link>
        <pubDate>Sun, 30 Oct 2011 00:24:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-419978-1</guid>
        <source url="https://forum.moparisthebest.com/t/make-certain-items-un-spawnable/419978.rss">Make certain items un-spawnable</source>
      </item>
  </channel>
</rss>
