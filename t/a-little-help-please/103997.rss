<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>A little help please!</title>
    <link>https://forum.moparisthebest.com/t/a-little-help-please/103997</link>
    <description>I am in need of help as people are saying you need to find things in your client.java.
I know where it is and all but like.
Why don&#39;t I have same info as other people?
( hear is it )

----------------------------------------------------------------------------------------------
import java.io.*;

public class client extends Player implements Runnable
{

	public static final int bufferSize = 5000;
	private java.net.Socket mySock;
		private java.io.InputStream in;
		private java.io.OutputStream out;
	public byte buffer[] = null;
	public int readPtr, writePtr;

	public stream inStream = null, outStream = null;

	public Cryption inStreamDecryption = null, outStreamDecryption = null;

	public int timeOutCounter = 0;		// to detect timeouts on the connection to the client

	public void update()
	{
				outStream.createFrame(141);//141
		outStream.initBitAccess();
		//updatethisplayerstate
		outStream.writeBits(11,currentX);
		outStream.writeBits(13,currentY);
		outStream.writeBits(4,0);
		outStream.writeBits(8,0);
		outStream.finishBitAccess();
		outStream.finishFrame();
		flushOutStream();
		//need stuff here
	}

	public client(java.net.Socket s, int _playerId)
	{
		super(_playerId);
		mySock = s;
		try
		{
			in = s.getInputStream();
			out = s.getOutputStream();
		}
		catch(java.io.IOException ioe)
		{
			misc.println(&quot;RSC Server: Exception!&quot;);
			ioe.printStackTrace(); 
		}
		outStream = new stream(new byte[bufferSize]);
		outStream.currentOffset = 0;
		inStream = new stream(new byte[bufferSize]);
		inStream.currentOffset = 0;
		readPtr = writePtr = 0;
		buffer = buffer = new byte[bufferSize];
	}


//packets
//
	public void inventory(){
		outStream.createFrame(37);
		outStream.writeByte(30);
		for(int i = 0; i &lt; 30; i++)
			outStream.writeWord(575);
		outStream.finishFrame();
	}


	public void loadit(int something,int adsfadsf)
	{
		outStream.createFrame(141);//141
		outStream.initBitAccess();
		outStream.writeBits(11,something);
		outStream.writeBits(13,adsfadsf);
		outStream.writeBits(4,0);
		outStream.writeBits(8,0);
		outStream.finishBitAccess();
		outStream.finishFrame();
		flushOutStream();
	}
	

	public int nurb = 0;
	public void addplayer(String s1)
	{
		outStream.createFrame(183);	//183
		outStream.writeWord(1);		//playernum to update
		outStream.writeWord(playerId);//pid
		outStream.writeByte(5);		//updatetype
		outStream.writeWord(9144);	//playermodel
		outStream.writeQWord(misc.playerNameToInt64(s1));
		
		outStream.writeByte(12);	//what to loop through
		outStream.writeByte(18);		//large/head 18 (phats around 150)
		outStream.writeByte(60);		//body 60
		outStream.writeByte(42);		//legs 42
		outStream.writeByte(103);		//shield/1h weop 114
		outStream.writeByte(114);		//sword/2h wep 103
		outStream.writeByte(0);		//med/hat
		outStream.writeByte(0);		//chainmail/robe?   81
		outStream.writeByte(0);		//skirt
		outStream.writeByte(81);		//ammy?
		outStream.writeByte(0);		//gloves?
		outStream.writeByte(0);		//boots?
		outStream.writeByte(67);		//cape
		
		outStream.writeByte(9);		//0-0 hair colour
		outStream.writeByte(8);		//0-0 body colour
		outStream.writeByte(14);	//0-0 legs colour
		outStream.writeByte(0);		//0-0 skin colour
		outStream.writeByte(3);		//combat lvl
		outStream.writeByte(1);		//skulled
		outStream.finishFrame();
		flushOutStream();
}
							//pid	something
	public void setPlayer(int pid, int arg1, int arg2, int arg3, int arg4)
	{
		outStream.createFrame(249);//249
		outStream.writeWord(pid);
		outStream.writeWord(arg1);
		outStream.writeWord(arg2);
		outStream.writeWord(arg3);
		outStream.writeWord(arg4);
		outStream.finishFrame();
		flushOutStream();
	}

	public void sendMsg(String message){
		outStream.createFrame(168);
		outStream.writeString(message);
		outStream.finishFrame();
	}
	
	public void loadObj(){
		outStream.createFrame(158);
		outStream.finishFrame();
	}
	
	public void logOut(){
		outStream.createFrame(125);
		outStream.finishFrame();
	}

	public void shutdownError(String errorMessage)
	{
		misc.println(&quot;Fatal: &quot;+errorMessage);
		destruct();
	}

	public void destruct()
	{
		if(mySock == null) return;
		try
		{
			misc.println(&quot;ClientHandler: Client &quot;+playerName+&quot; disconnected.&quot;);
			disconnected = true;

			if(in != null) in.close();
			if(out != null) out.close();
			mySock.close();
			mySock = null;
			in = null;
			out = null;
			inStream = null;
			outStream = null;
			isActive = false;
			synchronized(this) { notify(); }
			buffer = null;
		} catch(java.io.IOException ioe) {
			ioe.printStackTrace();
		}
		super.destruct();
	}

	public void flushOutStream()
	{
		if(disconnected || outStream.currentOffset == 0) return;
		synchronized(this)
		{
			int maxWritePtr = (readPtr+bufferSize-2) % bufferSize;
			for(int i = 0; i &lt; outStream.currentOffset; i++)
			{
				buffer[writePtr] = outStream.buffer[i];
				writePtr = (writePtr+1) % bufferSize;
				if(writePtr == maxWritePtr)
				{
					shutdownError(&quot;Buffer overflow.&quot;);
					disconnected = true;
					return;
				}
			}
			outStream.currentOffset = 0;
			notify();
		}
	}

	private void directFlushOutStream() throws java.io.IOException
	{
		out.write(outStream.buffer, 0, outStream.currentOffset);
		outStream.currentOffset = 0;
	}

	private void fillInStream(int forceRead) throws java.io.IOException
	{
		inStream.currentOffset = 0;
		in.read(inStream.buffer, 0, forceRead);
	}

	public void run()
	{
		isActive = false;
		long serverSessionKey = 0, clientSessionKey = 0;
		serverSessionKey = ((long)(java.lang.Math.random() * 99999999D) &lt;&lt; 32) + (long)(java.lang.Math.random() * 99999999D);
		try
		{
			fillInStream(3);
			int loginID = inStream.readUnsignedByte();
			inStream.readUnsignedByte();//namepart not needed
			inStream.readUnsignedByte();//? what is this
			if(loginID != 2)
			{
				shutdownError(&quot;Login Id was &quot;+loginID+&quot; but expected 10&quot;);
				disconnected = true;
				return;
			}
			outStream.writeQWord(serverSessionKey);
			directFlushOutStream();
			fillInStream(7);
			int loginPacketSize = inStream.readUnsignedByte();
			int ligi = inStream.readUnsignedByte();
			inStream.readUnsignedByte();//? what is this
			int loginType = inStream.readUnsignedByte();
			int version = inStream.readUnsignedWord();
			int loginEncryptPacketSize = loginPacketSize - 5;
			if(loginEncryptPacketSize &lt;= 0)
			{
				shutdownError(&quot;Zero RSA packet size!&quot;);
				out.write(8);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			if(ligi != 10)
			{
				shutdownError(&quot;Encrypted packet Id was &quot;+ligi+&quot; but expected 10&quot;);
				out.write(8);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			if(loginType != 1 &amp;&amp; loginType != 0)
			{
				shutdownError(&quot;Unexpected login type &quot;+loginType);
				out.write(8);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			fillInStream(loginPacketSize);
			int size = inStream.readUnsignedByte();
			loginEncryptPacketSize--;
			if(loginEncryptPacketSize != size)
			{
				shutdownError(&quot;Encrypted packet data length (&quot;+loginEncryptPacketSize+&quot;) different from length byte thereof (&quot;+size+&quot;)&quot;);
				out.write(8);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			clientSessionKey = inStream.readQWord();
			serverSessionKey = inStream.readQWord();
			int UID = inStream.readDWord();
			playerName = inStream.readString();
			String password = inStream.readString();
			int sessionKey[] = new int[4];
			sessionKey[0] = (int)(clientSessionKey &gt;&gt; 32);
			sessionKey[1] = (int)clientSessionKey;
			sessionKey[2] = (int)(serverSessionKey &gt;&gt; 32);
			sessionKey[3] = (int)serverSessionKey;
			inStreamDecryption = new Cryption(sessionKey);
			outStreamDecryption = new Cryption(sessionKey);
			outStream.packetEncryption = outStreamDecryption;
			if(playerId == -1)
			{
				out.write(14);//&quot;Sorry! This world is currently full.&quot;
				disconnected = true;
				return;
			}
			/*else if()
			{
				out.write(3);//&quot;Invalid username or password.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(4);//&quot;That username is already logged in.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(6);//&quot;You may only use 1 character at once.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(7);//&quot;Login attempts exceeded!&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(8);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(9);//&quot;Error unable to login.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(10);//&quot;That username is already in use.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(11);//&quot;Account temporarily disabled.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(12);//&quot;Account permanently disabled.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(15);//&quot;You need a members account&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(16);//&quot;Error - no reply from loginserver.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(17);//&quot;Error - failed to decode profile.&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(20);//&quot;Error - loginserver mismatch&quot;
				disconnected = true;
				return;
			}
			else if()
			{
				out.write(1);
			}
			else if(playerrights &gt; 1)
			{
				out.write(25);
			}*/
			else
			{
				out.write(0);//start normal
			}
		}
		catch(java.lang.Exception __ex)
		{
			misc.println(&quot;RSC Server: Login Exception!&quot;);
			__ex.printStackTrace(); 
			destruct();
			return;
		}
		isActive = true;

		packetSize = 0;
		packetType = 0;

		readPtr = 0;
		writePtr = 0;

		int numBytesInBuffer, offset;
		while(!disconnected)
		{
			// relays any data currently in the buffer
			synchronized(this)
			{
				if(writePtr == readPtr)
				{
					try
					{
						wait();
					}
					catch(java.lang.InterruptedException _ex)
					{
					}
				}

				if(disconnected) return;

				offset = readPtr;
				if(writePtr &gt;= readPtr) numBytesInBuffer = writePtr - readPtr;
				else numBytesInBuffer = bufferSize - readPtr;
			}
			if(numBytesInBuffer &gt; 0)
			{
				try
				{
					//Thread.sleep(3000);		// artificial lag for testing purposes
                    out.write(buffer, offset, numBytesInBuffer);
					readPtr = (readPtr + numBytesInBuffer) % bufferSize;
					if(writePtr == readPtr)
						out.flush();
				}
				catch(java.lang.Exception __ex)
				{
					misc.println(&quot;RSC Server: Exception!&quot;);
					__ex.printStackTrace(); 
					disconnected = true;
				}
            }
		}
	}

	public void initialize()
	{
		setPlayer(playerId, 2304, 1776, 0,944);//playerId
		loadit(currentX,currentY);
		addplayer(playerName);
	//	setOps(0, 0, 0);
	//	setSkills_testing(1, 1, 10, 0);
		inventory();
		sendMsg(&quot;Welcome to Escape!&quot;);
		loadObj(4151);
//loadit(224,737);
try{ flushOutStream();} catch(Exception e) { }

//2nd playerupdatething! to make player appear
		//need stuff here
		initialized = true;
	}

	public int packetSize = 0, packetType = 0;
	public boolean process()
	{
		if(disconnected) return false;
		try
		{
			if(timeOutCounter++ &gt; 20)
			{
				misc.println(&quot;Client lost connection: timeout&quot;);
				disconnected = true;
				return false;
			}
			if(in == null) return false;
			int avail = in.available();
			if(avail == 0) return false;
			if(packetSize == 0)
			{
				if(avail &gt; 0)
				{
					packetSize = in.read() &amp; 0xff;
					avail--;
				}
				else return false;
			}
			if(avail &lt; packetSize) return false;
			fillInStream(packetSize);
            timeOutCounter = 0;
			if(packetSize &gt; 1)
				inStream.buffer[packetSize] = (byte)inStream.readUnsignedByte();
			packetType = inStream.readUnsignedByte();

			parseIncomingPackets();
		}
		catch(java.lang.Exception __ex)
		{
			misc.println(&quot;RSC Server: Exception!&quot;);
			__ex.printStackTrace(); 
			disconnected = true;
		}
		return true;
	}


public boolean camera = false;
public boolean mouse = false;
public boolean sound = false;

public boolean prmes = false;
public boolean pumes = false;
public boolean treq = false;
public boolean dreq = false;

	public void parseIncomingPackets()
	{
		switch(packetType) {
			
			case 3:
				logOut();			
			break;
			
			case 211:
				newWalkCmdSteps = packetSize - 5;
				if(newWalkCmdSteps % 2 != 0)
				{
					System.out.println(&quot;Warning: walkTo(&quot;+packetType+&quot;) command malformed: &quot;+misc.Hex(inStream.buffer, 0, packetSize));
					newWalkCmdSteps = 0;
					break;
				}
				newWalkCmdSteps /= 2;
				if(++newWalkCmdSteps &gt; walkingQueueSize)
				{
					System.out.println(&quot;Warning: walkTo(&quot;+packetType+&quot;) command contains too many steps (&quot;+newWalkCmdSteps+&quot;).&quot;);
					newWalkCmdSteps = 0;
					break;
				}
				int firstStepX = newWalkCmdX[0] = inStream.readUnsignedWord();
				int firstStepY = newWalkCmdY[0] = inStream.readUnsignedWord();
				for(int x = 1; x &lt; newWalkCmdSteps; x++)
				{
					newWalkCmdX[x] = (inStream.readSignedByte() + firstStepX);
					newWalkCmdY[x] = (inStream.readSignedByte() + firstStepY);
				}
				break;
			
			
			default:
				//println_debug(&quot;Unhandled packet [&quot;+packetType+&quot;, size=&quot;+packetSize+&quot;]: &quot;+misc.Hex(inStream.buffer, 0, packetSize));
				System.out.println(&quot;unhandled Packet - Header: &quot;+packetType+&quot;, Size: &quot;+packetSize+&quot;, Content:&quot;);
				System.out.println(misc.Hex(inStream.buffer, 0, packetSize));
				break;
		}
		packetSize = 0;
	}

}
---------------------------------------------------------------------------------------------------------</description>
    
    <lastBuildDate>Sat, 02 Jun 2007 00:54:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/a-little-help-please/103997.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>A little help please!</title>
        <dc:creator><![CDATA[@nicatron nicatron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nicatron">@nicatron</a> wrote:</p>
          <blockquote>
              <p>Ditto <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-little-help-please/103997/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-little-help-please/103997/4</link>
        <pubDate>Sat, 02 Jun 2007 00:54:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-103997-4</guid>
        <source url="https://forum.moparisthebest.com/t/a-little-help-please/103997.rss">A little help please!</source>
      </item>
      <item>
        <title>A little help please!</title>
        <dc:creator><![CDATA[@Itachi_Uchiha Itachi Uchiha]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/itachi_uchiha">@Itachi_Uchiha</a> wrote:</p>
          <blockquote>
              <p>You just don’t have the text that they have in their client.java, no source is exactly the same, some may have voids, ints, booleans, and cases that you don’t have in yours.</p>
<p>[quote=“Rs_pksc4p3, post:2, topic:103997”]Maybe Its Server Source Cuz All Servers Haf Different Java[/quote]What?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-little-help-please/103997/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-little-help-please/103997/3</link>
        <pubDate>Sat, 02 Jun 2007 00:14:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-103997-3</guid>
        <source url="https://forum.moparisthebest.com/t/a-little-help-please/103997.rss">A little help please!</source>
      </item>
      <item>
        <title>A little help please!</title>
        <dc:creator><![CDATA[@Rs_pksc4p3 Rs_pksc4p3]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rs_pksc4p3">@Rs_pksc4p3</a> wrote:</p>
          <blockquote>
              <p>Maybe Its Server Source Cuz All Servers Haf Different Java</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-little-help-please/103997/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-little-help-please/103997/2</link>
        <pubDate>Fri, 01 Jun 2007 23:53:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-103997-2</guid>
        <source url="https://forum.moparisthebest.com/t/a-little-help-please/103997.rss">A little help please!</source>
      </item>
      <item>
        <title>A little help please!</title>
        <dc:creator><![CDATA[@live_rare1942 live rare1942]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/live_rare1942">@live_rare1942</a> wrote:</p>
          <blockquote>
              <p>I am in need of help as people are saying you need to find things in your client.java.<br>
I know where it is and all but like.<br>
Why don’t I have same info as other people?<br>
( hear is it )</p>
<hr>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;</p>
<p>public class client extends Player implements Runnable<br>
{</p>
<pre><code>public static final int bufferSize = 5000;
private java.net.Socket mySock;
	private java.io.InputStream in;
	private java.io.OutputStream out;
public byte buffer[] = null;
public int readPtr, writePtr;

public stream inStream = null, outStream = null;

public Cryption inStreamDecryption = null, outStreamDecryption = null;

public int timeOutCounter = 0;		// to detect timeouts on the connection to the client

public void update()
{
			outStream.createFrame(141);//141
	outStream.initBitAccess();
	//updatethisplayerstate
	outStream.writeBits(11,currentX);
	outStream.writeBits(13,currentY);
	outStream.writeBits(4,0);
	outStream.writeBits(8,0);
	outStream.finishBitAccess();
	outStream.finishFrame();
	flushOutStream();
	//need stuff here
}

public client(java.net.Socket s, int _playerId)
{
	super(_playerId);
	mySock = s;
	try
	{
		in = s.getInputStream();
		out = s.getOutputStream();
	}
	catch(java.io.IOException ioe)
	{
		misc.println("RSC Server: Exception!");
		ioe.printStackTrace(); 
	}
	outStream = new stream(new byte[bufferSize]);
	outStream.currentOffset = 0;
	inStream = new stream(new byte[bufferSize]);
	inStream.currentOffset = 0;
	readPtr = writePtr = 0;
	buffer = buffer = new byte[bufferSize];
}
</code></pre>
<p>//packets<br>
//<br>
public void inventory(){<br>
outStream.createFrame(37);<br>
outStream.writeByte(30);<br>
for(int i = 0; i &lt; 30; i++)<br>
outStream.writeWord(575);<br>
outStream.finishFrame();<br>
}</p>
<pre><code>public void loadit(int something,int adsfadsf)
{
	outStream.createFrame(141);//141
	outStream.initBitAccess();
	outStream.writeBits(11,something);
	outStream.writeBits(13,adsfadsf);
	outStream.writeBits(4,0);
	outStream.writeBits(8,0);
	outStream.finishBitAccess();
	outStream.finishFrame();
	flushOutStream();
}


public int nurb = 0;
public void addplayer(String s1)
{
	outStream.createFrame(183);	//183
	outStream.writeWord(1);		//playernum to update
	outStream.writeWord(playerId);//pid
	outStream.writeByte(5);		//updatetype
	outStream.writeWord(9144);	//playermodel
	outStream.writeQWord(misc.playerNameToInt64(s1));
	
	outStream.writeByte(12);	//what to loop through
	outStream.writeByte(18);		//large/head 18 (phats around 150)
	outStream.writeByte(60);		//body 60
	outStream.writeByte(42);		//legs 42
	outStream.writeByte(103);		//shield/1h weop 114
	outStream.writeByte(114);		//sword/2h wep 103
	outStream.writeByte(0);		//med/hat
	outStream.writeByte(0);		//chainmail/robe?   81
	outStream.writeByte(0);		//skirt
	outStream.writeByte(81);		//ammy?
	outStream.writeByte(0);		//gloves?
	outStream.writeByte(0);		//boots?
	outStream.writeByte(67);		//cape
	
	outStream.writeByte(9);		//0-0 hair colour
	outStream.writeByte(8);		//0-0 body colour
	outStream.writeByte(14);	//0-0 legs colour
	outStream.writeByte(0);		//0-0 skin colour
	outStream.writeByte(3);		//combat lvl
	outStream.writeByte(1);		//skulled
	outStream.finishFrame();
	flushOutStream();
</code></pre>
<p>}<br>
//pid	something<br>
public void setPlayer(int pid, int arg1, int arg2, int arg3, int arg4)<br>
{<br>
outStream.createFrame(249);//249<br>
outStream.writeWord(pid);<br>
outStream.writeWord(arg1);<br>
outStream.writeWord(arg2);<br>
outStream.writeWord(arg3);<br>
outStream.writeWord(arg4);<br>
outStream.finishFrame();<br>
flushOutStream();<br>
}</p>
<pre><code>public void sendMsg(String message){
	outStream.createFrame(168);
	outStream.writeString(message);
	outStream.finishFrame();
}

public void loadObj(){
	outStream.createFrame(158);
	outStream.finishFrame();
}

public void logOut(){
	outStream.createFrame(125);
	outStream.finishFrame();
}

public void shutdownError(String errorMessage)
{
	misc.println("Fatal: "+errorMessage);
	destruct();
}

public void destruct()
{
	if(mySock == null) return;
	try
	{
		misc.println("ClientHandler: Client "+playerName+" disconnected.");
		disconnected = true;

		if(in != null) in.close();
		if(out != null) out.close();
		mySock.close();
		mySock = null;
		in = null;
		out = null;
		inStream = null;
		outStream = null;
		isActive = false;
		synchronized(this) { notify(); }
		buffer = null;
	} catch(java.io.IOException ioe) {
		ioe.printStackTrace();
	}
	super.destruct();
}

public void flushOutStream()
{
	if(disconnected || outStream.currentOffset == 0) return;
	synchronized(this)
	{
		int maxWritePtr = (readPtr+bufferSize-2) % bufferSize;
		for(int i = 0; i &lt; outStream.currentOffset; i++)
		{
			buffer[writePtr] = outStream.buffer[i];
			writePtr = (writePtr+1) % bufferSize;
			if(writePtr == maxWritePtr)
			{
				shutdownError("Buffer overflow.");
				disconnected = true;
				return;
			}
		}
		outStream.currentOffset = 0;
		notify();
	}
}

private void directFlushOutStream() throws java.io.IOException
{
	out.write(outStream.buffer, 0, outStream.currentOffset);
	outStream.currentOffset = 0;
}

private void fillInStream(int forceRead) throws java.io.IOException
{
	inStream.currentOffset = 0;
	in.read(inStream.buffer, 0, forceRead);
}

public void run()
{
	isActive = false;
	long serverSessionKey = 0, clientSessionKey = 0;
	serverSessionKey = ((long)(java.lang.Math.random() * 99999999D) &lt;&lt; 32) + (long)(java.lang.Math.random() * 99999999D);
	try
	{
		fillInStream(3);
		int loginID = inStream.readUnsignedByte();
		inStream.readUnsignedByte();//namepart not needed
		inStream.readUnsignedByte();//? what is this
		if(loginID != 2)
		{
			shutdownError("Login Id was "+loginID+" but expected 10");
			disconnected = true;
			return;
		}
		outStream.writeQWord(serverSessionKey);
		directFlushOutStream();
		fillInStream(7);
		int loginPacketSize = inStream.readUnsignedByte();
		int ligi = inStream.readUnsignedByte();
		inStream.readUnsignedByte();//? what is this
		int loginType = inStream.readUnsignedByte();
		int version = inStream.readUnsignedWord();
		int loginEncryptPacketSize = loginPacketSize - 5;
		if(loginEncryptPacketSize &lt;= 0)
		{
			shutdownError("Zero RSA packet size!");
			out.write(8);//"Error unable to login."
			disconnected = true;
			return;
		}
		if(ligi != 10)
		{
			shutdownError("Encrypted packet Id was "+ligi+" but expected 10");
			out.write(8);//"Error unable to login."
			disconnected = true;
			return;
		}
		if(loginType != 1 &amp;&amp; loginType != 0)
		{
			shutdownError("Unexpected login type "+loginType);
			out.write(8);//"Error unable to login."
			disconnected = true;
			return;
		}
		fillInStream(loginPacketSize);
		int size = inStream.readUnsignedByte();
		loginEncryptPacketSize--;
		if(loginEncryptPacketSize != size)
		{
			shutdownError("Encrypted packet data length ("+loginEncryptPacketSize+") different from length byte thereof ("+size+")");
			out.write(8);//"Error unable to login."
			disconnected = true;
			return;
		}
		clientSessionKey = inStream.readQWord();
		serverSessionKey = inStream.readQWord();
		int UID = inStream.readDWord();
		playerName = inStream.readString();
		String password = inStream.readString();
		int sessionKey[] = new int[4];
		sessionKey[0] = (int)(clientSessionKey &gt;&gt; 32);
		sessionKey[1] = (int)clientSessionKey;
		sessionKey[2] = (int)(serverSessionKey &gt;&gt; 32);
		sessionKey[3] = (int)serverSessionKey;
		inStreamDecryption = new Cryption(sessionKey);
		outStreamDecryption = new Cryption(sessionKey);
		outStream.packetEncryption = outStreamDecryption;
		if(playerId == -1)
		{
			out.write(14);//"Sorry! This world is currently full."
			disconnected = true;
			return;
		}
		/*else if()
		{
			out.write(3);//"Invalid username or password."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(4);//"That username is already logged in."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(6);//"You may only use 1 character at once."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(7);//"Login attempts exceeded!"
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(8);//"Error unable to login."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(9);//"Error unable to login."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(10);//"That username is already in use."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(11);//"Account temporarily disabled."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(12);//"Account permanently disabled."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(15);//"You need a members account"
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(16);//"Error - no reply from loginserver."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(17);//"Error - failed to decode profile."
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(20);//"Error - loginserver mismatch"
			disconnected = true;
			return;
		}
		else if()
		{
			out.write(1);
		}
		else if(playerrights &gt; 1)
		{
			out.write(25);
		}*/
		else
		{
			out.write(0);//start normal
		}
	}
	catch(java.lang.Exception __ex)
	{
		misc.println("RSC Server: Login Exception!");
		__ex.printStackTrace(); 
		destruct();
		return;
	}
	isActive = true;

	packetSize = 0;
	packetType = 0;

	readPtr = 0;
	writePtr = 0;

	int numBytesInBuffer, offset;
	while(!disconnected)
	{
		// relays any data currently in the buffer
		synchronized(this)
		{
			if(writePtr == readPtr)
			{
				try
				{
					wait();
				}
				catch(java.lang.InterruptedException _ex)
				{
				}
			}

			if(disconnected) return;

			offset = readPtr;
			if(writePtr &gt;= readPtr) numBytesInBuffer = writePtr - readPtr;
			else numBytesInBuffer = bufferSize - readPtr;
		}
		if(numBytesInBuffer &gt; 0)
		{
			try
			{
				//Thread.sleep(3000);		// artificial lag for testing purposes
                out.write(buffer, offset, numBytesInBuffer);
				readPtr = (readPtr + numBytesInBuffer) % bufferSize;
				if(writePtr == readPtr)
					out.flush();
			}
			catch(java.lang.Exception __ex)
			{
				misc.println("RSC Server: Exception!");
				__ex.printStackTrace(); 
				disconnected = true;
			}
        }
	}
}

public void initialize()
{
	setPlayer(playerId, 2304, 1776, 0,944);//playerId
	loadit(currentX,currentY);
	addplayer(playerName);
//	setOps(0, 0, 0);
//	setSkills_testing(1, 1, 10, 0);
	inventory();
	sendMsg("Welcome to Escape!");
	loadObj(4151);
</code></pre>
<p>//loadit(224,737);<br>
try{ flushOutStream();} catch(Exception e) { }</p>
<p>//2nd playerupdatething! to make player appear<br>
//need stuff here<br>
initialized = true;<br>
}</p>
<pre><code>public int packetSize = 0, packetType = 0;
public boolean process()
{
	if(disconnected) return false;
	try
	{
		if(timeOutCounter++ &gt; 20)
		{
			misc.println("Client lost connection: timeout");
			disconnected = true;
			return false;
		}
		if(in == null) return false;
		int avail = in.available();
		if(avail == 0) return false;
		if(packetSize == 0)
		{
			if(avail &gt; 0)
			{
				packetSize = in.read() &amp; 0xff;
				avail--;
			}
			else return false;
		}
		if(avail &lt; packetSize) return false;
		fillInStream(packetSize);
        timeOutCounter = 0;
		if(packetSize &gt; 1)
			inStream.buffer[packetSize] = (byte)inStream.readUnsignedByte();
		packetType = inStream.readUnsignedByte();

		parseIncomingPackets();
	}
	catch(java.lang.Exception __ex)
	{
		misc.println("RSC Server: Exception!");
		__ex.printStackTrace(); 
		disconnected = true;
	}
	return true;
}
</code></pre>
<p>public boolean camera = false;<br>
public boolean mouse = false;<br>
public boolean sound = false;</p>
<p>public boolean prmes = false;<br>
public boolean pumes = false;<br>
public boolean treq = false;<br>
public boolean dreq = false;</p>
<pre><code>public void parseIncomingPackets()
{
	switch(packetType) {
		
		case 3:
			logOut();			
		break;
		
		case 211:
			newWalkCmdSteps = packetSize - 5;
			if(newWalkCmdSteps % 2 != 0)
			{
				System.out.println("Warning: walkTo("+packetType+") command malformed: "+misc.Hex(inStream.buffer, 0, packetSize));
				newWalkCmdSteps = 0;
				break;
			}
			newWalkCmdSteps /= 2;
			if(++newWalkCmdSteps &gt; walkingQueueSize)
			{
				System.out.println("Warning: walkTo("+packetType+") command contains too many steps ("+newWalkCmdSteps+").");
				newWalkCmdSteps = 0;
				break;
			}
			int firstStepX = newWalkCmdX[0] = inStream.readUnsignedWord();
			int firstStepY = newWalkCmdY[0] = inStream.readUnsignedWord();
			for(int x = 1; x &lt; newWalkCmdSteps; x++)
			{
				newWalkCmdX[x] = (inStream.readSignedByte() + firstStepX);
				newWalkCmdY[x] = (inStream.readSignedByte() + firstStepY);
			}
			break;
		
		
		default:
			//println_debug("Unhandled packet ["+packetType+", size="+packetSize+"]: "+misc.Hex(inStream.buffer, 0, packetSize));
			System.out.println("unhandled Packet - Header: "+packetType+", Size: "+packetSize+", Content:");
			System.out.println(misc.Hex(inStream.buffer, 0, packetSize));
			break;
	}
	packetSize = 0;
}
</code></pre>
<h2>}</h2>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/a-little-help-please/103997/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/a-little-help-please/103997/1</link>
        <pubDate>Fri, 01 Jun 2007 20:48:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-103997-1</guid>
        <source url="https://forum.moparisthebest.com/t/a-little-help-please/103997.rss">A little help please!</source>
      </item>
  </channel>
</rss>
