<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NPC Drops System</title>
    <link>https://forum.moparisthebest.com/t/npc-drops-system/374047</link>
    <description>This tutorial will allow you to add a simple, but effective NPC drops system to your server. I&#39;ve tested it and it works [b]perfectly[/b] to how I planned it.

Some of the methods used in the codes given won&#39;t exist in your server, so you&#39;ll have to use the equivalent methods/variables used in the tutorial, that are in your server; it shouldn&#39;t be hard, you just need to know your server well enough.

[b]Before I start, the class provided with the bulk of the code (The &#39;NPCDrop&#39; class), is explained by using quotes within the class, instead of referring to it directly within this tutorial.[/b]

First of all, let me explain how it works.

All of the drop data is stored in the &#39;npcDrops&#39; xml file, loaded via XStream into memory, upon server-initiation. XStream is an external library that &#39;serializes&#39; data to and from XML - in this case, it serializes the data from the codes, in the tags, in the xml file that we are loading, to the classes that the tags are aliased to. 

When a drop is requested, 

[ul][li]A List of all the drops that have a 100% rate (e.g. bones, ashes, etc.) is received and then iterated through to drop the [b]&#39;Always&#39;[/b] items.[/li]
[li]After this, the random drop calculation begins - it&#39;s not really much of a calculation, just basically a random drop (Which is what I expect RuneScape does).[/li]
[li]A second list is received which contains instances of the &#39;Drop&#39; class for all the random drops.[/li]
[li]An integer is declared with the value of the size of this list, then a random value of this integer is created; the instance with the index in the list of this random value is then declared.[/li]
[li]The ratio of the drop rate is then gotten from the &#39;Drop&#39; class instance (1/#). A random number is generated from &#39;#&#39; (The second number in the ratio; i.e. 1:#) - if this random number is equal to 1, then the random drop is dropped; if not, the method is repeated until a random drop is dropped.[/li][/ul]


The class with most of the code content uses XStream, so you&#39;ll need to download the XStream jar from [url=http://&quot;https://nexus.codehaus.org/content/repositories/releases/com/thoughtworks/xstream/xstream/1.3.1/xstream-1.3.1.jar&quot;]here[/url]. An explanation of what XStream is, is above.

Here&#39;s the &#39;npcDrops&#39; xml file, with some of the drops for the &#39;Man&#39; NPC as an example of how to input data into this file:
[code]&lt;!-- Rarity types are: ALWAYS, VERY_COMMON, COMMON, UNCOMMON, RARE, VERY_RARE, HIGHEST_RARITY. --&gt;
&lt;list&gt;
	&lt;npcDrop&gt;
		&lt;npcId&gt;1&lt;/npcId&gt;
		&lt;drops&gt;
			&lt;drop&gt;
				&lt;id&gt;526&lt;/id&gt;
				&lt;amount&gt;1&lt;/amount&gt;
				&lt;rarity&gt;ALWAYS&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;995&lt;/id&gt;
				&lt;amount&gt;3&lt;/amount&gt;
				&lt;rarity&gt;VERY_COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;558&lt;/id&gt;
				&lt;amount&gt;7&lt;/amount&gt;
				&lt;rarity&gt;RARE&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;562&lt;/id&gt;
				&lt;amount&gt;2&lt;/amount&gt;
				&lt;rarity&gt;UNCOMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;557&lt;/id&gt;
				&lt;amount&gt;4&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;554&lt;/id&gt;
				&lt;amount&gt;6&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;559&lt;/id&gt;
				&lt;amount&gt;9&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;555&lt;/id&gt;
				&lt;amount&gt;7&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
		&lt;/drops&gt;
	&lt;/npcDrop&gt;
&lt;/list&gt;[/code]

An explanation of how to edit/add new data to the file, is at the end of the tutorial.

This xml file should be placed in the &quot;/data/&quot; directory, unless you change the file reading path within the &#39;loadDrops()&#39; method.

You will also need to alias the xml data to the two classes that will follow after the main content class in this thread, by using this class:
[code]package org.iClarity.util;

import org.iClarity.model.npc.Drop;
import org.iClarity.model.npc.NPCDrop;

import com.thoughtworks.xstream.XStream;

/**
 * The XSream util.
 * @author PrimaDude.
 */
public class XStreamUtil {
	
	private static XStream xstream = null;
	
	/**
	 * Gets the XStream.
	 * @return The xstream instance.
	 */
	public static XStream getXStream() {
		return xstream;
	}
	
	/**
	 * Initializes the XStream.
	 * Aliases the classes to the xml data.
	 */
	public static void initializeXStream() {
		if (getXStream() == null) {
			xstream = new XStream();
			xstream.alias(&quot;npcDrop&quot;, NPCDrop.class);
			xstream.alias(&quot;drop&quot;, Drop.class);
		}
	}

}[/code]


These methods will need to be invoked, upon server initiation, to intialize XStream and load the drops data:
[code]XStreamUtil.initializeXStream();
NPCDrop.loadDrops();[/code]

Here&#39;s the NPCDrop class:
[code]package org.iClarity.model.npc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Random;

import org.iClarity.model.World;
import org.iClarity.model.player.Player;
import org.iClarity.model.player.items.Item;
import org.iClarity.util.XStreamUtil;
import org.iClarity.util.items.ItemHandler;

/**
 * Manages NPC drops.
 * @author PrimaDude.
 */
public class NPCDrop {
	
	private int npcId;
	private Drop[] drops;
	private static Map&lt;Integer, NPCDrop&gt; npcDrops;
	private static Random r = new Random();
	
	/**
	 * Gets the npc id.
	 * @return The npcId variable.
	 */
	public int getNpcId() {
		return npcId;
	}

	/**
	 * Gets the drops array.
	 * @return The drops array.
	 */
	public Drop[] getDrops() {
		return drops;
	}
	
	/**
	 * Gets the second number in the ratio.
	 * @param ratio The drop chance ratio.
	 * @return The second number in the ratio.
	 */
	private static int getSecondRatioNumber(String ratio) {
		return Integer.valueOf(ratio.replaceAll(&quot;1:&quot;, &quot;&quot;));
	}
	
	/**
	 * Gets a random Item drop.
	 * @param npcType The type of the npc.
	 * @return The Item class instance for a random drop.
	 */
	private static Item getRandomItemDrop(int npcType) {
		List&lt;Drop&gt; otherDrops = getOtherItemDrops(npcType);
		if (otherDrops.size() == 0) {
			// If there are no random drops, return the item as &#39;null&#39;.
			return null;
		}
		int random = r.nextInt(otherDrops.size()); // A random value out of the amount of random drops.
		Drop drop = otherDrops.get(random); // The drop class instance for the random drop.
		int chance = r.nextInt(getSecondRatioNumber(drop.getRarity().getRatio())); // The chance of getting the drop.
		if ((chance + 1) == 1) {
			// If the chance is equal to 1 (i.e. The 1:# chance of getting the item, returns true),
			// then the random drop is dropped for the player; this method returns the &#39;Item&#39; class
			// instance for the drop.
			return drop.toItem();
		}
		// If the chance returns false, then invoke and return this method again, until a random drop returns true.
		return getRandomItemDrop(npcType);
	}
	
	/**
	 * Gets the other item drops.
	 * @param npcType The type of the npc.
	 * @return A list of the other item drops.
	 */
	private static List&lt;Drop&gt; getOtherItemDrops(int npcType) {
		NPCDrop drops = npcDrops.get(npcType); // This class instance for the drops of the NPC.
		if (drops == null) {
			// If the &#39;drops&#39; instance returns as &#39;null&#39; (i.e. there are no random drops for the NPC), 
			// then this method returns as &#39;null&#39;.
			return null;
		}
		List&lt;Drop&gt; otherDrops = new ArrayList&lt;Drop&gt;(); // A List to add random drops to.
		for (Drop drop : drops.getDrops()) {
			// Iterate through the NPC&#39;s drops, and add the &#39;drop&#39; instance to the &#39;otherDrops&#39;
			// list if the drop rarity does not equal &#39;ALWAYS&#39;.
			if (drop == null) {
				continue;
			} else if (!drop.getRarity().equals(Rarity.ALWAYS)) {
				otherDrops.add(drop);
			}
		}
		return otherDrops;
	}
	
	/**
	 * Gets the always item drops.
	 * @param npcType The type of the npc.
	 * @return A list of the always item drops.
	 */
	private static List&lt;Item&gt; getAlwaysItemDrops(int npcType) {
		NPCDrop drops = npcDrops.get(npcType); // This class instance for the drops of the NPC.
		if (drops == null) {
			// If the &#39;drops&#39; instance returns as &#39;null&#39; (i.e. there are no &#39;always&#39; drops for the NPC),
			// then this method returns as &#39;null&#39;.
			return null;
		}
		List&lt;Item&gt; alwaysDrops = new ArrayList&lt;Item&gt;(); // A list to add the &#39;ALWAYS&#39; drops to.
		for (Drop drop : drops.getDrops()) {
			// Iterate through the NPC&#39;s drops, and add the &#39;drop&#39; instance to the &#39;otherDrops&#39;
			// list if the drop rarity is equal to &#39;ALWAYS&#39;.
			if (drop == null) {
				continue;
			} else if (drop.getRarity().equals(Rarity.ALWAYS)) {
				alwaysDrops.add(drop.toItem());
			}
		}
		return alwaysDrops;
	}
	
	public enum Rarity {

		/**
		 * A 1:# chance of getting the drop.
		 * The chance of getting a random drop is the second number
		 * in the specific ratio * the amount of random drops available.
		 * E.G. The chance of getting a &#39;RARE&#39; drop, with a total of 10
		 * random drops from that npc, is 1/1000.
		 */
		ALWAYS(&quot;1:1&quot;), VERY_COMMON(&quot;1:5&quot;), COMMON(&quot;1:10&quot;), UNCOMMON(&quot;1:50&quot;), RARE(&quot;1:100&quot;), 
			VERY_RARE(&quot;1:250&quot;), HIGHEST_RARITY(&quot;1:500&quot;);

		private String ratio;
		
		/**
		 * Gets the rarity ratio.
		 * @return The ratio variable.
		 */
		public String getRatio() {
			return ratio;
		}

		/**
		 * Constructs a new rarity.
		 * @param ratio The rarity ratio.
		 */
		Rarity(String ratio) {
			this.ratio = ratio;
		}
		
	}
	
	/**
	 * Loads the npc drop data.
	 * @throws FileNotFoundException If the npc drops file cannot be found.
	 */
	@SuppressWarnings(&quot;unchecked&quot;)
	public static void loadDrops() throws FileNotFoundException {
		// A list of all the instances of this class, containing an array of the NPC&#39;s drops.
		// One instance of this class is loaded and added, for every NPC that has drops.
		List&lt;NPCDrop&gt; list = (List&lt;NPCDrop&gt;) XStreamUtil.getXStream().fromXML(new FileInputStream(&quot;data/npcDrops.xml&quot;));
		// Initializes the &#39;npcDrops&#39; map.
		npcDrops = new HashMap&lt;Integer, NPCDrop&gt;();
		for (NPCDrop npcDrop : list) {
			// Iterates through the loaded list, and puts the data to the &#39;npcDrops&#39; map.
			// The key that is put, is the NPC&#39;s type; the value that is put, is the instance
			// of this class for that NPC.
			npcDrops.put(npcDrop.getNpcId(), npcDrop);
		}
	}
	
	/**
	 * Drops the npc&#39;s items.
	 * @param npc The npc to drop the items from.
	 */
	public static void dropItems(NPC npc) {
		int type = npc.npcType;
		Player player = World.getPlayers().get(npc.getKillerIndex()); // Gets the player index of the NPC&#39;s killer.
		if (player == null) {
			// If the player instance is equal to &#39;null&#39; (i.e. the player does not exist), then return.
			return;
		}
		List&lt;Item&gt; alwaysDrops = getAlwaysItemDrops(type); // A list of all the &#39;ALWAYS&#39; drops.
		if (alwaysDrops.size() &gt; 0) {
			// If there are more than 0 drops, iterate through the List.
			for (Item item : alwaysDrops) {
				// Iterates through the &#39;ALWAYS&#39; drops list, and drops the item for the player.
				ItemHandler.createGroundItem(item, npc.getX(), npc.getY(), player.getIndex());
			}
		}
		Item item = getRandomItemDrop(type); // The &#39;Item&#39; class instance for the random drop.
		if (item != null) {
			// Drops the random item for the player.
			ItemHandler.createGroundItem(item, npc.getX(), npc.getY(), player.getIndex());
		}
	}

}[/code]

The Drop class:
[code]package org.iClarity.model.npc;

import org.iClarity.model.npc.NPCDrop.Rarity;
import org.iClarity.model.player.items.Item;

/**
 * Represents an npc drop.
 * @author PrimaDude.
 */
public class Drop {
	
	private int id;
	private int amount;
	private Rarity rarity;
	
	/**
	 * Gets the item id of the drop.
	 * @return The id variable.
	 */
	public int getId() {
		return id;
	}
	
	/**
	 * Gets the amount of the drop.
	 * @return The amount variable.
	 */
	public int getAmount() {
		return amount;
	}
	
	/**
	 * Gets the rarity of the drop.
	 * @return The rarity variable.
	 */
	public Rarity getRarity() {
		return rarity;
	}
	
	/**
	 * Converts this class to an Item class instance.
	 * @return The item instance.
	 */
	public Item toItem() {
		return new Item(id, amount);
	}

}[/code]

The Item class (For codes used in the NPCDrop class):
[code]package org.iClarity.model.player.items;

/**
 * Represents an item.
 * @author PrimaDude.
 */
public class Item {
	
	private int id;
	private int amount;
	
	/**
	 * Gets the id of the item.
	 * @return The id variable.
	 */
	public int getId() {
		return id;
	}
	
	/**
	 * Gets the amount of the item.
	 * @return The amount variable.
	 */
	public int getAmount() {
		return amount;
	}
		
	/**
	 * Constructs a new item.
	 * @param id The id of the item.
	 */
	public Item(int id) {
		this(id, 1);
	}
	
	/**
	 * Constructs a new item.
	 * @param id The id of the item.
	 * @param amount The amount of the item.
	 */
	public Item(int id, int amount) {
		if (amount &lt;= 0) {
			return;
		}
		this.id = id;
		this.amount = amount;
	}

}[/code]

The purpose of this class, is to use OOP instead of all the bullshit that most winterlove-based servers use.

[u][b]How to edit the data/add more data to the drops xml file[/b][/u]

To add a new npc that drops items, just add another:
[code]	&lt;npcDrop&gt;
		&lt;npcId&gt;#&lt;/npcId&gt;
		&lt;drops&gt;
			&lt;drop&gt;
				&lt;id&gt;#&lt;/id&gt;
				&lt;amount&gt;#&lt;/amount&gt;
				&lt;rarity&gt;RARITY&lt;/rarity&gt;
			&lt;/drop&gt;
		&lt;/drops&gt;
	&lt;/npcDrop&gt;[/code]

Within the &lt;list&gt;&lt;/list&gt;  tags.

To add another drop for an already added NPC, just add another:
[code]			&lt;drop&gt;
				&lt;id&gt;#&lt;/id&gt;
				&lt;amount&gt;#&lt;/amount&gt;
				&lt;rarity&gt;RARITY&lt;/rarity&gt;
			&lt;/drop&gt;[/code]

Within the &lt;drops&gt;&lt;/drops&gt; tags.


If you need any help, or have any questions, feel free to either post them here or PM me ;).</description>
    
    <lastBuildDate>Mon, 20 Dec 2010 18:38:58 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@demps2k9 demps2k9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/demps2k9">@demps2k9</a> wrote:</p>
          <blockquote>
              <p>Very nice. Keep up the good work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/9</link>
        <pubDate>Mon, 20 Dec 2010 18:38:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-9</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <p>Thanks for all the great replies :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/8</link>
        <pubDate>Mon, 20 Dec 2010 16:06:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-8</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@Ddragonimp Ddragonimp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ddragonimp">@Ddragonimp</a> wrote:</p>
          <blockquote>
              <p>Wow that is really Hot.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/7</link>
        <pubDate>Mon, 20 Dec 2010 06:03:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-7</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@doom_j doom_j]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/doom_j">@doom_j</a> wrote:</p>
          <blockquote>
              <p>Good job with this. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/6</link>
        <pubDate>Mon, 20 Dec 2010 02:35:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-6</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@Immortal_Technique Immortal Technique]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/immortal_technique">@Immortal_Technique</a> wrote:</p>
          <blockquote>
              <p>Very good.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/5</link>
        <pubDate>Mon, 20 Dec 2010 02:10:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-5</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@youridudock youridudock]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/youridudock">@youridudock</a> wrote:</p>
          <blockquote>
              <p>Nice job mate.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/4</link>
        <pubDate>Mon, 20 Dec 2010 00:37:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-4</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="374047">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/scape-java/40/5_1887921562df0dabfae55079ddabeb03.png" class="avatar"> Scape-JAVA:</div>
<blockquote>
<p>Outstanding work Jamie, another great tutorial! ;D.</p>
</blockquote>
</aside>
<p>Thanks :D.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/3</link>
        <pubDate>Mon, 20 Dec 2010 00:33:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-3</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@Scape-JAVA Scape-JAVA]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scape-java">@Scape-JAVA</a> wrote:</p>
          <blockquote>
              <p>Outstanding work Jamie, another great tutorial! ;D.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/2</link>
        <pubDate>Mon, 20 Dec 2010 00:10:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-2</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
      <item>
        <title>NPC Drops System</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <p>This tutorial will allow you to add a simple, but effective NPC drops system to your server. I’ve tested it and it works <span class="bbcode-b">perfectly</span> to how I planned it.</p>
<p>Some of the methods used in the codes given won’t exist in your server, so you’ll have to use the equivalent methods/variables used in the tutorial, that are in your server; it shouldn’t be hard, you just need to know your server well enough.</p>
<p><span class="bbcode-b">Before I start, the class provided with the bulk of the code (The ‘NPCDrop’ class), is explained by using quotes within the class, instead of referring to it directly within this tutorial.</span></p>
<p>First of all, let me explain how it works.</p>
<p>All of the drop data is stored in the ‘npcDrops’ xml file, loaded via XStream into memory, upon server-initiation. XStream is an external library that ‘serializes’ data to and from XML - in this case, it serializes the data from the codes, in the tags, in the xml file that we are loading, to the classes that the tags are aliased to.</p>
<p>When a drop is requested,</p>
<p>[ul][li]A List of all the drops that have a 100% rate (e.g. bones, ashes, etc.) is received and then iterated through to drop the <span class="bbcode-b">‘Always’</span> items.[/li]<br>
[li]After this, the random drop calculation begins - it’s not really much of a calculation, just basically a random drop (Which is what I expect RuneScape does).[/li]<br>
[li]A second list is received which contains instances of the ‘Drop’ class for all the random drops.[/li]<br>
[li]An integer is declared with the value of the size of this list, then a random value of this integer is created; the instance with the index in the list of this random value is then declared.[/li]<br>
[li]The ratio of the drop rate is then gotten from the ‘Drop’ class instance (1/#). A random number is generated from ‘#’ (The second number in the ratio; i.e. 1:#) - if this random number is equal to 1, then the random drop is dropped; if not, the method is repeated until a random drop is dropped.[/li][/ul]</p>
<p>The class with most of the code content uses XStream, so you’ll need to download the XStream jar from <a data-bbcode="true">here</a>. An explanation of what XStream is, is above.</p>
<p>Here’s the ‘npcDrops’ xml file, with some of the drops for the ‘Man’ NPC as an example of how to input data into this file:</p>
<p><code>&lt;!-- Rarity types are: ALWAYS, VERY_COMMON, COMMON, UNCOMMON, RARE, VERY_RARE, HIGHEST_RARITY. --&gt;
&lt;list&gt;
	&lt;npcDrop&gt;
		&lt;npcId&gt;1&lt;/npcId&gt;
		&lt;drops&gt;
			&lt;drop&gt;
				&lt;id&gt;526&lt;/id&gt;
				&lt;amount&gt;1&lt;/amount&gt;
				&lt;rarity&gt;ALWAYS&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;995&lt;/id&gt;
				&lt;amount&gt;3&lt;/amount&gt;
				&lt;rarity&gt;VERY_COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;558&lt;/id&gt;
				&lt;amount&gt;7&lt;/amount&gt;
				&lt;rarity&gt;RARE&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;562&lt;/id&gt;
				&lt;amount&gt;2&lt;/amount&gt;
				&lt;rarity&gt;UNCOMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;557&lt;/id&gt;
				&lt;amount&gt;4&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;554&lt;/id&gt;
				&lt;amount&gt;6&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;559&lt;/id&gt;
				&lt;amount&gt;9&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
			&lt;drop&gt;
				&lt;id&gt;555&lt;/id&gt;
				&lt;amount&gt;7&lt;/amount&gt;
				&lt;rarity&gt;COMMON&lt;/rarity&gt;
			&lt;/drop&gt;
		&lt;/drops&gt;
	&lt;/npcDrop&gt;
&lt;/list&gt;</code></p>
<p>An explanation of how to edit/add new data to the file, is at the end of the tutorial.</p>
<p>This xml file should be placed in the “/data/” directory, unless you change the file reading path within the ‘loadDrops()’ method.</p>
<p>You will also need to alias the xml data to the two classes that will follow after the main content class in this thread, by using this class:</p>
<p>[code]package org.iClarity.util;</p>
<p>import org.iClarity.model.npc.Drop;<br>
import org.iClarity.model.npc.NPCDrop;</p>
<p>import com.thoughtworks.xstream.XStream;</p>
<p>/**</p>
<ul>
<li>
<p>The XSream util.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class XStreamUtil {</p>
<p>private static XStream xstream = null;</p>
<p>/**</p>
<ul>
<li>Gets the XStream.</li>
<li>
<a class="mention" href="/u/return">@return</a> The xstream instance.<br>
*/<br>
public static XStream getXStream() {<br>
return xstream;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Initializes the XStream.</li>
<li>Aliases the classes to the xml data.<br>
*/<br>
public static void initializeXStream() {<br>
if (getXStream() == null) {<br>
xstream = new XStream();<br>
xstream.alias(“npcDrop”, NPCDrop.class);<br>
xstream.alias(“drop”, Drop.class);<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>These methods will need to be invoked, upon server initiation, to intialize XStream and load the drops data:</p>
<p><code>XStreamUtil.initializeXStream();
NPCDrop.loadDrops();</code></p>
<p>Here’s the NPCDrop class:</p>
<p>[code]package org.iClarity.model.npc;</p>
<p>import java.io.FileInputStream;<br>
import java.io.FileNotFoundException;<br>
import java.util.ArrayList;<br>
import java.util.HashMap;<br>
import java.util.List;<br>
import java.util.Map;<br>
import java.util.Random;</p>
<p>import org.iClarity.model.World;<br>
import org.iClarity.model.player.Player;<br>
import org.iClarity.model.player.items.Item;<br>
import org.iClarity.util.XStreamUtil;<br>
import org.iClarity.util.items.ItemHandler;</p>
<p>/**</p>
<ul>
<li>
<p>Manages NPC drops.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class NPCDrop {</p>
<p>private int npcId;<br>
private Drop[] drops;<br>
private static Map&lt;Integer, NPCDrop&gt; npcDrops;<br>
private static Random r = new Random();</p>
<p>/**</p>
<ul>
<li>Gets the npc id.</li>
<li>
<a class="mention" href="/u/return">@return</a> The npcId variable.<br>
*/<br>
public int getNpcId() {<br>
return npcId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the drops array.</li>
<li>
<a class="mention" href="/u/return">@return</a> The drops array.<br>
*/<br>
public Drop[] getDrops() {<br>
return drops;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the second number in the ratio.</li>
<li>
<a class="mention" href="/u/param">@param</a> ratio The drop chance ratio.</li>
<li>
<a class="mention" href="/u/return">@return</a> The second number in the ratio.<br>
*/<br>
private static int getSecondRatioNumber(String ratio) {<br>
return Integer.valueOf(ratio.replaceAll(“1:”, “”));<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets a random Item drop.</li>
<li>
<a class="mention" href="/u/param">@param</a> npcType The type of the npc.</li>
<li>
<a class="mention" href="/u/return">@return</a> The Item class instance for a random drop.<br>
*/<br>
private static Item getRandomItemDrop(int npcType) {<br>
List otherDrops = getOtherItemDrops(npcType);<br>
if (otherDrops.size() == 0) {<br>
// If there are no random drops, return the item as ‘null’.<br>
return null;<br>
}<br>
int random = r.nextInt(otherDrops.size()); // A random value out of the amount of random drops.<br>
Drop drop = otherDrops.get(random); // The drop class instance for the random drop.<br>
int chance = r.nextInt(getSecondRatioNumber(drop.getRarity().getRatio())); // The chance of getting the drop.<br>
if ((chance + 1) == 1) {<br>
// If the chance is equal to 1 (i.e. The 1:# chance of getting the item, returns true),<br>
// then the random drop is dropped for the player; this method returns the ‘Item’ class<br>
// instance for the drop.<br>
return drop.toItem();<br>
}<br>
// If the chance returns false, then invoke and return this method again, until a random drop returns true.<br>
return getRandomItemDrop(npcType);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the other item drops.</li>
<li>
<a class="mention" href="/u/param">@param</a> npcType The type of the npc.</li>
<li>
<a class="mention" href="/u/return">@return</a> A list of the other item drops.<br>
*/<br>
private static List getOtherItemDrops(int npcType) {<br>
NPCDrop drops = npcDrops.get(npcType); // This class instance for the drops of the NPC.<br>
if (drops == null) {<br>
// If the ‘drops’ instance returns as ‘null’ (i.e. there are no random drops for the NPC),<br>
// then this method returns as ‘null’.<br>
return null;<br>
}<br>
List otherDrops = new ArrayList(); // A List to add random drops to.<br>
for (Drop drop : drops.getDrops()) {<br>
// Iterate through the NPC’s drops, and add the ‘drop’ instance to the ‘otherDrops’<br>
// list if the drop rarity does not equal ‘ALWAYS’.<br>
if (drop == null) {<br>
continue;<br>
} else if (!drop.getRarity().equals(Rarity.ALWAYS)) {<br>
otherDrops.add(drop);<br>
}<br>
}<br>
return otherDrops;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the always item drops.</li>
<li>
<a class="mention" href="/u/param">@param</a> npcType The type of the npc.</li>
<li>
<a class="mention" href="/u/return">@return</a> A list of the always item drops.<br>
*/<br>
private static List getAlwaysItemDrops(int npcType) {<br>
NPCDrop drops = npcDrops.get(npcType); // This class instance for the drops of the NPC.<br>
if (drops == null) {<br>
// If the ‘drops’ instance returns as ‘null’ (i.e. there are no ‘always’ drops for the NPC),<br>
// then this method returns as ‘null’.<br>
return null;<br>
}<br>
List alwaysDrops = new ArrayList(); // A list to add the ‘ALWAYS’ drops to.<br>
for (Drop drop : drops.getDrops()) {<br>
// Iterate through the NPC’s drops, and add the ‘drop’ instance to the ‘otherDrops’<br>
// list if the drop rarity is equal to ‘ALWAYS’.<br>
if (drop == null) {<br>
continue;<br>
} else if (drop.getRarity().equals(Rarity.ALWAYS)) {<br>
alwaysDrops.add(drop.toItem());<br>
}<br>
}<br>
return alwaysDrops;<br>
}</li>
</ul>
<p>public enum Rarity {</p>
<pre><code> /**
  * A 1:# chance of getting the drop.
  * The chance of getting a random drop is the second number
  * in the specific ratio * the amount of random drops available.
  * E.G. The chance of getting a 'RARE' drop, with a total of 10
  * random drops from that npc, is 1/1000.
  */
 ALWAYS("1:1"), VERY_COMMON("1:5"), COMMON("1:10"), UNCOMMON("1:50"), RARE("1:100"), 
 	VERY_RARE("1:250"), HIGHEST_RARITY("1:500");

 private String ratio;
 
 /**
  * Gets the rarity ratio.
  * @return The ratio variable.
  */
 public String getRatio() {
 	return ratio;
 }

 /**
  * Constructs a new rarity.
  * @param ratio The rarity ratio.
  */
 Rarity(String ratio) {
 	this.ratio = ratio;
 }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Loads the npc drop data.</li>
<li>
<span class="mention">@throws</span> FileNotFoundException If the npc drops file cannot be found.<br>
*/<br>
<span class="mention">@SuppressWarnings</span>(“unchecked”)<br>
public static void loadDrops() throws FileNotFoundException {<br>
// A list of all the instances of this class, containing an array of the NPC’s drops.<br>
// One instance of this class is loaded and added, for every NPC that has drops.<br>
List list = (List) XStreamUtil.getXStream().fromXML(new FileInputStream(“data/npcDrops.xml”));<br>
// Initializes the ‘npcDrops’ map.<br>
npcDrops = new HashMap&lt;Integer, NPCDrop&gt;();<br>
for (NPCDrop npcDrop : list) {<br>
// Iterates through the loaded list, and puts the data to the ‘npcDrops’ map.<br>
// The key that is put, is the NPC’s type; the value that is put, is the instance<br>
// of this class for that NPC.<br>
npcDrops.put(npcDrop.getNpcId(), npcDrop);<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Drops the npc’s items.</li>
<li>
<a class="mention" href="/u/param">@param</a> npc The npc to drop the items from.<br>
*/<br>
public static void dropItems(NPC npc) {<br>
int type = npc.npcType;<br>
Player player = World.getPlayers().get(npc.getKillerIndex()); // Gets the player index of the NPC’s killer.<br>
if (player == null) {<br>
// If the player instance is equal to ‘null’ (i.e. the player does not exist), then return.<br>
return;<br>
}<br>
List alwaysDrops = getAlwaysItemDrops(type); // A list of all the ‘ALWAYS’ drops.<br>
if (alwaysDrops.size() &gt; 0) {<br>
// If there are more than 0 drops, iterate through the List.<br>
for (Item item : alwaysDrops) {<br>
// Iterates through the ‘ALWAYS’ drops list, and drops the item for the player.<br>
ItemHandler.createGroundItem(item, npc.getX(), npc.getY(), player.getIndex());<br>
}<br>
}<br>
Item item = getRandomItemDrop(type); // The ‘Item’ class instance for the random drop.<br>
if (item != null) {<br>
// Drops the random item for the player.<br>
ItemHandler.createGroundItem(item, npc.getX(), npc.getY(), player.getIndex());<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The Drop class:</p>
<p>[code]package org.iClarity.model.npc;</p>
<p>import org.iClarity.model.npc.NPCDrop.Rarity;<br>
import org.iClarity.model.player.items.Item;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an npc drop.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class Drop {</p>
<p>private int id;<br>
private int amount;<br>
private Rarity rarity;</p>
<p>/**</p>
<ul>
<li>Gets the item id of the drop.</li>
<li>
<a class="mention" href="/u/return">@return</a> The id variable.<br>
*/<br>
public int getId() {<br>
return id;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the amount of the drop.</li>
<li>
<a class="mention" href="/u/return">@return</a> The amount variable.<br>
*/<br>
public int getAmount() {<br>
return amount;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the rarity of the drop.</li>
<li>
<a class="mention" href="/u/return">@return</a> The rarity variable.<br>
*/<br>
public Rarity getRarity() {<br>
return rarity;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Converts this class to an Item class instance.</li>
<li>
<a class="mention" href="/u/return">@return</a> The item instance.<br>
*/<br>
public Item toItem() {<br>
return new Item(id, amount);<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The Item class (For codes used in the NPCDrop class):</p>
<p>[code]package org.iClarity.model.player.items;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an item.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class Item {</p>
<p>private int id;<br>
private int amount;</p>
<p>/**</p>
<ul>
<li>Gets the id of the item.</li>
<li>
<a class="mention" href="/u/return">@return</a> The id variable.<br>
*/<br>
public int getId() {<br>
return id;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the amount of the item.</li>
<li>
<a class="mention" href="/u/return">@return</a> The amount variable.<br>
*/<br>
public int getAmount() {<br>
return amount;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new item.</li>
<li>
<a class="mention" href="/u/param">@param</a> id The id of the item.<br>
*/<br>
public Item(int id) {<br>
this(id, 1);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new item.</li>
<li>
<a class="mention" href="/u/param">@param</a> id The id of the item.</li>
<li>
<a class="mention" href="/u/param">@param</a> amount The amount of the item.<br>
*/<br>
public Item(int id, int amount) {<br>
if (amount &lt;= 0) {<br>
return;<br>
}<br>
this.id = id;<br>
this.amount = amount;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The purpose of this class, is to use OOP instead of all the bullshit that most winterlove-based servers use.</p>
<p><span class="bbcode-u"><span class="bbcode-b">How to edit the data/add more data to the drops xml file</span></span></p>
<p>To add a new npc that drops items, just add another:</p>
<p><code>	&lt;npcDrop&gt;
		&lt;npcId&gt;#&lt;/npcId&gt;
		&lt;drops&gt;
			&lt;drop&gt;
				&lt;id&gt;#&lt;/id&gt;
				&lt;amount&gt;#&lt;/amount&gt;
				&lt;rarity&gt;RARITY&lt;/rarity&gt;
			&lt;/drop&gt;
		&lt;/drops&gt;
	&lt;/npcDrop&gt;</code></p>
<p>Within the   tags.</p>
<p>To add another drop for an already added NPC, just add another:</p>
<p><code>			&lt;drop&gt;
				&lt;id&gt;#&lt;/id&gt;
				&lt;amount&gt;#&lt;/amount&gt;
				&lt;rarity&gt;RARITY&lt;/rarity&gt;
			&lt;/drop&gt;</code></p>
<p>Within the  tags.</p>
<p>If you need any help, or have any questions, feel free to either post them here or PM me ;).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/npc-drops-system/374047/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/npc-drops-system/374047/1</link>
        <pubDate>Sun, 19 Dec 2010 22:39:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374047-1</guid>
        <source url="https://forum.moparisthebest.com/t/npc-drops-system/374047.rss">NPC Drops System</source>
      </item>
  </channel>
</rss>
