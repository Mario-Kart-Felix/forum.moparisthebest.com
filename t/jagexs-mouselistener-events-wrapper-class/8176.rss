<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JageX&#39;s MouseListener/Events wrapper class</title>
    <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176</link>
    <description>Jagex have been clever with their new engine, and they now set the client&#39;s mouseListener to null every now and again, etc, so we can&#39;t send events directly to it.

However, jagex also have a wrapper class for MouseListener/MouseMotionListener, which they store statically in one of their classes.
I wrote an application for my bct API to find the class and the field.
Note, this won&#39;t compile for you, but the logic is there to find it, it can even be done with pure reflection.
[code]import bct.*;
import java.util.*;
import org.apache.bcel.classfile.*;

public class MouseListenerFinder extends Transform {

    private HashMap&lt;String,String&gt; cfg;
    private HashMap&lt;String,JavaClass&gt; classes;
    
    private static final String[] MOUSE_INTERFACES = {
      &quot;java.awt.event.MouseListener&quot;, &quot;java.awt.event.MouseMotionListener&quot;                                               
    };
    
    private JavaClass listenerClass;
    private JavaClass declaredWrapperClass;
    private Field declaredWrapper;

    public MouseListenerFinder() {
        cfg = loadProperties(&quot;./Configs/MouseListenerFinder.properties&quot;);
        classes = loadJar(cfg.get(&quot;input&quot;));
        log(&quot;Loaded &quot; + classes.size() + &quot; classes!&quot;);
         findListenerClass();
        if(listenerClass != null) {
            log(&quot;The jagex mouse wrapper is &quot; + listenerClass.getClassName());
            findWrapperField(listenerClass);
            if(declaredWrapper != null) {
                log(&quot;Mouse wrapper field: &quot; + declaredWrapperClass.getClassName() +
                    &quot;.&quot; + declaredWrapper.getName());
                
            } else {
                log(&quot;Was unable to find an instance of this mouse wrapper?&quot;);
            }
        } else {
            log(&quot;Was unable to find the Jagex mouseevent wrapper&quot;);
        }
        
    }
    
    private void findListenerClass() {
        try {
            for(JavaClass c : classes.values()) {
                for(String className : c.getInterfaceNames()) {
                    for(String s : MOUSE_INTERFACES)
                        if(className.equals(s))
                            listenerClass = c;
                }
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }
    
    private void findWrapperField(JavaClass typeOf) {
        try {
            for(JavaClass clazz : classes.values()) {
                for(Field f : clazz.getFields()) {
                    if(f.getType().toString().equals(typeOf.getClassName())) {
                        declaredWrapperClass = clazz;
                        declaredWrapper = f;
                    }
                }
            }
        }
        catch(Exception e) {
            e.printStackTrace();
        }
    }

}[/code]
Output on current #422? client is:
[code]Starting MouseListenerFinder
[04:15:43] [MouseListenerFinder] Loaded 132 classes!
[04:15:43] [MouseListenerFinder] The jagex mouse wrapper is qc
[04:15:43] [MouseListenerFinder] Mouse wrapper field: ae.b
Press any key to continue . . .[/code]

The logic in this program:

[ul][li]Loop through all the classes, and find a class that has the parent interfaces, &quot;java.awt.event.MouseListener&quot;, &quot;java.awt.event.MouseMotionListener[/li]
[li]Loop through all the classes, and find a class which has a FIELD that is the TYPE of the above class[/li][/ul]


Basically, if we get the &quot;ae.b&quot; object through reflection or however else, we can get the object instance of it, since it is static.
Once we have the object of &quot;ae.b&quot;, we can cast it to MouseListener or MouseMotionListener, and invoke its mouse methods, such as mousePressed, and mouseMoved.

Note, I tested the above theory ^.

I hope this was useful to someone :).</description>
    
    <lastBuildDate>Sat, 12 Aug 2006 17:10:17 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JageX&#39;s MouseListener/Events wrapper class</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>[quote=“p a r t y b o y, post:4, topic:8176”]so, what is this so that people can’t auto on your client?[/quote]It’s to get around Jagex’s new bullshit code so that, in turn, you can hax ur clnt LoL pls u der?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/5</link>
        <pubDate>Sat, 12 Aug 2006 17:10:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-8176-5</guid>
        <source url="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss">JageX&#39;s MouseListener/Events wrapper class</source>
      </item>
      <item>
        <title>JageX&#39;s MouseListener/Events wrapper class</title>
        <dc:creator><![CDATA[@p_a_r_t_y_b_o_y p a r t y b o y]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/p_a_r_t_y_b_o_y">@p_a_r_t_y_b_o_y</a> wrote:</p>
          <blockquote>
              <p>so, what is this so that people can’t auto on your client?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/4</link>
        <pubDate>Sat, 12 Aug 2006 15:42:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-8176-4</guid>
        <source url="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss">JageX&#39;s MouseListener/Events wrapper class</source>
      </item>
      <item>
        <title>JageX&#39;s MouseListener/Events wrapper class</title>
        <dc:creator><![CDATA[@ruler ruler]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruler">@ruler</a> wrote:</p>
          <blockquote>
              <p>or theBot.theApplet.getComponentAt(1,1).getListeners(MouseListener.class)[0] assuming the client has been init() and start() for over 5 seconds.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/3</link>
        <pubDate>Sat, 12 Aug 2006 08:01:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-8176-3</guid>
        <source url="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss">JageX&#39;s MouseListener/Events wrapper class</source>
      </item>
      <item>
        <title>JageX&#39;s MouseListener/Events wrapper class</title>
        <dc:creator><![CDATA[@Bebemycat2 Bebe]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bebemycat2">@Bebemycat2</a> wrote:</p>
          <blockquote>
              <p>Very nice, you are skilled and deserve every bit of attention you can get.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/2</link>
        <pubDate>Sun, 06 Aug 2006 08:25:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-8176-2</guid>
        <source url="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss">JageX&#39;s MouseListener/Events wrapper class</source>
      </item>
      <item>
        <title>JageX&#39;s MouseListener/Events wrapper class</title>
        <dc:creator><![CDATA[@NOURLOL NOURLOL]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nourlol">@NOURLOL</a> wrote:</p>
          <blockquote>
              <p>Jagex have been clever with their new engine, and they now set the client’s mouseListener to null every now and again, etc, so we can’t send events directly to it.</p>
<p>However, jagex also have a wrapper class for MouseListener/MouseMotionListener, which they store statically in one of their classes.<br>
I wrote an application for my bct API to find the class and the field.<br>
Note, this won’t compile for you, but the logic is there to find it, it can even be done with pure reflection.</p>
<p>[code]import bct.<em>;<br>
import java.util.</em>;<br>
import org.apache.bcel.classfile.*;</p>
<p>public class MouseListenerFinder extends Transform {</p>
<pre><code>private HashMap&lt;String,String&gt; cfg;
private HashMap&lt;String,JavaClass&gt; classes;

private static final String[] MOUSE_INTERFACES = {
  "java.awt.event.MouseListener", "java.awt.event.MouseMotionListener"                                               
};

private JavaClass listenerClass;
private JavaClass declaredWrapperClass;
private Field declaredWrapper;

public MouseListenerFinder() {
    cfg = loadProperties("./Configs/MouseListenerFinder.properties");
    classes = loadJar(cfg.get("input"));
    log("Loaded " + classes.size() + " classes!");
     findListenerClass();
    if(listenerClass != null) {
        log("The jagex mouse wrapper is " + listenerClass.getClassName());
        findWrapperField(listenerClass);
        if(declaredWrapper != null) {
            log("Mouse wrapper field: " + declaredWrapperClass.getClassName() +
                "." + declaredWrapper.getName());
            
        } else {
            log("Was unable to find an instance of this mouse wrapper?");
        }
    } else {
        log("Was unable to find the Jagex mouseevent wrapper");
    }
    
}

private void findListenerClass() {
    try {
        for(JavaClass c : classes.values()) {
            for(String className : c.getInterfaceNames()) {
                for(String s : MOUSE_INTERFACES)
                    if(className.equals(s))
                        listenerClass = c;
            }
        }
    }
    catch(Exception e) {
        e.printStackTrace();
    }
}

private void findWrapperField(JavaClass typeOf) {
    try {
        for(JavaClass clazz : classes.values()) {
            for(Field f : clazz.getFields()) {
                if(f.getType().toString().equals(typeOf.getClassName())) {
                    declaredWrapperClass = clazz;
                    declaredWrapper = f;
                }
            }
        }
    }
    catch(Exception e) {
        e.printStackTrace();
    }
}
</code></pre>
<p>}[/code]<br>
Output on current <span class="hashtag">#422</span>? client is:</p>
<p><code>Starting MouseListenerFinder
[04:15:43] [MouseListenerFinder] Loaded 132 classes!
[04:15:43] [MouseListenerFinder] The jagex mouse wrapper is qc
[04:15:43] [MouseListenerFinder] Mouse wrapper field: ae.b
Press any key to continue . . .</code></p>
<p>The logic in this program:</p>
<p>[ul][li]Loop through all the classes, and find a class that has the parent interfaces, “java.awt.event.MouseListener”, "java.awt.event.MouseMotionListener[/li]<br>
[li]Loop through all the classes, and find a class which has a FIELD that is the TYPE of the above class[/li][/ul]</p>
<p>Basically, if we get the “ae.b” object through reflection or however else, we can get the object instance of it, since it is static.<br>
Once we have the object of “ae.b”, we can cast it to MouseListener or MouseMotionListener, and invoke its mouse methods, such as mousePressed, and mouseMoved.</p>
<p>Note, I tested the above theory ^.</p>
<p>I hope this was useful to someone :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176/1</link>
        <pubDate>Sun, 06 Aug 2006 06:52:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-8176-1</guid>
        <source url="https://forum.moparisthebest.com/t/jagexs-mouselistener-events-wrapper-class/8176.rss">JageX&#39;s MouseListener/Events wrapper class</source>
      </item>
  </channel>
</rss>
