<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 17</title>
    <link>https://forum.moparisthebest.com/t/exception-in-thread-main-java-lang-arrayindexoutofboundsexception-17/232925</link>
    <description>Hey guys i got this error and i really don&#39;t know how to fix it, if i compile i don&#39;t get any errors but if i start my runserver.bat i get this:

[code]Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 17
           at ItemHandler.loadItemList(ItemHandler.java:346)
           at ItemHandler.(init)(ItemHandler.java:39
           at server.main(server.java:33)[/code]

My ItemHandler.java

[code]// Scape - The Scape Developers Team
// Phate, AridTag, Dan, DrBone420, Hero

import java.io.*;


public class ItemHandler {

    // Phate: Setting VARS
    public static int showItemTimer = 60;
    public static int hideItemTimer = 60;

    // Phate: Global Item VARS
    public static int[] globalItemController = new int[5001];
    public static int[] globalItemID = new int[5001];
    public static int[] globalItemX = new int[5001];
    public static int[] globalItemY = new int[5001];
    public static int[] globalItemAmount = new int[5001];
    public static boolean[] globalItemStatic = new boolean[5001];

    public static int[] globalItemTicks = new int[5001];

    public ItemHandler() {			
        for (int i = 0; i &lt;= 5000; i++) {
            globalItemController[i] = 0;
            globalItemID[i] = 0;
            globalItemX[i] = 0;
            globalItemY[i] = 0;
            globalItemAmount[i] = 0;
            globalItemTicks[i] = 0;
            globalItemStatic[i] = false;
        }
        for (int i = 0; i &lt; MaxDropItems; i++) {
            ResetItem(i);
        }
        for (int i = 0; i &lt; MaxListedItems; i++) {
            ItemList[i] = null;
[b]        }
        loadItemList(&quot;item.cfg&quot;);
        // loadDrops(&quot;drops.cfg&quot;);
    }[/b]

    public void process() {
        for (int i = 0; i &lt;= 5000; i++) {
            if (globalItemID[i] != 0) {
                globalItemTicks[i]++;
            }

            if ((hideItemTimer + showItemTimer) == globalItemTicks[i]) {
                // misc.println(&quot;Item Removed [&quot;+i+&quot;] id is [&quot;+globalItemID[i]+&quot;]&quot;);
                if (!globalItemStatic[i]) {
                    removeItemAll(globalItemID[i], globalItemX[i],
                            globalItemY[i]);
                } else {
                    misc.println(&quot;Item is static&quot;);
                }
            }

            if (showItemTimer == globalItemTicks[i]) { // Phate: Item has expired, show to all
                if (!globalItemStatic[i]) {
                    createItemAll(globalItemID[i], globalItemX[i],
                            globalItemY[i], globalItemAmount[i],
                            globalItemController[i]);
                } else {
                    misc.println(&quot;Item is static&quot;);
                }
            } 
			
        }
    }

    public static boolean itemExists(int itemID, int itemX, int itemY) {
        for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
            if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                    &amp;&amp; globalItemY[i] == itemY) { // Phate: Found item
                return true;
            }
        }
        return false; // Phate: Item doesnt exist
    }

    public static int itemAmount(int itemID, int itemX, int itemY) {
        for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
            if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                    &amp;&amp; globalItemY[i] == itemY) { // Phate: Found item
                return globalItemAmount[i];
            }
        }
        return 0; // Phate: Item doesnt exist
    }

    public static void addItem(int itemID, int itemX, int itemY, int itemAmount, int itemController, boolean itemStatic) {
        for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
            if (globalItemID[i] == 0) { // Phate: Found blank item spot
                globalItemController[i] = itemController;
                globalItemID[i] = itemID;
                globalItemX[i] = itemX;
                globalItemY[i] = itemY;
                globalItemAmount[i] = itemAmount;
                globalItemStatic[i] = itemStatic;
                globalItemTicks[i] = 0;
                if (globalItemController[i] != -1
                        &amp;&amp; globalItemController[i] != 0) {
                    spawnItem(globalItemID[i], globalItemX[i], globalItemY[i],
                            globalItemAmount[i], globalItemController[i]);
                }
                break;
            }
        }
    }

    public static void spawnItem(int itemID, int itemX, int itemY, int itemAmount, int playerFor) {
        client person = (client) server.playerHandler.players[playerFor];

        if (person != null) {
            person.createGroundItem(itemID, itemX, itemY, itemAmount);
        }
    }

    public static void removeItem(int itemID, int itemX, int itemY, int itemAmount) {
        for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
            if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                    &amp;&amp; globalItemY[i] == itemY
                    &amp;&amp; globalItemAmount[i] == itemAmount) {
                removeItemAll(globalItemID[i], globalItemX[i], globalItemY[i]);
                globalItemController[i] = 0;
                globalItemID[i] = 0;
                globalItemX[i] = 0;
                globalItemY[i] = 0;
                globalItemAmount[i] = 0;
                globalItemTicks[i] = 0;
                globalItemStatic[i] = false;
            }
        }
    }

    public static void createItemAll(int itemID, int itemX, int itemY, int itemAmount, int itemController) {
        for (Player p : server.playerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if ((person.playerName != null || person.playerName != &quot;null&quot;)
                        &amp;&amp; !(person.playerId == itemController)) {
                    // misc.println(&quot;distance to create &quot;+person.distanceToPoint(itemX, itemY));
                    if (person.distanceToPoint(itemX, itemY) &lt;= 60) {
                        person.createGroundItem(itemID, itemX, itemY, itemAmount);
                    }
                }
            }
        }
    }

    public static void removeItemAll(int itemID, int itemX, int itemY) {
        for (Player p : server.playerHandler.players) {
            if (p != null) {
                client person = (client) p;

                if (person.playerName != null || person.playerName != &quot;null&quot;) {
                    // misc.println(&quot;distance to remove &quot;+person.distanceToPoint(itemX, itemY));
                    if (person.distanceToPoint(itemX, itemY) &lt;= 60) {
                        person.removeGroundItem(itemX, itemY, itemID);
                    }
                }
            }
        }
    }
    public static int DropItemCount = 0;
    public static int MaxDropItems = 100000;
    public static int MaxListedItems = 10000;
    // process() is called evry 500 ms
    public static int MaxDropShowDelay = 120; // 120 * 500 = 60000 / 1000 = 60s
    public static int SDID = 90; // 90 * 500 = 45000 / 1000 = 45s
    // SDID = Standard Drop Items Delay
    public static int[] DroppedItemsID = new int[MaxDropItems];
    public static int[] DroppedItemsX = new int[MaxDropItems];
    public static int[] DroppedItemsY = new int[MaxDropItems];
    public static int[] DroppedItemsN = new int[MaxDropItems];
    public static int[] DroppedItemsH = new int[MaxDropItems];
    public static int[] DroppedItemsDDelay = new int[MaxDropItems];
    public static int[] DroppedItemsSDelay = new int[MaxDropItems];
    public static int[] DroppedItemsDropper = new int[MaxDropItems];
    public static int[] DroppedItemsDeletecount = new int[MaxDropItems];
    public static boolean[] DroppedItemsAlwaysDrop = new boolean[MaxDropItems];
    public ItemList ItemList[] = new ItemList[MaxListedItems];

    /* ItemHandler() {
     for(int i = 0; i &lt; MaxDropItems; i++) {
     ResetItem(i);
     }
     for(int i = 0; i &lt; MaxListedItems; i++) {
     ItemList[i] = null;
     }
     loadItemList(&quot;item.cfg&quot;);
     loadDrops(&quot;drops.cfg&quot;);
     }*/


    public void ResetItem(int ArrayID) {
        DroppedItemsID[ArrayID] = -1;
        DroppedItemsX[ArrayID] = -1;
        DroppedItemsY[ArrayID] = -1;
        DroppedItemsN[ArrayID] = -1;
        DroppedItemsH[ArrayID] = -1;
        DroppedItemsDDelay[ArrayID] = -1;
        DroppedItemsSDelay[ArrayID] = 0;
        DroppedItemsDropper[ArrayID] = -1;
        DroppedItemsDeletecount[ArrayID] = 0;
        DroppedItemsAlwaysDrop[ArrayID] = false;
    }

    public boolean loadDrops(String FileName) {
        String line = &quot;&quot;;
        String token = &quot;&quot;;
        String token2 = &quot;&quot;;
        String token2_2 = &quot;&quot;;
        String[] token3 = new String[10];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;

        try {
            characterfile = new BufferedReader(new FileReader(&quot;./&quot; + FileName));
        } catch (FileNotFoundException fileex) {
            misc.println(FileName + &quot;: file not found.&quot;);
            return false;
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(FileName + &quot;: error loading file.&quot;);
            return false;
        }
        while (EndOfFile == false &amp;&amp; line != null) {
            line = line.trim();
            int spot = line.indexOf(&quot;=&quot;);

            if (spot &gt; -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token3 = token2_2.split(&quot;\t&quot;);
                if (token.equals(&quot;drop&quot;)) {
                    int id = Integer.parseInt(token3[0]);
                    int x = Integer.parseInt(token3[1]);
                    int y = Integer.parseInt(token3[2]);
                    int amount = Integer.parseInt(token3[3]);
                    int height = Integer.parseInt(token3[4]); 

                    for (int i = 0; i &lt; 5000; i++) {
                        createItemAll(id, x, y, amount, globalItemController[i]);
                    }
                }
            } else {
                if (line.equals(&quot;[ENDOFDROPLIST]&quot;)) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {}
                    return true;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {}
        return false;
    }

    public void newItemList(int ItemId, String ItemName, String ItemDescription, double ShopValue, double LowAlch, double HighAlch, int Bonuses[]) {
        // first, search for a free slot
        int slot = -1;

        for (int i = 0; i &lt; 9999; i++) {
            if (ItemList[i] == null) {
                slot = i;
                break;
            }
        }

        if (slot == -1) {
            return;
        }		// no free slot found

        ItemList newItemList = new ItemList(ItemId);

        newItemList.itemName = ItemName;
        newItemList.itemDescription = ItemDescription;
        newItemList.ShopValue = ShopValue;
        newItemList.LowAlch = LowAlch;
        newItemList.HighAlch = HighAlch;
        newItemList.Bonuses = Bonuses;
        ItemList[slot] = newItemList;
    }

    public boolean loadItemList(String FileName) {
        String line = &quot;&quot;;
        String token = &quot;&quot;;
        String token2 = &quot;&quot;;
        String token2_2 = &quot;&quot;;
        String[] token3 = new String[10];
        boolean EndOfFile = false;
        int ReadMode = 0;
        BufferedReader characterfile = null;

        try {
            characterfile = new BufferedReader(new FileReader(&quot;./&quot; + FileName));
        } catch (FileNotFoundException fileex) {
            misc.println(FileName + &quot;: file not found.&quot;);
            return false;
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception) {
            misc.println(FileName + &quot;: error loading file.&quot;);
            return false;
        }
        while (EndOfFile == false &amp;&amp; line != null) {
            line = line.trim();
            int spot = line.indexOf(&quot;=&quot;);

            if (spot &gt; -1) {
                token = line.substring(0, spot);
                token = token.trim();
                token2 = line.substring(spot + 1);
                token2 = token2.trim();
                token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
                token3 = token2_2.split(&quot;\t&quot;);
                if (token.equals(&quot;item&quot;)) {
                    int[] Bonuses = new int[12];

                    for (int i = 0; i &lt; 12; i++) {
                        if (token3[(6 + i)] != null) {
                            Bonuses[i] = Integer.parseInt(token3[(6 + i)]);
                        } else {
                            break;
                        }
                    }
                    newItemList(Integer.parseInt(token3[0]),
                            token3[1].replaceAll(&quot;_&quot;, &quot; &quot;),
                            token3[2].replaceAll(&quot;_&quot;, &quot; &quot;),
                            Double.parseDouble(token3[4]),
                            Double.parseDouble(token3[4]),
                            Double.parseDouble(token3[6]), Bonuses);
                }
            } else {
                if (line.equals(&quot;[ENDOFITEMLIST]&quot;)) {
                    try {
                        characterfile.close();
                    } catch (IOException ioexception) {}
                    return true;
                }
            }
            try {
                line = characterfile.readLine();
            } catch (IOException ioexception1) {
                EndOfFile = true;
            }
        }
        try {
            characterfile.close();
        } catch (IOException ioexception) {}
        return false;
    }
}
[/code]

I think it&#39;s this:

[code]        loadItemList(&quot;item.cfg&quot;);
        // loadDrops(&quot;drops.cfg&quot;);[/code]

If i change it to:

[code]        // loadItemList(&quot;item.cfg&quot;);
        // loadDrops(&quot;drops.cfg&quot;);[/code]

I get all stuff named like:

!! NOT EXISTING ITEM !! - ][

Help me?
Thank you  :D</description>
    
    <lastBuildDate>Wed, 24 Sep 2008 15:23:57 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/exception-in-thread-main-java-lang-arrayindexoutofboundsexception-17/232925.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 17</title>
        <dc:creator><![CDATA[@Jesse777 Jesse777]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jesse777">@Jesse777</a> wrote:</p>
          <blockquote>
              <p>Hey guys i got this error and i really don’t know how to fix it, if i compile i don’t get any errors but if i start my runserver.bat i get this:</p>
<p><code>Exception in thread "main" java.lang.ArrayIndexOutOfBoundsException: 17
           at ItemHandler.loadItemList(ItemHandler.java:346)
           at ItemHandler.(init)(ItemHandler.java:39
           at server.main(server.java:33)</code></p>
<p>My ItemHandler.java</p>
<p>[code]// Scape - The Scape Developers Team<br>
// Phate, AridTag, Dan, DrBone420, Hero</p>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;</p>
<p>public class ItemHandler {</p>
<pre><code>// Phate: Setting VARS
public static int showItemTimer = 60;
public static int hideItemTimer = 60;

// Phate: Global Item VARS
public static int[] globalItemController = new int[5001];
public static int[] globalItemID = new int[5001];
public static int[] globalItemX = new int[5001];
public static int[] globalItemY = new int[5001];
public static int[] globalItemAmount = new int[5001];
public static boolean[] globalItemStatic = new boolean[5001];

public static int[] globalItemTicks = new int[5001];

public ItemHandler() {			
    for (int i = 0; i &lt;= 5000; i++) {
        globalItemController[i] = 0;
        globalItemID[i] = 0;
        globalItemX[i] = 0;
        globalItemY[i] = 0;
        globalItemAmount[i] = 0;
        globalItemTicks[i] = 0;
        globalItemStatic[i] = false;
    }
    for (int i = 0; i &lt; MaxDropItems; i++) {
        ResetItem(i);
    }
    for (int i = 0; i &lt; MaxListedItems; i++) {
        ItemList[i] = null;
</code></pre>
<p><span class="bbcode-b">        }<br>
loadItemList(“item.cfg”);<br>
// loadDrops(“drops.cfg”);<br>
}</span></p>
<pre><code>public void process() {
    for (int i = 0; i &lt;= 5000; i++) {
        if (globalItemID[i] != 0) {
            globalItemTicks[i]++;
        }

        if ((hideItemTimer + showItemTimer) == globalItemTicks[i]) {
            // misc.println("Item Removed ["+i+"] id is ["+globalItemID[i]+"]");
            if (!globalItemStatic[i]) {
                removeItemAll(globalItemID[i], globalItemX[i],
                        globalItemY[i]);
            } else {
                misc.println("Item is static");
            }
        }

        if (showItemTimer == globalItemTicks[i]) { // Phate: Item has expired, show to all
            if (!globalItemStatic[i]) {
                createItemAll(globalItemID[i], globalItemX[i],
                        globalItemY[i], globalItemAmount[i],
                        globalItemController[i]);
            } else {
                misc.println("Item is static");
            }
        } 
		
    }
}

public static boolean itemExists(int itemID, int itemX, int itemY) {
    for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
        if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                &amp;&amp; globalItemY[i] == itemY) { // Phate: Found item
            return true;
        }
    }
    return false; // Phate: Item doesnt exist
}

public static int itemAmount(int itemID, int itemX, int itemY) {
    for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
        if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                &amp;&amp; globalItemY[i] == itemY) { // Phate: Found item
            return globalItemAmount[i];
        }
    }
    return 0; // Phate: Item doesnt exist
}

public static void addItem(int itemID, int itemX, int itemY, int itemAmount, int itemController, boolean itemStatic) {
    for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
        if (globalItemID[i] == 0) { // Phate: Found blank item spot
            globalItemController[i] = itemController;
            globalItemID[i] = itemID;
            globalItemX[i] = itemX;
            globalItemY[i] = itemY;
            globalItemAmount[i] = itemAmount;
            globalItemStatic[i] = itemStatic;
            globalItemTicks[i] = 0;
            if (globalItemController[i] != -1
                    &amp;&amp; globalItemController[i] != 0) {
                spawnItem(globalItemID[i], globalItemX[i], globalItemY[i],
                        globalItemAmount[i], globalItemController[i]);
            }
            break;
        }
    }
}

public static void spawnItem(int itemID, int itemX, int itemY, int itemAmount, int playerFor) {
    client person = (client) server.playerHandler.players[playerFor];

    if (person != null) {
        person.createGroundItem(itemID, itemX, itemY, itemAmount);
    }
}

public static void removeItem(int itemID, int itemX, int itemY, int itemAmount) {
    for (int i = 0; i &lt;= 5000; i++) { // Phate: Loop through all item spots
        if (globalItemID[i] == itemID &amp;&amp; globalItemX[i] == itemX
                &amp;&amp; globalItemY[i] == itemY
                &amp;&amp; globalItemAmount[i] == itemAmount) {
            removeItemAll(globalItemID[i], globalItemX[i], globalItemY[i]);
            globalItemController[i] = 0;
            globalItemID[i] = 0;
            globalItemX[i] = 0;
            globalItemY[i] = 0;
            globalItemAmount[i] = 0;
            globalItemTicks[i] = 0;
            globalItemStatic[i] = false;
        }
    }
}

public static void createItemAll(int itemID, int itemX, int itemY, int itemAmount, int itemController) {
    for (Player p : server.playerHandler.players) {
        if (p != null) {
            client person = (client) p;

            if ((person.playerName != null || person.playerName != "null")
                    &amp;&amp; !(person.playerId == itemController)) {
                // misc.println("distance to create "+person.distanceToPoint(itemX, itemY));
                if (person.distanceToPoint(itemX, itemY) &lt;= 60) {
                    person.createGroundItem(itemID, itemX, itemY, itemAmount);
                }
            }
        }
    }
}

public static void removeItemAll(int itemID, int itemX, int itemY) {
    for (Player p : server.playerHandler.players) {
        if (p != null) {
            client person = (client) p;

            if (person.playerName != null || person.playerName != "null") {
                // misc.println("distance to remove "+person.distanceToPoint(itemX, itemY));
                if (person.distanceToPoint(itemX, itemY) &lt;= 60) {
                    person.removeGroundItem(itemX, itemY, itemID);
                }
            }
        }
    }
}
public static int DropItemCount = 0;
public static int MaxDropItems = 100000;
public static int MaxListedItems = 10000;
// process() is called evry 500 ms
public static int MaxDropShowDelay = 120; // 120 * 500 = 60000 / 1000 = 60s
public static int SDID = 90; // 90 * 500 = 45000 / 1000 = 45s
// SDID = Standard Drop Items Delay
public static int[] DroppedItemsID = new int[MaxDropItems];
public static int[] DroppedItemsX = new int[MaxDropItems];
public static int[] DroppedItemsY = new int[MaxDropItems];
public static int[] DroppedItemsN = new int[MaxDropItems];
public static int[] DroppedItemsH = new int[MaxDropItems];
public static int[] DroppedItemsDDelay = new int[MaxDropItems];
public static int[] DroppedItemsSDelay = new int[MaxDropItems];
public static int[] DroppedItemsDropper = new int[MaxDropItems];
public static int[] DroppedItemsDeletecount = new int[MaxDropItems];
public static boolean[] DroppedItemsAlwaysDrop = new boolean[MaxDropItems];
public ItemList ItemList[] = new ItemList[MaxListedItems];

/* ItemHandler() {
 for(int i = 0; i &lt; MaxDropItems; i++) {
 ResetItem(i);
 }
 for(int i = 0; i &lt; MaxListedItems; i++) {
 ItemList[i] = null;
 }
 loadItemList("item.cfg");
 loadDrops("drops.cfg");
 }*/


public void ResetItem(int ArrayID) {
    DroppedItemsID[ArrayID] = -1;
    DroppedItemsX[ArrayID] = -1;
    DroppedItemsY[ArrayID] = -1;
    DroppedItemsN[ArrayID] = -1;
    DroppedItemsH[ArrayID] = -1;
    DroppedItemsDDelay[ArrayID] = -1;
    DroppedItemsSDelay[ArrayID] = 0;
    DroppedItemsDropper[ArrayID] = -1;
    DroppedItemsDeletecount[ArrayID] = 0;
    DroppedItemsAlwaysDrop[ArrayID] = false;
}

public boolean loadDrops(String FileName) {
    String line = "";
    String token = "";
    String token2 = "";
    String token2_2 = "";
    String[] token3 = new String[10];
    boolean EndOfFile = false;
    int ReadMode = 0;
    BufferedReader characterfile = null;

    try {
        characterfile = new BufferedReader(new FileReader("./" + FileName));
    } catch (FileNotFoundException fileex) {
        misc.println(FileName + ": file not found.");
        return false;
    }
    try {
        line = characterfile.readLine();
    } catch (IOException ioexception) {
        misc.println(FileName + ": error loading file.");
        return false;
    }
    while (EndOfFile == false &amp;&amp; line != null) {
        line = line.trim();
        int spot = line.indexOf("=");

        if (spot &gt; -1) {
            token = line.substring(0, spot);
            token = token.trim();
            token2 = line.substring(spot + 1);
            token2 = token2.trim();
            token2_2 = token2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token3 = token2_2.split("\t");
            if (token.equals("drop")) {
                int id = Integer.parseInt(token3[0]);
                int x = Integer.parseInt(token3[1]);
                int y = Integer.parseInt(token3[2]);
                int amount = Integer.parseInt(token3[3]);
                int height = Integer.parseInt(token3[4]); 

                for (int i = 0; i &lt; 5000; i++) {
                    createItemAll(id, x, y, amount, globalItemController[i]);
                }
            }
        } else {
            if (line.equals("[ENDOFDROPLIST]")) {
                try {
                    characterfile.close();
                } catch (IOException ioexception) {}
                return true;
            }
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception1) {
            EndOfFile = true;
        }
    }
    try {
        characterfile.close();
    } catch (IOException ioexception) {}
    return false;
}

public void newItemList(int ItemId, String ItemName, String ItemDescription, double ShopValue, double LowAlch, double HighAlch, int Bonuses[]) {
    // first, search for a free slot
    int slot = -1;

    for (int i = 0; i &lt; 9999; i++) {
        if (ItemList[i] == null) {
            slot = i;
            break;
        }
    }

    if (slot == -1) {
        return;
    }		// no free slot found

    ItemList newItemList = new ItemList(ItemId);

    newItemList.itemName = ItemName;
    newItemList.itemDescription = ItemDescription;
    newItemList.ShopValue = ShopValue;
    newItemList.LowAlch = LowAlch;
    newItemList.HighAlch = HighAlch;
    newItemList.Bonuses = Bonuses;
    ItemList[slot] = newItemList;
}

public boolean loadItemList(String FileName) {
    String line = "";
    String token = "";
    String token2 = "";
    String token2_2 = "";
    String[] token3 = new String[10];
    boolean EndOfFile = false;
    int ReadMode = 0;
    BufferedReader characterfile = null;

    try {
        characterfile = new BufferedReader(new FileReader("./" + FileName));
    } catch (FileNotFoundException fileex) {
        misc.println(FileName + ": file not found.");
        return false;
    }
    try {
        line = characterfile.readLine();
    } catch (IOException ioexception) {
        misc.println(FileName + ": error loading file.");
        return false;
    }
    while (EndOfFile == false &amp;&amp; line != null) {
        line = line.trim();
        int spot = line.indexOf("=");

        if (spot &gt; -1) {
            token = line.substring(0, spot);
            token = token.trim();
            token2 = line.substring(spot + 1);
            token2 = token2.trim();
            token2_2 = token2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token2_2 = token2_2.replaceAll("\t\t", "\t");
            token3 = token2_2.split("\t");
            if (token.equals("item")) {
                int[] Bonuses = new int[12];

                for (int i = 0; i &lt; 12; i++) {
                    if (token3[(6 + i)] != null) {
                        Bonuses[i] = Integer.parseInt(token3[(6 + i)]);
                    } else {
                        break;
                    }
                }
                newItemList(Integer.parseInt(token3[0]),
                        token3[1].replaceAll("_", " "),
                        token3[2].replaceAll("_", " "),
                        Double.parseDouble(token3[4]),
                        Double.parseDouble(token3[4]),
                        Double.parseDouble(token3[6]), Bonuses);
            }
        } else {
            if (line.equals("[ENDOFITEMLIST]")) {
                try {
                    characterfile.close();
                } catch (IOException ioexception) {}
                return true;
            }
        }
        try {
            line = characterfile.readLine();
        } catch (IOException ioexception1) {
            EndOfFile = true;
        }
    }
    try {
        characterfile.close();
    } catch (IOException ioexception) {}
    return false;
}
</code></pre>
<p>}<br>
[/code]</p>
<p>I think it’s this:</p>
<p><code>        loadItemList("item.cfg");
        // loadDrops("drops.cfg");</code></p>
<p>If i change it to:</p>
<p><code>        // loadItemList("item.cfg");
        // loadDrops("drops.cfg");</code></p>
<p>I get all stuff named like:</p>
<p>!! NOT EXISTING ITEM !! - ][</p>
<p>Help me?<br>
Thank you  <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception-in-thread-main-java-lang-arrayindexoutofboundsexception-17/232925/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception-in-thread-main-java-lang-arrayindexoutofboundsexception-17/232925/1</link>
        <pubDate>Wed, 24 Sep 2008 15:23:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-232925-1</guid>
        <source url="https://forum.moparisthebest.com/t/exception-in-thread-main-java-lang-arrayindexoutofboundsexception-17/232925.rss">Exception in thread &quot;main&quot; java.lang.ArrayIndexOutOfBoundsException: 17</source>
      </item>
  </channel>
</rss>
