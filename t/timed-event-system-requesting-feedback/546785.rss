<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Timed Event System - Requesting feedback</title>
    <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785</link>
    <description>I wanted to created a timed event system without using any default java utilities like Timer and Scheduled services.
The system I made works, but I have little to no clue on how decent it is.

I&#39;m requesting feedback on what I did good/wrong and how to do it better.


[b]EventManager class[/b]
[code=java]package com.randqm.events;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * 
 * @author RandQm
 * 
 * @info Manages the events.
 *
 */

public class EventManager {
	
	/**
	 * Holds the main event thread.
	 */
	private static EventThread main;
	
	/**
	 * A list holding the existing parallel event threads.
	 */
	private static List&lt;EventThread&gt; parallelThreads = new LinkedList&lt;&gt;();
	
	/**
	 * The logger for logging events.
	 */
	private static Logger logger = Logger.getLogger(EventManager.class.getSimpleName());
	
	
	/**
	 * Submits a new event.
	 * 
	 * @param event The event.
	 */
	public static void submitEvent(Event event) {
		if (event.getDelay() &lt;= 0) {
			logger.warning(&quot;Delay must be positive.&quot;);
			return;
		}
		if (main == null || event.isParallel()) {
			EventThread eventThread = new EventThread();
			eventThread.submitEvent(event);
			
			try {
				new Thread(eventThread).start();
			} catch (OutOfMemoryError ex) {
				logger.log(Level.WARNING, &quot;Unable to create any more parallel threads.&quot;);
				ex.printStackTrace();
				return;
			}
			if (main == null)
				main = eventThread;
			parallelThreads.add(eventThread);
		} else
			main.submitEvent(event);
	}
	
	/**
	 * Disposes the event manager.
	 */
	public void dispose() {
		synchronized (parallelThreads) {
			for (Iterator&lt;EventThread&gt; iterator = parallelThreads.iterator(); iterator.hasNext();) {
				((EventThread)iterator.next()).dispose();
				iterator.remove();
			}
		}
		parallelThreads.clear();
		logger.info(&quot;Event manager has been disposed.&quot;);
	}

}

[/code]

[b]EventThread class[/b]
[code=java]package com.randqm.events;

import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;

/**
 * 
 * @author RandQm
 * 
 * @info Represents a thread where events are handled.
 *
 */

public class EventThread implements Runnable {

	/**
	 * A list holding the events assigned to this thread.
	 */
	private List&lt;Event&gt; events = new LinkedList&lt;&gt;();

	
	/**
	 * Submits a new event to the event thread.
	 * 
	 * @param event The event to submit.
	 */
	public void submitEvent(Event event) {
		synchronized (events) {
			events.add(event);
		}
	}
	
	@Override
	public void run() {
		while (!events.isEmpty()) {
			synchronized (events) {
				for (Iterator&lt;Event&gt; iterator = events.iterator(); iterator.hasNext();) {
					Event event = (Event)iterator.next();
					
					if (!event.tick())
						iterator.remove();
				}
			}
		}
	}
	
	/**
	 * Disposes the thread.
	 */
	public void dispose() {
		synchronized (events) {
			events.clear();
		}
	}

}
[/code]

[b]Event class[/b]
[code=java]package com.randqm.events;

/**
 * 
 * @author RandQm
 * 
 * @info Represents an event.
 *
 */

public abstract class Event {
	
	/**
	 * The default delay time in milliseconds.
	 */
	private static final int DEFAULT_DELAY = 600;
	
	/**
	 * The execution delay of the event.
	 */
	private final long delay;
	
	/**
	 * The start time of the cycle.
	 */
	private long start;
	
	/**
	 * Whether the event should be executed instantly or not.
	 */
	private boolean executeInstantly;
	
	/**
	 * Whether the event should only execute once or not.
	 */
	private boolean executeOnce;
	
	/**
	 * Whether the event should be running parallel or not.
	 */
	private boolean parallel;
	
	
	/**
	 * The constructor.
	 */
	public Event() {
		this(DEFAULT_DELAY, EventProperty.DEFAULT);
	}
	
	/**
	 * The constructor.
	 * 
	 * @param eventProperties The properties for the event.
	 */
	public Event(EventProperty... properties) {
		this(DEFAULT_DELAY, properties);
	}
	
	/**
	 * The constructor.
	 * 
	 * @param delay The execution delay of the event.
	 */
	public Event(long delay) {
		this(delay, EventProperty.DEFAULT);
	}

	/**
	 * The constructor.
	 * 
	 * @param delay The execution delay of the event.
	 * 
	 * @param eventProperties The properties for the event.
	 */
	public Event(long delay, EventProperty... properties) {
		this.delay = delay;

		for (EventProperty property : properties) {
			if (property == EventProperty.EXECUTE_INSTANTLY)
				executeInstantly = true;
			
			if (property == EventProperty.EXECUTE_ONCE)
				executeOnce = true;
			
			if (property == EventProperty.PARALLEL)
				parallel = true;
		}
	}
	
	/**
	 * Handles a cycle tick.
	 * 
	 * @return Whether the event continues or not.
	 */
	public boolean tick() {
		if (start == 0) {
			if (executeInstantly)
				execute();
			
			if (executeOnce)
				return false;
			start = System.currentTimeMillis();
		}
		long current = System.currentTimeMillis();
		
		if (current - start &gt;= delay) {
			execute();
			
			if (executeOnce)
				return false;
			start = System.currentTimeMillis();
		}
		return true;
	}
	
	/**
	 * Executes the event.
	 */
	public abstract void execute();
	
	
	/**
	 * Retrieves the event&#39;s execution delay.
	 * 
	 * @return The event&#39;s execution delay.
	 */
	public long getDelay() {
		return delay;
	}
	
	/**
	 * Retrieves whether the event should be executed parallel or not.
	 * 
	 * @return The parallel run status.
	 */
	public boolean isParallel() {
		return parallel;
	}

}

[/code]

[b]EventProperty class[/b]
[code=java]package com.randqm.events;

/**
 * 
 * @author RandQm
 * 
 * @info The possible properties for events.
 *
 */

public enum EventProperty {
	
	PARALLEL,
	EXECUTE_ONCE,
	EXECUTE_INSTANTLY,
	DEFAULT

}
[/code]</description>
    
    <lastBuildDate>Wed, 17 Sep 2014 16:23:38 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ashi, post:12, topic:546785”][quote author=Lothy link=topic=665680.msg4450398#msg4450398 date=1410956127]<br>
<a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html</a><br>
[/quote]<br>
Would that be appropriate for events though. I though executors are best for task systems because you’re not creating a new thread for each task.</p>
<p>OT: It’s good practice to use braces when you can.</p>
<p>Edit: Just realised that this isn’t an event system. It’s a task system.[/quote]<br>
Yeah I realized it as well while reading your first line lol</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/13</link>
        <pubDate>Wed, 17 Sep 2014 16:23:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-13</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="11" data-topic="546785">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/lothy/40/51_1.png" class="avatar"> Lothy:</div>
<blockquote>
<p><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html</a></p>
</blockquote>
</aside>
<p>Would that be appropriate for events though. I though executors are best for task systems because you’re not creating a new thread for each task.</p>
<p>OT: It’s good practice to use braces when you can.</p>
<p>Edit: Just realised that this isn’t an event system. It’s a task system.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/12</link>
        <pubDate>Wed, 17 Sep 2014 12:49:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-12</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p><a href="http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/11</link>
        <pubDate>Wed, 17 Sep 2014 12:15:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-11</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="9" data-topic="546785">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>Ok, but what about the other part of what I said, as in not actually using a list/map at all, and just using separate booleans?</p>
</blockquote>
</aside>
<p>Yeah the list is maybe not necessary</p>
<p>edit: Updated the code on the topic</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/10</link>
        <pubDate>Mon, 15 Sep 2014 21:14:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-10</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Ok, but what about the other part of what I said, as in not actually using a list/map at all, and just using separate booleans?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/9</link>
        <pubDate>Mon, 15 Sep 2014 21:08:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-9</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:7, topic:546785”][quote author=RandQm link=topic=665680.msg4450139#msg4450139 date=1410813505]<br>
About the properties, it’s not because it’s more fancy but because it is easier to read/use for a layman imo.<br>
[/quote]What do you mean? If you mean [tt]getProperties().contains(IMMEDIATE) [/tt]is easier to read/use than [tt]isImmediate()[/tt] then I disagree :P[/quote]<br>
Users would only need to put properties in as parameter when creating a new event, EventProperty.SOMETHING is easier than getting the correct string for the util.properties</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/8</link>
        <pubDate>Mon, 15 Sep 2014 21:07:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-8</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“RandQm, post:6, topic:546785”]About the properties, it’s not because it’s more fancy but because it is easier to read/use for a layman imo.[/quote]What do you mean? If you mean [tt]getProperties().contains(IMMEDIATE) [/tt]is easier to read/use than [tt]isImmediate()[/tt] then I disagree <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/7</link>
        <pubDate>Mon, 15 Sep 2014 20:51:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-7</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:5, topic:546785”]<code>                if (event.getDelay() &lt;= 0) {
                        logger.warning("Delay must be positive.");
                        return;
                }</code>You should instead check this value on the Event initialization in the constructor and throw a potential IllegalArgumentException</p>
<p>Also I don’t really like the design of using a list to wrap the event properties. Right now you are using an enum list to basically wrap 3 booleans because you would rather have a List than those booleans themselves. While it make look more elegant/cool isn’t really a good reason to do it. If you realllly don’t want to just add those booleans then at least use java.util.Properties</p>
<p>I don’t know a lot about the specifics with threads and such, but at first glance it also looks like this would be a crazy cpu hog, because it never sleeps. You should calculate how long each thread can sleep during the tick</p>
<p>Lastly, is there any reason you have ‘current’ as a persistent variable outside of the tick method for events? It just seems like it’s unneeded.[/quote]<br>
Thanks for the bunch of feedback, once I made changes I will update the topic.<br>
There’s no reason why the current variable is outside the tick other than an oversight.<br>
About the properties, it’s not because it’s more fancy but because it is easier to read/use for a layman imo.</p>
<p>[quote=“tyb97, post:4, topic:546785”][quote author=RandQm link=topic=665680.msg4450119#msg4450119 date=1410806981]</p>
<aside class="quote">
<blockquote>
<p>I’m not sure how efficient or safe creating a new thread for each event is. However, nice use of parallelism.</p>
</blockquote>
</aside>
<p>I assume you mean creating a new thread for every parallel event as the normal ones run on the same thread?<br>
As you can see I’m catching the exception if there would be to many threads, but according to my research a simple computer can run<br>
over a K threads so I don’t think that would be a problem very quick.<br>
[/quote]<br>
I didn’t know those numbers, but looks good.</p>
<p>The only other thing I see is it just seems a bit verbose to me. Couldn’t you simplify things like this</p>
<pre><code class="lang-auto">        /**
         * Disposes the event manager.
         */
        public void dispose() {
                synchronized (parallelThreads) {
                        for (Iterator&lt;EventThread&gt; iterator = parallelThreads.iterator(); iterator.hasNext();) {
                                ((EventThread)iterator.next()).dispose();
                                iterator.remove();
                        }
                }
                parallelThreads.clear();
                logger.info("Event manager has been disposed.");
        }</code></pre>
<p>with using lambdas, parallelStream(), forEach(), etc?</p>
<p><a href="http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop" class="onebox" target="_blank" rel="nofollow noopener">http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop</a></p>
<p>Did some extra research since I haven’t personally used them in this way yet, only seen it.[/quote]<br>
I have used lambdas when programming with Linq, though it can look clean I find the readability not that good, especially for people who don’t know lambda’s so I prefer not to use them.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/6</link>
        <pubDate>Mon, 15 Sep 2014 20:38:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-6</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p><code>                if (event.getDelay() &lt;= 0) {
                        logger.warning("Delay must be positive.");
                        return;
                }</code>You should instead check this value on the Event initialization in the constructor and throw a potential IllegalArgumentException</p>
<p>Also I don’t really like the design of using a list to wrap the event properties. Right now you are using an enum list to basically wrap 3 booleans because you would rather have a List than those booleans themselves. While it make look more elegant/cool isn’t really a good reason to do it. If you realllly don’t want to just add those booleans then at least use java.util.Properties</p>
<p>I don’t know a lot about the specifics with threads and such, but at first glance it also looks like this would be a crazy cpu hog, because it never sleeps. You should calculate how long each thread can sleep during the tick</p>
<p>Lastly, is there any reason you have ‘current’ as a persistent variable outside of the tick method for events? It just seems like it’s unneeded.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/5</link>
        <pubDate>Mon, 15 Sep 2014 19:53:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-5</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@tyb97 tyb97]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tyb97">@tyb97</a> wrote:</p>
          <blockquote>
              <p>[quote=“RandQm, post:3, topic:546785”][quote author=tyb97 link=topic=665680.msg4450118#msg4450118 date=1410806521]<br>
I’m not sure how efficient or safe creating a new thread for each event is. However, nice use of parallelism.<br>
[/quote]<br>
I assume you mean creating a new thread for every parallel event as the normal ones run on the same thread?<br>
As you can see I’m catching the exception if there would be to many threads, but according to my research a simple computer can run<br>
over a K threads so I don’t think that would be a problem very quick.[/quote]<br>
I didn’t know those numbers, but looks good.</p>
<p>The only other thing I see is it just seems a bit verbose to me. Couldn’t you simplify things like this</p>
<pre><code class="lang-auto">        /**
         * Disposes the event manager.
         */
        public void dispose() {
                synchronized (parallelThreads) {
                        for (Iterator&lt;EventThread&gt; iterator = parallelThreads.iterator(); iterator.hasNext();) {
                                ((EventThread)iterator.next()).dispose();
                                iterator.remove();
                        }
                }
                parallelThreads.clear();
                logger.info("Event manager has been disposed.");
        }</code></pre>
<p>with using lambdas, parallelStream(), forEach(), etc?</p>
<p><a href="http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop" class="onebox" target="_blank" rel="nofollow noopener">http://stackoverflow.com/questions/16635398/java-8-iterable-foreach-vs-foreach-loop</a></p>
<p>Did some extra research since I haven’t personally used them in this way yet, only seen it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/4</link>
        <pubDate>Mon, 15 Sep 2014 19:16:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-4</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="546785">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/tyb97/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> tyb97:</div>
<blockquote>
<p>I’m not sure how efficient or safe creating a new thread for each event is. However, nice use of parallelism.</p>
</blockquote>
</aside>
<p>I assume you mean creating a new thread for every parallel event as the normal ones run on the same thread?<br>
As you can see I’m catching the exception if there would be to many threads, but according to my research a simple computer can run<br>
over a K threads so I don’t think that would be a problem very quick.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/3</link>
        <pubDate>Mon, 15 Sep 2014 18:49:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-3</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@tyb97 tyb97]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tyb97">@tyb97</a> wrote:</p>
          <blockquote>
              <p>I’m not sure how efficient or safe creating a new thread for each event is. However, nice use of parallelism.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/2</link>
        <pubDate>Mon, 15 Sep 2014 18:42:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-2</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
      <item>
        <title>Timed Event System - Requesting feedback</title>
        <dc:creator><![CDATA[@RandQm RandQm]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/randqm">@RandQm</a> wrote:</p>
          <blockquote>
              <p>I wanted to created a timed event system without using any default java utilities like Timer and Scheduled services.<br>
The system I made works, but I have little to no clue on how decent it is.</p>
<p>I’m requesting feedback on what I did good/wrong and how to do it better.</p>
<p><span class="bbcode-b">EventManager class</span></p>
<p>[code=java]package com.randqm.events;</p>
<p>import java.util.Iterator;<br>
import java.util.LinkedList;<br>
import java.util.List;<br>
import java.util.logging.Level;<br>
import java.util.logging.Logger;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> RandQm</li>
<li>
</li>
<li>
<span class="mention">@info</span> Manages the events.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class EventManager {</p>
<pre><code>/**
 * Holds the main event thread.
 */
private static EventThread main;

/**
 * A list holding the existing parallel event threads.
 */
private static List&lt;EventThread&gt; parallelThreads = new LinkedList&lt;&gt;();

/**
 * The logger for logging events.
 */
private static Logger logger = Logger.getLogger(EventManager.class.getSimpleName());


/**
 * Submits a new event.
 * 
 * @param event The event.
 */
public static void submitEvent(Event event) {
	if (event.getDelay() &lt;= 0) {
		logger.warning("Delay must be positive.");
		return;
	}
	if (main == null || event.isParallel()) {
		EventThread eventThread = new EventThread();
		eventThread.submitEvent(event);
		
		try {
			new Thread(eventThread).start();
		} catch (OutOfMemoryError ex) {
			logger.log(Level.WARNING, "Unable to create any more parallel threads.");
			ex.printStackTrace();
			return;
		}
		if (main == null)
			main = eventThread;
		parallelThreads.add(eventThread);
	} else
		main.submitEvent(event);
}

/**
 * Disposes the event manager.
 */
public void dispose() {
	synchronized (parallelThreads) {
		for (Iterator&lt;EventThread&gt; iterator = parallelThreads.iterator(); iterator.hasNext();) {
			((EventThread)iterator.next()).dispose();
			iterator.remove();
		}
	}
	parallelThreads.clear();
	logger.info("Event manager has been disposed.");
}
</code></pre>
<p>}</p>
<p>[/code]</p>
<p><span class="bbcode-b">EventThread class</span></p>
<p>[code=java]package com.randqm.events;</p>
<p>import java.util.Iterator;<br>
import java.util.LinkedList;<br>
import java.util.List;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> RandQm</li>
<li>
</li>
<li>
<span class="mention">@info</span> Represents a thread where events are handled.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class EventThread implements Runnable {</p>
<pre><code>/**
 * A list holding the events assigned to this thread.
 */
private List&lt;Event&gt; events = new LinkedList&lt;&gt;();


/**
 * Submits a new event to the event thread.
 * 
 * @param event The event to submit.
 */
public void submitEvent(Event event) {
	synchronized (events) {
		events.add(event);
	}
}

@Override
public void run() {
	while (!events.isEmpty()) {
		synchronized (events) {
			for (Iterator&lt;Event&gt; iterator = events.iterator(); iterator.hasNext();) {
				Event event = (Event)iterator.next();
				
				if (!event.tick())
					iterator.remove();
			}
		}
	}
}

/**
 * Disposes the thread.
 */
public void dispose() {
	synchronized (events) {
		events.clear();
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p><span class="bbcode-b">Event class</span></p>
<p>[code=java]package com.randqm.events;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> RandQm</li>
<li>
</li>
<li>
<span class="mention">@info</span> Represents an event.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public abstract class Event {</p>
<pre><code>/**
 * The default delay time in milliseconds.
 */
private static final int DEFAULT_DELAY = 600;

/**
 * The execution delay of the event.
 */
private final long delay;

/**
 * The start time of the cycle.
 */
private long start;

/**
 * Whether the event should be executed instantly or not.
 */
private boolean executeInstantly;

/**
 * Whether the event should only execute once or not.
 */
private boolean executeOnce;

/**
 * Whether the event should be running parallel or not.
 */
private boolean parallel;


/**
 * The constructor.
 */
public Event() {
	this(DEFAULT_DELAY, EventProperty.DEFAULT);
}

/**
 * The constructor.
 * 
 * @param eventProperties The properties for the event.
 */
public Event(EventProperty... properties) {
	this(DEFAULT_DELAY, properties);
}

/**
 * The constructor.
 * 
 * @param delay The execution delay of the event.
 */
public Event(long delay) {
	this(delay, EventProperty.DEFAULT);
}

/**
 * The constructor.
 * 
 * @param delay The execution delay of the event.
 * 
 * @param eventProperties The properties for the event.
 */
public Event(long delay, EventProperty... properties) {
	this.delay = delay;

	for (EventProperty property : properties) {
		if (property == EventProperty.EXECUTE_INSTANTLY)
			executeInstantly = true;
		
		if (property == EventProperty.EXECUTE_ONCE)
			executeOnce = true;
		
		if (property == EventProperty.PARALLEL)
			parallel = true;
	}
}

/**
 * Handles a cycle tick.
 * 
 * @return Whether the event continues or not.
 */
public boolean tick() {
	if (start == 0) {
		if (executeInstantly)
			execute();
		
		if (executeOnce)
			return false;
		start = System.currentTimeMillis();
	}
	long current = System.currentTimeMillis();
	
	if (current - start &gt;= delay) {
		execute();
		
		if (executeOnce)
			return false;
		start = System.currentTimeMillis();
	}
	return true;
}

/**
 * Executes the event.
 */
public abstract void execute();


/**
 * Retrieves the event's execution delay.
 * 
 * @return The event's execution delay.
 */
public long getDelay() {
	return delay;
}

/**
 * Retrieves whether the event should be executed parallel or not.
 * 
 * @return The parallel run status.
 */
public boolean isParallel() {
	return parallel;
}
</code></pre>
<p>}</p>
<p>[/code]</p>
<p><span class="bbcode-b">EventProperty class</span></p>
<p>[code=java]package com.randqm.events;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> RandQm</li>
<li>
</li>
<li>
<span class="mention">@info</span> The possible properties for events.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public enum EventProperty {</p>
<pre><code>PARALLEL,
EXECUTE_ONCE,
EXECUTE_INSTANTLY,
DEFAULT
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785/1</link>
        <pubDate>Mon, 15 Sep 2014 18:37:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546785-1</guid>
        <source url="https://forum.moparisthebest.com/t/timed-event-system-requesting-feedback/546785.rss">Timed Event System - Requesting feedback</source>
      </item>
  </channel>
</rss>
