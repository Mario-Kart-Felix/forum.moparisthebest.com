<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Basic Java/RSPS Programming Guide</title>
    <link>https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106</link>
    <description>I&#39;m sure there&#39;s many guide&#39;s about this but I decided to make my own one just so I could share it.
This will update as time goes by. 

[code]/**
Java, RSPS Programming
Rainaka &amp; Arsys
Content fixes by Galkon
More Content fixes by Myself
* This will be used to teach newcomers basics. It was done at the best of our ability, so try and use it as a learning lesson.
* In these tutorials, we will be using Run.

* What you need to know.

	Speed 0 = walking
	Speed 1 = running
	Running = running
	Walking = walking
	Energy = Energy based on 100%, 100 being full.
	sendText = send text

*/

/// Chapter 1: if statements
	//Chapter 1.1: if statements, normal
		if statements are used to complete an action mostly.
			//EXAMPLE
			if (Speed == 1) {
				Run = true;
			} else if (Speed == 0) {
				Run = false;
			}
			//EXAMPLE 2
			If you are using only one action you can do this.
			if (Speed == 1)
				Run = true;
			//REMEMBER
			To start a bracket at the end of the if line and close them before else&#39;s and the end of the statement if you have multiple actions.
	//Chapter 1.2: if statements, ternary
		Ternary is used to simply make code cleaner and more professional. Easier to read also.
			//EXAMPLE:
			if (Running = true) {
				Run = true;
			} else if (Running = false) {
				Run = false;
			}
			//TURNS INTO
			Run = Running ? true : false;
	//Chapter 1.3: if statements, return statements
		Used to even be more efficient code that will cut down on alot of writing.
			//EXAMPLE
			public String EXAMPLENAME() {
				if(Speed == 0) {
					return &quot;Walking&quot;;
				if(Speed == 1) [
					return &quot;Running&quot;;
				return &quot;Unkown Speed&quot;;
			}
			//COULD BE USED LIKE
			sendText(&quot;Player is: &quot;+EXAMPLENAME());
///Chapter 2: Symbols
	//Chapter 2.1: Symbols, basic.
		The bracket. {}. Used to start and end an if statement that has multiple actions.
			//EXAMPLE
				if(run == 100) {
					sendText(&quot;Energy: FULL)&quot;);
					
				}
		The quotations. &quot;&quot;. Used to start and end a text line.
			//EXAMPLE
				sendText(&quot;Energy: FULL)&quot;);
		The parenthesis. (). Used to start and end a if statement.
			//EXAMPLE
				sendText(&quot;Energy: FULL)&quot;);
		The semi-colon. ;. Used to end the declaration.
			//EXAMPLE
				sendText(&quot;Energy: FULL)&quot;);
		The greater-than. &gt;. Used to show it&#39;s greater than.
			//EXAMPLE 
				if(run &gt; 1) {
					runSpeed == 0);
				}
		The less-than. &lt;. Used to show it&#39;s less than.
			//EXAMPLE
				if(Energy &lt; 100) {
					Energy == 100;
				}
		The equal. =. he equal. =. Used to declare the value of the variable.
			//EXAMPLE
				if(Speed == 0) {
					Walk = true;
				}
		The double equal. ==. Used to show equality.
			//EXAMPLE
				if(run == 100) {
					sendText(&quot;Energy: FULL)&quot;);
				}
		The addition. +. Used to add/add-on another method or text, etc.
			//EXAMPLE
				sendText(&quot;Player is: &quot;+EXAMPLENAME());
		The double addiction. ++. Used to increase by 1 every incriment.
			//EXAMPLE
				Energy++;
		The double subtraction. --. Used to decrease by 1 every incriment.
			//EXAMPLE
				Energy--;
///Chapter 3: Methods
	//Chapter 3.1: Methods, Kinds
		class - File name.
		public - Available to all files.
		private - Only available to that file.
		void - a method that is used to preform functions, has no return value
		boolean - A variable that can hold 2 values, &#39;true&#39; and &#39;false&#39;.&quot;
		static -  Allows a method to be referenced as a static (e.g. This.this; as opposed to this
		final - A declaration of a void, boolean, etc. Cannot be changed whilst running
		byte - a variable that can hold a value from 0 to 254&quot;
		int - an variable that can hold a value from -2147483647 to +2147483647
		String - a variable that hold a series of characters (e.g: &quot;hello&quot; would be a String)
                char - a variable that can hold one character (e.g: &quot;h&quot; would be a char)[/code]
*Requesting rep is not allowed - Si Force*</description>
    
    <lastBuildDate>Mon, 13 Sep 2010 21:39:38 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Basic Java/RSPS Programming Guide</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <p>This is a snippet of code really, not a tutorial. You haven’t even explained the code at all.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/4</link>
        <pubDate>Mon, 13 Sep 2010 21:39:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-360106-4</guid>
        <source url="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106.rss">Basic Java/RSPS Programming Guide</source>
      </item>
      <item>
        <title>Basic Java/RSPS Programming Guide</title>
        <dc:creator><![CDATA[@Arsys Arsys]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arsys">@Arsys</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="360106">
<div class="title">
<div class="quote-controls"></div>
 Ace.:</div>
<blockquote>
<p>Great guide. Hopefully it drives people to create some of their own work rather than grabbing shit off tutorials.</p>
</blockquote>
</aside>
<p>I agree.<br>
<em>requesting reputation is not allowed</em></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/3</link>
        <pubDate>Mon, 13 Sep 2010 21:27:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-360106-3</guid>
        <source url="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106.rss">Basic Java/RSPS Programming Guide</source>
      </item>
      <item>
        <title>Basic Java/RSPS Programming Guide</title>
        <dc:creator><![CDATA[@Ace1 Ace.]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ace1">@Ace1</a> wrote:</p>
          <blockquote>
              <p>Great guide. Hopefully it drives people to create some of their own work rather than grabbing shit off tutorials.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/2</link>
        <pubDate>Mon, 13 Sep 2010 21:25:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-360106-2</guid>
        <source url="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106.rss">Basic Java/RSPS Programming Guide</source>
      </item>
      <item>
        <title>Basic Java/RSPS Programming Guide</title>
        <dc:creator><![CDATA[@Arsys Arsys]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arsys">@Arsys</a> wrote:</p>
          <blockquote>
              <p>I’m sure there’s many guide’s about this but I decided to make my own one just so I could share it.<br>
This will update as time goes by.</p>
<p>[code]/**<br>
Java, RSPS Programming<br>
Rainaka &amp; Arsys<br>
Content fixes by Galkon<br>
More Content fixes by Myself</p>
<ul>
<li>
<p>This will be used to teach newcomers basics. It was done at the best of our ability, so try and use it as a learning lesson.</p>
</li>
<li>
<p>In these tutorials, we will be using Run.</p>
</li>
<li>
<p>What you need to know.</p>
<p>Speed 0 = walking<br>
Speed 1 = running<br>
Running = running<br>
Walking = walking<br>
Energy = Energy based on 100%, 100 being full.<br>
sendText = send text</p>
</li>
</ul>
<p>*/</p>
<p>/// Chapter 1: if statements<br>
//Chapter 1.1: if statements, normal<br>
if statements are used to complete an action mostly.<br>
//EXAMPLE<br>
if (Speed == 1) {<br>
Run = true;<br>
} else if (Speed == 0) {<br>
Run = false;<br>
}<br>
//EXAMPLE 2<br>
If you are using only one action you can do this.<br>
if (Speed == 1)<br>
Run = true;<br>
//REMEMBER<br>
To start a bracket at the end of the if line and close them before else’s and the end of the statement if you have multiple actions.<br>
//Chapter 1.2: if statements, ternary<br>
Ternary is used to simply make code cleaner and more professional. Easier to read also.<br>
//EXAMPLE:<br>
if (Running = true) {<br>
Run = true;<br>
} else if (Running = false) {<br>
Run = false;<br>
}<br>
//TURNS INTO<br>
Run = Running ? true : false;<br>
//Chapter 1.3: if statements, return statements<br>
Used to even be more efficient code that will cut down on alot of writing.<br>
//EXAMPLE<br>
public String EXAMPLENAME() {<br>
if(Speed == 0) {<br>
return “Walking”;<br>
if(Speed == 1) [<br>
return “Running”;<br>
return “Unkown Speed”;<br>
}<br>
//COULD BE USED LIKE<br>
sendText("Player is: "+EXAMPLENAME());<br>
///Chapter 2: Symbols<br>
//Chapter 2.1: Symbols, basic.<br>
The bracket. {}. Used to start and end an if statement that has multiple actions.<br>
//EXAMPLE<br>
if(run == 100) {<br>
sendText(“Energy: FULL)”);</p>
<pre><code>			}
	The quotations. "". Used to start and end a text line.
		//EXAMPLE
			sendText("Energy: FULL)");
	The parenthesis. (). Used to start and end a if statement.
		//EXAMPLE
			sendText("Energy: FULL)");
	The semi-colon. ;. Used to end the declaration.
		//EXAMPLE
			sendText("Energy: FULL)");
	The greater-than. &gt;. Used to show it's greater than.
		//EXAMPLE 
			if(run &gt; 1) {
				runSpeed == 0);
			}
	The less-than. &lt;. Used to show it's less than.
		//EXAMPLE
			if(Energy &lt; 100) {
				Energy == 100;
			}
	The equal. =. he equal. =. Used to declare the value of the variable.
		//EXAMPLE
			if(Speed == 0) {
				Walk = true;
			}
	The double equal. ==. Used to show equality.
		//EXAMPLE
			if(run == 100) {
				sendText("Energy: FULL)");
			}
	The addition. +. Used to add/add-on another method or text, etc.
		//EXAMPLE
			sendText("Player is: "+EXAMPLENAME());
	The double addiction. ++. Used to increase by 1 every incriment.
		//EXAMPLE
			Energy++;
	The double subtraction. --. Used to decrease by 1 every incriment.
		//EXAMPLE
			Energy--;
</code></pre>
<p>///Chapter 3: Methods<br>
//Chapter 3.1: Methods, Kinds<br>
class - File name.<br>
public - Available to all files.<br>
private - Only available to that file.<br>
void - a method that is used to preform functions, has no return value<br>
boolean - A variable that can hold 2 values, ‘true’ and ‘false’."<br>
static -  Allows a method to be referenced as a static (e.g. This.this; as opposed to this<br>
final - A declaration of a void, boolean, etc. Cannot be changed whilst running<br>
byte - a variable that can hold a value from 0 to 254"<br>
int - an variable that can hold a value from -2147483647 to +2147483647<br>
String - a variable that hold a series of characters (e.g: “hello” would be a String)<br>
char - a variable that can hold one character (e.g: “h” would be a char)[/code]<br>
<em>Requesting rep is not allowed - Si Force</em></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106/1</link>
        <pubDate>Mon, 13 Sep 2010 21:10:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-360106-1</guid>
        <source url="https://forum.moparisthebest.com/t/basic-java-rsps-programming-guide/360106.rss">Basic Java/RSPS Programming Guide</source>
      </item>
  </channel>
</rss>
