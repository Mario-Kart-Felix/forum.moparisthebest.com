<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Player Timed out after logouting</title>
    <link>https://forum.moparisthebest.com/t/player-timed-out-after-logouting/335216</link>
    <description>Hey, can someone say me where can be problem, that if player Logout&#39;s and he tryies to loggin, it says ur account is already logged in. Server says: Addinol has timed out. I&#39;m useing Emulous.

Here is my ConnectionHandler:

[CODE]package server;

import java.io.*;
import java.util.ArrayList;

public class ConnectionHandler {

	public static ArrayList &lt;String&gt;connectedIps = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;bannedIps = new ArrayList&lt;String&gt; ();
	public static ArrayList &lt;String&gt;bannedNames = new ArrayList&lt;String&gt; ();
	public static long connectionTime = 0;
	
	
	/**
	* Adds the banned usernames and ips from the text file to the ban list
	**/
	public static void initialize() {
		banUsers();
		banIps();
	}

	/**
	* Adding IP
	**/
	public static void addIp(String IP) {
		connectionTime = System.currentTimeMillis();
		connectedIps.add(IP);
	}
		
	/**
	* Removing IP
	**/
	public static void removeIp(String IP) {
		connectionTime = System.currentTimeMillis();
		connectedIps.remove(IP);
	}
	
	/**
	* Contains IP
	**/
	public static boolean containsIp(String IP) {
		int connections = 0;	
		for(String con : connectedIps) {
			if(con.equalsIgnoreCase(IP)) {
				connections++;
			}
		}	
		if(connections &gt;= Config.IPS_ALLOWED) {
			return true;
		}
		return false;		
	}
	
	
	/**
	* Adding Ban IP
	**/
	public static void addIpToBanList(String IP) {
		bannedIps.add(IP);
	}
	
	
	/**
	* Removing Ban IP
	**/
	public static void removeIpFromBanList(String IP) {
		bannedIps.remove(IP);
	}
	
	/**
	* Contains Ban IP
	**/
	public static boolean isIpBanned(String IP) {
		if(bannedIps.contains(IP)) {
			return true;
		}
		return false;
	}
	
	
	/**
	* Flooding
	**/
	public static boolean floodProtection(String IP) {
		if(connectedIps.lastIndexOf(IP) == connectedIps.size()-1) {
			if(System.currentTimeMillis() - connectionTime &gt; Config.CONNECTION_DELAY) {
				return false;
			} else {
				return true;
			}
		}
		return false;
	}
	
	
	/**
	* Adding banned username
	**/
	public static void addNameToBanList(String name) {
		bannedNames.add(name.toLowerCase());
	}
	
	
	/**
	* Removing banned username
	**/
	public static void removeNameFromBanList(String name) {
		bannedNames.remove(name.toLowerCase());
	}
	
	/**
	* Contains banned username
	**/
	public static boolean isNamedBanned(String name) {
		if(bannedNames.contains(name.toLowerCase())) {
			return true;
		}
		return false;
	}
	
	
	/**
	* Reads all usernames from text file then adds them all to the ban list
	**/
	public static void banUsers() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./bin/bans/UsersBanned.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					addNameToBanList(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	/**
	* Writes the username into the text file - when using the ::ban playername command
	**/
	public static void addNameToFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./bin/bans/UsersBanned.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	* Reads all the Ips from text file then adds them all to ban list
	**/
	public static void banIps() {
		try {
			BufferedReader in = new BufferedReader(new FileReader(&quot;./bin/bans/IpsBanned.txt&quot;));
			String data = null;
			try {
				while ((data = in.readLine()) != null) {
					addIpToBanList(data);
				}
			} finally {
				in.close();
			}
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	
	
	/**
	* Writes the IP into the text file - use ::ipban username
	**/
	public static void addIpToFile(String Name) {
		try {
			BufferedWriter out = new BufferedWriter(new FileWriter(&quot;./bin/bans/IpsBanned.txt&quot;, true));
		    try {
				out.newLine();
				out.write(Name);
		    } finally {
				out.close();
		    }
		} catch (IOException e) {
			e.printStackTrace();
		}
	}
	

}[/CODE]</description>
    
    <lastBuildDate>Fri, 02 Apr 2010 08:40:39 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/player-timed-out-after-logouting/335216.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Player Timed out after logouting</title>
        <dc:creator><![CDATA[@addinol addinol]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/addinol">@addinol</a> wrote:</p>
          <blockquote>
              <p>Hey, can someone say me where can be problem, that if player Logout’s and he tryies to loggin, it says ur account is already logged in. Server says: Addinol has timed out. I’m useing Emulous.</p>
<p>Here is my ConnectionHandler:</p>
<p>[CODE]package server;</p>
<p>import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
import java.util.ArrayList;</p>
<p>public class ConnectionHandler {</p>
<pre><code>public static ArrayList &lt;String&gt;connectedIps = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;bannedIps = new ArrayList&lt;String&gt; ();
public static ArrayList &lt;String&gt;bannedNames = new ArrayList&lt;String&gt; ();
public static long connectionTime = 0;


/**
* Adds the banned usernames and ips from the text file to the ban list
**/
public static void initialize() {
	banUsers();
	banIps();
}

/**
* Adding IP
**/
public static void addIp(String IP) {
	connectionTime = System.currentTimeMillis();
	connectedIps.add(IP);
}
	
/**
* Removing IP
**/
public static void removeIp(String IP) {
	connectionTime = System.currentTimeMillis();
	connectedIps.remove(IP);
}

/**
* Contains IP
**/
public static boolean containsIp(String IP) {
	int connections = 0;	
	for(String con : connectedIps) {
		if(con.equalsIgnoreCase(IP)) {
			connections++;
		}
	}	
	if(connections &gt;= Config.IPS_ALLOWED) {
		return true;
	}
	return false;		
}


/**
* Adding Ban IP
**/
public static void addIpToBanList(String IP) {
	bannedIps.add(IP);
}


/**
* Removing Ban IP
**/
public static void removeIpFromBanList(String IP) {
	bannedIps.remove(IP);
}

/**
* Contains Ban IP
**/
public static boolean isIpBanned(String IP) {
	if(bannedIps.contains(IP)) {
		return true;
	}
	return false;
}


/**
* Flooding
**/
public static boolean floodProtection(String IP) {
	if(connectedIps.lastIndexOf(IP) == connectedIps.size()-1) {
		if(System.currentTimeMillis() - connectionTime &gt; Config.CONNECTION_DELAY) {
			return false;
		} else {
			return true;
		}
	}
	return false;
}


/**
* Adding banned username
**/
public static void addNameToBanList(String name) {
	bannedNames.add(name.toLowerCase());
}


/**
* Removing banned username
**/
public static void removeNameFromBanList(String name) {
	bannedNames.remove(name.toLowerCase());
}

/**
* Contains banned username
**/
public static boolean isNamedBanned(String name) {
	if(bannedNames.contains(name.toLowerCase())) {
		return true;
	}
	return false;
}


/**
* Reads all usernames from text file then adds them all to the ban list
**/
public static void banUsers() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./bin/bans/UsersBanned.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				addNameToBanList(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}

/**
* Writes the username into the text file - when using the ::ban playername command
**/
public static void addNameToFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./bin/bans/UsersBanned.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}


/**
* Reads all the Ips from text file then adds them all to ban list
**/
public static void banIps() {
	try {
		BufferedReader in = new BufferedReader(new FileReader("./bin/bans/IpsBanned.txt"));
		String data = null;
		try {
			while ((data = in.readLine()) != null) {
				addIpToBanList(data);
			}
		} finally {
			in.close();
		}
	} catch (IOException e) {
		e.printStackTrace();
	}
}


/**
* Writes the IP into the text file - use ::ipban username
**/
public static void addIpToFile(String Name) {
	try {
		BufferedWriter out = new BufferedWriter(new FileWriter("./bin/bans/IpsBanned.txt", true));
	    try {
			out.newLine();
			out.write(Name);
	    } finally {
			out.close();
	    }
	} catch (IOException e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>}[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/player-timed-out-after-logouting/335216/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/player-timed-out-after-logouting/335216/1</link>
        <pubDate>Fri, 02 Apr 2010 08:40:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-335216-1</guid>
        <source url="https://forum.moparisthebest.com/t/player-timed-out-after-logouting/335216.rss">Player Timed out after logouting</source>
      </item>
  </channel>
</rss>
