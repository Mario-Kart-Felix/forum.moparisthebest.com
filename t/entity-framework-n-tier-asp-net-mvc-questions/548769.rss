<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Entity Framework / N-Tier / ASP.NET MVC questions</title>
    <link>https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769</link>
    <description>Since I have already had a few questions and probably will have more in the near future, I&#39;ll post them in this topic instead of filling the section with garbage.

I am trying to create a simple forum using the technologies listed in the title. Since we went over this stuff rather quick in our courses, I&#39;m not quite sure about some concepts.

My solution consists of four projects:
* BL (business logic)
* BL.Domain (the data classes)
* DAL (data access layer) (has the Entity Framework installed)
* UI.MVC (web application)

I have a table of Categories, Topics, Posts, Members and Milestones.

In the DAL I have a [i]repository[/i] class which interacts with the EF-created database (SQL) through a DbContext.
In the BL I have a [i]manager[/i] class which interacts with the repository in the DAL project.
In the UI.MVC I have multiple controllers which interact with the manager located in the BL project.

First question (about BL and DAL)
[spoiler]
Should I create multiple repositories or just one? ForumRepo (containing Categories, Topics and Posts), AccountRepo and MilestoneRepo or just one repository handling all of this? Same question for the manager in the DAL project.
Currently I have just one global repo and manager class that handle all data. I used generics to be able to write fewer methods, is this a good practice?

BL.ForumManager
[url=http://pastebin.com/42MuT4Da]See code[/url]
DAL.ForumRepository
[url=http://pastebin.com/1zx60286]See code[/url]
[/spoiler]

Thanks for your time!</description>
    
    <lastBuildDate>Wed, 31 Dec 2014 11:01:58 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Entity Framework / N-Tier / ASP.NET MVC questions</title>
        <dc:creator><![CDATA[@Kattoor Snow_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kattoor">@Kattoor</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="548769">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/lothy/40/51_1.png" class="avatar"> Lothy:</div>
<blockquote>
<p>I’m not convinced that there should be strict separation between the DAL and UI layers.</p>
</blockquote>
</aside>
<p>So you would remove the DAL and install the EF in the UI?<br>
What if you had multiple UI’s?</p>
<aside class="quote" data-post="3" data-topic="548769">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/lothy/40/51_1.png" class="avatar"> Lothy:</div>
<blockquote>
<p>I’m not sure why you would have any repositories when working with Entity Framework. The EF idiom is essentially one DbContext gives you everything (when you extend the DbContext base class your child class has a number of virtual DbSet properties which allow you to access the underlying data model).</p>
</blockquote>
</aside>
<p>Thanks! In our courses we started with <a href="http://ADO.NET" rel="nofollow noopener">ADO.NET</a> and then converted the project to work with the EF. Our teacher probably didn’t want to remove the repository…</p>
<aside class="quote" data-post="2" data-topic="548769">
<div class="title">
<div class="quote-controls"></div>
 object:</div>
<blockquote>
<p>It’s less complicated if you separate the Repositories and Managers. See Separation of Concerns (SoC).</p>
</blockquote>
</aside>
<p>Right now I have two classes in my BL: IForumManager (interface) and ForumManager (implements the interface).<br>
You would remove the ‘ForumManager’ class and split it up in classes like ‘MemberManager’, ‘MilestoneManager’, ‘CategoryManager’, ‘TopicManager’ and ‘PostManager’?<br>
That’s too bad, I really liked being able to do things like <span class="bbcode-i">manager.Get(id).Name</span> and such <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Thanks for your input guys!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/4</link>
        <pubDate>Wed, 31 Dec 2014 11:01:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548769-4</guid>
        <source url="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769.rss">Entity Framework / N-Tier / ASP.NET MVC questions</source>
      </item>
      <item>
        <title>Entity Framework / N-Tier / ASP.NET MVC questions</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>I’m not convinced that there should be strict separation between the DAL and UI layers.<br>
Purists, and academics, might hold the view that it should be UI -&gt; BLL -&gt; DAL. In practice though you’ll be performing a lot of very simple CRUD operations that simply require no real logic before use (e.g.: getting a list of topics for a page, ordered by latest post descending).</p>
<p>I’m not sure why you would have any repositories when working with Entity Framework. The EF idiom is essentially one DbContext gives you everything (when you extend the DbContext base class your child class has a number of virtual DbSet properties which allow you to access the underlying data model).<br>
So it should end up looking something like this:</p>
<p>So say you’re viewing page two of a particular forum section. You want to see 20 topics per page, and you want to see them ordered from the most recently active to the least recently active (that is, topics with recent replies are shown first).<br>
The code could look something like this:</p>
<pre><code class="lang-auto">using (var db = new ChildDataContext())
{
  // Skip page 1 (by skipping the top 20 results) and then get the next 20 results (by taking 20 results).
  var topics = db.Topics.Where(x =&gt; x.ForumSectionId == CurrentForumSectionId).OrderByDescending(x =&gt; x.LastPostTime).Skip(20).Take(20);
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/3</link>
        <pubDate>Sat, 27 Dec 2014 11:42:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548769-3</guid>
        <source url="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769.rss">Entity Framework / N-Tier / ASP.NET MVC questions</source>
      </item>
      <item>
        <title>Entity Framework / N-Tier / ASP.NET MVC questions</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>It’s less complicated if you separate the Repositories and Managers. See Separation of Concerns (SoC).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/2</link>
        <pubDate>Sat, 27 Dec 2014 10:47:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548769-2</guid>
        <source url="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769.rss">Entity Framework / N-Tier / ASP.NET MVC questions</source>
      </item>
      <item>
        <title>Entity Framework / N-Tier / ASP.NET MVC questions</title>
        <dc:creator><![CDATA[@Kattoor Snow_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kattoor">@Kattoor</a> wrote:</p>
          <blockquote>
              <p>Since I have already had a few questions and probably will have more in the near future, I’ll post them in this topic instead of filling the section with garbage.</p>
<p>I am trying to create a simple forum using the technologies listed in the title. Since we went over this stuff rather quick in our courses, I’m not quite sure about some concepts.</p>
<p>My solution consists of four projects:</p>
<ul>
<li>BL (business logic)</li>
<li>BL.Domain (the data classes)</li>
<li>DAL (data access layer) (has the Entity Framework installed)</li>
<li>UI.MVC (web application)</li>
</ul>
<p>I have a table of Categories, Topics, Posts, Members and Milestones.</p>
<p>In the DAL I have a <span class="bbcode-i">repository</span> class which interacts with the EF-created database (SQL) through a DbContext.<br>
In the BL I have a <span class="bbcode-i">manager</span> class which interacts with the repository in the DAL project.<br>
In the UI.MVC I have multiple controllers which interact with the manager located in the BL project.</p>
<p>First question (about BL and DAL)<br>
[spoiler]<br>
Should I create multiple repositories or just one? ForumRepo (containing Categories, Topics and Posts), AccountRepo and MilestoneRepo or just one repository handling all of this? Same question for the manager in the DAL project.<br>
Currently I have just one global repo and manager class that handle all data. I used generics to be able to write fewer methods, is this a good practice?</p>
<p>BL.ForumManager<br>
<a href="http://pastebin.com/42MuT4Da" data-bbcode="true" rel="nofollow noopener">See code</a><br>
DAL.ForumRepository<br>
<a href="http://pastebin.com/1zx60286" data-bbcode="true" rel="nofollow noopener">See code</a><br>
[/spoiler]</p>
<p>Thanks for your time!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769/1</link>
        <pubDate>Sat, 27 Dec 2014 08:47:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-548769-1</guid>
        <source url="https://forum.moparisthebest.com/t/entity-framework-n-tier-asp-net-mvc-questions/548769.rss">Entity Framework / N-Tier / ASP.NET MVC questions</source>
      </item>
  </channel>
</rss>
