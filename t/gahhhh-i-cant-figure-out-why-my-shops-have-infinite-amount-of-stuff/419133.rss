<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Gahhhh I cant figure out why my shops have infinite amount of stuff!</title>
    <link>https://forum.moparisthebest.com/t/gahhhh-i-cant-figure-out-why-my-shops-have-infinite-amount-of-stuff/419133</link>
    <description>Does anyone know how to make the shops lose the items when they buy like if you bought 500 blood runes the shop wud have 4500 not 5000???? heres the begining of my shop handler...


[code]package com.rs2hd.content;

import com.rs2hd.content.minigames.FightPits;
import com.rs2hd.model.*;
import com.rs2hd.GameEngine;
import com.rs2hd.net.Packet;

/**
 * Created by Prayer.
 * User:     Prayer
 * Date:     3-march-2009
 * Project:  DarkScape
 * Time:     19:51:15
 */
public class ShopHandler {

	public int maxItems = 40;
	public int[] pitsI = {18357, 18349, 18351, 18353, 16359, 16667, 16689, 16711, 16733, 17259, 17361, 16293, 16955, 16425, 4447, 15773};
	public int[] items = new int[maxItems];
	public int[] itemsN = new int[maxItems];
	public int[] maxItemAmount = new int[maxItems];
	public boolean generalStore = false;
	public long lastRestock = System.currentTimeMillis();
	int shopid = 0;
	public boolean mainstock = true;

    /***************************************************************************************************************/
    /*                              Shop sell and buy setting!                                                     */
    /***************************************************************************************************************/
    public ShopHandler() {
		for (int i = 0; i &lt; 40; i++) {
			items[i] = -1;
		}
		maxItemAmount = itemsN;
	}

	public void process(Player p) {
		if (System.currentTimeMillis() - lastRestock &gt;= 900) {
			clearSlots(p);
			for (int i = 0; i &lt; items.length; i++) {
				if (itemsN[i] &lt; maxItemAmount[i]) itemsN[i]++;
			}
			lastRestock = System.currentTimeMillis();
		}
	}

	public void sell(Player p, int item, int amnt){
		if(p.shopid == 23) {
			if(p.getInventory().contains(item)) {
			p.sm(&quot;you cannot sell here&quot;);
			}
			return;
		}
		boolean shopShouldBuy = generalStore || isItemOnShop(item);
		if (!shopShouldBuy) {
			p.sm(&quot;You cannot sell this item to this shop.&quot;);
			return;
		}
		if (item == 995) {
			p.sm(&quot;You can&#39;t sell coins to a shop&quot;);
			return;
		}
		int free = findFreeSlot();
		if (!isItemOnShop(item) &amp;&amp; generalStore) {
			if (free == -1) {
				p.sm(&quot;This shop is full.&quot;);
				return;
			}
			items[free] = item;
			itemsN[free] = 0;
		}
		int slot = findItemSlot(item);
		if(amnt&lt;=p.getInventory().numberOf(item))
		{
			if (itemStacks(item)) {
				items[slot] = item;
				itemsN[slot] += amnt;
				p.getInventory().deleteItem(item, amnt);
				p.getInventory().addItem(995,amnt*GameEngine.prices.getMinimumPrice(item));
			} else {
				items[slot] = item;
				for (int notused = amnt; notused &gt; 0; notused--) {
					p.getInventory().deleteItem(item, 1);
					p.getInventory().addItem(995, GameEngine.prices.getMinimumPrice(item));
					itemsN[slot]++;
				}
			}
		}
		else
		{
			amnt = p.getInventory().numberOf(item);
			if (itemStacks(item)) {
				items[slot] = item;
				itemsN[slot] += amnt;
				p.getInventory().deleteItem(item, amnt);
				p.getInventory().addItem(995, amnt*GameEngine.prices.getMinimumPrice(item));
			} else {
				items[slot] = item;
				for (int notused = amnt; notused &gt; 0; notused--) {
					p.getInventory().deleteItem(item, 1);
					p.getInventory().addItem(995, GameEngine.prices.getMinimumPrice(item));
					itemsN[slot]++;
				}
			}
		}


		sendShopItems(p);
		sendPlayerInventory(p);
	}
	public static int donateValue(Player player, int itemId) {
		switch(itemId) {
		case 15441:  //example to test
		return 4;
		case 15442:
		return 4;
		case 15443:
		return 4;
		case 15444:
		return 4;
		case 15701:
		return 4;
		case 15702:
		return 4;
		case 15703:
		return 4;
		case 15704:
		return 4;
		case 16689:
		return 4;
		case 16711:
		return 4;
		case 17259:
		return 4;
		case 17361:
		return 4;
		case 16359:
		return 2;
		case 13738:
		return 2;
		case 13744:
		return 2;
		case 13740:
		return 4;
		case 13742:
		return 4;
		}
		return -1;
	}
	public static int PkShop(Player player, int itemId) {
		switch(itemId) {
		case 11235:  //example to test
		return 125;
		case 11724:
		return 200;
		case 11694:
		return 100;
		case 4151:
		return 15;
		case 13899:
		return 50;
		case 6570:
		return 150;
		case 11283:
		return 120;
		case 11726:
		return 200;
		case 11728:
		return 100;
		case 14484:
		return 150;
		}
		return -1;
	}
	public static int DonatorShop(Player player, int itemId) {
		switch(itemId) {
		case 16709:
		return 6;
		case 17257:
		return 6;
		case 16687:
		return 6;
		case 16665:
		return 6;
		case 16357:
		return 6;
		case 15441:
		return 4;
		case 15442:
		return 4;
		case 15443:
		return 4;
		case 15444:
		return 4;
		case 10394:
		return 2;
		case 9470:
		return 2;
		case 14684:
		return 2;
		}
		return -1;
	}
	public static int VoteShop(Player player, int itemId) {
		switch(itemId) {
		case 20135:
		return 40;
		case 20139:
		return 45;
		case 20143:
		return 45;
		case 20147:
		return 35;
		case 20151:
		return 40;
		case 20155:
		return 40;
		case 20159:
		return 35;
		case 20163:
		return 40;
		case 20167:
		return 40;
		case 21371:
		return 75;
		case 15441:
		return 50;
		case 15442:
		return 50;
		case 15443:
		return 50;
		case 15444:
		return 50;
		case 14479:
		return 50;
		case 14484:
		return 75;
		case 13738:
		return 50;
		case 13740:
		return 50;
		case 13742:
		return 50;
		case 13744:
		return 50;
		case 12093:
		return 2;
		case 15088:
		return 2;
		case 15090:
		return 2;
		case 15092:
		return 2;
		case 15094:
		return 2;
		case 15096:
		return 2;
		case 15098:
		return 2;
		}
		return -1;
		}

private void buystock(Player p, int item, int amnt) {
		if(true) {
								if(p.shopid == 24) {
						if(p.DonatorPoints &gt;= donateValue(p, item)) {
							p.DonatorPoints -= donateValue(p, item);
							p.getInventory().addItem(item, 1);
						} else {
							p.getActionSender().sendMessage(&quot;You need Donator Points or more to buy this.&quot;);
						}
						return;
					}
								if(p.shopid == 29) {
						if(p.PkPoints &gt;= PkShop(p, item)) {
							p.PkPoints -= PkShop(p, item);
							p.getInventory().addItem(item, 1);
						} else {
							p.sm(&quot;Not enough pk points to buy that many.&quot;);
						}
						return;
					}
								if(p.shopid == 30) {
						if(p.votes &gt;= VoteShop(p, item)) {
							p.votes -= VoteShop(p, item);
							p.getInventory().addItem(item, 1);
						} else {
							p.sm(&quot;Not enough vote points to buy that many.&quot;);
						}
						return;
					}
								if(p.shopid == 33) {
						if(p.DonatorPoints &gt;= DonatorShop(p, item)) {
							p.DonatorPoints -= DonatorShop(p, item);
							p.getInventory().addItem(item, 1);
						} else {
							p.sm(&quot;Not enough donator points to buy that many.&quot;);
						}
						return;
					}
								if(p.shopid == 32) {
						if (p.getInventory().contains(8851, GameEngine.prices.getMinimumPrice(item))){
							p.getInventory().deleteItem(8851, GameEngine.prices.getMinimumPrice(item));
							p.getInventory().addItem(item, 1);
						} else {
							p.getActionSender().sendMessage(&quot;Not enough Dungeoneering tokens to buy that many.&quot;);
						}
						return;
					}
			if (p.getInventory().getFreeSlots() &lt; 1) {
				p.sm(&quot;Not enough space on inventory&quot;);
				return;
			}
			if (p.getInventory().numberOf(995) &lt; (amnt * GameEngine.prices.getMaximumPrice(item))) {
				p.sm(&quot;Not enough coins to buy that many.&quot;);
				return;
			}
			boolean b = p.getInventory().addItem(item, amnt);
			if (p.getInventory().getFreeSlots() &lt; 1) {
				p.sm(&quot;Not enough space on inventory&quot;);
				return;
			}
			long value = amnt * GameEngine.prices.getMaximumPrice(item);
			if (p.getInventory().numberOf(995) &lt; value) {
				p.sm(&quot;Not enough coins to buy that many.&quot;);
				return;
			}
			if(b)
				p.getInventory().deleteItem(995, (int) value);
			return;
		}
		/*clearSlots(p);
		int slot = findItemSlot(item);
		if (slot == -1) {
			return;
		}
		if (itemsN[slot] &lt; amnt) amnt = itemsN[slot];
		if (amnt == 0) {
			items[slot] = -1;
			p.sm(&quot;That item&#39;s stock has run out.&quot;);
			return;
		}
		if (itemStacks(item)) {                                                 // item stackable, easier...
			if (p.getInventory().getFreeSlots() &lt; 1) {
				p.sm(&quot;Not enough space on inventory&quot;);
				return;
			}
			if (p.getInventory().numberOf(995) &lt; (amnt * GameEngine.prices.getMaximumPrice(item))) {
				p.sm(&quot;Not enough coins to buy that many.&quot;);
				return;
			}
			p.getInventory().deleteItem(995, amnt * GameEngine.prices.getMaximumPrice(item));
			p.getInventory().addItem(item, amnt);
			itemsN[slot] -= amnt;
		} else {                                                                // item not stackable
			for (int i = amnt; i &gt; 0; i--) {
				int price = GameEngine.prices.getMaximumPrice(item);
				clearSlots(p);
				if (p.getInventory().numberOf(995) &lt; price) {
					p.sm(&quot;Not enough coins to buy that many.&quot;);
					break;
				}
				if (itemsN[slot] &lt; 1) {
					clearSlots(p);
					p.sm(&quot;The shop has run out of stock from this item!&quot;);
					break;
				}
				if(p.getInventory().hasRoomFor(items[slot], amnt)) {
					itemsN[slot]--;
					p.getInventory().deleteItem(995, price);
					p.getInventory().addItem(item, 1);
					clearSlots(p);
				} else {
					p.sm(&quot;Not enough space on inventory&quot;);
					break;
				}
			}
		}
		sendShopItems(p);
		sendPlayerInventory(p);
		clearSlots(p);*/
	}


	public int findItemSlot(int item) {
		for (int i = 0; i &lt; items.length; i++)
			if (item == items[i]) return i;
		return -1;
	}

	public int findFreeSlot() {
		for (int i = 0; i &lt; items.length; i++)
			if (items[i] == -1) return i;
		return -1;
	}

	public void clearSlots(Player p) {
		for (int i = 0; i &lt; items.length; i++)
			if (items[i] &lt; 1) {
				items[i] = -1;
			} else {
			}

	}

	public void sendShopItems(Player p) {
		p.getActionSender().sendItems( -1, 63746, 556,items, itemsN);
	}

	public boolean isItemOnShop(int item) {
		return findItemSlot(item) != -1;
	}

	public void sendPlayerInventory(Player p) {
		p.getActionSender().sendItems( -1, 64209, 93, p.getInventory().getContainer());

	}



	public boolean itemStacks(int item) {
		ItemDefinition def = ItemDefinition.forId(item);
		return def.isStackable();
	}

	public void handleoption(Player p, int interfaceId, int buttonId, int buttonId2, int packetId) {
		switch (interfaceId) {
		case 620:
			switch(buttonId) {
			case 18:
				p.getActionSender().sendCloseInterface();
				p.getActionSender().sendCloseInventoryInterface();
				break;
			default:
				int itemid = returnItemId(p.shopid, buttonId2);
				switch (packetId) {
				case 216:
					/* Value. */
					if(p.shopid == 32) {
						p.sm(&quot;This item costs &quot; + GameEngine.prices.getMinimumPrice(itemid) +  &quot; warrior guild tokens (a.k.a. Dungeoneering tokens).&quot;);
					} else if(p.shopid == 29) {
					p.sm(&quot;This item costs &quot; + GameEngine.prices.getMinimumPrice(itemid) + &quot; pk points.&quot;);
					//p.sm(&quot;Look ::pkshopprices for the prices of the item!&quot;);
					} else if(p.shopid == 30) {
					p.sm(&quot;This item costs &quot; + GameEngine.prices.getMinimumPrice(itemid) + &quot; vote points.&quot;);
					} else if(p.shopid == 33) {
					p.sm(&quot;This item costs &quot; + GameEngine.prices.getMinimumPrice(itemid) + &quot; donator points.&quot;);
					}else
					p.sm(&quot;This item costs &quot; + GameEngine.prices.getMaximumPrice(itemid) + &quot; coins.&quot;);
					break;
				case 19:
					/* Buy 1. */
					buystock(p, itemid, 1);
					break;
				case 193:
					/* Buy 5. */
					if(p.getInventory().getFreeSlots() == 5) {
					p.sm( &quot;Sorry but there is a glitch in this way please bank some items.&quot;);
					}
					if(p.shopid == 25) {
					p.sm( &quot;Sorry but there is a glitch in this way please bank some items.&quot;);
					} else {
					buystock(p, itemid, 5);
					}
					break;
				case 76:
					/* Buy 10. full inventory*/
					buystock(p, itemid, 10);
					break;
				case 173:
					/* Buy 500. fixed by apache*/
					buystock(p, itemid, 500);
					break;
				case 3:
					/*Examine. */
					ItemDefinition def = ItemDefinition.forId(itemid);
					p.sm(&quot;&quot;+def.getExamine());
					break;
				}
			}
			break;

		case 621:
			if (buttonId == 0) {
				Item def = p.getInventory().getContainer().get(buttonId2);
				int itemid = def.getId();
				switch (packetId) {
				case 216:
					/*Value.*/
					p.sm( &quot;Sorry but you cant sell!&quot;);
					break;
				case 19:
					/*
					 * Buy 1.
					 */
					p.sm( &quot;Sorry but you cant sell!&quot;);
					break;
				case 193:
					/*
					 * Buy 5.
					 */
					p.sm( &quot;Sorry but you cant sell!&quot;);
					break;
				case 76:
					/*
					 * Buy 10.
					 */

					p.sm( &quot;Sorry but you cant sell!&quot;);
					break;
				case 173:
					/*
					 * Buy 50.
					 */
					p.sm( &quot;Sorry but you cant sell!&quot;);
					break;
				case 3:
					/*
					 * Examine.
					 */
					p.sm(&quot;&quot;+def.getDefinition().getExamine());
					break;
				}
			}
			break;
		}
	}

	public void shopopen(Player p, int shopId) {
		p.getActionSender().sendConfig(199, -1);
		p.getActionSender().sendConfig2(118, 17);
		p.getActionSender().sendInterface(620, true);
		p.getActionSender().sendInventoryInterface(621);
		p.getActionSender().sendTab(146, 449);
		p.shopid = shopId;
		Object[] sellOptions = new Object[]{&quot;Sell 500&quot;, &quot;Sell 10&quot;, &quot;Sell 1&quot;, &quot;Value&quot;, -1, 1, 7, 4, 93, 40697856};
		Object[] invparams = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Sell 50&quot;, &quot;Sell 10&quot;, &quot;Sell 5&quot;, &quot;Sell 1&quot;, &quot;Value&quot;, -1, 0, 7, 4, 93, 40697856};
		//Object[] shopsampleparams = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Buy 50&quot;, &quot;Buy 10&quot;, &quot;Buy 5&quot;, &quot;Buy 1&quot;, &quot;Value&quot;, -1, 0, 4, 10, 7, 40632346};
		Object[] shopparams = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Buy 500&quot;, &quot;Buy 10&quot;, &quot;Buy 5&quot;, &quot;Buy 1&quot;, &quot;Value&quot;, -1, 0, 4, 10, 556, 40632345};
		p.getActionSender().sendRunScript(149, sellOptions, &quot;IviiiIsssss&quot;);
		p.getActionSender().sendRunScript( 150, invparams, &quot;IviiiIsssssssss&quot;);
		//player.getPackets().sendRunScript( 150, shopsampleparams, &quot;IviiiIsssssssss&quot;);
		p.getActionSender().sendRunScript( 150, shopparams, &quot;IviiiIsssssssss&quot;);
		p.getActionSender().sendAccessMask(1278, 621, 0, 0, 28);
		p.getActionSender().sendAccessMask(1278, 620, 25, 0, 40);	
		p.getActionSender().sendAccessMask(1278, 620, 26, 0, 40); 
	}[/code]



562 rs2hd</description>
    
    <lastBuildDate>Sat, 22 Oct 2011 17:11:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/gahhhh-i-cant-figure-out-why-my-shops-have-infinite-amount-of-stuff/419133.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Gahhhh I cant figure out why my shops have infinite amount of stuff!</title>
        <dc:creator><![CDATA[@modzilla modzilla]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/modzilla">@modzilla</a> wrote:</p>
          <blockquote>
              <p>Does anyone know how to make the shops lose the items when they buy like if you bought 500 blood runes the shop wud have 4500 not 5000??? heres the begining of my shop handler…</p>
<p>[code]package com.rs2hd.content;</p>
<p>import com.rs2hd.content.minigames.FightPits;<br>
import com.rs2hd.model.*;<br>
import com.rs2hd.GameEngine;<br>
import com.rs2hd.net.Packet;</p>
<p>/**</p>
<ul>
<li>
<p>Created by Prayer.</p>
</li>
<li>
<p>User:     Prayer</p>
</li>
<li>
<p>Date:     3-march-2009</p>
</li>
<li>
<p>Project:  DarkScape</p>
</li>
<li>
<p>Time:     19:51:15<br>
*/<br>
public class ShopHandler {</p>
<p>public int maxItems = 40;<br>
public int[] pitsI = {18357, 18349, 18351, 18353, 16359, 16667, 16689, 16711, 16733, 17259, 17361, 16293, 16955, 16425, 4447, 15773};<br>
public int[] items = new int[maxItems];<br>
public int[] itemsN = new int[maxItems];<br>
public int[] maxItemAmount = new int[maxItems];<br>
public boolean generalStore = false;<br>
public long lastRestock = System.currentTimeMillis();<br>
int shopid = 0;<br>
public boolean mainstock = true;</p>
<p>/**************************************************************************************************************<em>/<br>
/</em>                              Shop sell and buy setting!                                                     <em>/<br>
/</em>**************************************************************************************************************/<br>
public ShopHandler() {<br>
for (int i = 0; i &lt; 40; i++) {<br>
items[i] = -1;<br>
}<br>
maxItemAmount = itemsN;<br>
}</p>
<p>public void process(Player p) {<br>
if (System.currentTimeMillis() - lastRestock &gt;= 900) {<br>
clearSlots§;<br>
for (int i = 0; i &lt; items.length; i++) {<br>
if (itemsN[i] &lt; maxItemAmount[i]) itemsN[i]++;<br>
}<br>
lastRestock = System.currentTimeMillis();<br>
}<br>
}</p>
<p>public void sell(Player p, int item, int amnt){<br>
if(p.shopid == 23) {<br>
if(p.getInventory().contains(item)) {<br>
p.sm(“you cannot sell here”);<br>
}<br>
return;<br>
}<br>
boolean shopShouldBuy = generalStore || isItemOnShop(item);<br>
if (!shopShouldBuy) {<br>
p.sm(“You cannot sell this item to this shop.”);<br>
return;<br>
}<br>
if (item == 995) {<br>
p.sm(“You can’t sell coins to a shop”);<br>
return;<br>
}<br>
int free = findFreeSlot();<br>
if (!isItemOnShop(item) &amp;&amp; generalStore) {<br>
if (free == -1) {<br>
p.sm(“This shop is full.”);<br>
return;<br>
}<br>
items[free] = item;<br>
itemsN[free] = 0;<br>
}<br>
int slot = findItemSlot(item);<br>
if(amnt&lt;=p.getInventory().numberOf(item))<br>
{<br>
if (itemStacks(item)) {<br>
items[slot] = item;<br>
itemsN[slot] += amnt;<br>
p.getInventory().deleteItem(item, amnt);<br>
p.getInventory().addItem(995,amnt<em>GameEngine.prices.getMinimumPrice(item));<br>
} else {<br>
items[slot] = item;<br>
for (int notused = amnt; notused &gt; 0; notused–) {<br>
p.getInventory().deleteItem(item, 1);<br>
p.getInventory().addItem(995, GameEngine.prices.getMinimumPrice(item));<br>
itemsN[slot]++;<br>
}<br>
}<br>
}<br>
else<br>
{<br>
amnt = p.getInventory().numberOf(item);<br>
if (itemStacks(item)) {<br>
items[slot] = item;<br>
itemsN[slot] += amnt;<br>
p.getInventory().deleteItem(item, amnt);<br>
p.getInventory().addItem(995, amnt</em>GameEngine.prices.getMinimumPrice(item));<br>
} else {<br>
items[slot] = item;<br>
for (int notused = amnt; notused &gt; 0; notused–) {<br>
p.getInventory().deleteItem(item, 1);<br>
p.getInventory().addItem(995, GameEngine.prices.getMinimumPrice(item));<br>
itemsN[slot]++;<br>
}<br>
}<br>
}</p>
<pre><code> sendShopItems(p);
 sendPlayerInventory(p);
</code></pre>
<p>}<br>
public static int donateValue(Player player, int itemId) {<br>
switch(itemId) {<br>
case 15441:  //example to test<br>
return 4;<br>
case 15442:<br>
return 4;<br>
case 15443:<br>
return 4;<br>
case 15444:<br>
return 4;<br>
case 15701:<br>
return 4;<br>
case 15702:<br>
return 4;<br>
case 15703:<br>
return 4;<br>
case 15704:<br>
return 4;<br>
case 16689:<br>
return 4;<br>
case 16711:<br>
return 4;<br>
case 17259:<br>
return 4;<br>
case 17361:<br>
return 4;<br>
case 16359:<br>
return 2;<br>
case 13738:<br>
return 2;<br>
case 13744:<br>
return 2;<br>
case 13740:<br>
return 4;<br>
case 13742:<br>
return 4;<br>
}<br>
return -1;<br>
}<br>
public static int PkShop(Player player, int itemId) {<br>
switch(itemId) {<br>
case 11235:  //example to test<br>
return 125;<br>
case 11724:<br>
return 200;<br>
case 11694:<br>
return 100;<br>
case 4151:<br>
return 15;<br>
case 13899:<br>
return 50;<br>
case 6570:<br>
return 150;<br>
case 11283:<br>
return 120;<br>
case 11726:<br>
return 200;<br>
case 11728:<br>
return 100;<br>
case 14484:<br>
return 150;<br>
}<br>
return -1;<br>
}<br>
public static int DonatorShop(Player player, int itemId) {<br>
switch(itemId) {<br>
case 16709:<br>
return 6;<br>
case 17257:<br>
return 6;<br>
case 16687:<br>
return 6;<br>
case 16665:<br>
return 6;<br>
case 16357:<br>
return 6;<br>
case 15441:<br>
return 4;<br>
case 15442:<br>
return 4;<br>
case 15443:<br>
return 4;<br>
case 15444:<br>
return 4;<br>
case 10394:<br>
return 2;<br>
case 9470:<br>
return 2;<br>
case 14684:<br>
return 2;<br>
}<br>
return -1;<br>
}<br>
public static int VoteShop(Player player, int itemId) {<br>
switch(itemId) {<br>
case 20135:<br>
return 40;<br>
case 20139:<br>
return 45;<br>
case 20143:<br>
return 45;<br>
case 20147:<br>
return 35;<br>
case 20151:<br>
return 40;<br>
case 20155:<br>
return 40;<br>
case 20159:<br>
return 35;<br>
case 20163:<br>
return 40;<br>
case 20167:<br>
return 40;<br>
case 21371:<br>
return 75;<br>
case 15441:<br>
return 50;<br>
case 15442:<br>
return 50;<br>
case 15443:<br>
return 50;<br>
case 15444:<br>
return 50;<br>
case 14479:<br>
return 50;<br>
case 14484:<br>
return 75;<br>
case 13738:<br>
return 50;<br>
case 13740:<br>
return 50;<br>
case 13742:<br>
return 50;<br>
case 13744:<br>
return 50;<br>
case 12093:<br>
return 2;<br>
case 15088:<br>
return 2;<br>
case 15090:<br>
return 2;<br>
case 15092:<br>
return 2;<br>
case 15094:<br>
return 2;<br>
case 15096:<br>
return 2;<br>
case 15098:<br>
return 2;<br>
}<br>
return -1;<br>
}</p>
</li>
</ul>
<p>private void buystock(Player p, int item, int amnt) {<br>
if(true) {<br>
if(p.shopid == 24) {<br>
if(p.DonatorPoints &gt;= donateValue(p, item)) {<br>
p.DonatorPoints -= donateValue(p, item);<br>
p.getInventory().addItem(item, 1);<br>
} else {<br>
p.getActionSender().sendMessage(“You need Donator Points or more to buy this.”);<br>
}<br>
return;<br>
}<br>
if(p.shopid == 29) {<br>
if(p.PkPoints &gt;= PkShop(p, item)) {<br>
p.PkPoints -= PkShop(p, item);<br>
p.getInventory().addItem(item, 1);<br>
} else {<br>
p.sm(“Not enough pk points to buy that many.”);<br>
}<br>
return;<br>
}<br>
if(p.shopid == 30) {<br>
if(p.votes &gt;= VoteShop(p, item)) {<br>
p.votes -= VoteShop(p, item);<br>
p.getInventory().addItem(item, 1);<br>
} else {<br>
p.sm(“Not enough vote points to buy that many.”);<br>
}<br>
return;<br>
}<br>
if(p.shopid == 33) {<br>
if(p.DonatorPoints &gt;= DonatorShop(p, item)) {<br>
p.DonatorPoints -= DonatorShop(p, item);<br>
p.getInventory().addItem(item, 1);<br>
} else {<br>
p.sm(“Not enough donator points to buy that many.”);<br>
}<br>
return;<br>
}<br>
if(p.shopid == 32) {<br>
if (p.getInventory().contains(8851, GameEngine.prices.getMinimumPrice(item))){<br>
p.getInventory().deleteItem(8851, GameEngine.prices.getMinimumPrice(item));<br>
p.getInventory().addItem(item, 1);<br>
} else {<br>
p.getActionSender().sendMessage(“Not enough Dungeoneering tokens to buy that many.”);<br>
}<br>
return;<br>
}<br>
if (p.getInventory().getFreeSlots() &lt; 1) {<br>
p.sm(“Not enough space on inventory”);<br>
return;<br>
}<br>
if (p.getInventory().numberOf(995) &lt; (amnt * GameEngine.prices.getMaximumPrice(item))) {<br>
p.sm(“Not enough coins to buy that many.”);<br>
return;<br>
}<br>
boolean b = p.getInventory().addItem(item, amnt);<br>
if (p.getInventory().getFreeSlots() &lt; 1) {<br>
p.sm(“Not enough space on inventory”);<br>
return;<br>
}<br>
long value = amnt * GameEngine.prices.getMaximumPrice(item);<br>
if (p.getInventory().numberOf(995) &lt; value) {<br>
p.sm(“Not enough coins to buy that many.”);<br>
return;<br>
}<br>
if(b)<br>
p.getInventory().deleteItem(995, (int) value);<br>
return;<br>
}<br>
/<em>clearSlots§;<br>
int slot = findItemSlot(item);<br>
if (slot == -1) {<br>
return;<br>
}<br>
if (itemsN[slot] &lt; amnt) amnt = itemsN[slot];<br>
if (amnt == 0) {<br>
items[slot] = -1;<br>
p.sm(“That item’s stock has run out.”);<br>
return;<br>
}<br>
if (itemStacks(item)) {                                                 // item stackable, easier…<br>
if (p.getInventory().getFreeSlots() &lt; 1) {<br>
p.sm(“Not enough space on inventory”);<br>
return;<br>
}<br>
if (p.getInventory().numberOf(995) &lt; (amnt * GameEngine.prices.getMaximumPrice(item))) {<br>
p.sm(“Not enough coins to buy that many.”);<br>
return;<br>
}<br>
p.getInventory().deleteItem(995, amnt * GameEngine.prices.getMaximumPrice(item));<br>
p.getInventory().addItem(item, amnt);<br>
itemsN[slot] -= amnt;<br>
} else {                                                                // item not stackable<br>
for (int i = amnt; i &gt; 0; i–) {<br>
int price = GameEngine.prices.getMaximumPrice(item);<br>
clearSlots§;<br>
if (p.getInventory().numberOf(995) &lt; price) {<br>
p.sm(“Not enough coins to buy that many.”);<br>
break;<br>
}<br>
if (itemsN[slot] &lt; 1) {<br>
clearSlots§;<br>
p.sm(“The shop has run out of stock from this item!”);<br>
break;<br>
}<br>
if(p.getInventory().hasRoomFor(items[slot], amnt)) {<br>
itemsN[slot]–;<br>
p.getInventory().deleteItem(995, price);<br>
p.getInventory().addItem(item, 1);<br>
clearSlots§;<br>
} else {<br>
p.sm(“Not enough space on inventory”);<br>
break;<br>
}<br>
}<br>
}<br>
sendShopItems§;<br>
sendPlayerInventory§;<br>
clearSlots§;</em>/<br>
}</p>
<pre><code>public int findItemSlot(int item) {
	for (int i = 0; i &lt; items.length; i++)
		if (item == items[i]) return i;
	return -1;
}

public int findFreeSlot() {
	for (int i = 0; i &lt; items.length; i++)
		if (items[i] == -1) return i;
	return -1;
}

public void clearSlots(Player p) {
	for (int i = 0; i &lt; items.length; i++)
		if (items[i] &lt; 1) {
			items[i] = -1;
		} else {
		}

}

public void sendShopItems(Player p) {
	p.getActionSender().sendItems( -1, 63746, 556,items, itemsN);
}

public boolean isItemOnShop(int item) {
	return findItemSlot(item) != -1;
}

public void sendPlayerInventory(Player p) {
	p.getActionSender().sendItems( -1, 64209, 93, p.getInventory().getContainer());

}



public boolean itemStacks(int item) {
	ItemDefinition def = ItemDefinition.forId(item);
	return def.isStackable();
}

public void handleoption(Player p, int interfaceId, int buttonId, int buttonId2, int packetId) {
	switch (interfaceId) {
	case 620:
		switch(buttonId) {
		case 18:
			p.getActionSender().sendCloseInterface();
			p.getActionSender().sendCloseInventoryInterface();
			break;
		default:
			int itemid = returnItemId(p.shopid, buttonId2);
			switch (packetId) {
			case 216:
				/* Value. */
				if(p.shopid == 32) {
					p.sm("This item costs " + GameEngine.prices.getMinimumPrice(itemid) +  " warrior guild tokens (a.k.a. Dungeoneering tokens).");
				} else if(p.shopid == 29) {
				p.sm("This item costs " + GameEngine.prices.getMinimumPrice(itemid) + " pk points.");
				//p.sm("Look ::pkshopprices for the prices of the item!");
				} else if(p.shopid == 30) {
				p.sm("This item costs " + GameEngine.prices.getMinimumPrice(itemid) + " vote points.");
				} else if(p.shopid == 33) {
				p.sm("This item costs " + GameEngine.prices.getMinimumPrice(itemid) + " donator points.");
				}else
				p.sm("This item costs " + GameEngine.prices.getMaximumPrice(itemid) + " coins.");
				break;
			case 19:
				/* Buy 1. */
				buystock(p, itemid, 1);
				break;
			case 193:
				/* Buy 5. */
				if(p.getInventory().getFreeSlots() == 5) {
				p.sm( "Sorry but there is a glitch in this way please bank some items.");
				}
				if(p.shopid == 25) {
				p.sm( "Sorry but there is a glitch in this way please bank some items.");
				} else {
				buystock(p, itemid, 5);
				}
				break;
			case 76:
				/* Buy 10. full inventory*/
				buystock(p, itemid, 10);
				break;
			case 173:
				/* Buy 500. fixed by apache*/
				buystock(p, itemid, 500);
				break;
			case 3:
				/*Examine. */
				ItemDefinition def = ItemDefinition.forId(itemid);
				p.sm(""+def.getExamine());
				break;
			}
		}
		break;

	case 621:
		if (buttonId == 0) {
			Item def = p.getInventory().getContainer().get(buttonId2);
			int itemid = def.getId();
			switch (packetId) {
			case 216:
				/*Value.*/
				p.sm( "Sorry but you cant sell!");
				break;
			case 19:
				/*
				 * Buy 1.
				 */
				p.sm( "Sorry but you cant sell!");
				break;
			case 193:
				/*
				 * Buy 5.
				 */
				p.sm( "Sorry but you cant sell!");
				break;
			case 76:
				/*
				 * Buy 10.
				 */

				p.sm( "Sorry but you cant sell!");
				break;
			case 173:
				/*
				 * Buy 50.
				 */
				p.sm( "Sorry but you cant sell!");
				break;
			case 3:
				/*
				 * Examine.
				 */
				p.sm(""+def.getDefinition().getExamine());
				break;
			}
		}
		break;
	}
}

public void shopopen(Player p, int shopId) {
	p.getActionSender().sendConfig(199, -1);
	p.getActionSender().sendConfig2(118, 17);
	p.getActionSender().sendInterface(620, true);
	p.getActionSender().sendInventoryInterface(621);
	p.getActionSender().sendTab(146, 449);
	p.shopid = shopId;
	Object[] sellOptions = new Object[]{"Sell 500", "Sell 10", "Sell 1", "Value", -1, 1, 7, 4, 93, 40697856};
	Object[] invparams = new Object[]{"", "", "", "", "Sell 50", "Sell 10", "Sell 5", "Sell 1", "Value", -1, 0, 7, 4, 93, 40697856};
	//Object[] shopsampleparams = new Object[]{"", "", "", "", "Buy 50", "Buy 10", "Buy 5", "Buy 1", "Value", -1, 0, 4, 10, 7, 40632346};
	Object[] shopparams = new Object[]{"", "", "", "", "Buy 500", "Buy 10", "Buy 5", "Buy 1", "Value", -1, 0, 4, 10, 556, 40632345};
	p.getActionSender().sendRunScript(149, sellOptions, "IviiiIsssss");
	p.getActionSender().sendRunScript( 150, invparams, "IviiiIsssssssss");
	//player.getPackets().sendRunScript( 150, shopsampleparams, "IviiiIsssssssss");
	p.getActionSender().sendRunScript( 150, shopparams, "IviiiIsssssssss");
	p.getActionSender().sendAccessMask(1278, 621, 0, 0, 28);
	p.getActionSender().sendAccessMask(1278, 620, 25, 0, 40);	
	p.getActionSender().sendAccessMask(1278, 620, 26, 0, 40); 
}[/code]
</code></pre>
<p>562 rs2hd</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/gahhhh-i-cant-figure-out-why-my-shops-have-infinite-amount-of-stuff/419133/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/gahhhh-i-cant-figure-out-why-my-shops-have-infinite-amount-of-stuff/419133/1</link>
        <pubDate>Sat, 22 Oct 2011 17:11:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-419133-1</guid>
        <source url="https://forum.moparisthebest.com/t/gahhhh-i-cant-figure-out-why-my-shops-have-infinite-amount-of-stuff/419133.rss">Gahhhh I cant figure out why my shops have infinite amount of stuff!</source>
      </item>
  </channel>
</rss>
