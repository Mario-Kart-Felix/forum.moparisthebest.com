<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>#519 Output needed</title>
    <link>https://forum.moparisthebest.com/t/519-output-needed/238346</link>
    <description>Does anyone have a #519 output for me?
Thanks :)</description>
    
    <lastBuildDate>Wed, 22 Oct 2008 23:52:05 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/519-output-needed/238346.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>#519 Output needed</title>
        <dc:creator><![CDATA[@ZyztemX ZyztemX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyztemx">@ZyztemX</a> wrote:</p>
          <blockquote>
              <p>Thank you very much <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/519-output-needed/238346/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/519-output-needed/238346/3</link>
        <pubDate>Wed, 22 Oct 2008 23:52:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-238346-3</guid>
        <source url="https://forum.moparisthebest.com/t/519-output-needed/238346.rss">#519 Output needed</source>
      </item>
      <item>
        <title>#519 Output needed</title>
        <dc:creator><![CDATA[@Metho_D Method]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/metho_d">@Metho_D</a> wrote:</p>
          <blockquote>
              <p>Here’s my output:</p>
<h2>[code]Downloading and extracting runescape.jar…done.</h2>
<p>Runescape Build <span class="hashtag">#519</span></p>
<p>[ RSString ]<br>
^ sg implements interface RSString</p>
<ul>
<li>getLength() --&gt; int sg.j</li>
<li>isEditable() --&gt; boolean sg.m</li>
<li>getBytes() --&gt; byte[] sg.ab</li>
<li>getHash() --&gt; int sg.ib</li>
</ul>
<p>[ NPC ]</p>
<ul>
<li>getNPCIndexArray() --&gt; int[] qc.a</li>
<li>getNPCArray() --&gt; rc[] di.c<br>
^ rc implements interface NPC</li>
<li>getNPCDef() --&gt; sh rc.Vb</li>
<li>getNPCCount() --&gt; int ve.f</li>
</ul>
<p>[ NPCDef ]<br>
^ sh implements interface NPCDef</p>
<ul>
<li>getNPCName() --&gt; sg sh.i</li>
<li>getNPCActions() --&gt; sg[] sh.q</li>
<li>getNPCType() --&gt; int sh.Y</li>
</ul>
<p>[ Player ]</p>
<ul>
<li>getPlayerIndexArray() --&gt; int[] tb.T</li>
<li>getPlayerArray() --&gt; va[] he.f<br>
^ va implements interface Player</li>
<li>getPlayerCount() --&gt; int hb.E</li>
</ul>
<p>[ PlayerDef ]<br>
^ fi implements interface Model</p>
<ul>
<li>getModel() --&gt; fi va.Sb<br>
^ ni implements interface Animable</li>
<li>getPlayerName() --&gt; sg va.cc<br>
^ aa implements interface Stream</li>
<li>getCurrentOffset() --&gt; int aa.kb</li>
<li>getPkHeadIcon() --&gt; short va.Ac</li>
<li>getPrayerHeadIcon() --&gt; short va.bc</li>
<li>getTeam() --&gt; short va.bc</li>
<li>getLevel() --&gt; int va.Ub</li>
</ul>
<p>[ Position ]</p>
<ul>
<li>getMyPlayer() --&gt; va ed.c</li>
<li>getLocationY() --&gt; int[] wd.F</li>
<li>getBaseX() --&gt; int na.x</li>
<li>getLocationX() --&gt; int[] wd.cb</li>
<li>getBaseY() --&gt; int ck.v</li>
</ul>
<p>[ Character ]<br>
^ wd implements interface Character</p>
<ul>
<li>getMessage() --&gt; sg wd.N</li>
<li>getAnimation() --&gt; int wd.U</li>
<li>getMotion() --&gt; int wd.sb</li>
<li>getX() --&gt; int wd.Q</li>
<li>getY() --&gt; int wd.s</li>
</ul>
<p>[ Entity ]</p>
<ul>
<li>getPublicChatMode() --&gt; int fe.M</li>
<li>getHPRatio() --&gt; int wd.hb</li>
<li>getLoopCycleStatus() --&gt; int wd.u</li>
<li>getLoopCycle() --&gt; int ki.q</li>
<li>getHeight() --&gt; int wd.Jb</li>
</ul>
<p>[ InteractingEntity ]</p>
<ul>
<li>getInteracting() --&gt; int wd.ob</li>
<li>getSelfInteracting() --&gt; int jc.T</li>
<li>getTurnDirection() --&gt; int wd.t</li>
</ul>
<p>[ GroundArrays ]</p>
<ul>
<li>getGroundIntArray() --&gt; int[][][] wg.d</li>
<li>getGroundByteArray() --&gt; byte[][][] al.g</li>
</ul>
<p>[ Camera ]</p>
<ul>
<li>getPlane() --&gt; int vc.ob</li>
<li>getCamPosX() --&gt; int dd.b</li>
<li>getCamPosY() --&gt; int tj.d</li>
<li>getCamPosZ() --&gt; int wa.bb</li>
</ul>
<p>[ CameraCurves ]</p>
<ul>
<li>getCameraCurveY() --&gt; int dj.cb</li>
<li>getCameraCurveX() --&gt; int jj.P</li>
</ul>
<p>[ Interface ]<br>
^ dl implements interface Interface</p>
<ul>
<li>getCache() --&gt; dl[] dl.Vb</li>
<li>getValueIndexArray() --&gt; int[][] dl.id</li>
<li>getInterfaceSelectedModelType() --&gt; int dl.Wb</li>
<li>getInterfaceSelectedModelID() --&gt; int dl.Zc</li>
<li>getNotInterfaceSelectedModelType() --&gt; int dl.dd</li>
<li>getNotInterfaceSelectedModelID() --&gt; int dl.Eb</li>
<li>getType() --&gt; int dl.w</li>
<li>getActionType() --&gt; int dl.m</li>
<li>getWidth() --&gt; int dl.mc</li>
<li>getHeight() --&gt; int dl.B</li>
<li>getActions() --&gt; sg[] dl.U</li>
<li>isInventoryInterface() --&gt; boolean dl.Z</li>
<li>getText() --&gt; sg dl.kd</li>
<li>getTextColor() --&gt; int dl.sb</li>
<li>getBackgroundColour() --&gt; int dl.T</li>
<li>getInvSpritePadX() --&gt; int dl.Tc</li>
<li>getInvSpritePadY() --&gt; int dl.Ic</li>
<li>getSelectedActionName() --&gt; sg dl.Cc</li>
<li>getSpellName() --&gt; sg dl.dc</li>
<li>getToolTip() --&gt; sg dl.Q</li>
<li>getInventory() --&gt; int[] dl.rd</li>
<li>getInventoryStackSizes() --&gt; int[] dl.xb</li>
</ul>
<p>[ InterfaceXY ]</p>
<ul>
<li>getInterfaceX() --&gt; int dl.sc</li>
<li>getInterfaceY() --&gt; int dl.G</li>
</ul>
<p>[ Signlink ]</p>
<ul>
<li>getGameApplet() --&gt; java.applet.Applet bi.g</li>
<li>getEventQueue() --&gt; java.awt.EventQueue bi.i</li>
<li>getCurrentPassword() --&gt; sg cd.Q</li>
<li>getCurrentUsername() --&gt; sg cd.E</li>
</ul>
<p>[ Client ]<br>
^ client implements interface Client</p>
<ul>
<li>getInterfaceCache() --&gt; dl[][] vf.w</li>
<li>getKeyboard() --&gt; gd pe.w</li>
<li>getMouse() --&gt; nd uk.Z</li>
<li>getIdleTime() --&gt; int qd.p</li>
</ul>
<p>[ ValidInterfaceArray ]</p>
<ul>
<li>getValidInterfaceArray() --&gt; boolean[] qb.U</li>
</ul>
<p>[ Mouse ]</p>
<ul>
<li>getMouseX() --&gt; int rg.c</li>
<li>getMouseY() --&gt; int ve.b</li>
<li>getMousePressX() --&gt; int sg.V</li>
<li>getMousePressY() --&gt; int nb.b</li>
<li>getMousePressButton() --&gt; int hb.t</li>
<li>getMousePressLastButton() --&gt; int le.z</li>
<li>getMousePressTime() --&gt; long g.m</li>
</ul>
<p>[ LoginIndex ]</p>
<ul>
<li>getLoginIndex() --&gt; int kk.v</li>
</ul>
<p>[ SettingArray ]</p>
<ul>
<li>getSettingArray() --&gt; int[] rd.d</li>
</ul>
<p>[ Item ]<br>
^ pd implements interface Item</p>
<ul>
<li>getItemID() --&gt; int pd.v</li>
<li>getItemStackSize() --&gt; int pd.w</li>
</ul>
<p>[ WorldController ]</p>
<ul>
<li>getGroundArray() --&gt; ne[][][] ua.rb<br>
^ ne implements interface Ground<br>
^ fg implements interface ObjectDefinition</li>
<li>getUID4() --&gt; long fg.j<br>
^ w implements interface ObjectDefinition</li>
<li>getUID1() --&gt; long w.q<br>
^ rk implements interface ObjectDefinition</li>
<li>getUID2() --&gt; long rk.o<br>
^ qd implements interface ObjectDefinition</li>
<li>getUID5() --&gt; long qd.t<br>
^ sk implements interface ObjectDefinition</li>
<li>getUID3() --&gt; long sk.c</li>
<li>getObject4() --&gt; fg ne.F</li>
<li>getObject1() --&gt; w ne.R</li>
<li>getObject2() --&gt; rk ne.W</li>
<li>getObject5Array() --&gt; qd[] ne.Z</li>
<li>getObject3() --&gt; sk ne.ab</li>
</ul>
<p>[ SkillExperiencesMax ]</p>
<ul>
<li>getSkillExperiencesMax() --&gt; int[] b.f</li>
</ul>
<p>[ Skills ]</p>
<ul>
<li>getSkillLevelMaxes() --&gt; int[] ge.a</li>
<li>getSkillLevels() --&gt; int[] rk.r</li>
<li>getSkillExperiences() --&gt; int[] kc.p</li>
</ul>
<p>[ Minimap ]</p>
<ul>
<li>getMinimapInt3() --&gt; int de.s</li>
<li>getCurveCos() --&gt; int[] tf.d</li>
<li>getCurveSin() --&gt; int[] tf.g</li>
<li>getMinimapInt2() --&gt; int kj.d</li>
<li>getMinimapInt1() --&gt; int vd.b</li>
</ul>
<p>[ Node ]<br>
^ pe implements interface NodeSub<br>
^ cb implements interface Node</p>
<ul>
<li>getPrevious() --&gt; cb cb.a</li>
<li>getID() --&gt; long cb.e</li>
<li>getNext() --&gt; cb cb.h</li>
</ul>
<p>[ NodeList ]</p>
<ul>
<li>getNodeListArray() --&gt; b[][][] ai.b<br>
^ b implements interface NodeList</li>
<li>getHead() --&gt; cb b.n</li>
<li>getCurrent() --&gt; cb b.r</li>
</ul>
<p>[ CachedItem ]<br>
^ bc implements interface CachedItem</p>
<ul>
<li>getItem() --&gt; pd bc.L</li>
</ul>
<p>[ Chat ]</p>
<ul>
<li>getChatMessages() --&gt; sg[] pa.fb</li>
<li>getChatTypes() --&gt; int[] ud.h</li>
<li>getChatNames() --&gt; sg[] vj.f</li>
</ul>
<p>[ Menu ]</p>
<ul>
<li>getMenuOptionsCount() --&gt; int ja.W</li>
<li>isMenuOpen() --&gt; boolean nh.a</li>
<li>getMenuX() --&gt; int og.s</li>
<li>getMenuY() --&gt; int tk.q</li>
</ul>
<p>[ MenuRSString ]</p>
<ul>
<li>getMenuOptions() --&gt; sg[] b.c</li>
<li>getMenuActions() --&gt; sg[] ea.mb</li>
</ul>
<p>[ ActionConstants ]</p>
<ul>
<li>getActionID() --&gt; short[] sg.J</li>
<li>getActionCmd1() --&gt; long[] vb.f</li>
<li>getActionCmd2() --&gt; int[] re.k</li>
<li>getActionCmd3() --&gt; int[] bc.H</li>
</ul>
<p>[ Flagged ]</p>
<ul>
<li>getSignlink() --&gt; bi gh.a</li>
<li>isFlagged() --&gt; boolean qd.v</li>
</ul>
<p>[ DrawMinimap ]<br>
^ pj implements interface Sprite</p>
<ul>
<li>getMinimapSprite() --&gt; bj jh.g</li>
<li>getMapDots() --&gt; bj[] oh.u</li>
<li>getFriendNodeIDs() --&gt; int[] sb.S</li>
<li>getFriendCount() --&gt; int d.l</li>
<li>getDestY() --&gt; int hh.Qb</li>
<li>getDestX() --&gt; int qj.g</li>
<li>getMapMarkers() --&gt; bj[] vd.g</li>
</ul>
<p>[ Sprite ]</p>
<ul>
<li>getPixels() --&gt; int[] pj.K</li>
<li>getWidth() --&gt; int bj.Y</li>
<li>getHeight() --&gt; int bj.S</li>
</ul>
<p>[ CanReach ]</p>
<ul>
<li>getCost() --&gt; int[][] ab.p</li>
<li>getVia() --&gt; int[][] sf.Z<br>
^ ue implements interface GroundData</li>
<li>getGroundDataArray() --&gt; ue[] ld.T</li>
<li>getBlocks() --&gt; int[][] ue.x</li>
</ul>
<hr>
<p>Hooked 147 / 147 fields.<br>
Defined 23 / 23 classes.<br>
278 classes loaded.<br>
-----------------------------------[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/519-output-needed/238346/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/519-output-needed/238346/2</link>
        <pubDate>Wed, 22 Oct 2008 22:50:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-238346-2</guid>
        <source url="https://forum.moparisthebest.com/t/519-output-needed/238346.rss">#519 Output needed</source>
      </item>
      <item>
        <title>#519 Output needed</title>
        <dc:creator><![CDATA[@ZyztemX ZyztemX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyztemx">@ZyztemX</a> wrote:</p>
          <blockquote>
              <p>Does anyone have a <span class="hashtag">#519</span> output for me?<br>
Thanks <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/519-output-needed/238346/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/519-output-needed/238346/1</link>
        <pubDate>Wed, 22 Oct 2008 21:38:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-238346-1</guid>
        <source url="https://forum.moparisthebest.com/t/519-output-needed/238346.rss">#519 Output needed</source>
      </item>
  </channel>
</rss>
