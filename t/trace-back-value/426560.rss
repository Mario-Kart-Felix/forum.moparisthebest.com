<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Trace back value</title>
    <link>https://forum.moparisthebest.com/t/trace-back-value/426560</link>
    <description>I am using the BCEL API to create a deob cleaner and was wondering if anyone knew the best possible way to trace back to find a value that was pushed onto the stack for a current operation:

[code]
      39: sipush        255
      42: aload_0       
      43: getfield      #91                 // Field aByteArray1260:[B
      46: aload_0       
      47: getfield      #93                 // Field anInt1258:I
      50: iconst_m1     
      51: iadd          
      52: baload
      [b]53: iand[/b] &lt;- Current operation.
[/code]

I want to trace to stack back to the SIPUSH 255 instruction so that I can then fix it to be:

[code]
      42: aload_0       
      43: getfield      #91                 // Field aByteArray1260:[B
      46: aload_0       
      47: getfield      #93                 // Field anInt1258:I
      50: iconst_m1     
      51: iadd          
      52: baload    
      /: sipush        255/    
      53: iand  
[/code]</description>
    
    <lastBuildDate>Sat, 24 Dec 2011 05:37:52 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/trace-back-value/426560.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Trace back value</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>From experience, eliminating the stack and introducing temporary stack variables makes dealing with stack-based optimization easier (eliminating dups and swaps). From there you can just simplify and reduce the expression tree until it’s down to something like this:</p>
<pre><code class="lang-auto"></code></pre>
<p>About referencing arguments, they’re stored as local variables so you’d need to push them on the stack with a load instruction taking an appropriate index.<br>
<a href="http://java.sun.com/docs/books/jvms/second_edition/html/Overview.doc.html#15722" class="onebox" target="_blank" rel="nofollow noopener">http://java.sun.com/docs/books/jvms/second_edition/html/Overview.doc.html#15722</a></p>
<blockquote>The Java virtual machine uses local variables to pass parameters on method invocation. On class method invocation any parameters are passed in consecutive local variables starting from local variable 0. On instance method invocation, local variable 0 is always used to pass a reference to the object on which the instance method is being invoked (this in the Java programming language). Any parameters are subsequently passed in consecutive local variables starting from local variable 1.</blockquote>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trace-back-value/426560/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trace-back-value/426560/4</link>
        <pubDate>Sat, 24 Dec 2011 05:37:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426560-4</guid>
        <source url="https://forum.moparisthebest.com/t/trace-back-value/426560.rss">Trace back value</source>
      </item>
      <item>
        <title>Trace back value</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:2, topic:426560”]semaphore wrote something that would be useful for this purpose but I think he posted it in the CM board.<br>
Basically, you can backtrack by analyzing the stack height…</p>
<p><a href="http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#consumeStack(org.apache.bcel.generic.ConstantPoolGen)" class="onebox" target="_blank" rel="nofollow noopener">http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#consumeStack(org.apache.bcel.generic.ConstantPoolGen)</a><br>
<a href="http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#produceStack(org.apache.bcel.generic.ConstantPoolGen)" class="onebox" target="_blank" rel="nofollow noopener">http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#produceStack(org.apache.bcel.generic.ConstantPoolGen)</a></p>
<p>To some degree this can be seen as a limited form of data-flow analysis.</p>
<p>In this particular case:</p>
<pre><code class="lang-auto">/* given:
      ConstantPoolGen pool;
      InstructionHandle iand;
 */
InstructionHandle cursor = iand;
int height = -cursor.consumeStack(pool);
while (height != 0) {
    cursor = cursor.getPrev();
    Instruction instr = cursor.getInstruction();

    /* update the relative stack height */
    height += instr.produceStack(pool);
    height -= instr.consumeStack(pool);
}
InstructionHandle sipush = cursor;

/* height || instruction
    -0 +1 || sipush        255
    -0 +1 || aload_0       
    -1 +1 || getfield      #91                 // Field aByteArray1260:[B
    -0 +1 || aload_0       
    -1 +1 || getfield      #93                 // Field anInt1258:I
    -0 +1 || iconst_m1     
    -2 +1 || iadd          
    -2 +1 || baload
    -2 +1 || iand
 */</code></pre>
<p>To be frank, however, what you really should be looking into is building a primitive expression tree. You can deal with a higher-level abstraction than raw individual instructions.[/quote]</p>
<p>I was thinking the same thing. For the most part I am just practicing analyzing the stack,</p>
<pre><code class="lang-auto">AND {
	ADD {
		LDC
		MUL {
			ADD {
				LDC
				MUL {
					MUL {
						LOAD 3
						LOAD 3
					}
					SIPUSH
				}
			}
			LOAD 3
		}
	}
	LDC
}	</code></pre>
<pre><code class="lang-auto">      23: ldc           #64                 // int 2147483647
      25: iload_3       
      26: sipush        15731
      29: iload_3       
      30: iload_3       
      31: imul          
      32: imul          
      33: ldc           #65                 // int 789221
      35: iadd          
      36: imul          
      37: ldc           #66                 // int 1376312589
      39: iadd         
      40: iand      </code></pre>
<p>And from what you just said I can see where you are coming from.</p>
<p>How are the local parameters for a method referenced in the stack? Just wondering.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trace-back-value/426560/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trace-back-value/426560/3</link>
        <pubDate>Sat, 24 Dec 2011 05:18:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426560-3</guid>
        <source url="https://forum.moparisthebest.com/t/trace-back-value/426560.rss">Trace back value</source>
      </item>
      <item>
        <title>Trace back value</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>semaphore wrote something that would be useful for this purpose but I think he posted it in the CM board.<br>
Basically, you can backtrack by analyzing the stack height…</p>
<p><a href="http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#consumeStack(org.apache.bcel.generic.ConstantPoolGen)" class="onebox" target="_blank" rel="nofollow noopener">http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#consumeStack(org.apache.bcel.generic.ConstantPoolGen)</a><br>
<a href="http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#produceStack(org.apache.bcel.generic.ConstantPoolGen)" class="onebox" target="_blank" rel="nofollow noopener">http://commons.apache.org/bcel/apidocs/org/apache/bcel/generic/Instruction.html#produceStack(org.apache.bcel.generic.ConstantPoolGen)</a></p>
<p>To some degree this can be seen as a limited form of data-flow analysis.</p>
<p>In this particular case:</p>
<pre><code class="lang-auto">/* given:
      ConstantPoolGen pool;
      InstructionHandle iand;
 */
InstructionHandle cursor = iand;
int height = -cursor.consumeStack(pool);
while (height != 0) {
    cursor = cursor.getPrev();
    Instruction instr = cursor.getInstruction();

    /* update the relative stack height */
    height += instr.produceStack(pool);
    height -= instr.consumeStack(pool);
}
InstructionHandle sipush = cursor;

/* height || instruction
    -0 +1 || sipush        255
    -0 +1 || aload_0       
    -1 +1 || getfield      #91                 // Field aByteArray1260:[B
    -0 +1 || aload_0       
    -1 +1 || getfield      #93                 // Field anInt1258:I
    -0 +1 || iconst_m1     
    -2 +1 || iadd          
    -2 +1 || baload
    -2 +1 || iand
 */</code></pre>
<p>To be frank, however, what you really should be looking into is building a primitive expression tree. You can deal with a higher-level abstraction than raw individual instructions.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trace-back-value/426560/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trace-back-value/426560/2</link>
        <pubDate>Sat, 24 Dec 2011 04:02:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426560-2</guid>
        <source url="https://forum.moparisthebest.com/t/trace-back-value/426560.rss">Trace back value</source>
      </item>
      <item>
        <title>Trace back value</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>I am using the BCEL API to create a deob cleaner and was wondering if anyone knew the best possible way to trace back to find a value that was pushed onto the stack for a current operation:</p>
<pre><code class="lang-auto">      39: sipush        255
      42: aload_0       
      43: getfield      #91                 // Field aByteArray1260:[B
      46: aload_0       
      47: getfield      #93                 // Field anInt1258:I
      50: iconst_m1     
      51: iadd          
      52: baload
      [b]53: iand[/b] &lt;- Current operation.</code></pre>
<p>I want to trace to stack back to the SIPUSH 255 instruction so that I can then fix it to be:</p>
<pre><code class="lang-auto">      42: aload_0       
      43: getfield      #91                 // Field aByteArray1260:[B
      46: aload_0       
      47: getfield      #93                 // Field anInt1258:I
      50: iconst_m1     
      51: iadd          
      52: baload    
      /: sipush        255/    
      53: iand  </code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trace-back-value/426560/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trace-back-value/426560/1</link>
        <pubDate>Sat, 24 Dec 2011 02:42:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426560-1</guid>
        <source url="https://forum.moparisthebest.com/t/trace-back-value/426560.rss">Trace back value</source>
      </item>
  </channel>
</rss>
