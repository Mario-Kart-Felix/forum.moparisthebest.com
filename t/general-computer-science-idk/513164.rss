<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>General computer science? idk</title>
    <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164</link>
    <description>How are instruction sets, operating systems, languages, libraries, and applications [b]designed and implemented[/b]?</description>
    
    <lastBuildDate>Tue, 02 Apr 2013 13:48:04 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>General computer science? idk</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>[quote=“Fat Cookies, post:4, topic:513164”][quote author=Arcik link=topic=631411.msg4274572#msg4274572 date=1364838134]<br>
How are instruction sets, operating systems, languages, libraries, and applications <span class="bbcode-b">designed and implemented</span>?</p>
<p>[/quote]</p>
<p>Firstly you need to see the hardware you have ie what kind of processor you have. There are two main types of processor: Reduced Instruction Set Computer (RISC) and a Complex Instruction Set Computer (CISC). The names kind of speak for themselves, a RISC processor (ARM etc) has an instruction set with very few instructions with the intention of executing more complex functions as a sequence of smaller instructions. CISC (x86 etc) has a lot more instructions than a RISC, carrying out much more complex functions.</p>
<p>How would you design and implement an instruction set. Firstly you just need to decide on what you want your processor doing at a hardware level. You’ll obviously want all the logic gates as instructions (AND, OR, NOT, XOR) and maybe some arithmetic operations like (ADD, SUB, MUL, DIV). Jumping to different addresses in different ways is an important instruction to have as well as the ability to manipulating the values of the registers. Those are just some basic instructions. Each instruction has an opcode and some will have an operand. You simply have to decide which bits represent which instruction. eg:<br>
AND 01001011 XXXX YYYYY (Where X is one register, Y is another)<br>
NOP 00000100<br>
There’s obviously a lot more to it, but that’s a brief intro.</p>
<p>To implement this… A long time ago (in a galaxy far far away) instruction sets where essentially hardwired in the processor, combinational and sequential logic circuits would convert the instructions into actual signals. These days you write “microcode” which are instructions at an even lower level than assembly which essentially describes what the processor must do when each instruction is called.</p>
<p>With operating systems the first thing you are going to write is the kernel. The kernel does the really low end stuff such as managing memory, processor time and communicating with the actual hardware. You want the kernel to load device drivers which means you can add, remove and change devices easily. In most cases it is easiest to write this business in assembly and C. On top of a kernel you need to write an Application Layer Interface (API) between the kernel and the front end of the operating system. Just look at all the system calls UNIX and Windows NT defines. You design it around what you want application authors to be able to do: you don’t want to give them too much access to low level hardware so they could corrupt data, but you don’t want to give them no access to anything or nothing will be written.</p>
<p>Libraries are just built on top of the kernel and applications are built on top of libraries. At each layer you just have to decide what does the next layer need to do, what implementation details do I need to hide.</p>
<p>Computer languages are rather on another subject line and I’ve written enough.</p>
<p>Excuse the rambling there, just google anything I’ve mentioned that you don’t understand.[/quote]</p>
<p>Thank you</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164/5</link>
        <pubDate>Tue, 02 Apr 2013 13:48:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513164-5</guid>
        <source url="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss">General computer science? idk</source>
      </item>
      <item>
        <title>General computer science? idk</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="1" data-topic="513164">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/arcik/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Arcik:</div>
<blockquote>
<p>How are instruction sets, operating systems, languages, libraries, and applications <span class="bbcode-b">designed and implemented</span>?</p>
</blockquote>
</aside>
<p>Firstly you need to see the hardware you have ie what kind of processor you have. There are two main types of processor: Reduced Instruction Set Computer (RISC) and a Complex Instruction Set Computer (CISC). The names kind of speak for themselves, a RISC processor (ARM etc) has an instruction set with very few instructions with the intention of executing more complex functions as a sequence of smaller instructions. CISC (x86 etc) has a lot more instructions than a RISC, carrying out much more complex functions.</p>
<p>How would you design and implement an instruction set. Firstly you just need to decide on what you want your processor doing at a hardware level. You’ll obviously want all the logic gates as instructions (AND, OR, NOT, XOR) and maybe some arithmetic operations like (ADD, SUB, MUL, DIV). Jumping to different addresses in different ways is an important instruction to have as well as the ability to manipulating the values of the registers. Those are just some basic instructions. Each instruction has an opcode and some will have an operand. You simply have to decide which bits represent which instruction. eg:<br>
AND 01001011 XXXX YYYYY (Where X is one register, Y is another)<br>
NOP 00000100<br>
There’s obviously a lot more to it, but that’s a brief intro.</p>
<p>To implement this… A long time ago (in a galaxy far far away) instruction sets where essentially hardwired in the processor, combinational and sequential logic circuits would convert the instructions into actual signals. These days you write “microcode” which are instructions at an even lower level than assembly which essentially describes what the processor must do when each instruction is called.</p>
<p>With operating systems the first thing you are going to write is the kernel. The kernel does the really low end stuff such as managing memory, processor time and communicating with the actual hardware. You want the kernel to load device drivers which means you can add, remove and change devices easily. In most cases it is easiest to write this business in assembly and C. On top of a kernel you need to write an Application Layer Interface (API) between the kernel and the front end of the operating system. Just look at all the system calls UNIX and Windows NT defines. You design it around what you want application authors to be able to do: you don’t want to give them too much access to low level hardware so they could corrupt data, but you don’t want to give them no access to anything or nothing will be written.</p>
<p>Libraries are just built on top of the kernel and applications are built on top of libraries. At each layer you just have to decide what does the next layer need to do, what implementation details do I need to hide.</p>
<p>Computer languages are rather on another subject line and I’ve written enough.</p>
<p>Excuse the rambling there, just google anything I’ve mentioned that you don’t understand.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164/4</link>
        <pubDate>Tue, 02 Apr 2013 13:39:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513164-4</guid>
        <source url="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss">General computer science? idk</source>
      </item>
      <item>
        <title>General computer science? idk</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>[quote=“CoonHunter, post:2, topic:513164”]Oh god, the complexity of this is far beyond that of Moparscape or MITB I can tell you that for sure. To design maybe a simple scripting language takes time just plan. You will need to make some sort of engine (I don’t know the real term for that) to run it. You may be able to find out some about Python or Ruby via the libraries for Java (I am aware you have some Java knowledge). You could start there.</p>
<p>I probably made myself sound like an idiot. Admitting I do not know much about designing and implementing a language. Operating Systems are made via C++, C. Android for example is a mix of C++, and the Davik VM to run a (somewhat) custom Java ontop of that.[/quote]</p>
<p>You under estimate Mopar.<br>
As far as operating system’s are concerned they could be written in almost anything including Lua besides the boot loader which must be done in assembly. You where somewhat correct about android, how its run using Davik VM and how Java is compatible with the OS.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164/3</link>
        <pubDate>Tue, 02 Apr 2013 13:24:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513164-3</guid>
        <source url="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss">General computer science? idk</source>
      </item>
      <item>
        <title>General computer science? idk</title>
        <dc:creator><![CDATA[@CoonHunter CoonHunter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/coonhunter">@CoonHunter</a> wrote:</p>
          <blockquote>
              <p>Oh god, the complexity of this is far beyond that of Moparscape or MITB I can tell you that for sure. To design maybe a simple scripting language takes time just plan. You will need to make some sort of engine (I don’t know the real term for that) to run it. You may be able to find out some about Python or Ruby via the libraries for Java (I am aware you have some Java knowledge). You could start there.</p>
<p>I probably made myself sound like an idiot. Admitting I do not know much about designing and implementing a language. Operating Systems are made via C++, C. Android for example is a mix of C++, and the Davik VM to run a (somewhat) custom Java ontop of that.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164/2</link>
        <pubDate>Tue, 02 Apr 2013 04:08:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513164-2</guid>
        <source url="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss">General computer science? idk</source>
      </item>
      <item>
        <title>General computer science? idk</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>How are instruction sets, operating systems, languages, libraries, and applications <span class="bbcode-b">designed and implemented</span>?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/general-computer-science-idk/513164/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/general-computer-science-idk/513164/1</link>
        <pubDate>Mon, 01 Apr 2013 17:42:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-513164-1</guid>
        <source url="https://forum.moparisthebest.com/t/general-computer-science-idk/513164.rss">General computer science? idk</source>
      </item>
  </channel>
</rss>
