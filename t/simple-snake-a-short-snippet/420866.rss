<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Simple snake, a short snippet</title>
    <link>https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866</link>
    <description>well, since this site is quite dead and it seems as if noone wants to contribute, here&#39;s a simple snake clone i wrote up as an example (albeit bad example). you can eat food, get points, eat poison, die. have fun. 
[code=java]package sfix.examples;

import java.awt.Canvas;
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.awt.image.BufferStrategy;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Random;

import javax.swing.JFrame;

public class Snake {
    public static class GameItem {
        public static enum Type {
            FOOD, POISON/* , POWERUP */
        }

        protected long expiresAt;

        protected Point position; // world position.

        protected Type type;

        public GameItem(Point position, Type type, long expiresAt) {
            this.position = position;
            this.type = type;
            this.expiresAt = expiresAt;
        }

        @Override
        public String toString() {
            return type + &quot;, &quot; + position + &quot;, &quot; + expiresAt;
        }
    }

    private static enum GameState {
        GAME, GAME_OVER, MENU
    }

    private static enum SnakeDirection {
        E, N, S, W
    }

    class SnakeInputListener extends KeyAdapter {

        @Override
        public void keyPressed(KeyEvent evt) {
            if (evt.getKeyCode() == KeyEvent.VK_ESCAPE &amp;&amp; state != GameState.MENU) {
                state = GameState.MENU;
            } else {
                switch (state) {
                case GAME:

                    if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                        direction = SnakeDirection.W;
                    } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                        direction = SnakeDirection.E;
                    } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                        direction = SnakeDirection.N;
                    } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                        direction = SnakeDirection.S;
                    }
                    break;
                case MENU:
                    if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
                        snakeChain.clear();
                        items.clear();
                        score = 0;
                        int x = gridWidth / 2;
                        int y = gridHeight / 2;
                        for (int i = 0; i &lt; 5; i++, y++) {
                            snakeChain.addLast(new Point(x, y));
                        }
                        spawnItemAnywhere(GameItem.Type.FOOD, false);
                        state = GameState.GAME;
                    } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                        System.exit(0);
                    }
                    break;
                }
            }
        }

    }

    private static final int DEFAULT_WIDTH = 420, DEFAULT_HEIGHT = 420;

    private static void drawCenteredText(Graphics2D g, String text, int viewportWidth, int viewportHeight) {
        g.setColor(Color.WHITE);
        FontMetrics metrics = g.getFontMetrics();
        int x = (viewportWidth - metrics.stringWidth(text)) / 2;
        int y = viewportHeight / 2;
        g.drawString(text, x, y);
    }

    public static void main(String[] argv) {
        new Snake(argv).start();
    }

    private final int cellSize = 10;

    private final int gridHeight;

    private final int gridWidth;

    private final int height;

    private final int width;

    private int score = 0;

    private SnakeDirection direction = SnakeDirection.N;

    private GameState state = GameState.MENU;

    private final List&lt;GameItem&gt; items = new LinkedList&lt;GameItem&gt;();

    private final List&lt;GameItem&gt; pendingItems = new LinkedList&lt;GameItem&gt;();

    private final List&lt;GameItem&gt; expiredItems = new LinkedList&lt;GameItem&gt;();

    private final LinkedList&lt;Point&gt; snakeChain = new LinkedList&lt;Point&gt;();

    public Snake(String[] argv) {
        if (argv.length &gt;= 2) {
            width = Integer.parseInt(argv[0]);
            height = Integer.parseInt(argv[1]);
        } else {
            width = DEFAULT_WIDTH;
            height = DEFAULT_HEIGHT;
        }
        gridWidth = width / cellSize;
        gridHeight = height / cellSize;
    }

    private void itemCollected(GameItem item) {
        switch (item.type) {
        case FOOD:
            spawnItemAnywhere(GameItem.Type.FOOD, false);
            snakeChain.addLast(new Point(snakeChain.getLast().x, snakeChain.getLast().y + 1));
            score++;
            break;
        case POISON:
            state = GameState.GAME_OVER;
            break;
        }
        int rand = new Random().nextInt(3);
        if (rand == 2) {
            spawnItemAnywhere(GameItem.Type.FOOD, true);
        } else if (rand == 1) {
            spawnItemAnywhere(GameItem.Type.POISON, true);
        }
        expiredItems.add(item);
    }

    private void render(Graphics2D g2d) {
        switch (state) {
        case GAME:
            g2d.setColor(Color.GRAY);
            for (Point cellCoordinate : snakeChain) {
                g2d.fillOval(cellCoordinate.x * cellSize, cellCoordinate.y * cellSize, cellSize, cellSize);
            }
            for (GameItem item : items) {
                if (item.type == GameItem.Type.FOOD) {
                    g2d.setColor(Color.GREEN);
                } else if (item.type == GameItem.Type.POISON) {
                    g2d.setColor(Color.RED);
                }
                g2d.fillOval(item.position.x * cellSize, item.position.y * cellSize, cellSize, cellSize);
            }
            g2d.setColor(Color.RED);
            g2d.setFont(g2d.getFont().deriveFont(16.0f).deriveFont(Font.BOLD));
            g2d.drawString(&quot;Score: &quot; + score, 20, 20);
            break;
        case MENU:
            drawCenteredText(g2d, &quot;Press spacebar to start.&quot;, width, height);
            break;
        case GAME_OVER:
            drawCenteredText(g2d, &quot;Score: &quot; + score + &quot; (Press Escape to return to the menu screen)&quot;, width, height);
            break;
        }
    }

    public void spawnItemAnywhere(GameItem.Type type, boolean expires) {
        Random rand = new Random();
        pendingItems.add(new GameItem(new Point(rand.nextInt(gridWidth), rand.nextInt(gridHeight)), type,
                expires ? System.currentTimeMillis() + 10 * 1000 : 0));
    }

    public void start() {
        JFrame frame = new JFrame(&quot;Snake&quot;);
        Canvas canvas = new Canvas();
        {
            canvas.addKeyListener(new SnakeInputListener());
            canvas.setSize(width, height);
            frame.add(canvas);
            frame.pack();
            frame.setVisible(true);
        }
        canvas.createBufferStrategy(2);
        BufferStrategy strategy = canvas.getBufferStrategy();
        while (frame.isVisible()) {
            update();
            Graphics2D g2d = (Graphics2D) strategy.getDrawGraphics();
            g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
            try {
                g2d.setColor(Color.BLACK);
                g2d.fillRect(0, 0, width, height);
                render(g2d);
                if (!strategy.contentsLost()) {
                    strategy.show();
                }
            } finally {
                g2d.dispose();
                try {
                    Thread.sleep(100);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

    private void update() {
        switch (state) {
        case GAME:
            items.addAll(pendingItems);
            pendingItems.clear();
            items.removeAll(expiredItems);
            expiredItems.clear();
            Iterator&lt;Point&gt; it = snakeChain.iterator();
            Point lastPoint = null;
            while (it.hasNext()) {
                Point point = it.next();
                if (lastPoint == null) {
                    lastPoint = (Point) point.clone();
                    switch (direction) {
                    case N:
                        point.move(point.x, point.y - 1);
                        break;
                    case E:
                        point.move(point.x + 1, point.y);
                        break;
                    case W:
                        point.move(point.x - 1, point.y);
                        break;
                    case S:
                        point.move(point.x, point.y + 1);
                        break;
                    }
                } else {
                    Point oldPoint = (Point) point.clone();
                    point.setLocation(lastPoint);
                    lastPoint = oldPoint;
                }
            }
            Point head = snakeChain.getFirst();
            if (head.getX() &lt; 0 || head.getX() &gt; gridWidth)
                head.move(head.getX() &lt; 0 ? gridWidth : 0, head.y);
            if (head.getY() &lt; 0 || head.getY() &gt; gridHeight)
                head.move(head.x, head.y &lt; 0 ? gridHeight : 0);
            Iterator&lt;GameItem&gt; itemIterator = items.iterator();
            while (itemIterator.hasNext()) {
                GameItem item = itemIterator.next();
                System.out.println(item.toString());
                if (head.getX() == item.position.x &amp;&amp; item.position.y == head.getY()) {
                    itemCollected(item);
                } else if (item.expiresAt &lt; System.currentTimeMillis() &amp;&amp; item.expiresAt != 0) {
                    expiredItems.add(item);
                }
            }
            for (int i = 1; i &lt; snakeChain.size(); i++) {
                Point p = snakeChain.get(i);
                if (p.x == head.x &amp; p.y == head.y) {
                    state = GameState.GAME_OVER;
                }
            }
            break;
        }
    }

}
[/code]

known bugs (i don&#39;t plan on actively contributing to this...): sometimes items spawn inside of your body, when you eat food the new body nodes position is set independent of the direction of the node adjacent to it.</description>
    
    <lastBuildDate>Wed, 09 Nov 2011 03:24:24 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Simple snake, a short snippet</title>
        <dc:creator><![CDATA[@saifix saifix]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/saifix">@saifix</a> wrote:</p>
          <blockquote>
              <p>[quote=“sppt, post:2, topic:420866”]One tip I can give you and anyone else making games, split up your screens in a way like this:<br>
<img src="http://i.imgur.com/GKeh7.png" alt width="369" height="391"></p>
<p>In your main game class you can then create a Screen variable which you can then use to easily switch between screens and make the code much more structured.</p>
<p>Also, another tip, try to explain your code either by highlighting parts that need it, or adding comments :)[/quote]<br>
That is pretty much the idea behind <span class="bbcode-i">GameState</span>. Writing a modular state machine for a short snake example is overkill and I wanted to keep it simple. Although I appreciate the critique and will add some documentation later when I have the time.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/3</link>
        <pubDate>Wed, 09 Nov 2011 03:24:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420866-3</guid>
        <source url="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866.rss">Simple snake, a short snippet</source>
      </item>
      <item>
        <title>Simple snake, a short snippet</title>
        <dc:creator><![CDATA[@sppt sppt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sppt">@sppt</a> wrote:</p>
          <blockquote>
              <p>One tip I can give you and anyone else making games, split up your screens in a way like this:<br>
<img src="http://i.imgur.com/GKeh7.png" alt width="369" height="391"></p>
<p>In your main game class you can then create a Screen variable which you can then use to easily switch between screens and make the code much more structured.</p>
<p>Also, another tip, try to explain your code either by highlighting parts that need it, or adding comments <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/2</link>
        <pubDate>Tue, 08 Nov 2011 20:48:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420866-2</guid>
        <source url="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866.rss">Simple snake, a short snippet</source>
      </item>
      <item>
        <title>Simple snake, a short snippet</title>
        <dc:creator><![CDATA[@saifix saifix]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/saifix">@saifix</a> wrote:</p>
          <blockquote>
              <p>well, since this site is quite dead and it seems as if noone wants to contribute, here’s a simple snake clone i wrote up as an example (albeit bad example). you can eat food, get points, eat poison, die. have fun.</p>
<p>[code=java]package sfix.examples;</p>
<p>import java.awt.Canvas;<br>
import java.awt.Color;<br>
import java.awt.Font;<br>
import java.awt.FontMetrics;<br>
import java.awt.Graphics2D;<br>
import java.awt.Point;<br>
import java.awt.RenderingHints;<br>
import java.awt.event.KeyAdapter;<br>
import java.awt.event.KeyEvent;<br>
import java.awt.image.BufferStrategy;<br>
import java.util.Iterator;<br>
import java.util.LinkedList;<br>
import java.util.List;<br>
import java.util.Random;</p>
<p>import javax.swing.JFrame;</p>
<p>public class Snake {<br>
public static class GameItem {<br>
public static enum Type {<br>
FOOD, POISON/* , POWERUP */<br>
}</p>
<pre><code>    protected long expiresAt;

    protected Point position; // world position.

    protected Type type;

    public GameItem(Point position, Type type, long expiresAt) {
        this.position = position;
        this.type = type;
        this.expiresAt = expiresAt;
    }

    @Override
    public String toString() {
        return type + ", " + position + ", " + expiresAt;
    }
}

private static enum GameState {
    GAME, GAME_OVER, MENU
}

private static enum SnakeDirection {
    E, N, S, W
}

class SnakeInputListener extends KeyAdapter {

    @Override
    public void keyPressed(KeyEvent evt) {
        if (evt.getKeyCode() == KeyEvent.VK_ESCAPE &amp;&amp; state != GameState.MENU) {
            state = GameState.MENU;
        } else {
            switch (state) {
            case GAME:

                if (evt.getKeyCode() == KeyEvent.VK_LEFT) {
                    direction = SnakeDirection.W;
                } else if (evt.getKeyCode() == KeyEvent.VK_RIGHT) {
                    direction = SnakeDirection.E;
                } else if (evt.getKeyCode() == KeyEvent.VK_UP) {
                    direction = SnakeDirection.N;
                } else if (evt.getKeyCode() == KeyEvent.VK_DOWN) {
                    direction = SnakeDirection.S;
                }
                break;
            case MENU:
                if (evt.getKeyCode() == KeyEvent.VK_SPACE) {
                    snakeChain.clear();
                    items.clear();
                    score = 0;
                    int x = gridWidth / 2;
                    int y = gridHeight / 2;
                    for (int i = 0; i &lt; 5; i++, y++) {
                        snakeChain.addLast(new Point(x, y));
                    }
                    spawnItemAnywhere(GameItem.Type.FOOD, false);
                    state = GameState.GAME;
                } else if (evt.getKeyCode() == KeyEvent.VK_ESCAPE) {
                    System.exit(0);
                }
                break;
            }
        }
    }

}

private static final int DEFAULT_WIDTH = 420, DEFAULT_HEIGHT = 420;

private static void drawCenteredText(Graphics2D g, String text, int viewportWidth, int viewportHeight) {
    g.setColor(Color.WHITE);
    FontMetrics metrics = g.getFontMetrics();
    int x = (viewportWidth - metrics.stringWidth(text)) / 2;
    int y = viewportHeight / 2;
    g.drawString(text, x, y);
}

public static void main(String[] argv) {
    new Snake(argv).start();
}

private final int cellSize = 10;

private final int gridHeight;

private final int gridWidth;

private final int height;

private final int width;

private int score = 0;

private SnakeDirection direction = SnakeDirection.N;

private GameState state = GameState.MENU;

private final List&lt;GameItem&gt; items = new LinkedList&lt;GameItem&gt;();

private final List&lt;GameItem&gt; pendingItems = new LinkedList&lt;GameItem&gt;();

private final List&lt;GameItem&gt; expiredItems = new LinkedList&lt;GameItem&gt;();

private final LinkedList&lt;Point&gt; snakeChain = new LinkedList&lt;Point&gt;();

public Snake(String[] argv) {
    if (argv.length &gt;= 2) {
        width = Integer.parseInt(argv[0]);
        height = Integer.parseInt(argv[1]);
    } else {
        width = DEFAULT_WIDTH;
        height = DEFAULT_HEIGHT;
    }
    gridWidth = width / cellSize;
    gridHeight = height / cellSize;
}

private void itemCollected(GameItem item) {
    switch (item.type) {
    case FOOD:
        spawnItemAnywhere(GameItem.Type.FOOD, false);
        snakeChain.addLast(new Point(snakeChain.getLast().x, snakeChain.getLast().y + 1));
        score++;
        break;
    case POISON:
        state = GameState.GAME_OVER;
        break;
    }
    int rand = new Random().nextInt(3);
    if (rand == 2) {
        spawnItemAnywhere(GameItem.Type.FOOD, true);
    } else if (rand == 1) {
        spawnItemAnywhere(GameItem.Type.POISON, true);
    }
    expiredItems.add(item);
}

private void render(Graphics2D g2d) {
    switch (state) {
    case GAME:
        g2d.setColor(Color.GRAY);
        for (Point cellCoordinate : snakeChain) {
            g2d.fillOval(cellCoordinate.x * cellSize, cellCoordinate.y * cellSize, cellSize, cellSize);
        }
        for (GameItem item : items) {
            if (item.type == GameItem.Type.FOOD) {
                g2d.setColor(Color.GREEN);
            } else if (item.type == GameItem.Type.POISON) {
                g2d.setColor(Color.RED);
            }
            g2d.fillOval(item.position.x * cellSize, item.position.y * cellSize, cellSize, cellSize);
        }
        g2d.setColor(Color.RED);
        g2d.setFont(g2d.getFont().deriveFont(16.0f).deriveFont(Font.BOLD));
        g2d.drawString("Score: " + score, 20, 20);
        break;
    case MENU:
        drawCenteredText(g2d, "Press spacebar to start.", width, height);
        break;
    case GAME_OVER:
        drawCenteredText(g2d, "Score: " + score + " (Press Escape to return to the menu screen)", width, height);
        break;
    }
}

public void spawnItemAnywhere(GameItem.Type type, boolean expires) {
    Random rand = new Random();
    pendingItems.add(new GameItem(new Point(rand.nextInt(gridWidth), rand.nextInt(gridHeight)), type,
            expires ? System.currentTimeMillis() + 10 * 1000 : 0));
}

public void start() {
    JFrame frame = new JFrame("Snake");
    Canvas canvas = new Canvas();
    {
        canvas.addKeyListener(new SnakeInputListener());
        canvas.setSize(width, height);
        frame.add(canvas);
        frame.pack();
        frame.setVisible(true);
    }
    canvas.createBufferStrategy(2);
    BufferStrategy strategy = canvas.getBufferStrategy();
    while (frame.isVisible()) {
        update();
        Graphics2D g2d = (Graphics2D) strategy.getDrawGraphics();
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
        try {
            g2d.setColor(Color.BLACK);
            g2d.fillRect(0, 0, width, height);
            render(g2d);
            if (!strategy.contentsLost()) {
                strategy.show();
            }
        } finally {
            g2d.dispose();
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}

private void update() {
    switch (state) {
    case GAME:
        items.addAll(pendingItems);
        pendingItems.clear();
        items.removeAll(expiredItems);
        expiredItems.clear();
        Iterator&lt;Point&gt; it = snakeChain.iterator();
        Point lastPoint = null;
        while (it.hasNext()) {
            Point point = it.next();
            if (lastPoint == null) {
                lastPoint = (Point) point.clone();
                switch (direction) {
                case N:
                    point.move(point.x, point.y - 1);
                    break;
                case E:
                    point.move(point.x + 1, point.y);
                    break;
                case W:
                    point.move(point.x - 1, point.y);
                    break;
                case S:
                    point.move(point.x, point.y + 1);
                    break;
                }
            } else {
                Point oldPoint = (Point) point.clone();
                point.setLocation(lastPoint);
                lastPoint = oldPoint;
            }
        }
        Point head = snakeChain.getFirst();
        if (head.getX() &lt; 0 || head.getX() &gt; gridWidth)
            head.move(head.getX() &lt; 0 ? gridWidth : 0, head.y);
        if (head.getY() &lt; 0 || head.getY() &gt; gridHeight)
            head.move(head.x, head.y &lt; 0 ? gridHeight : 0);
        Iterator&lt;GameItem&gt; itemIterator = items.iterator();
        while (itemIterator.hasNext()) {
            GameItem item = itemIterator.next();
            System.out.println(item.toString());
            if (head.getX() == item.position.x &amp;&amp; item.position.y == head.getY()) {
                itemCollected(item);
            } else if (item.expiresAt &lt; System.currentTimeMillis() &amp;&amp; item.expiresAt != 0) {
                expiredItems.add(item);
            }
        }
        for (int i = 1; i &lt; snakeChain.size(); i++) {
            Point p = snakeChain.get(i);
            if (p.x == head.x &amp; p.y == head.y) {
                state = GameState.GAME_OVER;
            }
        }
        break;
    }
}
</code></pre>
<p>}<br>
[/code]</p>
<p>known bugs (i don’t plan on actively contributing to this…): sometimes items spawn inside of your body, when you eat food the new body nodes position is set independent of the direction of the node adjacent to it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866/1</link>
        <pubDate>Mon, 07 Nov 2011 03:06:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-420866-1</guid>
        <source url="https://forum.moparisthebest.com/t/simple-snake-a-short-snippet/420866.rss">Simple snake, a short snippet</source>
      </item>
  </channel>
</rss>
