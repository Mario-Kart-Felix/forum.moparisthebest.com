<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Chest System Dementhium 637</title>
    <link>https://forum.moparisthebest.com/t/chest-system-dementhium-637/521011</link>
    <description>This is meant to allow multiple people to edit the containing items inside of the same chest. Yes, it does work. I don&#39;t know how to show you how it works other than a video, but I have no video software at the moment. I was making this class for my hunger games mini-game. I decided to release it because I thought someone like `Luke (from r-s) could use it for his DayZ project.

This uses the familiar inventory interface

Chest.java
[CODE=java]
import java.util.ArrayList;
import java.util.List;

import org.dementhium.model.Container;
import org.dementhium.model.Item;
import org.dementhium.model.definition.ItemDefinition;
import org.dementhium.model.player.Player;
import org.dementhium.net.ActionSender;

/**
 * @author Wildskiller
 * 
 * Written June 7, 2013.
 */
public class Chest {

	/**
	 * The deposit options client scrip arguments.
	 */
	private static final Object[] DEPOSIT_OPTIONS = new Object[] { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Store-10&quot;, &quot;Store-5&quot;, &quot;Store-1&quot;, -1, 0, 7, 4, 90, 665 &lt;&lt; 16 };
	
	/**
	 * The withdraw options client script arguments.
	 */
	private static final Object[] WITHDRAW_OPTIONS = new Object[] { &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Withdraw-10&quot;, &quot;Withdraw-5&quot;, &quot;Withdraw-1&quot;, -1, 0, 5, 6, 30, 671 &lt;&lt; 16 | 27 };
	
	/**
	 * The container.
	 */
	private final Container container = new Container(31, false);
	
	private String chestName;
	
	/**
	 * A list of all the players searching through the chest.
	 */
	private List&lt;Player&gt; searchingPlayers = new ArrayList&lt;Player&gt;();

	/**
	 * 
	 * @param chestName The chest&#39;s name.
	 */
	public Chest(String chestName) {
		this.chestName = chestName;
	}
	
	public void addPlayer(Player player) {
		if (!searchingPlayers.contains(player))
			searchingPlayers.add(player);
	}

	/**
	 * Stores items on the container.
	 * @param item The item.
	 * @param slot The item slot.
	 * @param amount The amount to store.
	 */
	public void store(Item item) {
		int freeSlots = container.freeSlots();
		int amount = item.getAmount();
		if (amount &gt; freeSlots &amp;&amp; !item.getDefinition().isStackable()) {
			if (freeSlots == 0) {
				return;
			}
			amount = freeSlots;
		}
		if (!item.getDefinition().isStackable()) {
			for (int i = 0; i &lt; amount; i++) {
				container.add(new Item(item.getId(), 1));
			}
		} else {
			container.add(item);
		}
		refresh();
	}
	
	/**
	 * Stores items on the container.
	 * @param item The item.
	 * @param slot The item slot.
	 * @param amount The amount to store.
	 */
	public void store(Player player, int itemId, int slot, int amount) {
		Item inventoryItem = player.getInventory().get(slot);
		int freeSlots = container.freeSlots();
		if (amount &gt; freeSlots &amp;&amp; !inventoryItem.getDefinition().isStackable()) {
			if (freeSlots == 0) {
				return;
			}
			amount = freeSlots;
		}
		int inventoryAmount = player.getInventory().getContainer().getItemCount(itemId);
		if (amount &gt; inventoryAmount) {
			amount = inventoryAmount;
		}
		if (inventoryItem == null || inventoryItem.getId() != itemId || amount &lt; 1
				|| (freeSlots &lt; 1 &amp;&amp; !inventoryItem.getDefinition().isStackable())) {
			return;
		}
		if (amount == 1 || inventoryItem.getDefinition().isStackable()) {
			inventoryItem.setAmount(inventoryItem.getAmount() - amount);
			if (inventoryItem.getAmount() &lt; 1) {
				player.getInventory().set(slot, null);
			}
			container.add(new Item(itemId, amount));
			player.getInventory().refresh();
			refresh();
			return;
		}
		for (int i = 0; i &lt; amount; i++) {
			if (player.getInventory().contains(itemId) &amp;&amp; container.size() &lt; 31) {
				player.getInventory().deleteItem(itemId, 1);
				container.add(new Item(itemId, 1));
			} else {
				break;
			}
		}
		player.getInventory().refresh();
		refresh();
	}
	
	/**
	 * Withdraws an item from the beast of burden.
	 * @param itemId The item id.
	 * @param slot The item slot.
	 * @param amount The amount to withdraw.
	 */
	public void withdraw(Player player, int itemId, int slot, int amount) {
		Item item = container.get(slot);
		int freeSlots = player.getInventory().getFreeSlots();
		if (amount &gt; freeSlots &amp;&amp; !item.getDefinition().isStackable()) {
			if (freeSlots == 0) {
				return;
			}
			amount = freeSlots;
		}
		int bobAmount = container.getItemCount(itemId);
		if (amount &gt; bobAmount) {
			amount = bobAmount;
		}
		if (item == null || item.getId() != itemId || amount &lt; 1
				|| (freeSlots &lt; 1 &amp;&amp; !item.getDefinition().isStackable())) {
			return;
		}
		if (amount == 1 || item.getDefinition().isStackable()) {
			item.setAmount(item.getAmount() - amount);
			if (item.getAmount() &lt; 1) {
				container.set(slot, null);
			}
			Container c = new Container(31, false);
			c.addAll(container);
			container.clear();
			container.addAll(c);
			player.getInventory().addItem(itemId, amount);
			refresh();
			return;
		}
		for (int i = 0; i &lt; amount; i++) {
			if (container.containsOne(item)) {
				container.remove(new Item(itemId, 1));
				player.getInventory().addItem(itemId, 1, false);
			} else {
				break;
			}
		}
		Container c = new Container(31, false);
		c.addAll(container);
		container.clear();
		container.addAll(c);
		player.getInventory().refresh();
		refresh();
	}
	
	public void handleButtons(Player player, int interfaceId, int itemId, int slot, int opcode) {
		switch (interfaceId) {
		case 671:
			switch (opcode) {
			case 6:
				withdraw(player, itemId, slot, 1);
				break;
			case 13:
				withdraw(player, itemId, slot, 5);
				break;
			case 0:
				withdraw(player, itemId, slot, 10);
				break;
			case 58:
				player.sendMessage(ItemDefinition.forId(itemId).getExamine());
				break;
			}
			break;
		case 665:
			switch (opcode) {
			case 6:
				store(player, itemId, slot, 1);
				break;
			case 13:
				store(player, itemId, slot, 5);
				break;
			case 0:
				store(player, itemId, slot, 10);
				break;
			case 58:
				player.sendMessage(ItemDefinition.forId(itemId).getExamine());
				break;
			}
			break;
		}
	}
	
	/**
	 * Opens the container.
	 */
	public void open(Player player) {
		ActionSender.sendInterfaceConfig(player, 671, 29, false);
		ActionSender.sendString(player, chestName, 671, 14);
		ActionSender.sendInterface(player, 671);
		ActionSender.sendInventoryInterface(player, 665);
		ActionSender.sendClientScript(player, 150, WITHDRAW_OPTIONS, &quot;IviiiIsssssssss&quot;);
		ActionSender.sendAMask(player, 1150, 671, 27, 0, 30);
		ActionSender.sendClientScript(player, 150, DEPOSIT_OPTIONS, &quot;IviiiIsssssssss&quot;);
		ActionSender.sendAMask(player, 1150, 665, 0, 0, 28);
		refresh();
	}
	
	public void refresh() {
		for (Player p : searchingPlayers) {
			ActionSender.sendItems(p, 90, p.getInventory().getContainer(), false);
			ActionSender.sendItems(p, 30, container, false);
		}
	}

	/**
	 * Gets the container.
	 * @return The container.
	 */
	public Container getContainer() {
		return container;
	}
	
	/**
	 * Gets the list of players viewing the chest.
	 * @return searchingPlayers
	 */
	public List&lt;Player&gt; getSearchingPlayers() {
		return searchingPlayers;
	}

}[/CODE]

Example of how to use
[CODE=java]
public void openChest(Player player) {
	final Chest chest = new Chest(&quot;Chest Name&quot;);
	Item[] items = {new Item(4151, 2), new Item(882, 150)};
	chest.addPlayer(player);
	for (Item i : items) {
		chest.store(i);
	}
	chest.open(player);
}[/CODE]</description>
    
    <lastBuildDate>Fri, 07 Jun 2013 22:48:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/chest-system-dementhium-637/521011.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Chest System Dementhium 637</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>This is meant to allow multiple people to edit the containing items inside of the same chest. Yes, it does work. I don’t know how to show you how it works other than a video, but I have no video software at the moment. I was making this class for my hunger games mini-game. I decided to release it because I thought someone like `Luke (from r-s) could use it for his DayZ project.</p>
<p>This uses the familiar inventory interface</p>
<p>Chest.java</p>
<p>[CODE=java]<br>
import java.util.ArrayList;<br>
import java.util.List;</p>
<p>import org.dementhium.model.Container;<br>
import org.dementhium.model.Item;<br>
import org.dementhium.model.definition.ItemDefinition;<br>
import org.dementhium.model.player.Player;<br>
import org.dementhium.net.ActionSender;</p>
<p>/**</p>
<ul>
<li>
<p><span class="mention">@author</span> Wildskiller</p>
</li>
<li>
</li>
<li>
<p>Written June 7, 2013.<br>
*/<br>
public class Chest {</p>
<p>/**</p>
<ul>
<li>The deposit options client scrip arguments.<br>
*/<br>
private static final Object[] DEPOSIT_OPTIONS = new Object[] { “”, “”, “”, “”, “”, “”, “Store-10”, “Store-5”, “Store-1”, -1, 0, 7, 4, 90, 665 &lt;&lt; 16 };</li>
</ul>
<p>/**</p>
<ul>
<li>The withdraw options client script arguments.<br>
*/<br>
private static final Object[] WITHDRAW_OPTIONS = new Object[] { “”, “”, “”, “”, “”, “”, “Withdraw-10”, “Withdraw-5”, “Withdraw-1”, -1, 0, 5, 6, 30, 671 &lt;&lt; 16 | 27 };</li>
</ul>
<p>/**</p>
<ul>
<li>The container.<br>
*/<br>
private final Container container = new Container(31, false);</li>
</ul>
<p>private String chestName;</p>
<p>/**</p>
<ul>
<li>A list of all the players searching through the chest.<br>
*/<br>
private List searchingPlayers = new ArrayList();</li>
</ul>
<p>/**</p>
<ul>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> chestName The chest’s name.<br>
*/<br>
public Chest(String chestName) {<br>
this.chestName = chestName;<br>
}</li>
</ul>
<p>public void addPlayer(Player player) {<br>
if (!searchingPlayers.contains(player))<br>
searchingPlayers.add(player);<br>
}</p>
<p>/**</p>
<ul>
<li>Stores items on the container.</li>
<li>
<a class="mention" href="/u/param">@param</a> item The item.</li>
<li>
<a class="mention" href="/u/param">@param</a> slot The item slot.</li>
<li>
<a class="mention" href="/u/param">@param</a> amount The amount to store.<br>
*/<br>
public void store(Item item) {<br>
int freeSlots = container.freeSlots();<br>
int amount = item.getAmount();<br>
if (amount &gt; freeSlots &amp;&amp; !item.getDefinition().isStackable()) {<br>
if (freeSlots == 0) {<br>
return;<br>
}<br>
amount = freeSlots;<br>
}<br>
if (!item.getDefinition().isStackable()) {<br>
for (int i = 0; i &lt; amount; i++) {<br>
container.add(new Item(item.getId(), 1));<br>
}<br>
} else {<br>
container.add(item);<br>
}<br>
refresh();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Stores items on the container.</li>
<li>
<a class="mention" href="/u/param">@param</a> item The item.</li>
<li>
<a class="mention" href="/u/param">@param</a> slot The item slot.</li>
<li>
<a class="mention" href="/u/param">@param</a> amount The amount to store.<br>
*/<br>
public void store(Player player, int itemId, int slot, int amount) {<br>
Item inventoryItem = player.getInventory().get(slot);<br>
int freeSlots = container.freeSlots();<br>
if (amount &gt; freeSlots &amp;&amp; !inventoryItem.getDefinition().isStackable()) {<br>
if (freeSlots == 0) {<br>
return;<br>
}<br>
amount = freeSlots;<br>
}<br>
int inventoryAmount = player.getInventory().getContainer().getItemCount(itemId);<br>
if (amount &gt; inventoryAmount) {<br>
amount = inventoryAmount;<br>
}<br>
if (inventoryItem == null || inventoryItem.getId() != itemId || amount &lt; 1<br>
|| (freeSlots &lt; 1 &amp;&amp; !inventoryItem.getDefinition().isStackable())) {<br>
return;<br>
}<br>
if (amount == 1 || inventoryItem.getDefinition().isStackable()) {<br>
inventoryItem.setAmount(inventoryItem.getAmount() - amount);<br>
if (inventoryItem.getAmount() &lt; 1) {<br>
player.getInventory().set(slot, null);<br>
}<br>
container.add(new Item(itemId, amount));<br>
player.getInventory().refresh();<br>
refresh();<br>
return;<br>
}<br>
for (int i = 0; i &lt; amount; i++) {<br>
if (player.getInventory().contains(itemId) &amp;&amp; container.size() &lt; 31) {<br>
player.getInventory().deleteItem(itemId, 1);<br>
container.add(new Item(itemId, 1));<br>
} else {<br>
break;<br>
}<br>
}<br>
player.getInventory().refresh();<br>
refresh();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Withdraws an item from the beast of burden.</li>
<li>
<a class="mention" href="/u/param">@param</a> itemId The item id.</li>
<li>
<a class="mention" href="/u/param">@param</a> slot The item slot.</li>
<li>
<a class="mention" href="/u/param">@param</a> amount The amount to withdraw.<br>
*/<br>
public void withdraw(Player player, int itemId, int slot, int amount) {<br>
Item item = container.get(slot);<br>
int freeSlots = player.getInventory().getFreeSlots();<br>
if (amount &gt; freeSlots &amp;&amp; !item.getDefinition().isStackable()) {<br>
if (freeSlots == 0) {<br>
return;<br>
}<br>
amount = freeSlots;<br>
}<br>
int bobAmount = container.getItemCount(itemId);<br>
if (amount &gt; bobAmount) {<br>
amount = bobAmount;<br>
}<br>
if (item == null || item.getId() != itemId || amount &lt; 1<br>
|| (freeSlots &lt; 1 &amp;&amp; !item.getDefinition().isStackable())) {<br>
return;<br>
}<br>
if (amount == 1 || item.getDefinition().isStackable()) {<br>
item.setAmount(item.getAmount() - amount);<br>
if (item.getAmount() &lt; 1) {<br>
container.set(slot, null);<br>
}<br>
Container c = new Container(31, false);<br>
c.addAll(container);<br>
container.clear();<br>
container.addAll©;<br>
player.getInventory().addItem(itemId, amount);<br>
refresh();<br>
return;<br>
}<br>
for (int i = 0; i &lt; amount; i++) {<br>
if (container.containsOne(item)) {<br>
container.remove(new Item(itemId, 1));<br>
player.getInventory().addItem(itemId, 1, false);<br>
} else {<br>
break;<br>
}<br>
}<br>
Container c = new Container(31, false);<br>
c.addAll(container);<br>
container.clear();<br>
container.addAll©;<br>
player.getInventory().refresh();<br>
refresh();<br>
}</li>
</ul>
<p>public void handleButtons(Player player, int interfaceId, int itemId, int slot, int opcode) {<br>
switch (interfaceId) {<br>
case 671:<br>
switch (opcode) {<br>
case 6:<br>
withdraw(player, itemId, slot, 1);<br>
break;<br>
case 13:<br>
withdraw(player, itemId, slot, 5);<br>
break;<br>
case 0:<br>
withdraw(player, itemId, slot, 10);<br>
break;<br>
case 58:<br>
player.sendMessage(ItemDefinition.forId(itemId).getExamine());<br>
break;<br>
}<br>
break;<br>
case 665:<br>
switch (opcode) {<br>
case 6:<br>
store(player, itemId, slot, 1);<br>
break;<br>
case 13:<br>
store(player, itemId, slot, 5);<br>
break;<br>
case 0:<br>
store(player, itemId, slot, 10);<br>
break;<br>
case 58:<br>
player.sendMessage(ItemDefinition.forId(itemId).getExamine());<br>
break;<br>
}<br>
break;<br>
}<br>
}</p>
<p>/**</p>
<ul>
<li>Opens the container.<br>
*/<br>
public void open(Player player) {<br>
ActionSender.sendInterfaceConfig(player, 671, 29, false);<br>
ActionSender.sendString(player, chestName, 671, 14);<br>
ActionSender.sendInterface(player, 671);<br>
ActionSender.sendInventoryInterface(player, 665);<br>
ActionSender.sendClientScript(player, 150, WITHDRAW_OPTIONS, “IviiiIsssssssss”);<br>
ActionSender.sendAMask(player, 1150, 671, 27, 0, 30);<br>
ActionSender.sendClientScript(player, 150, DEPOSIT_OPTIONS, “IviiiIsssssssss”);<br>
ActionSender.sendAMask(player, 1150, 665, 0, 0, 28);<br>
refresh();<br>
}</li>
</ul>
<p>public void refresh() {<br>
for (Player p : searchingPlayers) {<br>
ActionSender.sendItems(p, 90, p.getInventory().getContainer(), false);<br>
ActionSender.sendItems(p, 30, container, false);<br>
}<br>
}</p>
<p>/**</p>
<ul>
<li>Gets the container.</li>
<li>
<a class="mention" href="/u/return">@return</a> The container.<br>
*/<br>
public Container getContainer() {<br>
return container;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the list of players viewing the chest.</li>
<li>
<a class="mention" href="/u/return">@return</a> searchingPlayers<br>
*/<br>
public List getSearchingPlayers() {<br>
return searchingPlayers;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/CODE]</p>
<p>Example of how to use</p>
<p><code>
public void openChest(Player player) {
	final Chest chest = new Chest("Chest Name");
	Item[] items = {new Item(4151, 2), new Item(882, 150)};
	chest.addPlayer(player);
	for (Item i : items) {
		chest.store(i);
	}
	chest.open(player);
}</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/chest-system-dementhium-637/521011/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/chest-system-dementhium-637/521011/1</link>
        <pubDate>Fri, 07 Jun 2013 22:48:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-521011-1</guid>
        <source url="https://forum.moparisthebest.com/t/chest-system-dementhium-637/521011.rss">Chest System Dementhium 637</source>
      </item>
  </channel>
</rss>
