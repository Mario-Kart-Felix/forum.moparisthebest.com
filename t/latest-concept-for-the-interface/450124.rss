<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Latest concept for the interface</title>
    <link>https://forum.moparisthebest.com/t/latest-concept-for-the-interface/450124</link>
    <description>Generalizing all rs content results in a bunch of state machines, separated by scopes (such as world scope, player scope, minigame scope, etc), and actions (where a user uses an item on an item or requests to talk to an NPC, etc). In order to effectively script content, these states must be changed and actions must be listened for.

The content API needs a state listener for any sort of state change or combination. This includes ideas like, when a player reaches a certain tile or after a player is finished walking. It also needs an action listener (which roughly translates into handling most packets sent by the client, just indirectly through the API). This covers things like context menu selections or using items on objects, other items, etc. This would also include clicking buttons on interfaces.

As far as changing states or executing actions go, those go hand-in-hand with the above. States should be able to be changed synchronously and asynchronously (asynchronously wherever possible, for parallel processing). The asynchronous state change methods will have vararg callbacks or options to link to other state changes, so that complex procedural changes can be done asynchronously without lots of nested methods/classes.

The only thing left I saw was actually having the IDs for items and interfaces. We have two options with this. Either the scripts can have the ids programmed into them, making them version dependent, or we can force the server to implement some sort of sophisticated lookup system for items and objects by name. The issue with this is that not all objects actually have names and interfaces obviously have no names.

Also, we need to figure out persistent states. The server will automatically be designed to store easy things like position, but not equipped for complex things like quest progress (since quests would be 100% handled through the content engine). I&#39;m thinking that some sort of definition would be fitting for states marked as &quot;persistent.&quot; That is, the name of the state will be associated with a datatype, so the server knows exactly how to store it. We could even implement basic table form so the states can easily be stored in a database.</description>
    
    <lastBuildDate>Wed, 18 Jul 2012 15:13:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/latest-concept-for-the-interface/450124.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Latest concept for the interface</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Generalizing all rs content results in a bunch of state machines, separated by scopes (such as world scope, player scope, minigame scope, etc), and actions (where a user uses an item on an item or requests to talk to an NPC, etc). In order to effectively script content, these states must be changed and actions must be listened for.</p>
<p>The content API needs a state listener for any sort of state change or combination. This includes ideas like, when a player reaches a certain tile or after a player is finished walking. It also needs an action listener (which roughly translates into handling most packets sent by the client, just indirectly through the API). This covers things like context menu selections or using items on objects, other items, etc. This would also include clicking buttons on interfaces.</p>
<p>As far as changing states or executing actions go, those go hand-in-hand with the above. States should be able to be changed synchronously and asynchronously (asynchronously wherever possible, for parallel processing). The asynchronous state change methods will have vararg callbacks or options to link to other state changes, so that complex procedural changes can be done asynchronously without lots of nested methods/classes.</p>
<p>The only thing left I saw was actually having the IDs for items and interfaces. We have two options with this. Either the scripts can have the ids programmed into them, making them version dependent, or we can force the server to implement some sort of sophisticated lookup system for items and objects by name. The issue with this is that not all objects actually have names and interfaces obviously have no names.</p>
<p>Also, we need to figure out persistent states. The server will automatically be designed to store easy things like position, but not equipped for complex things like quest progress (since quests would be 100% handled through the content engine). I’m thinking that some sort of definition would be fitting for states marked as “persistent.” That is, the name of the state will be associated with a datatype, so the server knows exactly how to store it. We could even implement basic table form so the states can easily be stored in a database.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/latest-concept-for-the-interface/450124/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/latest-concept-for-the-interface/450124/1</link>
        <pubDate>Wed, 18 Jul 2012 15:13:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-450124-1</guid>
        <source url="https://forum.moparisthebest.com/t/latest-concept-for-the-interface/450124.rss">Latest concept for the interface</source>
      </item>
  </channel>
</rss>
