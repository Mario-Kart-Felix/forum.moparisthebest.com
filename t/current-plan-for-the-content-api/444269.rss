<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Current plan for the content api</title>
    <link>https://forum.moparisthebest.com/t/current-plan-for-the-content-api/444269</link>
    <description>[b]Project description: [/b]A Java-programmed Abstract Programming Interface which splits generic content handling into an event and action based paradigm, utilising the features of [url=http://www.jcp.org/en/jsr/detail?id=223]Java Specification Request (JSR) 223[/url] for open scripting applications.

[b]Abstract: [/b]The content API should be completely generic. It should not depend on specific content systems or protocol versions. It should be specific exclusively to RuneScape, but general in all other aspects. The desire for the API is to abstract access to static and dynamic levels of scopes of states. A scope of state is simply a set of permissions defining which actors can access that state. An actor is defined as any server construct that may act upon a state. When a state changes, it fires an events to all listeners. This implies that a state may have listeners specifically for instances where it changes. An actor may request a state to change either immediately or as a continuation. Some properties of a state (where a state may have many properties) may be restrictive in ways they are changed. They will have to change exclusively immediately, exclusively continually, or either one. If a property can be changed immediately, then the moment its requested to be changed it is changed. If a property must be changed continually, then it may be chained by multiple state changes and they will all be changed sequentially, based on the previous action&#39;s completion. These continuations are based on action conditions, where each action has the job of serving its desired state change only and exactly under specific conditions. That is also the definition of an action.

[b]Quick glossary: [/b]

[ul][li]System: a high-level abstract construct in the game world[/li]
[li]State: collection of properties defining a system[/li]
[li]Scope: the rules of accessing (both reading and mutating) a state[/li]
[li]Actor: a high-level abstract construct in the game world that is able to interact with states[/li]
[li]Event: an occurrence of a state changing[/li]
[li]Action: a request for a state to change either continuously or immediately[/li][/ul]


[b]RSPS-specific abstract[/b]
Given the abstraction mentioned before, another abstract must be presented to explain how those systems tie in with the RSPS schema. This system is intended to be protocol-independent, that is, whether the underyling server engine handles 317 or 508, scripts should be able to idealistically run on both out of the box (that is not to be confused with other script dependencies). This may exist because there are certain constructs all versions of RuneScape share, regardless of their age. Each one of these constructs may be considered to be a &quot;plugin&quot; or a &quot;module&quot; (that is, a portion of the content API designed to handle states and actors of particular types). They are able to manage states in a special way and define what sort of properties those states contain. Actors from the general server core should be able to interact with these states regardless of their dependencies and only limited by their scopes. The following is a non-exhaustive list of common constructs between multiple protocols that may be plugged in the API interface:


[ul][li]Quests[/li]
[li]Skills[/li]
[li]Minigames[/li]
[li]Game world (handles public interactions between players, where a player may be an actor)[/li][/ul]


It&#39;s noteworthy that the implementation of each of these modules is dependent on the core, where the core may choose to have specific states that other cores may not. For instance, a server that supports player-versus-player combat may have states for maintaining combat between two players, whereas a server that does not support combat will not have these states implemented. Nevertheless, the abstractions are the exact same for both servers, independent of those differences in the implementations.</description>
    
    <lastBuildDate>Thu, 07 Jun 2012 05:32:50 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/current-plan-for-the-content-api/444269.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Current plan for the content api</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">Project description: </span>A Java-programmed Abstract Programming Interface which splits generic content handling into an event and action based paradigm, utilising the features of <a href="http://www.jcp.org/en/jsr/detail?id=223" data-bbcode="true" rel="nofollow noopener">Java Specification Request (JSR) 223</a> for open scripting applications.</p>
<p><span class="bbcode-b">Abstract: </span>The content API should be completely generic. It should not depend on specific content systems or protocol versions. It should be specific exclusively to RuneScape, but general in all other aspects. The desire for the API is to abstract access to static and dynamic levels of scopes of states. A scope of state is simply a set of permissions defining which actors can access that state. An actor is defined as any server construct that may act upon a state. When a state changes, it fires an events to all listeners. This implies that a state may have listeners specifically for instances where it changes. An actor may request a state to change either immediately or as a continuation. Some properties of a state (where a state may have many properties) may be restrictive in ways they are changed. They will have to change exclusively immediately, exclusively continually, or either one. If a property can be changed immediately, then the moment its requested to be changed it is changed. If a property must be changed continually, then it may be chained by multiple state changes and they will all be changed sequentially, based on the previous action’s completion. These continuations are based on action conditions, where each action has the job of serving its desired state change only and exactly under specific conditions. That is also the definition of an action.</p>
<p><span class="bbcode-b">Quick glossary: </span></p>
<p>[ul][li]System: a high-level abstract construct in the game world[/li]<br>
[li]State: collection of properties defining a system[/li]<br>
[li]Scope: the rules of accessing (both reading and mutating) a state[/li]<br>
[li]Actor: a high-level abstract construct in the game world that is able to interact with states[/li]<br>
[li]Event: an occurrence of a state changing[/li]<br>
[li]Action: a request for a state to change either continuously or immediately[/li][/ul]</p>
<p><span class="bbcode-b">RSPS-specific abstract</span><br>
Given the abstraction mentioned before, another abstract must be presented to explain how those systems tie in with the RSPS schema. This system is intended to be protocol-independent, that is, whether the underyling server engine handles 317 or 508, scripts should be able to idealistically run on both out of the box (that is not to be confused with other script dependencies). This may exist because there are certain constructs all versions of RuneScape share, regardless of their age. Each one of these constructs may be considered to be a “plugin” or a “module” (that is, a portion of the content API designed to handle states and actors of particular types). They are able to manage states in a special way and define what sort of properties those states contain. Actors from the general server core should be able to interact with these states regardless of their dependencies and only limited by their scopes. The following is a non-exhaustive list of common constructs between multiple protocols that may be plugged in the API interface:</p>
<p>[ul][li]Quests[/li]<br>
[li]Skills[/li]<br>
[li]Minigames[/li]<br>
[li]Game world (handles public interactions between players, where a player may be an actor)[/li][/ul]</p>
<p>It’s noteworthy that the implementation of each of these modules is dependent on the core, where the core may choose to have specific states that other cores may not. For instance, a server that supports player-versus-player combat may have states for maintaining combat between two players, whereas a server that does not support combat will not have these states implemented. Nevertheless, the abstractions are the exact same for both servers, independent of those differences in the implementations.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/current-plan-for-the-content-api/444269/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/current-plan-for-the-content-api/444269/1</link>
        <pubDate>Thu, 07 Jun 2012 05:32:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-444269-1</guid>
        <source url="https://forum.moparisthebest.com/t/current-plan-for-the-content-api/444269.rss">Current plan for the content api</source>
      </item>
  </channel>
</rss>
