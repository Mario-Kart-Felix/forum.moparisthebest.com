<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Simple Cache Updater</title>
    <link>https://forum.moparisthebest.com/t/simple-cache-updater/534362</link>
    <description>This is just a simple Auto Cache Updater that I made for my client.

[B]Updater.java[/B]
[CODE=java]
import java.io.BufferedReader;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.net.URL;


/**
 * 
 * @author Thomas Papp
 * 
 * A basic class checking if the users cache is up-to-date.
 *
 */

public class Updater {

	/**
	 * The URL of the cache (this is used to &#39;store&#39; the most up-to-date cache version).
	 */
	private static final String VERSION_URL = &quot;http://2006remade.com/cacheUpdate/cacheVersion.txt&quot;;
	
	/**
	 * The current version in the users cache.
	 */
	private static final String VERSION_FILE = Signlink.findcachedir() +&quot;cacheVersion&quot; + getCurrentVersion() + &quot;.dat&quot;;
	
	/**
	 * The cache download link.
	 */
	private static final String CACHE_LINK = &quot;URL&quot;;
	
	/**
	 * Deletes the old cache.
	 */
	private static void cleanCache(File file) {
		File[] directory = file.listFiles();
		FileLoop: for (File f : directory) {
			f.delete();
		}
	}
	
	/**
	 * Updates the cache.
	 * 
	 * @param client The connected client.
	 */
	public static void updateCache(Client client) {
		cleanCache(new File(Signlink.findcachedir()));
		new CacheDownloader(client).downloadCache(CACHE_LINK, CacheDownloader.getArchivedName(CACHE_LINK), getNewestVersion());
	}
	
	/**
	 * Checks to see if the users cache needs to be updated.
	 * 
	 * @return &lt;code&gt;true&lt;/code&gt; : &lt;code&gt;false&lt;/code&gt;
	 */
	public static boolean cacheNeedsUpdate() {
		try {
			if(getNewestVersion() &gt; getCurrentVersion()) {
				return true;
			}
			} catch(Exception e) {
			}
		return false;
	}
	
	/**
	 * Gets the newest cache version from the website.
	 * 
	 * @return The cache version.
	 */
	public static double getNewestVersion() {
		try {
			URL url = new URL(VERSION_URL);
			BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
			return Double.parseDouble(br.readLine());
		} catch (Exception e) {
			return -1;
		}
	}
	
	/**
	 * Gets the current version of the users cache.
	 * 
	 * @return The current version of the users cache.
	 */
	public static double getCurrentVersion() {
		try {
			BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(VERSION_FILE)));
			return Double.parseDouble(br.readLine());
		} catch (Exception e) {
			return 0.1;
		}
	}
	
}

[/CODE]

For the txt file the cacheVersion.txt just make a new txt file and name it cacheVersion, just put what ever number that your caches version is into the file then upload it to your web-host.

For people who don&#39;t have CacheDownloader.java.

[B]CacheDownloader.java[/B]
[CODE=java]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;



public class CacheDownloader {

        private Client client;

        private final int BUFFER = 1024;
        
        
        /*
         * Only things you need to change
         *
         */
        private final int VERSION = 1; // Version of cache
        private String cacheLink = &quot;https://dl.dropbox.com/s/vpmpx6a4lrrpd3y/.2006Remade_Alpha.zip&quot;; // Link to cache

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(Client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return Signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
//                if (location.exists()) {
//                	if (Updater.cacheNeedsUpdate())
//                		Updater.updateCache(client);
//                	else
//                		return null;
//                }
                if(!location.exists()) {
                        //drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                        downloadFile(getCacheLink(), getArchivedName());

                        unZip();
                        System.out.println(&quot;UNZIP&quot;);

                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
                                //drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                                downloadFile(getCacheLink(), getArchivedName());

                                unZip();
                                System.out.println(&quot;UNZIP&quot;);

                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
        
        public CacheDownloader downloadCache(String link, String name, double d) {
            try {
            File location = new File(getCacheDir());
            File versions = new File(getCacheDir() + &quot;/cacheVersion&quot; + d + &quot;.dat&quot;);
            if(!location.exists()) {
            	updateFile(link, getArchivedName(name));

                    unZip();
                    System.out.println(&quot;UNZIP&quot;);

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + d + &quot;.dat&quot;));
                    versionFile.close();
            } else {
                    if(!versions.exists()) {
                    	updateFile(link, getArchivedName(name));

                            unZip();
                            System.out.println(&quot;UNZIP&quot;);

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + d + &quot;.dat&quot;));
                            versionFile.close();

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
        
        private void updateFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
            
                    byte[] data = new byte[BUFFER]; 
    
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

    
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, &quot;Updating Cache &quot; + percentage + &quot;%&quot;);

                    }

                    System.out.println(localFileName + &quot;\t&quot; + numWritten);
                    drawLoadingText(&quot;Finished updating &quot;+getArchivedName()+&quot;!&quot;);

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {

                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                
                        byte[] data = new byte[BUFFER]; 
        
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();

        
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;

                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

                        }

                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }
        
        public static String getArchivedName(String link) {
            int lastSlashIndex = link.lastIndexOf(&#39;/&#39;);
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; link.length() -1) { 
                    return link.substring(lastSlashIndex + 1);
            } else {
                    System.err.println(&quot;error retreiving archivaed name.&quot;);
            }
            return &quot;&quot;;
    }



        private void unZip() {

            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {

                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
                    System.out.println(&quot;unzipping2 &quot; + e.getName());
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                //System.out.println(&quot;unzipping &quot; + s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
}
[/CODE]</description>
    
    <lastBuildDate>Sun, 20 Oct 2013 00:21:57 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/simple-cache-updater/534362.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Simple Cache Updater</title>
        <dc:creator><![CDATA[@south-park south-park]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/south-park">@south-park</a> wrote:</p>
          <blockquote>
              <p>This is just a simple Auto Cache Updater that I made for my client.</p>
<p>[B]Updater.java[/B]</p>
<p>[CODE=java]<br>
import java.io.BufferedReader;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.InputStreamReader;<br>
import java.net.URL;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Thomas Papp</li>
<li>
</li>
<li>A basic class checking if the users cache is up-to-date.</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class Updater {</p>
<pre><code>/**
 * The URL of the cache (this is used to 'store' the most up-to-date cache version).
 */
private static final String VERSION_URL = "http://2006remade.com/cacheUpdate/cacheVersion.txt";

/**
 * The current version in the users cache.
 */
private static final String VERSION_FILE = Signlink.findcachedir() +"cacheVersion" + getCurrentVersion() + ".dat";

/**
 * The cache download link.
 */
private static final String CACHE_LINK = "URL";

/**
 * Deletes the old cache.
 */
private static void cleanCache(File file) {
	File[] directory = file.listFiles();
	FileLoop: for (File f : directory) {
		f.delete();
	}
}

/**
 * Updates the cache.
 * 
 * @param client The connected client.
 */
public static void updateCache(Client client) {
	cleanCache(new File(Signlink.findcachedir()));
	new CacheDownloader(client).downloadCache(CACHE_LINK, CacheDownloader.getArchivedName(CACHE_LINK), getNewestVersion());
}

/**
 * Checks to see if the users cache needs to be updated.
 * 
 * @return &lt;code&gt;true&lt;/code&gt; : &lt;code&gt;false&lt;/code&gt;
 */
public static boolean cacheNeedsUpdate() {
	try {
		if(getNewestVersion() &gt; getCurrentVersion()) {
			return true;
		}
		} catch(Exception e) {
		}
	return false;
}

/**
 * Gets the newest cache version from the website.
 * 
 * @return The cache version.
 */
public static double getNewestVersion() {
	try {
		URL url = new URL(VERSION_URL);
		BufferedReader br = new BufferedReader(new InputStreamReader(url.openStream()));
		return Double.parseDouble(br.readLine());
	} catch (Exception e) {
		return -1;
	}
}

/**
 * Gets the current version of the users cache.
 * 
 * @return The current version of the users cache.
 */
public static double getCurrentVersion() {
	try {
		BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(VERSION_FILE)));
		return Double.parseDouble(br.readLine());
	} catch (Exception e) {
		return 0.1;
	}
}
</code></pre>
<p>}</p>
<p>[/CODE]</p>
<p>For the txt file the cacheVersion.txt just make a new txt file and name it cacheVersion, just put what ever number that your caches version is into the file then upload it to your web-host.</p>
<p>For people who don’t have CacheDownloader.java.</p>
<p>[B]CacheDownloader.java[/B]</p>
<p>[CODE=java]<br>
import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private Client client;

    private final int BUFFER = 1024;
    
    
    /*
     * Only things you need to change
     *
     */
    private final int VERSION = 1; // Version of cache
    private String cacheLink = "https://dl.dropbox.com/s/vpmpx6a4lrrpd3y/.2006Remade_Alpha.zip"; // Link to cache

    private String fileToExtract = getCacheDir() + getArchivedName();

    public CacheDownloader(Client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
            System.out.println(text);
    }


    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
            System.out.println(text);
    }

    private String getCacheDir() {
            return Signlink.findcachedir();
    }

    private String getCacheLink() {
            return cacheLink;
    }

    private int getCacheVersion() {
            return VERSION;
    }

    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
</code></pre>
<p>//                if (location.exists()) {<br>
//                	if (Updater.cacheNeedsUpdate())<br>
//                		Updater.updateCache(client);<br>
//                	else<br>
//                		return null;<br>
//                }<br>
if(!location.exists()) {<br>
//drawLoadingText(“Downloading Cache Please wait…”);<br>
downloadFile(getCacheLink(), getArchivedName());</p>
<pre><code>                    unZip();
                    System.out.println("UNZIP");

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
                            //drawLoadingText("Downloading Cache Please wait...");
                            downloadFile(getCacheLink(), getArchivedName());

                            unZip();
                            System.out.println("UNZIP");

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
    
    public CacheDownloader downloadCache(String link, String name, double d) {
        try {
        File location = new File(getCacheDir());
        File versions = new File(getCacheDir() + "/cacheVersion" + d + ".dat");
        if(!location.exists()) {
        	updateFile(link, getArchivedName(name));

                unZip();
                System.out.println("UNZIP");

                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + d + ".dat"));
                versionFile.close();
        } else {
                if(!versions.exists()) {
                	updateFile(link, getArchivedName(name));

                        unZip();
                        System.out.println("UNZIP");

                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + d + ".dat"));
                        versionFile.close();

                } else {
                        return null;
                }
        }
        } catch(Exception e) {

        }
        return null;
}
    
    private void updateFile(String adress, String localFileName) {
        OutputStream out = null;
        URLConnection conn;
        InputStream in = null;
        
        try {

                URL url = new URL(adress);
                out = new BufferedOutputStream(
                        new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                conn = url.openConnection();
                in = conn.getInputStream(); 
        
                byte[] data = new byte[BUFFER]; 

                int numRead;
                long numWritten = 0;
                int length = conn.getContentLength();


                while((numRead = in.read(data)) != -1) {
                        out.write(data, 0, numRead);
                        numWritten += numRead;

                            int percentage = (int)(((double)numWritten / (double)length) * 100D);
                        drawLoadingText(percentage, "Updating Cache " + percentage + "%");

                }

                System.out.println(localFileName + "\t" + numWritten);
                drawLoadingText("Finished updating "+getArchivedName()+"!");

        } catch (Exception exception) {
                exception.printStackTrace();
        } finally {
                try {
                        if (in != null) {
                                in.close();
                        }
                        if (out != null) {
                                out.close();
                        }
                } catch (IOException ioe) {
                }
        }

}
    
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
            
                    byte[] data = new byte[BUFFER]; 
    
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

    
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

                    }

                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }

    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }
    
    public static String getArchivedName(String link) {
        int lastSlashIndex = link.lastIndexOf('/');
        if (lastSlashIndex &gt;= 0 
                &amp;&amp; lastSlashIndex &lt; link.length() -1) { 
                return link.substring(lastSlashIndex + 1);
        } else {
                System.err.println("error retreiving archivaed name.");
        }
        return "";
}



    private void unZip() {

        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;

            while((e=zin.getNextEntry()) != null) {

                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {

                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
                System.out.println("unzipping2 " + e.getName());
            }
            zin.close();

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void unzip(ZipInputStream zin, String s) 
            throws IOException {

            FileOutputStream out = new FileOutputStream(s);
            //System.out.println("unzipping " + s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
            }
            out.close();
    }
</code></pre>
<p>}<br>
[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simple-cache-updater/534362/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simple-cache-updater/534362/1</link>
        <pubDate>Sun, 20 Oct 2013 00:21:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534362-1</guid>
        <source url="https://forum.moparisthebest.com/t/simple-cache-updater/534362.rss">Simple Cache Updater</source>
      </item>
  </channel>
</rss>
