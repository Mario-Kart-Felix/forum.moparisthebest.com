<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Challenge: Make a call to a non-public member function</title>
    <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610</link>
    <description>Here&#39;s a C++ challenge that I came up with a while ago. Posted it on MITB as well.

[code]
#include &lt;iostream&gt;

class A
{
public:
	A(unsigned int i)
	{
		m_i = i;
	}

	~A(void)
	{

	}

protected:
	void function(void)
	{
		std::cout &lt;&lt; &quot;A &quot; &lt;&lt; m_i &lt;&lt; std::endl;
	}

private:
	unsigned int m_i;
};

int main(void)
{
	A a(200);	
	//Make a call to a.function().

	std::cin.sync();
	std::cin.get();
	return 0;
}
[/code]

You will have to make a successful function call to a.function().

Rules:
1. Do not modify class A.
2. The function call must be made directly from the main function.
3. Write only standard C++ code. 
4. No inline asm.

I&#39;ll be posting my solution later, let&#39;s see if any of you can come up with one.</description>
    
    <lastBuildDate>Sat, 17 Dec 2011 17:07:32 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Challenge: Make a call to a non-public member function</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:4, topic:425610"][code=cpp]<span class="hashtag">#include</span> </p>
<p>class A<br>
{<br>
public:<br>
A(unsigned int i)<br>
{<br>
m_i = i;<br>
}</p>
<pre><code>    ~A(void)
    {

    }
</code></pre>
<p>protected:<br>
void function(void)<br>
{<br>
std::cout &lt;&lt; "A " &lt;&lt; m_i &lt;&lt; std::endl;<br>
}</p>
<p>private:<br>
unsigned int m_i;<br>
};</p>
<p>class B : public A {<br>
public:<br>
B(int a) : A(a) { }<br>
void call_fn() { this-&gt;function(); }<br>
};</p>
<p>int main(void)<br>
{<br>
A a(200);</p>
<pre><code>    //Make a call to a.function().
    B b(200);
    b.call_fn();

    std::cin.sync();
    std::cin.get();
    return 0;
</code></pre>
<p>}[/code]<br>
ambiguous rules, i’m assuming inheritance is allowed.[/quote]</p>
<p>Inheritance is allowed, rules did not say otherwize. However I can’t consider your code a solution. You must call <span class="bbcode-b">a.function()</span>, where <span class="bbcode-b">a</span> is the specific instance of class A. You also broke rule <span class="hashtag">#2</span>, it must be a direct function call (main -&gt; a.function).</p>
<p>I’ll wait a little more.</p>
<p><span class="bbcode-b">EDIT:<br>
Posted the solution.</span></p>
<p>I’m quite disappointed that none of you could come up with a solution.</p>
<p>The solution here is to create a derived class and use it to get a function pointer to A::function, then that pointer can be used to make a direct call to a.function().</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;

class A
{
public:
	A(unsigned int i)
	{
		m_i = i;
	}

	~A(void)
	{

	}

protected:
	void function(void)
	{
		std::cout &lt;&lt; "A " &lt;&lt; m_i &lt;&lt; std::endl;
	}

private:
	unsigned int m_i;
};

class B : public A
{
public:
	B(void) : A(0)
	{

	}

	~B(void)
	{

	}

	static void (A::* address(void)) (void)
	{
		return &amp;B::function;
	}
};

int main(void)
{
	A a(200);
	void (A::* pFunction) (void) = B::address();
	(a.*pFunction)(); //Make a call to a.function().

	std::cin.sync();
	std::cin.get();
	return 0;
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/5</link>
        <pubDate>Sat, 17 Dec 2011 17:07:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425610-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss">[C++] Challenge: Make a call to a non-public member function</source>
      </item>
      <item>
        <title>[C++] Challenge: Make a call to a non-public member function</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[code=cpp]<span class="hashtag">#include</span> </p>
<p>class A<br>
{<br>
public:<br>
A(unsigned int i)<br>
{<br>
m_i = i;<br>
}</p>
<pre><code>    ~A(void)
    {

    }
</code></pre>
<p>protected:<br>
void function(void)<br>
{<br>
std::cout &lt;&lt; "A " &lt;&lt; m_i &lt;&lt; std::endl;<br>
}</p>
<p>private:<br>
unsigned int m_i;<br>
};</p>
<p>class B : public A {<br>
public:<br>
B(int a) : A(a) { }<br>
void call_fn() { this-&gt;function(); }<br>
};</p>
<p>int main(void)<br>
{<br>
A a(200);</p>
<pre><code>    //Make a call to a.function().
    B b(200);
    b.call_fn();

    std::cin.sync();
    std::cin.get();
    return 0;
</code></pre>
<p>}[/code]<br>
ambiguous rules, i’m assuming inheritance is allowed.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/4</link>
        <pubDate>Sat, 17 Dec 2011 16:27:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425610-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss">[C++] Challenge: Make a call to a non-public member function</source>
      </item>
      <item>
        <title>[C++] Challenge: Make a call to a non-public member function</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:2, topic:425610”][code=java]<br>
class b : public A {</p>
<p>}</p>
<p>// …<br>
b.function();<br>
[/code][/quote]</p>
<p>What is this supposed to be? lol.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/3</link>
        <pubDate>Sat, 17 Dec 2011 10:38:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425610-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss">[C++] Challenge: Make a call to a non-public member function</source>
      </item>
      <item>
        <title>[C++] Challenge: Make a call to a non-public member function</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">class b : public A {

}

// ...
b.function();</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/2</link>
        <pubDate>Sat, 17 Dec 2011 10:00:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425610-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss">[C++] Challenge: Make a call to a non-public member function</source>
      </item>
      <item>
        <title>[C++] Challenge: Make a call to a non-public member function</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>Here’s a C++ challenge that I came up with a while ago. Posted it on MITB as well.</p>
<pre><code class="lang-auto">#include &lt;iostream&gt;

class A
{
public:
	A(unsigned int i)
	{
		m_i = i;
	}

	~A(void)
	{

	}

protected:
	void function(void)
	{
		std::cout &lt;&lt; "A " &lt;&lt; m_i &lt;&lt; std::endl;
	}

private:
	unsigned int m_i;
};

int main(void)
{
	A a(200);	
	//Make a call to a.function().

	std::cin.sync();
	std::cin.get();
	return 0;
}</code></pre>
<p>You will have to make a successful function call to a.function().</p>
<p>Rules:</p>
<ol>
<li>Do not modify class A.</li>
<li>The function call must be made directly from the main function.</li>
<li>Write only standard C++ code.</li>
<li>No inline asm.</li>
</ol>
<p>I’ll be posting my solution later, let’s see if any of you can come up with one.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610/1</link>
        <pubDate>Sat, 17 Dec 2011 09:02:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425610-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-challenge-make-a-call-to-a-non-public-member-function/425610.rss">[C++] Challenge: Make a call to a non-public member function</source>
      </item>
  </channel>
</rss>
