<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Downloading Cache</title>
    <link>https://forum.moparisthebest.com/t/downloading-cache/509372</link>
    <description>My Cache downloader doesnt do anything..
I open the client, and it gets stuck at &quot;Loading blabla&quot;

Hers my cache downloader

[code]package epicurus;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;


public class CacheDownloader
{

	public Client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 26;
	public String cacheLink = &quot;http://penthium.org/cache.zip&quot;;
	public String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(Client client) {
		this.client = client;
	}

	public void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}

	public void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	public String getCacheDir() {
		return SignLink.findcachedir();
	}

	public String getCacheLink() {
		return cacheLink;
	}

	public int getCacheVersion() {
		return VERSION;
	}
	
	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;);
		if(!location.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			if(!version.exists()) {
				//delete(getCacheDir());
				downloadFile(getCacheLink(), getArchivedName());
				unZip();
				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteDownloadedZipFile(getArchivedName());
			} else {
				return null;
			}
		}
		} catch(Exception e) {
		}
		return null;
	}
	
	public void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
			conn = url.openConnection();
			in = conn.getInputStream(); 
			byte[] data = new byte[BUFFER]; 
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
            int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
			}
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	public String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
		}
		return &quot;&quot;;
	}
	
	public void deleteDownloadedZipFile(String fileName) {
		File f = new File(getCacheDir() + fileName);
		if (!f.exists())
			throw new IllegalArgumentException(&quot;Delete: no such file or directory: &quot; + fileName);
		if (!f.canWrite())
			throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + fileName);
		if (f.isDirectory()) {
			String[] files = f.list();
		if (files.length &gt; 0)
			throw new IllegalArgumentException(&quot;Delete: directory not empty: &quot; + fileName);
		}
		boolean success = f.delete();
		if (!success)
			throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
	}
	
	public static boolean delete( String path ) {
		if (path == null || path.trim().length() == 0) 
		return false;
		return delete(new File(path));
	}

	public static boolean delete( File fileOrDirectory ) {
		if (fileOrDirectory == null) return false;
		if (!fileOrDirectory.exists()) return false;
		if (fileOrDirectory.isDirectory()) {
			for (File childFile : fileOrDirectory.listFiles()) {
				delete(childFile);
			}
		}
		return fileOrDirectory.delete();
	}

	public void unZip() {
		try {
    		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;
			while((e=zin.getNextEntry()) != null) {
               	if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               	} else {
				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
					unzip(zin, getCacheDir() + e.getName());
				}
			}
			zin.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void unzip(ZipInputStream zin, String s) throws IOException {
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len = 0;
		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}

	public boolean checkCache(boolean corruptCache) {
		return false;
	}


}[/code]

Heres my Signlink

[code]package epicurus;

import java.applet.Applet;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.RandomAccessFile;
import java.net.InetAddress;
import java.net.Socket;
import java.net.URL;

public final class SignLink
implements Runnable
{

public static void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new SignLink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public static void setuid() {
uid = 26342;
}
public void run()
{
    active = true;
    String s = findcachedir();
   // uid = getuid(s);
   uid = 26342;
    try {
        cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
        for(int j = 0; j &lt; 5; j++) {
            cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
		}
    } catch(Exception exception) {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = &quot;unknown&quot;;
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println(&quot;urlstream&quot;);
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}

public static String findcachedir() {
    String as[] = {&quot;C:/&quot;};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = &quot;abc&quot;;
    for(int i = 0; i &lt; as.length; i++)
        try {
            String s1 = as[i];
            if(s1.length() &gt; 0) {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + &quot;/&quot;;
        }
        catch(Exception _ex) { }
    return null;
}

public static int getuid(String s) {
return 26342;
}

/* private static int getuid(String s)
{
    try
    {
        File file = new File(s + &quot;uid.dat&quot;);
        if(!file.exists() || file.length() &lt; 4L)
        {
            DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + &quot;uid.dat&quot;));
            dataoutputstream.writeInt((int)(Math.random() * 99999999D));
            dataoutputstream.close();
        }
    }
    catch(Exception _ex) { }
    try
    {
        DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + &quot;uid.dat&quot;));
        int i = datainputstream.readInt();
        datainputstream.close();
        return i + 1;
    }
    catch(Exception _ex)
    {
        return 0;
    }
}*/

public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException(&quot;could not open socket&quot;);
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException(&quot;could not open: &quot; + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
        return true;
    }*/
	return false;
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
    }*/
}

public static void reporterror(String s)
{
    System.out.println(&quot;Error: &quot; + s);
}

private SignLink()
{
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = &quot;&quot;;

}
[/code]

Help please..</description>
    
    <lastBuildDate>Fri, 22 Mar 2013 17:13:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/downloading-cache/509372.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Downloading Cache</title>
        <dc:creator><![CDATA[@Lirimoo Lirimoo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lirimoo">@Lirimoo</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="509372">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/arcik/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Arcik:</div>
<blockquote>
<p>ur auto cache is supposed to be called in client.java?</p>
</blockquote>
</aside>
<p>I added you on Skype, would mind helping ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/downloading-cache/509372/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/downloading-cache/509372/3</link>
        <pubDate>Fri, 22 Mar 2013 17:13:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-509372-3</guid>
        <source url="https://forum.moparisthebest.com/t/downloading-cache/509372.rss">Downloading Cache</source>
      </item>
      <item>
        <title>Downloading Cache</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>ur auto cache is supposed to be called in client.java?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/downloading-cache/509372/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/downloading-cache/509372/2</link>
        <pubDate>Fri, 22 Mar 2013 16:57:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-509372-2</guid>
        <source url="https://forum.moparisthebest.com/t/downloading-cache/509372.rss">Downloading Cache</source>
      </item>
      <item>
        <title>Downloading Cache</title>
        <dc:creator><![CDATA[@Lirimoo Lirimoo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lirimoo">@Lirimoo</a> wrote:</p>
          <blockquote>
              <p>My Cache downloader doesnt do anything…<br>
I open the client, and it gets stuck at “Loading blabla”</p>
<p>Hers my cache downloader</p>
<p>[code]package epicurus;</p>
<p>import java.io.BufferedInputStream;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedWriter;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileWriter;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.io.OutputStream;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>public class CacheDownloader<br>
{</p>
<pre><code>public Client client;
public final int BUFFER = 1024;
public static final int VERSION = 26;
public String cacheLink = "http://penthium.org/cache.zip";
public String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(Client client) {
	this.client = client;
}

public void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}

public void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

public String getCacheDir() {
	return SignLink.findcachedir();
}

public String getCacheLink() {
	return cacheLink;
}

public int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat");
	if(!location.exists()) {
		//delete(getCacheDir());
		downloadFile(getCacheLink(), getArchivedName());
		unZip();
		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteDownloadedZipFile(getArchivedName());
	} else {
		if(!version.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			return null;
		}
	}
	} catch(Exception e) {
	}
	return null;
}

public void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" +localFileName)); 
		conn = url.openConnection();
		in = conn.getInputStream(); 
		byte[] data = new byte[BUFFER]; 
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
        int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
		}
		drawLoadingText("Finished downloading "+getArchivedName()+"!");
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

public String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
	}
	return "";
}

public void deleteDownloadedZipFile(String fileName) {
	File f = new File(getCacheDir() + fileName);
	if (!f.exists())
		throw new IllegalArgumentException("Delete: no such file or directory: " + fileName);
	if (!f.canWrite())
		throw new IllegalArgumentException("Delete: write protected: " + fileName);
	if (f.isDirectory()) {
		String[] files = f.list();
	if (files.length &gt; 0)
		throw new IllegalArgumentException("Delete: directory not empty: " + fileName);
	}
	boolean success = f.delete();
	if (!success)
		throw new IllegalArgumentException("Delete: deletion failed");
}

public static boolean delete( String path ) {
	if (path == null || path.trim().length() == 0) 
	return false;
	return delete(new File(path));
}

public static boolean delete( File fileOrDirectory ) {
	if (fileOrDirectory == null) return false;
	if (!fileOrDirectory.exists()) return false;
	if (fileOrDirectory.isDirectory()) {
		for (File childFile : fileOrDirectory.listFiles()) {
			delete(childFile);
		}
	}
	return fileOrDirectory.delete();
}

public void unZip() {
	try {
		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;
		while((e=zin.getNextEntry()) != null) {
           	if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           	} else {
			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
				unzip(zin, getCacheDir() + e.getName());
			}
		}
		zin.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public void unzip(ZipInputStream zin, String s) throws IOException {
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len = 0;
	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}

public boolean checkCache(boolean corruptCache) {
	return false;
}
</code></pre>
<p>}[/code]</p>
<p>Heres my Signlink</p>
<p>[code]package epicurus;</p>
<p>import java.applet.Applet;<br>
import java.io.DataInputStream;<br>
import java.io.File;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.io.RandomAccessFile;<br>
import java.net.InetAddress;<br>
import java.net.Socket;<br>
import java.net.URL;</p>
<p>public final class SignLink<br>
implements Runnable<br>
{</p>
<p>public static void startpriv(InetAddress inetaddress)<br>
{<br>
threadliveid = (int)(Math.random() * 99999999D);<br>
if(active)<br>
{<br>
try<br>
{<br>
Thread.sleep(500L);<br>
}<br>
catch(Exception _ex) { }<br>
active = false;<br>
}<br>
socketreq = 0;<br>
threadreq = null;<br>
dnsreq = null;<br>
savereq = null;<br>
urlreq = null;<br>
socketip = inetaddress;<br>
Thread thread = new Thread(new SignLink());<br>
thread.setDaemon(true);<br>
thread.start();<br>
while(!active)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }<br>
}</p>
<p>public static void setuid() {<br>
uid = 26342;<br>
}<br>
public void run()<br>
{<br>
active = true;<br>
String s = findcachedir();<br>
// uid = getuid(s);<br>
uid = 26342;<br>
try {<br>
cache_dat = new RandomAccessFile(s + “main_file_cache.dat”, “rw”);<br>
for(int j = 0; j &lt; 5; j++) {<br>
cache_idx[j] = new RandomAccessFile(s + “main_file_cache.idx” + j, “rw”);<br>
}<br>
} catch(Exception exception) {<br>
exception.printStackTrace();<br>
}<br>
for(int i = threadliveid; threadliveid == i;)<br>
{<br>
if(socketreq != 0)<br>
{<br>
try<br>
{<br>
socket = new Socket(socketip, socketreq);<br>
}<br>
catch(Exception _ex)<br>
{<br>
socket = null;<br>
}<br>
socketreq = 0;<br>
} else<br>
if(threadreq != null)<br>
{<br>
Thread thread = new Thread(threadreq);<br>
thread.setDaemon(true);<br>
thread.start();<br>
thread.setPriority(threadreqpri);<br>
threadreq = null;<br>
} else<br>
if(dnsreq != null)<br>
{<br>
try<br>
{<br>
dns = InetAddress.getByName(dnsreq).getHostName();<br>
}<br>
catch(Exception _ex)<br>
{<br>
dns = “unknown”;<br>
}<br>
dnsreq = null;<br>
} else<br>
if(savereq != null)<br>
{<br>
if(savebuf != null)<br>
try<br>
{<br>
FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);<br>
fileoutputstream.write(savebuf, 0, savelen);<br>
fileoutputstream.close();<br>
}<br>
catch(Exception _ex) { }<br>
if(waveplay)<br>
{<br>
waveplay = false;<br>
}<br>
if(midiplay)<br>
{<br>
midi = s + savereq;<br>
midiplay = false;<br>
}<br>
savereq = null;<br>
} else<br>
if(urlreq != null)<br>
{<br>
try<br>
{<br>
System.out.println(“urlstream”);<br>
urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());<br>
}<br>
catch(Exception _ex)<br>
{<br>
urlstream = null;<br>
}<br>
urlreq = null;<br>
}<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }<br>
}</p>
<p>}</p>
<p>public static String findcachedir() {<br>
String as[] = {“C:/”};<br>
if(storeid &lt; 32 || storeid &gt; 34)<br>
storeid = 32;<br>
String s = “abc”;<br>
for(int i = 0; i &lt; as.length; i++)<br>
try {<br>
String s1 = as[i];<br>
if(s1.length() &gt; 0) {<br>
File file = new File(s1);<br>
if(!file.exists())<br>
continue;<br>
}<br>
File file1 = new File(s1 + s);<br>
if(file1.exists() || file1.mkdir())<br>
return s1 + s + “/”;<br>
}<br>
catch(Exception _ex) { }<br>
return null;<br>
}</p>
<p>public static int getuid(String s) {<br>
return 26342;<br>
}</p>
<p>/* private static int getuid(String s)<br>
{<br>
try<br>
{<br>
File file = new File(s + “uid.dat”);<br>
if(!file.exists() || file.length() &lt; 4L)<br>
{<br>
DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + “uid.dat”));<br>
dataoutputstream.writeInt((int)(Math.random() * 99999999D));<br>
dataoutputstream.close();<br>
}<br>
}<br>
catch(Exception _ex) { }<br>
try<br>
{<br>
DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + “uid.dat”));<br>
int i = datainputstream.readInt();<br>
datainputstream.close();<br>
return i + 1;<br>
}<br>
catch(Exception _ex)<br>
{<br>
return 0;<br>
}<br>
}*/</p>
<p>public static synchronized Socket opensocket(int i)<br>
throws IOException<br>
{<br>
for(socketreq = i; socketreq != 0;)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }</p>
<pre><code>if(socket == null)
    throw new IOException("could not open socket");
else
    return socket;
</code></pre>
<p>}</p>
<p>public static synchronized DataInputStream openurl(String s)<br>
throws IOException<br>
{<br>
for(urlreq = s; urlreq != null;)<br>
try<br>
{<br>
Thread.sleep(50L);<br>
}<br>
catch(Exception _ex) { }</p>
<pre><code>if(urlstream == null)
    throw new IOException("could not open: " + s);
else
    return urlstream;
</code></pre>
<p>}</p>
<p>public static synchronized void dnslookup(String s)<br>
{<br>
dns = s;<br>
dnsreq = s;<br>
}</p>
<p>public static synchronized void startthread(Runnable runnable, int i)<br>
{<br>
threadreqpri = i;<br>
threadreq = runnable;<br>
}</p>
<p>public static synchronized boolean wavesave(byte abyte0[], int i)<br>
{<br>
/<em>if(i &gt; 0x1e8480)<br>
return false;<br>
if(savereq != null)<br>
{<br>
return false;<br>
} else<br>
{<br>
wavepos = (wavepos + 1) % 5;<br>
savelen = i;<br>
savebuf = abyte0;<br>
waveplay = true;<br>
savereq = “sound” + wavepos + “.wav”;<br>
return true;<br>
}</em>/<br>
return false;<br>
}</p>
<p>public static synchronized boolean wavereplay()<br>
{<br>
if(savereq != null)<br>
{<br>
return false;<br>
} else<br>
{<br>
savebuf = null;<br>
waveplay = true;<br>
savereq = “sound” + wavepos + “.wav”;<br>
return true;<br>
}<br>
}</p>
<p>public static synchronized void midisave(byte abyte0[], int i)<br>
{<br>
/<em>if(i &gt; 0x1e8480)<br>
return;<br>
if(savereq != null)<br>
{<br>
} else<br>
{<br>
midipos = (midipos + 1) % 5;<br>
savelen = i;<br>
savebuf = abyte0;<br>
midiplay = true;<br>
savereq = “jingle” + midipos + “.mid”;<br>
}</em>/<br>
}</p>
<p>public static void reporterror(String s)<br>
{<br>
System.out.println("Error: " + s);<br>
}</p>
<p>private SignLink()<br>
{<br>
}</p>
<p>public static final int clientversion = 317;<br>
public static int uid;<br>
public static int storeid = 32;<br>
public static RandomAccessFile cache_dat = null;<br>
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];<br>
public static boolean sunjava;<br>
public static Applet mainapp = null;<br>
private static boolean active;<br>
private static int threadliveid;<br>
private static InetAddress socketip;<br>
private static int socketreq;<br>
private static Socket socket = null;<br>
private static int threadreqpri = 1;<br>
private static Runnable threadreq = null;<br>
private static String dnsreq = null;<br>
public static String dns = null;<br>
private static String urlreq = null;<br>
private static DataInputStream urlstream = null;<br>
private static int savelen;<br>
private static String savereq = null;<br>
private static byte[] savebuf = null;<br>
private static boolean midiplay;<br>
public static String midi = null;<br>
public static int midivol;<br>
public static int midifade;<br>
private static boolean waveplay;<br>
private static int wavepos;<br>
public static int wavevol;<br>
public static boolean reporterror = true;<br>
public static String errorname = “”;</p>
<p>}<br>
[/code]</p>
<p>Help please…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/downloading-cache/509372/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/downloading-cache/509372/1</link>
        <pubDate>Fri, 22 Mar 2013 16:32:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-509372-1</guid>
        <source url="https://forum.moparisthebest.com/t/downloading-cache/509372.rss">Downloading Cache</source>
      </item>
  </channel>
</rss>
