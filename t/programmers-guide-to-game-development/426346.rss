<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Programmers&#39; Guide to Game Development</title>
    <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346</link>
    <description>http://gamedev.moparisthebest.com/smf/index.php/topic,528982.msg3859414/boardseen.html

[b]My Introduction[/b]
Hello, I am lemme_winks_, and this is my [i]Programmers&#39; Guide to Game Development[/i].  I applaud criticism from anybody. I am sorry for any grammar mistakes.  I am trying my best.

if you don&#39;t like my tutorials, look at these:

www.loomsoft.net/resources/alltut/alltut_index.htm
http://www.sfml-dev.org/tutorials/ (sfml tutorials)
http://www.lazyfoo.net (sdl tutorials)
http://www.sdltutorials.com (sdl tutorials)
http://www.videotutorialsrock.com/ (openGL tutorials)

My goal is to teach somebody that has no idea where to begin in game development, begin WRITING their own games, their own game development software (like a level-editor), and a basic framework you can use and reuse for each game you make.  I&#39;ve been writing my own games for almost 3 years, and while I can agree I am no where near a professional, I can also argue that I have enough experience to show someone who has absolutely no idea what to do, what to do.

This guide also teaches you how to use documentation :D.

[b]Now For The Introduction[/b]
Let me get one thing straight, in this tutorial, you will not be using any kind of game development software.  If you want to go far in game development, you need to write your own software, and your own game.  Some examples of game-development software would be: RPG Maker, Game Maker, FPS Creator, etc.  

While it is perfectly fine to experiment with this software, you will not gain any in-depth, low-level knowledge of game development.   You might get a grasp on how to design games, and use level-editors, and package game data, and you MIGHT even be able to sell your game, giving 99% of the creators of the game development software you are using, but you are not experiencing the true complex proccess of writing your own games.  

Game development is the hardest form of programming today, and it takes literally years to make games like World of Warcraft, Runescape, Call of Duty, and Battlefield.  The companies that write these games don&#39;t use RPG Maker or Game Maker, they write them, like bad asses.  To write games like these, you need teams of the masses, and some money, but because you are by yourself, we will be focusing on making little games, like Pong, or Tic-Tac-Toe.

[b]What programming language are we going to use?[/b]
If you want to write games, you need 3 things, a programming language, a game-specific library/API, and a compiler.  You might even want to use an IDE for simplicity and organization, but in this tutorial, we will not be using an IDE.  You need to ask yourself: what programming language do I want to use to write these games?  There are probably a few that come to your mind.  C++, Java, and C#, are all examples of multi-purpose languges you can use.  In this tutorial, we will be using C++.  So if you chose something other than C++, I can only ask you to read the next few paragraphs, and you might want to search for another tutorial.

One more important thing before I should let you move on - You NEED to be HIV+ that you are competent with the programming language you chose.  If you already are, then that&#39;s great.  If you aren&#39;t, then all I can say is get a book or read a tutorial online.  You can&#39;t write your own games if you don&#39;t know how to use your programming language first!  Must I recap, game development is the hardest form of programming out there, and this tutorial is only explaining game development using C++, so FYI: you need to know C++.

here is a simple test to see if you are ready to move on.

1 - what is the value of i?
[code]
static int i;
[/code]

2 - what does this function do?
[code]
void f(int &amp;i1, int &amp;i2) {
  i1 = (i1 ^ i2);
  i2 = (i1 ^ i2);
  i1 = (i1 ^ i2);
}
[/code]

3 - what would be the value of [i]int f(int)[/i] if [i]int i[/i] == 6?
[code]
int f(int i) {
  return (i &amp; 1);
}
[/code]

4 -  what is the value of p?
[code]
    static int p;
    int &amp;q = p;
    q = (q - p);
[/code]

that&#39;s all i can think of right now.  those questions are pretty easy and they don&#39;t cover everything you should know.  here is a basic list of what you need to know:

object-oriented design
polymorphism
inheritence
arrays
pointers
references
recursion
basic algorithims
operators

[b]Which game-specific API/library should I use?[/b]
There are a lot of APIs and libraries out there that you can use.  I&#39;ve only experimented with about four, and those four are:

SDL - libsdl.org
SFML - sfml-dev.org
Allegro - http://alleg.sourceforge.net/
DirectX - http://msdn.microsoft.com/en-us/directx/aa937781
XNA - http://msdn.microsoft.com/en-us/aa937791

Even though DirectX and XNA are big in the game development industry, I am no where near good with them because I don&#39;t even use windows (fedora ftw), and because SDL is extremely portable, we will use that.  I think a lot of schools teach DirectX, so if you want to be professional, look into that.  I should also suggest OpenGL rather than DirectX, because OpenGL is very portable, and a lot of game companies use their own game-specific API + OpenGL rendering to get what they and everybody else wants.

To recap, we will be using SDL and C++ in this tutorial.

[b]C++ compiler?[/b]
yes.

Now to finally begin!

[b]Part 1 of this tutorial: Creating a screen.[/b]
To help you, please read all documentation I provide, with links, so you don&#39;t get lost.

First off, we need to allow our main.cc file to have access to the SDL functions.  They are declared/included in SDL.h.  So locate SDL.h in your computer, and include it in your main.cc file.

PS: If you do not know how to include a header file, where ever it may be, this tutorial is not for you.

There are these neat little functions called SDL_Init and SDL_InitSubSystem. 

http://sdl.beuc.net/sdl.wiki/SDL_Init
http://sdl.beuc.net/sdl.wiki/SDL_InitSubSystem

To initialize all SDL sub-systems, we need to called SDL_Init with the flag [i]SDL_INIT_EVERYTHING[/i]
[code]
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    SDL_Init(SDL_INIT_EVERYTHING);
    return 0;
}
[/code]

there is a way to check if SDL_Init was called successfully.  It returns an integral value.  We can optimize our code like so:

[code]
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        return 1;
    }

    return 0;
}
[/code]

&lt;blockquote&gt;You can get extended error message by calling SDL_GetError.&lt;/blockquote&gt;

Using this piece of information, we can optimize our code, again:

[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    return 0;
}
[/code]

Don&#39;t run this code yet.  You are allocating memory that you have not declared to be deallocated later on in the program.  To do this, we can use SDL_Quit(), which shuts down every sub-system you initialized.  If you used SDL_InitSubSystem, you can use SDL_QuitSubSystem to shut down a specific sub-system, rather than all of them, an example:

[code]
SDL_InitSubSystem(SDL_INIT_VIDEO);
SDL_QuitSubSystem(SDL_INIT_VIDEO);
[/code]

http://sdl.beuc.net/sdl.wiki/SDL_Quit
http://sdl.beuc.net/sdl.wiki/SDL_QuitSubSystem

So to optimize our code:

[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    return 0;
}
[/code]

now we have successfully initialized and de-initialized SDL.  now lets make a screen. 
[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;
int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = NULL;

    return 0;
}
[/code]

in the code above, you may see something you haven&#39;t seen yet.  SDL_Surface *.  (declare it NULL because it&#39;s a pointer or just make it static.)

[code]
typedef struct SDL_Surface SDL_Surface;
[/code]

We can use surfaces as a buffer for images, text, and for other surfaces.  We want to turn our surface into a screen acting as a buffer for other surfaces.  To do this, we can use SDL_SetVideoMode

http://sdl.beuc.net/sdl.wiki/SDL_SetVideoMode

Lets do it.

[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);

    return 0;
}
[/code]

This will create a window with a width of 800, a height of 600, and using 32 bits-per-pixel, passing in HW_SURFACE, so we created the surface in video memory.  with this example as an exception, when you load images, text, or other optimized surfaces onto another surface, you still need to deallocate the memory used by that surface.  We can do this by using SDL_FreeSurface(SDL_Surface *);

http://sdl.beuc.net/sdl.wiki/SDL_FreeSurface

An example:

[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);
    SDL_Surface *test = SDL_DisplayFormat(another_loaded_surface);
    SDL_FreeSurface(test);
    return 0;
}
[/code]

Freeing [i]another_loaded_surface[/i] is assumed to be done elsewhere.

We have created a screen :), but if you run it, the screen goes away :(.  We can get it to stay up there, that is, before we call SDL_Quit, by using SDL_Delay(Uint32 ms);

http://sdl.beuc.net/sdl.wiki/SDL_Delay

So to optimize our code:

[code]
#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, &quot;%s\n&quot;, SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);
    SDL_Delay(5000); // wait 5 seconds (5000 milliseconds) before continuing

    return 0;
}
[/code]

There you have it -- a blank screen that stays there for 5 seconds and then goes away.</description>
    
    <lastBuildDate>Mon, 06 Feb 2012 15:51:10 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>SDL isn’t meant to be low-level. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> Since it’s platform-independent, it has to be organized like Java as a high-level API. Low-level and platform-independent are rather difficult to have together. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/11</link>
        <pubDate>Mon, 06 Feb 2012 15:51:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-11</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@lemme_winks lemme_winks_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lemme_winks">@lemme_winks</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="426346">
<div class="title">
<div class="quote-controls"></div>
 Taharok:</div>
<blockquote>
<p>People are generally divided on how to start off game development. I would recommend you spend time learning higher level APIs, rather than spend a few years learning how the bare essentials work</p>
</blockquote>
</aside>
<p>the only thing that is low-level in sdl is it’s sound system and that has been backed by the SDL_Mixer library.  none of what i said explains “the bare essentials” of game development are, because this tutorial explains what a few recommended APIs/libraries like directx and openGL for “job-hunters”, and SDL, XNA, Allegro, SFML for hobbyists.  i never recommended any pre-made engines (which would have been a good idea), but oh well.</p>
<blockquote>(especially when you'll never use them in real game production). To be honest, it's only worth learning the low level stuff for shits and giggles, not to actually build a game. It's simply inefficient.</blockquote>
you're mostly right about this, and actually, a lot of companies straight up program their own games with directX and openGL (amnesia developers, and infinity ward).  then again, there are some companies that use pre-made engines like Unity and Unreal, making development rather easier.
<p><a href="http://en.wikipedia.org/wiki/List_of_Unreal_Engine_games" rel="nofollow noopener">http://en.wikipedia.org/wiki/List_of_Unreal_Engine_games</a> - you can probably point out at least 10 titles you’ve seen in commercials or stores, making big bucks.</p>
<p>edit: i’m a hobbyist <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/10</link>
        <pubDate>Sat, 24 Dec 2011 21:26:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-10</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@MistaBigBoss MistaBigBoss]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mistabigboss">@MistaBigBoss</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:8, topic:426346”]People are generally divided on how to start off game development. I would recommend you spend time learning higher level APIs, rather than spend a few years learning how the bare essentials work (especially when you’ll never use them in real game production). To be honest, it’s only worth learning the low level stuff for shits and giggles, not to actually build a game. It’s simply inefficient.</p>
<p>As to feeling “uncomfortable” about using another person’s library, I have this to say: even if you spent a decade building your own low-level graphics library or a few years building an entire game toolkit and engine, you probably aren’t going to do better than the teams of people working on OpenGL, the LWJGL/JOGL bindings, Slick, JME, Unity, etc. Just use them, to be honest. :P[/quote]^^^</p>
<p>If you’re looking for quality PRODUCTS, use 3rd party software, if you’re looking for being a badass, make you’re own software.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/9</link>
        <pubDate>Sat, 24 Dec 2011 21:18:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-9</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>People are generally divided on how to start off game development. I would recommend you spend time learning higher level APIs, rather than spend a few years learning how the bare essentials work (especially when you’ll never use them in real game production). To be honest, it’s only worth learning the low level stuff for shits and giggles, not to actually build a game. It’s simply inefficient.</p>
<p>As to feeling “uncomfortable” about using another person’s library, I have this to say: even if you spent a decade building your own low-level graphics library or a few years building an entire game toolkit and engine, you probably aren’t going to do better than the teams of people working on OpenGL, the LWJGL/JOGL bindings, Slick, JME, Unity, etc. Just use them, to be honest. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/8</link>
        <pubDate>Sat, 24 Dec 2011 20:18:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-8</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@sppt sppt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sppt">@sppt</a> wrote:</p>
          <blockquote>
              <p>[quote=“lemme_winks_, post:6, topic:426346”][quote author=sppt link=topic=529040.msg3860703#msg3860703 date=1324658047]<br>
Mostly because I think you should focus on getting knowledge on how to do specific stuff, like collision detection and such.<br>
[/quote]</p>
<p>i’m not certain, but doesn’t java have a rectangle class that makes stuff like collision detection particularly easier?[/quote]<br>
Sure, but that was just an example.<br>
I think it’s better to nail down how to do game mechanics first before doing it in C++, since it’s generally easier to do in Java/C#</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/7</link>
        <pubDate>Sat, 24 Dec 2011 19:17:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-7</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@lemme_winks lemme_winks_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lemme_winks">@lemme_winks</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="426346">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/sppt/40/44_1.png" class="avatar"> sppt:</div>
<blockquote>
<p>Mostly because I think you should focus on getting knowledge on how to do specific stuff, like collision detection and such.</p>
</blockquote>
</aside>
<p>i’m not certain, but doesn’t java have a rectangle class that makes stuff like collision detection particularly easier?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/6</link>
        <pubDate>Sat, 24 Dec 2011 07:39:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-6</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@sppt sppt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sppt">@sppt</a> wrote:</p>
          <blockquote>
              <p>[quote=“lemme_winks_, post:3, topic:426346”][quote author=Davidi2 link=topic=529040.msg3859627#msg3859627 date=1324592619]<br>
Well no, you don’t need a game specific library or API,<br>
[/quote]<br>
care to elaborate?[/quote]<br>
He probably means you can use stuff like Java’s Graphics2D to make a game, which provides the bare essentials for making a game.</p>
<p>Also, I’d personally not recommend making your first game in C++, but that’s me.<br>
Mostly because I think you should focus on getting knowledge on how to do specific stuff, like collision detection and such.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/5</link>
        <pubDate>Fri, 23 Dec 2011 16:34:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-5</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@JustChillBro JustChillBro]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/justchillbro">@JustChillBro</a> wrote:</p>
          <blockquote>
              <p>Thanks for the tutorial! <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"><br>
Once again, you are a very big help. <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/4</link>
        <pubDate>Fri, 23 Dec 2011 08:46:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-4</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@lemme_winks lemme_winks_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lemme_winks">@lemme_winks</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="426346">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>Well no, you don’t need a game specific library or API,</p>
</blockquote>
</aside>
<p>care to elaborate?</p>
<blockquote>and you should always be using an IDE</blockquote>
i said "for this tutorial" and if you scroll down, it says "Part 1: Creating a screen" or something like that.  no need for an IDE for this, but you are mostly right.  i use QT creator for almost any project i do, and a text editor for scratch, like this.
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/3</link>
        <pubDate>Thu, 22 Dec 2011 22:44:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-3</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>Just read the first few parts:<br>
What programming language are we going to use?<br>
If you want to write games, you need 3 things, a programming language, a game-specific library/API, and a compiler.  You might even want to use an IDE for simplicity and organization, but in this tutorial, we will not be using an IDE.</p>
<p>Well no, you don’t need a game specific library or API, and you should always be using an IDE</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/2</link>
        <pubDate>Thu, 22 Dec 2011 22:23:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-2</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
      <item>
        <title>Programmers&#39; Guide to Game Development</title>
        <dc:creator><![CDATA[@lemme_winks lemme_winks_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lemme_winks">@lemme_winks</a> wrote:</p>
          <blockquote>
              <p><a href="http://gamedev.moparisthebest.com/smf/index.php/topic,528982.msg3859414/boardseen.html" class="onebox" target="_blank" rel="nofollow noopener">http://gamedev.moparisthebest.com/smf/index.php/topic,528982.msg3859414/boardseen.html</a></p>
<p><span class="bbcode-b">My Introduction</span><br>
Hello, I am lemme_winks_, and this is my <span class="bbcode-i">Programmers’ Guide to Game Development</span>.  I applaud criticism from anybody. I am sorry for any grammar mistakes.  I am trying my best.</p>
<p>if you don’t like my tutorials, look at these:</p>
<p><a href="http://www.loomsoft.net/resources/alltut/alltut_index.htm" class="onebox" target="_blank" rel="nofollow noopener">www.loomsoft.net/resources/alltut/alltut_index.htm</a><br>
<a href="http://www.sfml-dev.org/tutorials/" rel="nofollow noopener">http://www.sfml-dev.org/tutorials/</a> (sfml tutorials)<br>
<a href="http://www.lazyfoo.net" rel="nofollow noopener">http://www.lazyfoo.net</a> (sdl tutorials)<br>
<a href="http://www.sdltutorials.com" rel="nofollow noopener">http://www.sdltutorials.com</a> (sdl tutorials)<br>
<a href="http://www.videotutorialsrock.com/" rel="nofollow noopener">http://www.videotutorialsrock.com/</a> (openGL tutorials)</p>
<p>My goal is to teach somebody that has no idea where to begin in game development, begin WRITING their own games, their own game development software (like a level-editor), and a basic framework you can use and reuse for each game you make.  I’ve been writing my own games for almost 3 years, and while I can agree I am no where near a professional, I can also argue that I have enough experience to show someone who has absolutely no idea what to do, what to do.</p>
<p>This guide also teaches you how to use documentation :D.</p>
<p><span class="bbcode-b">Now For The Introduction</span><br>
Let me get one thing straight, in this tutorial, you will not be using any kind of game development software.  If you want to go far in game development, you need to write your own software, and your own game.  Some examples of game-development software would be: RPG Maker, Game Maker, FPS Creator, etc.</p>
<p>While it is perfectly fine to experiment with this software, you will not gain any in-depth, low-level knowledge of game development.   You might get a grasp on how to design games, and use level-editors, and package game data, and you MIGHT even be able to sell your game, giving 99% of the creators of the game development software you are using, but you are not experiencing the true complex proccess of writing your own games.</p>
<p>Game development is the hardest form of programming today, and it takes literally years to make games like World of Warcraft, Runescape, Call of Duty, and Battlefield.  The companies that write these games don’t use RPG Maker or Game Maker, they write them, like bad asses.  To write games like these, you need teams of the masses, and some money, but because you are by yourself, we will be focusing on making little games, like Pong, or Tic-Tac-Toe.</p>
<p><span class="bbcode-b">What programming language are we going to use?</span><br>
If you want to write games, you need 3 things, a programming language, a game-specific library/API, and a compiler.  You might even want to use an IDE for simplicity and organization, but in this tutorial, we will not be using an IDE.  You need to ask yourself: what programming language do I want to use to write these games?  There are probably a few that come to your mind.  C++, Java, and C#, are all examples of multi-purpose languges you can use.  In this tutorial, we will be using C++.  So if you chose something other than C++, I can only ask you to read the next few paragraphs, and you might want to search for another tutorial.</p>
<p>One more important thing before I should let you move on - You NEED to be HIV+ that you are competent with the programming language you chose.  If you already are, then that’s great.  If you aren’t, then all I can say is get a book or read a tutorial online.  You can’t write your own games if you don’t know how to use your programming language first!  Must I recap, game development is the hardest form of programming out there, and this tutorial is only explaining game development using C++, so FYI: you need to know C++.</p>
<p>here is a simple test to see if you are ready to move on.</p>
<p>1 - what is the value of i?</p>
<pre><code class="lang-auto">static int i;</code></pre>
<p>2 - what does this function do?</p>
<pre><code class="lang-auto">void f(int &amp;i1, int &amp;i2) {
  i1 = (i1 ^ i2);
  i2 = (i1 ^ i2);
  i1 = (i1 ^ i2);
}</code></pre>
<p>3 - what would be the value of <span class="bbcode-i">int f(int)</span> if <span class="bbcode-i">int i</span> == 6?</p>
<pre><code class="lang-auto">int f(int i) {
  return (i &amp; 1);
}</code></pre>
<p>4 -  what is the value of p?</p>
<pre><code class="lang-auto">    static int p;
    int &amp;q = p;
    q = (q - p);</code></pre>
<p>that’s all i can think of right now.  those questions are pretty easy and they don’t cover everything you should know.  here is a basic list of what you need to know:</p>
<p>object-oriented design<br>
polymorphism<br>
inheritence<br>
arrays<br>
pointers<br>
references<br>
recursion<br>
basic algorithims<br>
operators</p>
<p><span class="bbcode-b">Which game-specific API/library should I use?</span><br>
There are a lot of APIs and libraries out there that you can use.  I’ve only experimented with about four, and those four are:</p>
<p>SDL - <a href="http://libsdl.org" rel="nofollow noopener">libsdl.org</a><br>
SFML - <a href="http://sfml-dev.org" rel="nofollow noopener">sfml-dev.org</a><br>
Allegro - <a href="http://alleg.sourceforge.net/" rel="nofollow noopener">http://alleg.sourceforge.net/</a><br>
DirectX - <a href="http://msdn.microsoft.com/en-us/directx/aa937781" rel="nofollow noopener">http://msdn.microsoft.com/en-us/directx/aa937781</a><br>
XNA - <a href="http://msdn.microsoft.com/en-us/aa937791" rel="nofollow noopener">http://msdn.microsoft.com/en-us/aa937791</a></p>
<p>Even though DirectX and XNA are big in the game development industry, I am no where near good with them because I don’t even use windows (fedora ftw), and because SDL is extremely portable, we will use that.  I think a lot of schools teach DirectX, so if you want to be professional, look into that.  I should also suggest OpenGL rather than DirectX, because OpenGL is very portable, and a lot of game companies use their own game-specific API + OpenGL rendering to get what they and everybody else wants.</p>
<p>To recap, we will be using SDL and C++ in this tutorial.</p>
<p><span class="bbcode-b">C++ compiler?</span><br>
yes.</p>
<p>Now to finally begin!</p>
<p><span class="bbcode-b">Part 1 of this tutorial: Creating a screen.</span><br>
To help you, please read all documentation I provide, with links, so you don’t get lost.</p>
<p>First off, we need to allow our main.cc file to have access to the SDL functions.  They are declared/included in SDL.h.  So locate SDL.h in your computer, and include it in your main.cc file.</p>
<p>PS: If you do not know how to include a header file, where ever it may be, this tutorial is not for you.</p>
<p>There are these neat little functions called SDL_Init and SDL_InitSubSystem.</p>
<p><a href="http://sdl.beuc.net/sdl.wiki/SDL_Init" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_Init</a><br>
<a href="http://sdl.beuc.net/sdl.wiki/SDL_InitSubSystem" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_InitSubSystem</a></p>
<p>To initialize all SDL sub-systems, we need to called SDL_Init with the flag <span class="bbcode-i">SDL_INIT_EVERYTHING</span></p>
<pre><code class="lang-auto">#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    SDL_Init(SDL_INIT_EVERYTHING);
    return 0;
}</code></pre>
<p>there is a way to check if SDL_Init was called successfully.  It returns an integral value.  We can optimize our code like so:</p>
<pre><code class="lang-auto">#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        return 1;
    }

    return 0;
}</code></pre>
<blockquote>You can get extended error message by calling SDL_GetError.</blockquote>
<p>Using this piece of information, we can optimize our code, again:</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    return 0;
}</code></pre>
<p>Don’t run this code yet.  You are allocating memory that you have not declared to be deallocated later on in the program.  To do this, we can use SDL_Quit(), which shuts down every sub-system you initialized.  If you used SDL_InitSubSystem, you can use SDL_QuitSubSystem to shut down a specific sub-system, rather than all of them, an example:</p>
<pre><code class="lang-auto">SDL_InitSubSystem(SDL_INIT_VIDEO);
SDL_QuitSubSystem(SDL_INIT_VIDEO);</code></pre>
<p><a href="http://sdl.beuc.net/sdl.wiki/SDL_Quit" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_Quit</a><br>
<a href="http://sdl.beuc.net/sdl.wiki/SDL_QuitSubSystem" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_QuitSubSystem</a></p>
<p>So to optimize our code:</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    return 0;
}</code></pre>
<p>now we have successfully initialized and de-initialized SDL.  now lets make a screen.</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;
int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = NULL;

    return 0;
}</code></pre>
<p>in the code above, you may see something you haven’t seen yet.  SDL_Surface *.  (declare it NULL because it’s a pointer or just make it static.)</p>
<pre><code class="lang-auto">typedef struct SDL_Surface SDL_Surface;</code></pre>
<p>We can use surfaces as a buffer for images, text, and for other surfaces.  We want to turn our surface into a screen acting as a buffer for other surfaces.  To do this, we can use SDL_SetVideoMode</p>
<p><a href="http://sdl.beuc.net/sdl.wiki/SDL_SetVideoMode" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_SetVideoMode</a></p>
<p>Lets do it.</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);

    return 0;
}</code></pre>
<p>This will create a window with a width of 800, a height of 600, and using 32 bits-per-pixel, passing in HW_SURFACE, so we created the surface in video memory.  with this example as an exception, when you load images, text, or other optimized surfaces onto another surface, you still need to deallocate the memory used by that surface.  We can do this by using SDL_FreeSurface(SDL_Surface *);</p>
<p><a href="http://sdl.beuc.net/sdl.wiki/SDL_FreeSurface" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_FreeSurface</a></p>
<p>An example:</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);
    SDL_Surface *test = SDL_DisplayFormat(another_loaded_surface);
    SDL_FreeSurface(test);
    return 0;
}</code></pre>
<p>Freeing <span class="bbcode-i">another_loaded_surface</span> is assumed to be done elsewhere.</p>
<p>We have created a screen :), but if you run it, the screen goes away :(.  We can get it to stay up there, that is, before we call SDL_Quit, by using SDL_Delay(Uint32 ms);</p>
<p><a href="http://sdl.beuc.net/sdl.wiki/SDL_Delay" class="onebox" target="_blank" rel="nofollow noopener">http://sdl.beuc.net/sdl.wiki/SDL_Delay</a></p>
<p>So to optimize our code:</p>
<pre><code class="lang-auto">#include &lt;cstdio&gt;
#include &lt;SDL/SDL.h&gt;

int main(int argc, char **argv) {
    if (SDL_Init(SDL_INIT_EVERYTHING) &lt; 0) {
        fprintf(stderr, "%s\n", SDL_GetError());
        return 1;
    }

    atexit(SDL_Quit);
    SDL_Surface *screen = SDL_SetVideoMode(800, 600, 32, SDL_HWSURFACE);
    SDL_Delay(5000); // wait 5 seconds (5000 milliseconds) before continuing

    return 0;
}</code></pre>
<p>There you have it – a blank screen that stays there for 5 seconds and then goes away.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346/1</link>
        <pubDate>Thu, 22 Dec 2011 22:10:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-426346-1</guid>
        <source url="https://forum.moparisthebest.com/t/programmers-guide-to-game-development/426346.rss">Programmers&#39; Guide to Game Development</source>
      </item>
  </channel>
</rss>
