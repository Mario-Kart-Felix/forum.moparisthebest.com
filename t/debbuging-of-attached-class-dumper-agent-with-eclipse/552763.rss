<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Debbuging of attached class dumper agent with Eclipse</title>
    <link>https://forum.moparisthebest.com/t/debbuging-of-attached-class-dumper-agent-with-eclipse/552763</link>
    <description>I&#39;m trying to get this class dumper working under windows 7.

https://blogs.oracle.com/sundararajan/entry/retrieving_class_files_from_a

https://github.com/denis-zhdanov/class-dumper

unfortunatelly due to some reasons jars from denis are not working. So I tried to debug it using Eclipse and I can see that Attacher process is created and vm.loadAgent(args[1], agentArgs); is executed so I guess jar with ClassDumperAgent.class is loaded but in Eclipse debbugerI don&#39;t see any execution in this class.

Finally process Attacher is terminated without any exceptions with exit value 0 and no class dumped.

Any idea how to approach this problem to find out where it goes wrong ??

Krzysztof

Here is a code

[code]

import com.sun.tools.attach.VirtualMachine;

public class Attacher {
  public static void main(String[] args) throws Exception {
    if (args.length &lt; 2) {
      System.out.println(&quot;usage: java Attach &lt;pid&gt; &lt;agent-jar-full-path&gt; [&lt;agent-args&gt;]&quot;);
      System.exit(1);
    }

    // JVM is identified by process id (pid).
    VirtualMachine vm = VirtualMachine.attach(args[0]);

    String agentArgs = (args.length &gt; 2)? args[2] : null;
    // load a specified agent onto the JVM
    vm.loadAgent(args[1], agentArgs);
  }
}

package dumper;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.Instrumentation;
import java.lang.instrument.UnmodifiableClassException;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class ClassDumperAgent implements ClassFileTransformer {

  // directory where we would write .class files
  private static String dumpDir;
  // classes with name matching this pattern
  // will be dumped
  private static Pattern classes;

  public static void premain(String agentArgs, Instrumentation inst) {
    agentmain(agentArgs, inst);
  }

  public static void agentmain(String agentArgs, Instrumentation inst) {
    parseArgs(agentArgs);
    inst.addTransformer(new ClassDumperAgent(), true);

    // by the time we are attached, the classes to be
    // dumped may have been loaded already. So, check
    // for candidates in the loaded classes.
    Class[] classes = inst.getAllLoadedClasses();
    List&lt;Class&gt; candidates = new ArrayList&lt;Class&gt;();
    for (Class c : classes) {
      if (isCandidate(c.getName())) {
        candidates.add(c);
      }
    }
    try {
      // if we have matching candidates, then
      // retransform those classes so that we
      // will get callback to transform.
      if (! candidates.isEmpty()) {
        inst.retransformClasses(candidates.toArray(new Class[0]));
      }
    } catch (UnmodifiableClassException uce) {
    }
  }

  public byte[] transform(ClassLoader loader, String className,
                          Class redefinedClass, ProtectionDomain protDomain,
                          byte[] classBytes) {
    // check and dump .class file
    if (isCandidate(className)) {
      dumpClass(className, classBytes);
    }

    // we don&#39;t mess with .class file, just 
    // return null
    return null;
  }

  private static boolean isCandidate(String className) {
    // ignore array classes
    if (className.charAt(0) == &#39;[&#39;) {
      return false;
    }

    // convert the class name to external name
    className = className.replace(&#39;/&#39;, &#39;.&#39;);
    // check for name pattern match
    return classes.matcher(className).matches();
  }

  private static void dumpClass(String className, byte[] classBuf) {
    try {
      // create package directories if needed
      className = className.replace(&quot;/&quot;, File.separator);
      StringBuilder buf = new StringBuilder();
      buf.append(dumpDir);
      buf.append(File.separatorChar);
      int index = className.lastIndexOf(File.separatorChar);
      if (index != -1) {
        buf.append(className.substring(0, index));
      }
      String dir = buf.toString();
      new File(dir).mkdirs();

      // write .class file
      String fileName = dumpDir +
                        File.separator + className + &quot;.class&quot;;
      FileOutputStream fos = new FileOutputStream(fileName);
      fos.write(classBuf);
      fos.close();
    } catch (Exception exp) {
      exp.printStackTrace();
    }
  }

  // parse agent args of the form arg1=value1,arg2=value2
  private static void parseArgs(String agentArgs) {
    if (agentArgs != null) {
      String[] args = agentArgs.split(&quot;,&quot;);
      for (String arg: args) {
        String[] tmp = arg.split(&quot;=&quot;);
        if (tmp.length == 2) {
          String name = tmp[0];
          String value = tmp[1];
          if (name.equals(&quot;dumpDir&quot;)) {
            dumpDir = value;
          } else if (name.equals(&quot;classes&quot;)) {
            classes = Pattern.compile(value);
          }
        }
      }
    }

    if (dumpDir == null) {
      dumpDir = &quot;.&quot;;
    }

    if (classes == null) {
      classes = Pattern.compile(&quot;.\\*&quot;);
    }
  }
}
[/code]</description>
    
    <lastBuildDate>Sun, 02 Aug 2015 20:21:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/debbuging-of-attached-class-dumper-agent-with-eclipse/552763.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Debbuging of attached class dumper agent with Eclipse</title>
        <dc:creator><![CDATA[@krzysiaczek99 krzysiaczek99]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/krzysiaczek99">@krzysiaczek99</a> wrote:</p>
          <blockquote>
              <p>I’m trying to get this class dumper working under windows 7.</p>
<p><a href="https://blogs.oracle.com/sundararajan/entry/retrieving_class_files_from_a" class="onebox" target="_blank" rel="nofollow noopener">https://blogs.oracle.com/sundararajan/entry/retrieving_class_files_from_a</a></p>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://assets-cdn.github.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://github.com/denis-zhdanov/class-dumper" target="_blank" rel="nofollow noopener">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://avatars0.githubusercontent.com/u/290609?s=400&amp;v=4" class="thumbnail onebox-avatar" width="400" height="400">

<h3><a href="https://github.com/denis-zhdanov/class-dumper" target="_blank" rel="nofollow noopener">denis-zhdanov/class-dumper</a></h3>

<p>class-dumper - Simple application which allows to dump java class contents from a running application</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>unfortunatelly due to some reasons jars from denis are not working. So I tried to debug it using Eclipse and I can see that Attacher process is created and vm.loadAgent(args[1], agentArgs); is executed so I guess jar with ClassDumperAgent.class is loaded but in Eclipse debbugerI don’t see any execution in this class.</p>
<p>Finally process Attacher is terminated without any exceptions with exit value 0 and no class dumped.</p>
<p>Any idea how to approach this problem to find out where it goes wrong ??</p>
<p>Krzysztof</p>
<p>Here is a code</p>
<pre><code class="lang-auto">
import com.sun.tools.attach.VirtualMachine;

public class Attacher {
  public static void main(String[] args) throws Exception {
    if (args.length &lt; 2) {
      System.out.println("usage: java Attach &lt;pid&gt; &lt;agent-jar-full-path&gt; [&lt;agent-args&gt;]");
      System.exit(1);
    }

    // JVM is identified by process id (pid).
    VirtualMachine vm = VirtualMachine.attach(args[0]);

    String agentArgs = (args.length &gt; 2)? args[2] : null;
    // load a specified agent onto the JVM
    vm.loadAgent(args[1], agentArgs);
  }
}

package dumper;

import java.io.File;
import java.io.FileOutputStream;
import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.Instrumentation;
import java.lang.instrument.UnmodifiableClassException;
import java.security.ProtectionDomain;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;

public class ClassDumperAgent implements ClassFileTransformer {

  // directory where we would write .class files
  private static String dumpDir;
  // classes with name matching this pattern
  // will be dumped
  private static Pattern classes;

  public static void premain(String agentArgs, Instrumentation inst) {
    agentmain(agentArgs, inst);
  }

  public static void agentmain(String agentArgs, Instrumentation inst) {
    parseArgs(agentArgs);
    inst.addTransformer(new ClassDumperAgent(), true);

    // by the time we are attached, the classes to be
    // dumped may have been loaded already. So, check
    // for candidates in the loaded classes.
    Class[] classes = inst.getAllLoadedClasses();
    List&lt;Class&gt; candidates = new ArrayList&lt;Class&gt;();
    for (Class c : classes) {
      if (isCandidate(c.getName())) {
        candidates.add(c);
      }
    }
    try {
      // if we have matching candidates, then
      // retransform those classes so that we
      // will get callback to transform.
      if (! candidates.isEmpty()) {
        inst.retransformClasses(candidates.toArray(new Class[0]));
      }
    } catch (UnmodifiableClassException uce) {
    }
  }

  public byte[] transform(ClassLoader loader, String className,
                          Class redefinedClass, ProtectionDomain protDomain,
                          byte[] classBytes) {
    // check and dump .class file
    if (isCandidate(className)) {
      dumpClass(className, classBytes);
    }

    // we don't mess with .class file, just 
    // return null
    return null;
  }

  private static boolean isCandidate(String className) {
    // ignore array classes
    if (className.charAt(0) == '[') {
      return false;
    }

    // convert the class name to external name
    className = className.replace('/', '.');
    // check for name pattern match
    return classes.matcher(className).matches();
  }

  private static void dumpClass(String className, byte[] classBuf) {
    try {
      // create package directories if needed
      className = className.replace("/", File.separator);
      StringBuilder buf = new StringBuilder();
      buf.append(dumpDir);
      buf.append(File.separatorChar);
      int index = className.lastIndexOf(File.separatorChar);
      if (index != -1) {
        buf.append(className.substring(0, index));
      }
      String dir = buf.toString();
      new File(dir).mkdirs();

      // write .class file
      String fileName = dumpDir +
                        File.separator + className + ".class";
      FileOutputStream fos = new FileOutputStream(fileName);
      fos.write(classBuf);
      fos.close();
    } catch (Exception exp) {
      exp.printStackTrace();
    }
  }

  // parse agent args of the form arg1=value1,arg2=value2
  private static void parseArgs(String agentArgs) {
    if (agentArgs != null) {
      String[] args = agentArgs.split(",");
      for (String arg: args) {
        String[] tmp = arg.split("=");
        if (tmp.length == 2) {
          String name = tmp[0];
          String value = tmp[1];
          if (name.equals("dumpDir")) {
            dumpDir = value;
          } else if (name.equals("classes")) {
            classes = Pattern.compile(value);
          }
        }
      }
    }

    if (dumpDir == null) {
      dumpDir = ".";
    }

    if (classes == null) {
      classes = Pattern.compile(".\\*");
    }
  }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/debbuging-of-attached-class-dumper-agent-with-eclipse/552763/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/debbuging-of-attached-class-dumper-agent-with-eclipse/552763/1</link>
        <pubDate>Sun, 02 Aug 2015 20:21:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552763-1</guid>
        <source url="https://forum.moparisthebest.com/t/debbuging-of-attached-class-dumper-agent-with-eclipse/552763.rss">Debbuging of attached class dumper agent with Eclipse</source>
      </item>
  </channel>
</rss>
