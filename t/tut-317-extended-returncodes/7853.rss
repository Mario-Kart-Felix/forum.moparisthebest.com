<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[TUT] [317] Extended returncodes</title>
    <link>https://forum.moparisthebest.com/t/tut-317-extended-returncodes/7853</link>
    <description>Ok this is implemented on my server, and i think this may be useful, so i publish it here.
First we should implement detection method for client. I use special logon codes.
1a. Find this
[code]
if(flag)
                    aClass30_Sub2_Sub2_847.method398(18);
                else
                    aClass30_Sub2_Sub2_847.method398(16);
[/code] and replace it with this:
[code]
if(flag)
                    aClass30_Sub2_Sub2_847.method398(#x#);
                else
                    aClass30_Sub2_Sub2_847.method398(#y#);
[/code] where #x# and #y# are numbers you choose.
2a. Find this
[code]
if(k == 20) {
                aString1266 = &quot;@blu@Invalid loginserver requested&quot;;
                aString1267 = &quot;@blu@Please try using a different world.&quot;;
                return;
            }
[/code] and under it add following
[code]
if(k == 50) {
                aString1266 = &quot;Msg #1&quot;;
                aString1267 = &quot;Msg #2.&quot;;
                return;
            }
if(k == 51) {
                aString1266 = &quot;Msg #1&quot;;
                aString1267 = &quot;Msg #2&quot;;
                return;
            }
// And so on...
[/code] And now to server part of this tut
1b. Declare this to client.java of server
[code]
public boolean OfficalClient = false;
[/code]
2b. And find this:
[code]
if(loginType != 16 &amp;&amp; loginType != 18) {
                //shutdownError(&quot;Unexpected login type &quot;+loginType);
                return;
            }
[/code] 3b. Replace it to look like this:
[code]
if(loginType != 16 &amp;&amp; loginType != 18 &amp;&amp; loginType != #x# &amp;&amp; loginType != #y#) {
                //shutdownError(&quot;Unexpected login type &quot;+loginType);
                return;
            }
[/code] where #x# and #y# are numbers you selected earlier.
4b. Add under that:
[code]
        if(loginType == #x# || loginType == #y#) {
                          officalClient = true;
   }
[/code] where #x# and #y# are numbers you selected earlier

That covers base of making extended return codes</description>
    
    <lastBuildDate>Fri, 04 Aug 2006 10:26:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-317-extended-returncodes/7853.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[TUT] [317] Extended returncodes</title>
        <dc:creator><![CDATA[@stmserv stmserv]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/stmserv">@stmserv</a> wrote:</p>
          <blockquote>
              <p>Ok this is implemented on my server, and i think this may be useful, so i publish it here.<br>
First we should implement detection method for client. I use special logon codes.<br>
1a. Find this</p>
<p><code>
if(flag)
                    aClass30_Sub2_Sub2_847.method398(18);
                else
                    aClass30_Sub2_Sub2_847.method398(16);
</code> and replace it with this:</p>
<p><code>
if(flag)
                    aClass30_Sub2_Sub2_847.method398(#x#);
                else
                    aClass30_Sub2_Sub2_847.method398(#y#);
</code> where <span class="hashtag">#x</span># and <span class="hashtag">#y</span># are numbers you choose.<br>
2a. Find this</p>
<p><code>
if(k == 20) {
                aString1266 = "@blu@Invalid loginserver requested";
                aString1267 = "@blu@Please try using a different world.";
                return;
            }
</code> and under it add following</p>
<p><code>
if(k == 50) {
                aString1266 = "Msg #1";
                aString1267 = "Msg #2.";
                return;
            }
if(k == 51) {
                aString1266 = "Msg #1";
                aString1267 = "Msg #2";
                return;
            }
// And so on...
</code> And now to server part of this tut<br>
1b. Declare this to client.java of server</p>
<pre><code class="lang-auto">public boolean OfficalClient = false;</code></pre>
<p>2b. And find this:</p>
<p><code>
if(loginType != 16 &amp;&amp; loginType != 18) {
                //shutdownError("Unexpected login type "+loginType);
                return;
            }
</code> 3b. Replace it to look like this:</p>
<p><code>
if(loginType != 16 &amp;&amp; loginType != 18 &amp;&amp; loginType != #x# &amp;&amp; loginType != #y#) {
                //shutdownError("Unexpected login type "+loginType);
                return;
            }
</code> where <span class="hashtag">#x</span># and <span class="hashtag">#y</span># are numbers you selected earlier.<br>
4b. Add under that:</p>
<p><code>
        if(loginType == #x# || loginType == #y#) {
                          officalClient = true;
   }
</code> where <span class="hashtag">#x</span># and <span class="hashtag">#y</span># are numbers you selected earlier</p>
<p>That covers base of making extended return codes</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-317-extended-returncodes/7853/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-317-extended-returncodes/7853/1</link>
        <pubDate>Fri, 04 Aug 2006 10:26:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-7853-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-317-extended-returncodes/7853.rss">[TUT] [317] Extended returncodes</source>
      </item>
  </channel>
</rss>
