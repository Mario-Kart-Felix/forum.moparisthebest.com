<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>637/639 Splitting, help plz</title>
    <link>https://forum.moparisthebest.com/t/637-639-splitting-help-plz/437884</link>
    <description>Allright.. so when I am coinsharing + lootsharing.. everything that&#39;s given as a 100% drop gets split. So for example:
Big bones are 100%, i get 1K GP.

But now, Divine is 2%, I get a divine.. no gp?
It always splits 100% drops, no matter what drops. If a rune 2h is 99%, it doesn&#39;t share it.. Any fix?


Drop/Share methods:
[code]List&lt;Drop&gt; drops = World.getWorld().getNpcDropLoader().getDropMap().get(id);
            if (drops == null) {
                return;
            }
            Collections.shuffle(drops, new Random());
            if (drops != null) {
                List&lt;Drop&gt; hitDrops = new ArrayList&lt;Drop&gt;();
                boolean rareDrop = false;
                for (Drop d : drops) {
                    int chance = getRandom().nextInt(100);
                    if (chance &lt;= d.getRate()) {
                        if (d.getRate() &lt; 100) {
                            if (d.getItemId() &gt;= 20135 &amp;&amp; d.getItemId() &lt;= 20174) {
                                if (rareDrop) {
                                    continue;
                                }
                                rareDrop = true;
                            }
                            hitDrops.add(d);
                        } else {
                            Player receiver = killer;
                            int itemAmount = Misc.random(d.getMinAmount(), d.getMaxAmount());
                            if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing() &amp;&amp; receiver.getSettings().getCurrentClan().isCoinSharing()) {
                                if (ItemDefinition.forId(d.getItemId()).getExchangePrice() &gt; 1) {
                                    splitDrop(d, itemAmount, receiver.getSettings().getCurrentClan());
                                } else {
                                    receiver = getLooter(receiver, d.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation());
                                    GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));
                                }
                            } else if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isCoinSharing()) {
                                splitDrop(d, itemAmount, receiver.getSettings().getCurrentClan());
                            } else if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing()) {
                                GroundItemManager.createGroundItem(new GroundItem(getLooter(receiver, d.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation()), new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));
                            } else {
                                GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));
                            }
                        }

                    }
                }
                int amount = getDropAmount();
                while (!hitDrops.isEmpty() &amp;&amp; amount &gt; 0) {
                    int dropIndex = getRandom().nextInt(hitDrops.size());
                    Drop item = hitDrops.get(dropIndex);
                    Player receiver = killer;
                    int itemAmount = Misc.random(item.getMinAmount(), item.getMaxAmount());
                    if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing()) {
                        receiver = getLooter(receiver, item.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation());
                    }
                    GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(item.getItemId(), itemAmount), getLocation(), false));
                    hitDrops.remove(dropIndex);
                    amount--;
                }
            }
        }
    }

    private void splitDrop(Drop d, int amountDropped, Clan clan) {
        ArrayList&lt;Player&gt; receivingPlayers = new ArrayList&lt;Player&gt;();
        int amount = Misc.random(d.getMinAmount(), d.getMaxAmount());
        int price = ItemDefinition.forId(d.getItemId()).getExchangePrice() * amount;
        for (Player pl : Region.getLocalPlayers(location, 16)) {
            if (clan.getMembers().contains(pl)) {
                if (!getDamageManager().getEnemyHits().containsKey(pl)) {
                    continue;
                }
                receivingPlayers.add(pl);
            }
        }
        int priceSplit = price / receivingPlayers.size();
        for (Player pl : receivingPlayers) {
            GroundItemManager.createGroundItem(new GroundItem(pl, new Item(995, priceSplit), getLocation(), false));
            pl.sendMessage(&quot;&lt;col=009900&gt;You received &quot; + priceSplit + &quot; coins as your split of the drop: &quot; + amountDropped + &quot;x &quot; + ItemDefinition.forId(d.getItemId()).getName());
        }

    }

    public Player getLooter(Player player, int id, int amount, Clan clan, Location location) {
        Player done = player;
        if (clan != null) {
            if (clan.isLootsharing()) {
                List&lt;Player&gt; playersGetLoot = new LinkedList&lt;Player&gt;();
                int best = 0;
                for (Player pl : World.getWorld().getPlayers()) { //TODO Region.getLocalPlayers(location, 16)) {
                    if (pl.getLocation().getDistance(location) &gt; 20 || !clan.canShareLoot(pl)) {
                        continue;
                    }
                    if (clan.getMembers().contains(pl)) {
                        if (!getDamageManager().getEnemyHits().containsKey(pl)) {
                            continue;
                        }
                        int damage = getDamageManager().getEnemyHits().get(pl) + pl.getSettings().getChances();
                        if (damage &gt; best) {
                            playersGetLoot.add(pl);
                            best = damage;
                        } else {
                            if (Misc.random(2) == 1) {
                                playersGetLoot.add(pl);
                            }
                        }
                        pl.getSettings().incChances();
                        if (pl.getSettings().getChances() &lt; 0) {
                            pl.getSettings().setChances(0);
                        }
                    }
                }
                for (Player pl : playersGetLoot) {
                    if (Misc.random(2) == 1) {
                        done = pl;
                        for (int i = 0; i &lt; 5; i++) {
                            pl.getSettings().decChances();
                        }
                        break;
                    }
                }
            }
        }
        if (clan != null &amp;&amp; clan.isLootsharing()) {
            ActionSender.sendMessage(done, &quot;&lt;col=009900&gt;You received: &quot; + amount + &quot; &quot; + ItemDefinition.forId(id).getName());
            for (final Player pl : World.getWorld().getPlayers()) { //TODO Region.getLocalPlayers(location, 16)) {
                if (pl.getLocation().getDistance(location) &gt; 20 || !clan.canShareLoot(pl)) {
                    continue;
                }
                if (pl.getIndex() == done.getIndex()) {
                    continue;
                }
                if (clan.getMembers().contains(pl)) {
                    ActionSender.sendMessage(pl, Misc.formatPlayerNameForDisplay(done.getUsername()) + &quot; received: &quot; + amount + &quot; &quot; + ItemDefinition.forId(id).getName());
                    World.getWorld().submit(new Tick(6) {
                        @Override
                        public void execute() {
                            ActionSender.sendMessage(pl, &quot;Your chance of receiving loot has improved.&quot;);
                            this.stop();

                        }
                    });
                }
            }
        }
        return done;
    }[/code]</description>
    
    <lastBuildDate>Fri, 30 Mar 2012 07:21:45 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/637-639-splitting-help-plz/437884.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>637/639 Splitting, help plz</title>
        <dc:creator><![CDATA[@BILF BILF]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bilf">@BILF</a> wrote:</p>
          <blockquote>
              <p>Allright… so when I am coinsharing + lootsharing… everything that’s given as a 100% drop gets split. So for example:<br>
Big bones are 100%, i get 1K GP.</p>
<p>But now, Divine is 2%, I get a divine… no gp?<br>
It always splits 100% drops, no matter what drops. If a rune 2h is 99%, it doesn’t share it… Any fix?</p>
<p>Drop/Share methods:</p>
<p>[code]List drops = World.getWorld().getNpcDropLoader().getDropMap().get(id);<br>
if (drops == null) {<br>
return;<br>
}<br>
Collections.shuffle(drops, new Random());<br>
if (drops != null) {<br>
List hitDrops = new ArrayList();<br>
boolean rareDrop = false;<br>
for (Drop d : drops) {<br>
int chance = getRandom().nextInt(100);<br>
if (chance &lt;= d.getRate()) {<br>
if (d.getRate() &lt; 100) {<br>
if (d.getItemId() &gt;= 20135 &amp;&amp; d.getItemId() &lt;= 20174) {<br>
if (rareDrop) {<br>
continue;<br>
}<br>
rareDrop = true;<br>
}<br>
hitDrops.add(d);<br>
} else {<br>
Player receiver = killer;<br>
int itemAmount = Misc.random(d.getMinAmount(), d.getMaxAmount());<br>
if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing() &amp;&amp; receiver.getSettings().getCurrentClan().isCoinSharing()) {<br>
if (ItemDefinition.forId(d.getItemId()).getExchangePrice() &gt; 1) {<br>
splitDrop(d, itemAmount, receiver.getSettings().getCurrentClan());<br>
} else {<br>
receiver = getLooter(receiver, d.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation());<br>
GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));<br>
}<br>
} else if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isCoinSharing()) {<br>
splitDrop(d, itemAmount, receiver.getSettings().getCurrentClan());<br>
} else if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing()) {<br>
GroundItemManager.createGroundItem(new GroundItem(getLooter(receiver, d.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation()), new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));<br>
} else {<br>
GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(d.getItemId(), Misc.random(d.getMinAmount(), d.getMaxAmount())), getLocation(), false));<br>
}<br>
}</p>
<pre><code>                }
            }
            int amount = getDropAmount();
            while (!hitDrops.isEmpty() &amp;&amp; amount &gt; 0) {
                int dropIndex = getRandom().nextInt(hitDrops.size());
                Drop item = hitDrops.get(dropIndex);
                Player receiver = killer;
                int itemAmount = Misc.random(item.getMinAmount(), item.getMaxAmount());
                if (receiver.getSettings().getCurrentClan() != null &amp;&amp; receiver.getSettings().getCurrentClan().isLootsharing()) {
                    receiver = getLooter(receiver, item.getItemId(), itemAmount, receiver.getSettings().getCurrentClan(), getLocation());
                }
                GroundItemManager.createGroundItem(new GroundItem(receiver, new Item(item.getItemId(), itemAmount), getLocation(), false));
                hitDrops.remove(dropIndex);
                amount--;
            }
        }
    }
}

private void splitDrop(Drop d, int amountDropped, Clan clan) {
    ArrayList&lt;Player&gt; receivingPlayers = new ArrayList&lt;Player&gt;();
    int amount = Misc.random(d.getMinAmount(), d.getMaxAmount());
    int price = ItemDefinition.forId(d.getItemId()).getExchangePrice() * amount;
    for (Player pl : Region.getLocalPlayers(location, 16)) {
        if (clan.getMembers().contains(pl)) {
            if (!getDamageManager().getEnemyHits().containsKey(pl)) {
                continue;
            }
            receivingPlayers.add(pl);
        }
    }
    int priceSplit = price / receivingPlayers.size();
    for (Player pl : receivingPlayers) {
        GroundItemManager.createGroundItem(new GroundItem(pl, new Item(995, priceSplit), getLocation(), false));
        pl.sendMessage("&lt;col=009900&gt;You received " + priceSplit + " coins as your split of the drop: " + amountDropped + "x " + ItemDefinition.forId(d.getItemId()).getName());
    }

}

public Player getLooter(Player player, int id, int amount, Clan clan, Location location) {
    Player done = player;
    if (clan != null) {
        if (clan.isLootsharing()) {
            List&lt;Player&gt; playersGetLoot = new LinkedList&lt;Player&gt;();
            int best = 0;
            for (Player pl : World.getWorld().getPlayers()) { //TODO Region.getLocalPlayers(location, 16)) {
                if (pl.getLocation().getDistance(location) &gt; 20 || !clan.canShareLoot(pl)) {
                    continue;
                }
                if (clan.getMembers().contains(pl)) {
                    if (!getDamageManager().getEnemyHits().containsKey(pl)) {
                        continue;
                    }
                    int damage = getDamageManager().getEnemyHits().get(pl) + pl.getSettings().getChances();
                    if (damage &gt; best) {
                        playersGetLoot.add(pl);
                        best = damage;
                    } else {
                        if (Misc.random(2) == 1) {
                            playersGetLoot.add(pl);
                        }
                    }
                    pl.getSettings().incChances();
                    if (pl.getSettings().getChances() &lt; 0) {
                        pl.getSettings().setChances(0);
                    }
                }
            }
            for (Player pl : playersGetLoot) {
                if (Misc.random(2) == 1) {
                    done = pl;
                    for (int i = 0; i &lt; 5; i++) {
                        pl.getSettings().decChances();
                    }
                    break;
                }
            }
        }
    }
    if (clan != null &amp;&amp; clan.isLootsharing()) {
        ActionSender.sendMessage(done, "&lt;col=009900&gt;You received: " + amount + " " + ItemDefinition.forId(id).getName());
        for (final Player pl : World.getWorld().getPlayers()) { //TODO Region.getLocalPlayers(location, 16)) {
            if (pl.getLocation().getDistance(location) &gt; 20 || !clan.canShareLoot(pl)) {
                continue;
            }
            if (pl.getIndex() == done.getIndex()) {
                continue;
            }
            if (clan.getMembers().contains(pl)) {
                ActionSender.sendMessage(pl, Misc.formatPlayerNameForDisplay(done.getUsername()) + " received: " + amount + " " + ItemDefinition.forId(id).getName());
                World.getWorld().submit(new Tick(6) {
                    @Override
                    public void execute() {
                        ActionSender.sendMessage(pl, "Your chance of receiving loot has improved.");
                        this.stop();

                    }
                });
            }
        }
    }
    return done;
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/637-639-splitting-help-plz/437884/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/637-639-splitting-help-plz/437884/1</link>
        <pubDate>Fri, 30 Mar 2012 07:21:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-437884-1</guid>
        <source url="https://forum.moparisthebest.com/t/637-639-splitting-help-plz/437884.rss">637/639 Splitting, help plz</source>
      </item>
  </channel>
</rss>
