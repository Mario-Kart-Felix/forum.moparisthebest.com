<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lisp in 32 lines of Ruby</title>
    <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572</link>
    <description>bnl(?) pasted it in irc, but i figured it was interesting enough to share:

[code=ruby]
class Lisp
  def initialize
    @env = { 
      :label =&gt; lambda { |(name,val), _| @env[name] = val },
      :quote =&gt; lambda { |sexpr, _| sexpr[0] },
      :car   =&gt; lambda { |(list), _| list[0] },
      :cdr   =&gt; lambda { |(list), _| list.drop 1 },
      :cons  =&gt; lambda { |(e,cell), _| [e] + cell },
      :eq    =&gt; lambda { |(l,r), _| l == r },
      :if    =&gt; lambda { |(cond, thn, els), ctx| eval(cond, ctx) ? eval(thn, ctx) : eval(els, ctx) },
      :atom  =&gt; lambda { |(sexpr), _| (sexpr.is_a? Symbol) or (sexpr.is_a? Numeric) }
    }
  end

  def apply fn, args, ctx=@env
    return @env[fn].call(args, ctx) if @env[fn].respond_to? :call

    self.eval @env[fn][2], Hash[*(@env[fn][1].zip args).flatten(1)]
  end

  def eval sexpr, ctx=@env
    if @env[:atom].call [sexpr], ctx
      return ctx[sexpr] if ctx[sexpr]
      return sexpr
    end

    fn = sexpr[0]
    args = (sexpr.drop 1)
    args = args.map { |a| self.eval(a, ctx) } if not [:quote, :if].member? fn
    apply(fn, args, ctx)
  end
end
[/code]
http://blog.fogus.me/2012/01/25/lisp-in-40-lines-of-ruby/</description>
    
    <lastBuildDate>Thu, 31 May 2012 16:09:46 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“veer, post:10, topic:442572”][quote author=_s link=topic=545257.msg4003980#msg4003980 date=1338412897]</p>
<aside class="quote">
<blockquote>
<p>apply is literally right there in the middle<br>
[/quote]APPLY is an essential part of the EVAL process for application, and since EVAL needs to be implemented in terms of itself APPLY must also be due to their interdependence.</p>
</blockquote>
</aside>
<p>It is?<br>
I don’t think you understand the purpose of the SICP chapter you’re citing. The eval-apply evaluation model for inherently meta-circular interpretation is just a convenient way of doing things, which is why Scheme uses it.<br>
The problem here is that you’re assuming that the presented model of implementing eval and apply both as LISP code in terms of one another is some defining characteristic of LISPs, while, frankly it’s not.[/quote]metacircularity is such a succinct and elegant thing with enough advantages to drown out the majority of deviations, and whilst i know that it’s not a defining character of Lisps (i shouldn’t have emphasized on the necessity considering the branch of Lisp languages is so broad anyway), i think it’s safe to say that the 32 lines of ‘Lisp’ we had here was still far enough away from what could safely be considered a Lisp.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/11</link>
        <pubDate>Thu, 31 May 2012 16:09:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-11</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:8, topic:442572"][quote author=Mopman link=topic=545257.msg4003222#msg4003222 date=1338314845]<br>
apply is literally right there in the middle<br>
[/quote]APPLY is an essential part of the EVAL process for application, and since EVAL needs to be implemented in terms of itself APPLY must also be due to their interdependence.[/quote]</p>
<p>It is?<br>
I don’t think you understand the purpose of the SICP chapter you’re citing. The eval-apply evaluation model for inherently meta-circular interpretation is just a convenient way of doing things, which is why Scheme uses it.<br>
The problem here is that you’re assuming that the presented model of implementing eval and apply both as LISP code in terms of one another is some defining characteristic of LISPs, while, frankly it’s not.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/10</link>
        <pubDate>Wed, 30 May 2012 23:18:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-10</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>not sure i understand your point, i swear i will read sicp one day <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/9</link>
        <pubDate>Wed, 30 May 2012 21:23:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-9</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:7, topic:442572”]apply is literally right there in the middle[/quote]APPLY is an essential part of the EVAL process for application, and since EVAL needs to be implemented in terms of itself APPLY must also be due to their interdependence.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/8</link>
        <pubDate>Wed, 30 May 2012 21:21:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-8</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>apply is literally right there in the middle</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/7</link>
        <pubDate>Tue, 29 May 2012 18:07:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-7</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>Lisp? ok, where are LAMBDA, APPLY, SETF and COND? why is EVAL not implemented in terms of itself? why is APPLY not implemented as a Lisp function (essential considering APPLY is part of the EVAL process)? this is not Lisp, not by a mile.</p>
<p>edit: further reading <a href="http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html" rel="nofollow noopener">http://mitpress.mit.edu/sicp/full-text/book/book-Z-H-26.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/6</link>
        <pubDate>Tue, 29 May 2012 12:38:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-6</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="442572">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/mopman/40/33_1.png" class="avatar"> Mopman:</div>
<blockquote>
<p>if id posted this, this thread would be full of memes by now</p>
</blockquote>
</aside>
<p>because you suck <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> also quit being lazy and be admin again.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/5</link>
        <pubDate>Sun, 20 May 2012 04:34:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-5</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:3, topic:442572”]if id posted this, this thread would be full of memes by now[/quote]Suddenly, dicks.  Hundreds of them.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/4</link>
        <pubDate>Sat, 19 May 2012 23:49:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-4</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>if id posted this, this thread would be full of memes by now</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/3</link>
        <pubDate>Sat, 19 May 2012 11:11:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-3</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>That’s pretty cool</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/2</link>
        <pubDate>Fri, 18 May 2012 21:41:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-2</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
      <item>
        <title>Lisp in 32 lines of Ruby</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>bnl(?) pasted it in irc, but i figured it was interesting enough to share:</p>
<pre><code class="lang-auto">class Lisp
  def initialize
    @env = { 
      :label =&gt; lambda { |(name,val), _| @env[name] = val },
      :quote =&gt; lambda { |sexpr, _| sexpr[0] },
      :car   =&gt; lambda { |(list), _| list[0] },
      :cdr   =&gt; lambda { |(list), _| list.drop 1 },
      :cons  =&gt; lambda { |(e,cell), _| [e] + cell },
      :eq    =&gt; lambda { |(l,r), _| l == r },
      :if    =&gt; lambda { |(cond, thn, els), ctx| eval(cond, ctx) ? eval(thn, ctx) : eval(els, ctx) },
      :atom  =&gt; lambda { |(sexpr), _| (sexpr.is_a? Symbol) or (sexpr.is_a? Numeric) }
    }
  end

  def apply fn, args, ctx=@env
    return @env[fn].call(args, ctx) if @env[fn].respond_to? :call

    self.eval @env[fn][2], Hash[*(@env[fn][1].zip args).flatten(1)]
  end

  def eval sexpr, ctx=@env
    if @env[:atom].call [sexpr], ctx
      return ctx[sexpr] if ctx[sexpr]
      return sexpr
    end

    fn = sexpr[0]
    args = (sexpr.drop 1)
    args = args.map { |a| self.eval(a, ctx) } if not [:quote, :if].member? fn
    apply(fn, args, ctx)
  end
end</code></pre>
<p><a href="http://blog.fogus.me/2012/01/25/lisp-in-40-lines-of-ruby/" class="onebox" target="_blank" rel="nofollow noopener">http://blog.fogus.me/2012/01/25/lisp-in-40-lines-of-ruby/</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572/1</link>
        <pubDate>Fri, 18 May 2012 21:38:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442572-1</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-in-32-lines-of-ruby/442572.rss">Lisp in 32 lines of Ruby</source>
      </item>
  </channel>
</rss>
