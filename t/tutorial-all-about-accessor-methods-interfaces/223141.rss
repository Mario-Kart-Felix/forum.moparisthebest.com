<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
    <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141</link>
    <description>[b]This is a tutorial I wrote originally for RSMonkey, but I have decided to post it here as well.  The original tutorial can be found at http://www.rsmonkey.co.cc/smf/index.php/topic,10.0.html[/b]

The official java 6 Javadocs can be found at : http://java.sun.com/javase/6/docs/api/

They are very useful for finding out information about any method in java.

The official BCEL javadocs can be found at : http://jakarta.apache.org/bcel/apidocs/index.html

They are useful for methods only available in BCEL, and are very useful in client hacking.

This tutorial will cover basic accessor methods, and how they help us.

Requirements:

- Basic java knowledge
- Knowledge of what client hacking is
- IDE of your choice, I will be using Eclipse
- The BCEL jar, download it from http://apache.mirror.rafal.ca/jakarta/bcel/binaries/bcel-5.2.zip

What is an accessor method:

An accessor method is a method that we inject into the client.  Basically, we add a method to a client which returns a variable of our choice.

Our first step is to get the field which we want to create the method for.  In this tutorial, we will be using the field &quot;pa.e&quot;.  This field, in the #503 client, is the field for getting BaseX.

Our method will look like this when we are done:

[code]
public int getBaseX() {
	return pa.e;
}[/code]

So, let me quickly explain this.  We use the flags public so that our bot can access it, and the return type as int because BaseX is an int.  We then return the value.  Simple right!

Our first step towards injecting this is to access everything we need, and assign it to values.

In this case, we need only find the client class.

However, before we go that far, I need to explain some stuff to you.

First off, a ClassGen is basically just a value which contains all the data about a class file.  This includes methods, fields, access flags, etc.  They are extremely important to us in client hacking.

Here is the details on ClassGen from the JavaDocs:

&lt;blockquote&gt;Constructor Summary
ClassGen(JavaClass clazz)
          Initialize with existing class.
ClassGen(String class_name, String super_class_name, String file_name, int access_flags, String[] interfaces)
          Convenience constructor to set up some important values initially.
ClassGen(String class_name, String super_class_name, String file_name, int access_flags, String[] interfaces, ConstantPoolGen cp)
          Convenience constructor to set up some important values initially.
 
Method Summary
 void 	addAttribute(Attribute a)
          Add an attribute to this class.
 void 	addEmptyConstructor(int access_flags)
          Convenience method.
 void 	addField(Field f)
          Add a field to this class.
 void 	addInterface(String name)
          Add an interface to this class, i.e., this class has to implement it.
 void 	addMethod(Method m)
          Add a method to this class.
 void 	addObserver(ClassObserver o)
          Add observer for this object.
 Object 	clone()
           
 boolean 	containsField(Field f)
           
 Field 	containsField(String name)
           
 Method 	containsMethod(String name, String signature)
           
 boolean 	equals(Object obj)
          Return value as defined by given BCELComparator strategy.
 Attribute[] 	getAttributes()
           
 String 	getClassName()
           
 int 	getClassNameIndex()
           
static BCELComparator 	getComparator()
           
 ConstantPoolGen 	getConstantPool()
           
 Field[] 	getFields()
           
 String 	getFileName()
           
 String[] 	getInterfaceNames()
           
 int[] 	getInterfaces()
           
 JavaClass 	getJavaClass()
           
 int 	getMajor()
           
 Method 	getMethodAt(int pos)
           
 Method[] 	getMethods()
           
 int 	getMinor()
           
 String 	getSuperclassName()
           
 int 	getSuperclassNameIndex()
           
 int 	hashCode()
          Return value as defined by given BCELComparator strategy.
 void 	removeAttribute(Attribute a)
          Remove an attribute from this class.
 void 	removeField(Field f)
          Remove a field to this class.
 void 	removeInterface(String name)
          Remove an interface from this class.
 void 	removeMethod(Method m)
          Remove a method from this class.
 void 	removeObserver(ClassObserver o)
          Remove observer for this object.
 void 	replaceField(Field old, Field new_)
          Replace given field with new one.
 void 	replaceMethod(Method old, Method new_)
          Replace given method with new one.
 void 	setClassName(String name)
           
 void 	setClassNameIndex(int class_name_index)
           
static void 	setComparator(BCELComparator comparator)
           
 void 	setConstantPool(ConstantPoolGen constant_pool)
           
 void 	setMajor(int major)
          Set major version number of class file, default value is 45 (JDK 1.1)
 void 	setMethodAt(Method method, int pos)
           
 void 	setMethods(Method[] methods)
           
 void 	setMinor(int minor)
          Set minor version number of class file, default value is 3 (JDK 1.1)
 void 	setSuperclassName(String name)
           
 void 	setSuperclassNameIndex(int superclass_name_index)
           
 void 	update()
          Call notify() method on all observers.&lt;/blockquote&gt;

Now I suppose this all can seem a little scary, but as you will soon find out, it really isn&#39;t that hard.

The next thing we need to cover is MethodGen.  MethodGen, as you can probably guess, contains all the information about a method.  We will need to create out own MethodGen then dump it to the client in order to create the AccessorMethod.

Here is some information on MethodGen from the JavaDocs:

&lt;blockquote&gt;Constructor Summary
MethodGen(int access_flags, Type return_type, Type[] arg_types, String[] arg_names, String method_name, String class_name, InstructionList il, ConstantPoolGen cp)
          Declare method.
MethodGen(Method m, String class_name, ConstantPoolGen cp)
          Instantiate from existing method.
 
Method Summary
 void 	addCodeAttribute(Attribute a)
          Add an attribute to the code.
 void 	addException(String class_name)
          Add an exception possibly thrown by this method.
 CodeExceptionGen 	addExceptionHandler(InstructionHandle start_pc, InstructionHandle end_pc, InstructionHandle handler_pc, ObjectType catch_type)
          Add an exception handler, i.e., specify region where a handler is active and an instruction where the actual handling is done.
 LineNumberGen 	addLineNumber(InstructionHandle ih, int src_line)
          Give an instruction a line number corresponding to the source code line.
 LocalVariableGen 	addLocalVariable(String name, Type type, InstructionHandle start, InstructionHandle end)
          Adds a local variable to this method and assigns an index automatically.
 LocalVariableGen 	addLocalVariable(String name, Type type, int slot, InstructionHandle start, InstructionHandle end)
          Adds a local variable to this method.
 void 	addObserver(MethodObserver o)
          Add observer for this object.
 MethodGen 	copy(String class_name, ConstantPoolGen cp)
           
 boolean 	equals(Object obj)
          Return value as defined by given BCELComparator strategy.
 String 	getArgumentName(int i)
           
 String[] 	getArgumentNames()
           
 Type 	getArgumentType(int i)
           
 Type[] 	getArgumentTypes()
           
 String 	getClassName()
           
 Attribute[] 	getCodeAttributes()
           
static BCELComparator 	getComparator()
           
 CodeExceptionGen[] 	getExceptionHandlers()
           
 String[] 	getExceptions()
           
 InstructionList 	getInstructionList()
           
 LineNumberGen[] 	getLineNumbers()
           
 LineNumberTable 	getLineNumberTable(ConstantPoolGen cp)
           
 LocalVariableGen[] 	getLocalVariables()
           
 LocalVariableTable 	getLocalVariableTable(ConstantPoolGen cp)
           
 int 	getMaxLocals()
           
 int 	getMaxStack()
           
static int 	getMaxStack(ConstantPoolGen cp, InstructionList il, CodeExceptionGen[] et)
          Computes stack usage of an instruction list by performing control flow analysis.
 Method 	getMethod()
          Get method object.
 Type 	getReturnType()
           
 String 	getSignature()
           
 int 	hashCode()
          Return value as defined by given BCELComparator strategy.
 void 	removeCodeAttribute(Attribute a)
          Remove a code attribute.
 void 	removeCodeAttributes()
          Remove all code attributes.
 void 	removeException(String c)
          Remove an exception.
 void 	removeExceptionHandler(CodeExceptionGen c)
          Remove an exception handler.
 void 	removeExceptionHandlers()
          Remove all line numbers.
 void 	removeExceptions()
          Remove all exceptions.
 void 	removeLineNumber(LineNumberGen l)
          Remove a line number.
 void 	removeLineNumbers()
          Remove all line numbers.
 void 	removeLocalVariable(LocalVariableGen l)
          Remove a local variable, its slot will not be reused, if you do not use addLocalVariable with an explicit index argument.
 void 	removeLocalVariables()
          Remove all local variables.
 void 	removeNOPs()
          Remove all NOPs from the instruction list (if possible) and update every object refering to them, i.e., branch instructions, local variables and exception handlers.
 void 	removeObserver(MethodObserver o)
          Remove observer for this object.
 void 	setArgumentName(int i, String name)
           
 void 	setArgumentNames(String[] arg_names)
           
 void 	setArgumentType(int i, Type type)
           
 void 	setArgumentTypes(Type[] arg_types)
           
 void 	setClassName(String class_name)
           
static void 	setComparator(BCELComparator comparator)
           
 void 	setInstructionList(InstructionList il)
           
 void 	setMaxLocals()
          Compute maximum number of local variables.
 void 	setMaxLocals(int m)
          Set maximum number of local variables.
 void 	setMaxStack()
          Computes max.
 void 	setMaxStack(int m)
          Set maximum stack size for this method.
 void 	setReturnType(Type return_type)
           
 void 	stripAttributes(boolean flag)
          Do not/Do produce attributes code attributesLineNumberTable and LocalVariableTable, like javac -O
 String 	toString()
          Return string representation close to declaration format, `public static void main(String[]) throws IOException&#39;, e.g.
 void 	update()
          Call notify() method on all observers.&lt;/blockquote&gt;

Ok, I suppose you know enough for us to move on.

Go ahead and open up your IDE.  I will be using Eclipse in this tutorial because I think it is light weight and has good features.  However, it is simple to do it in other IDEs as well.

Now, create a new project and call it whatever you want.  When you reach the part about adding librarys etc, add in the bcel jar you downloaded earlier as an &quot;External Jar&quot;.  Click &quot;Finish&quot; and your project will be created.  Now, create a new class, I called mine &quot;Main.class&quot;.  This is the class all of our code will be going into.

Now, just for you guys, here are all of the BCEL imports:

[code]
import org.apache.*;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.util.*;
import org.apache.bcel.verifier.*;
import org.apache.bcel.verifier.exc.*;
import org.apache.bcel.verifier.statics.*;
import org.apache.bcel.verifier.structurals.*;[/code]

So, our class should look like this:

[code]
import org.apache.*;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.util.*;
import org.apache.bcel.verifier.*;
import org.apache.bcel.verifier.exc.*;
import org.apache.bcel.verifier.statics.*;
import org.apache.bcel.verifier.structurals.*;

public class Main {

	public static void main(String[] args) {
		//Method calls will go here
	}

}[/code]

Now, let&#39;s create our method builder.

Our first objective is to create a method to find the Client class, so that we can inject our method in.  To do this, we need the runescape client.  Download it from http://world37.runescape.com/runescape.jar and extract it with a program like WinRAR.  Now, delete the both the folders which were extracted, so that there is only a whole load of class files.

Now navigate to the folder your project is stored in.  Mine is in &quot;C:\accessorTutorial&quot;.  And copy the runescape folder into the project folder.  Now refresh eclipse (File -&gt; Refresh) or F5 in eclipse.

The runescape folder will now be part of your project!

Our next step is to load all the classes in the client into a ClassGen array (ClassGen[]).  To do this use the folowing code:

[code]    public ClassGen[] loadToArray() throws Exception {
        long time = System.nanoTime();
        File f = new File(System.getProperty(&quot;user.dir&quot;) + &quot;\\&quot; + &quot;runescape&quot;);
        int length = 0;
        for (String file : f.list())
            if (!new File(file).isDirectory())
                length++;
        ClassGen[] c = new ClassGen[length];
        for (int i = 0; i &lt; c.length; i++)
            c[i] = new ClassGen(new ClassParser(f.getName() + &quot;\\&quot; + f.list()[i]).parse());
        return c;
    }[/code]

Now our class looks like this:

[code]
import org.apache.*;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.util.*;
import org.apache.bcel.verifier.*;
import org.apache.bcel.verifier.exc.*;
import org.apache.bcel.verifier.statics.*;
import org.apache.bcel.verifier.structurals.*;

import java.lang.*;
import import java.io.*;

public class Main {

	public ClassGen[] loadedClasses = null;

	public static void main(String[] args) {
		try {		
			loadedClasses = loadToArray();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ClassGen[] loadToArray() throws Exception {
        	long time = System.nanoTime();
        	File f = new File(System.getProperty(&quot;user.dir&quot;) + &quot;\\&quot; + &quot;runescape&quot;);
        	int length = 0;
        	for (String file : f.list())
            if (!new File(file).isDirectory())
                length++;
        	ClassGen[] c = new ClassGen[length];
        	for (int i = 0; i &lt; c.length; i++)
            c[i] = new ClassGen(new ClassParser(f.getName() + &quot;\\&quot; + f.list()[i]).parse());
       	return c;
    }

}[/code]

Now that we have all of our classes, lets find the client class!  To do this we just iterate through all the classes until we find the class named &quot;client&quot;.

Here is the code:

[code]
public ClassGen getClientClass() {
	ClassGen toRtn = null;
	for(ClassGen cg : loadedClasses) {
		if(cg.getClassName().toString().equals(&quot;client&quot;))
			toRtn = cg;
	}
	return toRtn;
}[/code]

So, your new class will look like this:

[code]
import org.apache.*;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.util.*;
import org.apache.bcel.verifier.*;
import org.apache.bcel.verifier.exc.*;
import org.apache.bcel.verifier.statics.*;
import org.apache.bcel.verifier.structurals.*;

import java.lang.*;
import import java.io.*;

public class Main {

	public ClassGen[] loadedClasses = null;
	public ClassGen clientClass = null;

	public static void main(String[] args) {
		try {		
			loadedClasses = loadToArray();
			clientClass = getClientClass();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public ClassGen[] loadToArray() throws Exception {
        	long time = System.nanoTime();
        	File f = new File(System.getProperty(&quot;user.dir&quot;) + &quot;\\&quot; + &quot;runescape&quot;);
        	int length = 0;
        	for (String file : f.list())
            if (!new File(file).isDirectory())
                length++;
        	ClassGen[] c = new ClassGen[length];
        	for (int i = 0; i &lt; c.length; i++)
            c[i] = new ClassGen(new ClassParser(f.getName() + &quot;\\&quot; + f.list()[i]).parse());
       	return c;
    	}

	public ClassGen getClientClass() {
		ClassGen toRtn = null;
		for(ClassGen cg : loadedClasses) {
			if(cg.getClassName().toString().equals(&quot;client&quot;))
				toRtn = cg;
		}
		return toRtn;
	}

}[/code]

YAY!  We are finally ready to start building and dumping our new method!

Let&#39;s go back quickly and look at one of the constructors for MethodGen:

&lt;blockquote&gt;MethodGen(int access_flags, Type return_type, Type[] arg_types, String[] arg_names, String method_name, String class_name, InstructionList il, ConstantPoolGen cp)
          Declare method.&lt;/blockquote&gt;

Now, among many things, you will see something new here.  ConstantPoolGen.  In basic terms, the constant pool is a table in each class that contains the values for all constants, typically any reference to a constant anywhere in a class file is using the index of that constant in the table.  Now, don&#39;t be scared, it is VERY easy to create.

[code]ConstantPoolGen cp = clientClass.getConstantPool();[/code]

So, now that we have this down, lets start working on the other stuff.  We will take this whole constructor one argument at a time.

&lt;blockquote&gt;int access_flags&lt;/blockquote&gt;These are the access flags our method will use (ex, &quot;public, &quot;private&quot;, &quot;static&quot; etc).  For this, we need the &quot;public&quot; field.  Here is the code for that:

[code]Constants.ACC_PUBLIC[/code]

Our next argument is:

&lt;blockquote&gt;Type return_type&lt;/blockquote&gt;

The correct input depends on the field we want.  Since BaseX is an int, we will use an int :

[code]Type.INT[/code]

The next two are both regarding the arguments for the method.  

&lt;blockquote&gt;Type[] arg_types, String[] arg_names&lt;/blockquote&gt;

Since we dont want any arguments we use:

[code]Type.NO_ARGS, new String[]{}[/code]

The next one is very obvious what we need to do.

&lt;blockquote&gt;String method_name&lt;/blockquote&gt;

We will call our method:

[code]&quot;getBaseX&quot;[/code]

The next one asks us for the name of the class which is being inserted.

&lt;blockquote&gt;String class_name&lt;/blockquote&gt;

We already have this.

[code]clientClass.getClassName();[/code]

The last one we need is an InstructionList.  This is the code our method will contain.  It is done at a bytecode level, not a java level.

We need to create a new InstructionList and then populate it before we add the method to the class.  For now, we don&#39;t need a value.

So, here is everything put together :

[code]
ConstantPoolGen cp = clientClass.getConstantPool();
InstructionList iList = new InstructionList();
MethodGen getBaseXMethod = new MethodGen(Constants.ACC_PUBLIC, Type.INT, Type.NO_ARGS, new String[]{}, &quot;getBaseX&quot;, clientClass.getClassName(), iList, cp);[/code]

Now we need to populate the InstrutionList, for this, we can use an InsturctionFactory:

[code]InstructionFactory iFact = new InstructionFactory(theClassGen,theCPool);
		Instruction pushThis = new ALOAD(0);
		Instruction getBaseX = iFact.createFieldAccess(&quot;pa&quot;,&quot;e&quot;,Type.INT,Constants.GETSTATIC);
		Instruction returnBaseX = iFac.createReturn(Type.INT);[/code]

Now we add them to the method:

[code]iList.append(pushThis);
		iList.append(getBaseX);
		iList.append(returnBaseX);[/code]

And, finally, cleanup and dump it to the class:

[code]getBaseXMethod.setMaxStack();
		getBaseXMethod.setMaxLocals();

		clientClass.addMethod(getBaseXMethod.getMethod());

		try {
			clientClass.getJavaClass().dump(&quot;client.class&quot;);
			System.out.println(&quot;Dumped client class!&quot;);
		} catch (Exception ex) {
			ex.printStackTrace();
		}[/code]</description>
    
    <lastBuildDate>Sat, 02 Aug 2008 05:04:53 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:16, topic:223141”][quote author=Ollie link=topic=293071.msg2360010#msg2360010 date=1217542261]<br>
Ignore Taharok for he is a twat.<br>
[/quote]</p>
<p>Lul, i merely pointed it out. I figured it was an older version, I just thought it would work with the rs classes considering they only used features up to Java 1.4.</p>
<p>And the only bot i’ve ever seen that didn’t have the jar was AresBot. And, if i’m correct, it’s still being used to this day, though it’s been sadly incorporated with ibot.[/quote]iirc they use newer library features, they just try reflection to instantiate them and fall back on the older equivalents</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/19</link>
        <pubDate>Sat, 02 Aug 2008 05:04:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-19</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@qauters qauters]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/qauters">@qauters</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:16, topic:223141”][quote author=Ollie link=topic=293071.msg2360010#msg2360010 date=1217542261]<br>
Ignore Taharok for he is a twat.<br>
[/quote]</p>
<p>Lul, i merely pointed it out. I figured it was an older version, I just thought it would work with the rs classes considering they only used features up to Java 1.4.</p>
<p>And the only bot i’ve ever seen that didn’t have the jar was AresBot. And, if i’m correct, it’s still being used to this day, though it’s been sadly incorporated with ibot.[/quote]<br>
RSBot doesn’t have the jar? Ares has been dead for a long time, ares2 died before rsbot (since it was managed by Speljohan and me).<br>
There’s no reason to use bcel in a bot, if you don’t include the updater.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/18</link>
        <pubDate>Fri, 01 Aug 2008 21:05:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-18</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:16, topic:223141”][quote author=Ollie link=topic=293071.msg2360010#msg2360010 date=1217542261]<br>
Ignore Taharok for he is a twat.<br>
[/quote]</p>
<p>Lul, i merely pointed it out. I figured it was an older version, I just thought it would work with the rs classes considering they only used features up to Java 1.4.</p>
<p>And the only bot i’ve ever seen that didn’t have the jar was AresBot. And, if i’m correct, it’s still being used to this day, though it’s been sadly incorporated with ibot.[/quote]Err, ares on nexus and official ares are both dead and hjave been for quite some time.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/17</link>
        <pubDate>Fri, 01 Aug 2008 17:37:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-17</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Lul, i merely pointed it out. I figured it was an older version, I just thought it would work with the rs classes considering they only used features up to Java 1.4.</p>
<p>And the only bot i’ve ever seen that didn’t have the jar was AresBot. And, if i’m correct, it’s still being used to this day, though it’s been sadly incorporated with ibot.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/16</link>
        <pubDate>Fri, 01 Aug 2008 16:42:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-16</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>Ignore Taharok for he is a twat.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/15</link>
        <pubDate>Thu, 31 Jul 2008 22:11:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-15</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@qauters qauters]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/qauters">@qauters</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="12" data-topic="223141">
<div class="title">
<div class="quote-controls"></div>
 Taharok:</div>
<blockquote>
<p>BCEL is included right in the api @ [tt]com.sun.org.apache.bcel[/tt]</p>
</blockquote>
</aside>
<p>SUN’s bcel contains bugs. Mine updater used it in the past but I got weird errors, which where solved when using the jar.<br>
I just have it included in the updater as source, this way I can add things if I want to ;).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/14</link>
        <pubDate>Thu, 31 Jul 2008 20:44:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-14</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:12, topic:223141”]BCEL is included right in the api @ [tt]com.sun.org.apache.bcel[/tt][/quote]It is not the same.  When sun included it into the JDK they did some changes which they felt were for the best, however it makes it incompatible with some releases that you could download from a client hacking site, so it prevents you from running those classes etc.  Hence why 95% of updaters (actually 100% of all the ones I have ever seen, but I’m sure they can’t ALL be like that), use the jar over Sun’s packaged edition.</p>
<p>I honestly don’t think it’s too much to ask to have people download the jar.  It allows for a certain amount of “unison”, for lack of a better word, throughout client hacking projects.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/13</link>
        <pubDate>Thu, 31 Jul 2008 18:19:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-13</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>BCEL is included right in the api @ [tt]com.sun.org.apache.bcel[/tt]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/12</link>
        <pubDate>Thu, 31 Jul 2008 18:12:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-12</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“frank_, post:10, topic:223141”][quote author=the bank link=topic=293071.msg2359679#msg2359679 date=1217523524]</p>
<p>[quote author=frank_ link=topic=293071.msg2359662#msg2359662 date=1217522531]<br>
why did you copy/paste the javadocs<br>
[/quote]To save people from searching for them.  They help a lot with this stuff, especially if you want to build on it.  That way people don’t post questions about how to do something, which are already present in the Javadocs.<br>
[/quote]that is all well and good, but they <em>should</em> be reading the actual docs. give the link instead of pasting the contents[/quote]Mmm, good idea.  I’ll edit the post with one.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/11</link>
        <pubDate>Thu, 31 Jul 2008 17:30:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-11</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“the bank, post:9, topic:223141”][quote author=frank_ link=topic=293071.msg2359662#msg2359662 date=1217522531]<br>
why did you copy/paste the javadocs<br>
[/quote]To save people from searching for them.  They help a lot with this stuff, especially if you want to build on it.  That way people don’t post questions about how to do something, which are already present in the Javadocs.[/quote]that is all well and good, but they <em>should</em> be reading the actual docs. give the link instead of pasting the contents</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/10</link>
        <pubDate>Thu, 31 Jul 2008 17:03:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-10</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“frank_, post:8, topic:223141”]why did you copy/paste the javadocs[/quote]To save people from searching for them.  They help a lot with this stuff, especially if you want to build on it.  That way people don’t post questions about how to do something, which are already present in the Javadocs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/9</link>
        <pubDate>Thu, 31 Jul 2008 16:58:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-9</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>why did you copy/paste the javadocs</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/8</link>
        <pubDate>Thu, 31 Jul 2008 16:42:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-8</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Speljohan, post:6, topic:223141”]A few flaws in it, but nevertheless good work![/quote]Thanks!</p>
<p>If anyone has any questions please post and I’m more than willing to answer them.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/7</link>
        <pubDate>Thu, 31 Jul 2008 15:58:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-7</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <p>A few flaws in it, but nevertheless good work!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/6</link>
        <pubDate>Thu, 31 Jul 2008 15:52:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-6</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ollie, post:4, topic:223141”]YOU SPELT ORIGINAL WRONG =][/quote]Lol, thanks, fixed :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/5</link>
        <pubDate>Thu, 31 Jul 2008 15:49:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-5</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>YOU SPELT ORIGINAL WRONG =]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/4</link>
        <pubDate>Thu, 31 Jul 2008 15:49:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-4</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@darkblitz darkblitz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/darkblitz">@darkblitz</a> wrote:</p>
          <blockquote>
              <p>Wow very good! Thanks for sharing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/3</link>
        <pubDate>Thu, 31 Jul 2008 15:01:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-3</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>Now we put it all together:</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>import java.lang.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class Main {</p>
<pre><code>public static ClassGen[] loadedClasses = null;
public static ClassGen clientClass = null;

public static void main(String[] args) {
	try {
		loadedClasses = loadToArray();
		clientClass = getClientClass();
		addBaseXAccessor();
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public static ClassGen[] loadToArray() throws Exception {
	long time = System.nanoTime();
	File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
	int length = 0;
	for (String file : f.list())
		if (!new File(file).isDirectory())
			length++;
	ClassGen[] c = new ClassGen[length];
	for (int i = 0; i &lt; c.length; i++) {
		c[i] = new ClassGen(new ClassParser(f.getName() + "\\"
				+ f.list()[i]).parse());
		if(c[i].getClassName().toString().equals("client"))
			f.delete();
	}
	return c;
}

public static ClassGen getClientClass() {
	ClassGen toRtn = null;
	for (ClassGen cg : loadedClasses) {
		if (cg.getClassName().toString().equals("client")) {
			toRtn = cg;
			System.out.println("Found client class!");
		}
	}
	return toRtn;
}

public static void addBaseXAccessor() {
	ConstantPoolGen cp = clientClass.getConstantPool();
	InstructionList iList = new InstructionList();
	MethodGen getBaseXMethod = new MethodGen(Constants.ACC_PUBLIC,
			Type.INT, Type.NO_ARGS, new String[] {}, "getBaseX",
			clientClass.getClassName(), iList, cp);
	InstructionFactory iFact = new InstructionFactory(clientClass, cp);
	Instruction pushThis = new ALOAD(0);
	Instruction getBaseX = iFact.createFieldAccess("pe", "e", Type.INT, Constants.GETSTATIC);
	Instruction returnBaseX = iFact.createReturn(Type.INT);
	iList.append(pushThis);
	iList.append(getBaseX);
	iList.append(returnBaseX);
	getBaseXMethod.setMaxStack();
	getBaseXMethod.setMaxLocals();

	clientClass.addMethod(getBaseXMethod.getMethod());

	try {
		clientClass.getJavaClass().dump("client.class");
		System.out.println("Dumped client class!");
	} catch (Exception ex) {
		ex.printStackTrace();
	}
}
</code></pre>
<p>}[/code]</p>
<p><span class="bbcode-b"><span class="bbcode-i">[size=24pt]Interfaces:[/size]</span></span></p>
<p>Requirements:</p>
<ul>
<li>Moderate java knowledge</li>
<li>Your choice of IDE, I will once again be using Eclipse</li>
<li>All the requirements from the “All about accessor methods” tutorial</li>
</ul>
<p>Our goal:</p>
<ul>
<li>Inject an interface into the client.class file.</li>
</ul>
<p>Tutorial:</p>
<p>Okay, here goes nothing.  First off, i’ll go over what an “Interface” is, and how they help us.</p>
<p>An interface is, in basic terms, a link between us and the client.  Here is the interface we will be using:</p>
<p>[code]public interface Position {</p>
<pre><code>public int getBaseX();
</code></pre>
<p>}[/code]</p>
<p>As you can see, our interface contains a single empty method.  Now we have the interface for our bot done.  Now we need to have the client extend our interface.  Save our interface class as “Position.class” and put it in the package “com.MonkeyBot”.  Here is the code from the previous tutorial :</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>import java.lang.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class Main {</p>
<pre><code>public static ClassGen[] loadedClasses = null;
public static ClassGen clientClass = null;

public static void main(String[] args) {
	try {
		loadedClasses = loadToArray();
		clientClass = getClientClass();
		addBaseXAccessor();
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public static ClassGen[] loadToArray() throws Exception {
	long time = System.nanoTime();
	File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
	int length = 0;
	for (String file : f.list())
		if (!new File(file).isDirectory())
			length++;
	ClassGen[] c = new ClassGen[length];
	for (int i = 0; i &lt; c.length; i++) {
		c[i] = new ClassGen(new ClassParser(f.getName() + "\\"
				+ f.list()[i]).parse());
		if(c[i].getClassName().toString().equals("client"))
			f.delete();
	}
	return c;
}

public static ClassGen getClientClass() {
	ClassGen toRtn = null;
	for (ClassGen cg : loadedClasses) {
		if (cg.getClassName().toString().equals("client")) {
			toRtn = cg;
			System.out.println("Found client class!");
		}
	}
	return toRtn;
}

public static void addBaseXAccessor() {
	ConstantPoolGen cp = clientClass.getConstantPool();
	InstructionList iList = new InstructionList();
	MethodGen getBaseXMethod = new MethodGen(Constants.ACC_PUBLIC,
			Type.INT, Type.NO_ARGS, new String[] {}, "getBaseX",
			clientClass.getClassName(), iList, cp);
	InstructionFactory iFact = new InstructionFactory(clientClass, cp);
	Instruction pushThis = new ALOAD(0);
	Instruction getBaseX = iFact.createFieldAccess("pe", "e", Type.INT, Constants.GETSTATIC);
	Instruction returnBaseX = iFact.createReturn(Type.INT);
	iList.append(pushThis);
	iList.append(getBaseX);
	iList.append(returnBaseX);
	getBaseXMethod.setMaxStack();
	getBaseXMethod.setMaxLocals();

	clientClass.addMethod(getBaseXMethod.getMethod());

	try {
		clientClass.getJavaClass().dump("client.class");
		System.out.println("Dumped client class!");
	} catch (Exception ex) {
		ex.printStackTrace();
	}
}
</code></pre>
<p>}[/code]</p>
<p>Now, to have the client implement our bot’s interface, it is very easy.</p>
<p>We simply go :</p>
<pre><code class="lang-auto">clientClass.addInterface("com.MonkeyBot.Position");</code></pre>
<p>So, here is our new class:</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>import java.lang.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class Main {</p>
<pre><code>public static ClassGen[] loadedClasses = null;
public static ClassGen clientClass = null;

public static void main(String[] args) {
	try {
		loadedClasses = loadToArray();
		clientClass = getClientClass();
		clientClass.addInterface("com.MonkeyBot.Position");
		addBaseXAccessor();
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public static ClassGen[] loadToArray() throws Exception {
	long time = System.nanoTime();
	File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
	int length = 0;
	for (String file : f.list())
		if (!new File(file).isDirectory())
			length++;
	ClassGen[] c = new ClassGen[length];
	for (int i = 0; i &lt; c.length; i++) {
		c[i] = new ClassGen(new ClassParser(f.getName() + "\\"
				+ f.list()[i]).parse());
		if(c[i].getClassName().toString().equals("client"))
			f.delete();
	}
	return c;
}

public static ClassGen getClientClass() {
	ClassGen toRtn = null;
	for (ClassGen cg : loadedClasses) {
		if (cg.getClassName().toString().equals("client")) {
			toRtn = cg;
			System.out.println("Found client class!");
		}
	}
	return toRtn;
}

public static void addBaseXAccessor() {
	ConstantPoolGen cp = clientClass.getConstantPool();
	InstructionList iList = new InstructionList();
	MethodGen getBaseXMethod = new MethodGen(Constants.ACC_PUBLIC,
			Type.INT, Type.NO_ARGS, new String[] {}, "getBaseX",
			clientClass.getClassName(), iList, cp);
	InstructionFactory iFact = new InstructionFactory(clientClass, cp);
	Instruction pushThis = new ALOAD(0);
	Instruction getBaseX = iFact.createFieldAccess("pe", "e", Type.INT, Constants.GETSTATIC);
	Instruction returnBaseX = iFact.createReturn(Type.INT);
	iList.append(pushThis);
	iList.append(getBaseX);
	iList.append(returnBaseX);
	getBaseXMethod.setMaxStack();
	getBaseXMethod.setMaxLocals();

	clientClass.addMethod(getBaseXMethod.getMethod());

	try {
		clientClass.getJavaClass().dump("client.class");
		System.out.println("Dumped client class!");
	} catch (Exception ex) {
		ex.printStackTrace();
	}
}
</code></pre>
<p>}[/code]</p>
<p>Notice we add it BEFORE we add the accessor method.  This is because the accessor method dumps the new class.  So if we did it afterwards, it would not be dumped to the class.  It is also common style to do it in this manner.</p>
<p>Now, download a new runescape.jar from <a href="http://world37.runescape.com/runescape.jar" rel="nofollow noopener">http://world37.runescape.com/runescape.jar</a> and extract it and delete the only two folders inside.  Now run our class on it, and here is the beauty:</p>
<p>[code]import com.MonkeyBot.Position;<br>
import java.awt.<em>;<br>
import java.io.IOException;<br>
import java.io.UnsupportedEncodingException;<br>
import java.net.Socket;<br>
import java.net.URL;<br>
import java.util.</em>;<br>
import nativeadvert.browsercontrol;</p>
<p>public final class client extends ne<br>
implements Position<br>
{</p>
<p>…</p>
<pre><code>public int getBaseX()
{
    return pa.e;
}
</code></pre>
<p>…</p>
<p>}[/code]</p>
<p>Damn that’s nice.</p>
<p>Now, as you can see, it imports our interface, then sets the class to implement it.  Now all that is left is to create a bot which connects to this class to run that method and get the result.</p>
<p>I will not be covering how to do that in this tutorial, as it would take far too long, however it will be covered in the next tutorial.</p>
<p>I hope you enjoyed this tutorial and as always, if you have any problems, please feel free to post them in the Client Hacking Questions section.</p>
<p>I am open to any and all tutorial suggestions, they can be posted in the suggestions board.</p>
<p>I strongly recommend you try this yourself.  It will enforce everything you have learned so far, and will help you a lot in the long run.</p>
<p>I hope you enjoyed this tutorial.  More to come.</p>
<p>If you have any questions, please post.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/2</link>
        <pubDate>Thu, 31 Jul 2008 14:41:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-2</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
      <item>
        <title>[Tutorial] All About Accessor Methods &amp; Interfaces</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">This is a tutorial I wrote originally for RSMonkey, but I have decided to post it here as well.  The original tutorial can be found at <a href="http://www.rsmonkey.co.cc/smf/index.php/topic,10.0.html" rel="nofollow noopener">http://www.rsmonkey.co.cc/smf/index.php/topic,10.0.html</a></span></p>
<p>The official java 6 Javadocs can be found at : <a href="http://java.sun.com/javase/6/docs/api/" rel="nofollow noopener">http://java.sun.com/javase/6/docs/api/</a></p>
<p>They are very useful for finding out information about any method in java.</p>
<p>The official BCEL javadocs can be found at : <a href="http://jakarta.apache.org/bcel/apidocs/index.html" rel="nofollow noopener">http://jakarta.apache.org/bcel/apidocs/index.html</a></p>
<p>They are useful for methods only available in BCEL, and are very useful in client hacking.</p>
<p>This tutorial will cover basic accessor methods, and how they help us.</p>
<p>Requirements:</p>
<ul>
<li>Basic java knowledge</li>
<li>Knowledge of what client hacking is</li>
<li>IDE of your choice, I will be using Eclipse</li>
<li>The BCEL jar, download it from <a href="http://apache.mirror.rafal.ca/jakarta/bcel/binaries/bcel-5.2.zip" rel="nofollow noopener">http://apache.mirror.rafal.ca/jakarta/bcel/binaries/bcel-5.2.zip</a>
</li>
</ul>
<p>What is an accessor method:</p>
<p>An accessor method is a method that we inject into the client.  Basically, we add a method to a client which returns a variable of our choice.</p>
<p>Our first step is to get the field which we want to create the method for.  In this tutorial, we will be using the field “pa.e”.  This field, in the <span class="hashtag">#503</span> client, is the field for getting BaseX.</p>
<p>Our method will look like this when we are done:</p>
<p><code>
public int getBaseX() {
	return pa.e;
}</code></p>
<p>So, let me quickly explain this.  We use the flags public so that our bot can access it, and the return type as int because BaseX is an int.  We then return the value.  Simple right!</p>
<p>Our first step towards injecting this is to access everything we need, and assign it to values.</p>
<p>In this case, we need only find the client class.</p>
<p>However, before we go that far, I need to explain some stuff to you.</p>
<p>First off, a ClassGen is basically just a value which contains all the data about a class file.  This includes methods, fields, access flags, etc.  They are extremely important to us in client hacking.</p>
<p>Here is the details on ClassGen from the JavaDocs:</p>
<blockquote>Constructor Summary
ClassGen(JavaClass clazz)
          Initialize with existing class.
ClassGen(String class_name, String super_class_name, String file_name, int access_flags, String[] interfaces)
          Convenience constructor to set up some important values initially.
ClassGen(String class_name, String super_class_name, String file_name, int access_flags, String[] interfaces, ConstantPoolGen cp)
          Convenience constructor to set up some important values initially.
<p>Method Summary<br>
void 	addAttribute(Attribute a)<br>
Add an attribute to this class.<br>
void 	addEmptyConstructor(int access_flags)<br>
Convenience method.<br>
void 	addField(Field f)<br>
Add a field to this class.<br>
void 	addInterface(String name)<br>
Add an interface to this class, i.e., this class has to implement it.<br>
void 	addMethod(Method m)<br>
Add a method to this class.<br>
void 	addObserver(ClassObserver o)<br>
Add observer for this object.<br>
Object 	clone()</p>
<p>boolean 	containsField(Field f)</p>
<p>Field 	containsField(String name)</p>
<p>Method 	containsMethod(String name, String signature)</p>
<p>boolean 	equals(Object obj)<br>
Return value as defined by given BCELComparator strategy.<br>
Attribute[] 	getAttributes()</p>
<p>String 	getClassName()</p>
<p>int 	getClassNameIndex()</p>
<p>static BCELComparator 	getComparator()</p>
<p>ConstantPoolGen 	getConstantPool()</p>
<p>Field[] 	getFields()</p>
<p>String 	getFileName()</p>
<p>String[] 	getInterfaceNames()</p>
<p>int[] 	getInterfaces()</p>
<p>JavaClass 	getJavaClass()</p>
<p>int 	getMajor()</p>
<p>Method 	getMethodAt(int pos)</p>
<p>Method[] 	getMethods()</p>
<p>int 	getMinor()</p>
<p>String 	getSuperclassName()</p>
<p>int 	getSuperclassNameIndex()</p>
<p>int 	hashCode()<br>
Return value as defined by given BCELComparator strategy.<br>
void 	removeAttribute(Attribute a)<br>
Remove an attribute from this class.<br>
void 	removeField(Field f)<br>
Remove a field to this class.<br>
void 	removeInterface(String name)<br>
Remove an interface from this class.<br>
void 	removeMethod(Method m)<br>
Remove a method from this class.<br>
void 	removeObserver(ClassObserver o)<br>
Remove observer for this object.<br>
void 	replaceField(Field old, Field new_)<br>
Replace given field with new one.<br>
void 	replaceMethod(Method old, Method new_)<br>
Replace given method with new one.<br>
void 	setClassName(String name)</p>
<p>void 	setClassNameIndex(int class_name_index)</p>
<p>static void 	setComparator(BCELComparator comparator)</p>
<p>void 	setConstantPool(ConstantPoolGen constant_pool)</p>
<p>void 	setMajor(int major)<br>
Set major version number of class file, default value is 45 (JDK 1.1)<br>
void 	setMethodAt(Method method, int pos)</p>
<p>void 	setMethods(Method[] methods)</p>
<p>void 	setMinor(int minor)<br>
Set minor version number of class file, default value is 3 (JDK 1.1)<br>
void 	setSuperclassName(String name)</p>
<p>void 	setSuperclassNameIndex(int superclass_name_index)</p>
<p>void 	update()<br>
Call notify() method on all observers.</p>
</blockquote>
<p>Now I suppose this all can seem a little scary, but as you will soon find out, it really isn’t that hard.</p>
<p>The next thing we need to cover is MethodGen.  MethodGen, as you can probably guess, contains all the information about a method.  We will need to create out own MethodGen then dump it to the client in order to create the AccessorMethod.</p>
<p>Here is some information on MethodGen from the JavaDocs:</p>
<blockquote>Constructor Summary
MethodGen(int access_flags, Type return_type, Type[] arg_types, String[] arg_names, String method_name, String class_name, InstructionList il, ConstantPoolGen cp)
          Declare method.
MethodGen(Method m, String class_name, ConstantPoolGen cp)
          Instantiate from existing method.
<p>Method Summary<br>
void 	addCodeAttribute(Attribute a)<br>
Add an attribute to the code.<br>
void 	addException(String class_name)<br>
Add an exception possibly thrown by this method.<br>
CodeExceptionGen 	addExceptionHandler(InstructionHandle start_pc, InstructionHandle end_pc, InstructionHandle handler_pc, ObjectType catch_type)<br>
Add an exception handler, i.e., specify region where a handler is active and an instruction where the actual handling is done.<br>
LineNumberGen 	addLineNumber(InstructionHandle ih, int src_line)<br>
Give an instruction a line number corresponding to the source code line.<br>
LocalVariableGen 	addLocalVariable(String name, Type type, InstructionHandle start, InstructionHandle end)<br>
Adds a local variable to this method and assigns an index automatically.<br>
LocalVariableGen 	addLocalVariable(String name, Type type, int slot, InstructionHandle start, InstructionHandle end)<br>
Adds a local variable to this method.<br>
void 	addObserver(MethodObserver o)<br>
Add observer for this object.<br>
MethodGen 	copy(String class_name, ConstantPoolGen cp)</p>
<p>boolean 	equals(Object obj)<br>
Return value as defined by given BCELComparator strategy.<br>
String 	getArgumentName(int i)</p>
<p>String[] 	getArgumentNames()</p>
<p>Type 	getArgumentType(int i)</p>
<p>Type[] 	getArgumentTypes()</p>
<p>String 	getClassName()</p>
<p>Attribute[] 	getCodeAttributes()</p>
<p>static BCELComparator 	getComparator()</p>
<p>CodeExceptionGen[] 	getExceptionHandlers()</p>
<p>String[] 	getExceptions()</p>
<p>InstructionList 	getInstructionList()</p>
<p>LineNumberGen[] 	getLineNumbers()</p>
<p>LineNumberTable 	getLineNumberTable(ConstantPoolGen cp)</p>
<p>LocalVariableGen[] 	getLocalVariables()</p>
<p>LocalVariableTable 	getLocalVariableTable(ConstantPoolGen cp)</p>
<p>int 	getMaxLocals()</p>
<p>int 	getMaxStack()</p>
<p>static int 	getMaxStack(ConstantPoolGen cp, InstructionList il, CodeExceptionGen[] et)<br>
Computes stack usage of an instruction list by performing control flow analysis.<br>
Method 	getMethod()<br>
Get method object.<br>
Type 	getReturnType()</p>
<p>String 	getSignature()</p>
<p>int 	hashCode()<br>
Return value as defined by given BCELComparator strategy.<br>
void 	removeCodeAttribute(Attribute a)<br>
Remove a code attribute.<br>
void 	removeCodeAttributes()<br>
Remove all code attributes.<br>
void 	removeException(String c)<br>
Remove an exception.<br>
void 	removeExceptionHandler(CodeExceptionGen c)<br>
Remove an exception handler.<br>
void 	removeExceptionHandlers()<br>
Remove all line numbers.<br>
void 	removeExceptions()<br>
Remove all exceptions.<br>
void 	removeLineNumber(LineNumberGen l)<br>
Remove a line number.<br>
void 	removeLineNumbers()<br>
Remove all line numbers.<br>
void 	removeLocalVariable(LocalVariableGen l)<br>
Remove a local variable, its slot will not be reused, if you do not use addLocalVariable with an explicit index argument.<br>
void 	removeLocalVariables()<br>
Remove all local variables.<br>
void 	removeNOPs()<br>
Remove all NOPs from the instruction list (if possible) and update every object refering to them, i.e., branch instructions, local variables and exception handlers.<br>
void 	removeObserver(MethodObserver o)<br>
Remove observer for this object.<br>
void 	setArgumentName(int i, String name)</p>
<p>void 	setArgumentNames(String[] arg_names)</p>
<p>void 	setArgumentType(int i, Type type)</p>
<p>void 	setArgumentTypes(Type[] arg_types)</p>
<p>void 	setClassName(String class_name)</p>
<p>static void 	setComparator(BCELComparator comparator)</p>
<p>void 	setInstructionList(InstructionList il)</p>
<p>void 	setMaxLocals()<br>
Compute maximum number of local variables.<br>
void 	setMaxLocals(int m)<br>
Set maximum number of local variables.<br>
void 	setMaxStack()<br>
Computes max.<br>
void 	setMaxStack(int m)<br>
Set maximum stack size for this method.<br>
void 	setReturnType(Type return_type)</p>
<p>void 	stripAttributes(boolean flag)<br>
Do not/Do produce attributes code attributesLineNumberTable and LocalVariableTable, like javac -O<br>
String 	toString()<br>
Return string representation close to declaration format, `public static void main(String[]) throws IOException’, e.g.<br>
void 	update()<br>
Call notify() method on all observers.</p>
</blockquote>
<p>Ok, I suppose you know enough for us to move on.</p>
<p>Go ahead and open up your IDE.  I will be using Eclipse in this tutorial because I think it is light weight and has good features.  However, it is simple to do it in other IDEs as well.</p>
<p>Now, create a new project and call it whatever you want.  When you reach the part about adding librarys etc, add in the bcel jar you downloaded earlier as an “External Jar”.  Click “Finish” and your project will be created.  Now, create a new class, I called mine “Main.class”.  This is the class all of our code will be going into.</p>
<p>Now, just for you guys, here are all of the BCEL imports:</p>
<p><code>
import org.apache.*;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;
import org.apache.bcel.util.*;
import org.apache.bcel.verifier.*;
import org.apache.bcel.verifier.exc.*;
import org.apache.bcel.verifier.statics.*;
import org.apache.bcel.verifier.structurals.*;</code></p>
<p>So, our class should look like this:</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>public class Main {</p>
<pre><code>public static void main(String[] args) {
	//Method calls will go here
}
</code></pre>
<p>}[/code]</p>
<p>Now, let’s create our method builder.</p>
<p>Our first objective is to create a method to find the Client class, so that we can inject our method in.  To do this, we need the runescape client.  Download it from <a href="http://world37.runescape.com/runescape.jar" rel="nofollow noopener">http://world37.runescape.com/runescape.jar</a> and extract it with a program like WinRAR.  Now, delete the both the folders which were extracted, so that there is only a whole load of class files.</p>
<p>Now navigate to the folder your project is stored in.  Mine is in “C:\accessorTutorial”.  And copy the runescape folder into the project folder.  Now refresh eclipse (File -&gt; Refresh) or F5 in eclipse.</p>
<p>The runescape folder will now be part of your project!</p>
<p>Our next step is to load all the classes in the client into a ClassGen array (ClassGen[]).  To do this use the folowing code:</p>
<p><code>    public ClassGen[] loadToArray() throws Exception {
        long time = System.nanoTime();
        File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
        int length = 0;
        for (String file : f.list())
            if (!new File(file).isDirectory())
                length++;
        ClassGen[] c = new ClassGen[length];
        for (int i = 0; i &lt; c.length; i++)
            c[i] = new ClassGen(new ClassParser(f.getName() + "\\" + f.list()[i]).parse());
        return c;
    }</code></p>
<p>Now our class looks like this:</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>import java.lang.<em>;<br>
import import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class Main {</p>
<pre><code>public ClassGen[] loadedClasses = null;

public static void main(String[] args) {
	try {		
		loadedClasses = loadToArray();
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public ClassGen[] loadToArray() throws Exception {
    	long time = System.nanoTime();
    	File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
    	int length = 0;
    	for (String file : f.list())
        if (!new File(file).isDirectory())
            length++;
    	ClassGen[] c = new ClassGen[length];
    	for (int i = 0; i &lt; c.length; i++)
        c[i] = new ClassGen(new ClassParser(f.getName() + "\\" + f.list()[i]).parse());
   	return c;
}
</code></pre>
<p>}[/code]</p>
<p>Now that we have all of our classes, lets find the client class!  To do this we just iterate through all the classes until we find the class named “client”.</p>
<p>Here is the code:</p>
<p><code>
public ClassGen getClientClass() {
	ClassGen toRtn = null;
	for(ClassGen cg : loadedClasses) {
		if(cg.getClassName().toString().equals("client"))
			toRtn = cg;
	}
	return toRtn;
}</code></p>
<p>So, your new class will look like this:</p>
<p>[code]<br>
import org.apache.<em>;<br>
import org.apache.bcel.</em>;<br>
import org.apache.bcel.classfile.<em>;<br>
import org.apache.bcel.generic.</em>;<br>
import org.apache.bcel.util.<em>;<br>
import org.apache.bcel.verifier.</em>;<br>
import org.apache.bcel.verifier.exc.<em>;<br>
import org.apache.bcel.verifier.statics.</em>;<br>
import org.apache.bcel.verifier.structurals.*;</p>
<p>import java.lang.<em>;<br>
import import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;</p>
<p>public class Main {</p>
<pre><code>public ClassGen[] loadedClasses = null;
public ClassGen clientClass = null;

public static void main(String[] args) {
	try {		
		loadedClasses = loadToArray();
		clientClass = getClientClass();
	} catch (Exception e) {
		e.printStackTrace();
	}
}

public ClassGen[] loadToArray() throws Exception {
    	long time = System.nanoTime();
    	File f = new File(System.getProperty("user.dir") + "\\" + "runescape");
    	int length = 0;
    	for (String file : f.list())
        if (!new File(file).isDirectory())
            length++;
    	ClassGen[] c = new ClassGen[length];
    	for (int i = 0; i &lt; c.length; i++)
        c[i] = new ClassGen(new ClassParser(f.getName() + "\\" + f.list()[i]).parse());
   	return c;
	}

public ClassGen getClientClass() {
	ClassGen toRtn = null;
	for(ClassGen cg : loadedClasses) {
		if(cg.getClassName().toString().equals("client"))
			toRtn = cg;
	}
	return toRtn;
}
</code></pre>
<p>}[/code]</p>
<p>YAY!  We are finally ready to start building and dumping our new method!</p>
<p>Let’s go back quickly and look at one of the constructors for MethodGen:</p>
<blockquote>MethodGen(int access_flags, Type return_type, Type[] arg_types, String[] arg_names, String method_name, String class_name, InstructionList il, ConstantPoolGen cp)
          Declare method.</blockquote>
<p>Now, among many things, you will see something new here.  ConstantPoolGen.  In basic terms, the constant pool is a table in each class that contains the values for all constants, typically any reference to a constant anywhere in a class file is using the index of that constant in the table.  Now, don’t be scared, it is VERY easy to create.</p>
<pre><code class="lang-auto">ConstantPoolGen cp = clientClass.getConstantPool();</code></pre>
<p>So, now that we have this down, lets start working on the other stuff.  We will take this whole constructor one argument at a time.</p>
<blockquote>int access_flags</blockquote>These are the access flags our method will use (ex, "public, "private", "static" etc).  For this, we need the "public" field.  Here is the code for that:
<pre><code class="lang-auto">Constants.ACC_PUBLIC</code></pre>
<p>Our next argument is:</p>
<blockquote>Type return_type</blockquote>
<p>The correct input depends on the field we want.  Since BaseX is an int, we will use an int :</p>
<pre><code class="lang-auto">Type.INT</code></pre>
<p>The next two are both regarding the arguments for the method.</p>
<blockquote>Type[] arg_types, String[] arg_names</blockquote>
<p>Since we dont want any arguments we use:</p>
<pre><code class="lang-auto">Type.NO_ARGS, new String[]{}</code></pre>
<p>The next one is very obvious what we need to do.</p>
<blockquote>String method_name</blockquote>
<p>We will call our method:</p>
<pre><code class="lang-auto">"getBaseX"</code></pre>
<p>The next one asks us for the name of the class which is being inserted.</p>
<blockquote>String class_name</blockquote>
<p>We already have this.</p>
<pre><code class="lang-auto">clientClass.getClassName();</code></pre>
<p>The last one we need is an InstructionList.  This is the code our method will contain.  It is done at a bytecode level, not a java level.</p>
<p>We need to create a new InstructionList and then populate it before we add the method to the class.  For now, we don’t need a value.</p>
<p>So, here is everything put together :</p>
<p><code>
ConstantPoolGen cp = clientClass.getConstantPool();
InstructionList iList = new InstructionList();
MethodGen getBaseXMethod = new MethodGen(Constants.ACC_PUBLIC, Type.INT, Type.NO_ARGS, new String[]{}, "getBaseX", clientClass.getClassName(), iList, cp);</code></p>
<p>Now we need to populate the InstrutionList, for this, we can use an InsturctionFactory:</p>
<p><code>InstructionFactory iFact = new InstructionFactory(theClassGen,theCPool);
		Instruction pushThis = new ALOAD(0);
		Instruction getBaseX = iFact.createFieldAccess("pa","e",Type.INT,Constants.GETSTATIC);
		Instruction returnBaseX = iFac.createReturn(Type.INT);</code></p>
<p>Now we add them to the method:</p>
<p><code>iList.append(pushThis);
		iList.append(getBaseX);
		iList.append(returnBaseX);</code></p>
<p>And, finally, cleanup and dump it to the class:</p>
<p>[code]getBaseXMethod.setMaxStack();<br>
getBaseXMethod.setMaxLocals();</p>
<pre><code>	clientClass.addMethod(getBaseXMethod.getMethod());

	try {
		clientClass.getJavaClass().dump("client.class");
		System.out.println("Dumped client class!");
	} catch (Exception ex) {
		ex.printStackTrace();
	}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141/1</link>
        <pubDate>Thu, 31 Jul 2008 14:40:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-223141-1</guid>
        <source url="https://forum.moparisthebest.com/t/tutorial-all-about-accessor-methods-interfaces/223141.rss">[Tutorial] All About Accessor Methods &amp; Interfaces</source>
      </item>
  </channel>
</rss>
