<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
    <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468</link>
    <description>[b]Replace your item Class with this[/b]
[code]
package server.model.items;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import server.Config;
import server.Server;

public class Item {

	public static boolean playerCape(int itemId) {
		String[] data = {
			&quot;cloak&quot;, &quot;cape&quot;, &quot;Ava&#39;s&quot;,
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerBoots(int itemId) {
		String[] data = {
			&quot;Shoes&quot;, &quot;shoes&quot;, &quot;boots&quot;, &quot;Boots&quot;
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerGloves(int itemId) {
		String[] data = {
			&quot;Gloves&quot;, &quot;gloves&quot;, &quot;glove&quot;, &quot;Glove&quot;, &quot;gauntlets&quot;, &quot;Gauntlets&quot;
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerShield(int itemId) {
		String[] data = {
			&quot;kiteshield&quot;, &quot;book&quot;, &quot;Kiteshield&quot;, &quot;shield&quot;, &quot;Shield&quot;, &quot;Kite&quot;, &quot;kite&quot;, &quot;defender&quot;, &quot;xil&quot;
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerAmulet(int itemId) {
		String[] data = {
			&quot;amulet&quot;, &quot;Amulet&quot;, &quot;necklace&quot;, &quot;Necklace&quot;, &quot;Pendant&quot;, &quot;pendant&quot;, &quot;Symbol&quot;, &quot;symbol&quot;
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerArrows(int itemId) {
		String[] data = {
			&quot;Arrows&quot;, &quot;arrows&quot;, &quot;Arrow&quot;, &quot;arrow&quot;, &quot;Bolts&quot;, &quot;bolts&quot;, &quot;Bolt&quot;, &quot;bolt&quot;
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerRings(int itemId) {
		String[] data = {
			&quot;ring&quot;, &quot;rings&quot;, &quot;Ring&quot;, &quot;Rings&quot;,
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerHats(int itemId) {
		String[] data = {
			&quot;boater&quot;, &quot;cowl&quot;, &quot;peg&quot;, &quot;coif&quot;, &quot;helm&quot;, 
			&quot;coif&quot;, &quot;mask&quot;, &quot;hat&quot;, &quot;headband&quot;, &quot;hood&quot;, 
			&quot;disguise&quot;, &quot;cavalier&quot;, &quot;full helm&quot;, &quot;tiara&quot;,
			&quot;helmet&quot;, &quot;Hat&quot;, &quot;ears&quot;, &quot;partyhat&quot;, &quot;helm(t)&quot;,
			&quot;helm(g)&quot;, &quot;beret&quot;, &quot;facemask&quot;, &quot;sallet&quot;,
			&quot;hat(g)&quot;, &quot;hat(t)&quot;, &quot;bandana&quot;, &quot;Helm&quot;,
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if((item.endsWith(data[i]) || item.contains(data[i])) &amp;&amp; itemId != 4214) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerLegs(int itemId) {
		String[] data = {
			&quot;tassets&quot;, &quot;chaps&quot;, &quot;bottoms&quot;, &quot;gown&quot;, &quot;trousers&quot;, 
			&quot;platelegs&quot;, &quot;robe&quot;, &quot;plateskirt&quot;, &quot;legs&quot;, &quot;leggings&quot;, 
			&quot;shorts&quot;, &quot;Skirt&quot;, &quot;skirt&quot;, &quot;cuisse&quot;, &quot;Trousers&quot;,
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if((item.endsWith(data[i]) || item.contains(data[i])) &amp;&amp; (!item.contains(&quot;top&quot;) &amp;&amp; (!item.contains(&quot;robe (g)&quot;) &amp;&amp; (!item.contains(&quot;robe (t)&quot;))))) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerBody(int itemId) {
		String[] data = {
			&quot;body&quot;, &quot;top&quot;, &quot;Priest gown&quot;, &quot;apron&quot;, &quot;shirt&quot;, 
			&quot;platebody&quot;, &quot;robetop&quot;, &quot;body(g)&quot;, &quot;body(t)&quot;, 
			&quot;Wizard robe (g)&quot;, &quot;Wizard robe (t)&quot;, &quot;body&quot;, &quot;brassard&quot;, &quot;blouse&quot;, 
			&quot;tunic&quot;, &quot;leathertop&quot;, &quot;Saradomin plate&quot;, &quot;chainbody&quot;, 
			&quot;hauberk&quot;, &quot;Shirt&quot;, &quot;torso&quot;, &quot;chestplate&quot;,
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	private static String[] fullbody = {
		&quot;top&quot;, &quot;chestplate&quot;, &quot;shirt&quot;,&quot;platebody&quot;,&quot;Ahrims robetop&quot;,
		&quot;Karils leathertop&quot;,&quot;brassard&quot;,&quot;Robe top&quot;,&quot;robetop&quot;,
		&quot;platebody (t)&quot;,&quot;platebody (g)&quot;,&quot;chestplate&quot;,
		&quot;torso&quot;, &quot;hauberk&quot;, &quot;Dragon chainbody&quot;
	};

	private static String[] fullhat = {
		&quot;med helm&quot;, &quot;coif&quot;, &quot;Dharok&#39;s helm&quot;, &quot;hood&quot;, &quot;Initiate helm&quot;,
		&quot;Coif&quot;,&quot;Helm of neitiznot&quot;,&quot;Armadyl helmet&quot;,&quot;Berserker helm&quot;, 
		&quot;Archer helm&quot;, &quot;Farseer helm&quot;, &quot;Warrior helm&quot;, &quot;Void&quot;
	};

	private static String[] fullmask = {
		&quot;full helm&quot;, &quot;mask&quot;, &quot;Verac&#39;s helm&quot;, &quot;Guthan&#39;s helm&quot;, &quot;Karil&#39;s coif&quot;, &quot;mask&quot;, &quot;Torag&#39;s helm&quot;, &quot;sallet&quot;, &quot;Saradomin helm&quot;,
	};

	public static boolean isFullBody(int itemId) {
		String weapon = getItemName(itemId);
		if (weapon == null)
			return false;
		for (int i = 0; i &lt; fullbody.length; i++) {
			if (weapon.endsWith(fullbody[i]) || weapon.contains(fullbody[i])) {
				return true;
			}
		}
		return false;
	}

	public static boolean isFullHelm(int itemId) {
		String weapon = getItemName(itemId);
			if (weapon == null)
				return false;
		for (int i = 0; i &lt; fullhat.length; i++) {
			if (weapon.endsWith(fullhat[i]) &amp;&amp; itemId != 2631) {
				return true;
			}
		}
		return false;
	}

	public static boolean isFullMask(int itemId) {
		String weapon = getItemName(itemId);
			if (weapon == null)
				return false;
		for (int i = 0; i &lt; fullmask.length; i++) {
			if (weapon.endsWith(fullmask[i]) &amp;&amp; itemId != 2631) {
				return true;
			}
		}
		return false;
	}
	
	public static String getItemName(int id) {
		for (int j = 0; j &lt; Server.itemHandler.ItemList.length; j++) {
			if (Server.itemHandler.ItemList[j] != null)
				if (Server.itemHandler.ItemList[j].itemId == id)
					return Server.itemHandler.ItemList[j].itemName;	
		}
		return null;
	}
	
	
	public static boolean[] itemStackable = new boolean[Config.ITEM_LIMIT];
	public static boolean[] itemIsNote = new boolean[Config.ITEM_LIMIT];
	public static int[] targetSlots = new int[Config.ITEM_LIMIT];
	static {
		int counter = 0;
		int c;
		
		try {
			FileInputStream dataIn = new FileInputStream(new File(&quot;./Data/data/stackable.dat&quot;));
			while ((c = dataIn.read()) != -1) {
				if (c == 0) {
					itemStackable[counter] = false;
				} else {
					itemStackable[counter] = true;
				}
				counter++;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println(&quot;Critical error while loading stackabledata! Trace:&quot;);
			e.printStackTrace();
		}

		counter = 0;
		
		try {
			FileInputStream dataIn = new FileInputStream(new File(&quot;./Data/data/notes.dat&quot;));
			while ((c = dataIn.read()) != -1) {
				if (c == 0) {
					itemIsNote[counter] = true;
				} else {
					itemIsNote[counter] = false;
				}
				counter++;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println(&quot;Critical error while loading notedata! Trace:&quot;);
			e.printStackTrace();
		}
		
		counter = 0;
		try {
			FileInputStream dataIn = new FileInputStream(new File(&quot;./Data/data/equipment.dat&quot;));
			while ((c = dataIn.read()) != -1) {
				targetSlots[counter++] = c;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println(&quot;Critical error while loading notedata! Trace:&quot;);
			e.printStackTrace();
		}
	}
}
[/code]
[b]Now open ItemAssistant.java and Replace your ItemType method with this one[/b]
[code]
public String itemType(int item) {
		if(Item.playerCape(item)) {
			return &quot;cape&quot;;
		}
		if(Item.playerBoots(item)) {
			  return &quot;boots&quot;;
		}
		if(Item.playerGloves(item)) {
			  return &quot;gloves&quot;;
		}
		if(Item.playerShield(item)) {
			return &quot;shield&quot;;
		}
		if(Item.playerAmulet(item)) {
			return &quot;amulet&quot;;
		}
		if(Item.playerArrows(item)) {
			return &quot;arrows&quot;;
		}
		if(Item.playerRings(item)) {
			return &quot;ring&quot;;
		}
		if(Item.playerHats(item)) {
			return &quot;hat&quot;;
		}
		if(Item.playerLegs(item)) {
			return &quot;legs&quot;;
		}
		if(Item.playerBody(item)) {
			return &quot;body&quot;;
		}
		return &quot;weapon&quot;;
	}
[/code]
[b]Finally replace the main boolean wear method with this[/b]
[code]
public boolean wearItem(int wearID, int slot) {
		synchronized(c) {
			int targetSlot=0;
			boolean canWearItem = true;
			if(c.playerItems[slot] == (wearID+1)) {				
				getRequirements(getItemName(wearID).toLowerCase(), wearID);	
				targetSlot = Item.targetSlots[wearID];

				if(itemType(wearID).equalsIgnoreCase(&quot;cape&quot;)) {
					targetSlot=1;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;hat&quot;)) {
					targetSlot=0;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;amulet&quot;)) {
					targetSlot=2;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;arrows&quot;)) {
					targetSlot=13;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;body&quot;)) {
					targetSlot=4;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;shield&quot;)) {
					targetSlot=5;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;legs&quot;)) {
					targetSlot=7;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;gloves&quot;)) {
					targetSlot=9;
				} else if(itemType(wearID).equalsIgnoreCase(&quot;boots&quot;)) {
					targetSlot=10;	
				} else if(itemType(wearID).equalsIgnoreCase(&quot;ring&quot;)) {
					targetSlot=12;
				} else {
					targetSlot = 3;
				}
				
				if(c.duelRule[11] &amp;&amp; targetSlot == 0) {
					c.sendMessage(&quot;Wearing hats has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[12] &amp;&amp; targetSlot == 1) {
					c.sendMessage(&quot;Wearing capes has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[13]  &amp;&amp; targetSlot == 2) {
					c.sendMessage(&quot;Wearing amulets has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[14]  &amp;&amp; targetSlot == 3) {
					c.sendMessage(&quot;Wielding weapons has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[15]  &amp;&amp; targetSlot == 4) {
					c.sendMessage(&quot;Wearing bodies has been disabled in this duel!&quot;);
					return false;
				}
				if((c.duelRule[16] &amp;&amp; targetSlot == 5) || (c.duelRule[16] &amp;&amp; is2handed(getItemName(wearID).toLowerCase(), wearID))) {
					c.sendMessage(&quot;Wearing shield has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[17]  &amp;&amp; targetSlot == 7) {
					c.sendMessage(&quot;Wearing legs has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[18]  &amp;&amp; targetSlot == 9) {
					c.sendMessage(&quot;Wearing gloves has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[19]  &amp;&amp; targetSlot == 10) {
					c.sendMessage(&quot;Wearing boots has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[20]  &amp;&amp; targetSlot == 12) {
					c.sendMessage(&quot;Wearing rings has been disabled in this duel!&quot;);
					return false;
				}
				if(c.duelRule[21]  &amp;&amp; targetSlot == 13) {
					c.sendMessage(&quot;Wearing arrows has been disabled in this duel!&quot;);
					return false;
				}

				if(Config.itemRequirements) {
					if(targetSlot == 10 || targetSlot == 7 || targetSlot == 5 || targetSlot == 4 || targetSlot == 0 || targetSlot == 9 || targetSlot == 10) {
						if(c.defenceLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[1]) &lt; c.defenceLevelReq) {
								c.sendMessage(&quot;You need a defence level of &quot;+c.defenceLevelReq+&quot; to wear this item.&quot;);
								canWearItem = false;
							}
						}
						if(c.rangeLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[4]) &lt; c.rangeLevelReq) {
								c.sendMessage(&quot;You need a range level of &quot;+c.rangeLevelReq+&quot; to wear this item.&quot;);
								canWearItem = false;
							}
						}
						if(c.magicLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[6]) &lt; c.magicLevelReq) {
								c.sendMessage(&quot;You need a magic level of &quot;+c.magicLevelReq+&quot; to wear this item.&quot;);
								canWearItem = false;
							}
						}
					}
					if(targetSlot == 3) {
						if(c.attackLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[0]) &lt; c.attackLevelReq) {
								c.sendMessage(&quot;You need an attack level of &quot;+c.attackLevelReq+&quot; to wield this weapon.&quot;);
								canWearItem = false;
							}
						}
						if(c.rangeLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[4]) &lt; c.rangeLevelReq) {
								c.sendMessage(&quot;You need a range level of &quot;+c.rangeLevelReq+&quot; to wield this weapon.&quot;);
								canWearItem = false;
							}
						}
						if(c.magicLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[6]) &lt; c.magicLevelReq) {
								c.sendMessage(&quot;You need a magic level of &quot;+c.magicLevelReq+&quot; to wield this weapon.&quot;);
								canWearItem = false;
							}
						}
					}
				}

				if(!canWearItem) {
					return false;
				}
				
				int wearAmount = c.playerItemsN[slot];
				if (wearAmount &lt; 1) {
					return false;
				}
				
				if (targetSlot == c.playerWeapon) {
					c.autocasting = false;
					c.autocastId = 0;
					c.getPA().sendFrame36(108, 0);
				}

				if(slot &gt;= 0 &amp;&amp; wearID &gt;= 0) {
					int toEquip = c.playerItems[slot];
					int toEquipN = c.playerItemsN[slot];
					int toRemove = c.playerEquipment[targetSlot];
					int toRemoveN = c.playerEquipmentN[targetSlot];
					if (toEquip == toRemove + 1 &amp;&amp; Item.itemStackable[toRemove]) {
						deleteItem(toRemove, getItemSlot(toRemove), toEquipN);
						c.playerEquipmentN[targetSlot] += toEquipN;
					} else if (targetSlot != 5 &amp;&amp; targetSlot != 3) {
						c.playerItems[slot] = toRemove + 1;
						c.playerItemsN[slot] = toRemoveN;
						c.playerEquipment[targetSlot] = toEquip - 1;
						c.playerEquipmentN[targetSlot] = toEquipN;
					} else if (targetSlot == 5) {
						boolean wearing2h = is2handed(getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase(), c.playerEquipment[c.playerWeapon]);
						boolean wearingShield = c.playerEquipment[c.playerShield] &gt; 0;
						if (wearing2h) {
							toRemove = c.playerEquipment[c.playerWeapon];
							toRemoveN = c.playerEquipmentN[c.playerWeapon];
							c.playerEquipment[c.playerWeapon] = -1;
							c.playerEquipmentN[c.playerWeapon] = 0;
							updateSlot(c.playerWeapon);
						}
						c.playerItems[slot] = toRemove + 1;
						c.playerItemsN[slot] = toRemoveN;
						c.playerEquipment[targetSlot] = toEquip - 1;
						c.playerEquipmentN[targetSlot] = toEquipN;			
					} else if (targetSlot == 3) {
						boolean is2h = is2handed(getItemName(wearID).toLowerCase(), wearID);
						boolean wearingShield = c.playerEquipment[c.playerShield] &gt; 0;
						boolean wearingWeapon = c.playerEquipment[c.playerWeapon] &gt; 0;
						if (is2h) {
							if (wearingShield &amp;&amp; wearingWeapon) {
								if (freeSlots() &gt; 0) {
									c.playerItems[slot] = toRemove + 1;
									c.playerItemsN[slot] = toRemoveN;
									c.playerEquipment[targetSlot] = toEquip - 1;
									c.playerEquipmentN[targetSlot] = toEquipN;
									removeItem(c.playerEquipment[c.playerShield], c.playerShield);
								} else {
									c.sendMessage(&quot;You do not have enough inventory space to do this.&quot;);
									return false;
								}						
							} else if (wearingShield &amp;&amp; !wearingWeapon) {
								c.playerItems[slot] = c.playerEquipment[c.playerShield] + 1;
								c.playerItemsN[slot] = c.playerEquipmentN[c.playerShield];
								c.playerEquipment[targetSlot] = toEquip - 1;
								c.playerEquipmentN[targetSlot] = toEquipN;
								c.playerEquipment[c.playerShield] = -1;
								c.playerEquipmentN[c.playerShield] = 0;
								updateSlot(c.playerShield);
							} else {
								c.playerItems[slot] = toRemove + 1;
								c.playerItemsN[slot] = toRemoveN;
								c.playerEquipment[targetSlot] = toEquip - 1;
								c.playerEquipmentN[targetSlot] = toEquipN;	
							}
						} else {
							c.playerItems[slot] = toRemove + 1;
							c.playerItemsN[slot] = toRemoveN;
							c.playerEquipment[targetSlot] = toEquip - 1;
							c.playerEquipmentN[targetSlot] = toEquipN;	
						}
					}
					resetItems(3214);
				}
				if(targetSlot == 3) {
					c.usingSpecial = false;
					addSpecialBar(wearID);
				}
				if(c.getOutStream() != null &amp;&amp; c != null ) {
					c.getOutStream().createFrameVarSizeWord(34);
					c.getOutStream().writeWord(1688);
					c.getOutStream().writeByte(targetSlot);
					c.getOutStream().writeWord(wearID+1);

					if (c.playerEquipmentN[targetSlot] &gt; 254) {
						c.getOutStream().writeByte(255);
						c.getOutStream().writeDWord(c.playerEquipmentN[targetSlot]);
					} else {
						c.getOutStream().writeByte(c.playerEquipmentN[targetSlot]);
					}
					
					c.getOutStream().endFrameVarSizeWord();
					c.flushOutStream();
				}
				sendWeapon(c.playerEquipment[c.playerWeapon], getItemName(c.playerEquipment[c.playerWeapon]));
				resetBonus();
				getBonus();
				writeBonus();
				c.getCombat().getPlayerAnimIndex(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.getPA().requestUpdates();
				return true;
			} else {
				return false;
			}
		}
	}
[/code]
[center][size=20pt]Done![/size][/center]</description>
    
    <lastBuildDate>Wed, 29 Jun 2011 12:45:11 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
        <dc:creator><![CDATA[@Vexillum Vexillum]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vexillum">@Vexillum</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="401468">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/anc13ntsisback/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Anc13ntsIsBack:</div>
<blockquote>
<p>Wrong Section, Try again.</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/5</link>
        <pubDate>Wed, 29 Jun 2011 12:45:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401468-5</guid>
        <source url="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss">[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</source>
      </item>
      <item>
        <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
        <dc:creator><![CDATA[@Anc13ntsIsBack Anc13ntsIsBack]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/anc13ntsisback">@Anc13ntsIsBack</a> wrote:</p>
          <blockquote>
              <p>Wrong Section, Try again.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/4</link>
        <pubDate>Wed, 29 Jun 2011 12:15:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401468-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss">[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</source>
      </item>
      <item>
        <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
        <dc:creator><![CDATA[@Legendary_Daniel Legendary Daniel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/legendary_daniel">@Legendary_Daniel</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="401468">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/sacredheart/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> SacredHeart:</div>
<blockquote>
<p>It doesn’t work.</p>
</blockquote>
</aside>
<p>It should’ve :s</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/3</link>
        <pubDate>Wed, 29 Jun 2011 11:53:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401468-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss">[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</source>
      </item>
      <item>
        <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
        <dc:creator><![CDATA[@SacredHeart SacredHeart]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sacredheart">@SacredHeart</a> wrote:</p>
          <blockquote>
              <p>It doesn’t work.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/2</link>
        <pubDate>Wed, 29 Jun 2011 11:45:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401468-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss">[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</source>
      </item>
      <item>
        <title>[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</title>
        <dc:creator><![CDATA[@Legendary_Daniel Legendary Daniel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/legendary_daniel">@Legendary_Daniel</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">Replace your item Class with this</span></p>
<pre><code class="lang-auto">package server.model.items;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import server.Config;
import server.Server;

public class Item {

	public static boolean playerCape(int itemId) {
		String[] data = {
			"cloak", "cape", "Ava's",
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerBoots(int itemId) {
		String[] data = {
			"Shoes", "shoes", "boots", "Boots"
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerGloves(int itemId) {
		String[] data = {
			"Gloves", "gloves", "glove", "Glove", "gauntlets", "Gauntlets"
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerShield(int itemId) {
		String[] data = {
			"kiteshield", "book", "Kiteshield", "shield", "Shield", "Kite", "kite", "defender", "xil"
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerAmulet(int itemId) {
		String[] data = {
			"amulet", "Amulet", "necklace", "Necklace", "Pendant", "pendant", "Symbol", "symbol"
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerArrows(int itemId) {
		String[] data = {
			"Arrows", "arrows", "Arrow", "arrow", "Bolts", "bolts", "Bolt", "bolt"
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerRings(int itemId) {
		String[] data = {
			"ring", "rings", "Ring", "Rings",
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerHats(int itemId) {
		String[] data = {
			"boater", "cowl", "peg", "coif", "helm", 
			"coif", "mask", "hat", "headband", "hood", 
			"disguise", "cavalier", "full helm", "tiara",
			"helmet", "Hat", "ears", "partyhat", "helm(t)",
			"helm(g)", "beret", "facemask", "sallet",
			"hat(g)", "hat(t)", "bandana", "Helm",
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if((item.endsWith(data[i]) || item.contains(data[i])) &amp;&amp; itemId != 4214) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerLegs(int itemId) {
		String[] data = {
			"tassets", "chaps", "bottoms", "gown", "trousers", 
			"platelegs", "robe", "plateskirt", "legs", "leggings", 
			"shorts", "Skirt", "skirt", "cuisse", "Trousers",
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if((item.endsWith(data[i]) || item.contains(data[i])) &amp;&amp; (!item.contains("top") &amp;&amp; (!item.contains("robe (g)") &amp;&amp; (!item.contains("robe (t)"))))) {
				item1 = true;
			}
		}
		return item1;
	}

	public static boolean playerBody(int itemId) {
		String[] data = {
			"body", "top", "Priest gown", "apron", "shirt", 
			"platebody", "robetop", "body(g)", "body(t)", 
			"Wizard robe (g)", "Wizard robe (t)", "body", "brassard", "blouse", 
			"tunic", "leathertop", "Saradomin plate", "chainbody", 
			"hauberk", "Shirt", "torso", "chestplate",
		};
		String item = getItemName(itemId);
		if (item == null) {
			return false;
		}
		boolean item1 = false;
		for(int i = 0; i &lt; data.length; i++ ) {
			if(item.endsWith(data[i]) || item.contains(data[i])) {
				item1 = true;
			}
		}
		return item1;
	}

	private static String[] fullbody = {
		"top", "chestplate", "shirt","platebody","Ahrims robetop",
		"Karils leathertop","brassard","Robe top","robetop",
		"platebody (t)","platebody (g)","chestplate",
		"torso", "hauberk", "Dragon chainbody"
	};

	private static String[] fullhat = {
		"med helm", "coif", "Dharok's helm", "hood", "Initiate helm",
		"Coif","Helm of neitiznot","Armadyl helmet","Berserker helm", 
		"Archer helm", "Farseer helm", "Warrior helm", "Void"
	};

	private static String[] fullmask = {
		"full helm", "mask", "Verac's helm", "Guthan's helm", "Karil's coif", "mask", "Torag's helm", "sallet", "Saradomin helm",
	};

	public static boolean isFullBody(int itemId) {
		String weapon = getItemName(itemId);
		if (weapon == null)
			return false;
		for (int i = 0; i &lt; fullbody.length; i++) {
			if (weapon.endsWith(fullbody[i]) || weapon.contains(fullbody[i])) {
				return true;
			}
		}
		return false;
	}

	public static boolean isFullHelm(int itemId) {
		String weapon = getItemName(itemId);
			if (weapon == null)
				return false;
		for (int i = 0; i &lt; fullhat.length; i++) {
			if (weapon.endsWith(fullhat[i]) &amp;&amp; itemId != 2631) {
				return true;
			}
		}
		return false;
	}

	public static boolean isFullMask(int itemId) {
		String weapon = getItemName(itemId);
			if (weapon == null)
				return false;
		for (int i = 0; i &lt; fullmask.length; i++) {
			if (weapon.endsWith(fullmask[i]) &amp;&amp; itemId != 2631) {
				return true;
			}
		}
		return false;
	}
	
	public static String getItemName(int id) {
		for (int j = 0; j &lt; Server.itemHandler.ItemList.length; j++) {
			if (Server.itemHandler.ItemList[j] != null)
				if (Server.itemHandler.ItemList[j].itemId == id)
					return Server.itemHandler.ItemList[j].itemName;	
		}
		return null;
	}
	
	
	public static boolean[] itemStackable = new boolean[Config.ITEM_LIMIT];
	public static boolean[] itemIsNote = new boolean[Config.ITEM_LIMIT];
	public static int[] targetSlots = new int[Config.ITEM_LIMIT];
	static {
		int counter = 0;
		int c;
		
		try {
			FileInputStream dataIn = new FileInputStream(new File("./Data/data/stackable.dat"));
			while ((c = dataIn.read()) != -1) {
				if (c == 0) {
					itemStackable[counter] = false;
				} else {
					itemStackable[counter] = true;
				}
				counter++;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println("Critical error while loading stackabledata! Trace:");
			e.printStackTrace();
		}

		counter = 0;
		
		try {
			FileInputStream dataIn = new FileInputStream(new File("./Data/data/notes.dat"));
			while ((c = dataIn.read()) != -1) {
				if (c == 0) {
					itemIsNote[counter] = true;
				} else {
					itemIsNote[counter] = false;
				}
				counter++;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println("Critical error while loading notedata! Trace:");
			e.printStackTrace();
		}
		
		counter = 0;
		try {
			FileInputStream dataIn = new FileInputStream(new File("./Data/data/equipment.dat"));
			while ((c = dataIn.read()) != -1) {
				targetSlots[counter++] = c;
			}
			dataIn.close();
		} catch (IOException e) {
			System.out.println("Critical error while loading notedata! Trace:");
			e.printStackTrace();
		}
	}
}</code></pre>
<p><span class="bbcode-b">Now open ItemAssistant.java and Replace your ItemType method with this one</span></p>
<pre><code class="lang-auto">public String itemType(int item) {
		if(Item.playerCape(item)) {
			return "cape";
		}
		if(Item.playerBoots(item)) {
			  return "boots";
		}
		if(Item.playerGloves(item)) {
			  return "gloves";
		}
		if(Item.playerShield(item)) {
			return "shield";
		}
		if(Item.playerAmulet(item)) {
			return "amulet";
		}
		if(Item.playerArrows(item)) {
			return "arrows";
		}
		if(Item.playerRings(item)) {
			return "ring";
		}
		if(Item.playerHats(item)) {
			return "hat";
		}
		if(Item.playerLegs(item)) {
			return "legs";
		}
		if(Item.playerBody(item)) {
			return "body";
		}
		return "weapon";
	}</code></pre>
<p><span class="bbcode-b">Finally replace the main boolean wear method with this</span></p>
<pre><code class="lang-auto">public boolean wearItem(int wearID, int slot) {
		synchronized(c) {
			int targetSlot=0;
			boolean canWearItem = true;
			if(c.playerItems[slot] == (wearID+1)) {				
				getRequirements(getItemName(wearID).toLowerCase(), wearID);	
				targetSlot = Item.targetSlots[wearID];

				if(itemType(wearID).equalsIgnoreCase("cape")) {
					targetSlot=1;
				} else if(itemType(wearID).equalsIgnoreCase("hat")) {
					targetSlot=0;
				} else if(itemType(wearID).equalsIgnoreCase("amulet")) {
					targetSlot=2;
				} else if(itemType(wearID).equalsIgnoreCase("arrows")) {
					targetSlot=13;
				} else if(itemType(wearID).equalsIgnoreCase("body")) {
					targetSlot=4;
				} else if(itemType(wearID).equalsIgnoreCase("shield")) {
					targetSlot=5;
				} else if(itemType(wearID).equalsIgnoreCase("legs")) {
					targetSlot=7;
				} else if(itemType(wearID).equalsIgnoreCase("gloves")) {
					targetSlot=9;
				} else if(itemType(wearID).equalsIgnoreCase("boots")) {
					targetSlot=10;	
				} else if(itemType(wearID).equalsIgnoreCase("ring")) {
					targetSlot=12;
				} else {
					targetSlot = 3;
				}
				
				if(c.duelRule[11] &amp;&amp; targetSlot == 0) {
					c.sendMessage("Wearing hats has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[12] &amp;&amp; targetSlot == 1) {
					c.sendMessage("Wearing capes has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[13]  &amp;&amp; targetSlot == 2) {
					c.sendMessage("Wearing amulets has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[14]  &amp;&amp; targetSlot == 3) {
					c.sendMessage("Wielding weapons has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[15]  &amp;&amp; targetSlot == 4) {
					c.sendMessage("Wearing bodies has been disabled in this duel!");
					return false;
				}
				if((c.duelRule[16] &amp;&amp; targetSlot == 5) || (c.duelRule[16] &amp;&amp; is2handed(getItemName(wearID).toLowerCase(), wearID))) {
					c.sendMessage("Wearing shield has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[17]  &amp;&amp; targetSlot == 7) {
					c.sendMessage("Wearing legs has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[18]  &amp;&amp; targetSlot == 9) {
					c.sendMessage("Wearing gloves has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[19]  &amp;&amp; targetSlot == 10) {
					c.sendMessage("Wearing boots has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[20]  &amp;&amp; targetSlot == 12) {
					c.sendMessage("Wearing rings has been disabled in this duel!");
					return false;
				}
				if(c.duelRule[21]  &amp;&amp; targetSlot == 13) {
					c.sendMessage("Wearing arrows has been disabled in this duel!");
					return false;
				}

				if(Config.itemRequirements) {
					if(targetSlot == 10 || targetSlot == 7 || targetSlot == 5 || targetSlot == 4 || targetSlot == 0 || targetSlot == 9 || targetSlot == 10) {
						if(c.defenceLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[1]) &lt; c.defenceLevelReq) {
								c.sendMessage("You need a defence level of "+c.defenceLevelReq+" to wear this item.");
								canWearItem = false;
							}
						}
						if(c.rangeLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[4]) &lt; c.rangeLevelReq) {
								c.sendMessage("You need a range level of "+c.rangeLevelReq+" to wear this item.");
								canWearItem = false;
							}
						}
						if(c.magicLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[6]) &lt; c.magicLevelReq) {
								c.sendMessage("You need a magic level of "+c.magicLevelReq+" to wear this item.");
								canWearItem = false;
							}
						}
					}
					if(targetSlot == 3) {
						if(c.attackLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[0]) &lt; c.attackLevelReq) {
								c.sendMessage("You need an attack level of "+c.attackLevelReq+" to wield this weapon.");
								canWearItem = false;
							}
						}
						if(c.rangeLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[4]) &lt; c.rangeLevelReq) {
								c.sendMessage("You need a range level of "+c.rangeLevelReq+" to wield this weapon.");
								canWearItem = false;
							}
						}
						if(c.magicLevelReq &gt; 0) {
							if(c.getPA().getLevelForXP(c.playerXP[6]) &lt; c.magicLevelReq) {
								c.sendMessage("You need a magic level of "+c.magicLevelReq+" to wield this weapon.");
								canWearItem = false;
							}
						}
					}
				}

				if(!canWearItem) {
					return false;
				}
				
				int wearAmount = c.playerItemsN[slot];
				if (wearAmount &lt; 1) {
					return false;
				}
				
				if (targetSlot == c.playerWeapon) {
					c.autocasting = false;
					c.autocastId = 0;
					c.getPA().sendFrame36(108, 0);
				}

				if(slot &gt;= 0 &amp;&amp; wearID &gt;= 0) {
					int toEquip = c.playerItems[slot];
					int toEquipN = c.playerItemsN[slot];
					int toRemove = c.playerEquipment[targetSlot];
					int toRemoveN = c.playerEquipmentN[targetSlot];
					if (toEquip == toRemove + 1 &amp;&amp; Item.itemStackable[toRemove]) {
						deleteItem(toRemove, getItemSlot(toRemove), toEquipN);
						c.playerEquipmentN[targetSlot] += toEquipN;
					} else if (targetSlot != 5 &amp;&amp; targetSlot != 3) {
						c.playerItems[slot] = toRemove + 1;
						c.playerItemsN[slot] = toRemoveN;
						c.playerEquipment[targetSlot] = toEquip - 1;
						c.playerEquipmentN[targetSlot] = toEquipN;
					} else if (targetSlot == 5) {
						boolean wearing2h = is2handed(getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase(), c.playerEquipment[c.playerWeapon]);
						boolean wearingShield = c.playerEquipment[c.playerShield] &gt; 0;
						if (wearing2h) {
							toRemove = c.playerEquipment[c.playerWeapon];
							toRemoveN = c.playerEquipmentN[c.playerWeapon];
							c.playerEquipment[c.playerWeapon] = -1;
							c.playerEquipmentN[c.playerWeapon] = 0;
							updateSlot(c.playerWeapon);
						}
						c.playerItems[slot] = toRemove + 1;
						c.playerItemsN[slot] = toRemoveN;
						c.playerEquipment[targetSlot] = toEquip - 1;
						c.playerEquipmentN[targetSlot] = toEquipN;			
					} else if (targetSlot == 3) {
						boolean is2h = is2handed(getItemName(wearID).toLowerCase(), wearID);
						boolean wearingShield = c.playerEquipment[c.playerShield] &gt; 0;
						boolean wearingWeapon = c.playerEquipment[c.playerWeapon] &gt; 0;
						if (is2h) {
							if (wearingShield &amp;&amp; wearingWeapon) {
								if (freeSlots() &gt; 0) {
									c.playerItems[slot] = toRemove + 1;
									c.playerItemsN[slot] = toRemoveN;
									c.playerEquipment[targetSlot] = toEquip - 1;
									c.playerEquipmentN[targetSlot] = toEquipN;
									removeItem(c.playerEquipment[c.playerShield], c.playerShield);
								} else {
									c.sendMessage("You do not have enough inventory space to do this.");
									return false;
								}						
							} else if (wearingShield &amp;&amp; !wearingWeapon) {
								c.playerItems[slot] = c.playerEquipment[c.playerShield] + 1;
								c.playerItemsN[slot] = c.playerEquipmentN[c.playerShield];
								c.playerEquipment[targetSlot] = toEquip - 1;
								c.playerEquipmentN[targetSlot] = toEquipN;
								c.playerEquipment[c.playerShield] = -1;
								c.playerEquipmentN[c.playerShield] = 0;
								updateSlot(c.playerShield);
							} else {
								c.playerItems[slot] = toRemove + 1;
								c.playerItemsN[slot] = toRemoveN;
								c.playerEquipment[targetSlot] = toEquip - 1;
								c.playerEquipmentN[targetSlot] = toEquipN;	
							}
						} else {
							c.playerItems[slot] = toRemove + 1;
							c.playerItemsN[slot] = toRemoveN;
							c.playerEquipment[targetSlot] = toEquip - 1;
							c.playerEquipmentN[targetSlot] = toEquipN;	
						}
					}
					resetItems(3214);
				}
				if(targetSlot == 3) {
					c.usingSpecial = false;
					addSpecialBar(wearID);
				}
				if(c.getOutStream() != null &amp;&amp; c != null ) {
					c.getOutStream().createFrameVarSizeWord(34);
					c.getOutStream().writeWord(1688);
					c.getOutStream().writeByte(targetSlot);
					c.getOutStream().writeWord(wearID+1);

					if (c.playerEquipmentN[targetSlot] &gt; 254) {
						c.getOutStream().writeByte(255);
						c.getOutStream().writeDWord(c.playerEquipmentN[targetSlot]);
					} else {
						c.getOutStream().writeByte(c.playerEquipmentN[targetSlot]);
					}
					
					c.getOutStream().endFrameVarSizeWord();
					c.flushOutStream();
				}
				sendWeapon(c.playerEquipment[c.playerWeapon], getItemName(c.playerEquipment[c.playerWeapon]));
				resetBonus();
				getBonus();
				writeBonus();
				c.getCombat().getPlayerAnimIndex(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.getPA().requestUpdates();
				return true;
			} else {
				return false;
			}
		}
	}</code></pre>
<p>[center][size=20pt]Done![/size][/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468/1</link>
        <pubDate>Wed, 29 Jun 2011 11:14:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401468-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-fix-project-insanitys-items-wielding-to-head-bug-tut/401468.rss">[TuT]fix Project Insanity&#39;s item&#39;s wielding to head bug[TuT]</source>
      </item>
  </channel>
</rss>
