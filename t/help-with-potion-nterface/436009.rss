<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help with potion nterface</title>
    <link>https://forum.moparisthebest.com/t/help-with-potion-nterface/436009</link>
    <description>i got this for my potion interface.

[code]package com.rs.game.player.content;

import com.rs.game.Animation;
import com.rs.game.Hit;
import com.rs.game.Hit.HitLook;
import com.rs.game.item.Item;
import com.rs.game.player.Player;
import com.rs.game.player.Skills;
import com.rs.game.player.controlers.Wilderness;
import com.rs.game.tasks.WorldTask;
import com.rs.game.tasks.WorldTasksManager;
import com.rs.utils.Utils;

public final class Pots {

	public static enum Pot {

		ATTACK_POTION(new int[] { 2428, 121, 123, 125 }, Effects.ATTACK_POTION),

		STRENGTH_POTION(new int[] { 113, 115, 117, 119 },
				Effects.STRENGTH_POTION),

		DEFENCE_POTION(new int[] { 2432, 133, 135, 137 },
				Effects.DEFENCE_POTION),

		RANGE_POTION(new int[] { 2444, 169, 171, 173 }, Effects.RANGE_POTION),

		MAGIC_POTION(new int[] { 3040, 3042, 3044, 3046 }, Effects.MAGIC_POTION),

		ANTI_POISION(new int[] { 2446, 175, 177, 179 }, Effects.ANTIPOISON),

		PRAYER_POTION(new int[] { 2434, 139, 141, 143 }, Effects.PRAYER_POTION),

		SUPER_ATT_POTION(new int[] { 2436, 145, 147, 149 },
				Effects.SUPER_ATT_POTION),

		SUPER_STR_POTION(new int[] { 2440, 157, 159, 161 },
				Effects.SUPER_STR_POTION),

		SUPER_DEF_POTION(new int[] { 2442, 163, 165, 167 },
				Effects.SUPER_DEF_POTION),

		EXTREME_ATT_POTION(new int[] { 15308, 15309, 15310, 15311 },
				Effects.EXTREME_ATT_POTION),

		EXTREME_STR_POTION(new int[] { 15312, 15313, 15314, 15315 },
				Effects.EXTREME_STR_POTION),

		EXTREME_DEF_POTION(new int[] { 15316, 15317, 15318, 15319 },
				Effects.EXTREME_DEF_POTION),

		EXTREME_MAGE_POTION(new int[] { 15320, 15321, 15322, 15323 },
				Effects.EXTREME_MAG_POTION),

		EXTREME_RANGE_POTION(new int[] { 15324, 15325, 15326, 15327 },
				Effects.EXTREME_RAN_POTION),

		SUPER_RESTORE_POTION(new int[] { 3024, 3026, 3028, 3030 },
				Effects.SUPER_RESTORE),

		SARADOMIN_BREW(new int[] { 6685, 6687, 6689, 6691 },
				Effects.SARADOMIN_BREW),

		RECOVER_SPECIAL(new int[] { 15300, 15301, 15302, 15303 },
				Effects.RECOVER_SPECIAL),

		SUPER_PRAYER(new int[] { 15328, 15329, 15330, 15331 },
				Effects.SUPER_PRAYER),

		OVERLOAD(new int[] { 15332, 15333, 15334, 15335 }, Effects.OVERLOAD),

		ANTI_FIRE(new int[] { 2452, 2454, 2456, 2458 }, Effects.ANTI_FIRE),

		SUMMONING_POTION(new int[] { 12140, 12142, 12144, 12146 },
				Effects.SUMMONING_POT);

		private int[] id;
		private Effects effect;

		private Pot(int[] id, Effects effect) {
			this.id = id;
			this.effect = effect;
		}
	}

	private enum Effects {
		ATTACK_POTION(Skills.ATTACK) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 3 + (realLevel * 0.1));
			}
		},
		SUMMONING_POT() {
			@Override
			public void extra(Player player) {
				/*
				 * player.getPrayer().restorePrayer( (int) ((int)
				 * (Math.floor(player.getSkills().getLevelForXp(
				 * Skills.SUMMONING) * 2.5) + 70)
				 * player.getAuraManager().getPrayerPotsRestoreMultiplier()));
				 */
				// TODO Restores 15% of certain familiars special move [Sonic]
			}
		},
		ANTIPOISON() {
			@Override
			public void extra(Player player) {
				player.addPoisonImmune(180000);
				player.getPackets().sendGameMessage(
						&quot;You are now immune to poison.&quot;);
			}
		},
		ANTI_FIRE() {
			@Override
			public void extra(Player player) {
				player.addFireImmune(360000);
				player.getPackets().sendGameMessage(
						&quot;You are now immune to dragonfire.&quot;);
			}
		},
		STRENGTH_POTION(Skills.STRENGTH) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 3 + (realLevel * 0.1));
			}
		},
		DEFENCE_POTION(Skills.DEFENCE) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 3 + (realLevel * 0.1));
			}
		},
		RANGE_POTION(Skills.RANGE) {

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.1));
			}
		},
		MAGIC_POTION(Skills.MAGIC) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return level + 5;
			}
		},
		PRAYER_POTION() {
			@Override
			public void extra(Player player) {
				player.getPrayer()
						.restorePrayer(
								(int) ((int) (Math.floor(player.getSkills()
										.getLevelForXp(Skills.PRAYER) * 2.5) + 70) * player
										.getAuraManager()
										.getPrayerPotsRestoreMultiplier()));
			}
		},
		SUPER_STR_POTION(Skills.STRENGTH) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.15));
			}
		},
		SUPER_DEF_POTION(Skills.DEFENCE) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.15));
			}
		},
		SUPER_ATT_POTION(Skills.ATTACK) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.15));
			}
		},
		EXTREME_STR_POTION(Skills.STRENGTH) {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.22));
			}
		},
		EXTREME_DEF_POTION(Skills.DEFENCE) {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.22));
			}
		},
		EXTREME_ATT_POTION(Skills.ATTACK) {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 5 + (realLevel * 0.22));
			}
		},
		EXTREME_RAN_POTION(Skills.RANGE) {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return (int) (level + 4 + (Math.floor(realLevel / 5.2)));
			}
		},
		EXTREME_MAG_POTION(Skills.MAGIC) {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
				return level + 7;
			}
		},
		RECOVER_SPECIAL() {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				Long time = (Long) player.getTemporaryAttributtes().get(
						&quot;Recover_Special_Pot&quot;);
				if (time != null &amp;&amp; Utils.currentTimeMillis() - time &lt; 30000) {
					player.getPackets().sendGameMessage(
							&quot;You may only use this pot every 30 seconds.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public void extra(Player player) {
				player.getTemporaryAttributtes().put(&quot;Recover_Special_Pot&quot;,
						Utils.currentTimeMillis());
				player.getCombatDefinitions().restoreSpecialAttack(25);
			}
		},
		SARADOMIN_BREW(&quot;You drink some of the foul liquid.&quot;, Skills.ATTACK,
				Skills.DEFENCE, Skills.STRENGTH, Skills.MAGIC, Skills.RANGE) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				if (skillId == Skills.DEFENCE) {
					int boost = (int) (realLevel * 0.25);
					int level = actualLevel &gt; realLevel ? realLevel
							: actualLevel;
					return level + boost;
				} else {
					return (int) (actualLevel * 0.90);
				}
			}

			@Override
			public void extra(Player player) {
				int hitpointsModification = (int) (player.getMaxHitpoints() * 0.15);
				player.heal(hitpointsModification + 20, hitpointsModification);
			}
		},

		OVERLOAD() {

			@Override
			public boolean canDrink(Player player) {
				if (player.getControlerManager().getControler() instanceof Wilderness) {
					player.getPackets().sendGameMessage(
							&quot;You cannot drink this potion here.&quot;);
					return false;
				}
				if (player.getOverloadDelay() &gt; 0) {
					player.getPackets().sendGameMessage(
							&quot;You may only use this potion every five minutes.&quot;);
					return false;
				}
				if (player.getHitpoints() &lt;= 500) {
					player.getPackets()
							.sendGameMessage(
									&quot;You need more than 500 life points to survive the power of overload.&quot;);
					return false;
				}
				return true;
			}

			@Override
			public void extra(final Player player) {
				player.setOverloadDelay(501);
				WorldTasksManager.schedule(new WorldTask() {
					int count = 4;

					@Override
					public void run() {
						if (count == 0)
							stop();
						player.setNextAnimation(new Animation(3170));
						player.applyHit(new Hit(player, 100,
								HitLook.REGULAR_DAMAGE, 0));
						count--;
					}
				}, 0, 2);
			}
		},
		SUPER_PRAYER() {
			@Override
			public void extra(Player player) {
				player.getPrayer().setPrayerpoints(
						(int) ((int) (70 + (player.getSkills().getLevelForXp(
								Skills.PRAYER) * 3.43)) * player
								.getAuraManager()
								.getPrayerPotsRestoreMultiplier()));
			}
		},
		SUPER_RESTORE(Skills.ATTACK, Skills.STRENGTH, Skills.DEFENCE,
				Skills.MAGIC, Skills.RANGE, Skills.AGILITY, Skills.COOKING,
				Skills.CRAFTING, Skills.FARMING, Skills.FIREMAKING,
				Skills.FISHING, Skills.FLETCHING, Skills.HERBLORE,
				Skills.MINING, Skills.RUNECRAFTING, Skills.SLAYER,
				Skills.SMITHING, Skills.THIEVING, Skills.WOODCUTTING,
				Skills.SUMMONING) {
			@Override
			public int getAffectedSkill(Player player, int skillId,
					int actualLevel, int realLevel) {
				int boost = (int) (realLevel * 0.33);
				if (actualLevel &gt; realLevel)
					return actualLevel;
				if (actualLevel + boost &gt; realLevel)
					return realLevel;
				return actualLevel + boost;
			}

			@Override
			public void extra(Player player) {
				player.getPrayer().restorePrayer(
						(int) ((int) (player.getSkills().getLevelForXp(
								Skills.PRAYER) * 0.33 * 10) * player
								.getAuraManager()
								.getPrayerPotsRestoreMultiplier()));
			}

		};
		private int[] affectedSkills;
		private String drinkMessage;

		private Effects(int... affectedSkills) {
			this(null, affectedSkills);
		}

		private Effects(String drinkMessage, int... affectedSkills) {
			this.drinkMessage = drinkMessage;
			this.affectedSkills = affectedSkills;
		}

		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			return actualLevel;
		}

		public boolean canDrink(Player player) {
			// usualy unused
			return true;
		}

		public void extra(Player player) {
			// usualy unused
		}
	}

	private static Pot getPot(int id) {
		for (Pot pot : Pot.values())
			for (int potionId : pot.id) {
				if (id == potionId)
					return pot;
			}
		return null;
	}

	public static boolean pot(Player player, Item item, int slot) {
		Pot pot = getPot(item.getId());
		if (pot == null)
			return false;
		if (player.getPotDelay() &gt; Utils.currentTimeMillis())
			return true;
		if (!player.getControlerManager().canPot(pot))
			return true;
		if (!pot.effect.canDrink(player))
			return true;
		player.addPotDelay(1200);
		String name = item.getDefinitions().getName();
		int index = name.indexOf(&quot;(&quot;);
		int dosesLeft = 0;
		if (index != -1)
			dosesLeft = Integer.parseInt(name.substring(index).replace(&quot;(&quot;, &quot;&quot;)
					.replace(&quot;)&quot;, &quot;&quot;)) - 1;
		int toPot = pot.id.length - dosesLeft;
		player.getInventory()
				.getItems()
				.set(slot,
						new Item(
								dosesLeft &gt; 0 &amp;&amp; toPot &lt; pot.id.length ? pot.id[toPot]
										: 229, 1));
		player.getInventory().refresh(slot);
		for (int skillId : pot.effect.affectedSkills)
			player.getSkills().set(
					skillId,
					pot.effect.getAffectedSkill(player, skillId, player
							.getSkills().getLevel(skillId), player.getSkills()
							.getLevelForXp(skillId)));
		pot.effect.extra(player);
		player.setNextAnimation(new Animation(829));
		player.getPackets().sendSound(4580, 0, 1);
		player.getPackets().sendGameMessage(
				pot.effect.drinkMessage != null ? pot.effect.drinkMessage
						: &quot;You drink some of your &quot;
								+ name.toLowerCase().replace(&quot; (1)&quot;, &quot;&quot;)
										.replace(&quot; (2)&quot;, &quot;&quot;)
										.replace(&quot; (3)&quot;, &quot;&quot;)
										.replace(&quot; (4)&quot;, &quot;&quot;) + &quot;.&quot;, true);

		player.getPackets().sendGameMessage(
				dosesLeft == 0 ? &quot;You have finished your potion.&quot; : &quot;You have &quot;
						+ dosesLeft + &quot; dose of potion left.&quot;, true);
		return true;
	}
[/code]

Any time im in a remotely dangerous area it wont let me drink any potions...i see the wilderness exceptions but not sure if thats what i need to change or even how to...help is appreciated thanks</description>
    
    <lastBuildDate>Sun, 11 Mar 2012 20:15:12 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-with-potion-nterface/436009.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help with potion nterface</title>
        <dc:creator><![CDATA[@2_drag_claws 2 drag claws]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/2_drag_claws">@2_drag_claws</a> wrote:</p>
          <blockquote>
              <p>i got this for my potion interface.</p>
<p>[code]package com.rs.game.player.content;</p>
<p>import com.rs.game.Animation;<br>
import com.rs.game.Hit;<br>
import com.rs.game.Hit.HitLook;<br>
import com.rs.game.item.Item;<br>
import com.rs.game.player.Player;<br>
import com.rs.game.player.Skills;<br>
import com.rs.game.player.controlers.Wilderness;<br>
import com.rs.game.tasks.WorldTask;<br>
import com.rs.game.tasks.WorldTasksManager;<br>
import com.rs.utils.Utils;</p>
<p>public final class Pots {</p>
<pre><code>public static enum Pot {

	ATTACK_POTION(new int[] { 2428, 121, 123, 125 }, Effects.ATTACK_POTION),

	STRENGTH_POTION(new int[] { 113, 115, 117, 119 },
			Effects.STRENGTH_POTION),

	DEFENCE_POTION(new int[] { 2432, 133, 135, 137 },
			Effects.DEFENCE_POTION),

	RANGE_POTION(new int[] { 2444, 169, 171, 173 }, Effects.RANGE_POTION),

	MAGIC_POTION(new int[] { 3040, 3042, 3044, 3046 }, Effects.MAGIC_POTION),

	ANTI_POISION(new int[] { 2446, 175, 177, 179 }, Effects.ANTIPOISON),

	PRAYER_POTION(new int[] { 2434, 139, 141, 143 }, Effects.PRAYER_POTION),

	SUPER_ATT_POTION(new int[] { 2436, 145, 147, 149 },
			Effects.SUPER_ATT_POTION),

	SUPER_STR_POTION(new int[] { 2440, 157, 159, 161 },
			Effects.SUPER_STR_POTION),

	SUPER_DEF_POTION(new int[] { 2442, 163, 165, 167 },
			Effects.SUPER_DEF_POTION),

	EXTREME_ATT_POTION(new int[] { 15308, 15309, 15310, 15311 },
			Effects.EXTREME_ATT_POTION),

	EXTREME_STR_POTION(new int[] { 15312, 15313, 15314, 15315 },
			Effects.EXTREME_STR_POTION),

	EXTREME_DEF_POTION(new int[] { 15316, 15317, 15318, 15319 },
			Effects.EXTREME_DEF_POTION),

	EXTREME_MAGE_POTION(new int[] { 15320, 15321, 15322, 15323 },
			Effects.EXTREME_MAG_POTION),

	EXTREME_RANGE_POTION(new int[] { 15324, 15325, 15326, 15327 },
			Effects.EXTREME_RAN_POTION),

	SUPER_RESTORE_POTION(new int[] { 3024, 3026, 3028, 3030 },
			Effects.SUPER_RESTORE),

	SARADOMIN_BREW(new int[] { 6685, 6687, 6689, 6691 },
			Effects.SARADOMIN_BREW),

	RECOVER_SPECIAL(new int[] { 15300, 15301, 15302, 15303 },
			Effects.RECOVER_SPECIAL),

	SUPER_PRAYER(new int[] { 15328, 15329, 15330, 15331 },
			Effects.SUPER_PRAYER),

	OVERLOAD(new int[] { 15332, 15333, 15334, 15335 }, Effects.OVERLOAD),

	ANTI_FIRE(new int[] { 2452, 2454, 2456, 2458 }, Effects.ANTI_FIRE),

	SUMMONING_POTION(new int[] { 12140, 12142, 12144, 12146 },
			Effects.SUMMONING_POT);

	private int[] id;
	private Effects effect;

	private Pot(int[] id, Effects effect) {
		this.id = id;
		this.effect = effect;
	}
}

private enum Effects {
	ATTACK_POTION(Skills.ATTACK) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 3 + (realLevel * 0.1));
		}
	},
	SUMMONING_POT() {
		@Override
		public void extra(Player player) {
			/*
			 * player.getPrayer().restorePrayer( (int) ((int)
			 * (Math.floor(player.getSkills().getLevelForXp(
			 * Skills.SUMMONING) * 2.5) + 70)
			 * player.getAuraManager().getPrayerPotsRestoreMultiplier()));
			 */
			// TODO Restores 15% of certain familiars special move [Sonic]
		}
	},
	ANTIPOISON() {
		@Override
		public void extra(Player player) {
			player.addPoisonImmune(180000);
			player.getPackets().sendGameMessage(
					"You are now immune to poison.");
		}
	},
	ANTI_FIRE() {
		@Override
		public void extra(Player player) {
			player.addFireImmune(360000);
			player.getPackets().sendGameMessage(
					"You are now immune to dragonfire.");
		}
	},
	STRENGTH_POTION(Skills.STRENGTH) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 3 + (realLevel * 0.1));
		}
	},
	DEFENCE_POTION(Skills.DEFENCE) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 3 + (realLevel * 0.1));
		}
	},
	RANGE_POTION(Skills.RANGE) {

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.1));
		}
	},
	MAGIC_POTION(Skills.MAGIC) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return level + 5;
		}
	},
	PRAYER_POTION() {
		@Override
		public void extra(Player player) {
			player.getPrayer()
					.restorePrayer(
							(int) ((int) (Math.floor(player.getSkills()
									.getLevelForXp(Skills.PRAYER) * 2.5) + 70) * player
									.getAuraManager()
									.getPrayerPotsRestoreMultiplier()));
		}
	},
	SUPER_STR_POTION(Skills.STRENGTH) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.15));
		}
	},
	SUPER_DEF_POTION(Skills.DEFENCE) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.15));
		}
	},
	SUPER_ATT_POTION(Skills.ATTACK) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.15));
		}
	},
	EXTREME_STR_POTION(Skills.STRENGTH) {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			return true;
		}

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.22));
		}
	},
	EXTREME_DEF_POTION(Skills.DEFENCE) {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			return true;
		}

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.22));
		}
	},
	EXTREME_ATT_POTION(Skills.ATTACK) {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			return true;
		}

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 5 + (realLevel * 0.22));
		}
	},
	EXTREME_RAN_POTION(Skills.RANGE) {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			return true;
		}

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return (int) (level + 4 + (Math.floor(realLevel / 5.2)));
		}
	},
	EXTREME_MAG_POTION(Skills.MAGIC) {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			return true;
		}

		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int level = actualLevel &gt; realLevel ? realLevel : actualLevel;
			return level + 7;
		}
	},
	RECOVER_SPECIAL() {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			Long time = (Long) player.getTemporaryAttributtes().get(
					"Recover_Special_Pot");
			if (time != null &amp;&amp; Utils.currentTimeMillis() - time &lt; 30000) {
				player.getPackets().sendGameMessage(
						"You may only use this pot every 30 seconds.");
				return false;
			}
			return true;
		}

		@Override
		public void extra(Player player) {
			player.getTemporaryAttributtes().put("Recover_Special_Pot",
					Utils.currentTimeMillis());
			player.getCombatDefinitions().restoreSpecialAttack(25);
		}
	},
	SARADOMIN_BREW("You drink some of the foul liquid.", Skills.ATTACK,
			Skills.DEFENCE, Skills.STRENGTH, Skills.MAGIC, Skills.RANGE) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			if (skillId == Skills.DEFENCE) {
				int boost = (int) (realLevel * 0.25);
				int level = actualLevel &gt; realLevel ? realLevel
						: actualLevel;
				return level + boost;
			} else {
				return (int) (actualLevel * 0.90);
			}
		}

		@Override
		public void extra(Player player) {
			int hitpointsModification = (int) (player.getMaxHitpoints() * 0.15);
			player.heal(hitpointsModification + 20, hitpointsModification);
		}
	},

	OVERLOAD() {

		@Override
		public boolean canDrink(Player player) {
			if (player.getControlerManager().getControler() instanceof Wilderness) {
				player.getPackets().sendGameMessage(
						"You cannot drink this potion here.");
				return false;
			}
			if (player.getOverloadDelay() &gt; 0) {
				player.getPackets().sendGameMessage(
						"You may only use this potion every five minutes.");
				return false;
			}
			if (player.getHitpoints() &lt;= 500) {
				player.getPackets()
						.sendGameMessage(
								"You need more than 500 life points to survive the power of overload.");
				return false;
			}
			return true;
		}

		@Override
		public void extra(final Player player) {
			player.setOverloadDelay(501);
			WorldTasksManager.schedule(new WorldTask() {
				int count = 4;

				@Override
				public void run() {
					if (count == 0)
						stop();
					player.setNextAnimation(new Animation(3170));
					player.applyHit(new Hit(player, 100,
							HitLook.REGULAR_DAMAGE, 0));
					count--;
				}
			}, 0, 2);
		}
	},
	SUPER_PRAYER() {
		@Override
		public void extra(Player player) {
			player.getPrayer().setPrayerpoints(
					(int) ((int) (70 + (player.getSkills().getLevelForXp(
							Skills.PRAYER) * 3.43)) * player
							.getAuraManager()
							.getPrayerPotsRestoreMultiplier()));
		}
	},
	SUPER_RESTORE(Skills.ATTACK, Skills.STRENGTH, Skills.DEFENCE,
			Skills.MAGIC, Skills.RANGE, Skills.AGILITY, Skills.COOKING,
			Skills.CRAFTING, Skills.FARMING, Skills.FIREMAKING,
			Skills.FISHING, Skills.FLETCHING, Skills.HERBLORE,
			Skills.MINING, Skills.RUNECRAFTING, Skills.SLAYER,
			Skills.SMITHING, Skills.THIEVING, Skills.WOODCUTTING,
			Skills.SUMMONING) {
		@Override
		public int getAffectedSkill(Player player, int skillId,
				int actualLevel, int realLevel) {
			int boost = (int) (realLevel * 0.33);
			if (actualLevel &gt; realLevel)
				return actualLevel;
			if (actualLevel + boost &gt; realLevel)
				return realLevel;
			return actualLevel + boost;
		}

		@Override
		public void extra(Player player) {
			player.getPrayer().restorePrayer(
					(int) ((int) (player.getSkills().getLevelForXp(
							Skills.PRAYER) * 0.33 * 10) * player
							.getAuraManager()
							.getPrayerPotsRestoreMultiplier()));
		}

	};
	private int[] affectedSkills;
	private String drinkMessage;

	private Effects(int... affectedSkills) {
		this(null, affectedSkills);
	}

	private Effects(String drinkMessage, int... affectedSkills) {
		this.drinkMessage = drinkMessage;
		this.affectedSkills = affectedSkills;
	}

	public int getAffectedSkill(Player player, int skillId,
			int actualLevel, int realLevel) {
		return actualLevel;
	}

	public boolean canDrink(Player player) {
		// usualy unused
		return true;
	}

	public void extra(Player player) {
		// usualy unused
	}
}

private static Pot getPot(int id) {
	for (Pot pot : Pot.values())
		for (int potionId : pot.id) {
			if (id == potionId)
				return pot;
		}
	return null;
}

public static boolean pot(Player player, Item item, int slot) {
	Pot pot = getPot(item.getId());
	if (pot == null)
		return false;
	if (player.getPotDelay() &gt; Utils.currentTimeMillis())
		return true;
	if (!player.getControlerManager().canPot(pot))
		return true;
	if (!pot.effect.canDrink(player))
		return true;
	player.addPotDelay(1200);
	String name = item.getDefinitions().getName();
	int index = name.indexOf("(");
	int dosesLeft = 0;
	if (index != -1)
		dosesLeft = Integer.parseInt(name.substring(index).replace("(", "")
				.replace(")", "")) - 1;
	int toPot = pot.id.length - dosesLeft;
	player.getInventory()
			.getItems()
			.set(slot,
					new Item(
							dosesLeft &gt; 0 &amp;&amp; toPot &lt; pot.id.length ? pot.id[toPot]
									: 229, 1));
	player.getInventory().refresh(slot);
	for (int skillId : pot.effect.affectedSkills)
		player.getSkills().set(
				skillId,
				pot.effect.getAffectedSkill(player, skillId, player
						.getSkills().getLevel(skillId), player.getSkills()
						.getLevelForXp(skillId)));
	pot.effect.extra(player);
	player.setNextAnimation(new Animation(829));
	player.getPackets().sendSound(4580, 0, 1);
	player.getPackets().sendGameMessage(
			pot.effect.drinkMessage != null ? pot.effect.drinkMessage
					: "You drink some of your "
							+ name.toLowerCase().replace(" (1)", "")
									.replace(" (2)", "")
									.replace(" (3)", "")
									.replace(" (4)", "") + ".", true);

	player.getPackets().sendGameMessage(
			dosesLeft == 0 ? "You have finished your potion." : "You have "
					+ dosesLeft + " dose of potion left.", true);
	return true;
}
</code></pre>
<p>[/code]</p>
<p>Any time im in a remotely dangerous area it wont let me drink any potions…i see the wilderness exceptions but not sure if thats what i need to change or even how to…help is appreciated thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-with-potion-nterface/436009/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-with-potion-nterface/436009/1</link>
        <pubDate>Sun, 11 Mar 2012 20:15:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-436009-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-with-potion-nterface/436009.rss">Help with potion nterface</source>
      </item>
  </channel>
</rss>
