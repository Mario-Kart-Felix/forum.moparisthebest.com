<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Reverse engineering network protocol of an APK - willing to pay for help</title>
    <link>https://forum.moparisthebest.com/t/reverse-engineering-network-protocol-of-an-apk-willing-to-pay-for-help/556446</link>
    <description>Hi,

I&#39;m an absolute noob at this kinda stuff. I&#39;m desperate for some help/guidance on how I can begin to document a protocol. My long term goal is to MITM the APK which will run from an emulator on my PC so that I can document a running game.

I am willing to pay BTC if someone will spend some time looking at it and pointing me in the right direction.

I have considered decompiling the java files in the APK but then a bunch is also written in Lua and Luadec won&#39;t decompile it as they&#39;ve done some kind of encoding on the binary. (I know that I could find the function and write it+key into Luadec perhaps and do it that way, but it seems alot of work)

I have already seen some 3rd party applications that are doing similar things to what I want to do, however they are using winpcap and sniffing packets. Same effect though I guess. The thing they do all have in common is that before they can interpret the packets you MUST relogin to your account within the app. I&#39;m guessing there is some form of key or something that needs pulling from the login packet.

As I say anyone that can help me get past the big hurdles (even figuring out wtf happens in this login packet and how to decrypt/decode future packets) I will pay.

I&#39;ve attached 2 example wireshark dumps and also a link to the APK.

For the dumps I logged in, watched a game that was in progress and logged back out.

Dump 1: [https://ufile.io/myxba](https://ufile.io/myxba)
Dump 2: [https://ufile.io/7owly](https://ufile.io/7owly)
APK: [http://www.pokermaster.com/en/download/index.html](http://www.pokermaster.com/en/download/index.html)

The app is a poker app for android. I have an account someone can use if you are happy to help.

Anyone that can look at the dumps and point me in the right direction please please do.

Cheers.</description>
    
    <lastBuildDate>Tue, 10 Jul 2018 23:27:27 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/reverse-engineering-network-protocol-of-an-apk-willing-to-pay-for-help/556446.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Reverse engineering network protocol of an APK - willing to pay for help</title>
        <dc:creator><![CDATA[@ownagesbot ownagesbot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ownagesbot">@ownagesbot</a> wrote:</p>
          <blockquote>
              <p>Hi,</p>
<p>I’m an absolute noob at this kinda stuff. I’m desperate for some help/guidance on how I can begin to document a protocol. My long term goal is to MITM the APK which will run from an emulator on my PC so that I can document a running game.</p>
<p>I am willing to pay BTC if someone will spend some time looking at it and pointing me in the right direction.</p>
<p>I have considered decompiling the java files in the APK but then a bunch is also written in Lua and Luadec won’t decompile it as they’ve done some kind of encoding on the binary. (I know that I could find the function and write it+key into Luadec perhaps and do it that way, but it seems alot of work)</p>
<p>I have already seen some 3rd party applications that are doing similar things to what I want to do, however they are using winpcap and sniffing packets. Same effect though I guess. The thing they do all have in common is that before they can interpret the packets you MUST relogin to your account within the app. I’m guessing there is some form of key or something that needs pulling from the login packet.</p>
<p>As I say anyone that can help me get past the big hurdles (even figuring out wtf happens in this login packet and how to decrypt/decode future packets) I will pay.</p>
<p>I’ve attached 2 example wireshark dumps and also a link to the APK.</p>
<p>For the dumps I logged in, watched a game that was in progress and logged back out.</p>
<p>Dump 1: <a href="https://ufile.io/myxba" rel="nofollow noopener">https://ufile.io/myxba</a><br>
Dump 2: <a href="https://ufile.io/7owly" rel="nofollow noopener">https://ufile.io/7owly</a><br>
APK: <a href="http://www.pokermaster.com/en/download/index.html" rel="nofollow noopener">http://www.pokermaster.com/en/download/index.html</a></p>
<p>The app is a poker app for android. I have an account someone can use if you are happy to help.</p>
<p>Anyone that can look at the dumps and point me in the right direction please please do.</p>
<p>Cheers.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/reverse-engineering-network-protocol-of-an-apk-willing-to-pay-for-help/556446/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/reverse-engineering-network-protocol-of-an-apk-willing-to-pay-for-help/556446/1</link>
        <pubDate>Tue, 10 Jul 2018 23:27:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-556446-1</guid>
        <source url="https://forum.moparisthebest.com/t/reverse-engineering-network-protocol-of-an-apk-willing-to-pay-for-help/556446.rss">Reverse engineering network protocol of an APK - willing to pay for help</source>
      </item>
  </channel>
</rss>
