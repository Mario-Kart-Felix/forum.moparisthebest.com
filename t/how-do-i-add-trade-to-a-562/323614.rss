<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How do i add trade to a 562</title>
    <link>https://forum.moparisthebest.com/t/how-do-i-add-trade-to-a-562/323614</link>
    <description>Ok so i dont know what wrong anyone else ever have this problem and fix it

I think my problem is in this:

[code]package com.rs2hd.model;

import com.rs2hd.util.Misc;

/**
 * Represents a trade between two players.
 *
 * @author Graham
 */
public class Trade {

    public enum State {
        FIRST_SCREEN,
        SECOND_SCREEN,
    }

    private boolean exchanged = false;
    private State state = State.FIRST_SCREEN;
    private Container&lt;Item&gt; offer1 = new Container&lt;Item&gt;(Inventory.SIZE, false);
    private Container&lt;Item&gt; offer2 = new Container&lt;Item&gt;(Inventory.SIZE, false);
    private Player player1, player2;
    private boolean accept1, accept2;

    public Trade(Player player1, Player player2) {
        this.player1 = player1;
        this.player2 = player2;
        openFirstInterface(player1);
        openFirstInterface(player2);
    }

    private void openFirstInterface(Player player) {
        player.getActionSender().sendTradeOptions();
        player.getActionSender().sendInterface(335, true);
        player.getActionSender().sendInventoryInterface(336);
        player.getActionSender().sendString(&quot;Trading with: &quot; + Misc.formatPlayerNameForDisplay(getOther(player).getUsername()), 335, 15);
        player.getActionSender().sendString(&quot;&quot;, 335, 36);
        refreshInventories();
    }

    private void openSecondInterface(Player player) {
        player.getActionSender().sendInterface(334, true);
        player.getActionSender().sendString(buildString(player == player1 ? offer1 : offer2), 334, 37);
        player.getActionSender().sendString(buildString(player == player1 ? offer2 : offer1), 334, 41);
        player.getActionSender().sendString(&quot;&lt;col=00FFFF&gt;Trading with:&lt;br&gt;&lt;col=00FFFF&gt;&quot; + Misc.formatPlayerNameForDisplay(getOther(player).getUsername()), 334, 46);
        player.getActionSender().sendInterfaceConfig(334, 37, false);
        player.getActionSender().sendInterfaceConfig(334, 41, false);
        player.getActionSender().sendInterfaceConfig(334, 45, true);
        player.getActionSender().sendInterfaceConfig(334, 46, false);
    }

    private String buildString(Container&lt;Item&gt; container) {
        if (container.freeSlots() == container.getSize()) {
            return &quot;&lt;col=FFFFFF&gt;Absolutely nothing!&quot;;
        } else {
            StringBuilder bldr = new StringBuilder();
            for (int i = 0; i &lt; container.getSize(); i++) {
                Item item = container.get(i);
                if (item != null) {
                    bldr.append(&quot;&lt;col=FF9040&gt;&quot; + item.getDefinition().getName());
                    if (item.getAmount() &gt; 1) {
                        bldr.append(&quot; &lt;col=FFFFFF&gt; x &lt;col=FFFFFF&gt;&quot; + item.getAmount());
                    }
                    bldr.append(&quot;&lt;br&gt;&quot;);
                }
            }
            return bldr.toString();
        }
    }

    private Player getOther(Player player) {
        return player == player1 ? player2 : player1;
    }

    public Player getPlayer1() {
        return player1;
    }

    public Player getPlayer2() {
        return player2;
    }

    public void exchange() {
        player1.getInventory().getContainer().addAll(offer2);
        player2.getInventory().getContainer().addAll(offer1);
        exchanged = true;
    }

    public void close() {
        if (!exchanged) {
            player1.getInventory().getContainer().addAll(offer1);
            player2.getInventory().getContainer().addAll(offer2);
        }
        player1.getActionSender().sendCloseInterface();
        player2.getActionSender().sendCloseInterface();
        player1.getActionSender().sendItems(-1, 1, 93, new Container&lt;Item&gt;(Inventory.SIZE, false));
        player2.getActionSender().sendItems(-1, 1, 93, new Container&lt;Item&gt;(Inventory.SIZE, false));
        player1.getActionSender().sendCloseInventoryInterface();
        player2.getActionSender().sendCloseInventoryInterface();
        player1.getActionSender().sendTabs();
        player2.getActionSender().sendTabs();
        player1.getActionSender().restoreTabs();
        player2.getActionSender().restoreTabs();
        player1.getInventory().refresh();
        player2.getInventory().refresh();
        player1.getRequests().tradeReq = null;
        player1.getRequests().trade = null;
        player2.getRequests().tradeReq = null;
        player2.getRequests().trade = null;
    }

    public void accept(Player which) {
        if (which == player1) {
            accept1 = true;
        } else {
            accept2 = true;
        }
        acceptUpdate();
    }

    public void acceptUpdate() {
        switch (state) {
            case FIRST_SCREEN:
                if (accept1 &amp;&amp; accept2) {
                    if (!player1.getInventory().getContainer().hasSpaceFor(offer2)) {
                        player2.getActionSender().sendMessage(&quot;Other player does not have enough space in their inventory.&quot;);
                        player1.getActionSender().sendMessage(&quot;You do not have enough space in your inventory.&quot;);
                        close();
                        return;
                    }
                    if (!player2.getInventory().getContainer().hasSpaceFor(offer1)) {
                        player1.getActionSender().sendMessage(&quot;Other player does not have enough space in their inventory.&quot;);
                        player2.getActionSender().sendMessage(&quot;You do not have enough space in your inventory.&quot;);
                        close();
                        return;
                    }
                    state = State.SECOND_SCREEN;
                    accept1 = false;
                    accept2 = false;
                    openSecondInterface(player1);
                    openSecondInterface(player2);
                } else if (accept1 &amp;&amp; !accept2) {
                    player1.getActionSender().sendString(&quot;Waiting for other player...&quot;, 335, 36);
                    player2.getActionSender().sendString(&quot;The other player has accepted.&quot;, 335, 36);
                } else if (!accept1 &amp;&amp; accept2) {
                    player2.getActionSender().sendString(&quot;Waiting for other player...&quot;, 335, 36);
                    player1.getActionSender().sendString(&quot;The other player has accepted.&quot;, 335, 36);
                } else {
                    player2.getActionSender().sendString(&quot;&quot;, 335, 36);
                    player1.getActionSender().sendString(&quot;&quot;, 335, 36);
                }
                break;
            case SECOND_SCREEN:
                if (accept1 &amp;&amp; accept2) {
                    state = State.SECOND_SCREEN;
                    accept1 = false;
                    accept2 = false;
                    exchange();
                    close();
                } else if (accept1 &amp;&amp; !accept2) {
                    player1.getActionSender().sendString(&quot;Waiting for other player...&quot;, 334, 33);
                    player2.getActionSender().sendString(&quot;The other player has accepted.&quot;, 334, 33);
                } else if (!accept1 &amp;&amp; accept2) {
                    player2.getActionSender().sendString(&quot;Waiting for other player...&quot;, 334, 33);
                    player1.getActionSender().sendString(&quot;The other player has accepted.&quot;, 334, 33);
                } else {
                    player2.getActionSender().sendString(&quot;&quot;, 335, 36);
                    player1.getActionSender().sendString(&quot;&quot;, 335, 36);
                }
                break;
        }
    }

    public void flashIcon(Player which, int slot) {
        Object[] params = new Object[]{slot, 7, 4, 21954593};
        which.getActionSender().sendRunScript(143, params, &quot;Iiii&quot;);
    }

    public void refreshInventories() {
        player1.getActionSender().sendItems(-1, 2, 90, offer1);
        player1.getActionSender().sendItems(-2, 60981, 90, offer2);
        player2.getActionSender().sendItems(-1, 2, 90, offer2);
        player2.getActionSender().sendItems(-2, 60981, 90, offer1);
        player1.getInventory().refresh();
        player2.getInventory().refresh();
        player1.getActionSender().sendItems(-1, 1, 93, player1.getInventory().getContainer());
        player2.getActionSender().sendItems(-1, 1, 93, player2.getInventory().getContainer());
    }

    public void removeItem(Player player, int slot, int amount) {
        if (state == State.FIRST_SCREEN) {
            if (player == player2) {
                if (accept1) {
                    flashIcon(player1, slot);
                }
                accept1 = false;
                accept2 = false;
                acceptUpdate();
                Item item = offer2.get(slot);
                if (item != null) {
                    offer2.remove(slot, item);
                    player2.getInventory().addItem(item.getId(), item.getAmount());
                }
            }
            if (player == player1) {
                if (accept2) {
                    flashIcon(player2, slot);
                }
                accept1 = false;
                accept2 = false;
                acceptUpdate();
                Item item = offer1.get(slot);
                if (item != null) {
                    offer1.remove(slot, item);
                    player1.getInventory().addItem(item.getId(), item.getAmount());
                }
            }
            refreshInventories();
        }
    }

    public void offerItem(Player player, int slot, int amount) {
        if (state == State.FIRST_SCREEN) {
            if (player == player1) {
                accept1 = false;
                accept2 = false;
                acceptUpdate();
                Item item = player1.getInventory().getContainer().get(slot);
                if (item != null) {
                    int id = item.getId();
                    int got = player1.getInventory().getContainer().getNumberOf(new Item(id));
                    int trueAmount = amount &gt; got ? got : amount;
                    player1.getInventory().getContainer().remove(slot, new Item(id, trueAmount));
                    offer1.add(new Item(id, trueAmount));
                }
            }
            if (player == player2) {
                accept1 = false;
                accept2 = false;
                acceptUpdate();
                Item item = player2.getInventory().getContainer().get(slot);
                if (item != null) {
                    int id = item.getId();
                    int got = player2.getInventory().getContainer().getNumberOf(new Item(id));
                    int trueAmount = amount &gt; got ? got : amount;
                    player2.getInventory().getContainer().remove(slot, new Item(id, trueAmount));
                    offer2.add(new Item(id, trueAmount));
                }
            }
            refreshInventories();
        }
    }

    public void examineMy(Player player, int slot) {
        if (player == player1) {
            Item item = offer1.get(slot);
            if (item != null) {
                player1.getActionSender().sendMessage(item.getDefinition().getExamine());
            }
        } else {
            Item item = offer2.get(slot);
            if (item != null) {
                player2.getActionSender().sendMessage(item.getDefinition().getExamine());
            }
        }
    }

    public void examineOther(Player player, int slot) {
        if (player == player1) {
            Item item = offer2.get(slot);
            if (item != null) {
                player1.getActionSender().sendMessage(item.getDefinition().getExamine());
            }
        } else {
            Item item = offer1.get(slot);
            if (item != null) {
                player2.getActionSender().sendMessage(item.getDefinition().getExamine());
            }
        }
    }

    public void valueOther(Player player, int slot) {
        // TODO item value
    }

}

[/code]

Please help.[br][br][size=1]Posted on: January 02, 2010, 02:49:28 pm[/size][hr]anyone..?</description>
    
    <lastBuildDate>Sat, 02 Jan 2010 20:22:29 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-do-i-add-trade-to-a-562/323614.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How do i add trade to a 562</title>
        <dc:creator><![CDATA[@ljay_wilson ljay wilson]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ljay_wilson">@ljay_wilson</a> wrote:</p>
          <blockquote>
              <p>Ok so i dont know what wrong anyone else ever have this problem and fix it</p>
<p>I think my problem is in this:</p>
<p>[code]package com.rs2hd.model;</p>
<p>import com.rs2hd.util.Misc;</p>
<p>/**</p>
<ul>
<li>
<p>Represents a trade between two players.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> Graham<br>
*/<br>
public class Trade {</p>
<p>public enum State {<br>
FIRST_SCREEN,<br>
SECOND_SCREEN,<br>
}</p>
<p>private boolean exchanged = false;<br>
private State state = State.FIRST_SCREEN;<br>
private Container offer1 = new Container(Inventory.SIZE, false);<br>
private Container offer2 = new Container(Inventory.SIZE, false);<br>
private Player player1, player2;<br>
private boolean accept1, accept2;</p>
<p>public Trade(Player player1, Player player2) {<br>
this.player1 = player1;<br>
this.player2 = player2;<br>
openFirstInterface(player1);<br>
openFirstInterface(player2);<br>
}</p>
<p>private void openFirstInterface(Player player) {<br>
player.getActionSender().sendTradeOptions();<br>
player.getActionSender().sendInterface(335, true);<br>
player.getActionSender().sendInventoryInterface(336);<br>
player.getActionSender().sendString(“Trading with: " + Misc.formatPlayerNameForDisplay(getOther(player).getUsername()), 335, 15);<br>
player.getActionSender().sendString(”", 335, 36);<br>
refreshInventories();<br>
}</p>
<p>private void openSecondInterface(Player player) {<br>
player.getActionSender().sendInterface(334, true);<br>
player.getActionSender().sendString(buildString(player == player1 ? offer1 : offer2), 334, 37);<br>
player.getActionSender().sendString(buildString(player == player1 ? offer2 : offer1), 334, 41);<br>
player.getActionSender().sendString("&lt;col=00FFFF&gt;Trading with:<br>&lt;col=00FFFF&gt;" + Misc.formatPlayerNameForDisplay(getOther(player).getUsername()), 334, 46);<br>
player.getActionSender().sendInterfaceConfig(334, 37, false);<br>
player.getActionSender().sendInterfaceConfig(334, 41, false);<br>
player.getActionSender().sendInterfaceConfig(334, 45, true);<br>
player.getActionSender().sendInterfaceConfig(334, 46, false);<br>
}</p>
<p>private String buildString(Container container) {<br>
if (container.freeSlots() == container.getSize()) {<br>
return “&lt;col=FFFFFF&gt;Absolutely nothing!”;<br>
} else {<br>
StringBuilder bldr = new StringBuilder();<br>
for (int i = 0; i &lt; container.getSize(); i++) {<br>
Item item = container.get(i);<br>
if (item != null) {<br>
bldr.append("&lt;col=FF9040&gt;" + item.getDefinition().getName());<br>
if (item.getAmount() &gt; 1) {<br>
bldr.append(" &lt;col=FFFFFF&gt; x &lt;col=FFFFFF&gt;" + item.getAmount());<br>
}<br>
bldr.append("<br>");<br>
}<br>
}<br>
return bldr.toString();<br>
}<br>
}</p>
<p>private Player getOther(Player player) {<br>
return player == player1 ? player2 : player1;<br>
}</p>
<p>public Player getPlayer1() {<br>
return player1;<br>
}</p>
<p>public Player getPlayer2() {<br>
return player2;<br>
}</p>
<p>public void exchange() {<br>
player1.getInventory().getContainer().addAll(offer2);<br>
player2.getInventory().getContainer().addAll(offer1);<br>
exchanged = true;<br>
}</p>
<p>public void close() {<br>
if (!exchanged) {<br>
player1.getInventory().getContainer().addAll(offer1);<br>
player2.getInventory().getContainer().addAll(offer2);<br>
}<br>
player1.getActionSender().sendCloseInterface();<br>
player2.getActionSender().sendCloseInterface();<br>
player1.getActionSender().sendItems(-1, 1, 93, new Container(Inventory.SIZE, false));<br>
player2.getActionSender().sendItems(-1, 1, 93, new Container(Inventory.SIZE, false));<br>
player1.getActionSender().sendCloseInventoryInterface();<br>
player2.getActionSender().sendCloseInventoryInterface();<br>
player1.getActionSender().sendTabs();<br>
player2.getActionSender().sendTabs();<br>
player1.getActionSender().restoreTabs();<br>
player2.getActionSender().restoreTabs();<br>
player1.getInventory().refresh();<br>
player2.getInventory().refresh();<br>
player1.getRequests().tradeReq = null;<br>
player1.getRequests().trade = null;<br>
player2.getRequests().tradeReq = null;<br>
player2.getRequests().trade = null;<br>
}</p>
<p>public void accept(Player which) {<br>
if (which == player1) {<br>
accept1 = true;<br>
} else {<br>
accept2 = true;<br>
}<br>
acceptUpdate();<br>
}</p>
<p>public void acceptUpdate() {<br>
switch (state) {<br>
case FIRST_SCREEN:<br>
if (accept1 &amp;&amp; accept2) {<br>
if (!player1.getInventory().getContainer().hasSpaceFor(offer2)) {<br>
player2.getActionSender().sendMessage(“Other player does not have enough space in their inventory.”);<br>
player1.getActionSender().sendMessage(“You do not have enough space in your inventory.”);<br>
close();<br>
return;<br>
}<br>
if (!player2.getInventory().getContainer().hasSpaceFor(offer1)) {<br>
player1.getActionSender().sendMessage(“Other player does not have enough space in their inventory.”);<br>
player2.getActionSender().sendMessage(“You do not have enough space in your inventory.”);<br>
close();<br>
return;<br>
}<br>
state = State.SECOND_SCREEN;<br>
accept1 = false;<br>
accept2 = false;<br>
openSecondInterface(player1);<br>
openSecondInterface(player2);<br>
} else if (accept1 &amp;&amp; !accept2) {<br>
player1.getActionSender().sendString(“Waiting for other player…”, 335, 36);<br>
player2.getActionSender().sendString(“The other player has accepted.”, 335, 36);<br>
} else if (!accept1 &amp;&amp; accept2) {<br>
player2.getActionSender().sendString(“Waiting for other player…”, 335, 36);<br>
player1.getActionSender().sendString(“The other player has accepted.”, 335, 36);<br>
} else {<br>
player2.getActionSender().sendString("", 335, 36);<br>
player1.getActionSender().sendString("", 335, 36);<br>
}<br>
break;<br>
case SECOND_SCREEN:<br>
if (accept1 &amp;&amp; accept2) {<br>
state = State.SECOND_SCREEN;<br>
accept1 = false;<br>
accept2 = false;<br>
exchange();<br>
close();<br>
} else if (accept1 &amp;&amp; !accept2) {<br>
player1.getActionSender().sendString(“Waiting for other player…”, 334, 33);<br>
player2.getActionSender().sendString(“The other player has accepted.”, 334, 33);<br>
} else if (!accept1 &amp;&amp; accept2) {<br>
player2.getActionSender().sendString(“Waiting for other player…”, 334, 33);<br>
player1.getActionSender().sendString(“The other player has accepted.”, 334, 33);<br>
} else {<br>
player2.getActionSender().sendString("", 335, 36);<br>
player1.getActionSender().sendString("", 335, 36);<br>
}<br>
break;<br>
}<br>
}</p>
<p>public void flashIcon(Player which, int slot) {<br>
Object[] params = new Object[]{slot, 7, 4, 21954593};<br>
which.getActionSender().sendRunScript(143, params, “Iiii”);<br>
}</p>
<p>public void refreshInventories() {<br>
player1.getActionSender().sendItems(-1, 2, 90, offer1);<br>
player1.getActionSender().sendItems(-2, 60981, 90, offer2);<br>
player2.getActionSender().sendItems(-1, 2, 90, offer2);<br>
player2.getActionSender().sendItems(-2, 60981, 90, offer1);<br>
player1.getInventory().refresh();<br>
player2.getInventory().refresh();<br>
player1.getActionSender().sendItems(-1, 1, 93, player1.getInventory().getContainer());<br>
player2.getActionSender().sendItems(-1, 1, 93, player2.getInventory().getContainer());<br>
}</p>
<p>public void removeItem(Player player, int slot, int amount) {<br>
if (state == State.FIRST_SCREEN) {<br>
if (player == player2) {<br>
if (accept1) {<br>
flashIcon(player1, slot);<br>
}<br>
accept1 = false;<br>
accept2 = false;<br>
acceptUpdate();<br>
Item item = offer2.get(slot);<br>
if (item != null) {<br>
offer2.remove(slot, item);<br>
player2.getInventory().addItem(item.getId(), item.getAmount());<br>
}<br>
}<br>
if (player == player1) {<br>
if (accept2) {<br>
flashIcon(player2, slot);<br>
}<br>
accept1 = false;<br>
accept2 = false;<br>
acceptUpdate();<br>
Item item = offer1.get(slot);<br>
if (item != null) {<br>
offer1.remove(slot, item);<br>
player1.getInventory().addItem(item.getId(), item.getAmount());<br>
}<br>
}<br>
refreshInventories();<br>
}<br>
}</p>
<p>public void offerItem(Player player, int slot, int amount) {<br>
if (state == State.FIRST_SCREEN) {<br>
if (player == player1) {<br>
accept1 = false;<br>
accept2 = false;<br>
acceptUpdate();<br>
Item item = player1.getInventory().getContainer().get(slot);<br>
if (item != null) {<br>
int id = item.getId();<br>
int got = player1.getInventory().getContainer().getNumberOf(new Item(id));<br>
int trueAmount = amount &gt; got ? got : amount;<br>
player1.getInventory().getContainer().remove(slot, new Item(id, trueAmount));<br>
offer1.add(new Item(id, trueAmount));<br>
}<br>
}<br>
if (player == player2) {<br>
accept1 = false;<br>
accept2 = false;<br>
acceptUpdate();<br>
Item item = player2.getInventory().getContainer().get(slot);<br>
if (item != null) {<br>
int id = item.getId();<br>
int got = player2.getInventory().getContainer().getNumberOf(new Item(id));<br>
int trueAmount = amount &gt; got ? got : amount;<br>
player2.getInventory().getContainer().remove(slot, new Item(id, trueAmount));<br>
offer2.add(new Item(id, trueAmount));<br>
}<br>
}<br>
refreshInventories();<br>
}<br>
}</p>
<p>public void examineMy(Player player, int slot) {<br>
if (player == player1) {<br>
Item item = offer1.get(slot);<br>
if (item != null) {<br>
player1.getActionSender().sendMessage(item.getDefinition().getExamine());<br>
}<br>
} else {<br>
Item item = offer2.get(slot);<br>
if (item != null) {<br>
player2.getActionSender().sendMessage(item.getDefinition().getExamine());<br>
}<br>
}<br>
}</p>
<p>public void examineOther(Player player, int slot) {<br>
if (player == player1) {<br>
Item item = offer2.get(slot);<br>
if (item != null) {<br>
player1.getActionSender().sendMessage(item.getDefinition().getExamine());<br>
}<br>
} else {<br>
Item item = offer1.get(slot);<br>
if (item != null) {<br>
player2.getActionSender().sendMessage(item.getDefinition().getExamine());<br>
}<br>
}<br>
}</p>
<p>public void valueOther(Player player, int slot) {<br>
// TODO item value<br>
}</p>
</li>
</ul>
<p>}</p>
<p>[/code]</p>
<p>Please help.[br][br][size=1]Posted on: January 02, 2010, 02:49:28 pm[/size][hr]anyone…?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-do-i-add-trade-to-a-562/323614/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-do-i-add-trade-to-a-562/323614/1</link>
        <pubDate>Sat, 02 Jan 2010 20:22:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-323614-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-do-i-add-trade-to-a-562/323614.rss">How do i add trade to a 562</source>
      </item>
  </channel>
</rss>
