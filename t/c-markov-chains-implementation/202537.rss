<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Markov Chains Implementation</title>
    <link>https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537</link>
    <description>This is a 4th Order (I plan to make it N order when exams are over) implementation of markov chains. (think [url=http://www.jibble.org/jmegahal/]JMegaHAL[/url])  I wrote it as a semester project (last night, no sleep) for algorithms class.  It can be used for a lot of cool things, I&#39;d like to make an IRC bot out of it one day when I get time (haha).  It is implemented as a class anyone can use in their own C++ programs, but a minimal driver is provided.

README:
[code]
Author: Travis Burtrum (moparisthebest)

I use no 3rd party libraries or system calls in this, only standard c++. 
So if you have a c++ compiler (I use g++) then this should compile fine for you.

generic compiling:
./configure
make

compile using g++:
g++ markovchains.cpp -o markovchains

run as you would any app from the command line:
./markovchains

compile using mingw (for windows):
i586-mingw32msvc-g++ markovchains.cpp -o markovchains.exe

sample run (refer to test.txt for input):
./markovchains
commands:
&#39;exit&#39; exits the program
&#39;load filename&#39; loads all sentances in filename into the system (test.txt is provided)
any other input is loaded into the system, and a sentance is output based on the first word typed if possible
# load test.txt
name it charles barkely.
# my teachers name is john.
hello my name is bob.
# name
what is your name?
# name
my friends name is sam.
# name
my friends name is bob.
# name
hello my name is john.
# exit
[/code]

Yes, it is licensed under the GPL.

Things that need done:

[ul][li]Implement saving/loading mechanism[/li]
[li]Clean up code, try not to copy objects as much[/li]
[li]Make it N order[/li][/ul]


If anyone could give me some feedback on my code it would be much appreciated, I am most interested in a better way to store the Quads in memory, the way I do it know requires a lot of extra memory because the Quads I use as keys are copied because I can&#39;t store them by pointer like I want since I need to look them up by value and not by memory location.  I&#39;m sure there is a better way to handle this somewhere, thanks much.</description>
    
    <lastBuildDate>Thu, 01 May 2008 06:38:49 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Markov Chains Implementation</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I thought I might as well post some executables for those who can’t be bothered to set up a C++ compiler.</p>
<p>In this zip is a 32-bit linux executable, and a 32-bit windows .exe, have fun.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/3</link>
        <pubDate>Thu, 01 May 2008 06:38:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-202537-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537.rss">[C++] Markov Chains Implementation</source>
      </item>
      <item>
        <title>[C++] Markov Chains Implementation</title>
        <dc:creator><![CDATA[@cooper cooper]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cooper">@cooper</a> wrote:</p>
          <blockquote>
              <p>Offtopic: I didn’t know your name before.<br>
Anyways, it looks really interesting. I remember [trying to] learn about about this sort of thing in spanish class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/2</link>
        <pubDate>Wed, 30 Apr 2008 05:54:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-202537-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537.rss">[C++] Markov Chains Implementation</source>
      </item>
      <item>
        <title>[C++] Markov Chains Implementation</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>This is a 4th Order (I plan to make it N order when exams are over) implementation of markov chains. (think <a href="http://www.jibble.org/jmegahal/" data-bbcode="true" rel="nofollow noopener">JMegaHAL</a>)  I wrote it as a semester project (last night, no sleep) for algorithms class.  It can be used for a lot of cool things, I’d like to make an IRC bot out of it one day when I get time (haha).  It is implemented as a class anyone can use in their own C++ programs, but a minimal driver is provided.</p>
<p>README:</p>
<pre><code class="lang-auto">Author: Travis Burtrum (moparisthebest)

I use no 3rd party libraries or system calls in this, only standard c++. 
So if you have a c++ compiler (I use g++) then this should compile fine for you.

generic compiling:
./configure
make

compile using g++:
g++ markovchains.cpp -o markovchains

run as you would any app from the command line:
./markovchains

compile using mingw (for windows):
i586-mingw32msvc-g++ markovchains.cpp -o markovchains.exe

sample run (refer to test.txt for input):
./markovchains
commands:
'exit' exits the program
'load filename' loads all sentances in filename into the system (test.txt is provided)
any other input is loaded into the system, and a sentance is output based on the first word typed if possible
# load test.txt
name it charles barkely.
# my teachers name is john.
hello my name is bob.
# name
what is your name?
# name
my friends name is sam.
# name
my friends name is bob.
# name
hello my name is john.
# exit</code></pre>
<p>Yes, it is licensed under the GPL.</p>
<p>Things that need done:</p>
<p>[ul][li]Implement saving/loading mechanism[/li]<br>
[li]Clean up code, try not to copy objects as much[/li]<br>
[li]Make it N order[/li][/ul]</p>
<p>If anyone could give me some feedback on my code it would be much appreciated, I am most interested in a better way to store the Quads in memory, the way I do it know requires a lot of extra memory because the Quads I use as keys are copied because I can’t store them by pointer like I want since I need to look them up by value and not by memory location.  I’m sure there is a better way to handle this somewhere, thanks much.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537/1</link>
        <pubDate>Wed, 30 Apr 2008 05:16:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-202537-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-markov-chains-implementation/202537.rss">[C++] Markov Chains Implementation</source>
      </item>
  </channel>
</rss>
