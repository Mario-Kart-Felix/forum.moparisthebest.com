<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[BCEL] Issues calling a synthetic method</title>
    <link>https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662</link>
    <description>Alright, I started to experiment with this stuff again. 

[code=java]/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package bceltest;

import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.apache.bcel.*;
import org.apache.bcel.classfile.*;
import org.apache.bcel.generic.*;

/**
 *
 * @author Owner
 */
public class BCELTest {

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        // TODO code application logic here
        String path = &quot;C:/Users/Owner/Documents/NetBeansProjects/BCELTest/build/classes/bceltest/BCELTest.class&quot;;
        try {
            ClassParser classParser = new ClassParser(path);
            JavaClass javaClass = classParser.parse();

            ClassGen classGen = new ClassGen(&quot;Frankenstein&quot;, &quot;java.lang.Object&quot;, &quot;Frankenstein.java&quot;, Constants.ACC_PUBLIC, null);
            ConstantPoolGen constantPoolGen = classGen.getConstantPool();
            InstructionList instructionList = new InstructionList();

            Method xm = javaClass.getMethods()[2]; // 2 = dummyMethod
            MethodGen mg = new MethodGen(xm, &quot;Frankenstein&quot;, new ConstantPoolGen(javaClass.getConstantPool()));
            System.out.println(mg.getMethod().getCode());
            INVOKEVIRTUAL iv = new INVOKEVIRTUAL(constantPoolGen.addMethodref(mg));
            //mg.setMaxLocals();
            //mg.setMaxStack(); I don&#39;t need these for a pre made method do I?
            classGen.addMethod(mg.getMethod());

            mg = new MethodGen(Constants.ACC_PUBLIC | Constants.ACC_STATIC, Type.VOID, new Type[]{new ArrayType(Type.STRING, 1)}, new String[]{&quot;args&quot;}, &quot;main&quot;, &quot;Frankenstein&quot;, instructionList, constantPoolGen);

            instructionList.append(new GETSTATIC(constantPoolGen.addFieldref(&quot;java.lang.System&quot;, &quot;out&quot;, &quot;Ljava/io/PrintStream;&quot;)));
            instructionList.append(new LDC(constantPoolGen.addString(&quot;IT&#39;S ALIVE&quot;)));
            instructionList.append(iv);
            instructionList.append(new RETURN());
            mg.setMaxLocals();
            mg.setMaxStack();
            classGen.addMethod(mg.getMethod());
            
            for (Method m : classGen.getMethods()) {
                System.out.println(&quot;-- Method name: &quot; + m.getName() + &quot; : &quot;+m.getSignature()); // It admits that dummyMethod exists.
                for (Type t : m.getArgumentTypes())
                    System.out.println(&quot;---- &quot;+t);
            }
            System.out.println(mg.getMethod().getCode());
            classGen.getJavaClass().dump(&quot;C:/Users/Owner/Desktop/Frankenstein.class&quot;);
        } catch (IOException ex) {
            Logger.getLogger(BCELTest.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    public void dummyMethod(String s) {
        System.out.println(s + &quot; z0mg&quot;);
    }
}[/code]

The source you&#39;re looking at is the code of BCELTest.class (in the path variable inside the main method), and what I&#39;m trying to do here is create a new class with BCEL, with 2 methods - a copy of dummyMethod and a main method which calls dummyMethod.

When I run Frankenstein.class, turns out there is no constant pool entry #130. Any ideas on why does it think so? (I&#39;m assuming because I used the old CP to create the MethodGen, but how else..?)

[code]Exception in thread &quot;main&quot; java.lang.ClassFormatError: Illegal constant pool ind
ex 130 for method name in class file Frankenstein
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(Unknown Source)
        at java.security.SecureClassLoader.defineClass(Unknown Source)
        at java.net.URLClassLoader.defineClass(Unknown Source)
        at java.net.URLClassLoader.access$100(Unknown Source)
        at java.net.URLClassLoader$1.run(Unknown Source)
        at java.net.URLClassLoader$1.run(Unknown Source)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(Unknown Source)
        at java.lang.ClassLoader.loadClass(Unknown Source)
        at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
        at java.lang.ClassLoader.loadClass(Unknown Source)
        at sun.launcher.LauncherHelper.checkAndLoadMain(Unknown Source)[/code]


Leaving all the other fuckups I&#39;ve probably done there aside, are there some general issues when snatching a method and inserting it into another class?</description>
    
    <lastBuildDate>Wed, 28 Mar 2012 02:28:10 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[BCEL] Issues calling a synthetic method</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>You’re damn right the entry doesn’t exist. You can’t simply copy the method code because all of the pointers into the constant pool are invalidated.<br>
You may think that this is copying the constant pool:</p>
<p><code>
            MethodGen mg = new MethodGen(xm, "Frankenstein", new ConstantPoolGen(javaClass.getConstantPool()));</code><br>
… and you’d be wrong. This constant pool is used internally for resolving constant pool references and potentially adding UTF8 entries for the names of various classes and attributes as well as class entries for exception types. If you want the references to resolve normally with minimal effort, you can set Frankenstein’s generative constant pool to a copy of BCELTest’s. Note that your constant pool will be bloated with entries that are unused as a result.</p>
<p>Or, alternatively, you can use ASM which eliminates the constant pool at read-time and recreates it when writing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662/2</link>
        <pubDate>Wed, 28 Mar 2012 02:28:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-437662-2</guid>
        <source url="https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662.rss">[BCEL] Issues calling a synthetic method</source>
      </item>
      <item>
        <title>[BCEL] Issues calling a synthetic method</title>
        <dc:creator><![CDATA[@n3ss3s n3ss3s]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/n3ss3s">@n3ss3s</a> wrote:</p>
          <blockquote>
              <p>Alright, I started to experiment with this stuff again.</p>
<p>[code=java]/*</p>
<ul>
<li>To change this template, choose Tools | Templates</li>
<li>and open the template in the editor.<br>
*/<br>
package bceltest;</li>
</ul>
<p>import java.io.IOException;<br>
import java.util.logging.Level;<br>
import java.util.logging.Logger;<br>
import org.apache.bcel.<em>;<br>
import org.apache.bcel.classfile.</em>;<br>
import org.apache.bcel.generic.*;</p>
<p>/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> Owner<br>
*/<br>
public class BCELTest {</p>
<p>/**</p>
<ul>
<li>
<p><a class="mention" href="/u/param">@param</a> args the command line arguments<br>
*/<br>
public static void main(String[] args) {<br>
// TODO code application logic here<br>
String path = “C:/Users/Owner/Documents/NetBeansProjects/BCELTest/build/classes/bceltest/BCELTest.class”;<br>
try {<br>
ClassParser classParser = new ClassParser(path);<br>
JavaClass javaClass = classParser.parse();</p>
<pre><code> ClassGen classGen = new ClassGen("Frankenstein", "java.lang.Object", "Frankenstein.java", Constants.ACC_PUBLIC, null);
 ConstantPoolGen constantPoolGen = classGen.getConstantPool();
 InstructionList instructionList = new InstructionList();

 Method xm = javaClass.getMethods()[2]; // 2 = dummyMethod
 MethodGen mg = new MethodGen(xm, "Frankenstein", new ConstantPoolGen(javaClass.getConstantPool()));
 System.out.println(mg.getMethod().getCode());
 INVOKEVIRTUAL iv = new INVOKEVIRTUAL(constantPoolGen.addMethodref(mg));
 //mg.setMaxLocals();
 //mg.setMaxStack(); I don't need these for a pre made method do I?
 classGen.addMethod(mg.getMethod());

 mg = new MethodGen(Constants.ACC_PUBLIC | Constants.ACC_STATIC, Type.VOID, new Type[]{new ArrayType(Type.STRING, 1)}, new String[]{"args"}, "main", "Frankenstein", instructionList, constantPoolGen);

 instructionList.append(new GETSTATIC(constantPoolGen.addFieldref("java.lang.System", "out", "Ljava/io/PrintStream;")));
 instructionList.append(new LDC(constantPoolGen.addString("IT'S ALIVE")));
 instructionList.append(iv);
 instructionList.append(new RETURN());
 mg.setMaxLocals();
 mg.setMaxStack();
 classGen.addMethod(mg.getMethod());
 
 for (Method m : classGen.getMethods()) {
     System.out.println("-- Method name: " + m.getName() + " : "+m.getSignature()); // It admits that dummyMethod exists.
     for (Type t : m.getArgumentTypes())
         System.out.println("---- "+t);
 }
 System.out.println(mg.getMethod().getCode());
 classGen.getJavaClass().dump("C:/Users/Owner/Desktop/Frankenstein.class");
</code></pre>
<p>} catch (IOException ex) {<br>
Logger.getLogger(BCELTest.class.getName()).log(Level.SEVERE, null, ex);<br>
}<br>
}</p>
</li>
</ul>
<p>public void dummyMethod(String s) {<br>
System.out.println(s + " z0mg");<br>
}<br>
}[/code]</p>
</li>
</ul>
<p>The source you’re looking at is the code of BCELTest.class (in the path variable inside the main method), and what I’m trying to do here is create a new class with BCEL, with 2 methods - a copy of dummyMethod and a main method which calls dummyMethod.</p>
<p>When I run Frankenstein.class, turns out there is no constant pool entry <span class="hashtag">#130</span>. Any ideas on why does it think so? (I’m assuming because I used the old CP to create the MethodGen, but how else…?)</p>
<p><code>Exception in thread "main" java.lang.ClassFormatError: Illegal constant pool ind
ex 130 for method name in class file Frankenstein
        at java.lang.ClassLoader.defineClass1(Native Method)
        at java.lang.ClassLoader.defineClass(Unknown Source)
        at java.security.SecureClassLoader.defineClass(Unknown Source)
        at java.net.URLClassLoader.defineClass(Unknown Source)
        at java.net.URLClassLoader.access$100(Unknown Source)
        at java.net.URLClassLoader$1.run(Unknown Source)
        at java.net.URLClassLoader$1.run(Unknown Source)
        at java.security.AccessController.doPrivileged(Native Method)
        at java.net.URLClassLoader.findClass(Unknown Source)
        at java.lang.ClassLoader.loadClass(Unknown Source)
        at sun.misc.Launcher$AppClassLoader.loadClass(Unknown Source)
        at java.lang.ClassLoader.loadClass(Unknown Source)
        at sun.launcher.LauncherHelper.checkAndLoadMain(Unknown Source)</code></p>
<p>Leaving all the other fuckups I’ve probably done there aside, are there some general issues when snatching a method and inserting it into another class?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662/1</link>
        <pubDate>Tue, 27 Mar 2012 21:45:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-437662-1</guid>
        <source url="https://forum.moparisthebest.com/t/bcel-issues-calling-a-synthetic-method/437662.rss">[BCEL] Issues calling a synthetic method</source>
      </item>
  </channel>
</rss>
