<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Source][Delphi] Asc</title>
    <link>https://forum.moparisthebest.com/t/source-delphi-asc/1423</link>
    <description>Well, i noticed that the &quot;Ord&quot; function in Delphi which works like the &quot;Asc&quot; function doesn&#39;t accept variables, so i made my own Asc function. :cool: I think it contains pretty much every char...  
[code]function Asc(Char: String): Integer;
begin
  case StringToCaseSelect(Char, [&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,
       &#39;j&#39;,&#39;k&#39;,&#39;l&#39;,&#39;m&#39;,&#39;n&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,
       &#39;z&#39;,&#39;A&#39;,&#39;B&#39;,&#39;C&#39;,&#39;D&#39;,&#39;E&#39;,&#39;F&#39;,&#39;G&#39;,&#39;H&#39;,&#39;I&#39;,&#39;J&#39;,&#39;K&#39;,&#39;L&#39;,&#39;M&#39;,&#39;N&#39;,&#39;O&#39;,
       &#39;P&#39;,&#39;Q&#39;,&#39;R&#39;,&#39;S&#39;,&#39;T&#39;,&#39;U&#39;,&#39;V&#39;,&#39;W&#39;,&#39;X&#39;,&#39;Y&#39;,&#39;Z&#39;,&#39;0&#39;,&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;,
       &#39;5&#39;,&#39;6&#39;,&#39;7&#39;,&#39;8&#39;,&#39;9&#39;,&#39;Â²&#39;,&#39;Â³&#39;,&#39;&amp;&#39;,&#39;Ã©&#39;,&#39;&quot;&#39;,&#39;&#39;&#39;&#39;,&#39;(&#39;,&#39;Â§&#39;,&#39;Ã¨&#39;,&#39;!&#39;,&#39;Ã§&#39;,
       &#39;Ã &#39;,&#39;)&#39;,&#39;-&#39;,&#39;Â°&#39;,&#39;_&#39;,&#39;^&#39;,&#39;$&#39;,&#39;Â¨&#39;,&#39;*&#39;,&#39;Ã¹&#39;,&#39;Âµ&#39;,&#39;%&#39;,&#39;Â£&#39;,&#39;,&#39;,&#39;;&#39;,&#39;:&#39;,
       &#39;=&#39;,&#39;?&#39;,&#39;.&#39;,&#39;/&#39;,&#39;+&#39;,&#39;&lt;&#39;,&#39;&gt;&#39;,&#39;\&#39;,&#39;~&#39;,&#39;Â´&#39;,&#39;`&#39;,&#39;[&#39;,&#39;]&#39;,&#39;}&#39;,&#39;{&#39;,&#39;#&#39;,
       &#39;@&#39;,&#39;â‚¬&#39;,&#39;|&#39;,&#39; &#39;]) of
    0: Result := 97;
    1: Result := 98;
    2: Result := 99;
    3: Result := 100;
    4: Result := 101;
    5: Result := 102;
    6: Result := 103;
    7: Result := 104;
    8: Result := 105;
    9: Result := 106;
    10: Result := 107;
    11: Result := 108;
    12: Result := 109;
    13: Result := 110;
    14: Result := 111;
    15: Result := 112;
    16: Result := 113;
    17: Result := 114;
    18: Result := 115;
    19: Result := 116;
    20: Result := 117;
    21: Result := 118;
    22: Result := 119;
    23: Result := 120;
    24: Result := 121;
    25: Result := 122;
    26: Result := 65;
    27: Result := 66;
    28: Result := 67;
    29: Result := 68;
    30: Result := 69;
    31: Result := 70;
    32: Result := 71;
    33: Result := 72;
    34: Result := 73;
    35: Result := 74;
    36: Result := 75;
    37: Result := 76;
    38: Result := 77;
    39: Result := 78;
    40: Result := 79;
    41: Result := 80;
    42: Result := 81;
    43: Result := 82;
    44: Result := 83;
    45: Result := 84;
    46: Result := 85;
    47: Result := 86;
    48: Result := 87;
    49: Result := 88;
    50: Result := 89;
    51: Result := 90;
    52: Result := 48;
    53: Result := 49;
    54: Result := 50;
    55: Result := 51;
    56: Result := 52;
    57: Result := 53;
    58: Result := 54;
    59: Result := 55;
    60: Result := 56;
    61: Result := 57;
    62: Result := 178;
    63: Result := 179;
    64: Result := 38;
    65: Result := 233;
    66: Result := 34;
    67: Result := 39;
    68: Result := 40;
    69: Result := 167;
    70: Result := 232;
    71: Result := 33;
    72: Result := 231;
    73: Result := 224;
    74: Result := 41;
    75: Result := 45;
    76: Result := 176;
    77: Result := 95;
    78: Result := 94;
    79: Result := 36;
    80: Result := 168;
    81: Result := 42;
    82: Result := 249;
    83: Result := 181;
    84: Result := 37;
    85: Result := 163;
    86: Result := 44;
    87: Result := 59;
    88: Result := 58;
    89: Result := 61;
    90: Result := 63;
    91: Result := 46;
    92: Result := 47;
    93: Result := 43;
    94: Result := 60;
    95: Result := 62;
    96: Result := 92;
    97: Result := 126;
    98: Result := 180;
    99: Result := 96;
    100: Result := 91;
    101: Result := 93;
    102: Result := 125;
    103: Result := 123;
    104: Result := 35;
    105: Result := 64;
    106: Result := 128;
    107: Result := 124;
    108: Result := 32;
  end;
end;[/code]

You will also need:
[code]function StringToCaseSelect
   (Selector : string;
CaseList: array of string): Integer;
var cnt: integer;
begin
   Result:=-1;
   for cnt:=0 to Length(CaseList)-1 do
   begin
     if CompareText(Selector, CaseList[cnt]) = 0 then
     begin
       Result:=cnt;
       Break;
     end;
   end;
end;[/code]
(This last code was not written by me [http://delphi.about.com/cs/adptips2002/a/bltip0202_5.htm])</description>
    
    <lastBuildDate>Thu, 13 Apr 2006 10:20:48 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/source-delphi-asc/1423.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Source][Delphi] Asc</title>
        <dc:creator><![CDATA[@Freddy1990 Freddy1990]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/freddy1990">@Freddy1990</a> wrote:</p>
          <blockquote>
              <p>Well, i noticed that the "Ord" function in Delphi which works like the "Asc" function doesn't accept variables, so i made my own Asc function. <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/cool.png?v=3" title=":cool:" class="emoji" alt=":cool:"> I think it contains pretty much every char...<br></p>

<p></p><pre><code class="lang-auto">function Asc(Char: String): Integer;
begin
  case StringToCaseSelect(Char, ['a','b','c','d','e','f','g','h','i',
       'j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y',
       'z','A','B','C','D','E','F','G','H','I','J','K','L','M','N','O',
       'P','Q','R','S','T','U','V','W','X','Y','Z','0','1','2','3','4',
       '5','6','7','8','9','Â²','Â³','&amp;','Ã©','"','''','(','Â§','Ã¨','!','Ã§',
       'Ã ',')','-','Â°','_','^','$','Â¨','*','Ã¹','Âµ','%','Â£',',',';',':',
       '=','?','.','/','+','&lt;','&gt;','\','~','Â´','`','[',']','}','{','#',
       '@','â‚¬','|',' ']) of
    0: Result := 97;
    1: Result := 98;
    2: Result := 99;
    3: Result := 100;
    4: Result := 101;
    5: Result := 102;
    6: Result := 103;
    7: Result := 104;
    8: Result := 105;
    9: Result := 106;
    10: Result := 107;
    11: Result := 108;
    12: Result := 109;
    13: Result := 110;
    14: Result := 111;
    15: Result := 112;
    16: Result := 113;
    17: Result := 114;
    18: Result := 115;
    19: Result := 116;
    20: Result := 117;
    21: Result := 118;
    22: Result := 119;
    23: Result := 120;
    24: Result := 121;
    25: Result := 122;
    26: Result := 65;
    27: Result := 66;
    28: Result := 67;
    29: Result := 68;
    30: Result := 69;
    31: Result := 70;
    32: Result := 71;
    33: Result := 72;
    34: Result := 73;
    35: Result := 74;
    36: Result := 75;
    37: Result := 76;
    38: Result := 77;
    39: Result := 78;
    40: Result := 79;
    41: Result := 80;
    42: Result := 81;
    43: Result := 82;
    44: Result := 83;
    45: Result := 84;
    46: Result := 85;
    47: Result := 86;
    48: Result := 87;
    49: Result := 88;
    50: Result := 89;
    51: Result := 90;
    52: Result := 48;
    53: Result := 49;
    54: Result := 50;
    55: Result := 51;
    56: Result := 52;
    57: Result := 53;
    58: Result := 54;
    59: Result := 55;
    60: Result := 56;
    61: Result := 57;
    62: Result := 178;
    63: Result := 179;
    64: Result := 38;
    65: Result := 233;
    66: Result := 34;
    67: Result := 39;
    68: Result := 40;
    69: Result := 167;
    70: Result := 232;
    71: Result := 33;
    72: Result := 231;
    73: Result := 224;
    74: Result := 41;
    75: Result := 45;
    76: Result := 176;
    77: Result := 95;
    78: Result := 94;
    79: Result := 36;
    80: Result := 168;
    81: Result := 42;
    82: Result := 249;
    83: Result := 181;
    84: Result := 37;
    85: Result := 163;
    86: Result := 44;
    87: Result := 59;
    88: Result := 58;
    89: Result := 61;
    90: Result := 63;
    91: Result := 46;
    92: Result := 47;
    93: Result := 43;
    94: Result := 60;
    95: Result := 62;
    96: Result := 92;
    97: Result := 126;
    98: Result := 180;
    99: Result := 96;
    100: Result := 91;
    101: Result := 93;
    102: Result := 125;
    103: Result := 123;
    104: Result := 35;
    105: Result := 64;
    106: Result := 128;
    107: Result := 124;
    108: Result := 32;
  end;
end;</code></pre>

<p>You will also need:<br></p>

<p></p><pre><code class="lang-auto">function StringToCaseSelect
   (Selector : string;
CaseList: array of string): Integer;
var cnt: integer;
begin
   Result:=-1;
   for cnt:=0 to Length(CaseList)-1 do
   begin
     if CompareText(Selector, CaseList[cnt]) = 0 then
     begin
       Result:=cnt;
       Break;
     end;
   end;
end;</code></pre>

<p>(This last code was not written by me [http://delphi.about.com/cs/adptips2002/a/bltip0202_5.htm])</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-delphi-asc/1423/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-delphi-asc/1423/1</link>
        <pubDate>Thu, 13 Apr 2006 10:20:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1423-1</guid>
        <source url="https://forum.moparisthebest.com/t/source-delphi-asc/1423.rss">[Source][Delphi] Asc</source>
      </item>
  </channel>
</rss>
