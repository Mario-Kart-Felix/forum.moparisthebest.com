<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>100 errors help please devo 7.0</title>
    <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860</link>
    <description>my compiler gives me these errors

[code]       public String passHash(String password) {
               ^
client.java:12088: class, interface, or enum expected
                String passM = new MD5(password).compute();
                ^
client.java:12089: class, interface, or enum expected
                return new MD5(saltM + passM).compute();
                ^
client.java:12090: class, interface, or enum expected
        }
        ^
client.java:12092: class, interface, or enum expected
        public boolean pickUpItem(int item, int amount) {
               ^
client.java:12096: class, interface, or enum expected
                }
                ^
client.java:12099: class, interface, or enum expected
                        return false;
                        ^
client.java:12100: class, interface, or enum expected
                }
                ^
client.java:12115: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                        ^
client.java:12115: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                                                ^
client.java:12119: class, interface, or enum expected
                                        if (((playerItemsN[i] + amount) &lt; maxIte
mAmount)
                                        ^
client.java:12122: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12124: class, interface, or enum expected
                                        }
                                        ^
client.java:12126: class, interface, or enum expected
                                        outStream.writeWord(3214);
                                        ^
client.java:12127: class, interface, or enum expected
                                        outStream.writeByte(i);
                                        ^
client.java:12128: class, interface, or enum expected
                                        outStream.writeWord(playerItems[i]);
                                        ^
client.java:12129: class, interface, or enum expected
                                        if (playerItemsN[i] &gt; 254) {
                                        ^
client.java:12131: class, interface, or enum expected
                                                outStream.writeDWord(playerItems
N[i]);
                                                ^
client.java:12132: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12134: class, interface, or enum expected
                                        }
                                        ^
client.java:12136: class, interface, or enum expected
                                        i = 30;
                                        ^
client.java:12137: class, interface, or enum expected
                                        return true;
                                        ^
client.java:12138: class, interface, or enum expected
                                }
                                ^
client.java:12140: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                        ^
client.java:12140: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                                                ^
client.java:12143: class, interface, or enum expected
                                        if (amount &lt; maxItemAmount) {
                                        ^
client.java:12145: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12147: class, interface, or enum expected
                                        }
                                        ^
client.java:12149: class, interface, or enum expected
                                        outStream.writeWord(3214);
                                        ^
client.java:12150: class, interface, or enum expected
                                        outStream.writeByte(i);
                                        ^
client.java:12151: class, interface, or enum expected
                                        outStream.writeWord(playerItems[i]);
                                        ^
client.java:12152: class, interface, or enum expected
                                        if (playerItemsN[i] &gt; 254) {
                                        ^
client.java:12154: class, interface, or enum expected
                                                outStream.writeDWord_v2(playerIt
emsN[i]);
                                                ^
client.java:12155: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12157: class, interface, or enum expected
                                        }
                                        ^
client.java:12159: class, interface, or enum expected
                                        i = 30;
                                        ^
client.java:12160: class, interface, or enum expected
                                        return true;
                                        ^
client.java:12161: class, interface, or enum expected
                                }
                                ^
client.java:12164: class, interface, or enum expected
                } else {
                ^
client.java:12166: class, interface, or enum expected
                }
                ^
client.java:12169: class, interface, or enum expected
        public boolean playerHasItem(int itemID) {
               ^
client.java:12171: class, interface, or enum expected
                for (int element : playerItems) {
                ^
client.java:12174: class, interface, or enum expected
                        }
                        ^
client.java:12178: class, interface, or enum expected
        }
        ^
client.java:12180: class, interface, or enum expected
        public boolean playerHasItem(int itemID, int amt) {
               ^
client.java:12182: class, interface, or enum expected
                int found = 0;
                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                                                        ^
client.java:12187: class, interface, or enum expected
                                else
                                ^
client.java:12189: class, interface, or enum expected
                        }
                        ^
client.java:12193: class, interface, or enum expected
                return false;
                ^
client.java:12195: class, interface, or enum expected
        }
        ^
client.java:12197: class, interface, or enum expected
        public void pmstatus(int status) {
               ^
client.java:12200: class, interface, or enum expected
                outStream.writeByte(status);
                ^
client.java:12201: class, interface, or enum expected
        }
        ^
client.java:12203: class, interface, or enum expected
        public void pmupdate(int pmid, int world) {
               ^
client.java:12207: class, interface, or enum expected
                }
                ^
client.java:12210: class, interface, or enum expected
                if (handler.players[pmid].Privatechat == 0) {
                ^
client.java:12215: class, interface, or enum expected
                                                return;
                                                ^
client.java:12216: class, interface, or enum expected
                                        }
                                        ^
client.java:12227: class, interface, or enum expected
                                                        return;
                                                        ^
client.java:12228: class, interface, or enum expected
                                                } else {
                                                ^
client.java:12230: class, interface, or enum expected
                                                        return;
                                                        ^
client.java:12231: class, interface, or enum expected
                                                }
                                                ^
client.java:12240: class, interface, or enum expected
                                                return;
                                                ^
client.java:12241: class, interface, or enum expected
                                        }
                                        ^
client.java:12248: class, interface, or enum expected
        public boolean prayer() {
               ^
client.java:12251: class, interface, or enum expected
                if (playerLevel[playerPrayer] &gt;= prayer[1]) {
                ^
client.java:12255: class, interface, or enum expected
                                OriginalShield = playerEquipment[playerShield];
                                ^
client.java:12256: class, interface, or enum expected
                                OriginalWeapon = playerEquipment[playerWeapon];
                                ^
client.java:12259: class, interface, or enum expected
                                setAnimation(0x33B);
                                ^
client.java:12260: class, interface, or enum expected
                                prayer[0] = 2;
                                ^
client.java:12261: class, interface, or enum expected
                        }
                        ^
client.java:12267: class, interface, or enum expected
                                addSkillXP((prayer[2] * prayer[3]), playerPrayer
);
                                ^
client.java:12268: class, interface, or enum expected
                                sM(&quot;You bury the bones.&quot;);
                                ^
client.java:12269: class, interface, or enum expected
                                playerEquipment[playerWeapon] = OriginalWeapon;
                                ^
client.java:12270: class, interface, or enum expected
                                playerEquipment[playerShield] = OriginalShield;
                                ^
client.java:12273: class, interface, or enum expected
                                resetAnimation();
                                ^
client.java:12274: class, interface, or enum expected
                                resetPR();
                                ^
client.java:12276: class, interface, or enum expected
                                actionTimer = 4;
                                ^
client.java:12277: class, interface, or enum expected
                        }
                        ^
client.java:12280: class, interface, or enum expected
        }
        ^
client.java:12282: class, interface, or enum expected
        public void prayerMessage(int exp) {
               ^
client.java:12284: class, interface, or enum expected
                animationReset = System.currentTimeMillis() + 1000;
                ^
client.java:12285: class, interface, or enum expected
                addSkillXP(exp, 5);
                ^
client.java:12286: class, interface, or enum expected
                sM(&quot;You bury the bones&quot;);
                ^
client.java:12287: class, interface, or enum expected
        }
        ^
client.java:12288: class, interface, or enum expected
public void farm(int req, int itemAdd, int itemDelete, int xp){
       ^
client.java:12291: class, interface, or enum expected
return;
^
client.java:12292: class, interface, or enum expected
}
^
client.java:12294: class, interface, or enum expected
actionInterval = 5000;
^
client.java:12295: class, interface, or enum expected
lastAction = System.currentTimeMillis();
^
client.java:12296: class, interface, or enum expected
sM(&quot;You plant the seeds and grow some herbs.&quot;);
^
client.java:12297: class, interface, or enum expected
setAnimation(2273);
^
client.java:12298: class, interface, or enum expected
addItem(itemAdd, 1);
^
client.java:12299: class, interface, or enum expected
deleteItem(itemDelete, getItemSlot(itemDelete), 1);
^
client.java:12300: class, interface, or enum expected
addSkillXP(xp,19);
^
100 errors
:: Done!
Tryk på en vilkårlig tast for at fortsætte . . .[/code]
heres the line with the first error
and alot of lines above it

[code]
             

	

			case 9125:
				// Accurate
			case 22228:
				// punch (unarmed)
			case 48010:
				// flick (whip)
			case 21200:
				// spike (pickaxe)
			case 1080:
				// bash (staff)
			case 6168:
				// chop (axe)
			case 6236:
				// accurate (long bow)
			case 17102:
				// accurate (darts)
			case 8234:
				// stab (dagger)
				FightType = 1;
				SkillID = 0;
				break;

			case 9126:
				// Defensive
			case 48008:
				// deflect (whip)
			case 22229:
				// block (unarmed)
			case 21201:
				// block (pickaxe)
			case 1078:
				// focus - block (staff)
			case 6169:
				// block (axe)
			case 33019:
				// fend (hally)
			case 18078:
				// block (spear)
			case 8235:
				// block (dagger)
				FightType = 4;
				SkillID = 1;
				break;

			case 9127:
				// Controlled
			case 48009:
				// lash (whip)
			case 33018:
				// jab (hally)
			case 6234:
				// longrange (long bow)
			case 18077:
				// lunge (spear)
			case 18080:
				// swipe (spear)
			case 18079:
				// pound (spear)
			case 17100:
				// longrange (darts)
				FightType = 3;
				SkillID = 3;
				break;

			case 9128:
				// Aggressive
			case 22230:
				// kick (unarmed)
			case 21203:
				// impale (pickaxe)
			case 21202:
				// sMash (pickaxe)
			case 1079:
				// pound (staff)
			case 6171:
				// hack (axe)
			case 6170:
				// sMash (axe)
			case 33020:
				// swipe (hally)
			case 6235:
				// rapid (long bow)
			case 17101:
				// repid (darts)
			case 8237:
				// lunge (dagger)
			case 8236:
				// slash (dagger)
				FightType = 2;
				SkillID = 2;
				break;

			case 9154:
				// Log out
				long currentTime = System.currentTimeMillis();
				if (inCombat) {
					sM(&quot;You must wait until you are out of combat before logging out!&quot;);
					break;
				}
				// if(currentHealth &gt; 0)
				logout();
				break;

			case 21011:
				takeAsNote = false;
				break;

			case 21010:
				takeAsNote = true;
				break;

			case 13092:
				if (System.currentTimeMillis() - lastButton &lt; 1000) {
					lastButton = System.currentTimeMillis();
					break;
				} else {
					lastButton = System.currentTimeMillis();
				}
				if (inTrade &amp;&amp; !tradeConfirmed) {
					lastButton = System.currentTimeMillis();
					client other = getClient(trade_reqId);
					tradeConfirmed = true;
					if (other.tradeConfirmed) {
						confirmScreen();
						other.confirmScreen();
						break;
					}
					sendFrame126(&quot;Waiting for other player...&quot;, 3431);
					if (validClient(trade_reqId)) {
						other.sendFrame126(&quot;Other player has accepted&quot;, 3431);
					}
				}
				break;

			case 13218:
				client other = getClient(trade_reqId);
				if (!validClient(trade_reqId))
					break;
				if (System.currentTimeMillis() - lastButton &lt; 1000) {
					lastButton = System.currentTimeMillis();
					break;
				} else {
					lastButton = System.currentTimeMillis();
				}
				lastButton = System.currentTimeMillis();
				if (inTrade &amp;&amp; tradeConfirmed &amp;&amp; other.tradeConfirmed
						&amp;&amp; !tradeConfirmed2) {
					lastButton = System.currentTimeMillis();
					tradeConfirmed2 = true;
					if (other.tradeConfirmed2) {
						giveItems();
						other.giveItems();
						break;
					}
					other.sendQuest(&quot;Other player has accepted.&quot;, 3535);
					sendQuest(&quot;Waiting for other player...&quot;, 3535);
				}
				break;

			case 9157:
				if (dialog) {
					switch (dialogId) {
					case 1:

						break;
					}
				}
				if (NpcDialogue == 2) {
					NpcDialogue = 0;
					NpcDialogueSend = false;
					openUpBank();
				} else if (NpcDialogue == 4) {
					// Aubury
					NpcDialogue = 0;
					NpcDialogueSend = false;
					openUpShop(2);
				} else if (NpcDialogue == 9) {
					// mage arena
					for (NPC npc : server.npcHandler.npcs) {
						if ((npc != null) &amp;&amp; (npc.npcType == 1597)) {
							npc.updateRequired = true;
							npc.textUpdateRequired = true;
							npc.textUpdate = &quot;Good luck out there, &quot;
									+ playerName;
						}
					}
					if (combatLevel &gt;= 80) {
						teleportToX = 3105;
						teleportToY = 3933;
						closeInterface();
					} else {
						sM(&quot;You need to be level 80 or above to enter the mage arena.&quot;);
						sM(&quot;The skeletons at the varrock castle are a good place until then.&quot;);
					}
				}
				break;

			case 9158:
				if (NpcDialogue == 2) {
					NpcDialogue = 0;
					NpcDialogueSend = false;
					openUpPinSettings();
				} else if (NpcDialogue == 4) {
					NpcDialogue = 5;
					NpcDialogueSend = false;
				} else if (NpcDialogue == 9) {
					customCommand(&quot;help&quot;);
				}
				break;

			case 1097:
				setSidebarInterface(0, 1829);
				break;

			case 7212:
				setSidebarInterface(0, 328);
				break;
			case 26018:
				if (!inDuel || !validClient(duel_with))
					break;
				client o = getClient(duel_with);
				if (System.currentTimeMillis() - lastButton &lt; 1000) {
					lastButton = System.currentTimeMillis();
					break;
				} else {
					lastButton = System.currentTimeMillis();
				}
				duelConfirmed = true;
				if (duelConfirmed &amp;&amp; o.duelConfirmed) {
					canOffer = false;
					confirmDuel();
					o.confirmDuel();
				} else {
					sendFrame126(&quot;Waiting for other player...&quot;, 6684);
					o.sendFrame126(&quot;Other player has accepted.&quot;, 6684);
				}

				break;

			default:
				// System.out.println(&quot;Player stands in: X=&quot;+absX+&quot; Y=&quot;+absY);
				println_debug(&quot;Case 185: Action Button: &quot; + actionButtonId);
				break;
			}
			break;

		// the following Ids are the reason why AR-type cheats are hopeless to
		// make...
		// basically they&#39;re just there to make reversing harder
		case 226:
		case 78:
		case 148:
		case 183:
		case 230:
		case 136:
		case 189:
		case 152:
		case 200:
		case 85:
		case 165:
		case 238:
		case 150:
		case 36:
		case 246:
		case 77:
			break;

		// any packets we might have missed
		default:
			interfaceID = inStream.readUnsignedWordA();
			int actionButtonId1 = misc.HexToInt(inStream.buffer, 0, packetSize);

			println_debug(&quot;Unhandled packet [&quot; + packetType + &quot;, InterFaceId: &quot;
					+ interfaceID + &quot;, size=&quot; + packetSize + &quot;]: ]&quot;
					+ misc.Hex(inStream.buffer, 1, packetSize) + &quot;[&quot;);
			println_debug(&quot;Action Button: &quot; + actionButtonId1);
			break;
		}
	}

	public String passHash(String password) {
		String saltM = new MD5(&quot;bakatool&quot;).compute();
		String passM = new MD5(password).compute();[/code]what does that mean?</description>
    
    <lastBuildDate>Tue, 16 Jun 2009 17:17:49 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@manmanner manmanner]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/manmanner">@manmanner</a> wrote:</p>
          <blockquote>
              <p>about what line?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/7</link>
        <pubDate>Tue, 16 Jun 2009 17:17:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-7</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@djspanke djspanke]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/djspanke">@djspanke</a> wrote:</p>
          <blockquote>
              <p>100 errors = missing { or }, find it yourself.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/6</link>
        <pubDate>Tue, 16 Jun 2009 16:05:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-6</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@manmanner manmanner]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/manmanner">@manmanner</a> wrote:</p>
          <blockquote>
              <p>item on object<br>
no errors there</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/5</link>
        <pubDate>Tue, 16 Jun 2009 16:03:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-5</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@illslayu illslayu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/illslayu">@illslayu</a> wrote:</p>
          <blockquote>
              <p>what did you try to do?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/4</link>
        <pubDate>Tue, 16 Jun 2009 15:58:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-4</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@manmanner manmanner]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/manmanner">@manmanner</a> wrote:</p>
          <blockquote>
              <p>yes<br>
didnt work</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/3</link>
        <pubDate>Tue, 16 Jun 2009 14:34:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-3</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@legend-scape legend-scape]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/legend-scape">@legend-scape</a> wrote:</p>
          <blockquote>
              <p>Been trying to delete the emotes?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/2</link>
        <pubDate>Tue, 16 Jun 2009 11:59:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-2</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
      <item>
        <title>100 errors help please devo 7.0</title>
        <dc:creator><![CDATA[@manmanner manmanner]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/manmanner">@manmanner</a> wrote:</p>
          <blockquote>
              <p>my compiler gives me these errors</p>
<p><code>       public String passHash(String password) {
               ^
client.java:12088: class, interface, or enum expected
                String passM = new MD5(password).compute();
                ^
client.java:12089: class, interface, or enum expected
                return new MD5(saltM + passM).compute();
                ^
client.java:12090: class, interface, or enum expected
        }
        ^
client.java:12092: class, interface, or enum expected
        public boolean pickUpItem(int item, int amount) {
               ^
client.java:12096: class, interface, or enum expected
                }
                ^
client.java:12099: class, interface, or enum expected
                        return false;
                        ^
client.java:12100: class, interface, or enum expected
                }
                ^
client.java:12115: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                        ^
client.java:12115: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                                                ^
client.java:12119: class, interface, or enum expected
                                        if (((playerItemsN[i] + amount) &lt; maxIte
mAmount)
                                        ^
client.java:12122: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12124: class, interface, or enum expected
                                        }
                                        ^
client.java:12126: class, interface, or enum expected
                                        outStream.writeWord(3214);
                                        ^
client.java:12127: class, interface, or enum expected
                                        outStream.writeByte(i);
                                        ^
client.java:12128: class, interface, or enum expected
                                        outStream.writeWord(playerItems[i]);
                                        ^
client.java:12129: class, interface, or enum expected
                                        if (playerItemsN[i] &gt; 254) {
                                        ^
client.java:12131: class, interface, or enum expected
                                                outStream.writeDWord(playerItems
N[i]);
                                                ^
client.java:12132: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12134: class, interface, or enum expected
                                        }
                                        ^
client.java:12136: class, interface, or enum expected
                                        i = 30;
                                        ^
client.java:12137: class, interface, or enum expected
                                        return true;
                                        ^
client.java:12138: class, interface, or enum expected
                                }
                                ^
client.java:12140: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                        ^
client.java:12140: class, interface, or enum expected
                        for (int i = 0; i &lt; playerItems.length; i++) {
                                                                ^
client.java:12143: class, interface, or enum expected
                                        if (amount &lt; maxItemAmount) {
                                        ^
client.java:12145: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12147: class, interface, or enum expected
                                        }
                                        ^
client.java:12149: class, interface, or enum expected
                                        outStream.writeWord(3214);
                                        ^
client.java:12150: class, interface, or enum expected
                                        outStream.writeByte(i);
                                        ^
client.java:12151: class, interface, or enum expected
                                        outStream.writeWord(playerItems[i]);
                                        ^
client.java:12152: class, interface, or enum expected
                                        if (playerItemsN[i] &gt; 254) {
                                        ^
client.java:12154: class, interface, or enum expected
                                                outStream.writeDWord_v2(playerIt
emsN[i]);
                                                ^
client.java:12155: class, interface, or enum expected
                                        } else {
                                        ^
client.java:12157: class, interface, or enum expected
                                        }
                                        ^
client.java:12159: class, interface, or enum expected
                                        i = 30;
                                        ^
client.java:12160: class, interface, or enum expected
                                        return true;
                                        ^
client.java:12161: class, interface, or enum expected
                                }
                                ^
client.java:12164: class, interface, or enum expected
                } else {
                ^
client.java:12166: class, interface, or enum expected
                }
                ^
client.java:12169: class, interface, or enum expected
        public boolean playerHasItem(int itemID) {
               ^
client.java:12171: class, interface, or enum expected
                for (int element : playerItems) {
                ^
client.java:12174: class, interface, or enum expected
                        }
                        ^
client.java:12178: class, interface, or enum expected
        }
        ^
client.java:12180: class, interface, or enum expected
        public boolean playerHasItem(int itemID, int amt) {
               ^
client.java:12182: class, interface, or enum expected
                int found = 0;
                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                                ^
client.java:12183: class, interface, or enum expected
                for (int i = 0; i &lt; playerItems.length; i++) {
                                                        ^
client.java:12187: class, interface, or enum expected
                                else
                                ^
client.java:12189: class, interface, or enum expected
                        }
                        ^
client.java:12193: class, interface, or enum expected
                return false;
                ^
client.java:12195: class, interface, or enum expected
        }
        ^
client.java:12197: class, interface, or enum expected
        public void pmstatus(int status) {
               ^
client.java:12200: class, interface, or enum expected
                outStream.writeByte(status);
                ^
client.java:12201: class, interface, or enum expected
        }
        ^
client.java:12203: class, interface, or enum expected
        public void pmupdate(int pmid, int world) {
               ^
client.java:12207: class, interface, or enum expected
                }
                ^
client.java:12210: class, interface, or enum expected
                if (handler.players[pmid].Privatechat == 0) {
                ^
client.java:12215: class, interface, or enum expected
                                                return;
                                                ^
client.java:12216: class, interface, or enum expected
                                        }
                                        ^
client.java:12227: class, interface, or enum expected
                                                        return;
                                                        ^
client.java:12228: class, interface, or enum expected
                                                } else {
                                                ^
client.java:12230: class, interface, or enum expected
                                                        return;
                                                        ^
client.java:12231: class, interface, or enum expected
                                                }
                                                ^
client.java:12240: class, interface, or enum expected
                                                return;
                                                ^
client.java:12241: class, interface, or enum expected
                                        }
                                        ^
client.java:12248: class, interface, or enum expected
        public boolean prayer() {
               ^
client.java:12251: class, interface, or enum expected
                if (playerLevel[playerPrayer] &gt;= prayer[1]) {
                ^
client.java:12255: class, interface, or enum expected
                                OriginalShield = playerEquipment[playerShield];
                                ^
client.java:12256: class, interface, or enum expected
                                OriginalWeapon = playerEquipment[playerWeapon];
                                ^
client.java:12259: class, interface, or enum expected
                                setAnimation(0x33B);
                                ^
client.java:12260: class, interface, or enum expected
                                prayer[0] = 2;
                                ^
client.java:12261: class, interface, or enum expected
                        }
                        ^
client.java:12267: class, interface, or enum expected
                                addSkillXP((prayer[2] * prayer[3]), playerPrayer
);
                                ^
client.java:12268: class, interface, or enum expected
                                sM("You bury the bones.");
                                ^
client.java:12269: class, interface, or enum expected
                                playerEquipment[playerWeapon] = OriginalWeapon;
                                ^
client.java:12270: class, interface, or enum expected
                                playerEquipment[playerShield] = OriginalShield;
                                ^
client.java:12273: class, interface, or enum expected
                                resetAnimation();
                                ^
client.java:12274: class, interface, or enum expected
                                resetPR();
                                ^
client.java:12276: class, interface, or enum expected
                                actionTimer = 4;
                                ^
client.java:12277: class, interface, or enum expected
                        }
                        ^
client.java:12280: class, interface, or enum expected
        }
        ^
client.java:12282: class, interface, or enum expected
        public void prayerMessage(int exp) {
               ^
client.java:12284: class, interface, or enum expected
                animationReset = System.currentTimeMillis() + 1000;
                ^
client.java:12285: class, interface, or enum expected
                addSkillXP(exp, 5);
                ^
client.java:12286: class, interface, or enum expected
                sM("You bury the bones");
                ^
client.java:12287: class, interface, or enum expected
        }
        ^
client.java:12288: class, interface, or enum expected
public void farm(int req, int itemAdd, int itemDelete, int xp){
       ^
client.java:12291: class, interface, or enum expected
return;
^
client.java:12292: class, interface, or enum expected
}
^
client.java:12294: class, interface, or enum expected
actionInterval = 5000;
^
client.java:12295: class, interface, or enum expected
lastAction = System.currentTimeMillis();
^
client.java:12296: class, interface, or enum expected
sM("You plant the seeds and grow some herbs.");
^
client.java:12297: class, interface, or enum expected
setAnimation(2273);
^
client.java:12298: class, interface, or enum expected
addItem(itemAdd, 1);
^
client.java:12299: class, interface, or enum expected
deleteItem(itemDelete, getItemSlot(itemDelete), 1);
^
client.java:12300: class, interface, or enum expected
addSkillXP(xp,19);
^
100 errors
:: Done!
Tryk på en vilkårlig tast for at fortsætte . . .</code><br>
heres the line with the first error<br>
and alot of lines above it</p>
<p>[code]</p>
<pre><code>		case 9125:
			// Accurate
		case 22228:
			// punch (unarmed)
		case 48010:
			// flick (whip)
		case 21200:
			// spike (pickaxe)
		case 1080:
			// bash (staff)
		case 6168:
			// chop (axe)
		case 6236:
			// accurate (long bow)
		case 17102:
			// accurate (darts)
		case 8234:
			// stab (dagger)
			FightType = 1;
			SkillID = 0;
			break;

		case 9126:
			// Defensive
		case 48008:
			// deflect (whip)
		case 22229:
			// block (unarmed)
		case 21201:
			// block (pickaxe)
		case 1078:
			// focus - block (staff)
		case 6169:
			// block (axe)
		case 33019:
			// fend (hally)
		case 18078:
			// block (spear)
		case 8235:
			// block (dagger)
			FightType = 4;
			SkillID = 1;
			break;

		case 9127:
			// Controlled
		case 48009:
			// lash (whip)
		case 33018:
			// jab (hally)
		case 6234:
			// longrange (long bow)
		case 18077:
			// lunge (spear)
		case 18080:
			// swipe (spear)
		case 18079:
			// pound (spear)
		case 17100:
			// longrange (darts)
			FightType = 3;
			SkillID = 3;
			break;

		case 9128:
			// Aggressive
		case 22230:
			// kick (unarmed)
		case 21203:
			// impale (pickaxe)
		case 21202:
			// sMash (pickaxe)
		case 1079:
			// pound (staff)
		case 6171:
			// hack (axe)
		case 6170:
			// sMash (axe)
		case 33020:
			// swipe (hally)
		case 6235:
			// rapid (long bow)
		case 17101:
			// repid (darts)
		case 8237:
			// lunge (dagger)
		case 8236:
			// slash (dagger)
			FightType = 2;
			SkillID = 2;
			break;

		case 9154:
			// Log out
			long currentTime = System.currentTimeMillis();
			if (inCombat) {
				sM("You must wait until you are out of combat before logging out!");
				break;
			}
			// if(currentHealth &gt; 0)
			logout();
			break;

		case 21011:
			takeAsNote = false;
			break;

		case 21010:
			takeAsNote = true;
			break;

		case 13092:
			if (System.currentTimeMillis() - lastButton &lt; 1000) {
				lastButton = System.currentTimeMillis();
				break;
			} else {
				lastButton = System.currentTimeMillis();
			}
			if (inTrade &amp;&amp; !tradeConfirmed) {
				lastButton = System.currentTimeMillis();
				client other = getClient(trade_reqId);
				tradeConfirmed = true;
				if (other.tradeConfirmed) {
					confirmScreen();
					other.confirmScreen();
					break;
				}
				sendFrame126("Waiting for other player...", 3431);
				if (validClient(trade_reqId)) {
					other.sendFrame126("Other player has accepted", 3431);
				}
			}
			break;

		case 13218:
			client other = getClient(trade_reqId);
			if (!validClient(trade_reqId))
				break;
			if (System.currentTimeMillis() - lastButton &lt; 1000) {
				lastButton = System.currentTimeMillis();
				break;
			} else {
				lastButton = System.currentTimeMillis();
			}
			lastButton = System.currentTimeMillis();
			if (inTrade &amp;&amp; tradeConfirmed &amp;&amp; other.tradeConfirmed
					&amp;&amp; !tradeConfirmed2) {
				lastButton = System.currentTimeMillis();
				tradeConfirmed2 = true;
				if (other.tradeConfirmed2) {
					giveItems();
					other.giveItems();
					break;
				}
				other.sendQuest("Other player has accepted.", 3535);
				sendQuest("Waiting for other player...", 3535);
			}
			break;

		case 9157:
			if (dialog) {
				switch (dialogId) {
				case 1:

					break;
				}
			}
			if (NpcDialogue == 2) {
				NpcDialogue = 0;
				NpcDialogueSend = false;
				openUpBank();
			} else if (NpcDialogue == 4) {
				// Aubury
				NpcDialogue = 0;
				NpcDialogueSend = false;
				openUpShop(2);
			} else if (NpcDialogue == 9) {
				// mage arena
				for (NPC npc : server.npcHandler.npcs) {
					if ((npc != null) &amp;&amp; (npc.npcType == 1597)) {
						npc.updateRequired = true;
						npc.textUpdateRequired = true;
						npc.textUpdate = "Good luck out there, "
								+ playerName;
					}
				}
				if (combatLevel &gt;= 80) {
					teleportToX = 3105;
					teleportToY = 3933;
					closeInterface();
				} else {
					sM("You need to be level 80 or above to enter the mage arena.");
					sM("The skeletons at the varrock castle are a good place until then.");
				}
			}
			break;

		case 9158:
			if (NpcDialogue == 2) {
				NpcDialogue = 0;
				NpcDialogueSend = false;
				openUpPinSettings();
			} else if (NpcDialogue == 4) {
				NpcDialogue = 5;
				NpcDialogueSend = false;
			} else if (NpcDialogue == 9) {
				customCommand("help");
			}
			break;

		case 1097:
			setSidebarInterface(0, 1829);
			break;

		case 7212:
			setSidebarInterface(0, 328);
			break;
		case 26018:
			if (!inDuel || !validClient(duel_with))
				break;
			client o = getClient(duel_with);
			if (System.currentTimeMillis() - lastButton &lt; 1000) {
				lastButton = System.currentTimeMillis();
				break;
			} else {
				lastButton = System.currentTimeMillis();
			}
			duelConfirmed = true;
			if (duelConfirmed &amp;&amp; o.duelConfirmed) {
				canOffer = false;
				confirmDuel();
				o.confirmDuel();
			} else {
				sendFrame126("Waiting for other player...", 6684);
				o.sendFrame126("Other player has accepted.", 6684);
			}

			break;

		default:
			// System.out.println("Player stands in: X="+absX+" Y="+absY);
			println_debug("Case 185: Action Button: " + actionButtonId);
			break;
		}
		break;

	// the following Ids are the reason why AR-type cheats are hopeless to
	// make...
	// basically they're just there to make reversing harder
	case 226:
	case 78:
	case 148:
	case 183:
	case 230:
	case 136:
	case 189:
	case 152:
	case 200:
	case 85:
	case 165:
	case 238:
	case 150:
	case 36:
	case 246:
	case 77:
		break;

	// any packets we might have missed
	default:
		interfaceID = inStream.readUnsignedWordA();
		int actionButtonId1 = misc.HexToInt(inStream.buffer, 0, packetSize);

		println_debug("Unhandled packet [" + packetType + ", InterFaceId: "
				+ interfaceID + ", size=" + packetSize + "]: ]"
				+ misc.Hex(inStream.buffer, 1, packetSize) + "[");
		println_debug("Action Button: " + actionButtonId1);
		break;
	}
}

public String passHash(String password) {
	String saltM = new MD5("bakatool").compute();
	String passM = new MD5(password).compute();[/code]what does that mean?</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860/1</link>
        <pubDate>Tue, 16 Jun 2009 08:14:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-283860-1</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors-help-please-devo-7-0/283860.rss">100 errors help please devo 7.0</source>
      </item>
  </channel>
</rss>
