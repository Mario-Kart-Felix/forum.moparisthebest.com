<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Simplified Area Boundary Checking</title>
    <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614</link>
    <description>This is a short tutorial to simplify your area checking, rather than checking each x and y value manually every time you want to check if an entity is in a specified area.

First of all, the Area class:
[code=java]package org.iClarity.rs2.util;

/**
 * Represents an area.
 * @author PrimaDude.
 */
public class Area {
	
	private Position minimumPosition;
	private Position maximumPosition;
	
	/**
	 * Gets the minimum position.
	 * @return The minimum position.
	 */
	public Position getMinimumPosition() {
		return minimumPosition;
	}

	/**
	 * Gets the maximum position.
	 * @return The maximum position.
	 */
	public Position getMaximumPosition() {
		return maximumPosition;
	}
	
	/**
	 * Sets the minimum random walking position.
	 * @param minimumPosition The minimum position.
	 */
	public void setMinimumPosition(Position minimumPosition) {
		this.minimumPosition = minimumPosition;
	}
	
	/**
	 * Sets the maximum random walking position.
	 * @param maximumPosition The maximum position.
	 */
	public void setMaximumPosition(Position maximumPosition) {
		this.maximumPosition = maximumPosition;
	}

	/**
	 * Checks if the specified position is within this area.
	 * @param position The position.
	 * @return True or false.
	 */
	public boolean isInArea(Position position) {
		return position.getX() &gt;= getMinimumPosition().getX()
			&amp;&amp; position.getX() &lt;= getMaximumPosition().getX()
			&amp;&amp; position.getY() &gt;= getMinimumPosition().getY()
			&amp;&amp; position.getY() &lt;= getMaximumPosition().getY();
	}
	
	/**
	 * Constructs a new area.
	 * @param minimumPosition The minimum position.
	 * @param maximumPosition The maximum position.
	 */
	public Area(Position minimumPosition, Position maximumPosition) {
		this.minimumPosition = minimumPosition;
		this.maximumPosition = maximumPosition;
	}

}[/code]

This class represents an area that will be constructed. To construct a new area, you would simply use the class&#39; constructor and assign it&#39;s value to an Area object:
[code=java]Area area = new Area(new Position(x1, y1), new Position(x2, y2));[/code]

The x1, y1 position is the South-West corner of the Area region, and the x2, y2 position is the North-East corner of the Area region. The position constructor &#39;new Position(x, y)&#39; is a better way of storing, changing and checking x and y values for an entity&#39;s position (Or even anything&#39;s position for that matter), rather than manually having an &#39;int x&#39; and &#39;int y&#39; value for each position you want to check.

Here&#39;s the position class:
[code=java]package org.iClarity.rs2.util;

/**
 * Represents a position.
 * @author PrimaDude.
 */
public class Position {

	private int x;
	private int y;
	private int z;
	
	public static enum Direction {
		NORTH,
		SOUTH,
		EAST,
		WEST,
		NORTH_WEST,
		NORTH_EAST,
		SOUTH_WEST,
		SOUTH_EAST
	}

	/**
	 * Creates a new Position with the specified coordinates. The Z coordinate
	 * is set to 0.
	 * @param x The X coordinate.
	 * @param y The Y coordinate.
	 */
	public Position(int x, int y) {
		this(x, y, 0);
	}

	/**
	 * Creates a new Position with the specified coordinates.
	 * @param x The X coordinate.
	 * @param y The Y coordinate.
	 * @param z The Z coordinate.
	 */
	public Position(int x, int y, int z) {
		this.setX(x);
		this.setY(y);
		this.setZ(z);
	}

	@Override
	public String toString() {
		return &quot;Position(&quot; + x + &quot;, &quot; + y + &quot;, &quot; + z + &quot;)&quot;;
	}

	@Override
	public boolean equals(Object other) {
		if (other instanceof Position) {
			Position p = (Position) other;
			return x == p.x &amp;&amp; y == p.y &amp;&amp; z == p.z;
		}
		return false;
	}
	
	/**
	 * Gets the direction to second position.
	 * @param position The other position.
	 * @return The direction.
	 */
	public Direction getDirection(Position position) {
		boolean north = (position.getX() &lt; getX());
		boolean south = (position.getX() &gt; getX());
		boolean	west = (position.getY() &lt; getY());
		boolean east = (position.getY() &gt; getY());
		if (north &amp;&amp; east) {
			return Direction.NORTH_EAST;
		} else if (north &amp;&amp; west) {
			return Direction.NORTH_WEST;
		} else if (south &amp;&amp; east) {
			return Direction.SOUTH_EAST;
		} else if (south &amp;&amp; west) {
			return Direction.SOUTH_WEST;
		} else if (north) {
			return Direction.NORTH;
		} else if (east) {
			return Direction.EAST;
		} else if (west) {
			return Direction.WEST;
		} else if (south) {
			return Direction.SOUTH;
		}
		return null;
	}

	/**
	 * Sets this position as the other position. &lt;b&gt;Please use this method
	 * instead of player.setPosition(other)&lt;/b&gt; because of reference conflicts
	 * (if the other position gets modified, so will the players).
	 * @param other The other position.
	 */
	public void setAs(Position other) {
		this.x = other.x;
		this.y = other.y;
		this.z = other.z;
	}

	/**
	 * Moves the position. 
	 * @param amountX The amount of X coordinates.
	 * @param amountY The amount of Y coordinates.
	 */
	public void move(int amountX, int amountY) {
		setX(getX() + amountX);
		setY(getY() + amountY);
	}

	/**
	 * Sets the X coordinate.
	 * @param x The X coordinate.
	 */
	public void setX(int x) {
		this.x = x;
	}

	/**
	 * Gets the X coordinate.
	 * @return The X coordinate.
	 */
	public int getX() {
		return x;
	}

	/**
	 * Sets the Y coordinate.
	 * @param y The Y coordinate.
	 */
	public void setY(int y) {
		this.y = y;
	}

	/**
	 * Gets the Y coordinate.
	 * @return The Y coordinate.
	 */
	public int getY() {
		return y;
	}

	/**
	 * Sets the Z coordinate.
	 * @param z The Z coordinate.
	 */
	public void setZ(int z) {
		this.z = z;
	}

	/**
	 * Gets the Z coordinate.
	 * @return The Z coordinate.
	 */
	public int getZ() {
		return z;
	}

	/**
	 * Gets the X coordinate of the region containing this Position.
	 * @return The region X coordinate
	 */
	public int getRegionX() {
		return (x &gt;&gt; 3) - 6;
	}

	/**
	 * Gets the Y coordinate of the region containing this Position.
	 * @return The region Y coordinate
	 */
	public int getRegionY() {
		return (y &gt;&gt; 3) - 6;
	}

	/**
	 * Gets the local X coordinate relative to the base Position.
	 * @param base The base Position.
	 * @return The local X coordinate.
	 */
	public int getLocalX(Position base) {
		return x - 8 * base.getRegionX();
	}

	/**
	 * Gets the local Y coordinate relative to the base Position.
	 * @param base The base Position.
	 * @return The local Y coordinate.
	 */
	public int getLocalY(Position base) {
		return y - 8 * base.getRegionY();
	}

	/**
	 * Gets the local X coordinate relative to this Position.
	 * @return The local X coordinate.
	 */
	public int getLocalX() {
		return getLocalX(this);
	}

	/**
	 * Gets the local Y coordinate relative to this Position.
	 * @return The local Y coordinate.
	 */
	public int getLocalY() {
		return getLocalY(this);
	}

	/**
	 * Checks if this position is viewable from the other position.
	 * @param other The other position.
	 * @return True if it is viewable, false otherwise.
	 */
	public boolean isViewableFrom(Position other) {
		Position p = Misc.delta(this, other);
		return p.x &lt;= 14 &amp;&amp; p.x &gt;= -15 &amp;&amp; p.y &lt;= 14 &amp;&amp; p.y &gt;= -15;
	}
	
	/**
	 * Creates a new location based on this location.
	 * @param diffX X difference.
	 * @param diffY Y difference.
	 * @param diffZ Z difference.
	 * @return The new location.
	 */
	public Position transform(int diffX, int diffY, int diffZ) {
		return new Position(x + diffX, y + diffY, z + diffZ);
	}

}[/code]

If you do not already have this class (or one similar to it), you should implement it into your server as it cleans up positioning handling so much compared to manual x and y value storing for each position. For example, if you wanted to store an Entity&#39;s position using this class, you would use:
[code=java]private Position position;

public Position getPosition() {
       return position;
}[/code]

Then you would load the Entity&#39;s position upon login (for Players) or upon server start-up (For NPCs, objects etc.).


Finally, the Areas class, where we will store the existing areas that we can access and check:
[code=java]package org.iClarity.rs2.util;

/**
 * Contains areas.
 * @author PrimaDude.
 */
public class Areas {
	
	/**
	 * The Wilderness area.
	 */
	public static final Area WILDERNESS = new Area(new Position(2949, 3521), new Position(3400, 4000));
	
}[/code]

The wilderness area is just an example to use. It has public and static modifiers so we don&#39;t have to waste memory creating a new &#39;Areas&#39; object every time we want to access the areas; this should be obvious.

To check if a position is within this area, we would use, as an example:
[code=java]if (Areas.WILDERNESS.isInArea(player.getPosition())) {
	// Show wilderness levels or whatever action you would take under this condition.
}[/code]

This method would do what position checking would normally do, but simplifies it into one method, shortening the code use every time a position is checked, rather than using that same code every time:
[code=java]        /**
         * Checks if the specified position is within this area.
         * @param position The position.
         * @return True or false.
         */
        public boolean isInArea(Position position) {
                return position.getX() &gt;= getMinimumPosition().getX()
                        &amp;&amp; position.getX() &lt;= getMaximumPosition().getX()
                        &amp;&amp; position.getY() &gt;= getMinimumPosition().getY()
                        &amp;&amp; position.getY() &lt;= getMaximumPosition().getY();
        }[/code]</description>
    
    <lastBuildDate>Mon, 26 Aug 2013 13:01:45 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>[quote=“HcoJustin, post:8, topic:525614”][quote author=matzie link=topic=644354.msg4351082#msg4351082 date=1376648924]</p>
<aside class="quote">
<blockquote>
<p>There’s already built in functions to Java for polygons, and other shapes.</p>
<p><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html" rel="nofollow noopener">http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html</a></p>
<p>You don’t need to reinvent the wheel.</p>
</blockquote>
</aside>
<p>The problem with that is you would probably only use like 3 methods for it? <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> So why create the excess overhead?(If im not mistaken)<br>
[/quote]<br>
What excess overhead? Loading an extra class into memory? Not much difference in overhead from loading your own and the java.awt ones contain a lot of useful methods you might use[/quote]Override the class, even.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/11</link>
        <pubDate>Mon, 26 Aug 2013 13:01:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-11</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@Cyberus Cyberus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cyberus">@Cyberus</a> wrote:</p>
          <blockquote>
              <p>[quote=“Teem_Rocket, post:9, topic:525614”]I’ve got two questions.</p>
<ol>
<li>
<p>Is iClarity based on Shard?</p>
</li>
<li>
<p>Will we be seeing anymore iClarity releases?[/quote]</p>
</li>
</ol>
<p>his newest one is based off of runesource and it has been released</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/10</link>
        <pubDate>Sun, 25 Aug 2013 22:03:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-10</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@Teem_Rocket Teem_Rocket]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/teem_rocket">@Teem_Rocket</a> wrote:</p>
          <blockquote>
              <p>I’ve got two questions.</p>
<ol>
<li>
<p>Is iClarity based on Shard?</p>
</li>
<li>
<p>Will we be seeing anymore iClarity releases?</p>
</li>
</ol>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/9</link>
        <pubDate>Sat, 17 Aug 2013 09:58:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-9</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>[quote=“matzie, post:7, topic:525614”][quote author=Pwnd link=topic=644354.msg4345836#msg4345836 date=1375864960]<br>
There’s already built in functions to Java for polygons, and other shapes.</p>
<p><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html</a></p>
<p>You don’t need to reinvent the wheel.<br>
[/quote]</p>
<p>The problem with that is you would probably only use like 3 methods for it? <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> So why create the excess overhead?(If im not mistaken)[/quote]<br>
What excess overhead? Loading an extra class into memory? Not much difference in overhead from loading your own and the java.awt ones contain a lot of useful methods you might use</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/8</link>
        <pubDate>Sat, 17 Aug 2013 06:40:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-8</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>[quote=“Pwnd, post:5, topic:525614”]There’s already built in functions to Java for polygons, and other shapes.</p>
<p><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html</a></p>
<p>You don’t need to reinvent the wheel.[/quote]</p>
<p>The problem with that is you would probably only use like 3 methods for it? <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> So why create the excess overhead?(If im not mistaken)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/7</link>
        <pubDate>Fri, 16 Aug 2013 10:28:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-7</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>did something similar to this, yours is way better though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/6</link>
        <pubDate>Fri, 09 Aug 2013 19:19:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-6</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>There’s already built in functions to Java for polygons, and other shapes.</p>
<p><a href="http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html" class="onebox" target="_blank" rel="nofollow noopener">http://docs.oracle.com/javase/6/docs/api/java/awt/Polygon.html</a></p>
<p>You don’t need to reinvent the wheel.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/5</link>
        <pubDate>Wed, 07 Aug 2013 08:42:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-5</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>What if your area isnt a rectangle…?</p>
<p>distanceFromPoint(tile) or something along that lines would be nice too O_o’<br>
Like making a safezone. Not all of them are perfect rectangles.</p>
<p>I think a LinkedList or something of locations would be more effective. (Per area)<br>
So then you can have</p>
<p>_Area = new Area(Position(x1,y1),Position(x2,y2));<br>
_Area.append(new Position(x3,y3),Position(x4,y4));</p>
<p>So an area could look like:</p>
<p>[code]<br>
#################</p>
<h1></h1>
<h1>#</h1>
<h1>#         #</h1>
<h1>#         #</h1>
<h1>###########</h1>
<h1></h1>
<h1></h1>
<h1></h1>
<p>##################################[/code]<br>
IF NEED BE <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/4</link>
        <pubDate>Wed, 07 Aug 2013 07:56:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-4</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>Could just as easily use java.awt.Rectangle and save the trouble of rolling your own.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/3</link>
        <pubDate>Sun, 21 Jul 2013 21:44:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-3</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>Good job, I’ll take reference when doing my own area checking</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/2</link>
        <pubDate>Sun, 21 Jul 2013 21:03:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-2</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
      <item>
        <title>Simplified Area Boundary Checking</title>
        <dc:creator><![CDATA[@primadude Primadude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/primadude">@primadude</a> wrote:</p>
          <blockquote>
              <p>This is a short tutorial to simplify your area checking, rather than checking each x and y value manually every time you want to check if an entity is in a specified area.</p>
<p>First of all, the Area class:</p>
<p>[code=java]package org.iClarity.rs2.util;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an area.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class Area {</p>
<p>private Position minimumPosition;<br>
private Position maximumPosition;</p>
<p>/**</p>
<ul>
<li>Gets the minimum position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The minimum position.<br>
*/<br>
public Position getMinimumPosition() {<br>
return minimumPosition;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the maximum position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The maximum position.<br>
*/<br>
public Position getMaximumPosition() {<br>
return maximumPosition;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the minimum random walking position.</li>
<li>
<a class="mention" href="/u/param">@param</a> minimumPosition The minimum position.<br>
*/<br>
public void setMinimumPosition(Position minimumPosition) {<br>
this.minimumPosition = minimumPosition;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the maximum random walking position.</li>
<li>
<a class="mention" href="/u/param">@param</a> maximumPosition The maximum position.<br>
*/<br>
public void setMaximumPosition(Position maximumPosition) {<br>
this.maximumPosition = maximumPosition;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if the specified position is within this area.</li>
<li>
<a class="mention" href="/u/param">@param</a> position The position.</li>
<li>
<a class="mention" href="/u/return">@return</a> True or false.<br>
*/<br>
public boolean isInArea(Position position) {<br>
return position.getX() &gt;= getMinimumPosition().getX()<br>
&amp;&amp; position.getX() &lt;= getMaximumPosition().getX()<br>
&amp;&amp; position.getY() &gt;= getMinimumPosition().getY()<br>
&amp;&amp; position.getY() &lt;= getMaximumPosition().getY();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new area.</li>
<li>
<a class="mention" href="/u/param">@param</a> minimumPosition The minimum position.</li>
<li>
<a class="mention" href="/u/param">@param</a> maximumPosition The maximum position.<br>
*/<br>
public Area(Position minimumPosition, Position maximumPosition) {<br>
this.minimumPosition = minimumPosition;<br>
this.maximumPosition = maximumPosition;<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>This class represents an area that will be constructed. To construct a new area, you would simply use the class’ constructor and assign it’s value to an Area object:</p>
<pre><code class="lang-auto"></code></pre>
<p>The x1, y1 position is the South-West corner of the Area region, and the x2, y2 position is the North-East corner of the Area region. The position constructor ‘new Position(x, y)’ is a better way of storing, changing and checking x and y values for an entity’s position (Or even anything’s position for that matter), rather than manually having an ‘int x’ and ‘int y’ value for each position you want to check.</p>
<p>Here’s the position class:</p>
<p>[code=java]package org.iClarity.rs2.util;</p>
<p>/**</p>
<ul>
<li>
<p>Represents a position.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class Position {</p>
<p>private int x;<br>
private int y;<br>
private int z;</p>
<p>public static enum Direction {<br>
NORTH,<br>
SOUTH,<br>
EAST,<br>
WEST,<br>
NORTH_WEST,<br>
NORTH_EAST,<br>
SOUTH_WEST,<br>
SOUTH_EAST<br>
}</p>
<p>/**</p>
<ul>
<li>Creates a new Position with the specified coordinates. The Z coordinate</li>
<li>is set to 0.</li>
<li>
<a class="mention" href="/u/param">@param</a> x The X coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> y The Y coordinate.<br>
*/<br>
public Position(int x, int y) {<br>
this(x, y, 0);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates a new Position with the specified coordinates.</li>
<li>
<a class="mention" href="/u/param">@param</a> x The X coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> y The Y coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> z The Z coordinate.<br>
*/<br>
public Position(int x, int y, int z) {<br>
this.setX(x);<br>
this.setY(y);<br>
this.setZ(z);<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public String toString() {<br>
return “Position(” + x + ", " + y + ", " + z + “)”;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean equals(Object other) {<br>
if (other instanceof Position) {<br>
Position p = (Position) other;<br>
return x == p.x &amp;&amp; y == p.y &amp;&amp; z == p.z;<br>
}<br>
return false;<br>
}</p>
<p>/**</p>
<ul>
<li>Gets the direction to second position.</li>
<li>
<a class="mention" href="/u/param">@param</a> position The other position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The direction.<br>
*/<br>
public Direction getDirection(Position position) {<br>
boolean north = (position.getX() &lt; getX());<br>
boolean south = (position.getX() &gt; getX());<br>
boolean	west = (position.getY() &lt; getY());<br>
boolean east = (position.getY() &gt; getY());<br>
if (north &amp;&amp; east) {<br>
return Direction.NORTH_EAST;<br>
} else if (north &amp;&amp; west) {<br>
return Direction.NORTH_WEST;<br>
} else if (south &amp;&amp; east) {<br>
return Direction.SOUTH_EAST;<br>
} else if (south &amp;&amp; west) {<br>
return Direction.SOUTH_WEST;<br>
} else if (north) {<br>
return Direction.NORTH;<br>
} else if (east) {<br>
return Direction.EAST;<br>
} else if (west) {<br>
return Direction.WEST;<br>
} else if (south) {<br>
return Direction.SOUTH;<br>
}<br>
return null;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets this position as the other position. <b>Please use this method</b>
</li>
<li>instead of player.setPosition(other) because of reference conflicts</li>
<li>(if the other position gets modified, so will the players).</li>
<li>
<a class="mention" href="/u/param">@param</a> other The other position.<br>
*/<br>
public void setAs(Position other) {<br>
this.x = other.x;<br>
this.y = other.y;<br>
this.z = other.z;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Moves the position.</li>
<li>
<a class="mention" href="/u/param">@param</a> amountX The amount of X coordinates.</li>
<li>
<a class="mention" href="/u/param">@param</a> amountY The amount of Y coordinates.<br>
*/<br>
public void move(int amountX, int amountY) {<br>
setX(getX() + amountX);<br>
setY(getY() + amountY);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the X coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> x The X coordinate.<br>
*/<br>
public void setX(int x) {<br>
this.x = x;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the X coordinate.</li>
<li>
<a class="mention" href="/u/return">@return</a> The X coordinate.<br>
*/<br>
public int getX() {<br>
return x;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the Y coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> y The Y coordinate.<br>
*/<br>
public void setY(int y) {<br>
this.y = y;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the Y coordinate.</li>
<li>
<a class="mention" href="/u/return">@return</a> The Y coordinate.<br>
*/<br>
public int getY() {<br>
return y;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Sets the Z coordinate.</li>
<li>
<a class="mention" href="/u/param">@param</a> z The Z coordinate.<br>
*/<br>
public void setZ(int z) {<br>
this.z = z;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the Z coordinate.</li>
<li>
<a class="mention" href="/u/return">@return</a> The Z coordinate.<br>
*/<br>
public int getZ() {<br>
return z;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the X coordinate of the region containing this Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The region X coordinate<br>
*/<br>
public int getRegionX() {<br>
return (x &gt;&gt; 3) - 6;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the Y coordinate of the region containing this Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The region Y coordinate<br>
*/<br>
public int getRegionY() {<br>
return (y &gt;&gt; 3) - 6;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the local X coordinate relative to the base Position.</li>
<li>
<a class="mention" href="/u/param">@param</a> base The base Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The local X coordinate.<br>
*/<br>
public int getLocalX(Position base) {<br>
return x - 8 * base.getRegionX();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the local Y coordinate relative to the base Position.</li>
<li>
<a class="mention" href="/u/param">@param</a> base The base Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The local Y coordinate.<br>
*/<br>
public int getLocalY(Position base) {<br>
return y - 8 * base.getRegionY();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the local X coordinate relative to this Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The local X coordinate.<br>
*/<br>
public int getLocalX() {<br>
return getLocalX(this);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the local Y coordinate relative to this Position.</li>
<li>
<a class="mention" href="/u/return">@return</a> The local Y coordinate.<br>
*/<br>
public int getLocalY() {<br>
return getLocalY(this);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if this position is viewable from the other position.</li>
<li>
<a class="mention" href="/u/param">@param</a> other The other position.</li>
<li>
<a class="mention" href="/u/return">@return</a> True if it is viewable, false otherwise.<br>
*/<br>
public boolean isViewableFrom(Position other) {<br>
Position p = Misc.delta(this, other);<br>
return p.x &lt;= 14 &amp;&amp; p.x &gt;= -15 &amp;&amp; p.y &lt;= 14 &amp;&amp; p.y &gt;= -15;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates a new location based on this location.</li>
<li>
<a class="mention" href="/u/param">@param</a> diffX X difference.</li>
<li>
<a class="mention" href="/u/param">@param</a> diffY Y difference.</li>
<li>
<a class="mention" href="/u/param">@param</a> diffZ Z difference.</li>
<li>
<a class="mention" href="/u/return">@return</a> The new location.<br>
*/<br>
public Position transform(int diffX, int diffY, int diffZ) {<br>
return new Position(x + diffX, y + diffY, z + diffZ);<br>
}</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>If you do not already have this class (or one similar to it), you should implement it into your server as it cleans up positioning handling so much compared to manual x and y value storing for each position. For example, if you wanted to store an Entity’s position using this class, you would use:</p>
<p>[code=java]private Position position;</p>
<p>public Position getPosition() {<br>
return position;<br>
}[/code]</p>
<p>Then you would load the Entity’s position upon login (for Players) or upon server start-up (For NPCs, objects etc.).</p>
<p>Finally, the Areas class, where we will store the existing areas that we can access and check:</p>
<p>[code=java]package org.iClarity.rs2.util;</p>
<p>/**</p>
<ul>
<li>
<p>Contains areas.</p>
</li>
<li>
<p><span class="mention">@author</span> PrimaDude.<br>
*/<br>
public class Areas {</p>
<p>/**</p>
<ul>
<li>The Wilderness area.<br>
*/<br>
public static final Area WILDERNESS = new Area(new Position(2949, 3521), new Position(3400, 4000));</li>
</ul>
</li>
</ul>
<p>}[/code]</p>
<p>The wilderness area is just an example to use. It has public and static modifiers so we don’t have to waste memory creating a new ‘Areas’ object every time we want to access the areas; this should be obvious.</p>
<p>To check if a position is within this area, we would use, as an example:</p>
<p><code>if (Areas.WILDERNESS.isInArea(player.getPosition())) {
	// Show wilderness levels or whatever action you would take under this condition.
}</code></p>
<p>This method would do what position checking would normally do, but simplifies it into one method, shortening the code use every time a position is checked, rather than using that same code every time:</p>
<p><code>        /**
         * Checks if the specified position is within this area.
         * @param position The position.
         * @return True or false.
         */
        public boolean isInArea(Position position) {
                return position.getX() &gt;= getMinimumPosition().getX()
                        &amp;&amp; position.getX() &lt;= getMaximumPosition().getX()
                        &amp;&amp; position.getY() &gt;= getMinimumPosition().getY()
                        &amp;&amp; position.getY() &lt;= getMaximumPosition().getY();
        }</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614/1</link>
        <pubDate>Sat, 20 Jul 2013 18:43:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525614-1</guid>
        <source url="https://forum.moparisthebest.com/t/simplified-area-boundary-checking/525614.rss">Simplified Area Boundary Checking</source>
      </item>
  </channel>
</rss>
