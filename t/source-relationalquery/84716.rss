<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Source]RelationalQuery</title>
    <link>https://forum.moparisthebest.com/t/source-relationalquery/84716</link>
    <description>RelationalQuery i was bored when i made this :P don&#39;t change the copyrights
[CODE]//This program written by Ndugu
//All generated SQL is compatible with SQL Server 2007 
import java.sql.*;
import java.io.*;
import java.lang.String;
 
public class RelationalQuery {
 
    public static String readLine() {
      return &quot;&quot;;
    }
 
    public static void main(String[] argv)
      throws Exception {
 
      InputStreamReader tempReader = new InputStreamReader(System.in);
      BufferedReader reader = new BufferedReader(tempReader);
 
      //Connection execution
      System.out.println(&quot;Welcome to the Relational Query program!&quot;);
      System.out.print(&quot;Please enter your server: &quot;);
      String sServer = reader.readLine();
      System.out.print(&quot;Please enter your database: &quot;);
      String sDatabase = reader.readLine();
      System.out.print(&quot;Please enter your login username: &quot;);
      String sUsername = reader.readLine();
      System.out.print(&quot;Please enter your password: &quot;);
      String sPassword = reader.readLine();
 
 
      java.lang.Class.forName(&quot;com.microsoft.sqlserver.jdbc.SQLServerDriver&quot;);
 
      Connection connection1 = java.sql.DriverManager.getConnection(&quot;jdbc:sqlserver://&quot; + sServer + &quot;;databaseName = &quot;
                                                       + sDatabase + &quot;;user=&quot; + sUsername + &quot;;password=&quot; + sPassword);
      System.out.println(&quot;You are connected! Yay!\n&quot;);
 
      //Begin loop wherein user is prompted for input
      boolean bContinue = true;
      int iCounter = 0;
      while (bContinue == true) {
        System.out.println(&quot;Please enter the number of the operation that you would like to perform:&quot;);
        System.out.println(&quot;0 = Project&quot;);
        System.out.println(&quot;1 = Restriction&quot;);
        System.out.println(&quot;2 = Union&quot;);
        System.out.println(&quot;3 = Intersection&quot;);
        System.out.println(&quot;4 = Difference&quot;);
        System.out.println(&quot;5 = Times&quot;);
        System.out.println(&quot;6 = Join&quot;);
        System.out.println(&quot;7 = Print&quot;);
        System.out.println(&quot;8 = Delete&quot;);
        System.out.println(&quot;9 = Sum&quot;);
        System.out.println(&quot;10 = Count&quot;);
        System.out.print(&quot;Your choice: &quot;);
        String sSelection = reader.readLine();
 
        String sRelation = &quot;&quot;;
 
        //Project
        if (sSelection.equals(&quot;0&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the &lt;relation&gt; from which the projection is selected:  &quot;);
          String sPRelation = reader.readLine();
          System.out.print(&quot;Enter the desired attributes, comma separated:  &quot;);
          String sAttributes = reader.readLine();
 
          //Execute Project          
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;] AS SELECT &quot; + sAttributes + &quot; FROM [&quot; + sPRelation + &quot;];&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
 
        //Restriction
        } else if (sSelection.equals(&quot;1&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the &lt;relation&gt; from which the restriction is selected:  &quot;);
          String sRRelation = reader.readLine();
          System.out.print(&quot;Enter the restriction condition(s):  &quot;);
          String sCondition = reader.readLine();
 
          //Execute Restriction
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;] AS SELECT * FROM [&quot; + sRRelation + &quot;] WHERE &quot; + sCondition + &quot; ;&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Union
        } else if (sSelection.equals(&quot;2&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the first &lt;relation&gt; in the union:  &quot;);
          String sURelation1 = reader.readLine();
          System.out.print(&quot;Enter the name of the second &lt;relation&gt; in the union:  &quot;);
          String sURelation2 = reader.readLine();
 
          //Execute Union
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;] AS SELECT * FROM [&quot; + sURelation1 + &quot;] UNION SELECT * FROM [&quot; + sURelation2 + &quot;];&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Intersection
        }else if (sSelection.equals(&quot;3&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the first &lt;relation&gt; in the intersection:  &quot;);
          String sIRelation1 = reader.readLine();
          System.out.print(&quot;Enter the name of the second &lt;relation&gt; in the intersection:  &quot;);
          String sIRelation2 = reader.readLine();
 
          //Execute Union
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter +&quot;] AS SELECT * FROM [&quot; + sIRelation1 + &quot;] INTERSECT SELECT * FROM [&quot; + sIRelation2 + &quot;];&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Difference
        } else if (sSelection.equals(&quot;4&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the first &lt;relation&gt; in the difference:  &quot;);
          String sTRelation1 = reader.readLine();
          System.out.print(&quot;Enter the name of the second &lt;relation&gt; in the difference:  &quot;);
          String sTRelation2 = reader.readLine();
 
          //Execute Difference
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;] AS SELECT * FROM [&quot; + sTRelation1 + &quot;] EXCEPT SELECT * FROM [&quot; + sTRelation2 + &quot;];&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Times
        } else if (sSelection.equals(&quot;5&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the first &lt;relation&gt; in the times:  &quot;);
          String sTRelation1 = reader.readLine();
          System.out.print(&quot;Enter the name of the second &lt;relation&gt; in the times:  &quot;);
          String sTRelation2 = reader.readLine();
 
          //Execute Times
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;] AS SELECT * FROM [&quot; + sTRelation1 + &quot;] CROSS JOIN [&quot; + sTRelation2 + &quot;];&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Join
        } else if (sSelection.equals(&quot;6&quot;)) {
          System.out.print(&quot;Enter the name of the resulting &lt;relation&gt;:  &quot;);
          sRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the first &lt;relation&gt; in the join:  &quot;);
          String sJRelation1 = reader.readLine();
          System.out.print(&quot;Enter the name of the second &lt;relation&gt; in the join:  &quot;);
          String sJRelation2 = reader.readLine();
          System.out.print(&quot;Enter the condition(s):  &quot;);
          String sCondition = reader.readLine();
 
          //Execute Join
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;CREATE VIEW [&quot; + sRelation + iCounter + &quot;] AS SELECT * FROM [&quot; + sJRelation1 + &quot;] JOIN [&quot; + sJRelation2 + &quot;] ON &quot; + sCondition + &quot;;&quot;);
          int rs3 = stmt2.executeUpdate(&quot;SELECT * INTO [&quot; + sRelation + &quot;] FROM [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          int rs4 = stmt2.executeUpdate(&quot;DROP VIEW [&quot; + sRelation + &quot;&quot; + iCounter + &quot;];&quot;);
          stmt2.close();
 
        //Print
        } else if (sSelection.equals(&quot;7&quot;)) {
          System.out.print(&quot;Enter the name of the &lt;relation&gt; being printed:  &quot;);
          sRelation = reader.readLine();
 
          //Execute Print
          Statement stmt = connection1.createStatement();              
          ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM [&quot; + sRelation + &quot;];&quot;);
          ResultSetMetaData rsmd = rs.getMetaData();
          int numberOfColumns = rsmd.getColumnCount();
 
          for (int i = 1; i &lt;= numberOfColumns; i++) {
            if (i &gt; 1) System.out.print(&quot;\t\t&quot;);
            String columnName = rsmd.getColumnName(i);
            System.out.print(columnName);
          }
          System.out.println(&quot;&quot;);
 
          while (rs.next()) {
            for (int i = 1; i &lt;= numberOfColumns; i++) {
              if (i &gt; 1) System.out.print(&quot;\t&quot;);
              String columnValue = rs.getString(i);
              System.out.print(columnValue);
            }
            System.out.println(&quot;&quot;);  
        }
 
        stmt.close();
 
 
 
        //Delete
        } else if (sSelection.equals(&quot;8&quot;)) {
          System.out.print(&quot;Enter the name of the &lt;relation&gt; being deleted:  &quot;);
          sRelation = reader.readLine();
 
          Statement stmt2 = connection1.createStatement();              
          int rs2 = stmt2.executeUpdate(&quot;DROP TABLE &quot; + sRelation + &quot;;&quot;);
          stmt2.close();
          System.out.println(sRelation + &quot; has been deleted.&quot;);
 
 
        //Sum
        } else if (sSelection.equals(&quot;9&quot;)) {
          System.out.print(&quot;Enter the name of the &lt;relation&gt; being summed:  &quot;);
          String sSRelation = reader.readLine();
          System.out.print(&quot;Enter the name of the attribute being summed:  &quot;);
          String sSAttribute = reader.readLine();
 
          //Execute Sum
          Statement stmt = connection1.createStatement();              
          ResultSet rs = stmt.executeQuery(&quot;SELECT SUM(&quot; + sSAttribute + &quot;) FROM &quot; + sSRelation + &quot;;&quot;);
          ResultSetMetaData rsmd = rs.getMetaData();
          int numberOfColumns = rsmd.getColumnCount();
 
          for (int i = 1; i &lt;= numberOfColumns; i++) {
            if (i &gt; 1) System.out.print(&quot;\t\t&quot;);
            String columnName = rsmd.getColumnName(i);
            System.out.print(columnName);
          }
          System.out.println(&quot;&quot;);
 
          while (rs.next()) {
            for (int i = 1; i &lt;= numberOfColumns; i++) {
              if (i &gt; 1) System.out.print(&quot;\t&quot;);
              String columnValue = rs.getString(i);
              System.out.print(columnValue);
            }
            System.out.println(&quot;&quot;);  
        }
 
        stmt.close();
 
 
        //Count
        } else if (sSelection.equals(&quot;10&quot;)) {
          System.out.print(&quot;Enter the name of the &lt;relation&gt; being counted:  &quot;);
          sRelation = reader.readLine();
 
          //Execute Count
          Statement stmt = connection1.createStatement();              
          ResultSet rs = stmt.executeQuery(&quot;SELECT COUNT(*) FROM &quot; + sRelation + &quot;;&quot;);
          ResultSetMetaData rsmd = rs.getMetaData();
          int numberOfColumns = rsmd.getColumnCount();
 
          for (int i = 1; i &lt;= numberOfColumns; i++) {
            if (i &gt; 1) System.out.print(&quot;\t\t&quot;);
            String columnName = rsmd.getColumnName(i);
            System.out.print(columnName);
          }
          System.out.println(&quot;&quot;);
 
          while (rs.next()) {
            for (int i = 1; i &lt;= numberOfColumns; i++) {
              if (i &gt; 1) System.out.print(&quot;\t&quot;);
              String columnValue = rs.getString(i);
              System.out.print(columnValue);
            }
            System.out.println(&quot;&quot;);  
        }
 
        stmt.close();
        } else {
          System.out.println(&quot;Invalid input!&quot;);
        }
 
        //Prompt user for new input
        Boolean validInput = false;
        while (validInput == false) {
          System.out.print(&quot;Do you wish to generate another query?  YES/NO  &quot;);
          String sContinue = reader.readLine();
          sContinue = sContinue.toUpperCase();
          if (sContinue.equals(&quot;NO&quot;)) {
            System.out.println(&quot;Goodbye!&quot;);
            bContinue = false;
            validInput = true;
          } else if (sContinue.equals(&quot;YES&quot;)) {
            bContinue = true;
            validInput = true;
            iCounter++;
            System.out.println(&quot;&quot;);
          } else {
            System.out.println(&quot;You must enter either &#39;YES&#39; or &#39;NO&#39;&quot;);
          }
        }
      }
      connection1.close();
    }
}
[/CODE][br][size=1]Posted on: April 25, 2007, 01:27:56 AM[/size][hr]lol 20 views and no comments, leechers! -.-</description>
    
    <lastBuildDate>Tue, 29 May 2007 02:45:37 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Source]RelationalQuery</title>
        <dc:creator><![CDATA[@Fasga Fasga]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fasga">@Fasga</a> wrote:</p>
          <blockquote>
              <p>Please, oh please – don’t tell me that entire thing is in the main method…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-relationalquery/84716/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-relationalquery/84716/5</link>
        <pubDate>Tue, 29 May 2007 02:45:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-84716-5</guid>
        <source url="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss">[Source]RelationalQuery</source>
      </item>
      <item>
        <title>[Source]RelationalQuery</title>
        <dc:creator><![CDATA[@JV1 JV]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jv1">@JV1</a> wrote:</p>
          <blockquote>
              <p>Ahah, Nice. Pm me please. &gt;_&lt;</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-relationalquery/84716/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-relationalquery/84716/4</link>
        <pubDate>Mon, 28 May 2007 16:37:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-84716-4</guid>
        <source url="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss">[Source]RelationalQuery</source>
      </item>
      <item>
        <title>[Source]RelationalQuery</title>
        <dc:creator><![CDATA[@ndugu ndugu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ndugu">@ndugu</a> wrote:</p>
          <blockquote>
              <p>lol<br>
[center]<img src="http://www.moparisthebest.org/smf/Themes/default/images/warnmute.gif" alt width="" height=""> Nice spam[/center]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-relationalquery/84716/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-relationalquery/84716/3</link>
        <pubDate>Sun, 27 May 2007 18:50:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-84716-3</guid>
        <source url="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss">[Source]RelationalQuery</source>
      </item>
      <item>
        <title>[Source]RelationalQuery</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="1" data-topic="84873">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/lawl/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"><a href="https://forum.moparisthebest.com/t/84873/1">On another topic</a>
</div>
<blockquote>
<p>perhaps everyone expects something useful, then leaves because its ugly</p>
</blockquote>
</aside>
<p>Agreed.</p>
<p>Instead of string comparison (nasty-ish) for menu choices, try learning about “Integer.parseInt(String s, int radix)” and using a lookup switch.</p>
<p>PS. Throws exception in a programs entry point, way to be awful.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-relationalquery/84716/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-relationalquery/84716/2</link>
        <pubDate>Thu, 26 Apr 2007 01:45:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-84716-2</guid>
        <source url="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss">[Source]RelationalQuery</source>
      </item>
      <item>
        <title>[Source]RelationalQuery</title>
        <dc:creator><![CDATA[@ndugu ndugu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ndugu">@ndugu</a> wrote:</p>
          <blockquote>
              <p>RelationalQuery i was bored when i made this <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> don’t change the copyrights</p>
<p>[CODE]//This program written by Ndugu<br>
//All generated SQL is compatible with SQL Server 2007<br>
import java.sql.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import java.lang.String;</p>
<p>public class RelationalQuery {</p>
<pre><code>public static String readLine() {
  return "";
}

public static void main(String[] argv)
  throws Exception {

  InputStreamReader tempReader = new InputStreamReader(System.in);
  BufferedReader reader = new BufferedReader(tempReader);

  //Connection execution
  System.out.println("Welcome to the Relational Query program!");
  System.out.print("Please enter your server: ");
  String sServer = reader.readLine();
  System.out.print("Please enter your database: ");
  String sDatabase = reader.readLine();
  System.out.print("Please enter your login username: ");
  String sUsername = reader.readLine();
  System.out.print("Please enter your password: ");
  String sPassword = reader.readLine();


  java.lang.Class.forName("com.microsoft.sqlserver.jdbc.SQLServerDriver");

  Connection connection1 = java.sql.DriverManager.getConnection("jdbc:sqlserver://" + sServer + ";databaseName = "
                                                   + sDatabase + ";user=" + sUsername + ";password=" + sPassword);
  System.out.println("You are connected! Yay!\n");

  //Begin loop wherein user is prompted for input
  boolean bContinue = true;
  int iCounter = 0;
  while (bContinue == true) {
    System.out.println("Please enter the number of the operation that you would like to perform:");
    System.out.println("0 = Project");
    System.out.println("1 = Restriction");
    System.out.println("2 = Union");
    System.out.println("3 = Intersection");
    System.out.println("4 = Difference");
    System.out.println("5 = Times");
    System.out.println("6 = Join");
    System.out.println("7 = Print");
    System.out.println("8 = Delete");
    System.out.println("9 = Sum");
    System.out.println("10 = Count");
    System.out.print("Your choice: ");
    String sSelection = reader.readLine();

    String sRelation = "";

    //Project
    if (sSelection.equals("0")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the &lt;relation&gt; from which the projection is selected:  ");
      String sPRelation = reader.readLine();
      System.out.print("Enter the desired attributes, comma separated:  ");
      String sAttributes = reader.readLine();

      //Execute Project          
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter + "] AS SELECT " + sAttributes + " FROM [" + sPRelation + "];");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();


    //Restriction
    } else if (sSelection.equals("1")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the &lt;relation&gt; from which the restriction is selected:  ");
      String sRRelation = reader.readLine();
      System.out.print("Enter the restriction condition(s):  ");
      String sCondition = reader.readLine();

      //Execute Restriction
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter + "] AS SELECT * FROM [" + sRRelation + "] WHERE " + sCondition + " ;");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Union
    } else if (sSelection.equals("2")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the first &lt;relation&gt; in the union:  ");
      String sURelation1 = reader.readLine();
      System.out.print("Enter the name of the second &lt;relation&gt; in the union:  ");
      String sURelation2 = reader.readLine();

      //Execute Union
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter + "] AS SELECT * FROM [" + sURelation1 + "] UNION SELECT * FROM [" + sURelation2 + "];");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Intersection
    }else if (sSelection.equals("3")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the first &lt;relation&gt; in the intersection:  ");
      String sIRelation1 = reader.readLine();
      System.out.print("Enter the name of the second &lt;relation&gt; in the intersection:  ");
      String sIRelation2 = reader.readLine();

      //Execute Union
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter +"] AS SELECT * FROM [" + sIRelation1 + "] INTERSECT SELECT * FROM [" + sIRelation2 + "];");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Difference
    } else if (sSelection.equals("4")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the first &lt;relation&gt; in the difference:  ");
      String sTRelation1 = reader.readLine();
      System.out.print("Enter the name of the second &lt;relation&gt; in the difference:  ");
      String sTRelation2 = reader.readLine();

      //Execute Difference
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter + "] AS SELECT * FROM [" + sTRelation1 + "] EXCEPT SELECT * FROM [" + sTRelation2 + "];");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Times
    } else if (sSelection.equals("5")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the first &lt;relation&gt; in the times:  ");
      String sTRelation1 = reader.readLine();
      System.out.print("Enter the name of the second &lt;relation&gt; in the times:  ");
      String sTRelation2 = reader.readLine();

      //Execute Times
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + "" + iCounter + "] AS SELECT * FROM [" + sTRelation1 + "] CROSS JOIN [" + sTRelation2 + "];");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Join
    } else if (sSelection.equals("6")) {
      System.out.print("Enter the name of the resulting &lt;relation&gt;:  ");
      sRelation = reader.readLine();
      System.out.print("Enter the name of the first &lt;relation&gt; in the join:  ");
      String sJRelation1 = reader.readLine();
      System.out.print("Enter the name of the second &lt;relation&gt; in the join:  ");
      String sJRelation2 = reader.readLine();
      System.out.print("Enter the condition(s):  ");
      String sCondition = reader.readLine();

      //Execute Join
      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("CREATE VIEW [" + sRelation + iCounter + "] AS SELECT * FROM [" + sJRelation1 + "] JOIN [" + sJRelation2 + "] ON " + sCondition + ";");
      int rs3 = stmt2.executeUpdate("SELECT * INTO [" + sRelation + "] FROM [" + sRelation + "" + iCounter + "];");
      int rs4 = stmt2.executeUpdate("DROP VIEW [" + sRelation + "" + iCounter + "];");
      stmt2.close();

    //Print
    } else if (sSelection.equals("7")) {
      System.out.print("Enter the name of the &lt;relation&gt; being printed:  ");
      sRelation = reader.readLine();

      //Execute Print
      Statement stmt = connection1.createStatement();              
      ResultSet rs = stmt.executeQuery("SELECT * FROM [" + sRelation + "];");
      ResultSetMetaData rsmd = rs.getMetaData();
      int numberOfColumns = rsmd.getColumnCount();

      for (int i = 1; i &lt;= numberOfColumns; i++) {
        if (i &gt; 1) System.out.print("\t\t");
        String columnName = rsmd.getColumnName(i);
        System.out.print(columnName);
      }
      System.out.println("");

      while (rs.next()) {
        for (int i = 1; i &lt;= numberOfColumns; i++) {
          if (i &gt; 1) System.out.print("\t");
          String columnValue = rs.getString(i);
          System.out.print(columnValue);
        }
        System.out.println("");  
    }

    stmt.close();



    //Delete
    } else if (sSelection.equals("8")) {
      System.out.print("Enter the name of the &lt;relation&gt; being deleted:  ");
      sRelation = reader.readLine();

      Statement stmt2 = connection1.createStatement();              
      int rs2 = stmt2.executeUpdate("DROP TABLE " + sRelation + ";");
      stmt2.close();
      System.out.println(sRelation + " has been deleted.");


    //Sum
    } else if (sSelection.equals("9")) {
      System.out.print("Enter the name of the &lt;relation&gt; being summed:  ");
      String sSRelation = reader.readLine();
      System.out.print("Enter the name of the attribute being summed:  ");
      String sSAttribute = reader.readLine();

      //Execute Sum
      Statement stmt = connection1.createStatement();              
      ResultSet rs = stmt.executeQuery("SELECT SUM(" + sSAttribute + ") FROM " + sSRelation + ";");
      ResultSetMetaData rsmd = rs.getMetaData();
      int numberOfColumns = rsmd.getColumnCount();

      for (int i = 1; i &lt;= numberOfColumns; i++) {
        if (i &gt; 1) System.out.print("\t\t");
        String columnName = rsmd.getColumnName(i);
        System.out.print(columnName);
      }
      System.out.println("");

      while (rs.next()) {
        for (int i = 1; i &lt;= numberOfColumns; i++) {
          if (i &gt; 1) System.out.print("\t");
          String columnValue = rs.getString(i);
          System.out.print(columnValue);
        }
        System.out.println("");  
    }

    stmt.close();


    //Count
    } else if (sSelection.equals("10")) {
      System.out.print("Enter the name of the &lt;relation&gt; being counted:  ");
      sRelation = reader.readLine();

      //Execute Count
      Statement stmt = connection1.createStatement();              
      ResultSet rs = stmt.executeQuery("SELECT COUNT(*) FROM " + sRelation + ";");
      ResultSetMetaData rsmd = rs.getMetaData();
      int numberOfColumns = rsmd.getColumnCount();

      for (int i = 1; i &lt;= numberOfColumns; i++) {
        if (i &gt; 1) System.out.print("\t\t");
        String columnName = rsmd.getColumnName(i);
        System.out.print(columnName);
      }
      System.out.println("");

      while (rs.next()) {
        for (int i = 1; i &lt;= numberOfColumns; i++) {
          if (i &gt; 1) System.out.print("\t");
          String columnValue = rs.getString(i);
          System.out.print(columnValue);
        }
        System.out.println("");  
    }

    stmt.close();
    } else {
      System.out.println("Invalid input!");
    }

    //Prompt user for new input
    Boolean validInput = false;
    while (validInput == false) {
      System.out.print("Do you wish to generate another query?  YES/NO  ");
      String sContinue = reader.readLine();
      sContinue = sContinue.toUpperCase();
      if (sContinue.equals("NO")) {
        System.out.println("Goodbye!");
        bContinue = false;
        validInput = true;
      } else if (sContinue.equals("YES")) {
        bContinue = true;
        validInput = true;
        iCounter++;
        System.out.println("");
      } else {
        System.out.println("You must enter either 'YES' or 'NO'");
      }
    }
  }
  connection1.close();
}
</code></pre>
<p>}<br>
[/CODE][br][size=1]Posted on: April 25, 2007, 01:27:56 AM[/size][hr]lol 20 views and no comments, leechers! -.-</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/source-relationalquery/84716/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/source-relationalquery/84716/1</link>
        <pubDate>Wed, 25 Apr 2007 17:24:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-84716-1</guid>
        <source url="https://forum.moparisthebest.com/t/source-relationalquery/84716.rss">[Source]RelationalQuery</source>
      </item>
  </channel>
</rss>
