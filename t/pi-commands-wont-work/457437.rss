<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PI:Commands Wont Work?</title>
    <link>https://forum.moparisthebest.com/t/pi-commands-wont-work/457437</link>
    <description>Hey i was messing around and adding some new commands today and there were no errors when i compile but when i tried out my commands they don&#39;t work. some of them do and some of them don&#39;t. like even ::bank or ::yell doesn&#39;t work its weird because i haven&#39;t touched them and they worked before so i don&#39;t know whats wrong. If you see anything that&#39;s out of the ordinary please tell me. The new commands i put in were ::checkbank ::god and that&#39;s it

Any help would be nice.

Here is my commands.java file

package server.model.players.packets;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PacketType;
import server.model.players.PlayerHandler;
import server.util.Misc;
import server.world.WorldMap;
import java.io.*;


/**
 * Commands
 **/
public class Commands implements PacketType {

	
	@Override
	public void processPacket(Client c, int packetType, int packetSize) {
	String playerCommand = c.getInStream().readString();
	if(Config.SERVER_DEBUG)
		Misc.println(c.playerName+&quot; playerCommand: &quot;+playerCommand);
		if (playerCommand.startsWith(&quot;/&quot;) &amp;&amp; playerCommand.length() &gt; 1) {
			if (c.clanId &gt;= 0) {
				System.out.println(playerCommand);
				playerCommand = playerCommand.substring(1);
				Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
			} else {
					String rank = &quot;&quot;;
                    String Message = playerCommand.substring(1);
                if (c.playerRights &gt;= 0) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ Misc.ucFirst(c.playerName) +&quot;]: &quot;;
                }
                if (c.playerRights &gt;= 4) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                }        
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j]; 
						c2.sendMessage(rank+Message);
			}
			}
            }
			}
			return;
}


		if (playerCommand.startsWith(&quot;checkbank&quot;) &amp;&amp; c.playerRights &gt;=3) {
String[] args = playerCommand.split(&quot; &quot;);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
Client o = (Client) Server.playerHandler.players[i];
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(args[1])) {
c.getPA().otherBank(c, o);
break;
}
}
}
}

if (playerCommand.equalsIgnoreCase(&quot;bank&quot;)) {
				c.getPA().openUpBank();
			}

			if (playerCommand.startsWith(&quot;god&quot;) &amp;&amp; c.playerRights &gt;= 3) {
                        if (c.playerStandIndex != 1501) {
                                c.startAnimation(1500);
                                c.playerStandIndex = 1501;
                                c.playerTurnIndex = 1851;
                                c.playerWalkIndex = 1851;
                                c.playerTurn180Index = 1851;
                                c.playerTurn90CWIndex = 1501;
                                c.playerTurn90CCWIndex = 1501;
                                c.playerRunIndex = 1851;
                                c.updateRequired = true;
                                c.appearanceUpdateRequired = true;
                                c.sendMessage(&quot;You turn God mode on.&quot;);
                        } else {
                                c.playerStandIndex = 0x328;
                                c.playerTurnIndex = 0x337;
                                c.playerWalkIndex = 0x333;
                                c.playerTurn180Index = 0x334;
                                c.playerTurn90CWIndex = 0x335;
                                c.playerTurn90CCWIndex = 0x336;
                                c.playerRunIndex = 0x338;
                                c.updateRequired = true;
                                c.appearanceUpdateRequired = true;
                                c.sendMessage(&quot;Godmode has been diactivated.&quot;);
                        }
                

			



			if (playerCommand.startsWith(&quot;master&quot;) &amp;&amp; c.puremaster == 0) {
				int i = 0;
				c.getPA().addSkillXP((15000000), 0);		
				c.getPA().addSkillXP((15000000), 1);
				c.getPA().addSkillXP((15000000), 2);
				c.getPA().addSkillXP((15000000), 3);
				c.getPA().addSkillXP((15000000), 4);
				c.getPA().addSkillXP((15000000), 5);
				c.getPA().addSkillXP((15000000), 6);
				c.getPA().addSkillXP((15000000), 7);
				c.getPA().addSkillXP((15000000), 8);
				c.getPA().addSkillXP((15000000), 9);
				c.getPA().addSkillXP((15000000), 10);
				c.getPA().addSkillXP((15000000), 11);
				c.getPA().addSkillXP((15000000), 12);
				c.getPA().addSkillXP((15000000), 13);
				c.getPA().addSkillXP((15000000), 14);
				c.getPA().addSkillXP((15000000), 15);
				c.getPA().addSkillXP((15000000), 16);
				c.getPA().addSkillXP((15000000), 17);
				c.getPA().addSkillXP((15000000), 18);
				c.getPA().addSkillXP((15000000), 19);
				c.getPA().addSkillXP((15000000), 20);
				c.getPA().addSkillXP((15000000), 21);
				c.getPA().addSkillXP((15000000), 22);
				c.playerXP[3] = c.getPA().getXPForLevel(99)+5;
				c.playerLevel[3] = c.getPA().getLevelForXP(c.playerXP[3]);
				c.getPA().refreshSkill(3);
				c.puremaster = 1;
			}


if (playerCommand.equals(&quot;alltome&quot;)) {
				if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1 || c.playerRights == 2){
		return;
		}
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
			c2.teleportToX = c.absX;
                        c2.teleportToY = c.absY;
                        c2.heightLevel = c.heightLevel;
				c2.sendMessage(&quot;Mass teleport to: &quot; + c.playerName + &quot;&quot;);
					}
				}
			}
//if (playerCommand.equalsIgnoreCase(&quot;lock&quot;)) {
   // c.expLock = true;
   // c.sendMessage(&quot;You will @red@not@bla@ gain any experience.&quot;);
//}
//if (playerCommand.equalsIgnoreCase(&quot;unlock&quot;)) {
  //  c.expLock = false;
  //  c.sendMessage(&quot;You @gre@will@bla@ gain experience.&quot;);
//}
            if (playerCommand.startsWith(&quot;yell&quot;)) {
                    String rank = &quot;&quot;;
                    String Message = playerCommand.substring(4).toLowerCase();
                if (c.playerRights &gt;= 0) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ c.playerName +&quot;] : &quot;;
                }
                if (c.playerRights &gt;= 4) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                }        
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j]; 
						c2.sendMessage(rank+Message);
		   }
		}
            }

		}
		if(c.playerRights &gt;= 0) {
			
			if (playerCommand.equalsIgnoreCase(&quot;players&quot;)) {
				c.sendMessage(&quot;There are currently &quot;+PlayerHandler.getPlayerCount()+ &quot; players online.&quot;);
			}
			if (playerCommand.equalsIgnoreCase(&quot;commands&quot;)) {
				c.sendMessage(&quot;Your current commands - ::players, ::changepassword - More coming soon.&quot;);
			}
			if (playerCommand.startsWith(&quot;changepassword&quot;) &amp;&amp; playerCommand.length() &gt; 15) {
				c.playerPass = playerCommand.substring(15);
				c.sendMessage(&quot;Your password is now: &quot; + c.playerPass);			
			}	
			
			if (playerCommand.startsWith(&quot;setlevel&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (c.inWild())
					return;
				for (int j = 0; j &lt; c.playerEquipment.length; j++) {
					if (c.playerEquipment[j] &gt; 0) {
						c.sendMessage(&quot;Take off your shit idiot..&quot;);
						return;
					}
				}
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99)
					level = 99;
				else if (level &lt; 0)
					level = 1;
				c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
				} catch (Exception e){}
			}
			if (playerCommand.equals(&quot;spec&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (!c.inWild())
					c.specAmount = 10.0;
			}
			if (playerCommand.startsWith(&quot;object&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);				
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
			}
			if (playerCommand.equals(&quot;train&quot;)) {
				c.getPA().movePlayer(1861, 5340, 0);			
			}
			if (playerCommand.equals(&quot;runite&quot;)) {
				c.getPA().movePlayer(3060, 3876, 0);			
			}
			if (playerCommand.equals(&quot;edge&quot;)) {
				c.getPA().movePlayer(3088, 3497, 0);			
			}
			if (playerCommand.equals(&quot;armadyl&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 4);			
			}
			if (playerCommand.equals(&quot;saradomin&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 8);			
			}
			if (playerCommand.equals(&quot;bandos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 12);			
			}
			
			if (playerCommand.startsWith(&quot;tele&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] arg = playerCommand.split(&quot; &quot;);
				if (arg.length &gt; 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
				else if (arg.length == 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
			}
			
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.sendMessage(&quot;X: &quot;+c.absX);
				c.sendMessage(&quot;Y: &quot;+c.absY);
			}		
			if(c.playerRights &gt;= 3) {
			
			}
			if (playerCommand.startsWith(&quot;task&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.taskAmount = -1;
				c.slayerTask = 0;
			}
			
			if (playerCommand.startsWith(&quot;starter&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getDH().sendDialogues(100, 945);			
			}
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.sendMessage(&quot;X: &quot;+c.absX);
				c.sendMessage(&quot;Y: &quot;+c.absY);
			}
			if (playerCommand.startsWith(&quot;reloaddrops&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.npcDrops = null;
				Server.npcDrops = new server.model.npcs.NPCDrops();
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(&quot;[&quot; + c.playerName + &quot;] &quot; + &quot;NPC Drops have been reloaded.&quot;);
					}
				}

			}
			if (playerCommand.startsWith(&quot;reloadshops&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.shopHandler = new server.world.ShopHandler();
			}
			if (playerCommand.startsWith(&quot;fakels&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				int item = Integer.parseInt(playerCommand.split(&quot; &quot;)[1]);
				Server.clanChat.handleLootShare(c, item, 1);
			}
			
			if (playerCommand.startsWith(&quot;interface&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().showInterface(Integer.parseInt(args[1]));
			}
			if (playerCommand.startsWith(&quot;gfx&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
			}
			if (playerCommand.startsWith(&quot;update&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				PlayerHandler.updateSeconds = a;
				PlayerHandler.updateAnnounced = false;
				PlayerHandler.updateRunning = true;
				PlayerHandler.updateStartTime = System.currentTimeMillis();
			}
			
			if (playerCommand.startsWith(&quot;item&quot;) &amp;&amp; c.playerRights &gt;= 2) {
				try {
					String[] args = playerCommand.split(&quot; &quot;);
					if (args.length == 3) {
						int newItemID = Integer.parseInt(args[1]);
						int newItemAmount = Integer.parseInt(args[2]);
						if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
							c.getItems().addItem(newItemID, newItemAmount);		
						} else {
							c.sendMessage(&quot;No such item.&quot;);
						}
					} else {
						c.sendMessage(&quot;Use as ::pickup 995 200&quot;);
					}
				} catch(Exception e) {
					
				}
			}
			
			if (playerCommand.equals(&quot;Vote&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.getPA().sendFrame126(&quot;www.google.ca&quot;, 12000);
					}
			}


			if (playerCommand.equalsIgnoreCase(&quot;debug&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.playerExecuted = true;
			}
			
			if (playerCommand.startsWith(&quot;interface&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				try {	
					String[] args = playerCommand.split(&quot; &quot;);
					int a = Integer.parseInt(args[1]);
					c.getPA().showInterface(a);
				} catch(Exception e) {
					c.sendMessage(&quot;::interface ####&quot;); 
				}
			}
			
			if(playerCommand.startsWith(&quot;www&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().sendFrame126(playerCommand,0);			
			}
			
			
			if (playerCommand.startsWith(&quot;xteleto&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				String name = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
							c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
						}
					}
				}			
			}
			

			
			if(playerCommand.startsWith(&quot;npc&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				try {
					int newNPC = Integer.parseInt(playerCommand.substring(4));
					if(newNPC &gt; 0) {
						Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
						c.sendMessage(&quot;You spawn a Npc.&quot;);
					} else {
						c.sendMessage(&quot;No such NPC.&quot;);
					}
				} catch(Exception e) {
					
				}			
			}
			
			
			if (playerCommand.startsWith(&quot;ipban&quot;) &amp;&amp; c.playerRights &gt;= 2) { // use as ::ipban name
				try {
					String playerToBan = playerCommand.substring(6);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
								Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP banned the user: &quot;+Server.playerHandler.players[i].playerName+&quot; with the host: &quot;+Server.playerHandler.players[i].connectedFrom);
								Server.playerHandler.players[i].disconnected = true;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;ban&quot;) &amp;&amp; playerCommand.charAt(3) == &#39; &#39;) { // use as ::ban name
				try {	
					String playerToBan = playerCommand.substring(4);
					Connection.addNameToBanList(playerToBan);
					Connection.addNameToFile(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			
			if (playerCommand.startsWith(&quot;unban&quot;) &amp;&amp; c.playerRights &gt;= 2) {
				try {	
					String playerToBan = playerCommand.substring(6);
					Connection.removeNameFromBanList(playerToBan);
					c.sendMessage(playerToBan + &quot; has been unbanned.&quot;);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			if (playerCommand.startsWith(&quot;anim&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.startAnimation(Integer.parseInt(args[1]));
				c.getPA().requestUpdates();
			}
			
			if (playerCommand.startsWith(&quot;mute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {	
					String playerToBan = playerCommand.substring(5);
					Connection.addNameToMuteList(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			if (playerCommand.startsWith(&quot;ipmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {	
					String playerToBan = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			if (playerCommand.startsWith(&quot;unipmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {	
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								break;
							} 
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}
			if (playerCommand.startsWith(&quot;unmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {	
					String playerToBan = playerCommand.substring(7);
					Connection.unMuteUser(playerToBan);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}			
			}

		}
	}

}
}</description>
    
    <lastBuildDate>Fri, 31 Aug 2012 16:00:18 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-commands-wont-work/457437.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PI:Commands Wont Work?</title>
        <dc:creator><![CDATA[@kleber883 kleber883]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kleber883">@kleber883</a> wrote:</p>
          <blockquote>
              <p>Hi, Olapse. Firstly, put your commands in a code box like this next time:</p>
<pre><code class="lang-auto"></code></pre>
<p>Everything under this section is for Owner only:</p>
<p>[code]     if(c.playerRights &gt;= 3) {</p>
<pre><code>     }
     if (playerCommand.startsWith("task") &amp;&amp; c.playerRights &gt;= 3) {
        c.taskAmount = -1;
        c.slayerTask = 0;
     }
     
     if (playerCommand.startsWith("starter") &amp;&amp; c.playerRights &gt;= 3) {
        c.getDH().sendDialogues(100, 945);         
     }
     if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
        c.sendMessage("X: "+c.absX);
        c.sendMessage("Y: "+c.absY);
     }
     if (playerCommand.startsWith("reloaddrops") &amp;&amp; c.playerRights &gt;= 3) {
        Server.npcDrops = null;
        Server.npcDrops = new server.model.npcs.NPCDrops();
        for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
           if (Server.playerHandler.players[j] != null) {
              Client c2 = (Client)Server.playerHandler.players[j];
              c2.sendMessage("[" + c.playerName + "] " + "NPC Drops have been reloaded.");
           }
        }

     }
     if (playerCommand.startsWith("reloadshops") &amp;&amp; c.playerRights &gt;= 3) {
        Server.shopHandler = new server.world.ShopHandler();
     }
     if (playerCommand.startsWith("fakels") &amp;&amp; c.playerRights &gt;= 3) {
        int item = Integer.parseInt(playerCommand.split(" ")[1]);
        Server.clanChat.handleLootShare(c, item, 1);
     }
     
     if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
        String[] args = playerCommand.split(" ");
        c.getPA().showInterface(Integer.parseInt(args[1]));
     }
     if (playerCommand.startsWith("gfx") &amp;&amp; c.playerRights &gt;= 3) {
        String[] args = playerCommand.split(" ");
        c.gfx0(Integer.parseInt(args[1]));
     }
     if (playerCommand.startsWith("update") &amp;&amp; c.playerRights &gt;= 3) {
        String[] args = playerCommand.split(" ");
        int a = Integer.parseInt(args[1]);
        PlayerHandler.updateSeconds = a;
        PlayerHandler.updateAnnounced = false;
        PlayerHandler.updateRunning = true;
        PlayerHandler.updateStartTime = System.currentTimeMillis();
     }
     
     if (playerCommand.startsWith("item") &amp;&amp; c.playerRights &gt;= 2) {
        try {
           String[] args = playerCommand.split(" ");
           if (args.length == 3) {
              int newItemID = Integer.parseInt(args[1]);
              int newItemAmount = Integer.parseInt(args[2]);
              if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
                 c.getItems().addItem(newItemID, newItemAmount);      
              } else {
                 c.sendMessage("No such item.");
              }
           } else {
              c.sendMessage("Use as ::pickup 995 200");
           }
        } catch(Exception e) {
           
        }
     }
     
     if (playerCommand.equals("Vote") &amp;&amp; c.playerRights &gt;= 3) {
        for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
           if (Server.playerHandler.players[j] != null) {
              Client c2 = (Client)Server.playerHandler.players[j];
              c2.getPA().sendFrame126("www.google.ca", 12000);
           }
     }


     if (playerCommand.equalsIgnoreCase("debug") &amp;&amp; c.playerRights &gt;= 3) {
        Server.playerExecuted = true;
     }
     
     if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
        try {   
           String[] args = playerCommand.split(" ");
           int a = Integer.parseInt(args[1]);
           c.getPA().showInterface(a);
        } catch(Exception e) {
           c.sendMessage("::interface ####");
        }
     }
     
     if(playerCommand.startsWith("www") &amp;&amp; c.playerRights &gt;= 3) {
        c.getPA().sendFrame126(playerCommand,0);         
     }
     
     
     if (playerCommand.startsWith("xteleto") &amp;&amp; c.playerRights &gt;= 1) {
        String name = playerCommand.substring(8);
        for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
           if (Server.playerHandler.players != null) {
              if (Server.playerHandler.players.playerName.equalsIgnoreCase(name)) {
                 c.getPA().movePlayer(Server.playerHandler.players.getX(), Server.playerHandler.players.getY(), Server.playerHandler.players.heightLevel);
              }
           }
        }         
     }
     

     
     if(playerCommand.startsWith("npc") &amp;&amp; c.playerRights &gt;= 3) {
        try {
           int newNPC = Integer.parseInt(playerCommand.substring(4));
           if(newNPC &gt; 0) {
              Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
              c.sendMessage("You spawn a Npc.");
           } else {
              c.sendMessage("No such NPC.");
           }
        } catch(Exception e) {
           
        }         
     }
     
     
     if (playerCommand.startsWith("ipban") &amp;&amp; c.playerRights &gt;= 2) { // use as ::ipban name
        try {
           String playerToBan = playerCommand.substring(6);
           for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
              if(Server.playerHandler.players != null) {
                 if(Server.playerHandler.players.playerName.equalsIgnoreCase(playerToBan)) {
                    Connection.addIpToBanList(Server.playerHandler.players.connectedFrom);
                    Connection.addIpToFile(Server.playerHandler.players.connectedFrom);
                    c.sendMessage("You have IP banned the user: "+Server.playerHandler.players.playerName+" with the host: "+Server.playerHandler.players.connectedFrom);
                    Server.playerHandler.players.disconnected = true;
                 }
              }
           }
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }
     }
     
     if (playerCommand.startsWith("ban") &amp;&amp; playerCommand.charAt(3) == ' ') { // use as ::ban name
        try {   
           String playerToBan = playerCommand.substring(4);
           Connection.addNameToBanList(playerToBan);
           Connection.addNameToFile(playerToBan);
           for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
              if(Server.playerHandler.players != null) {
                 if(Server.playerHandler.players.playerName.equalsIgnoreCase(playerToBan)) {
                    Server.playerHandler.players.disconnected = true;
                 }
              }
           }
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }
     }
     
     if (playerCommand.startsWith("unban") &amp;&amp; c.playerRights &gt;= 2) {
        try {   
           String playerToBan = playerCommand.substring(6);
           Connection.removeNameFromBanList(playerToBan);
           c.sendMessage(playerToBan + " has been unbanned.");
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }
     }
     if (playerCommand.startsWith("anim") &amp;&amp; c.playerRights &gt;= 3) {
        String[] args = playerCommand.split(" ");
        c.startAnimation(Integer.parseInt(args[1]));
        c.getPA().requestUpdates();
     }
     
     if (playerCommand.startsWith("mute") &amp;&amp; c.playerRights &gt;= 1) {
        try {   
           String playerToBan = playerCommand.substring(5);
           Connection.addNameToMuteList(playerToBan);
           for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
              if(Server.playerHandler.players != null) {
                 if(Server.playerHandler.players.playerName.equalsIgnoreCase(playerToBan)) {
                    Client c2 = (Client)Server.playerHandler.players;
                    c2.sendMessage("You have been muted by: " + c.playerName);
                    break;
                 }
              }
           }
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }         
     }
     if (playerCommand.startsWith("ipmute") &amp;&amp; c.playerRights &gt;= 1) {
        try {   
           String playerToBan = playerCommand.substring(7);
           for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
              if(Server.playerHandler.players != null) {
                 if(Server.playerHandler.players.playerName.equalsIgnoreCase(playerToBan)) {
                    Connection.addIpToMuteList(Server.playerHandler.players.connectedFrom);
                    c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players.playerName);
                    Client c2 = (Client)Server.playerHandler.players;
                    c2.sendMessage("You have been muted by: " + c.playerName);
                    break;
                 }
              }
           }
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }         
     }
     if (playerCommand.startsWith("unipmute") &amp;&amp; c.playerRights &gt;= 1) {
        try {   
           String playerToBan = playerCommand.substring(9);
           for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
              if(Server.playerHandler.players != null) {
                 if(Server.playerHandler.players.playerName.equalsIgnoreCase(playerToBan)) {
                    Connection.unIPMuteUser(Server.playerHandler.players.connectedFrom);
                    c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players.playerName);
                    break;
                 }
              }
           }
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }         
     }
     if (playerCommand.startsWith("unmute") &amp;&amp; c.playerRights &gt;= 1) {
        try {   
           String playerToBan = playerCommand.substring(7);
           Connection.unMuteUser(playerToBan);
        } catch(Exception e) {
           c.sendMessage("Player Must Be Offline.");
        }         
     }

  }
</code></pre>
<p>}</p>
<p>}<br>
}[/code]</p>
<p>As to your problem, try putting the commands under the proper section, according to player rights, make sure there aren’t <code>.ignorecase</code> names after commands, put them under proper <code>c.playerRights === ""</code> sections. There are sometimes specific parts of the code that are for specific player rights groups. For me; when I first started playing without coding experience; when I had this problem, I just added everything in a huge lump at the bottom, and half of them didn’t work, and it also made other commands stop working as well…</p>
<p>Goodluck! <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-wont-work/457437/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-wont-work/457437/2</link>
        <pubDate>Fri, 31 Aug 2012 16:00:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457437-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-wont-work/457437.rss">PI:Commands Wont Work?</source>
      </item>
      <item>
        <title>PI:Commands Wont Work?</title>
        <dc:creator><![CDATA[@Olapse Olapse]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/olapse">@Olapse</a> wrote:</p>
          <blockquote>
              <p>Hey i was messing around and adding some new commands today and there were no errors when i compile but when i tried out my commands they don’t work. some of them do and some of them don’t. like even ::bank or ::yell doesn’t work its weird because i haven’t touched them and they worked before so i don’t know whats wrong. If you see anything that’s out of the ordinary please tell me. The new commands i put in were ::checkbank ::god and that’s it</p>
<p>Any help would be nice.</p>
<p>Here is my commands.java file</p>
<p>package server.model.players.packets;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;<br>
import server.world.WorldMap;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;</p>
<p>/**</p>
<ul>
<li>
<p>Commands<br>
**/<br>
public class Commands implements PacketType {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void processPacket(Client c, int packetType, int packetSize) {<br>
String playerCommand = c.getInStream().readString();<br>
if(Config.SERVER_DEBUG)<br>
Misc.println(c.playerName+" playerCommand: “+playerCommand);<br>
if (playerCommand.startsWith(”/") &amp;&amp; playerCommand.length() &gt; 1) {<br>
if (c.clanId &gt;= 0) {<br>
System.out.println(playerCommand);<br>
playerCommand = playerCommand.substring(1);<br>
Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);<br>
} else {<br>
String rank = “”;<br>
String Message = playerCommand.substring(1);<br>
if (c.playerRights &gt;= 0) {<br>
rank = “[Player][”+ c.playerName +"]:";<br>
if (c.playerRights &gt;= 1) {<br>
rank = “<a class="mention" href="/u/blu">@blu</a>@[Mod]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 2) {<br>
rank = “<span class="mention">@yel</span>@[Admin]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 3) {<br>
rank = “<a class="mention" href="/u/red">@red</a>@[Owner]<span class="mention">@bla</span>@[”+ Misc.ucFirst(c.playerName) +"]: “;<br>
}<br>
if (c.playerRights &gt;= 4) {<br>
rank = “[Player][”+ c.playerName +”]:";<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.sendMessage(rank+Message);<br>
}<br>
}<br>
}<br>
}<br>
return;<br>
}</p>
<pre><code> if (playerCommand.startsWith("checkbank") &amp;&amp; c.playerRights &gt;=3) {
</code></pre>
</li>
</ul>
<p>String[] args = playerCommand.split(" ");<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
Client o = (Client) Server.playerHandler.players[i];<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(args[1])) {<br>
c.getPA().otherBank(c, o);<br>
break;<br>
}<br>
}<br>
}<br>
}</p>
<p>if (playerCommand.equalsIgnoreCase(“bank”)) {<br>
c.getPA().openUpBank();<br>
}</p>
<pre><code>		if (playerCommand.startsWith("god") &amp;&amp; c.playerRights &gt;= 3) {
                    if (c.playerStandIndex != 1501) {
                            c.startAnimation(1500);
                            c.playerStandIndex = 1501;
                            c.playerTurnIndex = 1851;
                            c.playerWalkIndex = 1851;
                            c.playerTurn180Index = 1851;
                            c.playerTurn90CWIndex = 1501;
                            c.playerTurn90CCWIndex = 1501;
                            c.playerRunIndex = 1851;
                            c.updateRequired = true;
                            c.appearanceUpdateRequired = true;
                            c.sendMessage("You turn God mode on.");
                    } else {
                            c.playerStandIndex = 0x328;
                            c.playerTurnIndex = 0x337;
                            c.playerWalkIndex = 0x333;
                            c.playerTurn180Index = 0x334;
                            c.playerTurn90CWIndex = 0x335;
                            c.playerTurn90CCWIndex = 0x336;
                            c.playerRunIndex = 0x338;
                            c.updateRequired = true;
                            c.appearanceUpdateRequired = true;
                            c.sendMessage("Godmode has been diactivated.");
                    }
            

		



		if (playerCommand.startsWith("master") &amp;&amp; c.puremaster == 0) {
			int i = 0;
			c.getPA().addSkillXP((15000000), 0);		
			c.getPA().addSkillXP((15000000), 1);
			c.getPA().addSkillXP((15000000), 2);
			c.getPA().addSkillXP((15000000), 3);
			c.getPA().addSkillXP((15000000), 4);
			c.getPA().addSkillXP((15000000), 5);
			c.getPA().addSkillXP((15000000), 6);
			c.getPA().addSkillXP((15000000), 7);
			c.getPA().addSkillXP((15000000), 8);
			c.getPA().addSkillXP((15000000), 9);
			c.getPA().addSkillXP((15000000), 10);
			c.getPA().addSkillXP((15000000), 11);
			c.getPA().addSkillXP((15000000), 12);
			c.getPA().addSkillXP((15000000), 13);
			c.getPA().addSkillXP((15000000), 14);
			c.getPA().addSkillXP((15000000), 15);
			c.getPA().addSkillXP((15000000), 16);
			c.getPA().addSkillXP((15000000), 17);
			c.getPA().addSkillXP((15000000), 18);
			c.getPA().addSkillXP((15000000), 19);
			c.getPA().addSkillXP((15000000), 20);
			c.getPA().addSkillXP((15000000), 21);
			c.getPA().addSkillXP((15000000), 22);
			c.playerXP[3] = c.getPA().getXPForLevel(99)+5;
			c.playerLevel[3] = c.getPA().getLevelForXP(c.playerXP[3]);
			c.getPA().refreshSkill(3);
			c.puremaster = 1;
		}
</code></pre>
<p>if (playerCommand.equals(“alltome”)) {<br>
if(c.playerRights == 0 || c.playerRights == 5 || c.playerRights == 1 || c.playerRights == 2){<br>
return;<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.teleportToX = c.absX;<br>
c2.teleportToY = c.absY;<br>
c2.heightLevel = c.heightLevel;<br>
c2.sendMessage(“Mass teleport to: " + c.playerName + “”);<br>
}<br>
}<br>
}<br>
//if (playerCommand.equalsIgnoreCase(“lock”)) {<br>
// c.expLock = true;<br>
// c.sendMessage(“You will <a class="mention" href="/u/red">@red</a>@not@bla@ gain any experience.”);<br>
//}<br>
//if (playerCommand.equalsIgnoreCase(“unlock”)) {<br>
//  c.expLock = false;<br>
//  c.sendMessage(“You <span class="mention">@gre</span>@will@bla@ gain experience.”);<br>
//}<br>
if (playerCommand.startsWith(“yell”)) {<br>
String rank = “”;<br>
String Message = playerCommand.substring(4).toLowerCase();<br>
if (c.playerRights &gt;= 0) {<br>
rank = “[Player][”+ c.playerName +”]:";<br>
if (c.playerRights &gt;= 1) {<br>
rank = “<a class="mention" href="/u/blu">@blu</a>@[Mod]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 2) {<br>
rank = “<span class="mention">@yel</span>@[Admin]<span class="mention">@bla</span>@[”+ c.playerName +"]:";<br>
}<br>
if (c.playerRights &gt;= 3) {<br>
rank = “<a class="mention" href="/u/red">@red</a>@[Owner]<span class="mention">@bla</span>@[”+ c.playerName +"] : “;<br>
}<br>
if (c.playerRights &gt;= 4) {<br>
rank = “[Player][”+ c.playerName +”]:";<br>
}<br>
for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {<br>
if (Server.playerHandler.players[j] != null) {<br>
Client c2 = (Client)Server.playerHandler.players[j];<br>
c2.sendMessage(rank+Message);<br>
}<br>
}<br>
}</p>
<pre><code>	}
	if(c.playerRights &gt;= 0) {
		
		if (playerCommand.equalsIgnoreCase("players")) {
			c.sendMessage("There are currently "+PlayerHandler.getPlayerCount()+ " players online.");
		}
		if (playerCommand.equalsIgnoreCase("commands")) {
			c.sendMessage("Your current commands - ::players, ::changepassword - More coming soon.");
		}
		if (playerCommand.startsWith("changepassword") &amp;&amp; playerCommand.length() &gt; 15) {
			c.playerPass = playerCommand.substring(15);
			c.sendMessage("Your password is now: " + c.playerPass);			
		}	
		
		if (playerCommand.startsWith("setlevel") &amp;&amp; c.playerRights &gt;= 3) {
			if (c.inWild())
				return;
			for (int j = 0; j &lt; c.playerEquipment.length; j++) {
				if (c.playerEquipment[j] &gt; 0) {
					c.sendMessage("Take off your shit idiot..");
					return;
				}
			}
			try {
			String[] args = playerCommand.split(" ");
			int skill = Integer.parseInt(args[1]);
			int level = Integer.parseInt(args[2]);
			if (level &gt; 99)
				level = 99;
			else if (level &lt; 0)
				level = 1;
			c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
			c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
			c.getPA().refreshSkill(skill);
			} catch (Exception e){}
		}
		if (playerCommand.equals("spec") &amp;&amp; c.playerRights &gt;= 3) {
			if (!c.inWild())
				c.specAmount = 10.0;
		}
		if (playerCommand.startsWith("object") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");				
			c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
		}
		if (playerCommand.equals("train")) {
			c.getPA().movePlayer(1861, 5340, 0);			
		}
		if (playerCommand.equals("runite")) {
			c.getPA().movePlayer(3060, 3876, 0);			
		}
		if (playerCommand.equals("edge")) {
			c.getPA().movePlayer(3088, 3497, 0);			
		}
		if (playerCommand.equals("armadyl") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 4);			
		}
		if (playerCommand.equals("saradomin") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 8);			
		}
		if (playerCommand.equals("bandos") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 12);			
		}
		
		if (playerCommand.startsWith("tele") &amp;&amp; c.playerRights &gt;= 3) {
			String[] arg = playerCommand.split(" ");
			if (arg.length &gt; 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
			else if (arg.length == 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
		}
		
		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: "+c.absX);
			c.sendMessage("Y: "+c.absY);
		}		
		if(c.playerRights &gt;= 3) {
		
		}
		if (playerCommand.startsWith("task") &amp;&amp; c.playerRights &gt;= 3) {
			c.taskAmount = -1;
			c.slayerTask = 0;
		}
		
		if (playerCommand.startsWith("starter") &amp;&amp; c.playerRights &gt;= 3) {
			c.getDH().sendDialogues(100, 945);			
		}
		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: "+c.absX);
			c.sendMessage("Y: "+c.absY);
		}
		if (playerCommand.startsWith("reloaddrops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.npcDrops = null;
			Server.npcDrops = new server.model.npcs.NPCDrops();
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.sendMessage("[" + c.playerName + "] " + "NPC Drops have been reloaded.");
				}
			}

		}
		if (playerCommand.startsWith("reloadshops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.shopHandler = new server.world.ShopHandler();
		}
		if (playerCommand.startsWith("fakels") &amp;&amp; c.playerRights &gt;= 3) {
			int item = Integer.parseInt(playerCommand.split(" ")[1]);
			Server.clanChat.handleLootShare(c, item, 1);
		}
		
		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.getPA().showInterface(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("gfx") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("update") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			PlayerHandler.updateSeconds = a;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
		}
		
		if (playerCommand.startsWith("item") &amp;&amp; c.playerRights &gt;= 2) {
			try {
				String[] args = playerCommand.split(" ");
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);		
					} else {
						c.sendMessage("No such item.");
					}
				} else {
					c.sendMessage("Use as ::pickup 995 200");
				}
			} catch(Exception e) {
				
			}
		}
		
		if (playerCommand.equals("Vote") &amp;&amp; c.playerRights &gt;= 3) {
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.getPA().sendFrame126("www.google.ca", 12000);
				}
		}


		if (playerCommand.equalsIgnoreCase("debug") &amp;&amp; c.playerRights &gt;= 3) {
			Server.playerExecuted = true;
		}
		
		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			try {	
				String[] args = playerCommand.split(" ");
				int a = Integer.parseInt(args[1]);
				c.getPA().showInterface(a);
			} catch(Exception e) {
				c.sendMessage("::interface ####"); 
			}
		}
		
		if(playerCommand.startsWith("www") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().sendFrame126(playerCommand,0);			
		}
		
		
		if (playerCommand.startsWith("xteleto") &amp;&amp; c.playerRights &gt;= 1) {
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (Server.playerHandler.players[i] != null) {
					if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
					}
				}
			}			
		}
		

		
		if(playerCommand.startsWith("npc") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if(newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
					c.sendMessage("You spawn a Npc.");
				} else {
					c.sendMessage("No such NPC.");
				}
			} catch(Exception e) {
				
			}			
		}
		
		
		if (playerCommand.startsWith("ipban") &amp;&amp; c.playerRights &gt;= 2) { // use as ::ipban name
			try {
				String playerToBan = playerCommand.substring(6);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
							Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP banned the user: "+Server.playerHandler.players[i].playerName+" with the host: "+Server.playerHandler.players[i].connectedFrom);
							Server.playerHandler.players[i].disconnected = true;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		
		if (playerCommand.startsWith("ban") &amp;&amp; playerCommand.charAt(3) == ' ') { // use as ::ban name
			try {	
				String playerToBan = playerCommand.substring(4);
				Connection.addNameToBanList(playerToBan);
				Connection.addNameToFile(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Server.playerHandler.players[i].disconnected = true;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		
		if (playerCommand.startsWith("unban") &amp;&amp; c.playerRights &gt;= 2) {
			try {	
				String playerToBan = playerCommand.substring(6);
				Connection.removeNameFromBanList(playerToBan);
				c.sendMessage(playerToBan + " has been unbanned.");
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("anim") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}
		
		if (playerCommand.startsWith("mute") &amp;&amp; c.playerRights &gt;= 1) {
			try {	
				String playerToBan = playerCommand.substring(5);
				Connection.addNameToMuteList(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		if (playerCommand.startsWith("ipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {	
				String playerToBan = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players[i].playerName);
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		if (playerCommand.startsWith("unipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {	
				String playerToBan = playerCommand.substring(9);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players[i].playerName);
							break;
						} 
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}
		if (playerCommand.startsWith("unmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {	
				String playerToBan = playerCommand.substring(7);
				Connection.unMuteUser(playerToBan);
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}			
		}

	}
}
</code></pre>
<p>}<br>
}</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-wont-work/457437/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-wont-work/457437/1</link>
        <pubDate>Fri, 31 Aug 2012 15:47:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-457437-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-wont-work/457437.rss">PI:Commands Wont Work?</source>
      </item>
  </channel>
</rss>
