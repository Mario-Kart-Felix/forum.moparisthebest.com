<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++][Dev][Theory]Buffer implementation</title>
    <link>https://forum.moparisthebest.com/t/c-dev-theory-buffer-implementation/553256</link>
    <description>This is my prototype on dealing with buffers in C++, anyone have a prettier or more compact way of doing it? :o

updated a litte: still in development
[code=cpp]

#ifndef _H_STREAM_
#define _H_STREAM_
#include &lt;string&gt;
#include &lt;cstdlib&gt;
#include &quot;Cryption.h&quot;
#define BUFFER(type) type** buffer = ((type**)&amp;current);
#define buffer &amp;current
#define NEXT (*(*buffer++))

#define INITALIZE  {for(int i=0;i&lt;32;i++)bitMaskOut[i]=(1&lt;&lt;i)-1;}
class Stream {
	static const int Stream::frameStackSize = 10;
	int frameStackPtr;
	int frameStack[frameStackSize];

public:

	Cryption* packetEncryption;
	void * start;
	void* current;
	int size;
	int currentPos;
	int bitPosition;

	static const int bitMaskOut[32];
	static const int Stream::BUFFER_LENGTH = 5000;
	Stream();
	Stream(void* b, int len);

	~Stream();
	char readSignedCharA();
	char readSignedCharC();
	char readSignedCharS();
	unsigned char readUnsignedCharA();
	unsigned char readUnsignedCharC();
	unsigned char readUnsignedCharS();
	void writeCharA(int i);
	void writeCharS(int i);
	void writeCharC(int i);
	int readSignedWordBigEndian();
	int readSignedWordA();
	int readSignedWordBigEndianA();
	int readUnsignedWordBigEndian();
	int readUnsignedWordA();
	int readUnsignedWordBigEndianA();
	void writeWordBigEndianA(int i);
	void writeWordA(int i);
	void writeWordBigEndian_dup(int i);
	int readDWord_v1();
	int readDWord_v2();
	void writeDWord_v1(int i);
	void writeDWord_v2(int i);
	void readChars_reverse(char abyte0[], int i, int j);
	void writeChars_reverse(char abyte0[], int i, int j);
	void readChars_reverseA(char abyte0[], int i, int j);
	void writeChars_reverseA(char abyte0[], int i, int j);
	void createFrame(int id);
	void createFrameVarSize(int id);
	void createFrameVarSizeWord(int id);
	void endFrameVarSize();
	void endFrameVarSizeWord();
	void writeChar(int i);
	void writeWord(int i);
	void writeWordBigEndian(int i);
	void write3Char(int i);
	void writeDWord(int i);
	void writeDWordBigEndian(int i);
	void writeQWord(long l);
	void writeString(std::string s);
	void writeChars(char abyte0[], int i, int j);
	void writeFrameSize(int i);
	void writeFrameSizeWord(int i);
	unsigned char readUnsignedChar();
	char readSignedChar();
	int readUnsignedWord();
	int readSignedWord();
	int readDWord();

	long readQWord();
	long readQWord2();

	std::string* readString();
	void readChars(char abyte0[], int i, int j);

	void initBitAccess();
	void writeBits(int numBits, int value);
	void finishBitAccess();

  int read3Chars();

};
#endif[/code]

[code=cpp]#include &quot;Stream.h&quot;

	Stream::Stream() {

	}

	Stream::Stream(void * b, int len) {
		start = b;
		current = start;
		
		size = len;
	}
	char Stream::readSignedCharA() {
		BUFFER(char)
		
		return NEXT - 128;
	}
	char Stream::readSignedCharC() {
		BUFFER(char);
		return (-NEXT);
	}
	char Stream::readSignedCharS() {
		BUFFER(char)
		return (128 - NEXT);
	}
	unsigned char Stream::readUnsignedCharA() {
		BUFFER(unsigned char)
		return NEXT - 128 &amp; 0xff;
	}
	unsigned char Stream::readUnsignedCharC() {
		BUFFER(unsigned char)
		return -NEXT;
	}
	unsigned char Stream::readUnsignedCharS() {
		BUFFER(unsigned char)
		return 128 - NEXT &amp; 0xff;
	}
	void Stream::writeCharA(int i) {
		NEXT = (char)(i + 128);
	}
	void Stream::writeCharS(int i) {
		NEXT = (char)(128 - i);
	}
	void Stream::writeCharC(int i) {
		NEXT = (char)(-i);
	}
	int Stream::readSignedWordBigEndian() {
		
		currentPos += 2;
		int i = ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}
	int Stream::readSignedWordA(){
		currentPos += 2;
		int i = ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] - 128 &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}
	int Stream::readSignedWordBigEndianA(){
		currentPos += 2;
		int i = ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] - 128 &amp; 0xff);
		if(i &gt; 32767)
			i -= 0x10000;
		return i;
	}
	int Stream::readUnsignedWordBigEndian(){
		currentPos += 2;
		return ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
	}
	int Stream::readUnsignedWordA(){
		currentPos += 2;
		return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] - 128 &amp; 0xff);
	}
	int Stream::readUnsignedWordBigEndianA(){
		currentPos += 2;
		return ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] - 128 &amp; 0xff);
	}
	void Stream::writeWordBigEndianA(int i){
		NEXT = (byte)(i + 128);
		NEXT = (byte)(i &gt;&gt; 8);
	}
	void Stream::writeWordA(int i){
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)(i + 128);
	}
	void Stream::writeWordBigEndian_dup(int i){
		NEXT = (byte)i;
		NEXT = (byte)(i &gt;&gt; 8);
	}
	int Stream::readDWord_v1(){
		currentPos += 4;
		return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 3] &amp; 0xff);
	}
	int Stream::readDWord_v2(){
		currentPos += 4;
		return ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
	}
	void Stream::writeDWord_v1(int i){
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)i;
		NEXT = (byte)(i &gt;&gt; 24);
		NEXT = (byte)(i &gt;&gt; 16);
	}
	void Stream::writeDWord_v2(int i){
		NEXT = (byte)(i &gt;&gt; 16);
		NEXT = (byte)(i &gt;&gt; 24);
		NEXT = (byte)i;
		NEXT = (byte)(i &gt;&gt; 8);
	}
	void Stream::readChars_reverse(char abyte0[], int i, int j){
		for(int k = (j + i) - 1; k &gt;= j; k--) {
			abyte0[k] = NEXT;

		}
	}
	void Stream::writeChars_reverse(char abyte0[], int i, int j){
		for(int k = (j + i) - 1; k &gt;= j; k--)
			NEXT = abyte0[k];

	}
	void Stream::readChars_reverseA(char abyte0[], int i, int j){
		for(int k = (j + i) - 1; k &gt;= j; k--)
			abyte0[k] = (byte)(NEXT - 128);

	}
	void Stream::writeChars_reverseA(char abyte0[], int i, int j){
		for(int k = (j + i) - 1; k &gt;= j; k--)
			NEXT = (byte)(abyte0[k] + 128);

	}
	void Stream::createFrame(int id){
		NEXT = (byte)(id + packetEncryption-&gt;getNextKey());
	}
	void Stream::createFrameVarSize(int id){ // creates a variable sized frame
		NEXT = (byte)(id + packetEncryption-&gt;getNextKey());
		NEXT = 0;		// placeholder for size byte
		if(frameStackPtr &gt;= frameStackSize-1) {
			throw new RuntimeException(&quot;Stack overflow&quot;);
		}
		else frameStack[++frameStackPtr] = currentPos;
	}
	void Stream::createFrameVarSizeWord(int id) // creates a variable sized frame
		NEXT = (byte)(id + packetEncryption.getNextKey());
		writeWord(0);		// placeholder for size word
		if(frameStackPtr &gt;= frameStackSize-1) {
			throw new RuntimeException(&quot;Stack overflow&quot;);
		}
		else frameStack[++frameStackPtr] = currentPos;
	}
	void Stream::endFrameVarSize(){// ends a variable sized frame
		if(frameStackPtr &lt; 0) throw new RuntimeException(&quot;Stack empty&quot;);
		else writeFrameSize(currentPos - frameStack[frameStackPtr--]);
	}
	void Stream::endFrameVarSizeWord(){ // ends a variable sized frame
		if(frameStackPtr &lt; 0) throw new RuntimeException(&quot;Stack empty&quot;);
		else writeFrameSizeWord(currentPos - frameStack[frameStackPtr--]);
	}
	void Stream::writeChar(int i){
		NEXT = (byte)i;
	}
	void Stream::writeWord(int i){
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)i;
	}
	void Stream::writeWordBigEndian(int i){
		NEXT = (byte)i;
		NEXT = (byte)(i &gt;&gt; 8);
	}
	void Stream::write3Char(int i){
		NEXT = (byte)(i &gt;&gt; 16);
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)i;
	}
	void Stream::writeDWord(int i){
		NEXT = (byte)(i &gt;&gt; 24);
		NEXT = (byte)(i &gt;&gt; 16);
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)i;
	}
	void Stream::writeDWordBigEndian(int i){
		NEXT = (byte)i;
		NEXT = (byte)(i &gt;&gt; 8);
		NEXT = (byte)(i &gt;&gt; 16);
		NEXT = (byte)(i &gt;&gt; 24);
	}
	void Stream::writeQWord(long l){
		NEXT = (byte)(int)(l &gt;&gt; 56);
		NEXT = (byte)(int)(l &gt;&gt; 48);
		NEXT = (byte)(int)(l &gt;&gt; 40);
		NEXT = (byte)(int)(l &gt;&gt; 32);
		NEXT = (byte)(int)(l &gt;&gt; 24);
		NEXT = (byte)(int)(l &gt;&gt; 16);
		NEXT = (byte)(int)(l &gt;&gt; 8);
		NEXT = (byte)(int)l;
	}
	void Stream::writeString(std::string s){
		s.getBytes(0, s.length(), buffer, currentPos);
		currentPos += s.length();
		NEXT = 10;
	}
	void Stream::writeChars(char abyte0[], int i, int j){
		for(int k = j; k &lt; j + i; k++)
			NEXT = abyte0[k];

	}
	void Stream::writeFrameSize(int i){
		buffer[currentPos - i - 1] = (byte)i;
	}
	void Stream::writeFrameSizeWord(int i){
		buffer[currentPos - i - 2] = (byte)(i &gt;&gt; 8);
		buffer[currentPos - i - 1] = (byte)i;
	}
	int Stream::readUnsignedChar(){
		return NEXT &amp; 0xff;
	}
	char Stream::readSignedChar(){
		return NEXT;
	}
	int Stream::readUnsignedWord(){
		currentPos += 2;
		return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
	}
	int Stream::readSignedWord(){
		currentPos += 2;
		int i = ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}
	int Stream::readDWord(){
		currentPos += 4;
		return ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
	}

	long Stream::readQWord(){
		long l = (long)readDWord() &amp; 0xffffffffL;
		long l1 = (long)readDWord() &amp; 0xffffffffL;
		return (l &lt;&lt; 32) + l1;
	}
	long Stream::readQWord2(){
		currentPos += 8;
		return (((buffer[currentPos - 8] &amp; 0xff) &lt;&lt; 56) + ((buffer[currentPos - 7] &amp; 0xff) &lt;&lt; 48) + ((buffer[currentPos - 6] &amp; 0xff) &lt;&lt; 40) + ((buffer[currentPos - 5] &amp; 0xff) &lt;&lt; 32) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff));
	}

	std::string* readString(){
		int i = currentPos;
		while(NEXT != 10);
		return new String(buffer, i, currentPos - i - 1);
	}
	void Stream::readChars(char abyte0[], int i, int j){
		for(int k = j; k &lt; j + i; k++)
			abyte0[k] = NEXT;

	}
	void Stream::initBitAccess(){
		bitPosition = currentPos * 8;
	}
	void Stream::writeBits(int numBits, int value){
		int bytePos = bitPosition &gt;&gt; 3;
		int bitOffset = 8 - (bitPosition &amp; 7);
		bitPosition += numBits;

		for(; numBits &gt; bitOffset; bitOffset = 8) {
			buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];		// mask out the desired area
			buffer[bytePos++] |= (value &gt;&gt; (numBits-bitOffset)) &amp; bitMaskOut[bitOffset];

			numBits -= bitOffset;
		}
		if(numBits == bitOffset) {
			buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];
			buffer[bytePos] |= value &amp; bitMaskOut[bitOffset];
		} else {
			buffer[bytePos] &amp;= ~ (bitMaskOut[numBits]&lt;&lt;(bitOffset - numBits));
			buffer[bytePos] |= (value&amp;bitMaskOut[numBits]) &lt;&lt; (bitOffset - numBits);
		}
	}
	void Stream::finishBitAccess(){
		currentPos = (bitPosition + 7) / 8;
	}
	

	
	int Stream::read3Chars() {
	}[/code]</description>
    
    <lastBuildDate>Thu, 10 Sep 2015 05:57:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-dev-theory-buffer-implementation/553256.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++][Dev][Theory]Buffer implementation</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>This is my prototype on dealing with buffers in C++, anyone have a prettier or more compact way of doing it? :o</p>
<p>updated a litte: still in development</p>
<p>[code=cpp]</p>
<p><span class="hashtag">#ifndef</span> <em>H_STREAM</em><br>
<span class="hashtag">#define</span> <em>H_STREAM</em><br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> “Cryption.h”<br>
<span class="hashtag">#define</span> BUFFER(type) type** buffer = ((type**)&amp;current);<br>
<span class="hashtag">#define</span> buffer &amp;current<br>
<span class="hashtag">#define</span> NEXT (*(*buffer++))</p>
<p><span class="hashtag">#define</span> INITALIZE  {for(int i=0;i&lt;32;i++)bitMaskOut[i]=(1&lt;&lt;i)-1;}<br>
class Stream {<br>
static const int Stream::frameStackSize = 10;<br>
int frameStackPtr;<br>
int frameStack[frameStackSize];</p>
<p>public:</p>
<pre><code>Cryption* packetEncryption;
void * start;
void* current;
int size;
int currentPos;
int bitPosition;

static const int bitMaskOut[32];
static const int Stream::BUFFER_LENGTH = 5000;
Stream();
Stream(void* b, int len);

~Stream();
char readSignedCharA();
char readSignedCharC();
char readSignedCharS();
unsigned char readUnsignedCharA();
unsigned char readUnsignedCharC();
unsigned char readUnsignedCharS();
void writeCharA(int i);
void writeCharS(int i);
void writeCharC(int i);
int readSignedWordBigEndian();
int readSignedWordA();
int readSignedWordBigEndianA();
int readUnsignedWordBigEndian();
int readUnsignedWordA();
int readUnsignedWordBigEndianA();
void writeWordBigEndianA(int i);
void writeWordA(int i);
void writeWordBigEndian_dup(int i);
int readDWord_v1();
int readDWord_v2();
void writeDWord_v1(int i);
void writeDWord_v2(int i);
void readChars_reverse(char abyte0[], int i, int j);
void writeChars_reverse(char abyte0[], int i, int j);
void readChars_reverseA(char abyte0[], int i, int j);
void writeChars_reverseA(char abyte0[], int i, int j);
void createFrame(int id);
void createFrameVarSize(int id);
void createFrameVarSizeWord(int id);
void endFrameVarSize();
void endFrameVarSizeWord();
void writeChar(int i);
void writeWord(int i);
void writeWordBigEndian(int i);
void write3Char(int i);
void writeDWord(int i);
void writeDWordBigEndian(int i);
void writeQWord(long l);
void writeString(std::string s);
void writeChars(char abyte0[], int i, int j);
void writeFrameSize(int i);
void writeFrameSizeWord(int i);
unsigned char readUnsignedChar();
char readSignedChar();
int readUnsignedWord();
int readSignedWord();
int readDWord();

long readQWord();
long readQWord2();

std::string* readString();
void readChars(char abyte0[], int i, int j);

void initBitAccess();
void writeBits(int numBits, int value);
void finishBitAccess();
</code></pre>
<p>int read3Chars();</p>
<p>};<br>
<span class="hashtag">#endif</span>[/code]</p>
<p>[code=cpp]<span class="hashtag">#include</span> “Stream.h”</p>
<pre><code>Stream::Stream() {

}

Stream::Stream(void * b, int len) {
	start = b;
	current = start;
	
	size = len;
}
char Stream::readSignedCharA() {
	BUFFER(char)
	
	return NEXT - 128;
}
char Stream::readSignedCharC() {
	BUFFER(char);
	return (-NEXT);
}
char Stream::readSignedCharS() {
	BUFFER(char)
	return (128 - NEXT);
}
unsigned char Stream::readUnsignedCharA() {
	BUFFER(unsigned char)
	return NEXT - 128 &amp; 0xff;
}
unsigned char Stream::readUnsignedCharC() {
	BUFFER(unsigned char)
	return -NEXT;
}
unsigned char Stream::readUnsignedCharS() {
	BUFFER(unsigned char)
	return 128 - NEXT &amp; 0xff;
}
void Stream::writeCharA(int i) {
	NEXT = (char)(i + 128);
}
void Stream::writeCharS(int i) {
	NEXT = (char)(128 - i);
}
void Stream::writeCharC(int i) {
	NEXT = (char)(-i);
}
int Stream::readSignedWordBigEndian() {
	
	currentPos += 2;
	int i = ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}
int Stream::readSignedWordA(){
	currentPos += 2;
	int i = ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] - 128 &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}
int Stream::readSignedWordBigEndianA(){
	currentPos += 2;
	int i = ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] - 128 &amp; 0xff);
	if(i &gt; 32767)
		i -= 0x10000;
	return i;
}
int Stream::readUnsignedWordBigEndian(){
	currentPos += 2;
	return ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
}
int Stream::readUnsignedWordA(){
	currentPos += 2;
	return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] - 128 &amp; 0xff);
}
int Stream::readUnsignedWordBigEndianA(){
	currentPos += 2;
	return ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] - 128 &amp; 0xff);
}
void Stream::writeWordBigEndianA(int i){
	NEXT = (byte)(i + 128);
	NEXT = (byte)(i &gt;&gt; 8);
}
void Stream::writeWordA(int i){
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)(i + 128);
}
void Stream::writeWordBigEndian_dup(int i){
	NEXT = (byte)i;
	NEXT = (byte)(i &gt;&gt; 8);
}
int Stream::readDWord_v1(){
	currentPos += 4;
	return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 3] &amp; 0xff);
}
int Stream::readDWord_v2(){
	currentPos += 4;
	return ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 2] &amp; 0xff);
}
void Stream::writeDWord_v1(int i){
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)i;
	NEXT = (byte)(i &gt;&gt; 24);
	NEXT = (byte)(i &gt;&gt; 16);
}
void Stream::writeDWord_v2(int i){
	NEXT = (byte)(i &gt;&gt; 16);
	NEXT = (byte)(i &gt;&gt; 24);
	NEXT = (byte)i;
	NEXT = (byte)(i &gt;&gt; 8);
}
void Stream::readChars_reverse(char abyte0[], int i, int j){
	for(int k = (j + i) - 1; k &gt;= j; k--) {
		abyte0[k] = NEXT;

	}
}
void Stream::writeChars_reverse(char abyte0[], int i, int j){
	for(int k = (j + i) - 1; k &gt;= j; k--)
		NEXT = abyte0[k];

}
void Stream::readChars_reverseA(char abyte0[], int i, int j){
	for(int k = (j + i) - 1; k &gt;= j; k--)
		abyte0[k] = (byte)(NEXT - 128);

}
void Stream::writeChars_reverseA(char abyte0[], int i, int j){
	for(int k = (j + i) - 1; k &gt;= j; k--)
		NEXT = (byte)(abyte0[k] + 128);

}
void Stream::createFrame(int id){
	NEXT = (byte)(id + packetEncryption-&gt;getNextKey());
}
void Stream::createFrameVarSize(int id){ // creates a variable sized frame
	NEXT = (byte)(id + packetEncryption-&gt;getNextKey());
	NEXT = 0;		// placeholder for size byte
	if(frameStackPtr &gt;= frameStackSize-1) {
		throw new RuntimeException("Stack overflow");
	}
	else frameStack[++frameStackPtr] = currentPos;
}
void Stream::createFrameVarSizeWord(int id) // creates a variable sized frame
	NEXT = (byte)(id + packetEncryption.getNextKey());
	writeWord(0);		// placeholder for size word
	if(frameStackPtr &gt;= frameStackSize-1) {
		throw new RuntimeException("Stack overflow");
	}
	else frameStack[++frameStackPtr] = currentPos;
}
void Stream::endFrameVarSize(){// ends a variable sized frame
	if(frameStackPtr &lt; 0) throw new RuntimeException("Stack empty");
	else writeFrameSize(currentPos - frameStack[frameStackPtr--]);
}
void Stream::endFrameVarSizeWord(){ // ends a variable sized frame
	if(frameStackPtr &lt; 0) throw new RuntimeException("Stack empty");
	else writeFrameSizeWord(currentPos - frameStack[frameStackPtr--]);
}
void Stream::writeChar(int i){
	NEXT = (byte)i;
}
void Stream::writeWord(int i){
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)i;
}
void Stream::writeWordBigEndian(int i){
	NEXT = (byte)i;
	NEXT = (byte)(i &gt;&gt; 8);
}
void Stream::write3Char(int i){
	NEXT = (byte)(i &gt;&gt; 16);
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)i;
}
void Stream::writeDWord(int i){
	NEXT = (byte)(i &gt;&gt; 24);
	NEXT = (byte)(i &gt;&gt; 16);
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)i;
}
void Stream::writeDWordBigEndian(int i){
	NEXT = (byte)i;
	NEXT = (byte)(i &gt;&gt; 8);
	NEXT = (byte)(i &gt;&gt; 16);
	NEXT = (byte)(i &gt;&gt; 24);
}
void Stream::writeQWord(long l){
	NEXT = (byte)(int)(l &gt;&gt; 56);
	NEXT = (byte)(int)(l &gt;&gt; 48);
	NEXT = (byte)(int)(l &gt;&gt; 40);
	NEXT = (byte)(int)(l &gt;&gt; 32);
	NEXT = (byte)(int)(l &gt;&gt; 24);
	NEXT = (byte)(int)(l &gt;&gt; 16);
	NEXT = (byte)(int)(l &gt;&gt; 8);
	NEXT = (byte)(int)l;
}
void Stream::writeString(std::string s){
	s.getBytes(0, s.length(), buffer, currentPos);
	currentPos += s.length();
	NEXT = 10;
}
void Stream::writeChars(char abyte0[], int i, int j){
	for(int k = j; k &lt; j + i; k++)
		NEXT = abyte0[k];

}
void Stream::writeFrameSize(int i){
	buffer[currentPos - i - 1] = (byte)i;
}
void Stream::writeFrameSizeWord(int i){
	buffer[currentPos - i - 2] = (byte)(i &gt;&gt; 8);
	buffer[currentPos - i - 1] = (byte)i;
}
int Stream::readUnsignedChar(){
	return NEXT &amp; 0xff;
}
char Stream::readSignedChar(){
	return NEXT;
}
int Stream::readUnsignedWord(){
	currentPos += 2;
	return ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
}
int Stream::readSignedWord(){
	currentPos += 2;
	int i = ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}
int Stream::readDWord(){
	currentPos += 4;
	return ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff);
}

long Stream::readQWord(){
	long l = (long)readDWord() &amp; 0xffffffffL;
	long l1 = (long)readDWord() &amp; 0xffffffffL;
	return (l &lt;&lt; 32) + l1;
}
long Stream::readQWord2(){
	currentPos += 8;
	return (((buffer[currentPos - 8] &amp; 0xff) &lt;&lt; 56) + ((buffer[currentPos - 7] &amp; 0xff) &lt;&lt; 48) + ((buffer[currentPos - 6] &amp; 0xff) &lt;&lt; 40) + ((buffer[currentPos - 5] &amp; 0xff) &lt;&lt; 32) + ((buffer[currentPos - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentPos - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentPos - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentPos - 1] &amp; 0xff));
}

std::string* readString(){
	int i = currentPos;
	while(NEXT != 10);
	return new String(buffer, i, currentPos - i - 1);
}
void Stream::readChars(char abyte0[], int i, int j){
	for(int k = j; k &lt; j + i; k++)
		abyte0[k] = NEXT;

}
void Stream::initBitAccess(){
	bitPosition = currentPos * 8;
}
void Stream::writeBits(int numBits, int value){
	int bytePos = bitPosition &gt;&gt; 3;
	int bitOffset = 8 - (bitPosition &amp; 7);
	bitPosition += numBits;

	for(; numBits &gt; bitOffset; bitOffset = 8) {
		buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];		// mask out the desired area
		buffer[bytePos++] |= (value &gt;&gt; (numBits-bitOffset)) &amp; bitMaskOut[bitOffset];

		numBits -= bitOffset;
	}
	if(numBits == bitOffset) {
		buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];
		buffer[bytePos] |= value &amp; bitMaskOut[bitOffset];
	} else {
		buffer[bytePos] &amp;= ~ (bitMaskOut[numBits]&lt;&lt;(bitOffset - numBits));
		buffer[bytePos] |= (value&amp;bitMaskOut[numBits]) &lt;&lt; (bitOffset - numBits);
	}
}
void Stream::finishBitAccess(){
	currentPos = (bitPosition + 7) / 8;
}



int Stream::read3Chars() {
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-dev-theory-buffer-implementation/553256/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-dev-theory-buffer-implementation/553256/1</link>
        <pubDate>Thu, 10 Sep 2015 05:57:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553256-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-dev-theory-buffer-implementation/553256.rss">[C++][Dev][Theory]Buffer implementation</source>
      </item>
  </channel>
</rss>
