<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache downloads to the folder, but extracts as .zip</title>
    <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751</link>
    <description>I&#39;ve been trying to figure out why it keeps on doing this for the past hour or so.

The cache I&#39;m wanting to download is cache.zip, but inside the cache directory, it downloads cache.zip? Confusing. (Note: I quit the download at 1MB because I&#39;m not downloading the full 100MB while zipped cache if it&#39;s not working)

[img]http://phphf.kodingen.com/public_images/z21my5.png[/img]

How it looks when I open the zipped file.

[img]http://phphf.kodingen.com/public_images/wn9gn7.png[/img]


CacheDownloader.java
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

        private client client;

        private final int BUFFER = 1024;

        /*
         * Only things you need to change
         *
         */
        private final int VERSION = 1; // Version of cache
        private String cacheLink = &quot;http://199.71.212.*/.Runited634.zip&quot;;

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                if(!location.exists()) {
                        downloadFile(getCacheLink(), getArchivedName());
                        unZip();
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
						deleteZIP(getArchivedName());
                } else {
                        if(!version.exists()) {
                                downloadFile(getCacheLink(), getArchivedName());
                                unZip();
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();
								deleteZIP(getArchivedName());
                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {
                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
                
                    byte[] data = new byte[BUFFER]; 
        
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

        
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Be patient... cache is downloading.&quot;);
                        }
                        drawLoadingText(100, &quot;Download finished, unzipping files...&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;Can not find archived name.&quot;);
                }
                return null;
        }



        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                    if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                    } else {
                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
						unzip(zin, getCacheDir() + e.getName());
                    }
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {
                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
		
		private void deleteZIP(String fileName) {
			File f = new File(getCacheDir() + fileName);
			if (!f.exists())
			  throw new IllegalArgumentException(
				  &quot;Delete: no such file or directory: &quot; + fileName);

			if (!f.canWrite())
			  throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + fileName);
			if (f.isDirectory()) {
			  String[] files = f.list();
			  if (files.length &gt; 0)
				throw new IllegalArgumentException(
					&quot;Delete: directory not empty: &quot; + fileName);
			}
			boolean success = f.delete();
			if (!success)
			  throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
		}
}
[/code]</description>
    
    <lastBuildDate>Tue, 10 Jan 2012 22:17:52 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="5" data-topic="428751">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/loveandpower/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Loveandpower:</div>
<blockquote>
<p>This is because the folder was zipped instead of the folder contents. This ca be resolved by zipping just the contents and then reuploading/adding new link to cachedownloader. Compile then run</p>
</blockquote>
</aside>
<p>I tested mine on both and it works fine.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/6</link>
        <pubDate>Tue, 10 Jan 2012 22:17:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-6</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>This is because the folder was zipped instead of the folder contents. This ca be resolved by zipping just the contents and then reuploading/adding new link to cachedownloader. Compile then run</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/5</link>
        <pubDate>Tue, 10 Jan 2012 17:40:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-5</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote=“Jddogg9, post:3, topic:428751”][quote author=zyle1992 link=topic=531442.msg3882911#msg3882911 date=1326183943]<br>
Why is the cache 100MB? That would be my biggest question.<br>
[/quote]</p>
<p>Does it really matter? If you can’t help answer my question then why are you posting?[/quote]</p>
<p>Perhaps if the cache were smaller, there wouldn’t be a problem.</p>
<p>EDIT: I literally made this in under 5 minutes, and it works as it should</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import java.util.Enumeration;

import java.util.zip.ZipEntry;
import java.util.zip.ZipFile;

public class ZIPDemo {
    public static void main(String[] args) throws IOException {
        final ZipFile file = new ZipFile(args[0]);
        final File destination = new File(args[1]);
        final Enumeration&lt;? extends ZipEntry&gt; entries = file.entries();
        final byte[] data = new byte[1024];
        while (entries.hasMoreElements()) {
            final ZipEntry entry = entries.nextElement();
            if (entry.isDirectory()) {
                final File dir = new File(destination + "/" + entry.getName());
                dir.mkdirs();
                continue;
            }
            final InputStream input = file.getInputStream(entry);
            final FileOutputStream fos = new FileOutputStream(destination + "/" + entry.getName());
            
            int len = 0;
            while ((len = input.read(data)) != -1) {
                fos.write(data, 0, len);
            }
            fos.close();
        }
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/4</link>
        <pubDate>Tue, 10 Jan 2012 09:53:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-4</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@Jddogg9 Jddogg9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jddogg9">@Jddogg9</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="428751">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/zyle1992/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> zyle1992:</div>
<blockquote>
<p>Why is the cache 100MB? That would be my biggest question.</p>
</blockquote>
</aside>
<p>Does it really matter? If you can’t help answer my question then why are you posting?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/3</link>
        <pubDate>Tue, 10 Jan 2012 08:35:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-3</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Why is the cache 100MB? That would be my biggest question.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/2</link>
        <pubDate>Tue, 10 Jan 2012 08:25:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
      <item>
        <title>Cache downloads to the folder, but extracts as .zip</title>
        <dc:creator><![CDATA[@Jddogg9 Jddogg9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jddogg9">@Jddogg9</a> wrote:</p>
          <blockquote>
              <p>I’ve been trying to figure out why it keeps on doing this for the past hour or so.</p>
<p>The cache I’m wanting to download is cache.zip, but inside the cache directory, it downloads cache.zip? Confusing. (Note: I quit the download at 1MB because I’m not downloading the full 100MB while zipped cache if it’s not working)</p>
<p><img src="http://phphf.kodingen.com/public_images/z21my5.png" alt width="" height=""></p>
<p>How it looks when I open the zipped file.</p>
<p><img src="http://phphf.kodingen.com/public_images/wn9gn7.png" alt width="" height=""></p>
<p>CacheDownloader.java</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

        private client client;

        private final int BUFFER = 1024;

        /*
         * Only things you need to change
         *
         */
        private final int VERSION = 1; // Version of cache
        private String cacheLink = "http://199.71.212.*/.Runited634.zip";

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
                if(!location.exists()) {
                        downloadFile(getCacheLink(), getArchivedName());
                        unZip();
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                        versionFile.close();
						deleteZIP(getArchivedName());
                } else {
                        if(!version.exists()) {
                                downloadFile(getCacheLink(), getArchivedName());
                                unZip();
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                                versionFile.close();
								deleteZIP(getArchivedName());
                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {
                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
                
                    byte[] data = new byte[BUFFER]; 
        
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

        
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, "Be patient... cache is downloading.");
                        }
                        drawLoadingText(100, "Download finished, unzipping files...");

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf('/');
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println("Can not find archived name.");
                }
                return null;
        }



        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                    if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                    } else {
                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
						unzip(zin, getCacheDir() + e.getName());
                    }
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {
                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
		
		private void deleteZIP(String fileName) {
			File f = new File(getCacheDir() + fileName);
			if (!f.exists())
			  throw new IllegalArgumentException(
				  "Delete: no such file or directory: " + fileName);

			if (!f.canWrite())
			  throw new IllegalArgumentException("Delete: write protected: " + fileName);
			if (f.isDirectory()) {
			  String[] files = f.list();
			  if (files.length &gt; 0)
				throw new IllegalArgumentException(
					"Delete: directory not empty: " + fileName);
			}
			boolean success = f.delete();
			if (!success)
			  throw new IllegalArgumentException("Delete: deletion failed");
		}
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751/1</link>
        <pubDate>Tue, 10 Jan 2012 07:53:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428751-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloads-to-the-folder-but-extracts-as-zip/428751.rss">Cache downloads to the folder, but extracts as .zip</source>
      </item>
  </channel>
</rss>
