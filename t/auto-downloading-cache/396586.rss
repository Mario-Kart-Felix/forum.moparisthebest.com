<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Auto downloading cache</title>
    <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586</link>
    <description>Hey everyone, my friend wants me to make a PI webclient for [url=http://www.moparisthebest.com/smf/index.php/topic,492977.0.html]demises recent PI release[/url] and its acting funny. Don&#39;t get me wrong, I can make a webclient out of any PI client very epically but for some reason its not downloading the cache. The sign link is set up to find the cache in the C drive and I have uploaded the cache to dirrect download on my site. Has anyone found a fix for this yet on this server?

Here is my cachedownloader and signlink if it helps.

cachedownloader.java
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;http://cache1.reizar.com/rcachev1.0.zip&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
[/code]

Signlink.java
[code]
package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink
    implements Runnable
{
    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + &quot;main_file_cache.dat&quot;);
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    

	public static String findcachedir()
    {
        String as[] = {
            &quot;c:/rcachev1.0/&quot;
        };
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = &quot;&quot;;
        for(int i = 0; i &lt; as.length; i++)
            try
            {
                String s1 = as[i];
                if(s1.length() &gt; 0)
                {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }

        return null;
    }

	
	public static String sencondDir() {
		File file = new File(&quot;c:/rcachev1.0/&quot;);
		if (!file.exists())
			file.mkdir();
		return file.toString();
	}

    private static int getuid(String s) {
        return 234523;
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}
[/code]</description>
    
    <lastBuildDate>Fri, 27 May 2011 21:37:13 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>[quote=“Loveandpower, post:9, topic:396586”]I modified the client a fair bit</p>
<p>try it now<br>
<a href="http://dl.dropbox.com/u/27893202/Masssacred%20World%20Client.rar" class="onebox" target="_blank" rel="nofollow noopener">http://dl.dropbox.com/u/27893202/Masssacred%20World%20Client.rar</a></p>
<p>works as a webclient not not a client now what the hell…[/quote]<br>
Oh well, the guy I need this for just needs the webclient so were good. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> Thanks mate.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/10</link>
        <pubDate>Fri, 27 May 2011 21:37:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-10</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>I modified the client a fair bit</p>
<p>try it now<br>
<a href="http://dl.dropbox.com/u/27893202/Masssacred%20World%20Client.rar" class="onebox" target="_blank" rel="nofollow noopener">http://dl.dropbox.com/u/27893202/Masssacred%20World%20Client.rar</a></p>
<p>works as a webclient not not a client now what the hell…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/9</link>
        <pubDate>Fri, 27 May 2011 18:41:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-9</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p><a href="http://pastebin.com/iCAaWr9t" class="onebox" target="_blank" rel="nofollow noopener">http://pastebin.com/iCAaWr9t</a><br>
Try that.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/8</link>
        <pubDate>Fri, 27 May 2011 10:07:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-8</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>When its trying to download the cache it just has a black screen and doesn’t do anything, I have tried waiting to see if it was downloading the cache and just didn’t have the bar but it didn’t download any files to the area it was set too.</p>
<p><a href="http://pastebin.com/0gHjVT9R" class="onebox" target="_blank" rel="nofollow noopener">http://pastebin.com/0gHjVT9R</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/7</link>
        <pubDate>Fri, 27 May 2011 10:03:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-7</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>It show’s the ‘Starting  Up’ part of the loading bar&amp; the Cache downloading process, what exactly is your error? do you not see the Cache downloading bar?<br>
Well actually, just post your RSApplet on pastebin.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/6</link>
        <pubDate>Fri, 27 May 2011 09:59:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-6</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="396586">
<div class="title">
<div class="quote-controls"></div>
 ExtremeX-Scape™:</div>
<blockquote>
<p>It shows the loading bar xD.</p>
</blockquote>
</aside>
<p>Oh xD, sorry im retarded on the client side of coding. :3</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/5</link>
        <pubDate>Fri, 27 May 2011 09:43:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-5</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>It shows the loading bar xD.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/4</link>
        <pubDate>Fri, 27 May 2011 08:48:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-4</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>[quote=“ExtremeX-Scape™, post:2, topic:396586”]Does the RSApplet have this entire method?</p>
<pre><code class="lang-auto"></code></pre>
<p>Nope, is that the method used to start the cachedownloader class?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/3</link>
        <pubDate>Fri, 27 May 2011 08:12:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-3</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Does the RSApplet have this entire method?</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/2</link>
        <pubDate>Fri, 27 May 2011 08:05:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-2</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
      <item>
        <title>Auto downloading cache</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>Hey everyone, my friend wants me to make a PI webclient for <a href="http://www.moparisthebest.com/smf/index.php/topic,492977.0.html" data-bbcode="true" rel="nofollow noopener">demises recent PI release</a> and its acting funny. Don’t get me wrong, I can make a webclient out of any PI client very epically but for some reason its not downloading the cache. The sign link is set up to find the cache in the C drive and I have uploaded the cache to dirrect download on my site. Has anyone found a fix for this yet on this server?</p>
<p>Here is my cachedownloader and signlink if it helps.</p>
<p>cachedownloader.java</p>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 1; // Version of cache
	private String cacheLink = "http://cache1.reizar.com/rcachev1.0.zip"; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
		
		if(!location.exists()) {
			//drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
		} else {
			if(!version.exists()) {
				//drawLoadingText("Downloading Cache Please wait...");
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println("UNZIP");

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + "/" +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

			}

			System.out.println(localFileName + "\t" + numWritten);
			drawLoadingText("Finished downloading "+getArchivedName()+"!");

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf('/');
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println("error retreiving archivaed name.");
		}
		return "";
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println("unzipping2 " + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println("unzipping " + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}</code></pre>
<p>Signlink.java</p>
<pre><code class="lang-auto">package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink
    implements Runnable
{
    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

    public void run()
    {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try
        {
            File file = new File(s + "main_file_cache.dat");
            if(file.exists() &amp;&amp; file.length() &gt; 0x3200000L)
                file.delete();
            cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
            for(int j = 0; j &lt; 5; j++)
                cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");

        }
        catch(Exception exception)
        {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = "unknown";
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println("urlstream");
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    

	public static String findcachedir()
    {
        String as[] = {
            "c:/rcachev1.0/"
        };
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = "";
        for(int i = 0; i &lt; as.length; i++)
            try
            {
                String s1 = as[i];
                if(s1.length() &gt; 0)
                {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + "/";
            }
            catch(Exception _ex) { }

        return null;
    }

	
	public static String sencondDir() {
		File file = new File("c:/rcachev1.0/");
		if (!file.exists())
			file.mkdir();
		return file.toString();
	}

    private static int getuid(String s) {
        return 234523;
    }

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException("could not open socket");
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException("could not open: " + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = "sound" + wavepos + ".wav";
            return true;
        }
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = "sound" + wavepos + ".wav";
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = "jingle" + midipos + ".mid";
        }
    }

    public static void reporterror(String s)
    {
        System.out.println("Error: " + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
    public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = "";

}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-downloading-cache/396586/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-downloading-cache/396586/1</link>
        <pubDate>Fri, 27 May 2011 04:42:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-396586-1</guid>
        <source url="https://forum.moparisthebest.com/t/auto-downloading-cache/396586.rss">Auto downloading cache</source>
      </item>
  </channel>
</rss>
