<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Decoding Help</title>
    <link>https://forum.moparisthebest.com/t/decoding-help/542665</link>
    <description>I am currently trying to get the LoginDecoder to work but for some reason, it will not work. 

LoginDecoder:
[CODE]
package com.runescape.revised.logic.net.packets.codec.login;

import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.handler.codec.frame.FrameDecoder;

import com.runescape.revised.logic.net.packets.PacketSystem;
import com.runescape.revised.logic.net.packets.codec.login.impl.Request;
import com.runescape.revised.logic.net.packets.codec.login.impl.UserAuthentication;

public class LoginDecoder extends FrameDecoder {
	
	private LoginState loginState;
	private static ConnectionType connectionType;

	/*
	 * (non-Javadoc)
	 * @see org.jboss.netty.handler.codec.frame.FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.Channel, org.jboss.netty.buffer.ChannelBuffer)
	 */
	@Override
	protected Object decode(ChannelHandlerContext chc, Channel channel, ChannelBuffer channelBuffer) throws Exception {
		System.out.println(&quot;Throwing Request login packet&quot;);
		PacketSystem.getPacketSystem().throwPacket(new Request(), channel);
		System.out.println(&quot;Throwing UserAuthentication login packet&quot;);
		PacketSystem.getPacketSystem().throwPacket(new UserAuthentication(), channel);
		return null;
	}

	public void setLoginState(LoginState loginState) {
		this.loginState = loginState;
	}

	public LoginState getLoginState() {
		return this.loginState;
	}

	public static void setConnectionType(ConnectionType connectionType) {
		LoginDecoder.connectionType = connectionType;
	}

	public static ConnectionType getConnectionType() {
		return LoginDecoder.connectionType;
	}
}
[/CODE]

Request:
[CODE]
package com.runescape.revised.logic.net.packets.codec.login.impl;

import org.jboss.netty.channel.Channel;

// import com.runescape.revised.logic.net.packets.PacketBuffer;
import com.runescape.revised.logic.net.packets.VariableType;
// import com.runescape.revised.logic.net.packets.codec.login.ConnectionType;
// import com.runescape.revised.logic.net.packets.codec.login.LoginDecoder;
import com.runescape.revised.logic.net.packets.codec.login.LoginPacket;

public class Request extends LoginPacket {

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#executePacket(org.jboss.netty.buffer.ChannelBuffer, org.jboss.netty.channel.Channel)
	 */
	@Override
	public void executePacket(Channel channel) {
		// channel.write(new PacketBuffer().writeByte((byte) 0));
		// LoginDecoder.setConnectionType(ConnectionType.NEW_CONNECTION);
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getOpcode()
	 */
	@Override
	public short getOpcode() {
		// TODO Auto-generated method stub
		return 14;
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getSize()
	 */
	@Override
	public byte getSize() {
		// TODO Auto-generated method stub
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getVariableType()
	 */
	@Override
	public VariableType getVariableType() {
		// TODO Auto-generated method stub
		return null;
	}
}
[/CODE]

PacketSystem:
[CODE]
package com.runescape.revised.logic.net.packets;

import org.jboss.netty.channel.Channel;

import com.runescape.revised.logic.LogicSystem;

public class PacketSystem extends LogicSystem {

	private static PacketSystem packetSystem;
	
	public PacketSystem() {}
	
	public void throwPacket(Packet packet, Channel channel) {
		packet.executePacket(channel);
	}

	public static void setPacketSystem(PacketSystem packetSystem) {
		PacketSystem.packetSystem = packetSystem;
	}

	public static PacketSystem getPacketSystem() {
		if (PacketSystem.packetSystem == null) {
			PacketSystem.setPacketSystem(new PacketSystem());
		}
		return PacketSystem.packetSystem;
	}
}
[/CODE]

UserAuthentication:
[CODE]
package com.runescape.revised.logic.net.packets.codec.login.impl;

import org.jboss.netty.channel.Channel;

// import com.runescape.revised.logic.net.packets.PacketBuffer;
import com.runescape.revised.logic.net.packets.VariableType;
import com.runescape.revised.logic.net.packets.codec.game.GameDecoder;
import com.runescape.revised.logic.net.packets.codec.login.ConnectionType;
import com.runescape.revised.logic.net.packets.codec.login.Login;
import com.runescape.revised.logic.net.packets.codec.login.LoginDecoder;
import com.runescape.revised.logic.net.packets.codec.login.LoginPacket;

public class UserAuthentication extends LoginPacket {

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#executePacket(org.jboss.netty.buffer.ChannelBuffer, org.jboss.netty.channel.Channel)
	 */
	@Override
	public void executePacket(Channel channel) {
		System.out.println(&quot;Now logging in...&quot;);
		// channel.write(new PacketBuffer().writeByte((byte) 2).writeByte((byte) 0).writeByte((byte) 0));
		new Login(channel/*, (short) version, name, pass*/);
		channel.getPipeline().replace(&quot;decoder&quot;, &quot;decoder&quot;, new GameDecoder(null));
		// player.write(new PacketBuilder(249).putByteA(1).putLEShortA(player.getIndex()).toPacket());
		// player.write(new PacketBuilder(107).toPacket());
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getOpcode()
	 */
	@Override
	public short getOpcode() {
		// TODO Auto-generated method stub
		if (LoginDecoder.getConnectionType() == ConnectionType.NEW_CONNECTION) {
			return 16;
		}
		return 18;
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getSize()
	 */
	@Override
	public byte getSize() {
		// TODO Auto-generated method stub
		return 0;
	}

	/*
	 * (non-Javadoc)
	 * @see com.runescape.revised.logic.net.packets.Packet#getVariableType()
	 */
	@Override
	public VariableType getVariableType() {
		// TODO Auto-generated method stub
		return null;
	}
}
[/CODE]

ServerChannelHandler:
[CODE]
package com.runescape.revised.logic.net.netty;

import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelStateEvent;
import org.jboss.netty.channel.ExceptionEvent;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SimpleChannelHandler;

import com.runescape.revised.logic.net.packets.Packet;
import com.runescape.revised.logic.net.packets.PacketSystem;

public class ServerChannelHandler extends SimpleChannelHandler {
	
	/*
	 * (non-Javadoc)
	 * @see org.jboss.netty.channel.SimpleChannelHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ExceptionEvent)
	 */
	@Override
	public void exceptionCaught(ChannelHandlerContext chc, ExceptionEvent e) throws Exception {}
	
	/*
	 * (non-Javadoc)
	 * @see org.jboss.netty.channel.SimpleChannelHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.MessageEvent)
	 */
	@Override
	public void messageReceived(ChannelHandlerContext chc, MessageEvent e) throws Exception {
		PacketSystem.getPacketSystem().throwPacket((Packet) e.getMessage(), chc.getChannel());
	}
	
	/*
	 * (non-Javadoc)
	 * @see org.jboss.netty.channel.SimpleChannelHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ChannelStateEvent)
	 */
	@Override
	public void channelConnected(ChannelHandlerContext chc, ChannelStateEvent e) {}
	
	/*
	 * (non-Javadoc)
	 * @see org.jboss.netty.channel.SimpleChannelHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ChannelStateEvent)
	 */
	@Override
	public void channelClosed(ChannelHandlerContext chc, ChannelStateEvent e) throws Exception {}
}
[/CODE]

I have done some debugging within the server as well as the client. Within the client, it doesn&#39;t get past &quot;looping through eight times&quot;. Also, whenever I try to add the below response code (?) to the executePacket method within the Request class, it won&#39;t load through to the UserAuthentication class - it&#39;ll stop at Request and will not go any further. If I don&#39;t add anything to the Request class, it&#39;ll go through.
[CODE]
channel.write(new PacketBuffer().writeByte((byte) 0));
[/CODE]

Client:
[CODE]
	private void login(String s, String s1, boolean flag)
	{
		Signlink.errorname = s;
		try
		{
			if(!flag)
			{
				System.out.println(&quot;Flag is false&quot;);
				loginMessage1 = &quot;&quot;;
				loginMessage2 = &quot;Connecting to server...&quot;;
				drawLoginScreen(true);
			}
			socketStream = new Connection(this, openSocket(43594 + portOff));
			long l = TextClass.longForName(s);
			int i = (int)(l &gt;&gt; 16 &amp; 31L);
			stream.currentOffset = 0;
			System.out.println(&quot;Checking request #14&quot;);
			stream.writeWordBigEndian(14);
			System.out.println(&quot;Writing the name as int&quot;);
			stream.writeWordBigEndian(i);
			System.out.println(&quot;Queue bytes - 2&quot;);
			socketStream.queueBytes(2, stream.buffer);
			System.out.println(&quot;Looping through 8 times&quot;);
			for(int j = 0; j &lt; 8; j++)
				socketStream.read();
			System.out.println(&quot;k&quot;);
			int k = socketStream.read();
			int i1 = k;
			if(k == 0)
			{
				System.out.println(&quot;0&quot;);
				socketStream.flushInputStream(inStream.buffer, 8);
				inStream.currentOffset = 0;
				aLong1215 = inStream.readQWord();
				int ai[] = new int[4];
				ai[0] = (int)(Math.random() * 99999999D);
				ai[1] = (int)(Math.random() * 99999999D);
				ai[2] = (int)(aLong1215 &gt;&gt; 32);
				ai[3] = (int)aLong1215;
				stream.currentOffset = 0;
				stream.writeWordBigEndian(10);
				stream.writeDWord(ai[0]);
				stream.writeDWord(ai[1]);
				stream.writeDWord(ai[2]);
				stream.writeDWord(ai[3]);
				stream.writeDWord(Signlink.uid);
				stream.writeString(s);
				stream.writeString(s1);
				stream.doKeys();
				aStream_847.currentOffset = 0;
				if(flag)
					aStream_847.writeWordBigEndian(18);
				else
					aStream_847.writeWordBigEndian(16);
				aStream_847.writeWordBigEndian(stream.currentOffset + 36 + 1 + 1 + 2);
				aStream_847.writeWordBigEndian(255);
				aStream_847.writeWord(317);
				aStream_847.writeWordBigEndian(lowMem ? 1 : 0);
				for(int l1 = 0; l1 &lt; 9; l1++)
					aStream_847.writeDWord(expectedCRCs[l1]);

				aStream_847.writeBytes(stream.buffer, stream.currentOffset, 0);
				stream.encryption = new ISAACRandomGen(ai);
				for(int j2 = 0; j2 &lt; 4; j2++)
					ai[j2] += 50;

				encryption = new ISAACRandomGen(ai);
				socketStream.queueBytes(aStream_847.currentOffset, aStream_847.buffer);
				k = socketStream.read();
			}
[/CODE]

Any ideas?</description>
    
    <lastBuildDate>Tue, 29 Apr 2014 23:06:41 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/decoding-help/542665.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Decoding Help</title>
        <dc:creator><![CDATA[@Rodrigues Rodrigues]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rodrigues">@Rodrigues</a> wrote:</p>
          <blockquote>
              <p>I am currently trying to get the LoginDecoder to work but for some reason, it will not work.</p>
<p>LoginDecoder:</p>
<p>[CODE]<br>
package com.runescape.revised.logic.net.packets.codec.login;</p>
<p>import org.jboss.netty.buffer.ChannelBuffer;<br>
import org.jboss.netty.channel.Channel;<br>
import org.jboss.netty.channel.ChannelHandlerContext;<br>
import org.jboss.netty.handler.codec.frame.FrameDecoder;</p>
<p>import com.runescape.revised.logic.net.packets.PacketSystem;<br>
import com.runescape.revised.logic.net.packets.codec.login.impl.Request;<br>
import com.runescape.revised.logic.net.packets.codec.login.impl.UserAuthentication;</p>
<p>public class LoginDecoder extends FrameDecoder {</p>
<pre><code>private LoginState loginState;
private static ConnectionType connectionType;

/*
 * (non-Javadoc)
 * @see org.jboss.netty.handler.codec.frame.FrameDecoder#decode(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.Channel, org.jboss.netty.buffer.ChannelBuffer)
 */
@Override
protected Object decode(ChannelHandlerContext chc, Channel channel, ChannelBuffer channelBuffer) throws Exception {
	System.out.println("Throwing Request login packet");
	PacketSystem.getPacketSystem().throwPacket(new Request(), channel);
	System.out.println("Throwing UserAuthentication login packet");
	PacketSystem.getPacketSystem().throwPacket(new UserAuthentication(), channel);
	return null;
}

public void setLoginState(LoginState loginState) {
	this.loginState = loginState;
}

public LoginState getLoginState() {
	return this.loginState;
}

public static void setConnectionType(ConnectionType connectionType) {
	LoginDecoder.connectionType = connectionType;
}

public static ConnectionType getConnectionType() {
	return LoginDecoder.connectionType;
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>Request:</p>
<p>[CODE]<br>
package com.runescape.revised.logic.net.packets.codec.login.impl;</p>
<p>import org.jboss.netty.channel.Channel;</p>
<p>// import com.runescape.revised.logic.net.packets.PacketBuffer;<br>
import com.runescape.revised.logic.net.packets.VariableType;<br>
// import com.runescape.revised.logic.net.packets.codec.login.ConnectionType;<br>
// import com.runescape.revised.logic.net.packets.codec.login.LoginDecoder;<br>
import com.runescape.revised.logic.net.packets.codec.login.LoginPacket;</p>
<p>public class Request extends LoginPacket {</p>
<pre><code>/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#executePacket(org.jboss.netty.buffer.ChannelBuffer, org.jboss.netty.channel.Channel)
 */
@Override
public void executePacket(Channel channel) {
	// channel.write(new PacketBuffer().writeByte((byte) 0));
	// LoginDecoder.setConnectionType(ConnectionType.NEW_CONNECTION);
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getOpcode()
 */
@Override
public short getOpcode() {
	// TODO Auto-generated method stub
	return 14;
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getSize()
 */
@Override
public byte getSize() {
	// TODO Auto-generated method stub
	return 0;
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getVariableType()
 */
@Override
public VariableType getVariableType() {
	// TODO Auto-generated method stub
	return null;
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>PacketSystem:</p>
<p>[CODE]<br>
package com.runescape.revised.logic.net.packets;</p>
<p>import org.jboss.netty.channel.Channel;</p>
<p>import com.runescape.revised.logic.LogicSystem;</p>
<p>public class PacketSystem extends LogicSystem {</p>
<pre><code>private static PacketSystem packetSystem;

public PacketSystem() {}

public void throwPacket(Packet packet, Channel channel) {
	packet.executePacket(channel);
}

public static void setPacketSystem(PacketSystem packetSystem) {
	PacketSystem.packetSystem = packetSystem;
}

public static PacketSystem getPacketSystem() {
	if (PacketSystem.packetSystem == null) {
		PacketSystem.setPacketSystem(new PacketSystem());
	}
	return PacketSystem.packetSystem;
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>UserAuthentication:</p>
<p>[CODE]<br>
package com.runescape.revised.logic.net.packets.codec.login.impl;</p>
<p>import org.jboss.netty.channel.Channel;</p>
<p>// import com.runescape.revised.logic.net.packets.PacketBuffer;<br>
import com.runescape.revised.logic.net.packets.VariableType;<br>
import com.runescape.revised.logic.net.packets.codec.game.GameDecoder;<br>
import com.runescape.revised.logic.net.packets.codec.login.ConnectionType;<br>
import com.runescape.revised.logic.net.packets.codec.login.Login;<br>
import com.runescape.revised.logic.net.packets.codec.login.LoginDecoder;<br>
import com.runescape.revised.logic.net.packets.codec.login.LoginPacket;</p>
<p>public class UserAuthentication extends LoginPacket {</p>
<pre><code>/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#executePacket(org.jboss.netty.buffer.ChannelBuffer, org.jboss.netty.channel.Channel)
 */
@Override
public void executePacket(Channel channel) {
	System.out.println("Now logging in...");
	// channel.write(new PacketBuffer().writeByte((byte) 2).writeByte((byte) 0).writeByte((byte) 0));
	new Login(channel/*, (short) version, name, pass*/);
	channel.getPipeline().replace("decoder", "decoder", new GameDecoder(null));
	// player.write(new PacketBuilder(249).putByteA(1).putLEShortA(player.getIndex()).toPacket());
	// player.write(new PacketBuilder(107).toPacket());
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getOpcode()
 */
@Override
public short getOpcode() {
	// TODO Auto-generated method stub
	if (LoginDecoder.getConnectionType() == ConnectionType.NEW_CONNECTION) {
		return 16;
	}
	return 18;
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getSize()
 */
@Override
public byte getSize() {
	// TODO Auto-generated method stub
	return 0;
}

/*
 * (non-Javadoc)
 * @see com.runescape.revised.logic.net.packets.Packet#getVariableType()
 */
@Override
public VariableType getVariableType() {
	// TODO Auto-generated method stub
	return null;
}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>ServerChannelHandler:</p>
<p>[CODE]<br>
package com.runescape.revised.logic.net.netty;</p>
<p>import org.jboss.netty.channel.ChannelHandlerContext;<br>
import org.jboss.netty.channel.ChannelStateEvent;<br>
import org.jboss.netty.channel.ExceptionEvent;<br>
import org.jboss.netty.channel.MessageEvent;<br>
import org.jboss.netty.channel.SimpleChannelHandler;</p>
<p>import com.runescape.revised.logic.net.packets.Packet;<br>
import com.runescape.revised.logic.net.packets.PacketSystem;</p>
<p>public class ServerChannelHandler extends SimpleChannelHandler {</p>
<pre><code>/*
 * (non-Javadoc)
 * @see org.jboss.netty.channel.SimpleChannelHandler#exceptionCaught(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ExceptionEvent)
 */
@Override
public void exceptionCaught(ChannelHandlerContext chc, ExceptionEvent e) throws Exception {}

/*
 * (non-Javadoc)
 * @see org.jboss.netty.channel.SimpleChannelHandler#messageReceived(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.MessageEvent)
 */
@Override
public void messageReceived(ChannelHandlerContext chc, MessageEvent e) throws Exception {
	PacketSystem.getPacketSystem().throwPacket((Packet) e.getMessage(), chc.getChannel());
}

/*
 * (non-Javadoc)
 * @see org.jboss.netty.channel.SimpleChannelHandler#channelConnected(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ChannelStateEvent)
 */
@Override
public void channelConnected(ChannelHandlerContext chc, ChannelStateEvent e) {}

/*
 * (non-Javadoc)
 * @see org.jboss.netty.channel.SimpleChannelHandler#channelClosed(org.jboss.netty.channel.ChannelHandlerContext, org.jboss.netty.channel.ChannelStateEvent)
 */
@Override
public void channelClosed(ChannelHandlerContext chc, ChannelStateEvent e) throws Exception {}
</code></pre>
<p>}<br>
[/CODE]</p>
<p>I have done some debugging within the server as well as the client. Within the client, it doesn’t get past “looping through eight times”. Also, whenever I try to add the below response code (?) to the executePacket method within the Request class, it won’t load through to the UserAuthentication class - it’ll stop at Request and will not go any further. If I don’t add anything to the Request class, it’ll go through.</p>
<p><code>
channel.write(new PacketBuffer().writeByte((byte) 0));
</code></p>
<p>Client:</p>
<p>[CODE]<br>
private void login(String s, String s1, boolean flag)<br>
{<br>
Signlink.errorname = s;<br>
try<br>
{<br>
if(!flag)<br>
{<br>
System.out.println(“Flag is false”);<br>
loginMessage1 = “”;<br>
loginMessage2 = “Connecting to server…”;<br>
drawLoginScreen(true);<br>
}<br>
socketStream = new Connection(this, openSocket(43594 + portOff));<br>
long l = TextClass.longForName(s);<br>
int i = (int)(l &gt;&gt; 16 &amp; 31L);<br>
stream.currentOffset = 0;<br>
System.out.println(“Checking request <span class="hashtag">#14</span>”);<br>
stream.writeWordBigEndian(14);<br>
System.out.println(“Writing the name as int”);<br>
stream.writeWordBigEndian(i);<br>
System.out.println(“Queue bytes - 2”);<br>
socketStream.queueBytes(2, stream.buffer);<br>
System.out.println(“Looping through 8 times”);<br>
for(int j = 0; j &lt; 8; j++)<br>
socketStream.read();<br>
System.out.println(“k”);<br>
int k = socketStream.read();<br>
int i1 = k;<br>
if(k == 0)<br>
{<br>
System.out.println(“0”);<br>
socketStream.flushInputStream(inStream.buffer, 8);<br>
inStream.currentOffset = 0;<br>
aLong1215 = inStream.readQWord();<br>
int ai[] = new int[4];<br>
ai[0] = (int)(Math.random() * 99999999D);<br>
ai[1] = (int)(Math.random() * 99999999D);<br>
ai[2] = (int)(aLong1215 &gt;&gt; 32);<br>
ai[3] = (int)aLong1215;<br>
stream.currentOffset = 0;<br>
stream.writeWordBigEndian(10);<br>
stream.writeDWord(ai[0]);<br>
stream.writeDWord(ai[1]);<br>
stream.writeDWord(ai[2]);<br>
stream.writeDWord(ai[3]);<br>
stream.writeDWord(Signlink.uid);<br>
stream.writeString(s);<br>
stream.writeString(s1);<br>
stream.doKeys();<br>
aStream_847.currentOffset = 0;<br>
if(flag)<br>
aStream_847.writeWordBigEndian(18);<br>
else<br>
aStream_847.writeWordBigEndian(16);<br>
aStream_847.writeWordBigEndian(stream.currentOffset + 36 + 1 + 1 + 2);<br>
aStream_847.writeWordBigEndian(255);<br>
aStream_847.writeWord(317);<br>
aStream_847.writeWordBigEndian(lowMem ? 1 : 0);<br>
for(int l1 = 0; l1 &lt; 9; l1++)<br>
aStream_847.writeDWord(expectedCRCs[l1]);</p>
<pre><code>			aStream_847.writeBytes(stream.buffer, stream.currentOffset, 0);
			stream.encryption = new ISAACRandomGen(ai);
			for(int j2 = 0; j2 &lt; 4; j2++)
				ai[j2] += 50;

			encryption = new ISAACRandomGen(ai);
			socketStream.queueBytes(aStream_847.currentOffset, aStream_847.buffer);
			k = socketStream.read();
		}
</code></pre>
<p>[/CODE]</p>
<p>Any ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/decoding-help/542665/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/decoding-help/542665/1</link>
        <pubDate>Tue, 29 Apr 2014 23:06:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542665-1</guid>
        <source url="https://forum.moparisthebest.com/t/decoding-help/542665.rss">Decoding Help</source>
      </item>
  </channel>
</rss>
