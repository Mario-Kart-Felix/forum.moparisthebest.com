<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>RSA encryption on the login block</title>
    <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734</link>
    <description>As simple as it is to enable RSA on a client and server, it is very rarely done and because of this, only endangers you more than helps you. It sounds like something as small as encrypting the login block with RSA wouldn&#39;t help at all - or that just using ISAAC cipher protects you, but both of these statements are wrong. They work hand in hand - the encrypted login block prevents your username and password from being sniffed, and also prevents unwanted eyes from viewing the generated ISAAC keys, which prevents packet injection by encrypting the packet opcodes.

I&#39;m not going to bore you with the details, so if you want to know more into why exactly [b]RSA should be enabled[/b], check out this thread: [url=http://google.com/runescape-development/rs-503-client-server/informative-threads/134817-why-rsa-isaac-should-not-removed.html]http://google.com/runescape-development/rs-503-client-server/informative-threads/134817-why-rsa-isaac-should-not-removed.html[/url]


In (almost) all clients, where RSA is performed can be found in the following methods:
[code]
Original: Class30_Sub2_Sub2.method423(BigInteger biginteger, BigInteger biginteger1, byte byte0)
Renamed: Stream.doKeys()
[/code]

In the original client, the parameters passed to it are equal to
[code]
biginteger: public key
biginteger1: modulus
[/code]
And they are stored at:
[code]
public key: client.aBigInteger1032
modulus: client.aBigInteger856

(they were removed from the renamed client. 
You can&#39;t do anything with the ones in the original, anyway. Just for reference!)
[/code]


[size=14pt][b]Convenience RSA class[/b][/size]

This is a class I wrote for server side RSA, which can encrypt/decrypt and generate + save keys.

[b]java rs.security.RSA[/b] would generate key files (public.key, private.key) into the folder [b]data/keys/[/b]

You [b]will need both a private and public key[/b] - the private key is used by the server and the public key by the client. The RSA class provided generates both in BigInteger form to the files generated. The public key is used to encrypt data, while the private key is [b]secret[/b] and is used to decrypt what the client sent (the login block!)
In the generated files (public.key and private.key), the first line is the modulus (both keys will have the same modulus) and the second line is the key (or exponent) for the public or private key.

[code]
package rs.security;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

public class RSA {

	/**
	 * Where keys are stored at for the server/client
	 */
	private static final String KEYSTORE = &quot;data/keys/&quot;;

	/**
	 * RSA instance
	 */
	private static final RSA rsa = new RSA();

	/**
	 * The public key
	 */
	private BigInteger publicKey;

	/**
	 * The private key
	 */
	private BigInteger privateKey;

	/**
	 * The keys&#39; modulus
	 */
	private BigInteger modulus;

	public RSA() {
		loadKeys();
	}

	/**
	 * @return
	 */
	public static RSA getInstance() {
		return rsa;
	}

	/**
	 * Encrypt a byte array using RSA
	 *
	 * @param raw
	 * @return
	 */
	public byte[] encrypt(byte[] raw) {
		BigInteger block = new BigInteger(raw);
		block = block.modPow(publicKey, modulus);

		// :-)
		return block.toByteArray();
	}

	/**
	 * Decrypt an encrypted RSA block
	 *
	 * @param encrypted
	 * @return
	 */
	public byte[] decrypt(byte[] encrypted) {
		BigInteger block = new BigInteger(encrypted);
		block = block.modPow(privateKey, modulus);

		// OK
		return block.toByteArray();
	}

	/**
	 * Load the private keys
	 */
	public void loadKeys() {
		try {
			File publicStore = new File(KEYSTORE + &quot;public.key&quot;);
			File privateStore = new File(KEYSTORE + &quot;private.key&quot;);

			// if it doesn&#39;t exist.. wat do?
			if (!privateStore.exists() || !publicStore.exists()) {
				throw new RuntimeException(&quot;Both keyfiles do not exist!&quot;);
			}

			// attempt to read the file
			BufferedReader reader = new BufferedReader(new FileReader(privateStore));

			// read in the big ints
			this.modulus = new BigInteger(reader.readLine());
			this.privateKey = new BigInteger(reader.readLine());

			// OK!
			reader.close();

			// read public file
			reader = new BufferedReader(new FileReader(publicStore));

			// ignore modulus
			reader.readLine();
			this.publicKey = new BigInteger(reader.readLine());

			reader.close();

			System.out.println(&quot;Loaded RSA keys&quot;);
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Generate and save a 2048 bit RSA key
	 */
	public void generateAndSaveRSAKeys() {
		System.out.println(&quot;Generating a 2048-bit RSA key&quot;);

		try {
			// initialize a 2048 bit key
			KeyPairGenerator generator = KeyPairGenerator.getInstance(&quot;RSA&quot;);
			generator.initialize(2048, new SecureRandom());

			// generate a keypair
			KeyPair keyPair = generator.generateKeyPair();

			// create usable keys to write out
			KeyFactory factory = KeyFactory.getInstance(&quot;RSA&quot;);

			// the public key
			RSAPublicKeySpec publicKey = factory.getKeySpec(keyPair.getPublic(), RSAPublicKeySpec.class);

			// the private key
			RSAPrivateKeySpec privateKey = factory.getKeySpec(keyPair.getPrivate(), RSAPrivateKeySpec.class);

			System.out.println(&quot;Saving key files...&quot;);

			// Save the keys
			saveKey(KEYSTORE + &quot;public.key&quot;, publicKey.getModulus(), publicKey.getPublicExponent());
			saveKey(KEYSTORE + &quot;private.key&quot;, privateKey.getModulus(), privateKey.getPrivateExponent());

			System.out.println(&quot;Done!&quot;);
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Save a key to the file
	 *
	 * @param fileName
	 * @param modulus
	 * @param exponent
	 */
	public void saveKey(String fileName, BigInteger modulus, BigInteger exponent) {
		try {
			// if the file already exists, delete it
			File file = new File(fileName);
			if (file.exists()) {
				file.delete();
			}

			FileWriter writer = new FileWriter(file);

			writer.write(modulus.toString() + &quot;\n&quot;);
			writer.write(exponent.toString() + &quot;\n&quot;);
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Generate a 2048-bit public/private RSA keypair
	 *
	 * @param args
	 */
	public static void main(String[] args) {
		getInstance().generateAndSaveRSAKeys();
	}

}

[/code]


[size=14pt][b]Enabling RSA on both the Client and Server[/b][/size]

[b]Client[/b]
In the Stream class, a line will be commented out for a BigInteger.modPow(). In the renamed client, literally this:
[code]
BigInteger biginteger3 = biginteger2/*.modPow(biginteger, biginteger1)*/;
[/code]

You simply need to add the modPow back and define your public key (biginteger) and modulus (biginteger1). Then the login block will be encrypted.

[b]Server[/b]
Server source used here is RuneSource, but can apply to any source.

The &quot;login block&quot; that is encrypted encompasses the following data sent immediately after the 9 CRC keys are sent:
[code]
byte - Magic number, 10, to ensure the login block was decrypted correctly
long - client&#39;s session key (for ISAAC)
long - server&#39;s session key (for ISAAC)
String - username
String - password
[/code]

So that means the RSA block boils down to:

[code]
/* Read 9 CRC keys */

// RSA begin
int rsaLength = in.readByte(false); // RSA block length

// Length 0 is not acceptable :-)
if (rsaLength == 0) {
	disconnect();
	return;
}

// read in the encrypted RSA block
byte[] rsaBlock = in.readBytes(rsaLength);

// decrypt the block
byte[] decryptedBlock = RSA.getInstance().decrypt(rsaBlock);

// create a buffer to read from the decrypted data
StreamBuffer.InBuffer blockBuffer = StreamBuffer.newInBuffer(ByteBuffer.wrap(decryptedBlock));

// Validate that the RSA block was decrypted properly.
int magicNumber = blockBuffer.readByte();

if (magicNumber != 10) {
	// The RSA block was not decrypted properly
	disconnect();
	return;
}

/* Read in client session key down to password from the blockBuffer */
// RSA end
[/code]


Now how easy is that? Instead of leaving out RSA encryption, leaving it in may prove to be helpful to you someday, especially if your server grows larger than a small server.</description>
    
    <lastBuildDate>Sat, 24 Sep 2011 20:52:08 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@_Discardedx21 `Discardedx2`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_discardedx21">@_Discardedx21</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:7, topic:415734”][quote author=<code>Discardedx2</code> link=topic=517676.msg3761019#msg3761019 date=1316879911]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+</p>
</blockquote>
</aside>
<p>Except that’s not the reason it wasn’t enabled.</p>
<p>For it to be enabled (as-is) he would have needed Jagex’s private key. And even if he supplied his own, it wouldn’t match with the server-side key (assuming when you say “bot” you’re talking about on the official server).</p>
<p>You can’t enable/disable ISAAC, because it is a cipher algorithm. Sure you could remove the use of the cipher from the server/client, but that would be erroneous because it would require more work than just copying the class.</p>
</blockquote>
</aside>
<p>ofc you can disable ISAAC. you find the cipher class and where it gets the keys from the two arrays (returns a value from either array) you make it return 0 (so there will be no pseudo-random value added to the packet opcode)<br>
[/quote]</p>
<p>Then it’s no longer ISAAC, because no ciphering is going on. At that point, you can just replace the getNextKey() references with 0 and the affect will be the same. And since it is 0, there’s no point in calling the method.[/quote]</p>
<p>obviously… hence disabling, you just proved your own point wrong</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/8</link>
        <pubDate>Sat, 24 Sep 2011 20:52:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-8</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote="<code>Discardedx2</code>, post:6, topic:415734"][quote author=zyle1992 link=topic=517676.msg3760771#msg3760771 date=1316851748]</p>
<aside class="quote">
<blockquote>
<p>this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+</p>
</blockquote>
</aside>
<p>Except that’s not the reason it wasn’t enabled.</p>
<p>For it to be enabled (as-is) he would have needed Jagex’s private key. And even if he supplied his own, it wouldn’t match with the server-side key (assuming when you say “bot” you’re talking about on the official server).</p>
<p>You can’t enable/disable ISAAC, because it is a cipher algorithm. Sure you could remove the use of the cipher from the server/client, but that would be erroneous because it would require more work than just copying the class.<br>
[/quote]</p>
<p>ofc you can disable ISAAC. you find the cipher class and where it gets the keys from the two arrays (returns a value from either array) you make it return 0 (so there will be no pseudo-random value added to the packet opcode)[/quote]</p>
<p>Then it’s no longer ISAAC, because no ciphering is going on. At that point, you can just replace the getNextKey() references with 0 and the affect will be the same. And since it is 0, there’s no point in calling the method.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/7</link>
        <pubDate>Sat, 24 Sep 2011 17:13:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-7</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@_Discardedx21 `Discardedx2`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_discardedx21">@_Discardedx21</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:4, topic:415734”][quote author=<code>Discardedx2</code> link=topic=517676.msg3760518#msg3760518 date=1316828621]<br>
this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+<br>
[/quote]</p>
<p>Except that’s not the reason it wasn’t enabled.</p>
<p>For it to be enabled (as-is) he would have needed Jagex’s private key. And even if he supplied his own, it wouldn’t match with the server-side key (assuming when you say “bot” you’re talking about on the official server).</p>
<p>You can’t enable/disable ISAAC, because it is a cipher algorithm. Sure you could remove the use of the cipher from the server/client, but that would be erroneous because it would require more work than just copying the class.[/quote]</p>
<p>ofc you can disable ISAAC. you find the cipher class and where it gets the keys from the two arrays (returns a value from either array) you make it return 0 (so there will be no pseudo-random value added to the packet opcode)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/6</link>
        <pubDate>Sat, 24 Sep 2011 15:58:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-6</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@Andrew_Ferguson The317Guy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/andrew_ferguson">@Andrew_Ferguson</a> wrote:</p>
          <blockquote>
              <p>I miss the days when people didn’t hack each other over private server accounts, never the less good tut mate.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/5</link>
        <pubDate>Sat, 24 Sep 2011 09:15:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-5</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>[quote="<code>Discardedx2</code>, post:2, topic:415734"]this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+[/quote]</p>
<p>Except that’s not the reason it wasn’t enabled.</p>
<p>For it to be enabled (as-is) he would have needed Jagex’s private key. And even if he supplied his own, it wouldn’t match with the server-side key (assuming when you say “bot” you’re talking about on the official server).</p>
<p>You can’t enable/disable ISAAC, because it is a cipher algorithm. Sure you could remove the use of the cipher from the server/client, but that would be erroneous because it would require more work than just copying the class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/4</link>
        <pubDate>Sat, 24 Sep 2011 08:09:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-4</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@hidendra Hidendra]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hidendra">@hidendra</a> wrote:</p>
          <blockquote>
              <p>[quote="<code>Discardedx2</code>, post:2, topic:415734"]this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+[/quote]<br>
Yeah, I didn’t see all that much about it through some searching so I decided to post about it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/3</link>
        <pubDate>Sat, 24 Sep 2011 02:33:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-3</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@_Discardedx21 `Discardedx2`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_discardedx21">@_Discardedx21</a> wrote:</p>
          <blockquote>
              <p>this is ok i guess. never should have been disabled in first place, only reason people ever left it disabled was because winterLove disabled it so he didn’t have to write support for it in his bot. this has been posted about before on different places though.</p>
<p>u guys should enable isaac now, it’s not hard to do at all.</p>
<p>Also just something i thought u might like to know, client builds 605+ use RSA encryption on the on demand server, however most people just disable that as well as it does nothing lol, kinda like the xtea encryption on username/password in 633+</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/2</link>
        <pubDate>Sat, 24 Sep 2011 01:43:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-2</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
      <item>
        <title>RSA encryption on the login block</title>
        <dc:creator><![CDATA[@hidendra Hidendra]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hidendra">@hidendra</a> wrote:</p>
          <blockquote>
              <p>As simple as it is to enable RSA on a client and server, it is very rarely done and because of this, only endangers you more than helps you. It sounds like something as small as encrypting the login block with RSA wouldn’t help at all - or that just using ISAAC cipher protects you, but both of these statements are wrong. They work hand in hand - the encrypted login block prevents your username and password from being sniffed, and also prevents unwanted eyes from viewing the generated ISAAC keys, which prevents packet injection by encrypting the packet opcodes.</p>
<p>I’m not going to bore you with the details, so if you want to know more into why exactly <span class="bbcode-b">RSA should be enabled</span>, check out this thread: <a href="http://google.com/runescape-development/rs-503-client-server/informative-threads/134817-why-rsa-isaac-should-not-removed.html" data-bbcode="true" rel="nofollow noopener">http://google.com/runescape-development/rs-503-client-server/informative-threads/134817-why-rsa-isaac-should-not-removed.html</a></p>
<p>In (almost) all clients, where RSA is performed can be found in the following methods:</p>
<pre><code class="lang-auto">Original: Class30_Sub2_Sub2.method423(BigInteger biginteger, BigInteger biginteger1, byte byte0)
Renamed: Stream.doKeys()</code></pre>
<p>In the original client, the parameters passed to it are equal to</p>
<pre><code class="lang-auto">biginteger: public key
biginteger1: modulus</code></pre>
<p>And they are stored at:</p>
<pre><code class="lang-auto">public key: client.aBigInteger1032
modulus: client.aBigInteger856

(they were removed from the renamed client. 
You can't do anything with the ones in the original, anyway. Just for reference!)</code></pre>
<p>[size=14pt]<span class="bbcode-b">Convenience RSA class</span>[/size]</p>
<p>This is a class I wrote for server side RSA, which can encrypt/decrypt and generate + save keys.</p>
<p><span class="bbcode-b">java rs.security.RSA</span> would generate key files (public.key, private.key) into the folder <span class="bbcode-b">data/keys/</span></p>
<p>You <span class="bbcode-b">will need both a private and public key</span> - the private key is used by the server and the public key by the client. The RSA class provided generates both in BigInteger form to the files generated. The public key is used to encrypt data, while the private key is <span class="bbcode-b">secret</span> and is used to decrypt what the client sent (the login block!)<br>
In the generated files (public.key and private.key), the first line is the modulus (both keys will have the same modulus) and the second line is the key (or exponent) for the public or private key.</p>
<pre><code class="lang-auto">package rs.security;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.KeyPair;
import java.security.KeyPairGenerator;
import java.security.NoSuchAlgorithmException;
import java.security.SecureRandom;
import java.security.spec.InvalidKeySpecException;
import java.security.spec.RSAPrivateKeySpec;
import java.security.spec.RSAPublicKeySpec;

public class RSA {

	/**
	 * Where keys are stored at for the server/client
	 */
	private static final String KEYSTORE = "data/keys/";

	/**
	 * RSA instance
	 */
	private static final RSA rsa = new RSA();

	/**
	 * The public key
	 */
	private BigInteger publicKey;

	/**
	 * The private key
	 */
	private BigInteger privateKey;

	/**
	 * The keys' modulus
	 */
	private BigInteger modulus;

	public RSA() {
		loadKeys();
	}

	/**
	 * @return
	 */
	public static RSA getInstance() {
		return rsa;
	}

	/**
	 * Encrypt a byte array using RSA
	 *
	 * @param raw
	 * @return
	 */
	public byte[] encrypt(byte[] raw) {
		BigInteger block = new BigInteger(raw);
		block = block.modPow(publicKey, modulus);

		// :-)
		return block.toByteArray();
	}

	/**
	 * Decrypt an encrypted RSA block
	 *
	 * @param encrypted
	 * @return
	 */
	public byte[] decrypt(byte[] encrypted) {
		BigInteger block = new BigInteger(encrypted);
		block = block.modPow(privateKey, modulus);

		// OK
		return block.toByteArray();
	}

	/**
	 * Load the private keys
	 */
	public void loadKeys() {
		try {
			File publicStore = new File(KEYSTORE + "public.key");
			File privateStore = new File(KEYSTORE + "private.key");

			// if it doesn't exist.. wat do?
			if (!privateStore.exists() || !publicStore.exists()) {
				throw new RuntimeException("Both keyfiles do not exist!");
			}

			// attempt to read the file
			BufferedReader reader = new BufferedReader(new FileReader(privateStore));

			// read in the big ints
			this.modulus = new BigInteger(reader.readLine());
			this.privateKey = new BigInteger(reader.readLine());

			// OK!
			reader.close();

			// read public file
			reader = new BufferedReader(new FileReader(publicStore));

			// ignore modulus
			reader.readLine();
			this.publicKey = new BigInteger(reader.readLine());

			reader.close();

			System.out.println("Loaded RSA keys");
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Generate and save a 2048 bit RSA key
	 */
	public void generateAndSaveRSAKeys() {
		System.out.println("Generating a 2048-bit RSA key");

		try {
			// initialize a 2048 bit key
			KeyPairGenerator generator = KeyPairGenerator.getInstance("RSA");
			generator.initialize(2048, new SecureRandom());

			// generate a keypair
			KeyPair keyPair = generator.generateKeyPair();

			// create usable keys to write out
			KeyFactory factory = KeyFactory.getInstance("RSA");

			// the public key
			RSAPublicKeySpec publicKey = factory.getKeySpec(keyPair.getPublic(), RSAPublicKeySpec.class);

			// the private key
			RSAPrivateKeySpec privateKey = factory.getKeySpec(keyPair.getPrivate(), RSAPrivateKeySpec.class);

			System.out.println("Saving key files...");

			// Save the keys
			saveKey(KEYSTORE + "public.key", publicKey.getModulus(), publicKey.getPublicExponent());
			saveKey(KEYSTORE + "private.key", privateKey.getModulus(), privateKey.getPrivateExponent());

			System.out.println("Done!");
		} catch (NoSuchAlgorithmException e) {
			e.printStackTrace();
		} catch (InvalidKeySpecException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Save a key to the file
	 *
	 * @param fileName
	 * @param modulus
	 * @param exponent
	 */
	public void saveKey(String fileName, BigInteger modulus, BigInteger exponent) {
		try {
			// if the file already exists, delete it
			File file = new File(fileName);
			if (file.exists()) {
				file.delete();
			}

			FileWriter writer = new FileWriter(file);

			writer.write(modulus.toString() + "\n");
			writer.write(exponent.toString() + "\n");
			writer.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	/**
	 * Generate a 2048-bit public/private RSA keypair
	 *
	 * @param args
	 */
	public static void main(String[] args) {
		getInstance().generateAndSaveRSAKeys();
	}

}
</code></pre>
<p>[size=14pt]<span class="bbcode-b">Enabling RSA on both the Client and Server</span>[/size]</p>
<p><span class="bbcode-b">Client</span><br>
In the Stream class, a line will be commented out for a BigInteger.modPow(). In the renamed client, literally this:</p>
<pre><code class="lang-auto">BigInteger biginteger3 = biginteger2/*.modPow(biginteger, biginteger1)*/;</code></pre>
<p>You simply need to add the modPow back and define your public key (biginteger) and modulus (biginteger1). Then the login block will be encrypted.</p>
<p><span class="bbcode-b">Server</span><br>
Server source used here is RuneSource, but can apply to any source.</p>
<p>The “login block” that is encrypted encompasses the following data sent immediately after the 9 CRC keys are sent:</p>
<pre><code class="lang-auto">byte - Magic number, 10, to ensure the login block was decrypted correctly
long - client's session key (for ISAAC)
long - server's session key (for ISAAC)
String - username
String - password</code></pre>
<p>So that means the RSA block boils down to:</p>
<pre><code class="lang-auto">/* Read 9 CRC keys */

// RSA begin
int rsaLength = in.readByte(false); // RSA block length

// Length 0 is not acceptable :-)
if (rsaLength == 0) {
	disconnect();
	return;
}

// read in the encrypted RSA block
byte[] rsaBlock = in.readBytes(rsaLength);

// decrypt the block
byte[] decryptedBlock = RSA.getInstance().decrypt(rsaBlock);

// create a buffer to read from the decrypted data
StreamBuffer.InBuffer blockBuffer = StreamBuffer.newInBuffer(ByteBuffer.wrap(decryptedBlock));

// Validate that the RSA block was decrypted properly.
int magicNumber = blockBuffer.readByte();

if (magicNumber != 10) {
	// The RSA block was not decrypted properly
	disconnect();
	return;
}

/* Read in client session key down to password from the blockBuffer */
// RSA end</code></pre>
<p>Now how easy is that? Instead of leaving out RSA encryption, leaving it in may prove to be helpful to you someday, especially if your server grows larger than a small server.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734/1</link>
        <pubDate>Sat, 24 Sep 2011 01:24:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-415734-1</guid>
        <source url="https://forum.moparisthebest.com/t/rsa-encryption-on-the-login-block/415734.rss">RSA encryption on the login block</source>
      </item>
  </channel>
</rss>
