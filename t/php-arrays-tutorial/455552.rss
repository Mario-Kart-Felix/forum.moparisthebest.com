<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PHP arrays tutorial</title>
    <link>https://forum.moparisthebest.com/t/php-arrays-tutorial/455552</link>
    <description>Hello MoparScape,

As promised, here&#39;s my PHP Arrays tutorial! This is fairly simple and covers the three biggest parts of arrays in any language, the array itself, making a multi-dimensional array and making an associative array.

Without any more faggotry, here is the PHP Arrays tutorial:

[b]Part 1 - Creating a simple array.[/b]
Arrays are very, very useful in any programming language, not just PHP. However, I only specialise in PHP so it&#39;s being done in PHP. There are other ways to store data other than arrays, however using arrays is quick and easy. Arrays can most easily be described as an ordered list of elements. You can access the individual elements by referring to their index position within the array. The position is either ordered numerically or by name. An array with a numeric index is commonly called an indexed array while one that has named positions is called an associative array. As usual, I&#39;ll give you the code then talk you through it.
[code=php]
&lt;?php 
$i = 1; 
$moparArrayTut = array( $i, &quot;MoparScape&quot;, 5 ); 

echo $moparArrayTut[0];
echo $moparArrayTut[1];
echo $moparArrayTut[2];
?&gt;
[/code]

Okay, so as usual your &lt;?php ?&gt; tags are opening and closing tags, as they always will be. We then declare the variable of $i with a value of 1 we&#39;re then declaring the variable $moparArrayTut which is holding an array with the values $i (the variable being called from earlier), we then declare MoparScape as an element inside the array and then just include an integer as 3 examples of datatypes you can call inside an array. We are then echoing the data from the variable $moparArrayTut which is holding our array and it&#39;s datatypes. We echo [0] which is our first data input, we then echo [1] which is our second data input and finally [2] which is our third data input.

As you can see, it&#39;s more or less a variable which is holding several different types of data. Not too hard, huh? Let&#39;s move on.

[b]Part 2 - Creating an associative array.[/b]
Associative arrays are arrays that use named keys that you assign to them. Have a look at the following example and as usual, I&#39;ll explain it after I show the code.
[code=php]
&lt;?php 
$firstMoparArray = array(&quot;key1&quot; =&gt; &quot;Mopar&quot;, &quot;key2&quot; =&gt; &quot;Moparis&quot;); 
$secondMoparArray = array(&quot;key3&quot; =&gt; &quot;Scape&quot;, &quot;key4&quot; =&gt; &quot;thebest&quot;, );
 
echo $firstMoparArray[&#39;key1&#39;];
echo $secondMoparArray[&#39;key3&#39;];
echo $firstMoparArray[&#39;key2&#39;];
echo $secondMoparArray[&#39;key4&#39;];
?&gt;
[/code]
Okay, so as per the normal on here, &lt;?php ?&gt; is our opening and closing tags, we then define the variable $firstMoparArray which holds the data of an array with key1 being Mopar and key2 being Moparis. We then define the variable $secondMoparArray which also holds the data of an array being key3 holding Scape and key4 holding thebest. We then echo the keys from $firstMoparArray and $secondMoparArray. So now you should understand the difference between normal arrays and associative arrays. It&#39;s not a huge difference, but it is noticable.

So that wasn&#39;t too hard, was it? No :P. Lets move on to multi-dimensional arrays.

[b]Part 3 - Creating a multi-dimensional array.[/b]
So now you know basic, simple arrays. A slightly more advanced array known as an associative array and now we&#39;re moving on to multi-dimensional arrays. These are used for if you want to store more information about a certain aspect of the array data you&#39;re holding. Or in another words a multi-dimensional array is an array that contains at least one other array as the value of one of the indexes. As usual, here&#39;s the code, I&#39;ll explain it after.
[code=php]
&lt;?php 
$moparSites = array( 
&quot;MoparScape&quot; =&gt; array( &quot;10&quot;, &quot;10&quot;), 
&quot;Moparisthebest&quot; =&gt; array( &quot;8&quot;, &quot;10&quot;), 
&quot;MoparCraft&quot; =&gt; array( &quot;6&quot;, &quot;10&quot;), 
); 

echo &quot;MoparScape rates &quot;.$moparSites[&#39;MoparScape&#39;][0].&quot; out of &quot;.$moparSites[&#39;MoparScape&#39;][1].&quot;. &lt;br /&gt;&quot;; 
echo &quot;Moparisthebest rates &quot;.$moparSites[&#39;Moparisthebest&#39;][0].&quot; out of &quot;.$moparSites[&#39;Moparisthebest&#39;][1].&quot;. &lt;br /&gt;&quot;; 
echo &quot;MoparCraft rates &quot; . $moparSites[&#39;MoparCraft&#39;][0] . &quot; out of &quot; . $moparSites[&#39;MoparCraft&#39;][1].&quot;.&quot;; 
?&gt;
[/code]

This above code is in no way demeaning to any of the mopar series of websites and forums boards, I am in no way more biased towards this, it was merely for tutorial purposes:P. So anyway, as per the usual &lt;?php and ?&gt; are our opening/closing tags. We&#39;re then defining $moparSites as an array. We then insert data into our array, MoparScape holds the values of 10 and 10. Moparisthebest holds the values of 8 and 10, and MoparCraft holds the values 6 and 10. We then simply echo out the data and show everyone what our conclusion is. Simple enough right?

[b]Part 4 - Unsetting Arrays.[/b]
There are several ways to unset arrays, I only use two of these commonly though, which are the first two I&#39;ll run through. I&#39;ll list all of the ways I can remember and then explain them.
[code=php]
unset($moparSites);
$moparSites=array();
unset($moparSites)?$moparSites=array():$moparSites=array();
$moparSites = array(&#39;mopar&#39;);
[/code]
Turns out I thought I remembered more than what I did, the other ways I thought of were just the same methods in different situations, lol. So first we have unset(); which is used a lot. This is merely used as unset($yourArray); and it unsets the array. Sometimes however, this doesn&#39;t behave, which is why I use the next way a lot too. $yourArray=array(); simply sets the variable of the array to a blank array. This next way is more or less a fail-safe way of unsetting an array, refer back to how I was saying unset(); doesn&#39;t always work, this is why we sometimes use this. It has the unset(); function in it, however if unset fails, it falls back on $yourArray=array(); which is making it blank again. It just unsets it and resets it as an empty variable. You then have $yourArray = arrray(&#39;yourNewArray&#39;); this is very similar to $yourArray=array(); it just resets the array to a new array instead of adding in further useless lines of code. Those are all the ways I can remember but I&#39;ll research some more and see what I find.

These are the very basics of arrays, there&#39;s a whole collection of functions that can manipulate arrays and what not, but you can easily google them. I&#39;m only getting you guys started on PHP, which is what I have been doing for the past few weeks. Just hang in there and we&#39;ll get through all of the starting stuff and get onto the more advanced stuff, eventually creating a big final project if I can find the time.

I hope this helped you guys! My next tutorial will be on MySQL and PHP and how useful the two are together.

If you encountered any problems and or have any suggestions, feel free to post them below!

Regards,
Ruby.</description>
    
    <lastBuildDate>Fri, 24 Aug 2012 08:21:10 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PHP arrays tutorial</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="455552">
<div class="title">
<div class="quote-controls"></div>
 jal knight:</div>
<blockquote>
<p>Awesome! Thanks a lot. I’m using this. I appreciate it.</p>
</blockquote>
</aside>
<p>Glad someone’s using it!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/3</link>
        <pubDate>Fri, 24 Aug 2012 08:21:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-455552-3</guid>
        <source url="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552.rss">PHP arrays tutorial</source>
      </item>
      <item>
        <title>PHP arrays tutorial</title>
        <dc:creator><![CDATA[@jal_knight jal knight]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jal_knight">@jal_knight</a> wrote:</p>
          <blockquote>
              <p>Awesome! Thanks a lot. I’m using this. I appreciate it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/2</link>
        <pubDate>Fri, 24 Aug 2012 04:42:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-455552-2</guid>
        <source url="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552.rss">PHP arrays tutorial</source>
      </item>
      <item>
        <title>PHP arrays tutorial</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <p>Hello MoparScape,</p>
<p>As promised, here’s my PHP Arrays tutorial! This is fairly simple and covers the three biggest parts of arrays in any language, the array itself, making a multi-dimensional array and making an associative array.</p>
<p>Without any more faggotry, here is the PHP Arrays tutorial:</p>
<p><span class="bbcode-b">Part 1 - Creating a simple array.</span><br>
Arrays are very, very useful in any programming language, not just PHP. However, I only specialise in PHP so it’s being done in PHP. There are other ways to store data other than arrays, however using arrays is quick and easy. Arrays can most easily be described as an ordered list of elements. You can access the individual elements by referring to their index position within the array. The position is either ordered numerically or by name. An array with a numeric index is commonly called an indexed array while one that has named positions is called an associative array. As usual, I’ll give you the code then talk you through it.</p>
<pre><code class="lang-auto">&lt;?php 
$i = 1; 
$moparArrayTut = array( $i, "MoparScape", 5 ); 

echo $moparArrayTut[0];
echo $moparArrayTut[1];
echo $moparArrayTut[2];
?&gt;</code></pre>
<p>Okay, so as usual your &lt;?php ?&gt; tags are opening and closing tags, as they always will be. We then declare the variable of $i with a value of 1 we’re then declaring the variable $moparArrayTut which is holding an array with the values $i (the variable being called from earlier), we then declare MoparScape as an element inside the array and then just include an integer as 3 examples of datatypes you can call inside an array. We are then echoing the data from the variable $moparArrayTut which is holding our array and it’s datatypes. We echo [0] which is our first data input, we then echo [1] which is our second data input and finally [2] which is our third data input.</p>
<p>As you can see, it’s more or less a variable which is holding several different types of data. Not too hard, huh? Let’s move on.</p>
<p><span class="bbcode-b">Part 2 - Creating an associative array.</span><br>
Associative arrays are arrays that use named keys that you assign to them. Have a look at the following example and as usual, I’ll explain it after I show the code.</p>
<pre><code class="lang-auto">&lt;?php 
$firstMoparArray = array("key1" =&gt; "Mopar", "key2" =&gt; "Moparis"); 
$secondMoparArray = array("key3" =&gt; "Scape", "key4" =&gt; "thebest", );
 
echo $firstMoparArray['key1'];
echo $secondMoparArray['key3'];
echo $firstMoparArray['key2'];
echo $secondMoparArray['key4'];
?&gt;</code></pre>
<p>Okay, so as per the normal on here, &lt;?php ?&gt; is our opening and closing tags, we then define the variable $firstMoparArray which holds the data of an array with key1 being Mopar and key2 being Moparis. We then define the variable $secondMoparArray which also holds the data of an array being key3 holding Scape and key4 holding thebest. We then echo the keys from $firstMoparArray and $secondMoparArray. So now you should understand the difference between normal arrays and associative arrays. It’s not a huge difference, but it is noticable.</p>
<p>So that wasn’t too hard, was it? No :P. Lets move on to multi-dimensional arrays.</p>
<p><span class="bbcode-b">Part 3 - Creating a multi-dimensional array.</span><br>
So now you know basic, simple arrays. A slightly more advanced array known as an associative array and now we’re moving on to multi-dimensional arrays. These are used for if you want to store more information about a certain aspect of the array data you’re holding. Or in another words a multi-dimensional array is an array that contains at least one other array as the value of one of the indexes. As usual, here’s the code, I’ll explain it after.</p>
<pre><code class="lang-auto">&lt;?php 
$moparSites = array( 
"MoparScape" =&gt; array( "10", "10"), 
"Moparisthebest" =&gt; array( "8", "10"), 
"MoparCraft" =&gt; array( "6", "10"), 
); 

echo "MoparScape rates ".$moparSites['MoparScape'][0]." out of ".$moparSites['MoparScape'][1].". &lt;br /&gt;"; 
echo "Moparisthebest rates ".$moparSites['Moparisthebest'][0]." out of ".$moparSites['Moparisthebest'][1].". &lt;br /&gt;"; 
echo "MoparCraft rates " . $moparSites['MoparCraft'][0] . " out of " . $moparSites['MoparCraft'][1]."."; 
?&gt;</code></pre>
<p>This above code is in no way demeaning to any of the mopar series of websites and forums boards, I am in no way more biased towards this, it was merely for tutorial purposes:P. So anyway, as per the usual &lt;?php and ?&gt; are our opening/closing tags. We’re then defining $moparSites as an array. We then insert data into our array, MoparScape holds the values of 10 and 10. Moparisthebest holds the values of 8 and 10, and MoparCraft holds the values 6 and 10. We then simply echo out the data and show everyone what our conclusion is. Simple enough right?</p>
<p><span class="bbcode-b">Part 4 - Unsetting Arrays.</span><br>
There are several ways to unset arrays, I only use two of these commonly though, which are the first two I’ll run through. I’ll list all of the ways I can remember and then explain them.</p>
<pre><code class="lang-auto">unset($moparSites);
$moparSites=array();
unset($moparSites)?$moparSites=array():$moparSites=array();
$moparSites = array('mopar');</code></pre>
<p>Turns out I thought I remembered more than what I did, the other ways I thought of were just the same methods in different situations, lol. So first we have unset(); which is used a lot. This is merely used as unset($yourArray); and it unsets the array. Sometimes however, this doesn’t behave, which is why I use the next way a lot too. $yourArray=array(); simply sets the variable of the array to a blank array. This next way is more or less a fail-safe way of unsetting an array, refer back to how I was saying unset(); doesn’t always work, this is why we sometimes use this. It has the unset(); function in it, however if unset fails, it falls back on $yourArray=array(); which is making it blank again. It just unsets it and resets it as an empty variable. You then have $yourArray = arrray(‘yourNewArray’); this is very similar to $yourArray=array(); it just resets the array to a new array instead of adding in further useless lines of code. Those are all the ways I can remember but I’ll research some more and see what I find.</p>
<p>These are the very basics of arrays, there’s a whole collection of functions that can manipulate arrays and what not, but you can easily google them. I’m only getting you guys started on PHP, which is what I have been doing for the past few weeks. Just hang in there and we’ll get through all of the starting stuff and get onto the more advanced stuff, eventually creating a big final project if I can find the time.</p>
<p>I hope this helped you guys! My next tutorial will be on MySQL and PHP and how useful the two are together.</p>
<p>If you encountered any problems and or have any suggestions, feel free to post them below!</p>
<p>Regards,<br>
Ruby.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-arrays-tutorial/455552/1</link>
        <pubDate>Wed, 22 Aug 2012 20:21:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-455552-1</guid>
        <source url="https://forum.moparisthebest.com/t/php-arrays-tutorial/455552.rss">PHP arrays tutorial</source>
      </item>
  </channel>
</rss>
