<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI]Players Deleted Upon Login? SQL Integration[DSPK]</title>
    <link>https://forum.moparisthebest.com/t/pi-players-deleted-upon-login-sql-integration-dspk/424295</link>
    <description>So, I followed a tutorial on having sql integration in my server.  I believe it was delta and I converted it to my server, it saves and everything, but when it loads the character after relogging, it deletes all the information.  Could someone please help? here&#39;s my loading method: [code=java]			public static int loadGame(Client p, String playerName, String playerPass) {
				String line = &quot;&quot;;
				String token = &quot;&quot;;
				String token2 = &quot;&quot;;
				String[] token3 = new String[3];
				boolean EndOfFile = false;
				int ReadMode = 0;
				boolean File1 = false;	
				try {			
				     //ResultSet res = query(&quot;SELECT * FROM player, playerdata WHERE player.username = &#39;&quot;+p.playerName+&quot;&#39;&quot;);
					File1 = true;
				} catch(Exception e) {
				}
				if (File1) {
				
				} else {
					Misc.println(p.playerName+&quot;: character file not found.&quot;);
					p.newPlayer = false;
					return 0;
				}

                long start = System.currentTimeMillis();
                int[] playerAppearance = new int[13];
				try{
				     ResultSet res = query(&quot;SELECT * FROM player, playerdata WHERE player.username = &#39;&quot;+p.playerName+&quot;&#39;&quot;);
					File1 = true;
                        if (!res.next())
                                return 4; // Change for every table
                
                        p.playerName = res.getString(&quot;username&quot;);
                        p.playerPass = res.getString(&quot;password&quot;);
                        p.playerRights = res.getInt(&quot;rights&quot;);
                        p.teleportToX = res.getInt(&quot;x&quot;);
                        p.teleportToY = res.getInt(&quot;y&quot;);
                        p.heightLevel = res.getInt(&quot;height&quot;);
                        String[] storedData = res.getString(&quot;appearance&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; 13; i++)
                                p.playerAppearance[i] = Integer.parseInt(storedData[i]);
                        p.setLook(p.playerAppearance);
                        storedData = res.getString(&quot;equipment&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerEquipment.length; i++)
                                p.playerEquipment[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;equipmentN&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerEquipmentN.length; i++)
                                p.playerEquipmentN[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;skills&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerLevel.length; i++)
                                p.playerLevel[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;skillsxp&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerXP.length; i++)
                                p.playerXP[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;item&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerItems.length; i++)
                                p.playerItems[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;itemN&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.playerItemsN.length; i++)
                                p.playerItemsN[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;bank&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.bankItems.length; i++)
                                p.bankItems[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;bankN&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.bankItems.length; i++)
                                p.bankItemsN[i] = Integer.parseInt(storedData[i]);
                        storedData = res.getString(&quot;friends&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.friends.length; i++)
                                p.friends[i] = Long.parseLong(storedData[i]);
                        storedData = res.getString(&quot;ignores&quot;).split(&quot;:&quot;);
                        for (int i = 0; i &lt; p.ignores.length; i++)
                                p.ignores[i] = Long.parseLong(storedData[i]);
						p.dungPoints = res.getInt(&quot;dungPoints&quot;);
						p.pure = res.getInt(&quot;UsedPuremaster&quot;);
						p.tutorial = res.getInt(&quot;tutorialprogress&quot;);
						p.skullTimer = res.getInt(&quot;skulltimer&quot;);
						p.earningPotential = res.getInt(&quot;EP&quot;);
						p.vlsLeft = res.getInt(&quot;longsword&quot;);
						p.statLeft = res.getInt(&quot;warhammer&quot;);
						p.vSpearLeft = res.getInt(&quot;spear&quot;);
						p.vTopLeft = res.getInt(&quot;chainbody&quot;);
						p.playerCollect = res.getInt(&quot;shopcollect&quot;);
						p.vLegsLeft = res.getInt(&quot;chainskirt&quot;);
						p.sHelmLeft = res.getInt(&quot;full_helm&quot;);
						p.sTopLeft = res.getInt(&quot;platebody&quot;);
						p.sLegsLeft = res.getInt(&quot;platelegs&quot;);
						p.zHoodLeft = res.getInt(&quot;hood&quot;);
						p.zStaffLeft = res.getInt(&quot;staff&quot;);
						p.zTopLeft = res.getInt(&quot;robe_top&quot;);
						p.zBottomLeft = res.getInt(&quot;robe_bottom&quot;);
						p.mBodyLeft = res.getInt(&quot;leather_body&quot;);
						p.mChapsLeft = res.getInt(&quot;chaps&quot;);
						p.playerMagicBook = res.getInt(&quot;magicbook&quot;);
						p.xpLock = res.getBoolean(&quot;xpLock&quot;);
						p.Jail = res.getBoolean(&quot;Jailed&quot;);
						p.Agrith = res.getBoolean(&quot;Agrith&quot;);
						p.degradeTime = res.getInt(&quot;degrade&quot;);
						p.Flambeed = res.getBoolean(&quot;Flambeed&quot;);
						p.Karamel = res.getBoolean(&quot;Karamel&quot;);
						p.Dessourt = res.getBoolean(&quot;Dessourt&quot;);
						p.Culin = res.getBoolean(&quot;culin&quot;);
						//for (int i = 0; i &lt; p.barrowsNpcs.length; i++)
                        //p.barrowsNpcs[i][i] = res.getInt(storedData[i]);
						//storedData = res.getString(&quot;brotherinfo&quot;).split(&quot;:&quot;);
						//p.SpecialDelay = res.getInt(&quot;brotherinfo&quot;);
						p.specAmount = res.getInt(&quot;specialamount&quot;);
						p.randomCoffin = res.getInt(&quot;selectedcoffin&quot;);
						p.barrowsKillCount = res.getInt(&quot;barrowskillcount2&quot;);
						p.teleBlockDelay = res.getInt(&quot;teleblocklength&quot;);
						p.pcPoints = res.getInt(&quot;pcpoints&quot;);
						p.gwdelay = res.getInt(&quot;gwdelay&quot;);
						p.summonSpec = res.getInt(&quot;summonSpec&quot;);
						p.dungRest = res.getInt(&quot;dungRest&quot;);
						p.altarPrayed = res.getInt(&quot;Altar&quot;);
						p.Arma = res.getInt(&quot;ArmaKC&quot;);
						p.Band = res.getInt(&quot;BandKC&quot;);
						p.Zammy = res.getInt(&quot;ZammyKC&quot;);
						p.Sara = res.getInt(&quot;SaraKC&quot;);
						p.pkPoints = res.getInt(&quot;pkpoints&quot;);
						p.isDonator = res.getInt(&quot;isDonator&quot;);
						p.donatorChest = res.getInt(&quot;donatorChest&quot;);
						p.slayerTask = res.getInt(&quot;slayerTask&quot;);
						p.taskAmount = res.getInt(&quot;taskAmount&quot;);
						p.magePoints = res.getInt(&quot;magePoints&quot;);
						p.KC = res.getInt(&quot;KC&quot;);
						p.DC = res.getInt(&quot;DC&quot;);
						p.totalstored = res.getInt(&quot;totalstored&quot;);
						p.autoRet = res.getInt(&quot;autoRet&quot;);
						p.trade11 = res.getInt(&quot;trade11&quot;);
						p.SpecialDelay = res.getInt(&quot;SpeDelay&quot;);
						p.barrowsKillCount = res.getInt(&quot;barrowskillcount&quot;);
						p.accountFlagged = res.getBoolean(&quot;flagged&quot;);
						p.readRules = res.getBoolean(&quot;Rules&quot;);
						p.isShopping = res.getBoolean(&quot;isShopping&quot;);
						p.SPoints = res.getInt(&quot;SPoints&quot;);
						p.waveId = res.getInt(&quot;wave&quot;);
						p.dfsCount = res.getInt(&quot;dfsCount&quot;);
						p.lastsummon = res.getInt(&quot;lastsummon&quot;);
						p.summoningnpcid = res.getInt(&quot;summoningnpcid&quot;);
					//	for (int i = 0; i &lt; p.voidStatus.length; i++)
                      //  p.voidStatus[i] = res.getInt(storedData[i]);
						//storedData = res.getString(&quot;voidStatus&quot;).split(&quot;:&quot;);
						//p.SpecialDelay = res.getInt(&quot;void&quot;);
						p.fightMode = res.getInt(&quot;fightMode&quot;);
						p.BlackMarks = res.getInt(&quot;BlackMarks&quot;);
						p.newPlayer = false;
						
                } catch (SQLException e) {
                        e.printStackTrace();
                }
                return 0;
        }[/code]
Here&#39;s my old one that works properly: [code=java]	public static int loadGame(Client p, String playerName, String playerPass) {
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String[] token3 = new String[3];
		boolean EndOfFile = false;
		int ReadMode = 0;
		BufferedReader characterfile = null;
		boolean File1 = false;
		
		try {
			characterfile = new BufferedReader(new FileReader(&quot;./Data/characters/&quot;+playerName+&quot;.txt&quot;));
			File1 = true;
		} catch(FileNotFoundException fileex1) {
		}
		
		if (File1) {
			//new File (&quot;./characters/&quot;+playerName+&quot;.txt&quot;);
		} else {
			Misc.println(playerName+&quot;: character file not found.&quot;);
			p.newPlayer = false;
			return 0;
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception) {
			Misc.println(playerName+&quot;: error loading file.&quot;);
			return 3;
		}
		while(EndOfFile == false &amp;&amp; line != null) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token3 = token2.split(&quot;\t&quot;);
				switch (ReadMode) {
				case 1:
					 if (token.equals(&quot;character-password&quot;)) {
						if (playerPass.equalsIgnoreCase(token2) || Misc.basicEncrypt(playerPass).equals(token2)) {
							playerPass = token2;
						} else {
							return 3;
						}
					}
					break;
				case 2:
					if (token.equals(&quot;character-height&quot;)) {
						p.heightLevel = Integer.parseInt(token2);
					} else if (token.equals(&quot;character-posx&quot;)) {
						p.teleportToX = (Integer.parseInt(token2) &lt;= 0 ? 3210 : Integer.parseInt(token2));
					} else if (token.equals(&quot;character-posy&quot;)) {
						p.teleportToY = (Integer.parseInt(token2) &lt;= 0 ? 3424 : Integer.parseInt(token2));
					} else if (token.equals(&quot;Black-marks&quot;)) {
						p.BlackMarks = Integer.parseInt(token2);
					} 
					break;
				case 3:
					if (token.equals(&quot;character-equip&quot;)) {
						p.playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 4:
					if (token.equals(&quot;character-look&quot;)) {
						p.playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					} 
					break;
				case 5:
					if (token.equals(&quot;character-skill&quot;)) {
						p.playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 6:
					if (token.equals(&quot;character-item&quot;)) {
						p.playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 7:
					if (token.equals(&quot;character-bank&quot;)) {
						p.bankItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.bankItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 8:
					 if (token.equals(&quot;character-friend&quot;)) {
						p.friends[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
					} 
					break;
				case 9:
					/* if (token.equals(&quot;character-ignore&quot;)) {
						ignores[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
					} */
					break;
				case 20:
					if (token.equals(&quot;stored&quot;)) {
						p.storeditems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					}
					break;

				case 21:
					 if (token.equals(&quot;occupy&quot;)) {
						p.occupied[Integer.parseInt(token3[0])] = Boolean.parseBoolean(token3[1]);
					} 
					break;
				case 10:
		if (token.equals(&quot;character-shop&quot;)) {
			p.playerShop[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
			p.playerShopP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
			p.playerShopN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[3]);
		} 
	break;
				}
			} else {
				if (line.equals(&quot;[ACCOUNT]&quot;)) {		ReadMode = 1;
				} else if (line.equals(&quot;[CHARACTER]&quot;)) {	ReadMode = 2;
				} else if (line.equals(&quot;[EQUIPMENT]&quot;)) {	ReadMode = 3;
				} else if (line.equals(&quot;[LOOK]&quot;)) {		ReadMode = 4;
				} else if (line.equals(&quot;[SKILLS]&quot;)) {		ReadMode = 5;
				} else if (line.equals(&quot;[ITEMS]&quot;)) {		ReadMode = 6;
				} else if (line.equals(&quot;[BANK]&quot;)) {		ReadMode = 7;
				} else if (line.equals(&quot;[FRIENDS]&quot;)) {		ReadMode = 8;
				} else if (line.equals(&quot;[IGNORES]&quot;)) {		ReadMode = 9;
} else if (line.equals(&quot;[STORED]&quot;)) {		ReadMode = 20;
} else if (line.equals(&quot;[OCCUPY]&quot;)) {		ReadMode = 21;
} else if (line.equals(&quot;[SHOP]&quot;)) {		ReadMode = 10;
				} else if (line.equals(&quot;[EOF]&quot;)) {		try { characterfile.close(); } catch(IOException ioexception) { } return 1;
				}
			}
			try {
				line = characterfile.readLine();
			} catch(IOException ioexception1) { EndOfFile = true; }
		}
		try { characterfile.close(); } catch(IOException ioexception) { }
		return 13;
	}[/code]</description>
    
    <lastBuildDate>Tue, 06 Dec 2011 03:13:42 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-players-deleted-upon-login-sql-integration-dspk/424295.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI]Players Deleted Upon Login? SQL Integration[DSPK]</title>
        <dc:creator><![CDATA[@sageofmali sageofmali]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sageofmali">@sageofmali</a> wrote:</p>
          <blockquote>
              <p>So, I followed a tutorial on having sql integration in my server.  I believe it was delta and I converted it to my server, it saves and everything, but when it loads the character after relogging, it deletes all the information.  Could someone please help? here’s my loading method: [code=java]			public static int loadGame(Client p, String playerName, String playerPass) {<br>
String line = “”;<br>
String token = “”;<br>
String token2 = “”;<br>
String[] token3 = new String[3];<br>
boolean EndOfFile = false;<br>
int ReadMode = 0;<br>
boolean File1 = false;	<br>
try {			<br>
//ResultSet res = query(“SELECT * FROM player, playerdata WHERE player.username = '”+p.playerName+"’");<br>
File1 = true;<br>
} catch(Exception e) {<br>
}<br>
if (File1) {</p>
<pre><code>			} else {
				Misc.println(p.playerName+": character file not found.");
				p.newPlayer = false;
				return 0;
			}

            long start = System.currentTimeMillis();
            int[] playerAppearance = new int[13];
			try{
			     ResultSet res = query("SELECT * FROM player, playerdata WHERE player.username = '"+p.playerName+"'");
				File1 = true;
                    if (!res.next())
                            return 4; // Change for every table
            
                    p.playerName = res.getString("username");
                    p.playerPass = res.getString("password");
                    p.playerRights = res.getInt("rights");
                    p.teleportToX = res.getInt("x");
                    p.teleportToY = res.getInt("y");
                    p.heightLevel = res.getInt("height");
                    String[] storedData = res.getString("appearance").split(":");
                    for (int i = 0; i &lt; 13; i++)
                            p.playerAppearance[i] = Integer.parseInt(storedData[i]);
                    p.setLook(p.playerAppearance);
                    storedData = res.getString("equipment").split(":");
                    for (int i = 0; i &lt; p.playerEquipment.length; i++)
                            p.playerEquipment[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("equipmentN").split(":");
                    for (int i = 0; i &lt; p.playerEquipmentN.length; i++)
                            p.playerEquipmentN[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("skills").split(":");
                    for (int i = 0; i &lt; p.playerLevel.length; i++)
                            p.playerLevel[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("skillsxp").split(":");
                    for (int i = 0; i &lt; p.playerXP.length; i++)
                            p.playerXP[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("item").split(":");
                    for (int i = 0; i &lt; p.playerItems.length; i++)
                            p.playerItems[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("itemN").split(":");
                    for (int i = 0; i &lt; p.playerItemsN.length; i++)
                            p.playerItemsN[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("bank").split(":");
                    for (int i = 0; i &lt; p.bankItems.length; i++)
                            p.bankItems[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("bankN").split(":");
                    for (int i = 0; i &lt; p.bankItems.length; i++)
                            p.bankItemsN[i] = Integer.parseInt(storedData[i]);
                    storedData = res.getString("friends").split(":");
                    for (int i = 0; i &lt; p.friends.length; i++)
                            p.friends[i] = Long.parseLong(storedData[i]);
                    storedData = res.getString("ignores").split(":");
                    for (int i = 0; i &lt; p.ignores.length; i++)
                            p.ignores[i] = Long.parseLong(storedData[i]);
					p.dungPoints = res.getInt("dungPoints");
					p.pure = res.getInt("UsedPuremaster");
					p.tutorial = res.getInt("tutorialprogress");
					p.skullTimer = res.getInt("skulltimer");
					p.earningPotential = res.getInt("EP");
					p.vlsLeft = res.getInt("longsword");
					p.statLeft = res.getInt("warhammer");
					p.vSpearLeft = res.getInt("spear");
					p.vTopLeft = res.getInt("chainbody");
					p.playerCollect = res.getInt("shopcollect");
					p.vLegsLeft = res.getInt("chainskirt");
					p.sHelmLeft = res.getInt("full_helm");
					p.sTopLeft = res.getInt("platebody");
					p.sLegsLeft = res.getInt("platelegs");
					p.zHoodLeft = res.getInt("hood");
					p.zStaffLeft = res.getInt("staff");
					p.zTopLeft = res.getInt("robe_top");
					p.zBottomLeft = res.getInt("robe_bottom");
					p.mBodyLeft = res.getInt("leather_body");
					p.mChapsLeft = res.getInt("chaps");
					p.playerMagicBook = res.getInt("magicbook");
					p.xpLock = res.getBoolean("xpLock");
					p.Jail = res.getBoolean("Jailed");
					p.Agrith = res.getBoolean("Agrith");
					p.degradeTime = res.getInt("degrade");
					p.Flambeed = res.getBoolean("Flambeed");
					p.Karamel = res.getBoolean("Karamel");
					p.Dessourt = res.getBoolean("Dessourt");
					p.Culin = res.getBoolean("culin");
					//for (int i = 0; i &lt; p.barrowsNpcs.length; i++)
                    //p.barrowsNpcs[i][i] = res.getInt(storedData[i]);
					//storedData = res.getString("brotherinfo").split(":");
					//p.SpecialDelay = res.getInt("brotherinfo");
					p.specAmount = res.getInt("specialamount");
					p.randomCoffin = res.getInt("selectedcoffin");
					p.barrowsKillCount = res.getInt("barrowskillcount2");
					p.teleBlockDelay = res.getInt("teleblocklength");
					p.pcPoints = res.getInt("pcpoints");
					p.gwdelay = res.getInt("gwdelay");
					p.summonSpec = res.getInt("summonSpec");
					p.dungRest = res.getInt("dungRest");
					p.altarPrayed = res.getInt("Altar");
					p.Arma = res.getInt("ArmaKC");
					p.Band = res.getInt("BandKC");
					p.Zammy = res.getInt("ZammyKC");
					p.Sara = res.getInt("SaraKC");
					p.pkPoints = res.getInt("pkpoints");
					p.isDonator = res.getInt("isDonator");
					p.donatorChest = res.getInt("donatorChest");
					p.slayerTask = res.getInt("slayerTask");
					p.taskAmount = res.getInt("taskAmount");
					p.magePoints = res.getInt("magePoints");
					p.KC = res.getInt("KC");
					p.DC = res.getInt("DC");
					p.totalstored = res.getInt("totalstored");
					p.autoRet = res.getInt("autoRet");
					p.trade11 = res.getInt("trade11");
					p.SpecialDelay = res.getInt("SpeDelay");
					p.barrowsKillCount = res.getInt("barrowskillcount");
					p.accountFlagged = res.getBoolean("flagged");
					p.readRules = res.getBoolean("Rules");
					p.isShopping = res.getBoolean("isShopping");
					p.SPoints = res.getInt("SPoints");
					p.waveId = res.getInt("wave");
					p.dfsCount = res.getInt("dfsCount");
					p.lastsummon = res.getInt("lastsummon");
					p.summoningnpcid = res.getInt("summoningnpcid");
				//	for (int i = 0; i &lt; p.voidStatus.length; i++)
                  //  p.voidStatus[i] = res.getInt(storedData[i]);
					//storedData = res.getString("voidStatus").split(":");
					//p.SpecialDelay = res.getInt("void");
					p.fightMode = res.getInt("fightMode");
					p.BlackMarks = res.getInt("BlackMarks");
					p.newPlayer = false;
					
            } catch (SQLException e) {
                    e.printStackTrace();
            }
            return 0;
    }[/code]
</code></pre>
<p>Here’s my old one that works properly: [code=java]	public static int loadGame(Client p, String playerName, String playerPass) {<br>
String line = “”;<br>
String token = “”;<br>
String token2 = “”;<br>
String[] token3 = new String[3];<br>
boolean EndOfFile = false;<br>
int ReadMode = 0;<br>
BufferedReader characterfile = null;<br>
boolean File1 = false;</p>
<pre><code>	try {
		characterfile = new BufferedReader(new FileReader("./Data/characters/"+playerName+".txt"));
		File1 = true;
	} catch(FileNotFoundException fileex1) {
	}
	
	if (File1) {
		//new File ("./characters/"+playerName+".txt");
	} else {
		Misc.println(playerName+": character file not found.");
		p.newPlayer = false;
		return 0;
	}
	try {
		line = characterfile.readLine();
	} catch(IOException ioexception) {
		Misc.println(playerName+": error loading file.");
		return 3;
	}
	while(EndOfFile == false &amp;&amp; line != null) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token3 = token2.split("\t");
			switch (ReadMode) {
			case 1:
				 if (token.equals("character-password")) {
					if (playerPass.equalsIgnoreCase(token2) || Misc.basicEncrypt(playerPass).equals(token2)) {
						playerPass = token2;
					} else {
						return 3;
					}
				}
				break;
			case 2:
				if (token.equals("character-height")) {
					p.heightLevel = Integer.parseInt(token2);
				} else if (token.equals("character-posx")) {
					p.teleportToX = (Integer.parseInt(token2) &lt;= 0 ? 3210 : Integer.parseInt(token2));
				} else if (token.equals("character-posy")) {
					p.teleportToY = (Integer.parseInt(token2) &lt;= 0 ? 3424 : Integer.parseInt(token2));
				} else if (token.equals("Black-marks")) {
					p.BlackMarks = Integer.parseInt(token2);
				} 
				break;
			case 3:
				if (token.equals("character-equip")) {
					p.playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 4:
				if (token.equals("character-look")) {
					p.playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
				} 
				break;
			case 5:
				if (token.equals("character-skill")) {
					p.playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 6:
				if (token.equals("character-item")) {
					p.playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 7:
				if (token.equals("character-bank")) {
					p.bankItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.bankItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 8:
				 if (token.equals("character-friend")) {
					p.friends[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
				} 
				break;
			case 9:
				/* if (token.equals("character-ignore")) {
					ignores[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
				} */
				break;
			case 20:
				if (token.equals("stored")) {
					p.storeditems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
				}
				break;

			case 21:
				 if (token.equals("occupy")) {
					p.occupied[Integer.parseInt(token3[0])] = Boolean.parseBoolean(token3[1]);
				} 
				break;
			case 10:
	if (token.equals("character-shop")) {
		p.playerShop[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
		p.playerShopP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
		p.playerShopN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[3]);
	} 
break;
			}
		} else {
			if (line.equals("[ACCOUNT]")) {		ReadMode = 1;
			} else if (line.equals("[CHARACTER]")) {	ReadMode = 2;
			} else if (line.equals("[EQUIPMENT]")) {	ReadMode = 3;
			} else if (line.equals("[LOOK]")) {		ReadMode = 4;
			} else if (line.equals("[SKILLS]")) {		ReadMode = 5;
			} else if (line.equals("[ITEMS]")) {		ReadMode = 6;
			} else if (line.equals("[BANK]")) {		ReadMode = 7;
			} else if (line.equals("[FRIENDS]")) {		ReadMode = 8;
			} else if (line.equals("[IGNORES]")) {		ReadMode = 9;
</code></pre>
<p>} else if (line.equals("[STORED]")) {		ReadMode = 20;<br>
} else if (line.equals("[OCCUPY]")) {		ReadMode = 21;<br>
} else if (line.equals("[SHOP]")) {		ReadMode = 10;<br>
} else if (line.equals("[EOF]")) {		try { characterfile.close(); } catch(IOException ioexception) { } return 1;<br>
}<br>
}<br>
try {<br>
line = characterfile.readLine();<br>
} catch(IOException ioexception1) { EndOfFile = true; }<br>
}<br>
try { characterfile.close(); } catch(IOException ioexception) { }<br>
return 13;<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-players-deleted-upon-login-sql-integration-dspk/424295/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-players-deleted-upon-login-sql-integration-dspk/424295/1</link>
        <pubDate>Tue, 06 Dec 2011 03:13:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-424295-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-players-deleted-upon-login-sql-integration-dspk/424295.rss">[PI]Players Deleted Upon Login? SQL Integration[DSPK]</source>
      </item>
  </channel>
</rss>
