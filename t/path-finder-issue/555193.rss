<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Path finder issue</title>
    <link>https://forum.moparisthebest.com/t/path-finder-issue/555193</link>
    <description>Hi, my path finder does not work when the players localY is over 400 (so anything above Edgeville that is north of map). It will take too long causing the server to crash. Everything from south of map works fine. 

Here&#39;s the code:

[code=java]
@Override
    public Path find(Position position, int radius, int srcX, int srcY, int dstX, int dstY, int objWidth, int objLength, int size) {
    	/**
    	 * TODO: Fix - if the srcY is bigger then 400, this whole code will take too long and not work
    	 */
    	
    	int width = radius + (srcX + srcY);
    	int length = width;
    	
        /* Move our coordinates to the center so we don&#39;t run into bounds issues */
        srcX += radius; srcY += radius;
        dstX += radius; dstY += radius;

        if(dstX &lt; 0 || dstY &lt; 0 || dstX &gt;= width || dstY &gt;= length) {
            return null; // out of range
        }
        
        TraversalMap map = World.getWorld().getTraversalMap();

        open.clear();
        closed.clear();
        
        nodes = new Node[width][length];
        for(int x = 0; x &lt; width; x++) {
            for(int y = 0; y &lt; length; y++) {
                nodes[x][y] = new Node(x, y);
            }
        }
        
        open.add(nodes[srcX][srcY]);
        
        while(open.size() &gt; 0) {
            current = getLowestCost();
            if(current == nodes[dstX][dstY]) {
                break;
            }
            open.remove(current);
            closed.add(current);

            int x = current.getX(), y = current.getY();

            // south
            if(y &gt; 0 &amp;&amp; map.isTraversableSouth(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x][y - 1];
                examineNode(n);
            }
            // west
            if(x &gt; 0 &amp;&amp; map.isTraversableWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y];
                examineNode(n);
            }
            // north
            if(y &lt; length - 1 &amp;&amp; map.isTraversableNorth(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x][y + 1];
                examineNode(n);
            }
            // east
            if(x &lt; width - 1 &amp;&amp; map.isTraversableEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y];
                examineNode(n);
            }
            // south west
            if(x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; map.isTraversableSouthWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y - 1];
                examineNode(n);
            }
            // north west
            if(x &gt; 0 &amp;&amp; y &lt; length - 1 &amp;&amp; map.isTraversableNorthWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y + 1];
                examineNode(n);
            }

            // south east
            if(x &lt; width - 1 &amp;&amp; y &gt; 0 &amp;&amp; map.isTraversableSouthEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y - 1];
                examineNode(n);
            }
            // north east
            if(x &lt; width - 1 &amp;&amp; y &lt; length - 1 &amp;&amp; map.isTraversableNorthEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y + 1];
                examineNode(n);
            }
        }
        
        if(nodes[dstX][dstY].getParent() == null) {
            int newX = dstX;
            int newY = dstY;

            int minDistance = 999;
            int minCost = 999_999;
            for(int x = dstX - UNREACHABLE_SEARCH_DISTANCE; x &lt;= dstX + UNREACHABLE_SEARCH_DISTANCE; x++) {
                for(int y = dstY - UNREACHABLE_SEARCH_DISTANCE; y &lt;= dstY + UNREACHABLE_SEARCH_DISTANCE; y++) {
                	if((x &gt;= 0 &amp;&amp; x &lt; width) &amp;&amp; (y &gt;= 0 &amp;&amp; y &lt; length) &amp;&amp; nodes[x][y].parent != null) {
                        int deltaX = 0;
                        int deltaY = 0;
                        if(y &lt; dstY) {
                            deltaY = dstY - y;
                        } else if(y &gt; (dstY + objLength - 1)) {
                            deltaY = y + 1 - (dstY + objLength);
                        }
                        if(x &gt;= dstX) {
                            if(x &gt; (dstX + objWidth - 1)) {
                                deltaX = 1 + (x - dstX - objWidth);
                            }
                        } else {
                            deltaX = dstX - x;
                        }
                        int dist = (int)Math.sqrt(deltaX * deltaX + deltaY + deltaY);
                        int cost = nodes[x][y].cost;
                        if(dist &lt; minDistance || (dist == minDistance &amp;&amp; cost &lt; minCost)) {
                            minDistance = dist;
                            minCost = cost;
                            newX = x;
                            newY = y;
                        }
                    }
                }
            }

            if(nodes[newX][newY].getParent() == null) {
                System.out.println(&quot;Still no path&quot;);
                return null;
            }

            dstX = newX; dstY = newY;
        }

        Path p = new Path();
        Node n = nodes[dstX][dstY];
        while(n != nodes[srcX][srcY]) {
            p.addFirst(new Position(n.getX() + position.getX() - radius, n.getY() + position.getY() - radius));
            n = n.getParent();
        }
        return p;
    }
[/code]

Note: 
If I increase these values
[code=java]int width = radius + (srcX + srcY);
int length = width;[/code]
the path finder will take too long  and crash. 

Code useage: 
[code=java]
        Position destination = new Position(message.getDestination().getX(), message.getDestination().getY(), z);
        Position position = player.getPosition();

        int baseLocalX = position.getBaseLocalX();
        int baseLocalY = position.getBaseLocalY();
        int destLocalX = destination.getX() - baseLocalX;
        int destLocalY = destination.getY() - baseLocalY;
        
        Position base = new Position(baseLocalX, baseLocalY, position.getHeight());
        Path path = pathFinder.find(base, 104, position.getLocalX(), position.getLocalY(), destLocalX, destLocalY);
[/code]

Please help.</description>
    
    <lastBuildDate>Fri, 15 Apr 2016 11:01:43 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/path-finder-issue/555193.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Path finder issue</title>
        <dc:creator><![CDATA[@my-swagger my-swagger]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/my-swagger">@my-swagger</a> wrote:</p>
          <blockquote>
              <p>Hi, my path finder does not work when the players localY is over 400 (so anything above Edgeville that is north of map). It will take too long causing the server to crash. Everything from south of map works fine.</p>
<p>Hereâ€™s the code:</p>
<pre><code class="lang-auto">@Override
    public Path find(Position position, int radius, int srcX, int srcY, int dstX, int dstY, int objWidth, int objLength, int size) {
    	/**
    	 * TODO: Fix - if the srcY is bigger then 400, this whole code will take too long and not work
    	 */
    	
    	int width = radius + (srcX + srcY);
    	int length = width;
    	
        /* Move our coordinates to the center so we don't run into bounds issues */
        srcX += radius; srcY += radius;
        dstX += radius; dstY += radius;

        if(dstX &lt; 0 || dstY &lt; 0 || dstX &gt;= width || dstY &gt;= length) {
            return null; // out of range
        }
        
        TraversalMap map = World.getWorld().getTraversalMap();

        open.clear();
        closed.clear();
        
        nodes = new Node[width][length];
        for(int x = 0; x &lt; width; x++) {
            for(int y = 0; y &lt; length; y++) {
                nodes[x][y] = new Node(x, y);
            }
        }
        
        open.add(nodes[srcX][srcY]);
        
        while(open.size() &gt; 0) {
            current = getLowestCost();
            if(current == nodes[dstX][dstY]) {
                break;
            }
            open.remove(current);
            closed.add(current);

            int x = current.getX(), y = current.getY();

            // south
            if(y &gt; 0 &amp;&amp; map.isTraversableSouth(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x][y - 1];
                examineNode(n);
            }
            // west
            if(x &gt; 0 &amp;&amp; map.isTraversableWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y];
                examineNode(n);
            }
            // north
            if(y &lt; length - 1 &amp;&amp; map.isTraversableNorth(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x][y + 1];
                examineNode(n);
            }
            // east
            if(x &lt; width - 1 &amp;&amp; map.isTraversableEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y];
                examineNode(n);
            }
            // south west
            if(x &gt; 0 &amp;&amp; y &gt; 0 &amp;&amp; map.isTraversableSouthWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y - 1];
                examineNode(n);
            }
            // north west
            if(x &gt; 0 &amp;&amp; y &lt; length - 1 &amp;&amp; map.isTraversableNorthWest(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x - 1][y + 1];
                examineNode(n);
            }

            // south east
            if(x &lt; width - 1 &amp;&amp; y &gt; 0 &amp;&amp; map.isTraversableSouthEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y - 1];
                examineNode(n);
            }
            // north east
            if(x &lt; width - 1 &amp;&amp; y &lt; length - 1 &amp;&amp; map.isTraversableNorthEast(position.getHeight(), position.getX() + x - radius, position.getY() + y - radius, size)) {
                Node n = nodes[x + 1][y + 1];
                examineNode(n);
            }
        }
        
        if(nodes[dstX][dstY].getParent() == null) {
            int newX = dstX;
            int newY = dstY;

            int minDistance = 999;
            int minCost = 999_999;
            for(int x = dstX - UNREACHABLE_SEARCH_DISTANCE; x &lt;= dstX + UNREACHABLE_SEARCH_DISTANCE; x++) {
                for(int y = dstY - UNREACHABLE_SEARCH_DISTANCE; y &lt;= dstY + UNREACHABLE_SEARCH_DISTANCE; y++) {
                	if((x &gt;= 0 &amp;&amp; x &lt; width) &amp;&amp; (y &gt;= 0 &amp;&amp; y &lt; length) &amp;&amp; nodes[x][y].parent != null) {
                        int deltaX = 0;
                        int deltaY = 0;
                        if(y &lt; dstY) {
                            deltaY = dstY - y;
                        } else if(y &gt; (dstY + objLength - 1)) {
                            deltaY = y + 1 - (dstY + objLength);
                        }
                        if(x &gt;= dstX) {
                            if(x &gt; (dstX + objWidth - 1)) {
                                deltaX = 1 + (x - dstX - objWidth);
                            }
                        } else {
                            deltaX = dstX - x;
                        }
                        int dist = (int)Math.sqrt(deltaX * deltaX + deltaY + deltaY);
                        int cost = nodes[x][y].cost;
                        if(dist &lt; minDistance || (dist == minDistance &amp;&amp; cost &lt; minCost)) {
                            minDistance = dist;
                            minCost = cost;
                            newX = x;
                            newY = y;
                        }
                    }
                }
            }

            if(nodes[newX][newY].getParent() == null) {
                System.out.println("Still no path");
                return null;
            }

            dstX = newX; dstY = newY;
        }

        Path p = new Path();
        Node n = nodes[dstX][dstY];
        while(n != nodes[srcX][srcY]) {
            p.addFirst(new Position(n.getX() + position.getX() - radius, n.getY() + position.getY() - radius));
            n = n.getParent();
        }
        return p;
    }</code></pre>
<p>Note:<br>
If I increase these values</p>
<p><code>int width = radius + (srcX + srcY);
int length = width;</code><br>
the path finder will take too long  and crash.</p>
<p>Code useage:</p>
<pre><code class="lang-auto">        Position destination = new Position(message.getDestination().getX(), message.getDestination().getY(), z);
        Position position = player.getPosition();

        int baseLocalX = position.getBaseLocalX();
        int baseLocalY = position.getBaseLocalY();
        int destLocalX = destination.getX() - baseLocalX;
        int destLocalY = destination.getY() - baseLocalY;
        
        Position base = new Position(baseLocalX, baseLocalY, position.getHeight());
        Path path = pathFinder.find(base, 104, position.getLocalX(), position.getLocalY(), destLocalX, destLocalY);</code></pre>
<p>Please help.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/path-finder-issue/555193/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/path-finder-issue/555193/1</link>
        <pubDate>Fri, 15 Apr 2016 11:01:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555193-1</guid>
        <source url="https://forum.moparisthebest.com/t/path-finder-issue/555193.rss">Path finder issue</source>
      </item>
  </channel>
</rss>
