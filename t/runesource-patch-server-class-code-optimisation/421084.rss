<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[RuneSource] Patch - Server class code optimisation</title>
    <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084</link>
    <description>First of all this in no way improves the features or performance of RuneSource. I&#39;ve recently started playing with the base again and wanted to share my code optimisations. This differs from a snippet because I&#39;ll be explaining the changes I&#39;ve made. Note some of the code optimisation is due to removing of debugging println&#39;s and comment reduction.

Here is my Server class which you can directly replace yours with, unless you&#39;ve made changes to yours. But it does have some features removed such as gateway filtering and plugins - both are very easy to add back in and I will not baby your on how to do so:

[code=java]
public class Server implements Runnable {

    private Selector selector;

    private ServerSocketChannel channel;

    public Server() {
        try {
            Misc.sortEquipmentSlotDefinitions();
            Misc.loadStackableItems(&quot;data/items/stackable.dat&quot;);

            selector = Selector.open();
            channel = ServerSocketChannel.open();
            channel.configureBlocking(false);
            channel.socket().bind(new InetSocketAddress(43594));
            channel.register(selector, SelectionKey.OP_ACCEPT);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void run() {
        try {
            selector.selectNow();
            for (SelectionKey selectionKey : selector.selectedKeys()) {
                if (selectionKey.isAcceptable()) {
                    SocketChannel socket = channel.accept();
                    if (socket != null) {
                        socket.configureBlocking(false);
                        SelectionKey key = socket.register(selector, SelectionKey.OP_READ);
                        Client client = new Player(key);
                        key.attach(client);
                    }
                }
                if (selectionKey.isReadable()) {
                    ((Client) selectionKey.attachment()).handleIncomingData();
                }
            }
            selector.selectedKeys().clear();
            PlayerHandler.process();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                new Server(),
                0,
                600,
                TimeUnit.MILLISECONDS
        );
    }

}
[/code]

The first change I made was to the custom cycle system, this could be removed because the Java API has support for such a feature. Instead the cycle code could be placed into the run method, then the cycling could be initialised using a static executor as seen in:

[code=java]
    public static void main(String[] args) {
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                new Server(),
                0,
                600,
                TimeUnit.MILLISECONDS
        );
    }
[/code]

The old method times how long it takes to process a cycle using a custom timer in the Misc class. It then subtracts the process time from 600ms which the Runescape engine needs (with a single threaded server anyway). It uses this time difference to allow the thread to sleep. This can be inaccurate due to the use of millisecond timers instead of Java&#39;s System.nanoTime method. The scheduled executor service is thread-safe (if you understand concurrency) and accurate with timing.

The second major change made was to how the Client object was mapped to the SelectionKey. Blake originally used a HashMap, but the SelectionKey allows your to bind an object to the key and pull that reference later. This change is noticeable in:

[code=java]
                if (selectionKey.isAcceptable()) {
                    SocketChannel socket = channel.accept();
                    if (socket != null) {
                        socket.configureBlocking(false);
                        SelectionKey key = socket.register(selector, SelectionKey.OP_READ);
                        Client client = new Player(key);
                        key.attach(client);
                    }
                }
                if (selectionKey.isReadable()) {
                    ((Client) selectionKey.attachment()).handleIncomingData();
                }
[/code]

See where I&#39;ve used &quot;key.attatch(client);&quot; instead of &quot;getClientMap().put(key, client);&quot; and &quot;((Client) selectionKey.attachment()).handleIncomingData();&quot; instead of &quot;getClientMap().get(selectionKey).handleIncomingData();&quot;. This allows us to remove the HashMap completely from the &#39;equation&#39;.

Because of these reductions the Misc.Stopwatch isn&#39;t needed, neither is the singleton access to the Server class (as this was used to access the HashMap). I also removed the command line arguments, as Runescape traditionally runs on port 43594 and will not update smoothly is you send player updates at different intervals than 600ms.

I hope these small modifications teach you that it is more efficient to take the time to research, learn and use the Java API rather than writing your own code that will probably be less inefficient.

Remember KISS (keep it simple stupid).</description>
    
    <lastBuildDate>Thu, 10 Nov 2011 17:20:22 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@Advocatus Advocatus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/advocatus">@Advocatus</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="6" data-topic="421084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/wintercanon/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Wintercanon:</div>
<blockquote>
<p>Regarding change one, it doesn’t matter whether it benefits from being thread-safe or not, do you have conclusive proof that the ExecutorService hinders performance compared to calling and assigning the nanoTime() method twice, calculating the difference and then telling the thread to sleep. Plus that method doesn’t take into account the time it takes the thread to actually enter the sleep state. If you don’t, my opinion is the ExecutorService looks far more elegant and the concurrency becomes a bonus, if you want to use multiple threads. RuneSource actually performs much faster on a 2+ core machine if you outsource player updating to a threadpool.</p>
</blockquote>
</aside>
<p>I didnt think executors took into account the time required to wake up the thread. I might have to look into that. I thought they just used the nano time.</p>
<p>And yes, the synchronization is a benefit, but even if you did a threadpool for updating, you could just synchronize the global player and npc lists during updating.</p>
<aside class="quote quote-modified" data-post="6" data-topic="421084">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/wintercanon/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Wintercanon:</div>
<blockquote>
<p>Regarding the attachment of an object, this is curious. Could you please provide me with some proven material on the subject? I thought that when polling using select() or selectNow() only added the ready keys to the selected key set. So with an attached object they’re always ready even after the connection is dropped? I don’t know if you noticed my addition of calling the clear() method for the selected key set. Whether not that changes your statement of the key remaining ready, just because it is object bound.</p>
</blockquote>
</aside>
<p>Googled it for you &lt;3, first result.<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://s1.wp.com/i/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://jfarcand.wordpress.com/2006/07/06/tricks-and-tips-with-nio-part-ii-why-selectionkey-attach-is-evil/" target="_blank" title="03:01AM - 06 July 2006" rel="nofollow noopener">6312 – 6 Jul 06</a>
  </header>
  <article class="onebox-body">
    <img src="https://i0.wp.com/weblogs.java.net/blog/jfarcand/archive/BelleIsle-2.jpg?fit=440%2C330" class="thumbnail" width="" height="">

<h3><a href="https://jfarcand.wordpress.com/2006/07/06/tricks-and-tips-with-nio-part-ii-why-selectionkey-attach-is-evil/" target="_blank" rel="nofollow noopener">Tricks and Tips with NIO part II: Why SelectionKey.attach() is evil</a></h3>

<p>This time I will discuss why I recommend to avoid using SelectionKey.attach() when  designing scaleable NIO server.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/7</link>
        <pubDate>Thu, 10 Nov 2011 17:20:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-7</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>Regarding change one, it doesn’t matter whether it benefits from being thread-safe or not, do you have conclusive proof that the ExecutorService hinders performance compared to calling and assigning the nanoTime() method twice, calculating the difference and then telling the thread to sleep. Plus that method doesn’t take into account the time it takes the thread to actually enter the sleep state. If you don’t, my opinion is the ExecutorService looks far more elegant and the concurrency becomes a bonus, if you want to use multiple threads. RuneSource actually performs much faster on a 2+ core machine if you outsource player updating to a threadpool.</p>
<p>Regarding the attachment of an object, this is curious. Could you please provide me with some proven material on the subject? I thought that when polling using select() or selectNow() only added the ready keys to the selected key set. So with an attached object they’re always ready even after the connection is dropped? I don’t know if you noticed my addition of calling the clear() method for the selected key set. Whether not that changes your statement of the key remaining ready, just because it is object bound.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/6</link>
        <pubDate>Thu, 10 Nov 2011 16:00:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-6</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@Advocatus Advocatus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/advocatus">@Advocatus</a> wrote:</p>
          <blockquote>
              <p>@ changes, I wouldn’t recommend them.</p>
<p>Why you might ask?<br>
Regarding change 1, an Executor service is handy in a concurrent enviroment, but on a single threaded server, you would be better off using the old system and just using nanoseconds instead of milliseconds.</p>
<p>Regarding change 2, Blake probably didnt attach an object to the selectionkey, because when the keys have an object bound to them, they stay in the selector keys set. As a result, eventually this isn’t so much an upgrade, but a handicap :).</p>
<p>One simple tweak would be to attach a null object to the selectionkey before you remove / destroy the player object, however that would not account for connections terminated in between the times of the object being attached and the player being added to the worldwide players array.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/5</link>
        <pubDate>Thu, 10 Nov 2011 13:04:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-5</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>[quote=“Wintercanon, post:3, topic:421084”][quote author=dain bramage link=topic=523758.msg3810288#msg3810288 date=1320848173]<br>
Not optimized if notes don’t exist.<br>
[/quote]Thank you, but if code is written correctly it should explain itself. ;)[/quote]<br>
I’m that kind of guy that notes everything (even trivial things), simply because IMO, it looks neater, and I like javadoc.</p>
<p>Sad this got bumped down.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/4</link>
        <pubDate>Thu, 10 Nov 2011 06:11:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-4</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>[quote=“dain bramage, post:2, topic:421084”]Not optimized if notes don’t exist.[/quote]Thank you, but if code is written correctly it should explain itself. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/3</link>
        <pubDate>Wed, 09 Nov 2011 14:45:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-3</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>Not optimized if notes don’t exist.</p>
<p>Lovely though.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/2</link>
        <pubDate>Wed, 09 Nov 2011 14:16:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-2</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
      <item>
        <title>[RuneSource] Patch - Server class code optimisation</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>First of all this in no way improves the features or performance of RuneSource. I’ve recently started playing with the base again and wanted to share my code optimisations. This differs from a snippet because I’ll be explaining the changes I’ve made. Note some of the code optimisation is due to removing of debugging println’s and comment reduction.</p>
<p>Here is my Server class which you can directly replace yours with, unless you’ve made changes to yours. But it does have some features removed such as gateway filtering and plugins - both are very easy to add back in and I will not baby your on how to do so:</p>
<pre><code class="lang-auto">public class Server implements Runnable {

    private Selector selector;

    private ServerSocketChannel channel;

    public Server() {
        try {
            Misc.sortEquipmentSlotDefinitions();
            Misc.loadStackableItems("data/items/stackable.dat");

            selector = Selector.open();
            channel = ServerSocketChannel.open();
            channel.configureBlocking(false);
            channel.socket().bind(new InetSocketAddress(43594));
            channel.register(selector, SelectionKey.OP_ACCEPT);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public void run() {
        try {
            selector.selectNow();
            for (SelectionKey selectionKey : selector.selectedKeys()) {
                if (selectionKey.isAcceptable()) {
                    SocketChannel socket = channel.accept();
                    if (socket != null) {
                        socket.configureBlocking(false);
                        SelectionKey key = socket.register(selector, SelectionKey.OP_READ);
                        Client client = new Player(key);
                        key.attach(client);
                    }
                }
                if (selectionKey.isReadable()) {
                    ((Client) selectionKey.attachment()).handleIncomingData();
                }
            }
            selector.selectedKeys().clear();
            PlayerHandler.process();
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static void main(String[] args) {
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                new Server(),
                0,
                600,
                TimeUnit.MILLISECONDS
        );
    }

}</code></pre>
<p>The first change I made was to the custom cycle system, this could be removed because the Java API has support for such a feature. Instead the cycle code could be placed into the run method, then the cycling could be initialised using a static executor as seen in:</p>
<pre><code class="lang-auto">    public static void main(String[] args) {
        Executors.newSingleThreadScheduledExecutor().scheduleAtFixedRate(
                new Server(),
                0,
                600,
                TimeUnit.MILLISECONDS
        );
    }</code></pre>
<p>The old method times how long it takes to process a cycle using a custom timer in the Misc class. It then subtracts the process time from 600ms which the Runescape engine needs (with a single threaded server anyway). It uses this time difference to allow the thread to sleep. This can be inaccurate due to the use of millisecond timers instead of Java’s System.nanoTime method. The scheduled executor service is thread-safe (if you understand concurrency) and accurate with timing.</p>
<p>The second major change made was to how the Client object was mapped to the SelectionKey. Blake originally used a HashMap, but the SelectionKey allows your to bind an object to the key and pull that reference later. This change is noticeable in:</p>
<pre><code class="lang-auto">                if (selectionKey.isAcceptable()) {
                    SocketChannel socket = channel.accept();
                    if (socket != null) {
                        socket.configureBlocking(false);
                        SelectionKey key = socket.register(selector, SelectionKey.OP_READ);
                        Client client = new Player(key);
                        key.attach(client);
                    }
                }
                if (selectionKey.isReadable()) {
                    ((Client) selectionKey.attachment()).handleIncomingData();
                }</code></pre>
<p>See where I’ve used “key.attatch(client);” instead of “getClientMap().put(key, client);” and “((Client) selectionKey.attachment()).handleIncomingData();” instead of “getClientMap().get(selectionKey).handleIncomingData();”. This allows us to remove the HashMap completely from the ‘equation’.</p>
<p>Because of these reductions the Misc.Stopwatch isn’t needed, neither is the singleton access to the Server class (as this was used to access the HashMap). I also removed the command line arguments, as Runescape traditionally runs on port 43594 and will not update smoothly is you send player updates at different intervals than 600ms.</p>
<p>I hope these small modifications teach you that it is more efficient to take the time to research, learn and use the Java API rather than writing your own code that will probably be less inefficient.</p>
<p>Remember KISS (keep it simple stupid).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084/1</link>
        <pubDate>Wed, 09 Nov 2011 13:27:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421084-1</guid>
        <source url="https://forum.moparisthebest.com/t/runesource-patch-server-class-code-optimisation/421084.rss">[RuneSource] Patch - Server class code optimisation</source>
      </item>
  </channel>
</rss>
