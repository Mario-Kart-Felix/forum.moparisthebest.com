<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compile errors please help! [delta]</title>
    <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783</link>
    <description>Hello, so lately ive been trying to add multibarrage, and i got 7 errors of following a tutorial. Not that much but they&#39;ve to be fixed and i really don&#39;t know how.

these are the errors:
MagicHandler.java:476: &#39;else&#39; without &#39;if&#39;
                        } else {
                          ^
MagicHandler.java:485: illegal start of type
                        try {
                        ^
MagicHandler.java:487: illegal start of type
                        } catch (IOException ioexception1) {
                          ^
MagicHandler.java:487: &#39;;&#39; expected
                        } catch (IOException ioexception1) {
                                                         ^
MagicHandler.java:491: class, interface, or enum expected
                try {
                ^
MagicHandler.java:493: class, interface, or enum expected
                } catch (IOException ioexception) {
                ^
MagicHandler.java:497: class, interface, or enum expected
        }

And this is my whole magichandler method:

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;

public class MagicHandler {
	public static boolean itHeals, itFreezes, itPoisons, itReducesAttack, itTeleblocks;
	public static String message;
	public static int npcX, npcY, npcHP, hitDiff, xp, usesFirstGfx;
	public static int playerX, playerY, playerHP;
	public static int spellHeight, graphicHeight, endGFX;
	public static int spellID, castAnimation, spellGFX, spellLevel, rune1,
			rune1Am, rune2, rune2Am, rune3, rune3Am, rune4, rune4Am,
			spellItemID;

	// public static int multiSpells[] = {12963,13011,12919,12881,12975,13023,12929,12891};

	public static void addSpellNpc(int id, int Y, int X, int npcIndex) {
		int offsetY = (X - npcX) * -1;
		int offsetX = (Y - npcY) * -1;
		if (usesFirstGfx != 0) {
			if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
						50, 95, (id + 1), spellHeight, spellHeight,
						(npcIndex + 1), (id + 2), npcY, npcX);
			} else {
				if (spellID == 1572) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (npcIndex + 1), 181, npcY, npcX);
				}
				if (spellID == 1582) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (npcIndex + 1), 180, npcY, npcX);
				}
				if (spellID == 1592) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (npcIndex + 1), 179, npcY, npcX);
				}
			}
		} else {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
					95, (id + 1), spellHeight, spellHeight, (npcIndex + 1),
					(id + 2), npcY, npcX);
		}
	}

	public static void addSpellPlayer(int id, int Y, int X, int playerIndex) {
		int offsetY = (X - playerX) * -1;
		int offsetX = (Y - playerY) * -1;
		if (usesFirstGfx != 0) {
			if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
						50, 95, (id + 1), spellHeight, spellHeight,
						(playerIndex + 1), (id + 2), playerY, playerX);
			} else {
				if (spellID == 1572) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (playerIndex + 1), 181, playerY,
							playerX);
				}
				if (spellID == 1582) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (playerIndex + 1), 180, playerY,
							playerX);
				}
				if (spellID == 1592) {
					GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
							offsetX, 50, 95, (id + 1), spellHeight,
							spellHeight, (playerIndex + 1), 179, playerY,
							playerX);
				}
			}
		} else {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
					95, (id + 1), spellHeight, spellHeight, (playerIndex + 1),
					(id + 2), playerY, playerX);
		}
	}

	public static int magicSpellNpc(int id, int playerId, int npcIndex, 
			int lvl) {
		client p = (client) PlayerHandler.players[playerId];
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String token2_2 = &quot;&quot;;
		String[] token3 = new String[20];
		boolean EndOfFile = false;

		BufferedReader characterfile = null;
		try {
			characterfile = new BufferedReader(new FileReader(
					&quot;config\\magicSpells.cfg&quot;));
		} catch (FileNotFoundException fileex) {
			misc.println(&quot;[MagicHandler]: magicSpells.cfg: file not found.&quot;);
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception) {
			misc
					.println(&quot;[MagicHandler]: magicSpells.cfg: error loading file.&quot;);
		}
		while ((EndOfFile == false) &amp;&amp; (line != null)) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token3 = token2_2.split(&quot;\t&quot;);
				if (token.equals(&quot;spell&quot;)) {
					spellID = Integer.parseInt(token3[0]);
					castAnimation = Integer.parseInt(token3[1]);
					spellGFX = Integer.parseInt(token3[2]);
					usesFirstGfx = Integer.parseInt(token3[3]);
					spellLevel = Integer.parseInt(token3[4]);
					rune1 = Integer.parseInt(token3[5]);
					rune1Am = Integer.parseInt(token3[6]);
					rune2 = Integer.parseInt(token3[7]);
					rune2Am = Integer.parseInt(token3[8]);
					rune3 = Integer.parseInt(token3[9]);
					rune3Am = Integer.parseInt(token3[10]);
					rune4 = Integer.parseInt(token3[11]);
					rune4Am = Integer.parseInt(token3[12]);
					spellItemID = Integer.parseInt(token3[13]);
					hitDiff = Integer.parseInt(token3[14]);
					xp = Integer.parseInt(token3[15]);
					spellHeight = Integer.parseInt(token3[16]);
					graphicHeight = Integer.parseInt(token3[17]);
					String spellName = token3[18];
					endGFX = (spellGFX + 1);
					if (id == spellID) {
						if (lvl &gt;= spellLevel) {
							if (!p.playerHasItem(rune1, rune1Am)
									|| !p.playerHasItem(rune2, rune2Am)
									|| !p.playerHasItem(rune3, rune3Am)
									|| !p.playerHasItem(rune4, rune4Am)) {
								p
										.sM(&quot;You don&#39;t have enough runes to cast this spell.&quot;);
							} else {
								if (spellItemID != -1) {
									if (p.playerEquipment[p.playerWeapon] != spellItemID) {
										p.sM(&quot;You need a &quot;
												+ p.getItemName(spellItemID)
												+ &quot; to cast this spell.&quot;);
										return -1;
									}
								}
								if (p.playerHasItem(rune1, rune1Am)
										&amp;&amp; p.playerHasItem(rune2, rune2Am)
										&amp;&amp; p.playerHasItem(rune3, rune3Am)
										&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
									if (p.spellHitTimer &lt;= 0) {
										p.setAnimation(castAnimation);
										p.fletchTime = 3;
										addSpellNpc(spellGFX, p.absY,
													p.absX, npcIndex);
										p.spellHitTimer = 4;
										p.isSpellNPC = true;
										p.castSpell = true;
										p.spellHit = misc.random(hitDiff);
										if ((spellID == 1160)
												|| (spellID == 1163)
												|| (spellID == 1166)
												|| (spellID == 1169)) {
											if (p.playerEquipment[p.playerHands] == 777) {
												hitDiff = (misc
														.random(hitDiff + 3));
												p.spellHit = hitDiff; // fixed
												// bonus
												// -bakatool.
											}
										}
										if (spellID == 1190) {
											if (p.SaradominStrike) {
												p.spellHit = 30;
											}
										}
										if (spellID == 1191) {
											if (p.GuthixClaws) {
												p.spellHit = 30;
											}
										}
										if (spellID == 1192) {
											if (p.ZamorakFlames) {
												p.spellHit = 30;
											}
										}
										p.spellXP = xp;
										p.rune1 = rune1;
										p.rune1Am = rune1Am;
										p.rune2 = rune2;
										p.rune2Am = rune2Am;
										p.rune3 = rune3;
										p.rune3Am = rune3Am;
										p.rune4 = rune4;
										p.rune4Am = rune4Am;
										if ((spellID == 12901)
												|| (spellID == 12911)
												|| (spellID == 12919)
												|| (spellID == 12929)) {
											itHeals = true;
										} else {
											itHeals = false;
										}
										if ((spellID == 1572)
												|| (spellID == 1582)
												|| (spellID == 1592)
												|| (spellID == 12861)
												|| (spellID == 12881)
												|| (spellID == 12871)
												|| (spellID == 12891)) { // Fixed
											// bakatool
											// added
											// all
											// freeze
											// spells.
											itFreezes = true;
										} else {
											itFreezes = false;
										}
										if ((spellID == 12939)
												|| (spellID == 12963)
												|| (spellID == 12951)
												|| (spellID == 12975)) {
											itPoisons = true;
										} else {
											itPoisons = false;
										}
										if ((spellID == 1153)
												|| (spellID == 12987)
												|| (spellID == 13011)
												|| (spellID == 12999)
												|| (spellID == 13023)) {
											itReducesAttack = true;
										} else {
											itReducesAttack = false;
										}
									}
								}
							}
							return npcIndex;
						} else {
							p.sM(&quot;You need a magic level of &quot;
									+ spellLevel
									+ &quot; or better to cast this spell.&quot;);
							return -1;
						}
					}
				}
			} else {
				if (line.equals(&quot;[EOF]&quot;)) {
					try {
						characterfile.close();
					} catch (IOException ioexception) {

					}
				}
			}
			try {
				line = characterfile.readLine();
			} catch (IOException ioexception1) {
				EndOfFile = true;
			}
		}
		try {
			characterfile.close();
		} catch (IOException ioexception) {

		}
		return -1;
	}

	public static int magicSpellPlayer(int id, int playerId,
			int playerIndexToAttack,
			int lvl) {
		client p = (client) PlayerHandler.players[playerId];
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String token2_2 = &quot;&quot;;
		String[] token3 = new String[20];
		boolean EndOfFile = false;

		BufferedReader characterfile = null;
		try {
			characterfile = new BufferedReader(new FileReader(
					&quot;config\\magicSpells.cfg&quot;));
		} catch (FileNotFoundException fileex) {
			misc.println(&quot;[MagicHandler]: magicSpells.cfg: file not found.&quot;);
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception) {
			misc
					.println(&quot;[MagicHandler]: magicSpells.cfg: error loading file.&quot;);
		}
		while ((EndOfFile == false) &amp;&amp; (line != null)) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token3 = token2_2.split(&quot;\t&quot;);
				if (token.equals(&quot;spell&quot;)) {
					spellID = Integer.parseInt(token3[0]);
					castAnimation = Integer.parseInt(token3[1]);
					spellGFX = Integer.parseInt(token3[2]);
					usesFirstGfx = Integer.parseInt(token3[3]);
					spellLevel = Integer.parseInt(token3[4]);
					rune1 = Integer.parseInt(token3[5]);
					rune1Am = Integer.parseInt(token3[6]);
					rune2 = Integer.parseInt(token3[7]);
					rune2Am = Integer.parseInt(token3[8]);
					rune3 = Integer.parseInt(token3[9]);
					rune3Am = Integer.parseInt(token3[10]);
					rune4 = Integer.parseInt(token3[11]);
					rune4Am = Integer.parseInt(token3[12]);
					spellItemID = Integer.parseInt(token3[13]);
					hitDiff = Integer.parseInt(token3[14]);
					xp = Integer.parseInt(token3[15]);
					spellHeight = Integer.parseInt(token3[16]);
					graphicHeight = Integer.parseInt(token3[17]);
					String spellName = token3[18];
					endGFX = (spellGFX + 1);
					if (id == spellID) {
						if (lvl &gt;= spellLevel) {
							if (!p.playerHasItem(rune1, rune1Am)
									|| !p.playerHasItem(rune2, rune2Am)
									|| !p.playerHasItem(rune3, rune3Am)
									|| !p.playerHasItem(rune4, rune4Am)) {
								p
										.sM(&quot;You don&#39;t have enough runes to cast this spell.&quot;);
							} else {
								if (spellItemID != -1) {
									if (p.playerEquipment[p.playerWeapon] != spellItemID) {
										p.sM(&quot;You need a &quot;
												+ p.getItemName(spellItemID)
												+ &quot; to cast this spell.&quot;);
										return -1;
									}
								}
								if (p.playerHasItem(rune1, rune1Am)
										&amp;&amp; p.playerHasItem(rune2, rune2Am)
										&amp;&amp; p.playerHasItem(rune3, rune3Am)
										&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
									if (p.spellHitTimer &lt;= 0) {
										p.setAnimation(castAnimation);
										p.fletchTime = 3;
										addSpellPlayer(spellGFX, p.absY,
													p.absX, playerIndexToAttack);
										p.spellHitTimer = 4;
										p.isSpellNPC = false;
										p.castSpell = true;
										p.spellHit = misc.random(hitDiff);
										if ((spellID == 1160)
												|| (spellID == 1163)
												|| (spellID == 1166)
												|| (spellID == 1169)) {
											if (p.playerEquipment[p.playerHands] == 777) {
												hitDiff = (misc
														.random(hitDiff + 3));
												p.spellHit = hitDiff;
											}
										}
										if (spellID == 1190) {
											if (p.SaradominStrike) {
												p.spellHit = 30;
											}
										}
										if (spellID == 1191) {
											if (p.GuthixClaws) {
												p.spellHit = 30;
											}
										}
										if (spellID == 1192) {
											if (p.ZamorakFlames) {
												p.spellHit = 30;
											}
										}
										p.spellXP = xp;
										p.rune1 = rune1;
										p.rune1Am = rune1Am;
										p.rune2 = rune2;
										p.rune2Am = rune2Am;
										p.rune3 = rune3;
										p.rune3Am = rune3Am;
										p.rune4 = rune4;
										p.rune4Am = rune4Am;
										if ((spellID == 12901)
												|| (spellID == 12911)
												|| (spellID == 12919)
												|| (spellID == 12929)) {
											itHeals = true;
										} else {
											itHeals = false;
										}

										if ((spellID == 12445)) {
											itTeleblocks = true;
										} else {
											itTeleblocks = false;
										}
										if (spellID == 12891)
										p.multiBarrage((client) PlayerHandler.players[playerIndexToAttack]);
                                                                                }
										if ((spellID == 1572)
												|| (spellID == 1582)
												|| (spellID == 1592)
												|| (spellID == 12861)
												|| (spellID == 12881)
												|| (spellID == 12871)
												|| (spellID == 12891)) { // Fixed
											// bakatool
											// added
											// all
											// freeze
											// spells.
											itFreezes = true;
										} else {
											itFreezes = false;
										}
										if ((spellID == 12939)
												|| (spellID == 12963)
												|| (spellID == 12951)
												|| (spellID == 12975)) {
											itPoisons = true;
										} else {
											itPoisons = false;
										}
										if ((spellID == 1153)
												|| (spellID == 12987)
												|| (spellID == 13011)
												|| (spellID == 12999)
												|| (spellID == 13023)) {
											itReducesAttack = true;
										} else {
											itReducesAttack = false;
										}
									}
								}
							}
							return playerIndexToAttack;
						} else {
							p.sM(&quot;You need a magic level of &quot;
									+ spellLevel
									+ &quot; or better to cast this spell.&quot;);
							return -1;
						}
					}
				}
			} else {
				if (line.equals(&quot;[EOF]&quot;)) {
					try {
						characterfile.close();
					} catch (IOException ioexception) {

					}
				}
			}
			try {
				line = characterfile.readLine();
			} catch (IOException ioexception1) {
				EndOfFile = true;
			}
		}
		try {
			characterfile.close();
		} catch (IOException ioexception) {

		}
		return -1;
	}
}

~Thanks a lot!</description>
    
    <lastBuildDate>Sun, 11 Aug 2013 19:11:10 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>[quote=“sertan8, post:7, topic:527783”]How would i make it readable would you like my method in a download?[/quote]PASTEBIN, jebus.  l2read</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/13</link>
        <pubDate>Sun, 11 Aug 2013 19:11:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-13</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@Sup22211 Sup22211]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sup22211">@Sup22211</a> wrote:</p>
          <blockquote>
              <p>Just paste it in pastebin or mark the error lines.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/12</link>
        <pubDate>Sun, 11 Aug 2013 19:00:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-12</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sertan8 sertan8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sertan8">@sertan8</a> wrote:</p>
          <blockquote>
              <p>Alright, thanks. I will also make it neater so you can actually see whats wrong in a few mins.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/11</link>
        <pubDate>Sun, 11 Aug 2013 16:47:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-11</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@mgl mgl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mgl">@mgl</a> wrote:</p>
          <blockquote>
              <p>Well it’s something along that line.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/10</link>
        <pubDate>Sun, 11 Aug 2013 16:42:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-10</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sertan8 sertan8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sertan8">@sertan8</a> wrote:</p>
          <blockquote>
              <p>I have 6 errors lol thete isnt a bracket missing</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/9</link>
        <pubDate>Sun, 11 Aug 2013 16:39:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-9</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@mgl mgl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mgl">@mgl</a> wrote:</p>
          <blockquote>
              <p>It seems like your just missing a braket or added an extra one somewhere. You can use notepad++ or IDE to figure out exactly where it’s at</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/8</link>
        <pubDate>Sun, 11 Aug 2013 16:37:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-8</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sertan8 sertan8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sertan8">@sertan8</a> wrote:</p>
          <blockquote>
              <p>How would i make it readable would you like my method in a download?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/7</link>
        <pubDate>Sun, 11 Aug 2013 16:07:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-7</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@Sup22211 Sup22211]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sup22211">@Sup22211</a> wrote:</p>
          <blockquote>
              <p>Still not readable your error say in line 476 how do you think i am going to find the line</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/6</link>
        <pubDate>Sun, 11 Aug 2013 11:54:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-6</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sertan8 sertan8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sertan8">@sertan8</a> wrote:</p>
          <blockquote>
              <p>[quote=“sertan8, post:1, topic:527783”]Hello, so lately ive been trying to add multibarrage, and i got 7 errors of following a tutorial. Not that much but they’ve to be fixed and i really don’t know how.</p>
<p>these are the errors:<br>
MagicHandler.java:476: ‘else’ without ‘if’<br>
} else {<br>
^<br>
MagicHandler.java:485: illegal start of type<br>
try {<br>
^<br>
MagicHandler.java:487: illegal start of type<br>
} catch (IOException ioexception1) {<br>
^<br>
MagicHandler.java:487: ‘;’ expected<br>
} catch (IOException ioexception1) {<br>
^<br>
MagicHandler.java:491: class, interface, or enum expected<br>
try {<br>
^<br>
MagicHandler.java:493: class, interface, or enum expected<br>
} catch (IOException ioexception) {<br>
^<br>
MagicHandler.java:497: class, interface, or enum expected<br>
}[/quote]<br>
And this is my whole magichandler method:</p>
<p>import java.io.BufferedReader;<br>
import java.io.FileNotFoundException;<br>
import java.io.FileReader;<br>
import java.io.IOException;</p>
<p>public class MagicHandler {<br>
public static boolean itHeals, itFreezes, itPoisons, itReducesAttack, itTeleblocks;<br>
public static String message;<br>
public static int npcX, npcY, npcHP, hitDiff, xp, usesFirstGfx;<br>
public static int playerX, playerY, playerHP;<br>
public static int spellHeight, graphicHeight, endGFX;<br>
public static int spellID, castAnimation, spellGFX, spellLevel, rune1,<br>
rune1Am, rune2, rune2Am, rune3, rune3Am, rune4, rune4Am,<br>
spellItemID;</p>
<pre><code>// public static int multiSpells[] = {12963,13011,12919,12881,12975,13023,12929,12891};

public static void addSpellNpc(int id, int Y, int X, int npcIndex) {
	int offsetY = (X - npcX) * -1;
	int offsetX = (Y - npcY) * -1;
	if (usesFirstGfx != 0) {
		if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
					50, 95, (id + 1), spellHeight, spellHeight,
					(npcIndex + 1), (id + 2), npcY, npcX);
		} else {
			if (spellID == 1572) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 181, npcY, npcX);
			}
			if (spellID == 1582) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 180, npcY, npcX);
			}
			if (spellID == 1592) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 179, npcY, npcX);
			}
		}
	} else {
		GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
				95, (id + 1), spellHeight, spellHeight, (npcIndex + 1),
				(id + 2), npcY, npcX);
	}
}

public static void addSpellPlayer(int id, int Y, int X, int playerIndex) {
	int offsetY = (X - playerX) * -1;
	int offsetX = (Y - playerY) * -1;
	if (usesFirstGfx != 0) {
		if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
					50, 95, (id + 1), spellHeight, spellHeight,
					(playerIndex + 1), (id + 2), playerY, playerX);
		} else {
			if (spellID == 1572) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 181, playerY,
						playerX);
			}
			if (spellID == 1582) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 180, playerY,
						playerX);
			}
			if (spellID == 1592) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 179, playerY,
						playerX);
			}
		}
	} else {
		GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
				95, (id + 1), spellHeight, spellHeight, (playerIndex + 1),
				(id + 2), playerY, playerX);
	}
}

public static int magicSpellNpc(int id, int playerId, int npcIndex, 
		int lvl) {
	client p = (client) PlayerHandler.players[playerId];
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[20];
	boolean EndOfFile = false;

	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader(
				"config\\magicSpells.cfg"));
	} catch (FileNotFoundException fileex) {
		misc.println("[MagicHandler]: magicSpells.cfg: file not found.");
	}
	try {
		line = characterfile.readLine();
	} catch (IOException ioexception) {
		misc
				.println("[MagicHandler]: magicSpells.cfg: error loading file.");
	}
	while ((EndOfFile == false) &amp;&amp; (line != null)) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("spell")) {
				spellID = Integer.parseInt(token3[0]);
				castAnimation = Integer.parseInt(token3[1]);
				spellGFX = Integer.parseInt(token3[2]);
				usesFirstGfx = Integer.parseInt(token3[3]);
				spellLevel = Integer.parseInt(token3[4]);
				rune1 = Integer.parseInt(token3[5]);
				rune1Am = Integer.parseInt(token3[6]);
				rune2 = Integer.parseInt(token3[7]);
				rune2Am = Integer.parseInt(token3[8]);
				rune3 = Integer.parseInt(token3[9]);
				rune3Am = Integer.parseInt(token3[10]);
				rune4 = Integer.parseInt(token3[11]);
				rune4Am = Integer.parseInt(token3[12]);
				spellItemID = Integer.parseInt(token3[13]);
				hitDiff = Integer.parseInt(token3[14]);
				xp = Integer.parseInt(token3[15]);
				spellHeight = Integer.parseInt(token3[16]);
				graphicHeight = Integer.parseInt(token3[17]);
				String spellName = token3[18];
				endGFX = (spellGFX + 1);
				if (id == spellID) {
					if (lvl &gt;= spellLevel) {
						if (!p.playerHasItem(rune1, rune1Am)
								|| !p.playerHasItem(rune2, rune2Am)
								|| !p.playerHasItem(rune3, rune3Am)
								|| !p.playerHasItem(rune4, rune4Am)) {
							p
									.sM("You don't have enough runes to cast this spell.");
						} else {
							if (spellItemID != -1) {
								if (p.playerEquipment[p.playerWeapon] != spellItemID) {
									p.sM("You need a "
											+ p.getItemName(spellItemID)
											+ " to cast this spell.");
									return -1;
								}
							}
							if (p.playerHasItem(rune1, rune1Am)
									&amp;&amp; p.playerHasItem(rune2, rune2Am)
									&amp;&amp; p.playerHasItem(rune3, rune3Am)
									&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
								if (p.spellHitTimer &lt;= 0) {
									p.setAnimation(castAnimation);
									p.fletchTime = 3;
									addSpellNpc(spellGFX, p.absY,
												p.absX, npcIndex);
									p.spellHitTimer = 4;
									p.isSpellNPC = true;
									p.castSpell = true;
									p.spellHit = misc.random(hitDiff);
									if ((spellID == 1160)
											|| (spellID == 1163)
											|| (spellID == 1166)
											|| (spellID == 1169)) {
										if (p.playerEquipment[p.playerHands] == 777) {
											hitDiff = (misc
													.random(hitDiff + 3));
											p.spellHit = hitDiff; // fixed
											// bonus
											// -bakatool.
										}
									}
									if (spellID == 1190) {
										if (p.SaradominStrike) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1191) {
										if (p.GuthixClaws) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1192) {
										if (p.ZamorakFlames) {
											p.spellHit = 30;
										}
									}
									p.spellXP = xp;
									p.rune1 = rune1;
									p.rune1Am = rune1Am;
									p.rune2 = rune2;
									p.rune2Am = rune2Am;
									p.rune3 = rune3;
									p.rune3Am = rune3Am;
									p.rune4 = rune4;
									p.rune4Am = rune4Am;
									if ((spellID == 12901)
											|| (spellID == 12911)
											|| (spellID == 12919)
											|| (spellID == 12929)) {
										itHeals = true;
									} else {
										itHeals = false;
									}
									if ((spellID == 1572)
											|| (spellID == 1582)
											|| (spellID == 1592)
											|| (spellID == 12861)
											|| (spellID == 12881)
											|| (spellID == 12871)
											|| (spellID == 12891)) { // Fixed
										// bakatool
										// added
										// all
										// freeze
										// spells.
										itFreezes = true;
									} else {
										itFreezes = false;
									}
									if ((spellID == 12939)
											|| (spellID == 12963)
											|| (spellID == 12951)
											|| (spellID == 12975)) {
										itPoisons = true;
									} else {
										itPoisons = false;
									}
									if ((spellID == 1153)
											|| (spellID == 12987)
											|| (spellID == 13011)
											|| (spellID == 12999)
											|| (spellID == 13023)) {
										itReducesAttack = true;
									} else {
										itReducesAttack = false;
									}
								}
							}
						}
						return npcIndex;
					} else {
						p.sM("You need a magic level of "
								+ spellLevel
								+ " or better to cast this spell.");
						return -1;
					}
				}
			}
		} else {
			if (line.equals("[EOF]")) {
				try {
					characterfile.close();
				} catch (IOException ioexception) {

				}
			}
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception1) {
			EndOfFile = true;
		}
	}
	try {
		characterfile.close();
	} catch (IOException ioexception) {

	}
	return -1;
}

public static int magicSpellPlayer(int id, int playerId,
		int playerIndexToAttack,
		int lvl) {
	client p = (client) PlayerHandler.players[playerId];
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[20];
	boolean EndOfFile = false;

	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader(
				"config\\magicSpells.cfg"));
	} catch (FileNotFoundException fileex) {
		misc.println("[MagicHandler]: magicSpells.cfg: file not found.");
	}
	try {
		line = characterfile.readLine();
	} catch (IOException ioexception) {
		misc
				.println("[MagicHandler]: magicSpells.cfg: error loading file.");
	}
	while ((EndOfFile == false) &amp;&amp; (line != null)) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("spell")) {
				spellID = Integer.parseInt(token3[0]);
				castAnimation = Integer.parseInt(token3[1]);
				spellGFX = Integer.parseInt(token3[2]);
				usesFirstGfx = Integer.parseInt(token3[3]);
				spellLevel = Integer.parseInt(token3[4]);
				rune1 = Integer.parseInt(token3[5]);
				rune1Am = Integer.parseInt(token3[6]);
				rune2 = Integer.parseInt(token3[7]);
				rune2Am = Integer.parseInt(token3[8]);
				rune3 = Integer.parseInt(token3[9]);
				rune3Am = Integer.parseInt(token3[10]);
				rune4 = Integer.parseInt(token3[11]);
				rune4Am = Integer.parseInt(token3[12]);
				spellItemID = Integer.parseInt(token3[13]);
				hitDiff = Integer.parseInt(token3[14]);
				xp = Integer.parseInt(token3[15]);
				spellHeight = Integer.parseInt(token3[16]);
				graphicHeight = Integer.parseInt(token3[17]);
				String spellName = token3[18];
				endGFX = (spellGFX + 1);
				if (id == spellID) {
					if (lvl &gt;= spellLevel) {
						if (!p.playerHasItem(rune1, rune1Am)
								|| !p.playerHasItem(rune2, rune2Am)
								|| !p.playerHasItem(rune3, rune3Am)
								|| !p.playerHasItem(rune4, rune4Am)) {
							p
									.sM("You don't have enough runes to cast this spell.");
						} else {
							if (spellItemID != -1) {
								if (p.playerEquipment[p.playerWeapon] != spellItemID) {
									p.sM("You need a "
											+ p.getItemName(spellItemID)
											+ " to cast this spell.");
									return -1;
								}
							}
							if (p.playerHasItem(rune1, rune1Am)
									&amp;&amp; p.playerHasItem(rune2, rune2Am)
									&amp;&amp; p.playerHasItem(rune3, rune3Am)
									&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
								if (p.spellHitTimer &lt;= 0) {
									p.setAnimation(castAnimation);
									p.fletchTime = 3;
									addSpellPlayer(spellGFX, p.absY,
												p.absX, playerIndexToAttack);
									p.spellHitTimer = 4;
									p.isSpellNPC = false;
									p.castSpell = true;
									p.spellHit = misc.random(hitDiff);
									if ((spellID == 1160)
											|| (spellID == 1163)
											|| (spellID == 1166)
											|| (spellID == 1169)) {
										if (p.playerEquipment[p.playerHands] == 777) {
											hitDiff = (misc
													.random(hitDiff + 3));
											p.spellHit = hitDiff;
										}
									}
									if (spellID == 1190) {
										if (p.SaradominStrike) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1191) {
										if (p.GuthixClaws) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1192) {
										if (p.ZamorakFlames) {
											p.spellHit = 30;
										}
									}
									p.spellXP = xp;
									p.rune1 = rune1;
									p.rune1Am = rune1Am;
									p.rune2 = rune2;
									p.rune2Am = rune2Am;
									p.rune3 = rune3;
									p.rune3Am = rune3Am;
									p.rune4 = rune4;
									p.rune4Am = rune4Am;
									if ((spellID == 12901)
											|| (spellID == 12911)
											|| (spellID == 12919)
											|| (spellID == 12929)) {
										itHeals = true;
									} else {
										itHeals = false;
									}

									if ((spellID == 12445)) {
										itTeleblocks = true;
									} else {
										itTeleblocks = false;
									}
									if (spellID == 12891)
									p.multiBarrage((client) PlayerHandler.players[playerIndexToAttack]);
                                                                            }
									if ((spellID == 1572)
											|| (spellID == 1582)
											|| (spellID == 1592)
											|| (spellID == 12861)
											|| (spellID == 12881)
											|| (spellID == 12871)
											|| (spellID == 12891)) { // Fixed
										// bakatool
										// added
										// all
										// freeze
										// spells.
										itFreezes = true;
									} else {
										itFreezes = false;
									}
									if ((spellID == 12939)
											|| (spellID == 12963)
											|| (spellID == 12951)
											|| (spellID == 12975)) {
										itPoisons = true;
									} else {
										itPoisons = false;
									}
									if ((spellID == 1153)
											|| (spellID == 12987)
											|| (spellID == 13011)
											|| (spellID == 12999)
											|| (spellID == 13023)) {
										itReducesAttack = true;
									} else {
										itReducesAttack = false;
									}
								}
							}
						}
						return playerIndexToAttack;
					} else {
						p.sM("You need a magic level of "
								+ spellLevel
								+ " or better to cast this spell.");
						return -1;
					}
				}
			}
		} else {
			if (line.equals("[EOF]")) {
				try {
					characterfile.close();
				} catch (IOException ioexception) {

				}
			}
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception1) {
			EndOfFile = true;
		}
	}
	try {
		characterfile.close();
	} catch (IOException ioexception) {

	}
	return -1;
}
</code></pre>
<p>}</p>
<p>~Thanks a lot!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/5</link>
        <pubDate>Sun, 11 Aug 2013 11:40:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-5</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="527783">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/pwnd/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Pwnd:</div>
<blockquote>
<p>Try also using a pastebin so it is more legible. </p>
</blockquote>
</aside>
<p>Or at least code tags…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/4</link>
        <pubDate>Sun, 11 Aug 2013 09:43:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-4</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>Try also using a pastebin so it is more legible.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/3</link>
        <pubDate>Sun, 11 Aug 2013 08:37:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-3</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@Sessy_Pk3r Sessy Pk3r]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sessy_pk3r">@Sessy_Pk3r</a> wrote:</p>
          <blockquote>
              <p>Try deleting that last }</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/2</link>
        <pubDate>Sun, 11 Aug 2013 07:12:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-2</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
      <item>
        <title>Compile errors please help! [delta]</title>
        <dc:creator><![CDATA[@sertan8 sertan8]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sertan8">@sertan8</a> wrote:</p>
          <blockquote>
              <p>Hello, so lately ive been trying to add multibarrage, and i got 7 errors of following a tutorial. Not that much but they’ve to be fixed and i really don’t know how.</p>
<p>these are the errors:<br>
MagicHandler.java:476: ‘else’ without ‘if’<br>
} else {<br>
^<br>
MagicHandler.java:485: illegal start of type<br>
try {<br>
^<br>
MagicHandler.java:487: illegal start of type<br>
} catch (IOException ioexception1) {<br>
^<br>
MagicHandler.java:487: ‘;’ expected<br>
} catch (IOException ioexception1) {<br>
^<br>
MagicHandler.java:491: class, interface, or enum expected<br>
try {<br>
^<br>
MagicHandler.java:493: class, interface, or enum expected<br>
} catch (IOException ioexception) {<br>
^<br>
MagicHandler.java:497: class, interface, or enum expected<br>
}</p>
<p>And this is my whole magichandler method:</p>
<p>import java.io.BufferedReader;<br>
import java.io.FileNotFoundException;<br>
import java.io.FileReader;<br>
import java.io.IOException;</p>
<p>public class MagicHandler {<br>
public static boolean itHeals, itFreezes, itPoisons, itReducesAttack, itTeleblocks;<br>
public static String message;<br>
public static int npcX, npcY, npcHP, hitDiff, xp, usesFirstGfx;<br>
public static int playerX, playerY, playerHP;<br>
public static int spellHeight, graphicHeight, endGFX;<br>
public static int spellID, castAnimation, spellGFX, spellLevel, rune1,<br>
rune1Am, rune2, rune2Am, rune3, rune3Am, rune4, rune4Am,<br>
spellItemID;</p>
<pre><code>// public static int multiSpells[] = {12963,13011,12919,12881,12975,13023,12929,12891};

public static void addSpellNpc(int id, int Y, int X, int npcIndex) {
	int offsetY = (X - npcX) * -1;
	int offsetX = (Y - npcY) * -1;
	if (usesFirstGfx != 0) {
		if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
					50, 95, (id + 1), spellHeight, spellHeight,
					(npcIndex + 1), (id + 2), npcY, npcX);
		} else {
			if (spellID == 1572) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 181, npcY, npcX);
			}
			if (spellID == 1582) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 180, npcY, npcX);
			}
			if (spellID == 1592) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (npcIndex + 1), 179, npcY, npcX);
			}
		}
	} else {
		GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
				95, (id + 1), spellHeight, spellHeight, (npcIndex + 1),
				(id + 2), npcY, npcX);
	}
}

public static void addSpellPlayer(int id, int Y, int X, int playerIndex) {
	int offsetY = (X - playerX) * -1;
	int offsetX = (Y - playerY) * -1;
	if (usesFirstGfx != 0) {
		if ((spellID != 1572) &amp;&amp; (spellID != 1582) &amp;&amp; (spellID != 1592)) {
			GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX,
					50, 95, (id + 1), spellHeight, spellHeight,
					(playerIndex + 1), (id + 2), playerY, playerX);
		} else {
			if (spellID == 1572) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 181, playerY,
						playerX);
			}
			if (spellID == 1582) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 180, playerY,
						playerX);
			}
			if (spellID == 1592) {
				GraphicsHandler.createNormalSpell(id, Y, X, offsetY,
						offsetX, 50, 95, (id + 1), spellHeight,
						spellHeight, (playerIndex + 1), 179, playerY,
						playerX);
			}
		}
	} else {
		GraphicsHandler.createNormalSpell(id, Y, X, offsetY, offsetX, 50,
				95, (id + 1), spellHeight, spellHeight, (playerIndex + 1),
				(id + 2), playerY, playerX);
	}
}

public static int magicSpellNpc(int id, int playerId, int npcIndex, 
		int lvl) {
	client p = (client) PlayerHandler.players[playerId];
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[20];
	boolean EndOfFile = false;

	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader(
				"config\\magicSpells.cfg"));
	} catch (FileNotFoundException fileex) {
		misc.println("[MagicHandler]: magicSpells.cfg: file not found.");
	}
	try {
		line = characterfile.readLine();
	} catch (IOException ioexception) {
		misc
				.println("[MagicHandler]: magicSpells.cfg: error loading file.");
	}
	while ((EndOfFile == false) &amp;&amp; (line != null)) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("spell")) {
				spellID = Integer.parseInt(token3[0]);
				castAnimation = Integer.parseInt(token3[1]);
				spellGFX = Integer.parseInt(token3[2]);
				usesFirstGfx = Integer.parseInt(token3[3]);
				spellLevel = Integer.parseInt(token3[4]);
				rune1 = Integer.parseInt(token3[5]);
				rune1Am = Integer.parseInt(token3[6]);
				rune2 = Integer.parseInt(token3[7]);
				rune2Am = Integer.parseInt(token3[8]);
				rune3 = Integer.parseInt(token3[9]);
				rune3Am = Integer.parseInt(token3[10]);
				rune4 = Integer.parseInt(token3[11]);
				rune4Am = Integer.parseInt(token3[12]);
				spellItemID = Integer.parseInt(token3[13]);
				hitDiff = Integer.parseInt(token3[14]);
				xp = Integer.parseInt(token3[15]);
				spellHeight = Integer.parseInt(token3[16]);
				graphicHeight = Integer.parseInt(token3[17]);
				String spellName = token3[18];
				endGFX = (spellGFX + 1);
				if (id == spellID) {
					if (lvl &gt;= spellLevel) {
						if (!p.playerHasItem(rune1, rune1Am)
								|| !p.playerHasItem(rune2, rune2Am)
								|| !p.playerHasItem(rune3, rune3Am)
								|| !p.playerHasItem(rune4, rune4Am)) {
							p
									.sM("You don't have enough runes to cast this spell.");
						} else {
							if (spellItemID != -1) {
								if (p.playerEquipment[p.playerWeapon] != spellItemID) {
									p.sM("You need a "
											+ p.getItemName(spellItemID)
											+ " to cast this spell.");
									return -1;
								}
							}
							if (p.playerHasItem(rune1, rune1Am)
									&amp;&amp; p.playerHasItem(rune2, rune2Am)
									&amp;&amp; p.playerHasItem(rune3, rune3Am)
									&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
								if (p.spellHitTimer &lt;= 0) {
									p.setAnimation(castAnimation);
									p.fletchTime = 3;
									addSpellNpc(spellGFX, p.absY,
												p.absX, npcIndex);
									p.spellHitTimer = 4;
									p.isSpellNPC = true;
									p.castSpell = true;
									p.spellHit = misc.random(hitDiff);
									if ((spellID == 1160)
											|| (spellID == 1163)
											|| (spellID == 1166)
											|| (spellID == 1169)) {
										if (p.playerEquipment[p.playerHands] == 777) {
											hitDiff = (misc
													.random(hitDiff + 3));
											p.spellHit = hitDiff; // fixed
											// bonus
											// -bakatool.
										}
									}
									if (spellID == 1190) {
										if (p.SaradominStrike) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1191) {
										if (p.GuthixClaws) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1192) {
										if (p.ZamorakFlames) {
											p.spellHit = 30;
										}
									}
									p.spellXP = xp;
									p.rune1 = rune1;
									p.rune1Am = rune1Am;
									p.rune2 = rune2;
									p.rune2Am = rune2Am;
									p.rune3 = rune3;
									p.rune3Am = rune3Am;
									p.rune4 = rune4;
									p.rune4Am = rune4Am;
									if ((spellID == 12901)
											|| (spellID == 12911)
											|| (spellID == 12919)
											|| (spellID == 12929)) {
										itHeals = true;
									} else {
										itHeals = false;
									}
									if ((spellID == 1572)
											|| (spellID == 1582)
											|| (spellID == 1592)
											|| (spellID == 12861)
											|| (spellID == 12881)
											|| (spellID == 12871)
											|| (spellID == 12891)) { // Fixed
										// bakatool
										// added
										// all
										// freeze
										// spells.
										itFreezes = true;
									} else {
										itFreezes = false;
									}
									if ((spellID == 12939)
											|| (spellID == 12963)
											|| (spellID == 12951)
											|| (spellID == 12975)) {
										itPoisons = true;
									} else {
										itPoisons = false;
									}
									if ((spellID == 1153)
											|| (spellID == 12987)
											|| (spellID == 13011)
											|| (spellID == 12999)
											|| (spellID == 13023)) {
										itReducesAttack = true;
									} else {
										itReducesAttack = false;
									}
								}
							}
						}
						return npcIndex;
					} else {
						p.sM("You need a magic level of "
								+ spellLevel
								+ " or better to cast this spell.");
						return -1;
					}
				}
			}
		} else {
			if (line.equals("[EOF]")) {
				try {
					characterfile.close();
				} catch (IOException ioexception) {

				}
			}
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception1) {
			EndOfFile = true;
		}
	}
	try {
		characterfile.close();
	} catch (IOException ioexception) {

	}
	return -1;
}

public static int magicSpellPlayer(int id, int playerId,
		int playerIndexToAttack,
		int lvl) {
	client p = (client) PlayerHandler.players[playerId];
	String line = "";
	String token = "";
	String token2 = "";
	String token2_2 = "";
	String[] token3 = new String[20];
	boolean EndOfFile = false;

	BufferedReader characterfile = null;
	try {
		characterfile = new BufferedReader(new FileReader(
				"config\\magicSpells.cfg"));
	} catch (FileNotFoundException fileex) {
		misc.println("[MagicHandler]: magicSpells.cfg: file not found.");
	}
	try {
		line = characterfile.readLine();
	} catch (IOException ioexception) {
		misc
				.println("[MagicHandler]: magicSpells.cfg: error loading file.");
	}
	while ((EndOfFile == false) &amp;&amp; (line != null)) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("spell")) {
				spellID = Integer.parseInt(token3[0]);
				castAnimation = Integer.parseInt(token3[1]);
				spellGFX = Integer.parseInt(token3[2]);
				usesFirstGfx = Integer.parseInt(token3[3]);
				spellLevel = Integer.parseInt(token3[4]);
				rune1 = Integer.parseInt(token3[5]);
				rune1Am = Integer.parseInt(token3[6]);
				rune2 = Integer.parseInt(token3[7]);
				rune2Am = Integer.parseInt(token3[8]);
				rune3 = Integer.parseInt(token3[9]);
				rune3Am = Integer.parseInt(token3[10]);
				rune4 = Integer.parseInt(token3[11]);
				rune4Am = Integer.parseInt(token3[12]);
				spellItemID = Integer.parseInt(token3[13]);
				hitDiff = Integer.parseInt(token3[14]);
				xp = Integer.parseInt(token3[15]);
				spellHeight = Integer.parseInt(token3[16]);
				graphicHeight = Integer.parseInt(token3[17]);
				String spellName = token3[18];
				endGFX = (spellGFX + 1);
				if (id == spellID) {
					if (lvl &gt;= spellLevel) {
						if (!p.playerHasItem(rune1, rune1Am)
								|| !p.playerHasItem(rune2, rune2Am)
								|| !p.playerHasItem(rune3, rune3Am)
								|| !p.playerHasItem(rune4, rune4Am)) {
							p
									.sM("You don't have enough runes to cast this spell.");
						} else {
							if (spellItemID != -1) {
								if (p.playerEquipment[p.playerWeapon] != spellItemID) {
									p.sM("You need a "
											+ p.getItemName(spellItemID)
											+ " to cast this spell.");
									return -1;
								}
							}
							if (p.playerHasItem(rune1, rune1Am)
									&amp;&amp; p.playerHasItem(rune2, rune2Am)
									&amp;&amp; p.playerHasItem(rune3, rune3Am)
									&amp;&amp; p.playerHasItem(rune4, rune4Am)) {
								if (p.spellHitTimer &lt;= 0) {
									p.setAnimation(castAnimation);
									p.fletchTime = 3;
									addSpellPlayer(spellGFX, p.absY,
												p.absX, playerIndexToAttack);
									p.spellHitTimer = 4;
									p.isSpellNPC = false;
									p.castSpell = true;
									p.spellHit = misc.random(hitDiff);
									if ((spellID == 1160)
											|| (spellID == 1163)
											|| (spellID == 1166)
											|| (spellID == 1169)) {
										if (p.playerEquipment[p.playerHands] == 777) {
											hitDiff = (misc
													.random(hitDiff + 3));
											p.spellHit = hitDiff;
										}
									}
									if (spellID == 1190) {
										if (p.SaradominStrike) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1191) {
										if (p.GuthixClaws) {
											p.spellHit = 30;
										}
									}
									if (spellID == 1192) {
										if (p.ZamorakFlames) {
											p.spellHit = 30;
										}
									}
									p.spellXP = xp;
									p.rune1 = rune1;
									p.rune1Am = rune1Am;
									p.rune2 = rune2;
									p.rune2Am = rune2Am;
									p.rune3 = rune3;
									p.rune3Am = rune3Am;
									p.rune4 = rune4;
									p.rune4Am = rune4Am;
									if ((spellID == 12901)
											|| (spellID == 12911)
											|| (spellID == 12919)
											|| (spellID == 12929)) {
										itHeals = true;
									} else {
										itHeals = false;
									}

									if ((spellID == 12445)) {
										itTeleblocks = true;
									} else {
										itTeleblocks = false;
									}
									if (spellID == 12891)
									p.multiBarrage((client) PlayerHandler.players[playerIndexToAttack]);
                                                                            }
									if ((spellID == 1572)
											|| (spellID == 1582)
											|| (spellID == 1592)
											|| (spellID == 12861)
											|| (spellID == 12881)
											|| (spellID == 12871)
											|| (spellID == 12891)) { // Fixed
										// bakatool
										// added
										// all
										// freeze
										// spells.
										itFreezes = true;
									} else {
										itFreezes = false;
									}
									if ((spellID == 12939)
											|| (spellID == 12963)
											|| (spellID == 12951)
											|| (spellID == 12975)) {
										itPoisons = true;
									} else {
										itPoisons = false;
									}
									if ((spellID == 1153)
											|| (spellID == 12987)
											|| (spellID == 13011)
											|| (spellID == 12999)
											|| (spellID == 13023)) {
										itReducesAttack = true;
									} else {
										itReducesAttack = false;
									}
								}
							}
						}
						return playerIndexToAttack;
					} else {
						p.sM("You need a magic level of "
								+ spellLevel
								+ " or better to cast this spell.");
						return -1;
					}
				}
			}
		} else {
			if (line.equals("[EOF]")) {
				try {
					characterfile.close();
				} catch (IOException ioexception) {

				}
			}
		}
		try {
			line = characterfile.readLine();
		} catch (IOException ioexception1) {
			EndOfFile = true;
		}
	}
	try {
		characterfile.close();
	} catch (IOException ioexception) {

	}
	return -1;
}
</code></pre>
<p>}</p>
<p>~Thanks a lot!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783/1</link>
        <pubDate>Sun, 11 Aug 2013 00:31:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527783-1</guid>
        <source url="https://forum.moparisthebest.com/t/compile-errors-please-help-delta/527783.rss">Compile errors please help! [delta]</source>
      </item>
  </channel>
</rss>
