<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ItemScripts: Efficient and easy coding of objects</title>
    <link>https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582</link>
    <description>Hello! I&#39;ve been working on something that I think will allow developers to change item interactions and whatnot on the fly--that is, without needing to recompile--, and help them separate their item and object interactions from the main code.

Here&#39;s how it works:

You have two folders: &quot;Items&quot; and &quot;Objects&quot; in your source.
As such:

      root
        |
 -------------
|                 |
Items          Objects


Inside the Items folder you have a few files--Shark.is, AbbyWhip.is, 100-200.is, etc. It doesn&#39;t matter HOW you name your .is files.
In each .is file, any number of items can be scripted for at a time. Each .is file is NOT limited to a single item.

Here&#39;s what a sample .is file, containing a SINGLE item, would look like:
[code]
newItem
id=1000
Option1=heal 50
Option1=removeItem this
Option2=teleX 1563
Option2=teleY 1562
endItem
[/code]

So there you have it. You can easily have it have multiple items as such:
[code]
newItem
...
endItem
newItem
...
endItem
[/code]

There is a single parameter--[b]id[/b] that MUST be set. It is the item ID of the object you&#39;re talking about. In the instance above, we talked about item ID 1000.

In order for your item to do something, it must hook into EVENTS. Events are called inside your code.
A list of events:

[ul][li]Option1--Called when the player clicks option 1 on the item(left clicked it, basically)
[/li][li]Option2--Called when the player clicks option 2 on the item.
[/li][li]Option3--You understand.
[/li][li]usedOn--Called when the item is used on another item. Looks like this: usedOn 1000=stuff----That is---usedOn ITEMIDHERE=stuff
[/li][/ul]


With each event, you can do a NUMBER of different actions--heal, teleport, etc. You call actions by:
[/list][code]
event=action parameter1 parameter2
[/code]
The spaces are VERY important.
 Here&#39;s a list that I have made, yet it is very easy to add your own!


[ul][li]heal--Heals the player by this amount.
[/li][li]hurt--Hurts the player by this amount
[/li][li]emote--Makes the player perform this emote.
[/li][li]teleX--Teleports the player to this X co-ordinate.
[/li][li]teleY--Teleports the player to this Y co-ordinate.
[/li][li]message--Sends a message to the player.
[/li][/ul]


The same pretty much goes for objects. Now, the list of items is compiled when the server is run, HOWEVER you may recompile the list of items with a single function call:
[/list][code]
ItemScripts.Reload();
[/code]
Use that however you wish.


This will be released within a month.</description>
    
    <lastBuildDate>Fri, 10 Dec 2010 01:25:52 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ItemScripts: Efficient and easy coding of objects</title>
        <dc:creator><![CDATA[@geel9 geel9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/geel9">@geel9</a> wrote:</p>
          <blockquote>
              <p>[quote=“I Vain I”]Why make a new extension, if it’s just going to open with TXT editors?</p>
<p>Also, I don’t see how this is any use.</p>
<p>It looks like a ‘wanna-be’ XML syntax without tags.</p>
<p>No offense though.[/quote]</p>
<p>It’s useful because it allows developers to separate their item code from their main code and add new item code without recompiling.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582/2</link>
        <pubDate>Fri, 10 Dec 2010 01:25:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-372582-2</guid>
        <source url="https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582.rss">ItemScripts: Efficient and easy coding of objects</source>
      </item>
      <item>
        <title>ItemScripts: Efficient and easy coding of objects</title>
        <dc:creator><![CDATA[@geel9 geel9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/geel9">@geel9</a> wrote:</p>
          <blockquote>
              <p>Hello! I’ve been working on something that I think will allow developers to change item interactions and whatnot on the fly–that is, without needing to recompile–, and help them separate their item and object interactions from the main code.</p>
<p>Here’s how it works:</p>
<p>You have two folders: “Items” and “Objects” in your source.<br>
As such:</p>
<pre><code>  root
    |
</code></pre>
<hr>
<p>|                 |<br>
Items          Objects</p>
<p>Inside the Items folder you have a few files–Shark.is, AbbyWhip.is, 100-200.is, etc. It doesn’t matter HOW you name your .is files.<br>
In each .is file, any number of items can be scripted for at a time. Each .is file is NOT limited to a single item.</p>
<p>Here’s what a sample .is file, containing a SINGLE item, would look like:</p>
<pre><code class="lang-auto">newItem
id=1000
Option1=heal 50
Option1=removeItem this
Option2=teleX 1563
Option2=teleY 1562
endItem</code></pre>
<p>So there you have it. You can easily have it have multiple items as such:</p>
<pre><code class="lang-auto">newItem
...
endItem
newItem
...
endItem</code></pre>
<p>There is a single parameter–<span class="bbcode-b">id</span> that MUST be set. It is the item ID of the object you’re talking about. In the instance above, we talked about item ID 1000.</p>
<p>In order for your item to do something, it must hook into EVENTS. Events are called inside your code.<br>
A list of events:</p>
<p>[ul][li]Option1–Called when the player clicks option 1 on the item(left clicked it, basically)<br>
[/li][li]Option2–Called when the player clicks option 2 on the item.<br>
[/li][li]Option3–You understand.<br>
[/li][li]usedOn–Called when the item is used on another item. Looks like this: usedOn 1000=stuff----That is—usedOn ITEMIDHERE=stuff<br>
[/li][/ul]</p>
<p>With each event, you can do a NUMBER of different actions–heal, teleport, etc. You call actions by:<br>
[/list]<code>
event=action parameter1 parameter2
</code><br>
The spaces are VERY important.<br>
Here’s a list that I have made, yet it is very easy to add your own!</p>
<p>[ul][li]heal–Heals the player by this amount.<br>
[/li][li]hurt–Hurts the player by this amount<br>
[/li][li]emote–Makes the player perform this emote.<br>
[/li][li]teleX–Teleports the player to this X co-ordinate.<br>
[/li][li]teleY–Teleports the player to this Y co-ordinate.<br>
[/li][li]message–Sends a message to the player.<br>
[/li][/ul]</p>
<p>The same pretty much goes for objects. Now, the list of items is compiled when the server is run, HOWEVER you may recompile the list of items with a single function call:<br>
[/list]<code>
ItemScripts.Reload();
</code><br>
Use that however you wish.</p>
<p>This will be released within a month.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582/1</link>
        <pubDate>Thu, 09 Dec 2010 22:40:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-372582-1</guid>
        <source url="https://forum.moparisthebest.com/t/itemscripts-efficient-and-easy-coding-of-objects/372582.rss">ItemScripts: Efficient and easy coding of objects</source>
      </item>
  </channel>
</rss>
