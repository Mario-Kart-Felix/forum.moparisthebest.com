<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Object Distinction by name</title>
    <link>https://forum.moparisthebest.com/t/object-distinction-by-name/474905</link>
    <description>I don&#39;t have a problem with my code, just curious what i have missed :o
I have many of these projects like this,where i do something back-asswards to see how it plays out.
I have this server reading how to discern objects based on its options,name, and description
It is not the prettiest way to do it, though it does make it easier than finding every single ID.
I am still going to have to do the seperate ID&#39;s this is just tasking (tells it what skill or what-not it is related with)
I am curious of the types of objects i have left out. This doesn&#39;t seem like all of them :(
Currently :
*Thieving Stalls
*Cooking Range and Fire and FirePlace
*mining rocks with the ability to mine. (Still must discern types elsewhere)
*woodcutting for the types i will make it parse the name to get the type of tree.

I have made a package(Requirements) and i am adding all of the requirements for objects in there.
The method i have for calling it would be something as follows, though this is not exact yet.
[code]isWoodcutting() ? doWoodcutting(/*Crap*/) : isThieving() ? doThieving() :isMineable() ? doMining() : isCooking() ? doCooking() : is...and so on for all required for certain types(Item on Object, checks what object is useful for-- Object click one checks first Object option, then acts accordingly[/code]
[code]public class ObjectDef {
    private String Name;
    private String Description;
    private String[] Actions;
    ObjectDef(String a, String b, String[] c) {
        Name=a;
        Description=b;
        Actions=new String[c.length];
        System.arraycopy(c,0,Actions,0,c.length);
    }
        ObjectDef(String a, String b) {
        Name=a;
        Description=b;
        Actions=null;
    }
        ObjectDef() {
            Name=&quot;null&quot;;
            Description=&quot;It&#39;s a null&quot;;
            Actions=null;
        }
    String getName() {
        return Name;
    }
    String getDescription() {
        return Description;
    }
    String[] getActions() {
        if (Actions==null)
            return null;
        String[] tmp=new String[Actions.length];
        System.arraycopy(Actions,0,tmp,0,Actions.length);
        return tmp;
    }
    int getNumberOfActions() {
        if (!hasActions())
            return 0;
        else
            return Actions.length;
    }
    boolean hasActions() {
        return Actions!=null;
    }
    boolean nameContainsPrecice(String phrase) {
        return Name.contains(phrase);
    }
    boolean descriptionContainsPrecice(String phrase) {
        return Description.contains(phrase);
    }
    boolean nameContainsAny(String phrase) {
        return Name.toLowerCase().contains(phrase.toLowerCase());
    }
    boolean descriptionContainsAny(String phrase) {
        return Description.toLowerCase().contains(phrase.toLowerCase());
    }
    boolean nameEndsWithPrecice(String phrase) {
        return Name.endsWith(phrase);
    }
    boolean descriptionEndsWithPrecice(String phrase) {
        return Description.endsWith(phrase);
    }
    boolean nameEndsWithAny(String phrase) {
        return Name.toLowerCase().endsWith(phrase.toLowerCase());
    }
    boolean descriptionEndsWithAny(String phrase) {
        return Description.toLowerCase().endsWith(phrase.toLowerCase());
    }
    boolean nameStartsWithPrecice(String phrase) {
        return Name.startsWith(phrase);
    }
    boolean descriptionStartsWithPrecice(String phrase) {
        return Description.startsWith(phrase);
    }
    boolean nameStartsWithAny(String phrase) {
        return Name.toLowerCase().startsWith(phrase.toLowerCase());
    }
    boolean descriptionStartsWithAny(String phrase) {
        return Description.toLowerCase().startsWith(phrase.toLowerCase());
    }
    public boolean hasAction(String action) {
        if (hasActions()) {
            
            for (int i=0;i&lt;Actions.length;i++) {
                if (Actions[i].equalsIgnoreCase(action))
                    return true;
            }
        }
        return false;
    }
    public String getSlotAction(int commandSlot) {
        if (hasActions()) {
            if (Actions.length&lt;=commandSlot) 
                return Actions[commandSlot];
        }
        return &quot;null&quot;;
    }
    public int getActionSlot(String action) {
        if (!hasActions())
            return -1;
        for (int i=0;i&lt;Actions.length;i++)
            if (Actions[i].equalsIgnoreCase(action))
                return i;
        return -1;
    }
    public boolean isMineable() {
        if (!hasActions())
            return false;
        if (getNumberOfActions()!=2)
            return false;
        
        if (Actions[0].equals(&quot;Mine&quot;)&amp;&amp;Actions[1].equals(&quot;Prospect&quot;))
            return true;
        return false;
    }
    public boolean isChoppable() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;Chop-down&quot;)||hasAction(&quot;Chop down&quot;)||hasAction(&quot;Hack&quot;))
            return true;
        if (nameEndsWithAny(&quot; tree&quot;))
            return true;
        
        return false;
    }
    public boolean isFarmable() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;InspectGuide&quot;))
            return true;
        return false;
    }
    public boolean isFishable() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;Fish&quot;)||hasAction(&quot;lure&quot;)||hasAction(&quot;bait&quot;)||hasAction(&quot;fish-in&quot;)||nameContainsAny(&quot;Fishing spot&quot;))
            return true;
        return false;
    }
    public boolean isAgility() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;Squeeze-through&quot;)||hasAction(&quot;Squeeze-past&quot;)||hasAction(&quot;Swing-on&quot;)||hasAction(&quot;walk-across&quot;))
            return true;
        else if (nameContainsAny(&quot;Obstacle&quot;))
            return true;
        else if (nameContainsAny(&quot;Climbing rocks&quot;)&amp;&amp;hasAction(&quot;Climb-up&quot;)
                || nameContainsAny(&quot;tree branch&quot;)&amp;&amp;hasAction(&quot;climb-down&quot;))//unfinished
            return true;
        return false;
    }
    public boolean isCooking() {
        if ((Name.equalsIgnoreCase(&quot;Fire&quot;)||nameContainsPrecice(&quot;Range&quot;))&amp;&amp;(descriptionContainsAny(&quot;Ideal for cooking on&quot;)||descriptionContainsAny(&quot;Hot&quot;)||descriptionContainsAny(&quot;&quot;)))
            return true;
        if (descriptionContainsAny(&quot;place to cook&quot;))
            return true;
        return false;
    }
    public boolean isSmelting() {
        if (hasActions())
            if (nameContainsAny(&quot;Furnace&quot;)&amp;&amp;hasAction(&quot;Smelt&quot;))
                return true;
        return false;
    }
    public boolean isSmithing() {
        if (nameContainsAny(&quot;anvil&quot;))
            return true;
        return false;
    }
    public boolean isDoor() {
        if (!hasActions())
            return false;
        if (nameContainsAny(&quot;door&quot;)||nameContainsAny(&quot;gate&quot;))
            return true;
        return false;
    }
    public boolean isEntrance() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;Enter&quot;)||hasAction(&quot;Exit&quot;)||hasAction(&quot;Go-through&quot;))
            return true;
        return false;
    }
    public boolean isThieving() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;Steal-from&quot;)||hasAction(&quot;Steal from&quot;))
            return true;
        return false;
    }
    public boolean isClimbable() {
        if (!hasActions())
            return false;
        if (hasAction(&quot;climb-up&quot;)||hasAction(&quot;climb&quot;)||hasAction(&quot;climb up&quot;)||hasAction(&quot;climb-down&quot;)||hasAction(&quot;climb down&quot;))
            return true;
        return false;
    }[/code]

[code]import java.io.FileReader;
import java.io.BufferedReader;
/**
 *
 * @author Brock
 */
public class ObjectManager {
    static ObjectDef[] ObjectDefList=new ObjectDef[14972];
    static {
/*REMOVED FOR PRIVACY*/
    }
    public static ObjectDef getObjectDef(int id) {
        return ObjectDefList[id];
    }
    
}[/code]


For some reason every time i manage to post i get no responses, just views lol. I guess no one is smart enough for my problems ~_~&#39;</description>
    
    <lastBuildDate>Sat, 22 Dec 2012 05:16:19 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/object-distinction-by-name/474905.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Object Distinction by name</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>You are probably right. I will weed out the non-necessities as i continue. The fact is though i can remove all other types of checking (if objectID==…&amp;&amp;itemid==…) can be if (isFarming() &amp;&amp; isSeed()&lt;–or what ever it needs). I am trying to work in a tasker for skills… Though i have a lot of details to work out still (:</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-distinction-by-name/474905/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-distinction-by-name/474905/3</link>
        <pubDate>Sat, 22 Dec 2012 05:16:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-474905-3</guid>
        <source url="https://forum.moparisthebest.com/t/object-distinction-by-name/474905.rss">Object Distinction by name</source>
      </item>
      <item>
        <title>Object Distinction by name</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>This is a prime example of convenience overload. Most of those methods, while convenient, are completely unnecessary, and in fact bulk things up quite a bit.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-distinction-by-name/474905/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-distinction-by-name/474905/2</link>
        <pubDate>Fri, 21 Dec 2012 05:57:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-474905-2</guid>
        <source url="https://forum.moparisthebest.com/t/object-distinction-by-name/474905.rss">Object Distinction by name</source>
      </item>
      <item>
        <title>Object Distinction by name</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>I don’t have a problem with my code, just curious what i have missed :o<br>
I have many of these projects like this,where i do something back-asswards to see how it plays out.<br>
I have this server reading how to discern objects based on its options,name, and description<br>
It is not the prettiest way to do it, though it does make it easier than finding every single ID.<br>
I am still going to have to do the seperate ID’s this is just tasking (tells it what skill or what-not it is related with)<br>
I am curious of the types of objects i have left out. This doesn’t seem like all of them <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"><br>
Currently :<br>
*Thieving Stalls<br>
*Cooking Range and Fire and FirePlace<br>
*mining rocks with the ability to mine. (Still must discern types elsewhere)<br>
*woodcutting for the types i will make it parse the name to get the type of tree.</p>
<p>I have made a package(Requirements) and i am adding all of the requirements for objects in there.<br>
The method i have for calling it would be something as follows, though this is not exact yet.</p>
<pre><code class="lang-auto"></code></pre>
<p>[code]public class ObjectDef {<br>
private String Name;<br>
private String Description;<br>
private String[] Actions;<br>
ObjectDef(String a, String b, String[] c) {<br>
Name=a;<br>
Description=b;<br>
Actions=new String[c.length];<br>
System.arraycopy(c,0,Actions,0,c.length);<br>
}<br>
ObjectDef(String a, String b) {<br>
Name=a;<br>
Description=b;<br>
Actions=null;<br>
}<br>
ObjectDef() {<br>
Name=“null”;<br>
Description=“It’s a null”;<br>
Actions=null;<br>
}<br>
String getName() {<br>
return Name;<br>
}<br>
String getDescription() {<br>
return Description;<br>
}<br>
String[] getActions() {<br>
if (Actions==null)<br>
return null;<br>
String[] tmp=new String[Actions.length];<br>
System.arraycopy(Actions,0,tmp,0,Actions.length);<br>
return tmp;<br>
}<br>
int getNumberOfActions() {<br>
if (!hasActions())<br>
return 0;<br>
else<br>
return Actions.length;<br>
}<br>
boolean hasActions() {<br>
return Actions!=null;<br>
}<br>
boolean nameContainsPrecice(String phrase) {<br>
return Name.contains(phrase);<br>
}<br>
boolean descriptionContainsPrecice(String phrase) {<br>
return Description.contains(phrase);<br>
}<br>
boolean nameContainsAny(String phrase) {<br>
return Name.toLowerCase().contains(phrase.toLowerCase());<br>
}<br>
boolean descriptionContainsAny(String phrase) {<br>
return Description.toLowerCase().contains(phrase.toLowerCase());<br>
}<br>
boolean nameEndsWithPrecice(String phrase) {<br>
return Name.endsWith(phrase);<br>
}<br>
boolean descriptionEndsWithPrecice(String phrase) {<br>
return Description.endsWith(phrase);<br>
}<br>
boolean nameEndsWithAny(String phrase) {<br>
return Name.toLowerCase().endsWith(phrase.toLowerCase());<br>
}<br>
boolean descriptionEndsWithAny(String phrase) {<br>
return Description.toLowerCase().endsWith(phrase.toLowerCase());<br>
}<br>
boolean nameStartsWithPrecice(String phrase) {<br>
return Name.startsWith(phrase);<br>
}<br>
boolean descriptionStartsWithPrecice(String phrase) {<br>
return Description.startsWith(phrase);<br>
}<br>
boolean nameStartsWithAny(String phrase) {<br>
return Name.toLowerCase().startsWith(phrase.toLowerCase());<br>
}<br>
boolean descriptionStartsWithAny(String phrase) {<br>
return Description.toLowerCase().startsWith(phrase.toLowerCase());<br>
}<br>
public boolean hasAction(String action) {<br>
if (hasActions()) {</p>
<pre><code>        for (int i=0;i&lt;Actions.length;i++) {
            if (Actions[i].equalsIgnoreCase(action))
                return true;
        }
    }
    return false;
}
public String getSlotAction(int commandSlot) {
    if (hasActions()) {
        if (Actions.length&lt;=commandSlot) 
            return Actions[commandSlot];
    }
    return "null";
}
public int getActionSlot(String action) {
    if (!hasActions())
        return -1;
    for (int i=0;i&lt;Actions.length;i++)
        if (Actions[i].equalsIgnoreCase(action))
            return i;
    return -1;
}
public boolean isMineable() {
    if (!hasActions())
        return false;
    if (getNumberOfActions()!=2)
        return false;
    
    if (Actions[0].equals("Mine")&amp;&amp;Actions[1].equals("Prospect"))
        return true;
    return false;
}
public boolean isChoppable() {
    if (!hasActions())
        return false;
    if (hasAction("Chop-down")||hasAction("Chop down")||hasAction("Hack"))
        return true;
    if (nameEndsWithAny(" tree"))
        return true;
    
    return false;
}
public boolean isFarmable() {
    if (!hasActions())
        return false;
    if (hasAction("InspectGuide"))
        return true;
    return false;
}
public boolean isFishable() {
    if (!hasActions())
        return false;
    if (hasAction("Fish")||hasAction("lure")||hasAction("bait")||hasAction("fish-in")||nameContainsAny("Fishing spot"))
        return true;
    return false;
}
public boolean isAgility() {
    if (!hasActions())
        return false;
    if (hasAction("Squeeze-through")||hasAction("Squeeze-past")||hasAction("Swing-on")||hasAction("walk-across"))
        return true;
    else if (nameContainsAny("Obstacle"))
        return true;
    else if (nameContainsAny("Climbing rocks")&amp;&amp;hasAction("Climb-up")
            || nameContainsAny("tree branch")&amp;&amp;hasAction("climb-down"))//unfinished
        return true;
    return false;
}
public boolean isCooking() {
    if ((Name.equalsIgnoreCase("Fire")||nameContainsPrecice("Range"))&amp;&amp;(descriptionContainsAny("Ideal for cooking on")||descriptionContainsAny("Hot")||descriptionContainsAny("")))
        return true;
    if (descriptionContainsAny("place to cook"))
        return true;
    return false;
}
public boolean isSmelting() {
    if (hasActions())
        if (nameContainsAny("Furnace")&amp;&amp;hasAction("Smelt"))
            return true;
    return false;
}
public boolean isSmithing() {
    if (nameContainsAny("anvil"))
        return true;
    return false;
}
public boolean isDoor() {
    if (!hasActions())
        return false;
    if (nameContainsAny("door")||nameContainsAny("gate"))
        return true;
    return false;
}
public boolean isEntrance() {
    if (!hasActions())
        return false;
    if (hasAction("Enter")||hasAction("Exit")||hasAction("Go-through"))
        return true;
    return false;
}
public boolean isThieving() {
    if (!hasActions())
        return false;
    if (hasAction("Steal-from")||hasAction("Steal from"))
        return true;
    return false;
}
public boolean isClimbable() {
    if (!hasActions())
        return false;
    if (hasAction("climb-up")||hasAction("climb")||hasAction("climb up")||hasAction("climb-down")||hasAction("climb down"))
        return true;
    return false;
}[/code]
</code></pre>
<p>[code]import java.io.FileReader;<br>
import java.io.BufferedReader;<br>
/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> Brock<br>
*/<br>
public class ObjectManager {<br>
static ObjectDef[] ObjectDefList=new ObjectDef[14972];<br>
static {<br>
/<em>REMOVED FOR PRIVACY</em>/<br>
}<br>
public static ObjectDef getObjectDef(int id) {<br>
return ObjectDefList[id];<br>
}</li>
</ul>
<p>}[/code]</p>
<p>For some reason every time i manage to post i get no responses, just views lol. I guess no one is smart enough for my problems ~_~’</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-distinction-by-name/474905/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-distinction-by-name/474905/1</link>
        <pubDate>Fri, 21 Dec 2012 00:37:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-474905-1</guid>
        <source url="https://forum.moparisthebest.com/t/object-distinction-by-name/474905.rss">Object Distinction by name</source>
      </item>
  </channel>
</rss>
