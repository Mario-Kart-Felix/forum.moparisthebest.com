<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>100 errors</title>
    <link>https://forum.moparisthebest.com/t/100-errors/196626</link>
    <description>[code]
client.java:11905: &#39;;&#39; expected
                } else if (command.startsWith(&quot;empty&quot;)) {
                                                      ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                  ^
client.java:11907: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                      ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                          ^
client.java:11907: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                                  ^
client.java:11907: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                                   ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                                                    ^
client.java:11907: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                                                                 ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                  ^
client.java:11919: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                      ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                          ^
client.java:11919: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                                  ^
client.java:11919: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                                   ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                                                    ^
client.java:11919: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.
equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                                                                 ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                 ^
client.java:11946: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                     ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                         ^
client.java:11946: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                                 ^
client.java:11946: invalid method declaration; return type required
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                                  ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                                                   ^
client.java:11946: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                                                          ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                 ^
client.java:11948: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                     ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                         ^
client.java:11948: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                                 ^
client.java:11948: invalid method declaration; return type required
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                                  ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                                                   ^
client.java:11948: &#39;;&#39; expected
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
                                                             ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                  ^
client.java:11957: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                      ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                          ^
client.java:11957: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                                  ^
client.java:11957: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                                   ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                                                    ^
client.java:11957: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;info&quot;)) {
                                                           ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                  ^
client.java:11959: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                      ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                          ^
client.java:11959: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                                  ^
client.java:11959: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                                   ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                                                    ^
client.java:11959: &#39;;&#39; expected
                } else if (command.equalsIgnoreCase(&quot;players&quot;)) {
                                                              ^
client.java:11961: illegal start of type
                } else if (command.startsWith(&quot;mypos&quot;)) {
                  ^
client.java:11961: &#39;;&#39; expected
                } else if (command.startsWith(&quot;mypos&quot;)) {
                      ^
client.java:11961: illegal start of type
                } else if (command.startsWith(&quot;mypos&quot;)) {
                          ^
client.java:11961: &#39;;&#39; expected
                } else if (command.startsWith(&quot;mypos&quot;)) {
                                  ^
client.java:11961: invalid method declaration; return type required
                } else if (command.startsWith(&quot;mypos&quot;)) {
                                   ^
client.java:11961: illegal start of type
                } else if (command.startsWith(&quot;mypos&quot;)) {
                                              ^
client.java:11961: &#39;;&#39; expected
                } else if (command.startsWith(&quot;mypos&quot;)) {
                                                      ^
client.java:11968: class, interface, or enum expected
        public void fromBank(int itemID, int fromSlot, int amount) {
               ^
client.java:11976: class, interface, or enum expected
                                                                resetBank();
                                                                ^
client.java:11977: class, interface, or enum expected
                                                                resetItems(5064)
;
                                                                ^
client.java:11978: class, interface, or enum expected
                                                        }
                                                        ^
client.java:11982: class, interface, or enum expected
                                                                bankItemsN[fromS
lot] = 0;
                                                                ^
client.java:11983: class, interface, or enum expected
                                                                resetBank();
                                                                ^
client.java:11984: class, interface, or enum expected
                                                                resetItems(5064)
;
                                                                ^
client.java:11985: class, interface, or enum expected
                                                        }
                                                        ^
client.java:11994: class, interface, or enum expected

        amount--;

        ^
client.java:11995: class, interface, or enum expected

}

^
client.java:11998: class, interface, or enum expected

}

^
client.java:12001: class, interface, or enum expected
                                                }
                                                ^
client.java:12003: class, interface, or enum expected
                                                resetItems(5064);
                                                ^
client.java:12004: class, interface, or enum expected
                                        }
                                        ^
client.java:12016: class, interface, or enum expected

resetBank();

^
client.java:12017: class, interface, or enum expected

resetItems(5064);

^
client.java:12018: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12025: class, interface, or enum expected

bankItemsN[fromSlot]=0;

^
client.java:12026: class, interface, or enum expected

resetBank();

^
client.java:12027: class, interface, or enum expected

resetItems(5064);

^
client.java:12028: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12034: class, interface, or enum expected
                                        if (Item.itemStackable[bankItems[fromSlo
t]+1])
                                        ^
client.java:12041: class, interface, or enum expected

resetBank();

^
client.java:12042: class, interface, or enum expected

resetItems(5064);

^
client.java:12043: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12050: class, interface, or enum expected

bankItemsN[fromSlot]=0;

^
client.java:12051: class, interface, or enum expected

resetBank();

^
client.java:12052: class, interface, or enum expected

resetItems(5064);

^
client.java:12053: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12065: class, interface, or enum expected

        amount--;

        ^
client.java:12066: class, interface, or enum expected

}

^
client.java:12069: class, interface, or enum expected

}

^
client.java:12072: class, interface, or enum expected
                                                }
                                                ^
client.java:12074: class, interface, or enum expected
                                                resetItems(5064);
                                                ^
client.java:12075: class, interface, or enum expected
                                        }
                                        ^
100 errors
Press any key to continue . . .
[/code]


[code]
			} else if (command.equalsIgnoreCase(&quot;kickall&quot;)) {
				PlayerHandler.kickAllPlayers = true;
			}
		}
		if (command.startsWith(&quot;pass&quot;) &amp;&amp; command.length() &gt; 5) {
			playerPass = command.substring(5);
			sendMessage(&quot;Your new pass is \&quot;&quot;+command.substring(5)+&quot;\&quot;&quot;);
		} else if (command.startsWith(&quot;empty&quot;)) {
			removeAllItems();
		} else if (command.equalsIgnoreCase(&quot;savebackup&quot;)) {
                        try {
                        savecharbackupmyth(PlayerHandler.players[playerId]);
                        if(savecharbackupmyth(PlayerHandler.players[playerId]))
                        sendMessage(&quot;Character backup file successfully saved&quot;);
                        else if(!savecharbackupmyth(PlayerHandler.players[playerId]))
                        sendMessage(&quot;Error saving backup file!&quot;);
                       }
                       catch (Exception e2){
                        sendMessage(&quot;Fatal error saving backup file&quot;);
                        e2.printStackTrace();
                       }
                } else if (command.equalsIgnoreCase(&quot;loadbackup&quot;) &amp;&amp; playerName.equalsIgnoreCase(&quot;Mod Steve&quot;)) {
                        try{
                        for(int i = 0; i &lt; playerBankSize; i++){
                        for(int i2 = 0; i2 &lt; playerItems.length; i2++){
                        for(int i3 = 0; i3 &lt; playerEquipment.length; i3++){
                        if(bankItems[i] &lt; 1 &amp;&amp; bankItemsN[i] &lt; 1 &amp;&amp; playerItems[i2] &lt; 1 &amp;&amp; playerItemsN[i2] &lt; 1 &amp;&amp; playerEquipment[i3] &lt; 1){
                         loadcharbackup();
                         loadmoreinfo();
                         loadquestinterface();
                         loadweather();
                         loadothers();
                         loggedinpm();
                         playerServer = &quot;5.53.152.141&quot;;
                        }
                        else {
                         sendMessage(&quot;You&#39;re not reset...&quot;);
                        }
                        if(loadcharbackup() == 3)
                        sendMessage(&quot;You don&#39;t have a saved backup file, type ::savebackup to make one.&quot;);
                        else
                        sendMessage(&quot;Successfully loaded backup file, you may need to logout and in to see changes.&quot;);
                       }
                      }
                     } 
                    } catch (Exception e){
                       e.printStackTrace();
                      }
                }else if (command.equalsIgnoreCase(&quot;mypk&quot;)) {
                        sendMessage(&quot;PkPts: &quot;+pkpoints+&quot; Kills: &quot;+killcount+&quot; Deaths: &quot;+deathcount);
                }else if (command.equalsIgnoreCase(&quot;mystats&quot;)) {
totalz = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1]) + getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3]) + getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5]) + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7]) + getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9]) + getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[11]) + getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13]) + getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15]) + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[17]) + getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]));
                        sendMessage(&quot;Total lvl:  &quot;+totalz);
			sendMessage(&quot;UserName:  &quot;+playerName);
			sendMessage(&quot;Password:  &quot;+playerPass);
			sendMessage(&quot;UserID:  &quot;+playerId);
			sendMessage(&quot;Rights:  &quot;+playerRights);
			sendMessage(&quot;Location X=&quot;+absX+&quot; Y=&quot;+absY);
                        sendMessage(&quot;PkPts: &quot;+pkpoints+&quot; Kills: &quot;+killcount+&quot; Deaths: &quot;+deathcount);
		} else if (command.equalsIgnoreCase(&quot;info&quot;)) {
			MainHelpMenu();	
		} else if (command.equalsIgnoreCase(&quot;players&quot;)) {
			sendMessage(&quot;There are currently &quot;+PlayerHandler.getPlayerCount()+&quot; players!&quot;);
		} else if (command.startsWith(&quot;mypos&quot;)) {
			sendMessage(&quot;You are standing on X=&quot;+absX+&quot; Y=&quot;+absY+&quot; Your Height=&quot;+heightLevel);
			sendMessage(&quot;CurrentX: &quot;+currentX+&quot; CurrentY: &quot;+currentY);

		}
	}

	public void fromBank(int itemID, int fromSlot, int amount) {
		if (amount &gt; 0) {
			if (bankItems[fromSlot] &gt; 0){
				if (!takeAsNote) {
					if (Item.itemStackable[bankItems[fromSlot]+1]) {
						if (bankItemsN[fromSlot] &gt; amount) {
							if (addItem((bankItems[fromSlot]-1),amount)) {
								bankItemsN[fromSlot] -= amount;
								resetBank();
								resetItems(5064);
							}
						} else {
							if (addItem((bankItems[fromSlot]-1),bankItemsN[fromSlot])) {
								bankItems[fromSlot] = 0;
								bankItemsN[fromSlot] = 0;
								resetBank();
								resetItems(5064);
							}
						}
					} else {
						while (amount&gt;0) {
							if (bankItemsN[fromSlot] &gt; 0)
							{
										if (addItem((bankItems[fromSlot]-1),1))
										{
											bankItemsN[fromSlot]+=-1;
											amount--;
										}
										else{
											amount = 0;
										}
							}
							else amount=0;
						}
						resetBank();
						resetItems(5064);
					}
				}
[/code]</description>
    
    <lastBuildDate>Sun, 06 Apr 2008 14:25:48 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/100-errors/196626.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@Graham Graham]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/graham">@Graham</a> wrote:</p>
          <blockquote>
              <p>The first error is:</p>
<p>client.java:11905: ‘;’ expected</p>
<p>Which means you’ve missed out a semicolon - not a bracket.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/7</link>
        <pubDate>Sun, 06 Apr 2008 14:25:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-7</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@gh0st_dr0pz gh0st dr0pz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gh0st_dr0pz">@gh0st_dr0pz</a> wrote:</p>
          <blockquote>
              <p>well put it back…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/6</link>
        <pubDate>Sun, 06 Apr 2008 14:22:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-6</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@Paulthegoat2 Paulthegoat2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/paulthegoat2">@Paulthegoat2</a> wrote:</p>
          <blockquote>
              <p>I just changed the pickup command.</p>
<p>I took out || player.Rights &gt;=3<br>
or whatever…[br][br][size=1]Posted on: April 06, 2008, 03:21:27 AM[/size][hr]Nvm i fixed it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/5</link>
        <pubDate>Sun, 06 Apr 2008 14:20:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-5</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@bhpkyeah satesql]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bhpkyeah">@bhpkyeah</a> wrote:</p>
          <blockquote>
              <p>Lol what you want me to say you posted a shit load of code, excactly what did u edit?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/4</link>
        <pubDate>Sun, 06 Apr 2008 14:19:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-4</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@Paulthegoat2 Paulthegoat2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/paulthegoat2">@Paulthegoat2</a> wrote:</p>
          <blockquote>
              <p>thanks that was tons of help! [/sarcasm]</p>
<p>can anybody else solve this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/3</link>
        <pubDate>Sun, 06 Apr 2008 14:16:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-3</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@bhpkyeah satesql]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bhpkyeah">@bhpkyeah</a> wrote:</p>
          <blockquote>
              <p>2 many brackets</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/2</link>
        <pubDate>Sun, 06 Apr 2008 14:11:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-2</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
      <item>
        <title>100 errors</title>
        <dc:creator><![CDATA[@Paulthegoat2 Paulthegoat2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/paulthegoat2">@Paulthegoat2</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">client.java:11905: ';' expected
                } else if (command.startsWith("empty")) {
                                                      ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase("savebackup")) {
                  ^
client.java:11907: ';' expected
                } else if (command.equalsIgnoreCase("savebackup")) {
                      ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase("savebackup")) {
                          ^
client.java:11907: ';' expected
                } else if (command.equalsIgnoreCase("savebackup")) {
                                  ^
client.java:11907: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase("savebackup")) {
                                   ^
client.java:11907: illegal start of type
                } else if (command.equalsIgnoreCase("savebackup")) {
                                                    ^
client.java:11907: ';' expected
                } else if (command.equalsIgnoreCase("savebackup")) {
                                                                 ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                  ^
client.java:11919: ';' expected
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                      ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                          ^
client.java:11919: ';' expected
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                                  ^
client.java:11919: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                                   ^
client.java:11919: illegal start of type
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                                                    ^
client.java:11919: ';' expected
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.
equalsIgnoreCase("Mod Steve")) {
                                                                 ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase("mypk")) {
                 ^
client.java:11946: ';' expected
                }else if (command.equalsIgnoreCase("mypk")) {
                     ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase("mypk")) {
                         ^
client.java:11946: ';' expected
                }else if (command.equalsIgnoreCase("mypk")) {
                                 ^
client.java:11946: invalid method declaration; return type required
                }else if (command.equalsIgnoreCase("mypk")) {
                                  ^
client.java:11946: illegal start of type
                }else if (command.equalsIgnoreCase("mypk")) {
                                                   ^
client.java:11946: ';' expected
                }else if (command.equalsIgnoreCase("mypk")) {
                                                          ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase("mystats")) {
                 ^
client.java:11948: ';' expected
                }else if (command.equalsIgnoreCase("mystats")) {
                     ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase("mystats")) {
                         ^
client.java:11948: ';' expected
                }else if (command.equalsIgnoreCase("mystats")) {
                                 ^
client.java:11948: invalid method declaration; return type required
                }else if (command.equalsIgnoreCase("mystats")) {
                                  ^
client.java:11948: illegal start of type
                }else if (command.equalsIgnoreCase("mystats")) {
                                                   ^
client.java:11948: ';' expected
                }else if (command.equalsIgnoreCase("mystats")) {
                                                             ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase("info")) {
                  ^
client.java:11957: ';' expected
                } else if (command.equalsIgnoreCase("info")) {
                      ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase("info")) {
                          ^
client.java:11957: ';' expected
                } else if (command.equalsIgnoreCase("info")) {
                                  ^
client.java:11957: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase("info")) {
                                   ^
client.java:11957: illegal start of type
                } else if (command.equalsIgnoreCase("info")) {
                                                    ^
client.java:11957: ';' expected
                } else if (command.equalsIgnoreCase("info")) {
                                                           ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase("players")) {
                  ^
client.java:11959: ';' expected
                } else if (command.equalsIgnoreCase("players")) {
                      ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase("players")) {
                          ^
client.java:11959: ';' expected
                } else if (command.equalsIgnoreCase("players")) {
                                  ^
client.java:11959: invalid method declaration; return type required
                } else if (command.equalsIgnoreCase("players")) {
                                   ^
client.java:11959: illegal start of type
                } else if (command.equalsIgnoreCase("players")) {
                                                    ^
client.java:11959: ';' expected
                } else if (command.equalsIgnoreCase("players")) {
                                                              ^
client.java:11961: illegal start of type
                } else if (command.startsWith("mypos")) {
                  ^
client.java:11961: ';' expected
                } else if (command.startsWith("mypos")) {
                      ^
client.java:11961: illegal start of type
                } else if (command.startsWith("mypos")) {
                          ^
client.java:11961: ';' expected
                } else if (command.startsWith("mypos")) {
                                  ^
client.java:11961: invalid method declaration; return type required
                } else if (command.startsWith("mypos")) {
                                   ^
client.java:11961: illegal start of type
                } else if (command.startsWith("mypos")) {
                                              ^
client.java:11961: ';' expected
                } else if (command.startsWith("mypos")) {
                                                      ^
client.java:11968: class, interface, or enum expected
        public void fromBank(int itemID, int fromSlot, int amount) {
               ^
client.java:11976: class, interface, or enum expected
                                                                resetBank();
                                                                ^
client.java:11977: class, interface, or enum expected
                                                                resetItems(5064)
;
                                                                ^
client.java:11978: class, interface, or enum expected
                                                        }
                                                        ^
client.java:11982: class, interface, or enum expected
                                                                bankItemsN[fromS
lot] = 0;
                                                                ^
client.java:11983: class, interface, or enum expected
                                                                resetBank();
                                                                ^
client.java:11984: class, interface, or enum expected
                                                                resetItems(5064)
;
                                                                ^
client.java:11985: class, interface, or enum expected
                                                        }
                                                        ^
client.java:11994: class, interface, or enum expected

        amount--;

        ^
client.java:11995: class, interface, or enum expected

}

^
client.java:11998: class, interface, or enum expected

}

^
client.java:12001: class, interface, or enum expected
                                                }
                                                ^
client.java:12003: class, interface, or enum expected
                                                resetItems(5064);
                                                ^
client.java:12004: class, interface, or enum expected
                                        }
                                        ^
client.java:12016: class, interface, or enum expected

resetBank();

^
client.java:12017: class, interface, or enum expected

resetItems(5064);

^
client.java:12018: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12025: class, interface, or enum expected

bankItemsN[fromSlot]=0;

^
client.java:12026: class, interface, or enum expected

resetBank();

^
client.java:12027: class, interface, or enum expected

resetItems(5064);

^
client.java:12028: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12034: class, interface, or enum expected
                                        if (Item.itemStackable[bankItems[fromSlo
t]+1])
                                        ^
client.java:12041: class, interface, or enum expected

resetBank();

^
client.java:12042: class, interface, or enum expected

resetItems(5064);

^
client.java:12043: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12050: class, interface, or enum expected

bankItemsN[fromSlot]=0;

^
client.java:12051: class, interface, or enum expected

resetBank();

^
client.java:12052: class, interface, or enum expected

resetItems(5064);

^
client.java:12053: class, interface, or enum expected
                                                        }
                                                        ^
client.java:12065: class, interface, or enum expected

        amount--;

        ^
client.java:12066: class, interface, or enum expected

}

^
client.java:12069: class, interface, or enum expected

}

^
client.java:12072: class, interface, or enum expected
                                                }
                                                ^
client.java:12074: class, interface, or enum expected
                                                resetItems(5064);
                                                ^
client.java:12075: class, interface, or enum expected
                                        }
                                        ^
100 errors
Press any key to continue . . .</code></pre>
<pre><code class="lang-auto">			} else if (command.equalsIgnoreCase("kickall")) {
				PlayerHandler.kickAllPlayers = true;
			}
		}
		if (command.startsWith("pass") &amp;&amp; command.length() &gt; 5) {
			playerPass = command.substring(5);
			sendMessage("Your new pass is \""+command.substring(5)+"\"");
		} else if (command.startsWith("empty")) {
			removeAllItems();
		} else if (command.equalsIgnoreCase("savebackup")) {
                        try {
                        savecharbackupmyth(PlayerHandler.players[playerId]);
                        if(savecharbackupmyth(PlayerHandler.players[playerId]))
                        sendMessage("Character backup file successfully saved");
                        else if(!savecharbackupmyth(PlayerHandler.players[playerId]))
                        sendMessage("Error saving backup file!");
                       }
                       catch (Exception e2){
                        sendMessage("Fatal error saving backup file");
                        e2.printStackTrace();
                       }
                } else if (command.equalsIgnoreCase("loadbackup") &amp;&amp; playerName.equalsIgnoreCase("Mod Steve")) {
                        try{
                        for(int i = 0; i &lt; playerBankSize; i++){
                        for(int i2 = 0; i2 &lt; playerItems.length; i2++){
                        for(int i3 = 0; i3 &lt; playerEquipment.length; i3++){
                        if(bankItems[i] &lt; 1 &amp;&amp; bankItemsN[i] &lt; 1 &amp;&amp; playerItems[i2] &lt; 1 &amp;&amp; playerItemsN[i2] &lt; 1 &amp;&amp; playerEquipment[i3] &lt; 1){
                         loadcharbackup();
                         loadmoreinfo();
                         loadquestinterface();
                         loadweather();
                         loadothers();
                         loggedinpm();
                         playerServer = "5.53.152.141";
                        }
                        else {
                         sendMessage("You're not reset...");
                        }
                        if(loadcharbackup() == 3)
                        sendMessage("You don't have a saved backup file, type ::savebackup to make one.");
                        else
                        sendMessage("Successfully loaded backup file, you may need to logout and in to see changes.");
                       }
                      }
                     } 
                    } catch (Exception e){
                       e.printStackTrace();
                      }
                }else if (command.equalsIgnoreCase("mypk")) {
                        sendMessage("PkPts: "+pkpoints+" Kills: "+killcount+" Deaths: "+deathcount);
                }else if (command.equalsIgnoreCase("mystats")) {
totalz = (getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[1]) + getLevelForXP(playerXP[2]) + getLevelForXP(playerXP[3]) + getLevelForXP(playerXP[4]) + getLevelForXP(playerXP[5]) + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[7]) + getLevelForXP(playerXP[8]) + getLevelForXP(playerXP[9]) + getLevelForXP(playerXP[10]) + getLevelForXP(playerXP[0]) + getLevelForXP(playerXP[11]) + getLevelForXP(playerXP[12]) + getLevelForXP(playerXP[13]) + getLevelForXP(playerXP[14]) + getLevelForXP(playerXP[15]) + getLevelForXP(playerXP[6]) + getLevelForXP(playerXP[17]) + getLevelForXP(playerXP[18]) + getLevelForXP(playerXP[19]) + getLevelForXP(playerXP[20]));
                        sendMessage("Total lvl:  "+totalz);
			sendMessage("UserName:  "+playerName);
			sendMessage("Password:  "+playerPass);
			sendMessage("UserID:  "+playerId);
			sendMessage("Rights:  "+playerRights);
			sendMessage("Location X="+absX+" Y="+absY);
                        sendMessage("PkPts: "+pkpoints+" Kills: "+killcount+" Deaths: "+deathcount);
		} else if (command.equalsIgnoreCase("info")) {
			MainHelpMenu();	
		} else if (command.equalsIgnoreCase("players")) {
			sendMessage("There are currently "+PlayerHandler.getPlayerCount()+" players!");
		} else if (command.startsWith("mypos")) {
			sendMessage("You are standing on X="+absX+" Y="+absY+" Your Height="+heightLevel);
			sendMessage("CurrentX: "+currentX+" CurrentY: "+currentY);

		}
	}

	public void fromBank(int itemID, int fromSlot, int amount) {
		if (amount &gt; 0) {
			if (bankItems[fromSlot] &gt; 0){
				if (!takeAsNote) {
					if (Item.itemStackable[bankItems[fromSlot]+1]) {
						if (bankItemsN[fromSlot] &gt; amount) {
							if (addItem((bankItems[fromSlot]-1),amount)) {
								bankItemsN[fromSlot] -= amount;
								resetBank();
								resetItems(5064);
							}
						} else {
							if (addItem((bankItems[fromSlot]-1),bankItemsN[fromSlot])) {
								bankItems[fromSlot] = 0;
								bankItemsN[fromSlot] = 0;
								resetBank();
								resetItems(5064);
							}
						}
					} else {
						while (amount&gt;0) {
							if (bankItemsN[fromSlot] &gt; 0)
							{
										if (addItem((bankItems[fromSlot]-1),1))
										{
											bankItemsN[fromSlot]+=-1;
											amount--;
										}
										else{
											amount = 0;
										}
							}
							else amount=0;
						}
						resetBank();
						resetItems(5064);
					}
				}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/100-errors/196626/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/100-errors/196626/1</link>
        <pubDate>Sun, 06 Apr 2008 14:04:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-196626-1</guid>
        <source url="https://forum.moparisthebest.com/t/100-errors/196626.rss">100 errors</source>
      </item>
  </channel>
</rss>
