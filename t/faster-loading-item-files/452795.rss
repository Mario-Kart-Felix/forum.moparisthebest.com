<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Faster loading item-files :)</title>
    <link>https://forum.moparisthebest.com/t/faster-loading-item-files/452795</link>
    <description>in the data/ folder the &quot;*.dat&quot; files that are written in binary i have made even smaller. Just want someone to verify my code will actually work.
create a new folder and name it anything
create the java file(in the folder) called &quot;fileTest.java&quot;-&gt;add this to it.

[code]import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;

/**
 *
 * @author matzie
 */
public class fileTest {
/*Declares default values and file names for the program*/
    public static final int maxItems=20000;
    public static String[] file={&quot;stackable.dat&quot;,&quot;notes.dat&quot;,&quot;sellable.dat&quot;,&quot;twohanded.dat&quot;,&quot;tradeable.dat&quot;};
    public static boolean itemHold[]=new boolean[maxItems];
    public static boolean itemVerify[]=new boolean[maxItems];

/*runs the test*/
    public static void main(String[] args) {
	makeFiles();//writes the files :D
	long t=System.nanoTime();
	for (int i=0;i&lt;101;i++)
            readFileOld(file[i%file.length]);//it toggles between all of the file types when loading, to keep it fair
	System.out.println(&quot;OLD method took:&quot;+((System.nanoTime()-t)/1000000.0)+&quot; milliseconds&quot;);
	t=System.nanoTime();
	for (int i=0;i&lt;101;i++)
            readFileNew(file[i%file.length]);//it toggles between all of the file types when loading, to keep it fair
	System.out.println(&quot;NEW method took:&quot; +((System.nanoTime()-t)/1000000.0)+&quot; milliseconds&quot;);
        System.out.println((verifyArraysAreSame())? &quot;They are the same&quot; : &quot;There is something wrong, did you do makeFiles() first?&quot;);
}
    
    
    public static boolean verifyArraysAreSame() {
        for (int i=0;i&lt;maxItems;i++)
            if (itemHold[i]!=itemVerify[i])
                return false;
        return true;
    
    }
public static void readFileOld(String name) {
        int counter = 0;
        int c;

        try {
            FileInputStream dataIn = new FileInputStream(
                    new File(&quot;old/&quot;+name));
            while ((c = dataIn.read()) != -1) {
                if (c == 0) {
                    itemHold[counter] = false;
                } else {
                    itemHold[counter] = true;
                }
                
                counter++;
            }
            dataIn.close();
        } catch (IOException e) {
            System.out.println(
                    &quot;Critical error while loading old &quot;+name+&quot; Trace:&quot;);
            e.printStackTrace();
        }
}
public static void readFileNew(String name) {
        int counter = 0;
        int c;

        try {
            int numtrue=0;
            FileInputStream dataIn = new FileInputStream(
                    new File(&quot;new/&quot;+name));

            while (dataIn.available()&gt;0) {
                c=dataIn.read();
	for (int i=0;i&lt;Byte.SIZE;i++) {
                    itemVerify[counter] = (( (c &gt;&gt; i) &amp; 0x1) ==0 ? false : true);
	    counter++;
        }
            
                
            }
            dataIn.close();
        } catch (IOException e) {
            System.out.println(
                    &quot;Critical error while loading new &quot;+name+&quot; Trace:&quot;);
            e.printStackTrace();
        }
}




   public static void makeFiles() {
for (int z=0;z&lt;file.length;z++) {
        int counter=0;
        int c=0;
        
      try {
            FileInputStream dataIn = new FileInputStream(new File(&quot;old/&quot;+file[z]));
            while (dataIn.available() &gt;0) {
                c = dataIn.read();
                    itemHold[counter]= (c==0) ? false : true;
                counter++;
            }
            dataIn.close();
        } catch (IOException e) {
            System.out.println(
                    &quot;Critical error while loading file data! Trace:&quot;);
            e.printStackTrace();
        }
if (counter&lt;maxItems-1)
for (int r=counter;r&lt;maxItems;r++)
itemHold[r]=false;
        try {
            FileOutputStream dataOut = new FileOutputStream(new File(&quot;new/&quot;+file[z]), false);
            byte d=0;
            for (int i=0;i&lt;itemHold.length;i++) {
               
                if (i%8==0)
                d=0;
                if (itemHold[i]) {
                    d=(byte) (d+(byte)Math.pow(2,i%Byte.SIZE));
                   // System.out.print(&quot;[&quot;+i%Byte.SIZE+&quot;]&quot;);
                }
                if ((i%Byte.SIZE==Byte.SIZE-1) || i==maxItems-1) {//catches if it is at the end of the list
                    dataOut.write(d);
                    //System.out.print(d+&quot; &quot;);
                    
                }
                
            }
            dataOut.flush();
            dataOut.close();
        } catch (IOException e){}

        c=0;
        counter=0;
        try {
            FileInputStream dataIn = new FileInputStream(
                    new File(&quot;new/&quot;+file[z]));

            while (dataIn.available()&gt;0) {
	c=dataIn.read();
                for (int i=0;i&lt;Byte.SIZE;i++) {
                itemVerify[counter]=(((c &gt;&gt; i &amp; 0x1)==0) ? false : true);
                counter++;
                }
            }
            dataIn.close();
        } catch (IOException e) {
            System.out.println(
                    &quot;Critical error while loading verifyData! Trace:&quot;);
            e.printStackTrace();
        }
}
    }
}
[/code]
create 2 folders, one called &quot;Old&quot; and one called &quot;New&quot;, yes the first letter is caps.
add your .dat files to the &quot;Old&quot; folder(folders should also be in the first folder you made)(found in some servers in the Data folder


You may need to edit the maxitems, i am not sure.

this is my compiler:
[code]
@echo off
javac *.java
pause
java fileTest
pause[/code]

It loads it faster, and it takes less space, so i figured this wouldn&#39;t hurt to post :)

and if need-be i can create an editor for these new files as well.</description>
    
    <lastBuildDate>Sat, 04 Aug 2012 07:37:04 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/faster-loading-item-files/452795.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Faster loading item-files :)</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>in the data/ folder the “*.dat” files that are written in binary i have made even smaller. Just want someone to verify my code will actually work.<br>
create a new folder and name it anything<br>
create the java file(in the folder) called “fileTest.java”-&gt;add this to it.</p>
<p>[code]import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;</p>
<p>/**<br>
*</p>
<ul>
<li>
<span class="mention">@author</span> matzie<br>
*/<br>
public class fileTest {<br>
/<em>Declares default values and file names for the program</em>/<br>
public static final int maxItems=20000;<br>
public static String[] file={“stackable.dat”,“notes.dat”,“sellable.dat”,“twohanded.dat”,“tradeable.dat”};<br>
public static boolean itemHold[]=new boolean[maxItems];<br>
public static boolean itemVerify[]=new boolean[maxItems];</li>
</ul>
<p>/<em>runs the test</em>/<br>
public static void main(String[] args) {<br>
makeFiles();//writes the files <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"><br>
long t=System.nanoTime();<br>
for (int i=0;i&lt;101;i++)<br>
readFileOld(file[i%file.length]);//it toggles between all of the file types when loading, to keep it fair<br>
System.out.println(“OLD method took:”+((System.nanoTime()-t)/1000000.0)+" milliseconds");<br>
t=System.nanoTime();<br>
for (int i=0;i&lt;101;i++)<br>
readFileNew(file[i%file.length]);//it toggles between all of the file types when loading, to keep it fair<br>
System.out.println(“NEW method took:” +((System.nanoTime()-t)/1000000.0)+" milliseconds");<br>
System.out.println((verifyArraysAreSame())? “They are the same” : “There is something wrong, did you do makeFiles() first?”);<br>
}</p>
<pre><code>public static boolean verifyArraysAreSame() {
    for (int i=0;i&lt;maxItems;i++)
        if (itemHold[i]!=itemVerify[i])
            return false;
    return true;

}
</code></pre>
<p>public static void readFileOld(String name) {<br>
int counter = 0;<br>
int c;</p>
<pre><code>    try {
        FileInputStream dataIn = new FileInputStream(
                new File("old/"+name));
        while ((c = dataIn.read()) != -1) {
            if (c == 0) {
                itemHold[counter] = false;
            } else {
                itemHold[counter] = true;
            }
            
            counter++;
        }
        dataIn.close();
    } catch (IOException e) {
        System.out.println(
                "Critical error while loading old "+name+" Trace:");
        e.printStackTrace();
    }
</code></pre>
<p>}<br>
public static void readFileNew(String name) {<br>
int counter = 0;<br>
int c;</p>
<pre><code>    try {
        int numtrue=0;
        FileInputStream dataIn = new FileInputStream(
                new File("new/"+name));

        while (dataIn.available()&gt;0) {
            c=dataIn.read();
for (int i=0;i&lt;Byte.SIZE;i++) {
                itemVerify[counter] = (( (c &gt;&gt; i) &amp; 0x1) ==0 ? false : true);
    counter++;
    }
        
            
        }
        dataIn.close();
    } catch (IOException e) {
        System.out.println(
                "Critical error while loading new "+name+" Trace:");
        e.printStackTrace();
    }
</code></pre>
<p>}</p>
<p>public static void makeFiles() {<br>
for (int z=0;z&lt;file.length;z++) {<br>
int counter=0;<br>
int c=0;</p>
<pre><code>  try {
        FileInputStream dataIn = new FileInputStream(new File("old/"+file[z]));
        while (dataIn.available() &gt;0) {
            c = dataIn.read();
                itemHold[counter]= (c==0) ? false : true;
            counter++;
        }
        dataIn.close();
    } catch (IOException e) {
        System.out.println(
                "Critical error while loading file data! Trace:");
        e.printStackTrace();
    }
</code></pre>
<p>if (counter&lt;maxItems-1)<br>
for (int r=counter;r&lt;maxItems;r++)<br>
itemHold[r]=false;<br>
try {<br>
FileOutputStream dataOut = new FileOutputStream(new File(“new/”+file[z]), false);<br>
byte d=0;<br>
for (int i=0;i&lt;itemHold.length;i++) {</p>
<pre><code>            if (i%8==0)
            d=0;
            if (itemHold[i]) {
                d=(byte) (d+(byte)Math.pow(2,i%Byte.SIZE));
               // System.out.print("["+i%Byte.SIZE+"]");
            }
            if ((i%Byte.SIZE==Byte.SIZE-1) || i==maxItems-1) {//catches if it is at the end of the list
                dataOut.write(d);
                //System.out.print(d+" ");
                
            }
            
        }
        dataOut.flush();
        dataOut.close();
    } catch (IOException e){}

    c=0;
    counter=0;
    try {
        FileInputStream dataIn = new FileInputStream(
                new File("new/"+file[z]));

        while (dataIn.available()&gt;0) {
c=dataIn.read();
            for (int i=0;i&lt;Byte.SIZE;i++) {
            itemVerify[counter]=(((c &gt;&gt; i &amp; 0x1)==0) ? false : true);
            counter++;
            }
        }
        dataIn.close();
    } catch (IOException e) {
        System.out.println(
                "Critical error while loading verifyData! Trace:");
        e.printStackTrace();
    }
</code></pre>
<p>}<br>
}<br>
}<br>
[/code]<br>
create 2 folders, one called “Old” and one called “New”, yes the first letter is caps.<br>
add your .dat files to the “Old” folder(folders should also be in the first folder you made)(found in some servers in the Data folder</p>
<p>You may need to edit the maxitems, i am not sure.</p>
<p>this is my compiler:</p>
<p><code>
@echo off
javac *.java
pause
java fileTest
pause</code></p>
<p>It loads it faster, and it takes less space, so i figured this wouldn’t hurt to post <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>and if need-be i can create an editor for these new files as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/faster-loading-item-files/452795/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/faster-loading-item-files/452795/1</link>
        <pubDate>Sat, 04 Aug 2012 07:37:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-452795-1</guid>
        <source url="https://forum.moparisthebest.com/t/faster-loading-item-files/452795.rss">Faster loading item-files :)</source>
      </item>
  </channel>
</rss>
