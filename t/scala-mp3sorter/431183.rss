<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Scala] mp3sorter</title>
    <link>https://forum.moparisthebest.com/t/scala-mp3sorter/431183</link>
    <description>[code][code lang = scala]package mp3sorter
import java.io.File;
import java.io.FileInputStream;
object MP3Sort {

  /**
   *Simple MP3 sorting application translated from C -&gt; C# -&gt; Java -&gt; Jython -&gt; Scala -&gt; ???
   *By Silabsoft and all those prior.
   * @param args the command line arguments
   */
  def main(args: Array[String]): Unit = {
    if(args.length &lt; 2){
      println(&quot;USAGE: MP3Sort [source] [destination]&quot;);
      return;
    }
    val source : File = new File(args(0));
    val destination : File = new File(args(1));
    var mp3List : List[MP3File] = Nil;
    if(!source.isDirectory || !source.canRead){
      println(&quot;Please check the source path&quot;);
      return;
    }
    for (file &lt;- source.listFiles){
      if(file.getName.endsWith(&quot;.mp3&quot;)){ //since we are only checking mp3 files
        val f : MP3File = new MP3File(file);
        f.parseTags; 
        mp3List = mp3List ::: List(f);
      }
    }
    mp3List = mp3List.sortWith(artistAlbumSort); // sort the list by artist and album 
    if(!destination.canRead &amp;&amp; !destination.canWrite &amp;&amp; !destination.mkdirs()){
      println(&quot;Could not read, write or create destionation&quot;);
      return;
    }
    for (mp3 &lt;- mp3List){
      if(!mp3.isValid){
        return;
      }
      val md : File = new File(destination + File.separator + mp3.getArtist + File.separator + mp3.getYearTitle + mp3.getAlbum);
      if(!md.canRead &amp;&amp; !md.mkdirs()){
        println(&quot;Could not create destionation: &quot;+md);
        return;
      }
      val d : File  = new File(md, mp3.getFileName);
      mp3.getFile.renameTo(d);
    }
  }
  
  def artistAlbumSort(mp3A: MP3File, mp3B: MP3File) ={
    (mp3A.getArtist compareToIgnoreCase mp3B.getArtist) + (mp3A.getAlbum compareToIgnoreCase mp3B.getAlbum) &lt; 0;
  }

  
  class MP3File(file : File){
    private var artist, album, title,year : String = &quot;&quot;;
    private var valid : Boolean = false;
    
    def getArtist = artist;
    def getYear = {
      try{
        year.toInt
      }catch{
        case e: Exception =&gt; &quot;INVALID&quot;
      }
    };
    def getYearTitle = {
      try{
        year.toInt+&quot; - &quot;;
      }catch{
        case e: Exception =&gt; &quot;&quot;
      }      
    }
    def getAlbum = album;
    def getTitle = title;
    def getFileName = title+&quot;.mp3&quot;;
    def getFile : File = file;
    def isValid = valid;
    
    
    override def toString = artist + &quot; - &quot; + title + &quot; (&quot; + getYear + &quot;, &quot; + album + &quot;)&quot;;   
 
    // could use some more valudation checking but I&#39;m lazy and noone else bothered.&#39;
    def parseTags = {
      try{
        val buffer :Array[Byte] = new Array(128);
        val fis : FileInputStream = new FileInputStream(file);
        fis.skip(this.file.length() - buffer.length);
        fis.read(buffer, 0, buffer.length);
   
        for(i &lt;- 3 until 30)
          title += buffer(i).toChar;
        title = title.trim();
               
        for(i &lt;- 33 until 63)
          artist += buffer(i).toChar;
        artist = artist.trim();
               
        for(i &lt;- 63 until 93)
          album += buffer(i).toChar;
        album = album.trim();
        for(i &lt;- 93 until 97)
          year += buffer(i).toChar;
        year= year.trim();
        fis.close(); 
        valid = true;
      }catch{
        case e: Exception =&gt; valid = false;
      }
    };
  }
  
}[/code]</description>
    
    <lastBuildDate>Mon, 30 Jan 2012 19:40:55 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/scala-mp3sorter/431183.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Scala] mp3sorter</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="431183">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/sppt/40/44_1.png" class="avatar"> sppt:</div>
<blockquote>
<p>Why exactly do you sort the list of MP3Files when it doesn’t really matter in which order you copy/move the files?</p>
</blockquote>
</aside>
<p>actually i was just playing around with sorting because my cheapo mp3 player only supports one folder for mp3’s so I wanted everything to just be sorted in a single folder.</p>
<p>you can remove lines:</p>
<pre><code class="lang-auto"></code></pre>
<pre><code class="lang-auto">  def artistAlbumSort(mp3A: MP3File, mp3B: MP3File) ={
    (mp3A.getArtist compareToIgnoreCase mp3B.getArtist) + (mp3A.getAlbum compareToIgnoreCase mp3B.getAlbum) &lt; 0;
  }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/scala-mp3sorter/431183/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/scala-mp3sorter/431183/4</link>
        <pubDate>Mon, 30 Jan 2012 19:40:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-431183-4</guid>
        <source url="https://forum.moparisthebest.com/t/scala-mp3sorter/431183.rss">[Scala] mp3sorter</source>
      </item>
      <item>
        <title>[Scala] mp3sorter</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="431183">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/sppt/40/44_1.png" class="avatar"> sppt:</div>
<blockquote>
<p>Why exactly do you sort the list of MP3Files when it doesn’t really matter in which order you copy/move the files?</p>
</blockquote>
</aside>
<p>for extra CPU/memory usage!!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/scala-mp3sorter/431183/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/scala-mp3sorter/431183/3</link>
        <pubDate>Mon, 30 Jan 2012 17:32:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-431183-3</guid>
        <source url="https://forum.moparisthebest.com/t/scala-mp3sorter/431183.rss">[Scala] mp3sorter</source>
      </item>
      <item>
        <title>[Scala] mp3sorter</title>
        <dc:creator><![CDATA[@sppt sppt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sppt">@sppt</a> wrote:</p>
          <blockquote>
              <p>Why exactly do you sort the list of MP3Files when it doesn’t really matter in which order you copy/move the files?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/scala-mp3sorter/431183/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/scala-mp3sorter/431183/2</link>
        <pubDate>Mon, 30 Jan 2012 16:21:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-431183-2</guid>
        <source url="https://forum.moparisthebest.com/t/scala-mp3sorter/431183.rss">[Scala] mp3sorter</source>
      </item>
      <item>
        <title>[Scala] mp3sorter</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>[code][code lang = scala]package mp3sorter<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
object MP3Sort {</p>
<p>/**<br>
*Simple MP3 sorting application translated from C -&gt; C# -&gt; Java -&gt; Jython -&gt; Scala -&gt; ???<br>
*By Silabsoft and all those prior.</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> args the command line arguments<br>
*/<br>
def main(args: Array[String]): Unit = {<br>
if(args.length &lt; 2){<br>
println(“USAGE: MP3Sort [source] [destination]”);<br>
return;<br>
}<br>
val source : File = new File(args(0));<br>
val destination : File = new File(args(1));<br>
var mp3List : List[MP3File] = Nil;<br>
if(!source.isDirectory || !source.canRead){<br>
println(“Please check the source path”);<br>
return;<br>
}<br>
for (file &lt;- source.listFiles){<br>
if(file.getName.endsWith(".mp3")){ //since we are only checking mp3 files<br>
val f : MP3File = new MP3File(file);<br>
f.parseTags;<br>
mp3List = mp3List ::: List(f);<br>
}<br>
}<br>
mp3List = mp3List.sortWith(artistAlbumSort); // sort the list by artist and album<br>
if(!destination.canRead &amp;&amp; !destination.canWrite &amp;&amp; !destination.mkdirs()){<br>
println(“Could not read, write or create destionation”);<br>
return;<br>
}<br>
for (mp3 &lt;- mp3List){<br>
if(!mp3.isValid){<br>
return;<br>
}<br>
val md : File = new File(destination + File.separator + mp3.getArtist + File.separator + mp3.getYearTitle + mp3.getAlbum);<br>
if(!md.canRead &amp;&amp; !md.mkdirs()){<br>
println("Could not create destionation: "+md);<br>
return;<br>
}<br>
val d : File  = new File(md, mp3.getFileName);<br>
mp3.getFile.renameTo(d);<br>
}<br>
}</li>
</ul>
<p>def artistAlbumSort(mp3A: MP3File, mp3B: MP3File) ={<br>
(mp3A.getArtist compareToIgnoreCase mp3B.getArtist) + (mp3A.getAlbum compareToIgnoreCase mp3B.getAlbum) &lt; 0;<br>
}</p>
<p>class MP3File(file : File){<br>
private var artist, album, title,year : String = “”;<br>
private var valid : Boolean = false;</p>
<pre><code>def getArtist = artist;
def getYear = {
  try{
    year.toInt
  }catch{
    case e: Exception =&gt; "INVALID"
  }
};
def getYearTitle = {
  try{
    year.toInt+" - ";
  }catch{
    case e: Exception =&gt; ""
  }      
}
def getAlbum = album;
def getTitle = title;
def getFileName = title+".mp3";
def getFile : File = file;
def isValid = valid;


override def toString = artist + " - " + title + " (" + getYear + ", " + album + ")";   

// could use some more valudation checking but I'm lazy and noone else bothered.'
def parseTags = {
  try{
    val buffer :Array[Byte] = new Array(128);
    val fis : FileInputStream = new FileInputStream(file);
    fis.skip(this.file.length() - buffer.length);
    fis.read(buffer, 0, buffer.length);

    for(i &lt;- 3 until 30)
      title += buffer(i).toChar;
    title = title.trim();
           
    for(i &lt;- 33 until 63)
      artist += buffer(i).toChar;
    artist = artist.trim();
           
    for(i &lt;- 63 until 93)
      album += buffer(i).toChar;
    album = album.trim();
    for(i &lt;- 93 until 97)
      year += buffer(i).toChar;
    year= year.trim();
    fis.close(); 
    valid = true;
  }catch{
    case e: Exception =&gt; valid = false;
  }
};
</code></pre>
<p>}</p>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/scala-mp3sorter/431183/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/scala-mp3sorter/431183/1</link>
        <pubDate>Mon, 30 Jan 2012 10:06:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-431183-1</guid>
        <source url="https://forum.moparisthebest.com/t/scala-mp3sorter/431183.rss">[Scala] mp3sorter</source>
      </item>
  </channel>
</rss>
