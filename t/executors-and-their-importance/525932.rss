<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Executors and their importance</title>
    <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932</link>
    <description>[center][size=14pt]Executors And Their Importance[/size][/center]

     Very often when programming private servers we are faced with the challenge of executing a task every so often in an infinite loop. The standard approach, which is still implemented in most servers to this day, is to generate one thread to handle all of the server&#39;s processing and then have that thread sleep for X amount of time when it&#39;s not in use. Then when the thread wakes up, process all the data relaying in the server (Players, NPCs, ect). This method is not CPU friendly or thread efficient. By implementing a &quot;ScheduledExecutorService&quot; instead you can now schedule more than one task and it also has support for multiple threads. You will also save time when actually writing the code itself.

Standard Approach:

[code]
public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         new Thread(example).start();
     }

     @Override
     public void run() {
         while (true) {
              Thread.sleep(600);
         }
     }
}
[/code]

New Approach One (Executing One Thread):

[code]
public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
         executor.scheduleAtFixedRate(example, 0, 600, TimeUnit.MILLISECONDS);
     }

     @Override
     public void run() {

     }
}
[/code]

New Approach Two (Executing One Thread):

[code]
public class Example {

     public static void main(String commandLine[]) {
          ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
          executor.scheduleAtFixedRate(new Runnable() {
               @Override
               public void run() {

               }
          }, 0, 600, TimeUnit.MILLISECONDS);
     }
}
[/code]

New Approach Three (Executing Two Threads):

[code]
public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);
         executor.scheduleAtFixedRate(example, 0, 600, TimeUnit.MILLISECONDS);
         executor.scheduleAtFixedRate(SecondExample.exampleTwo, 0, 600, TimeUnit.MILLISECONDS);
     }

     @Override
     public void run() {

     }
}
[/code]

     As you can see the standard approach only uses one thread to execute all of its tasks in order, so if you have one task that gets delayed, then all of the other tasks will be pushed back as well creating lagg. Because more than one thread is usually implemented with the &quot;ScheduledExecutorService&quot; the dependency of executing one task over the completion of another is highly reduced. 

Edit Elaboration:

[code]
ScheduledExecutorService executor = Executors.newScheduledThreadPool(X);
[/code]

The &#39;X&#39; is the amount of threads that will be added into our pool.

[code]
executor.scheduleAtFixedRate(A, B, C, D);
[/code]

&#39;A&#39; represents the runnable or thread that will be executed. (example)

&#39;B&#39; represents the initial delay. (0)

&#39;C&#39; represents the frequency it&#39;s executed. (600)

&#39;D&#39; represents the unit of time it will be executed in. (TimeUnit.MILLISECONDS)

I&#39;ve also provided the oracle documentation:

&lt;blockquote&gt;Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay + period, then initialDelay + 2 * period, and so on.&lt;/blockquote&gt;

Also heres the oracle link if you want to go further in-depth on the class and design implementations: 
&lt;blockquote&gt;http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledExecutorService.html&lt;/blockquote&gt;

P.S: Most Event Systems and Task Schedulers implement this design in some way.</description>
    
    <lastBuildDate>Wed, 24 Jul 2013 16:33:17 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@iz3_legend iz3 legend]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iz3_legend">@iz3_legend</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="6" data-topic="525932">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/java-rsps-noob/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Java-RSPS-Noob:</div>
<blockquote>
<p>Some very useful information here. Rep ++ oh wait…</p>
</blockquote>
</aside>
<p>Thank you :).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/7</link>
        <pubDate>Wed, 24 Jul 2013 16:33:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-7</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@Java-RSPS-Noob Java-RSPS-Noob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/java-rsps-noob">@Java-RSPS-Noob</a> wrote:</p>
          <blockquote>
              <p>Some very useful information here. Rep ++ oh wait…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/6</link>
        <pubDate>Wed, 24 Jul 2013 14:24:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-6</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>[quote=“iz3 legend, post:4, topic:525932”]Thank you for the feed back. I’ll elaborate more on this soon.</p>
<p>Edit: OP updated.[/quote]I like it! I like the external links &amp; the short descriptions of everything. Good job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/5</link>
        <pubDate>Wed, 24 Jul 2013 01:58:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-5</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@iz3_legend iz3 legend]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iz3_legend">@iz3_legend</a> wrote:</p>
          <blockquote>
              <p>Thank you for the feed back. I’ll elaborate more on this soon.</p>
<p>Edit: OP updated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/4</link>
        <pubDate>Tue, 23 Jul 2013 23:03:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-4</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>Thank you so much!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/3</link>
        <pubDate>Tue, 23 Jul 2013 21:56:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-3</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@Uncalled Uncalled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/uncalled">@Uncalled</a> wrote:</p>
          <blockquote>
              <p>Good tutorial, it was a good read and I enjoyed it. However, I do have some suggestions. I recommend going in and explaining on how all of the executors works. Where and what does this and that, etc. Other than that, I think that this is a fine tutorial - good job!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/2</link>
        <pubDate>Tue, 23 Jul 2013 21:49:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-2</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
      <item>
        <title>Executors and their importance</title>
        <dc:creator><![CDATA[@iz3_legend iz3 legend]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iz3_legend">@iz3_legend</a> wrote:</p>
          <blockquote>
              <p>[center][size=14pt]Executors And Their Importance[/size][/center]</p>
<pre><code> Very often when programming private servers we are faced with the challenge of executing a task every so often in an infinite loop. The standard approach, which is still implemented in most servers to this day, is to generate one thread to handle all of the server's processing and then have that thread sleep for X amount of time when it's not in use. Then when the thread wakes up, process all the data relaying in the server (Players, NPCs, ect). This method is not CPU friendly or thread efficient. By implementing a "ScheduledExecutorService" instead you can now schedule more than one task and it also has support for multiple threads. You will also save time when actually writing the code itself.
</code></pre>
<p>Standard Approach:</p>
<pre><code class="lang-auto">public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         new Thread(example).start();
     }

     @Override
     public void run() {
         while (true) {
              Thread.sleep(600);
         }
     }
}</code></pre>
<p>New Approach One (Executing One Thread):</p>
<pre><code class="lang-auto">public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
         executor.scheduleAtFixedRate(example, 0, 600, TimeUnit.MILLISECONDS);
     }

     @Override
     public void run() {

     }
}</code></pre>
<p>New Approach Two (Executing One Thread):</p>
<pre><code class="lang-auto">public class Example {

     public static void main(String commandLine[]) {
          ScheduledExecutorService executor = Executors.newScheduledThreadPool(1);
          executor.scheduleAtFixedRate(new Runnable() {
               @Override
               public void run() {

               }
          }, 0, 600, TimeUnit.MILLISECONDS);
     }
}</code></pre>
<p>New Approach Three (Executing Two Threads):</p>
<pre><code class="lang-auto">public class Example implements Runnable {

     private static Example example = new Example();

     public static void main(String commandLine[]) {
         ScheduledExecutorService executor = Executors.newScheduledThreadPool(2);
         executor.scheduleAtFixedRate(example, 0, 600, TimeUnit.MILLISECONDS);
         executor.scheduleAtFixedRate(SecondExample.exampleTwo, 0, 600, TimeUnit.MILLISECONDS);
     }

     @Override
     public void run() {

     }
}</code></pre>
<pre><code> As you can see the standard approach only uses one thread to execute all of its tasks in order, so if you have one task that gets delayed, then all of the other tasks will be pushed back as well creating lagg. Because more than one thread is usually implemented with the "ScheduledExecutorService" the dependency of executing one task over the completion of another is highly reduced. 
</code></pre>
<p>Edit Elaboration:</p>
<pre><code class="lang-auto">ScheduledExecutorService executor = Executors.newScheduledThreadPool(X);</code></pre>
<p>The ‘X’ is the amount of threads that will be added into our pool.</p>
<pre><code class="lang-auto">executor.scheduleAtFixedRate(A, B, C, D);</code></pre>
<p>‘A’ represents the runnable or thread that will be executed. (example)</p>
<p>‘B’ represents the initial delay. (0)</p>
<p>‘C’ represents the frequency it’s executed. (600)</p>
<p>‘D’ represents the unit of time it will be executed in. (TimeUnit.MILLISECONDS)</p>
<p>I’ve also provided the oracle documentation:</p>
<blockquote>Creates and executes a periodic action that becomes enabled first after the given initial delay, and subsequently with the given period; that is executions will commence after initialDelay then initialDelay + period, then initialDelay + 2 * period, and so on.</blockquote>
<p>Also heres the oracle link if you want to go further in-depth on the class and design implementations:</p>
<blockquote>http://docs.oracle.com/javase/6/docs/api/java/util/concurrent/ScheduledExecutorService.html</blockquote>
<p>P.S: Most Event Systems and Task Schedulers implement this design in some way.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/executors-and-their-importance/525932/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/executors-and-their-importance/525932/1</link>
        <pubDate>Tue, 23 Jul 2013 21:17:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525932-1</guid>
        <source url="https://forum.moparisthebest.com/t/executors-and-their-importance/525932.rss">Executors and their importance</source>
      </item>
  </channel>
</rss>
