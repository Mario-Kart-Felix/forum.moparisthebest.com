<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache Downloader won&#39;t unzip?</title>
    <link>https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963</link>
    <description>Hey everyone i have done everything right i just cant get it to unzip. i heard there is an anti leech on trisidiaX v3 but idk where it is. please help</description>
    
    <lastBuildDate>Sat, 30 Mar 2013 03:37:29 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache Downloader won&#39;t unzip?</title>
        <dc:creator><![CDATA[@xxbwxx xxbwxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxbwxx">@xxbwxx</a> wrote:</p>
          <blockquote>
              <p>my .class or .java???</p>
<p>here is my java</p>
<p>[code]/**********************************************</p>
<p><span class="mention">@author</span>: Google411</p>
<p>06/11/2011 – 9/19/2011</p>
<p>CacheDownloader.java<br>
Version: 2.00.12</p>
<p>$$ If you want to disable the pipup messages just null out these lines</p>
<p>Line: 102 -<br>
cacheHasUpdated();<br>
Line: 108 -<br>
cacheHasUpdated();<br>
With<br>
Line: 102 -<br>
//cacheHasUpdated();<br>
Line: 108 -<br>
//cacheHasUpdated();</p>
<p>&lt;¤&gt;¿&lt;¤&gt; Google411 Me - Revised by Kozs</p>
<p>**********************************************/</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;<br>
import javax.swing.<em>;<br>
import java.awt.event.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;
            client frame;
    private final int BUFFER = 1024;
            /* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
            /* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
    /* OPTION 3*/private String cacheLink = "https://dl.dropbox.com/s/a54woontg6j8wq6/.ProjectNeroCache.zip?token_hash=AAGxp_5lnfi-khex61KRQ9C-ww0dcbqkrm4kuf1Jze4AWQ&amp;dl=1" ;   // URL of cache on remote server. IE: "http://DropBox.com/cache.zip" Add to dropbox or FileDen
            /* OPTION 4 */private String cacheDir = "C:/" ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing '/'
            /* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    private String fileToExtract = getCacheDir() + getArchivedName();
    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
    }
           
    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
    }

    private String getCacheLink() {
            return cacheLink;
    }
           
    private String getCacheDir() {
            return cacheDir;
    }

    private int getCacheVersion() {
            return VERSION;
    }
           
            private int pauseHandlerDelay1000Equals1Second() {
                            return pauseHandlerDelay;
            }
   
            private String localCacheFile() {
                            return getCacheDir() + getArchivedName();
            }
    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            if(!location.exists()) {
                                            cacheHasUpdated();
                    downloadFile(getCacheLink(), getArchivedName());
                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
                                                            cacheHasUpdated();
                            downloadFile(getCacheLink(), getArchivedName());
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();
                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {
            }
            return null;
    }                       
                    public void cacheHasUpdated() {
                            JOptionPane.showMessageDialog(frame, "It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.", "Cache Version Invalid", JOptionPane.WARNING_MESSAGE);
                            }
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + "/" +localFileName));
                    conn = url.openConnection();
                    in = conn.getInputStream();
                    byte[] data = new byte[BUFFER];
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;
                            int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
                    }
                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");
            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }
                            fileExists();
    }
    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }
    public void fileExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("The cache was not downloaded correctly.");
      System.out.println("Please download it manually at:");
      System.out.println(localCacheFile());
      System.out.println("File Directory:");
      System.out.println(getCacheDir());
      pauseHandler();
    cacheDownloadError();
}else {
  drawLoadingText("Your cache is downloaded and ready to un-zip!");
      pauseHandler();
      unZip();         
}
    }
            private void unZip() {
        try {
                InputStream in =
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;
            while((e=zin.getNextEntry()) != null) {
                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {
                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
                                    drawLoadingText("[UN-ZIP]: " + e.getName());
            }
            zin.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
                    pauseHandler();
                    unNeededCacheExists();
    }
    private void unzip(ZipInputStream zin, String s)
            throws IOException {
            FileOutputStream out = new FileOutputStream(s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
                            }
    }
    public void unNeededCacheExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("Your cache was not downloaded correctly.");
      System.out.println("Please try to re re run the client.");
}else {
  System.out.println("Your cache is on your HDD");
      System.out.println("Auto Cache Deleter Attempting to delete...");
      delete();         
}
    }
        public void delete() {       
        try{
                File file = new File(localCacheFile());
                if(file.delete()){
                        drawLoadingText("[SUCCESS]" +file.getName()+ " was deleted!");
                            System.out.println("[SUCCESS]" +file.getName()+ " was deleted!");
                }else{
                        drawLoadingText("[ERROR]" +file.getName()+ " was not deleted.");
                            System.out.println("[ERROR]" +file.getName()+ " was not deleted.");
                }
        }catch(Exception e){
                e.printStackTrace();
        }
}
    public void cacheDownloadError() {
            try {
        drawLoadingText("Cache Download Error - Contact an admin");
                    }
                    catch(Exception e){
                e.printStackTrace();
        }
                    }
</code></pre>
<p>public void pauseHandler() {<br>
try {<br>
Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());<br>
}<br>
catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
/*************************<br>
<span class="mention">@author</span> Google - Revised by Kozs<br>
*************************/[/code]</p>
<p>here is my .class</p>
<p>[code]import java.io.BufferedInputStream;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedWriter;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileWriter;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.io.OutputStream;<br>
import java.io.PrintStream;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import javax.swing.JOptionPane;</p>
<p>public class CacheDownloader<br>
{<br>
private client client;<br>
client frame;<br>
private final int BUFFER = 1024;</p>
<p>private final int VERSION = 1;<br>
private final int pauseHandlerDelay = 1000;<br>
private String cacheLink = “<a href="https://dl.dropbox.com/s/a54woontg6j8wq6/.ProjectNeroCache.zip?token_hash=AAGxp_5lnfi-khex61KRQ9C-ww0dcbqkrm4kuf1Jze4AWQ&amp;dl=1" rel="nofollow noopener">https://dl.dropbox.com/s/a54woontg6j8wq6/.ProjectNeroCache.zip?token_hash=AAGxp_5lnfi-khex61KRQ9C-ww0dcbqkrm4kuf1Jze4AWQ&amp;dl=1</a>”;<br>
private String cacheDir = “C:/”;</p>
<p>private String fileToExtract = getCacheDir() + getArchivedName();</p>
<p>public CacheDownloader(client paramclient) { this.client = paramclient; }</p>
<p>private void drawLoadingText(String paramString)<br>
{<br>
this.client.drawLoadingText(35, paramString);<br>
}</p>
<p>private void drawLoadingText(int paramInt, String paramString) {<br>
this.client.drawLoadingText(paramInt, paramString);<br>
}</p>
<p>private String getCacheLink() {<br>
return this.cacheLink;<br>
}</p>
<p>private String getCacheDir() {<br>
return this.cacheDir;<br>
}</p>
<p>private int getCacheVersion() {<br>
return 1;<br>
}</p>
<p>private int pauseHandlerDelay1000Equals1Second() {<br>
return 1000;<br>
}</p>
<p>private String localCacheFile() {<br>
return getCacheDir() + getArchivedName();<br>
}<br>
public CacheDownloader downloadCache() {<br>
try {<br>
File localFile1 = new File(getCacheDir());<br>
File localFile2 = new File(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”);<br>
BufferedWriter localBufferedWriter;<br>
if (!localFile1.exists()) {<br>
cacheHasUpdated();<br>
downloadFile(getCacheLink(), getArchivedName());<br>
localBufferedWriter = new BufferedWriter(new FileWriter(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”));<br>
localBufferedWriter.close();<br>
}<br>
else if (!localFile2.exists()) {<br>
cacheHasUpdated();<br>
downloadFile(getCacheLink(), getArchivedName());<br>
localBufferedWriter = new BufferedWriter(new FileWriter(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”));<br>
localBufferedWriter.close();<br>
} else {<br>
return null;<br>
}<br>
}<br>
catch (Exception localException) {<br>
}<br>
return null;<br>
}<br>
public void cacheHasUpdated() {<br>
JOptionPane.showMessageDialog(this.frame, “It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.”, “Cache Version Invalid”, 2);<br>
}<br>
private void downloadFile(String paramString1, String paramString2) {<br>
BufferedOutputStream localBufferedOutputStream = null;</p>
<pre><code>InputStream localInputStream = null;
try {
  URL localURL = new URL(paramString1);
  localBufferedOutputStream = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" + paramString2));

  URLConnection localURLConnection = localURL.openConnection();
  localInputStream = localURLConnection.getInputStream();
  byte[] arrayOfByte = new byte[1024];

  long l = 0L;
  int j = localURLConnection.getContentLength();
  int i;
  while ((i = localInputStream.read(arrayOfByte)) != -1) {
    localBufferedOutputStream.write(arrayOfByte, 0, i);
    l += i;
    int k = (int)(l / j * 100.0D);
    drawLoadingText(k, "Downloading Cache " + k + "%");
  }
  System.out.println(paramString2 + "\t" + l);
  drawLoadingText("Finished downloading " + getArchivedName() + "!");
} catch (Exception localException) {
  localException.printStackTrace();
} finally {
  try {
    if (localInputStream != null) {
      localInputStream.close();
    }
    if (localBufferedOutputStream != null)
      localBufferedOutputStream.close();
  }
  catch (IOException localIOException3) {
  }
}
fileExists();
</code></pre>
<p>}<br>
private String getArchivedName() {<br>
int i = getCacheLink().lastIndexOf(’/’);<br>
if ((i &gt;= 0) &amp;&amp; (i &lt; getCacheLink().length() - 1))<br>
{<br>
return getCacheLink().substring(i + 1);<br>
}<br>
System.err.println(“error retreiving archivaed name.”);</p>
<pre><code>return "";
</code></pre>
<p>}<br>
public void fileExists() {<br>
File localFile = new File(localCacheFile());<br>
boolean bool = localFile.exists();<br>
if (!bool) {<br>
System.out.println(“The cache was not downloaded correctly.”);<br>
System.out.println(“Please download it manually at:”);<br>
System.out.println(localCacheFile());<br>
System.out.println(“File Directory:”);<br>
System.out.println(getCacheDir());<br>
pauseHandler();<br>
cacheDownloadError();<br>
} else {<br>
drawLoadingText(“Your cache is downloaded and ready to un-zip!”);<br>
pauseHandler();<br>
unZip();<br>
}<br>
}</p>
<p>private void unZip() {<br>
try { BufferedInputStream localBufferedInputStream = new BufferedInputStream(new FileInputStream(this.fileToExtract));</p>
<pre><code>  ZipInputStream localZipInputStream = new ZipInputStream(localBufferedInputStream);
  ZipEntry localZipEntry;
  while ((localZipEntry = localZipInputStream.getNextEntry()) != null) {
    if (localZipEntry.isDirectory()) {
      new File(getCacheDir() + localZipEntry.getName()).mkdir();
    } else {
      if (localZipEntry.getName().equals(this.fileToExtract)) {
        unzip(localZipInputStream, this.fileToExtract);
        break;
      }
      unzip(localZipInputStream, getCacheDir() + localZipEntry.getName());
    }
    drawLoadingText("[UN-ZIP]: " + localZipEntry.getName());
  }
  localZipInputStream.close();
} catch (Exception localException) {
  localException.printStackTrace();
}
pauseHandler();
unNeededCacheExists();
</code></pre>
<p>}</p>
<p>private void unzip(ZipInputStream paramZipInputStream, String paramString) throws IOException {<br>
FileOutputStream localFileOutputStream = new FileOutputStream(paramString);<br>
byte[] arrayOfByte = new byte[1024];<br>
int i = 0;</p>
<pre><code>while ((i = paramZipInputStream.read(arrayOfByte)) != -1)
  localFileOutputStream.write(arrayOfByte, 0, i);
</code></pre>
<p>}</p>
<p>public void unNeededCacheExists() {<br>
File localFile = new File(localCacheFile());<br>
boolean bool = localFile.exists();<br>
if (!bool) {<br>
System.out.println(“Your cache was not downloaded correctly.”);<br>
System.out.println(“Please try to re re run the client.”);<br>
} else {<br>
System.out.println(“Your cache is on your HDD”);<br>
System.out.println(“Auto Cache Deleter Attempting to delete…”);<br>
delete();<br>
}<br>
}</p>
<p>public void delete() {<br>
try { File localFile = new File(localCacheFile());<br>
if (localFile.delete()) {<br>
drawLoadingText("[SUCCESS]" + localFile.getName() + " was deleted!");<br>
System.out.println("[SUCCESS]" + localFile.getName() + " was deleted!");<br>
} else {<br>
drawLoadingText("[ERROR]" + localFile.getName() + " was not deleted.");<br>
System.out.println("[ERROR]" + localFile.getName() + " was not deleted.");<br>
}<br>
} catch (Exception localException) {<br>
localException.printStackTrace();<br>
}<br>
}</p>
<p>public void cacheDownloadError() {<br>
try { drawLoadingText(“Cache Download Error - Contact an admin”);<br>
} catch (Exception localException)<br>
{<br>
localException.printStackTrace();<br>
}<br>
}</p>
<p>public void pauseHandler() {<br>
try { Thread.currentThread(); Thread.sleep(pauseHandlerDelay1000Equals1Second());<br>
} catch (InterruptedException localInterruptedException)<br>
{<br>
localInterruptedException.printStackTrace();<br>
}<br>
}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/3</link>
        <pubDate>Sat, 30 Mar 2013 03:37:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-511963-3</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963.rss">Cache Downloader won&#39;t unzip?</source>
      </item>
      <item>
        <title>Cache Downloader won&#39;t unzip?</title>
        <dc:creator><![CDATA[@Fridder Fridder]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fridder">@Fridder</a> wrote:</p>
          <blockquote>
              <p>Post your CacheDownloader class.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/2</link>
        <pubDate>Sat, 30 Mar 2013 03:32:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-511963-2</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963.rss">Cache Downloader won&#39;t unzip?</source>
      </item>
      <item>
        <title>Cache Downloader won&#39;t unzip?</title>
        <dc:creator><![CDATA[@xxbwxx xxbwxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxbwxx">@xxbwxx</a> wrote:</p>
          <blockquote>
              <p>Hey everyone i have done everything right i just cant get it to unzip. i heard there is an anti leech on trisidiaX v3 but idk where it is. please help</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963/1</link>
        <pubDate>Sat, 30 Mar 2013 02:57:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-511963-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-downloader-wont-unzip/511963.rss">Cache Downloader won&#39;t unzip?</source>
      </item>
  </channel>
</rss>
