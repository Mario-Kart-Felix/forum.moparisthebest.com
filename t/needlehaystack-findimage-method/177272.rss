<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>NeedleHaystack FindImage Method</title>
    <link>https://forum.moparisthebest.com/t/needlehaystack-findimage-method/177272</link>
    <description>This is the older version of a &quot;needleHaystack&quot; theory findImage(); method I used in JMacro, It can&#39;t hurt to release it so that the java gurus can flame me for its terrible consistency and overal fugliness. I&#39;m no longer using the method because 1 it is slow and 2 its not very organized.

I just slopped it together to work with the entire screen but if you have the least bit of competance I assume you can see how to use this elsewhere.

Its already setup with a main method so it will compile and search for icon.png

[b]I should also mention it recognizes the RGB{0,240,240} as a &quot;mask&quot; color, meaning that irrelevant pixels such as backgrounds for a desktop icon which won&#39;t be &quot;universal&quot; or backgrounds for toptext can be shaded out on a square image and that it will be recognized as a valid part of the image.

The mouse will move to the &quot;center&quot; of the found image relative to its position on the screen.

It supports &quot;tolerance&quot; for modified/morphed/changed bitmaps such as in runescape.
[/b]

[code]
Old Search Outputs for a Dual Core 1.0 gig RAM pc
Image Thread -
Performed findImage() for 1280x1024 pixel screen, searching for &quot;start.png&quot; a 19x19 pixel image in 231ms
Performed findImage() for 1280x1024 pixel screen, searching for &quot;paint.png&quot; a 21x43 pixel image in 101ms
Performed findImage() for 1280x1024 pixel screen, searching for &quot;internet.png&quot; a 16x14 pixel image in 334ms
Performed findImage() for 1280x1024 pixel screen, searching for &quot;go.png&quot; a 85x87 pixel image in 523ms
Performed findImage() for 1280x1024 pixel screen, searching for &quot;run.png&quot; a 3x7 pixel image in 112ms
[/code]

[code]
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;

/**
 * Created with IntelliJ IDEA.
 * User: Vaughan D
 * Date: Jan 30, 2008
 * Time: 5:29:58 PM
 * To change this template use File | Settings | File Templates.
 */
public class findImage {
    public static boolean found = false;

    public static boolean findImage(String path, Dimension start, Dimension end, int tolerance, boolean move) {
        try {
            Robot r = new Robot();
            int checkSum = 0;
            BufferedImage searchImg = null;
            try {
                searchImg = ImageIO.read(new File(path));
            } catch (Exception ex) {
                System.out.println(&quot;Couldn&#39;t load the image we are searching for.&quot;);
            }
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            BufferedImage canvasImg = r.createScreenCapture(new Rectangle(d.width, d.height));
            Color firstPixel = new Color(searchImg.getRGB(0, 0));
            for (int y = start.height; y &lt; end.height; y++) {
                for (int x = start.width; x &lt; end.width; x++) {
                    Color curPixel = new Color(canvasImg.getRGB(x, y));
                    if (Math.abs(firstPixel.getRed() - curPixel.getRed()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getGreen() - curPixel.getGreen()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getBlue() - curPixel.getBlue()) &lt;= tolerance) {
                        for (int px = 1; px &lt; searchImg.getWidth(); px++) {
                            for (int py = 1; py &lt; searchImg.getHeight(); py++) {
                                Color lapsePixel = new Color(searchImg.getRGB(px, py));
                                if (px + x &gt;= end.width &amp;&amp; py + y &gt;= end.height) {
                                    return false;
                                }
                                Color canvasPixel = new Color(canvasImg.getRGB(x + px, y + py));
                                if (Math.abs(lapsePixel.getRed() - canvasPixel.getRed()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getGreen() - canvasPixel.getGreen()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getBlue() - canvasPixel.getBlue()) &lt;= tolerance + 10) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else if (lapsePixel.getRed() == 0 &amp;&amp; lapsePixel.getGreen() == 240 &amp;&amp; lapsePixel.getBlue() == 240) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else {
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
        }
        return found;
    }

    public static void main(String[] args) {
        System.out.println(findImage(&quot;icon.png&quot;, new Dimension(0, 0), new Dimension(Toolkit.getDefaultToolkit().getScreenSize()), 5, true));
    }
}
[/code]

Again, I realize that code is ugly, principally why I am no longer using it.</description>
    
    <lastBuildDate>Thu, 31 Jan 2008 06:26:52 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/needlehaystack-findimage-method/177272.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>NeedleHaystack FindImage Method</title>
        <dc:creator><![CDATA[@speedster239 speedster239]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speedster239">@speedster239</a> wrote:</p>
          <blockquote>
              <p>This is the older version of a “needleHaystack” theory findImage(); method I used in JMacro, It can’t hurt to release it so that the java gurus can flame me for its terrible consistency and overal fugliness. I’m no longer using the method because 1 it is slow and 2 its not very organized.</p>
<p>I just slopped it together to work with the entire screen but if you have the least bit of competance I assume you can see how to use this elsewhere.</p>
<p>Its already setup with a main method so it will compile and search for icon.png</p>
<p>[b]I should also mention it recognizes the RGB{0,240,240} as a “mask” color, meaning that irrelevant pixels such as backgrounds for a desktop icon which won’t be “universal” or backgrounds for toptext can be shaded out on a square image and that it will be recognized as a valid part of the image.</p>
<p>The mouse will move to the “center” of the found image relative to its position on the screen.</p>
<p>It supports “tolerance” for modified/morphed/changed bitmaps such as in runescape.<br>
[/b]</p>
<pre><code class="lang-auto">Old Search Outputs for a Dual Core 1.0 gig RAM pc
Image Thread -
Performed findImage() for 1280x1024 pixel screen, searching for "start.png" a 19x19 pixel image in 231ms
Performed findImage() for 1280x1024 pixel screen, searching for "paint.png" a 21x43 pixel image in 101ms
Performed findImage() for 1280x1024 pixel screen, searching for "internet.png" a 16x14 pixel image in 334ms
Performed findImage() for 1280x1024 pixel screen, searching for "go.png" a 85x87 pixel image in 523ms
Performed findImage() for 1280x1024 pixel screen, searching for "run.png" a 3x7 pixel image in 112ms</code></pre>
<pre><code class="lang-auto">import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.File;

/**
 * Created with IntelliJ IDEA.
 * User: Vaughan D
 * Date: Jan 30, 2008
 * Time: 5:29:58 PM
 * To change this template use File | Settings | File Templates.
 */
public class findImage {
    public static boolean found = false;

    public static boolean findImage(String path, Dimension start, Dimension end, int tolerance, boolean move) {
        try {
            Robot r = new Robot();
            int checkSum = 0;
            BufferedImage searchImg = null;
            try {
                searchImg = ImageIO.read(new File(path));
            } catch (Exception ex) {
                System.out.println("Couldn't load the image we are searching for.");
            }
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            BufferedImage canvasImg = r.createScreenCapture(new Rectangle(d.width, d.height));
            Color firstPixel = new Color(searchImg.getRGB(0, 0));
            for (int y = start.height; y &lt; end.height; y++) {
                for (int x = start.width; x &lt; end.width; x++) {
                    Color curPixel = new Color(canvasImg.getRGB(x, y));
                    if (Math.abs(firstPixel.getRed() - curPixel.getRed()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getGreen() - curPixel.getGreen()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getBlue() - curPixel.getBlue()) &lt;= tolerance) {
                        for (int px = 1; px &lt; searchImg.getWidth(); px++) {
                            for (int py = 1; py &lt; searchImg.getHeight(); py++) {
                                Color lapsePixel = new Color(searchImg.getRGB(px, py));
                                if (px + x &gt;= end.width &amp;&amp; py + y &gt;= end.height) {
                                    return false;
                                }
                                Color canvasPixel = new Color(canvasImg.getRGB(x + px, y + py));
                                if (Math.abs(lapsePixel.getRed() - canvasPixel.getRed()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getGreen() - canvasPixel.getGreen()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getBlue() - canvasPixel.getBlue()) &lt;= tolerance + 10) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else if (lapsePixel.getRed() == 0 &amp;&amp; lapsePixel.getGreen() == 240 &amp;&amp; lapsePixel.getBlue() == 240) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else {
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
        }
        return found;
    }

    public static void main(String[] args) {
        System.out.println(findImage("icon.png", new Dimension(0, 0), new Dimension(Toolkit.getDefaultToolkit().getScreenSize()), 5, true));
    }
}</code></pre>
<p>Again, I realize that code is ugly, principally why I am no longer using it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/needlehaystack-findimage-method/177272/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/needlehaystack-findimage-method/177272/1</link>
        <pubDate>Thu, 31 Jan 2008 06:26:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-177272-1</guid>
        <source url="https://forum.moparisthebest.com/t/needlehaystack-findimage-method/177272.rss">NeedleHaystack FindImage Method</source>
      </item>
  </channel>
</rss>
