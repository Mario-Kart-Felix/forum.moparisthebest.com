<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI]Stop moving when ranging</title>
    <link>https://forum.moparisthebest.com/t/pi-stop-moving-when-ranging/438294</link>
    <description>After adding a system for clipping, I decided I should fix the problem to where when you Mage or Range you stop moving when you are attacking the NPC, so it doesn&#39;t run directly towards the NPC or player like melee. What currently happens is you have to use a range weapons special (Dbow or Magic Bow) before it actually starts working. This then enables the Magic to start working properly. Can someone please skim through my method for attackPlayers(NPCs too) and tell me if there is something wrong with it that would cause it to require you to cast a special first for it to actually stop the movement?

Method:
[code=java]
public void attackPlayer(int i) {
		
		if (PlayerHandler.players[i] != null) {

			if (PlayerHandler.players[i].isDead) {
				resetPlayerAttack();
				return;
			}

			if (c.respawnTimer &gt; 0
					|| PlayerHandler.players[i].respawnTimer &gt; 0) {
				resetPlayerAttack();
				return;
			}
			
			if (c.usingSpecial &amp;&amp; !c.usingMagic) {
				if (checkSpecAmount(c.playerEquipment[c.playerWeapon])) {
					c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					activateSpecial(c.playerEquipment[c.playerWeapon], i);
					return;
				} else {
					c.sendMessage(&quot;You don&#39;t have the required special energy to use this attack.&quot;);
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					c.npcIndex = 0;
					return;
				}
			}

			/*
			 * if (c.teleTimer &gt; 0 || Server.playerHandler.players[i].teleTimer
			 * &gt; 0) { resetPlayerAttack(); return; }
			 */

			if (!c.getCombat().checkReqs()) {
				return;
			}

			if (c.getPA().getWearingAmount() &lt; 4 &amp;&amp; c.duelStatus &lt; 1) {
				c.sendMessage(&quot;You must be wearing at least 4 items to attack someone.&quot;);
				resetPlayerAttack();
				return;
			}
			boolean sameSpot = c.absX == PlayerHandler.players[i].getX()
					&amp;&amp; c.absY == PlayerHandler.players[i].getY();
			if (!c.goodDistance(PlayerHandler.players[i].getX(),
					PlayerHandler.players[i].getY(), c.getX(), c.getY(),
					25)
					&amp;&amp; !sameSpot) {
				resetPlayerAttack();
				return;
			}

			if (PlayerHandler.players[i].respawnTimer &gt; 0) {
				PlayerHandler.players[i].playerIndex = 0;
				resetPlayerAttack();
				return;
			}

			if (PlayerHandler.players[i].heightLevel != c.heightLevel) {
				resetPlayerAttack();
				return;
			}
			// c.sendMessage(&quot;Made it here0.&quot;);
			c.followId = i;
			c.followId2 = 0;
			if (c.attackTimer &lt;= 0) {
				c.usingBow = false;
				c.specEffect = 0;
				c.usingRangeWeapon = false;
				c.rangeItemUsed = 0;
				boolean usingBow = false;
				boolean usingArrows = false;
				boolean usingOtherRangeWeapons = false;
				boolean usingCross = c.playerEquipment[c.playerWeapon] == 9185;
				c.projectileStage = 0;

				if (c.absX == PlayerHandler.players[i].absX
						&amp;&amp; c.absY == PlayerHandler.players[i].absY) {
					if (c.freezeTimer &gt; 0) {
						resetPlayerAttack();
						return;
					}
					c.followId = i;
					c.attackTimer = 0;
					return;
				}

				/*
				 * if ((c.inPirateHouse() &amp;&amp;
				 * !Server.playerHandler.players[i].inPirateHouse()) ||
				 * (Server.playerHandler.players[i].inPirateHouse() &amp;&amp;
				 * !c.inPirateHouse())) { resetPlayerAttack(); return; }
				 */
				// c.sendMessage(&quot;Made it here1.&quot;);
				if (!c.usingMagic) {
					for (int bowId : c.BOWS) {
						if (c.playerEquipment[c.playerWeapon] == bowId) {
							usingBow = true;
							for (int arrowId : c.ARROWS) {
								if (c.playerEquipment[c.playerArrows] == arrowId) {
									usingArrows = true;
								}
							}
						}
					}

					for (int otherRangeId : c.OTHER_RANGE_WEAPONS) {
						if (c.playerEquipment[c.playerWeapon] == otherRangeId) {
							usingOtherRangeWeapons = true;
						}
					}
				}
				if (c.autocasting) {
					c.spellId = c.autocastId;
					c.usingMagic = true;
				}
				// c.sendMessage(&quot;Made it here2.&quot;);
				if (c.spellId &gt; 0) {
					c.usingMagic = true;
				}
				c.attackTimer = getAttackDelay(c.getItems()
						.getItemName(c.playerEquipment[c.playerWeapon])
						.toLowerCase());

				if (c.duelRule[9]) {
					boolean canUseWeapon = false;
					for (int funWeapon : Config.FUN_WEAPONS) {
						if (c.playerEquipment[c.playerWeapon] == funWeapon) {
							canUseWeapon = true;
						}
					}
					if (!canUseWeapon) {
						c.sendMessage(&quot;You can only use fun weapons in this duel!&quot;);
						resetPlayerAttack();
						return;
					}
				}
				// c.sendMessage(&quot;Made it here3.&quot;);
				if (c.duelRule[2] &amp;&amp; (usingBow || usingOtherRangeWeapons)) {
					c.sendMessage(&quot;Range has been disabled in this duel!&quot;);
					return;
				}
				if (c.duelRule[3]
						&amp;&amp; (!usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic)) {
					c.sendMessage(&quot;Melee has been disabled in this duel!&quot;);
					return;
				}

				if (c.duelRule[4] &amp;&amp; c.usingMagic) {
					c.sendMessage(&quot;Magic has been disabled in this duel!&quot;);
					resetPlayerAttack();
					return;
				}

				if ((!c.goodDistance(c.getX(), c.getY(),
						PlayerHandler.players[i].getX(),
						PlayerHandler.players[i].getY(), 4) &amp;&amp; (usingOtherRangeWeapons
						&amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(), 2) &amp;&amp; (!usingOtherRangeWeapons
								&amp;&amp; usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(),
								getRequiredDistance()) &amp;&amp; (!usingOtherRangeWeapons
								&amp;&amp; !usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(), 10) &amp;&amp; (usingBow || c.usingMagic))) {
					// c.sendMessage(&quot;Setting attack timer to 1&quot;);
					c.attackTimer = 1;
					if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons
							&amp;&amp; c.freezeTimer &gt; 0)
						resetPlayerAttack();
					return;
				}

				if (!usingCross
						&amp;&amp; !usingArrows
						&amp;&amp; usingBow
						&amp;&amp; (c.playerEquipment[c.playerWeapon] &lt; 4212 || c.playerEquipment[c.playerWeapon] &gt; 4223)
						&amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You have run out of arrows!&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if (correctBowAndArrows() &lt; c.playerEquipment[c.playerArrows]
						&amp;&amp; Config.CORRECT_ARROWS &amp;&amp; usingBow
						&amp;&amp; !usingCrystalBow()
						&amp;&amp; c.playerEquipment[c.playerWeapon] != 9185
						&amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You can&#39;t use &quot;
							+ c.getItems()
									.getItemName(
											c.playerEquipment[c.playerArrows])
									.toLowerCase()
							+ &quot;s with a &quot;
							+ c.getItems()
									.getItemName(
											c.playerEquipment[c.playerWeapon])
									.toLowerCase() + &quot;.&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if (c.playerEquipment[c.playerWeapon] == 9185 &amp;&amp; !properBolts()
						&amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You must use bolts with a crossbow.&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;
				}

				if (usingBow || c.usingMagic || usingOtherRangeWeapons
						|| usingHally()) {
					c.stopMovement();
				}

				if (!checkMagicReqs(c.spellId)) {
					c.stopMovement();
					resetPlayerAttack();
					return;
				}

				c.faceUpdate(i + 32768);

				if (c.duelStatus != 5) {
					if (!c.attackedPlayers.contains(c.playerIndex)
							&amp;&amp; !PlayerHandler.players[c.playerIndex].attackedPlayers
									.contains(c.playerId)) {
						c.attackedPlayers.add(c.playerIndex);
						c.isSkulled = true;
						c.skullTimer = Config.SKULL_TIMER;
						c.headIconPk = 0;
						c.getPA().requestUpdates();
					}
				}
				c.specAccuracy = 1.0;
				c.specDamage = 1.0;
				c.delayedDamage = c.delayedDamage2 = 0;
				if (c.usingSpecial &amp;&amp; !c.usingMagic) {
					if (c.duelRule[10] &amp;&amp; c.duelStatus == 5) {
						c.sendMessage(&quot;Special attacks have been disabled during this duel!&quot;);
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						resetPlayerAttack();
						return;
					}
					if (checkSpecAmount(c.playerEquipment[c.playerWeapon])) {
						c.lastArrowUsed = c.playerEquipment[c.playerArrows];
						activateSpecial(c.playerEquipment[c.playerWeapon], i);
						c.followId = c.playerIndex;
						return;
					} else {
						c.sendMessage(&quot;You don&#39;t have the required special energy to use this attack.&quot;);
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						c.playerIndex = 0;
						return;
					}
				}

				if (!c.usingMagic) {
					c.startAnimation(getWepAnim(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase()));
					c.mageFollow = false;
				} else {
					c.startAnimation(c.MAGIC_SPELLS[c.spellId][2]);
					c.mageFollow = true;
					c.followId = c.playerIndex;
				}
				PlayerHandler.players[i].underAttackBy = c.playerId;
				PlayerHandler.players[i].logoutDelay = System
						.currentTimeMillis();
				PlayerHandler.players[i].singleCombatDelay = System
						.currentTimeMillis();
				PlayerHandler.players[i].killerId = c.playerId;
				c.lastArrowUsed = 0;
				c.rangeItemUsed = 0;
				if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons) { // melee
																				// hit
																				// delay
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.delayedDamage = Misc.random(calculateMeleeMaxHit());
					c.projectileStage = 0;
					c.oldPlayerIndex = i;
				}

				if (usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic
						|| usingCross) { // range hit delay
					if (c.playerEquipment[c.playerWeapon] &gt;= 4212
							&amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223) {
						c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
						c.crystalBowArrowCount++;
					} else {
						c.rangeItemUsed = c.playerEquipment[c.playerArrows];
						c.getItems().deleteArrow();
					}
					if (c.fightMode == 2)
						c.attackTimer--;
					if (usingCross)
						c.usingBow = true;
					c.usingBow = true;
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					c.gfx100(getRangeStartGFX());
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}

				if (usingOtherRangeWeapons) { // knives, darts, etc hit delay
					c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
					c.getItems().deleteEquipment();
					c.usingRangeWeapon = true;
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.gfx100(getRangeStartGFX());
					if (c.fightMode == 2)
						c.attackTimer--;
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}

				if (c.usingMagic) { // magic hit delay
					int pX = c.getX();
					int pY = c.getY();
					int nX = PlayerHandler.players[i].getX();
					int nY = PlayerHandler.players[i].getY();
					int offX = (pY - nY) * -1;
					int offY = (pX - nX) * -1;
					c.castingMagic = true;
					c.projectileStage = 2;
					if (c.MAGIC_SPELLS[c.spellId][3] &gt; 0) {
						if (getStartGfxHeight() == 100) {
							c.gfx100(c.MAGIC_SPELLS[c.spellId][3]);
						} else {
							c.gfx0(c.MAGIC_SPELLS[c.spellId][3]);
						}
					}
					if (c.MAGIC_SPELLS[c.spellId][4] &gt; 0) {
						c.getPA().createPlayersProjectile(pX, pY, offX, offY,
								50, 78, c.MAGIC_SPELLS[c.spellId][4],
								getStartHeight(), getEndHeight(), -i - 1,
								getStartDelay());
					}
					if (c.autocastId &gt; 0) {
						c.followId = c.playerIndex;
						c.followDistance = 5;
					}
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.oldPlayerIndex = i;
					c.oldSpellId = c.spellId;
					c.spellId = 0;
					Client o = (Client) PlayerHandler.players[i];
					if (c.MAGIC_SPELLS[c.oldSpellId][0] == 12891 &amp;&amp; o.isMoving) {
						// c.sendMessage(&quot;Barrage projectile..&quot;);
						c.getPA().createPlayersProjectile(pX, pY, offX, offY,
								50, 85, 368, 25, 25, -i - 1, getStartDelay());
					}
					if (Misc.random(o.getCombat().mageDef()) &gt; Misc
							.random(mageAtk())) {
						c.magicFailed = true;
					} else {
						c.magicFailed = false;
					}
					int freezeDelay = getFreezeTime();// freeze time
					if (freezeDelay &gt; 0
							&amp;&amp; PlayerHandler.players[i].freezeTimer &lt;= -3
							&amp;&amp; !c.magicFailed) {
						PlayerHandler.players[i].freezeTimer = freezeDelay;
						o.resetWalkingQueue();
						o.sendMessage(&quot;You have been frozen.&quot;);
						o.frozenBy = c.playerId;
					}
					if (!c.autocasting &amp;&amp; c.spellId &lt;= 0)
						c.playerIndex = 0;
				}

				if (usingBow &amp;&amp; Config.CRYSTAL_BOW_DEGRADES) { // crystal bow
																// degrading
					if (c.playerEquipment[c.playerWeapon] == 4212) { // new
																		// crystal
																		// bow
																		// becomes
																		// full
																		// bow
																		// on
																		// the
																		// first
																		// shot
						c.getItems().wearItem(4214, 1, 3);
					}

					if (c.crystalBowArrowCount &gt;= 250) {
						switch (c.playerEquipment[c.playerWeapon]) {

						case 4223: // 1/10 bow
							c.getItems().wearItem(-1, 1, 3);
							c.sendMessage(&quot;Your crystal bow has fully degraded.&quot;);
							if (!c.getItems().addItem(4207, 1)) {
								Server.itemHandler.createGroundItem(c, 4207,
										c.getX(), c.getY(), 1, c.getId());
							}
							c.crystalBowArrowCount = 0;
							break;

						default:
							c.getItems().wearItem(
									++c.playerEquipment[c.playerWeapon], 1, 3);
							c.sendMessage(&quot;Your crystal bow degrades.&quot;);
							c.crystalBowArrowCount = 0;
							break;
						}
					}
				}
			}
		}
	}
[/code]</description>
    
    <lastBuildDate>Tue, 03 Apr 2012 01:57:06 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-stop-moving-when-ranging/438294.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI]Stop moving when ranging</title>
        <dc:creator><![CDATA[@Tutorial Tutorial]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tutorial">@Tutorial</a> wrote:</p>
          <blockquote>
              <p>After adding a system for clipping, I decided I should fix the problem to where when you Mage or Range you stop moving when you are attacking the NPC, so it doesn’t run directly towards the NPC or player like melee. What currently happens is you have to use a range weapons special (Dbow or Magic Bow) before it actually starts working. This then enables the Magic to start working properly. Can someone please skim through my method for attackPlayers(NPCs too) and tell me if there is something wrong with it that would cause it to require you to cast a special first for it to actually stop the movement?</p>
<p>Method:</p>
<pre><code class="lang-auto">public void attackPlayer(int i) {
		
		if (PlayerHandler.players[i] != null) {

			if (PlayerHandler.players[i].isDead) {
				resetPlayerAttack();
				return;
			}

			if (c.respawnTimer &gt; 0
					|| PlayerHandler.players[i].respawnTimer &gt; 0) {
				resetPlayerAttack();
				return;
			}
			
			if (c.usingSpecial &amp;&amp; !c.usingMagic) {
				if (checkSpecAmount(c.playerEquipment[c.playerWeapon])) {
					c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					activateSpecial(c.playerEquipment[c.playerWeapon], i);
					return;
				} else {
					c.sendMessage("You don't have the required special energy to use this attack.");
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					c.npcIndex = 0;
					return;
				}
			}

			/*
			 * if (c.teleTimer &gt; 0 || Server.playerHandler.players[i].teleTimer
			 * &gt; 0) { resetPlayerAttack(); return; }
			 */

			if (!c.getCombat().checkReqs()) {
				return;
			}

			if (c.getPA().getWearingAmount() &lt; 4 &amp;&amp; c.duelStatus &lt; 1) {
				c.sendMessage("You must be wearing at least 4 items to attack someone.");
				resetPlayerAttack();
				return;
			}
			boolean sameSpot = c.absX == PlayerHandler.players[i].getX()
					&amp;&amp; c.absY == PlayerHandler.players[i].getY();
			if (!c.goodDistance(PlayerHandler.players[i].getX(),
					PlayerHandler.players[i].getY(), c.getX(), c.getY(),
					25)
					&amp;&amp; !sameSpot) {
				resetPlayerAttack();
				return;
			}

			if (PlayerHandler.players[i].respawnTimer &gt; 0) {
				PlayerHandler.players[i].playerIndex = 0;
				resetPlayerAttack();
				return;
			}

			if (PlayerHandler.players[i].heightLevel != c.heightLevel) {
				resetPlayerAttack();
				return;
			}
			// c.sendMessage("Made it here0.");
			c.followId = i;
			c.followId2 = 0;
			if (c.attackTimer &lt;= 0) {
				c.usingBow = false;
				c.specEffect = 0;
				c.usingRangeWeapon = false;
				c.rangeItemUsed = 0;
				boolean usingBow = false;
				boolean usingArrows = false;
				boolean usingOtherRangeWeapons = false;
				boolean usingCross = c.playerEquipment[c.playerWeapon] == 9185;
				c.projectileStage = 0;

				if (c.absX == PlayerHandler.players[i].absX
						&amp;&amp; c.absY == PlayerHandler.players[i].absY) {
					if (c.freezeTimer &gt; 0) {
						resetPlayerAttack();
						return;
					}
					c.followId = i;
					c.attackTimer = 0;
					return;
				}

				/*
				 * if ((c.inPirateHouse() &amp;&amp;
				 * !Server.playerHandler.players[i].inPirateHouse()) ||
				 * (Server.playerHandler.players[i].inPirateHouse() &amp;&amp;
				 * !c.inPirateHouse())) { resetPlayerAttack(); return; }
				 */
				// c.sendMessage("Made it here1.");
				if (!c.usingMagic) {
					for (int bowId : c.BOWS) {
						if (c.playerEquipment[c.playerWeapon] == bowId) {
							usingBow = true;
							for (int arrowId : c.ARROWS) {
								if (c.playerEquipment[c.playerArrows] == arrowId) {
									usingArrows = true;
								}
							}
						}
					}

					for (int otherRangeId : c.OTHER_RANGE_WEAPONS) {
						if (c.playerEquipment[c.playerWeapon] == otherRangeId) {
							usingOtherRangeWeapons = true;
						}
					}
				}
				if (c.autocasting) {
					c.spellId = c.autocastId;
					c.usingMagic = true;
				}
				// c.sendMessage("Made it here2.");
				if (c.spellId &gt; 0) {
					c.usingMagic = true;
				}
				c.attackTimer = getAttackDelay(c.getItems()
						.getItemName(c.playerEquipment[c.playerWeapon])
						.toLowerCase());

				if (c.duelRule[9]) {
					boolean canUseWeapon = false;
					for (int funWeapon : Config.FUN_WEAPONS) {
						if (c.playerEquipment[c.playerWeapon] == funWeapon) {
							canUseWeapon = true;
						}
					}
					if (!canUseWeapon) {
						c.sendMessage("You can only use fun weapons in this duel!");
						resetPlayerAttack();
						return;
					}
				}
				// c.sendMessage("Made it here3.");
				if (c.duelRule[2] &amp;&amp; (usingBow || usingOtherRangeWeapons)) {
					c.sendMessage("Range has been disabled in this duel!");
					return;
				}
				if (c.duelRule[3]
						&amp;&amp; (!usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic)) {
					c.sendMessage("Melee has been disabled in this duel!");
					return;
				}

				if (c.duelRule[4] &amp;&amp; c.usingMagic) {
					c.sendMessage("Magic has been disabled in this duel!");
					resetPlayerAttack();
					return;
				}

				if ((!c.goodDistance(c.getX(), c.getY(),
						PlayerHandler.players[i].getX(),
						PlayerHandler.players[i].getY(), 4) &amp;&amp; (usingOtherRangeWeapons
						&amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(), 2) &amp;&amp; (!usingOtherRangeWeapons
								&amp;&amp; usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(),
								getRequiredDistance()) &amp;&amp; (!usingOtherRangeWeapons
								&amp;&amp; !usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
						|| (!c.goodDistance(c.getX(), c.getY(),
								PlayerHandler.players[i].getX(),
								PlayerHandler.players[i].getY(), 10) &amp;&amp; (usingBow || c.usingMagic))) {
					// c.sendMessage("Setting attack timer to 1");
					c.attackTimer = 1;
					if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons
							&amp;&amp; c.freezeTimer &gt; 0)
						resetPlayerAttack();
					return;
				}

				if (!usingCross
						&amp;&amp; !usingArrows
						&amp;&amp; usingBow
						&amp;&amp; (c.playerEquipment[c.playerWeapon] &lt; 4212 || c.playerEquipment[c.playerWeapon] &gt; 4223)
						&amp;&amp; !c.usingMagic) {
					c.sendMessage("You have run out of arrows!");
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if (correctBowAndArrows() &lt; c.playerEquipment[c.playerArrows]
						&amp;&amp; Config.CORRECT_ARROWS &amp;&amp; usingBow
						&amp;&amp; !usingCrystalBow()
						&amp;&amp; c.playerEquipment[c.playerWeapon] != 9185
						&amp;&amp; !c.usingMagic) {
					c.sendMessage("You can't use "
							+ c.getItems()
									.getItemName(
											c.playerEquipment[c.playerArrows])
									.toLowerCase()
							+ "s with a "
							+ c.getItems()
									.getItemName(
											c.playerEquipment[c.playerWeapon])
									.toLowerCase() + ".");
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if (c.playerEquipment[c.playerWeapon] == 9185 &amp;&amp; !properBolts()
						&amp;&amp; !c.usingMagic) {
					c.sendMessage("You must use bolts with a crossbow.");
					c.stopMovement();
					resetPlayerAttack();
					return;
				}

				if (usingBow || c.usingMagic || usingOtherRangeWeapons
						|| usingHally()) {
					c.stopMovement();
				}

				if (!checkMagicReqs(c.spellId)) {
					c.stopMovement();
					resetPlayerAttack();
					return;
				}

				c.faceUpdate(i + 32768);

				if (c.duelStatus != 5) {
					if (!c.attackedPlayers.contains(c.playerIndex)
							&amp;&amp; !PlayerHandler.players[c.playerIndex].attackedPlayers
									.contains(c.playerId)) {
						c.attackedPlayers.add(c.playerIndex);
						c.isSkulled = true;
						c.skullTimer = Config.SKULL_TIMER;
						c.headIconPk = 0;
						c.getPA().requestUpdates();
					}
				}
				c.specAccuracy = 1.0;
				c.specDamage = 1.0;
				c.delayedDamage = c.delayedDamage2 = 0;
				if (c.usingSpecial &amp;&amp; !c.usingMagic) {
					if (c.duelRule[10] &amp;&amp; c.duelStatus == 5) {
						c.sendMessage("Special attacks have been disabled during this duel!");
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						resetPlayerAttack();
						return;
					}
					if (checkSpecAmount(c.playerEquipment[c.playerWeapon])) {
						c.lastArrowUsed = c.playerEquipment[c.playerArrows];
						activateSpecial(c.playerEquipment[c.playerWeapon], i);
						c.followId = c.playerIndex;
						return;
					} else {
						c.sendMessage("You don't have the required special energy to use this attack.");
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						c.playerIndex = 0;
						return;
					}
				}

				if (!c.usingMagic) {
					c.startAnimation(getWepAnim(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase()));
					c.mageFollow = false;
				} else {
					c.startAnimation(c.MAGIC_SPELLS[c.spellId][2]);
					c.mageFollow = true;
					c.followId = c.playerIndex;
				}
				PlayerHandler.players[i].underAttackBy = c.playerId;
				PlayerHandler.players[i].logoutDelay = System
						.currentTimeMillis();
				PlayerHandler.players[i].singleCombatDelay = System
						.currentTimeMillis();
				PlayerHandler.players[i].killerId = c.playerId;
				c.lastArrowUsed = 0;
				c.rangeItemUsed = 0;
				if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons) { // melee
																				// hit
																				// delay
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.delayedDamage = Misc.random(calculateMeleeMaxHit());
					c.projectileStage = 0;
					c.oldPlayerIndex = i;
				}

				if (usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic
						|| usingCross) { // range hit delay
					if (c.playerEquipment[c.playerWeapon] &gt;= 4212
							&amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223) {
						c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
						c.crystalBowArrowCount++;
					} else {
						c.rangeItemUsed = c.playerEquipment[c.playerArrows];
						c.getItems().deleteArrow();
					}
					if (c.fightMode == 2)
						c.attackTimer--;
					if (usingCross)
						c.usingBow = true;
					c.usingBow = true;
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					c.gfx100(getRangeStartGFX());
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}

				if (usingOtherRangeWeapons) { // knives, darts, etc hit delay
					c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
					c.getItems().deleteEquipment();
					c.usingRangeWeapon = true;
					c.followId = PlayerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.gfx100(getRangeStartGFX());
					if (c.fightMode == 2)
						c.attackTimer--;
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}

				if (c.usingMagic) { // magic hit delay
					int pX = c.getX();
					int pY = c.getY();
					int nX = PlayerHandler.players[i].getX();
					int nY = PlayerHandler.players[i].getY();
					int offX = (pY - nY) * -1;
					int offY = (pX - nX) * -1;
					c.castingMagic = true;
					c.projectileStage = 2;
					if (c.MAGIC_SPELLS[c.spellId][3] &gt; 0) {
						if (getStartGfxHeight() == 100) {
							c.gfx100(c.MAGIC_SPELLS[c.spellId][3]);
						} else {
							c.gfx0(c.MAGIC_SPELLS[c.spellId][3]);
						}
					}
					if (c.MAGIC_SPELLS[c.spellId][4] &gt; 0) {
						c.getPA().createPlayersProjectile(pX, pY, offX, offY,
								50, 78, c.MAGIC_SPELLS[c.spellId][4],
								getStartHeight(), getEndHeight(), -i - 1,
								getStartDelay());
					}
					if (c.autocastId &gt; 0) {
						c.followId = c.playerIndex;
						c.followDistance = 5;
					}
					c.hitDelay = getHitDelay(c.getItems()
							.getItemName(c.playerEquipment[c.playerWeapon])
							.toLowerCase());
					c.oldPlayerIndex = i;
					c.oldSpellId = c.spellId;
					c.spellId = 0;
					Client o = (Client) PlayerHandler.players[i];
					if (c.MAGIC_SPELLS[c.oldSpellId][0] == 12891 &amp;&amp; o.isMoving) {
						// c.sendMessage("Barrage projectile..");
						c.getPA().createPlayersProjectile(pX, pY, offX, offY,
								50, 85, 368, 25, 25, -i - 1, getStartDelay());
					}
					if (Misc.random(o.getCombat().mageDef()) &gt; Misc
							.random(mageAtk())) {
						c.magicFailed = true;
					} else {
						c.magicFailed = false;
					}
					int freezeDelay = getFreezeTime();// freeze time
					if (freezeDelay &gt; 0
							&amp;&amp; PlayerHandler.players[i].freezeTimer &lt;= -3
							&amp;&amp; !c.magicFailed) {
						PlayerHandler.players[i].freezeTimer = freezeDelay;
						o.resetWalkingQueue();
						o.sendMessage("You have been frozen.");
						o.frozenBy = c.playerId;
					}
					if (!c.autocasting &amp;&amp; c.spellId &lt;= 0)
						c.playerIndex = 0;
				}

				if (usingBow &amp;&amp; Config.CRYSTAL_BOW_DEGRADES) { // crystal bow
																// degrading
					if (c.playerEquipment[c.playerWeapon] == 4212) { // new
																		// crystal
																		// bow
																		// becomes
																		// full
																		// bow
																		// on
																		// the
																		// first
																		// shot
						c.getItems().wearItem(4214, 1, 3);
					}

					if (c.crystalBowArrowCount &gt;= 250) {
						switch (c.playerEquipment[c.playerWeapon]) {

						case 4223: // 1/10 bow
							c.getItems().wearItem(-1, 1, 3);
							c.sendMessage("Your crystal bow has fully degraded.");
							if (!c.getItems().addItem(4207, 1)) {
								Server.itemHandler.createGroundItem(c, 4207,
										c.getX(), c.getY(), 1, c.getId());
							}
							c.crystalBowArrowCount = 0;
							break;

						default:
							c.getItems().wearItem(
									++c.playerEquipment[c.playerWeapon], 1, 3);
							c.sendMessage("Your crystal bow degrades.");
							c.crystalBowArrowCount = 0;
							break;
						}
					}
				}
			}
		}
	}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-stop-moving-when-ranging/438294/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-stop-moving-when-ranging/438294/1</link>
        <pubDate>Tue, 03 Apr 2012 01:57:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-438294-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-stop-moving-when-ranging/438294.rss">[PI]Stop moving when ranging</source>
      </item>
  </channel>
</rss>
