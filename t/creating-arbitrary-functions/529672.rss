<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Creating Arbitrary Functions</title>
    <link>https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672</link>
    <description>Ok, how would I describe an arbitrary function? Or how could I make it so I could create any arbitrary function without simply typing it in. This is what I have so far....

[code=java]
    /**
     * Takes the limit as x approaches a
     * @param x The dependent variable
     * @param a The value x is approaching
     * @param function The function you are taking the limit of
     * @return Returns the value x is approaching as it approaches a.
     */
    public double limit(double x, int a, Function function) {
        return a;
    }

/**
 *
 * @author AJ
 */
public class Function {

    double x;

    private enum FunctionType {

        POLYNOMIAL(),
        RATIONAL(),
        TRIGONOMETRIC(),
        EXPONENTIAL(),
        LOGARITHMIC();
    }
}[/code]

It&#39;s been a while since I&#39;ve even opened my IDE, but how would I go about doing this...? I&#39;m thinking of having a parameter in polynomial to express the degree of the function and then having a variable argument for the coefficients based on how big the degree is. Then a rational function is just a polynomial divided by a polynomial. But I&#39;m not sure how I can do trigonometric functions arbitrarily... Besides actually just writing them like cos(x)sin(x). Thanks for any help.</description>
    
    <lastBuildDate>Tue, 10 Sep 2013 10:54:53 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Creating Arbitrary Functions</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="529672">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/whackatre/40/7608_1.png" class="avatar"> Whackatre:</div>
<blockquote>
<p>You mean first class functions and lambdas? I’m not sure whether Java has this capability (maybe version 8 does? I saw quite a bit of fp stuff when I glanced over it a few months ago; take a look at it if that’s what you were referring to.)</p>
</blockquote>
</aside>
<p>No, I’m talking about constructing equations such as x^2 + y^2 = z without explicitly typing z = Math.pow(x, 2) + Math.pow(y, 2); Except I want to do this for all functions and I want to be able to evaluate them with different methods (as in taking the surface integral of that aforementioned function). I’m guessing what I am going to be doing is have an input that will parse it based on certain criteria into different types of functions. I guess I could just check for all trig functions like sinh and everything by text comparison…</p>
<p>The next problem I am going to have is how am I going to create an algorithm to solve every limit? I know from first hand that if any function has an (x + a) in the bottom and it is approaching -a, then you simply multiply it by the conjugate. There’s no real set way of solving a limit besides that example that I can think of… Here’s what I have so far now. Is there any better way to construct the functions rather than creating an individual constructor for each type of function?</p>
<p>[code=Java]<br>
/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> AJ<br>
*/<br>
public class MathUtilities {</p>
<p>/**</p>
<ul>
<li>Takes the limit as x approaches a</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> x The dependent variable</li>
<li>
<a class="mention" href="/u/param">@param</a> a The value x is approaching</li>
<li>
<a class="mention" href="/u/param">@param</a> function The function you are taking the limit of</li>
<li>
<a class="mention" href="/u/return">@return</a> Returns the value x is approaching as it approaches a.<br>
*/<br>
public double limit(double x, int a, Function function) {<br>
return a;<br>
}</li>
</ul>
<p>/**<br>
*</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> numbers The numbers involved in the sum</li>
<li>
<a class="mention" href="/u/return">@return</a> The sum of the numbers<br>
*/<br>
public double sum(double … numbers) {<br>
double total = 0;<br>
for (int i = 0; i &lt; numbers.length; i++) {<br>
total += numbers[i];<br>
}<br>
return total;<br>
}</li>
</ul>
<p>/**<br>
*</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> function The function being evaluated</li>
<li>
<a class="mention" href="/u/param">@param</a> x The value at which the function is being evaluated</li>
<li>
<a class="mention" href="/u/return">@return</a> The function of x<br>
*/<br>
public double evaluateFunction(Function function, double x) {<br>
double[] coefficients = function.getCoefficients();<br>
double[] monomials = null;<br>
for(int i = 0; i &lt; coefficients.length; i++) {<br>
monomials[i] = coefficients[i]*Math.pow(x, function.getDegree() - i);<br>
}<br>
double sum = sum(monomials);<br>
return sum;<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>public class Function {</p>
<pre><code>private double x;
private int degree;
private double[] coefficients;
private FunctionType type;

private enum FunctionType {

    POLYNOMIAL(),
    RATIONAL(),
    TRIGONOMETRIC(),
    EXPONENTIAL(),
    LOGARITHMIC();
}

public double getX() {
    return x;
}

public void setX(double x) {
    this.x = x;
}

public FunctionType getType() {
    return type;
}

public void setType(FunctionType type) {
    this.type = type;
}

public int getDegree() {
    return degree;
}

public void setDegree(int degree) {
    this.degree = degree;
}

public double[] getCoefficients() {
    return coefficients;
}

public void setCoefficients(double[] coefficients) {
    this.coefficients = coefficients;
}

/**
 *
 * @param degree The degree of the polynomial function.
 * @param coefficients The coefficients of the polynomial function.
 */
public Function(int degree, double... coefficients) {
    if (degree == coefficients.length) {
        this.degree = degree;
        this.type = FunctionType.POLYNOMIAL;
        this.coefficients = coefficients;
    }
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/4</link>
        <pubDate>Tue, 10 Sep 2013 10:54:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-529672-4</guid>
        <source url="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672.rss">Creating Arbitrary Functions</source>
      </item>
      <item>
        <title>Creating Arbitrary Functions</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Never done it before, don’t have any initial clue on how to do it, waiting on Taharok to shine knowledge on the situation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/3</link>
        <pubDate>Tue, 10 Sep 2013 08:35:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-529672-3</guid>
        <source url="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672.rss">Creating Arbitrary Functions</source>
      </item>
      <item>
        <title>Creating Arbitrary Functions</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>You mean first class functions and lambdas? I’m not sure whether Java has this capability (maybe version 8 does? I saw quite a bit of fp stuff when I glanced over it a few months ago; take a look at it if that’s what you were referring to.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/2</link>
        <pubDate>Tue, 10 Sep 2013 05:40:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-529672-2</guid>
        <source url="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672.rss">Creating Arbitrary Functions</source>
      </item>
      <item>
        <title>Creating Arbitrary Functions</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>Ok, how would I describe an arbitrary function? Or how could I make it so I could create any arbitrary function without simply typing it in. This is what I have so far…</p>
<p>[code=java]<br>
/**<br>
* Takes the limit as x approaches a<br>
* <a class="mention" href="/u/param">@param</a> x The dependent variable<br>
* <a class="mention" href="/u/param">@param</a> a The value x is approaching<br>
* <a class="mention" href="/u/param">@param</a> function The function you are taking the limit of<br>
* <a class="mention" href="/u/return">@return</a> Returns the value x is approaching as it approaches a.<br>
*/<br>
public double limit(double x, int a, Function function) {<br>
return a;<br>
}</p>
<p>/**<br>
*</p>
<ul>
<li>
<p><span class="mention">@author</span> AJ<br>
*/<br>
public class Function {</p>
<p>double x;</p>
<p>private enum FunctionType {</p>
<pre><code> POLYNOMIAL(),
 RATIONAL(),
 TRIGONOMETRIC(),
 EXPONENTIAL(),
 LOGARITHMIC();
</code></pre>
<p>}<br>
}[/code]</p>
</li>
</ul>
<p>It’s been a while since I’ve even opened my IDE, but how would I go about doing this…? I’m thinking of having a parameter in polynomial to express the degree of the function and then having a variable argument for the coefficients based on how big the degree is. Then a rational function is just a polynomial divided by a polynomial. But I’m not sure how I can do trigonometric functions arbitrarily… Besides actually just writing them like cos(x)sin(x). Thanks for any help.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672/1</link>
        <pubDate>Tue, 10 Sep 2013 05:26:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-529672-1</guid>
        <source url="https://forum.moparisthebest.com/t/creating-arbitrary-functions/529672.rss">Creating Arbitrary Functions</source>
      </item>
  </channel>
</rss>
