<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Learn the Basic&#39;s of Python</title>
    <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131</link>
    <description>Well here are the basic&#39;s of Python from www.poromenos.org/tutorials (Thanks for pointing this out Marluxia). Enjoy ;D. 

[size=14pt][b]Properties[/b][/size]
Python is [b]strongly[/b] typed (i.e. types are enforced), [b]dynamically, implicitly typed [/b] (i.e. you don&#39;t have to declare variables), [b]case sensitive[/b] (i.e. var and VAR are two different variables) and [b]object-oriented [/b] (i.e. everything is an object).

[size=14pt][b]Syntax[/b][/size]
Python has [b]no mandatory statement termination characters [/b] and [b]blocks are specified by indentation[/b]. Indent in to begin a block, indent out to end one. Statements that expect an indentation level end in a colon (:). Comments start with the pound (#) sign and are single-line. [b]Values are assigned [/b] with the equals sign (&quot;=&quot;), and [b]equality testing [/b] is done using two equals signs (&quot;==&quot;). You can increment/decrement values using the += and -= operators respectively. This works on many datatypes, strings included. You can also use multiple variables on one line. For example:

[code]&gt;&gt;&gt; myvar = 3
&gt;&gt;&gt; myvar += 2
&gt;&gt;&gt; myvar -= 1
&gt;&gt;&gt; mystring = &quot;Hello&quot;
&gt;&gt;&gt; mystring += &quot; world.&quot;
&gt;&gt;&gt; print mystring
Hello world.
# This swaps the variables in one line(!).
&gt;&gt;&gt; myvar, mystring = mystring, myvar[/code]

[size=14pt][b]Data types[/b][/size]
The data types available in python are [b]lists, tuples and dictionaries[/b]. Sets are available in the sets library. Lists are like one-dimensional arrays (but you can also have lists of other lists), dictionaries are associative arrays (a.k.a. hash tables) and tuples are immutable one-dimensional arrays (Python &quot;arrays&quot; can be of any type, so you can mix e.g. integers, strings, etc in lists/dictionaries/tuples). The first item in all array types is 0. Negative numbers count from the end towards the beginning, -1 is the last item. Variables can point to functions. The usage is as follows:

[code]&gt;&gt;&gt; sample = [1, [&quot;another&quot;, &quot;list&quot;], (&quot;a&quot;, &quot;tuple&quot;)]
&gt;&gt;&gt; mylist = [&quot;List item 1&quot;, 2, 3.14]
&gt;&gt;&gt; mylist[0] = &quot;List item 1 again&quot;
&gt;&gt;&gt; mylist[-1] = 3.14
&gt;&gt;&gt; mydict = {&quot;Key 1&quot;: &quot;Value 1&quot;, 2: 3, &quot;pi&quot;: 3.14}
&gt;&gt;&gt; mydict[&quot;pi&quot;] = 3.15
&gt;&gt;&gt; mytuple = (1, 2, 3)
&gt;&gt;&gt; myfunction = len
&gt;&gt;&gt; print myfunction(list)
3[/code] 
You can access [b]array ranges [/b] using a colon (:). Leaving the start index empty assumes the first item, leaving the end index assumes the last item. Negative indexes count from the last item backwards (thus -1 is the last item) like so:

[code]&gt;&gt;&gt; mylist = [&quot;List item 1&quot;, 2, 3.14]
&gt;&gt;&gt; print mylist[:]
[&#39;List item 1&#39;, 2, 3.1400000000000001]
&gt;&gt;&gt; print mylist[0:2]
[&#39;List item 1&#39;, 2]
&gt;&gt;&gt; print mylist[-3:-1]
[&#39;List item 1&#39;, 2]
&gt;&gt;&gt; print mylist[1:]
[2, 3.14][/code]

[size=14pt][b]Strings[/b][/size]
Its strings can use [b]either single or double quotation mark[/b]s, and you can have quotation marks of one kind inside a string that uses the other kind (i.e. &quot;He said &#39;hello&#39;.&quot; is valid). Multiline strings are enclosed in triple double (or single) quotes (&quot;&quot;&quot;). [b]Python supports Unicode [/b] out of the box, using the syntax u&quot;This is a unicode string&quot;. To [b]fill a string with values[/b], you use the % (modulo) operator and a tuple. Each %s gets replaced with an item from the tuple, left to right, and you can also use dictionary substitutions, like so:

[code]&gt;&gt;&gt;print &quot;Name: %s\nNumber: %s\nString: %s&quot; % (myclass.name, 3, 3 * &quot;-&quot;)
Name: elite azn
Number: 3
String: ---
 
strString = &quot;&quot;&quot;This is
a multiline
string.&quot;&quot;&quot;
 
# WARNING: Watch out for the trailing s in &quot;%(key)s&quot;.
&gt;&gt;&gt; print &quot;This %(verb)s a %(noun)s.&quot; % {&quot;noun&quot;: &quot;test&quot;, &quot;verb&quot;: &quot;is&quot;}
This is a test.[/code]

[size=14pt][b]Flow control statements[/b][/size]
Flow control statements are while, if, and for. There is no select; instead, use if. Use for to enumerate through members of a list. To obtain a list of numbers, use range(&lt;number&gt;). These statements&#39; syntax is thus:

[code]rangelist = range(10)
&gt;&gt;&gt; print rangelist
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
for number in rangelist:
    # Check if number is one of
    # the numbers in the tuple.
    if number in (3, 4, 7, 9):
        # &quot;Break&quot; terminates a for without
        # executing the &quot;else&quot; clause.
        break
    else:
        # &quot;Continue&quot; starts the next iteration
        # of the loop. It&#39;s rather useless here,
        # as it&#39;s the last statement of the loop.
        continue
else:
    # The &quot;else&quot; clause is optional and is
    # executed only if the loop didn&#39;t &quot;break&quot;.
    pass # Do nothing
 
if rangelist[1] == 2:
    print &quot;The second item (lists are 0-based) is 2&quot;
elif rangelist[1] == 3:
    print &quot;The second item (lists are 0-based) is 3&quot;
else:
    print &quot;Dunno&quot;
 
while rangelist[1] == 1:
pass[/code]    

[size=14pt][b]Functions[/b][/size]
Functions are [b]declared with the &quot;def&quot;[/b] keyword. [b]Optional arguments [/b] are set in the function declaration after the mandatory arguments by being assigned a default value. For [b]named arguments[/b], the name of the argument is assigned a value. Functions can return a tuple (and using tuple unpacking you can effectively return [b]multiple values[/b]). [b]Lambda functions [/b] are ad hoc functions that are comprised of a single statement. Parameters are passed [b]by reference[/b], but mutable types (tuples, lists, ints, strings, etc) [u]cannot be changed[/u]. For example:

[code]# arg2 and arg3 are optional, they have default values
# if one is not passed (100 and &quot;test&quot;, respectively).
def myfunction(arg1, arg2 = 100, arg3 = &quot;test&quot;):
    return arg3, arg2, arg1
 
&gt;&gt;&gt;ret1, ret2, ret3 = myfunction(&quot;Argument 1&quot;, arg3 = &quot;Named argument&quot;)
# Using &quot;print&quot; with multiple values prints them all, separated by a space.
&gt;&gt;&gt; print ret1, ret2, ret3
Named argument 100 Argument 1
 
# Same as def f(x): return x + 1
functionvar = lambda x: x + 1
&gt;&gt;&gt; print functionvar(1)
2[/code]

[size=14pt][b]Classes[/b][/size]
Python supports a limited form of [b]multiple inheritance [/b] in classes. [b]Private variables and methods [/b] can be declared (by convention, this is not enforced by the language) by adding at least two leading underscores and at most one trailing one (e.g. &quot;__spam&quot;). We can also assign [b]arbitrary variables [/b] to class instances. An example follows:

[code]class MyClass:
    common = 10
    def __init__(self):
        self.myvariable = 3
    def myfunction(self, arg1, arg2):
        return self.myvariable
 
    # This is the class instantiation
&gt;&gt;&gt; classinstance = MyClass()
&gt;&gt;&gt; classinstance.myfunction(1, 2)
3
# This variable is shared by all classes.
&gt;&gt;&gt; classinstance2 = MyClass()
&gt;&gt;&gt; classinstance.common
10
&gt;&gt;&gt; classinstance2.common
10
# Note how we use the class name
# instead of the instance.
&gt;&gt;&gt; MyClass.common = 30
&gt;&gt;&gt; classinstance.common
30
&gt;&gt;&gt; classinstance2.common
30
# This will not update the variable on the class,
# instead it will create a new one on the class
# instance and assign the value to that.
&gt;&gt;&gt; classinstance.common = 10
&gt;&gt;&gt; classinstance.common
10
&gt;&gt;&gt; classinstance2.common
30
&gt;&gt;&gt; MyClass.common = 50
# This has not changed, because &quot;common&quot; is
# now an instance variable.
&gt;&gt;&gt; classinstance.common
10
&gt;&gt;&gt; classinstance2.common
50
 
# This class inherits from MyClass. Multiple
# inheritance is declared as:
# class OtherClass(MyClass1, MyClass2, MyClassN)
class OtherClass(MyClass):
    def __init__(self, arg1):
        self.myvariable = 3
        print arg1
 
&gt;&gt;&gt; classinstance = OtherClass(&quot;hello&quot;)
hello
&gt;&gt;&gt; classinstance.myfunction(1, 2)
3
# This class doesn&#39;t have a .test member, but
# we can add one to the instance anyway. Note
# that this will only be a member of classinstance.
&gt;&gt;&gt; classinstance.test = 10
&gt;&gt;&gt; classinstance.test
10[/code]

[size=14pt][b]Exceptions[/b][/size]
Exceptions in Python are handled with [b]try-except [exceptionname] blocks[/b]:

[code]def somefunction():
    try:
        # Division by zero raises an exception
        10 / 0
    except ZeroDivisionError:
        print &quot;Oops, invalid.&quot;
 
&gt;&gt;&gt; fnExcept()
Oops, invalid.[/code]

[size=14pt][b]Importing[/b][/size]
External libraries are used with the import [libname] keyword. You can also use from [libname] import [funcname] for individual functions. Here is an example:

[code]import random
from time import clock
 
randomint = random.randint(1, 100)
&gt;&gt;&gt; print randomint
64[/code]

[size=14pt][b]File I/O[/b][/size]
Python has a wide array of libraries built in. As an example, here is how [b]serializing[/b] (converting data structures to strings using the pickle library) with file I/O is used:

[code]import pickle
mylist = [&quot;This&quot;, &quot;is&quot;, 4, 13327]
# Open the file C:\binary.dat for writing. The letter r before the
# filename string is used to prevent backslash escaping.
myfile = file(r&quot;C:\binary.dat&quot;, &quot;w&quot;)
pickle.dump(mylist, myfile)
myfile.close()
 
myfile = file(r&quot;C:\text.txt&quot;, &quot;w&quot;)
myfile.write(&quot;This is a sample string&quot;)
myfile.close()
 
myfile = file(r&quot;C:\text.txt&quot;)
&gt;&gt;&gt; print myfile.read()
&#39;This is a sample string&#39;
myfile.close()
 
# Open the file for reading.
myfile = file(r&quot;C:\binary.dat&quot;)
loadedlist = pickle.load(myfile)
myfile.close()
&gt;&gt;&gt; print loadedlist
[&#39;This&#39;, &#39;is&#39;, 4, 13327][/code]

[size=14pt][b]Miscellaneous[/b][/size]
[b]Conditions can be chained[/b]. 1 &lt; a &lt; 3 checks that a is both less than 3 and more than 1. 
You can use del to [b]delete variables or items in arrays[/b]. 
[b]List comprehensions[/b] provide a powerful way to create and manipulate lists. They consist of an expression followed by a for clause followed by zero or more if@ or @for clauses, like so: 
[code]&gt;&gt;&gt; lst1 = [1, 2, 3]
&gt;&gt;&gt; lst2 = [3, 4, 5]
&gt;&gt;&gt; print [x * y for x in lst1 for y in lst2]
[3, 4, 5, 6, 8, 10, 9, 12, 15]
&gt;&gt;&gt; print [x for x in lst1 if 4 &gt; x &gt; 1]
[2, 3]
# Check if an item has a specific property.
# &quot;any&quot; returns true if any item in the list is true.
&gt;&gt;&gt; any(i % 3 for i in [3, 3, 4, 4, 3])
True
# Check how many items have this property.
&gt;&gt;&gt; sum(1 for i in [3, 3, 4, 4, 3] if i == 3)
3
&gt;&gt;&gt; del lst1[0]
&gt;&gt;&gt; print lst1
[2, 3]
&gt;&gt;&gt; del lst1[/code]

[b]Global variables[/b] are declared outside of functions and can be read without any special declarations, but if you want to write to them you must declare them at the beginning of the function with the &quot;global&quot; keyword, otherwise Python will create a local variable and assign to that (be careful of that, it&#39;s a small catch that can get you if you don&#39;t know it). For example: 
[code]number = 5
 
def myfunc():
    # This will print 5.
    print number
 
def anotherfunc():
    # This raises an exception because the variable has not
    # been assigned to before printing. Python knows that it a
    # value will be assigned to it later and creates a new, local
    # number instead of accessing the global one.
    print number
    number = 3
 
def yetanotherfunc():
    global number
    # This will correctly change the global.
    number = 3[/code]

Well there it is, hope you learnt the Basics of Python.</description>
    
    <lastBuildDate>Sun, 15 Jul 2007 16:15:03 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@elite_azn elite azn]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/elite_azn">@elite_azn</a> wrote:</p>
          <blockquote>
              <p>Ok sounds good evil_, if I ever need help I’ll pm you because I know you can do a lot. Thanks dude</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/7</link>
        <pubDate>Sun, 15 Jul 2007 16:15:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-7</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>Python is a fun language, it’s easier than java and really powerful.</p>
<p>Google uses python <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>If you need any help you can pm me, if I don’t know the answer i’ll try to find it <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/6</link>
        <pubDate>Sun, 15 Jul 2007 15:43:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-6</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@elite_azn elite azn]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/elite_azn">@elite_azn</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="123131">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/marluxia/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"> marluxia:</div>
<blockquote>
<p>thanks! But next time credit <a href="http://www.poromenos.org/tutorials/python?page=1" data-bbcode="true" rel="nofollow noopener">your sources</a> <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=6" title=":confused:" class="emoji" alt=":confused:"></p>
</blockquote>
</aside>
<p>Oh whoops, sorry about that, thanks for pointing it out Marluxia</p>
<p>Thanks pizza pie.</p>
<p>aaalba, with Python, you use a program which allows you to make scripts and it pretty much compiles it for you if you make a mistake. I haven’t used Python all that much as I myself am just laerning Python right now.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/5</link>
        <pubDate>Sun, 15 Jul 2007 15:18:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-5</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@aaalba aaalba]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aaalba">@aaalba</a> wrote:</p>
          <blockquote>
              <p>do python needs any compiler? if yes can any1 give me a ling with it ![br][size=1]Posted on: July 14, 2007, 12:03:48 PM[/size][hr]Can you say newset version of pythons compiller?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/4</link>
        <pubDate>Sat, 14 Jul 2007 23:40:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-4</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@pizza_pie pizza pie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pizza_pie">@pizza_pie</a> wrote:</p>
          <blockquote>
              <p>It’s all good. State your sources next time. Btw, ty for at least getting this tut… Ima learn Python now <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"> my 3rd programming language, if batch files count ;p</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/3</link>
        <pubDate>Sat, 14 Jul 2007 22:03:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-3</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@marluxia marluxia]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/marluxia">@marluxia</a> wrote:</p>
          <blockquote>
              <p>thanks! But next time credit <a href="http://www.poromenos.org/tutorials/python?page=1" data-bbcode="true" rel="nofollow noopener">your sources</a> <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=6" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/2</link>
        <pubDate>Sat, 14 Jul 2007 15:46:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-2</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
      <item>
        <title>Learn the Basic&#39;s of Python</title>
        <dc:creator><![CDATA[@elite_azn elite azn]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/elite_azn">@elite_azn</a> wrote:</p>
          <blockquote>
              <p>Well here are the basic’s of Python from <a href="http://www.poromenos.org/tutorials" rel="nofollow noopener">www.poromenos.org/tutorials</a> (Thanks for pointing this out Marluxia). Enjoy ;D.</p>
<p>[size=14pt]<span class="bbcode-b">Properties</span>[/size]<br>
Python is <span class="bbcode-b">strongly</span> typed (i.e. types are enforced), <span class="bbcode-b">dynamically, implicitly typed </span> (i.e. you don’t have to declare variables), <span class="bbcode-b">case sensitive</span> (i.e. var and VAR are two different variables) and <span class="bbcode-b">object-oriented </span> (i.e. everything is an object).</p>
<p>[size=14pt]<span class="bbcode-b">Syntax</span>[/size]<br>
Python has <span class="bbcode-b">no mandatory statement termination characters </span> and <span class="bbcode-b">blocks are specified by indentation</span>. Indent in to begin a block, indent out to end one. Statements that expect an indentation level end in a colon (:). Comments start with the pound (#) sign and are single-line. <span class="bbcode-b">Values are assigned </span> with the equals sign ("="), and <span class="bbcode-b">equality testing </span> is done using two equals signs ("=="). You can increment/decrement values using the += and -= operators respectively. This works on many datatypes, strings included. You can also use multiple variables on one line. For example:</p>
<p>[code]&gt;&gt;&gt; myvar = 3</p>
<blockquote>
<blockquote>
<blockquote>
<p>myvar += 2<br>
myvar -= 1<br>
mystring = “Hello”<br>
mystring += " world."<br>
print mystring<br>
Hello world.</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This swaps the variables in one line(!).</h1>
<blockquote>
<blockquote>
<blockquote>
<p>myvar, mystring = mystring, myvar[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Data types</span>[/size]<br>
The data types available in python are <span class="bbcode-b">lists, tuples and dictionaries</span>. Sets are available in the sets library. Lists are like one-dimensional arrays (but you can also have lists of other lists), dictionaries are associative arrays (a.k.a. hash tables) and tuples are immutable one-dimensional arrays (Python “arrays” can be of any type, so you can mix e.g. integers, strings, etc in lists/dictionaries/tuples). The first item in all array types is 0. Negative numbers count from the end towards the beginning, -1 is the last item. Variables can point to functions. The usage is as follows:</p>
<p>[code]&gt;&gt;&gt; sample = [1, [“another”, “list”], (“a”, “tuple”)]</p>
<blockquote>
<blockquote>
<blockquote>
<p>mylist = [“List item 1”, 2, 3.14]<br>
mylist[0] = “List item 1 again”<br>
mylist[-1] = 3.14<br>
mydict = {“Key 1”: “Value 1”, 2: 3, “pi”: 3.14}<br>
mydict[“pi”] = 3.15<br>
mytuple = (1, 2, 3)<br>
myfunction = len<br>
print myfunction(list)<br>
3[/code]<br>
You can access <span class="bbcode-b">array ranges </span> using a colon (:). Leaving the start index empty assumes the first item, leaving the end index assumes the last item. Negative indexes count from the last item backwards (thus -1 is the last item) like so:</p>
</blockquote>
</blockquote>
</blockquote>
<p>[code]&gt;&gt;&gt; mylist = [“List item 1”, 2, 3.14]</p>
<blockquote>
<blockquote>
<blockquote>
<p>print mylist[:]<br>
[‘List item 1’, 2, 3.1400000000000001]</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>print mylist[0:2]<br>
[‘List item 1’, 2]</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>print mylist[-3:-1]<br>
[‘List item 1’, 2]</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>print mylist[1:]<br>
[2, 3.14][/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Strings</span>[/size]<br>
Its strings can use <span class="bbcode-b">either single or double quotation mark</span>s, and you can have quotation marks of one kind inside a string that uses the other kind (i.e. “He said ‘hello’.” is valid). Multiline strings are enclosed in triple double (or single) quotes ("""). <span class="bbcode-b">Python supports Unicode </span> out of the box, using the syntax u"This is a unicode string". To <span class="bbcode-b">fill a string with values</span>, you use the % (modulo) operator and a tuple. Each %s gets replaced with an item from the tuple, left to right, and you can also use dictionary substitutions, like so:</p>
<p>[code]&gt;&gt;&gt;print “Name: %s\nNumber: %s\nString: %s” % (myclass.name, 3, 3 * “-”)<br>
Name: elite azn<br>
Number: 3<br>
String: —</p>
<p>strString = “”“This is<br>
a multiline<br>
string.”""</p>
<h1>WARNING: Watch out for the trailing s in “%(key)s”.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>print “This %(verb)s a %(noun)s.” % {“noun”: “test”, “verb”: “is”}<br>
This is a test.[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Flow control statements</span>[/size]<br>
Flow control statements are while, if, and for. There is no select; instead, use if. Use for to enumerate through members of a list. To obtain a list of numbers, use range(). These statements’ syntax is thus:</p>
<p>[code]rangelist = range(10)</p>
<blockquote>
<blockquote>
<blockquote>
<p>print rangelist<br>
[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]<br>
for number in rangelist:</p>
</blockquote>
</blockquote>
</blockquote>
<pre><code># Check if number is one of
# the numbers in the tuple.
if number in (3, 4, 7, 9):
    # "Break" terminates a for without
    # executing the "else" clause.
    break
else:
    # "Continue" starts the next iteration
    # of the loop. It's rather useless here,
    # as it's the last statement of the loop.
    continue
</code></pre>
<p>else:<br>
# The “else” clause is optional and is<br>
# executed only if the loop didn’t “break”.<br>
pass # Do nothing</p>
<p>if rangelist[1] == 2:<br>
print “The second item (lists are 0-based) is 2”<br>
elif rangelist[1] == 3:<br>
print “The second item (lists are 0-based) is 3”<br>
else:<br>
print “Dunno”</p>
<p>while rangelist[1] == 1:<br>
pass[/code]</p>
<p>[size=14pt]<span class="bbcode-b">Functions</span>[/size]<br>
Functions are <span class="bbcode-b">declared with the “def”</span> keyword. <span class="bbcode-b">Optional arguments </span> are set in the function declaration after the mandatory arguments by being assigned a default value. For <span class="bbcode-b">named arguments</span>, the name of the argument is assigned a value. Functions can return a tuple (and using tuple unpacking you can effectively return <span class="bbcode-b">multiple values</span>). <span class="bbcode-b">Lambda functions </span> are ad hoc functions that are comprised of a single statement. Parameters are passed <span class="bbcode-b">by reference</span>, but mutable types (tuples, lists, ints, strings, etc) <span class="bbcode-u">cannot be changed</span>. For example:</p>
<p>[code]# arg2 and arg3 are optional, they have default values</p>
<h1>if one is not passed (100 and “test”, respectively).</h1>
<p>def myfunction(arg1, arg2 = 100, arg3 = “test”):<br>
return arg3, arg2, arg1</p>
<blockquote>
<blockquote>
<blockquote>
<p>ret1, ret2, ret3 = myfunction(“Argument 1”, arg3 = “Named argument”)</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Using “print” with multiple values prints them all, separated by a space.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>print ret1, ret2, ret3<br>
Named argument 100 Argument 1</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Same as def f(x): return x + 1</h1>
<p>functionvar = lambda x: x + 1</p>
<blockquote>
<blockquote>
<blockquote>
<p>print functionvar(1)<br>
2[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Classes</span>[/size]<br>
Python supports a limited form of <span class="bbcode-b">multiple inheritance </span> in classes. <span class="bbcode-b">Private variables and methods </span> can be declared (by convention, this is not enforced by the language) by adding at least two leading underscores and at most one trailing one (e.g. “__spam”). We can also assign <span class="bbcode-b">arbitrary variables </span> to class instances. An example follows:</p>
<p>[code]class MyClass:<br>
common = 10<br>
def <strong>init</strong>(self):<br>
self.myvariable = 3<br>
def myfunction(self, arg1, arg2):<br>
return self.myvariable</p>
<pre><code># This is the class instantiation
</code></pre>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance = MyClass()<br>
classinstance.myfunction(1, 2)<br>
3</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This variable is shared by all classes.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance2 = MyClass()<br>
classinstance.common<br>
10</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>classinstance2.common<br>
10</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Note how we use the class name</h1>
<h1>instead of the instance.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>MyClass.common = 30<br>
classinstance.common<br>
30</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>classinstance2.common<br>
30</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This will not update the variable on the class,</h1>
<h1>instead it will create a new one on the class</h1>
<h1>instance and assign the value to that.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance.common = 10<br>
classinstance.common<br>
10</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>classinstance2.common<br>
30</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>MyClass.common = 50</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This has not changed, because “common” is</h1>
<h1>now an instance variable.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance.common<br>
10</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>classinstance2.common<br>
50</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This class inherits from MyClass. Multiple</h1>
<h1>inheritance is declared as:</h1>
<h1>class OtherClass(MyClass1, MyClass2, MyClassN)</h1>
<p>class OtherClass(MyClass):<br>
def <strong>init</strong>(self, arg1):<br>
self.myvariable = 3<br>
print arg1</p>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance = OtherClass(“hello”)<br>
hello</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>classinstance.myfunction(1, 2)<br>
3</p>
</blockquote>
</blockquote>
</blockquote>
<h1>This class doesn’t have a .test member, but</h1>
<h1>we can add one to the instance anyway. Note</h1>
<h1>that this will only be a member of classinstance.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>classinstance.test = 10<br>
classinstance.test<br>
10[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Exceptions</span>[/size]<br>
Exceptions in Python are handled with <span class="bbcode-b">try-except [exceptionname] blocks</span>:</p>
<p>[code]def somefunction():<br>
try:<br>
# Division by zero raises an exception<br>
10 / 0<br>
except ZeroDivisionError:<br>
print “Oops, invalid.”</p>
<blockquote>
<blockquote>
<blockquote>
<p>fnExcept()<br>
Oops, invalid.[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Importing</span>[/size]<br>
External libraries are used with the import [libname] keyword. You can also use from [libname] import [funcname] for individual functions. Here is an example:</p>
<p>[code]import random<br>
from time import clock</p>
<p>randomint = random.randint(1, 100)</p>
<blockquote>
<blockquote>
<blockquote>
<p>print randomint<br>
64[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">File I/O</span>[/size]<br>
Python has a wide array of libraries built in. As an example, here is how <span class="bbcode-b">serializing</span> (converting data structures to strings using the pickle library) with file I/O is used:</p>
<p>[code]import pickle<br>
mylist = [“This”, “is”, 4, 13327]</p>
<h1>Open the file C:\binary.dat for writing. The letter r before the</h1>
<h1>filename string is used to prevent backslash escaping.</h1>
<p>myfile = file(r"C:\binary.dat", “w”)<br>
pickle.dump(mylist, myfile)<br>
myfile.close()</p>
<p>myfile = file(r"C:\text.txt", “w”)<br>
myfile.write(“This is a sample string”)<br>
myfile.close()</p>
<p>myfile = file(r"C:\text.txt")</p>
<blockquote>
<blockquote>
<blockquote>
<p>print myfile.read()<br>
‘This is a sample string’<br>
myfile.close()</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Open the file for reading.</h1>
<p>myfile = file(r"C:\binary.dat")<br>
loadedlist = pickle.load(myfile)<br>
myfile.close()</p>
<blockquote>
<blockquote>
<blockquote>
<p>print loadedlist<br>
[‘This’, ‘is’, 4, 13327][/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p>[size=14pt]<span class="bbcode-b">Miscellaneous</span>[/size]<br>
<span class="bbcode-b">Conditions can be chained</span>. 1 &lt; a &lt; 3 checks that a is both less than 3 and more than 1.<br>
You can use del to <span class="bbcode-b">delete variables or items in arrays</span>.<br>
<span class="bbcode-b">List comprehensions</span> provide a powerful way to create and manipulate lists. They consist of an expression followed by a for clause followed by zero or more if@ or <a class="mention" href="/u/for">@for</a> clauses, like so:</p>
<p>[code]&gt;&gt;&gt; lst1 = [1, 2, 3]</p>
<blockquote>
<blockquote>
<blockquote>
<p>lst2 = [3, 4, 5]<br>
print [x * y for x in lst1 for y in lst2]<br>
[3, 4, 5, 6, 8, 10, 9, 12, 15]</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>print [x for x in lst1 if 4 &gt; x &gt; 1]<br>
[2, 3]</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Check if an item has a specific property.</h1>
<h1>“any” returns true if any item in the list is true.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>any(i % 3 for i in [3, 3, 4, 4, 3])<br>
True</p>
</blockquote>
</blockquote>
</blockquote>
<h1>Check how many items have this property.</h1>
<blockquote>
<blockquote>
<blockquote>
<p>sum(1 for i in [3, 3, 4, 4, 3] if i == 3)<br>
3</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>del lst1[0]<br>
print lst1<br>
[2, 3]</p>
</blockquote>
</blockquote>
<blockquote>
<blockquote>
<p>del lst1[/code]</p>
</blockquote>
</blockquote>
</blockquote>
<p><span class="bbcode-b">Global variables</span> are declared outside of functions and can be read without any special declarations, but if you want to write to them you must declare them at the beginning of the function with the “global” keyword, otherwise Python will create a local variable and assign to that (be careful of that, it’s a small catch that can get you if you don’t know it). For example:</p>
<p>[code]number = 5</p>
<p>def myfunc():<br>
# This will print 5.<br>
print number</p>
<p>def anotherfunc():<br>
# This raises an exception because the variable has not<br>
# been assigned to before printing. Python knows that it a<br>
# value will be assigned to it later and creates a new, local<br>
# number instead of accessing the global one.<br>
print number<br>
number = 3</p>
<p>def yetanotherfunc():<br>
global number<br>
# This will correctly change the global.<br>
number = 3[/code]</p>
<p>Well there it is, hope you learnt the Basics of Python.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131/1</link>
        <pubDate>Sat, 14 Jul 2007 13:47:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-123131-1</guid>
        <source url="https://forum.moparisthebest.com/t/learn-the-basics-of-python/123131.rss">Learn the Basic&#39;s of Python</source>
      </item>
  </channel>
</rss>
