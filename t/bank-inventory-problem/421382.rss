<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bank inventory problem</title>
    <link>https://forum.moparisthebest.com/t/bank-inventory-problem/421382</link>
    <description>here&#39;s the error i get when someone deposits inventory to bank.
[CODE][11/12/11 11:02 AM]: java.lang.ArrayIndexOutOfBoundsException: -1
[11/12/11 11:02 AM]:    at server.model.items.ItemAssistant.bankItem(ItemAssista
nt.java:1640)
[11/12/11 11:02 AM]:    at server.model.players.packets.ClickingButtons.processP
acket(ClickingButtons.java:54)
[11/12/11 11:02 AM]:    at server.model.players.PacketHandler.processPacket(Pack
etHandler.java:138)
[11/12/11 11:02 AM]:    at server.model.players.Client.processQueuedPackets(Clie
nt.java:1255)
[11/12/11 11:02 AM]:    at server.model.players.PlayerHandler.process(PlayerHand
ler.java:146)
[11/12/11 11:02 AM]:    at server.Server.main(Server.java:155)[/CODE]

this doesn&#39;t crash the server or anything just anoying and i don&#39;t like it :p

heres were it&#39;s coming from line 1640 will be highlighted in red:

[CODE]	public boolean bankItem(int itemID, int fromSlot, int amount){
			if(c.inTrade) {
				c.sendMessage(&quot;You can&#39;t store items while trading!&quot;);
				return false;
			}
		if (c.playerItemsN[fromSlot] &lt;= 0){
			return false;
		}
		if (!Item.itemIsNote[c.playerItems[fromSlot]-1]) {  //line 1640
			if (c.playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[c.playerItems[fromSlot]-1] || c.playerItemsN[fromSlot] &gt; 1) {
				int toBankSlot = 0;
				boolean alreadyInBank=false;
			    for (int i=0; i&lt; Config.BANK_SIZE; i++) {
						if (c.bankItems[i] == c.playerItems[fromSlot]) {
							if (c.playerItemsN[fromSlot]&lt;amount)
									amount = c.playerItemsN[fromSlot];
							alreadyInBank = true;
							toBankSlot = i;
							i=Config.BANK_SIZE+1;
						}
				}

				if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
						for (int i=0; i&lt;Config.BANK_SIZE; i++) {
							if (c.bankItems[i] &lt;= 0) {
									toBankSlot = i;
									i=Config.BANK_SIZE+1;
							}
						}
						c.bankItems[toBankSlot] = c.playerItems[fromSlot];
						if (c.playerItemsN[fromSlot]&lt;amount){
							amount = c.playerItemsN[fromSlot];
						}
						if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
							c.bankItemsN[toBankSlot] += amount;
						} else {
							c.sendMessage(&quot;Bank full!&quot;);
							return false;
						}
						deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
						resetTempItems();
						resetBank();
						return true;
				}
				else if (alreadyInBank) {
						if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
							c.bankItemsN[toBankSlot] += amount;
						} else {
							c.sendMessage(&quot;Bank full!&quot;);
							return false;
						}
						deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
						resetTempItems();
						resetBank();
						return true;
				} else {
						c.sendMessage(&quot;Bank full!&quot;);
						return false;
				}
			} else {
				itemID = c.playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank=false;
			    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] == c.playerItems[fromSlot]) {
							alreadyInBank = true;
							toBankSlot = i;
							i=Config.BANK_SIZE+1;
						}
				}
				if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
			       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] &lt;= 0) {
								toBankSlot = i;
								i=Config.BANK_SIZE+1;
						}
					}
						int firstPossibleSlot=0;
						boolean itemExists = false;
						while (amount &gt; 0) {
							itemExists = false;
							for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
									if ((c.playerItems[i]) == itemID) {
										firstPossibleSlot = i;
										itemExists = true;
										i=30;
									}
							}
							if (itemExists) {
									c.bankItems[toBankSlot] = c.playerItems[firstPossibleSlot];
									c.bankItemsN[toBankSlot] += 1;
									deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
									amount--;
							} else {
									amount=0;
							}
						}
						resetTempItems();
						resetBank();
						return true;
				} else if (alreadyInBank) {
						int firstPossibleSlot=0;
						boolean itemExists = false;
						while (amount &gt; 0) {
							itemExists = false;
							for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
								if ((c.playerItems[i]) == itemID) {
									firstPossibleSlot = i;
									itemExists = true;
									i=30;
								}
							}
							if (itemExists) {
									c.bankItemsN[toBankSlot] += 1;
									deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
									amount--;
							} else {
									amount=0;
							}
						}
						resetTempItems();
						resetBank();
						return true;
				} else {
						c.sendMessage(&quot;Bank full!&quot;);
						return false;
				}
			}
		}
		else if (Item.itemIsNote[c.playerItems[fromSlot]-1] &amp;&amp; !Item.itemIsNote[c.playerItems[fromSlot]-2]) {
			if (c.playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[c.playerItems[fromSlot]-1] || c.playerItemsN[fromSlot] &gt; 1) {
				int toBankSlot = 0;
				boolean alreadyInBank=false;
			    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] == (c.playerItems[fromSlot]-1)) {
							if (c.playerItemsN[fromSlot]&lt;amount)
									amount = c.playerItemsN[fromSlot];
						alreadyInBank = true;
						toBankSlot = i;
						i=Config.BANK_SIZE+1;
						}
				}

				if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
			       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] &lt;= 0) {
								toBankSlot = i;
								i=Config.BANK_SIZE+1;
						}
					}
					c.bankItems[toBankSlot] = (c.playerItems[fromSlot]-1);
					if (c.playerItemsN[fromSlot]&lt;amount){
						amount = c.playerItemsN[fromSlot];
					}
					if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
						c.bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
					resetTempItems();
					resetBank();
					return true;
				}
				else if (alreadyInBank) {
					if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
						c.bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
					resetTempItems();
					resetBank();
					return true;
				} else {
						c.sendMessage(&quot;Bank full!&quot;);
						return false;
				}
			} else {
				itemID = c.playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank=false;
			    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] == (c.playerItems[fromSlot]-1)) {
						alreadyInBank = true;
						toBankSlot = i;
						i=Config.BANK_SIZE+1;
					}
				}
				if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
			       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] &lt;= 0){
								toBankSlot = i;
								i=Config.BANK_SIZE+1;
						}
					}
						int firstPossibleSlot=0;
						boolean itemExists = false;
						while (amount &gt; 0) {
							itemExists = false;
							for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
								if ((c.playerItems[i]) == itemID) {
									firstPossibleSlot = i;
									itemExists = true;
									i=30;
								}
							}
							if (itemExists) {
									c.bankItems[toBankSlot] = (c.playerItems[firstPossibleSlot]-1);
									c.bankItemsN[toBankSlot] += 1;
									deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
									amount--;
							} else {
									amount=0;
							}
						}
						resetTempItems();
						resetBank();
						return true;
				}
				else if (alreadyInBank) {
						int firstPossibleSlot=0;
						boolean itemExists = false;
						while (amount &gt; 0) {
							itemExists = false;
							for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
								if ((c.playerItems[i]) == itemID) {
									firstPossibleSlot = i;
									itemExists = true;
									i=30;
								}
							}
							if (itemExists) {
									c.bankItemsN[toBankSlot] += 1;
									deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
									amount--;
							} else {
									amount=0;
							}
						}
						resetTempItems();
						resetBank();
						return true;
				} else {
						c.sendMessage(&quot;Bank full!&quot;);
						return false;
				}
			}
		} else {
			c.sendMessage(&quot;Item not supported &quot;+(c.playerItems[fromSlot]-1));
			return false;
		}
	}[/CODE]

if (!Item.itemIsNote[c.playerItems[fromSlot]-1]) {  //line 1640</description>
    
    <lastBuildDate>Sat, 12 Nov 2011 16:23:36 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/bank-inventory-problem/421382.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bank inventory problem</title>
        <dc:creator><![CDATA[@vovik_ukr vovik ukr]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vovik_ukr">@vovik_ukr</a> wrote:</p>
          <blockquote>
              <p>here’s the error i get when someone deposits inventory to bank.</p>
<p><code>[11/12/11 11:02 AM]: java.lang.ArrayIndexOutOfBoundsException: -1
[11/12/11 11:02 AM]:    at server.model.items.ItemAssistant.bankItem(ItemAssista
nt.java:1640)
[11/12/11 11:02 AM]:    at server.model.players.packets.ClickingButtons.processP
acket(ClickingButtons.java:54)
[11/12/11 11:02 AM]:    at server.model.players.PacketHandler.processPacket(Pack
etHandler.java:138)
[11/12/11 11:02 AM]:    at server.model.players.Client.processQueuedPackets(Clie
nt.java:1255)
[11/12/11 11:02 AM]:    at server.model.players.PlayerHandler.process(PlayerHand
ler.java:146)
[11/12/11 11:02 AM]:    at server.Server.main(Server.java:155)</code></p>
<p>this doesn’t crash the server or anything just anoying and i don’t like it <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>heres were it’s coming from line 1640 will be highlighted in red:</p>
<p>[CODE]	public boolean bankItem(int itemID, int fromSlot, int amount){<br>
if(c.inTrade) {<br>
c.sendMessage(“You can’t store items while trading!”);<br>
return false;<br>
}<br>
if (c.playerItemsN[fromSlot] &lt;= 0){<br>
return false;<br>
}<br>
if (!Item.itemIsNote[c.playerItems[fromSlot]-1]) {  //line 1640<br>
if (c.playerItems[fromSlot] &lt;= 0) {<br>
return false;<br>
}<br>
if (Item.itemStackable[c.playerItems[fromSlot]-1] || c.playerItemsN[fromSlot] &gt; 1) {<br>
int toBankSlot = 0;<br>
boolean alreadyInBank=false;<br>
for (int i=0; i&lt; Config.BANK_SIZE; i++) {<br>
if (c.bankItems[i] == c.playerItems[fromSlot]) {<br>
if (c.playerItemsN[fromSlot]&lt;amount)<br>
amount = c.playerItemsN[fromSlot];<br>
alreadyInBank = true;<br>
toBankSlot = i;<br>
i=Config.BANK_SIZE+1;<br>
}<br>
}</p>
<pre><code>			if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
					for (int i=0; i&lt;Config.BANK_SIZE; i++) {
						if (c.bankItems[i] &lt;= 0) {
								toBankSlot = i;
								i=Config.BANK_SIZE+1;
						}
					}
					c.bankItems[toBankSlot] = c.playerItems[fromSlot];
					if (c.playerItemsN[fromSlot]&lt;amount){
						amount = c.playerItemsN[fromSlot];
					}
					if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
						c.bankItemsN[toBankSlot] += amount;
					} else {
						c.sendMessage("Bank full!");
						return false;
					}
					deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
					resetTempItems();
					resetBank();
					return true;
			}
			else if (alreadyInBank) {
					if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
						c.bankItemsN[toBankSlot] += amount;
					} else {
						c.sendMessage("Bank full!");
						return false;
					}
					deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
					resetTempItems();
					resetBank();
					return true;
			} else {
					c.sendMessage("Bank full!");
					return false;
			}
		} else {
			itemID = c.playerItems[fromSlot];
			int toBankSlot = 0;
			boolean alreadyInBank=false;
		    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] == c.playerItems[fromSlot]) {
						alreadyInBank = true;
						toBankSlot = i;
						i=Config.BANK_SIZE+1;
					}
			}
			if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
		       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i=Config.BANK_SIZE+1;
					}
				}
					int firstPossibleSlot=0;
					boolean itemExists = false;
					while (amount &gt; 0) {
						itemExists = false;
						for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
								if ((c.playerItems[i]) == itemID) {
									firstPossibleSlot = i;
									itemExists = true;
									i=30;
								}
						}
						if (itemExists) {
								c.bankItems[toBankSlot] = c.playerItems[firstPossibleSlot];
								c.bankItemsN[toBankSlot] += 1;
								deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
								amount--;
						} else {
								amount=0;
						}
					}
					resetTempItems();
					resetBank();
					return true;
			} else if (alreadyInBank) {
					int firstPossibleSlot=0;
					boolean itemExists = false;
					while (amount &gt; 0) {
						itemExists = false;
						for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
							if ((c.playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i=30;
							}
						}
						if (itemExists) {
								c.bankItemsN[toBankSlot] += 1;
								deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
								amount--;
						} else {
								amount=0;
						}
					}
					resetTempItems();
					resetBank();
					return true;
			} else {
					c.sendMessage("Bank full!");
					return false;
			}
		}
	}
	else if (Item.itemIsNote[c.playerItems[fromSlot]-1] &amp;&amp; !Item.itemIsNote[c.playerItems[fromSlot]-2]) {
		if (c.playerItems[fromSlot] &lt;= 0) {
			return false;
		}
		if (Item.itemStackable[c.playerItems[fromSlot]-1] || c.playerItemsN[fromSlot] &gt; 1) {
			int toBankSlot = 0;
			boolean alreadyInBank=false;
		    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] == (c.playerItems[fromSlot]-1)) {
						if (c.playerItemsN[fromSlot]&lt;amount)
								amount = c.playerItemsN[fromSlot];
					alreadyInBank = true;
					toBankSlot = i;
					i=Config.BANK_SIZE+1;
					}
			}

			if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
		       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i=Config.BANK_SIZE+1;
					}
				}
				c.bankItems[toBankSlot] = (c.playerItems[fromSlot]-1);
				if (c.playerItemsN[fromSlot]&lt;amount){
					amount = c.playerItemsN[fromSlot];
				}
				if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
					c.bankItemsN[toBankSlot] += amount;
				} else {
					return false;
				}
				deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
				resetTempItems();
				resetBank();
				return true;
			}
			else if (alreadyInBank) {
				if ((c.bankItemsN[toBankSlot] + amount) &lt;= Config.MAXITEM_AMOUNT &amp;&amp; (c.bankItemsN[toBankSlot] + amount) &gt; -1) {
					c.bankItemsN[toBankSlot] += amount;
				} else {
					return false;
				}
				deleteItem((c.playerItems[fromSlot]-1), fromSlot, amount);
				resetTempItems();
				resetBank();
				return true;
			} else {
					c.sendMessage("Bank full!");
					return false;
			}
		} else {
			itemID = c.playerItems[fromSlot];
			int toBankSlot = 0;
			boolean alreadyInBank=false;
		    for (int i=0; i&lt;Config.BANK_SIZE; i++) {
				if (c.bankItems[i] == (c.playerItems[fromSlot]-1)) {
					alreadyInBank = true;
					toBankSlot = i;
					i=Config.BANK_SIZE+1;
				}
			}
			if (!alreadyInBank &amp;&amp; freeBankSlots() &gt; 0) {
		       	for (int i=0; i&lt;Config.BANK_SIZE; i++) {
					if (c.bankItems[i] &lt;= 0){
							toBankSlot = i;
							i=Config.BANK_SIZE+1;
					}
				}
					int firstPossibleSlot=0;
					boolean itemExists = false;
					while (amount &gt; 0) {
						itemExists = false;
						for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
							if ((c.playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i=30;
							}
						}
						if (itemExists) {
								c.bankItems[toBankSlot] = (c.playerItems[firstPossibleSlot]-1);
								c.bankItemsN[toBankSlot] += 1;
								deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
								amount--;
						} else {
								amount=0;
						}
					}
					resetTempItems();
					resetBank();
					return true;
			}
			else if (alreadyInBank) {
					int firstPossibleSlot=0;
					boolean itemExists = false;
					while (amount &gt; 0) {
						itemExists = false;
						for (int i=firstPossibleSlot; i&lt;c.playerItems.length; i++) {
							if ((c.playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i=30;
							}
						}
						if (itemExists) {
								c.bankItemsN[toBankSlot] += 1;
								deleteItem((c.playerItems[firstPossibleSlot]-1), firstPossibleSlot, 1);
								amount--;
						} else {
								amount=0;
						}
					}
					resetTempItems();
					resetBank();
					return true;
			} else {
					c.sendMessage("Bank full!");
					return false;
			}
		}
	} else {
		c.sendMessage("Item not supported "+(c.playerItems[fromSlot]-1));
		return false;
	}
}[/CODE]
</code></pre>
<p>if (!Item.itemIsNote[c.playerItems[fromSlot]-1]) {  //line 1640</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bank-inventory-problem/421382/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bank-inventory-problem/421382/1</link>
        <pubDate>Sat, 12 Nov 2011 16:23:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421382-1</guid>
        <source url="https://forum.moparisthebest.com/t/bank-inventory-problem/421382.rss">Bank inventory problem</source>
      </item>
  </channel>
</rss>
