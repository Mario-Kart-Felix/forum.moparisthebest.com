<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Is there any way to do this without casting?</title>
    <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877</link>
    <description>[code=java]package com.asteria.world.entity;

import java.util.HashMap;
import java.util.Map;
import java.util.Objects;

/**
 * A map of {@link String}s that act as keys and {@link Object}s that act as
 * values. Attributes can be used to hold data temporarily as an alternative to
 * creating tons of fields. Attributes should be removed once they are no longer
 * in use to free up memory and to reduce the size of the attribute map.
 * 
 * @author lare96
 */
public class AttributeMap {

    /**
     * The backing attribute map. We don&#39;t give access to the backing map
     * because there are certain restrictions on key and value types enforced
     * within this class.
     */
    private Map&lt;String, Object&gt; attributes = new HashMap&lt;&gt;(100);
    
    /**
     * Adds an attribute to the map.
     * 
     * @param key
     *            the key for this attribute.
     * @param value
     *            the value of this attribute.
     */
    public &lt;T&gt; void add(String key, T value) {

        // Validate both the key and value then add them to the map.
        attributes.put(Objects.requireNonNull(key),
                Objects.requireNonNull(value));
    }
    
    /**
     * Adds an undefined amount of keys mapped to the same value.
     * 
     * @param value
     *            the value to map to the argued keys.
     * @param key
     *            the keys that will be mapped to the argued value.
     */
    public &lt;T&gt; void add(T value, String... keys) {

        // Adds the collection of keys linked to the same value to the map.
        for (String s : keys) {
            add(s, value);
        }
    }

    /**
     * Removes an undefined amount of attributes currently in the map.
     * 
     * @param keys
     *            the keys of the attributes to remove from the map.
     */
    public void remove(String... keys) {

        // Validates, then removes the collection of keys from the map.
        for (String s : keys) {
            attributes.remove(Objects.requireNonNull(s));
        }
    }
    
    /**
     * Determines if this map contains the specified key.
     * 
     * @param key
     *            the key to check the backing map for.
     * @return true if the map contains the key.
     */
    public boolean contains(String key){

        // We cannot check for &#39;null&#39; values since &#39;null&#39; is not permitted.
        return attributes.containsKey(Objects.requireNonNull(key));
    }

    /**
     * Gets a value from the map based on the argued key. This method uses
     * casting so the retrieved value should be cached whenever possible.
     * 
     * @param key
     *            the key to retrieve the value from.
     * @return the retrieved value.
     */
    @SuppressWarnings(&quot;unchecked&quot;)
    public &lt;T&gt; T get(String key){ 

        // We use generics here so the method will take on whatever type
        // required. Yes we&#39;re still doing casting but we do it here so we don&#39;t
        // have to do it every single time we retrieve a value. If the
        // underlying type does not match the value&#39;s type a
        // &#39;ClassCastException&#39; will be thrown.
        return (T) attributes.get(Objects.requireNonNull(key));
    }

    /**
     * Clears the entire backing map, erasing all held attributes.
     */
    public void clear() {

        // Call clear to the backing map.
        attributes.clear();
    }
}[/code]


more specifically this part

[code=java]    /**
     * Gets a value from the map based on the argued key. This method uses
     * casting so the retrieved value should be cached whenever possible.
     * 
     * @param key
     *            the key to retrieve the value from.
     * @return the retrieved value.
     */
    @SuppressWarnings(&quot;unchecked&quot;)
    public &lt;T&gt; T get(String key){ 

        // We use generics here so the method will take on whatever type
        // required. If the underlying type does not match the retrieved value&#39;s
        // type a &#39;ClassCastException&#39; will be thrown.
        return (T) attributes.get(Objects.requireNonNull(key));
    }[/code]

is the casting really something I should even be worried about? or are there any completely different alternatives to an attribute system that serves the same purpose? because classes are starting to get really messy with fields that are only used once or twice</description>
    
    <lastBuildDate>Sat, 12 Jul 2014 18:46:44 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“greatpea, post:9, topic:544877”]i fail to see how</p>
<p><code>char_attr = new HashMap&lt;String, Object&gt;();
char_attr.put("barrows-bro", new Npc());</code></p>
<p>wouldn’t work?</p>
<p>now, if u want persistency u could create an Attribute class of your own with a do_save boolean/var so when u are saving chars u can loop thru attribute map and check for which ones need to be saved to char file[/quote]he never said it wouldn’t work, he said he didn’t want to have to cast each time he accesses an attribute</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/10</link>
        <pubDate>Sat, 12 Jul 2014 18:46:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-10</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@greatpea greatpea]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/greatpea">@greatpea</a> wrote:</p>
          <blockquote>
              <p>i fail to see how</p>
<p><code>char_attr = new HashMap&lt;String, Object&gt;();
char_attr.put("barrows-bro", new Npc());</code></p>
<p>wouldn’t work?</p>
<p>now, if u want persistency u could create an Attribute class of your own with a do_save boolean/var so when u are saving chars u can loop thru attribute map and check for which ones need to be saved to char file</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/9</link>
        <pubDate>Sat, 12 Jul 2014 18:45:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-9</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="6" data-topic="544877">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>You could have a Barrows handler and create an instance for each player (when they enter the area or spawn the first brother, w/e). Have the field in there.</p>
</blockquote>
</aside>
<p>that’s a pretty good idea, thanks.</p>
<aside class="quote" data-post="7" data-topic="544877">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/zyle1992/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> zyle1992:</div>
<blockquote>
<p>As for the question, is there a way to do it without casting? Yes, but it requires twice the lines of code, for almost no benefit.</p>
</blockquote>
</aside>
<p>so I shouldn’t be worried about the casting?</p>
<p>[quote=“zyle1992, post:7, topic:544877”]You can however specify things like this</p>
<p><code>
    public static void main(final String[] args) {
        final AttributeMap map = new AttributeMap();
        map.add("test", "test");
        map.add("test-num", 8);
        int testNum = map.&lt;Integer&gt;get("test-num");// Here
        System.out.println("testNum: " + testNum);
        String testString = map.&lt;String&gt;get("test");// Here
        System.out.println("testString: " + testString);
    }</code><br>
That way you’re at least aware of what you’re getting back. In your example, you’re just using get, but not really specifying the type to be expected.[/quote]<br>
that makes a lot of sense as well, thanks <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/8</link>
        <pubDate>Sat, 12 Jul 2014 10:43:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-8</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>David’s answer was more of an implementation answer, and a good one at that. As for the question, is there a way to do it without casting? Yes, but it requires twice the lines of code, for almost no benefit. You can however specify things like this</p>
<pre><code class="lang-auto">    public static void main(final String[] args) {
        final AttributeMap map = new AttributeMap();
        map.add("test", "test");
        map.add("test-num", 8);
        int testNum = map.&lt;Integer&gt;get("test-num");// Here
        System.out.println("testNum: " + testNum);
        String testString = map.&lt;String&gt;get("test");// Here
        System.out.println("testString: " + testString);
    }</code></pre>
<p>That way you’re at least aware of what you’re getting back. In your example, you’re just using get, but not really specifying the type to be expected.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/7</link>
        <pubDate>Sat, 12 Jul 2014 10:33:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-7</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>You could have a Barrows handler and create an instance for each player (when they enter the area or spawn the first brother, w/e). Have the field in there. Can also have a static method in there for the chest loot, etc. Depending on your design content can be packaged very cleanly (for example when I add barrows to moparscape 530, I can have a barrows package and inside have the handlers for the special armor effects, brother special effects, object handlers for the underground maze, etc)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/6</link>
        <pubDate>Sat, 12 Jul 2014 09:51:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-6</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="544877">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>@ OP - I absolutely hate it when I see the player.setAttribute(magic string, value) in a server. I’m not sure what the best alternative is, but at the very least you should be able to eliminate most of this with properly designed content. The only thing it might be slightly useful for is timers to eliminate the need for a bunch of counters in the player class, but even then I’d probably just create a Timers class and have it tick all the timers outside of the player class. If you give me an example of some attributes you want to use this for I’ll explain a better design to use.</p>
</blockquote>
</aside>
<p>[code=java]public void method1(Entity e) {<br>
e.getAttributes().add(“barrows-brother”, new Npc(…));</p>
<pre><code>...

method2(e);
</code></pre>
<p>}</p>
<p>public void method2(Entity e) {<br>
Npc npc =  e.getAttributes().get(“barrows-brother”);</p>
<pre><code>npc.doSomething();

...
</code></pre>
<p>}<br>
[/code]</p>
<p>bad example but you get the picture, just something to hold data temporarily instead of having to create a field. will get clustered after lots of content starts to be added</p>
<p>but magic strings can also get very confusing. id honestly prefer using them though if it means less cluster</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/5</link>
        <pubDate>Sat, 12 Jul 2014 09:46:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-5</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“greatpea, post:2, topic:544877”]<a href="http://netty.io/5.0/api/io/netty/util/AttributeMap.html%5B/quote%5DNo">http://netty.io/5.0/api/io/netty/util/AttributeMap.html[/quote]No</a>. Do you even know what that is?</p>
<p>[quote=“lare69, post:3, topic:544877”][quote author=greatpea link=topic=663755.msg4436311#msg4436311 date=1405155903]<br>
<a href="http://netty.io/5.0/api/io/netty/util/AttributeMap.html" class="onebox" target="_blank">http://netty.io/5.0/api/io/netty/util/AttributeMap.html</a><br>
[/quote]<br>
im trying to have one attribute map that I can use for any type, if I only needed the map for one type i wouldn’t need to cast. didn’t know netty had that though, kinda cool[/quote]<img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"> What he linked is pretty much completely irrelevant to this post. It’s an interface used for the channels implementations in netty, and doesn’t really provide anything over a hashmap in this case.</p>
<p>@ OP - I absolutely hate it when I see the player.setAttribute(magic string, value) in a server. I’m not sure what the best alternative is, but at the very least you should be able to eliminate most of this with properly designed content. The only thing it might be slightly useful for is timers to eliminate the need for a bunch of counters in the player class, but even then I’d probably just create a Timers class and have it tick all the timers outside of the player class. If you give me an example of some attributes you want to use this for I’ll explain a better design to use.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/4</link>
        <pubDate>Sat, 12 Jul 2014 09:36:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-4</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="544877">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/greatpea/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> greatpea:</div>
<blockquote>
<p><a href="http://netty.io/5.0/api/io/netty/util/AttributeMap.html" rel="nofollow noopener">http://netty.io/5.0/api/io/netty/util/AttributeMap.html</a></p>
</blockquote>
</aside>
<p>im trying to have one attribute map that I can use for any type, if I only needed the map for one type i wouldn’t need to cast. didn’t know netty had that though, kinda cool</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/3</link>
        <pubDate>Sat, 12 Jul 2014 09:32:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-3</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@greatpea greatpea]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/greatpea">@greatpea</a> wrote:</p>
          <blockquote>
              <p><a href="http://netty.io/5.0/api/io/netty/util/AttributeMap.html" class="onebox" target="_blank" rel="nofollow noopener">http://netty.io/5.0/api/io/netty/util/AttributeMap.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/2</link>
        <pubDate>Sat, 12 Jul 2014 09:05:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-2</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
      <item>
        <title>Is there any way to do this without casting?</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[code=java]package com.asteria.world.entity;</p>
<p>import java.util.HashMap;<br>
import java.util.Map;<br>
import java.util.Objects;</p>
<p>/**</p>
<ul>
<li>
<p>A map of {<a class="mention" href="/u/link">@link</a> String}s that act as keys and {<a class="mention" href="/u/link">@link</a> Object}s that act as</p>
</li>
<li>
<p>values. Attributes can be used to hold data temporarily as an alternative to</p>
</li>
<li>
<p>creating tons of fields. Attributes should be removed once they are no longer</p>
</li>
<li>
<p>in use to free up memory and to reduce the size of the attribute map.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> lare96<br>
*/<br>
public class AttributeMap {</p>
<p>/**</p>
<ul>
<li>The backing attribute map. We don’t give access to the backing map</li>
<li>because there are certain restrictions on key and value types enforced</li>
<li>within this class.<br>
*/<br>
private Map&lt;String, Object&gt; attributes = new HashMap&lt;&gt;(100);</li>
</ul>
<p>/**</p>
<ul>
<li>Adds an attribute to the map.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> key</li>
<li>
<pre><code>       the key for this attribute.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> value</li>
<li>
<pre><code>       the value of this attribute.
</code></pre>
</li>
</ul>
<p>*/<br>
public  void add(String key, T value) {</p>
<pre><code> // Validate both the key and value then add them to the map.
 attributes.put(Objects.requireNonNull(key),
         Objects.requireNonNull(value));
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Adds an undefined amount of keys mapped to the same value.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> value</li>
<li>
<pre><code>       the value to map to the argued keys.
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> key</li>
<li>
<pre><code>       the keys that will be mapped to the argued value.
</code></pre>
</li>
</ul>
<p>*/<br>
public  void add(T value, String… keys) {</p>
<pre><code> // Adds the collection of keys linked to the same value to the map.
 for (String s : keys) {
     add(s, value);
 }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Removes an undefined amount of attributes currently in the map.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> keys</li>
<li>
<pre><code>       the keys of the attributes to remove from the map.
</code></pre>
</li>
</ul>
<p>*/<br>
public void remove(String… keys) {</p>
<pre><code> // Validates, then removes the collection of keys from the map.
 for (String s : keys) {
     attributes.remove(Objects.requireNonNull(s));
 }
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>
<p>Determines if this map contains the specified key.</p>
</li>
<li>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> key</p>
</li>
<li>
<pre><code>       the key to check the backing map for.
</code></pre>
</li>
<li>
<p><a class="mention" href="/u/return">@return</a> true if the map contains the key.<br>
*/<br>
public boolean contains(String key){</p>
<p>// We cannot check for ‘null’ values since ‘null’ is not permitted.<br>
return attributes.containsKey(Objects.requireNonNull(key));<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Gets a value from the map based on the argued key. This method uses</p>
</li>
<li>
<p>casting so the retrieved value should be cached whenever possible.</p>
</li>
<li>
</li>
<li>
<p><a class="mention" href="/u/param">@param</a> key</p>
</li>
<li>
<pre><code>       the key to retrieve the value from.
</code></pre>
</li>
<li>
<p><a class="mention" href="/u/return">@return</a> the retrieved value.<br>
*/<br>
<span class="mention">@SuppressWarnings</span>(“unchecked”)<br>
public  T get(String key){</p>
<p>// We use generics here so the method will take on whatever type<br>
// required. Yes we’re still doing casting but we do it here so we don’t<br>
// have to do it every single time we retrieve a value. If the<br>
// underlying type does not match the value’s type a<br>
// ‘ClassCastException’ will be thrown.<br>
return (T) attributes.get(Objects.requireNonNull(key));<br>
}</p>
</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Clears the entire backing map, erasing all held attributes.<br>
*/<br>
public void clear() {</p>
<p>// Call clear to the backing map.<br>
attributes.clear();<br>
}<br>
}[/code]</p>
</li>
</ul>
</li>
</ul>
<p>more specifically this part</p>
<p>[code=java]    /**<br>
* Gets a value from the map based on the argued key. This method uses<br>
* casting so the retrieved value should be cached whenever possible.<br>
*<br>
* <a class="mention" href="/u/param">@param</a> key<br>
*            the key to retrieve the value from.<br>
* <a class="mention" href="/u/return">@return</a> the retrieved value.<br>
*/<br>
<span class="mention">@SuppressWarnings</span>(“unchecked”)<br>
public  T get(String key){</p>
<pre><code>    // We use generics here so the method will take on whatever type
    // required. If the underlying type does not match the retrieved value's
    // type a 'ClassCastException' will be thrown.
    return (T) attributes.get(Objects.requireNonNull(key));
}[/code]
</code></pre>
<p>is the casting really something I should even be worried about? or are there any completely different alternatives to an attribute system that serves the same purpose? because classes are starting to get really messy with fields that are only used once or twice</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877/1</link>
        <pubDate>Sat, 12 Jul 2014 08:56:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-544877-1</guid>
        <source url="https://forum.moparisthebest.com/t/is-there-any-way-to-do-this-without-casting/544877.rss">Is there any way to do this without casting?</source>
      </item>
  </channel>
</rss>
