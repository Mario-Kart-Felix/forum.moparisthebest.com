<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Server Development Structure Brainstorm</title>
    <link>https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758</link>
    <description>I was kind of hoping for a little advice from the senior developers on this site. 

I have an idea for a structure but i am unsure of how it will play out in reality.

I will try to explain the concept as best as possible.
NOTE: i am using the word [b] interface[/b] as a means of communication between the two components, not its form in Java. It is most likely going to be an abstract class - though not set in stone. It depends on the ammount of functionality i need with each one.
[b]Game To Player Interface(GTPI)[/b] - The means of any task in the server communicating with the player. Will house everything from Stat modification/access to everything about the [current] player. Can be implemented by any Skill/Object/Minigame/Npc as a means to communicate with said player. 

[b]Player To Player Interface(PTPI)[/b] - The means of any player having access to another player&#39;s values within reason. All included methods would be final, and any ability to modify the other player&#39;s values must be written in as part of the implementing class. 
[b]Player To Game Interface(PTGI)[/b] - The means of the player interacting with objects in the game. The player class would hold a static form of this for each of the possible interaction types.(Player To Npc(Attack),Player To Npc(Trade), Player To Object, Etc.)
So 4/8 bytes of memory would be used [in total] for all of the players to have this action.
The server would run on a core foundation of elementary structure. Basic array&#39;s for most storage.
All included skills would be a mixture of static/dynamic methods. The static methods would perform calculations - uniformly based on no information required from the player (it can be passed though). All the dynamic methods would have to do with variables related to the skill. Such as the players current action (Chopping a tree, Mining a rock, Fishing, Etc). The skill classes would implement a Skill Interface(SI) that has elementary methods - used for canceling tasks based on sets of actions.
Things like Fletching will not interpret your walking, but other combinations may- and these overriding methods would give the means of doing just that.
I would like to build it as dynamic as possible so adding/removing stuff works easily with it. They would all use GTPI and PTPI implementations in order to communicate with the world. 

Possibly adding an Npc to Npc interface as well for inter-game relations between them.



My possible design for the TaskManager:
	I would use a HashMap, where each client is the key and would return that client&#39;s list of tasks. So if the client were to log out- there is a means of collecting and nulling their values to avoid a memory leak. 
	TaskKilling would be necessary for certain things such as &quot;Cancel on Walk&quot;
public abstract class PlayerToPlayerInterface {
	public final int getLevel(Player targ,int skillID) {
	//...
	}
	public final int getLevelActual(Player targ,int skillID) {
	//...
	}
	public final int getWeapon(Player targ) {
	//...
	}
	//a method like these for every aspect of a player that could need accessed by others
}
Potential PTPI&#39;s:
	Trading:
		[code=java]
                public class TradeHandler extends PlayerToPlayerInterface {
			public boolean isInTrade(Player p) {
			//...
			}
			public boolean acceptStage(Player a, Player b) {
			//...
			}
			public boolean decline(Player a, Player b) {
			//...
			}
			public boolean offerItem(Player a, Player b) {
			//...
			}
		}[/code]
	Combat: - two separate implementations to handle the different death modes, forms of &quot;loot&quot;
		Wilderness
		Duel
	Following:
		Combat (still should use the same implementation)
		Trailing
	Packets:
		Messages
			Global
			Private
			Local
		PlayerUpdateBlock
		
	
	
	This structure has a lot of usability, I think the code for it would be rather straight forward, the learning curve would be simple enough and also intricate in a form that would allow massive expansions.
	Adding or removing anything for a character would be added to the related PTPI PTGI or GTPI implementation.
	Removing trading would be removing the TradeHandler from the Player class.
	
	public class Player {
		public final static void TradeManager = new TradeHandler();
		public final static void CombatManager = new CombatHandler();//Internal classes referenced based on combat
		//this is what i mean by the 4/8 bytes used in total per Implementation
	}



What pitfalls might i run into in this design?
The task management for recurring tasks is the only thing that still befuddles me.</description>
    
    <lastBuildDate>Sat, 03 May 2014 04:58:24 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Server Development Structure Brainstorm</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>[quote=“lare69, post:2, topic:542758”][quote author=matzie link=topic=661633.msg4422387#msg4422387 date=1399087362]<br>
My possible design for the TaskManager:<br>
I would use a HashMap, where each client is the key and would return that client’s list of tasks. So if the client were to log out- there is a means of collecting and nulling their values to avoid a memory leak.<br>
[/quote]<br>
wat</p>
<p>gonna be honest I didn’t read this thoroughly, but the best way to test out new designs and structures is to actually write them. half the time when I’m writing something I planned out I stop halfway because I thought of a better solution, or realized what I was doing was retarded</p>
<p>good luck[/quote]<br>
HashMap&lt;client,Set&gt;</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/3</link>
        <pubDate>Sat, 03 May 2014 04:58:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542758-3</guid>
        <source url="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758.rss">Server Development Structure Brainstorm</source>
      </item>
      <item>
        <title>Server Development Structure Brainstorm</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[quote=“matzie, post:1, topic:542758”]My possible design for the TaskManager:<br>
I would use a HashMap, where each client is the key and would return that client’s list of tasks. So if the client were to log out- there is a means of collecting and nulling their values to avoid a memory leak.[/quote]<br>
wat</p>
<p>gonna be honest I didn’t read this thoroughly, but the best way to test out new designs and structures is to actually write them. half the time when I’m writing something I planned out I stop halfway because I thought of a better solution, or realized what I was doing was retarded</p>
<p>good luck</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/2</link>
        <pubDate>Sat, 03 May 2014 04:20:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542758-2</guid>
        <source url="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758.rss">Server Development Structure Brainstorm</source>
      </item>
      <item>
        <title>Server Development Structure Brainstorm</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>I was kind of hoping for a little advice from the senior developers on this site.</p>
<p>I have an idea for a structure but i am unsure of how it will play out in reality.</p>
<p>I will try to explain the concept as best as possible.<br>
NOTE: i am using the word <span class="bbcode-b"> interface</span> as a means of communication between the two components, not its form in Java. It is most likely going to be an abstract class - though not set in stone. It depends on the ammount of functionality i need with each one.<br>
<span class="bbcode-b">Game To Player Interface(GTPI)</span> - The means of any task in the server communicating with the player. Will house everything from Stat modification/access to everything about the [current] player. Can be implemented by any Skill/Object/Minigame/Npc as a means to communicate with said player.</p>
<p><span class="bbcode-b">Player To Player Interface(PTPI)</span> - The means of any player having access to another player’s values within reason. All included methods would be final, and any ability to modify the other player’s values must be written in as part of the implementing class.<br>
<span class="bbcode-b">Player To Game Interface(PTGI)</span> - The means of the player interacting with objects in the game. The player class would hold a static form of this for each of the possible interaction types.(Player To Npc(Attack),Player To Npc(Trade), Player To Object, Etc.)<br>
So 4/8 bytes of memory would be used [in total] for all of the players to have this action.<br>
The server would run on a core foundation of elementary structure. Basic array’s for most storage.<br>
All included skills would be a mixture of static/dynamic methods. The static methods would perform calculations - uniformly based on no information required from the player (it can be passed though). All the dynamic methods would have to do with variables related to the skill. Such as the players current action (Chopping a tree, Mining a rock, Fishing, Etc). The skill classes would implement a Skill Interface(SI) that has elementary methods - used for canceling tasks based on sets of actions.<br>
Things like Fletching will not interpret your walking, but other combinations may- and these overriding methods would give the means of doing just that.<br>
I would like to build it as dynamic as possible so adding/removing stuff works easily with it. They would all use GTPI and PTPI implementations in order to communicate with the world.</p>
<p>Possibly adding an Npc to Npc interface as well for inter-game relations between them.</p>
<p>My possible design for the TaskManager:<br>
I would use a HashMap, where each client is the key and would return that client’s list of tasks. So if the client were to log out- there is a means of collecting and nulling their values to avoid a memory leak.<br>
TaskKilling would be necessary for certain things such as "Cancel on Walk"<br>
public abstract class PlayerToPlayerInterface {<br>
public final int getLevel(Player targ,int skillID) {<br>
//…<br>
}<br>
public final int getLevelActual(Player targ,int skillID) {<br>
//…<br>
}<br>
public final int getWeapon(Player targ) {<br>
//…<br>
}<br>
//a method like these for every aspect of a player that could need accessed by others<br>
}<br>
Potential PTPI’s:<br>
Trading:<br>
<code>
                public class TradeHandler extends PlayerToPlayerInterface {
			public boolean isInTrade(Player p) {
			//...
			}
			public boolean acceptStage(Player a, Player b) {
			//...
			}
			public boolean decline(Player a, Player b) {
			//...
			}
			public boolean offerItem(Player a, Player b) {
			//...
			}
		}</code><br>
Combat: - two separate implementations to handle the different death modes, forms of "loot"<br>
Wilderness<br>
Duel<br>
Following:<br>
Combat (still should use the same implementation)<br>
Trailing<br>
Packets:<br>
Messages<br>
Global<br>
Private<br>
Local<br>
PlayerUpdateBlock</p>
<pre><code>This structure has a lot of usability, I think the code for it would be rather straight forward, the learning curve would be simple enough and also intricate in a form that would allow massive expansions.
Adding or removing anything for a character would be added to the related PTPI PTGI or GTPI implementation.
Removing trading would be removing the TradeHandler from the Player class.

public class Player {
	public final static void TradeManager = new TradeHandler();
	public final static void CombatManager = new CombatHandler();//Internal classes referenced based on combat
	//this is what i mean by the 4/8 bytes used in total per Implementation
}
</code></pre>
<p>What pitfalls might i run into in this design?<br>
The task management for recurring tasks is the only thing that still befuddles me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758/1</link>
        <pubDate>Sat, 03 May 2014 03:22:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-542758-1</guid>
        <source url="https://forum.moparisthebest.com/t/server-development-structure-brainstorm/542758.rss">Server Development Structure Brainstorm</source>
      </item>
  </channel>
</rss>
