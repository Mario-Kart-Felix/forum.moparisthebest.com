<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>667 problem</title>
    <link>https://forum.moparisthebest.com/t/667-problem/477720</link>
    <description>ok i went into shop.java how do create a new currency i followed steps but there confusing can some briefly explain in basic terms please and thank you:)</description>
    
    <lastBuildDate>Sun, 06 Jan 2013 17:36:42 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/667-problem/477720.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>667 problem</title>
        <dc:creator><![CDATA[@dfsg dfsg]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dfsg">@dfsg</a> wrote:</p>
          <blockquote>
              <p><a href="http://pastebin.com/NjXU99d2" class="onebox" target="_blank" rel="nofollow noopener">http://pastebin.com/NjXU99d2</a><br>
i pastinbin there you go tyvm:)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-problem/477720/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-problem/477720/5</link>
        <pubDate>Sun, 06 Jan 2013 17:36:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477720-5</guid>
        <source url="https://forum.moparisthebest.com/t/667-problem/477720.rss">667 problem</source>
      </item>
      <item>
        <title>667 problem</title>
        <dc:creator><![CDATA[@aciraccar aciraccar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/aciraccar">@aciraccar</a> wrote:</p>
          <blockquote>
              <p>i dont see the prices .-. try to paste the whole code on <a href="http://pastebin.com" rel="nofollow noopener">pastebin.com</a> or <a href="http://pastehtml.com" rel="nofollow noopener">pastehtml.com</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-problem/477720/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-problem/477720/4</link>
        <pubDate>Sun, 06 Jan 2013 17:28:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477720-4</guid>
        <source url="https://forum.moparisthebest.com/t/667-problem/477720.rss">667 problem</source>
      </item>
      <item>
        <title>667 problem</title>
        <dc:creator><![CDATA[@dfsg dfsg]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dfsg">@dfsg</a> wrote:</p>
          <blockquote>
              <p>i want to add a currency i got file here that like half couldnâ€™t fit rest<br>
thank you for help!<br>
package com.rs.game.player.content;</p>
<p>import java.util.HashMap;<br>
import java.util.concurrent.CopyOnWriteArrayList;</p>
<p>import com.rs.cache.loaders.ItemDefinitions;<br>
import com.rs.game.World;<br>
import com.rs.game.item.Item;<br>
import com.rs.game.player.CombatDefinitions;<br>
import com.rs.game.player.Player;<br>
import com.rs.game.player.Skills;<br>
import com.rs.utils.EconomyPrices;<br>
import com.rs.utils.ItemBonuses;<br>
import com.rs.utils.ItemExamines;<br>
import com.rs.utils.ItemSetsKeyGenerator;</p>
<p>public class Shop {</p>
<pre><code>private static final int MAIN_STOCK_ITEMS_KEY = ItemSetsKeyGenerator
		.generateKey();

private static final int MAX_SHOP_ITEMS = 40;
public static final int COINS = 995;
public static final int SANTA_HAT = 1050;
public int id = 0;

private String name;
private Item[] mainStock;
private int[] defaultQuantity;
private Item[] generalStock;
private int money;
private CopyOnWriteArrayList&lt;Player&gt; viewingPlayers;

public Shop(String name, int money, Item[] mainStock, boolean isGeneralStore, int id) {
	viewingPlayers = new CopyOnWriteArrayList&lt;Player&gt;();
	this.name = name;
	this.money = money;
	this.mainStock = mainStock;
	this.id = id;
	defaultQuantity = new int[mainStock.length];
	for (int i = 0; i &lt; defaultQuantity.length; i++)
		defaultQuantity[i] = mainStock[i].getAmount();
	if (isGeneralStore &amp;&amp; mainStock.length &lt; MAX_SHOP_ITEMS)
		generalStock = new Item[MAX_SHOP_ITEMS - mainStock.length];
}

public boolean isGeneralStore() {
	return generalStock != null;
}

public void buyDung(Player player, int clickSlot, int quantity) {
	int slotId = getSlotId(clickSlot);
	if (slotId &gt;= getStoreSize())
		return;
	Item item = slotId &gt;= mainStock.length ? generalStock[slotId
			- mainStock.length] : mainStock[slotId];
	if (item == null)
		return;
	if (item.getAmount() == 0) {
		player.getPackets().sendGameMessage(
				"There is no stock of that item at the moment.");
		return;
	}
	int dq = slotId &gt;= mainStock.length ? 0 : defaultQuantity[slotId];
	int price = getDungPrice(item, dq);
	int amountCoins = player.toks;
	int maxQuantity = amountCoins / price;
	int buyQ = item.getAmount() &gt; quantity ? quantity : item.getAmount();

	boolean enoughCoins = maxQuantity &gt;= buyQ;
	if (!enoughCoins) {
		player.getPackets().sendGameMessage("You don't have enough Tokens, you have "+player.toks+" tokens.");
		buyQ = maxQuantity;
	} else if (quantity &gt; buyQ)
		player.getPackets().sendGameMessage(
				"The shop has run out of stock.");
	if (item.getDefinitions().isStackable()) {
		if (player.getInventory().getFreeSlots() &lt; 1) {
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
			return;
		}
	} else {
		int freeSlots = player.getInventory().getFreeSlots();
		if (buyQ &gt; freeSlots) {
			buyQ = freeSlots;
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
		}
	}
	if (buyQ != 0) {
		int totalPrice = price * buyQ;
		player.toks -= totalPrice;
		player.getInventory().addItem(item.getId(), buyQ);
		refreshShop();
		sendInventory(player);
	}
}
public void buyVote(Player player, int clickSlot, int quantity) {
	int slotId = getSlotId(clickSlot);
	if (slotId &gt;= getStoreSize())
		return;
	Item item = slotId &gt;= mainStock.length ? generalStock[slotId
			- mainStock.length] : mainStock[slotId];
	if (item == null)
		return;
	if (item.getAmount() == 0) {
		player.getPackets().sendGameMessage(
				"There is no stock of that item at the moment.");
		return;
	}
	int dq = slotId &gt;= mainStock.length ? 0 : defaultQuantity[slotId];
	int price = getVotePrice(item, dq);
	int amountCoins = player.VotePoints;
	int maxQuantity = amountCoins / price;
	int buyQ = item.getAmount() &gt; quantity ? quantity : item.getAmount();

	boolean enoughCoins = maxQuantity &gt;= buyQ;
	if (!enoughCoins) {
		player.getPackets().sendGameMessage("You don't have enough points, you have "+player.VotePoints+" points.");
		buyQ = maxQuantity;
	} else if (quantity &gt; buyQ)
		player.getPackets().sendGameMessage(
				"The shop has run out of stock.");
	if (item.getDefinitions().isStackable()) {
		if (player.getInventory().getFreeSlots() &lt; 1) {
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
			return;
		}
	} else {
		int freeSlots = player.getInventory().getFreeSlots();
		if (buyQ &gt; freeSlots) {
			buyQ = freeSlots;
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
		}
	}
	if (buyQ != 0) {
		int totalPrice = price * buyQ;
		player.VotePoints -= totalPrice;
		player.getInventory().addItem(item.getId(), buyQ);
		refreshShop();
		sendInventory(player);
	}
}

public void addPlayer(final Player player) {
	viewingPlayers.add(player);
	player.getTemporaryAttributtes().put("Shop", this);
	player.setCloseInterfacesEvent(new Runnable() {
		@Override
		public void run() {
			viewingPlayers.remove(player);
			player.getTemporaryAttributtes().remove("Shop");
		}
	});
	player.getPackets().sendConfig(118, MAIN_STOCK_ITEMS_KEY); // sets
																// mainstock
																// items set
	player.getPackets().sendConfig(1496, -1); // sets samples items set
	player.getPackets().sendConfig(532, money);
	sendStore(player);
	player.getPackets().sendGlobalConfig(199, -1);// unknown
	player.getInterfaceManager().sendInterface(620); // opens shop
	for (int i = 0; i &lt; MAX_SHOP_ITEMS; i++)
		player.getPackets().sendGlobalConfig(
				946 + i,
				i &lt; defaultQuantity.length ? defaultQuantity[i]
						: generalStock != null ? 0 : -1);// prices
	player.getPackets().sendGlobalConfig(1241, 16750848);// unknown
	player.getPackets().sendGlobalConfig(1242, 15439903);// unknown
	player.getPackets().sendGlobalConfig(741, -1);// unknown
	player.getPackets().sendGlobalConfig(743, -1);// unknown
	player.getPackets().sendGlobalConfig(744, 0);// unknown
	if (generalStock != null)
		player.getPackets().sendHideIComponent(620, 19, false); // unlocks
																// general
																// store
																// icon
	player.getPackets().sendIComponentSettings(620, 25, 0,
			getStoreSize() * 6, 1150); // unlocks stock slots
	sendInventory(player);
	player.getPackets().sendIComponentText(620, 20, name);
}

public void sendInventory(Player player) {
	player.getInterfaceManager().sendInventoryInterface(621);
	player.getPackets().sendItems(93, player.getInventory().getItems());
	player.getPackets().sendUnlockIComponentOptionSlots(621, 0, 0, 27, 0,
			1, 2, 3, 4, 5);
	player.getPackets().sendInterSetItemsOptionsScript(621, 0, 93, 4, 7,
			"Value", "Sell 1", "Sell 5", "Sell 10", "Sell 50", "Examine");
}

public int getSlotId(int clickSlotId) {
	return clickSlotId / 6;
}

public void buy(Player player, int clickSlot, int quantity) {
	int slotId = getSlotId(clickSlot);
	if (slotId &gt;= getStoreSize())
		return;
	Item item = slotId &gt;= mainStock.length ? generalStock[slotId
			- mainStock.length] : mainStock[slotId];
	if (item == null)
		return;
	if (item.getAmount() == 0) {
		player.getPackets().sendGameMessage(
				"There is no stock of that item at the moment.");
		return;
	}
	int dq = slotId &gt;= mainStock.length ? 0 : defaultQuantity[slotId];
	int price = getBuyPrice(item, dq);
	int amountCoins = player.getInventory().getItems().getNumberOf(money);
	int maxQuantity = amountCoins / price;
	int buyQ = item.getAmount() &gt; quantity ? quantity : item.getAmount();

	boolean enoughCoins = maxQuantity &gt;= buyQ;
	if (!enoughCoins) {
		player.getPackets().sendGameMessage("You don't have enough coins.");
		buyQ = maxQuantity;
	} else if (quantity &gt; buyQ)
		player.getPackets().sendGameMessage(
				"The shop has run out of stock.");
	if (item.getDefinitions().isStackable()) {
		if (player.getInventory().getFreeSlots() &lt; 1) {
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
			return;
		}
	} else {
		int freeSlots = player.getInventory().getFreeSlots();
		if (buyQ &gt; freeSlots) {
			buyQ = freeSlots;
			player.getPackets().sendGameMessage(
					"Not enough space in your inventory.");
		}
	}
	if (buyQ != 0) {
		int totalPrice = price * buyQ;
		player.getInventory().deleteItem(money, totalPrice);
		player.getInventory().addItem(item.getId(), buyQ);
		item.setAmount(item.getAmount() - buyQ);
		if (item.getAmount() &lt;= 0 &amp;&amp; slotId &gt;= mainStock.length)
			generalStock[slotId - mainStock.length] = null;
		refreshShop();
		sendInventory(player);
	}
}

public void restoreItems() {
	boolean needRefresh = false;
	for (int i = 0; i &lt; mainStock.length; i++) {
		if (mainStock[i].getAmount() &lt; defaultQuantity[i]) {
			mainStock[i].setAmount(mainStock[i].getAmount() + 1);
			needRefresh = true;
		} else if (mainStock[i].getAmount() &gt; defaultQuantity[i]) {
			mainStock[i].setAmount(mainStock[i].getAmount() + -1);
			needRefresh = true;
		}
	}
	if (generalStock != null) {
		for (int i = 0; i &lt; generalStock.length; i++) {
			Item item = generalStock[i];
			if (item == null)
				continue;
			item.setAmount(item.getAmount() - 1);
			if (item.getAmount() &lt;= 0)
				generalStock[i] = null;
			needRefresh = true;
		}
	}
	if (needRefresh)
		refreshShop();
}

private boolean addItem(int itemId, int quantity) {
	for (Item item : mainStock) {
		if (item.getId() == itemId) {
			item.setAmount(item.getAmount() + quantity);
			refreshShop();
			return true;
		}
	}
	if (generalStock != null) {
		for (Item item : generalStock) {
			if (item == null)
				continue;
			if (item.getId() == itemId) {
				item.setAmount(item.getAmount() + quantity);
				refreshShop();
				return true;
			}
		}
		for (int i = 0; i &lt; generalStock.length; i++) {
			if (generalStock[i] == null) {
				generalStock[i] = new Item(itemId, quantity);
				refreshShop();
				return true;
			}
		}
	}
	return false;
}


public boolean isSellable(int id){
	int[] nosell = {18347, 18349, 18351, 18353, 18355, 18357, 18359, 
			18361, 18363, 18365, 18367, 18369, 18371, 18373, 
			18333, 18334, 18335, 18337, 19893, 19669, 4084, 18746, 18745, 18744,
			15704, 15703, 15702, 15701, 15444, 15443, 15442, 15441, 21999, 21989,
			21979, 21969, 23952, 23942, 23932, 23922, 23912, 23673, 20929, 22985,
			23805, 10404, 1057, 1055, 1053};
	for (int j: nosell){
		if (j != id){
			continue;
		}else if (j == id){
		return true;
		}
	}
	return false;
}

public void sell(Player player, int slotId, int quantity) {
	if (player.getInventory().getItemsContainerSize() &lt; slotId)
		return;
	Item item = player.getInventory().getItem(slotId);
	if (item == null)	
		return;
	if (isSellable(item.getId())){
		player.sm("Quit trying to bug you moron! -.-");
		World.sendWorldWideMessage(player.getDisplayName()+" was just trying to sell a chaotic to a store!!!!! He is a moron!");
			return;
		}
	int originalId = item.getId();
	if (item.getDefinitions().isNoted())
		item = new Item(item.getDefinitions().getCertId(), item.getAmount());
	if (item.getDefinitions().isDestroyItem()
			|| ItemConstants.getItemDefaultCharges(item.getId()) != -1
			|| !ItemConstants.isTradeable(item) || item.getId() == money) {
		player.getPackets().sendGameMessage("You can't sell this item.");
		return;
	}
	int dq = getDefaultQuantity(item.getId());
	if (dq == 0 &amp;&amp; generalStock == null) {
		player.getPackets().sendGameMessage(
				"You can't sell this item to this shop.");
		return;
	}
	int price = getSellPrice(item, dq);
	int numberOff = player.getInventory().getItems()
			.getNumberOf(originalId);
	if (quantity &gt; numberOff)
		quantity = numberOff;
	if (!addItem(item.getId(), quantity)) {
		player.getPackets().sendGameMessage("Shop is currently full.");
		return;</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-problem/477720/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-problem/477720/3</link>
        <pubDate>Sun, 06 Jan 2013 16:28:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477720-3</guid>
        <source url="https://forum.moparisthebest.com/t/667-problem/477720.rss">667 problem</source>
      </item>
      <item>
        <title>667 problem</title>
        <dc:creator><![CDATA[@Camballer Camballer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/camballer">@Camballer</a> wrote:</p>
          <blockquote>
              <p>Give me the line of the shop that you want to change the currency</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-problem/477720/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-problem/477720/2</link>
        <pubDate>Sun, 06 Jan 2013 16:23:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477720-2</guid>
        <source url="https://forum.moparisthebest.com/t/667-problem/477720.rss">667 problem</source>
      </item>
      <item>
        <title>667 problem</title>
        <dc:creator><![CDATA[@dfsg dfsg]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dfsg">@dfsg</a> wrote:</p>
          <blockquote>
              <p>ok i went into shop.java how do create a new currency i followed steps but there confusing can some briefly explain in basic terms please and thank you:)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-problem/477720/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-problem/477720/1</link>
        <pubDate>Sun, 06 Jan 2013 16:17:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-477720-1</guid>
        <source url="https://forum.moparisthebest.com/t/667-problem/477720.rss">667 problem</source>
      </item>
  </channel>
</rss>
