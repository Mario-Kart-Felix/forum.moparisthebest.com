<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rep++ cache</title>
    <link>https://forum.moparisthebest.com/t/rep-cache/429512</link>
    <description>Can somebody just please help me and help me fix this problem, I&#39;v searched everywhere for a tutorial, asked for help, but I just cannot get this is to work  Whenever my cache downloads, a random zipped folder appears in my cache that has all the files I need in it, it won&#39;t unzip by itself, just manually, I zip my cache by opening my old cache, and zipping all the contents inside, I&#39;m not copying and pasting, the error is that it can&#39;t find the files because they are in that zipped, someone please help. 


Quote
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

   private client client;

   private final int BUFFER = 1024;

   private final int VERSION = 2; // Version of cache
   //private String cacheLink = &quot;&quot;; // Link to cache
   private String cacheLink = &quot;http://www.fileden.com/files/2012/1/11/3250051//HaizScapev1.0Cache.zip&quot;; // Link to cache
   
   private String fileToExtract = getCacheDir() + getArchivedName();

   public CacheDownloader(client client) {
      this.client = client;
   }

   private void drawLoadingText(String text) {
      client.drawLoadingText(35, text);
      //System.out.println(text);
   }


   private void drawLoadingText(int amount, String text) {
      client.drawLoadingText(amount, text);
      //System.out.println(text);
   }

   private String getCacheDir() {
      return signlink.findcachedir();
   }

   private String getCacheLink() {
      return cacheLink;
   }

   private int getCacheVersion() {
      return VERSION;
   }

   public CacheDownloader downloadCache() {
      try {
      File location = new File(getCacheDir());
      File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
      
      if(!location.exists()) {
         //drawLoadingText(&quot;Loading new Updates....&quot;);
         downloadFile(getCacheLink(), getArchivedName());

         unZip();
         //System.out.println(&quot;UNZIP&quot;);

         BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
         versionFile.close();
         deleteZIP(getArchivedName());
      } else {
         if(!version.exists()) {
            //drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
            downloadFile(getCacheLink(), getArchivedName());

            unZip();
            //System.out.println(&quot;UNZIP&quot;);

            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
            versionFile.close();
            deleteZIP(getArchivedName());

         } else {
            return null;
         }
      }
      } catch(Exception e) {

      }
      return null;
   }
   
   private void downloadFile(String adress, String localFileName) {
      OutputStream out = null;
      URLConnection conn;
      InputStream in = null;
      
      try {

         URL url = new URL(adress);
         out = new BufferedOutputStream(
            new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

         conn = url.openConnection();
         in = conn.getInputStream(); 
      
         byte[] data = new byte[BUFFER]; 
   
         int numRead;
         long numWritten = 0;
         int length = conn.getContentLength();

   
         while((numRead = in.read(data)) != -1) {
            out.write(data, 0, numRead);
            numWritten += numRead;

                     int percentage = (int)(((double)numWritten / (double)length) * 100D);
            drawLoadingText(percentage, &quot;Downloading the Cache &quot; + percentage + &quot;%...&quot;);

         }

         System.out.println(localFileName + &quot;\t&quot; + numWritten);
         drawLoadingText(&quot;Unpacking..&quot;);

      } catch (Exception exception) {
         exception.printStackTrace();
      } finally {
         try {
            if (in != null) {
               in.close();
            }
            if (out != null) {
               out.close();
            }
         } catch (IOException ioe) {
         }
      }

   }

   private String getArchivedName() {
      int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
      if (lastSlashIndex &gt;= 0 
         &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
         return getCacheLink().substring(lastSlashIndex + 1);
      } else {
         //System.err.println(&quot;error retreiving archivaed name.&quot;);
      }
      return &quot;&quot;;
   }




   private void unZip() {

      try {
             InputStream in = 
            new BufferedInputStream(new FileInputStream(fileToExtract));
         ZipInputStream zin = new ZipInputStream(in);
         ZipEntry e;

         while((e=zin.getNextEntry()) != null) {

                        if(e.isDirectory()) {
               (new File(getCacheDir() + e.getName())).mkdir();
                        } else {

            if (e.getName().equals(fileToExtract)) {
               unzip(zin, fileToExtract);
               break;
            }
                      unzip(zin, getCacheDir() + e.getName());
            }
            //System.out.println(&quot;unzipping2 &quot; + e.getName());
         }
         zin.close();

      } catch(Exception e) {
         e.printStackTrace();
      }
   }

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

   }

   private void unzip(ZipInputStream zin, String s) 
      throws IOException {

      FileOutputStream out = new FileOutputStream(s);
      //System.out.println(&quot;unzipping &quot; + s);
      byte [] b = new byte[BUFFER];
      int len = 0;

      while ((len = zin.read(b)) != -1) {
         out.write(b,0,len);
      }
      out.close();
   }
}[/quote]</description>
    
    <lastBuildDate>Mon, 16 Jan 2012 18:16:46 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/rep-cache/429512.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rep++ cache</title>
        <dc:creator><![CDATA[@b00mz1029 b00mz1029]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/b00mz1029">@b00mz1029</a> wrote:</p>
          <blockquote>
              <blockquote>import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<p>private client client;</p>
<p>private final int BUFFER = 1024;</p>
<p>private final int VERSION = 2; // Version of cache<br>
//private String cacheLink = “”; // Link to cache<br>
private String cacheLink = “<a href="http://www.fileden.com/files/2012/1/11/3250051//HaizScapev1.0Cache.zip" rel="nofollow noopener">http://www.fileden.com/files/2012/1/11/3250051//HaizScapev1.0Cache.zip</a>”; // Link to cache</p>
<p>private String fileToExtract = getCacheDir() + getArchivedName();</p>
<p>public CacheDownloader(client client) {<br>
this.client = client;<br>
}</p>
<p>private void drawLoadingText(String text) {<br>
client.drawLoadingText(35, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private void drawLoadingText(int amount, String text) {<br>
client.drawLoadingText(amount, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private String getCacheDir() {<br>
return signlink.findcachedir();<br>
}</p>
<p>private String getCacheLink() {<br>
return cacheLink;<br>
}</p>
<p>private int getCacheVersion() {<br>
return VERSION;<br>
}</p>
<p>public CacheDownloader downloadCache() {<br>
try {<br>
File location = new File(getCacheDir());<br>
File version = new File(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”);</p>
<pre><code>  if(!location.exists()) {
     //drawLoadingText("Loading new Updates....");
     downloadFile(getCacheLink(), getArchivedName());

     unZip();
     //System.out.println("UNZIP");

     BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
     versionFile.close();
     deleteZIP(getArchivedName());
  } else {
     if(!version.exists()) {
        //drawLoadingText("~ First Time Installation, Only Once! ~");
        downloadFile(getCacheLink(), getArchivedName());

        unZip();
        //System.out.println("UNZIP");

        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
        versionFile.close();
        deleteZIP(getArchivedName());

     } else {
        return null;
     }
  }
  } catch(Exception e) {

  }
  return null;
</code></pre>
<p>}</p>
<p>private void downloadFile(String adress, String localFileName) {<br>
OutputStream out = null;<br>
URLConnection conn;<br>
InputStream in = null;</p>
<pre><code>  try {

     URL url = new URL(adress);
     out = new BufferedOutputStream(
        new FileOutputStream(getCacheDir() + "/" +localFileName)); 

     conn = url.openConnection();
     in = conn.getInputStream(); 
  
     byte[] data = new byte[BUFFER]; 

     int numRead;
     long numWritten = 0;
     int length = conn.getContentLength();


     while((numRead = in.read(data)) != -1) {
        out.write(data, 0, numRead);
        numWritten += numRead;

                 int percentage = (int)(((double)numWritten / (double)length) * 100D);
        drawLoadingText(percentage, "Downloading the Cache " + percentage + "%...");

     }

     System.out.println(localFileName + "\t" + numWritten);
     drawLoadingText("Unpacking..");

  } catch (Exception exception) {
     exception.printStackTrace();
  } finally {
     try {
        if (in != null) {
           in.close();
        }
        if (out != null) {
           out.close();
        }
     } catch (IOException ioe) {
     }
  }
</code></pre>
<p>}</p>
<p>private String getArchivedName() {<br>
int lastSlashIndex = getCacheLink().lastIndexOf(’/’);<br>
if (lastSlashIndex &gt;= 0<br>
&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {<br>
return getCacheLink().substring(lastSlashIndex + 1);<br>
} else {<br>
<a href="//System.err.println" rel="nofollow noopener">//System.err.println</a>(“error retreiving archivaed name.”);<br>
}<br>
return “”;<br>
}</p>
<p>private void unZip() {</p>
<pre><code>  try {
         InputStream in = 
        new BufferedInputStream(new FileInputStream(fileToExtract));
     ZipInputStream zin = new ZipInputStream(in);
     ZipEntry e;

     while((e=zin.getNextEntry()) != null) {

                    if(e.isDirectory()) {
           (new File(getCacheDir() + e.getName())).mkdir();
                    } else {

        if (e.getName().equals(fileToExtract)) {
           unzip(zin, fileToExtract);
           break;
        }
                  unzip(zin, getCacheDir() + e.getName());
        }
        //System.out.println("unzipping2 " + e.getName());
     }
     zin.close();

  } catch(Exception e) {
     e.printStackTrace();
  }
</code></pre>
<p>}</p>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");
</code></pre>
<p>}</p>
<p>private void unzip(ZipInputStream zin, String s)<br>
throws IOException {</p>
<pre><code>  FileOutputStream out = new FileOutputStream(s);
  //System.out.println("unzipping " + s);
  byte [] b = new byte[BUFFER];
  int len = 0;

  while ((len = zin.read(b)) != -1) {
     out.write(b,0,len);
  }
  out.close();
</code></pre>
<p>}<br>
}</p>
</blockquote>
<p>There</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rep-cache/429512/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rep-cache/429512/3</link>
        <pubDate>Mon, 16 Jan 2012 18:16:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-429512-3</guid>
        <source url="https://forum.moparisthebest.com/t/rep-cache/429512.rss">Rep++ cache</source>
      </item>
      <item>
        <title>Rep++ cache</title>
        <dc:creator><![CDATA[@koomar koomar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/koomar">@koomar</a> wrote:</p>
          <blockquote>
              <p>Use code brackets and i will be able to actually see whats going on to help you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rep-cache/429512/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rep-cache/429512/2</link>
        <pubDate>Mon, 16 Jan 2012 17:53:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-429512-2</guid>
        <source url="https://forum.moparisthebest.com/t/rep-cache/429512.rss">Rep++ cache</source>
      </item>
      <item>
        <title>Rep++ cache</title>
        <dc:creator><![CDATA[@b00mz1029 b00mz1029]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/b00mz1029">@b00mz1029</a> wrote:</p>
          <blockquote>
              <p>Can somebody just please help me and help me fix this problem, I’v searched everywhere for a tutorial, asked for help, but I just cannot get this is to work  Whenever my cache downloads, a random zipped folder appears in my cache that has all the files I need in it, it won’t unzip by itself, just manually, I zip my cache by opening my old cache, and zipping all the contents inside, I’m not copying and pasting, the error is that it can’t find the files because they are in that zipped, someone please help.</p>
<p>Quote<br>
import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<p>private client client;</p>
<p>private final int BUFFER = 1024;</p>
<p>private final int VERSION = 2; // Version of cache<br>
//private String cacheLink = “”; // Link to cache<br>
private String cacheLink = “<a href="http://www.fileden.com/files/2012/1/11/3250051//HaizScapev1.0Cache.zip" rel="nofollow noopener">http://www.fileden.com/files/2012/1/11/3250051//HaizScapev1.0Cache.zip</a>”; // Link to cache</p>
<p>private String fileToExtract = getCacheDir() + getArchivedName();</p>
<p>public CacheDownloader(client client) {<br>
this.client = client;<br>
}</p>
<p>private void drawLoadingText(String text) {<br>
client.drawLoadingText(35, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private void drawLoadingText(int amount, String text) {<br>
client.drawLoadingText(amount, text);<br>
<a href="//System.out.println" rel="nofollow noopener">//System.out.println</a>(text);<br>
}</p>
<p>private String getCacheDir() {<br>
return signlink.findcachedir();<br>
}</p>
<p>private String getCacheLink() {<br>
return cacheLink;<br>
}</p>
<p>private int getCacheVersion() {<br>
return VERSION;<br>
}</p>
<p>public CacheDownloader downloadCache() {<br>
try {<br>
File location = new File(getCacheDir());<br>
File version = new File(getCacheDir() + “/cacheVersion” + getCacheVersion() + “.dat”);</p>
<pre><code>  if(!location.exists()) {
     //drawLoadingText("Loading new Updates....");
     downloadFile(getCacheLink(), getArchivedName());

     unZip();
     //System.out.println("UNZIP");

     BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
     versionFile.close();
     deleteZIP(getArchivedName());
  } else {
     if(!version.exists()) {
        //drawLoadingText("~ First Time Installation, Only Once! ~");
        downloadFile(getCacheLink(), getArchivedName());

        unZip();
        //System.out.println("UNZIP");

        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
        versionFile.close();
        deleteZIP(getArchivedName());

     } else {
        return null;
     }
  }
  } catch(Exception e) {

  }
  return null;
</code></pre>
<p>}</p>
<p>private void downloadFile(String adress, String localFileName) {<br>
OutputStream out = null;<br>
URLConnection conn;<br>
InputStream in = null;</p>
<pre><code>  try {

     URL url = new URL(adress);
     out = new BufferedOutputStream(
        new FileOutputStream(getCacheDir() + "/" +localFileName)); 

     conn = url.openConnection();
     in = conn.getInputStream(); 
  
     byte[] data = new byte[BUFFER]; 

     int numRead;
     long numWritten = 0;
     int length = conn.getContentLength();


     while((numRead = in.read(data)) != -1) {
        out.write(data, 0, numRead);
        numWritten += numRead;

                 int percentage = (int)(((double)numWritten / (double)length) * 100D);
        drawLoadingText(percentage, "Downloading the Cache " + percentage + "%...");

     }

     System.out.println(localFileName + "\t" + numWritten);
     drawLoadingText("Unpacking..");

  } catch (Exception exception) {
     exception.printStackTrace();
  } finally {
     try {
        if (in != null) {
           in.close();
        }
        if (out != null) {
           out.close();
        }
     } catch (IOException ioe) {
     }
  }
</code></pre>
<p>}</p>
<p>private String getArchivedName() {<br>
int lastSlashIndex = getCacheLink().lastIndexOf(’/’);<br>
if (lastSlashIndex &gt;= 0<br>
&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) {<br>
return getCacheLink().substring(lastSlashIndex + 1);<br>
} else {<br>
<a href="//System.err.println" rel="nofollow noopener">//System.err.println</a>(“error retreiving archivaed name.”);<br>
}<br>
return “”;<br>
}</p>
<p>private void unZip() {</p>
<pre><code>  try {
         InputStream in = 
        new BufferedInputStream(new FileInputStream(fileToExtract));
     ZipInputStream zin = new ZipInputStream(in);
     ZipEntry e;

     while((e=zin.getNextEntry()) != null) {

                    if(e.isDirectory()) {
           (new File(getCacheDir() + e.getName())).mkdir();
                    } else {

        if (e.getName().equals(fileToExtract)) {
           unzip(zin, fileToExtract);
           break;
        }
                  unzip(zin, getCacheDir() + e.getName());
        }
        //System.out.println("unzipping2 " + e.getName());
     }
     zin.close();

  } catch(Exception e) {
     e.printStackTrace();
  }
</code></pre>
<p>}</p>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");
</code></pre>
<p>}</p>
<p>private void unzip(ZipInputStream zin, String s)<br>
throws IOException {</p>
<pre><code>  FileOutputStream out = new FileOutputStream(s);
  //System.out.println("unzipping " + s);
  byte [] b = new byte[BUFFER];
  int len = 0;

  while ((len = zin.read(b)) != -1) {
     out.write(b,0,len);
  }
  out.close();
</code></pre>
<p>}<br>
}[/quote]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rep-cache/429512/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rep-cache/429512/1</link>
        <pubDate>Mon, 16 Jan 2012 14:23:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-429512-1</guid>
        <source url="https://forum.moparisthebest.com/t/rep-cache/429512.rss">Rep++ cache</source>
      </item>
  </channel>
</rss>
