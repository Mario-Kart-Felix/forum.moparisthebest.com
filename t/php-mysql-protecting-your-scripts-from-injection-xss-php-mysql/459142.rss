<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</title>
    <link>https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142</link>
    <description>Hello, MoparScape.

Before I done the Dynamic Form tutorial, I said I would do a tutorial on taking user input on board and then making sure your scripts aren&#39;t vulnerable to hacking attempts such as SQL Injection and XSS (Cross Server Scripting) which are two of the most well known attacks that someone can launch on a PHP script. 

Without any more waiting, my 12th tutorial.

[b]Part 1 - Populating your database.[/b]
Okay, so as always we need to populate a database to use with this. Run the following query through your database to populate it correctly.
[code=sql]
CREATE TABLE IF NOT EXISTS `tutorial` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `name` varchar(30) NOT NULL,
 `occupation` varchar(50) NOT NULL,
PRIMARY KEY (`id`)
)
[/code]
Time to explain the code to the people who are just reading this without reading my previous tutorials. Okay, so the first line is you telling the database to create the table &quot;tutorial&quot; if it doesn&#39;t already exist. We then move on to adding the &quot;id&quot; column, which is an integer that can be as big as 11 characters long, it&#39;s a blank value therefore it isnt null, and it&#39;s auto incrementing so we don&#39;t need to assign a value to it. We then add the &quot;name&quot; column which is a variable character of 30 characters long and is a blank value  therefore not nulled. We then move on to our final column, the occupation column. This is a variable character of 50 characters long and is also a blank value which therefore isn&#39;t nulled. We then add the Primary Key of the column &quot;id&quot; which means we will just use &quot;id&quot; for our search methods.

Okay, so you&#39;ve now populated a database with a table and 3 columns, congratulations! Lets move on to our demonstration of MySQL Injection:

[b]Part 2 - MySQL Injection[/b]
Okay, so I&#39;m sure you&#39;ve all heard of this before. It&#39;s a must that you protect your scripts from MySQL Injection because if you don&#39;t, your entire database is at risk to manipulation that isn&#39;t authorized by you. This won&#39;t be following my conventional tutorial technique in the sense that I&#39;ll give you the code and then explain it, I&#39;m going to give you some vulnerable code, then give you the methods to solve it, then give you the repaired and secure code.

HTML Form:
[code=HTML]
&lt;form action=&quot;form.php&quot; method=&quot;POST&quot;&gt;
    &lt;label for=&quot;name&quot; id=&quot;name_label&quot;&gt;Your Name&lt;br /&gt;&lt;/label&gt;  
    &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; size=&quot;30&quot; value=&quot;&quot;/&gt;  
	&lt;br /&gt;
    &lt;label for=&quot;occupation&quot; id=&quot;occupation&quot;&gt;Occupation&lt;br /&gt;&lt;/label&gt;  
    &lt;input type=&quot;text&quot; name=&quot;occupation&quot; id=&quot;occupation&quot; size=&quot;30&quot; value=&quot;&quot;/&gt; 
	&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;&gt; 
&lt;/form&gt;
[/code]

Vulnerable Code:
[code=php]
$database = &quot;tutorial&quot;;
$user = &quot;yourusername&quot;;
$pass = &quot;yourpassword&quot;;
$server = &quot;localhost&quot;;

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$query = mysql_query(&quot;INSERT INTO `tutorial` (`name`, `occupation`) VALUES (&#39;$_POST[name], $_POST[occupation])&quot;);

mysql_close($con);
[/code]

Okay, so now you have the code of the vulnerable class. Basically what MySQL Injection is is that people can insert queries into your box on the form and can manipulate the database and it&#39;s values, even drop the entire database. Okay, so first of all, global variables shouldn&#39;t be directly inserted into any query at all, they should always be changed to regular variables. PHP also comes with a function already in it to stop sql injection - mysql_real_escape_string(), which comes in very handy. To sum up the above, never directly insert global variables into a query and always run your variables through mysql_real_escape_string() before inserting them into a database. Here is the fixed and secure code:
[code=php]

$database = &quot;db&quot;;
$user = &quot;user&quot;;
$pass = &quot;pass&quot;;
$server = &quot;localhost&quot;;

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$name = mysql_real_escape_string($_POST[&#39;name&#39;]);
$occupation = mysql_real_escape_string($_POST[&#39;occupation&#39;]);

$query = mysql_query(&quot;INSERT INTO `tutorial` (`name`, `occupation`) VALUES (&#39;$name&#39;, &#39;$occupation&#39;)&quot;);

mysql_close($con);

[/code]

Okay, so now it&#39;s time to talk through it. You start by declaring your 4 variables relating to the connection of the database. $database, $user, $pass, $server remember that  the server will almost always be localhost. We then connect to the database using mysql_connect(), including the variables $server, $user and $pass and assigning all of this to the $con variable. We then move on to using mysql_select_db() and picking the database we&#39;re going to use, including the variables $database and $con variables. We then get to sanitizing our variables and changing them from global variables to static variables by declaring them as $name and $occupation also, include the global variables inside mysql_real_escape_string() to make sure there&#39;s no sql injection happening. We then host a mysql query by inserting the $name and $occupation variables into our database using mysql_query() and then we finally close our database connection using mysql_close();.

Simple enough to protect your database right?

Lets move on to preventing XSS attacks.

[b]Part 3 - Preventing XSS.[/b]
XSS or Cross Server Scripting is also a very common attack launched on on databases. This is primarily used when someone displays content from a database after it&#39;s been inserted through a form. Such as displaying your latest voters, if they input their username into the box and then once they click submit it shows a table of the last 5 voters, if instead of inputting their name they wrote [code]&lt;script&gt;alert(&quot;moparscape&quot;)&lt;/script&gt;[/code] This would send a popup box to whoever visited the page saying &quot;MoparScape&quot;, but can of course be used for more serious issues.

As I done the last time, I&#39;ll give you the vulnerable code, then the methods to fix it and then the fixed and secured code.

Vulnerable:
[code=html]
&lt;form action=&quot;form_votes.php&quot; method=&quot;POST&quot;&gt;
    &lt;label for=&quot;name&quot; id=&quot;name_label&quot;&gt;Your Name&lt;br /&gt;&lt;/label&gt;  
    &lt;input type=&quot;text&quot; name=&quot;name&quot; id=&quot;name&quot; size=&quot;30&quot; value=&quot;&quot;/&gt;  
	&lt;input type=&quot;submit&quot; name=&quot;submit&quot; value=&quot;Submit&quot;&gt; 
&lt;/form&gt;
[/code]
[b]N.B. The HTML isn&#39;t actually vulnerable, it&#39;s just the form for inputting data.[/b]

[code=php]

$database = &quot;db&quot;;
$user = &quot;user&quot;;
$pass = &quot;pass&quot;;
$server = &quot;localhost&quot;;

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$firstQuery = mysql_query(&quot;INSERT INTO `tutorial` (`name`) VALUES (&#39;$_POST[name]&#39;)&quot;);

$secondQuery = mysql_query(&quot;SELECT `name` FROM `tutorial` ORDER BY `id` DESC&quot;);
while($row = mysql_fetch_assoc($secondQuery)) {
?&gt;

      &lt;table width=&quot;880px&quot; align=&quot;center&quot;&gt;
        &lt;tr&gt;
          &lt;td width=&quot;100%&quot;&gt;&lt;b&gt;&lt;?php echo ($row[&#39;name&#39;]); ?&gt;&lt;b&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

&lt;?php

}

mysql_close($con);
[/code]

Okay, so there&#39;s several ways to stop XSS, but the easiest is to stop the HTML tags that were inserted from working by using htmlspecialchars(). Also, we will be preventing this script from SQL Injection attacks. So if you remember from the last time, we need to stop the global $_POST variables from being global, we also need to make sure there wasn&#39;t an SQL query hidden in the input box. With code like this where it displays something using global variables to begin with, if you visit the actual script itself it will insert a blank value, since the variable has nothing assigned to it so first we have to check if the variable is empty to stop the blank value being posted. So here is the secured code:
[code=php]

$database = &quot;db&quot;;
$user = &quot;user&quot;;
$pass = &quot;pass&quot;;
$server = &quot;localhost&quot;;

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$name = mysql_real_escape_string($_POST[&#39;name&#39;]);

if(empty($_POST[&#39;name&#39;])) {

die();

} else {

$firstQuery = mysql_query(&quot;INSERT INTO `tutorial` (`name`) VALUES (&#39;$name&#39;)&quot;);

$secondQuery = mysql_query(&quot;SELECT `name` FROM `tutorial` ORDER BY `id` DESC LIMIT 5&quot;);
while($row = mysql_fetch_assoc($secondQuery)) {
?&gt;

      &lt;table width=&quot;880px&quot; align=&quot;center&quot;&gt;
        &lt;tr&gt;
          &lt;td width=&quot;100%&quot;&gt;&lt;b&gt;&lt;?php echo htmlspecialchars($row[&#39;name&#39;]); ?&gt;&lt;b&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

&lt;?php

  }
}

mysql_close($con);

[/code]

Okay, so as usual we start  with our 4 connection variables. $database, $user, $pass, $server. We then connect with mysql_connect() and the variables $server, $user, $pass and assign the connection to $con, then we select the database with mysql_select_db() and the variables $db and $con. Now here&#39;s our first part of securing the script, we stop sql attacks by using mysql_real_escape_string() and in this process we assign $_POST[&#39;name&#39;] to $name. We now check if $name is empty using the empty() function supplied by PHP. If $name is empty, the script stops working there but if $name contains a value we proceed onto running our insert query by inserting $name into the name column of the tutorial table. We&#39;re then going on to our second query, $secondQuery. This is where we retrieve the latest voters, well, last 5 voters. We&#39;re selecting the name column from the tutorial table descending by the id and limiting it to 5 values returned. We&#39;re then initiating a while loop retrieving the values using mysql_fetch_assoc() and the $secondQuery variable. And we&#39;re now on to the part where we display the information through a simple table. You&#39;ll notice that inside this table, we have a small PHP statement, using echo and htmlspecialchars() the htmlspecialchars() is what protects us from the XSS attacks as this strips the html tags of their html properties and just echoes them as plain characters. We then end the two open braces we had open and close the connection through mysql_close().

This brings to an end my 12th PHP tutorial, I hope you find it useful and informative on keeping your scripts safe.

I will touch on encryption and decryption between my now and my next 3 tutorials, I have a lot coming up IRL so it may be longer.

Regards,
Ruby.</description>
    
    <lastBuildDate>Sun, 09 Sep 2012 20:47:17 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="459142">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/ecko/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Ecko:</div>
<blockquote>
<p>Good tutorial. Should add a part about persistent and non persistent XSS, since only one actually makes the site vulnerable to cross site scripting.</p>
</blockquote>
</aside>
<p>Thanks for your feedback, Ecko.</p>
<p>I thought about adding it in but I didn’t want to delve too deeply into it for one tutorial and blow the arse out their heads with information. I may include a small piece or a link to a post with the differences for people who can understand it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/3</link>
        <pubDate>Sun, 09 Sep 2012 20:47:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459142-3</guid>
        <source url="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142.rss">[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</source>
      </item>
      <item>
        <title>[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</title>
        <dc:creator><![CDATA[@Ecko Ecko]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ecko">@Ecko</a> wrote:</p>
          <blockquote>
              <p>Good tutorial. Should add a part about persistent and non persistent XSS, since only one actually makes the site vulnerable to cross site scripting.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/2</link>
        <pubDate>Sun, 09 Sep 2012 20:40:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459142-2</guid>
        <source url="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142.rss">[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</source>
      </item>
      <item>
        <title>[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</title>
        <dc:creator><![CDATA[@Ruby_Forums_Coder Ruby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ruby_forums_coder">@Ruby_Forums_Coder</a> wrote:</p>
          <blockquote>
              <p>Hello, MoparScape.</p>
<p>Before I done the Dynamic Form tutorial, I said I would do a tutorial on taking user input on board and then making sure your scripts aren’t vulnerable to hacking attempts such as SQL Injection and XSS (Cross Server Scripting) which are two of the most well known attacks that someone can launch on a PHP script.</p>
<p>Without any more waiting, my 12th tutorial.</p>
<p><span class="bbcode-b">Part 1 - Populating your database.</span><br>
Okay, so as always we need to populate a database to use with this. Run the following query through your database to populate it correctly.</p>
<pre><code class="lang-auto">CREATE TABLE IF NOT EXISTS `tutorial` (
 `id` int(11) NOT NULL AUTO_INCREMENT,
 `name` varchar(30) NOT NULL,
 `occupation` varchar(50) NOT NULL,
PRIMARY KEY (`id`)
)</code></pre>
<p>Time to explain the code to the people who are just reading this without reading my previous tutorials. Okay, so the first line is you telling the database to create the table “tutorial” if it doesn’t already exist. We then move on to adding the “id” column, which is an integer that can be as big as 11 characters long, it’s a blank value therefore it isnt null, and it’s auto incrementing so we don’t need to assign a value to it. We then add the “name” column which is a variable character of 30 characters long and is a blank value  therefore not nulled. We then move on to our final column, the occupation column. This is a variable character of 50 characters long and is also a blank value which therefore isn’t nulled. We then add the Primary Key of the column “id” which means we will just use “id” for our search methods.</p>
<p>Okay, so you’ve now populated a database with a table and 3 columns, congratulations! Lets move on to our demonstration of MySQL Injection:</p>
<p><span class="bbcode-b">Part 2 - MySQL Injection</span><br>
Okay, so I’m sure you’ve all heard of this before. It’s a must that you protect your scripts from MySQL Injection because if you don’t, your entire database is at risk to manipulation that isn’t authorized by you. This won’t be following my conventional tutorial technique in the sense that I’ll give you the code and then explain it, I’m going to give you some vulnerable code, then give you the methods to solve it, then give you the repaired and secure code.</p>
<p>HTML Form:</p>
<pre><code class="lang-auto">&lt;form action="form.php" method="POST"&gt;
    &lt;label for="name" id="name_label"&gt;Your Name&lt;br /&gt;&lt;/label&gt;  
    &lt;input type="text" name="name" id="name" size="30" value=""/&gt;  
	&lt;br /&gt;
    &lt;label for="occupation" id="occupation"&gt;Occupation&lt;br /&gt;&lt;/label&gt;  
    &lt;input type="text" name="occupation" id="occupation" size="30" value=""/&gt; 
	&lt;input type="submit" name="submit" value="Submit"&gt; 
&lt;/form&gt;</code></pre>
<p>Vulnerable Code:</p>
<pre><code class="lang-auto">$database = "tutorial";
$user = "yourusername";
$pass = "yourpassword";
$server = "localhost";

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$query = mysql_query("INSERT INTO `tutorial` (`name`, `occupation`) VALUES ('$_POST[name], $_POST[occupation])");

mysql_close($con);</code></pre>
<p>Okay, so now you have the code of the vulnerable class. Basically what MySQL Injection is is that people can insert queries into your box on the form and can manipulate the database and it’s values, even drop the entire database. Okay, so first of all, global variables shouldn’t be directly inserted into any query at all, they should always be changed to regular variables. PHP also comes with a function already in it to stop sql injection - mysql_real_escape_string(), which comes in very handy. To sum up the above, never directly insert global variables into a query and always run your variables through mysql_real_escape_string() before inserting them into a database. Here is the fixed and secure code:</p>
<pre><code class="lang-auto">
$database = "db";
$user = "user";
$pass = "pass";
$server = "localhost";

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$name = mysql_real_escape_string($_POST['name']);
$occupation = mysql_real_escape_string($_POST['occupation']);

$query = mysql_query("INSERT INTO `tutorial` (`name`, `occupation`) VALUES ('$name', '$occupation')");

mysql_close($con);
</code></pre>
<p>Okay, so now it’s time to talk through it. You start by declaring your 4 variables relating to the connection of the database. $database, $user, $pass, $server remember that  the server will almost always be localhost. We then connect to the database using mysql_connect(), including the variables $server, $user and $pass and assigning all of this to the $con variable. We then move on to using mysql_select_db() and picking the database we’re going to use, including the variables $database and $con variables. We then get to sanitizing our variables and changing them from global variables to static variables by declaring them as $name and $occupation also, include the global variables inside mysql_real_escape_string() to make sure there’s no sql injection happening. We then host a mysql query by inserting the $name and $occupation variables into our database using mysql_query() and then we finally close our database connection using mysql_close();.</p>
<p>Simple enough to protect your database right?</p>
<p>Lets move on to preventing XSS attacks.</p>
<p><span class="bbcode-b">Part 3 - Preventing XSS.</span><br>
XSS or Cross Server Scripting is also a very common attack launched on on databases. This is primarily used when someone displays content from a database after it’s been inserted through a form. Such as displaying your latest voters, if they input their username into the box and then once they click submit it shows a table of the last 5 voters, if instead of inputting their name they wrote <code>&lt;script&gt;alert("moparscape")&lt;/script&gt;</code> This would send a popup box to whoever visited the page saying “MoparScape”, but can of course be used for more serious issues.</p>
<p>As I done the last time, I’ll give you the vulnerable code, then the methods to fix it and then the fixed and secured code.</p>
<p>Vulnerable:</p>
<pre><code class="lang-auto">&lt;form action="form_votes.php" method="POST"&gt;
    &lt;label for="name" id="name_label"&gt;Your Name&lt;br /&gt;&lt;/label&gt;  
    &lt;input type="text" name="name" id="name" size="30" value=""/&gt;  
	&lt;input type="submit" name="submit" value="Submit"&gt; 
&lt;/form&gt;</code></pre>
<p><span class="bbcode-b">N.B. The HTML isn’t actually vulnerable, it’s just the form for inputting data.</span></p>
<pre><code class="lang-auto">
$database = "db";
$user = "user";
$pass = "pass";
$server = "localhost";

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$firstQuery = mysql_query("INSERT INTO `tutorial` (`name`) VALUES ('$_POST[name]')");

$secondQuery = mysql_query("SELECT `name` FROM `tutorial` ORDER BY `id` DESC");
while($row = mysql_fetch_assoc($secondQuery)) {
?&gt;

      &lt;table width="880px" align="center"&gt;
        &lt;tr&gt;
          &lt;td width="100%"&gt;&lt;b&gt;&lt;?php echo ($row['name']); ?&gt;&lt;b&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

&lt;?php

}

mysql_close($con);</code></pre>
<p>Okay, so there’s several ways to stop XSS, but the easiest is to stop the HTML tags that were inserted from working by using htmlspecialchars(). Also, we will be preventing this script from SQL Injection attacks. So if you remember from the last time, we need to stop the global $_POST variables from being global, we also need to make sure there wasn’t an SQL query hidden in the input box. With code like this where it displays something using global variables to begin with, if you visit the actual script itself it will insert a blank value, since the variable has nothing assigned to it so first we have to check if the variable is empty to stop the blank value being posted. So here is the secured code:</p>
<pre><code class="lang-auto">
$database = "db";
$user = "user";
$pass = "pass";
$server = "localhost";

$con = mysql_connect($server, $user, $pass);

mysql_select_db($database, $con);

$name = mysql_real_escape_string($_POST['name']);

if(empty($_POST['name'])) {

die();

} else {

$firstQuery = mysql_query("INSERT INTO `tutorial` (`name`) VALUES ('$name')");

$secondQuery = mysql_query("SELECT `name` FROM `tutorial` ORDER BY `id` DESC LIMIT 5");
while($row = mysql_fetch_assoc($secondQuery)) {
?&gt;

      &lt;table width="880px" align="center"&gt;
        &lt;tr&gt;
          &lt;td width="100%"&gt;&lt;b&gt;&lt;?php echo htmlspecialchars($row['name']); ?&gt;&lt;b&gt;&lt;/td&gt;
        &lt;/tr&gt;
      &lt;/table&gt;

&lt;?php

  }
}

mysql_close($con);
</code></pre>
<p>Okay, so as usual we start  with our 4 connection variables. $database, $user, $pass, $server. We then connect with mysql_connect() and the variables $server, $user, $pass and assign the connection to $con, then we select the database with mysql_select_db() and the variables $db and $con. Now here’s our first part of securing the script, we stop sql attacks by using mysql_real_escape_string() and in this process we assign $_POST[‘name’] to $name. We now check if $name is empty using the empty() function supplied by PHP. If $name is empty, the script stops working there but if $name contains a value we proceed onto running our insert query by inserting $name into the name column of the tutorial table. We’re then going on to our second query, $secondQuery. This is where we retrieve the latest voters, well, last 5 voters. We’re selecting the name column from the tutorial table descending by the id and limiting it to 5 values returned. We’re then initiating a while loop retrieving the values using mysql_fetch_assoc() and the $secondQuery variable. And we’re now on to the part where we display the information through a simple table. You’ll notice that inside this table, we have a small PHP statement, using echo and htmlspecialchars() the htmlspecialchars() is what protects us from the XSS attacks as this strips the html tags of their html properties and just echoes them as plain characters. We then end the two open braces we had open and close the connection through mysql_close().</p>
<p>This brings to an end my 12th PHP tutorial, I hope you find it useful and informative on keeping your scripts safe.</p>
<p>I will touch on encryption and decryption between my now and my next 3 tutorials, I have a lot coming up IRL so it may be longer.</p>
<p>Regards,<br>
Ruby.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142/1</link>
        <pubDate>Sun, 09 Sep 2012 13:38:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-459142-1</guid>
        <source url="https://forum.moparisthebest.com/t/php-mysql-protecting-your-scripts-from-injection-xss-php-mysql/459142.rss">[PHP/MySQL] Protecting Your Scripts From Injection &amp; XSS [PHP/MySQL]</source>
      </item>
  </channel>
</rss>
