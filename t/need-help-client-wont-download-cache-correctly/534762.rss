<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need help client wont download cache correctly :(</title>
    <link>https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762</link>
    <description>So well me and my brother were adding new ico&#39;s to the cache



So we had already updated the cachedownloader.java once then it worked well so we changed the cache again same link etc and now it wont load all the stuff into c;/users etc all that stuff 


then it gives us a error about map.config.txt or something like that =/ so we have to move the cache manualy into the folders so the client can fid em but we need to get the cache download automatically so if some1 can help me solve this :( 


we need it realy bad 



[code]public client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 3;
	//public String cacheLink = &quot;http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip&quot;;
	public String cacheLink = &quot;https://dl.dropboxusercontent.com/s/dj8o8mz3vkrl205/MinescapeCache.rar?dl=1&amp;token_hash=AAHVUj_GU2FJPbHFrupsIUr5o2n_Xb5OxF27LTDdteubvg&quot;;
	public String fileToExtract = getCacheDir() + getArchivedName();
[/code] this is strange :/ it worked for the other months and now it doosnt load al the stuff we get like this:
[IMG]http://i39.tinypic.com/mrskdv.png[/img]





So please please help me :(




cache downloader
[code]import java.io.*;
import java.net.*;
import java.util.zip.*;
import java.util.Enumeration;
import sign.signlink;

public class CacheDownloader {

	public client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 3;
	//public String cacheLink = &quot;http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip&quot;;
	public String cacheLink = &quot;https://dl.dropboxusercontent.com/s/dj8o8mz3vkrl205/MinescapeCache.rar?dl=1&amp;token_hash=AAHVUj_GU2FJPbHFrupsIUr5o2n_Xb5OxF27LTDdteubvg&quot;;
	public String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	public void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}

	public void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	public String getCacheDir() {
		return signlink.findcachedir();
	}

	public String getCacheLink() {
		return cacheLink;
	}

	public int getCacheVersion() {
		return VERSION;
	}
	
	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;);
		if(!location.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			if(!version.exists()) {
				//delete(getCacheDir());
				downloadFile(getCacheLink(), getArchivedName());
				unZip();
				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheUpdate&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteDownloadedZipFile(getArchivedName());
			} else {
				return null;
			}
		}
		} catch(Exception e) {
		}
		return null;
	}
	
	public void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
			conn = url.openConnection();
			in = conn.getInputStream(); 
			byte[] data = new byte[BUFFER]; 
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
            int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
			}
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	public String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
		}
		return &quot;&quot;;
	}
	
	public void deleteDownloadedZipFile(String fileName) {
		File f = new File(getCacheDir() + fileName);
		if (!f.exists())
			throw new IllegalArgumentException(&quot;Delete: no such file or directory: &quot; + fileName);
		if (!f.canWrite())
			throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + fileName);
		if (f.isDirectory()) {
			String[] files = f.list();
		if (files.length &gt; 0)
			throw new IllegalArgumentException(&quot;Delete: directory not empty: &quot; + fileName);
		}
		boolean success = f.delete();
		if (!success)
			throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
	}
	
	public static boolean delete( String path ) {
		if (path == null || path.trim().length() == 0) 
		return false;
		return delete(new File(path));
	}

	public static boolean delete( File fileOrDirectory ) {
		if (fileOrDirectory == null) return false;
		if (!fileOrDirectory.exists()) return false;
		if (fileOrDirectory.isDirectory()) {
			for (File childFile : fileOrDirectory.listFiles()) {
				delete(childFile);
			}
		}
		return fileOrDirectory.delete();
	}

	public void unZip() {
		try {
    		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;
			while((e=zin.getNextEntry()) != null) {
               	if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               	} else {
				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
					unzip(zin, getCacheDir() + e.getName());
				}
			}
			zin.close();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void unzip(ZipInputStream zin, String s) throws IOException {
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len = 0;
		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[code][/code]





Signlink
[code]
package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink
    implements Runnable
{

    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

	public static void setuid() {
	uid = 8;
	}
    public void run()
    {
        active = true;
        String s = findcachedir();
       // uid = getuid(s);
	   uid = 8;
        try {
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++) {
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
			}
        } catch(Exception exception) {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

	public static final String findcachedir() {
		File file;
		File[] drives = File.listRoots();

		/**
		**** Made Client Work on Mac! By Gabbe
		**/
		String HomeIsBaws = System.getProperty(&quot;user.home&quot;);
		String s = &quot;&quot;+HomeIsBaws+&quot;/MinescapeCache/&quot;;
		file = new File(s);
		if(file.exists() || file.mkdirs()) {
			return s + &quot;/&quot;;
		}
		return null;
	}

    public static int getuid(String s) {
	return 8;
    }
	
   /* private static int getuid(String s)
    {
        try
        {
            File file = new File(s + &quot;uid.dat&quot;);
            if(!file.exists() || file.length() &lt; 4L)
            {
                DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + &quot;uid.dat&quot;));
                dataoutputstream.writeInt((int)(Math.random() * 99999999D));
                dataoutputstream.close();
            }
        }
        catch(Exception _ex) { }
        try
        {
            DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + &quot;uid.dat&quot;));
            int i = datainputstream.readInt();
            datainputstream.close();
            return i + 1;
        }
        catch(Exception _ex)
        {
            return 0;
        }
    }*/

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        /*if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }*/
		return false;
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        /*if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }*/
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
   public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}
                        [/code]</description>
    
    <lastBuildDate>Sun, 16 Feb 2014 18:41:36 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need help client wont download cache correctly :(</title>
        <dc:creator><![CDATA[@xX4m4zingXx xX4m4zingXx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx4m4zingxx">@xX4m4zingXx</a> wrote:</p>
          <blockquote>
              <p>and be sure to zip the files inside the cache<br>
and not to zip the cache folder</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/4</link>
        <pubDate>Sun, 16 Feb 2014 18:41:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534762-4</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762.rss">Need help client wont download cache correctly :(</source>
      </item>
      <item>
        <title>Need help client wont download cache correctly :(</title>
        <dc:creator><![CDATA[@nolan2131 nolan2131]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nolan2131">@nolan2131</a> wrote:</p>
          <blockquote>
              <p>Your dropbox link is a 404 error, the files that the cache does load are recognized within the client. Fix your 404 link.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/3</link>
        <pubDate>Sun, 16 Feb 2014 17:44:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534762-3</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762.rss">Need help client wont download cache correctly :(</source>
      </item>
      <item>
        <title>Need help client wont download cache correctly :(</title>
        <dc:creator><![CDATA[@Flipp Flipp]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/flipp">@Flipp</a> wrote:</p>
          <blockquote>
              <p>I see something that may be a problem.</p>
<p>where you have the dropbox link, remove “?dl=1&amp;token_hash=AAHVUj_GU2FJPbHFrupsIUr5o2n_Xb5OxF27LTDdteubvg” from infront of the rest of the link as it is not needed.</p>
<p>Furthermore, try zipping the archive not rarring it. That may help fix the problem.</p>
<p>If the problem persists, I don’t know of much else to do, as I am also getting a Cache Load/Download error</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/2</link>
        <pubDate>Sun, 16 Feb 2014 17:25:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534762-2</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762.rss">Need help client wont download cache correctly :(</source>
      </item>
      <item>
        <title>Need help client wont download cache correctly :(</title>
        <dc:creator><![CDATA[@Skrillex_Craft Skrillex_Craft]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/skrillex_craft">@Skrillex_Craft</a> wrote:</p>
          <blockquote>
              <p>So well me and my brother were adding new ico’s to the cache</p>
<p>So we had already updated the cachedownloader.java once then it worked well so we changed the cache again same link etc and now it wont load all the stuff into c;/users etc all that stuff</p>
<p>then it gives us a error about map.config.txt or something like that =/ so we have to move the cache manualy into the folders so the client can fid em but we need to get the cache download automatically so if some1 can help me solve this <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>we need it realy bad</p>
<p><code>public client client;
	public final int BUFFER = 1024;
	public static final int VERSION = 3;
	//public String cacheLink = "http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip";
	public String cacheLink = "https://dl.dropboxusercontent.com/s/dj8o8mz3vkrl205/MinescapeCache.rar?dl=1&amp;token_hash=AAHVUj_GU2FJPbHFrupsIUr5o2n_Xb5OxF27LTDdteubvg";
	public String fileToExtract = getCacheDir() + getArchivedName();
</code> this is strange <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"> it worked for the other months and now it doosnt load al the stuff we get like this:<br>
<img src="http://i39.tinypic.com/mrskdv.png" alt width="" height=""></p>
<p>So please please help me <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>cache downloader</p>
<p>[code]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;<br>
import java.util.zip.*;<br>
import java.util.Enumeration;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>public client client;
public final int BUFFER = 1024;
public static final int VERSION = 3;
//public String cacheLink = "http://misthalin.org/plugins/roknavmenu/extendedlink/v3/c.zip";
public String cacheLink = "https://dl.dropboxusercontent.com/s/dj8o8mz3vkrl205/MinescapeCache.rar?dl=1&amp;token_hash=AAHVUj_GU2FJPbHFrupsIUr5o2n_Xb5OxF27LTDdteubvg";
public String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

public void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}

public void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

public String getCacheDir() {
	return signlink.findcachedir();
}

public String getCacheLink() {
	return cacheLink;
}

public int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat");
	if(!location.exists()) {
		//delete(getCacheDir());
		downloadFile(getCacheLink(), getArchivedName());
		unZip();
		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteDownloadedZipFile(getArchivedName());
	} else {
		if(!version.exists()) {
			//delete(getCacheDir());
			downloadFile(getCacheLink(), getArchivedName());
			unZip();
			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheUpdate" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteDownloadedZipFile(getArchivedName());
		} else {
			return null;
		}
	}
	} catch(Exception e) {
	}
	return null;
}

public void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(getCacheDir() + "/" +localFileName)); 
		conn = url.openConnection();
		in = conn.getInputStream(); 
		byte[] data = new byte[BUFFER]; 
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
        int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
		}
		drawLoadingText("Finished downloading "+getArchivedName()+"!");
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

public String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
	}
	return "";
}

public void deleteDownloadedZipFile(String fileName) {
	File f = new File(getCacheDir() + fileName);
	if (!f.exists())
		throw new IllegalArgumentException("Delete: no such file or directory: " + fileName);
	if (!f.canWrite())
		throw new IllegalArgumentException("Delete: write protected: " + fileName);
	if (f.isDirectory()) {
		String[] files = f.list();
	if (files.length &gt; 0)
		throw new IllegalArgumentException("Delete: directory not empty: " + fileName);
	}
	boolean success = f.delete();
	if (!success)
		throw new IllegalArgumentException("Delete: deletion failed");
}

public static boolean delete( String path ) {
	if (path == null || path.trim().length() == 0) 
	return false;
	return delete(new File(path));
}

public static boolean delete( File fileOrDirectory ) {
	if (fileOrDirectory == null) return false;
	if (!fileOrDirectory.exists()) return false;
	if (fileOrDirectory.isDirectory()) {
		for (File childFile : fileOrDirectory.listFiles()) {
			delete(childFile);
		}
	}
	return fileOrDirectory.delete();
}

public void unZip() {
	try {
		InputStream in = new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;
		while((e=zin.getNextEntry()) != null) {
           	if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           	} else {
			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
				unzip(zin, getCacheDir() + e.getName());
			}
		}
		zin.close();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public void unzip(ZipInputStream zin, String s) throws IOException {
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len = 0;
	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}<code></code></p>
<p>Signlink</p>
<p>[code]<br>
package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public static void setuid() {
uid = 8;
}
public void run()
{
    active = true;
    String s = findcachedir();
   // uid = getuid(s);
   uid = 8;
    try {
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++) {
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");
		}
    } catch(Exception exception) {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}

public static final String findcachedir() {
	File file;
	File[] drives = File.listRoots();

	/**
	**** Made Client Work on Mac! By Gabbe
	**/
	String HomeIsBaws = System.getProperty("user.home");
	String s = ""+HomeIsBaws+"/MinescapeCache/";
	file = new File(s);
	if(file.exists() || file.mkdirs()) {
		return s + "/";
	}
	return null;
}

public static int getuid(String s) {
return 8;
}
</code></pre>
<p>/* private static int getuid(String s)<br>
{<br>
try<br>
{<br>
File file = new File(s + “uid.dat”);<br>
if(!file.exists() || file.length() &lt; 4L)<br>
{<br>
DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + “uid.dat”));<br>
dataoutputstream.writeInt((int)(Math.random() * 99999999D));<br>
dataoutputstream.close();<br>
}<br>
}<br>
catch(Exception _ex) { }<br>
try<br>
{<br>
DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + “uid.dat”));<br>
int i = datainputstream.readInt();<br>
datainputstream.close();<br>
return i + 1;<br>
}<br>
catch(Exception _ex)<br>
{<br>
return 0;<br>
}<br>
}*/</p>
<pre><code>public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }*/
	return false;
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }*/
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
</code></pre>
<p>public static int uid;<br>
public static int storeid = 32;<br>
public static RandomAccessFile cache_dat = null;<br>
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];<br>
public static boolean sunjava;<br>
public static Applet mainapp = null;<br>
private static boolean active;<br>
private static int threadliveid;<br>
private static InetAddress socketip;<br>
private static int socketreq;<br>
private static Socket socket = null;<br>
private static int threadreqpri = 1;<br>
private static Runnable threadreq = null;<br>
private static String dnsreq = null;<br>
public static String dns = null;<br>
private static String urlreq = null;<br>
private static DataInputStream urlstream = null;<br>
private static int savelen;<br>
private static String savereq = null;<br>
private static byte[] savebuf = null;<br>
private static boolean midiplay;<br>
private static int midipos;<br>
public static String midi = null;<br>
public static int midivol;<br>
public static int midifade;<br>
private static boolean waveplay;<br>
private static int wavepos;<br>
public static int wavevol;<br>
public static boolean reporterror = true;<br>
public static String errorname = “”;</p>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762/1</link>
        <pubDate>Sun, 27 Oct 2013 16:59:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-534762-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-help-client-wont-download-cache-correctly/534762.rss">Need help client wont download cache correctly :(</source>
      </item>
  </channel>
</rss>
