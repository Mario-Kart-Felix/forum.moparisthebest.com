<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Memory Mapped Jar Creation</title>
    <link>https://forum.moparisthebest.com/t/memory-mapped-jar-creation/150880</link>
    <description>[code]
package com.shift.utility;

import java.io.*;
import java.util.jar.*;

/**
 * @author sh!ft
 */
public final class JarCreator {
    private final ByteArrayOutputStream stream;
    private final JarOutputStream jar;

    public JarCreator() throws IOException {
        stream = new ByteArrayOutputStream();
        jar = new JarOutputStream(stream);
    }

    public final void addFile(String name, byte file[]) throws IOException {
        JarEntry entry = new JarEntry(name);
        jar.putNextEntry(entry);
        jar.write(file);
        jar.closeEntry();
    }

    public final byte[] getBytes() throws IOException {
        jar.close();
        return stream.toByteArray();
    }
}
[/code]

Not the most elegant solution, let alone it&#39;s definitely not the safest as you can still call the method that adds to it when the jar is closed... But I&#39;ve heard quite a few people wanted something like this, and when they ask for it they receive a message along the lines of &quot;jar.exe&quot;...</description>
    
    <lastBuildDate>Thu, 11 Oct 2007 09:01:17 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/memory-mapped-jar-creation/150880.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Memory Mapped Jar Creation</title>
        <dc:creator><![CDATA[@sh_ft sh!ft]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sh_ft">@sh_ft</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">package com.shift.utility;

import java.io.*;
import java.util.jar.*;

/**
 * @author sh!ft
 */
public final class JarCreator {
    private final ByteArrayOutputStream stream;
    private final JarOutputStream jar;

    public JarCreator() throws IOException {
        stream = new ByteArrayOutputStream();
        jar = new JarOutputStream(stream);
    }

    public final void addFile(String name, byte file[]) throws IOException {
        JarEntry entry = new JarEntry(name);
        jar.putNextEntry(entry);
        jar.write(file);
        jar.closeEntry();
    }

    public final byte[] getBytes() throws IOException {
        jar.close();
        return stream.toByteArray();
    }
}</code></pre>
<p>Not the most elegant solution, let alone it’s definitely not the safest as you can still call the method that adds to it when the jar is closed… But I’ve heard quite a few people wanted something like this, and when they ask for it they receive a message along the lines of “jar.exe”…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/memory-mapped-jar-creation/150880/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/memory-mapped-jar-creation/150880/1</link>
        <pubDate>Thu, 11 Oct 2007 09:01:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-150880-1</guid>
        <source url="https://forum.moparisthebest.com/t/memory-mapped-jar-creation/150880.rss">Memory Mapped Jar Creation</source>
      </item>
  </channel>
</rss>
