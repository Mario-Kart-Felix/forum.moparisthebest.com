<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Data Encapsulation Explained</title>
    <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519</link>
    <description>[size=12pt][b]This is a very VAGUE concept[/b][/size](poor examples)

[b]Data encapsulation is one of the 4 fundamentals of OOP[/b] (iirc - polymorphism, abstraction, and inheritance are the other three).
 
Encapsulation is used to restrict data inside of classes (such as variables, methods, etc). Public methods like getters and setters and other methods may call them. Data encapsulation is like when you fill a form out at the doctors office and they take the form once you are done filling it out, and they store it in an archive where it can only be accessed with your permission, thus preventing others from taking your information(data) and altering it/misusing it.

The [i]private keyword[/i] specifies when encapsulation will take place, for example.

[code]
public class Person {

	private int age;
	private int height;
	private int weight;
	
	public int getAge() {
		return age;
	}
	
	public int getHeight() {
		return height;
	}
	
	public int getWeight() {
		return weight;
	}
	
	public void setAge(int newAge){
		age = newAge;
	}
	
	public void setHeight(int newHeight) {
		height = newHeight;
	}
	
	public void setWeight(int newWeight) {
		weight = newWeight;
	}
}[/code]

Any code that needs to access these variables
[i]age, height, and weight[/i] 
will use the getters and setters provided above because they are declared with the [i]public keyword[/i] making them accessible by virtually any class.

On another note: variables declared public can be accessed anywhere within your project. Variables declared protected can be accessed only within the class itself and classes in the same &#39;package&#39;. Variables declared as private may only be accessed by its parent class

However,
The above code will not directly accessed because they are completely private fields (also a note about documentation: It&#39;s always good, but in my own opinion documenting private fields is useless because trying to extend it from another class just won&#39;t work, judging from the obvious reasons that they are private...).

[b]What are getters and setters?[/b]

[b][i]setters[/i][/b] an instance method that store a value in an object instance
The advantage of a setters is you can later add code to compress, validate or modify the value, without changing any of the client code. You can also add side effects like logging.
Setters are just a naming convention. Methods that behave like public variables begin with &quot;set&quot; followed by the camel-case name of the internal associated private, variable, e.g. [i]setHeight()[/i]. Setters with a boolean parameter also begin with the letters set e.g. [i]setTall(true);[/i]

[b][i]getters[/i] [/b]
An instance method that methods retrieve a value from an object instance. Getters are just a naming convention. Methods that behave like public variables begin &quot;get&quot; followed by the camel-case name of the internal associated private, variable, e.g. [i]getHeight()[/i]. Getters that return a boolean begin with &quot;is&quot;  e.g. [i]isTall();[/i]
The advantage of a getters is you can later add code to decompress, cache or modify the value, without changing any of the client code. Further, getters can mask the fact the retrieved value is virtual, calculated from other fields.

[b]Data abstraction is[/b], if you take an encapsulated unit like a primitive data type and look at the way you use it/behaves. Also, I believe it&#39;s implementation is hidden as well.

Criticism is wanted :)

Also, 
Many thanks to AtomicInt_ for some pointers.</description>
    
    <lastBuildDate>Tue, 03 Jul 2012 21:57:49 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@Not_a_bot Not_a_bot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/not_a_bot">@Not_a_bot</a> wrote:</p>
          <blockquote>
              <ol>
<li>Encapsulation heavily depends on design. 2. Please change your modifiers…public should be protected. The actual behavior of said Person should be considered ambiguous in this context</li>
</ol>
<p>EDIT: <a href="http://www.oodesign.com/" rel="nofollow noopener">http://www.oodesign.com/</a> - i’ve found to be useful over the years, and can help beginners understand underlying design. A good pattern that would make sense with this is the ‘Observable’ pattern. It may seem like a lot for one to understand as a beginner, but can help in the long run to understand how OOP approaches can be implemented.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/6</link>
        <pubDate>Tue, 03 Jul 2012 21:57:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-6</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="447519">
<div class="title">
<div class="quote-controls"></div>
 Fat Cookies:</div>
<blockquote>
<p>why should any other object be able to modify the age of a person?!?</p>
</blockquote>
</aside>
<p>Only the controlling object can modify the age, not any other objects to ensure that the age will be as accurate as possible</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/5</link>
        <pubDate>Tue, 03 Jul 2012 18:30:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-5</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>I love how this topic is about data encapsulation yet you have a big section on mutator methods.</p>
<p>Getters and Setters just make the programmer think they are “hiding the details of the implementation” but they are not. You may be able to validate input and change the state of the object with them, but you are still exposing the field. It’s a sign of poor design and essentially voids the whole point of encapsulating fields.</p>
<p>I understand your example is just an example but why should any other object be able to modify the age of a person?!? The height and weight are both key properties of the person and should only be controlled by the object. I’m not going to go into alternative designs but the methods in the class should define behaviour, not access to properties.</p>
<p>That probably made no sense.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/4</link>
        <pubDate>Sat, 30 Jun 2012 11:28:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-4</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@iKilem iKilem]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ikilem">@iKilem</a> wrote:</p>
          <blockquote>
              <p>You spelled “vague” wrong ;).</p>
<p>The explanation isn’t that great.</p>
<blockquote>[s]Public methods like getters and setters and other [/s]methods [b]within the class[/b] may [b]access[/b] them.</blockquote>
FTFY. It wasn't very clear. I understand what you're saying when you mention "public methods like getters and setters", but a beginner is likely to be confused, so don't mention it without providing more information before-hand.
<p>A member doesn’t have to be private to be encapsulated. It can be protected, or you can omit the modifier so that it can only be accessed by members of classes belonging to the same package. On that note, contrary to what you said, a protected member can also be accessed by subclasses, and private members cannot be accessed by the parent class.</p>
<p>Data abstraction is basically hiding implementation details. The first thing you said didn’t make much sense.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/3</link>
        <pubDate>Sat, 30 Jun 2012 10:49:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-3</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>No problem. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/2</link>
        <pubDate>Sat, 30 Jun 2012 05:21:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-2</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
      <item>
        <title>Data Encapsulation Explained</title>
        <dc:creator><![CDATA[@Wank Broham]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wank">@Wank</a> wrote:</p>
          <blockquote>
              <p>[size=12pt]<span class="bbcode-b">This is a very VAGUE concept</span>[/size](poor examples)</p>
<p><span class="bbcode-b">Data encapsulation is one of the 4 fundamentals of OOP</span> (iirc - polymorphism, abstraction, and inheritance are the other three).</p>
<p>Encapsulation is used to restrict data inside of classes (such as variables, methods, etc). Public methods like getters and setters and other methods may call them. Data encapsulation is like when you fill a form out at the doctors office and they take the form once you are done filling it out, and they store it in an archive where it can only be accessed with your permission, thus preventing others from taking your information(data) and altering it/misusing it.</p>
<p>The <span class="bbcode-i">private keyword</span> specifies when encapsulation will take place, for example.</p>
<p>[code]<br>
public class Person {</p>
<pre><code>private int age;
private int height;
private int weight;

public int getAge() {
	return age;
}

public int getHeight() {
	return height;
}

public int getWeight() {
	return weight;
}

public void setAge(int newAge){
	age = newAge;
}

public void setHeight(int newHeight) {
	height = newHeight;
}

public void setWeight(int newWeight) {
	weight = newWeight;
}
</code></pre>
<p>}[/code]</p>
<p>Any code that needs to access these variables<br>
<span class="bbcode-i">age, height, and weight</span><br>
will use the getters and setters provided above because they are declared with the <span class="bbcode-i">public keyword</span> making them accessible by virtually any class.</p>
<p>On another note: variables declared public can be accessed anywhere within your project. Variables declared protected can be accessed only within the class itself and classes in the same ‘package’. Variables declared as private may only be accessed by its parent class</p>
<p>However,<br>
The above code will not directly accessed because they are completely private fields (also a note about documentation: It’s always good, but in my own opinion documenting private fields is useless because trying to extend it from another class just won’t work, judging from the obvious reasons that they are private…).</p>
<p><span class="bbcode-b">What are getters and setters?</span></p>
<p><span class="bbcode-b"><span class="bbcode-i">setters</span></span> an instance method that store a value in an object instance<br>
The advantage of a setters is you can later add code to compress, validate or modify the value, without changing any of the client code. You can also add side effects like logging.<br>
Setters are just a naming convention. Methods that behave like public variables begin with “set” followed by the camel-case name of the internal associated private, variable, e.g. <span class="bbcode-i">setHeight()</span>. Setters with a boolean parameter also begin with the letters set e.g. <span class="bbcode-i">setTall(true);</span></p>
<p><span class="bbcode-b"><span class="bbcode-i">getters</span> </span><br>
An instance method that methods retrieve a value from an object instance. Getters are just a naming convention. Methods that behave like public variables begin “get” followed by the camel-case name of the internal associated private, variable, e.g. <span class="bbcode-i">getHeight()</span>. Getters that return a boolean begin with “is”  e.g. <span class="bbcode-i">isTall();</span><br>
The advantage of a getters is you can later add code to decompress, cache or modify the value, without changing any of the client code. Further, getters can mask the fact the retrieved value is virtual, calculated from other fields.</p>
<p><span class="bbcode-b">Data abstraction is</span>, if you take an encapsulated unit like a primitive data type and look at the way you use it/behaves. Also, I believe it’s implementation is hidden as well.</p>
<p>Criticism is wanted <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Also,<br>
Many thanks to AtomicInt_ for some pointers.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/data-encapsulation-explained/447519/1</link>
        <pubDate>Sat, 30 Jun 2012 05:14:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447519-1</guid>
        <source url="https://forum.moparisthebest.com/t/data-encapsulation-explained/447519.rss">Data Encapsulation Explained</source>
      </item>
  </channel>
</rss>
