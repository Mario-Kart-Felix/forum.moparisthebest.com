<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Shard Revolutions - Giving attack xp during combat - help anyone?</title>
    <link>https://forum.moparisthebest.com/t/shard-revolutions-giving-attack-xp-during-combat-help-anyone/278441</link>
    <description>Well I&#39;ve decided to work on this server, and came across the fact the NPC&#39;s during combat do not give xp. So I&#39;ve been working on this problem for a few hours now I&#39;ve check the constants class I&#39;ve looked through the combatmanager class and found the code for it and it looks fine to me.

[code]	

public void resetAttack() {
		isFighting = false;
		if (targetNPC != null) {
			targetNPC.getAttackers().remove(client);
			if (targetNPC.getAttacker() == client) {
				if (targetNPC.getAttackers().entrySet().iterator().hasNext()) {
					targetNPC.setAttacker(targetNPC.getAttackers().entrySet()
							.iterator().next().getKey());
				} else {
					targetNPC.setWalking(targetNPC.isWasWalking());
					targetNPC.setAttacker(null);
				}
			}
			targetNPC = null; // lose our ref
		}
		if(targetPlayer != null) {
			targetPlayer.getCombatManager().attackers.remove(client);
			if(targetPlayer.getCombatManager().attacker == client) {
				targetPlayer.getCombatManager().attacker = null;
				if(targetPlayer.getCombatManager().attackers.entrySet().iterator().hasNext()) {
					targetPlayer.getCombatManager().attacker = targetPlayer.getCombatManager().attackers.entrySet().iterator().next().getKey();
				} else {
					targetPlayer.getCombatManager().resetAttack();
				}
			}
			targetPlayer = null;
		}
	}
	
	public void attackPlayer(int attackplayer) {
		/**
		 * RUN CHECKS
		 */
		if (!isFighting) {
			if (client.checkBusy()) {
				return;
			}
		} else {
			if (targetNPC != null) {
				resetAttack();
			} else if (targetPlayer != null) {
				if(targetPlayer.playerId != attackplayer) {
					resetAttack();
				} else {
					return;
				}
			}
		}
		
		/**
		 * GET PLAYER OBJECT
		 */
		targetPlayer = (Client) Server.getPlayerManager().getPlayers()[attackplayer];
		if(targetPlayer == null) return;
		
		if(wildernessLevel == -1 || targetPlayer.getCombatManager().wildernessLevel == -1) {
			client.getActionAssistant().sendMessage(&quot;You cannot attack other players unless you are in the wilderness.&quot;);
			return;
		}
		int lvldiff = Math.abs(client.getCombatLevel() - targetPlayer.getCombatLevel());
		if(lvldiff &gt;= wildernessLevel) {
			client.getActionAssistant().sendMessage(&quot;Your level difference is too great. Move deeper into the wilderness.&quot;);
			return;
		}
		
		/**
		 * INITIALISE ATTACK
		 */
		isFighting = true;
		
		/**
		 * WE GET FIRST HIT.
		 */
		isMyTurn = true;
		
		final Client myTarget = targetPlayer;
		
		if(targetPlayer.getCombatManager().attacker == null) {
			targetPlayer.getCombatManager().attacker = client;
		}
		
		/**
		 * NOW GET THE EVENT GOING ALREADY
		 */
		EventManager.getSingleton().addEvent(null, new Event() {
			
			@Override
			public void execute(EventContainer container) {
				if (!client.isActive || client.disconnected || !isFighting
						|| targetPlayer != myTarget || targetNPC != null || targetPlayer == null) {
					container.stop();
					return;
				}
				pvpTick(container);
				//if(!counterAttack &amp;&amp; targetPlayer != null) {
					//targetPlayer.getCombatManager().attackPlayer(client.playerId);
					//counterAttack = true;
				//}
				container
						.setTick((int) (getWeaponDelay()));
			}

			@Override
			public void stop() {
				resetAttack();
			}

		}, getWeaponDelay());
	}
/**
	 * Pvp tick.
	 * @param c
	 */
	public void pvpTick(EventContainer c) {
		if(wildernessLevel == -1 || targetPlayer.getCombatManager().wildernessLevel == -1) {
			client.getActionAssistant().sendMessage(&quot;You cannot attack other players unless you are in the wilderness.&quot;);
			resetAttack();
			return;
		}
		int lvldiff = Math.abs(client.getCombatLevel() - targetPlayer.getCombatLevel());
		if(lvldiff &gt;= wildernessLevel) {
			client.getActionAssistant().sendMessage(&quot;Your level difference is too great. Move deeper into the wilderness.&quot;);
			resetAttack();
			return;
		}
		if(!client.withinInteractionDistance(targetPlayer) || client.isDead() || client.didTeleport || targetPlayer.isDead()) {
			resetAttack();
			return;
		}
		if(isMyTurn) {
			client.getActionAssistant().startAnimation(
					AnimationManager.getAttackAnimation(client));
			int hit = (int) Math.ceil(Math.random() * (double) getMaxHit());
			targetPlayer.getActionAssistant().hit(hit, 1);
			Integer hits = targetPlayer.getCombatManager().attackers.get(client);
			if(hits == null) {
				targetPlayer.getCombatManager().attackers.put(client, hit);
			} else {
				targetPlayer.getCombatManager().attackers.put(client, (hits+hit));
			}
			client.getActionAssistant().turnTo(targetPlayer.getAbsX(), targetPlayer.getAbsY());
			if(targetPlayer.getCombatManager().attacker == client) {
				targetPlayer.getActionAssistant().turnTo(client.getAbsX(), client.getAbsY());
				targetPlayer.getActionAssistant().startAnimation(AnimationManager.getDefendAnimation(targetPlayer));
			}
			if (fightType != 3) {
				double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
				client.getActionAssistant().addSkillXP(combatExp, fightSkillID);
				client.getActionAssistant().addSkillXP(hitpointsExp,
						SkillConstants.HITPOINTS);
			} else {
				double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.ATTACK);
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.DEFENCE);
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.STRENGTH);			
				client.getActionAssistant().addSkillXP(hitpointsExp,
						SkillConstants.HITPOINTS);
			}
		} 
		
		NPC npc = targetNPC;
		if(!client.withinInteractionDistance(npc)) {
			resetAttack();
			return;
		}
		if (client.isDead()) {
			resetAttack();
			return;
		}
		if (client.didTeleport || npc.isDead()
				|| !client.withinInteractionDistance(npc)) {
			resetAttack();
			return;
		}
		client.getActionAssistant().turnTo(npc.getAbsX(), npc.getAbsY());
		if (npc.getAttacker() == client) {
			npc.faceTo(client.playerId);
		}
		if (isMyTurn) {
			client.getActionAssistant().startAnimation(
					AnimationManager.getAttackAnimation(client));
			int hit = (int) Math.ceil(Math.random() * (double) getMaxHit());
			if (fightType != 3) {
				double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
				client.getActionAssistant().addSkillXP(combatExp, fightSkillID);
				client.getActionAssistant().addSkillXP(hitpointsExp,
						SkillConstants.HITPOINTS);
			} else {
				double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.ATTACK));
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.DEFENCE);
				client.getActionAssistant().addSkillXP(combatExp,
						SkillConstants.STRENGTH);
				client.getActionAssistant().addSkillXP(hitpointsExp,
						SkillConstants.HITPOINTS);
			}
			npc.hit(client, hit, 1);
			if (npc.getAttacker() == client) {
				npc.setAnimNumber(AnimationManager.getDefendAnimation(npc));
				npc.setAnimUpdateRequired(true);
				npc.setUpdateRequired(true);
			}

		} else {
			if (npc.getAttacker() == client) {
				npc.setAnimNumber(AnimationManager.getAttackAnimation(npc));
				npc.setAnimUpdateRequired(true);
				npc.setUpdateRequired(true);
				int hit = (int) Math.ceil(Math.random()
						* (double) npc.getDefinition().getMaximumHit());
				npc.faceTo(client.playerId);
				client.getActionAssistant().hit(hit, 1);
				client.getActionAssistant().startAnimation(
						AnimationManager.getDefendAnimation(client));
			}
		}
		// thanks hcojustin for pointing this out
		if (doubleHit) {
			doubleHit = false;
			isMyTurn = !isMyTurn;
		} else {
			if (Math.random() &gt; SWAP_FACTOR) {
				isMyTurn = !isMyTurn;
			} else {
				doubleHit = true;
			}
		}
	}

	public void attackNPC(int id) {
		/**
		 * RUN CHECKS
		 */
		if (!isFighting) {
			if (client.checkBusy()) {
				return;
			}
		} else {
			if (targetNPC != null) {
				if (targetNPC.isDead()) {
					resetAttack();
					return;
				}
				if (targetNPC.getNpcId() == id) {
					return;
				} else {
					resetAttack();
				}
			}
		}[/code]

So if anyone can help me here please do. It&#39;s not really urgent or anything so yeah...</description>
    
    <lastBuildDate>Fri, 15 May 2009 03:50:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/shard-revolutions-giving-attack-xp-during-combat-help-anyone/278441.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Shard Revolutions - Giving attack xp during combat - help anyone?</title>
        <dc:creator><![CDATA[@Scully Scully]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scully">@Scully</a> wrote:</p>
          <blockquote>
              <p>Well I’ve decided to work on this server, and came across the fact the NPC’s during combat do not give xp. So I’ve been working on this problem for a few hours now I’ve check the constants class I’ve looked through the combatmanager class and found the code for it and it looks fine to me.</p>
<p>[code]</p>
<p>public void resetAttack() {<br>
isFighting = false;<br>
if (targetNPC != null) {<br>
targetNPC.getAttackers().remove(client);<br>
if (targetNPC.getAttacker() == client) {<br>
if (targetNPC.getAttackers().entrySet().iterator().hasNext()) {<br>
targetNPC.setAttacker(targetNPC.getAttackers().entrySet()<br>
.iterator().next().getKey());<br>
} else {<br>
targetNPC.setWalking(targetNPC.isWasWalking());<br>
targetNPC.setAttacker(null);<br>
}<br>
}<br>
targetNPC = null; // lose our ref<br>
}<br>
if(targetPlayer != null) {<br>
targetPlayer.getCombatManager().attackers.remove(client);<br>
if(targetPlayer.getCombatManager().attacker == client) {<br>
targetPlayer.getCombatManager().attacker = null;<br>
if(targetPlayer.getCombatManager().attackers.entrySet().iterator().hasNext()) {<br>
targetPlayer.getCombatManager().attacker = targetPlayer.getCombatManager().attackers.entrySet().iterator().next().getKey();<br>
} else {<br>
targetPlayer.getCombatManager().resetAttack();<br>
}<br>
}<br>
targetPlayer = null;<br>
}<br>
}</p>
<pre><code>public void attackPlayer(int attackplayer) {
	/**
	 * RUN CHECKS
	 */
	if (!isFighting) {
		if (client.checkBusy()) {
			return;
		}
	} else {
		if (targetNPC != null) {
			resetAttack();
		} else if (targetPlayer != null) {
			if(targetPlayer.playerId != attackplayer) {
				resetAttack();
			} else {
				return;
			}
		}
	}
	
	/**
	 * GET PLAYER OBJECT
	 */
	targetPlayer = (Client) Server.getPlayerManager().getPlayers()[attackplayer];
	if(targetPlayer == null) return;
	
	if(wildernessLevel == -1 || targetPlayer.getCombatManager().wildernessLevel == -1) {
		client.getActionAssistant().sendMessage("You cannot attack other players unless you are in the wilderness.");
		return;
	}
	int lvldiff = Math.abs(client.getCombatLevel() - targetPlayer.getCombatLevel());
	if(lvldiff &gt;= wildernessLevel) {
		client.getActionAssistant().sendMessage("Your level difference is too great. Move deeper into the wilderness.");
		return;
	}
	
	/**
	 * INITIALISE ATTACK
	 */
	isFighting = true;
	
	/**
	 * WE GET FIRST HIT.
	 */
	isMyTurn = true;
	
	final Client myTarget = targetPlayer;
	
	if(targetPlayer.getCombatManager().attacker == null) {
		targetPlayer.getCombatManager().attacker = client;
	}
	
	/**
	 * NOW GET THE EVENT GOING ALREADY
	 */
	EventManager.getSingleton().addEvent(null, new Event() {
		
		@Override
		public void execute(EventContainer container) {
			if (!client.isActive || client.disconnected || !isFighting
					|| targetPlayer != myTarget || targetNPC != null || targetPlayer == null) {
				container.stop();
				return;
			}
			pvpTick(container);
			//if(!counterAttack &amp;&amp; targetPlayer != null) {
				//targetPlayer.getCombatManager().attackPlayer(client.playerId);
				//counterAttack = true;
			//}
			container
					.setTick((int) (getWeaponDelay()));
		}

		@Override
		public void stop() {
			resetAttack();
		}

	}, getWeaponDelay());
}
</code></pre>
<p>/**<br>
* Pvp tick.<br>
* <a class="mention" href="/u/param">@param</a> c<br>
*/<br>
public void pvpTick(EventContainer c) {<br>
if(wildernessLevel == -1 || targetPlayer.getCombatManager().wildernessLevel == -1) {<br>
client.getActionAssistant().sendMessage(“You cannot attack other players unless you are in the wilderness.”);<br>
resetAttack();<br>
return;<br>
}<br>
int lvldiff = Math.abs(client.getCombatLevel() - targetPlayer.getCombatLevel());<br>
if(lvldiff &gt;= wildernessLevel) {<br>
client.getActionAssistant().sendMessage(“Your level difference is too great. Move deeper into the wilderness.”);<br>
resetAttack();<br>
return;<br>
}<br>
if(!client.withinInteractionDistance(targetPlayer) || client.isDead() || client.didTeleport || targetPlayer.isDead()) {<br>
resetAttack();<br>
return;<br>
}<br>
if(isMyTurn) {<br>
client.getActionAssistant().startAnimation(<br>
AnimationManager.getAttackAnimation(client));<br>
int hit = (int) Math.ceil(Math.random() * (double) getMaxHit());<br>
targetPlayer.getActionAssistant().hit(hit, 1);<br>
Integer hits = targetPlayer.getCombatManager().attackers.get(client);<br>
if(hits == null) {<br>
targetPlayer.getCombatManager().attackers.put(client, hit);<br>
} else {<br>
targetPlayer.getCombatManager().attackers.put(client, (hits+hit));<br>
}<br>
client.getActionAssistant().turnTo(targetPlayer.getAbsX(), targetPlayer.getAbsY());<br>
if(targetPlayer.getCombatManager().attacker == client) {<br>
targetPlayer.getActionAssistant().turnTo(client.getAbsX(), client.getAbsY());<br>
targetPlayer.getActionAssistant().startAnimation(AnimationManager.getDefendAnimation(targetPlayer));<br>
}<br>
if (fightType != 3) {<br>
double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);<br>
client.getActionAssistant().addSkillXP(combatExp, fightSkillID);<br>
client.getActionAssistant().addSkillXP(hitpointsExp,<br>
SkillConstants.HITPOINTS);<br>
} else {<br>
double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);<br>
client.getActionAssistant().addSkillXP(combatExp,<br>
SkillConstants.ATTACK);<br>
client.getActionAssistant().addSkillXP(combatExp,<br>
SkillConstants.DEFENCE);<br>
client.getActionAssistant().addSkillXP(combatExp,<br>
SkillConstants.STRENGTH);			<br>
client.getActionAssistant().addSkillXP(hitpointsExp,<br>
SkillConstants.HITPOINTS);<br>
}<br>
}</p>
<pre><code>	NPC npc = targetNPC;
	if(!client.withinInteractionDistance(npc)) {
		resetAttack();
		return;
	}
	if (client.isDead()) {
		resetAttack();
		return;
	}
	if (client.didTeleport || npc.isDead()
			|| !client.withinInteractionDistance(npc)) {
		resetAttack();
		return;
	}
	client.getActionAssistant().turnTo(npc.getAbsX(), npc.getAbsY());
	if (npc.getAttacker() == client) {
		npc.faceTo(client.playerId);
	}
	if (isMyTurn) {
		client.getActionAssistant().startAnimation(
				AnimationManager.getAttackAnimation(client));
		int hit = (int) Math.ceil(Math.random() * (double) getMaxHit());
		if (fightType != 3) {
			double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
			client.getActionAssistant().addSkillXP(combatExp, fightSkillID);
			client.getActionAssistant().addSkillXP(hitpointsExp,
					SkillConstants.HITPOINTS);
		} else {
			double combatExp = (double) (25 * hit), hitpointsExp = (double) (50 * hit);
			client.getActionAssistant().addSkillXP(combatExp,
					SkillConstants.ATTACK));
			client.getActionAssistant().addSkillXP(combatExp,
					SkillConstants.DEFENCE);
			client.getActionAssistant().addSkillXP(combatExp,
					SkillConstants.STRENGTH);
			client.getActionAssistant().addSkillXP(hitpointsExp,
					SkillConstants.HITPOINTS);
		}
		npc.hit(client, hit, 1);
		if (npc.getAttacker() == client) {
			npc.setAnimNumber(AnimationManager.getDefendAnimation(npc));
			npc.setAnimUpdateRequired(true);
			npc.setUpdateRequired(true);
		}

	} else {
		if (npc.getAttacker() == client) {
			npc.setAnimNumber(AnimationManager.getAttackAnimation(npc));
			npc.setAnimUpdateRequired(true);
			npc.setUpdateRequired(true);
			int hit = (int) Math.ceil(Math.random()
					* (double) npc.getDefinition().getMaximumHit());
			npc.faceTo(client.playerId);
			client.getActionAssistant().hit(hit, 1);
			client.getActionAssistant().startAnimation(
					AnimationManager.getDefendAnimation(client));
		}
	}
	// thanks hcojustin for pointing this out
	if (doubleHit) {
		doubleHit = false;
		isMyTurn = !isMyTurn;
	} else {
		if (Math.random() &gt; SWAP_FACTOR) {
			isMyTurn = !isMyTurn;
		} else {
			doubleHit = true;
		}
	}
}

public void attackNPC(int id) {
	/**
	 * RUN CHECKS
	 */
	if (!isFighting) {
		if (client.checkBusy()) {
			return;
		}
	} else {
		if (targetNPC != null) {
			if (targetNPC.isDead()) {
				resetAttack();
				return;
			}
			if (targetNPC.getNpcId() == id) {
				return;
			} else {
				resetAttack();
			}
		}
	}[/code]
</code></pre>
<p>So if anyone can help me here please do. It’s not really urgent or anything so yeah…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/shard-revolutions-giving-attack-xp-during-combat-help-anyone/278441/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/shard-revolutions-giving-attack-xp-during-combat-help-anyone/278441/1</link>
        <pubDate>Fri, 15 May 2009 03:50:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-278441-1</guid>
        <source url="https://forum.moparisthebest.com/t/shard-revolutions-giving-attack-xp-during-combat-help-anyone/278441.rss">Shard Revolutions - Giving attack xp during combat - help anyone?</source>
      </item>
  </channel>
</rss>
