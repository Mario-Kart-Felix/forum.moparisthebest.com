<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lesson 1 - Hello World (GML)</title>
    <link>https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486</link>
    <description>Hello all, I found this site and thought I would start posting :D. I will be posting in depth tutorials about how to program in the GML programming language. If any of you need any help or have any questions please be sure to PM me and I will get back to you as soon as possible.

We will start with a traditional program to demonstrate how to write some simple code. We’re going to create a script that shows the message “Hello World” on the screen.


Creating a simple script:
1. Start a new game.
2. Choose &quot;Create Script&quot; from the Resource menu. The script editor will appear.
3. In the Name box in the toolbar, give the script the name scr_hello.
4. In the editor, type the following piece of code:


[code]{
	show_message(&#39;Hello World&#39;);
}[/code]


5. Press the 10/01 button in the toolbar. This will test the program and display an error message if you made a mistake.
6. Close the editor by clicking the green checkmark in the toolbar.


Note that GameMaker shows parts of the code in different colors. This color-coding helps you know when your code is written correctly. For example, we know that show_message is the correct name for one of GameMaker’s built-in functions because it has turned blue. If we had made a spelling mistake, then it wouldn’t turn blue and we would know something was wrong.


It is also particularly important to give your scripts meaningful names; that way, you can remember what the script does when you use it in an action or some other code.


Before we can see what this code does, we need to execute it. To do so, we must create a new object with a key press event that executes the script.

Executing the script:
1. Create a new object and add a Key press, event to it. Set the key press to Spacebar.
2. Include the Execute Script action (control tab) and select the scr_hello script from the menu. The arguments can all be left at 0 since we do not use arguments in this script (more about these later).
3. Create a room and place one instance of the object in it.


Now run the game and press the spacebar. If you did everything correctly, a message box should pop up containing the text “Hello World”. If you made a mistake in your script, then GameMaker will report an error when the game loads or when the script is executed. If you do get an error, you should check the script carefully for typing errors. Even using an uppercase letter rather than lowercase can cause an error in GML—so take great care.


Now let’s consider what this script does. The first and last lines contain curly brackets. Different kinds of brackets signify different things in GML, and curly brackets mark the beginning and end of a block of code (a bit like the Start Block and End Block actions). However, in GML every program must start with an opening curly bracket and must end with a closing bracket. Curly brackets enclose a block of code. Such blocks of code will also be used later at other places.


The program consists of just one command. Such commands are called statements. A program consists of one or more statements. A statement ends with a semicolon. In this way, GameMaker understands where one statement ends and the next one begins. Don’t forget the semicolons!


The statement in our program is a call to the function show_message(). Functions can be recognized because they have a name and then (optionally) some arguments between the parentheses. Much like actions, functions perform certain tasks. The show_message() function has one argument, which is the text to be displayed; &#39;Hello World&#39; is that argument. Take note of the single quotes around it as they indicate that this is a string (text). Also note that to make functions easier to recognize and to indicate that you typed their name correctly, they are displayed in a dark blue color.


So when the script is executed, the one statement in it is executed, which shows the alert box containing the text that is provided as an argument. Of course, we could have achieved the same thing using the Show Message action. But as we will see later, by using scripts we can do many new things.</description>
    
    <lastBuildDate>Tue, 08 May 2012 21:54:51 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lesson 1 - Hello World (GML)</title>
        <dc:creator><![CDATA[@n-Development n-Development]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/n-development">@n-Development</a> wrote:</p>
          <blockquote>
              <p>Make it more personal with something like:</p>
<p><code>{
     var yourname;
     yourname = get_string('Hello, what is your name?','Enter Name');
     show_message('Hello ' + yourname + ', Welcome to the game');
}</code></p>
<p>Just a suggestion, but I think it looks nicer this way even though you haven’t really talked about variables yet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486/2</link>
        <pubDate>Tue, 08 May 2012 21:54:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440486-2</guid>
        <source url="https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486.rss">Lesson 1 - Hello World (GML)</source>
      </item>
      <item>
        <title>Lesson 1 - Hello World (GML)</title>
        <dc:creator><![CDATA[@MW3_Man MW3 Man]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mw3_man">@MW3_Man</a> wrote:</p>
          <blockquote>
              <p>Hello all, I found this site and thought I would start posting :D. I will be posting in depth tutorials about how to program in the GML programming language. If any of you need any help or have any questions please be sure to PM me and I will get back to you as soon as possible.</p>
<p>We will start with a traditional program to demonstrate how to write some simple code. We’re going to create a script that shows the message “Hello World” on the screen.</p>
<p>Creating a simple script:</p>
<ol>
<li>Start a new game.</li>
<li>Choose “Create Script” from the Resource menu. The script editor will appear.</li>
<li>In the Name box in the toolbar, give the script the name scr_hello.</li>
<li>In the editor, type the following piece of code:</li>
</ol>
<p><code>{
	show_message('Hello World');
}</code></p>
<ol start="5">
<li>Press the 10/01 button in the toolbar. This will test the program and display an error message if you made a mistake.</li>
<li>Close the editor by clicking the green checkmark in the toolbar.</li>
</ol>
<p>Note that GameMaker shows parts of the code in different colors. This color-coding helps you know when your code is written correctly. For example, we know that show_message is the correct name for one of GameMaker’s built-in functions because it has turned blue. If we had made a spelling mistake, then it wouldn’t turn blue and we would know something was wrong.</p>
<p>It is also particularly important to give your scripts meaningful names; that way, you can remember what the script does when you use it in an action or some other code.</p>
<p>Before we can see what this code does, we need to execute it. To do so, we must create a new object with a key press event that executes the script.</p>
<p>Executing the script:</p>
<ol>
<li>Create a new object and add a Key press, event to it. Set the key press to Spacebar.</li>
<li>Include the Execute Script action (control tab) and select the scr_hello script from the menu. The arguments can all be left at 0 since we do not use arguments in this script (more about these later).</li>
<li>Create a room and place one instance of the object in it.</li>
</ol>
<p>Now run the game and press the spacebar. If you did everything correctly, a message box should pop up containing the text “Hello World”. If you made a mistake in your script, then GameMaker will report an error when the game loads or when the script is executed. If you do get an error, you should check the script carefully for typing errors. Even using an uppercase letter rather than lowercase can cause an error in GML—so take great care.</p>
<p>Now let’s consider what this script does. The first and last lines contain curly brackets. Different kinds of brackets signify different things in GML, and curly brackets mark the beginning and end of a block of code (a bit like the Start Block and End Block actions). However, in GML every program must start with an opening curly bracket and must end with a closing bracket. Curly brackets enclose a block of code. Such blocks of code will also be used later at other places.</p>
<p>The program consists of just one command. Such commands are called statements. A program consists of one or more statements. A statement ends with a semicolon. In this way, GameMaker understands where one statement ends and the next one begins. Don’t forget the semicolons!</p>
<p>The statement in our program is a call to the function show_message(). Functions can be recognized because they have a name and then (optionally) some arguments between the parentheses. Much like actions, functions perform certain tasks. The show_message() function has one argument, which is the text to be displayed; ‘Hello World’ is that argument. Take note of the single quotes around it as they indicate that this is a string (text). Also note that to make functions easier to recognize and to indicate that you typed their name correctly, they are displayed in a dark blue color.</p>
<p>So when the script is executed, the one statement in it is executed, which shows the alert box containing the text that is provided as an argument. Of course, we could have achieved the same thing using the Show Message action. But as we will see later, by using scripts we can do many new things.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486/1</link>
        <pubDate>Tue, 24 Apr 2012 04:46:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-440486-1</guid>
        <source url="https://forum.moparisthebest.com/t/lesson-1-hello-world-gml/440486.rss">Lesson 1 - Hello World (GML)</source>
      </item>
  </channel>
</rss>
