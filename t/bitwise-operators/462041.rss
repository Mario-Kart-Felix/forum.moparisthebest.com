<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bitwise operators</title>
    <link>https://forum.moparisthebest.com/t/bitwise-operators/462041</link>
    <description>Some people may have heard of bitwise operators, but don&#39;t know how they work or what they do. I&#39;ll explain it in this simple thread. The explanations are not the best ones, but looking at the example will help you more.

Bitwise operators:

[color=green]The &amp; (AND)[/COLOR]: 

What this does it that it compares two integers. Example:

  1 0 0 0 1 1 0 1
&amp;
  0 1 0 0 1 0 1 1
=
  0 0 0 0 1 0 0 1

It means that it will check for the matching 1&#39;s as shown above in red and put it in the result below if they match, else it will result in a 0.

[color=green]The | (OR)[/COLOR]:

The OR compares yet 2 integers. Example:

  0 1 1 0 1 0 0 1
|
  1 0 1 0 0 1 1 0
=
  1 1 1 0 1 1 1 1

It means that it will check for 1&#39;s in one of the two integer and will put it in the result if one of the 2 integers has one, else it will result in a 0.

The ~ (tilde): 

This is one is pretty simple: it simply converts every 0&#39;s to 1&#39;s and vice-versa. 

~ 1 0 0 0 1 1 0 1
 =
    0 1 1 1 0 0 1 0

[color=green]The ^ (XOR)[/COLOR]: 

This one compares again 2 integers. Example:

 1 0 1 1 0 0 1 0
^
 0 1 1 0 0 1 1 0
= 
 1 1 0 1 0 1 0 0

This one will check if only one of the 2 integers has 1&#39;s and will put 1 as result if not both have 1&#39;s or 0&#39;s. 

[color=green]The &lt;&lt; and &gt;&gt;[/COLOR]:

These ones are from my point of view the easiest to understand. What it does is that it will either shift your bits to the left by adding 0&#39;s at the right, and the same thing for right shift, except that it will shift at right and not add 0&#39;s. Example:

Left bit-shift:

 1 0 0 1 0 1 1 0
&lt;&lt; 6

= 1 0 0 1 0 1 1 0 0 0 0 0 0 0

Notice the 6 0&#39;s at the end? That&#39;s it.

Right bit-shift:

 1 0 0 1 0 1 1 0
&gt;&gt; 6

= 1 0

[color=green]The &gt;&gt;&gt; (Unsigned)[/COLOR]: 

This one is very similar to the normal right bit-shift, except one thing. Example:

 0 1 1 1 1 1 1 1
&gt;&gt; 1

= 1 0 1 1 1 1 1 1

while

 0 1 1 1 1 1 1 1
&gt;&gt;&gt; 1

= 0 0 1 1 1 1 1 1

In this, the first bit will make it so the number is either negative or positive. If it starts with 1, the number will be negative, but if it starts with 0, the number will be positive. In this case, if the unsigned right-shift always add 0&#39;s at the beginning, the value will always be positive. In the case of a byte, a 8 signed-bit will have the capacity -127 to 128, while a 8 unsigned-bit will have the capacity 0 to 255.


That&#39;s it for the moment, I&#39;ll add more content later. If you have any questions, leave them below!</description>
    
    <lastBuildDate>Tue, 25 Sep 2012 16:10:33 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/bitwise-operators/462041.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bitwise operators</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>the operations are on the bits of the integral. 1 0 0 0 1 1 0 1 and  0 1 0 0 1 0 1 1 are two bit strings.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bitwise-operators/462041/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bitwise-operators/462041/3</link>
        <pubDate>Tue, 25 Sep 2012 16:10:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462041-3</guid>
        <source url="https://forum.moparisthebest.com/t/bitwise-operators/462041.rss">Bitwise operators</source>
      </item>
      <item>
        <title>Bitwise operators</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>oh my god, we need a general tutorial section…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bitwise-operators/462041/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bitwise-operators/462041/2</link>
        <pubDate>Tue, 25 Sep 2012 16:08:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462041-2</guid>
        <source url="https://forum.moparisthebest.com/t/bitwise-operators/462041.rss">Bitwise operators</source>
      </item>
      <item>
        <title>Bitwise operators</title>
        <dc:creator><![CDATA[@Hash1 Hash1]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hash1">@Hash1</a> wrote:</p>
          <blockquote>
              <p>Some people may have heard of bitwise operators, but don’t know how they work or what they do. I’ll explain it in this simple thread. The explanations are not the best ones, but looking at the example will help you more.</p>
<p>Bitwise operators:</p>
<p>[color=green]The &amp; (AND)[/COLOR]:</p>
<p>What this does it that it compares two integers. Example:</p>
<h1>1 0 0 0 1 1 0 1<br>
&amp;<br>
0 1 0 0 1 0 1 1</h1>
<p>0 0 0 0 1 0 0 1</p>
<p>It means that it will check for the matching 1’s as shown above in red and put it in the result below if they match, else it will result in a 0.</p>
<p>[color=green]The | (OR)[/COLOR]:</p>
<p>The OR compares yet 2 integers. Example:</p>
<h1>0 1 1 0 1 0 0 1<br>
|<br>
1 0 1 0 0 1 1 0</h1>
<p>1 1 1 0 1 1 1 1</p>
<p>It means that it will check for 1’s in one of the two integer and will put it in the result if one of the 2 integers has one, else it will result in a 0.</p>
<p>The ~ (tilde):</p>
<p>This is one is pretty simple: it simply converts every 0’s to 1’s and vice-versa.</p>
<h1>~ 1 0 0 0 1 1 0 1</h1>
<pre><code>0 1 1 1 0 0 1 0
</code></pre>
<p>[color=green]The ^ (XOR)[/COLOR]:</p>
<p>This one compares again 2 integers. Example:</p>
<h1>1 0 1 1 0 0 1 0<br>
^<br>
0 1 1 0 0 1 1 0</h1>
<p>1 1 0 1 0 1 0 0</p>
<p>This one will check if only one of the 2 integers has 1’s and will put 1 as result if not both have 1’s or 0’s.</p>
<p>[color=green]The &lt;&lt; and &gt;&gt;[/COLOR]:</p>
<p>These ones are from my point of view the easiest to understand. What it does is that it will either shift your bits to the left by adding 0’s at the right, and the same thing for right shift, except that it will shift at right and not add 0’s. Example:</p>
<p>Left bit-shift:</p>
<p>1 0 0 1 0 1 1 0<br>
&lt;&lt; 6</p>
<p>= 1 0 0 1 0 1 1 0 0 0 0 0 0 0</p>
<p>Notice the 6 0’s at the end? That’s it.</p>
<p>Right bit-shift:</p>
<p>1 0 0 1 0 1 1 0</p>
<blockquote>
<blockquote>
<p>6</p>
</blockquote>
</blockquote>
<p>= 1 0</p>
<p>[color=green]The &gt;&gt;&gt; (Unsigned)[/COLOR]:</p>
<p>This one is very similar to the normal right bit-shift, except one thing. Example:</p>
<p>0 1 1 1 1 1 1 1</p>
<blockquote>
<blockquote>
<p>1</p>
</blockquote>
</blockquote>
<p>= 1 0 1 1 1 1 1 1</p>
<p>while</p>
<p>0 1 1 1 1 1 1 1</p>
<blockquote>
<blockquote>
<blockquote>
<p>1</p>
</blockquote>
</blockquote>
</blockquote>
<p>= 0 0 1 1 1 1 1 1</p>
<p>In this, the first bit will make it so the number is either negative or positive. If it starts with 1, the number will be negative, but if it starts with 0, the number will be positive. In this case, if the unsigned right-shift always add 0’s at the beginning, the value will always be positive. In the case of a byte, a 8 signed-bit will have the capacity -127 to 128, while a 8 unsigned-bit will have the capacity 0 to 255.</p>
<p>That’s it for the moment, I’ll add more content later. If you have any questions, leave them below!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bitwise-operators/462041/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bitwise-operators/462041/1</link>
        <pubDate>Tue, 25 Sep 2012 16:06:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-462041-1</guid>
        <source url="https://forum.moparisthebest.com/t/bitwise-operators/462041.rss">Bitwise operators</source>
      </item>
  </channel>
</rss>
