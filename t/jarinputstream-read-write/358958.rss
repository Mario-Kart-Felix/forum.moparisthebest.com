<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>JarInputStream Read/Write</title>
    <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958</link>
    <description>Hey guys, having some trouble here and could really use some help!  I&#39;m attempting to make a small change in the JarInputStream class (java.util.jar) and then prepend it to the bootloader.  All that goes well...except I&#39;m having a problem with the change that I made.

I&#39;m attempting to modify the read(byte[], int, int) function to write to a file as it reads.

Here is the original:
[code=java]    public int read(byte[] b, int off, int len) throws IOException {
	int n;
	if (first == null) {
	    n = super.read(b, off, len);
	} else {
	    n = -1;
	}
	if (jv != null) {
	    jv.update(n, b, off, len, mev);
	}
	return n;
    }[/code]

And here is my modified version:
[code=java]..
	private FileOutputStream fos;
..
	public JarInputStream(InputStream in) throws IOException {
		this(in, true);
		fos = new FileOutputStream(new File(&quot;./jar&quot; + in.toString().split(&quot;@&quot;)[1] + &quot;.jar&quot;));
	}
..
	public int read(byte[] b, int off, int len) throws IOException {
		System.out.println(&quot;Jar Input Stream Read - Offset: &quot; + off + &quot;  Length: &quot; + len);
		int n;
		if (first == null) {
			n = super.read(b, off, len);
		} else {
			n = -1;
		}
		if (jv != null) {
			jv.update(n, b, off, len, mev);
		}
		fos.write(b, off, len); //CHANGE IS HERE!
		return n;
	}[/code]

The problem is that the resulting jar file is massive (usually &gt; 35000KB) and should be much smaller.  Opening it up in WinRAR I can see the classes, however there is also no MANIFEST folder.  Finally, the app I am running this on creates [b]2[/b] JarInputStreams and my change does create a second file for the second one however the file remains empty (0KB).  It is also worth noting that the classes inside the first jar seem like they should be in the second one, and I have no idea where the ones that should be in the first one are.

All really kinda fucked up in other words...and probably a very stupid mistake on my part.</description>
    
    <lastBuildDate>Tue, 07 Sep 2010 21:02:05 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“the bank, post:7, topic:358958”][quote author=super_ link=topic=455451.msg3335339#msg3335339 date=1283834887]<br>
the issue is that he doesn’t LOC headers and he writes decompressed data<br>
[/quote]This is correct, I was writing from JarInputStream which is decompressed and ZipInputStream (super class) is what actually inflates it (thanks super_).</p>
<p>I’ve now got it outputting the jar, but it must not be complete because the java class files don’t have “correct magic”.[/quote]You said that both archives were being dumped to one output file. How is the decompression issue related to that…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/8</link>
        <pubDate>Tue, 07 Sep 2010 21:02:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-8</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“super_, post:6, topic:358958”]the issue is that he doesn’t LOC headers and he writes decompressed data[/quote]This is correct, I was writing from JarInputStream which is decompressed and ZipInputStream (super class) is what actually inflates it (thanks super_).</p>
<p>I’ve now got it outputting the jar, but it must not be complete because the java class files don’t have “correct magic”.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/7</link>
        <pubDate>Tue, 07 Sep 2010 20:29:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-7</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>the issue is that he doesn’t LOC headers and he writes decompressed data</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/6</link>
        <pubDate>Tue, 07 Sep 2010 04:48:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-6</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>Not closing the stream can cause problems because you never actually flush the buffered data. And even if you did flush, it’s not guaranteed that the contents would be synced with the file’s. You should close the stream. And as for where you should do that, override Closeable’s close function and when your application is done with the JarInputStream instances, invoke close on each of them. Regardless, however, I doubt this is the problem since you said the contents of both archives were written into one.</p>
<p>Also, those logs are of no use to me if I don’t see which object instance is performing each operation. As I said before, make it print the stack trace and the object’s hash code along with what you’re already printing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/5</link>
        <pubDate>Mon, 06 Sep 2010 17:42:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-5</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:2, topic:358958”]Do you ever close the file stream? If so, where?</p>
<p>Additionally, at the beginning of your ‘read’ function, print the class’ hash code and the thread’s stack-trace. Post the logs here and the relevant flow of your application in pseudo-code. Without that we can’t really guess what’s wrong.[/quote]See the problem is this is an exercise in reverse engineering (non-RS related).  The application loads several JAR files from its own server and streams them to the application using JarInputStream.  The actual InputStream passed to the constructor is an open-stream to a PHP file.</p>
<p>I simply modified the JarInputStream so that when the application I am trying to reverse (which for the record is heavily obfuscated) connects and reads the JAR file it will also dump it to my local file system.</p>
<p>Here is the full code to my edited class…if it does you guys any good:</p>
<p>[code=java]/*</p>
<ul>
<li>@(#)JarInputStream.java	1.37 06/04/07</li>
<li>
</li>
<li>Copyright 2006 Sun Microsystems, Inc. All rights reserved.</li>
<li>SUN PROPRIETARY/CONFIDENTIAL. Use is subject to license terms.<br>
*/</li>
</ul>
<p>package java.util.jar;</p>
<p>import java.util.zip.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import sun.security.util.ManifestEntryVerifier;</p>
<p>/**</p>
<ul>
<li>
<p>The <code>JarInputStream</code> class is used to read the contents of a JAR</p>
</li>
<li>
<p>file from any input stream. It extends the class</p>
</li>
<li>
<p><code>java.util.zip.ZipInputStream</code> with support for reading an</p>
</li>
<li>
<p>optional <code>Manifest</code> entry. The <code>Manifest</code> can be</p>
</li>
<li>
<p>used to store meta-information about the JAR file and its entries.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> David Connelly</p>
</li>
<li>
<p><a class="mention" href="/u/version">@version</a> 1.37, 04/07/06</p>
</li>
<li>
<p><span class="mention">@see</span> Manifest</p>
</li>
<li>
<p><span class="mention">@see</span> java.util.zip.ZipInputStream</p>
</li>
<li>
<p><span class="mention">@since</span> 1.2<br>
*/<br>
public class JarInputStream extends ZipInputStream {<br>
private Manifest man;</p>
<p>private JarEntry first;</p>
<p>private JarVerifier jv;</p>
<p>private ManifestEntryVerifier mev;</p>
<p>private FileOutputStream fos;</p>
<p>//static int ins = 0;</p>
<p>/**</p>
<ul>
<li>Creates a new <code>JarInputStream</code> and reads the optional</li>
<li>manifest. If a manifest is present, also attempts to verify the</li>
<li>signatures if the JarInputStream is signed.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> in</li>
<li>
<pre><code>       the actual input stream
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IOException</li>
<li>
<pre><code>           if an I/O error has occurred
</code></pre>
</li>
</ul>
<p>*/<br>
public JarInputStream(InputStream in) throws IOException {<br>
this(in, true);<br>
//ins++;<br>
fos = new FileOutputStream(new File("./dump" + in.toString().split("@")[1] + “.jar”));<br>
}</p>
<p>/**</p>
<ul>
<li>Creates a new <code>JarInputStream</code> and reads the optional</li>
<li>manifest. If a manifest is present and verify is true, also attempts to</li>
<li>verify the signatures if the JarInputStream is signed.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> in</li>
<li>
<pre><code>       the actual input stream
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> verify</li>
<li>
<pre><code>       whether or not to verify the JarInputStream if it is signed.
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IOException</li>
<li>
<pre><code>           if an I/O error has occurred
</code></pre>
</li>
</ul>
<p>*/<br>
public JarInputStream(InputStream in, boolean verify) throws IOException {<br>
super(in);<br>
JarEntry e = (JarEntry) super.getNextEntry();</p>
<pre><code> if (e != null &amp;&amp; e.getName().equalsIgnoreCase("META-INF/"))
 	e = (JarEntry) super.getNextEntry();

 if (e != null &amp;&amp; JarFile.MANIFEST_NAME.equalsIgnoreCase(e.getName())) {
 	man = new Manifest();
 	byte bytes[] = getBytes(new BufferedInputStream(this));
 	man.read(new ByteArrayInputStream(bytes));
 	// man.read(new BufferedInputStream(this));
 	closeEntry();
 	if (verify) {
 		jv = new JarVerifier(bytes);
 		mev = new ManifestEntryVerifier(man);
 	}
 	first = getNextJarEntry();
 } else {
 	first = e;
 }
</code></pre>
<p>}</p>
<p>private byte[] getBytes(InputStream is) throws IOException {<br>
byte[] buffer = new byte[8192];<br>
ByteArrayOutputStream baos = new ByteArrayOutputStream(2048);</p>
<pre><code> int n;

 baos.reset();
 while ((n = is.read(buffer, 0, buffer.length)) != -1) {
 	baos.write(buffer, 0, n);
 }
 return baos.toByteArray();
</code></pre>
<p>}</p>
<p>/**</p>
<ul>
<li>Returns the <code>Manifest</code> for this JAR file, or</li>
<li>
<code>null</code> if none.</li>
<li>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the <code>Manifest</code> for this JAR file, or</li>
<li>
<pre><code>    &lt;code&gt;null&lt;/code&gt; if none.
</code></pre>
</li>
</ul>
<p>*/<br>
public Manifest getManifest() {<br>
return man;<br>
}</p>
<p>/**</p>
<ul>
<li>Reads the next ZIP file entry and positions the stream at the beginning</li>
<li>of the entry data. If verification has been enabled, any invalid</li>
<li>signature detected while positioning the stream for the next entry will</li>
<li>result in an exception.</li>
<li>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> ZipException</li>
<li>
<pre><code>           if a ZIP file error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IOException</li>
<li>
<pre><code>           if an I/O error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> SecurityException</li>
<li>
<pre><code>           if any of the jar file entries are incorrectly signed.
</code></pre>
</li>
</ul>
<p>*/<br>
public ZipEntry getNextEntry() throws IOException {<br>
JarEntry e;<br>
if (first == null) {<br>
e = (JarEntry) super.getNextEntry();<br>
} else {<br>
e = first;<br>
first = null;<br>
}<br>
if (jv != null &amp;&amp; e != null) {<br>
// At this point, we might have parsed all the meta-inf<br>
// entries and have nothing to verify. If we have<br>
// nothing to verify, get rid of the JarVerifier object.<br>
if (jv.nothingToVerify() == true) {<br>
jv = null;<br>
mev = null;<br>
} else {<br>
jv.beginEntry(e, mev);<br>
}<br>
}<br>
return e;<br>
}</p>
<p>/**</p>
<ul>
<li>Reads the next JAR file entry and positions the stream at the beginning</li>
<li>of the entry data. If verification has been enabled, any invalid</li>
<li>signature detected while positioning the stream for the next entry will</li>
<li>result in an exception.</li>
<li>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the next JAR file entry, or null if there are no more entries</li>
<li>
<a class="mention" href="/u/exception">@exception</a> ZipException</li>
<li>
<pre><code>           if a ZIP file error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IOException</li>
<li>
<pre><code>           if an I/O error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> SecurityException</li>
<li>
<pre><code>           if any of the jar file entries are incorrectly signed.
</code></pre>
</li>
</ul>
<p>*/<br>
public JarEntry getNextJarEntry() throws IOException {<br>
return (JarEntry) getNextEntry();<br>
}</p>
<p>/**</p>
<ul>
<li>Reads from the current JAR file entry into an array of bytes. If</li>
<li>
<code>len</code> is not zero, the method blocks until some input is</li>
<li>available; otherwise, no bytes are read and <code>0</code> is returned.</li>
<li>If verification has been enabled, any invalid signature on the current</li>
<li>entry will be reported at some point before the end of the entry is</li>
<li>reached.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> b</li>
<li>
<pre><code>       the buffer into which the data is read
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> off</li>
<li>
<pre><code>       the start offset in the destination array &lt;code&gt;b&lt;/code&gt;
</code></pre>
</li>
<li>
<a class="mention" href="/u/param">@param</a> len</li>
<li>
<pre><code>       the maximum number of bytes to read
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the actual number of bytes read, or -1 if the end of the entry is</li>
<li>
<pre><code>    reached
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> NullPointerException</li>
<li>
<pre><code>           If &lt;code&gt;b&lt;/code&gt; is &lt;code&gt;null&lt;/code&gt;.
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IndexOutOfBoundsException</li>
<li>
<pre><code>           If &lt;code&gt;off&lt;/code&gt; is negative, &lt;code&gt;len&lt;/code&gt; is
</code></pre>
</li>
<li>
<pre><code>           negative, or &lt;code&gt;len&lt;/code&gt; is greater than
</code></pre>
</li>
<li>
<pre><code>           &lt;code&gt;b.length - off&lt;/code&gt;
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> ZipException</li>
<li>
<pre><code>           if a ZIP file error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IOException</li>
<li>
<pre><code>           if an I/O error has occurred
</code></pre>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> SecurityException</li>
<li>
<pre><code>           if any of the jar file entries are incorrectly signed.
</code></pre>
</li>
</ul>
<p>*/<br>
public int read(byte[] b, int off, int len) throws IOException {<br>
System.out.println("Jar Input Stream Read - Offset: " + off + "  Length: " + len);<br>
int n;<br>
if (first == null) {<br>
n = super.read(b, off, len);<br>
} else {<br>
n = -1;<br>
}<br>
if (jv != null) {<br>
jv.update(n, b, off, len, mev);<br>
}<br>
fos.write(b, off, len);<br>
return n;<br>
}</p>
<p>/**</p>
<ul>
<li>Creates a new <code>JarEntry</code> (<code>ZipEntry</code>) for the</li>
<li>specified JAR file entry name. The manifest attributes of the specified</li>
<li>JAR file entry name will be copied to the new <code>JarEntry</code>.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> name</li>
<li>
<pre><code>       the name of the JAR/ZIP file entry
</code></pre>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the <code>JarEntry</code> object just created<br>
*/<br>
protected ZipEntry createZipEntry(String name) {<br>
JarEntry e = new JarEntry(name);<br>
if (man != null) {<br>
e.attr = man.getAttributes(name);<br>
}<br>
return e;<br>
}<br>
}<br>
[/code]<br>
The only changes I made are pointed out in my first post.</li>
</ul>
</li>
</ul>
<p>Secondly, no I do not close the file stream…just realized that :/.  But come to think of it, it really shouldn’t cause this kind of problem and even if I were to close it I’m not sure where I should do it.</p>
<p>Finally, the application also reads the JAR file from the server in what seems to be chunks.  Here is an output when I put in a print statement for everytime “read” is called:</p>
<p><code>Jar Input Stream Read - Offset: 0  Length: 195051
Jar Input Stream Read - Offset: 488  Length: 194563
Jar Input Stream Read - Offset: 1000  Length: 194051
Jar Input Stream Read - Offset: 1511  Length: 193540
Jar Input Stream Read - Offset: 2024  Length: 193027
Jar Input Stream Read - Offset: 2536  Length: 192515
Jar Input Stream Read - Offset: 3048  Length: 192003
Jar Input Stream Read - Offset: 3601  Length: 191450
Jar Input Stream Read - Offset: 4171  Length: 190880
Jar Input Stream Read - Offset: 4745  Length: 190306
Jar Input Stream Read - Offset: 5314  Length: 189737
Jar Input Stream Read - Offset: 5899  Length: 189152
Jar Input Stream Read - Offset: 6476  Length: 188575
Jar Input Stream Read - Offset: 7049  Length: 188002
Jar Input Stream Read - Offset: 7561  Length: 187490
Jar Input Stream Read - Offset: 8135  Length: 186916
Jar Input Stream Read - Offset: 8471  Length: 186580
Jar Input Stream Read - Offset: 8983  Length: 186068
Jar Input Stream Read - Offset: 9494  Length: 185557
Jar Input Stream Read - Offset: 10006  Length: 185045
Jar Input Stream Read - Offset: 10576  Length: 184475
Jar Input Stream Read - Offset: 11088  Length: 183963
Jar Input Stream Read - Offset: 11600  Length: 183451
Jar Input Stream Read - Offset: 12167  Length: 182884
Jar Input Stream Read - Offset: 12736  Length: 182315
Jar Input Stream Read - Offset: 13250  Length: 181801
Jar Input Stream Read - Offset: 13815  Length: 181236
Jar Input Stream Read - Offset: 14326  Length: 180725
Jar Input Stream Read - Offset: 14838  Length: 180213
Jar Input Stream Read - Offset: 15402  Length: 179649
Jar Input Stream Read - Offset: 15914  Length: 179137
Jar Input Stream Read - Offset: 16480  Length: 178571
Jar Input Stream Read - Offset: 16800  Length: 178251
Jar Input Stream Read - Offset: 17369  Length: 177682
Jar Input Stream Read - Offset: 17880  Length: 177171
Jar Input Stream Read - Offset: 18448  Length: 176603
Jar Input Stream Read - Offset: 18960  Length: 176091
Jar Input Stream Read - Offset: 19472  Length: 175579
Jar Input Stream Read - Offset: 19984  Length: 175067
Jar Input Stream Read - Offset: 20554  Length: 174497
Jar Input Stream Read - Offset: 21065  Length: 173986
Jar Input Stream Read - Offset: 21640  Length: 173411
Jar Input Stream Read - Offset: 22209  Length: 172842
Jar Input Stream Read - Offset: 22720  Length: 172331
Jar Input Stream Read - Offset: 23232  Length: 171819
Jar Input Stream Read - Offset: 23743  Length: 171308
Jar Input Stream Read - Offset: 24254  Length: 170797
Jar Input Stream Read - Offset: 24767  Length: 170284
Jar Input Stream Read - Offset: 25087  Length: 169964
Jar Input Stream Read - Offset: 25600  Length: 169451
... (removed for length of post)
Jar Input Stream Read - Offset: 187636  Length: 7415
Jar Input Stream Read - Offset: 188913  Length: 6138
Jar Input Stream Read - Offset: 190589  Length: 4462
Jar Input Stream Read - Offset: 193091  Length: 1960
Jar Input Stream Read - Offset: 194541  Length: 510</code></p>
<p>[quote=“super_, post:3, topic:358958”]<span class="bbcode-s">are you writing a nexus deobfuscator</span><br>
are you dumping nexus product jars[/quote]Actually no, but this method is one that I plan on trying with nexus do to the fact that it seems to work the exact same as what I am currently working with.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/4</link>
        <pubDate>Mon, 06 Sep 2010 17:00:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-4</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-s">are you writing a nexus deobfuscator</span><br>
are you dumping nexus product jars</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/3</link>
        <pubDate>Mon, 06 Sep 2010 16:51:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-3</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>Do you ever close the file stream? If so, where?</p>
<p>Additionally, at the beginning of your ‘read’ function, print the class’ hash code and the thread’s stack-trace. Post the logs here and the relevant flow of your application in pseudo-code. Without that we can’t really guess what’s wrong.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/2</link>
        <pubDate>Mon, 06 Sep 2010 16:20:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-2</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
      <item>
        <title>JarInputStream Read/Write</title>
        <dc:creator><![CDATA[@the_bank the bank]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_bank">@the_bank</a> wrote:</p>
          <blockquote>
              <p>Hey guys, having some trouble here and could really use some help!  I’m attempting to make a small change in the JarInputStream class (java.util.jar) and then prepend it to the bootloader.  All that goes well…except I’m having a problem with the change that I made.</p>
<p>I’m attempting to modify the read(byte[], int, int) function to write to a file as it reads.</p>
<p>Here is the original:</p>
<p><code>    public int read(byte[] b, int off, int len) throws IOException {
	int n;
	if (first == null) {
	    n = super.read(b, off, len);
	} else {
	    n = -1;
	}
	if (jv != null) {
	    jv.update(n, b, off, len, mev);
	}
	return n;
    }</code></p>
<p>And here is my modified version:</p>
<p><code>..
	private FileOutputStream fos;
..
	public JarInputStream(InputStream in) throws IOException {
		this(in, true);
		fos = new FileOutputStream(new File("./jar" + in.toString().split("@")[1] + ".jar"));
	}
..
	public int read(byte[] b, int off, int len) throws IOException {
		System.out.println("Jar Input Stream Read - Offset: " + off + "  Length: " + len);
		int n;
		if (first == null) {
			n = super.read(b, off, len);
		} else {
			n = -1;
		}
		if (jv != null) {
			jv.update(n, b, off, len, mev);
		}
		fos.write(b, off, len); //CHANGE IS HERE!
		return n;
	}</code></p>
<p>The problem is that the resulting jar file is massive (usually &gt; 35000KB) and should be much smaller.  Opening it up in WinRAR I can see the classes, however there is also no MANIFEST folder.  Finally, the app I am running this on creates <span class="bbcode-b">2</span> JarInputStreams and my change does create a second file for the second one however the file remains empty (0KB).  It is also worth noting that the classes inside the first jar seem like they should be in the second one, and I have no idea where the ones that should be in the first one are.</p>
<p>All really kinda fucked up in other words…and probably a very stupid mistake on my part.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jarinputstream-read-write/358958/1</link>
        <pubDate>Mon, 06 Sep 2010 15:11:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-358958-1</guid>
        <source url="https://forum.moparisthebest.com/t/jarinputstream-read-write/358958.rss">JarInputStream Read/Write</source>
      </item>
  </channel>
</rss>
