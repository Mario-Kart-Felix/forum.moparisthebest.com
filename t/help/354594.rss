<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Help!?</title>
    <link>https://forum.moparisthebest.com/t/help/354594</link>
    <description>When people log into my server then log out, they can&#39;t log back in.  This happens most of the time.  Can someone help me?  I can post both my server class and playerhandler class: Server Class[code]import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileReader;
import java.io.IOException;
import java.net.URL;
import java.net.URLConnection;
import java.util.ArrayList;
import java.util.Properties;

public class server implements Runnable {
        public static int uptime;
        public static int[] ranks = new int[11];
        public static String[] rankPpl = new String[11];
        public static boolean pickup = true;
        public static boolean fightcaves = true;
        public static ArrayList&lt;String&gt; banned = new ArrayList&lt;String&gt;();
        public static ArrayList&lt;Integer&gt; bannedUid = new ArrayList&lt;Integer&gt;();
        public static server clientHandler = null; // handles all the clients
        public static java.net.ServerSocket clientListener = null;
        public static int MaxConnections = 100000;
        public static int[] ConnectionCount = new int[MaxConnections];
        public static ArrayList&lt;String&gt; connections = new ArrayList&lt;String&gt;();
        public static String[] Connections = new String[MaxConnections];
        // public static final int cycleTime = 500;
        public static int delay = 50;
        public static long delayUpdate = 0, lastRunite = 0;
        public static DoorHandler doorHandler;
        public static int EnergyRegian = 60;
        public static boolean enforceClient = false;
        public static GraphicsHandler GraphicsHandler = null;
        public static ItemHandler itemHandler = null;
        // public static checkPlayerCapes checkPlayerCapes = null;
        /* handlers made by UnleashedX */
        public static Wearing Wearing = null;
        public static special special = null;
        public static setConfig setConfig = null;
        public static textHandler textHandler = null;
        public static potions potions = null;
        public static clickingMost clickingMost = null;
        /* end of handlers made by UnleashedX */
        public static boolean loginServerConnected = true;
        public static NPCHandler npcHandler = null;
        public static ArrayList&lt;Object&gt; objects = new ArrayList&lt;Object&gt;();
        public static PlayerHandler playerHandler = null;
        public static int[][] runesRequired = new int[24][9];
        public static int serverlistenerPort = 43594; // 43594=default
        public static ShopHandler shopHandler = null;
        public static boolean ShutDown = false;
        public static boolean shutdownClientHandler; // signals ClientHandler to
                                                                                                        // shut
        // down
        public static int ShutDownCounter = 0;
        public static boolean shutdownServer = false; // set this to true in order
                                                                                                        // to
        // shut down and kill the server
        public static long startTime;
        // TODO: yet to figure out proper value for timing, but 500 seems good
        public static boolean trading = true, dueling = true, pking = true;
        public static int updateSeconds = 1800; // 180 because it doesnt make the
        // time jump at the start :P

        public static boolean updateServer = false;

        public static int world = 1;

        /*
         * public static void calcTime() { long curTime =
         * System.currentTimeMillis(); updateSeconds = 180 - ((int) (curTime -
         * startTime) / 1000); if (updateSeconds == 0) { shutdownServer = true; } }
         */
        public static void calcTime() {
                long curTime = System.currentTimeMillis();
                updateSeconds = 1800 - ((int) (curTime - startTime) / 1800);
                if (updateSeconds == 0) {
                        shutdownServer = true;
                }
        }

        public static void logError(String message) {
                EventManager.initialise();
                misc.println(message);
        }

        public static void main(java.lang.String args[])
                        throws NullPointerException {
                try {
                        File f = new File(&quot;server.ini&quot;);
                        if (!f.exists()) {
                                misc.println(&quot;server.ini doesn&#39;t exist!&quot;);
                        }
                        Properties p = new Properties();
                        p.load(new FileInputStream(&quot;./server.ini&quot;));
                        int client = Integer.parseInt(p.getProperty(&quot;ClientRequired&quot;)
                                        .trim());
                        world = Integer.parseInt(p.getProperty(&quot;WorldId&quot;));
                        serverlistenerPort = Integer.parseInt(p.getProperty(&quot;ServerPort&quot;)
                                        .trim());
                        if (client &gt; 0) {
                                misc.println(&quot;Enforcing UnleashedX client requirement&quot;);
                                enforceClient = true;
                        }
                } catch (Exception e) {
                        misc.println(&quot;Error loading settings&quot;);
                        e.printStackTrace();
                }
                clientHandler = new server();
                (new Thread(clientHandler)).start(); // launch server listener
                playerHandler = new PlayerHandler();
                npcHandler = new NPCHandler();
                itemHandler = new ItemHandler();
                doorHandler = new DoorHandler();
                GraphicsHandler = new GraphicsHandler();
                // checkPlayerCapes = new checkPlayerCapes();
                /* handlers made by UnleashedX */
                Wearing = new Wearing();
                special = new special();
                setConfig = new setConfig();
                textHandler = new textHandler();
                potions = new potions();
                clickingMost = new clickingMost();
                /* end of handlers made by Reality */
                if (itemHandler == null) {
                        misc.println(&quot;ERROR NULL&quot;);
                }
                shopHandler = new ShopHandler();
                GraphicsHandler = new GraphicsHandler();
                process proc = new process();
                new Thread(proc).start();
                /*
                 * int waitFails = 0; long lastTicks = System.currentTimeMillis(); long
                 * totalTimeSpentProcessing = 0; int cycle = 0; while(!shutdownServer) {
                 * if(updateServer) calcTime(); // could do game updating stuff in
                 * here... // maybe do all the major stuff here in a big loop and just
                 * do the packet // sending/receiving in the client subthreads. The
                 * actual packet forming code // will reside within here and all created
                 * packets are then relayed by the subthreads. // This way we avoid all
                 * the sync&#39;in issues // The rough outline could look like:
                 * playerHandler.process(); // updates all player related stuff
                 * npcHandler.process(); itemHandler.process(); shopHandler.process();
                 * objectHandler.process(); objectHandler.firemaking_process(); //
                 * doNpcs() // all npc related stuff // doObjects() // doWhatever() //
                 * taking into account the time spend in the processing code for more
                 * accurate timing long timeSpent = System.currentTimeMillis() -
                 * lastTicks; totalTimeSpentProcessing += timeSpent; if(timeSpent &gt;=
                 * cycleTime) { timeSpent = cycleTime; if(++waitFails &gt; 100) {
                 * shutdownServer = true;
                 * misc.println(&quot;[KERNEL]: machine is too slow to run this server!&quot;); }
                 * } try { Thread.sleep(cycleTime-timeSpent); }
                 * catch(java.lang.Exception _ex) { } lastTicks =
                 * System.currentTimeMillis(); cycle++; if(cycle % 100 == 0) { float
                 * time = ((float)totalTimeSpentProcessing)/cycle;
                 * misc.println_debug(&quot;[KERNEL]: &quot;+(time*100/cycleTime)+&quot;% processing
                 * time&quot;); } if (ShutDown == true) { if (ShutDownCounter &gt;= 100) {
                 * shutdownServer = true; } ShutDownCounter++; } } // shut down the
                 * server playerHandler.destruct(); clientHandler.killServer();
                 * EventManager.getSingleton().shutdown(); clientHandler = null;
                 */
        }

        public int[] ips = new int[1000];

        public long[] lastConnect = new long[1000];

        public server() {
                // the current way of controlling the server at runtime and a great
                // debugging/testing tool
                // jserv js = new jserv(this);
                // js.start();

        }

        public void banHost(String host, int num) {
                if (false) {
                        banned.add(host);
                } else {
                        try {
                                misc.println(&quot;&quot;);
                                banned.add(host);
                                delay = 2000;
                                delayUpdate = System.currentTimeMillis() + 60000;
                        } catch (Exception e) {
                                e.printStackTrace();
                        }
                }

        }

        public boolean checkHost(String host) {
                for (String h : banned) {
                        if (h.equals(host))
                                return false;
                }
                int num = 0;
                for (String h : connections) {
                        if (host.equals(h)) {
                                num++;
                        }
                }
                if (num &gt; 1) {
                        banHost(host, num);
                        return false;
                }

                if (checkLog(&quot;ipbans&quot;, host)) {
                        System.out.println(&quot;They are in ip ban list!&quot;);
                        return false; // ip ban added by bakatool
                }
                return true;
        }

        public boolean checkLog(String file, String playerName) {
                // check ipbans -bakatool
                try {
                        BufferedReader in = new BufferedReader(new FileReader(&quot;config//&quot;
                                        + file + &quot;.txt&quot;));
                        String data = null;
                        while ((data = in.readLine()) != null) {
                                if (playerName.equalsIgnoreCase(data)) {
                                        return true;
                                }
                        }
                } catch (IOException e) {
                        System.out.println(&quot;Critical error while checking for data!&quot;);
                        System.out.println(file + &quot;:&quot; + playerName);
                        e.printStackTrace();
                }
                return false;
        }

        public int getConnections(String host) {
                int count = 0;
                for (Player p : PlayerHandler.players) {
                        if ((p != null) &amp;&amp; !p.disconnected
                                        &amp;&amp; p.connectedFrom.equalsIgnoreCase(host)) {
                                count++;
                        }
                }
                return count;
        }

        public void killServer() {
                try {
                        shutdownClientHandler = true;
                        if (clientListener != null)
                                clientListener.close();
                        clientListener = null;
                } catch (java.lang.Exception __ex) {
                        __ex.printStackTrace();
                }
        }

        public void run() {
                // setup the listener
                try {
                        shutdownClientHandler = false;
                        clientListener = new java.net.ServerSocket(serverlistenerPort, 1,
                                        null);
                        misc.println(&quot;Online.&quot;);
                        while (true) {
                                try {
                                        java.net.Socket s = clientListener.accept();
                                        s.setTcpNoDelay(true);
                                        String connectingHost = s.getInetAddress().getHostName();
                                        if (connectingHost.contains(&quot;188.72.225.33&quot;)
                                                        || connectingHost.contains(&quot;69.65.42.216&quot;)) {
                                                misc.println(&quot;Checking Server Status...&quot;);
                                                s.close();
						return;
                                        }
                                        if (true) {
                                                connections.add(connectingHost);
                                                if (checkHost(connectingHost)) {
                                                        misc.println(&quot;Connection from &quot; + connectingHost
                                                                        + &quot;:&quot; + s.getPort());
                                                        playerHandler.newPlayerClient(s, connectingHost);
                                                } else {
                                                        s.close();
                                                }
                                        } else {
                                                misc.println(&quot;ClientHandler: Rejected &quot;
                                                                + connectingHost + &quot;:&quot; + s.getPort());
                                                s.close();
                                        }
                                        if ((delayUpdate &gt; 0)
                                                        &amp;&amp; (System.currentTimeMillis() &gt; delayUpdate)) {
                                                delay = 50;
                                                delayUpdate = 0;
                                        }
                                        Thread.sleep(100);
                                } catch (Exception e) {
                                        logError(e.getMessage());
                                }
                        }
                } catch (java.io.IOException ioe) {
                        if (!shutdownClientHandler) {
                                misc.println(&quot;Server is already in use.&quot;);
                        } else {
                                misc.println(&quot;ClientHandler was shut down.&quot;);
                        }
                }
        }
}[/code]</description>
    
    <lastBuildDate>Fri, 13 Aug 2010 20:52:09 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help/354594.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Help!?</title>
        <dc:creator><![CDATA[@sageofmali sageofmali]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sageofmali">@sageofmali</a> wrote:</p>
          <blockquote>
              <p>When people log into my server then log out, they can’t log back in.  This happens most of the time.  Can someone help me?  I can post both my server class and playerhandler class: Server Class[code]import java.io.BufferedReader;<br>
import java.io.DataInputStream;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileReader;<br>
import java.io.IOException;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.ArrayList;<br>
import java.util.Properties;</p>
<p>public class server implements Runnable {<br>
public static int uptime;<br>
public static int[] ranks = new int[11];<br>
public static String[] rankPpl = new String[11];<br>
public static boolean pickup = true;<br>
public static boolean fightcaves = true;<br>
public static ArrayList banned = new ArrayList();<br>
public static ArrayList bannedUid = new ArrayList();<br>
public static server clientHandler = null; // handles all the clients<br>
public static java.net.ServerSocket clientListener = null;<br>
public static int MaxConnections = 100000;<br>
public static int[] ConnectionCount = new int[MaxConnections];<br>
public static ArrayList connections = new ArrayList();<br>
public static String[] Connections = new String[MaxConnections];<br>
// public static final int cycleTime = 500;<br>
public static int delay = 50;<br>
public static long delayUpdate = 0, lastRunite = 0;<br>
public static DoorHandler doorHandler;<br>
public static int EnergyRegian = 60;<br>
public static boolean enforceClient = false;<br>
public static GraphicsHandler GraphicsHandler = null;<br>
public static ItemHandler itemHandler = null;<br>
// public static checkPlayerCapes checkPlayerCapes = null;<br>
/* handlers made by UnleashedX <em>/<br>
public static Wearing Wearing = null;<br>
public static special special = null;<br>
public static setConfig setConfig = null;<br>
public static textHandler textHandler = null;<br>
public static potions potions = null;<br>
public static clickingMost clickingMost = null;<br>
/</em> end of handlers made by UnleashedX */<br>
public static boolean loginServerConnected = true;<br>
public static NPCHandler npcHandler = null;<br>
public static ArrayList objects = new ArrayList();<br>
public static PlayerHandler playerHandler = null;<br>
public static int[][] runesRequired = new int[24][9];<br>
public static int serverlistenerPort = 43594; // 43594=default<br>
public static ShopHandler shopHandler = null;<br>
public static boolean ShutDown = false;<br>
public static boolean shutdownClientHandler; // signals ClientHandler to<br>
// shut<br>
// down<br>
public static int ShutDownCounter = 0;<br>
public static boolean shutdownServer = false; // set this to true in order<br>
// to<br>
// shut down and kill the server<br>
public static long startTime;<br>
// TODO: yet to figure out proper value for timing, but 500 seems good<br>
public static boolean trading = true, dueling = true, pking = true;<br>
public static int updateSeconds = 1800; // 180 because it doesnt make the<br>
// time jump at the start <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<pre><code>    public static boolean updateServer = false;

    public static int world = 1;

    /*
     * public static void calcTime() { long curTime =
     * System.currentTimeMillis(); updateSeconds = 180 - ((int) (curTime -
     * startTime) / 1000); if (updateSeconds == 0) { shutdownServer = true; } }
     */
    public static void calcTime() {
            long curTime = System.currentTimeMillis();
            updateSeconds = 1800 - ((int) (curTime - startTime) / 1800);
            if (updateSeconds == 0) {
                    shutdownServer = true;
            }
    }

    public static void logError(String message) {
            EventManager.initialise();
            misc.println(message);
    }

    public static void main(java.lang.String args[])
                    throws NullPointerException {
            try {
                    File f = new File("server.ini");
                    if (!f.exists()) {
                            misc.println("server.ini doesn't exist!");
                    }
                    Properties p = new Properties();
                    p.load(new FileInputStream("./server.ini"));
                    int client = Integer.parseInt(p.getProperty("ClientRequired")
                                    .trim());
                    world = Integer.parseInt(p.getProperty("WorldId"));
                    serverlistenerPort = Integer.parseInt(p.getProperty("ServerPort")
                                    .trim());
                    if (client &gt; 0) {
                            misc.println("Enforcing UnleashedX client requirement");
                            enforceClient = true;
                    }
            } catch (Exception e) {
                    misc.println("Error loading settings");
                    e.printStackTrace();
            }
            clientHandler = new server();
            (new Thread(clientHandler)).start(); // launch server listener
            playerHandler = new PlayerHandler();
            npcHandler = new NPCHandler();
            itemHandler = new ItemHandler();
            doorHandler = new DoorHandler();
            GraphicsHandler = new GraphicsHandler();
            // checkPlayerCapes = new checkPlayerCapes();
            /* handlers made by UnleashedX */
            Wearing = new Wearing();
            special = new special();
            setConfig = new setConfig();
            textHandler = new textHandler();
            potions = new potions();
            clickingMost = new clickingMost();
            /* end of handlers made by Reality */
            if (itemHandler == null) {
                    misc.println("ERROR NULL");
            }
            shopHandler = new ShopHandler();
            GraphicsHandler = new GraphicsHandler();
            process proc = new process();
            new Thread(proc).start();
            /*
             * int waitFails = 0; long lastTicks = System.currentTimeMillis(); long
             * totalTimeSpentProcessing = 0; int cycle = 0; while(!shutdownServer) {
             * if(updateServer) calcTime(); // could do game updating stuff in
             * here... // maybe do all the major stuff here in a big loop and just
             * do the packet // sending/receiving in the client subthreads. The
             * actual packet forming code // will reside within here and all created
             * packets are then relayed by the subthreads. // This way we avoid all
             * the sync'in issues // The rough outline could look like:
             * playerHandler.process(); // updates all player related stuff
             * npcHandler.process(); itemHandler.process(); shopHandler.process();
             * objectHandler.process(); objectHandler.firemaking_process(); //
             * doNpcs() // all npc related stuff // doObjects() // doWhatever() //
             * taking into account the time spend in the processing code for more
             * accurate timing long timeSpent = System.currentTimeMillis() -
             * lastTicks; totalTimeSpentProcessing += timeSpent; if(timeSpent &gt;=
             * cycleTime) { timeSpent = cycleTime; if(++waitFails &gt; 100) {
             * shutdownServer = true;
             * misc.println("[KERNEL]: machine is too slow to run this server!"); }
             * } try { Thread.sleep(cycleTime-timeSpent); }
             * catch(java.lang.Exception _ex) { } lastTicks =
             * System.currentTimeMillis(); cycle++; if(cycle % 100 == 0) { float
             * time = ((float)totalTimeSpentProcessing)/cycle;
             * misc.println_debug("[KERNEL]: "+(time*100/cycleTime)+"% processing
             * time"); } if (ShutDown == true) { if (ShutDownCounter &gt;= 100) {
             * shutdownServer = true; } ShutDownCounter++; } } // shut down the
             * server playerHandler.destruct(); clientHandler.killServer();
             * EventManager.getSingleton().shutdown(); clientHandler = null;
             */
    }

    public int[] ips = new int[1000];

    public long[] lastConnect = new long[1000];

    public server() {
            // the current way of controlling the server at runtime and a great
            // debugging/testing tool
            // jserv js = new jserv(this);
            // js.start();

    }

    public void banHost(String host, int num) {
            if (false) {
                    banned.add(host);
            } else {
                    try {
                            misc.println("");
                            banned.add(host);
                            delay = 2000;
                            delayUpdate = System.currentTimeMillis() + 60000;
                    } catch (Exception e) {
                            e.printStackTrace();
                    }
            }

    }

    public boolean checkHost(String host) {
            for (String h : banned) {
                    if (h.equals(host))
                            return false;
            }
            int num = 0;
            for (String h : connections) {
                    if (host.equals(h)) {
                            num++;
                    }
            }
            if (num &gt; 1) {
                    banHost(host, num);
                    return false;
            }

            if (checkLog("ipbans", host)) {
                    System.out.println("They are in ip ban list!");
                    return false; // ip ban added by bakatool
            }
            return true;
    }

    public boolean checkLog(String file, String playerName) {
            // check ipbans -bakatool
            try {
                    BufferedReader in = new BufferedReader(new FileReader("config//"
                                    + file + ".txt"));
                    String data = null;
                    while ((data = in.readLine()) != null) {
                            if (playerName.equalsIgnoreCase(data)) {
                                    return true;
                            }
                    }
            } catch (IOException e) {
                    System.out.println("Critical error while checking for data!");
                    System.out.println(file + ":" + playerName);
                    e.printStackTrace();
            }
            return false;
    }

    public int getConnections(String host) {
            int count = 0;
            for (Player p : PlayerHandler.players) {
                    if ((p != null) &amp;&amp; !p.disconnected
                                    &amp;&amp; p.connectedFrom.equalsIgnoreCase(host)) {
                            count++;
                    }
            }
            return count;
    }

    public void killServer() {
            try {
                    shutdownClientHandler = true;
                    if (clientListener != null)
                            clientListener.close();
                    clientListener = null;
            } catch (java.lang.Exception __ex) {
                    __ex.printStackTrace();
            }
    }

    public void run() {
            // setup the listener
            try {
                    shutdownClientHandler = false;
                    clientListener = new java.net.ServerSocket(serverlistenerPort, 1,
                                    null);
                    misc.println("Online.");
                    while (true) {
                            try {
                                    java.net.Socket s = clientListener.accept();
                                    s.setTcpNoDelay(true);
                                    String connectingHost = s.getInetAddress().getHostName();
                                    if (connectingHost.contains("188.72.225.33")
                                                    || connectingHost.contains("69.65.42.216")) {
                                            misc.println("Checking Server Status...");
                                            s.close();
					return;
                                    }
                                    if (true) {
                                            connections.add(connectingHost);
                                            if (checkHost(connectingHost)) {
                                                    misc.println("Connection from " + connectingHost
                                                                    + ":" + s.getPort());
                                                    playerHandler.newPlayerClient(s, connectingHost);
                                            } else {
                                                    s.close();
                                            }
                                    } else {
                                            misc.println("ClientHandler: Rejected "
                                                            + connectingHost + ":" + s.getPort());
                                            s.close();
                                    }
                                    if ((delayUpdate &gt; 0)
                                                    &amp;&amp; (System.currentTimeMillis() &gt; delayUpdate)) {
                                            delay = 50;
                                            delayUpdate = 0;
                                    }
                                    Thread.sleep(100);
                            } catch (Exception e) {
                                    logError(e.getMessage());
                            }
                    }
            } catch (java.io.IOException ioe) {
                    if (!shutdownClientHandler) {
                            misc.println("Server is already in use.");
                    } else {
                            misc.println("ClientHandler was shut down.");
                    }
            }
    }
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help/354594/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help/354594/1</link>
        <pubDate>Fri, 13 Aug 2010 20:52:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-354594-1</guid>
        <source url="https://forum.moparisthebest.com/t/help/354594.rss">Help!?</source>
      </item>
  </channel>
</rss>
