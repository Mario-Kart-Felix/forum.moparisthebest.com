<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CacheDownloader.java UPDATED</title>
    <link>https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386</link>
    <description>Was deciding to use this for my new upcoming server but I just decided to release the code anyway.

This is compatible with any Project Insanity client.
As quoted from [url=http://tinyurl.com/2b7q9fj]How to make your Project Insanity client a Webclient![/url]
&quot;Thank-you openice123 for this. Thank-you Onlyme for a quick fix.&quot;
And thank you JUSTINNN for the original post! FROM Run3-S3rv3r

If you already have the original CacheDownloader.java and wish to update to V2:
If you don&#39;t have the CacheDownlaoder.java follow the tutorial [url=http://tinyurl.com/2b7q9fj]here[/url]

1. Go into your client.java and search
[code]
new CacheDownloader(this).downloadCache();
[/code]
Replace that with
[code]
new CacheDownloaderV2(this).downloadCache();
[/code]
Save and close client.java

2. now open CacheDownloader.java and replace the whole file with this:
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import sign.signlink;

/*************************************
 *All edits to CacheDownloaderV2.java*
 *     go to m13rz | mod cody        *
 *       Please give credits         *
 *************************************/


public class CacheDownloaderV2 {
		
        private client client;

        private final int BUFFER = 1024;

        private final int VERSION = 1; // Version of cache (Change on client updates)
        private String cacheLink = &quot;YOUR CACHE LINK&quot;; // Link to cache

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {

                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                
                if(!location.exists()) {
                        downloadFile(getCacheLink(), getArchivedName());
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
                                downloadFile(getCacheLink(), getArchivedName());
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {
				URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                        byte[] data = new byte[BUFFER];     
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
                        }
                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }
				fileExists();
        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }

        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {

                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
					drawLoadingText(&quot;[UN-ZIP]: &quot; + e.getName());				
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
			oneSec();
			unNeededCacheExists();
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
				}
        }
	
		public void fileExists() {
			File file=new File(&quot;CACHE DIRECTORY LINK&quot;);
				boolean exists = file.exists();
			if (!exists) {
				System.out.println(&quot;The cache was not downloaded correctly.&quot;);
				System.out.println(&quot;Please download it manually at:&quot;);
				System.out.println(&quot;YOUR CACHE LINK&quot;);
				manySec();
				cacheDownloadError();
    }		else 
	{
				System.out.println(&quot;Your cache is downloaded and ready to un-zip!&quot;);
				oneSec();
				unZip();	  
			}
	}
	
	public void unNeededCacheExists() {
			File file=new File(&quot;CACHE DIRECTORY LINK&quot;);
		boolean exists = file.exists();
				if (!exists) {
			System.out.println(&quot;Your Client Just Hates You&quot;);
				System.out.println(&quot;You are GARBAGE TODAY AYE?!&quot;);
			}else {
					System.out.println(&quot;Your cache is still on your HDD&quot;);
					System.out.println(&quot;Attempting to delete...&quot;);
					oneSec();
						delete();	  
				}
	}
	
	    public void delete() {	
    	try{
 
    		File file = new File(&quot;CACHE DIRECTORY LINK&quot;);
 
    		if(file.delete()){
    			System.out.println(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
    		}else{
    			System.out.println(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
    		}
 
    	}catch(Exception e){
 
    		e.printStackTrace();
 
    	}
    }
	
	public void cacheDownloadError() {
		try {
            System.out.println(&quot;Cache Download Error: 0x21V82&quot;);
			}
			catch(Exception e){
 
    		e.printStackTrace();
 
    	}
			}
			
  public void oneSec() {
     try {
       Thread.currentThread().sleep(1000);
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }  
  public void manySec() {
     try {
       Thread.currentThread().sleep(1500);
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }
}
[/code]

2. Search 
[code]
YOUR CACHE LINK
[/code]
replace that with your actual cache link

Example:
[code]
http://google.com/cache.zip
[/code]

3. Search
[code]
CACHE DIRECTORY LINK
[/code]

Replace that with your cache link on your computer

Example
[code]
C:/.Google_File_store_32/
[/code]


Save, close, and compile!

DONE

If I left anything out please let me know and I will fix it up ASAP

[url=http://www.upload.ee/files/1210919/CacheDownloaderV2.java.html]CacheDownloaderV2.java[/url]</description>
    
    <lastBuildDate>Wed, 30 Mar 2011 19:42:46 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CacheDownloader.java UPDATED</title>
        <dc:creator><![CDATA[@kill_you704 kill you704]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kill_you704">@kill_you704</a> wrote:</p>
          <blockquote>
              <p>i got an error…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386/2</link>
        <pubDate>Wed, 30 Mar 2011 19:42:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387386-2</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386.rss">CacheDownloader.java UPDATED</source>
      </item>
      <item>
        <title>CacheDownloader.java UPDATED</title>
        <dc:creator><![CDATA[@mod_cody mod cody]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_cody">@mod_cody</a> wrote:</p>
          <blockquote>
              <p>Was deciding to use this for my new upcoming server but I just decided to release the code anyway.</p>
<p>This is compatible with any Project Insanity client.<br>
As quoted from <a href="http://tinyurl.com/2b7q9fj" data-bbcode="true" rel="nofollow noopener">How to make your Project Insanity client a Webclient!</a><br>
“Thank-you openice123 for this. Thank-you Onlyme for a quick fix.”<br>
And thank you JUSTINNN for the original post! FROM Run3-S3rv3r</p>
<p>If you already have the original CacheDownloader.java and wish to update to V2:<br>
If you don’t have the CacheDownlaoder.java follow the tutorial <a href="http://tinyurl.com/2b7q9fj" data-bbcode="true" rel="nofollow noopener">here</a></p>
<ol>
<li>Go into your client.java and search</li>
</ol>
<pre><code class="lang-auto">new CacheDownloader(this).downloadCache();</code></pre>
<p>Replace that with</p>
<pre><code class="lang-auto">new CacheDownloaderV2(this).downloadCache();</code></pre>
<p>Save and close client.java</p>
<ol start="2">
<li>now open CacheDownloader.java and replace the whole file with this:</li>
</ol>
<pre><code class="lang-auto">import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import sign.signlink;

/*************************************
 *All edits to CacheDownloaderV2.java*
 *     go to m13rz | mod cody        *
 *       Please give credits         *
 *************************************/


public class CacheDownloaderV2 {
		
        private client client;

        private final int BUFFER = 1024;

        private final int VERSION = 1; // Version of cache (Change on client updates)
        private String cacheLink = "YOUR CACHE LINK"; // Link to cache

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return signlink.findcachedir();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {

                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
                
                if(!location.exists()) {
                        downloadFile(getCacheLink(), getArchivedName());
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
                                downloadFile(getCacheLink(), getArchivedName());
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                                versionFile.close();

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {
				URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + "/" +localFileName)); 
                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                        byte[] data = new byte[BUFFER];     
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
                        }
                        System.out.println(localFileName + "\t" + numWritten);
                        drawLoadingText("Finished downloading "+getArchivedName()+"!");

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }
				fileExists();
        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf('/');
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println("error retreiving archivaed name.");
                }
                return "";
        }

        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {

                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
					drawLoadingText("[UN-ZIP]: " + e.getName());				
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
			oneSec();
			unNeededCacheExists();
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
				}
        }
	
		public void fileExists() {
			File file=new File("CACHE DIRECTORY LINK");
				boolean exists = file.exists();
			if (!exists) {
				System.out.println("The cache was not downloaded correctly.");
				System.out.println("Please download it manually at:");
				System.out.println("YOUR CACHE LINK");
				manySec();
				cacheDownloadError();
    }		else 
	{
				System.out.println("Your cache is downloaded and ready to un-zip!");
				oneSec();
				unZip();	  
			}
	}
	
	public void unNeededCacheExists() {
			File file=new File("CACHE DIRECTORY LINK");
		boolean exists = file.exists();
				if (!exists) {
			System.out.println("Your Client Just Hates You");
				System.out.println("You are GARBAGE TODAY AYE?!");
			}else {
					System.out.println("Your cache is still on your HDD");
					System.out.println("Attempting to delete...");
					oneSec();
						delete();	  
				}
	}
	
	    public void delete() {	
    	try{
 
    		File file = new File("CACHE DIRECTORY LINK");
 
    		if(file.delete()){
    			System.out.println("[SUCCESS]" +file.getName()+ " was deleted!");
    		}else{
    			System.out.println("[ERROR]" +file.getName()+ " was not deleted.");
    		}
 
    	}catch(Exception e){
 
    		e.printStackTrace();
 
    	}
    }
	
	public void cacheDownloadError() {
		try {
            System.out.println("Cache Download Error: 0x21V82");
			}
			catch(Exception e){
 
    		e.printStackTrace();
 
    	}
			}
			
  public void oneSec() {
     try {
       Thread.currentThread().sleep(1000);
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }  
  public void manySec() {
     try {
       Thread.currentThread().sleep(1500);
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }
}</code></pre>
<ol start="2">
<li>Search</li>
</ol>
<pre><code class="lang-auto">YOUR CACHE LINK</code></pre>
<p>replace that with your actual cache link</p>
<p>Example:</p>
<pre><code class="lang-auto">http://google.com/cache.zip</code></pre>
<ol start="3">
<li>Search</li>
</ol>
<pre><code class="lang-auto">CACHE DIRECTORY LINK</code></pre>
<p>Replace that with your cache link on your computer</p>
<p>Example</p>
<pre><code class="lang-auto">C:/.Google_File_store_32/</code></pre>
<p>Save, close, and compile!</p>
<p>DONE</p>
<p>If I left anything out please let me know and I will fix it up ASAP</p>
<p><a href="http://www.upload.ee/files/1210919/CacheDownloaderV2.java.html" data-bbcode="true" rel="nofollow noopener">CacheDownloaderV2.java</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386/1</link>
        <pubDate>Mon, 21 Mar 2011 18:28:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-387386-1</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-java-updated/387386.rss">CacheDownloader.java UPDATED</source>
      </item>
  </channel>
</rss>
