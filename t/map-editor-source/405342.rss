<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Map Editor source</title>
    <link>https://forum.moparisthebest.com/t/map-editor-source/405342</link>
    <description>So here&#39;s the source for my map editor, it&#39;s definitely not the best, rushed a bit of it.
MapEditor.java
[code=java]package mapeditor;

import java.io.*;
import java.util.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.imageio.ImageIO;
import javax.swing.filechooser.FileFilter;

import mapeditor.map.Region;

public class MapEditor extends JFrame implements ActionListener, MouseListener {

	public enum Tool { PEN, FILL, PICKER, ERASER }

	public static final String TITLE = &quot;RPG Map Editor&quot;;
	public static final byte MAP_SIZE = 35;
	private static final long serialVersionUID = -111657081934826004L;
	private final int DEFAULT_WINDOW_X = 900, DEFAULT_WINDOW_Y = 700;

	private byte selectedLayer;
	private int selectedTileID;
	private boolean viewInactiveLayers;
	private boolean viewInactiveLayerOverlay;
	private boolean viewGrid = true;
	private Tool selectedTool = Tool.PEN;
	private Region region;
	private RegionPanel regionPanel;
	private HashMap&lt;Integer, Image&gt; tileImageMap = new HashMap&lt;Integer, Image&gt;();
	private JTabbedPane tilesTabPane = new JTabbedPane();
	private JButton zoomInBtn = new JButton();
	private JButton zoomOutBtn = new JButton();
	private JButton layerUpBtn = new JButton();
	private JButton layerDownBtn = new JButton();

	public static void main(String args[]) {
		new MapEditor();
	}

	public MapEditor() {
		super(TITLE + &quot; | New Map&quot;);
		region = new Region(MAP_SIZE);
		setSize(DEFAULT_WINDOW_X, DEFAULT_WINDOW_Y);
		setDefaultCloseOperation(EXIT_ON_CLOSE);
		setLayout(new BorderLayout());
		init();
		regionPanel = new RegionPanel(this);
		JScrollPane regionScroll = new JScrollPane(regionPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		regionScroll.getVerticalScrollBar().setUnitIncrement(regionScroll.getVerticalScrollBar().getUnitIncrement() * 10);
		add(regionScroll, BorderLayout.CENTER);
		setVisible(true);
	}

	private void init() {
		initializeMenuBar();
		initializeToolbox();
		openTileFolders(new File(&quot;data/tiles&quot;));
	}

	public void initializeMenuBar() {	
		//------------------File Menu------------------//
		JMenu fileMenu = new JMenu(&quot;File&quot;);

		JMenuItem fileOpen = new JMenuItem(&quot;Open Map...&quot;);
		JMenuItem fileSave = new JMenuItem(&quot;Save Map...&quot;);
		JMenuItem fileLoadTileFolders = new JMenuItem(&quot;Load Tile Folder(s)...&quot;);
		JMenuItem fileExit = new JMenuItem(&quot;Exit&quot;);

		fileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));
		fileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
		fileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.CTRL_MASK));

		fileOpen.setActionCommand(&quot;file-open&quot;);
		fileSave.setActionCommand(&quot;file-save&quot;);
		fileLoadTileFolders.setActionCommand(&quot;file-opentilefolder&quot;);
		fileExit.setActionCommand(&quot;file-exit&quot;);

		fileOpen.addActionListener(this);
		fileSave.addActionListener(this);
		fileLoadTileFolders.addActionListener(this);
		fileExit.addActionListener(this);

		fileMenu.add(fileOpen);
		fileMenu.add(fileSave);
		fileMenu.addSeparator();
		fileMenu.add(fileLoadTileFolders);
		fileMenu.addSeparator();
		fileMenu.add(fileExit);

		//------------------View Menu------------------//
		JMenu viewMenu = new JMenu(&quot;View&quot;);

		JCheckBoxMenuItem viewInactiveLayers = new JCheckBoxMenuItem(&quot;Inactive Layers&quot;);
		JCheckBoxMenuItem viewInactiveLayerOverlay = new JCheckBoxMenuItem(&quot;Inactive Layer Overlay&quot;);
		JCheckBoxMenuItem viewGrid = new JCheckBoxMenuItem(&quot;Grid&quot;);

		viewInactiveLayerOverlay.setEnabled(false);
		viewGrid.setSelected(true);

		viewInactiveLayers.setActionCommand(&quot;view-inactivelayers&quot;);
		viewInactiveLayerOverlay.setActionCommand(&quot;view-inactivelayeroverlay&quot;);
		viewGrid.setActionCommand(&quot;view-grid&quot;);

		viewInactiveLayers.addActionListener(this);
		viewInactiveLayerOverlay.addActionListener(this);
		viewGrid.addActionListener(this);

		viewMenu.add(viewInactiveLayers);
		viewMenu.add(viewInactiveLayerOverlay);
		viewMenu.addSeparator();
		viewMenu.add(viewGrid);

		//------------------Menu Bar------------------//
		JMenuBar menuBar = new JMenuBar();

		menuBar.add(fileMenu);
		menuBar.add(viewMenu);

		setJMenuBar(menuBar);
	}

	public void initializeToolbox() {
		JRadioButton penTool = new JRadioButton();
		JRadioButton fillTool = new JRadioButton();
		JRadioButton pickerTool = new JRadioButton();
		JRadioButton eraserTool = new JRadioButton();


		try {
			penTool.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/normal.png&quot;))));
			fillTool.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/fill.png&quot;))));
			pickerTool.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/picker.png&quot;))));
			eraserTool.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/eraser.png&quot;))));
			zoomInBtn.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/zoomin.png&quot;))));
			zoomOutBtn.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/zoomout.png&quot;))));
			layerUpBtn.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/uplayer.png&quot;))));
			layerDownBtn.setIcon(new ImageIcon(ImageIO.read(new File(&quot;data/misc/downlayer.png&quot;))));
		} catch(IOException e) {
			JOptionPane.showMessageDialog(this, &quot;Cannot find the data folder, you&#39;re running this jar from the wrong place!&quot;);
		}

		penTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
		fillTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
		pickerTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
		eraserTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));

		penTool.setActionCommand(&quot;tools-&quot; + Tool.PEN.name());
		fillTool.setActionCommand(&quot;tools-&quot; + Tool.FILL.name());
		pickerTool.setActionCommand(&quot;tools-&quot; + Tool.PICKER.name());
		eraserTool.setActionCommand(&quot;tools-&quot; + Tool.ERASER.name());
		zoomInBtn.setActionCommand(&quot;zoom-in&quot;);
		zoomOutBtn.setActionCommand(&quot;zoom-out&quot;);
		layerUpBtn.setActionCommand(&quot;layer-up&quot;);
		layerDownBtn.setActionCommand(&quot;layer-down&quot;);

		layerDownBtn.setEnabled(false);
		zoomInBtn.setEnabled(false);

		penTool.addActionListener(this);
		fillTool.addActionListener(this);
		pickerTool.addActionListener(this);
		eraserTool.addActionListener(this);
		zoomInBtn.addActionListener(this);
		zoomOutBtn.addActionListener(this);
		layerUpBtn.addActionListener(this);		
		layerDownBtn.addActionListener(this);

		JPanel editorTools = new JPanel();
		editorTools.setLayout(new BoxLayout(editorTools, BoxLayout.X_AXIS));
		editorTools.add(penTool);
		editorTools.add(fillTool);
		editorTools.add(pickerTool);
		editorTools.add(eraserTool);
		editorTools.add(new JToolBar.Separator());
		editorTools.add(zoomInBtn);
		editorTools.add(zoomOutBtn);
		editorTools.add(new JToolBar.Separator());
		editorTools.add(layerUpBtn);
		editorTools.add(layerDownBtn);

		JPanel editorPanel = new JPanel();
		editorPanel.setLayout(new BoxLayout(editorPanel, BoxLayout.Y_AXIS));
		editorPanel.add(editorTools);
		editorPanel.add(tilesTabPane);

		add(editorPanel, BorderLayout.LINE_START);
	}

	public void openTileFolders(File ... folders) {
		try {
			for(File folder : folders) {
				File[] tileImageFiles =  folder.listFiles(new FilenameFilter() {
					@Override
					public boolean accept(File arg0, String arg1) {
						if(arg1 == &quot;0&quot;) {
							System.out.println(arg1.matches(&quot;\\d+(\\.png)?&quot;));
						}
						return arg1.matches(&quot;\\d+(\\.png)?&quot;);
					}
				});
				JPanel folderPanel = new JPanel();
				folderPanel.setLayout(new GridLayout(0, 8));
				JScrollPane folderScrollPane = new JScrollPane(folderPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
				folderScrollPane.getVerticalScrollBar().setUnitIncrement(folderScrollPane.getVerticalScrollBar().getUnitIncrement() * 10);
				ArrayList&lt;JLabel&gt; labels = new ArrayList&lt;JLabel&gt;();
				for(int i = 0; i &lt; tileImageFiles.length; i++) {
					File file = tileImageFiles[i];
					int id = Integer.parseInt(file.getName().split(&quot;\\.&quot;)[0]);
					tileImageMap.put(id, ImageIO.read(file));
					JLabel tileLabel = new JLabel(new ImageIcon(tileImageMap.get(id)));
					tileLabel.setToolTipText(&quot;ID: &quot; + id);
					tileLabel.addMouseListener(this);
					labels.add(tileLabel);
				}
				sortLabels(labels);
				for(JLabel label : labels) {
					folderPanel.add(label);
				}
				tilesTabPane.addTab(folder.getName(), folderScrollPane);
				tilesTabPane.setSelectedComponent(folderScrollPane);
			}
		} catch(Exception e) {
			System.out.println(&quot;Error opening folders!&quot;);
			e.printStackTrace();
		}
	}

	public void openTile(File tile) {
		try {
			JPanel folderPanel = (JPanel) ((JScrollPane)tilesTabPane.getComponent(0)).getComponent(0);
			int id = Integer.parseInt(tile.getName().split(&quot;\\.&quot;)[0]);
			tileImageMap.put(id, ImageIO.read(tile));
			JLabel tileLabel = new JLabel(new ImageIcon(tileImageMap.get(id)));
			tileLabel.setToolTipText(&quot;ID: &quot; + id);
			tileLabel.addMouseListener(this);
			folderPanel.add(tileLabel);
			regionPanel.repaint();
		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	public void sortLabels(ArrayList&lt;JLabel&gt; labels) {
		Collections.sort(labels, new Comparator&lt;JLabel&gt;() {
			public int compare(JLabel label1, JLabel label2) {
				int id = Integer.parseInt(label1.getToolTipText().substring(4));
				int id2 = Integer.parseInt(label2.getToolTipText().substring(4));
				if (id &gt; id2){
					return 1;
				} else if (id &lt; id2){
					return -1;
				}
				return 0;
			}
		});
	}


	public void handleFileMenuAction(ActionEvent e) {
		String command = e.getActionCommand().substring(5);
		if(command.equals(&quot;open&quot;)) {
			openMap();
		} else if(command.equals(&quot;save&quot;)) {
			saveMap();
		} else if(command.equals(&quot;opentilefolder&quot;)) {
			JFileChooser jfc = new JFileChooser(&quot;data/tiles&quot;);
			jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
			jfc.setMultiSelectionEnabled(true);
			if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
				openTileFolders(jfc.getSelectedFiles());
			}
		} else if(command.equals(&quot;exit&quot;)) {
			System.exit(0);
		} 
	}

	public void handleViewMenuAction(ActionEvent e) {
		String command = e.getActionCommand().substring(5);
		if(command.equals(&quot;inactivelayers&quot;)) {
			viewInactiveLayers = !viewInactiveLayers;
			JCheckBoxMenuItem cb = (JCheckBoxMenuItem) e.getSource();
			for(Component c : cb.getParent().getComponents()) {
				if(c instanceof JCheckBoxMenuItem) {
					JCheckBoxMenuItem checkBox = (JCheckBoxMenuItem) c;
					if(checkBox.getActionCommand().equals(&quot;view-inactivelayeroverlay&quot;)) {
						if(viewInactiveLayers) {
							checkBox.setEnabled(true);
						} else {
							checkBox.setEnabled(false);
							checkBox.setSelected(false);
							viewInactiveLayerOverlay = false;
						}
						break;
					}
				}
			}
		} else if(command.equals(&quot;inactivelayeroverlay&quot;)) {
			viewInactiveLayerOverlay = !viewInactiveLayerOverlay;
		} else if(command.equals(&quot;grid&quot;)) {
			viewGrid = !viewGrid;
		} else {
			return;
		}
		regionPanel.repaint();
	}

	public void handleToolAction(ActionEvent e) {
		if(!(e.getSource() instanceof JRadioButton)) {
			return;
		}
		JRadioButton toolButton = (JRadioButton) e.getSource();
		for(Component c : toolButton.getParent().getComponents()) {
			if(c instanceof JRadioButton) {
				JRadioButton button = (JRadioButton) c;
				button.setBorderPainted(false);
			}
		}
		toolButton.setBorderPainted(true);
		String command = e.getActionCommand().substring(6);
		for(Tool tool : Tool.values()) {
			if(tool.name().equalsIgnoreCase(command)) {
				selectedTool = tool;
				return;
			}
		}
	}

	public void handleZoomAction(ActionEvent e) {
		String command = e.getActionCommand().substring(5);
		if (command.equals(&quot;in&quot;)) {
			if(!regionPanel.zoomIn()) {
				zoomInBtn.setEnabled(false);
			}
			zoomOutBtn.setEnabled(true);
		} else if (command.equals(&quot;out&quot;)) {
			if(!regionPanel.zoomOut()) {
				zoomOutBtn.setEnabled(false);
			}
			zoomInBtn.setEnabled(true);
		}
	}

	public void handleLayerAction(ActionEvent e) {
		String command = e.getActionCommand().substring(6);
		if (command.equals(&quot;up&quot;)) {
			if(selectedLayer &lt; 2) { 
				if(++selectedLayer == 2) {
					layerUpBtn.setEnabled(false);
				}
				layerDownBtn.setEnabled(true);
			} else {

			}
		} else if (command.equals(&quot;down&quot;)) {
			if(selectedLayer &gt; 0) {
				if(--selectedLayer == 0) {
					layerDownBtn.setEnabled(false);
				}
				layerUpBtn.setEnabled(true);
			}
		} else {
			return;
		}
		regionPanel.repaint();
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		String command = e.getActionCommand();
		if(command.startsWith(&quot;file&quot;)) {
			handleFileMenuAction(e);
		} else if(command.startsWith(&quot;view&quot;)) {
			handleViewMenuAction(e);
		} else if(command.startsWith(&quot;tools&quot;)) {
			handleToolAction(e);
		} else if(command.startsWith(&quot;zoom&quot;)) {
			handleZoomAction(e);
		} else if(command.startsWith(&quot;layer&quot;)) {
			handleLayerAction(e);
		}
	}

	@Override
	public void mouseClicked(MouseEvent arg0) {
		if(arg0.getSource() instanceof JLabel) {
			JLabel source = (JLabel)arg0.getSource();
			if(source.getToolTipText().matches(&quot;ID: \\d+&quot;)) {
				for(Component c : tilesTabPane.getComponents()) {
					for(Component viewport : ((JScrollPane)c).getComponents()) {
						if(!(viewport instanceof JViewport)) {
							continue;
						}
						for(Component panel : ((JViewport)viewport).getComponents()) {
							for(Component label : ((JPanel)panel).getComponents()) {
								label.setEnabled(true);
							}
						}
					}
				}
				source.setEnabled(false);
				selectedTileID = Integer.parseInt(source.getToolTipText().substring(4));
			}
		}

	}

	public void searchForTiles(ArrayList&lt;Integer&gt; tileIDS) {
		String tileDirectory = &quot;data/tiles&quot;;
		tileIDS.removeAll(tileImageMap.keySet());
		String[] tileFolders = new File(tileDirectory).list();
		for(String s : tileFolders) {
			HashSet&lt;Integer&gt; foundTiles = new HashSet&lt;Integer&gt;();
			for(int i : tileIDS) {
				File f = new File(tileDirectory + &quot;/&quot; + s + &quot;/&quot; + i + &quot;.png&quot;);
				if(f.exists()) {
					openTile(f);
					foundTiles.add(i);
				}
			}
			tileIDS.removeAll(foundTiles);
			if(tileIDS.size() &lt; 1) {
				return;
			}
		}
		JOptionPane.showMessageDialog(this, &quot;Could not find all tiles in default tile folders!\nPlease explicitly open the folder(s) that contain these tiles:\n&quot; + tileIDS.toString());
	}

	public void saveMap() {
		JFileChooser jfc = new JFileChooser(&quot;data/maps&quot;);
		jfc.setFileFilter(new MapFilter());
		jfc.setAcceptAllFileFilterUsed(false);
		if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
			File f = jfc.getSelectedFile();
			if(!f.getName().contains(&quot;.&quot;)) {
				f = new File(f.getAbsolutePath() + &quot;.mpx&quot;);
			}
			if(!f.getName().matches(&quot;\\w+\\.mpx&quot;)) {
				JOptionPane.showMessageDialog(this, &quot;Invalid file!&quot;);
				return;
			} 
			try {
				regionPanel.getMap().saveMap(f);
			} catch (Exception e1) {
				JOptionPane.showMessageDialog(this, &quot;Error saving!&quot;);
				e1.printStackTrace();
			}
			setTitle(TITLE + &quot; | &quot; + f.getName());
		}
	}

	public void openMap() {
		JFileChooser jfc = new JFileChooser(&quot;data/maps&quot;);
		jfc.setFileFilter(new MapFilter());
		jfc.setAcceptAllFileFilterUsed(false);
		if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			File f = jfc.getSelectedFile();
			if(!f.getName().matches(&quot;\\w+\\.mpx&quot;) || !f.exists()) {
				JOptionPane.showMessageDialog(this, &quot;Invalid file!&quot;);
				setTitle(TITLE + &quot; | New Map&quot;);
				return;
			} 
			try {
				searchForTiles(region.loadMap(f));
			} catch (Exception e) {
				JOptionPane.showMessageDialog(this, &quot;Error opening!&quot;);
				e.printStackTrace();
			}
			setTitle(TITLE + &quot; | &quot; + f.getName());
		}
	}

	class MapFilter extends FileFilter {
		@Override
		public boolean accept(File f) {
			if (f.isDirectory() || f.getName().endsWith(&quot;.mpx&quot;)) {
				return true;
			}
			return false;
		}

		@Override
		public String getDescription() {
			return new String(&quot;RPG Map Files (.mpx)&quot;);
		}
	}

	public Image getTileImage(int tileID) {
		return tileImageMap.get(tileID);
	}

	public byte getSelectedLayer() {
		return selectedLayer;
	}

	public boolean viewInactiveLayers() {
		return viewInactiveLayers;
	}

	public boolean viewInactiveLayerOverlay() {
		return viewInactiveLayerOverlay;
	}

	public boolean viewGrid() {
		return viewGrid;
	}

	public Tool getSelectedTool() {
		return selectedTool;
	}

	public int getSelectedTileID() {
		return selectedTileID;
	}

	public void setSelectedTileID(int selectedTileID) {
		this.selectedTileID = selectedTileID;
	}

	public Region getRegion() {
		return region;
	}

	@Override
	public void mouseEntered(MouseEvent arg0) {}
	@Override
	public void mouseExited(MouseEvent arg0) {}
	@Override
	public void mousePressed(MouseEvent arg0) {}
	@Override
	public void mouseReleased(MouseEvent arg0) {}
}
[/code]

RegionPanel.java
http://paste.strictfp.com/7692?key=e3116e1fd90aac52444df05e2f4160c8

(pastie&#39;d because of the 20k character limit)</description>
    
    <lastBuildDate>Thu, 21 Jul 2011 17:49:28 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/map-editor-source/405342.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:9, topic:405342”][quote author=eyeownyew link=topic=502335.msg3675841#msg3675841 date=1311241396]<br>
HM, LET’S GO MESS AROUND AND MAKE A GAME WITH THIS! <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
[/quote]But that’s what I’m doing <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:">[/quote]<br>
I know you are, <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"><br>
I was saying that because it’s entertaining to learn things I don’t know…! Which is many things having to do with graphics in java!.. And many other things in java! Lol &gt;.&gt;</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/10</link>
        <pubDate>Thu, 21 Jul 2011 17:49:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-10</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“eyeownyew, post:8, topic:405342”]HM, LET’S GO MESS AROUND AND MAKE A GAME WITH THIS! :P[/quote]But that’s what I’m doing <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/9</link>
        <pubDate>Thu, 21 Jul 2011 11:05:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-9</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@eyeownyew Eyeownyew]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/eyeownyew">@eyeownyew</a> wrote:</p>
          <blockquote>
              <p>HM, LET’S GO MESS AROUND AND MAKE A GAME WITH THIS! <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/8</link>
        <pubDate>Thu, 21 Jul 2011 09:43:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-8</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@fellixombc fellixombc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fellixombc">@fellixombc</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="6" data-topic="405342">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>I really don’t like how that’s set up to be honest, I get what you mean but I think it actually makes it more complicated than it needs to be (especially for static widgets, if it was dynamic it may make a bit more sense)</p>
</blockquote>
</aside>
<p>I guess its just a matter of personal opinion <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> I just like it so if I need to update a widget or something I don’t have to go through one big file trying to find its properties and such <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/7</link>
        <pubDate>Wed, 20 Jul 2011 23:21:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-7</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>I really don’t like how that’s set up to be honest, I get what you mean but I think it actually makes it more complicated than it needs to be (especially for static widgets, if it was dynamic it may make a bit more sense)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/6</link>
        <pubDate>Wed, 20 Jul 2011 23:12:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-6</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@fellixombc fellixombc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fellixombc">@fellixombc</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:4, topic:405342”][quote author=fellixombc link=topic=502335.msg3675162#msg3675162 date=1311200941]<br>
Wheres the OOP and structure <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> ?</p>
<p>Anyways, thanks, though its close to mine except mine doesn’t have tile highlighting when you’re rollover them (And no layering, going to add that). And some of your other tools etc.</p>
<p>edit: you’re gui is x10 sexier then mine though<br>
[/quote]Bahaha, I actually removed tile highlighting when you roll over them in this version <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> If you really want it I could give it to you.</p>
<p>Also, the OOP is in the code I didn’t show (map format), how much OOP can you put into a GUI? :P[/quote]<br>
Widgets are the own class simply extending the desired super class (that just has certain properties and the event to do on click etc). IMO, it makes things a lot cleaner.</p>
<p>edit, example from my tilecreator: <a href="http://pastie.org/2245505" rel="nofollow noopener">http://pastie.org/2245505</a> (thats the JMenuBar for it, and it’s not where finished)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/5</link>
        <pubDate>Wed, 20 Jul 2011 22:50:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-5</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“fellixombc, post:3, topic:405342”]Wheres the OOP and structure <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> ?</p>
<p>Anyways, thanks, though its close to mine except mine doesn’t have tile highlighting when you’re rollover them (And no layering, going to add that). And some of your other tools etc.</p>
<p>edit: you’re gui is x10 sexier then mine though[/quote]Bahaha, I actually removed tile highlighting when you roll over them in this version <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> If you really want it I could give it to you.</p>
<p>Also, the OOP is in the code I didn’t show (map format), how much OOP can you put into a GUI? <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/4</link>
        <pubDate>Wed, 20 Jul 2011 22:40:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-4</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@fellixombc fellixombc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fellixombc">@fellixombc</a> wrote:</p>
          <blockquote>
              <p>Wheres the OOP and structure <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> ?</p>
<p>Anyways, thanks, though its close to mine except mine doesn’t have tile highlighting when you’re rollover them (And no layering, going to add that). And some of your other tools etc.</p>
<p>edit: you’re gui is x10 sexier then mine though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/3</link>
        <pubDate>Wed, 20 Jul 2011 22:29:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-3</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>wher s the clinut. java? ? <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/2</link>
        <pubDate>Wed, 20 Jul 2011 21:34:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-2</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
      <item>
        <title>Map Editor source</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>So here’s the source for my map editor, it’s definitely not the best, rushed a bit of it.<br>
MapEditor.java</p>
<p>[code=java]package mapeditor;</p>
<p>import <a href="http://java.io">java.io</a>.<em>;<br>
import java.util.</em>;<br>
import java.awt.<em>;<br>
import java.awt.event.</em>;<br>
import javax.swing.*;<br>
import javax.imageio.ImageIO;<br>
import javax.swing.filechooser.FileFilter;</p>
<p>import mapeditor.map.Region;</p>
<p>public class MapEditor extends JFrame implements ActionListener, MouseListener {</p>
<pre><code>public enum Tool { PEN, FILL, PICKER, ERASER }

public static final String TITLE = "RPG Map Editor";
public static final byte MAP_SIZE = 35;
private static final long serialVersionUID = -111657081934826004L;
private final int DEFAULT_WINDOW_X = 900, DEFAULT_WINDOW_Y = 700;

private byte selectedLayer;
private int selectedTileID;
private boolean viewInactiveLayers;
private boolean viewInactiveLayerOverlay;
private boolean viewGrid = true;
private Tool selectedTool = Tool.PEN;
private Region region;
private RegionPanel regionPanel;
private HashMap&lt;Integer, Image&gt; tileImageMap = new HashMap&lt;Integer, Image&gt;();
private JTabbedPane tilesTabPane = new JTabbedPane();
private JButton zoomInBtn = new JButton();
private JButton zoomOutBtn = new JButton();
private JButton layerUpBtn = new JButton();
private JButton layerDownBtn = new JButton();

public static void main(String args[]) {
	new MapEditor();
}

public MapEditor() {
	super(TITLE + " | New Map");
	region = new Region(MAP_SIZE);
	setSize(DEFAULT_WINDOW_X, DEFAULT_WINDOW_Y);
	setDefaultCloseOperation(EXIT_ON_CLOSE);
	setLayout(new BorderLayout());
	init();
	regionPanel = new RegionPanel(this);
	JScrollPane regionScroll = new JScrollPane(regionPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	regionScroll.getVerticalScrollBar().setUnitIncrement(regionScroll.getVerticalScrollBar().getUnitIncrement() * 10);
	add(regionScroll, BorderLayout.CENTER);
	setVisible(true);
}

private void init() {
	initializeMenuBar();
	initializeToolbox();
	openTileFolders(new File("data/tiles"));
}

public void initializeMenuBar() {	
	//------------------File Menu------------------//
	JMenu fileMenu = new JMenu("File");

	JMenuItem fileOpen = new JMenuItem("Open Map...");
	JMenuItem fileSave = new JMenuItem("Save Map...");
	JMenuItem fileLoadTileFolders = new JMenuItem("Load Tile Folder(s)...");
	JMenuItem fileExit = new JMenuItem("Exit");

	fileOpen.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_O, ActionEvent.CTRL_MASK));
	fileSave.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
	fileExit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_E, ActionEvent.CTRL_MASK));

	fileOpen.setActionCommand("file-open");
	fileSave.setActionCommand("file-save");
	fileLoadTileFolders.setActionCommand("file-opentilefolder");
	fileExit.setActionCommand("file-exit");

	fileOpen.addActionListener(this);
	fileSave.addActionListener(this);
	fileLoadTileFolders.addActionListener(this);
	fileExit.addActionListener(this);

	fileMenu.add(fileOpen);
	fileMenu.add(fileSave);
	fileMenu.addSeparator();
	fileMenu.add(fileLoadTileFolders);
	fileMenu.addSeparator();
	fileMenu.add(fileExit);

	//------------------View Menu------------------//
	JMenu viewMenu = new JMenu("View");

	JCheckBoxMenuItem viewInactiveLayers = new JCheckBoxMenuItem("Inactive Layers");
	JCheckBoxMenuItem viewInactiveLayerOverlay = new JCheckBoxMenuItem("Inactive Layer Overlay");
	JCheckBoxMenuItem viewGrid = new JCheckBoxMenuItem("Grid");

	viewInactiveLayerOverlay.setEnabled(false);
	viewGrid.setSelected(true);

	viewInactiveLayers.setActionCommand("view-inactivelayers");
	viewInactiveLayerOverlay.setActionCommand("view-inactivelayeroverlay");
	viewGrid.setActionCommand("view-grid");

	viewInactiveLayers.addActionListener(this);
	viewInactiveLayerOverlay.addActionListener(this);
	viewGrid.addActionListener(this);

	viewMenu.add(viewInactiveLayers);
	viewMenu.add(viewInactiveLayerOverlay);
	viewMenu.addSeparator();
	viewMenu.add(viewGrid);

	//------------------Menu Bar------------------//
	JMenuBar menuBar = new JMenuBar();

	menuBar.add(fileMenu);
	menuBar.add(viewMenu);

	setJMenuBar(menuBar);
}

public void initializeToolbox() {
	JRadioButton penTool = new JRadioButton();
	JRadioButton fillTool = new JRadioButton();
	JRadioButton pickerTool = new JRadioButton();
	JRadioButton eraserTool = new JRadioButton();


	try {
		penTool.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/normal.png"))));
		fillTool.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/fill.png"))));
		pickerTool.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/picker.png"))));
		eraserTool.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/eraser.png"))));
		zoomInBtn.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/zoomin.png"))));
		zoomOutBtn.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/zoomout.png"))));
		layerUpBtn.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/uplayer.png"))));
		layerDownBtn.setIcon(new ImageIcon(ImageIO.read(new File("data/misc/downlayer.png"))));
	} catch(IOException e) {
		JOptionPane.showMessageDialog(this, "Cannot find the data folder, you're running this jar from the wrong place!");
	}

	penTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
	fillTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
	pickerTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));
	eraserTool.setBorder(BorderFactory.createLineBorder(Color.BLUE));

	penTool.setActionCommand("tools-" + Tool.PEN.name());
	fillTool.setActionCommand("tools-" + Tool.FILL.name());
	pickerTool.setActionCommand("tools-" + Tool.PICKER.name());
	eraserTool.setActionCommand("tools-" + Tool.ERASER.name());
	zoomInBtn.setActionCommand("zoom-in");
	zoomOutBtn.setActionCommand("zoom-out");
	layerUpBtn.setActionCommand("layer-up");
	layerDownBtn.setActionCommand("layer-down");

	layerDownBtn.setEnabled(false);
	zoomInBtn.setEnabled(false);

	penTool.addActionListener(this);
	fillTool.addActionListener(this);
	pickerTool.addActionListener(this);
	eraserTool.addActionListener(this);
	zoomInBtn.addActionListener(this);
	zoomOutBtn.addActionListener(this);
	layerUpBtn.addActionListener(this);		
	layerDownBtn.addActionListener(this);

	JPanel editorTools = new JPanel();
	editorTools.setLayout(new BoxLayout(editorTools, BoxLayout.X_AXIS));
	editorTools.add(penTool);
	editorTools.add(fillTool);
	editorTools.add(pickerTool);
	editorTools.add(eraserTool);
	editorTools.add(new JToolBar.Separator());
	editorTools.add(zoomInBtn);
	editorTools.add(zoomOutBtn);
	editorTools.add(new JToolBar.Separator());
	editorTools.add(layerUpBtn);
	editorTools.add(layerDownBtn);

	JPanel editorPanel = new JPanel();
	editorPanel.setLayout(new BoxLayout(editorPanel, BoxLayout.Y_AXIS));
	editorPanel.add(editorTools);
	editorPanel.add(tilesTabPane);

	add(editorPanel, BorderLayout.LINE_START);
}

public void openTileFolders(File ... folders) {
	try {
		for(File folder : folders) {
			File[] tileImageFiles =  folder.listFiles(new FilenameFilter() {
				@Override
				public boolean accept(File arg0, String arg1) {
					if(arg1 == "0") {
						System.out.println(arg1.matches("\\d+(\\.png)?"));
					}
					return arg1.matches("\\d+(\\.png)?");
				}
			});
			JPanel folderPanel = new JPanel();
			folderPanel.setLayout(new GridLayout(0, 8));
			JScrollPane folderScrollPane = new JScrollPane(folderPanel, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_NEVER);
			folderScrollPane.getVerticalScrollBar().setUnitIncrement(folderScrollPane.getVerticalScrollBar().getUnitIncrement() * 10);
			ArrayList&lt;JLabel&gt; labels = new ArrayList&lt;JLabel&gt;();
			for(int i = 0; i &lt; tileImageFiles.length; i++) {
				File file = tileImageFiles[i];
				int id = Integer.parseInt(file.getName().split("\\.")[0]);
				tileImageMap.put(id, ImageIO.read(file));
				JLabel tileLabel = new JLabel(new ImageIcon(tileImageMap.get(id)));
				tileLabel.setToolTipText("ID: " + id);
				tileLabel.addMouseListener(this);
				labels.add(tileLabel);
			}
			sortLabels(labels);
			for(JLabel label : labels) {
				folderPanel.add(label);
			}
			tilesTabPane.addTab(folder.getName(), folderScrollPane);
			tilesTabPane.setSelectedComponent(folderScrollPane);
		}
	} catch(Exception e) {
		System.out.println("Error opening folders!");
		e.printStackTrace();
	}
}

public void openTile(File tile) {
	try {
		JPanel folderPanel = (JPanel) ((JScrollPane)tilesTabPane.getComponent(0)).getComponent(0);
		int id = Integer.parseInt(tile.getName().split("\\.")[0]);
		tileImageMap.put(id, ImageIO.read(tile));
		JLabel tileLabel = new JLabel(new ImageIcon(tileImageMap.get(id)));
		tileLabel.setToolTipText("ID: " + id);
		tileLabel.addMouseListener(this);
		folderPanel.add(tileLabel);
		regionPanel.repaint();
	} catch(Exception e) {
		e.printStackTrace();
	}
}

public void sortLabels(ArrayList&lt;JLabel&gt; labels) {
	Collections.sort(labels, new Comparator&lt;JLabel&gt;() {
		public int compare(JLabel label1, JLabel label2) {
			int id = Integer.parseInt(label1.getToolTipText().substring(4));
			int id2 = Integer.parseInt(label2.getToolTipText().substring(4));
			if (id &gt; id2){
				return 1;
			} else if (id &lt; id2){
				return -1;
			}
			return 0;
		}
	});
}


public void handleFileMenuAction(ActionEvent e) {
	String command = e.getActionCommand().substring(5);
	if(command.equals("open")) {
		openMap();
	} else if(command.equals("save")) {
		saveMap();
	} else if(command.equals("opentilefolder")) {
		JFileChooser jfc = new JFileChooser("data/tiles");
		jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
		jfc.setMultiSelectionEnabled(true);
		if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
			openTileFolders(jfc.getSelectedFiles());
		}
	} else if(command.equals("exit")) {
		System.exit(0);
	} 
}

public void handleViewMenuAction(ActionEvent e) {
	String command = e.getActionCommand().substring(5);
	if(command.equals("inactivelayers")) {
		viewInactiveLayers = !viewInactiveLayers;
		JCheckBoxMenuItem cb = (JCheckBoxMenuItem) e.getSource();
		for(Component c : cb.getParent().getComponents()) {
			if(c instanceof JCheckBoxMenuItem) {
				JCheckBoxMenuItem checkBox = (JCheckBoxMenuItem) c;
				if(checkBox.getActionCommand().equals("view-inactivelayeroverlay")) {
					if(viewInactiveLayers) {
						checkBox.setEnabled(true);
					} else {
						checkBox.setEnabled(false);
						checkBox.setSelected(false);
						viewInactiveLayerOverlay = false;
					}
					break;
				}
			}
		}
	} else if(command.equals("inactivelayeroverlay")) {
		viewInactiveLayerOverlay = !viewInactiveLayerOverlay;
	} else if(command.equals("grid")) {
		viewGrid = !viewGrid;
	} else {
		return;
	}
	regionPanel.repaint();
}

public void handleToolAction(ActionEvent e) {
	if(!(e.getSource() instanceof JRadioButton)) {
		return;
	}
	JRadioButton toolButton = (JRadioButton) e.getSource();
	for(Component c : toolButton.getParent().getComponents()) {
		if(c instanceof JRadioButton) {
			JRadioButton button = (JRadioButton) c;
			button.setBorderPainted(false);
		}
	}
	toolButton.setBorderPainted(true);
	String command = e.getActionCommand().substring(6);
	for(Tool tool : Tool.values()) {
		if(tool.name().equalsIgnoreCase(command)) {
			selectedTool = tool;
			return;
		}
	}
}

public void handleZoomAction(ActionEvent e) {
	String command = e.getActionCommand().substring(5);
	if (command.equals("in")) {
		if(!regionPanel.zoomIn()) {
			zoomInBtn.setEnabled(false);
		}
		zoomOutBtn.setEnabled(true);
	} else if (command.equals("out")) {
		if(!regionPanel.zoomOut()) {
			zoomOutBtn.setEnabled(false);
		}
		zoomInBtn.setEnabled(true);
	}
}

public void handleLayerAction(ActionEvent e) {
	String command = e.getActionCommand().substring(6);
	if (command.equals("up")) {
		if(selectedLayer &lt; 2) { 
			if(++selectedLayer == 2) {
				layerUpBtn.setEnabled(false);
			}
			layerDownBtn.setEnabled(true);
		} else {

		}
	} else if (command.equals("down")) {
		if(selectedLayer &gt; 0) {
			if(--selectedLayer == 0) {
				layerDownBtn.setEnabled(false);
			}
			layerUpBtn.setEnabled(true);
		}
	} else {
		return;
	}
	regionPanel.repaint();
}

@Override
public void actionPerformed(ActionEvent e) {
	String command = e.getActionCommand();
	if(command.startsWith("file")) {
		handleFileMenuAction(e);
	} else if(command.startsWith("view")) {
		handleViewMenuAction(e);
	} else if(command.startsWith("tools")) {
		handleToolAction(e);
	} else if(command.startsWith("zoom")) {
		handleZoomAction(e);
	} else if(command.startsWith("layer")) {
		handleLayerAction(e);
	}
}

@Override
public void mouseClicked(MouseEvent arg0) {
	if(arg0.getSource() instanceof JLabel) {
		JLabel source = (JLabel)arg0.getSource();
		if(source.getToolTipText().matches("ID: \\d+")) {
			for(Component c : tilesTabPane.getComponents()) {
				for(Component viewport : ((JScrollPane)c).getComponents()) {
					if(!(viewport instanceof JViewport)) {
						continue;
					}
					for(Component panel : ((JViewport)viewport).getComponents()) {
						for(Component label : ((JPanel)panel).getComponents()) {
							label.setEnabled(true);
						}
					}
				}
			}
			source.setEnabled(false);
			selectedTileID = Integer.parseInt(source.getToolTipText().substring(4));
		}
	}

}

public void searchForTiles(ArrayList&lt;Integer&gt; tileIDS) {
	String tileDirectory = "data/tiles";
	tileIDS.removeAll(tileImageMap.keySet());
	String[] tileFolders = new File(tileDirectory).list();
	for(String s : tileFolders) {
		HashSet&lt;Integer&gt; foundTiles = new HashSet&lt;Integer&gt;();
		for(int i : tileIDS) {
			File f = new File(tileDirectory + "/" + s + "/" + i + ".png");
			if(f.exists()) {
				openTile(f);
				foundTiles.add(i);
			}
		}
		tileIDS.removeAll(foundTiles);
		if(tileIDS.size() &lt; 1) {
			return;
		}
	}
	JOptionPane.showMessageDialog(this, "Could not find all tiles in default tile folders!\nPlease explicitly open the folder(s) that contain these tiles:\n" + tileIDS.toString());
}

public void saveMap() {
	JFileChooser jfc = new JFileChooser("data/maps");
	jfc.setFileFilter(new MapFilter());
	jfc.setAcceptAllFileFilterUsed(false);
	if (jfc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
		File f = jfc.getSelectedFile();
		if(!f.getName().contains(".")) {
			f = new File(f.getAbsolutePath() + ".mpx");
		}
		if(!f.getName().matches("\\w+\\.mpx")) {
			JOptionPane.showMessageDialog(this, "Invalid file!");
			return;
		} 
		try {
			regionPanel.getMap().saveMap(f);
		} catch (Exception e1) {
			JOptionPane.showMessageDialog(this, "Error saving!");
			e1.printStackTrace();
		}
		setTitle(TITLE + " | " + f.getName());
	}
}

public void openMap() {
	JFileChooser jfc = new JFileChooser("data/maps");
	jfc.setFileFilter(new MapFilter());
	jfc.setAcceptAllFileFilterUsed(false);
	if (jfc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
		File f = jfc.getSelectedFile();
		if(!f.getName().matches("\\w+\\.mpx") || !f.exists()) {
			JOptionPane.showMessageDialog(this, "Invalid file!");
			setTitle(TITLE + " | New Map");
			return;
		} 
		try {
			searchForTiles(region.loadMap(f));
		} catch (Exception e) {
			JOptionPane.showMessageDialog(this, "Error opening!");
			e.printStackTrace();
		}
		setTitle(TITLE + " | " + f.getName());
	}
}

class MapFilter extends FileFilter {
	@Override
	public boolean accept(File f) {
		if (f.isDirectory() || f.getName().endsWith(".mpx")) {
			return true;
		}
		return false;
	}

	@Override
	public String getDescription() {
		return new String("RPG Map Files (.mpx)");
	}
}

public Image getTileImage(int tileID) {
	return tileImageMap.get(tileID);
}

public byte getSelectedLayer() {
	return selectedLayer;
}

public boolean viewInactiveLayers() {
	return viewInactiveLayers;
}

public boolean viewInactiveLayerOverlay() {
	return viewInactiveLayerOverlay;
}

public boolean viewGrid() {
	return viewGrid;
}

public Tool getSelectedTool() {
	return selectedTool;
}

public int getSelectedTileID() {
	return selectedTileID;
}

public void setSelectedTileID(int selectedTileID) {
	this.selectedTileID = selectedTileID;
}

public Region getRegion() {
	return region;
}

@Override
public void mouseEntered(MouseEvent arg0) {}
@Override
public void mouseExited(MouseEvent arg0) {}
@Override
public void mousePressed(MouseEvent arg0) {}
@Override
public void mouseReleased(MouseEvent arg0) {}
</code></pre>
<p>}<br>
[/code]</p>
<p>RegionPanel.java<br>
<a href="http://paste.strictfp.com/7692?key=e3116e1fd90aac52444df05e2f4160c8" class="onebox" target="_blank">http://paste.strictfp.com/7692?key=e3116e1fd90aac52444df05e2f4160c8</a></p>
<p>(pastie’d because of the 20k character limit)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/map-editor-source/405342/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/map-editor-source/405342/1</link>
        <pubDate>Wed, 20 Jul 2011 21:21:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405342-1</guid>
        <source url="https://forum.moparisthebest.com/t/map-editor-source/405342.rss">Map Editor source</source>
      </item>
  </channel>
</rss>
