<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Lisp Interpreter</title>
    <link>https://forum.moparisthebest.com/t/lisp-interpreter/192795</link>
    <description>Hi all. I&#39;ve been working on this Lisp interpreter really for all of the time that I&#39;ve had to work on Java recently, and the result has been pretty cool. As of now it&#39;s little more than a mathematical expression evaluator, but the capability for expansion is there.

The zipfile is attached.

The first phase splits a string (or char array) input into tokens, and then into more tangible objects (such as numbers) to be used by the interpreter. Anything that isn&#39;t a number (there are many forms that it accepts: integer, float, double, hex, oct, you can specify the radix etc. More [url=http://www.gigamonkeys.com/book/numbers-characters-and-strings.html]here[/url]. Complex numbers aren&#39;t implemented, cos frankly I have no idea what use they have) or a string or a character (which I have not implemented yet) is counted as a &quot;symbol&quot;, which can be either a variable or function invocation. Both of these are bound in a fashion that you&#39;d really have to see to understand (check out lisp.lang.Interpreter). All of these, when included in a pair of parentheses, constitute the elements of a list.

The second phase is the interpreter, of course. It interprets. I can&#39;t really tell you anymore!

All of the data types are built on top of &quot;cons&quot; cells (especially the lists. Building everything else on top of cons was a design idea). I do not feel like explaining cons to you in depth. Basically, it&#39;s an object with two pointers to two other objects, called [tt]car[/tt] and [tt]cdr[/tt], respectively, from left to right.

Functions currently implemented are:


[ul][li][tt]defun[/tt] - define your own function. The form is this: [tt](defun ?doc-string (*parameters) *(*body))[/tt]. In the parameters part you declare parameters, in the body part you declare stuff. It&#39;s easy.

Note about this one: according to the standard, Lisp has some useful parameter attributes, including optional parameters, catchall parameters, and one that is difficult for me to explain without thinking about it alot. I do not implement these. The values supplied to a defined function must match the amount of parameters declared, or you will run into problems. I will get around to it...

Also, I&#39;m not sure if there&#39;s a better way to negotiate the return value of a function; It just returns the last value that was interpreted in the body. I&#39;m pretty sure this is the right way, though.[/li]
[li]Basic mathematical operations: [tt]*[/tt], [tt]/[/tt], [tt]+[/tt], [tt]-[/tt]. These are simple, the form is: [tt]([*/+-] *numbers)[/tt].[/li][/ul]


Read more about Lisp in this fantastic online book: http://www.gigamonkeys.com/book/

... and leave your comments, opinions, diatribes on my choice of design, etc.! Thanks.</description>
    
    <lastBuildDate>Tue, 25 Mar 2008 14:30:55 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/lisp-interpreter/192795.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Lisp Interpreter</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>very nice, ALOT neater and better structured then mine.<br>
mine is in 2 classes <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> HA<br>
lisp.java<br>
sexp.java</p>
<p>good start, ill try use yours if thats ok?, ill “interpret” &lt;- Ha, my stuff, if statements :o omgawsh.<br>
if i have time and the ladyfriend doesnt drag me away from my computer, women hey? who needs them!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-interpreter/192795/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-interpreter/192795/2</link>
        <pubDate>Tue, 25 Mar 2008 14:30:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-192795-2</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-interpreter/192795.rss">Lisp Interpreter</source>
      </item>
      <item>
        <title>Lisp Interpreter</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>Hi all. I’ve been working on this Lisp interpreter really for all of the time that I’ve had to work on Java recently, and the result has been pretty cool. As of now it’s little more than a mathematical expression evaluator, but the capability for expansion is there.</p>
<p>The zipfile is attached.</p>
<p>The first phase splits a string (or char array) input into tokens, and then into more tangible objects (such as numbers) to be used by the interpreter. Anything that isn’t a number (there are many forms that it accepts: integer, float, double, hex, oct, you can specify the radix etc. More <a href="http://www.gigamonkeys.com/book/numbers-characters-and-strings.html" data-bbcode="true" rel="nofollow noopener">here</a>. Complex numbers aren’t implemented, cos frankly I have no idea what use they have) or a string or a character (which I have not implemented yet) is counted as a “symbol”, which can be either a variable or function invocation. Both of these are bound in a fashion that you’d really have to see to understand (check out lisp.lang.Interpreter). All of these, when included in a pair of parentheses, constitute the elements of a list.</p>
<p>The second phase is the interpreter, of course. It interprets. I can’t really tell you anymore!</p>
<p>All of the data types are built on top of “cons” cells (especially the lists. Building everything else on top of cons was a design idea). I do not feel like explaining cons to you in depth. Basically, it’s an object with two pointers to two other objects, called [tt]car[/tt] and [tt]cdr[/tt], respectively, from left to right.</p>
<p>Functions currently implemented are:</p>
<p>[ul][li][tt]defun[/tt] - define your own function. The form is this: [tt](defun ?doc-string (*parameters) *(*body))[/tt]. In the parameters part you declare parameters, in the body part you declare stuff. It’s easy.</p>
<p>Note about this one: according to the standard, Lisp has some useful parameter attributes, including optional parameters, catchall parameters, and one that is difficult for me to explain without thinking about it alot. I do not implement these. The values supplied to a defined function must match the amount of parameters declared, or you will run into problems. I will get around to it…</p>
<p>Also, I’m not sure if there’s a better way to negotiate the return value of a function; It just returns the last value that was interpreted in the body. I’m pretty sure this is the right way, though.[/li]<br>
[li]Basic mathematical operations: [tt]<em>[/tt], [tt]/[/tt], [tt]+[/tt], [tt]-[/tt]. These are simple, the form is: [tt]([</em>/±] *numbers)[/tt].[/li][/ul]</p>
<p>Read more about Lisp in this fantastic online book: <a href="http://www.gigamonkeys.com/book/" rel="nofollow noopener">http://www.gigamonkeys.com/book/</a></p>
<p>… and leave your comments, opinions, diatribes on my choice of design, etc.! Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/lisp-interpreter/192795/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/lisp-interpreter/192795/1</link>
        <pubDate>Tue, 25 Mar 2008 11:40:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-192795-1</guid>
        <source url="https://forum.moparisthebest.com/t/lisp-interpreter/192795.rss">Lisp Interpreter</source>
      </item>
  </channel>
</rss>
