<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Hey guys what do you think of my toy prefix notation calculator</title>
    <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482</link>
    <description>[code=java]import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Scanner;
import java.util.function.DoubleUnaryOperator;
import java.util.function.DoubleBinaryOperator;
import java.util.stream.Collectors;

/**
 * calc - a prefix notation calculator
 */
public class calc {
    public calc() {
        Scanner scanner = new Scanner(System.in);
        while(true) {
            System.out.print(&quot;&gt; &quot;);
            String expr = scanner.nextLine();
            if(expr.equals(&quot;quit&quot;)) break;
            if(expr.equals(&quot;help&quot;) || expr.equals(&quot;?&quot;))
                usage();
            Queue&lt;String&gt; q = new LinkedList&lt;&gt;();
            Scanner exprScanner = new Scanner(expr);
            while(exprScanner.hasNext())
                q.add(exprScanner.next());
            System.out.println(&quot;Tokens: &quot; + q);
            try {
                Expression res = parse(q);
                System.out.println(&quot;In-fix: &quot; + res);
                System.out.println(res.eval());
            } catch(Exception e) {
                System.err.println(&quot;Error: &quot; + e.getMessage());
            }
        }
    }

    private Expression parse(Queue&lt;String&gt; q) throws Exception {
        if(q.isEmpty()) throw new Exception(&quot;Invalid input.&quot;);
        String token = q.remove().replace(&quot;)&quot;,&quot;&quot;);
        try {
            return new Number(Double.parseDouble(token));
        } catch(NumberFormatException nfe) {
            switch(token) {
                case &quot;(sqrt&quot;: return new SquareRoot(parse(q));
                case &quot;(+&quot;: return new Add(parse(q), parse(q));
                case &quot;(*&quot;: return new Multiply(parse(q), parse(q));
                case &quot;(/&quot;: return new Divide(parse(q), parse(q));
                case &quot;(-&quot;:
                    if(q.peek().contains(&quot;)&quot;))
                        return new Negate(parse(q));
                    else
                        return new Subtract(parse(q), parse(q));
            }
        }
        throw new Exception(&quot;Invalid input.&quot;);
    }

    public static void main(String[] args) throws Exception {
        try {
            new calc();
        } catch(Exception e) {
            System.exit(1);
        }
    }

    private static void usage() {
        System.out.println(&quot;calc - a prefix notation calculator&quot;);
        System.out.println(&quot;Enter an expression below to be evaluated.&quot;);
    }

    public interface Expression {
        public double eval();
        public String toString();
    }

    static class Number implements Expression {
        double val;

        Number(double val) {
            this.val = val;
        }

        public double eval() {
            return val;
        }

        public String toString() {
            return &quot;&quot;+val;
        }
    }

    static class UnaryExpression implements Expression {
        private String operator;
        private double defaultValue;
        private DoubleUnaryOperator op;
        private Expression expression;

        UnaryExpression(String operator, double defaultValue,
                        DoubleUnaryOperator op, Expression expression) {
            this.operator = operator;
            this.defaultValue = defaultValue;
            this.op = op;
            this.expression = expression;
        }

        public double eval() {
            return op.applyAsDouble(expression.eval());
        }

        public String toString() {
            return operator + &quot;(&quot; + expression.toString() + &quot;)&quot;;
        }
    }

    static class BinaryExpression implements Expression {
        private String operator;
        private double defaultValue;
        private DoubleBinaryOperator op;
        private Queue&lt;Expression&gt; expressions;

        BinaryExpression(String operator, double defaultValue,
                         DoubleBinaryOperator op, Expression[] expressions) {
            this.operator = operator;
            this.defaultValue = defaultValue;
            this.op = op;
            this.expressions = new LinkedList&lt;Expression&gt;();
            for(Expression expression : expressions)
                this.expressions.add(expression);
        }

        public double eval() {
            return expressions.stream()
                              .mapToDouble(Expression::eval)
                              .reduce(op)
                              .orElse(defaultValue);
        }

        public String toString() {
            return expressions.stream()
                              .map(Object::toString)
                              .collect(Collectors.joining(&quot; &quot; + operator + &quot; &quot;, &quot;(&quot;, &quot;)&quot;));
        }
    }

    static class Negate extends UnaryExpression {
        Negate(Expression expression) {
            super(&quot;-&quot;, 0.0, (v) -&gt; -v, expression);
        }
    }

    static class SquareRoot extends UnaryExpression {
        SquareRoot(Expression expression) {
            super(&quot;√&quot;, 0.0, (v) -&gt; Math.sqrt(v), expression);
        }
    }

    static class Add extends BinaryExpression {
        Add(Expression... expressions) {
            super(&quot;+&quot;, 0.0, (l, r) -&gt; l + r, expressions);
        }
    }

    static class Subtract extends BinaryExpression {
        Subtract(Expression... expressions) {
            super(&quot;-&quot;, 0.0, (l, r) -&gt; l - r, expressions);
        }
    }

    static class Multiply extends BinaryExpression {
        Multiply(Expression... expressions) {
            super(&quot;*&quot;, 0.0, (l, r) -&gt; l * r, expressions);
        }
    }

    static class Divide extends BinaryExpression {
        Divide(Expression... expressions) {
            super(&quot;/&quot;, 0.0, (l, r) -&gt; l / r, expressions);
        }
    }
}[/code]

What works: (- 2 2), (- 2), (+ 2 2), (+ (+ 2 2) (+ 2 2))

What doesn&#39;t work: (+ 2 2 2 2), (- (+ 2 2))

I suck at parsing this stuff properly. Any suggestions?</description>
    
    <lastBuildDate>Thu, 26 May 2016 22:52:11 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[quote=“object, post:5, topic:555482”]Just a tip: Use java.util.Scanner rather than java.util.StringTokenizer, as that is more a legacy class these days.</p>
<p>Edit: I saw you’re using both. Why?[/quote]Good point, I’ll incorporate that now.</p>
<p>Here is the latest code. I refactored the inner class structure, but it’s still not parsing arbitrary arguments (yet):</p>
<p>[code=java]import java.util.Iterator;<br>
import java.util.LinkedList;<br>
import java.util.Queue;<br>
import java.util.Scanner;<br>
import java.util.function.DoubleUnaryOperator;<br>
import java.util.function.DoubleBinaryOperator;</p>
<p>/**</p>
<ul>
<li>
<p>calc - a prefix notation calculator<br>
*/<br>
public class calc {<br>
public calc() {<br>
Scanner scanner = new Scanner(System.in);<br>
while(true) {<br>
System.out.print("&gt; “);<br>
String expr = scanner.nextLine();<br>
if(expr.equals(“quit”)) break;<br>
if(expr.equals(“help”) || expr.equals(”?"))<br>
usage();<br>
Queue q = new LinkedList&lt;&gt;();<br>
Scanner exprScanner = new Scanner(expr);<br>
while(exprScanner.hasNext())<br>
q.add(exprScanner.next());<br>
System.out.println(q);<br>
try {<br>
Expression res = parse(q);<br>
System.out.println(res.eval());<br>
} catch(Exception e) {<br>
System.err.println("Error: " + e.getMessage());<br>
}<br>
}<br>
}</p>
<p>private Expression parse(Queue q) throws Exception {<br>
if(q.isEmpty()) throw new Exception(“Invalid input.”);<br>
String token = q.remove().replace(")","");<br>
try {<br>
return new Number(Double.parseDouble(token));<br>
} catch(NumberFormatException nfe) {<br>
if(token.equals("(+")) {<br>
return new Add(parse(q), parse(q));<br>
} else if(token.equals("(-")) {<br>
if(q.peek().contains(")"))<br>
return new Negate(parse(q));<br>
else<br>
return new Subtract(parse(q), parse(q));<br>
} else if(token.equals("(*")) {<br>
return new Multiply(parse(q), parse(q));<br>
} else if(token.equals("(/")) {<br>
return new Divide(parse(q), parse(q));<br>
} else if(token.equals("(sqrt")) {<br>
return new SquareRoot(parse(q));<br>
}<br>
}<br>
throw new Exception(“Invalid input.”);<br>
}</p>
<p>public static void main(String[] args) throws Exception {<br>
try {<br>
new calc();<br>
} catch(Exception e) {<br>
System.exit(1);<br>
}<br>
}</p>
<p>private static void usage() {<br>
System.out.println(“calc - a prefix notation calculator”);<br>
System.out.println(“Enter an expression below to be evaluated.”);<br>
}</p>
<p>public interface Expression {<br>
public double eval();<br>
public String toString();<br>
}</p>
<p>static class Number implements Expression {<br>
double val;</p>
<pre><code> Number(double val) {
     this.val = val;
 }

 public double eval() {
     return val;
 }

 public String toString() {
     return ""+val;
 }
</code></pre>
<p>}</p>
<p>static class UnaryExpression implements Expression {<br>
private String operator;<br>
private double defaultValue;<br>
private DoubleUnaryOperator op;<br>
private Expression expression;</p>
<pre><code> UnaryExpression(String operator, double defaultValue,
                 DoubleUnaryOperator op, Expression expression) {
     this.operator = operator;
     this.defaultValue = defaultValue;
     this.op = op;
     this.expression = expression;
 }

 public double eval() {
     return op.applyAsDouble(expression.eval());
 }

 public String toString() {
     return operator + "(" + expression.toString() + ")";
 }
</code></pre>
<p>}</p>
<p>static class BinaryExpression implements Expression {<br>
private String operator;<br>
private double defaultValue;<br>
private DoubleBinaryOperator op;<br>
private Queue expressions;</p>
<pre><code> BinaryExpression(String operator, double defaultValue,
                  DoubleBinaryOperator op, Expression[] expressions) {
     this.operator = operator;
     this.defaultValue = defaultValue;
     this.op = op;
     this.expressions = new LinkedList&lt;Expression&gt;();
     for(Expression expression : expressions)
         this.expressions.add(expression);
 }

 public double eval() {
     return expressions.stream()
                       .mapToDouble(Expression::eval)
                       .reduce(op)
                       .orElse(defaultValue);
 }

 public String toString() {
     Iterator it = expressions.iterator();
     String ret = it.next().toString();
     for(Expression expression : expressions)
         ret += operator + it.next().toString();
     return ret;
 }
</code></pre>
<p>}</p>
<p>static class Negate extends UnaryExpression {<br>
Negate(Expression expression) {<br>
super("-", 0.0, (v) -&gt; -v, expression);<br>
}<br>
}</p>
<p>static class SquareRoot extends UnaryExpression {<br>
SquareRoot(Expression expression) {<br>
super(“√”, 0.0, (v) -&gt; Math.sqrt(v), expression);<br>
}<br>
}</p>
<p>static class Add extends BinaryExpression {<br>
Add(Expression… expressions) {<br>
super("+", 0.0, (l, r) -&gt; l + r, expressions);<br>
}<br>
}</p>
<p>static class Subtract extends BinaryExpression {<br>
Subtract(Expression… expressions) {<br>
super("-", 0.0, (l, r) -&gt; l - r, expressions);<br>
}<br>
}</p>
<p>static class Multiply extends BinaryExpression {<br>
Multiply(Expression… expressions) {<br>
super("*", 0.0, (l, r) -&gt; l * r, expressions);<br>
}<br>
}</p>
<p>static class Divide extends BinaryExpression {<br>
Divide(Expression… expressions) {<br>
super("/", 0.0, (l, r) -&gt; l / r, expressions);<br>
}<br>
}<br>
}[/code]</p>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/6</link>
        <pubDate>Thu, 26 May 2016 22:52:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-6</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>Just a tip: Use java.util.Scanner rather than java.util.StringTokenizer, as that is more a legacy class these days.</p>
<p>Edit: I saw you’re using both. Why?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/5</link>
        <pubDate>Thu, 26 May 2016 22:22:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-5</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[quote=“Fat Cookies, post:3, topic:555482”]From a structure perspective, I’d recognise the difference between unary operators (not, neg etc), binary operators (-, / etc) and operators that take an arbitrary number of arguments (+, *, map, fold etc) so you could separate processing the operands  from the actual operation.</p>
<aside class="quote">
<blockquote>
<p>could define a grammar and use that to parse the input? pyPEG for python is good and something similar must exist for java</p>
</blockquote>
</aside>
<p><a href="http://www2.cs.tum.edu/projects/cup/" data-bbcode="true" rel="nofollow noopener">CUP</a> would be a shout - sort of mimics YACC.[/quote]- and / take an arbitrary number of arguments too (I’m kinda going based off of <a href="http://drracket.org" data-bbcode="true" rel="nofollow noopener">Racket</a> syntax). Thanks for the suggestions – I’ll implement em <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/4</link>
        <pubDate>Thu, 26 May 2016 18:45:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-4</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>From a structure perspective, I’d recognise the difference between unary operators (not, neg etc), binary operators (-, / etc) and operators that take an arbitrary number of arguments (+, *, map, fold etc) so you could separate processing the operands  from the actual operation.</p>
<aside class="quote" data-post="2" data-topic="555482">
<div class="title">
<div class="quote-controls"></div>
 Justin Bieber:</div>
<blockquote>
<p>could define a grammar and use that to parse the input? pyPEG for python is good and something similar must exist for java</p>
</blockquote>
</aside>
<p><a href="http://www2.cs.tum.edu/projects/cup/" data-bbcode="true">CUP</a> would be a shout - sort of mimics YACC.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/3</link>
        <pubDate>Wed, 25 May 2016 22:26:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-3</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@xx_matty_xx Justin Bieber]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xx_matty_xx">@xx_matty_xx</a> wrote:</p>
          <blockquote>
              <p>could define a grammar and use that to parse the input? pyPEG for python is good and something similar must exist for java</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/2</link>
        <pubDate>Wed, 25 May 2016 16:23:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-2</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
      <item>
        <title>Hey guys what do you think of my toy prefix notation calculator</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[code=java]import java.util.Iterator;<br>
import java.util.LinkedList;<br>
import java.util.Queue;<br>
import java.util.Scanner;<br>
import java.util.function.DoubleUnaryOperator;<br>
import java.util.function.DoubleBinaryOperator;<br>
import java.util.stream.Collectors;</p>
<p>/**</p>
<ul>
<li>
<p>calc - a prefix notation calculator<br>
*/<br>
public class calc {<br>
public calc() {<br>
Scanner scanner = new Scanner(System.in);<br>
while(true) {<br>
System.out.print("&gt; “);<br>
String expr = scanner.nextLine();<br>
if(expr.equals(“quit”)) break;<br>
if(expr.equals(“help”) || expr.equals(”?"))<br>
usage();<br>
Queue q = new LinkedList&lt;&gt;();<br>
Scanner exprScanner = new Scanner(expr);<br>
while(exprScanner.hasNext())<br>
q.add(exprScanner.next());<br>
System.out.println("Tokens: " + q);<br>
try {<br>
Expression res = parse(q);<br>
System.out.println("In-fix: " + res);<br>
System.out.println(res.eval());<br>
} catch(Exception e) {<br>
System.err.println("Error: " + e.getMessage());<br>
}<br>
}<br>
}</p>
<p>private Expression parse(Queue q) throws Exception {<br>
if(q.isEmpty()) throw new Exception(“Invalid input.”);<br>
String token = q.remove().replace(")","");<br>
try {<br>
return new Number(Double.parseDouble(token));<br>
} catch(NumberFormatException nfe) {<br>
switch(token) {<br>
case “(sqrt”: return new SquareRoot(parse(q));<br>
case “(+”: return new Add(parse(q), parse(q));<br>
case “(*”: return new Multiply(parse(q), parse(q));<br>
case “(/”: return new Divide(parse(q), parse(q));<br>
case “(-”:<br>
if(q.peek().contains(")"))<br>
return new Negate(parse(q));<br>
else<br>
return new Subtract(parse(q), parse(q));<br>
}<br>
}<br>
throw new Exception(“Invalid input.”);<br>
}</p>
<p>public static void main(String[] args) throws Exception {<br>
try {<br>
new calc();<br>
} catch(Exception e) {<br>
System.exit(1);<br>
}<br>
}</p>
<p>private static void usage() {<br>
System.out.println(“calc - a prefix notation calculator”);<br>
System.out.println(“Enter an expression below to be evaluated.”);<br>
}</p>
<p>public interface Expression {<br>
public double eval();<br>
public String toString();<br>
}</p>
<p>static class Number implements Expression {<br>
double val;</p>
<pre><code> Number(double val) {
     this.val = val;
 }

 public double eval() {
     return val;
 }

 public String toString() {
     return ""+val;
 }
</code></pre>
<p>}</p>
<p>static class UnaryExpression implements Expression {<br>
private String operator;<br>
private double defaultValue;<br>
private DoubleUnaryOperator op;<br>
private Expression expression;</p>
<pre><code> UnaryExpression(String operator, double defaultValue,
                 DoubleUnaryOperator op, Expression expression) {
     this.operator = operator;
     this.defaultValue = defaultValue;
     this.op = op;
     this.expression = expression;
 }

 public double eval() {
     return op.applyAsDouble(expression.eval());
 }

 public String toString() {
     return operator + "(" + expression.toString() + ")";
 }
</code></pre>
<p>}</p>
<p>static class BinaryExpression implements Expression {<br>
private String operator;<br>
private double defaultValue;<br>
private DoubleBinaryOperator op;<br>
private Queue expressions;</p>
<pre><code> BinaryExpression(String operator, double defaultValue,
                  DoubleBinaryOperator op, Expression[] expressions) {
     this.operator = operator;
     this.defaultValue = defaultValue;
     this.op = op;
     this.expressions = new LinkedList&lt;Expression&gt;();
     for(Expression expression : expressions)
         this.expressions.add(expression);
 }

 public double eval() {
     return expressions.stream()
                       .mapToDouble(Expression::eval)
                       .reduce(op)
                       .orElse(defaultValue);
 }

 public String toString() {
     return expressions.stream()
                       .map(Object::toString)
                       .collect(Collectors.joining(" " + operator + " ", "(", ")"));
 }
</code></pre>
<p>}</p>
<p>static class Negate extends UnaryExpression {<br>
Negate(Expression expression) {<br>
super("-", 0.0, (v) -&gt; -v, expression);<br>
}<br>
}</p>
<p>static class SquareRoot extends UnaryExpression {<br>
SquareRoot(Expression expression) {<br>
super(“√”, 0.0, (v) -&gt; Math.sqrt(v), expression);<br>
}<br>
}</p>
<p>static class Add extends BinaryExpression {<br>
Add(Expression… expressions) {<br>
super("+", 0.0, (l, r) -&gt; l + r, expressions);<br>
}<br>
}</p>
<p>static class Subtract extends BinaryExpression {<br>
Subtract(Expression… expressions) {<br>
super("-", 0.0, (l, r) -&gt; l - r, expressions);<br>
}<br>
}</p>
<p>static class Multiply extends BinaryExpression {<br>
Multiply(Expression… expressions) {<br>
super("*", 0.0, (l, r) -&gt; l * r, expressions);<br>
}<br>
}</p>
<p>static class Divide extends BinaryExpression {<br>
Divide(Expression… expressions) {<br>
super("/", 0.0, (l, r) -&gt; l / r, expressions);<br>
}<br>
}<br>
}[/code]</p>
</li>
</ul>
<p>What works: (- 2 2), (- 2), (+ 2 2), (+ (+ 2 2) (+ 2 2))</p>
<p>What doesn’t work: (+ 2 2 2 2), (- (+ 2 2))</p>
<p>I suck at parsing this stuff properly. Any suggestions?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482/1</link>
        <pubDate>Wed, 25 May 2016 14:38:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555482-1</guid>
        <source url="https://forum.moparisthebest.com/t/hey-guys-what-do-you-think-of-my-toy-prefix-notation-calculator/555482.rss">Hey guys what do you think of my toy prefix notation calculator</source>
      </item>
  </channel>
</rss>
