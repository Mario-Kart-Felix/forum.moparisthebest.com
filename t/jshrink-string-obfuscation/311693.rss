<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Jshrink string obfuscation</title>
    <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693</link>
    <description>jshrink is a commercial obfuscator that does little more than &#39;optimizing&#39; the constant pool by renaming methods and fields to random utf8s in the constant pool, as well as naming classes annoying things like A, Z, K, or D. it also employs a poor attempt at hiding strings by pooling all strings of all classes and dumping them into a single &#39;image&#39; file, I.gif. it is always under the directory I in the obfuscated jar archive, and is accompanied by an I.class. inside I.class, it has a static initializer that decrypts the file and stores the decrypted file buffer in a static byte array, a static method I that takes an int which represents an offset into the buffer, the string cache (static String array), and the cached offset array (static boolean array). it replaces all ldc&#39;s for Strings with things of the pattern:
[code]pushint &lt;offset&gt;
invokestatic I/I/I(I)Ljava/lang/String;[/code]
where pushint is bipush|sipush|iconst
the decryption routine is simple; the first three bytes of I.gif form a 24-bit integer which is length of the rest of the data, or the [b]data size[/b]. casting it to a byte will result in the [b]decryption key[/b]. for the next [i]data size[/i] # of bytes in the file, they are xor&#39;d with [i]decryption key[/i] and stored inside the decrypted file buffer array.
the static method I is the code that extracts a string. the argument is an offset into the file buffer where a single pool entry will begin. pool entries are of the structure:
[code]pool_entry { unsigned byte str_len; byte str[str_len]; }[/code] it reads the string str, caches it and sets that offset as cached in the cached offset array. it also intern()&#39;s it, so that it joins the internal string pool.
if the offset is negative, it is bitwise and&#39;d with 0xffff.
so, how to remove it? simple, find the pattern from earlier, and replace the instructions with a single ldc, which will load the newly-added-to-constant-pool string we received from our OWN call to I.I.I(). ps if you&#39;re wondering, this is what that &#39;gabuuz&#39; guy was trying to figure out, as well as what bash was referring to in k00dr&#39;s allatori string encryption thread.</description>
    
    <lastBuildDate>Sun, 01 Nov 2009 01:21:53 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Jshrink string obfuscation</title>
        <dc:creator><![CDATA[@BAsh BAsh]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash">@BAsh</a> wrote:</p>
          <blockquote>
              <p>Most of the string deobbing algorithms are self enclosed and stateless. Identify the methods that deob the strings and execute them. What ever they spit out you hardcode.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/5</link>
        <pubDate>Sun, 01 Nov 2009 01:21:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311693-5</guid>
        <source url="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss">Jshrink string obfuscation</source>
      </item>
      <item>
        <title>Jshrink string obfuscation</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>guess again</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/4</link>
        <pubDate>Sun, 01 Nov 2009 00:45:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311693-4</guid>
        <source url="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss">Jshrink string obfuscation</source>
      </item>
      <item>
        <title>Jshrink string obfuscation</title>
        <dc:creator><![CDATA[@Speljohan Speljohan]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speljohan">@Speljohan</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="311693">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/abraham2119/40/5_513041d5f7104045db30895d3b90af16.png" class="avatar"> abraham2119:</div>
<blockquote>
<p>any idiot with half a brain can figure this out</p>
</blockquote>
</aside>
<p>Not you then</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/3</link>
        <pubDate>Sun, 01 Nov 2009 00:43:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311693-3</guid>
        <source url="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss">Jshrink string obfuscation</source>
      </item>
      <item>
        <title>Jshrink string obfuscation</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>any idiot with half a brain can figure this out</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/2</link>
        <pubDate>Sun, 01 Nov 2009 00:42:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311693-2</guid>
        <source url="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss">Jshrink string obfuscation</source>
      </item>
      <item>
        <title>Jshrink string obfuscation</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>jshrink is a commercial obfuscator that does little more than ‘optimizing’ the constant pool by renaming methods and fields to random utf8s in the constant pool, as well as naming classes annoying things like A, Z, K, or D. it also employs a poor attempt at hiding strings by pooling all strings of all classes and dumping them into a single ‘image’ file, I.gif. it is always under the directory I in the obfuscated jar archive, and is accompanied by an I.class. inside I.class, it has a static initializer that decrypts the file and stores the decrypted file buffer in a static byte array, a static method I that takes an int which represents an offset into the buffer, the string cache (static String array), and the cached offset array (static boolean array). it replaces all ldc’s for Strings with things of the pattern:</p>
<p><code>pushint &lt;offset&gt;
invokestatic I/I/I(I)Ljava/lang/String;</code><br>
where pushint is bipush|sipush|iconst<br>
the decryption routine is simple; the first three bytes of I.gif form a 24-bit integer which is length of the rest of the data, or the <span class="bbcode-b">data size</span>. casting it to a byte will result in the <span class="bbcode-b">decryption key</span>. for the next <span class="bbcode-i">data size</span> # of bytes in the file, they are xor’d with <span class="bbcode-i">decryption key</span> and stored inside the decrypted file buffer array.<br>
the static method I is the code that extracts a string. the argument is an offset into the file buffer where a single pool entry will begin. pool entries are of the structure:</p>
<p><code>pool_entry { unsigned byte str_len; byte str[str_len]; }</code> it reads the string str, caches it and sets that offset as cached in the cached offset array. it also intern()'s it, so that it joins the internal string pool.<br>
if the offset is negative, it is bitwise and’d with 0xffff.<br>
so, how to remove it? simple, find the pattern from earlier, and replace the instructions with a single ldc, which will load the newly-added-to-constant-pool string we received from our OWN call to I.I.I(). ps if you’re wondering, this is what that ‘gabuuz’ guy was trying to figure out, as well as what bash was referring to in k00dr’s allatori string encryption thread.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693/1</link>
        <pubDate>Sat, 31 Oct 2009 19:27:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-311693-1</guid>
        <source url="https://forum.moparisthebest.com/t/jshrink-string-obfuscation/311693.rss">Jshrink string obfuscation</source>
      </item>
  </channel>
</rss>
