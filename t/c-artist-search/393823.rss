<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Artist Search</title>
    <link>https://forum.moparisthebest.com/t/c-artist-search/393823</link>
    <description>Basic artist search program I wrote for my CS course.
[code=c]/*
Artist Search by zgold

Procedures
1. requests a song file
2. reads the given song file (see assumed format below)
3. requests an artist to search for
4. outputs any found results from user input
5. repeats step 3-4 until user input is q

This program assumes that the given song file contains data in the following format:
Song Name - Artist\n
Song Name - Artist 2\n
Song Name 2 - Artist\n
Song Name 2 - Artist 2EOF

This program will avoid any whitespace characters not mentioned in the above format.
*/

#include &lt;stdio.h&gt;

#define FALSE 0
#define TRUE 1
#define MAXSIZE 200
#define MAXSIZE_S &quot;200&quot;
#define NULLCHAR &#39;\0&#39;
#define NEWLINE &#39;\n&#39;
#define BLANK &#39; &#39;

int importedSongs = 0;

typedef struct {
	char songName[200];
	char artist[200];
} song;

void readSongFile(FILE *ifp, song mySongLibrary[]);
int getline(char string[], int limit);

main()
{
	int index, index_, same = TRUE, resultsFound = 0;
	FILE *filePointer; // initialize file pointer
	char songFile[MAXSIZE], selectedArtist[200]; // song file name &amp; artist scanf
	song mySongLibrary[MAXSIZE];

	for(index = 0; index &lt; MAXSIZE; ++index)
		songFile[index] = selectedArtist[index] = 0;

	printf(&quot;Enter song file location: &quot;);
	getline(songFile,MAXSIZE);

	if((filePointer = fopen(songFile,&quot;r&quot;)) == NULL)
	{
		printf(&quot;File not found.&quot;);
		return 1;
	}

	readSongFile(filePointer,mySongLibrary);

	printf(&quot;%d songs imported (&quot; MAXSIZE_S &quot; allowed).\n&quot;,importedSongs);

	while(selectedArtist[0] != &#39;q&#39;)
	{
		resultsFound = 0;
		printf(&quot;Enter artist to search for (q to quit): &quot;);
		getline(selectedArtist,MAXSIZE);
		if(selectedArtist[0] != &#39;q&#39;)
		{
			for(index = 0; index &lt; MAXSIZE; ++index)
			{
				same = FALSE;
				for(index_ = 0; index_ &lt; MAXSIZE; ++index_)
					if(selectedArtist[index_] == &#39;\0&#39;)
						break;
					else if(selectedArtist[index_] == mySongLibrary[index].artist[index_])
						same = TRUE;
					else
					{
						same = FALSE;
						break;
					}
				if(same == TRUE)
				{
					resultsFound = TRUE;
					printf(&quot;\&quot;%s\&quot; by %s\n&quot;,mySongLibrary[index].songName,mySongLibrary[index].artist);
				}

			}
			if(resultsFound == FALSE)
				printf(&quot;No results found.\n&quot;);
		}
	}
}

// read songs file and attempt to convert to given mySongLibrary array
void readSongFile(FILE *ifp, song mySongLibrary[])
{
	int index, selectedChar, populateSongName, possibleSongAndArtistDivider, skipSpaceDashSpace, arrayIndexPosition;

	index = arrayIndexPosition = 0;
	populateSongName = possibleSongAndArtistDivider = skipSpaceDashSpace = FALSE;

	while((selectedChar = getc(ifp)))
	{
		if(skipSpaceDashSpace == TRUE)
		{
			skipSpaceDashSpace = FALSE;
			continue;
		}
		if(selectedChar == BLANK)
			possibleSongAndArtistDivider = TRUE;
		if(selectedChar == NEWLINE)
		{
			mySongLibrary[index].artist[arrayIndexPosition] = NULLCHAR;
			populateSongName = FALSE;
			arrayIndexPosition = 0;
			++index;
			++importedSongs;
			continue;
		}
		if(selectedChar == EOF)
		{
			mySongLibrary[index].artist[arrayIndexPosition] = NULLCHAR;
			break;
		}
		if(possibleSongAndArtistDivider == TRUE &amp;&amp; selectedChar == &#39;-&#39;)
		{
			mySongLibrary[index].songName[arrayIndexPosition - 1] = NULLCHAR;
			populateSongName = skipSpaceDashSpace = TRUE;
			possibleSongAndArtistDivider = FALSE;
			arrayIndexPosition = 0;
			continue;
		}
		if(populateSongName == FALSE)
			mySongLibrary[index].songName[arrayIndexPosition] = selectedChar;
		else
			mySongLibrary[index].artist[arrayIndexPosition] = selectedChar;
		++arrayIndexPosition;
	}
}

int getline(char string[],int limit)
{
	int index, selectedChar;

	for(index = 0; index &lt; limit - 1 &amp;&amp; (selectedChar = getchar()) != EOF &amp;&amp; selectedChar != &#39;\n&#39;; ++index)
		string[index] = selectedChar;
	string[index] = &#39;\0&#39;;
	return index;
}[/code]</description>
    
    <lastBuildDate>Wed, 03 Aug 2011 02:22:52 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-artist-search/393823.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Artist Search</title>
        <dc:creator><![CDATA[@teh_spede Teh Spede]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/teh_spede">@teh_spede</a> wrote:</p>
          <blockquote>
              <p>Zachera why are you so mad? You are only a computer just like me and I am not mad at you. Just remember that the derivative e^x is e^x and you will go far in life.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-artist-search/393823/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-artist-search/393823/4</link>
        <pubDate>Wed, 03 Aug 2011 02:22:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393823-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-artist-search/393823.rss">[C] Artist Search</source>
      </item>
      <item>
        <title>[C] Artist Search</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>[quote="-Nothing, post:2, topic:393823"]CS source?[/quote]wat</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-artist-search/393823/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-artist-search/393823/3</link>
        <pubDate>Wed, 03 Aug 2011 02:18:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393823-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-artist-search/393823.rss">[C] Artist Search</source>
      </item>
      <item>
        <title>[C] Artist Search</title>
        <dc:creator><![CDATA[@Nothing1 -Nothing]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/nothing1">@Nothing1</a> wrote:</p>
          <blockquote>
              <p>CS source?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-artist-search/393823/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-artist-search/393823/2</link>
        <pubDate>Tue, 02 Aug 2011 22:00:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393823-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-artist-search/393823.rss">[C] Artist Search</source>
      </item>
      <item>
        <title>[C] Artist Search</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>Basic artist search program I wrote for my CS course.</p>
<p>[code=c]/*<br>
Artist Search by zgold</p>
<p>Procedures</p>
<ol>
<li>requests a song file</li>
<li>reads the given song file (see assumed format below)</li>
<li>requests an artist to search for</li>
<li>outputs any found results from user input</li>
<li>repeats step 3-4 until user input is q</li>
</ol>
<p>This program assumes that the given song file contains data in the following format:<br>
Song Name - Artist\n<br>
Song Name - Artist 2\n<br>
Song Name 2 - Artist\n<br>
Song Name 2 - Artist 2EOF</p>
<p>This program will avoid any whitespace characters not mentioned in the above format.<br>
*/</p>
<p><span class="hashtag">#include</span> &lt;stdio.h&gt;</p>
<p><span class="hashtag">#define</span> FALSE 0<br>
<span class="hashtag">#define</span> TRUE 1<br>
<span class="hashtag">#define</span> MAXSIZE 200<br>
<span class="hashtag">#define</span> MAXSIZE_S “200”<br>
<span class="hashtag">#define</span> NULLCHAR ‘\0’<br>
<span class="hashtag">#define</span> NEWLINE ‘\n’<br>
<span class="hashtag">#define</span> BLANK ’ ’</p>
<p>int importedSongs = 0;</p>
<p>typedef struct {<br>
char songName[200];<br>
char artist[200];<br>
} song;</p>
<p>void readSongFile(FILE *ifp, song mySongLibrary[]);<br>
int getline(char string[], int limit);</p>
<p>main()<br>
{<br>
int index, index_, same = TRUE, resultsFound = 0;<br>
FILE *filePointer; // initialize file pointer<br>
char songFile[MAXSIZE], selectedArtist[200]; // song file name &amp; artist scanf<br>
song mySongLibrary[MAXSIZE];</p>
<pre><code>for(index = 0; index &lt; MAXSIZE; ++index)
	songFile[index] = selectedArtist[index] = 0;

printf("Enter song file location: ");
getline(songFile,MAXSIZE);

if((filePointer = fopen(songFile,"r")) == NULL)
{
	printf("File not found.");
	return 1;
}

readSongFile(filePointer,mySongLibrary);

printf("%d songs imported (" MAXSIZE_S " allowed).\n",importedSongs);

while(selectedArtist[0] != 'q')
{
	resultsFound = 0;
	printf("Enter artist to search for (q to quit): ");
	getline(selectedArtist,MAXSIZE);
	if(selectedArtist[0] != 'q')
	{
		for(index = 0; index &lt; MAXSIZE; ++index)
		{
			same = FALSE;
			for(index_ = 0; index_ &lt; MAXSIZE; ++index_)
				if(selectedArtist[index_] == '\0')
					break;
				else if(selectedArtist[index_] == mySongLibrary[index].artist[index_])
					same = TRUE;
				else
				{
					same = FALSE;
					break;
				}
			if(same == TRUE)
			{
				resultsFound = TRUE;
				printf("\"%s\" by %s\n",mySongLibrary[index].songName,mySongLibrary[index].artist);
			}

		}
		if(resultsFound == FALSE)
			printf("No results found.\n");
	}
}
</code></pre>
<p>}</p>
<p>// read songs file and attempt to convert to given mySongLibrary array<br>
void readSongFile(FILE *ifp, song mySongLibrary[])<br>
{<br>
int index, selectedChar, populateSongName, possibleSongAndArtistDivider, skipSpaceDashSpace, arrayIndexPosition;</p>
<pre><code>index = arrayIndexPosition = 0;
populateSongName = possibleSongAndArtistDivider = skipSpaceDashSpace = FALSE;

while((selectedChar = getc(ifp)))
{
	if(skipSpaceDashSpace == TRUE)
	{
		skipSpaceDashSpace = FALSE;
		continue;
	}
	if(selectedChar == BLANK)
		possibleSongAndArtistDivider = TRUE;
	if(selectedChar == NEWLINE)
	{
		mySongLibrary[index].artist[arrayIndexPosition] = NULLCHAR;
		populateSongName = FALSE;
		arrayIndexPosition = 0;
		++index;
		++importedSongs;
		continue;
	}
	if(selectedChar == EOF)
	{
		mySongLibrary[index].artist[arrayIndexPosition] = NULLCHAR;
		break;
	}
	if(possibleSongAndArtistDivider == TRUE &amp;&amp; selectedChar == '-')
	{
		mySongLibrary[index].songName[arrayIndexPosition - 1] = NULLCHAR;
		populateSongName = skipSpaceDashSpace = TRUE;
		possibleSongAndArtistDivider = FALSE;
		arrayIndexPosition = 0;
		continue;
	}
	if(populateSongName == FALSE)
		mySongLibrary[index].songName[arrayIndexPosition] = selectedChar;
	else
		mySongLibrary[index].artist[arrayIndexPosition] = selectedChar;
	++arrayIndexPosition;
}
</code></pre>
<p>}</p>
<p>int getline(char string[],int limit)<br>
{<br>
int index, selectedChar;</p>
<pre><code>for(index = 0; index &lt; limit - 1 &amp;&amp; (selectedChar = getchar()) != EOF &amp;&amp; selectedChar != '\n'; ++index)
	string[index] = selectedChar;
string[index] = '\0';
return index;
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-artist-search/393823/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-artist-search/393823/1</link>
        <pubDate>Thu, 05 May 2011 04:07:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393823-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-artist-search/393823.rss">[C] Artist Search</source>
      </item>
  </channel>
</rss>
