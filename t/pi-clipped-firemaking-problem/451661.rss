<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>PI clipped firemaking problem</title>
    <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661</link>
    <description>The source I&#39;m using has clipped firemaking but it seems to be bugged making it not clipped at all.
I&#39;m trying to fix it but I can&#39;t see anything wrong with it. If anyone could help/hint me that would be great.

UseItem case
[code]
case 590:
				if (useWith == 1511 || useWith == 1521 || useWith == 1519 || useWith == 1517 || useWith == 1515 || useWith == 1513) {
					c.getFiremaking().checkLogType(itemUsed, useWith, fireX, fireY);
				}
[/code]
Firemaking.java
[code]
package server.model.players.skills;

import server.Config;
import server.model.players.Client;
import server.model.players.PlayerHandler;
import server.model.objects.Objects;
import server.Server;
import server.world.map.VirtualWorld;
import server.model.items.GroundItem;
import server.event.Task;
import server.world.ItemHandler;

 
public class Firemaking {
 
 private Client c;
 
 public Firemaking(Client c) {
  this.c = c;
 }
 
 private int[] logs = {1511, 2862, 1521, 1519, 6333, 1517, 6332, 1515, 1513};
 private int[] level = {1, 1, 15, 30, 35, 45, 50, 60, 75};
 public long lastLight;
 private static final int EMOTE = 5208, ASHES = 592;
 public int firemakingTimer, direction;
 
 
 public void checkLogType(int logType, int otherItem, final int fireX, final int fireY) {
  for (int j = 0; j &lt; logs.length;j++) {
   if (logs[j] == logType || logs[j] == otherItem) {
    lightFire(j, fireX, fireY);
    return;
   }
  } 
 }
 
 private boolean canWeMakeSomeFire() {
	  try {
	  if(c.absX == Objects.getObjectX() &amp;&amp; c.absY == Objects.getObjectY() &amp;&amp; Objects.getObjectId() &gt; 0) {
	   c.sendMessage(&quot;You can&#39;t light a fire here !&quot;);
	   return false;
	  }
	  } catch (Exception e) {
	  }
	  return true;
	 }
 
 
 private void processFire(final int lastfireX, final int lastfireY) {
  Server.objectHandler.createAnObject(c, 2732, lastfireX, lastfireY);
  Server.getTaskScheduler().schedule(new Task(25) {
   @Override
   protected void execute() {
    if (c.disconnected) {
     stop();
     return;
    }
    Server.objectHandler.createAnObject(c, -1, lastfireX, lastfireY);
    ItemHandler.getSingleton().createGroundItem(c, ASHES, lastfireX, lastfireY, 1, c.getId());
    //ItemHandler.getSingleton().createGroundItem(c, ASHES, lastfireX, lastfireY, 1, c.getId());
    //GroundItem item = new GroundItem(ASHES, lastfireX, lastfireY, 1, c.playerId, 1, PlayerHandler.players[c.playerId].playerName);
    //ItemHandler.getSingleton().addItem(item);
    this.stop();
   }
  });
 }
 

 
 public void lightFire(final int slot, final int lastFireX, final int lastFireY) {
  if (c.duelStatus &gt;= 5) {
   c.sendMessage(&quot;Why am I trying to light a fire in the duel arena?&quot;);
   return;
  }
  if (c.getPlayerAction().checkAction()) {
   return;
  }
  if (canWeMakeSomeFire() == false) {
   return;
  }
  if (c.playerLevel[c.playerFiremaking] &gt;= level[slot]) {
   if (c.getItems().playerHasItem(590) &amp;&amp; c.getItems().playerHasItem(logs[slot])) {
     if(VirtualWorld.I(c.heightLevel, c.absX, c.absY, c.absX-1, c.absY, 0)) {
      c.getPlayerAction().setAction(true);
      c.getPlayerAction().canWalk(false);
      c.sendMessage(&quot;You attempted to light the fire...&quot;);
      c.startAnimation(EMOTE);
      c.getItems().deleteItem(logs[slot], c.getItems().getItemSlot(logs[slot]), 1);
      c.getPA().addSkillXP(logs[slot] / 3, c.playerFiremaking);
      ItemHandler.getSingleton().createGroundItem(c, logs[slot], lastFireX, lastFireY, 1, c.getId());
      direction = -1;
      firemakingTimer = 3;
      Server.getTaskScheduler().schedule(new Task(2) {
       @Override
       protected void execute() {
        if (c.disconnected) {
         stop();
         return;
        }
        c.turnPlayerTo(c.getX() + 1, c.getY());
        if (canWeMakeSomeFire() == false) {
         c.getPlayerAction().setAction(false);
         c.getPlayerAction().canWalk(true);
         firemakingTimer = -1;
         this.stop();
         return;
        }
        ItemHandler.getSingleton().removeGroundItem(c, logs[slot], lastFireX, lastFireY, false);
        processFire(lastFireX, lastFireY);
        c.sendMessage(&quot;You light the fire.&quot;);
        c.getPlayerAction().setAction(false);
        c.getPlayerAction().canWalk(true);
        this.stop();
       }
      });
     } else {
      c.getPlayerAction().setAction(true);
      c.getPlayerAction().canWalk(false);
      c.sendMessage(&quot;You attempted to light the fire...&quot;);
      c.startAnimation(EMOTE);
      c.getItems().deleteItem(logs[slot], c.getItems().getItemSlot(logs[slot]), 1);
      c.getPA().addSkillXP(logs[slot] / 3, c.playerFiremaking);
      ItemHandler.getSingleton().createGroundItem(c, logs[slot], lastFireX, lastFireY, 1, c.getId());
      direction = 1;
      firemakingTimer = 3;
      Server.getTaskScheduler().schedule(new Task(2) {
       @Override
       protected void execute() {
        if (c.disconnected) {
         stop();
         return;
        }
        c.turnPlayerTo(c.getX() + 1, c.getY());
        if (canWeMakeSomeFire() == false) {
         c.getPlayerAction().setAction(false);
         c.getPlayerAction().canWalk(true);
         firemakingTimer = -1;
         this.stop();
         return;
        }
        ItemHandler.getSingleton().removeGroundItem(c, logs[slot], lastFireX, lastFireY, false);
        processFire(lastFireX, lastFireY);
        c.sendMessage(&quot;You light the fire.&quot;);
        c.getPlayerAction().setAction(false);
        c.getPlayerAction().canWalk(true);
        this.stop();
       }
      });
     } 
   } else {
    c.sendMessage(&quot;You need a tinderbox to light these logs.&quot;);
   }
  } else {
   c.sendMessage(&quot;You need a higher level to burn these logs.&quot;);
   return;
  }
 } 
 
 public void firemakingProcess() {
  if (firemakingTimer &gt; 0) {
   firemakingTimer--;
  }
  if (firemakingTimer == 0) {
   c.getPA().walkTo(direction, 0);
   firemakingTimer = -1;
  }
 }
}
[/code]</description>
    
    <lastBuildDate>Sun, 29 Jul 2012 02:54:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>PI clipped firemaking problem</title>
        <dc:creator><![CDATA[@pro_banana pro banana]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pro_banana">@pro_banana</a> wrote:</p>
          <blockquote>
              <p>[quote=“imsuperman05, post:4, topic:451661”]Is this supposed to be your clipping?</p>
<pre><code class="lang-auto"> private boolean canWeMakeSomeFire() {
          try {
          if(c.absX == Objects.getObjectX() &amp;&amp; c.absY == Objects.getObjectY() &amp;&amp; Objects.getObjectId() &gt; 0) {
           c.sendMessage("You can't light a fire here !");
           return false;
          }
          } catch (Exception e) {
          }
          return true;
         }</code></pre>
<p>If so, why do you have a checked exception?  This will definitely not through any type of exception, and there is nothing even being done if an exception is caught.  This function is checking if the player is standing on an object, you should check if the player is going to stand on an object, like c.absX + 1 == Object.getObjectX() + 1.[/quote]</p>
<p>Thanks for the help I tried that but it didn’t work so I rewrote the whole file with a tutorial from R-S. I only have a problem  with the walking now but I’m going to make a new post if I can’t fix it myself. anyway just wanna let you know that your help was appriciated.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/5</link>
        <pubDate>Sun, 29 Jul 2012 02:54:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451661-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss">PI clipped firemaking problem</source>
      </item>
      <item>
        <title>PI clipped firemaking problem</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>Is this supposed to be your clipping?</p>
<pre><code class="lang-auto"> private boolean canWeMakeSomeFire() {
          try {
          if(c.absX == Objects.getObjectX() &amp;&amp; c.absY == Objects.getObjectY() &amp;&amp; Objects.getObjectId() &gt; 0) {
           c.sendMessage("You can't light a fire here !");
           return false;
          }
          } catch (Exception e) {
          }
          return true;
         }</code></pre>
<p>If so, why do you have a checked exception?  This will definitely not through any type of exception, and there is nothing even being done if an exception is caught.  This function is checking if the player is standing on an object, you should check if the player is going to stand on an object, like c.absX + 1 == Object.getObjectX() + 1.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/4</link>
        <pubDate>Sat, 28 Jul 2012 15:01:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451661-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss">PI clipped firemaking problem</source>
      </item>
      <item>
        <title>PI clipped firemaking problem</title>
        <dc:creator><![CDATA[@pro_banana pro banana]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pro_banana">@pro_banana</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="451661">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/rsmakerwoad/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> RsMakerWoad:</div>
<blockquote>
<p>Do you have a client i could download to test this out? i aint too sure what your on about</p>
</blockquote>
</aside>
<p>I don’t think that’s needed, I provided the code so you could have look at it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/3</link>
        <pubDate>Sat, 28 Jul 2012 12:39:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451661-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss">PI clipped firemaking problem</source>
      </item>
      <item>
        <title>PI clipped firemaking problem</title>
        <dc:creator><![CDATA[@RsMakerWoad RsMakerWoad]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rsmakerwoad">@RsMakerWoad</a> wrote:</p>
          <blockquote>
              <p>Do you have a client i could download to test this out? i aint too sure what your on about</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/2</link>
        <pubDate>Sat, 28 Jul 2012 12:28:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451661-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss">PI clipped firemaking problem</source>
      </item>
      <item>
        <title>PI clipped firemaking problem</title>
        <dc:creator><![CDATA[@pro_banana pro banana]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pro_banana">@pro_banana</a> wrote:</p>
          <blockquote>
              <p>The source I’m using has clipped firemaking but it seems to be bugged making it not clipped at all.<br>
I’m trying to fix it but I can’t see anything wrong with it. If anyone could help/hint me that would be great.</p>
<p>UseItem case</p>
<pre><code class="lang-auto">case 590:
				if (useWith == 1511 || useWith == 1521 || useWith == 1519 || useWith == 1517 || useWith == 1515 || useWith == 1513) {
					c.getFiremaking().checkLogType(itemUsed, useWith, fireX, fireY);
				}</code></pre>
<p>Firemaking.java</p>
<pre><code class="lang-auto">package server.model.players.skills;

import server.Config;
import server.model.players.Client;
import server.model.players.PlayerHandler;
import server.model.objects.Objects;
import server.Server;
import server.world.map.VirtualWorld;
import server.model.items.GroundItem;
import server.event.Task;
import server.world.ItemHandler;

 
public class Firemaking {
 
 private Client c;
 
 public Firemaking(Client c) {
  this.c = c;
 }
 
 private int[] logs = {1511, 2862, 1521, 1519, 6333, 1517, 6332, 1515, 1513};
 private int[] level = {1, 1, 15, 30, 35, 45, 50, 60, 75};
 public long lastLight;
 private static final int EMOTE = 5208, ASHES = 592;
 public int firemakingTimer, direction;
 
 
 public void checkLogType(int logType, int otherItem, final int fireX, final int fireY) {
  for (int j = 0; j &lt; logs.length;j++) {
   if (logs[j] == logType || logs[j] == otherItem) {
    lightFire(j, fireX, fireY);
    return;
   }
  } 
 }
 
 private boolean canWeMakeSomeFire() {
	  try {
	  if(c.absX == Objects.getObjectX() &amp;&amp; c.absY == Objects.getObjectY() &amp;&amp; Objects.getObjectId() &gt; 0) {
	   c.sendMessage("You can't light a fire here !");
	   return false;
	  }
	  } catch (Exception e) {
	  }
	  return true;
	 }
 
 
 private void processFire(final int lastfireX, final int lastfireY) {
  Server.objectHandler.createAnObject(c, 2732, lastfireX, lastfireY);
  Server.getTaskScheduler().schedule(new Task(25) {
   @Override
   protected void execute() {
    if (c.disconnected) {
     stop();
     return;
    }
    Server.objectHandler.createAnObject(c, -1, lastfireX, lastfireY);
    ItemHandler.getSingleton().createGroundItem(c, ASHES, lastfireX, lastfireY, 1, c.getId());
    //ItemHandler.getSingleton().createGroundItem(c, ASHES, lastfireX, lastfireY, 1, c.getId());
    //GroundItem item = new GroundItem(ASHES, lastfireX, lastfireY, 1, c.playerId, 1, PlayerHandler.players[c.playerId].playerName);
    //ItemHandler.getSingleton().addItem(item);
    this.stop();
   }
  });
 }
 

 
 public void lightFire(final int slot, final int lastFireX, final int lastFireY) {
  if (c.duelStatus &gt;= 5) {
   c.sendMessage("Why am I trying to light a fire in the duel arena?");
   return;
  }
  if (c.getPlayerAction().checkAction()) {
   return;
  }
  if (canWeMakeSomeFire() == false) {
   return;
  }
  if (c.playerLevel[c.playerFiremaking] &gt;= level[slot]) {
   if (c.getItems().playerHasItem(590) &amp;&amp; c.getItems().playerHasItem(logs[slot])) {
     if(VirtualWorld.I(c.heightLevel, c.absX, c.absY, c.absX-1, c.absY, 0)) {
      c.getPlayerAction().setAction(true);
      c.getPlayerAction().canWalk(false);
      c.sendMessage("You attempted to light the fire...");
      c.startAnimation(EMOTE);
      c.getItems().deleteItem(logs[slot], c.getItems().getItemSlot(logs[slot]), 1);
      c.getPA().addSkillXP(logs[slot] / 3, c.playerFiremaking);
      ItemHandler.getSingleton().createGroundItem(c, logs[slot], lastFireX, lastFireY, 1, c.getId());
      direction = -1;
      firemakingTimer = 3;
      Server.getTaskScheduler().schedule(new Task(2) {
       @Override
       protected void execute() {
        if (c.disconnected) {
         stop();
         return;
        }
        c.turnPlayerTo(c.getX() + 1, c.getY());
        if (canWeMakeSomeFire() == false) {
         c.getPlayerAction().setAction(false);
         c.getPlayerAction().canWalk(true);
         firemakingTimer = -1;
         this.stop();
         return;
        }
        ItemHandler.getSingleton().removeGroundItem(c, logs[slot], lastFireX, lastFireY, false);
        processFire(lastFireX, lastFireY);
        c.sendMessage("You light the fire.");
        c.getPlayerAction().setAction(false);
        c.getPlayerAction().canWalk(true);
        this.stop();
       }
      });
     } else {
      c.getPlayerAction().setAction(true);
      c.getPlayerAction().canWalk(false);
      c.sendMessage("You attempted to light the fire...");
      c.startAnimation(EMOTE);
      c.getItems().deleteItem(logs[slot], c.getItems().getItemSlot(logs[slot]), 1);
      c.getPA().addSkillXP(logs[slot] / 3, c.playerFiremaking);
      ItemHandler.getSingleton().createGroundItem(c, logs[slot], lastFireX, lastFireY, 1, c.getId());
      direction = 1;
      firemakingTimer = 3;
      Server.getTaskScheduler().schedule(new Task(2) {
       @Override
       protected void execute() {
        if (c.disconnected) {
         stop();
         return;
        }
        c.turnPlayerTo(c.getX() + 1, c.getY());
        if (canWeMakeSomeFire() == false) {
         c.getPlayerAction().setAction(false);
         c.getPlayerAction().canWalk(true);
         firemakingTimer = -1;
         this.stop();
         return;
        }
        ItemHandler.getSingleton().removeGroundItem(c, logs[slot], lastFireX, lastFireY, false);
        processFire(lastFireX, lastFireY);
        c.sendMessage("You light the fire.");
        c.getPlayerAction().setAction(false);
        c.getPlayerAction().canWalk(true);
        this.stop();
       }
      });
     } 
   } else {
    c.sendMessage("You need a tinderbox to light these logs.");
   }
  } else {
   c.sendMessage("You need a higher level to burn these logs.");
   return;
  }
 } 
 
 public void firemakingProcess() {
  if (firemakingTimer &gt; 0) {
   firemakingTimer--;
  }
  if (firemakingTimer == 0) {
   c.getPA().walkTo(direction, 0);
   firemakingTimer = -1;
  }
 }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661/1</link>
        <pubDate>Sat, 28 Jul 2012 12:25:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-451661-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-clipped-firemaking-problem/451661.rss">PI clipped firemaking problem</source>
      </item>
  </channel>
</rss>
