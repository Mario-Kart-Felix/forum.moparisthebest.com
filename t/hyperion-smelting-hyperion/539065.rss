<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Hyperion] Smelting [Hyperion]</title>
    <link>https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065</link>
    <description>This isn&#39;t full there is still a few things you have to do by your own. like 50% for iron bars. But I&#39;ve been releasing a ton of stuff for hyperion and I just decided to release this also;

SmeltingInterface class
[code=java]/**
 * SmeltingInterface
 * 
 * Jaunary 22, 2014
 * 
 * Dan0194
 */
package org.hyperion.rs2.action.impl.smithing.smelting;

import org.hyperion.rs2.model.Player;

/**
 * Everything for loading the smelting interface
 */
public final class SmeltingInterface {
	
	/**
	 * The Setter for the class
	 */
	private static final SmeltingInterface smeltingInterface = new SmeltingInterface();
	
	/**
	 * Holds all the data on the interface i.e.
	 * slot and the bar Id
	 */
	private static enum SmeltingInterfaceData {
		/**
		 * All data for bronze bar
		 */
		BRONZE(2405, 2349),
		/**
		 * All data for iron bar
		 */
		IRON(2406, 2351),
		/**
		 * All the data for silver bar
		 */
		SILVER(2407, 2355),
		/**
		 * All data for steel bar
		 */
		STEEL(2409, 2353),
		/**
		 * All data for gold bar
		 */
		GOLD(2410, 2357),
		/**
		 * All data for mithril bar
		 */
		MITHRIL(2411, 2359),
		/**
		 * All data for adamantite bar
		 */
		ADAMANTITE(2412, 2361),
		/**
		 * All data for runite bar
		 */
		RUNITE(2413, 2363);
		
		/**
		 * The id of the bar
		 * The slot(where the bar goes on interface)
		 */
		private int id, slot;
		
		/**
		 * @param id
		 * @param slot
		 */
		SmeltingInterfaceData(int slot, int id) {
			this.slot = slot;
			this.id = id;
		}
		
		/**
		 * @return slot
		 */
		public int getSlot() {
			return slot;
		}
		
		/**
		 * @return id
		 */
		public int getId() {
			return id;
		}
	}
	
	/**
	 * Sends the interface to the player and all the data on it
	 */
	public SmeltingInterface sendSmeltingInterface(Player player) {
		player.getActionSender().sendChatInterface(2400);
		for(SmeltingInterfaceData smeltingInterfaceData : SmeltingInterfaceData.values()) {
			player.getActionSender().sendResizeItem(smeltingInterfaceData.getSlot(), 150, smeltingInterfaceData.getId());
			}
		return this;
	}

	/**
	 * @return smeltingInterface
	 */
	public static final SmeltingInterface getSmeltingInterface() {
		return smeltingInterface;
	}
}
[/code]

SmeltingAction:

[code=java]/**
 * SmeltingAction
 * 
 * January 22, 2014
 * 
 * Dan0194
 */
package org.hyperion.rs2.action.impl.smithing.smelting;

import java.util.HashMap;
import java.util.Map;

import org.hyperion.rs2.action.impl.ProducingAction;
import org.hyperion.rs2.model.Animation;
import org.hyperion.rs2.model.Item;
import org.hyperion.rs2.model.Player;
import org.hyperion.rs2.model.Skills;

/**
 * All to do with actaully smelting the bar
 */
public class SmeltingAction extends ProducingAction {
	
	/**
	 * All the data on the smelting of the bar i.e.
	 * the barId, level, exp, items needed and the button
	 * ids of the item
	 */
	public static enum Smelting {
		/**
		 * All data for Smelting Bronze bar
		 */
		BRONZE(2349, 1, 6.2, new short[][] {{436, 1}, {438, 1}}, new short[] {3987, 3986, 2807, 2414}),
		/**
		 * All data for Smelting Iron bar
		 */
		IRON(2351, 15, 12.5, new short[][] {{440, 1}, {-1, 0}}, new short[] {3991, 3990, 3989, 3988}),
		/**
		 * All data for Smelting Silver bar
		 */
		SILVER(2355, 20, 13.7, new short[][] {{442, 1}, {-1, 0}}, new short[] {3995, 3994, 3993, 3992}),
		/**
		 * All data for Smelting Steel bar
		 */
		STEEL(2353, 30, 17.5, new short[][] {{440, 1}, {453, 2}}, new short[] {3999, 3998, 3997, 3996}),
		/**
		 * All data for Smelting Gold bar
		 */
		GOLD(2357, 40, 22.5, new short[][] {{444, 1}, {-1, 0}}, new short[] {4003, 4002, 4001, 4000}),
		/**
		 * All data for Smelting Mithril bar
		 */
		MITHRIL(2359, 50, 30, new short[][] {{447, 1}, {453, 4}}, new short[] {7441, 7440, 6397, 4158}),
		/**
		 * All data for Smelting Adamantite bar
		 */
		ADAMANTITE(2361, 70, 37.5, new short[][] {{449, 1}, {453, 6}}, new short[] {7446, 7444, 7443, 7442}),
		/**
		 * All data for Smelting Rune bar
		 */
		RUNE(2363, 85, 50, new short[][] {{451, 1}, {453, 8}}, new short[] {7450, 7449, 7448, 7447});
		
		/**
		 * What it is producing
		 */
		private int produceId;
		/**
		 * The level needed
		 */
		private int level;
		/**
		 * The exprience you recieve
		 */
		private double experience;
		/**
		 * The ores you need and amount
		 */
		private short[][] oreId;
		/**
		 * Button ids for each ore
		 */
		private short[] buttonId;
		
		/**
		 * @param produceId
		 * @param level
		 * @param experience
		 * @param oreId
		 * @param buttonId
		 */
		Smelting(int produceId, int level, double experience, short[][] oreId, short[] buttonId) {
			this.produceId = produceId;
			this.level = level;
			this.experience = experience;
			this.oreId = oreId;
			this.buttonId = buttonId;
		}
		
		/**
		 * Holds all the values of our Smelting enum with button ids
		 */
		private static Map&lt;Short, Smelting&gt; smelting = new HashMap&lt;Short, Smelting&gt;();
		
		/**
		 * Gets the Smelting by the button Id
		 * @param button
		 * @return The Smelting, or &lt;code&gt;null&lt;/code&gt; if the button is not part of Smelting.
		 */
		public static Smelting forId(short button) {
			return smelting.get(button);
		}
		
		/**
		 * Checks if the map contains the button
		 * @param button
		 */
		public static boolean contains(short button) {
			return smelting.containsKey(button);
		}
		
		/**
		 * Populates the smelting map
		 */
		static {
			for(Smelting smithing : Smelting.values()) {
				for(short i = 0; i &lt; smithing.buttonId.length; i++) {
				smelting.put(smithing.buttonId[i], smithing);
				}
			}
		}
		
		/**
		 * @return produceId
		 */
		public int getProduceId() {
			return produceId;
		}
		
		/**
		 * @return level
		 */
		public int getLevel() {
			return level;
		}
		
		/**
		 * @return experience
		 */
		public double getExperience() {
			return experience;
		}
	}
	
	/**
	 * All of our data from the enum
	 */
	private Smelting smelting;
	/**
	 * The button clicked
	 */
	private int buttonId;
	
	/**
	 * @param player
	 * @param slot
	 * @param button
	 */
	public SmeltingAction(final Player player, final int slot, final int buttonId) {
		super(player, slot, buttonId);
		this.buttonId = buttonId;
		this.smelting = Smelting.forId((short) buttonId);
	}
	
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionDelay()
	 */
	@Override
	public long getProductionDelay() {
		return 4;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionNumber()
	 * Calculates how much bars needed to be smithed
	 */
	@Override
	public int getProductionNumber() {
		int total = 0;
		for(int i = 0; i &lt; getSmelting().buttonId.length; i++) {
			if(getButtonId() == getSmelting().buttonId[i]) {
				total = i == 0 ? i + 1 : (i + 1) * (i + 1) + 1;
			}
		}
		return total;
	}
	
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProductionMessage()
	 */
	@Override
	public String getProductionMessage() {
		return &quot;You smelt the ore into a &quot;+new Item(getSmelting().getProduceId()).getDefinition().getName()+&quot;.&quot;;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getAnimation()
	 */
	@Override
	public Animation getAnimation() {
		return Animation.create(899);
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getPrimaryItem()
	 */
	@Override
	public Item getPrimaryItem() {
		return new Item(getSmelting().oreId[0][0], getSmelting().oreId[0][1]);
	}
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getSecondaryItem()
	 */
	@Override
	public Item getSecondaryItem() {
		return new Item(getSmelting().oreId[1][0], getSmelting().oreId[1][1]);
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getProducedItem()
	 */
	@Override
	public int getProducedItem() {
		return getSmelting().getProduceId();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getSkill()
	 */
	@Override
	public int getSkill() {
		return Skills.SMITHING;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getLevelRequirement()
	 */
	@Override
	public int getLevelRequirement() {
		return getSmelting().getLevel();
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getExperience()
	 */
	@Override
	public double getExperience() {
		return getSmelting().getExperience();
	}
	
	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#getAmount()
	 */
	@Override
	public int getAmount() {
		return 1;
	}

	/**
	 * (non-Javadoc)
	 * @see org.hyperion.rs2.action.impl.ProducingAction#init()
	 */
	@Override
	public void init() {
		getPlayer().getActionSender().sendRemoveAllInterfaces();
		if(!getPlayer().getInventory().contains(getPrimaryItem()) || !getPlayer().getInventory().contains(getSecondaryItem())) {
			getPlayer().getActionSender().sendMessage(&quot;You don&#39;t have enough ore to smelt this bar&quot;);
			stop();
			return;
		}
		if(getPlayer().getSkills().getLevel(getSkill()) &lt;= getLevelRequirement()) {
			getPlayer().getActionSender().sendMessage(&quot;You don&#39;t have a high enough smithing level to smelt this&quot;);
			stop();
			return;
		}
		giveReward();
	}
	
	/**
	 * @return smelting
	 */
	public Smelting getSmelting() {
		return smelting;
	}

	/**
	 * @return buttonId
	 */
	public int getButtonId() {
		return buttonId;
	}
}
[/code]</description>
    
    <lastBuildDate>Sun, 26 Jan 2014 04:01:24 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Hyperion] Smelting [Hyperion]</title>
        <dc:creator><![CDATA[@kronixz kronikz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/kronixz">@kronixz</a> wrote:</p>
          <blockquote>
              <p>Nice job I guess, I like how use docs too. Nice</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065/2</link>
        <pubDate>Sun, 26 Jan 2014 04:01:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-539065-2</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065.rss">[Hyperion] Smelting [Hyperion]</source>
      </item>
      <item>
        <title>[Hyperion] Smelting [Hyperion]</title>
        <dc:creator><![CDATA[@Dan0194 Dan0194]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dan0194">@Dan0194</a> wrote:</p>
          <blockquote>
              <p>This isn’t full there is still a few things you have to do by your own. like 50% for iron bars. But I’ve been releasing a ton of stuff for hyperion and I just decided to release this also;</p>
<p>SmeltingInterface class</p>
<p>[code=java]/**</p>
<ul>
<li>SmeltingInterface</li>
<li>
</li>
<li>Jaunary 22, 2014</li>
<li>
</li>
<li>Dan0194<br>
*/<br>
package org.hyperion.rs2.action.impl.smithing.smelting;</li>
</ul>
<p>import org.hyperion.rs2.model.Player;</p>
<p>/**</p>
<ul>
<li>
<p>Everything for loading the smelting interface<br>
*/<br>
public final class SmeltingInterface {</p>
<p>/**</p>
<ul>
<li>The Setter for the class<br>
*/<br>
private static final SmeltingInterface smeltingInterface = new SmeltingInterface();</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>Holds all the data on the interface i.e.</p>
</li>
<li>
<p>slot and the bar Id<br>
<em>/<br>
private static enum SmeltingInterfaceData {<br>
/</em>*</p>
<ul>
<li>All data for bronze bar<br>
<em>/<br>
BRONZE(2405, 2349),<br>
/</em>*</li>
<li>All data for iron bar<br>
<em>/<br>
IRON(2406, 2351),<br>
/</em>*</li>
<li>All the data for silver bar<br>
<em>/<br>
SILVER(2407, 2355),<br>
/</em>*</li>
<li>All data for steel bar<br>
<em>/<br>
STEEL(2409, 2353),<br>
/</em>*</li>
<li>All data for gold bar<br>
<em>/<br>
GOLD(2410, 2357),<br>
/</em>*</li>
<li>All data for mithril bar<br>
<em>/<br>
MITHRIL(2411, 2359),<br>
/</em>*</li>
<li>All data for adamantite bar<br>
<em>/<br>
ADAMANTITE(2412, 2361),<br>
/</em>*</li>
<li>All data for runite bar<br>
*/<br>
RUNITE(2413, 2363);</li>
</ul>
<p>/**</p>
<ul>
<li>The id of the bar</li>
<li>The slot(where the bar goes on interface)<br>
*/<br>
private int id, slot;</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> id</li>
<li>
<a class="mention" href="/u/param">@param</a> slot<br>
*/<br>
SmeltingInterfaceData(int slot, int id) {<br>
this.slot = slot;<br>
this.id = id;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> slot<br>
*/<br>
public int getSlot() {<br>
return slot;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> id<br>
*/<br>
public int getId() {<br>
return id;<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>/**</p>
<ul>
<li>Sends the interface to the player and all the data on it<br>
*/<br>
public SmeltingInterface sendSmeltingInterface(Player player) {<br>
player.getActionSender().sendChatInterface(2400);<br>
for(SmeltingInterfaceData smeltingInterfaceData : SmeltingInterfaceData.values()) {<br>
player.getActionSender().sendResizeItem(smeltingInterfaceData.getSlot(), 150, smeltingInterfaceData.getId());<br>
}<br>
return this;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> smeltingInterface<br>
*/<br>
public static final SmeltingInterface getSmeltingInterface() {<br>
return smeltingInterface;<br>
}<br>
}<br>
[/code]</li>
</ul>
</li>
</ul>
<p>SmeltingAction:</p>
<p>[code=java]/**</p>
<ul>
<li>SmeltingAction</li>
<li>
</li>
<li>January 22, 2014</li>
<li>
</li>
<li>Dan0194<br>
*/<br>
package org.hyperion.rs2.action.impl.smithing.smelting;</li>
</ul>
<p>import java.util.HashMap;<br>
import java.util.Map;</p>
<p>import org.hyperion.rs2.action.impl.ProducingAction;<br>
import org.hyperion.rs2.model.Animation;<br>
import org.hyperion.rs2.model.Item;<br>
import org.hyperion.rs2.model.Player;<br>
import org.hyperion.rs2.model.Skills;</p>
<p>/**</p>
<ul>
<li>
<p>All to do with actaully smelting the bar<br>
*/<br>
public class SmeltingAction extends ProducingAction {</p>
<p>/**</p>
<ul>
<li>
<p>All the data on the smelting of the bar i.e.</p>
</li>
<li>
<p>the barId, level, exp, items needed and the button</p>
</li>
<li>
<p>ids of the item<br>
<em>/<br>
public static enum Smelting {<br>
/</em>*</p>
<ul>
<li>All data for Smelting Bronze bar<br>
<em>/<br>
BRONZE(2349, 1, 6.2, new short[][] {{436, 1}, {438, 1}}, new short[] {3987, 3986, 2807, 2414}),<br>
/</em>*</li>
<li>All data for Smelting Iron bar<br>
<em>/<br>
IRON(2351, 15, 12.5, new short[][] {{440, 1}, {-1, 0}}, new short[] {3991, 3990, 3989, 3988}),<br>
/</em>*</li>
<li>All data for Smelting Silver bar<br>
<em>/<br>
SILVER(2355, 20, 13.7, new short[][] {{442, 1}, {-1, 0}}, new short[] {3995, 3994, 3993, 3992}),<br>
/</em>*</li>
<li>All data for Smelting Steel bar<br>
<em>/<br>
STEEL(2353, 30, 17.5, new short[][] {{440, 1}, {453, 2}}, new short[] {3999, 3998, 3997, 3996}),<br>
/</em>*</li>
<li>All data for Smelting Gold bar<br>
<em>/<br>
GOLD(2357, 40, 22.5, new short[][] {{444, 1}, {-1, 0}}, new short[] {4003, 4002, 4001, 4000}),<br>
/</em>*</li>
<li>All data for Smelting Mithril bar<br>
<em>/<br>
MITHRIL(2359, 50, 30, new short[][] {{447, 1}, {453, 4}}, new short[] {7441, 7440, 6397, 4158}),<br>
/</em>*</li>
<li>All data for Smelting Adamantite bar<br>
<em>/<br>
ADAMANTITE(2361, 70, 37.5, new short[][] {{449, 1}, {453, 6}}, new short[] {7446, 7444, 7443, 7442}),<br>
/</em>*</li>
<li>All data for Smelting Rune bar<br>
*/<br>
RUNE(2363, 85, 50, new short[][] {{451, 1}, {453, 8}}, new short[] {7450, 7449, 7448, 7447});</li>
</ul>
<p>/**</p>
<ul>
<li>What it is producing<br>
<em>/<br>
private int produceId;<br>
/</em>*</li>
<li>The level needed<br>
<em>/<br>
private int level;<br>
/</em>*</li>
<li>The exprience you recieve<br>
<em>/<br>
private double experience;<br>
/</em>*</li>
<li>The ores you need and amount<br>
<em>/<br>
private short[][] oreId;<br>
/</em>*</li>
<li>Button ids for each ore<br>
*/<br>
private short[] buttonId;</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> produceId</li>
<li>
<a class="mention" href="/u/param">@param</a> level</li>
<li>
<a class="mention" href="/u/param">@param</a> experience</li>
<li>
<a class="mention" href="/u/param">@param</a> oreId</li>
<li>
<a class="mention" href="/u/param">@param</a> buttonId<br>
*/<br>
Smelting(int produceId, int level, double experience, short[][] oreId, short[] buttonId) {<br>
this.produceId = produceId;<br>
this.level = level;<br>
this.experience = experience;<br>
this.oreId = oreId;<br>
this.buttonId = buttonId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Holds all the values of our Smelting enum with button ids<br>
*/<br>
private static Map&lt;Short, Smelting&gt; smelting = new HashMap&lt;Short, Smelting&gt;();</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the Smelting by the button Id</li>
<li>
<a class="mention" href="/u/param">@param</a> button</li>
<li>
<a class="mention" href="/u/return">@return</a> The Smelting, or <code>null</code> if the button is not part of Smelting.<br>
*/<br>
public static Smelting forId(short button) {<br>
return smelting.get(button);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Checks if the map contains the button</li>
<li>
<a class="mention" href="/u/param">@param</a> button<br>
*/<br>
public static boolean contains(short button) {<br>
return smelting.containsKey(button);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Populates the smelting map<br>
*/<br>
static {<br>
for(Smelting smithing : Smelting.values()) {<br>
for(short i = 0; i &lt; smithing.buttonId.length; i++) {<br>
smelting.put(smithing.buttonId[i], smithing);<br>
}<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> produceId<br>
*/<br>
public int getProduceId() {<br>
return produceId;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> level<br>
*/<br>
public int getLevel() {<br>
return level;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> experience<br>
*/<br>
public double getExperience() {<br>
return experience;<br>
}<br>
}</li>
</ul>
</li>
</ul>
<p>/**</p>
<ul>
<li>All of our data from the enum<br>
<em>/<br>
private Smelting smelting;<br>
/</em>*</li>
<li>The button clicked<br>
*/<br>
private int buttonId;</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/param">@param</a> player</li>
<li>
<a class="mention" href="/u/param">@param</a> slot</li>
<li>
<a class="mention" href="/u/param">@param</a> button<br>
*/<br>
public SmeltingAction(final Player player, final int slot, final int buttonId) {<br>
super(player, slot, buttonId);<br>
this.buttonId = buttonId;<br>
this.smelting = Smelting.forId((short) buttonId);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionDelay()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public long getProductionDelay() {<br>
return 4;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionNumber()</li>
<li>Calculates how much bars needed to be smithed<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getProductionNumber() {<br>
int total = 0;<br>
for(int i = 0; i &lt; getSmelting().buttonId.length; i++) {<br>
if(getButtonId() == getSmelting().buttonId[i]) {<br>
total = i == 0 ? i + 1 : (i + 1) * (i + 1) + 1;<br>
}<br>
}<br>
return total;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProductionMessage()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public String getProductionMessage() {<br>
return “You smelt the ore into a “+new Item(getSmelting().getProduceId()).getDefinition().getName()+”.”;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getAnimation()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return Animation.create(899);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getPrimaryItem()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public Item getPrimaryItem() {<br>
return new Item(getSmelting().oreId[0][0], getSmelting().oreId[0][1]);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getSecondaryItem()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public Item getSecondaryItem() {<br>
return new Item(getSmelting().oreId[1][0], getSmelting().oreId[1][1]);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getProducedItem()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getProducedItem() {<br>
return getSmelting().getProduceId();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getSkill()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getSkill() {<br>
return Skills.SMITHING;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getLevelRequirement()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getLevelRequirement() {<br>
return getSmelting().getLevel();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getExperience()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public double getExperience() {<br>
return getSmelting().getExperience();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#getAmount()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public int getAmount() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>(non-Javadoc)</li>
<li>
<span class="mention">@see</span> org.hyperion.rs2.action.impl.ProducingAction#init()<br>
*/<br>
<a class="mention" href="/u/override">@Override</a><br>
public void init() {<br>
getPlayer().getActionSender().sendRemoveAllInterfaces();<br>
if(!getPlayer().getInventory().contains(getPrimaryItem()) || !getPlayer().getInventory().contains(getSecondaryItem())) {<br>
getPlayer().getActionSender().sendMessage(“You don’t have enough ore to smelt this bar”);<br>
stop();<br>
return;<br>
}<br>
if(getPlayer().getSkills().getLevel(getSkill()) &lt;= getLevelRequirement()) {<br>
getPlayer().getActionSender().sendMessage(“You don’t have a high enough smithing level to smelt this”);<br>
stop();<br>
return;<br>
}<br>
giveReward();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> smelting<br>
*/<br>
public Smelting getSmelting() {<br>
return smelting;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<a class="mention" href="/u/return">@return</a> buttonId<br>
*/<br>
public int getButtonId() {<br>
return buttonId;<br>
}<br>
}<br>
[/code]</li>
</ul>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065/1</link>
        <pubDate>Fri, 24 Jan 2014 20:45:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-539065-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-smelting-hyperion/539065.rss">[Hyperion] Smelting [Hyperion]</source>
      </item>
  </channel>
</rss>
