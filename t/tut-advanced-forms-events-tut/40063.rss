<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[tut]Advanced Forms - Events[/tut]</title>
    <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063</link>
    <description>This tutorial explains about form events, they are not very useful for runescape autoing, 
but can be used for anything that has a graphical user interface (like SRL&#39;s SetupSRL script which sets up all your variables like mouse speed)

if you have not read Mad Cows beginner form tutorials, please read them here 
[url=http://www.moparisthebest.com/smf/index.php/topic,7621.0.html]http://www.moparisthebest.com/smf/index.php/topic,7621.0.html[/url]

if this tutorial is anything like my other one, no-one will read more than the first two paragraphs, 
except someone who knows everything iv written and will point out a mistake

this tutorial is [b]LONG[/b] if you have a short attention span, please press the &#39;back&#39; button on your browser now.


all other scar scripting would get information from the user by waiting 10 milliseconds then checking for something, 
but not forms, they are much better designed than that, forms just sit tight and wait for something to happen,
when something happens, they call a procedure which you choose,
something happening is called an event, 
forms are [b]Event-Based-Programming[/b]


these procedures that the form calls, they all have parameters, but unlike other parameters, 
they are not filled by a scripter, but are filled by the form when the event takes place, look at this example
[code]

procedure ButtonClick(Sender:TObject);
begin //this procedure is called when a button is clicked on the form

Writeln(&#39;Well done! you&#39;&#39;ve clicked a button&#39;);
Writeln(&#39; Next Week - typing ;D&#39;);
end;

procedure InitForm;
begin
//..

Button1.OnClick := @ButtonClick;

//..

Button2.OnClick := @ButtonClick;

//..

Button3.OnClick := @ButtonClick;
end;
[/code]

the procedure ButtonClick is called when you click a button, it has a parameter, Sender:TObject, which is filled by the form
the sender refers to which component called the form and sent the event
it can be put to use like this

[code]
procedure ButtonClick(Sender:TObject);
begin //this procedure is called when a button is clicked on the form
  case Sender of
   Button1: writeln(&#39;You Clicked Button1&#39;);
   Button2: writeln(&#39;You Clicked Button2&#39;);
   Button3: writeln(&#39;You Clicked Button3&#39;);
  end
end;
[/code]
as you can see, the procedure is interacting with the parameter sender, it can tell what called it!


a useful event with forms is the Mouse Move Event, this is whenever you move the mouse around, the form will call a procedure to respond
they are used like this

add this line to the procedure where you create your form (normally called InitForm)
[code]
frmDesign.OnMouseMove := @MouseMove;
[/code]

then above that procedure, add this
[code]
procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
begin

end;
[/code]

you should already know what the sender parameter is, 
Shift:TShiftState is apparantly if your holding down shift or control, but i&#39;v never gotten it to work,
x,y:integer; is simple, which co-ordinate is the mouse moved to

this is an example of the x,y:integer parameters being used
[code]
procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
var Canvas:TCanvas;
begin
Canvas := frmDesign.Canvas;
Canvas.Pixels[x,y] := clRed;
end;
[/code]

this procedure changed the color of the pixel you&#39;ve moved the mouse to into red, like a little Paint

[IMG]http://img299.imageshack.us/img299/4306/onmousemoveda8.jpg[/img]

another useful event is the Mouse Down and Mouse Up event
these use the same parameters, but one is called when you pressed a mouse button and one is called when you let go
[code]
procedure MouseDown(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
frmDesign.Canvas.MoveTo(x,y);
end;

procedure MouseUp(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
frmDesign.Canvas.Pen.Width:= 5;
frmDesign.Canvas.LineTo(x,y);
end;

procedure InitForm;
begin
//..
//..
frmDesign.OnMouseDown := @MouseDown;
frmDesign.OnMouseUp := @MouseUp;
[/code]

the above example draws a line from were you press the mouse button to where you release it

the parameter Button:TMouseButton is which button you pressed, it can be used like this
[code]
procedure MouseDown(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
 case Button of
  mbLeft: writeln(&#39;Left Clicked&#39;);
  mbMiddle: writeln(&#39;Clicked with middle button (if it still exists :s)&#39;);
  mbRight: writeln(&#39;Right Clicked&#39;);
 end
end;
[/code]

the next useful group of events are the Keyboard events, this is basicly when you press a key

there are three events to do with the keyboard
OnKeyPress
OnKeyDown
OnKeyUp

its fairly obvoius what they do, here is an example of them
[code]
procedure KeyPress(Sender: TObject; var Key: Char);
begin
writeln(key);
end;

procedure InitForm;
begin
//..
frmDesign.OnKeyPress := @KeyPress;
end;
[/code]
the above example prints out a key every time you press it, 
when you press &#39;a&#39;, it would print out &#39;a&#39; to the debug box

[code]

procedure frmKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
writeln( IntToStr(Key)+&#39; has been pressed&#39;);
end;

procedure frmKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
writeln( IntToStr(Key)+&#39; has been released&#39;);
end;

procedure InitForm;
begin
//..
frmDesign.OnKeyDown := @frmKeyDown;
frmDesign.OnKeyUp := @frmKeyUp;
end;
[/code]

the above example is slightly differant to the OnKeyPress event, instead of the variable key being type char, it is type word (which is a number)

this means that instead of printing out the acctual character, it will print the keyboard character code
pressing &#39;a&#39; will print &#39;65&#39; pressing return will print &#39;13&#39;


normally with forms, people cannot execute the rest of the script without closing the form first
this is because you use the procedure 
[code]
frmDesign.ShowModal;
[/code]

this shows the form and waits until it receives the &#39;ModalResult&#39;
this is the reason that calling &#39;frmDesign.ModalResult := MrOk;&#39; will close the form

however, there are differant types of showing a form, this doesnt wait for a ModalResult,
and more importantly [b]The Rest Of The Script Executes While The Form Is Open[/b]

[code]
frmDesign.Show;
[/code]

this shows the form in the same way GetSelf.Show does  
(i bet you experianced form users were kicking yourself because you have been using GetSelf.Show for ages)


the other way is this...
remember how when making a form you would change frmDesign.Visible := True into False?
well just leave it as true, and not include frmDesign.ShowModal, it will show itself

[u]My Last[/u]
this is my last script of the tutorial which puts in place all the things you&#39;ve read about (and some you havent)

and another last thing to learn, Make sure you use FreeForm(frmDesign); after you call you form, to free the memory

[code]
program MyLast;

var
  frmDesign : TForm;


procedure KeyPress(Sender: TObject; var Key: Char);
begin
writeln(&#39;You Pressed &#39;+key);
end;

procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
begin
frmDesign.Canvas.Pen.Color := 255;
frmDesign.Canvas.Pen.Width := 5;
frmDesign.Canvas.MoveTo(x-5,y-5);
frmDesign.Canvas.LineTo(x,y);
end;

procedure Form;
begin
frmDesign := CreateForm;
frmDesign.Left := 0;
frmDesign.Top := 0;
frmDesign.Width := 300;
frmDesign.Height := 300;
frmDesign.Caption := &#39;Form Tutorial&#39;;
frmDesign.Color := clBtnFace;
frmDesign.Font.Color := clWindowText;
frmDesign.Font.Height := -11;
frmDesign.Font.Name := &#39;MS Sans Serif&#39;;
frmDesign.Font.Style := [];
frmDesign.PixelsPerInch := 96;
frmDesign.OnKeyPress:= @KeyPress;
frmDesign.OnMouseMove:= @MouseMove;

frmDesign.Show;
end;

procedure SafeForm;
var t:TVariantArray;
begin
ThreadSafeCall(&#39;Form&#39;,t);
end;


var
  x,y,Width,Height:integer;

begin
GetClientDimensions(Width,Height);
SafeForm;
for y:=0 to Height-300 do
 begin
 for x:=0 to Width-300 do
  begin
  x:=x+50;
  frmDesign.Top:=y;
  frmDesign.Left:=x;
  wait(100);
  end
 frmDesign.RePaint;
 y:=y+50;
 end
FreeForm(frmDesign);
end.
[/code]</description>
    
    <lastBuildDate>Tue, 09 Jan 2007 03:44:31 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>okay, i think this is mostly about events the canvases bit is just so you can see whats going on</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/6</link>
        <pubDate>Tue, 09 Jan 2007 03:44:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-6</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>Small suggestion, your title has some ambiguity. Add some really advanced stuff besides form canvases or change the title to something like “Form Canvases” or “Advanced forms - Canvases” to define what your tutorial is about.</p>
<p>The current title is just a little better than the title “Tutorial”, lol. Please change. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/5</link>
        <pubDate>Tue, 09 Jan 2007 03:21:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-5</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>wow someone acctually read this! i thought this was going to sink so low you’d need a bulldozer to dig it out</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/4</link>
        <pubDate>Mon, 08 Jan 2007 03:40:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>Hey nice tutorial yakman. I learned this stuff whilst looking at delphi/pascal tutorials. Glad someone made one here for scar though. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/3</link>
        <pubDate>Sun, 07 Jan 2007 21:42:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@Bebemycat2 Bebe]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bebemycat2">@Bebemycat2</a> wrote:</p>
          <blockquote>
              <blockquote>this tutorial is LONG if you have a short attention span, please press the 'back' button on your browser now.</blockquote>
:( I did that, lol
<p>&lt;3 yakman</p>
<p>Moved to tutorial section <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/2</link>
        <pubDate>Thu, 28 Dec 2006 05:27:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
      <item>
        <title>[tut]Advanced Forms - Events[/tut]</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>This tutorial explains about form events, they are not very useful for runescape autoing,<br>
but can be used for anything that has a graphical user interface (like SRL’s SetupSRL script which sets up all your variables like mouse speed)</p>
<p>if you have not read Mad Cows beginner form tutorials, please read them here<br>
<a href="http://www.moparisthebest.com/smf/index.php/topic,7621.0.html" data-bbcode="true" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,7621.0.html</a></p>
<p>if this tutorial is anything like my other one, no-one will read more than the first two paragraphs,<br>
except someone who knows everything iv written and will point out a mistake</p>
<p>this tutorial is <span class="bbcode-b">LONG</span> if you have a short attention span, please press the ‘back’ button on your browser now.</p>
<p>all other scar scripting would get information from the user by waiting 10 milliseconds then checking for something,<br>
but not forms, they are much better designed than that, forms just sit tight and wait for something to happen,<br>
when something happens, they call a procedure which you choose,<br>
something happening is called an event,<br>
forms are <span class="bbcode-b">Event-Based-Programming</span></p>
<p>these procedures that the form calls, they all have parameters, but unlike other parameters,<br>
they are not filled by a scripter, but are filled by the form when the event takes place, look at this example</p>
<pre><code class="lang-auto">
procedure ButtonClick(Sender:TObject);
begin //this procedure is called when a button is clicked on the form

Writeln('Well done! you''ve clicked a button');
Writeln(' Next Week - typing ;D');
end;

procedure InitForm;
begin
//..

Button1.OnClick := @ButtonClick;

//..

Button2.OnClick := @ButtonClick;

//..

Button3.OnClick := @ButtonClick;
end;</code></pre>
<p>the procedure ButtonClick is called when you click a button, it has a parameter, Sender:TObject, which is filled by the form<br>
the sender refers to which component called the form and sent the event<br>
it can be put to use like this</p>
<pre><code class="lang-auto">procedure ButtonClick(Sender:TObject);
begin //this procedure is called when a button is clicked on the form
  case Sender of
   Button1: writeln('You Clicked Button1');
   Button2: writeln('You Clicked Button2');
   Button3: writeln('You Clicked Button3');
  end
end;</code></pre>
<p>as you can see, the procedure is interacting with the parameter sender, it can tell what called it!</p>
<p>a useful event with forms is the Mouse Move Event, this is whenever you move the mouse around, the form will call a procedure to respond<br>
they are used like this</p>
<p>add this line to the procedure where you create your form (normally called InitForm)</p>
<pre><code class="lang-auto">frmDesign.OnMouseMove := @MouseMove;</code></pre>
<p>then above that procedure, add this</p>
<pre><code class="lang-auto">procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
begin

end;</code></pre>
<p>you should already know what the sender parameter is,<br>
Shift:TShiftState is apparantly if your holding down shift or control, but i’v never gotten it to work,<br>
x,y:integer; is simple, which co-ordinate is the mouse moved to</p>
<p>this is an example of the x,y:integer parameters being used</p>
<pre><code class="lang-auto">procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
var Canvas:TCanvas;
begin
Canvas := frmDesign.Canvas;
Canvas.Pixels[x,y] := clRed;
end;</code></pre>
<p>this procedure changed the color of the pixel you’ve moved the mouse to into red, like a little Paint</p>
<p><img src="http://img299.imageshack.us/img299/4306/onmousemoveda8.jpg" alt width="" height=""></p>
<p>another useful event is the Mouse Down and Mouse Up event<br>
these use the same parameters, but one is called when you pressed a mouse button and one is called when you let go</p>
<pre><code class="lang-auto">procedure MouseDown(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
frmDesign.Canvas.MoveTo(x,y);
end;

procedure MouseUp(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
frmDesign.Canvas.Pen.Width:= 5;
frmDesign.Canvas.LineTo(x,y);
end;

procedure InitForm;
begin
//..
//..
frmDesign.OnMouseDown := @MouseDown;
frmDesign.OnMouseUp := @MouseUp;</code></pre>
<p>the above example draws a line from were you press the mouse button to where you release it</p>
<p>the parameter Button:TMouseButton is which button you pressed, it can be used like this</p>
<pre><code class="lang-auto">procedure MouseDown(Sender:TObject;Button:TMouseButton;Shift:TShiftState;x,y:integer);
begin
 case Button of
  mbLeft: writeln('Left Clicked');
  mbMiddle: writeln('Clicked with middle button (if it still exists :s)');
  mbRight: writeln('Right Clicked');
 end
end;</code></pre>
<p>the next useful group of events are the Keyboard events, this is basicly when you press a key</p>
<p>there are three events to do with the keyboard<br>
OnKeyPress<br>
OnKeyDown<br>
OnKeyUp</p>
<p>its fairly obvoius what they do, here is an example of them</p>
<pre><code class="lang-auto">procedure KeyPress(Sender: TObject; var Key: Char);
begin
writeln(key);
end;

procedure InitForm;
begin
//..
frmDesign.OnKeyPress := @KeyPress;
end;</code></pre>
<p>the above example prints out a key every time you press it,<br>
when you press ‘a’, it would print out ‘a’ to the debug box</p>
<pre><code class="lang-auto">
procedure frmKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
writeln( IntToStr(Key)+' has been pressed');
end;

procedure frmKeyUp(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
writeln( IntToStr(Key)+' has been released');
end;

procedure InitForm;
begin
//..
frmDesign.OnKeyDown := @frmKeyDown;
frmDesign.OnKeyUp := @frmKeyUp;
end;</code></pre>
<p>the above example is slightly differant to the OnKeyPress event, instead of the variable key being type char, it is type word (which is a number)</p>
<p>this means that instead of printing out the acctual character, it will print the keyboard character code<br>
pressing ‘a’ will print ‘65’ pressing return will print ‘13’</p>
<p>normally with forms, people cannot execute the rest of the script without closing the form first<br>
this is because you use the procedure</p>
<pre><code class="lang-auto">frmDesign.ShowModal;</code></pre>
<p>this shows the form and waits until it receives the ‘ModalResult’<br>
this is the reason that calling ‘frmDesign.ModalResult := MrOk;’ will close the form</p>
<p>however, there are differant types of showing a form, this doesnt wait for a ModalResult,<br>
and more importantly <span class="bbcode-b">The Rest Of The Script Executes While The Form Is Open</span></p>
<pre><code class="lang-auto">frmDesign.Show;</code></pre>
<p>this shows the form in the same way GetSelf.Show does<br>
(i bet you experianced form users were kicking yourself because you have been using GetSelf.Show for ages)</p>
<p>the other way is this…<br>
remember how when making a form you would change frmDesign.Visible := True into False?<br>
well just leave it as true, and not include frmDesign.ShowModal, it will show itself</p>
<p><span class="bbcode-u">My Last</span><br>
this is my last script of the tutorial which puts in place all the things you’ve read about (and some you havent)</p>
<p>and another last thing to learn, Make sure you use FreeForm(frmDesign); after you call you form, to free the memory</p>
<pre><code class="lang-auto">program MyLast;

var
  frmDesign : TForm;


procedure KeyPress(Sender: TObject; var Key: Char);
begin
writeln('You Pressed '+key);
end;

procedure MouseMove(Sender:TObject;Shift:TShiftState; x,y:integer);
begin
frmDesign.Canvas.Pen.Color := 255;
frmDesign.Canvas.Pen.Width := 5;
frmDesign.Canvas.MoveTo(x-5,y-5);
frmDesign.Canvas.LineTo(x,y);
end;

procedure Form;
begin
frmDesign := CreateForm;
frmDesign.Left := 0;
frmDesign.Top := 0;
frmDesign.Width := 300;
frmDesign.Height := 300;
frmDesign.Caption := 'Form Tutorial';
frmDesign.Color := clBtnFace;
frmDesign.Font.Color := clWindowText;
frmDesign.Font.Height := -11;
frmDesign.Font.Name := 'MS Sans Serif';
frmDesign.Font.Style := [];
frmDesign.PixelsPerInch := 96;
frmDesign.OnKeyPress:= @KeyPress;
frmDesign.OnMouseMove:= @MouseMove;

frmDesign.Show;
end;

procedure SafeForm;
var t:TVariantArray;
begin
ThreadSafeCall('Form',t);
end;


var
  x,y,Width,Height:integer;

begin
GetClientDimensions(Width,Height);
SafeForm;
for y:=0 to Height-300 do
 begin
 for x:=0 to Width-300 do
  begin
  x:=x+50;
  frmDesign.Top:=y;
  frmDesign.Left:=x;
  wait(100);
  end
 frmDesign.RePaint;
 y:=y+50;
 end
FreeForm(frmDesign);
end.</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063/1</link>
        <pubDate>Thu, 28 Dec 2006 04:07:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-40063-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-advanced-forms-events-tut/40063.rss">[tut]Advanced Forms - Events[/tut]</source>
      </item>
  </channel>
</rss>
