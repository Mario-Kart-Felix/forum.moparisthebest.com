<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Items Kept on Death</title>
    <link>https://forum.moparisthebest.com/t/items-kept-on-death/353950</link>
    <description>For some reason this just happened.  When a player dies in the wild and they&#39;re not skulled they lose all of their items.  This is 317 delta base.  Here&#39;s what&#39;s in my client.java: [code]public void youdied()
		{
		if(playerHasItem(5509)){
		deleteItem(5509, 1);
		}
		if(playerHasItem(5510)){
		deleteItem(5510, 1);
		}
		if(playerHasItem(5512)){
		deleteItem(5512, 1);
		}
		if(playerHasItem(5514)){
		deleteItem(5514, 1);
		}
		if(playerHasItem(6570)){
		keep6570 = true;
		deleteItem(6570, 1);
		}
                if (!isSkulled) {
                keepItemHandle();
		}
                if (ProtItem) {
                applyProtectItemProt();
		}
for(int rr=0; rr&lt;playerItems.length; rr++) {
	try {
		if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {		//createItem(currentX,currentY,playerItems[rr]-1);
			replaceBarrows();
			//server.checkPlayerCapes.checkDrop(this);
			ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);
                        //createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
			deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);
 
		}
	} catch(Exception e) {  }
}
for(int r=0; r&lt;playerEquipment.length; r++) {
	try {
		int item = playerEquipment[r];
		if((item &gt; 0) &amp;&amp; (item &lt; 11999)) {
			remove(item, r);
		}
	} catch(Exception e) { sM(&quot;ERROR: Removing Equipment&quot;); }
}
		if(playerHasItem(5509)){
		deleteItem(5509, 1);
		}
		if(playerHasItem(5510)){
		deleteItem(5510, 1);
		}
		if(playerHasItem(5512)){
		deleteItem(5512, 1);
		}
		if(playerHasItem(5514)){
		deleteItem(5514, 1);
		}
		if(playerHasItem(6570)){
		keep6570 = true;
		deleteItem(6570, 1);
		}
for(int rr=0; rr&lt;playerItems.length; rr++) {
	try {
		if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {
//createItem(currentX,currentY,playerItems[rr]-1);
			replaceBarrows();
			//server.checkPlayerCapes.checkDrop(this);
			ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);
                        //createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);
			deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]); 
		}
	} catch(Exception e) {  }
}
		try {

		} catch(Exception e) {}
			ItemHandler.addItem(526, absX, absY, 1, KillerId, false);
		try {
		} catch(Exception e) {}
        if (itemKept1 &gt; 0)
            addItem(itemKept1, 1);
        if (itemKept2 &gt; 0)
            addItem(itemKept2, 1);
        if (itemKept3 &gt; 0)
            addItem(itemKept3, 1);
        if (itemKept4 &gt; 0)
            addItem(itemKept4, 1);
	if (keep6570) {
	    addItem(6570, 1);
	    keep6570 = false;
	}
	
			resetKeepItem();
			hitDiff = 0;	
			updateRequired = true; appearanceUpdateRequired = true;
		} 
	
    public void keepItem1()
    {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept1 = playerItems[i]-1;
                itemKept1Slot = i;
                itemSlot1 = true;
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept1 = playerEquipment[i];
                itemKept1Slot = i;
                itemSlot1 = false;
            }
        }
    }

    public void keepItem2() {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            if (itemKept1Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                {
                    highest = value;
                    itemKept2 = playerItems[i]-1;
                    itemKept2Slot = i;
                    itemSlot2 = true;
                }
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            if (itemKept1Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                {
                    highest = value;
                    itemKept2 = playerEquipment[i];
                    itemKept2Slot = i;
                    itemSlot2 = false;
                }
            }
        }
    }

    public void keepItem3()
    {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                {
                    highest = value;
                    itemKept3 = playerItems[i]-1;
                    itemKept3Slot = i;
                    itemSlot3 = true;
                }
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                {
                    highest = value;
                    itemKept3 = playerEquipment[i];
                    itemKept3Slot = i;
                    itemSlot3 = false;
                }
            }
        }
    }

    public void keepItem4()
    {
        int highest = 0;
        for (int i = 0; i &lt; playerItems.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i &amp;&amp; itemKept3Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
                if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
                {
                    highest = value;
                    itemKept4 = playerItems[i]-1;
                    itemKept4Slot = i;
                    itemSlot4 = true;
                }
            }
        }
        for (int i = 0; i &lt; playerEquipment.length; i++)
        {
            if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i &amp;&amp; itemKept3Slot != i)
            {
                int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
                if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
                {
                    highest = value;
                    itemKept4 = playerEquipment[i];
                    itemKept4Slot = i;
                    itemSlot4 = false;
                }
            }
        }
    }

    public void keepItemHandle()
    {
        keepItem1();
        keepItem2();
        keepItem3();
        if (itemKept1 &gt; 0)
        {
            if (itemSlot1)
                deleteItem(itemKept1, itemKept1Slot, 1);
            else if (!itemSlot1)
                deleteequiment(itemKept1, itemKept1Slot);
        }
        if (itemKept2 &gt; 0)
        {
            if (itemSlot2)
                deleteItem(itemKept2, itemKept2Slot, 1);
            else if (!itemSlot2)
                deleteequiment(itemKept2, itemKept2Slot);
        }
        if (itemKept3 &gt; 0)
        {
            if (itemSlot3)
                deleteItem(itemKept3, itemKept3Slot, 1);
            else if (!itemSlot3)
                deleteequiment(itemKept3, itemKept3Slot);
        }
    }

    public void applyProtectItemProt()
    {
if(!isSkulled)
        keepItem4();
        if (itemKept4 &gt; 0)
        {
            if (itemSlot4)
                deleteItem(itemKept4, itemKept4Slot, 1);
            else if (!itemSlot4)
                deleteequiment(itemKept4, itemKept4Slot);
        }
if(isSkulled)
        keepItem1();
        if (itemKept1 &gt; 0)
        {
            if (itemSlot1)
                deleteItem(itemKept1, itemKept1Slot, 1);
            else if (!itemSlot1)
                deleteequiment(itemKept1, itemKept1Slot);
        }
    }[/code][code]		if (deathStage == 1) {
			if (attacknpc &gt; 0) { // was killed by a npc -bakatool
				server.npcHandler.ResetAttackPlayer(attacknpc);
			}
			ResetAttack();
			ResetAttackNPC();

			deathStage = 2;
			poisoned = false;
			poisonDmg = false;
			fighting = false;
			hits = 0;
			startAnimation(0x900);
			updateRequired = true;
			appearanceUpdateRequired = true;
			deathTimer = System.currentTimeMillis();
			currentHealth = playerLevel[playerHitpoints];
			playerLevel[0] = getLevelForXP(playerXP[0]);
			playerLevel[1] = getLevelForXP(playerXP[1]);
			playerLevel[2] = getLevelForXP(playerXP[2]);
			playerLevel[4] = getLevelForXP(playerXP[4]);
			playerLevel[5] = getLevelForXP(playerXP[5]);
			playerLevel[6] = getLevelForXP(playerXP[6]);
			sendFrame126(&quot;Prayer: &quot;+playerLevel[5]+&quot;/&quot;+getLevelForXP(playerXP[5])+&quot;&quot;, 687);
			resetfollowers();
			refreshSkills();
			killMyNPCs();
			resetKnight();
			skulledBy = &quot;&quot;;
		}
		if (!IsInFightCave() &amp;&amp; !inFunPk() &amp;&amp; !isInPitGame() &amp;&amp; !isInPitRoom() &amp;&amp; playerRights != 2 &amp;&amp; playerRights != 3 &amp;&amp; action != 1 &amp;&amp; deathStage == 2 &amp;&amp;  System.currentTimeMillis() - deathTimer &gt;= 2500) {
		client killerz = (client) server.playerHandler.players[KillerId];
		youdied();
		if(!inDuel()){
		removeAllItems();
		}
		killerz.rating += 15;
		killerz.sM(&quot;You have defeated &quot;+playerName+&quot;.&quot;);
		killerz.pkPoints += 5;
		killerz.pPrestige += 25;
		}
		if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; isInPitGame() &amp;&amp; !IsInFightCave() &amp;&amp; !inFunPk()) {
			toX = 2399;
			toY = 5171;
			inPitsGame = false;
			PlayerHandler.playersInPit -= 1;
			AtkPray = 0;
			StrPrayer = 0;
			DefPray = 0;
			RangePray = 0;
			MagePray = 0;
			PrayHeal = false;
			ProtItem = false;
			ProtMage = false;
			ProtRange = false;
			ProtMelee = false;
			Redemption = false;
			Retribution = false;
			Smite = false;
			Chivalry = false;
			Piety = false;
			isSkulled = false;
			lastSkull = 0;
			headIcon = 0;
			turnpray();
			heightLevel = 0;
			currentHealth = playerLevel[playerHitpoints];
			deathStage = 0;
			resetAnimation();
			frame1();
			prayOn = false;
			AntiTeleDelay = 0;
			EntangleDelay = 0;
			sM(&quot;Oh dear you have died!&quot;);
            		resetOtherAtk();
			followID = 0;
			followID2 = 0;
		}
		if (deathStage == 3) {
			client p = getClient(duel_with);
			teleblock = false;
			deathStage = 4;
			p.DuelVictory();
			ResetAttack();
			poisoned = false;
			poisonDmg = false;
			fighting = false;
			hits = 0;
			startAnimation(0x900);
			updateRequired = true;
			appearanceUpdateRequired = true;
			deathTimer = System.currentTimeMillis();
			currentHealth = playerLevel[playerHitpoints];
			playerLevel[0] = getLevelForXP(playerXP[0]);
			playerLevel[1] = getLevelForXP(playerXP[1]);
			playerLevel[2] = getLevelForXP(playerXP[2]);
			playerLevel[4] = getLevelForXP(playerXP[4]);
			playerLevel[5] = getLevelForXP(playerXP[5]);
			playerLevel[6] = getLevelForXP(playerXP[6]);
			sendFrame126(&quot;Prayer: &quot;+playerLevel[5]+&quot;/&quot;+getLevelForXP(playerXP[5])+&quot;&quot;, 687);
			resetfollowers();
			refreshSkills();
		}
		if (deathStage == 4 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500) {
			toX = 3377+misc.random(1);
			toY = 3273+misc.random(4);
			AtkPray = 0;
			StrPrayer = 0;
			DefPray = 0;
			RangePray = 0;
			MagePray = 0;
			PrayHeal = false;
			ProtItem = false;
			ProtMage = false;
			ProtRange = false;
			ProtMelee = false;
			Redemption = false;
			Retribution = false;
			Smite = false;
			Chivalry = false;
			Piety = false;
			isSkulled = false;
			lastSkull = 0;
			headIcon = 0;
			turnpray();
			heightLevel = 0;
			currentHealth = playerLevel[playerHitpoints];
			deathStage = 0;
			resetAnimation();
			frame1();
			prayOn = false;
			AntiTeleDelay = 0;
			EntangleDelay = 0;
			sM(&quot;You have lost the duel!&quot;);
            		resetOtherAtk();
			followID = 0;
			followID2 = 0;
		}
		if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; IsInFightCave()) {
		toX = 2439;
		toY = 5169;
			rating -= 25;
			AtkPray = 0;
			StrPrayer = 0;
			DefPray = 0;
			RangePray = 0;
			MagePray = 0;
			PrayHeal = false;
			ProtItem = false;
			ProtMage = false;
			ProtRange = false;
			ProtMelee = false;
			Redemption = false;
			Retribution = false;
			Smite = false;
			Chivalry = false;
			Piety = false;
			isSkulled = false;
			lastSkull = 0;
			headIcon = 0;
			turnpray();
			heightLevel = 0;
			currentHealth = playerLevel[playerHitpoints];
			deathStage = 0;
			resetAnimation();
			frame1();
			prayOn = false;
			sM(&quot;Oh dear you have died!&quot;);
            		resetOtherAtk();
		}
		if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; !IsInFightCave()) {
if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; !IsInFightCave() &amp;&amp; inBountyHunter()) {
client killerz = (client) server.playerHandler.players[KillerId];
if(killerz.TargetName == playerName){
killerz.sM(&quot;Congratulations! You have defeated your bounty hunter Target&quot;);
killerz.GotTarget = false;
killerz.TargetName = &quot;null&quot;;
GotTarget = false;
TargetName = &quot;null&quot;;
youdied();
}
} else {
killerz.sM(&quot;You killed &quot;+playerName+&quot; but was&#39;nt your target so you get no loot!&quot;);
killerz.BHLeaveTimer = 240;
killerz.BHStuck = true;
killerz.startBHLeave();
killerz.GotTarget = false;
killerz.TargetName = &quot;null&quot;;
GotTarget = false;
TargetName = &quot;null&quot;;
for(int rr=0; rr&lt;playerItems.length; rr++) {
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);
}
}
if (itemKept1 &gt; 0) {
addItem(itemKept1, 1);
}
}[/code]</description>
    
    <lastBuildDate>Tue, 10 Aug 2010 06:07:34 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/items-kept-on-death/353950.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Items Kept on Death</title>
        <dc:creator><![CDATA[@sageofmali sageofmali]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sageofmali">@sageofmali</a> wrote:</p>
          <blockquote>
              <p>For some reason this just happened.  When a player dies in the wild and they’re not skulled they lose all of their items.  This is 317 delta base.  Here’s what’s in my client.java: [code]public void youdied()<br>
{<br>
if(playerHasItem(5509)){<br>
deleteItem(5509, 1);<br>
}<br>
if(playerHasItem(5510)){<br>
deleteItem(5510, 1);<br>
}<br>
if(playerHasItem(5512)){<br>
deleteItem(5512, 1);<br>
}<br>
if(playerHasItem(5514)){<br>
deleteItem(5514, 1);<br>
}<br>
if(playerHasItem(6570)){<br>
keep6570 = true;<br>
deleteItem(6570, 1);<br>
}<br>
if (!isSkulled) {<br>
keepItemHandle();<br>
}<br>
if (ProtItem) {<br>
applyProtectItemProt();<br>
}<br>
for(int rr=0; rr&lt;playerItems.length; rr++) {<br>
try {<br>
if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {		//createItem(currentX,currentY,playerItems[rr]-1);<br>
replaceBarrows();<br>
<a href="//server.checkPlayerCapes.checkDrop" rel="nofollow noopener">//server.checkPlayerCapes.checkDrop</a>(this);<br>
ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);<br>
//createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);<br>
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);</p>
<pre><code>	}
} catch(Exception e) {  }
</code></pre>
<p>}<br>
for(int r=0; r&lt;playerEquipment.length; r++) {<br>
try {<br>
int item = playerEquipment[r];<br>
if((item &gt; 0) &amp;&amp; (item &lt; 11999)) {<br>
remove(item, r);<br>
}<br>
} catch(Exception e) { sM(“ERROR: Removing Equipment”); }<br>
}<br>
if(playerHasItem(5509)){<br>
deleteItem(5509, 1);<br>
}<br>
if(playerHasItem(5510)){<br>
deleteItem(5510, 1);<br>
}<br>
if(playerHasItem(5512)){<br>
deleteItem(5512, 1);<br>
}<br>
if(playerHasItem(5514)){<br>
deleteItem(5514, 1);<br>
}<br>
if(playerHasItem(6570)){<br>
keep6570 = true;<br>
deleteItem(6570, 1);<br>
}<br>
for(int rr=0; rr&lt;playerItems.length; rr++) {<br>
try {<br>
if(playerItems[rr] &gt; 0 &amp;&amp; playerItems[rr] &lt; 11999) {<br>
//createItem(currentX,currentY,playerItems[rr]-1);<br>
replaceBarrows();<br>
<a href="//server.checkPlayerCapes.checkDrop" rel="nofollow noopener">//server.checkPlayerCapes.checkDrop</a>(this);<br>
ItemHandler.addItem(playerItems[rr]-1, absX, absY, playerItemsN[rr], KillerId, false);<br>
//createGroundItem(playerItems[rr]-1, absX, absY, playerItemsN[i]);<br>
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);<br>
}<br>
} catch(Exception e) {  }<br>
}<br>
try {</p>
<pre><code>	} catch(Exception e) {}
		ItemHandler.addItem(526, absX, absY, 1, KillerId, false);
	try {
	} catch(Exception e) {}
    if (itemKept1 &gt; 0)
        addItem(itemKept1, 1);
    if (itemKept2 &gt; 0)
        addItem(itemKept2, 1);
    if (itemKept3 &gt; 0)
        addItem(itemKept3, 1);
    if (itemKept4 &gt; 0)
        addItem(itemKept4, 1);
if (keep6570) {
    addItem(6570, 1);
    keep6570 = false;
}

		resetKeepItem();
		hitDiff = 0;	
		updateRequired = true; appearanceUpdateRequired = true;
	} 

public void keepItem1()
{
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
        if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
        {
            highest = value;
            itemKept1 = playerItems[i]-1;
            itemKept1Slot = i;
            itemSlot1 = true;
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
        if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
        {
            highest = value;
            itemKept1 = playerEquipment[i];
            itemKept1Slot = i;
            itemSlot1 = false;
        }
    }
}

public void keepItem2() {
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        if (itemKept1Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept2 = playerItems[i]-1;
                itemKept2Slot = i;
                itemSlot2 = true;
            }
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        if (itemKept1Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept2 = playerEquipment[i];
                itemKept2Slot = i;
                itemSlot2 = false;
            }
        }
    }
}

public void keepItem3()
{
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept3 = playerItems[i]-1;
                itemKept3Slot = i;
                itemSlot3 = true;
            }
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept3 = playerEquipment[i];
                itemKept3Slot = i;
                itemSlot3 = false;
            }
        }
    }
}

public void keepItem4()
{
    int highest = 0;
    for (int i = 0; i &lt; playerItems.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i &amp;&amp; itemKept3Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerItems[i]-1));
            if(value &gt; highest &amp;&amp; playerItems[i]-1 != -1)
            {
                highest = value;
                itemKept4 = playerItems[i]-1;
                itemKept4Slot = i;
                itemSlot4 = true;
            }
        }
    }
    for (int i = 0; i &lt; playerEquipment.length; i++)
    {
        if (itemKept1Slot != i &amp;&amp; itemKept2Slot != i &amp;&amp; itemKept3Slot != i)
        {
            int value = (int)Math.floor(GetItemValue(playerEquipment[i]));
            if(value &gt; highest &amp;&amp; playerEquipment[i] != -1)
            {
                highest = value;
                itemKept4 = playerEquipment[i];
                itemKept4Slot = i;
                itemSlot4 = false;
            }
        }
    }
}

public void keepItemHandle()
{
    keepItem1();
    keepItem2();
    keepItem3();
    if (itemKept1 &gt; 0)
    {
        if (itemSlot1)
            deleteItem(itemKept1, itemKept1Slot, 1);
        else if (!itemSlot1)
            deleteequiment(itemKept1, itemKept1Slot);
    }
    if (itemKept2 &gt; 0)
    {
        if (itemSlot2)
            deleteItem(itemKept2, itemKept2Slot, 1);
        else if (!itemSlot2)
            deleteequiment(itemKept2, itemKept2Slot);
    }
    if (itemKept3 &gt; 0)
    {
        if (itemSlot3)
            deleteItem(itemKept3, itemKept3Slot, 1);
        else if (!itemSlot3)
            deleteequiment(itemKept3, itemKept3Slot);
    }
}

public void applyProtectItemProt()
{
</code></pre>
<p>if(!isSkulled)<br>
keepItem4();<br>
if (itemKept4 &gt; 0)<br>
{<br>
if (itemSlot4)<br>
deleteItem(itemKept4, itemKept4Slot, 1);<br>
else if (!itemSlot4)<br>
deleteequiment(itemKept4, itemKept4Slot);<br>
}<br>
if(isSkulled)<br>
keepItem1();<br>
if (itemKept1 &gt; 0)<br>
{<br>
if (itemSlot1)<br>
deleteItem(itemKept1, itemKept1Slot, 1);<br>
else if (!itemSlot1)<br>
deleteequiment(itemKept1, itemKept1Slot);<br>
}<br>
}[/code][code]		if (deathStage == 1) {<br>
if (attacknpc &gt; 0) { // was killed by a npc -bakatool<br>
server.npcHandler.ResetAttackPlayer(attacknpc);<br>
}<br>
ResetAttack();<br>
ResetAttackNPC();</p>
<pre><code>		deathStage = 2;
		poisoned = false;
		poisonDmg = false;
		fighting = false;
		hits = 0;
		startAnimation(0x900);
		updateRequired = true;
		appearanceUpdateRequired = true;
		deathTimer = System.currentTimeMillis();
		currentHealth = playerLevel[playerHitpoints];
		playerLevel[0] = getLevelForXP(playerXP[0]);
		playerLevel[1] = getLevelForXP(playerXP[1]);
		playerLevel[2] = getLevelForXP(playerXP[2]);
		playerLevel[4] = getLevelForXP(playerXP[4]);
		playerLevel[5] = getLevelForXP(playerXP[5]);
		playerLevel[6] = getLevelForXP(playerXP[6]);
		sendFrame126("Prayer: "+playerLevel[5]+"/"+getLevelForXP(playerXP[5])+"", 687);
		resetfollowers();
		refreshSkills();
		killMyNPCs();
		resetKnight();
		skulledBy = "";
	}
	if (!IsInFightCave() &amp;&amp; !inFunPk() &amp;&amp; !isInPitGame() &amp;&amp; !isInPitRoom() &amp;&amp; playerRights != 2 &amp;&amp; playerRights != 3 &amp;&amp; action != 1 &amp;&amp; deathStage == 2 &amp;&amp;  System.currentTimeMillis() - deathTimer &gt;= 2500) {
	client killerz = (client) server.playerHandler.players[KillerId];
	youdied();
	if(!inDuel()){
	removeAllItems();
	}
	killerz.rating += 15;
	killerz.sM("You have defeated "+playerName+".");
	killerz.pkPoints += 5;
	killerz.pPrestige += 25;
	}
	if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; isInPitGame() &amp;&amp; !IsInFightCave() &amp;&amp; !inFunPk()) {
		toX = 2399;
		toY = 5171;
		inPitsGame = false;
		PlayerHandler.playersInPit -= 1;
		AtkPray = 0;
		StrPrayer = 0;
		DefPray = 0;
		RangePray = 0;
		MagePray = 0;
		PrayHeal = false;
		ProtItem = false;
		ProtMage = false;
		ProtRange = false;
		ProtMelee = false;
		Redemption = false;
		Retribution = false;
		Smite = false;
		Chivalry = false;
		Piety = false;
		isSkulled = false;
		lastSkull = 0;
		headIcon = 0;
		turnpray();
		heightLevel = 0;
		currentHealth = playerLevel[playerHitpoints];
		deathStage = 0;
		resetAnimation();
		frame1();
		prayOn = false;
		AntiTeleDelay = 0;
		EntangleDelay = 0;
		sM("Oh dear you have died!");
        		resetOtherAtk();
		followID = 0;
		followID2 = 0;
	}
	if (deathStage == 3) {
		client p = getClient(duel_with);
		teleblock = false;
		deathStage = 4;
		p.DuelVictory();
		ResetAttack();
		poisoned = false;
		poisonDmg = false;
		fighting = false;
		hits = 0;
		startAnimation(0x900);
		updateRequired = true;
		appearanceUpdateRequired = true;
		deathTimer = System.currentTimeMillis();
		currentHealth = playerLevel[playerHitpoints];
		playerLevel[0] = getLevelForXP(playerXP[0]);
		playerLevel[1] = getLevelForXP(playerXP[1]);
		playerLevel[2] = getLevelForXP(playerXP[2]);
		playerLevel[4] = getLevelForXP(playerXP[4]);
		playerLevel[5] = getLevelForXP(playerXP[5]);
		playerLevel[6] = getLevelForXP(playerXP[6]);
		sendFrame126("Prayer: "+playerLevel[5]+"/"+getLevelForXP(playerXP[5])+"", 687);
		resetfollowers();
		refreshSkills();
	}
	if (deathStage == 4 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500) {
		toX = 3377+misc.random(1);
		toY = 3273+misc.random(4);
		AtkPray = 0;
		StrPrayer = 0;
		DefPray = 0;
		RangePray = 0;
		MagePray = 0;
		PrayHeal = false;
		ProtItem = false;
		ProtMage = false;
		ProtRange = false;
		ProtMelee = false;
		Redemption = false;
		Retribution = false;
		Smite = false;
		Chivalry = false;
		Piety = false;
		isSkulled = false;
		lastSkull = 0;
		headIcon = 0;
		turnpray();
		heightLevel = 0;
		currentHealth = playerLevel[playerHitpoints];
		deathStage = 0;
		resetAnimation();
		frame1();
		prayOn = false;
		AntiTeleDelay = 0;
		EntangleDelay = 0;
		sM("You have lost the duel!");
        		resetOtherAtk();
		followID = 0;
		followID2 = 0;
	}
	if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; IsInFightCave()) {
	toX = 2439;
	toY = 5169;
		rating -= 25;
		AtkPray = 0;
		StrPrayer = 0;
		DefPray = 0;
		RangePray = 0;
		MagePray = 0;
		PrayHeal = false;
		ProtItem = false;
		ProtMage = false;
		ProtRange = false;
		ProtMelee = false;
		Redemption = false;
		Retribution = false;
		Smite = false;
		Chivalry = false;
		Piety = false;
		isSkulled = false;
		lastSkull = 0;
		headIcon = 0;
		turnpray();
		heightLevel = 0;
		currentHealth = playerLevel[playerHitpoints];
		deathStage = 0;
		resetAnimation();
		frame1();
		prayOn = false;
		sM("Oh dear you have died!");
        		resetOtherAtk();
	}
	if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; !IsInFightCave()) {
</code></pre>
<p>if (deathStage == 2 &amp;&amp; System.currentTimeMillis() - deathTimer &gt;= 2500 &amp;&amp; !isInPitGame() &amp;&amp; !IsInFightCave() &amp;&amp; inBountyHunter()) {<br>
client killerz = (client) server.playerHandler.players[KillerId];<br>
if(killerz.TargetName == playerName){<br>
killerz.sM(“Congratulations! You have defeated your bounty hunter Target”);<br>
killerz.GotTarget = false;<br>
killerz.TargetName = “null”;<br>
GotTarget = false;<br>
TargetName = “null”;<br>
youdied();<br>
}<br>
} else {<br>
killerz.sM(“You killed “+playerName+” but was’nt your target so you get no loot!”);<br>
killerz.BHLeaveTimer = 240;<br>
killerz.BHStuck = true;<br>
killerz.startBHLeave();<br>
killerz.GotTarget = false;<br>
killerz.TargetName = “null”;<br>
GotTarget = false;<br>
TargetName = “null”;<br>
for(int rr=0; rr&lt;playerItems.length; rr++) {<br>
deleteItem(playerItems[rr]-1, getItemSlot(playerItems[rr]-1), playerItemsN[rr]);<br>
}<br>
}<br>
if (itemKept1 &gt; 0) {<br>
addItem(itemKept1, 1);<br>
}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/items-kept-on-death/353950/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/items-kept-on-death/353950/1</link>
        <pubDate>Tue, 10 Aug 2010 06:07:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-353950-1</guid>
        <source url="https://forum.moparisthebest.com/t/items-kept-on-death/353950.rss">Items Kept on Death</source>
      </item>
  </channel>
</rss>
