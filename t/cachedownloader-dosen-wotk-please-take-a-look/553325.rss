<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CacheDownloader dosen wotk, please take a look</title>
    <link>https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325</link>
    <description>my  cachedownloade dosent work for some reason :/
So please help me fix it ?

it just gives me the error connecting in the client.

if i manually extract the cache it works fine/

CacheDownloader.java
[code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private Client client;

	private final int BUFFER = 1024;

	private final int VERSION = 1; // Version of cache
	private String cacheLink = &quot;https://www.dropbox.com/s/jbkpj818qxi0v3l/UltimaCache.zip&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(Client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/uid&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/uid&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/uid&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Unpacking..&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
} [/code]

SignLink.java
[code]package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink implements Runnable {

	public static void startpriv(InetAddress inetaddress) {
		threadliveid = (int) (Math.random() * 99999999D);
		if (active) {
			try {
				Thread.sleep(500L);
			} catch (Exception _ex) {
			}
			active = false;
		}
		socketreq = 0;
		threadreq = null;
		dnsreq = null;
		savereq = null;
		urlreq = null;
		socketip = inetaddress;
		Thread thread = new Thread(new signlink());
		thread.setDaemon(true);
		thread.start();
		while (!active)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
	}

   public void run() {
        active = true;
        String s = findcachedir();
        uid = getuid(s);
        try {
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++) {
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
			}
        } catch(Exception exception) {
            exception.printStackTrace();
        }
		for (int i = threadliveid; threadliveid == i;) {
			if (socketreq != 0) {
				try {
					socket = new Socket(socketip, socketreq);
				} catch (Exception _ex) {
					socket = null;
				}
				socketreq = 0;
			} else if (threadreq != null) {
				Thread thread = new Thread(threadreq);
				thread.setDaemon(true);
				thread.start();
				thread.setPriority(threadreqpri);
				threadreq = null;
			} else if (dnsreq != null) {
				try {
					dns = InetAddress.getByName(dnsreq).getHostName();
				} catch (Exception _ex) {
					dns = &quot;unknown&quot;;
				}
				dnsreq = null;
			} else if (savereq != null) {
				if (savebuf != null)
					try {
						FileOutputStream fileoutputstream = new FileOutputStream(
								s + savereq);
						fileoutputstream.write(savebuf, 0, savelen);
						fileoutputstream.close();
					} catch (Exception _ex) {
					}
				if (waveplay) {
					waveplay = false;
				}
				if (midiplay) {
					midi = s + savereq;
					midiplay = false;
				}
				savereq = null;
			} else if (urlreq != null) {
				try {
					System.out.println(&quot;urlstream&quot;);
					urlstream = new DataInputStream((new URL(mainapp
							.getCodeBase(), urlreq)).openStream());
				} catch (Exception _ex) {
					urlstream = null;
				}
				urlreq = null;
			}
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}
		}

	}

	public static String findcachedir() {
        String as[] = {&quot;C:/&quot;};
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = &quot;UltimaCache&quot;;
        for(int i = 0; i &lt; as.length; i++)
            try {
                String s1 = as[i];
                if(s1.length() &gt; 0) {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }
        return null;
    }

	private static int getuid(String s) {
		try {
			File file = new File(s + &quot;cacheVersion.dat&quot;);
			if (!file.exists() || file.length() &lt; 4L) {
				DataOutputStream dataoutputstream = new DataOutputStream(
						new FileOutputStream(s + &quot;cacheVersion.dat&quot;));
				dataoutputstream.writeInt((int) (Math.random() * 99999999D));
				dataoutputstream.close();
			}
		} catch (Exception _ex) {
		}
		try {
			DataInputStream datainputstream = new DataInputStream(
					new FileInputStream(s + &quot;cacheVersion.dat&quot;));
			int i = datainputstream.readInt();
			datainputstream.close();
			return i + 1;
		} catch (Exception _ex) {
			return 0;
		}
	}

	public static synchronized Socket opensocket(int i) throws IOException {
		for (socketreq = i; socketreq != 0;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (socket == null)
			throw new IOException(&quot;could not open socket&quot;);
		else
			return socket;
	}

	public static synchronized DataInputStream openurl(String s)
			throws IOException {
		for (urlreq = s; urlreq != null;)
			try {
				Thread.sleep(50L);
			} catch (Exception _ex) {
			}

		if (urlstream == null)
			throw new IOException(&quot;could not open: &quot; + s);
		else
			return urlstream;
	}

	public static synchronized void dnslookup(String s) {
		dns = s;
		dnsreq = s;
	}

	public static synchronized void startthread(Runnable runnable, int i) {
		threadreqpri = i;
		threadreq = runnable;
	}

	public static synchronized boolean wavesave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return false;
		if (savereq != null) {
			return false;
		} else {
			wavepos = (wavepos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized boolean wavereplay() {
		if (savereq != null) {
			return false;
		} else {
			savebuf = null;
			waveplay = true;
			savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
			return true;
		}
	}

	public static synchronized void midisave(byte abyte0[], int i) {
		if (i &gt; 0x1e8480)
			return;
		if (savereq != null) {
		} else {
			midipos = (midipos + 1) % 5;
			savelen = i;
			savebuf = abyte0;
			midiplay = true;
			savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
		}
	}

	public static void reporterror(String s) {
		System.out.println(&quot;Error: &quot; + s);
	}

	private signlink() {
	}

	public static final int clientversion = 317;
	public static int uid;
	public static int storeid = 32;
	public static RandomAccessFile cache_dat = null;
	public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
	public static boolean sunjava;
	public static Applet mainapp = null;
	private static boolean active;
	private static int threadliveid;
	private static InetAddress socketip;
	private static int socketreq;
	private static Socket socket = null;
	private static int threadreqpri = 1;
	private static Runnable threadreq = null;
	private static String dnsreq = null;
	public static String dns = null;
	private static String urlreq = null;
	private static DataInputStream urlstream = null;
	private static int savelen;
	private static String savereq = null;
	private static byte[] savebuf = null;
	private static boolean midiplay;
	private static int midipos;
	public static String midi = null;
	public static int midivol;
	public static int midifade;
	private static boolean waveplay;
	private static int wavepos;
	public static int wavevol;
	public static boolean reporterror = true;
	public static String errorname = &quot;&quot;;
}[/code]</description>
    
    <lastBuildDate>Fri, 18 Sep 2015 12:27:00 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CacheDownloader dosen wotk, please take a look</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>Cache link doesn’t look like a direct download.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325/2</link>
        <pubDate>Fri, 18 Sep 2015 12:27:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553325-2</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325.rss">CacheDownloader dosen wotk, please take a look</source>
      </item>
      <item>
        <title>CacheDownloader dosen wotk, please take a look</title>
        <dc:creator><![CDATA[@Quintorz Quintorz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/quintorz">@Quintorz</a> wrote:</p>
          <blockquote>
              <p>my  cachedownloade dosent work for some reason <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"><br>
So please help me fix it ?</p>
<p>it just gives me the error connecting in the client.</p>
<p>if i manually extract the cache it works fine/</p>
<p>CacheDownloader.java</p>
<p>[code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private Client client;

private final int BUFFER = 1024;

private final int VERSION = 1; // Version of cache
private String cacheLink = "https://www.dropbox.com/s/jbkpj818qxi0v3l/UltimaCache.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(Client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	//System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	//System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/uid" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Loading new Updates....");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		//System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/uid" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteZIP(getArchivedName());
	} else {
		if(!version.exists()) {
			//drawLoadingText("~ First Time Installation, Only Once! ~");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/uid" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%...");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Unpacking..");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		//System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			//System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");

}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>} [/code]</p>
<p>SignLink.java</p>
<p>[code]package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink implements Runnable {</p>
<pre><code>public static void startpriv(InetAddress inetaddress) {
	threadliveid = (int) (Math.random() * 99999999D);
	if (active) {
		try {
			Thread.sleep(500L);
		} catch (Exception _ex) {
		}
		active = false;
	}
	socketreq = 0;
	threadreq = null;
	dnsreq = null;
	savereq = null;
	urlreq = null;
	socketip = inetaddress;
	Thread thread = new Thread(new signlink());
	thread.setDaemon(true);
	thread.start();
	while (!active)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}
}
</code></pre>
<p>public void run() {<br>
active = true;<br>
String s = findcachedir();<br>
uid = getuid(s);<br>
try {<br>
cache_dat = new RandomAccessFile(s + “main_file_cache.dat”, “rw”);<br>
for(int j = 0; j &lt; 5; j++) {<br>
cache_idx[j] = new RandomAccessFile(s + “main_file_cache.idx” + j, “rw”);<br>
}<br>
} catch(Exception exception) {<br>
exception.printStackTrace();<br>
}<br>
for (int i = threadliveid; threadliveid == i;) {<br>
if (socketreq != 0) {<br>
try {<br>
socket = new Socket(socketip, socketreq);<br>
} catch (Exception _ex) {<br>
socket = null;<br>
}<br>
socketreq = 0;<br>
} else if (threadreq != null) {<br>
Thread thread = new Thread(threadreq);<br>
thread.setDaemon(true);<br>
thread.start();<br>
thread.setPriority(threadreqpri);<br>
threadreq = null;<br>
} else if (dnsreq != null) {<br>
try {<br>
dns = InetAddress.getByName(dnsreq).getHostName();<br>
} catch (Exception _ex) {<br>
dns = “unknown”;<br>
}<br>
dnsreq = null;<br>
} else if (savereq != null) {<br>
if (savebuf != null)<br>
try {<br>
FileOutputStream fileoutputstream = new FileOutputStream(<br>
s + savereq);<br>
fileoutputstream.write(savebuf, 0, savelen);<br>
fileoutputstream.close();<br>
} catch (Exception _ex) {<br>
}<br>
if (waveplay) {<br>
waveplay = false;<br>
}<br>
if (midiplay) {<br>
midi = s + savereq;<br>
midiplay = false;<br>
}<br>
savereq = null;<br>
} else if (urlreq != null) {<br>
try {<br>
System.out.println(“urlstream”);<br>
urlstream = new DataInputStream((new URL(mainapp<br>
.getCodeBase(), urlreq)).openStream());<br>
} catch (Exception _ex) {<br>
urlstream = null;<br>
}<br>
urlreq = null;<br>
}<br>
try {<br>
Thread.sleep(50L);<br>
} catch (Exception _ex) {<br>
}<br>
}</p>
<pre><code>}

public static String findcachedir() {
    String as[] = {"C:/"};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = "UltimaCache";
    for(int i = 0; i &lt; as.length; i++)
        try {
            String s1 = as[i];
            if(s1.length() &gt; 0) {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + "/";
        }
        catch(Exception _ex) { }
    return null;
}

private static int getuid(String s) {
	try {
		File file = new File(s + "cacheVersion.dat");
		if (!file.exists() || file.length() &lt; 4L) {
			DataOutputStream dataoutputstream = new DataOutputStream(
					new FileOutputStream(s + "cacheVersion.dat"));
			dataoutputstream.writeInt((int) (Math.random() * 99999999D));
			dataoutputstream.close();
		}
	} catch (Exception _ex) {
	}
	try {
		DataInputStream datainputstream = new DataInputStream(
				new FileInputStream(s + "cacheVersion.dat"));
		int i = datainputstream.readInt();
		datainputstream.close();
		return i + 1;
	} catch (Exception _ex) {
		return 0;
	}
}

public static synchronized Socket opensocket(int i) throws IOException {
	for (socketreq = i; socketreq != 0;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (socket == null)
		throw new IOException("could not open socket");
	else
		return socket;
}

public static synchronized DataInputStream openurl(String s)
		throws IOException {
	for (urlreq = s; urlreq != null;)
		try {
			Thread.sleep(50L);
		} catch (Exception _ex) {
		}

	if (urlstream == null)
		throw new IOException("could not open: " + s);
	else
		return urlstream;
}

public static synchronized void dnslookup(String s) {
	dns = s;
	dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i) {
	threadreqpri = i;
	threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return false;
	if (savereq != null) {
		return false;
	} else {
		wavepos = (wavepos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized boolean wavereplay() {
	if (savereq != null) {
		return false;
	} else {
		savebuf = null;
		waveplay = true;
		savereq = "sound" + wavepos + ".wav";
		return true;
	}
}

public static synchronized void midisave(byte abyte0[], int i) {
	if (i &gt; 0x1e8480)
		return;
	if (savereq != null) {
	} else {
		midipos = (midipos + 1) % 5;
		savelen = i;
		savebuf = abyte0;
		midiplay = true;
		savereq = "jingle" + midipos + ".mid";
	}
}

public static void reporterror(String s) {
	System.out.println("Error: " + s);
}

private signlink() {
}

public static final int clientversion = 317;
public static int uid;
public static int storeid = 32;
public static RandomAccessFile cache_dat = null;
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
public static boolean sunjava;
public static Applet mainapp = null;
private static boolean active;
private static int threadliveid;
private static InetAddress socketip;
private static int socketreq;
private static Socket socket = null;
private static int threadreqpri = 1;
private static Runnable threadreq = null;
private static String dnsreq = null;
public static String dns = null;
private static String urlreq = null;
private static DataInputStream urlstream = null;
private static int savelen;
private static String savereq = null;
private static byte[] savebuf = null;
private static boolean midiplay;
private static int midipos;
public static String midi = null;
public static int midivol;
public static int midifade;
private static boolean waveplay;
private static int wavepos;
public static int wavevol;
public static boolean reporterror = true;
public static String errorname = "";
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325/1</link>
        <pubDate>Fri, 18 Sep 2015 00:13:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553325-1</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-dosen-wotk-please-take-a-look/553325.rss">CacheDownloader dosen wotk, please take a look</source>
      </item>
  </channel>
</rss>
