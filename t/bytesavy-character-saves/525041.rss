<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>byteSavy character saves</title>
    <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041</link>
    <description>Uses least space possible(But is in 3 files)
One holds basic information:
Name,pass,height,rights,position(x,y)
Stats, first byte: # of stats
rest is the stats.
Items:
Contains
Equipment
Bank
Inventory

refer to the code to see which order they are in, too lazy to look :P

[code]
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;


/**
 *
 * @author Matzie
 */
public class SaveController {

    public static void SaveCompressor(Client c) {
        File saveDir = new File(&quot;./characters/&quot; + c.playerName + &quot;/&quot;);
        File stats = new File(saveDir.getPath() + &quot;/stats.dat&quot;),
                items = new File(saveDir.getPath() + &quot;/items.dat&quot;),
                basic = new File(saveDir.getPath() + &quot;/basic.txt&quot;);
        if (!saveDir.exists()) {
            if (saveDir.mkdirs()) {
                c.sendMessage(&quot;Save Created!&quot;);
                try {
                    if (!items.exists())
                        items.createNewFile();
                    if (!stats.exists())
                        stats.createNewFile();
                    if (!basic.exists())
                        basic.createNewFile();
                } catch (java.io.IOException ioe) {
                    System.out.println(&quot;Error making files&quot;);
                }
            } else {
                c.sendMessage(&quot;Save found!&quot;);
            }
        }
        if (saveDir.exists()) {
            try {
                FileOutputStream fos = new FileOutputStream(basic);
                Stream s = new Stream(new byte[5000]);
                s.writeString(&quot;playerName = &quot; + c.playerName + (char)13);
                s.writeString(&quot;playerPass = &quot; + c.playerPass + (char)13);
                s.writeString(&quot;playerRights = &quot; + c.playerRights + (char)13);
                s.writeString(&quot;playerX = &quot; + c.absX + (char)13);
                s.writeString(&quot;playerY = &quot; + c.absY + (char)13);
                s.writeString(&quot;playerHeight = &quot; + c.height + (char)13);
                fos.write(s.buffer, 0, s.currentOffset + (char)13);
                fos.close();
                fos = new FileOutputStream(stats);
                s.currentOffset = 0;
                s = new Stream(new byte[1000]);
                s.currentOffset = 0;
                s.writeByte(c.playerLVL.length);
                for (int i = 0; i &lt; c.playerLVL.length; i++) {
                    s.writeByte(c.playerLVL[i]);
                    s.writeDWord(c.playerXP[i]);
                }
                fos.write(s.buffer, 0, s.currentOffset);
                fos.close();
                fos = new FileOutputStream(items);
                s.currentOffset = 0;
                s = new Stream(new byte[10000]);
                s.writeByte(c.inventory.size());//inventory first
                for (int i = 0; i &lt; c.inventory.size(); i++) {
                    s.writeWord(c.inventory.items[i]);
                    s.writeDWord(c.inventory.amounts[i]);
                }
                s.writeWord(c.bank.size());//then bank
                for (int i = 0; i &lt; c.bank.size(); i++) {
                    s.writeWord(c.bank.items[i]);
                    s.writeDWord(c.bank.amounts[i]);
                }
                s.writeByte(c.equipment.length);
                for (int i = 0; i &lt; c.equipment.length; i++) {
                    s.writeWord(c.equipment[i]);
                    s.writeDWord(c.equipmentN[i]);
                }
                fos.write(s.buffer, 0, s.currentOffset);
                fos.close();
            } catch (java.io.IOException ioe) {
                c.sendMessage(&quot;Could not write a save file.&quot;);
            }

        }
    }

    public static void SaveDecompressor(Client c) {
        FileInputStream fis = null;
        Stream inStr = null;
        File saveDir = new File(&quot;./characters/&quot; + c.playerName + &quot;/&quot;);
        if (saveDir.exists()) {
            System.out.println(&quot;loading save for&quot; + c.playerName);
            File basic = new File(&quot;./characters/&quot; + c.playerName + &quot;/basic.txt&quot;);
            if (basic.exists()) {
                System.out.println(&quot;loading basic for &quot; + c.playerName);
                try {
                    fis = new FileInputStream(basic);
                    inStr = new Stream(new byte[(int) basic.length()]);
                    fis.read(inStr.buffer);
                    while (inStr.currentOffset &lt; inStr.buffer.length) {
                        String line = inStr.readString().replaceAll(new String(new byte[]{13}), &quot;&quot;);
                        String[] lineToken = line.split(&quot; = &quot;);
                        if (lineToken[0].equalsIgnoreCase(&quot;playerName&quot;)) {
                            if (!c.playerName.equalsIgnoreCase(lineToken[1])) {
                                throw new Exception(&quot;Invalid username&quot;);
                            }
                        } else if (lineToken[0].equalsIgnoreCase(&quot;playerPass&quot;)) {
                            if (!c.playerPass.equalsIgnoreCase(lineToken[1])) {
                                throw new Exception(&quot;Invalid password&quot;);
                            }
                        } else if (lineToken[0].equalsIgnoreCase(&quot;playerRights&quot;)) {
                            c.playerRights = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase(&quot;playerX&quot;)) {
                            c.teleportToX = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase(&quot;playerY&quot;)) {
                            c.teleportToY = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase(&quot;playerHeight&quot;)) {
                            c.height = Integer.parseInt(lineToken[1]);
                        }

                    }
                } catch (java.io.FileNotFoundException fnfe) {
                    System.out.println(&quot;Error loading basic&quot;);
                } catch (java.io.IOException ioe) {
                    System.out.println(&quot;Error reading basic&quot;);
                } catch (Exception e) {

                    System.out.println(e.toString());
                    String err = e.toString();
                    if (err.contains(&quot;password&quot;) || err.contains(&quot;username&quot;)) {
                        c.returnCode = 3;
                    }
                    return;
                } finally {
                    try {
                        if (fis != null) {
                            fis.close();
                        }
                    } catch (java.io.IOException ioe) {
                    }
                }
                if (c.returnCode != 2) {
                    System.out.println(&quot;returnCode&quot;+c.returnCode);
                    return;
                }
                File stats = new File(&quot;./characters/&quot; + c.playerName + &quot;/stats.dat&quot;);
                try {
                    if (stats.exists()) {
                                                fis = new FileInputStream(stats);
                        inStr = new Stream(new byte[(int) stats.length()]);
                        fis.read(inStr.buffer);
                        int numStats = inStr.readUnsignedByte();
                        if (numStats != c.playerLVL.length) {
                            throw new Exception(&quot;Invalid stats length: found-&quot; + numStats + &quot; expected-&quot; + c.playerLVL.length);
                        }
                        for (int i = 0; i &lt; numStats; i++) {
                            c.playerLVL[i] = inStr.readUnsignedByte();
                            c.playerXP[i] = inStr.readDWord();
                        }
                    } else {
                        System.out.println(&quot;ERROR LOADING STATS FOR:&quot;+c.playerName);

                    }
                } catch (java.io.FileNotFoundException fnfe) {
                    System.out.println(&quot;Error loading stats file&quot;);

                } catch (java.io.IOException ioe) {
                    System.out.println(&quot;Error reading stats file&quot;);
                } catch (Exception e) {
                    System.out.println(e.toString());
                } finally {
                    try {
                        if (fis != null) {
                            fis.close();
                        }
                    } catch (java.io.IOException ioe) {
                    }

                }
                File items = new File(&quot;./characters/&quot; + c.playerName + &quot;/items.dat&quot;);
                if (items.exists()) {
                    try {
                        fis = new FileInputStream(items);
                        inStr = new Stream(new byte[(int) items.length()]);
                        fis.read(inStr.buffer);
                        int length = inStr.readUnsignedByte();
                        if (c.inventory.size() != length) {
                            throw new Exception(&quot;Error in inventory length&quot; + length + &quot;:&quot; + c.inventory.size());
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.inventory.items[i] = inStr.readSignedWord();
                            c.inventory.amounts[i] = inStr.readDWord();
                        }
                        length = inStr.readUnsignedWord();
                        if (length != c.bank.size()) {
                            throw new Exception(&quot;Error in bank length&quot; + length + &quot;:&quot; + c.bank.size());
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.bank.items[i] = inStr.readSignedWord();
                            c.bank.amounts[i] = inStr.readDWord();
                        }
                        length = inStr.readUnsignedByte();
                        if (length != c.equipment.length) {
                            throw new Exception(&quot;Error in equipment length&quot; + length + &quot;:&quot; + c.equipment.length);
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.equipment[i] = inStr.readSignedWord();
                            c.equipmentN[i] = inStr.readDWord();
                        }
                    } catch (java.io.FileNotFoundException fnfe) {
                        System.out.println(&quot;Error loading item file&quot;);
                    } catch (java.io.IOException ioe) {
                        System.out.println(&quot;Error reading item file&quot;);
                    } catch (Exception e) {
                        System.out.println(e.toString());
                    } finally {
                        try {
                            if (fis != null) {
                                fis.close();
                            }
                        } catch (java.io.IOException ioe) {
                        }
                    }
                } else {
                    System.out.println(&quot;items not found for player:&quot; + c.playerName);
                }
            } else {
                c.setDefaults();
                SaveCompressor(c);
            }


        } else {
            c.setDefaults();
            SaveCompressor(c);//saves upon login.
            //c.returnCode = 13;//Must register account or you cannot login. for my client ;)
        }

    }
}
[/code]

I wrote my own reader for the files, so i can view the Inventory,bank and equipment, compare their base values and order them accordingly ;)
Brings the &quot;Likely duped&quot; items to the top of the list and i will soon add a player iterator to do the same for all players. (Currently nothing is added in my server, finally got my npchandler working :-D )</description>
    
    <lastBuildDate>Sat, 27 Jul 2013 18:44:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>[quote=“HcoJustin, post:6, topic:525041”]<code>                s.writeString("playerName = " + c.playerName + (char)13);
                s.writeString("playerPass = " + c.playerPass + (char)13);
                s.writeString("playerRights = " + c.playerRights + (char)13);
                s.writeString("playerX = " + c.absX + (char)13);
                s.writeString("playerY = " + c.absY + (char)13);
                s.writeString("playerHeight = " + c.height + (char)13);</code><br>
Not saving any space here…[/quote]<br>
I know that, i did that becase there are special people on this server that wouldnt want to open an editor every time they wanted to change player rights pass or pos. And majority of the space is taken by the "character-bank * = "<br>
Not to mention, It would be simple to convert yourself if you so wished it to be space saving. I made it as noob-friendly as possible. The format is simple enough that anyone can modify the format as well, probably more simply than the original save handler.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/7</link>
        <pubDate>Sat, 27 Jul 2013 18:44:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-7</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p><code>                s.writeString("playerName = " + c.playerName + (char)13);
                s.writeString("playerPass = " + c.playerPass + (char)13);
                s.writeString("playerRights = " + c.playerRights + (char)13);
                s.writeString("playerX = " + c.absX + (char)13);
                s.writeString("playerY = " + c.absY + (char)13);
                s.writeString("playerHeight = " + c.height + (char)13);</code><br>
Not saving any space here…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/6</link>
        <pubDate>Thu, 18 Jul 2013 20:34:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-6</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Yes, ‘codec’</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/5</link>
        <pubDate>Thu, 18 Jul 2013 20:13:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-5</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@Yesteryear Yesteryear]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yesteryear">@Yesteryear</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="3" data-topic="525041">
<div class="title">
<div class="quote-controls"></div>
 AtomicInt_:</div>
<blockquote>
<p>character codec</p>
</blockquote>
</aside>
<p>‘codec’</p>
<p>also, why does nobody save characters as binary or in a database?</p>
<p>nonetheless, good contribution. maybe some people will use this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/4</link>
        <pubDate>Thu, 18 Jul 2013 20:12:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-4</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>character codec</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/3</link>
        <pubDate>Thu, 18 Jul 2013 20:06:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-3</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@strucker Strucker]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/strucker">@strucker</a> wrote:</p>
          <blockquote>
              <p>I apologize but may i ask what is this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/2</link>
        <pubDate>Thu, 18 Jul 2013 19:24:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-2</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
      <item>
        <title>byteSavy character saves</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>Uses least space possible(But is in 3 files)<br>
One holds basic information:<br>
Name,pass,height,rights,position(x,y)<br>
Stats, first byte: # of stats<br>
rest is the stats.<br>
Items:<br>
Contains<br>
Equipment<br>
Bank<br>
Inventory</p>
<p>refer to the code to see which order they are in, too lazy to look <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<pre><code class="lang-auto">import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;


/**
 *
 * @author Matzie
 */
public class SaveController {

    public static void SaveCompressor(Client c) {
        File saveDir = new File("./characters/" + c.playerName + "/");
        File stats = new File(saveDir.getPath() + "/stats.dat"),
                items = new File(saveDir.getPath() + "/items.dat"),
                basic = new File(saveDir.getPath() + "/basic.txt");
        if (!saveDir.exists()) {
            if (saveDir.mkdirs()) {
                c.sendMessage("Save Created!");
                try {
                    if (!items.exists())
                        items.createNewFile();
                    if (!stats.exists())
                        stats.createNewFile();
                    if (!basic.exists())
                        basic.createNewFile();
                } catch (java.io.IOException ioe) {
                    System.out.println("Error making files");
                }
            } else {
                c.sendMessage("Save found!");
            }
        }
        if (saveDir.exists()) {
            try {
                FileOutputStream fos = new FileOutputStream(basic);
                Stream s = new Stream(new byte[5000]);
                s.writeString("playerName = " + c.playerName + (char)13);
                s.writeString("playerPass = " + c.playerPass + (char)13);
                s.writeString("playerRights = " + c.playerRights + (char)13);
                s.writeString("playerX = " + c.absX + (char)13);
                s.writeString("playerY = " + c.absY + (char)13);
                s.writeString("playerHeight = " + c.height + (char)13);
                fos.write(s.buffer, 0, s.currentOffset + (char)13);
                fos.close();
                fos = new FileOutputStream(stats);
                s.currentOffset = 0;
                s = new Stream(new byte[1000]);
                s.currentOffset = 0;
                s.writeByte(c.playerLVL.length);
                for (int i = 0; i &lt; c.playerLVL.length; i++) {
                    s.writeByte(c.playerLVL[i]);
                    s.writeDWord(c.playerXP[i]);
                }
                fos.write(s.buffer, 0, s.currentOffset);
                fos.close();
                fos = new FileOutputStream(items);
                s.currentOffset = 0;
                s = new Stream(new byte[10000]);
                s.writeByte(c.inventory.size());//inventory first
                for (int i = 0; i &lt; c.inventory.size(); i++) {
                    s.writeWord(c.inventory.items[i]);
                    s.writeDWord(c.inventory.amounts[i]);
                }
                s.writeWord(c.bank.size());//then bank
                for (int i = 0; i &lt; c.bank.size(); i++) {
                    s.writeWord(c.bank.items[i]);
                    s.writeDWord(c.bank.amounts[i]);
                }
                s.writeByte(c.equipment.length);
                for (int i = 0; i &lt; c.equipment.length; i++) {
                    s.writeWord(c.equipment[i]);
                    s.writeDWord(c.equipmentN[i]);
                }
                fos.write(s.buffer, 0, s.currentOffset);
                fos.close();
            } catch (java.io.IOException ioe) {
                c.sendMessage("Could not write a save file.");
            }

        }
    }

    public static void SaveDecompressor(Client c) {
        FileInputStream fis = null;
        Stream inStr = null;
        File saveDir = new File("./characters/" + c.playerName + "/");
        if (saveDir.exists()) {
            System.out.println("loading save for" + c.playerName);
            File basic = new File("./characters/" + c.playerName + "/basic.txt");
            if (basic.exists()) {
                System.out.println("loading basic for " + c.playerName);
                try {
                    fis = new FileInputStream(basic);
                    inStr = new Stream(new byte[(int) basic.length()]);
                    fis.read(inStr.buffer);
                    while (inStr.currentOffset &lt; inStr.buffer.length) {
                        String line = inStr.readString().replaceAll(new String(new byte[]{13}), "");
                        String[] lineToken = line.split(" = ");
                        if (lineToken[0].equalsIgnoreCase("playerName")) {
                            if (!c.playerName.equalsIgnoreCase(lineToken[1])) {
                                throw new Exception("Invalid username");
                            }
                        } else if (lineToken[0].equalsIgnoreCase("playerPass")) {
                            if (!c.playerPass.equalsIgnoreCase(lineToken[1])) {
                                throw new Exception("Invalid password");
                            }
                        } else if (lineToken[0].equalsIgnoreCase("playerRights")) {
                            c.playerRights = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase("playerX")) {
                            c.teleportToX = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase("playerY")) {
                            c.teleportToY = Integer.parseInt(lineToken[1]);
                        } else if (lineToken[0].equalsIgnoreCase("playerHeight")) {
                            c.height = Integer.parseInt(lineToken[1]);
                        }

                    }
                } catch (java.io.FileNotFoundException fnfe) {
                    System.out.println("Error loading basic");
                } catch (java.io.IOException ioe) {
                    System.out.println("Error reading basic");
                } catch (Exception e) {

                    System.out.println(e.toString());
                    String err = e.toString();
                    if (err.contains("password") || err.contains("username")) {
                        c.returnCode = 3;
                    }
                    return;
                } finally {
                    try {
                        if (fis != null) {
                            fis.close();
                        }
                    } catch (java.io.IOException ioe) {
                    }
                }
                if (c.returnCode != 2) {
                    System.out.println("returnCode"+c.returnCode);
                    return;
                }
                File stats = new File("./characters/" + c.playerName + "/stats.dat");
                try {
                    if (stats.exists()) {
                                                fis = new FileInputStream(stats);
                        inStr = new Stream(new byte[(int) stats.length()]);
                        fis.read(inStr.buffer);
                        int numStats = inStr.readUnsignedByte();
                        if (numStats != c.playerLVL.length) {
                            throw new Exception("Invalid stats length: found-" + numStats + " expected-" + c.playerLVL.length);
                        }
                        for (int i = 0; i &lt; numStats; i++) {
                            c.playerLVL[i] = inStr.readUnsignedByte();
                            c.playerXP[i] = inStr.readDWord();
                        }
                    } else {
                        System.out.println("ERROR LOADING STATS FOR:"+c.playerName);

                    }
                } catch (java.io.FileNotFoundException fnfe) {
                    System.out.println("Error loading stats file");

                } catch (java.io.IOException ioe) {
                    System.out.println("Error reading stats file");
                } catch (Exception e) {
                    System.out.println(e.toString());
                } finally {
                    try {
                        if (fis != null) {
                            fis.close();
                        }
                    } catch (java.io.IOException ioe) {
                    }

                }
                File items = new File("./characters/" + c.playerName + "/items.dat");
                if (items.exists()) {
                    try {
                        fis = new FileInputStream(items);
                        inStr = new Stream(new byte[(int) items.length()]);
                        fis.read(inStr.buffer);
                        int length = inStr.readUnsignedByte();
                        if (c.inventory.size() != length) {
                            throw new Exception("Error in inventory length" + length + ":" + c.inventory.size());
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.inventory.items[i] = inStr.readSignedWord();
                            c.inventory.amounts[i] = inStr.readDWord();
                        }
                        length = inStr.readUnsignedWord();
                        if (length != c.bank.size()) {
                            throw new Exception("Error in bank length" + length + ":" + c.bank.size());
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.bank.items[i] = inStr.readSignedWord();
                            c.bank.amounts[i] = inStr.readDWord();
                        }
                        length = inStr.readUnsignedByte();
                        if (length != c.equipment.length) {
                            throw new Exception("Error in equipment length" + length + ":" + c.equipment.length);
                        }
                        for (int i = 0; i &lt; length; i++) {
                            c.equipment[i] = inStr.readSignedWord();
                            c.equipmentN[i] = inStr.readDWord();
                        }
                    } catch (java.io.FileNotFoundException fnfe) {
                        System.out.println("Error loading item file");
                    } catch (java.io.IOException ioe) {
                        System.out.println("Error reading item file");
                    } catch (Exception e) {
                        System.out.println(e.toString());
                    } finally {
                        try {
                            if (fis != null) {
                                fis.close();
                            }
                        } catch (java.io.IOException ioe) {
                        }
                    }
                } else {
                    System.out.println("items not found for player:" + c.playerName);
                }
            } else {
                c.setDefaults();
                SaveCompressor(c);
            }


        } else {
            c.setDefaults();
            SaveCompressor(c);//saves upon login.
            //c.returnCode = 13;//Must register account or you cannot login. for my client ;)
        }

    }
}</code></pre>
<p>I wrote my own reader for the files, so i can view the Inventory,bank and equipment, compare their base values and order them accordingly <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"><br>
Brings the “Likely duped” items to the top of the list and i will soon add a player iterator to do the same for all players. (Currently nothing is added in my server, finally got my npchandler working <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"> )</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytesavy-character-saves/525041/1</link>
        <pubDate>Mon, 15 Jul 2013 12:13:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-525041-1</guid>
        <source url="https://forum.moparisthebest.com/t/bytesavy-character-saves/525041.rss">byteSavy character saves</source>
      </item>
  </channel>
</rss>
