<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;Your keyboard doesn&#39;t like the compiler I see...&quot;</title>
    <link>https://forum.moparisthebest.com/t/your-keyboard-doesnt-like-the-compiler-i-see/393595</link>
    <description>Well, someone told me after creating this for my college assignment that &quot;Your keyboard doesn&#39;t like the compiler I see...&quot; over at a different site, basically my code is written terrible and shouldn&#39;t exist. 
There are three other modules created in order to run this, although this was the only one he mentioned to have &quot;Bad code&quot;. 
[code=python]import wx
import os
import wx.richtext
from wx.lib.mixins.listctrl import ListCtrlAutoWidthMixin
import sys
from decimal import *
from wx.lib.masked import NumCtrl
import addmaincat
import addsubcat
import additem

class AutoWidthListCtrl(wx.ListCtrl, ListCtrlAutoWidthMixin):
    def __init__(self, parent):
        
        wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT)
        ListCtrlAutoWidthMixin.__init__(self)
        

class Panel(wx.Panel):

    def __init__(self, parent):
        
        wx.Panel.__init__(self, parent)


class DeliveryWindow(wx.Frame):

    def __init__(self, parent, id):
        wx.Frame.__init__(self, parent, id, &#39;Quick Silver&#39;, size = (500, 500))

        self.mainfolder = &quot;F:\QuickSilver&quot;

        
        myothercontext = Context(prec=9, rounding=None)
        setcontext(myothercontext)
        
        self.infoSelectPanl = wx.Panel(self)
        self.informationPnl = wx.Panel(self)
        self.orderSpecifics = wx.Panel(self)
        self.orderspecchang = wx.Panel(self.orderSpecifics, style = wx.SUNKEN_BORDER)
        self.selectionbuttn = wx.Panel(self)
        self.subselectpanel = wx.Panel(self)
        self.selectionPanel = wx.Panel(self, style = wx.SUNKEN_BORDER)

        self.esseninf = wx.Button(self.infoSelectPanl, label = &quot;Essential\nInformation&quot;)
        self.adresinf = wx.Button(self.infoSelectPanl, label = &quot;Address\nHistory&quot;)
        self.histoinf = wx.Button(self.infoSelectPanl, label = &quot;Order\nHistory&quot;)

        self.infbtnsz = wx.BoxSizer(wx.VERTICAL)
        self.infbtnsz.Add(self.esseninf, proportion = 1, flag = wx.EXPAND)
        self.infbtnsz.Add(self.adresinf, proportion = 1, flag = wx.EXPAND)
        self.infbtnsz.Add(self.histoinf, proportion = 1, flag = wx.EXPAND)

        self.rich = wx.richtext.RichTextCtrl(self.informationPnl, wx.ID_ANY, value=&quot;&quot;,
                                             style = wx.TE_READONLY)
        self.rich.BeginBold()
        self.rich.BeginFontSize(30)
        self.rich.WriteText(&quot;Customer Information&quot;)
        self.rich.EndFontSize()
        self.rich.EndBold()
        self.rich.BeginFontSize(12)
        self.rich.WriteText(&quot;\n\nPhone number: &quot;)
        self.rich.WriteText(&quot;\n\nName: &quot;)
        self.rich.WriteText(&quot;\n\nPostcode: &quot;)
        self.rich.WriteText(&quot;\n\nUsage: &quot;)
        self.rich.EndFontSize()

        self.infoszr = wx.BoxSizer()
        self.infoszr.Add(self.rich, proportion = 1, flag = wx.EXPAND)

        self.inforpanelsizer = wx.BoxSizer()
        self.inforpanelsizer.Add(self.infoSelectPanl, proportion = 2, flag = wx.EXPAND)
        self.inforpanelsizer.Add(self.informationPnl, proportion = 11, flag = wx.EXPAND)

        self.vrtszr1 = wx.BoxSizer(wx.VERTICAL)
        self.subselectsizer = wx.BoxSizer()

        self.grid = wx.GridSizer(5,5,0,0)
 
        self.selectionszr = wx.BoxSizer(wx.VERTICAL)
        self.selectionszr.Add(self.subselectpanel, proportion = 2, flag = wx.EXPAND)
        self.selectionszr.Add(self.selectionPanel, proportion = 11, flag = wx.EXPAND)

        self.mainselectionszr = wx.BoxSizer()
        self.mainselectionszr.Add(self.selectionbuttn, proportion = 2, flag = wx.EXPAND)
        self.mainselectionszr.Add(self.selectionszr, proportion = 11, flag = wx.EXPAND)

        self.vertspacer1 = wx.Panel(self)
        self.vertspacertop = wx.Panel(self)
        self.vertspacerbottom = wx.Panel(self)

        self.vrtszr2 = wx.BoxSizer(wx.VERTICAL)
        self.vrtszr2.Add(self.vertspacertop, 1, flag = wx.EXPAND)
        self.vrtszr2.Add(self.inforpanelsizer, proportion = 4, flag = wx.EXPAND)
        self.vrtszr2.Add(self.vertspacer1, proportion = 1, flag = wx.EXPAND)
        self.vrtszr2.Add(self.mainselectionszr, proportion = 11, flag = wx.EXPAND)
        self.vrtszr2.Add(self.vertspacerbottom, 1, flag = wx.EXPAND)

        ## &lt;-- order box stuff --&gt; ##

        self.orderbox = AutoWidthListCtrl(self.orderSpecifics)
        self.orderbox.InsertColumn(0, &quot;Item&quot;, width = 330)
        self.orderbox.InsertColumn(1, &quot;Price&quot;)

        self.discbtn = wx.Button(self.orderSpecifics, label = &quot;Discount Item&quot;)
        self.repbtn = wx.Button(self.orderSpecifics, label = &quot;Repeat Item&quot;)
        self.Bind(wx.EVT_BUTTON, self.RepeatItem, self.repbtn)
        self.delbtn = wx.Button(self.orderSpecifics, label = &quot;Delete Item&quot;)
        self.Bind(wx.EVT_BUTTON, self.unbuyitem, self.delbtn)

        self.specbtns = wx.BoxSizer()
        self.specbtns.Add(self.discbtn, proportion = 1, flag = wx.EXPAND)
        self.specbtns.Add(self.repbtn, proportion = 1, flag = wx.EXPAND)
        self.specbtns.Add(self.delbtn, proportion =1, flag = wx.EXPAND)

        ## &lt;----------------------&gt; ##

        ## &lt;-- TOTALSTUFF --&gt; ##

        self.tot = 0.00

        totaldiscount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = &quot;Discount off Total&quot;)
        totaldiscount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
        self.discounttotal = wx.lib.masked.NumCtrl(self.orderspecchang, size = (80, -1), fractionWidth = 2)
        self.discounttotal.SetIntegerWidth(4)
        self.discounttotal.SetMax(self.tot)        
        self.discounttotal.SetLimited(True)
        
        
        self.total = wx.StaticText(self.orderspecchang, style=wx.ALIGN_CENTRE, label = &quot;Total = &quot;)
        self.total.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
        self.totalamount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = &quot;&quot;)
        self.totalamount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))

        self.newtotal = wx.StaticText(self.orderspecchang, style=wx.ALIGN_CENTRE, label = &quot;Total = &quot;)
        self.newtotal.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
        self.newtotalamount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = &quot;&quot;)
        self.newtotalamount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
        
        self.spacer1 = wx.BoxSizer()
        self.spacer2 = wx.BoxSizer()
        # Sizer #
        self.totallayout = wx.GridSizer(3,2,10,5)
        self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
        self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
        self.totallayout.Add(self.total, 1, flag = wx.EXPAND)
        self.totallayout.Add(self.totalamount, 1, flag =  wx.EXPAND)
        self.totallayout.Add(totaldiscount, 1, flag = wx.EXPAND)
        self.totallayout.Add(self.discounttotal,1 , flag = wx.ALIGN_CENTRE)
        self.totallayout.Add(self.newtotal, 1, flag = wx.EXPAND)
        self.totallayout.Add(self.newtotalamount, 1, flag =  wx.EXPAND)
        self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
        self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)

        ## &lt;----------------&gt; ##

        self.contbtn = wx.Button(self.orderSpecifics, label = &quot;Continue&quot;)
        self.Bind(wx.EVT_BUTTON, self.GenerateReport, self.contbtn)
        self.exitbtn = wx.Button(self.orderSpecifics, label = &quot;Exit&quot;)

        self.exitcont = wx.BoxSizer()
        self.exitcont.Add(self.exitbtn, proportion = 1, flag = wx.EXPAND)
        self.exitcont.Add(self.contbtn, proportion = 1, flag = wx.EXPAND)

        self.vertspc1 = wx.BoxSizer(wx.VERTICAL)
        self.vertspc2 = wx.BoxSizer(wx.VERTICAL)
        self.hzlspc1 = wx.BoxSizer()
        self.hzlspc2 = wx.BoxSizer()

        self.orderpanelmain = wx.BoxSizer(wx.VERTICAL)
        self.orderpanelmain.Add(self.vertspc1, proportion = 1)
        self.orderpanelmain.Add(self.orderbox, proportion = 13, flag = wx.EXPAND)
        self.orderpanelmain.Add(self.specbtns, proportion = 1, flag = wx.EXPAND)
        self.orderpanelmain.Add(self.orderspecchang, proportion = 3, flag = wx.EXPAND)
        self.orderpanelmain.Add(self.exitcont, proportion = 1, flag = wx.EXPAND)
        self.orderpanelmain.Add(self.vertspc2, proportion = 1)

        self.opmborder = wx.BoxSizer()
        self.opmborder.Add(self.hzlspc1, proportion = 2)
        self.opmborder.Add(self.orderpanelmain, proportion = 8, flag = wx.EXPAND)
        self.opmborder.Add(self.hzlspc2, proportion = 1)

        self.leftmargin = wx.Panel(self)

        self.initlay = wx.BoxSizer()
        self.initlay.Add(self.leftmargin, proportion = 1, flag = wx.EXPAND)
        self.initlay.Add(self.vrtszr2, proportion = 14, flag = wx.EXPAND)
        self.initlay.Add(self.orderSpecifics, proportion = 15, flag = wx.EXPAND)
        
        self.infoSelectPanl.SetSizer(self.infbtnsz)
        self.informationPnl.SetSizer(self.infoszr)
        self.selectionbuttn.SetSizer(self.vrtszr1)
        self.subselectpanel.SetSizer(self.subselectsizer)
        self.selectionPanel.SetSizer(self.grid)
        self.orderspecchang.SetSizer(self.totallayout)
        self.orderSpecifics.SetSizer(self.opmborder)

        ###

        addmaincat.frame = addmaincat.MyFrame()
        addmaincat.frame.Bind(wx.EVT_BUTTON, self.AddCatagory, addmaincat.frame.confirmbtn)
        addmaincat.frame.Bind(wx.EVT_BUTTON, self.DelCatagory, addmaincat.frame.confirmbtn2)

        addsubcat.frame = addsubcat.MyFrame()
        addsubcat.frame.Bind(wx.EVT_BUTTON, self.AddSubCatagory, addsubcat.frame.confirmbtn)
        addsubcat.frame.Bind(wx.EVT_BUTTON, self.DelSubCatagory, addsubcat.frame.confirmbtn2)

        additem.frame = additem.MyFrame()
        additem.frame.Bind(wx.EVT_BUTTON, self.AddItem, additem.frame.confirmbtn)
        additem.frame.Bind(wx.EVT_BUTTON, self.DelItem, additem.frame.confirmbtn2)

        ###
        
        self.SetSizer(self.initlay)

        self.MainCatSetup(self)
        
        self.Centre()

    def AddCatagory(self, event):

        addmaincat.frame.AddCat(self)
        self.MainCatSetup(self)

    def DelCatagory(self, event):

        addmaincat.frame.DeleteCat(self)
        self.MainCatSetup(self)

    def AddSubCatagory(self, event):

        addsubcat.frame.AddCat(self.y)
        self.SubButtonsSetSizer(self.y)

    def DelSubCatagory(self, event):

        addsubcat.frame.DeleteCat(self.y)
        self.SubButtonsSetSizer(self.y)

    def AddItem(self, event):

        additem.frame.AddCat(self.z)
        self.SetGridSizer(self.z)

    def DelItem(self, event):

        additem.frame.DeleteCat(self.z)
        self.SetGridSizer(self.z)

    def MainCatSetup(self, event):

        self.vrtszr1.Clear(True)
        self.subselectsizer.Clear(True)
        self.grid.Clear(True)

        for self.x in os.listdir(self.mainfolder):

            self.x = wx.Button(self.selectionbuttn, label = self.x)
            self.vrtszr1.Add(self.x, 1, flag = wx.EXPAND)
            self.Bind(wx.EVT_BUTTON, self.MainClick, self.x)

        self.addCatBut = wx.Button(self.selectionbuttn, label = &quot;Create/Delete\nCatagory&quot;)
        self.addCatBut.SetForegroundColour(&quot;blue&quot;)        
        self.vrtszr1.Add(self.addCatBut, 1, flag = wx.EXPAND)
        self.vrtszr1.Layout()
        self.Bind(wx.EVT_BUTTON, self.AddNewCat, self.addCatBut)
        addmaincat.frame.populatechoice()

    def MainClick(self, event):
         
        self.butt = event.GetEventObject().GetLabel()
        self.y = os.path.join(self.mainfolder, self.butt)
        
        self.SubButtonsSetSizer(self.y)
        
    def SubButtonsSetSizer(self, subcat):

        self.subselectsizer.Clear(True)

        for self.subbut in os.listdir(subcat):

            self.subbut = wx.Button(self.subselectpanel, label = self.subbut)
            self.subselectsizer.Add(self.subbut, 1, wx.EXPAND)
            self.subbut.Bind(wx.EVT_BUTTON, self.SubClick, self.subbut)

        self.addSubCatBut = wx.Button(self.subselectpanel, label = &quot;Create/Delete\nSub-Catagory&quot;)
        self.addSubCatBut.SetForegroundColour(&quot;blue&quot;)        
        self.subselectsizer.Add(self.addSubCatBut, 1, flag = wx.EXPAND)
        self.subselectsizer.Layout()
        self.Bind(wx.EVT_BUTTON, self.AddNewSubCat, self.addSubCatBut)
        addsubcat.frame.populatechoice(self.y)
        

        self.grid.Clear(True)
        self.grid.Layout()

    def SubClick(self, event):

        self.butto = event.GetEventObject().GetLabel()
        self.z = os.path.join(self.y, self.butto)

        self.SetGridSizer(self.z)

    def SetGridSizer(self, subcat):

        self.grid.Clear(True)
    
        self.counter = 0

        for self.finbut in os.listdir(subcat):

            self.name = os.path.splitext(self.finbut)
            self.name = self.name[0]
            
            self.name = wx.Button(self.selectionPanel, label = str(self.name))
            self.grid.Add(self.name, 1, flag = wx.EXPAND)
            self.Bind(wx.EVT_BUTTON, self.buyitem, self.name)

            self.counter += 1

        self.addItemBut = wx.Button(self.selectionPanel, label = &quot;Create/Delete\nItem&quot;)
        self.addItemBut.SetForegroundColour(&quot;blue&quot;)
        self.grid.Add(self.addItemBut, 1, flag = wx.EXPAND)

        self.counter += 1

        for x in range(self.counter, 25):

            x = Panel(self.selectionPanel)
            self.grid.Add(x, 1, flag = wx.EXPAND)
            self.grid.Layout()

        self.Bind(wx.EVT_BUTTON, self.AddNewItem, self.addItemBut)
        additem.frame.populatechoice(self.z)

        ## &lt;-- self.orderbox functions --&gt; ##

    def buyitem(self, event):

        file = os.path.join(self.z, event.GetEventObject().GetLabel() + &quot;.txt&quot;)

        file = open(file)

        price = file.readline()

        file.close()
        
        index = self.orderbox.InsertStringItem(sys.maxint, event.GetEventObject().GetLabel())
        self.orderbox.SetStringItem(index, 1, price)

        self.tot += float(price)
        self.totalamount.SetLabel(&quot;£ &quot; + str(Decimal(
            &#39;{0:.2f}&#39;.format(Decimal(self.tot)), 9)))
        self.discounttotal.SetMax(self.tot)
        self.orderspecchang.Layout()

    def unbuyitem(self, event):

        itemindex = self.orderbox.GetFocusedItem()
        price = self.orderbox.GetItem(itemindex,1).GetText()
        self.orderbox.DeleteItem(self.orderbox.GetFocusedItem())
        
        self.tot -= float(price)

        self.totalamount.SetLabel(&quot;£ &quot; + str(Decimal(
            &#39;{0:.2f}&#39;.format(Decimal(self.tot)), 9)))

        self.discounttotal.SetMax(self.tot)
        self.orderspecchang.Layout()

    def RepeatItem(self, event):

        itemindex = self.orderbox.GetFocusedItem()
        name = self.orderbox.GetItem(itemindex,0).GetText()
        price = self.orderbox.GetItem(itemindex,1).GetText()
        
        index = self.orderbox.InsertStringItem(sys.maxint, name)
        self.orderbox.SetStringItem(index, 1, price)
        self.tot += float(price)
        self.totalamount.SetLabel(&quot;£ &quot; + str(Decimal(
            &#39;{0:.2f}&#39;.format(Decimal(self.tot)), 9)))

        self.discounttotal.SetMax(self.tot)
        self.orderspecchang.Layout()

    def GenerateReport(self, event):

        print &quot;Report Generated&quot;

        target = self.orderbox
        itemtotal =  target.GetItemCount()
        columntotal = target.GetColumnCount()
        textfile = open(&quot;C:\Users\Rhys\Desktop\Database.txt&quot;, &quot;w&quot;)

        for columnitem in range(0, columntotal):

            col = target.GetColumn(columnitem)
            textfile.write(col.GetText()+&quot;,&quot;)

        textfile.write(&quot;\n&quot;)

        for item in range(0, itemtotal):

            for columnitem in range(0, columntotal):

                textfile.write(target.GetItem(item, columnitem).GetText()+ &quot;,&quot;)
 # need to strip £ sign??
            textfile.write(&quot;\n&quot;)

        textfile.close()

        ## &lt;-----------------------------&gt; ##

    def AddNewCat(self, event):

        addmaincat.frame.Show()

    def AddNewSubCat(self, event):

        addsubcat.frame.Show()

    def AddNewItem(self, event):

        additem.frame.Show()

app = wx.App(redirect = False)
frame = DeliveryWindow(parent = None, id = -1)
frame.Show()
app.MainLoop()
[/code]</description>
    
    <lastBuildDate>Mon, 02 May 2011 22:52:21 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/your-keyboard-doesnt-like-the-compiler-i-see/393595.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;Your keyboard doesn&#39;t like the compiler I see...&quot;</title>
        <dc:creator><![CDATA[@Saphire1 Saphire`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/saphire1">@Saphire1</a> wrote:</p>
          <blockquote>
              <p>Well, someone told me after creating this for my college assignment that “Your keyboard doesn’t like the compiler I see…” over at a different site, basically my code is written terrible and shouldn’t exist.<br>
There are three other modules created in order to run this, although this was the only one he mentioned to have “Bad code”.</p>
<p>[code=python]import wx<br>
import os<br>
import wx.richtext<br>
from wx.lib.mixins.listctrl import ListCtrlAutoWidthMixin<br>
import sys<br>
from decimal import *<br>
from wx.lib.masked import NumCtrl<br>
import addmaincat<br>
import addsubcat<br>
import additem</p>
<p>class AutoWidthListCtrl(wx.ListCtrl, ListCtrlAutoWidthMixin):<br>
def <strong>init</strong>(self, parent):</p>
<pre><code>    wx.ListCtrl.__init__(self, parent, -1, style=wx.LC_REPORT)
    ListCtrlAutoWidthMixin.__init__(self)
</code></pre>
<p>class Panel(wx.Panel):</p>
<pre><code>def __init__(self, parent):
    
    wx.Panel.__init__(self, parent)
</code></pre>
<p>class DeliveryWindow(wx.Frame):</p>
<pre><code>def __init__(self, parent, id):
    wx.Frame.__init__(self, parent, id, 'Quick Silver', size = (500, 500))

    self.mainfolder = "F:\QuickSilver"

    
    myothercontext = Context(prec=9, rounding=None)
    setcontext(myothercontext)
    
    self.infoSelectPanl = wx.Panel(self)
    self.informationPnl = wx.Panel(self)
    self.orderSpecifics = wx.Panel(self)
    self.orderspecchang = wx.Panel(self.orderSpecifics, style = wx.SUNKEN_BORDER)
    self.selectionbuttn = wx.Panel(self)
    self.subselectpanel = wx.Panel(self)
    self.selectionPanel = wx.Panel(self, style = wx.SUNKEN_BORDER)

    self.esseninf = wx.Button(self.infoSelectPanl, label = "Essential\nInformation")
    self.adresinf = wx.Button(self.infoSelectPanl, label = "Address\nHistory")
    self.histoinf = wx.Button(self.infoSelectPanl, label = "Order\nHistory")

    self.infbtnsz = wx.BoxSizer(wx.VERTICAL)
    self.infbtnsz.Add(self.esseninf, proportion = 1, flag = wx.EXPAND)
    self.infbtnsz.Add(self.adresinf, proportion = 1, flag = wx.EXPAND)
    self.infbtnsz.Add(self.histoinf, proportion = 1, flag = wx.EXPAND)

    self.rich = wx.richtext.RichTextCtrl(self.informationPnl, wx.ID_ANY, value="",
                                         style = wx.TE_READONLY)
    self.rich.BeginBold()
    self.rich.BeginFontSize(30)
    self.rich.WriteText("Customer Information")
    self.rich.EndFontSize()
    self.rich.EndBold()
    self.rich.BeginFontSize(12)
    self.rich.WriteText("\n\nPhone number: ")
    self.rich.WriteText("\n\nName: ")
    self.rich.WriteText("\n\nPostcode: ")
    self.rich.WriteText("\n\nUsage: ")
    self.rich.EndFontSize()

    self.infoszr = wx.BoxSizer()
    self.infoszr.Add(self.rich, proportion = 1, flag = wx.EXPAND)

    self.inforpanelsizer = wx.BoxSizer()
    self.inforpanelsizer.Add(self.infoSelectPanl, proportion = 2, flag = wx.EXPAND)
    self.inforpanelsizer.Add(self.informationPnl, proportion = 11, flag = wx.EXPAND)

    self.vrtszr1 = wx.BoxSizer(wx.VERTICAL)
    self.subselectsizer = wx.BoxSizer()

    self.grid = wx.GridSizer(5,5,0,0)

    self.selectionszr = wx.BoxSizer(wx.VERTICAL)
    self.selectionszr.Add(self.subselectpanel, proportion = 2, flag = wx.EXPAND)
    self.selectionszr.Add(self.selectionPanel, proportion = 11, flag = wx.EXPAND)

    self.mainselectionszr = wx.BoxSizer()
    self.mainselectionszr.Add(self.selectionbuttn, proportion = 2, flag = wx.EXPAND)
    self.mainselectionszr.Add(self.selectionszr, proportion = 11, flag = wx.EXPAND)

    self.vertspacer1 = wx.Panel(self)
    self.vertspacertop = wx.Panel(self)
    self.vertspacerbottom = wx.Panel(self)

    self.vrtszr2 = wx.BoxSizer(wx.VERTICAL)
    self.vrtszr2.Add(self.vertspacertop, 1, flag = wx.EXPAND)
    self.vrtszr2.Add(self.inforpanelsizer, proportion = 4, flag = wx.EXPAND)
    self.vrtszr2.Add(self.vertspacer1, proportion = 1, flag = wx.EXPAND)
    self.vrtszr2.Add(self.mainselectionszr, proportion = 11, flag = wx.EXPAND)
    self.vrtszr2.Add(self.vertspacerbottom, 1, flag = wx.EXPAND)

    ## &lt;-- order box stuff --&gt; ##

    self.orderbox = AutoWidthListCtrl(self.orderSpecifics)
    self.orderbox.InsertColumn(0, "Item", width = 330)
    self.orderbox.InsertColumn(1, "Price")

    self.discbtn = wx.Button(self.orderSpecifics, label = "Discount Item")
    self.repbtn = wx.Button(self.orderSpecifics, label = "Repeat Item")
    self.Bind(wx.EVT_BUTTON, self.RepeatItem, self.repbtn)
    self.delbtn = wx.Button(self.orderSpecifics, label = "Delete Item")
    self.Bind(wx.EVT_BUTTON, self.unbuyitem, self.delbtn)

    self.specbtns = wx.BoxSizer()
    self.specbtns.Add(self.discbtn, proportion = 1, flag = wx.EXPAND)
    self.specbtns.Add(self.repbtn, proportion = 1, flag = wx.EXPAND)
    self.specbtns.Add(self.delbtn, proportion =1, flag = wx.EXPAND)

    ## &lt;----------------------&gt; ##

    ## &lt;-- TOTALSTUFF --&gt; ##

    self.tot = 0.00

    totaldiscount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = "Discount off Total")
    totaldiscount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
    self.discounttotal = wx.lib.masked.NumCtrl(self.orderspecchang, size = (80, -1), fractionWidth = 2)
    self.discounttotal.SetIntegerWidth(4)
    self.discounttotal.SetMax(self.tot)        
    self.discounttotal.SetLimited(True)
    
    
    self.total = wx.StaticText(self.orderspecchang, style=wx.ALIGN_CENTRE, label = "Total = ")
    self.total.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
    self.totalamount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = "")
    self.totalamount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))

    self.newtotal = wx.StaticText(self.orderspecchang, style=wx.ALIGN_CENTRE, label = "Total = ")
    self.newtotal.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
    self.newtotalamount = wx.StaticText(self.orderspecchang, style = wx.ALIGN_CENTRE, label = "")
    self.newtotalamount.SetFont(wx.Font (10, wx.SWISS, wx.NORMAL, wx.NORMAL))
    
    self.spacer1 = wx.BoxSizer()
    self.spacer2 = wx.BoxSizer()
    # Sizer #
    self.totallayout = wx.GridSizer(3,2,10,5)
    self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
    self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
    self.totallayout.Add(self.total, 1, flag = wx.EXPAND)
    self.totallayout.Add(self.totalamount, 1, flag =  wx.EXPAND)
    self.totallayout.Add(totaldiscount, 1, flag = wx.EXPAND)
    self.totallayout.Add(self.discounttotal,1 , flag = wx.ALIGN_CENTRE)
    self.totallayout.Add(self.newtotal, 1, flag = wx.EXPAND)
    self.totallayout.Add(self.newtotalamount, 1, flag =  wx.EXPAND)
    self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)
    self.totallayout.Add(Panel(self.orderspecchang), 1, flag = wx.EXPAND)

    ## &lt;----------------&gt; ##

    self.contbtn = wx.Button(self.orderSpecifics, label = "Continue")
    self.Bind(wx.EVT_BUTTON, self.GenerateReport, self.contbtn)
    self.exitbtn = wx.Button(self.orderSpecifics, label = "Exit")

    self.exitcont = wx.BoxSizer()
    self.exitcont.Add(self.exitbtn, proportion = 1, flag = wx.EXPAND)
    self.exitcont.Add(self.contbtn, proportion = 1, flag = wx.EXPAND)

    self.vertspc1 = wx.BoxSizer(wx.VERTICAL)
    self.vertspc2 = wx.BoxSizer(wx.VERTICAL)
    self.hzlspc1 = wx.BoxSizer()
    self.hzlspc2 = wx.BoxSizer()

    self.orderpanelmain = wx.BoxSizer(wx.VERTICAL)
    self.orderpanelmain.Add(self.vertspc1, proportion = 1)
    self.orderpanelmain.Add(self.orderbox, proportion = 13, flag = wx.EXPAND)
    self.orderpanelmain.Add(self.specbtns, proportion = 1, flag = wx.EXPAND)
    self.orderpanelmain.Add(self.orderspecchang, proportion = 3, flag = wx.EXPAND)
    self.orderpanelmain.Add(self.exitcont, proportion = 1, flag = wx.EXPAND)
    self.orderpanelmain.Add(self.vertspc2, proportion = 1)

    self.opmborder = wx.BoxSizer()
    self.opmborder.Add(self.hzlspc1, proportion = 2)
    self.opmborder.Add(self.orderpanelmain, proportion = 8, flag = wx.EXPAND)
    self.opmborder.Add(self.hzlspc2, proportion = 1)

    self.leftmargin = wx.Panel(self)

    self.initlay = wx.BoxSizer()
    self.initlay.Add(self.leftmargin, proportion = 1, flag = wx.EXPAND)
    self.initlay.Add(self.vrtszr2, proportion = 14, flag = wx.EXPAND)
    self.initlay.Add(self.orderSpecifics, proportion = 15, flag = wx.EXPAND)
    
    self.infoSelectPanl.SetSizer(self.infbtnsz)
    self.informationPnl.SetSizer(self.infoszr)
    self.selectionbuttn.SetSizer(self.vrtszr1)
    self.subselectpanel.SetSizer(self.subselectsizer)
    self.selectionPanel.SetSizer(self.grid)
    self.orderspecchang.SetSizer(self.totallayout)
    self.orderSpecifics.SetSizer(self.opmborder)

    ###

    addmaincat.frame = addmaincat.MyFrame()
    addmaincat.frame.Bind(wx.EVT_BUTTON, self.AddCatagory, addmaincat.frame.confirmbtn)
    addmaincat.frame.Bind(wx.EVT_BUTTON, self.DelCatagory, addmaincat.frame.confirmbtn2)

    addsubcat.frame = addsubcat.MyFrame()
    addsubcat.frame.Bind(wx.EVT_BUTTON, self.AddSubCatagory, addsubcat.frame.confirmbtn)
    addsubcat.frame.Bind(wx.EVT_BUTTON, self.DelSubCatagory, addsubcat.frame.confirmbtn2)

    additem.frame = additem.MyFrame()
    additem.frame.Bind(wx.EVT_BUTTON, self.AddItem, additem.frame.confirmbtn)
    additem.frame.Bind(wx.EVT_BUTTON, self.DelItem, additem.frame.confirmbtn2)

    ###
    
    self.SetSizer(self.initlay)

    self.MainCatSetup(self)
    
    self.Centre()

def AddCatagory(self, event):

    addmaincat.frame.AddCat(self)
    self.MainCatSetup(self)

def DelCatagory(self, event):

    addmaincat.frame.DeleteCat(self)
    self.MainCatSetup(self)

def AddSubCatagory(self, event):

    addsubcat.frame.AddCat(self.y)
    self.SubButtonsSetSizer(self.y)

def DelSubCatagory(self, event):

    addsubcat.frame.DeleteCat(self.y)
    self.SubButtonsSetSizer(self.y)

def AddItem(self, event):

    additem.frame.AddCat(self.z)
    self.SetGridSizer(self.z)

def DelItem(self, event):

    additem.frame.DeleteCat(self.z)
    self.SetGridSizer(self.z)

def MainCatSetup(self, event):

    self.vrtszr1.Clear(True)
    self.subselectsizer.Clear(True)
    self.grid.Clear(True)

    for self.x in os.listdir(self.mainfolder):

        self.x = wx.Button(self.selectionbuttn, label = self.x)
        self.vrtszr1.Add(self.x, 1, flag = wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.MainClick, self.x)

    self.addCatBut = wx.Button(self.selectionbuttn, label = "Create/Delete\nCatagory")
    self.addCatBut.SetForegroundColour("blue")        
    self.vrtszr1.Add(self.addCatBut, 1, flag = wx.EXPAND)
    self.vrtszr1.Layout()
    self.Bind(wx.EVT_BUTTON, self.AddNewCat, self.addCatBut)
    addmaincat.frame.populatechoice()

def MainClick(self, event):
     
    self.butt = event.GetEventObject().GetLabel()
    self.y = os.path.join(self.mainfolder, self.butt)
    
    self.SubButtonsSetSizer(self.y)
    
def SubButtonsSetSizer(self, subcat):

    self.subselectsizer.Clear(True)

    for self.subbut in os.listdir(subcat):

        self.subbut = wx.Button(self.subselectpanel, label = self.subbut)
        self.subselectsizer.Add(self.subbut, 1, wx.EXPAND)
        self.subbut.Bind(wx.EVT_BUTTON, self.SubClick, self.subbut)

    self.addSubCatBut = wx.Button(self.subselectpanel, label = "Create/Delete\nSub-Catagory")
    self.addSubCatBut.SetForegroundColour("blue")        
    self.subselectsizer.Add(self.addSubCatBut, 1, flag = wx.EXPAND)
    self.subselectsizer.Layout()
    self.Bind(wx.EVT_BUTTON, self.AddNewSubCat, self.addSubCatBut)
    addsubcat.frame.populatechoice(self.y)
    

    self.grid.Clear(True)
    self.grid.Layout()

def SubClick(self, event):

    self.butto = event.GetEventObject().GetLabel()
    self.z = os.path.join(self.y, self.butto)

    self.SetGridSizer(self.z)

def SetGridSizer(self, subcat):

    self.grid.Clear(True)

    self.counter = 0

    for self.finbut in os.listdir(subcat):

        self.name = os.path.splitext(self.finbut)
        self.name = self.name[0]
        
        self.name = wx.Button(self.selectionPanel, label = str(self.name))
        self.grid.Add(self.name, 1, flag = wx.EXPAND)
        self.Bind(wx.EVT_BUTTON, self.buyitem, self.name)

        self.counter += 1

    self.addItemBut = wx.Button(self.selectionPanel, label = "Create/Delete\nItem")
    self.addItemBut.SetForegroundColour("blue")
    self.grid.Add(self.addItemBut, 1, flag = wx.EXPAND)

    self.counter += 1

    for x in range(self.counter, 25):

        x = Panel(self.selectionPanel)
        self.grid.Add(x, 1, flag = wx.EXPAND)
        self.grid.Layout()

    self.Bind(wx.EVT_BUTTON, self.AddNewItem, self.addItemBut)
    additem.frame.populatechoice(self.z)

    ## &lt;-- self.orderbox functions --&gt; ##

def buyitem(self, event):

    file = os.path.join(self.z, event.GetEventObject().GetLabel() + ".txt")

    file = open(file)

    price = file.readline()

    file.close()
    
    index = self.orderbox.InsertStringItem(sys.maxint, event.GetEventObject().GetLabel())
    self.orderbox.SetStringItem(index, 1, price)

    self.tot += float(price)
    self.totalamount.SetLabel("£ " + str(Decimal(
        '{0:.2f}'.format(Decimal(self.tot)), 9)))
    self.discounttotal.SetMax(self.tot)
    self.orderspecchang.Layout()

def unbuyitem(self, event):

    itemindex = self.orderbox.GetFocusedItem()
    price = self.orderbox.GetItem(itemindex,1).GetText()
    self.orderbox.DeleteItem(self.orderbox.GetFocusedItem())
    
    self.tot -= float(price)

    self.totalamount.SetLabel("£ " + str(Decimal(
        '{0:.2f}'.format(Decimal(self.tot)), 9)))

    self.discounttotal.SetMax(self.tot)
    self.orderspecchang.Layout()

def RepeatItem(self, event):

    itemindex = self.orderbox.GetFocusedItem()
    name = self.orderbox.GetItem(itemindex,0).GetText()
    price = self.orderbox.GetItem(itemindex,1).GetText()
    
    index = self.orderbox.InsertStringItem(sys.maxint, name)
    self.orderbox.SetStringItem(index, 1, price)
    self.tot += float(price)
    self.totalamount.SetLabel("£ " + str(Decimal(
        '{0:.2f}'.format(Decimal(self.tot)), 9)))

    self.discounttotal.SetMax(self.tot)
    self.orderspecchang.Layout()

def GenerateReport(self, event):

    print "Report Generated"

    target = self.orderbox
    itemtotal =  target.GetItemCount()
    columntotal = target.GetColumnCount()
    textfile = open("C:\Users\Rhys\Desktop\Database.txt", "w")

    for columnitem in range(0, columntotal):

        col = target.GetColumn(columnitem)
        textfile.write(col.GetText()+",")

    textfile.write("\n")

    for item in range(0, itemtotal):

        for columnitem in range(0, columntotal):

            textfile.write(target.GetItem(item, columnitem).GetText()+ ",")
</code></pre>
<h1>need to strip £ sign??</h1>
<pre><code>        textfile.write("\n")

    textfile.close()

    ## &lt;-----------------------------&gt; ##

def AddNewCat(self, event):

    addmaincat.frame.Show()

def AddNewSubCat(self, event):

    addsubcat.frame.Show()

def AddNewItem(self, event):

    additem.frame.Show()
</code></pre>
<p>app = wx.App(redirect = False)<br>
frame = DeliveryWindow(parent = None, id = -1)<br>
frame.Show()<br>
app.MainLoop()<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/your-keyboard-doesnt-like-the-compiler-i-see/393595/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/your-keyboard-doesnt-like-the-compiler-i-see/393595/1</link>
        <pubDate>Mon, 02 May 2011 22:52:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393595-1</guid>
        <source url="https://forum.moparisthebest.com/t/your-keyboard-doesnt-like-the-compiler-i-see/393595.rss">&quot;Your keyboard doesn&#39;t like the compiler I see...&quot;</source>
      </item>
  </channel>
</rss>
