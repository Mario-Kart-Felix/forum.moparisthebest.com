<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Game clock synchronization</title>
    <link>https://forum.moparisthebest.com/t/game-clock-synchronization/447756</link>
    <description>Sort of an interesting idea I had while dreaming. In the old 317 client, 5 packets are parsed per every loop cycle. The packets are parsed before the logic takes place where the &#39;WorldMap&#39;, also called the Pallete or &#39;WorldController&#39;, has all its actors removed and then is logically updated and redrawn. Those 5 packets can be a range of things, such as spawning a projectile or item. Most of the time there is an associated delay, like with a projectile. For every client logic cycle, 5 packets are parsed. The client logic cycle is NOT synchronized with the game server logic cycle with is traditionally 600 ms.

[code]
     if (packetId == 117) {
            int locationHash = buffer.getUbyte();
            int x = spawnX + (locationHash &gt;&gt; 4 &amp; 7);
            int y = spawnY + (locationHash &amp; 7);
            int destX = x + buffer.getByte();
            int destY = y + buffer.getByte();
            int entityId = buffer.getWord();
            int gfxId = buffer.getUword();
            int heightOffset = buffer.getUbyte() * 4;
            int destHeightOffset = buffer.getUbyte() * 4;
            int startCycleOffset = buffer.getUword();
            int endCycleOffset = buffer.getUword();
            int rotation = buffer.getUbyte();
            int unknwnOffset = buffer.getUbyte();
            if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; 104 &amp;&amp; y &lt; 104 &amp;&amp; destX &gt;= 0 &amp;&amp; destY &gt;= 0 &amp;&amp; destX &lt; 104 &amp;&amp; destY &lt; 104 &amp;&amp; gfxId != 65535) {
                x = x * 128 + 64;
                y = y * 128 + 64;
                destX = destX * 128 + 64;
                destY = destY * 128 + 64;
                Projectile projectile = new Projectile(rotation, destHeightOffset, startCycleOffset + loopCycle, endCycleOffset + loopCycle, unknwnOffset, localHeight, getFineHeightPosition(x, y, localHeight) - heightOffset, y, x, entityId, gfxId);
                projectile.updateDestination(destX, destY, getFineHeightPosition(destX, destY, localHeight) - destHeightOffset, startCycleOffset + loopCycle);
                projectiles.addLast(projectile);
            }
}
[/code]

Say I wanted to first, create a projectile, and then create a still graphic object to splash on the target when the projectile hits. 

The projectile is expected to take a time of [b]500 client logic ticks.[/b] The graphic would have to be sent at the 500 client logic tick which is when the trajectory for the projectile would be at the target. That&#39;d approximately be a 2,500 packet difference, although the splash would appear at the correct time. I was thinking, logically, you can&#39;t expect the client to parse packets 5 at a time so you&#39;d have to send simple keep alive packets (no payload) and then have a queuing system to flush all 5 packets at the same time.

Question is, how would you create a reliable system to synchronize the events of the client with the incoming network packets with this information or do you think that it would not be possible or reliable? 

I could see that it wouldn&#39;t be possible because unless there was a constant stream of packets coming inbound then there would be times when a tick was skipped and unaccounted for by the server.

Edit: Having a constant stream of packets would be a requirement, but it&#39;d be a reliable way to keep the client and the client registered to the server on a same timescale.</description>
    
    <lastBuildDate>Mon, 02 Jul 2012 04:17:44 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/game-clock-synchronization/447756.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Game clock synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Oh babe <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"> I’ll post a better response later, just got home.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-clock-synchronization/447756/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-clock-synchronization/447756/3</link>
        <pubDate>Mon, 02 Jul 2012 04:17:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447756-3</guid>
        <source url="https://forum.moparisthebest.com/t/game-clock-synchronization/447756.rss">Game clock synchronization</source>
      </item>
      <item>
        <title>Game clock synchronization</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>I can paste code too!</p>
<p><code>    if (opcode == 181) {
      int delta = buffer.read_u8();
      int src_x = region_base_x + (delta &gt;&gt; 4 &amp; 7);
      int src_y = region_base_y + (delta &amp; 7);
      int desturkish idiot = src_x + buffer.read_8();
      int dest_y = src_y + buffer.read_8();
      int target = buffer.read_u16();
      int graphic = buffer.read_u16();
      int src_z_off = buffer.read_u8() * 4;
      int dest_z_off = buffer.read_u8() * 4;
      int end = buffer.read_u16();
      int start = buffer.read_u16();
      int leap_scale = buffer.read_u8();
      int elevation = buffer.read_u8();
      if (src_x &gt;= 0 &amp;&amp; src_y &gt;= 0 &amp;&amp; src_x &lt; 104 &amp;&amp; src_y &lt; 104
          &amp;&amp; desturkish idiot &gt;= 0 &amp;&amp; dest_y &gt;= 0 &amp;&amp; desturkish idiot &lt; 104 &amp;&amp; dest_y &lt; 104 &amp;&amp; graphic != 65535) {
        src_x = src_x * 128 + 64;
        src_y = src_y * 128 + 64;
        desturkish idiot = desturkish idiot * 128 + 64;
        dest_y = dest_y * 128 + 64;
        Projectile projectile = new Projectile(local_plane, src_x, src_y, average_z(src_x, src_y, local_plane) - src_z_off,
            leap_scale, elevation, target, dest_z_off, start + tick, end + tick, graphic);
        projectile.target(desturkish idiot, dest_y, average_z(desturkish idiot, dest_y, local_plane) - dest_z_off, end + tick);
        projectiles.append(projectile);
      }
      return;
    }</code></p>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
<p>Is there any reason you want to keep the client and server ticks synchronized? I can’t find any. Not even games with complex physics seek to keep the server and client cycle in tandem… consider this:</p>
<p><code>frame_time = 20;</code> (20 ms per update = 50 Hz)<br>
so the client internal oscillator updates about 30 times as fast (600 ms per update = ~1.67 Hz).</p>
<p>EDIT: The client updates about 50 times per second ideally… however each tick can take up to 10 updates with the highest degree of lag compensation, so you can have up to 100 updates per render in the most extreme case. Also, your ‘rotation’ is a scale used for the initial leap of projectile position when initially targeting:</p>
<p><code>    if (!mobile) {
      double dx = desturkish idiot - source_x;
      double dy = dest_y - source_y;
      double dist = Math.sqrt(dx * dx + dy * dy);
      x = (double) source_x + (dx * (double) leap_scale) / dist;
      y = (double) source_y + (dy * (double) leap_scale) / dist;
      z = source_z_offset;
    }</code><br>
Your ‘unknwnOffset’ is actually the <span class="bbcode-i">angle of elevation</span>, as seen here:</p>
<p><img src="http://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Ideal_projectile_motion_for_different_angles.svg/500px-Ideal_projectile_motion_for_different_angles.svg.png" alt width="500" height="250"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-clock-synchronization/447756/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-clock-synchronization/447756/2</link>
        <pubDate>Mon, 02 Jul 2012 03:05:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447756-2</guid>
        <source url="https://forum.moparisthebest.com/t/game-clock-synchronization/447756.rss">Game clock synchronization</source>
      </item>
      <item>
        <title>Game clock synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>Sort of an interesting idea I had while dreaming. In the old 317 client, 5 packets are parsed per every loop cycle. The packets are parsed before the logic takes place where the ‘WorldMap’, also called the Pallete or ‘WorldController’, has all its actors removed and then is logically updated and redrawn. Those 5 packets can be a range of things, such as spawning a projectile or item. Most of the time there is an associated delay, like with a projectile. For every client logic cycle, 5 packets are parsed. The client logic cycle is NOT synchronized with the game server logic cycle with is traditionally 600 ms.</p>
<pre><code class="lang-auto">     if (packetId == 117) {
            int locationHash = buffer.getUbyte();
            int x = spawnX + (locationHash &gt;&gt; 4 &amp; 7);
            int y = spawnY + (locationHash &amp; 7);
            int destX = x + buffer.getByte();
            int destY = y + buffer.getByte();
            int entityId = buffer.getWord();
            int gfxId = buffer.getUword();
            int heightOffset = buffer.getUbyte() * 4;
            int destHeightOffset = buffer.getUbyte() * 4;
            int startCycleOffset = buffer.getUword();
            int endCycleOffset = buffer.getUword();
            int rotation = buffer.getUbyte();
            int unknwnOffset = buffer.getUbyte();
            if (x &gt;= 0 &amp;&amp; y &gt;= 0 &amp;&amp; x &lt; 104 &amp;&amp; y &lt; 104 &amp;&amp; destX &gt;= 0 &amp;&amp; destY &gt;= 0 &amp;&amp; destX &lt; 104 &amp;&amp; destY &lt; 104 &amp;&amp; gfxId != 65535) {
                x = x * 128 + 64;
                y = y * 128 + 64;
                destX = destX * 128 + 64;
                destY = destY * 128 + 64;
                Projectile projectile = new Projectile(rotation, destHeightOffset, startCycleOffset + loopCycle, endCycleOffset + loopCycle, unknwnOffset, localHeight, getFineHeightPosition(x, y, localHeight) - heightOffset, y, x, entityId, gfxId);
                projectile.updateDestination(destX, destY, getFineHeightPosition(destX, destY, localHeight) - destHeightOffset, startCycleOffset + loopCycle);
                projectiles.addLast(projectile);
            }
}</code></pre>
<p>Say I wanted to first, create a projectile, and then create a still graphic object to splash on the target when the projectile hits.</p>
<p>The projectile is expected to take a time of <span class="bbcode-b">500 client logic ticks.</span> The graphic would have to be sent at the 500 client logic tick which is when the trajectory for the projectile would be at the target. That’d approximately be a 2,500 packet difference, although the splash would appear at the correct time. I was thinking, logically, you can’t expect the client to parse packets 5 at a time so you’d have to send simple keep alive packets (no payload) and then have a queuing system to flush all 5 packets at the same time.</p>
<p>Question is, how would you create a reliable system to synchronize the events of the client with the incoming network packets with this information or do you think that it would not be possible or reliable?</p>
<p>I could see that it wouldn’t be possible because unless there was a constant stream of packets coming inbound then there would be times when a tick was skipped and unaccounted for by the server.</p>
<p>Edit: Having a constant stream of packets would be a requirement, but it’d be a reliable way to keep the client and the client registered to the server on a same timescale.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/game-clock-synchronization/447756/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/game-clock-synchronization/447756/1</link>
        <pubDate>Mon, 02 Jul 2012 01:21:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-447756-1</guid>
        <source url="https://forum.moparisthebest.com/t/game-clock-synchronization/447756.rss">Game clock synchronization</source>
      </item>
  </channel>
</rss>
