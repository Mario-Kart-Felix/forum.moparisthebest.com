<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Better Clan Chats [~90%?]</title>
    <link>https://forum.moparisthebest.com/t/better-clan-chats-90/466169</link>
    <description>I haven&#39;t released anything in a while and since I already posted the half-assed one somewhere thought I would just release it.

This is, I suppose, still considered a base since it&#39;s not done, but pretty sure it has everything needed to be completed.

This was made in LightRune, but if you know what you&#39;re doing you can easily edit it to work with any framework, should be relatively easy since you would just need to change things like

player.getPacketSender().sendMessage(...);

Most of the things are handled inside the class itself, as it should.

1. I haven&#39;t completely tested this, just did it through commands, but it seemed fine, if someone finds a bug, post it here and I&#39;ll fix it.

2. You will need to edit updateMembersList to fit your client-sided clan chat interface, if you want it here (all credits to [user]Honey Badger[/user] and/or [user]Galkon[/user], not sure who made it)

[CODE]/**
	 * Main Clan Chat interface
	 * 
	 * @param tda
	 */
	public static void clanChatTab(RSFontSystem[] tda) {
		RSInterface tab = addInterface(18128);
		addHoverButton(18129, &quot;chat&quot;, &quot;clan&quot;, 0, 17, 17, &quot;Join Clan&quot;, -1,
				18130, 1);
		addHoveredButton(18130, &quot;chat&quot;, &quot;clan&quot;, 1, 17, 17, 18131);
		addHoverButton(18132, &quot;chat&quot;, &quot;clan&quot;, 4, 17, 17, &quot;Leave Clan&quot;, -1,
				18133, 5);
		addHoveredButton(18133, &quot;chat&quot;, &quot;clan&quot;, 5, 17, 17, 18134);
		addHoverButton(18251, &quot;chat&quot;, &quot;clan&quot;, 2, 17, 17, &quot;Clan Chat Settings&quot;,
				-1, 18252, 1);
		addHoveredButton(18252, &quot;chat&quot;, &quot;clan&quot;, 3, 17, 17, 18253);
		addSprite(18137, 6, &quot;chat&quot;, &quot;clan&quot;);
		addText(18138, &quot;Clan Chat&quot;, tda, 3, 0xff9b00, true, true);
		addText(18139, &quot;&quot;, tda, 0, 0xff9b00, false, true);
		addText(18140, &quot;&quot;, tda, 0, 0xff9b00, false, true);
		addText(18250, &quot;&quot;, tda, 0, 0xff9b00, false, true);
		addSprite(16126, 4, &quot;SPRITE&quot;, &quot;clan&quot;);
		tab.totalChildren(13);
		tab.child(0, 16126, 0, 236);
		tab.child(1, 16126, 0, 59);
		tab.child(2, 18137, 0, 62);
		tab.child(3, 18143, 0, 62);
		tab.child(4, 18129, 8, 239);
		tab.child(5, 18130, 8, 240);
		tab.child(6, 18132, 25, 239);
		tab.child(7, 18133, 25, 240);
		tab.child(8, 18138, 95, 1);
		tab.child(9, 18140, 10, 23);
		tab.child(10, 18250, 10, 36);
		tab.child(11, 18251, 42, 239);
		tab.child(12, 18252, 42, 239);
		/* Text area */
		RSInterface list = addInterface(18143);
		list.totalChildren(100);
		for (int i = 18144; i &lt;= 18244; i++) {
			addText(i, &quot;Slot&quot;, tda, 0, 0xffffff, false, true);
		}
		for (int id = 18144, i = 0; id &lt;= 18243 &amp;&amp; i &lt;= 99; id++, i++) {
			list.children[i] = id;
			list.childX[i] = 5;
			for (int id2 = 18144, i2 = 1; id2 &lt;= 18243 &amp;&amp; i2 &lt;= 99; id2++, i2++) {
				list.childY[0] = 2;
				list.childY[i2] = list.childY[i2 - 1] + 14;
			}
		}
		list.height = 174;
		list.width = 174;
		list.scrollMax = 1405;
	}[/CODE]

[CODE]package org.niobe.world.content;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;

import org.niobe.util.RS2Utils;
import org.niobe.world.Player;
import org.niobe.world.World;

/**
 * This file manages clan channels, where members can interact with each other, doing things such as
 * activities, lootshare and coinshare, events and so on with the convenience of easier communication.
 * 
 * @author relex lawl
 *
 */

public class ClanChat {
	
	/**
	 * The directory where the clan files will be stored upon server shutdown.
	 */
	private static final String DIRECTORY = &quot;./data/clans/&quot;;
	
	/**
	 * The list containing all the valid clan chat channels in the world.
	 */
	private static List&lt;ClanChat&gt; clans = new ArrayList&lt;ClanChat&gt;();
	
	/**
	 * Loads all the clan chat channel data from files in the {@code DIRECTORY} folder.
	 */
	public static void init() {
		long startup = System.currentTimeMillis();
		try {
			System.out.println(&quot;Loading clan chat channels...&quot;);
			File directory = new File(DIRECTORY);
			for (File files : directory.listFiles()) {
				DataInputStream input = new DataInputStream(new FileInputStream(DIRECTORY + files.getName()));
				/*
				 * Initializes clan instance with the name(UTF) read on input.
				 */
				ClanChat clan = new ClanChat(input.readUTF());
				/*
				 * Reads the clan&#39;s basic info; 
				 * name, rank requirement to join, rank requirement to speak and rank requirement to kick, respectively.
				 */
				clan.name = input.readUTF();
				clan.minimalRankToJoin = Rank.forId(input.read());
				clan.minimalRankToSpeak = Rank.forId(input.read());
				clan.minimalRankToKick = Rank.forId(input.read());
				/*
				 * Reads the amount of rank members the clan has and loops through the amount.
				 */
				for (int i = 0; i &lt; input.read(); i++) {
					/*
					 * Gets the ranked member&#39;s name and rank integer and adds it to {@code clan.ranks} list.
					 */
					String name = input.readUTF();
					int rankId = input.read();
					Member member = new Member(clan, name);
					member.rank = Rank.forId(rankId);
					clan.ranks.put(member.name, member.rank);
				}
				/*
				 * Reads the amount of kick delays the clan has and loops through the amount.
				 */
				for (int i = 0; i &lt; input.read(); i++) {
					/*
					 * Gets the name of the ex-member who was kicked and the delay in milliseconds.
					 */
					String name = input.readUTF();
					long delay = input.readLong();
					clan.kickDelays.put(name, delay);
				}
				/*
				 * Adds the {@code clan} instance to {@code clans} list.
				 */
				clans.add(clan);
			}
			System.out.println(&quot;Loaded &quot; + clans.size() + &quot; clan chat channels in &quot; + (System.currentTimeMillis() - startup) + &quot;ms.&quot;);
		} catch (IOException exception) {
			
		}
	}
	
	/**
	 * Saves all the clan chat channel data upon server
	 * shut down to the {@code DIRECTORY} folder.
	 */
	public static void save() {
		try {
			for (ClanChat clans : ClanChat.clans) {
				DataOutputStream output = new DataOutputStream(new FileOutputStream(DIRECTORY + clans.name));
				/*
				 * Writing the clans basic info; owner&#39;s user name and the clan&#39;s name.
				 */
				output.writeUTF(clans.owner);
				output.writeUTF(clans.name);
				/*
				 * Writing the clan&#39;s rank requirements (in integer form) to: join, talk and kick, respectively.
				 */
				output.write(clans.minimalRankToJoin.ordinal());
				output.write(clans.minimalRankToSpeak.ordinal());
				output.write(clans.minimalRankToKick.ordinal());
				/*
				 * Writing the amount of ranked players to later loop through.
				 */
				output.write(clans.ranks.size());
				/*
				 * Looping through the clan&#39;s ranked members and saving their name as well as their rank integer.
				 */
				Iterator&lt;?&gt; rankIterator = clans.ranks.entrySet().iterator();
				while (rankIterator.hasNext()) {
					@SuppressWarnings(&quot;rawtypes&quot;)
					Entry entry = (Entry) rankIterator.next();
					String name = (String) entry.getKey();
					int rank = ((Rank) entry.getValue()).ordinal();
					output.writeUTF(name);
					output.write(rank);
					rankIterator.remove();
				}
				/*
				 * Writing the amount of members currently banned from the channel.
				 */
				output.write(clans.kickDelays.size());
				/*
				 * Iterating through the kick delays map.
				 */
				Iterator&lt;?&gt; iterator = clans.kickDelays.entrySet().iterator();
				while (iterator.hasNext()) {
					@SuppressWarnings(&quot;rawtypes&quot;)
					Map.Entry entry = (Map.Entry) iterator.next();
					String name = (String) entry.getKey();
					long delay = (Long) entry.getValue();
					output.writeUTF(name);
					output.writeLong(delay);
					iterator.remove();
				}
				output.close();
			}
		} catch (IOException exception) {
			exception.printStackTrace();
		}
	}
	
	/**
	 * Creates a new clan, if {@code clans} already contains 
	 * the clan, it will not be created.
	 * 
	 * @param player	Player attempting to create a new clan.
	 */
	public static void create(Player player) {
		ClanChat clan = new ClanChat(player.getUsername());
		if (clans.contains(clan)) {
			player.getPacketSender().sendMessage(&quot;This channel already exists!&quot;);
		} else {
			clan.name = player.getUsername();
			clans.add(clan);
			player.getPacketSender().sendMessage(&quot;You have created your channel.&quot;);
		}
	}
	
	/**
	 * Manages a player attempting to join a clan chat with said {@code name}.
	 * 
	 * @param player	Player attempting to join clan chat channel.
	 * @param name		The name {@param player} has entered.
	 */
	public static void join(Player player, String name) {
		player.getPacketSender().sendMessage(&quot;Attempting to join channel...&quot;);
		ClanChat clan = new ClanChat(name);
		if (clans.contains(clan)) {
			if (!canJoin(player, clan)) {
				return;
			}
			if (clan.members.size() &lt; 100) {
				clan.members.add(new Member(clan, player.getUsername()));
				player.getAttributes().put(&quot;clan_chat&quot;, clan);
				updateMembersList(player, clan, true);
				player.getPacketSender().sendMessage(&quot;@ora@Now talking in channel &quot; + clan.name);
			} else {
				player.getPacketSender().sendMessage(&quot;This channel is currently full!&quot;);
			}
		} else {
			player.getPacketSender().sendMessage(&quot;This channel does not exists!&quot;);
		}
	}
	
	/**
	 * Sends the text spoken by {@code player} to all {@code clan.members} in channel.
	 * 
	 * @param player	Player currently speaking.
	 * @param text		The text player has sent.
	 */
	public static void speak(Player player, String text) {
		RS2Utils.formatString(text);
		ClanChat clan = (ClanChat) player.getAttributes().get(&quot;clan_chat&quot;);
		if (!clan.equals(null)) {
			if (!canSpeak(player, clan)) {
				return;
			}
			for (Member members : clan.members) {
				Player players = World.getPlayerForName(members.name);
				String sprite = (clan.ranks.get(player.getUsername()).ordinal() &gt; 0 ? &quot;&lt;img=&quot; + clan.ranks.get(player.getUsername()).ordinal() + &quot;&gt;&quot; : &quot;&quot;);
				players.getPacketSender().sendMessage(sprite + &quot;[&quot; + player.getUsername() + &quot;]: &quot; + text);
			}
		} else {
			player.getPacketSender().sendMessage(&quot;You are not currently in a channel.&quot;);
		}
	}
	
	/**
	 * Handles {@code player}&#39;s attempt to kick {@code target} from the channel.
	 * 
	 * @param player	Player attempting to kick {@code target}.
	 * @param target	Player being kicked from channel.
	 */
	public static void kick(Player player, Player target) {
		if (target == null) {
			player.getPacketSender().sendMessage(&quot;This player is not currently in the channel.&quot;);
			return;
		}
		ClanChat clan = (ClanChat) player.getAttributes().get(&quot;clan_chat&quot;);
		if (!clan.equals(null)) {
			Member targetMember = new Member(clan, target.getUsername());
			if (clan.members.contains(targetMember)) {
				if (!canKick(player, target, clan)) {
					return;
				}
				clan.members.remove(targetMember);
				player.getAttributes().remove(&quot;clan_chat&quot;);
				clan.kickDelays.put(player.getUsername(), System.currentTimeMillis());
				updateMembersList(target, clan, false);
			} else {
				player.getPacketSender().sendMessage(&quot;This player is not currently in the channel.&quot;);
			}
		} else {
			player.getPacketSender().sendMessage(&quot;You are not currently in a channel.&quot;);
		}
	}
	
	/**
	 * Handles the promotion of {@code target} in a channel.
	 * 
	 * @param player	Owner of the clan chat channel.
	 * @param target	The player who is being given the promotion/demotion.
	 * @param rank		The rank to give {@code target}.
	 */
	public static void giveRank(Player player, Player target, Rank rank) {
		ClanChat clan = new ClanChat(player.getUsername());
		Member targetMember = new Member(clan, target.getUsername());
		if (clans.contains(clan)) {
			if (rank.equals(Rank.NONE)) {
				if (clan.ranks.containsKey(targetMember.name)) {
					clan.ranks.remove(targetMember.name);
				}
			} else {
				clan.ranks.put(targetMember.name, rank);
			}
		} else {
			player.getPacketSender().sendMessage(&quot;You do not have a channel.&quot;);
		}
	}
	
	/**
	 * Updates the clan&#39;s interface child id&#39;s to the members&#39; names.
	 * 
	 * @param player	The player who is entering/leaving {@code clan}.
	 * @param clan		Said clan {@code player} is joining or leaving.
	 * @param join		Player joining {@code clan}?
	 */
	private static void updateMembersList(Player player, ClanChat clan, boolean join) {
		int childId = 18144;
		if (join) {
			player.getPacketSender().sendString(18140, &quot;Talking in: &quot; + clan.name);
			for (Member member : clan.members) {
				int rankId = clan.ranks.get(member.name) != null ? clan.ranks.get(member.name).ordinal() : 0; //TODO: in client they will be img=rank.ordinal() + 10
				String rank = (rankId &gt; 0 ? &quot;&lt;img=&quot; + (rankId + 10) + &quot;&gt;&quot; : &quot;&quot;);
				Player memberPlayer = World.getPlayerForName(member.name);
				if (memberPlayer.getRights() &gt; 0)
					rank = &quot;&lt;img=&quot; + memberPlayer.getRights() + &quot;&gt;&quot;;
				memberPlayer.getPacketSender().sendString(childId, rank + member.name);
				childId++;
			}
		} else {
			player.getPacketSender().sendString(18140, &quot;Talking in: &quot;);		
			for (int i = childId; i &lt;= (childId + 100); i++) {
				player.getPacketSender().sendString(i, &quot;&quot;);
			}
		}
	}
	
	/**
	 * Checks if {@code player} has the required attributes to join {@code clan}.
	 * 
	 * @param player	Player attempting to join clan chat channel.
	 * @param clan		The clan chat channel {@code player} is attempting to join.
	 * @return			Can player can join the channel.
	 */
	private static boolean canJoin(Player player, ClanChat clan) {
		if (player.getAttributes().get(&quot;clan_chat&quot;) != null) {
			player.getPacketSender().sendMessage(&quot;You are already in a channel!&quot;);
			return false;
		}
		if (clan.kickDelays.get(player.getUsername()) != null &amp;&amp; System.currentTimeMillis() - clan.kickDelays.get(player.getUsername()) &gt; 0) {
			player.getPacketSender().sendMessage(&quot;You are currently banned from this channel!&quot;);
			return false;
		}
		if (clan.minimalRankToJoin.ordinal() &lt;= 0)
			return true;
		int rankId = clan.ranks.get(player.getUsername()).ordinal();
		if (clan.minimalRankToJoin.ordinal() &gt; rankId) {
			player.getPacketSender().sendMessage(&quot;You do not have the required rank to join this channel.&quot;);
			return false;
		}
		return true;
	}
	
	/**
	 * Checks if {@code player} has the attributes required to speak in {@code clan}.
	 * 
	 * @param player	Player attempting to speak in said clan.
	 * @param clan		Said ClanChat player is attempting to speak in.
	 * @return			Can player speak in channel.
	 */
	private static boolean canSpeak(Player player, ClanChat clan) {
		//TODO: Check if player is muted
		if (clan.minimalRankToSpeak.ordinal() &lt;= 0)
			return true;
		int rankId = clan.ranks.get(player.getUsername()).ordinal();
		if (clan.minimalRankToSpeak.ordinal() &gt; rankId) {
			player.getPacketSender().sendMessage(&quot;You do not have the required rank to talk.&quot;);
			return false;
		}
		return true;
	}
	
	/**
	 * Checks if {@code player} has the attributes required to kick {@code target}.
	 * 
	 * @param player	Player attempting to kick {@code target}.
	 * @param target	Player being kicked from {@code clan}.
	 * @param clan		Said ClanChat player&#39;s are participating in.
	 * @return			Can {@code player} kick {@code target}.
	 */
	private static boolean canKick(Player player, Player target, ClanChat clan) {
		int rankId = clan.ranks.get(player.getUsername()).ordinal();
		int targetRankId = clan.ranks.get(target.getUsername()).ordinal();
		if (rankId &lt;= 0)
			return false;
		if (clan.minimalRankToKick.ordinal() &gt; rankId) {
			player.getPacketSender().sendMessage(&quot;You do not have the required rank to kick.&quot;);
			return false;
		}
		if (targetRankId &gt; rankId) {
			player.getPacketSender().sendMessage(&quot;You cannot kick this player!&quot;);
			return false;
		}
		return true;
	}
	
	/**
	 * The clan chat constructor.
	 * @param owner		The name of the owner.
	 */
	private ClanChat(String owner) {
		this.owner = owner;
	}
	
	/**
	 * The name of the owner.
	 */
	private String owner;
	
	/**
	 * The name of the clan chat.
	 */
	private String name;
	
	/**
	 * The minimal rank required to join this channel.
	 */
	private Rank minimalRankToJoin = Rank.NONE;
	
	/**
	 * The minimal rank required to kick others from this channel.
	 */
	private Rank minimalRankToKick = Rank.OWNER;
	
	/**
	 * The minimal rank required to speak in this channel.
	 */
	private Rank minimalRankToSpeak = Rank.NONE;
	
	/**
	 * The list containing all current members in this channel.
	 */
	private List&lt;Member&gt; members = new ArrayList&lt;Member&gt;(100);
	
	/**
	 * The map containing the rank members of the channel.
	 */
	private Map&lt;String, Rank&gt; ranks = new HashMap&lt;String, Rank&gt;();
	
	/**
	 * The map containing all the kicked members and time (milliseconds) in which they were kicked.
	 */
	private Map&lt;String, Long&gt; kickDelays = new HashMap&lt;String, Long&gt;();
	
	@Override
	public boolean equals(Object clanChat) {
		if (((ClanChat)clanChat).owner.equalsIgnoreCase(owner)) {
			name = ((ClanChat)clanChat).name;
			return true;
		}
		return false;
	}
	
	/**
	 * This enum contains all the valid ranks
	 * existing in the clan chat channel.
	 * 
	 * @author relex lawl
	 *
	 */
	public enum Rank {
		/*
		 * A regular non-ranked member.
		 */
		NONE,
		
		/*
		 * One of the owner&#39;s friends. 
		 */
		FRIEND,
		
		/*
		 * The lowest-ranked member.
		 */
		RECRUIT,
		
		/*
		 * A low-ranked member.
		 */
		CORPORAL,
		
		/*
		 * An intermediate-ranked member.
		 */
		SERGEANT,
		
		/*
		 * A high-ranked member.
		 */
		CAPTAIN,
		
		/*
		 * The highest-ranked member, excluding the owner.
		 */
		GENERAL,
		
		/*
		 * The owner of the clan chat channel, who has the highest priority of said clan.
		 */
		OWNER;
		
		/**
		 * Loops through all the rank objects until one with the same value (ordinal())
		 * is matched with {@code id}.
		 * 
		 * @param id	The int to match to the rank values (ordinal()).
		 * @return		The rank object matched.
		 */
		private static Rank forId(int id) {
			for (Rank rank : Rank.values()) {
				if (rank.ordinal() == id) {
					return rank;
				}
			}
			return null;
		}
	}
	
	/**
	 * An inner class, which defines a specific member in a clan chat channel.
	 * 
	 * @author relex lawl
	 *
	 */
	private static class Member {
		
		/**
		 * The member&#39;s constructor.
		 * 
		 * @param clanChat	The clan chat channel to which member is belonging to.
		 * @param name		The user name of the member.
		 */
		private Member(ClanChat clanChat, String name) {
			this.clanChat = clanChat;
			this.name = name;
		}
		
		/**
		 * The member&#39;s clan chat channel to which they belong.
		 */
		@SuppressWarnings(&quot;unused&quot;)
		private ClanChat clanChat;
		
		/**
		 * The user name of the member.
		 */
		private String name;
		
		/**
		 * The member&#39;s rank in {@code clanChat}.
		 */
		private Rank rank = Rank.NONE;
	}
}[/CODE]</description>
    
    <lastBuildDate>Sun, 11 Nov 2012 09:43:48 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/better-clan-chats-90/466169.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Better Clan Chats [~90%?]</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>Just skimmed through it, good job, I would have done a few parts differently but, eh.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/better-clan-chats-90/466169/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/better-clan-chats-90/466169/4</link>
        <pubDate>Sun, 11 Nov 2012 09:43:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466169-4</guid>
        <source url="https://forum.moparisthebest.com/t/better-clan-chats-90/466169.rss">Better Clan Chats [~90%?]</source>
      </item>
      <item>
        <title>Better Clan Chats [~90%?]</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <p>Not bad.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/cool.png?v=5" title=":cool:" class="emoji" alt=":cool:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/better-clan-chats-90/466169/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/better-clan-chats-90/466169/3</link>
        <pubDate>Tue, 06 Nov 2012 01:50:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466169-3</guid>
        <source url="https://forum.moparisthebest.com/t/better-clan-chats-90/466169.rss">Better Clan Chats [~90%?]</source>
      </item>
      <item>
        <title>Better Clan Chats [~90%?]</title>
        <dc:creator><![CDATA[@I_am_beast I am beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_am_beast">@I_am_beast</a> wrote:</p>
          <blockquote>
              <p>Great release mate! Thanks for sharing. I will implement this ASAP. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/better-clan-chats-90/466169/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/better-clan-chats-90/466169/2</link>
        <pubDate>Tue, 06 Nov 2012 01:48:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466169-2</guid>
        <source url="https://forum.moparisthebest.com/t/better-clan-chats-90/466169.rss">Better Clan Chats [~90%?]</source>
      </item>
      <item>
        <title>Better Clan Chats [~90%?]</title>
        <dc:creator><![CDATA[@relexlawl relexlawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/relexlawl">@relexlawl</a> wrote:</p>
          <blockquote>
              <p>I haven’t released anything in a while and since I already posted the half-assed one somewhere thought I would just release it.</p>
<p>This is, I suppose, still considered a base since it’s not done, but pretty sure it has everything needed to be completed.</p>
<p>This was made in LightRune, but if you know what you’re doing you can easily edit it to work with any framework, should be relatively easy since you would just need to change things like</p>
<p>player.getPacketSender().sendMessage(…);</p>
<p>Most of the things are handled inside the class itself, as it should.</p>
<ol>
<li>
<p>I haven’t completely tested this, just did it through commands, but it seemed fine, if someone finds a bug, post it here and I’ll fix it.</p>
</li>
<li>
<p>You will need to edit updateMembersList to fit your client-sided clan chat interface, if you want it here (all credits to [user]Honey Badger[/user] and/or [user]Galkon[/user], not sure who made it)</p>
</li>
</ol>
<p><code>/**
	 * Main Clan Chat interface
	 * 
	 * @param tda
	 */
	public static void clanChatTab(RSFontSystem[] tda) {
		RSInterface tab = addInterface(18128);
		addHoverButton(18129, "chat", "clan", 0, 17, 17, "Join Clan", -1,
				18130, 1);
		addHoveredButton(18130, "chat", "clan", 1, 17, 17, 18131);
		addHoverButton(18132, "chat", "clan", 4, 17, 17, "Leave Clan", -1,
				18133, 5);
		addHoveredButton(18133, "chat", "clan", 5, 17, 17, 18134);
		addHoverButton(18251, "chat", "clan", 2, 17, 17, "Clan Chat Settings",
				-1, 18252, 1);
		addHoveredButton(18252, "chat", "clan", 3, 17, 17, 18253);
		addSprite(18137, 6, "chat", "clan");
		addText(18138, "Clan Chat", tda, 3, 0xff9b00, true, true);
		addText(18139, "", tda, 0, 0xff9b00, false, true);
		addText(18140, "", tda, 0, 0xff9b00, false, true);
		addText(18250, "", tda, 0, 0xff9b00, false, true);
		addSprite(16126, 4, "SPRITE", "clan");
		tab.totalChildren(13);
		tab.child(0, 16126, 0, 236);
		tab.child(1, 16126, 0, 59);
		tab.child(2, 18137, 0, 62);
		tab.child(3, 18143, 0, 62);
		tab.child(4, 18129, 8, 239);
		tab.child(5, 18130, 8, 240);
		tab.child(6, 18132, 25, 239);
		tab.child(7, 18133, 25, 240);
		tab.child(8, 18138, 95, 1);
		tab.child(9, 18140, 10, 23);
		tab.child(10, 18250, 10, 36);
		tab.child(11, 18251, 42, 239);
		tab.child(12, 18252, 42, 239);
		/* Text area */
		RSInterface list = addInterface(18143);
		list.totalChildren(100);
		for (int i = 18144; i &lt;= 18244; i++) {
			addText(i, "Slot", tda, 0, 0xffffff, false, true);
		}
		for (int id = 18144, i = 0; id &lt;= 18243 &amp;&amp; i &lt;= 99; id++, i++) {
			list.children[i] = id;
			list.childX[i] = 5;
			for (int id2 = 18144, i2 = 1; id2 &lt;= 18243 &amp;&amp; i2 &lt;= 99; id2++, i2++) {
				list.childY[0] = 2;
				list.childY[i2] = list.childY[i2 - 1] + 14;
			}
		}
		list.height = 174;
		list.width = 174;
		list.scrollMax = 1405;
	}</code></p>
<p>[CODE]package org.niobe.world.content;</p>
<p>import java.io.DataInputStream;<br>
import java.io.DataOutputStream;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.util.ArrayList;<br>
import java.util.HashMap;<br>
import java.util.Iterator;<br>
import java.util.List;<br>
import java.util.Map;<br>
import java.util.Map.Entry;</p>
<p>import org.niobe.util.RS2Utils;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.World;</p>
<p>/**</p>
<ul>
<li>This file manages clan channels, where members can interact with each other, doing things such as</li>
<li>activities, lootshare and coinshare, events and so on with the convenience of easier communication.</li>
<li>
</li>
<li>
<span class="mention">@author</span> relex lawl</li>
<li>
</li>
</ul>
<p>*/</p>
<p>public class ClanChat {</p>
<pre><code>/**
 * The directory where the clan files will be stored upon server shutdown.
 */
private static final String DIRECTORY = "./data/clans/";

/**
 * The list containing all the valid clan chat channels in the world.
 */
private static List&lt;ClanChat&gt; clans = new ArrayList&lt;ClanChat&gt;();

/**
 * Loads all the clan chat channel data from files in the {@code DIRECTORY} folder.
 */
public static void init() {
	long startup = System.currentTimeMillis();
	try {
		System.out.println("Loading clan chat channels...");
		File directory = new File(DIRECTORY);
		for (File files : directory.listFiles()) {
			DataInputStream input = new DataInputStream(new FileInputStream(DIRECTORY + files.getName()));
			/*
			 * Initializes clan instance with the name(UTF) read on input.
			 */
			ClanChat clan = new ClanChat(input.readUTF());
			/*
			 * Reads the clan's basic info; 
			 * name, rank requirement to join, rank requirement to speak and rank requirement to kick, respectively.
			 */
			clan.name = input.readUTF();
			clan.minimalRankToJoin = Rank.forId(input.read());
			clan.minimalRankToSpeak = Rank.forId(input.read());
			clan.minimalRankToKick = Rank.forId(input.read());
			/*
			 * Reads the amount of rank members the clan has and loops through the amount.
			 */
			for (int i = 0; i &lt; input.read(); i++) {
				/*
				 * Gets the ranked member's name and rank integer and adds it to {@code clan.ranks} list.
				 */
				String name = input.readUTF();
				int rankId = input.read();
				Member member = new Member(clan, name);
				member.rank = Rank.forId(rankId);
				clan.ranks.put(member.name, member.rank);
			}
			/*
			 * Reads the amount of kick delays the clan has and loops through the amount.
			 */
			for (int i = 0; i &lt; input.read(); i++) {
				/*
				 * Gets the name of the ex-member who was kicked and the delay in milliseconds.
				 */
				String name = input.readUTF();
				long delay = input.readLong();
				clan.kickDelays.put(name, delay);
			}
			/*
			 * Adds the {@code clan} instance to {@code clans} list.
			 */
			clans.add(clan);
		}
		System.out.println("Loaded " + clans.size() + " clan chat channels in " + (System.currentTimeMillis() - startup) + "ms.");
	} catch (IOException exception) {
		
	}
}

/**
 * Saves all the clan chat channel data upon server
 * shut down to the {@code DIRECTORY} folder.
 */
public static void save() {
	try {
		for (ClanChat clans : ClanChat.clans) {
			DataOutputStream output = new DataOutputStream(new FileOutputStream(DIRECTORY + clans.name));
			/*
			 * Writing the clans basic info; owner's user name and the clan's name.
			 */
			output.writeUTF(clans.owner);
			output.writeUTF(clans.name);
			/*
			 * Writing the clan's rank requirements (in integer form) to: join, talk and kick, respectively.
			 */
			output.write(clans.minimalRankToJoin.ordinal());
			output.write(clans.minimalRankToSpeak.ordinal());
			output.write(clans.minimalRankToKick.ordinal());
			/*
			 * Writing the amount of ranked players to later loop through.
			 */
			output.write(clans.ranks.size());
			/*
			 * Looping through the clan's ranked members and saving their name as well as their rank integer.
			 */
			Iterator&lt;?&gt; rankIterator = clans.ranks.entrySet().iterator();
			while (rankIterator.hasNext()) {
				@SuppressWarnings("rawtypes")
				Entry entry = (Entry) rankIterator.next();
				String name = (String) entry.getKey();
				int rank = ((Rank) entry.getValue()).ordinal();
				output.writeUTF(name);
				output.write(rank);
				rankIterator.remove();
			}
			/*
			 * Writing the amount of members currently banned from the channel.
			 */
			output.write(clans.kickDelays.size());
			/*
			 * Iterating through the kick delays map.
			 */
			Iterator&lt;?&gt; iterator = clans.kickDelays.entrySet().iterator();
			while (iterator.hasNext()) {
				@SuppressWarnings("rawtypes")
				Map.Entry entry = (Map.Entry) iterator.next();
				String name = (String) entry.getKey();
				long delay = (Long) entry.getValue();
				output.writeUTF(name);
				output.writeLong(delay);
				iterator.remove();
			}
			output.close();
		}
	} catch (IOException exception) {
		exception.printStackTrace();
	}
}

/**
 * Creates a new clan, if {@code clans} already contains 
 * the clan, it will not be created.
 * 
 * @param player	Player attempting to create a new clan.
 */
public static void create(Player player) {
	ClanChat clan = new ClanChat(player.getUsername());
	if (clans.contains(clan)) {
		player.getPacketSender().sendMessage("This channel already exists!");
	} else {
		clan.name = player.getUsername();
		clans.add(clan);
		player.getPacketSender().sendMessage("You have created your channel.");
	}
}

/**
 * Manages a player attempting to join a clan chat with said {@code name}.
 * 
 * @param player	Player attempting to join clan chat channel.
 * @param name		The name {@param player} has entered.
 */
public static void join(Player player, String name) {
	player.getPacketSender().sendMessage("Attempting to join channel...");
	ClanChat clan = new ClanChat(name);
	if (clans.contains(clan)) {
		if (!canJoin(player, clan)) {
			return;
		}
		if (clan.members.size() &lt; 100) {
			clan.members.add(new Member(clan, player.getUsername()));
			player.getAttributes().put("clan_chat", clan);
			updateMembersList(player, clan, true);
			player.getPacketSender().sendMessage("@ora@Now talking in channel " + clan.name);
		} else {
			player.getPacketSender().sendMessage("This channel is currently full!");
		}
	} else {
		player.getPacketSender().sendMessage("This channel does not exists!");
	}
}

/**
 * Sends the text spoken by {@code player} to all {@code clan.members} in channel.
 * 
 * @param player	Player currently speaking.
 * @param text		The text player has sent.
 */
public static void speak(Player player, String text) {
	RS2Utils.formatString(text);
	ClanChat clan = (ClanChat) player.getAttributes().get("clan_chat");
	if (!clan.equals(null)) {
		if (!canSpeak(player, clan)) {
			return;
		}
		for (Member members : clan.members) {
			Player players = World.getPlayerForName(members.name);
			String sprite = (clan.ranks.get(player.getUsername()).ordinal() &gt; 0 ? "&lt;img=" + clan.ranks.get(player.getUsername()).ordinal() + "&gt;" : "");
			players.getPacketSender().sendMessage(sprite + "[" + player.getUsername() + "]: " + text);
		}
	} else {
		player.getPacketSender().sendMessage("You are not currently in a channel.");
	}
}

/**
 * Handles {@code player}'s attempt to kick {@code target} from the channel.
 * 
 * @param player	Player attempting to kick {@code target}.
 * @param target	Player being kicked from channel.
 */
public static void kick(Player player, Player target) {
	if (target == null) {
		player.getPacketSender().sendMessage("This player is not currently in the channel.");
		return;
	}
	ClanChat clan = (ClanChat) player.getAttributes().get("clan_chat");
	if (!clan.equals(null)) {
		Member targetMember = new Member(clan, target.getUsername());
		if (clan.members.contains(targetMember)) {
			if (!canKick(player, target, clan)) {
				return;
			}
			clan.members.remove(targetMember);
			player.getAttributes().remove("clan_chat");
			clan.kickDelays.put(player.getUsername(), System.currentTimeMillis());
			updateMembersList(target, clan, false);
		} else {
			player.getPacketSender().sendMessage("This player is not currently in the channel.");
		}
	} else {
		player.getPacketSender().sendMessage("You are not currently in a channel.");
	}
}

/**
 * Handles the promotion of {@code target} in a channel.
 * 
 * @param player	Owner of the clan chat channel.
 * @param target	The player who is being given the promotion/demotion.
 * @param rank		The rank to give {@code target}.
 */
public static void giveRank(Player player, Player target, Rank rank) {
	ClanChat clan = new ClanChat(player.getUsername());
	Member targetMember = new Member(clan, target.getUsername());
	if (clans.contains(clan)) {
		if (rank.equals(Rank.NONE)) {
			if (clan.ranks.containsKey(targetMember.name)) {
				clan.ranks.remove(targetMember.name);
			}
		} else {
			clan.ranks.put(targetMember.name, rank);
		}
	} else {
		player.getPacketSender().sendMessage("You do not have a channel.");
	}
}

/**
 * Updates the clan's interface child id's to the members' names.
 * 
 * @param player	The player who is entering/leaving {@code clan}.
 * @param clan		Said clan {@code player} is joining or leaving.
 * @param join		Player joining {@code clan}?
 */
private static void updateMembersList(Player player, ClanChat clan, boolean join) {
	int childId = 18144;
	if (join) {
		player.getPacketSender().sendString(18140, "Talking in: " + clan.name);
		for (Member member : clan.members) {
			int rankId = clan.ranks.get(member.name) != null ? clan.ranks.get(member.name).ordinal() : 0; //TODO: in client they will be img=rank.ordinal() + 10
			String rank = (rankId &gt; 0 ? "&lt;img=" + (rankId + 10) + "&gt;" : "");
			Player memberPlayer = World.getPlayerForName(member.name);
			if (memberPlayer.getRights() &gt; 0)
				rank = "&lt;img=" + memberPlayer.getRights() + "&gt;";
			memberPlayer.getPacketSender().sendString(childId, rank + member.name);
			childId++;
		}
	} else {
		player.getPacketSender().sendString(18140, "Talking in: ");		
		for (int i = childId; i &lt;= (childId + 100); i++) {
			player.getPacketSender().sendString(i, "");
		}
	}
}

/**
 * Checks if {@code player} has the required attributes to join {@code clan}.
 * 
 * @param player	Player attempting to join clan chat channel.
 * @param clan		The clan chat channel {@code player} is attempting to join.
 * @return			Can player can join the channel.
 */
private static boolean canJoin(Player player, ClanChat clan) {
	if (player.getAttributes().get("clan_chat") != null) {
		player.getPacketSender().sendMessage("You are already in a channel!");
		return false;
	}
	if (clan.kickDelays.get(player.getUsername()) != null &amp;&amp; System.currentTimeMillis() - clan.kickDelays.get(player.getUsername()) &gt; 0) {
		player.getPacketSender().sendMessage("You are currently banned from this channel!");
		return false;
	}
	if (clan.minimalRankToJoin.ordinal() &lt;= 0)
		return true;
	int rankId = clan.ranks.get(player.getUsername()).ordinal();
	if (clan.minimalRankToJoin.ordinal() &gt; rankId) {
		player.getPacketSender().sendMessage("You do not have the required rank to join this channel.");
		return false;
	}
	return true;
}

/**
 * Checks if {@code player} has the attributes required to speak in {@code clan}.
 * 
 * @param player	Player attempting to speak in said clan.
 * @param clan		Said ClanChat player is attempting to speak in.
 * @return			Can player speak in channel.
 */
private static boolean canSpeak(Player player, ClanChat clan) {
	//TODO: Check if player is muted
	if (clan.minimalRankToSpeak.ordinal() &lt;= 0)
		return true;
	int rankId = clan.ranks.get(player.getUsername()).ordinal();
	if (clan.minimalRankToSpeak.ordinal() &gt; rankId) {
		player.getPacketSender().sendMessage("You do not have the required rank to talk.");
		return false;
	}
	return true;
}

/**
 * Checks if {@code player} has the attributes required to kick {@code target}.
 * 
 * @param player	Player attempting to kick {@code target}.
 * @param target	Player being kicked from {@code clan}.
 * @param clan		Said ClanChat player's are participating in.
 * @return			Can {@code player} kick {@code target}.
 */
private static boolean canKick(Player player, Player target, ClanChat clan) {
	int rankId = clan.ranks.get(player.getUsername()).ordinal();
	int targetRankId = clan.ranks.get(target.getUsername()).ordinal();
	if (rankId &lt;= 0)
		return false;
	if (clan.minimalRankToKick.ordinal() &gt; rankId) {
		player.getPacketSender().sendMessage("You do not have the required rank to kick.");
		return false;
	}
	if (targetRankId &gt; rankId) {
		player.getPacketSender().sendMessage("You cannot kick this player!");
		return false;
	}
	return true;
}

/**
 * The clan chat constructor.
 * @param owner		The name of the owner.
 */
private ClanChat(String owner) {
	this.owner = owner;
}

/**
 * The name of the owner.
 */
private String owner;

/**
 * The name of the clan chat.
 */
private String name;

/**
 * The minimal rank required to join this channel.
 */
private Rank minimalRankToJoin = Rank.NONE;

/**
 * The minimal rank required to kick others from this channel.
 */
private Rank minimalRankToKick = Rank.OWNER;

/**
 * The minimal rank required to speak in this channel.
 */
private Rank minimalRankToSpeak = Rank.NONE;

/**
 * The list containing all current members in this channel.
 */
private List&lt;Member&gt; members = new ArrayList&lt;Member&gt;(100);

/**
 * The map containing the rank members of the channel.
 */
private Map&lt;String, Rank&gt; ranks = new HashMap&lt;String, Rank&gt;();

/**
 * The map containing all the kicked members and time (milliseconds) in which they were kicked.
 */
private Map&lt;String, Long&gt; kickDelays = new HashMap&lt;String, Long&gt;();

@Override
public boolean equals(Object clanChat) {
	if (((ClanChat)clanChat).owner.equalsIgnoreCase(owner)) {
		name = ((ClanChat)clanChat).name;
		return true;
	}
	return false;
}

/**
 * This enum contains all the valid ranks
 * existing in the clan chat channel.
 * 
 * @author relex lawl
 *
 */
public enum Rank {
	/*
	 * A regular non-ranked member.
	 */
	NONE,
	
	/*
	 * One of the owner's friends. 
	 */
	FRIEND,
	
	/*
	 * The lowest-ranked member.
	 */
	RECRUIT,
	
	/*
	 * A low-ranked member.
	 */
	CORPORAL,
	
	/*
	 * An intermediate-ranked member.
	 */
	SERGEANT,
	
	/*
	 * A high-ranked member.
	 */
	CAPTAIN,
	
	/*
	 * The highest-ranked member, excluding the owner.
	 */
	GENERAL,
	
	/*
	 * The owner of the clan chat channel, who has the highest priority of said clan.
	 */
	OWNER;
	
	/**
	 * Loops through all the rank objects until one with the same value (ordinal())
	 * is matched with {@code id}.
	 * 
	 * @param id	The int to match to the rank values (ordinal()).
	 * @return		The rank object matched.
	 */
	private static Rank forId(int id) {
		for (Rank rank : Rank.values()) {
			if (rank.ordinal() == id) {
				return rank;
			}
		}
		return null;
	}
}

/**
 * An inner class, which defines a specific member in a clan chat channel.
 * 
 * @author relex lawl
 *
 */
private static class Member {
	
	/**
	 * The member's constructor.
	 * 
	 * @param clanChat	The clan chat channel to which member is belonging to.
	 * @param name		The user name of the member.
	 */
	private Member(ClanChat clanChat, String name) {
		this.clanChat = clanChat;
		this.name = name;
	}
	
	/**
	 * The member's clan chat channel to which they belong.
	 */
	@SuppressWarnings("unused")
	private ClanChat clanChat;
	
	/**
	 * The user name of the member.
	 */
	private String name;
	
	/**
	 * The member's rank in {@code clanChat}.
	 */
	private Rank rank = Rank.NONE;
}
</code></pre>
<p>}[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/better-clan-chats-90/466169/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/better-clan-chats-90/466169/1</link>
        <pubDate>Mon, 05 Nov 2012 23:48:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-466169-1</guid>
        <source url="https://forum.moparisthebest.com/t/better-clan-chats-90/466169.rss">Better Clan Chats [~90%?]</source>
      </item>
  </channel>
</rss>
