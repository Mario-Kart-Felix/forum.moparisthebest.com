<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Special Attacks Layout</title>
    <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333</link>
    <description>I was bored and decided to write a special attack class. I wrote it in notepad because I&#39;m using a friend&#39;s computer, so I don&#39;t know if there are any errors. This is just one of those &quot;get the gist&quot; kind of things and you go along with it.

It&#39;s just a layout, so if you don&#39;t understand it, then don&#39;t try to copy and paste and expect it to work.
[code=java]
import java.util.HashMap;
import java.util.Map;

/**
 * @author Albert Beaupre
 * 
 * Written June 5, 2013 - 1:47pm
 */
public class Specials {
	
	interface SpecialAttack {
		
		/**
		 * Does the special attack action.
		 * @return if the special attack hits.
		 */
		boolean doSpecAction(Object object);
		
		/**
		 * Gets the special attack amount.
		 * @return the special amount drained.
		 */
		short getSpecAmount();
		
	}
	
	final Map&lt;Integer, SpecialAttack&gt; specialAttacks = new HashMap&lt;Integer, SpecialAttack&gt;();
	
	void loadSpecialAttacks() {
		specialAttacks.put(11694, new SpecialAttack() {
			@Override
			public boolean doSpecAction(Object entity) {
				/** Special attack action here **/
				return true;
			}

			@Override
			public short getSpecAmount() {
				return 500;
			}
		});
	}
	
	void handleSpecialAttacks(Object entity, int itemId) {
		if (!specialAttacks.containsKey(itemId)) {
			System.out.println(&quot;Special attack doesn&#39;t exist!&quot;);
			return;
		}
		specialAttacks.get(itemId).doSpecAction(entity);
		/**
		 * If the entity has the special attack amount...
		 * drain the special attack using
		 * specialAttacks.get(itemId).getSpecAmount()
		 */
	}

}
[/code]</description>
    
    <lastBuildDate>Tue, 06 Aug 2013 17:54:22 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@relexlawl relexlawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/relexlawl">@relexlawl</a> wrote:</p>
          <blockquote>
              <p>Lol at people thinking that loading each thing per class is bad…Not to mention with my implementation it’s not going to affect performance at all and it’s pretty fast…</p>
<p>PS: also lol at the person who thinks there’s something wrong with documenting. [iz3 legend]</p>
<p>[code]package org.niobe.model.weapon;</p>
<p>import java.util.HashMap;<br>
import java.util.LinkedList;<br>
import java.util.List;<br>
import java.util.Map;</p>
<p>import org.niobe.model.definition.ItemDefinition;<br>
import org.niobe.model.weapon.impl.*;</p>
<p>/**</p>
<ul>
<li>
<p>Manages the assignment of specific game items</p>
</li>
<li>
<p>to their corresponding {<a class="mention" href="/u/link">@link</a> Weapon}.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class WeaponLoader {</p>
<p>/**</p>
<ul>
<li>This array contains all the weapons in the world.<br>
*/<br>
private static final Weapon[] weapons = new Weapon[ItemDefinition.getMaxAmountOfItems()];</li>
</ul>
<p>/**</p>
<ul>
<li>This map contains all possible attack interface buttons</li>
<li>along with their index in the attack style, animation and combat style arrays.<br>
*/<br>
private static final Map&lt;Integer, Integer&gt; buttons = new HashMap&lt;Integer, Integer&gt;();</li>
</ul>
<p>/**</p>
<ul>
<li>This list contains all possible special attack bar buttons.<br>
*/<br>
private static final List specialAttackButtons = new LinkedList();</li>
</ul>
<p>/**</p>
<ul>
<li>The default weapon (i.e “none”), used to stop unnecessary instances</li>
<li>of {<a class="mention" href="/u/link">@link</a> org.niobe.model.weapon.impl.DefaultWeapon}.<br>
*/<br>
private static final Weapon DEFAULT_WEAPON = new DefaultWeapon();</li>
</ul>
<p>/**</p>
<ul>
<li>Initializes the weapon definitions and sets the weapons array</li>
<li>with their assigned ‘weapon’ instance.<br>
*/<br>
public static void init() {<br>
int amount = 0;<br>
long startup = System.currentTimeMillis();<br>
System.out.println(“Loading weapon definitions…”);<br>
for (ItemDefinition definition : ItemDefinition.getDefinitions()) {<br>
if (definition == null || !definition.isWeapon())<br>
continue;<br>
String name = definition.getName().toLowerCase();<br>
if (name.contains(“whip”)) {<br>
weapons[definition.getId()] = new AbyssalWhipWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“granite maul”)) {<br>
weapons[definition.getId()] = new GraniteMaulWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“maul”)) {<br>
weapons[definition.getId()] = new MaulWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon claws”)) {<br>
weapons[definition.getId()] = new DragonClawWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“claws”)) {<br>
weapons[definition.getId()] = new ClawWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“staff of light”)) {<br>
weapons[definition.getId()] = new StaffOfLightWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“staff”)) {<br>
weapons[definition.getId()] = new StaffWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“greataxe”)) {<br>
weapons[definition.getId()] = new WarAxeWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“korasi’s sword”)) {<br>
weapons[definition.getId()] = new KorasiSwordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon scimitar”)<br>
&amp;&amp; !name.contains(“corrupt”)) {<br>
weapons[definition.getId()] = new DragonScimitarWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“scimitar”)) {<br>
weapons[definition.getId()] = new ScimitarWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon longsword”)) {<br>
weapons[definition.getId()] = new DragonLongswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“longsword”)) {<br>
weapons[definition.getId()] = new LongswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“rapier”)) {<br>
weapons[definition.getId()] = new RapierWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon dagger”)<br>
&amp;&amp; !name.contains(“corrupt”)) {<br>
weapons[definition.getId()] = new DragonDaggerWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dagger”)) {<br>
weapons[definition.getId()] = new DaggerWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“mace”)) {<br>
weapons[definition.getId()] = new MaceWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon spear”)<br>
&amp;&amp; !name.contains(“corrupt”)) {<br>
weapons[definition.getId()] = new DragonSpearWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“spear”)) {<br>
weapons[definition.getId()] = new SpearWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“battleaxe”)) {<br>
weapons[definition.getId()] = new BattleAxeWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“warhammer”)) {<br>
weapons[definition.getId()] = new WarHammerWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“armadyl godsword”)) {<br>
weapons[definition.getId()] = new ArmadylGodswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“bandos godsword”)) {<br>
weapons[definition.getId()] = new BandosGodswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“saradomin godsword”)) {<br>
weapons[definition.getId()] = new SaradominGodswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“zamorak godsword”)) {<br>
weapons[definition.getId()] = new ZamorakGodswordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“saradomin sword”)) {<br>
weapons[definition.getId()] = new SaradominSwordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“2h”)) {<br>
weapons[definition.getId()] = new TwoHandedSwordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“halberd”)) {<br>
weapons[definition.getId()] = new HalberdWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“bronze sword”) || name.contains(“iron sword”) || name.contains(“white sword”) ||<br>
name.contains(“steel sword”) || name.contains(“adamant sword”) || name.contains(“rune sword”)) {<br>
weapons[definition.getId()] = new ShortSwordWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“dragon pickaxe”)) {<br>
weapons[definition.getId()] = new DragonPickaxeWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“pickaxe”)) {<br>
weapons[definition.getId()] = new PickaxeWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“magic shortbow”)) {<br>
weapons[definition.getId()] = new MagicShortbowWeapon(definition.getId());<br>
amount++;<br>
} else if (name.contains(“shortbow”)) {<br>
weapons[definition.getId()] = new BowWeapon(definition.getId());<br>
amount++;<br>
}<br>
}<br>
System.out.println(“Loaded " + amount + " weapon definition” + (amount != 1 ? “s” : “”) + " in " + (System.currentTimeMillis() - startup) + “ms”);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the ‘weapon’ for said item id.</li>
<li>
<a class="mention" href="/u/param">@param</a> id	The id of the weapon’s game item id.</li>
<li>
<a class="mention" href="/u/return">@return</a>		The weapon with said index located in {<a class="mention" href="/u/link">@link</a> weapons}.<br>
*/<br>
public static Weapon forId(int id) {<br>
return (id &gt;= 0 &amp;&amp; weapons[id] != null ? weapons[id] : DEFAULT_WEAPON);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the valid attack interface buttons for weapons.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The map containing all buttons.<br>
*/<br>
public static Map&lt;Integer, Integer&gt; getButtons() {<br>
return buttons;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the valid special attack bar buttons.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The list containing all valid buttons for attack bar child id.<br>
*/<br>
public static List getSpecialAttackButtons() {<br>
return specialAttackButtons;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Gets the default weapon, which is called when a player is not wielding an item.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The DefaultWeapon instance.<br>
*/<br>
public static Weapon getDefaultWeapon() {<br>
return DEFAULT_WEAPON;<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]package org.niobe.model.weapon.impl;</p>
<p>import org.niobe.world.content.combat.special.SpecialAttack;<br>
import org.niobe.world.content.combat.special.impl.DragonClawSpecialAttack;</p>
<p>/**</p>
<ul>
<li>
<p>An implementation of {<a class="mention" href="/u/link">@link</a> org.niobe.model.weapon.impl.ClawWeapon}</p>
</li>
<li>
<p>representing a pair of dragon claws.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class DragonClawWeapon extends ClawWeapon {</p>
<p>/**</p>
<ul>
<li>The DragonClawWeapon constructor.</li>
<li>
<a class="mention" href="/u/param">@param</a> id	The weapon id.<br>
*/<br>
public DragonClawWeapon(int id) {<br>
super(id);<br>
}</li>
</ul>
<p><a class="mention" href="/u/override">@Override</a><br>
public int[] getInterfaceId() {<br>
return INTERFACE_ID;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public SpecialAttack getSpecialAttack() {<br>
return SPECIAL_ATTACK;<br>
}</p>
<p>/**</p>
<ul>
<li>The interface id’s used for the weapon</li>
<li>game frame tab.<br>
*/<br>
private static final int[] INTERFACE_ID = {<br>
7762,<br>
7800,<br>
7812,<br>
7765,<br>
7766,<br>
7788<br>
};</li>
</ul>
<p>/**</p>
<ul>
<li>The special attack this weapon uses.<br>
*/<br>
private static final SpecialAttack SPECIAL_ATTACK = new DragonClawSpecialAttack();<br>
}[/code]</li>
</ul>
</li>
</ul>
<p><code>/**
	 * Handles the usage of {@link org.niobe.world.content.combat.special.SpecialAttack}
	 * being used by the {@link org.niobe.world.Player}.
	 * @param player	The {@link org.niobe.world.Player} using the {@link org.niobe.world.content.combat.special.SpecialAttack}.
	 * @param victim	The {@link org.niobe.model.GameCharacter} being hit.
	 */
	public static void specialAttack(Player player, GameCharacter victim) {
		Weapon weapon = player.getWeapon();
		SpecialAttack special = weapon.getSpecialAttack();
		if (special != null) {
			special.execute(player, victim);
		}
	}</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/15</link>
        <pubDate>Tue, 06 Aug 2013 17:54:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-15</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Java-RSPS-Noob Java-RSPS-Noob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/java-rsps-noob">@Java-RSPS-Noob</a> wrote:</p>
          <blockquote>
              <p>[quote=“wildskiller, post:12, topic:527333”][quote author=Java-RSPS-Noob link=topic=646079.msg4345331#msg4345331 date=1375791125]<br>
special per class is perfectly fine. It’s not like you are going to have 500  specials happening at once.<br>
[/quote]</p>
<p>You have to think about how many players are going to use their special attack. Every time they click that special attack button, a class is accessed and the lag chance increases.[/quote]On the average leeched server with 10-15 players</p>
<p>You may have two people using a SPECIAL at once. That won’t cause lag. Now if it was 100 people at once…I’m sure.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/14</link>
        <pubDate>Tue, 06 Aug 2013 14:57:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-14</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Ares1 Ares_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ares1">@Ares1</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="11" data-topic="527333">
<div class="title">
<div class="quote-controls"></div>
 Int Bauk:</div>
<blockquote>
<p>each class per weapon will take a while to implement and will be quite frustrating.</p>
</blockquote>
</aside>
<p>It shouldn’t take that much longer if you have the foundation laid out, it should be less frustrating because you can maintain each special easier as it’s in it’s own class.</p>
<p>Edit: Spelling error</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/13</link>
        <pubDate>Tue, 06 Aug 2013 14:23:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-13</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="10" data-topic="527333">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/java-rsps-noob/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Java-RSPS-Noob:</div>
<blockquote>
<p>special per class is perfectly fine. It’s not like you are going to have 500  specials happening at once.</p>
</blockquote>
</aside>
<p>You have to think about how many players are going to use their special attack. Every time they click that special attack button, a class is accessed and the lag chance increases.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/12</link>
        <pubDate>Tue, 06 Aug 2013 13:04:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-12</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <p>each class per weapon will take a while to implement and will be quite frustrating.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/11</link>
        <pubDate>Tue, 06 Aug 2013 12:29:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-11</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Java-RSPS-Noob Java-RSPS-Noob]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/java-rsps-noob">@Java-RSPS-Noob</a> wrote:</p>
          <blockquote>
              <p>special per class is perfectly fine. It’s not like you are going to have 500  specials happening at once.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/10</link>
        <pubDate>Tue, 06 Aug 2013 12:12:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-10</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ares_, post:7, topic:527333”][quote author=Int Bauk link=topic=646079.msg4345058#msg4345058 date=1375748449]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>I like.</p>
</blockquote>
</aside>
<ul>
<li>
</li>
</ul>
</blockquote>
</aside>
<p>yes because class per weapon is good<br>
[/quote]<br>
What’s wrong a special per class?  It’s essential a plugin system, please do tell me what’s so horrible about a special per class.   If you have another way to solve this problem of a special per class please say so and don’t say stuff it all in one class herp derp.[/quote]</p>
<p>externally? it’s personal preference, whether that’d be performance, cluster or organization.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/9</link>
        <pubDate>Tue, 06 Aug 2013 11:30:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-9</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@cjuan2114 cjuan2114]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cjuan2114">@cjuan2114</a> wrote:</p>
          <blockquote>
              <p>[quote=“iz3 legend, post:5, topic:527333”][quote author=relexlawl link=topic=646079.msg4344996#msg4344996 date=1375743353]</p>
<aside class="quote">
<blockquote>
<p>I like.</p>
</blockquote>
</aside>
<p>I don’t…This is worse than how PI handles it. You’re just separating each of (PI’s) switch statements into their own class…Should make it abstract and do something like this:</p>
<p>[code]package org.niobe.world.content.combat.special;</p>
<p>import org.niobe.GameServer;<br>
import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.Damage.Hit;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.model.container.impl.Equipment;<br>
import org.niobe.model.weapon.WeaponSpecialBar;<br>
import org.niobe.task.Task;<br>
import org.niobe.task.impl.PlayerSpecialAmountTask;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.CombatManager;</p>
<p>/**</p>
<ul>
<li>
<p>An abstract class that handles special attacks</p>
</li>
<li>
<p>that can be used in game character combat.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public abstract class SpecialAttack {</p>
<p>/**</p>
<ul>
<li>The animation performed when using this special.<br>
*/<br>
public abstract Animation getAnimation();</li>
</ul>
<p>/**</p>
<ul>
<li>The graphic performed when using this special.<br>
*/<br>
public abstract Graphic getGraphic();</li>
</ul>
<p>/**</p>
<ul>
<li>The amount of {<a class="mention" href="/u/link">@link</a> org.niobe.world.util.GameCharacterFields <span class="hashtag">#getCombatAttributes</span>()<span class="hashtag">#getSpecialAmount</span>()}</li>
<li>energy that will be deducted upon the usage of this special.<br>
*/<br>
public abstract int getSpecialAmount();</li>
</ul>
<p>/**</p>
<ul>
<li>The default strength multiplier.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The strength bonus multiplier.<br>
*/<br>
public double getMultiplier() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default accuracy used to see when a</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} will land</li>
<li>a successful hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The accuracy.<br>
*/<br>
public double getAccuracy() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default extra damage that this special will cause.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>			The extra damage that will be done.<br>
*/<br>
public int getExtraDamage(Player player, GameCharacter victim) {<br>
return 0;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>causes a double hit and flags the victim’s</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.model.UpdateFlag.Flag#DOUBLE_HIT}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the special causes a double hit.<br>
*/<br>
public boolean isDoubleHit() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#getGraphic</span>()}</li>
<li>will be performed on the victim.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the graphic will be shown on the victim.<br>
*/<br>
public boolean victimGraphic() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#execute</span>(Player, GameCharacter)}</li>
<li>will be called upon clicking the special attack bar.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The {<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} using the special.</li>
<li>
<a class="mention" href="/u/return">@return</a>			{<a class="mention" href="/u/code">@code</a> true} if the special is immediately executed when special attack bar is clicked upon.<br>
*/<br>
public boolean isImmediate(Player player) {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>will modify the {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} hit</li>
<li>and will handle said damage through {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#specialAction</span>(Player, GameCharacter, Damage)}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	if {<a class="mention" href="/u/code">@code</a> true} the {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#execute</span>(Player, GameCharacter)} method will not handle the damage being dealt.<br>
*/<br>
public boolean modifyDamage() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default action that can be caused by the special, such as</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.content.combat.special.impl.DragonScimitarSpecialAttack}</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the {<a class="mention" href="/u/link">@link</a> SpecialAttack} implementation.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit with the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> damage	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} being dealt in combat.<br>
*/<br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>The actual execution of the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player performing the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.<br>
*/<br>
public void execute(final Player player, final GameCharacter victim) {<br>
if (player.getFields().getCombatAttributes().getSpecialAttackAmount() &lt; getSpecialAmount()) {<br>
player.getPacketSender().sendMessage(“You don’t have the required special energy to use this attack.”);<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
return;<br>
}<br>
int specialDecrease = getSpecialAmount();<br>
if (player.getEquipment().getItems()[Equipment.RING_SLOT].getDefinition().getName().toLowerCase().equals(“ring of vigour”)) {<br>
specialDecrease -= (specialDecrease / 10); //TODO check if this is correct?<br>
}<br>
if (victim != null) {<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
player.getFields().getCombatAttributes().setAttacking(victim);<br>
}<br>
player.getFields().getCombatAttributes().setSpecialAttackAmount(player.getFields().getCombatAttributes().getSpecialAttackAmount() - specialDecrease);<br>
if (!player.getFields().getCombatAttributes().isRecoveringSpecialAttack()) {<br>
GameServer.getTaskManager().submit(new PlayerSpecialAmountTask(player));<br>
}<br>
player.setEntityInteraction(victim);<br>
player.performAnimation(getAnimation());<br>
if (getGraphic() != null) {<br>
if (victimGraphic() &amp;&amp; victim != null) {<br>
victim.performGraphic(getGraphic());<br>
} else {<br>
player.performGraphic(getGraphic());<br>
}<br>
}<br>
Damage initialDamage = null;<br>
if (victim != null &amp;&amp; !modifyDamage()) {<br>
//TODO max hit formula for ranged and magic<br>
final Hit hit = CombatManager.getHit(player, victim);<br>
if (!isDoubleHit()) {<br>
initialDamage = new Damage(hit);<br>
} else {<br>
initialDamage = new Damage(hit, CombatManager.getHit(player, victim));<br>
}<br>
}<br>
final Damage damage = initialDamage;<br>
specialAction(player, victim, damage);<br>
if (victim != null &amp;&amp; damage != null) {<br>
CombatManager.getCombatAction(player).hit(player, victim, damage);<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
} else {<br>
GameServer.getTaskManager().submit(new Task() {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void execute() {<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
stop();<br>
}<br>
}	<br>
});<br>
}<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
}<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]package org.niobe.world.content.combat.special.impl;</p>
<p>import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.special.SpecialAttack;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an abyssal whip special attack.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class AbyssalWhipSpecialAttack extends SpecialAttack {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return ANIMATION;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Graphic getGraphic() {<br>
return GRAPHIC;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getSpecialAmount() {<br>
return 50;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean victimGraphic() {<br>
return true;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {<br>
int totalRunEnergy = victim.getFields().getRunEnergy() - 25;<br>
if (totalRunEnergy &lt; 0)<br>
totalRunEnergy = 0;<br>
victim.getFields().setRunEnergy(totalRunEnergy);<br>
}</p>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Animation} used for this</li>
<li>special attack.<br>
*/<br>
private static final Animation ANIMATION = new Animation(11971);</li>
</ul>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Graphic} used for this</li>
<li>special attack.<br>
*/<br>
private static final Graphic GRAPHIC = new Graphic(2108);<br>
}[/code]<br>
[/quote]</li>
</ul>
</li>
</ul>
<p>Please don’t document the complete class package path for every damn file references…[/quote]</p>
<p>Ehm i dont see how its bad to document correctly the code???</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/8</link>
        <pubDate>Tue, 06 Aug 2013 01:54:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-8</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Ares1 Ares_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ares1">@Ares1</a> wrote:</p>
          <blockquote>
              <p>[quote=“Int Bauk, post:6, topic:527333”][quote author=relexlawl link=topic=646079.msg4344996#msg4344996 date=1375743353]</p>
<aside class="quote">
<blockquote>
<p>I like.</p>
</blockquote>
</aside>
<ul>
<li>
</li>
</ul>
<p>[/quote]</p>
<p>yes because class per weapon is good[/quote]<br>
What’s wrong a special per class?  It’s essential a plugin system, please do tell me what’s so horrible about a special per class.   If you have another way to solve this problem of a special per class please say so and don’t say stuff it all in one class herp derp.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/7</link>
        <pubDate>Tue, 06 Aug 2013 01:50:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-7</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@Int_Bauk Int Bauk]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/int_bauk">@Int_Bauk</a> wrote:</p>
          <blockquote>
              <p>[quote=“relexlawl, post:3, topic:527333”][quote author=arham 4 link=topic=646079.msg4344946#msg4344946 date=1375738338]<br>
I like.<br>
[/quote]</p>
<p>I don’t…This is worse than how PI handles it. You’re just separating each of (PI’s) switch statements into their own class…Should make it abstract and do something like this:</p>
<p>[code]package org.niobe.world.content.combat.special;</p>
<p>import org.niobe.GameServer;<br>
import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.Damage.Hit;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.model.container.impl.Equipment;<br>
import org.niobe.model.weapon.WeaponSpecialBar;<br>
import org.niobe.task.Task;<br>
import org.niobe.task.impl.PlayerSpecialAmountTask;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.CombatManager;</p>
<p>/**</p>
<ul>
<li>
<p>An abstract class that handles special attacks</p>
</li>
<li>
<p>that can be used in game character combat.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public abstract class SpecialAttack {</p>
<p>/**</p>
<ul>
<li>The animation performed when using this special.<br>
*/<br>
public abstract Animation getAnimation();</li>
</ul>
<p>/**</p>
<ul>
<li>The graphic performed when using this special.<br>
*/<br>
public abstract Graphic getGraphic();</li>
</ul>
<p>/**</p>
<ul>
<li>The amount of {<a class="mention" href="/u/link">@link</a> org.niobe.world.util.GameCharacterFields <span class="hashtag">#getCombatAttributes</span>()<span class="hashtag">#getSpecialAmount</span>()}</li>
<li>energy that will be deducted upon the usage of this special.<br>
*/<br>
public abstract int getSpecialAmount();</li>
</ul>
<p>/**</p>
<ul>
<li>The default strength multiplier.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The strength bonus multiplier.<br>
*/<br>
public double getMultiplier() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default accuracy used to see when a</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} will land</li>
<li>a successful hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The accuracy.<br>
*/<br>
public double getAccuracy() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default extra damage that this special will cause.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>			The extra damage that will be done.<br>
*/<br>
public int getExtraDamage(Player player, GameCharacter victim) {<br>
return 0;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>causes a double hit and flags the victim’s</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.model.UpdateFlag.Flag#DOUBLE_HIT}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the special causes a double hit.<br>
*/<br>
public boolean isDoubleHit() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#getGraphic</span>()}</li>
<li>will be performed on the victim.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the graphic will be shown on the victim.<br>
*/<br>
public boolean victimGraphic() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#execute</span>(Player, GameCharacter)}</li>
<li>will be called upon clicking the special attack bar.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The {<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} using the special.</li>
<li>
<a class="mention" href="/u/return">@return</a>			{<a class="mention" href="/u/code">@code</a> true} if the special is immediately executed when special attack bar is clicked upon.<br>
*/<br>
public boolean isImmediate(Player player) {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>will modify the {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} hit</li>
<li>and will handle said damage through {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#specialAction</span>(Player, GameCharacter, Damage)}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	if {<a class="mention" href="/u/code">@code</a> true} the {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#execute</span>(Player, GameCharacter)} method will not handle the damage being dealt.<br>
*/<br>
public boolean modifyDamage() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default action that can be caused by the special, such as</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.content.combat.special.impl.DragonScimitarSpecialAttack}</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the {<a class="mention" href="/u/link">@link</a> SpecialAttack} implementation.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit with the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> damage	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} being dealt in combat.<br>
*/<br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>The actual execution of the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player performing the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.<br>
*/<br>
public void execute(final Player player, final GameCharacter victim) {<br>
if (player.getFields().getCombatAttributes().getSpecialAttackAmount() &lt; getSpecialAmount()) {<br>
player.getPacketSender().sendMessage(“You don’t have the required special energy to use this attack.”);<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
return;<br>
}<br>
int specialDecrease = getSpecialAmount();<br>
if (player.getEquipment().getItems()[Equipment.RING_SLOT].getDefinition().getName().toLowerCase().equals(“ring of vigour”)) {<br>
specialDecrease -= (specialDecrease / 10); //TODO check if this is correct?<br>
}<br>
if (victim != null) {<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
player.getFields().getCombatAttributes().setAttacking(victim);<br>
}<br>
player.getFields().getCombatAttributes().setSpecialAttackAmount(player.getFields().getCombatAttributes().getSpecialAttackAmount() - specialDecrease);<br>
if (!player.getFields().getCombatAttributes().isRecoveringSpecialAttack()) {<br>
GameServer.getTaskManager().submit(new PlayerSpecialAmountTask(player));<br>
}<br>
player.setEntityInteraction(victim);<br>
player.performAnimation(getAnimation());<br>
if (getGraphic() != null) {<br>
if (victimGraphic() &amp;&amp; victim != null) {<br>
victim.performGraphic(getGraphic());<br>
} else {<br>
player.performGraphic(getGraphic());<br>
}<br>
}<br>
Damage initialDamage = null;<br>
if (victim != null &amp;&amp; !modifyDamage()) {<br>
//TODO max hit formula for ranged and magic<br>
final Hit hit = CombatManager.getHit(player, victim);<br>
if (!isDoubleHit()) {<br>
initialDamage = new Damage(hit);<br>
} else {<br>
initialDamage = new Damage(hit, CombatManager.getHit(player, victim));<br>
}<br>
}<br>
final Damage damage = initialDamage;<br>
specialAction(player, victim, damage);<br>
if (victim != null &amp;&amp; damage != null) {<br>
CombatManager.getCombatAction(player).hit(player, victim, damage);<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
} else {<br>
GameServer.getTaskManager().submit(new Task() {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void execute() {<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
stop();<br>
}<br>
}	<br>
});<br>
}<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
}<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]package org.niobe.world.content.combat.special.impl;</p>
<p>import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.special.SpecialAttack;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an abyssal whip special attack.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class AbyssalWhipSpecialAttack extends SpecialAttack {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return ANIMATION;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Graphic getGraphic() {<br>
return GRAPHIC;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getSpecialAmount() {<br>
return 50;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean victimGraphic() {<br>
return true;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {<br>
int totalRunEnergy = victim.getFields().getRunEnergy() - 25;<br>
if (totalRunEnergy &lt; 0)<br>
totalRunEnergy = 0;<br>
victim.getFields().setRunEnergy(totalRunEnergy);<br>
}</p>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Animation} used for this</li>
<li>special attack.<br>
*/<br>
private static final Animation ANIMATION = new Animation(11971);</li>
</ul>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Graphic} used for this</li>
<li>special attack.<br>
*/<br>
private static final Graphic GRAPHIC = new Graphic(2108);<br>
}[/code][/quote]</li>
</ul>
</li>
</ul>
<p>yes because class per weapon is good</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/6</link>
        <pubDate>Tue, 06 Aug 2013 00:20:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-6</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@iz3_legend iz3 legend]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iz3_legend">@iz3_legend</a> wrote:</p>
          <blockquote>
              <p>[quote=“relexlawl, post:3, topic:527333”][quote author=arham 4 link=topic=646079.msg4344946#msg4344946 date=1375738338]<br>
I like.<br>
[/quote]</p>
<p>I don’t…This is worse than how PI handles it. You’re just separating each of (PI’s) switch statements into their own class…Should make it abstract and do something like this:</p>
<p>[code]package org.niobe.world.content.combat.special;</p>
<p>import org.niobe.GameServer;<br>
import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.Damage.Hit;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.model.container.impl.Equipment;<br>
import org.niobe.model.weapon.WeaponSpecialBar;<br>
import org.niobe.task.Task;<br>
import org.niobe.task.impl.PlayerSpecialAmountTask;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.CombatManager;</p>
<p>/**</p>
<ul>
<li>
<p>An abstract class that handles special attacks</p>
</li>
<li>
<p>that can be used in game character combat.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public abstract class SpecialAttack {</p>
<p>/**</p>
<ul>
<li>The animation performed when using this special.<br>
*/<br>
public abstract Animation getAnimation();</li>
</ul>
<p>/**</p>
<ul>
<li>The graphic performed when using this special.<br>
*/<br>
public abstract Graphic getGraphic();</li>
</ul>
<p>/**</p>
<ul>
<li>The amount of {<a class="mention" href="/u/link">@link</a> org.niobe.world.util.GameCharacterFields <span class="hashtag">#getCombatAttributes</span>()<span class="hashtag">#getSpecialAmount</span>()}</li>
<li>energy that will be deducted upon the usage of this special.<br>
*/<br>
public abstract int getSpecialAmount();</li>
</ul>
<p>/**</p>
<ul>
<li>The default strength multiplier.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The strength bonus multiplier.<br>
*/<br>
public double getMultiplier() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default accuracy used to see when a</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} will land</li>
<li>a successful hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The accuracy.<br>
*/<br>
public double getAccuracy() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default extra damage that this special will cause.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>			The extra damage that will be done.<br>
*/<br>
public int getExtraDamage(Player player, GameCharacter victim) {<br>
return 0;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>causes a double hit and flags the victim’s</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.model.UpdateFlag.Flag#DOUBLE_HIT}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the special causes a double hit.<br>
*/<br>
public boolean isDoubleHit() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#getGraphic</span>()}</li>
<li>will be performed on the victim.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the graphic will be shown on the victim.<br>
*/<br>
public boolean victimGraphic() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#execute</span>(Player, GameCharacter)}</li>
<li>will be called upon clicking the special attack bar.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The {<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} using the special.</li>
<li>
<a class="mention" href="/u/return">@return</a>			{<a class="mention" href="/u/code">@code</a> true} if the special is immediately executed when special attack bar is clicked upon.<br>
*/<br>
public boolean isImmediate(Player player) {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>will modify the {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} hit</li>
<li>and will handle said damage through {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#specialAction</span>(Player, GameCharacter, Damage)}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	if {<a class="mention" href="/u/code">@code</a> true} the {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#execute</span>(Player, GameCharacter)} method will not handle the damage being dealt.<br>
*/<br>
public boolean modifyDamage() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default action that can be caused by the special, such as</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.content.combat.special.impl.DragonScimitarSpecialAttack}</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the {<a class="mention" href="/u/link">@link</a> SpecialAttack} implementation.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit with the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> damage	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} being dealt in combat.<br>
*/<br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>The actual execution of the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player performing the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.<br>
*/<br>
public void execute(final Player player, final GameCharacter victim) {<br>
if (player.getFields().getCombatAttributes().getSpecialAttackAmount() &lt; getSpecialAmount()) {<br>
player.getPacketSender().sendMessage(“You don’t have the required special energy to use this attack.”);<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
return;<br>
}<br>
int specialDecrease = getSpecialAmount();<br>
if (player.getEquipment().getItems()[Equipment.RING_SLOT].getDefinition().getName().toLowerCase().equals(“ring of vigour”)) {<br>
specialDecrease -= (specialDecrease / 10); //TODO check if this is correct?<br>
}<br>
if (victim != null) {<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
player.getFields().getCombatAttributes().setAttacking(victim);<br>
}<br>
player.getFields().getCombatAttributes().setSpecialAttackAmount(player.getFields().getCombatAttributes().getSpecialAttackAmount() - specialDecrease);<br>
if (!player.getFields().getCombatAttributes().isRecoveringSpecialAttack()) {<br>
GameServer.getTaskManager().submit(new PlayerSpecialAmountTask(player));<br>
}<br>
player.setEntityInteraction(victim);<br>
player.performAnimation(getAnimation());<br>
if (getGraphic() != null) {<br>
if (victimGraphic() &amp;&amp; victim != null) {<br>
victim.performGraphic(getGraphic());<br>
} else {<br>
player.performGraphic(getGraphic());<br>
}<br>
}<br>
Damage initialDamage = null;<br>
if (victim != null &amp;&amp; !modifyDamage()) {<br>
//TODO max hit formula for ranged and magic<br>
final Hit hit = CombatManager.getHit(player, victim);<br>
if (!isDoubleHit()) {<br>
initialDamage = new Damage(hit);<br>
} else {<br>
initialDamage = new Damage(hit, CombatManager.getHit(player, victim));<br>
}<br>
}<br>
final Damage damage = initialDamage;<br>
specialAction(player, victim, damage);<br>
if (victim != null &amp;&amp; damage != null) {<br>
CombatManager.getCombatAction(player).hit(player, victim, damage);<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
} else {<br>
GameServer.getTaskManager().submit(new Task() {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void execute() {<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
stop();<br>
}<br>
}	<br>
});<br>
}<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
}<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]package org.niobe.world.content.combat.special.impl;</p>
<p>import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.special.SpecialAttack;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an abyssal whip special attack.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class AbyssalWhipSpecialAttack extends SpecialAttack {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return ANIMATION;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Graphic getGraphic() {<br>
return GRAPHIC;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getSpecialAmount() {<br>
return 50;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean victimGraphic() {<br>
return true;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {<br>
int totalRunEnergy = victim.getFields().getRunEnergy() - 25;<br>
if (totalRunEnergy &lt; 0)<br>
totalRunEnergy = 0;<br>
victim.getFields().setRunEnergy(totalRunEnergy);<br>
}</p>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Animation} used for this</li>
<li>special attack.<br>
*/<br>
private static final Animation ANIMATION = new Animation(11971);</li>
</ul>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Graphic} used for this</li>
<li>special attack.<br>
*/<br>
private static final Graphic GRAPHIC = new Graphic(2108);<br>
}[/code][/quote]</li>
</ul>
</li>
</ul>
<p>Please don’t document the complete class package path for every damn file references…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/5</link>
        <pubDate>Mon, 05 Aug 2013 23:25:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-5</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I’m sure that accessing the class every time the special attack is used would be much slower. You can make a few modifications to the interface and handling method to make this better.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/4</link>
        <pubDate>Mon, 05 Aug 2013 23:04:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-4</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@relexlawl relexlawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/relexlawl">@relexlawl</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="527333">
<div class="title">
<div class="quote-controls"></div>
 arham 4:</div>
<blockquote>
<p>I like.</p>
</blockquote>
</aside>
<p>I don’t…This is worse than how PI handles it. You’re just separating each of (PI’s) switch statements into their own class…Should make it abstract and do something like this:</p>
<p>[code]package org.niobe.world.content.combat.special;</p>
<p>import org.niobe.GameServer;<br>
import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.Damage.Hit;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.model.container.impl.Equipment;<br>
import org.niobe.model.weapon.WeaponSpecialBar;<br>
import org.niobe.task.Task;<br>
import org.niobe.task.impl.PlayerSpecialAmountTask;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.CombatManager;</p>
<p>/**</p>
<ul>
<li>
<p>An abstract class that handles special attacks</p>
</li>
<li>
<p>that can be used in game character combat.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public abstract class SpecialAttack {</p>
<p>/**</p>
<ul>
<li>The animation performed when using this special.<br>
*/<br>
public abstract Animation getAnimation();</li>
</ul>
<p>/**</p>
<ul>
<li>The graphic performed when using this special.<br>
*/<br>
public abstract Graphic getGraphic();</li>
</ul>
<p>/**</p>
<ul>
<li>The amount of {<a class="mention" href="/u/link">@link</a> org.niobe.world.util.GameCharacterFields <span class="hashtag">#getCombatAttributes</span>()<span class="hashtag">#getSpecialAmount</span>()}</li>
<li>energy that will be deducted upon the usage of this special.<br>
*/<br>
public abstract int getSpecialAmount();</li>
</ul>
<p>/**</p>
<ul>
<li>The default strength multiplier.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The strength bonus multiplier.<br>
*/<br>
public double getMultiplier() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default accuracy used to see when a</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} will land</li>
<li>a successful hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>	The accuracy.<br>
*/<br>
public double getAccuracy() {<br>
return 1;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default extra damage that this special will cause.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.</li>
<li>
<a class="mention" href="/u/return">@return</a>			The extra damage that will be done.<br>
*/<br>
public int getExtraDamage(Player player, GameCharacter victim) {<br>
return 0;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>causes a double hit and flags the victim’s</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.model.UpdateFlag.Flag#DOUBLE_HIT}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the special causes a double hit.<br>
*/<br>
public boolean isDoubleHit() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#getGraphic</span>()}</li>
<li>will be performed on the victim.</li>
<li>
<a class="mention" href="/u/return">@return</a>	{<a class="mention" href="/u/code">@code</a> true} if the graphic will be shown on the victim.<br>
*/<br>
public boolean victimGraphic() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the {<a class="mention" href="/u/link">@link</a> SpecialAttack <span class="hashtag">#execute</span>(Player, GameCharacter)}</li>
<li>will be called upon clicking the special attack bar.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The {<a class="mention" href="/u/link">@link</a> org.niobe.world.Player} using the special.</li>
<li>
<a class="mention" href="/u/return">@return</a>			{<a class="mention" href="/u/code">@code</a> true} if the special is immediately executed when special attack bar is clicked upon.<br>
*/<br>
public boolean isImmediate(Player player) {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default flag that checks if the special</li>
<li>will modify the {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} hit</li>
<li>and will handle said damage through {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#specialAction</span>(Player, GameCharacter, Damage)}.</li>
<li>
<a class="mention" href="/u/return">@return</a>	if {<a class="mention" href="/u/code">@code</a> true} the {<a class="mention" href="/u/link">@link</a> <span class="hashtag">#execute</span>(Player, GameCharacter)} method will not handle the damage being dealt.<br>
*/<br>
public boolean modifyDamage() {<br>
return false;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>The default action that can be caused by the special, such as</li>
<li>{<a class="mention" href="/u/link">@link</a> org.niobe.world.content.combat.special.impl.DragonScimitarSpecialAttack}</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player using the {<a class="mention" href="/u/link">@link</a> SpecialAttack} implementation.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit with the special.</li>
<li>
<a class="mention" href="/u/param">@param</a> damage	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Damage} being dealt in combat.<br>
*/<br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {</li>
</ul>
<p>}</p>
<p>/**</p>
<ul>
<li>The actual execution of the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> player	The player performing the special attack.</li>
<li>
<a class="mention" href="/u/param">@param</a> victim	The {<a class="mention" href="/u/link">@link</a> org.niobe.model.GameCharacter} being hit.<br>
*/<br>
public void execute(final Player player, final GameCharacter victim) {<br>
if (player.getFields().getCombatAttributes().getSpecialAttackAmount() &lt; getSpecialAmount()) {<br>
player.getPacketSender().sendMessage(“You don’t have the required special energy to use this attack.”);<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
return;<br>
}<br>
int specialDecrease = getSpecialAmount();<br>
if (player.getEquipment().getItems()[Equipment.RING_SLOT].getDefinition().getName().toLowerCase().equals(“ring of vigour”)) {<br>
specialDecrease -= (specialDecrease / 10); //TODO check if this is correct?<br>
}<br>
if (victim != null) {<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
player.getFields().getCombatAttributes().setAttacking(victim);<br>
}<br>
player.getFields().getCombatAttributes().setSpecialAttackAmount(player.getFields().getCombatAttributes().getSpecialAttackAmount() - specialDecrease);<br>
if (!player.getFields().getCombatAttributes().isRecoveringSpecialAttack()) {<br>
GameServer.getTaskManager().submit(new PlayerSpecialAmountTask(player));<br>
}<br>
player.setEntityInteraction(victim);<br>
player.performAnimation(getAnimation());<br>
if (getGraphic() != null) {<br>
if (victimGraphic() &amp;&amp; victim != null) {<br>
victim.performGraphic(getGraphic());<br>
} else {<br>
player.performGraphic(getGraphic());<br>
}<br>
}<br>
Damage initialDamage = null;<br>
if (victim != null &amp;&amp; !modifyDamage()) {<br>
//TODO max hit formula for ranged and magic<br>
final Hit hit = CombatManager.getHit(player, victim);<br>
if (!isDoubleHit()) {<br>
initialDamage = new Damage(hit);<br>
} else {<br>
initialDamage = new Damage(hit, CombatManager.getHit(player, victim));<br>
}<br>
}<br>
final Damage damage = initialDamage;<br>
specialAction(player, victim, damage);<br>
if (victim != null &amp;&amp; damage != null) {<br>
CombatManager.getCombatAction(player).hit(player, victim, damage);<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
} else {<br>
GameServer.getTaskManager().submit(new Task() {<br>
<a class="mention" href="/u/override">@Override</a><br>
public void execute() {<br>
if (victim.getFields().getCombatAttributes().getHitDelay() &lt;= 0) {<br>
CombatManager.damage(player, victim, damage);<br>
stop();<br>
}<br>
}	<br>
});<br>
}<br>
victim.getFields().getCombatAttributes().setAttackedBy(player);<br>
}<br>
player.getFields().getCombatAttributes().setUsingSpecialAttack(false);<br>
WeaponSpecialBar.update(player);<br>
}<br>
}[/code]</li>
</ul>
</li>
</ul>
<p>[code]package org.niobe.world.content.combat.special.impl;</p>
<p>import org.niobe.model.Animation;<br>
import org.niobe.model.Damage;<br>
import org.niobe.model.GameCharacter;<br>
import org.niobe.model.Graphic;<br>
import org.niobe.world.Player;<br>
import org.niobe.world.content.combat.special.SpecialAttack;</p>
<p>/**</p>
<ul>
<li>
<p>Represents an abyssal whip special attack.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span> relex lawl<br>
*/<br>
public final class AbyssalWhipSpecialAttack extends SpecialAttack {</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Animation getAnimation() {<br>
return ANIMATION;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public Graphic getGraphic() {<br>
return GRAPHIC;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public int getSpecialAmount() {<br>
return 50;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public boolean victimGraphic() {<br>
return true;<br>
}</p>
<p><a class="mention" href="/u/override">@Override</a><br>
public void specialAction(Player player, GameCharacter victim, Damage damage) {<br>
int totalRunEnergy = victim.getFields().getRunEnergy() - 25;<br>
if (totalRunEnergy &lt; 0)<br>
totalRunEnergy = 0;<br>
victim.getFields().setRunEnergy(totalRunEnergy);<br>
}</p>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Animation} used for this</li>
<li>special attack.<br>
*/<br>
private static final Animation ANIMATION = new Animation(11971);</li>
</ul>
<p>/**</p>
<ul>
<li>The {<a class="mention" href="/u/link">@link</a> org.niobe.model.Graphic} used for this</li>
<li>special attack.<br>
*/<br>
private static final Graphic GRAPHIC = new Graphic(2108);<br>
}[/code]</li>
</ul>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/3</link>
        <pubDate>Mon, 05 Aug 2013 22:55:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-3</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@arham_4 arham 4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/arham_4">@arham_4</a> wrote:</p>
          <blockquote>
              <p>I like.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/2</link>
        <pubDate>Mon, 05 Aug 2013 21:32:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-2</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
      <item>
        <title>Special Attacks Layout</title>
        <dc:creator><![CDATA[@wildskiller wildskiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wildskiller">@wildskiller</a> wrote:</p>
          <blockquote>
              <p>I was bored and decided to write a special attack class. I wrote it in notepad because I’m using a friend’s computer, so I don’t know if there are any errors. This is just one of those “get the gist” kind of things and you go along with it.</p>
<p>It’s just a layout, so if you don’t understand it, then don’t try to copy and paste and expect it to work.</p>
<pre><code class="lang-auto">import java.util.HashMap;
import java.util.Map;

/**
 * @author Albert Beaupre
 * 
 * Written June 5, 2013 - 1:47pm
 */
public class Specials {
	
	interface SpecialAttack {
		
		/**
		 * Does the special attack action.
		 * @return if the special attack hits.
		 */
		boolean doSpecAction(Object object);
		
		/**
		 * Gets the special attack amount.
		 * @return the special amount drained.
		 */
		short getSpecAmount();
		
	}
	
	final Map&lt;Integer, SpecialAttack&gt; specialAttacks = new HashMap&lt;Integer, SpecialAttack&gt;();
	
	void loadSpecialAttacks() {
		specialAttacks.put(11694, new SpecialAttack() {
			@Override
			public boolean doSpecAction(Object entity) {
				/** Special attack action here **/
				return true;
			}

			@Override
			public short getSpecAmount() {
				return 500;
			}
		});
	}
	
	void handleSpecialAttacks(Object entity, int itemId) {
		if (!specialAttacks.containsKey(itemId)) {
			System.out.println("Special attack doesn't exist!");
			return;
		}
		specialAttacks.get(itemId).doSpecAction(entity);
		/**
		 * If the entity has the special attack amount...
		 * drain the special attack using
		 * specialAttacks.get(itemId).getSpecAmount()
		 */
	}

}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/special-attacks-layout/527333/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/special-attacks-layout/527333/1</link>
        <pubDate>Mon, 05 Aug 2013 18:08:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527333-1</guid>
        <source url="https://forum.moparisthebest.com/t/special-attacks-layout/527333.rss">Special Attacks Layout</source>
      </item>
  </channel>
</rss>
