<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Mass Replace V1.3</title>
    <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557</link>
    <description>[center][size=24pt]Mass Replace[br]By: Davidi2[/size][/center]Ok what this program does it take any file of your choosing, and replace all occurrences of a string in that file and replace it with another. This is useful for things such as renaming variables from a lot of different classes. 

EDIT: I finished multiple file selection, which can replace words in all files.

Features:

[ul][li]Multiple file selection for easier replacement - DONE[/li]
[li]GUI - DONE[/li]
[li]RegEx searching - DONE[/li]
[li]File overwrite - DONE[/li]
[li]Saves a backup before editing - DONE[/li]
[li]Select files from more then one folder (just keep adding them with the button) - DONE[/li][/ul]


Source: 
MainClass.java
[code=java]import java.io.*;
import javax.swing.*;
import java.util.*;
import java.util.regex.*;

public class MainClass {
	static ArrayList&lt;File&gt; fileArray = new ArrayList&lt;File&gt;(); //The array of all chosen files
	static ArrayList&lt;String&gt; stringsToWrite = new ArrayList&lt;String&gt;(); //Where the strings will be held during searching
	static ArrayList&lt;String&gt; backupStrings = new ArrayList&lt;String&gt;(); //For saving a backup before replacement.
	static String searchFor = &quot;&quot;; //This is what the user enters into the &quot;search for&quot; box
	static String replaceWith = &quot;&quot;; //This is what the user enters into the &quot;replace with&quot; box
	static String fileName; //The current new filename
	static boolean choseFiles = false; //if the user has chosen any files yet
	static boolean matchCase = true; //if the &quot;Match Case&quot; box was checked
	static boolean madeAReplacement = false; //a boolean for if a replacement was made in the entire file
	static boolean searchForRegex = false; //if the &quot;Search for regex&quot; box was checked
	static boolean foundRegex = false; //used in regex search, a boolean for if a match was found on the line

	static void chooseFiles() { //Lets the user choose files to add to the fileArray.
		JFileChooser fc = new JFileChooser();
		fc.setFileFilter(new TextFileFilter());
		fc.setMultiSelectionEnabled(true);
		int anInt_1 = fc.showOpenDialog(null);
		if(anInt_1 == JFileChooser.APPROVE_OPTION) {
			for(File f : fc.getSelectedFiles()) {
				fileArray.add(f);
				GUI.mainTextArea.append(&quot;\nAdded &quot; + f.getName() + &quot; to selected files.&quot;); //Displays the status message in the GUI
			}
			choseFiles = true;
			return;
		}
	}

	public static void main(String args[]) {
		MainClass mainClass = new MainClass();
		GUI GUI = new GUI();
	}

	public static void initializeSearch(String whatToFind, String replace, boolean mc, boolean searchRegex) {
		matchCase = mc;
		searchFor = whatToFind;
		replaceWith = replace;
		searchForRegex = searchRegex;
		for(File f : fileArray) { //initializes the search for each file
			fileName = f.getName();
			doSearch(f);
		}
	}

	public static void doSearch(File fileToRead){ //does the replacement and file management
		try {
			String line;
			BufferedReader br = new BufferedReader(new FileReader(fileToRead));
			line = br.readLine();
			while(line != null) {
				backupStrings.add(line); //Backup
				foundRegex = false;
				if(searchForRegex) { //regex search
					Pattern pattern = Pattern.compile(searchFor);
					for(int i = 0; i &lt; line.length()+1; i++) {
						for(int h = i+1; h &lt; line.length()+1; h++) {
							String s = line.substring(i, h);
							Matcher m = pattern.matcher(s); //uses a pattern matcher
							if(m.matches()) {
								stringsToWrite.add(line.replace(s, replaceWith));
								madeAReplacement = true;
								foundRegex = true;
							}
						}
					}
					if(!foundRegex) {
						stringsToWrite.add(line);
					}
				}
				else {
					if(matchCase) {
						if(!line.contains(searchFor))
							stringsToWrite.add(line);
						else {
							stringsToWrite.add(line.replace(searchFor, replaceWith));
							madeAReplacement = true;
						}
					}
					else {
						if(!line.toLowerCase().contains(searchFor.toLowerCase()))
							stringsToWrite.add(line);
						else {
							stringsToWrite.add(line.substring(0, line.toLowerCase().indexOf(searchFor.toLowerCase())) + replaceWith + line.substring(line.toLowerCase().indexOf(searchFor.toLowerCase())+searchFor.length()));
							madeAReplacement = true;
						}
					}
				}
				line = br.readLine();
			}
			br.close();
			BufferedWriter bbw = new BufferedWriter(new FileWriter(&quot;Backup/&quot;+fileName));
			for(String s : backupStrings)	{ //Writes the backup	
				bbw.write(s);
				bbw.newLine();
				bbw.flush();
			}
			bbw.close();
			File newFile;
			if(GUI.overwriteCB.isSelected()) { //Will it overwrite?
				newFile = new File(fileToRead.toString()); //Yes
			}
			else {
				newFile = new File(&quot;Output/&quot;+fileName); //No
			}
			if(!newFile.exists()) { //A buch of conditionals making sure it will write the the file
				if(newFile.createNewFile()) {
				}
			}
			else {
				if(newFile.delete()) {
					if(newFile.createNewFile()) {
					}	
					else {
						JOptionPane.showMessageDialog(null, &quot;There was an error creating a new file!\nA backup will be put in Output.&quot;, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);
						newFile = new File(&quot;Output/&quot;+fileName); //If it doesn&#39;t work, it changes the destination so that it doesn&#39;t overwrite.
						return;
					}
				}
				else {
					JOptionPane.showMessageDialog(null, &quot;There was an error overwriting the old file!\nPlease make sure the file is not open or protected and try again.&quot;, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);
					return;
				}
			}
			BufferedWriter bw = new BufferedWriter(new FileWriter(newFile));
			for(String s : stringsToWrite)	{//Write the new file
				bw.write(s);
				bw.newLine();
				bw.flush();
			}
			bw.close();	
			GUI.mainTextArea.append(&quot;\nThe file: &quot; + fileName + &quot; was completed with &quot; + (!madeAReplacement ? &quot;no replacements!&quot; : &quot;one or more replacements!&quot;));
		} catch (Exception e) { JOptionPane.showMessageDialog(null, &quot;Error:\n&quot; + e.toString(), &quot;Error&quot;, JOptionPane.ERROR_MESSAGE); }	
	}
}
[/code]

TextFileFilter.java
[code=java]import java.io.*;
public class TextFileFilter extends javax.swing.filechooser.FileFilter {
	public boolean accept(File f) { //Must overwrite
		if(f.isDirectory())
			return true;
		String fileName = f.getName();
		if(fileName.matches(&quot;.*((.java)|(.txt)|(.dat)|(.bat))&quot;)) { //The file filter
			return true;
		}
		else
			return false;
	}

	public String getDescription() { //Must overwrite
		return &quot;Common files (*.java, *.txt, *.dat, *.bat)&quot;; //The description
	}
}[/code]

GUI.java
[code=Java]
import java.awt.*;
import javax.swing.*;
import java.util.regex.*;

public class GUI extends JDialog {
	public static JTextArea mainTextArea = new JTextArea(&quot;Please choose file(s) and words to replace.&quot;, 10, 10);
	private JPanel contentPane = new JPanel();
	public static final JButton startReplaceBTN = new JButton(&quot;Start Replace&quot;);
	public static final JButton addFilesBTN = new JButton(&quot;Add Files&quot;);
	public static final JButton clearFilesBTN = new JButton(&quot;Clear Files&quot;);
	public static final JCheckBox overwriteCB = new JCheckBox(&quot;Overwrite File(s)&quot;);
	public GUI() {
		initializeComponent();
		this.setVisible(true);
	}

	private void initializeComponent() {
		JScrollPane sp = new JScrollPane(mainTextArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
		final JLabel label1 = new JLabel(&quot;String to find:&quot;);
		final JTextField findTB = new JTextField(&quot;&quot;);
		final JTextField replaceWithTB = new JTextField(&quot;&quot;);
		JLabel label2 = new JLabel(&quot;Replace with:&quot;);
		final JCheckBox matchCaseCB = new JCheckBox(&quot;Match Case&quot;);
		final JCheckBox regexSearchCB = new JCheckBox(&quot;Search For RegEx&quot;);

		startReplaceBTN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e){
				if(MainClass.choseFiles) {
					if(!findTB.getText().equals(&quot;&quot;) &amp;&amp; !replaceWithTB.getText().equals(&quot;&quot;)) {
						if(regexSearchCB.isSelected()) {
							try { 
								Pattern p = Pattern.compile(findTB.getText());
							} catch (Exception ex) {
								JOptionPane.showMessageDialog(null, &quot;That&#39;s an invalid regular expression!&quot;, &quot;Regex&quot;, JOptionPane.ERROR_MESSAGE);
								return;
							}
						}
						MainClass.initializeSearch(findTB.getText(), replaceWithTB.getText(), matchCaseCB.isSelected(), regexSearchCB.isSelected());
					}
					else
						JOptionPane.showMessageDialog(null, &quot;You can&#39;t leave the text boxes blank!&quot;, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);
				}
				else
					JOptionPane.showMessageDialog(null, &quot;You have no files chosen!&quot;, &quot;Error&quot;, JOptionPane.ERROR_MESSAGE);
			}
		});
		addFilesBTN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e){
				MainClass.chooseFiles();
				startReplaceBTN.setEnabled(true);
				clearFilesBTN.setEnabled(true);
			}
		});
		regexSearchCB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e){
				if(regexSearchCB.isSelected()) {
					matchCaseCB.setEnabled(false);
					matchCaseCB.setSelected(true);
					label1.setText(&quot;Regex to find:&quot;);
					JOptionPane.showMessageDialog(null, &quot;WARNING! Using regex search can take MUCH longer then a normal search!\n Also, match case is disabled because regular expressions already have case sensitivity.&quot;, &quot;WARNING&quot;, JOptionPane.WARNING_MESSAGE);
				}
				else {
					matchCaseCB.setEnabled(true);
					label1.setText(&quot;String to find:&quot;);
				}
			}
		});
		overwriteCB.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e){
				if(overwriteCB.isSelected()) {
					JOptionPane.showMessageDialog(null, &quot;You are going to overwrite old files.\nThis means that it will not end up in output, it will be wherever the files was when it started.\nNote: A backup will still be saved.&quot;, &quot;Info&quot;, JOptionPane.INFORMATION_MESSAGE);
				}
			}
		});
		clearFilesBTN.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent e){
				MainClass.fileArray.clear();
				mainTextArea.append(&quot;\nFile list cleared!&quot;);
				clearFilesBTN.setEnabled(false);
				startReplaceBTN.setEnabled(false);
			}
		});
		contentPane.setLayout(null);
		startReplaceBTN.setBounds(255,10,115,25);
		addFilesBTN.setBounds(5,10,115,25);
		clearFilesBTN.setBounds(130,10,115,25);
		startReplaceBTN.setEnabled(false);
		clearFilesBTN.setEnabled(false);
		label1.setBounds(10,40,85,25);
		label2.setBounds(10,70,85,25);
		findTB.setBounds(100,40,275,25);
		replaceWithTB.setBounds(100,70,275,25);
		matchCaseCB.setBounds(8,95,100,25);
		regexSearchCB.setBounds(245,95,150,25);
		overwriteCB.setBounds(110,95,135,25);
		matchCaseCB.setSelected(true);
		regexSearchCB.setSelected(false);
		sp.setBounds(10,130,360,195);
		contentPane.add(startReplaceBTN);
		contentPane.add(findTB);
		contentPane.add(replaceWithTB);
		contentPane.add(label1);
		contentPane.add(label2);
		contentPane.add(addFilesBTN);
		contentPane.add(clearFilesBTN);
		contentPane.add(matchCaseCB);
		contentPane.add(regexSearchCB);
		contentPane.add(overwriteCB);
		contentPane.add(sp);
		this.getContentPane().add(contentPane);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setSize(385,365);
		this.setLocation(150,36);
		this.setVisible(true);
		this.setTitle(&quot;Mass Replace&quot;);
		this.setResizable(false);
	}
}[/code]
Here&#39;s everything together:
EXECUTABLE Jar: http://uppit.com/v/ESLTZP5E (9kb)

Pictures:

Choose File:
[img]http://img200.imageshack.us/img200/2517/img1h.png[/img]
Output folder:
[img]http://img42.imageshack.us/img42/8629/img4z.png[/img]
Summary:
[img]http://img704.imageshack.us/img704/7997/pic1m.png[/img]</description>
    
    <lastBuildDate>Sun, 07 Feb 2010 15:28:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p><code>
                int anInt_1 = fc.showOpenDialog(null);
                if(anInt_1 == JFileChooser.APPROVE_OPTION) {</code><br>
… killer-100?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/10</link>
        <pubDate>Sun, 07 Feb 2010 15:28:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-10</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:7, topic:328557”]edit: i just reread this thread and HAHAHAHAHAHAHAHAHAHHAHAHAHAHAHAHA</p>
<p>[quote author=Davidi2 link=topic=424944.msg3120884#msg3120884 date=1265511646]</p>
<aside class="quote no-group">
<blockquote>
<p>Why are you naming your classes so poorly?</p>
</blockquote>
</aside>
<p>I had started to obfuscate them, but stopped.[/quote][/quote]<br>
Yes, I think it was already pointed out that I did not know the correct meaning of obfuscation. Apoc, not being a jack ass, told me politely over the IRC what it actually was, or at least enough so I could realize how stupid I looked.</p>
<aside class="quote no-group quote-modified" data-post="8" data-topic="328557">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/moparisthebest/40/30_1.png" class="avatar"> Moparisthebest:</div>
<blockquote>
<p>It is starting to look much better, but you really need to <span class="bbcode-b">‘un-obfuscate’</span> and give everything clear and meaningful names, also comments are helpful to show what you are doing and why.  If you did those two things it might shape up to be a really good program.</p>
</blockquote>
</aside>
<p>Lol :P. Don’t worry, I know I didn’t actually ‘obfuscate it.’</p>
<p>Ok, I could do that right now.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/9</link>
        <pubDate>Sun, 07 Feb 2010 13:44:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-9</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>It is starting to look much better, but you really need to ‘un-obfuscate’ and give everything clear and meaningful names, also comments are helpful to show what you are doing and why.  If you did those two things it might shape up to be a really good program.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/8</link>
        <pubDate>Sun, 07 Feb 2010 05:05:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-8</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>[quote=“Unhandled, post:6, topic:328557”]ahahahaha you’re such a fucking retard.[/quote]+1</p>
<p>edit: i just reread this thread and HAHAHAHAHAHAHAHAHAHHAHAHAHAHAHAHA</p>
<aside class="quote no-group quote-modified" data-post="3" data-topic="328557">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>[quote]Why are you naming your classes so poorly?</p>
</blockquote>
</aside>
<p>I had started to obfuscate them, but stopped.[/quote]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/7</link>
        <pubDate>Sun, 07 Feb 2010 04:45:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-7</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@Unhandled Unhandled]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unhandled">@Unhandled</a> wrote:</p>
          <blockquote>
              <p>ahahahaha you’re such a fucking retard.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/6</link>
        <pubDate>Sun, 07 Feb 2010 03:42:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-6</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“Apoc, post:4, topic:328557”]I added a suggestion into my post, about added a JList to it to show the files.</p>
<p>btw, deobfuscating isn’t naming stuff aClass1 etc etc lol, that’s actually what it looks like deobfuscated =][/quote]<br>
And perhaps be able to remove them one at a time? That’s a good idea.</p>
<p>I’ll probably need to re-read my guide about obfuscation lol…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/5</link>
        <pubDate>Sun, 07 Feb 2010 03:05:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-5</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>I added a suggestion into my post, about added a JList to it to show the files.</p>
<p>btw, deobfuscating isn’t naming stuff aClass1 etc etc lol, that’s actually what it looks like deobfuscated =]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/4</link>
        <pubDate>Sun, 07 Feb 2010 03:03:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-4</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <blockquote>Why are you naming your classes so poorly?</blockquote>
I had started to replace all of my variables (anInt_1 etc), but stopped.
<blockquote>Obfuscating and Deobfuscating is so much more than just renaming stuff.</blockquote>
Can you teach me more about it, or give a link to a good guide? The one I read is obviously wrong...
<p>EDIT - Btw - Fast reply <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=5" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/3</link>
        <pubDate>Sun, 07 Feb 2010 03:00:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-3</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@Evil1 Evil_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evil1">@Evil1</a> wrote:</p>
          <blockquote>
              <p>I’m glad you’re using OOP.</p>
<p>Why are you naming your classes so poorly?</p>
<p>Also:</p>
<blockquote>Ok what this program does it take any file of your choosing, and replace all occurrences of a string in that file and replace it with another. This is useful for things such as renaming variables, and un-obfuscating or obfuscating.</blockquote>
<p>Obfuscating and Deobfuscating is so much more than just renaming stuff.</p>
<p>But as a mass renamer (From the picture) it looks good, I really cbf to download it.</p>
<p>Suggestions:</p>
<p>You could add a JList to the program to show what files you’ve added, instead of printing it out.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/2</link>
        <pubDate>Sun, 07 Feb 2010 02:57:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-2</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
      <item>
        <title>Mass Replace V1.3</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[center][size=24pt]Mass Replace[br]By: Davidi2[/size][/center]Ok what this program does it take any file of your choosing, and replace all occurrences of a string in that file and replace it with another. This is useful for things such as renaming variables from a lot of different classes.</p>
<p>EDIT: I finished multiple file selection, which can replace words in all files.</p>
<p>Features:</p>
<p>[ul][li]Multiple file selection for easier replacement - DONE[/li]<br>
[li]GUI - DONE[/li]<br>
[li]RegEx searching - DONE[/li]<br>
[li]File overwrite - DONE[/li]<br>
[li]Saves a backup before editing - DONE[/li]<br>
[li]Select files from more then one folder (just keep adding them with the button) - DONE[/li][/ul]</p>
<p>Source:<br>
MainClass.java</p>
<p>[code=java]import <a href="http://java.io">java.io</a>.<em>;<br>
import javax.swing.</em>;<br>
import java.util.<em>;<br>
import java.util.regex.</em>;</p>
<p>public class MainClass {<br>
static ArrayList fileArray = new ArrayList(); //The array of all chosen files<br>
static ArrayList stringsToWrite = new ArrayList(); //Where the strings will be held during searching<br>
static ArrayList backupStrings = new ArrayList(); //For saving a backup before replacement.<br>
static String searchFor = “”; //This is what the user enters into the “search for” box<br>
static String replaceWith = “”; //This is what the user enters into the “replace with” box<br>
static String fileName; //The current new filename<br>
static boolean choseFiles = false; //if the user has chosen any files yet<br>
static boolean matchCase = true; //if the “Match Case” box was checked<br>
static boolean madeAReplacement = false; //a boolean for if a replacement was made in the entire file<br>
static boolean searchForRegex = false; //if the “Search for regex” box was checked<br>
static boolean foundRegex = false; //used in regex search, a boolean for if a match was found on the line</p>
<pre><code>static void chooseFiles() { //Lets the user choose files to add to the fileArray.
	JFileChooser fc = new JFileChooser();
	fc.setFileFilter(new TextFileFilter());
	fc.setMultiSelectionEnabled(true);
	int anInt_1 = fc.showOpenDialog(null);
	if(anInt_1 == JFileChooser.APPROVE_OPTION) {
		for(File f : fc.getSelectedFiles()) {
			fileArray.add(f);
			GUI.mainTextArea.append("\nAdded " + f.getName() + " to selected files."); //Displays the status message in the GUI
		}
		choseFiles = true;
		return;
	}
}

public static void main(String args[]) {
	MainClass mainClass = new MainClass();
	GUI GUI = new GUI();
}

public static void initializeSearch(String whatToFind, String replace, boolean mc, boolean searchRegex) {
	matchCase = mc;
	searchFor = whatToFind;
	replaceWith = replace;
	searchForRegex = searchRegex;
	for(File f : fileArray) { //initializes the search for each file
		fileName = f.getName();
		doSearch(f);
	}
}

public static void doSearch(File fileToRead){ //does the replacement and file management
	try {
		String line;
		BufferedReader br = new BufferedReader(new FileReader(fileToRead));
		line = br.readLine();
		while(line != null) {
			backupStrings.add(line); //Backup
			foundRegex = false;
			if(searchForRegex) { //regex search
				Pattern pattern = Pattern.compile(searchFor);
				for(int i = 0; i &lt; line.length()+1; i++) {
					for(int h = i+1; h &lt; line.length()+1; h++) {
						String s = line.substring(i, h);
						Matcher m = pattern.matcher(s); //uses a pattern matcher
						if(m.matches()) {
							stringsToWrite.add(line.replace(s, replaceWith));
							madeAReplacement = true;
							foundRegex = true;
						}
					}
				}
				if(!foundRegex) {
					stringsToWrite.add(line);
				}
			}
			else {
				if(matchCase) {
					if(!line.contains(searchFor))
						stringsToWrite.add(line);
					else {
						stringsToWrite.add(line.replace(searchFor, replaceWith));
						madeAReplacement = true;
					}
				}
				else {
					if(!line.toLowerCase().contains(searchFor.toLowerCase()))
						stringsToWrite.add(line);
					else {
						stringsToWrite.add(line.substring(0, line.toLowerCase().indexOf(searchFor.toLowerCase())) + replaceWith + line.substring(line.toLowerCase().indexOf(searchFor.toLowerCase())+searchFor.length()));
						madeAReplacement = true;
					}
				}
			}
			line = br.readLine();
		}
		br.close();
		BufferedWriter bbw = new BufferedWriter(new FileWriter("Backup/"+fileName));
		for(String s : backupStrings)	{ //Writes the backup	
			bbw.write(s);
			bbw.newLine();
			bbw.flush();
		}
		bbw.close();
		File newFile;
		if(GUI.overwriteCB.isSelected()) { //Will it overwrite?
			newFile = new File(fileToRead.toString()); //Yes
		}
		else {
			newFile = new File("Output/"+fileName); //No
		}
		if(!newFile.exists()) { //A buch of conditionals making sure it will write the the file
			if(newFile.createNewFile()) {
			}
		}
		else {
			if(newFile.delete()) {
				if(newFile.createNewFile()) {
				}	
				else {
					JOptionPane.showMessageDialog(null, "There was an error creating a new file!\nA backup will be put in Output.", "Error", JOptionPane.ERROR_MESSAGE);
					newFile = new File("Output/"+fileName); //If it doesn't work, it changes the destination so that it doesn't overwrite.
					return;
				}
			}
			else {
				JOptionPane.showMessageDialog(null, "There was an error overwriting the old file!\nPlease make sure the file is not open or protected and try again.", "Error", JOptionPane.ERROR_MESSAGE);
				return;
			}
		}
		BufferedWriter bw = new BufferedWriter(new FileWriter(newFile));
		for(String s : stringsToWrite)	{//Write the new file
			bw.write(s);
			bw.newLine();
			bw.flush();
		}
		bw.close();	
		GUI.mainTextArea.append("\nThe file: " + fileName + " was completed with " + (!madeAReplacement ? "no replacements!" : "one or more replacements!"));
	} catch (Exception e) { JOptionPane.showMessageDialog(null, "Error:\n" + e.toString(), "Error", JOptionPane.ERROR_MESSAGE); }	
}
</code></pre>
<p>}<br>
[/code]</p>
<p>TextFileFilter.java</p>
<p>[code=java]import <a href="http://java.io">java.io</a>.<em>;<br>
public class TextFileFilter extends javax.swing.filechooser.FileFilter {<br>
public boolean accept(File f) { //Must overwrite<br>
if(f.isDirectory())<br>
return true;<br>
String fileName = f.getName();<br>
if(fileName.matches(".</em>((.java)|(.txt)|(.dat)|(.bat))")) { //The file filter<br>
return true;<br>
}<br>
else<br>
return false;<br>
}</p>
<pre><code>public String getDescription() { //Must overwrite
	return "Common files (*.java, *.txt, *.dat, *.bat)"; //The description
}
</code></pre>
<p>}[/code]</p>
<p>GUI.java</p>
<p>[code=Java]<br>
import java.awt.<em>;<br>
import javax.swing.</em>;<br>
import java.util.regex.*;</p>
<p>public class GUI extends JDialog {<br>
public static JTextArea mainTextArea = new JTextArea(“Please choose file(s) and words to replace.”, 10, 10);<br>
private JPanel contentPane = new JPanel();<br>
public static final JButton startReplaceBTN = new JButton(“Start Replace”);<br>
public static final JButton addFilesBTN = new JButton(“Add Files”);<br>
public static final JButton clearFilesBTN = new JButton(“Clear Files”);<br>
public static final JCheckBox overwriteCB = new JCheckBox(“Overwrite File(s)”);<br>
public GUI() {<br>
initializeComponent();<br>
this.setVisible(true);<br>
}</p>
<pre><code>private void initializeComponent() {
	JScrollPane sp = new JScrollPane(mainTextArea, JScrollPane.VERTICAL_SCROLLBAR_ALWAYS, JScrollPane.HORIZONTAL_SCROLLBAR_ALWAYS);
	final JLabel label1 = new JLabel("String to find:");
	final JTextField findTB = new JTextField("");
	final JTextField replaceWithTB = new JTextField("");
	JLabel label2 = new JLabel("Replace with:");
	final JCheckBox matchCaseCB = new JCheckBox("Match Case");
	final JCheckBox regexSearchCB = new JCheckBox("Search For RegEx");

	startReplaceBTN.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent e){
			if(MainClass.choseFiles) {
				if(!findTB.getText().equals("") &amp;&amp; !replaceWithTB.getText().equals("")) {
					if(regexSearchCB.isSelected()) {
						try { 
							Pattern p = Pattern.compile(findTB.getText());
						} catch (Exception ex) {
							JOptionPane.showMessageDialog(null, "That's an invalid regular expression!", "Regex", JOptionPane.ERROR_MESSAGE);
							return;
						}
					}
					MainClass.initializeSearch(findTB.getText(), replaceWithTB.getText(), matchCaseCB.isSelected(), regexSearchCB.isSelected());
				}
				else
					JOptionPane.showMessageDialog(null, "You can't leave the text boxes blank!", "Error", JOptionPane.ERROR_MESSAGE);
			}
			else
				JOptionPane.showMessageDialog(null, "You have no files chosen!", "Error", JOptionPane.ERROR_MESSAGE);
		}
	});
	addFilesBTN.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent e){
			MainClass.chooseFiles();
			startReplaceBTN.setEnabled(true);
			clearFilesBTN.setEnabled(true);
		}
	});
	regexSearchCB.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent e){
			if(regexSearchCB.isSelected()) {
				matchCaseCB.setEnabled(false);
				matchCaseCB.setSelected(true);
				label1.setText("Regex to find:");
				JOptionPane.showMessageDialog(null, "WARNING! Using regex search can take MUCH longer then a normal search!\n Also, match case is disabled because regular expressions already have case sensitivity.", "WARNING", JOptionPane.WARNING_MESSAGE);
			}
			else {
				matchCaseCB.setEnabled(true);
				label1.setText("String to find:");
			}
		}
	});
	overwriteCB.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent e){
			if(overwriteCB.isSelected()) {
				JOptionPane.showMessageDialog(null, "You are going to overwrite old files.\nThis means that it will not end up in output, it will be wherever the files was when it started.\nNote: A backup will still be saved.", "Info", JOptionPane.INFORMATION_MESSAGE);
			}
		}
	});
	clearFilesBTN.addActionListener(new java.awt.event.ActionListener() {
		public void actionPerformed(java.awt.event.ActionEvent e){
			MainClass.fileArray.clear();
			mainTextArea.append("\nFile list cleared!");
			clearFilesBTN.setEnabled(false);
			startReplaceBTN.setEnabled(false);
		}
	});
	contentPane.setLayout(null);
	startReplaceBTN.setBounds(255,10,115,25);
	addFilesBTN.setBounds(5,10,115,25);
	clearFilesBTN.setBounds(130,10,115,25);
	startReplaceBTN.setEnabled(false);
	clearFilesBTN.setEnabled(false);
	label1.setBounds(10,40,85,25);
	label2.setBounds(10,70,85,25);
	findTB.setBounds(100,40,275,25);
	replaceWithTB.setBounds(100,70,275,25);
	matchCaseCB.setBounds(8,95,100,25);
	regexSearchCB.setBounds(245,95,150,25);
	overwriteCB.setBounds(110,95,135,25);
	matchCaseCB.setSelected(true);
	regexSearchCB.setSelected(false);
	sp.setBounds(10,130,360,195);
	contentPane.add(startReplaceBTN);
	contentPane.add(findTB);
	contentPane.add(replaceWithTB);
	contentPane.add(label1);
	contentPane.add(label2);
	contentPane.add(addFilesBTN);
	contentPane.add(clearFilesBTN);
	contentPane.add(matchCaseCB);
	contentPane.add(regexSearchCB);
	contentPane.add(overwriteCB);
	contentPane.add(sp);
	this.getContentPane().add(contentPane);
	this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
	this.setSize(385,365);
	this.setLocation(150,36);
	this.setVisible(true);
	this.setTitle("Mass Replace");
	this.setResizable(false);
}
</code></pre>
<p>}[/code]<br>
Here’s everything together:<br>
EXECUTABLE Jar: <a href="http://uppit.com/v/ESLTZP5E">http://uppit.com/v/ESLTZP5E</a> (9kb)</p>
<p>Pictures:</p>
<p>Choose File:<br>
<img src="http://img200.imageshack.us/img200/2517/img1h.png" alt width="" height=""><br>
Output folder:<br>
<img src="http://img42.imageshack.us/img42/8629/img4z.png" alt width="" height=""><br>
Summary:<br>
<img src="http://img704.imageshack.us/img704/7997/pic1m.png" alt width="" height=""></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/mass-replace-v1-3/328557/1</link>
        <pubDate>Sun, 07 Feb 2010 02:56:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328557-1</guid>
        <source url="https://forum.moparisthebest.com/t/mass-replace-v1-3/328557.rss">Mass Replace V1.3</source>
      </item>
  </channel>
</rss>
