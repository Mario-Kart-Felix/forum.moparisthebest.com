<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Complicated ::staffzone command // ruse base</title>
    <link>https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907</link>
    <description>Hey!

Today i will present to you my newest puzzle. The complicated staffzone command.
What i want it to do is:
 - if the entire command is ::staffzone it will teleport the player who uses the command to the staffzone
 - if the text &quot;all&quot; is followed after staffzone ::staffzone it will teleport every online staff member to the staffzone
 - if after ::staffzone a playername is entered it will teleport said player to the staffzone.

Here&#39;s what i&#39;ve got so far:
[code=java]
		if(command[0].equalsIgnoreCase(&quot;staffzone&quot;)) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll(&quot;_&quot;, &quot; &quot;));
			playerToMove = World.getPlayerByName(player2);
			if(command.length &gt; 1 &amp;&amp; command[1].equals(&quot;all&quot;) { // checks if the command[1] equals &quot;all&quot;
				if(player.getRights() == PlayerRights.ADMINISTRATOR || player.getRights() == PlayerRights.DEVELOPER || player.getRights() == PlayerRights.OWNER) { //checks to see if player has enough rights to do this
					for (Player players : World.getPlayers()) {
						if (players != null) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL); // teleports every staff member
							player.getPacketSender().sendMessage(&quot;You&#39;ve teleported every online staff member to the staffzone.&quot;); // sends messages
							World.sendStaffMessage(&quot;You&#39;ve been teleported to the staffzone by &quot;+player.getUsername()+&quot;.&quot;);
							return;
						}
					}
				}
			}	 				else if  { // checks if if-statement on line 286 is true, else it checks if the command[1] contains a player name&quot;
									
								}	 else { // if none of the above is true it will teleport the player who uses the command to the staffzone (a.k.a regular ::staffzone command)
										TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
										player.getPacketSender().sendMessage(&quot;You&#39;ve teleported to the staffzone&quot;);
										return;
									}
		}
[/code]
I&#39;ve tried using // to tell you as best as possible what i want it to do.
Here&#39;s my entire commandpacketlistener class:
[code=java]
package com.ruseps.net.packet.impl;

import mysql.MySQLController;

import com.ruseps.GameServer;
import com.ruseps.GameSettings;
import com.ruseps.engine.task.Task;
import com.ruseps.engine.task.TaskManager;
import com.ruseps.model.Animation;
import com.ruseps.model.Flag;
import com.ruseps.model.GameObject;
import com.ruseps.model.Graphic;
import com.ruseps.model.GroundItem;
import com.ruseps.model.Item;
import com.ruseps.model.Locations.Location;
import com.ruseps.model.PlayerRights;
import com.ruseps.model.Position;
import com.ruseps.model.Skill;
import com.ruseps.model.container.impl.Bank;
import com.ruseps.model.container.impl.Equipment;
import com.ruseps.model.container.impl.Shop.ShopManager;
import com.ruseps.model.definitions.ItemDefinition;
import com.ruseps.model.definitions.WeaponAnimations;
import com.ruseps.model.definitions.WeaponInterfaces;
import com.ruseps.net.packet.Packet;
import com.ruseps.net.packet.PacketListener;
import com.ruseps.net.security.ConnectionHandler;
import com.ruseps.util.Misc;
import com.ruseps.world.World;
import com.ruseps.world.content.BonusManager;
import com.ruseps.world.content.WellOfGoodwill;
import com.ruseps.world.content.Lottery;
import com.ruseps.world.content.PlayerLogs;
import com.ruseps.world.content.PlayerPunishment;
import com.ruseps.world.content.PlayerPunishment.Jail;
import com.ruseps.world.content.PlayersOnlineInterface;
import com.ruseps.world.content.ShootingStar;
import com.ruseps.world.content.clan.ClanChatManager;
import com.ruseps.world.content.combat.CombatFactory;
import com.ruseps.world.content.combat.DesolaceFormulas;
import com.ruseps.world.content.combat.weapon.CombatSpecial;
import com.ruseps.world.content.grandexchange.GrandExchange;
import com.ruseps.world.content.grandexchange.GrandExchangeOffer;
import com.ruseps.world.content.grandexchange.GrandExchangeOffers;
import com.ruseps.world.content.minigames.impl.WarriorsGuild;
import com.ruseps.world.content.skill.SkillManager;
import com.ruseps.world.content.skill.impl.slayer.SlayerTasks;
import com.ruseps.world.content.transportation.TeleportHandler;
import com.ruseps.world.content.transportation.TeleportType;
import com.ruseps.world.entity.impl.GroundItemManager;
import com.ruseps.world.entity.impl.npc.NPC;
import com.ruseps.world.entity.impl.player.Player;
import com.ruseps.world.entity.impl.player.PlayerSaving;


/**
 * This packet listener manages commands a player uses by using the
 * command console prompted by using the &quot;`&quot; char.
 * 
 * @author Gabriel Hannason
 */

public class CommandPacketListener implements PacketListener {

	@Override
	public void handleMessage(Player player, Packet packet) {
		String command = Misc.readString(packet.getBuffer());
		String[] parts = command.toLowerCase().split(&quot; &quot;);
		if(command.contains(&quot;\r&quot;) || command.contains(&quot;\n&quot;)) {
			return;
		}
		try {
			switch (player.getRights()) {
			case PLAYER:
				playerCommands(player, parts, command);
				break;
			case MODERATOR:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				break;
			case ADMINISTRATOR:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				break;
			case OWNER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				ownerCommands(player, parts, command);
				developerCommands(player, parts, command);
				break;
			case DEVELOPER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				ownerCommands(player, parts, command);
				developerCommands(player, parts, command);
				break;
			case SUPPORT:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				break;
			case VETERAN:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				break;
			case BRONZE_MEMBER:
			case SILVER_MEMBER:
			case GOLD_MEMBER:
			case PLATINUM_MEMBER:
			case DIAMOND_MEMBER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				break;
			default:
				break;
			}
		} catch (Exception exception) {
			//exception.printStackTrace();

			if(player.getRights() == PlayerRights.DEVELOPER) {
				player.getPacketSender().sendConsoleMessage(&quot;Error executing that command.&quot;);
			} else {
				player.getPacketSender().sendMessage(&quot;Error executing that command.&quot;);
			}

		}
	}

	private static void playerCommands(final Player player, String[] command, String wholeCommand)  {
		if(wholeCommand.equalsIgnoreCase(&quot;claim&quot;)) {
			player.getPacketSender().sendMessage(&quot;You can only claim items from Sir Prysin in the Edgeville bank.&quot;);
		}
		if (wholeCommand.equalsIgnoreCase(&quot;donate&quot;) || wholeCommand.equalsIgnoreCase(&quot;store&quot;)) {
			player.getPacketSender().sendString(1, &quot;www.artimproject.com/store/&quot;);
			player.getPacketSender().sendMessage(&quot;Attempting to open: www.artimproject.com/store/&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;attacks&quot;)) {
			int attack = DesolaceFormulas.getMeleeAttack(player);
			int range = DesolaceFormulas.getRangedAttack(player);
			int magic = DesolaceFormulas.getMagicAttack(player);
			player.getPacketSender().sendMessage(&quot;@bla@Melee attack: @or2@&quot;+attack+&quot;@bla@, ranged attack: @or2@&quot;+range+&quot;@bla@, magic attack: @or2@&quot;+magic);
		}
		if (command[0].equals(&quot;save&quot;)) {
			player.save();
			player.getPacketSender().sendMessage(&quot;Your progress has been saved.&quot;);
		}
		if (command[0].equals(&quot;vote&quot;)) {
			player.getPacketSender().sendString(1, &quot;www.artimproject.com/vote/?user=&quot;+player.getUsername());
			player.getPacketSender().sendMessage(&quot;Attempting to open: www.artimproject/vote/&quot;);
		}
		if(command[0].equals(&quot;help&quot;)) {
			if(player.getLastYell().elapsed(30000)) {
				World.sendStaffMessage(&quot;&lt;col=FF0066&gt;&lt;img=10&gt; [TICKET SYSTEM]&lt;col=6600FF&gt; &quot;+player.getUsername()+&quot; has requested help. Please help them!&quot;);
				player.getLastYell().reset();
				player.getPacketSender().sendMessage(&quot;&lt;col=663300&gt;Your help request has been received. Please be patient.&quot;);
			} else {
				player.getPacketSender().sendMessage(&quot;&quot;).sendMessage(&quot;&lt;col=663300&gt;You need to wait 30 seconds before using this again.&quot;).sendMessage(&quot;&lt;col=663300&gt;If it&#39;s an emergency, please private message a staff member directly instead.&quot;);
			}
		}
		if(command[0].equals(&quot;empty&quot;)) {
			player.getPacketSender().sendInterfaceRemoval().sendMessage(&quot;You clear your inventory.&quot;);
			player.getSkillManager().stopSkilling();
			player.getInventory().resetItems().refreshItems();
		}
		if(command[0].equals(&quot;players&quot;)) {
			player.getPacketSender().sendInterfaceRemoval();
			PlayersOnlineInterface.showInterface(player);
		}
		if(command[0].equalsIgnoreCase(&quot;[cn]&quot;)) {
			if(player.getInterfaceId() == 40172) {
				ClanChatManager.setName(player, wholeCommand.substring(wholeCommand.indexOf(command[1])));
			}
		}
	}

	private static void memberCommands(final Player player, String[] command, String wholeCommand) {
		if(wholeCommand.toLowerCase().startsWith(&quot;yell&quot;)) {
			if(PlayerPunishment.muted(player.getUsername()) || PlayerPunishment.IPMuted(player.getHostAddress())) {
				player.getPacketSender().sendMessage(&quot;You are muted and cannot yell.&quot;);
				return;
			}
			int delay = player.getRights().getYellDelay();
			if(!player.getLastYell().elapsed((delay*1000))) {
				player.getPacketSender().sendMessage(&quot;You must wait at least &quot;+delay+&quot; seconds between every yell-message you send.&quot;);
				return;
			}
			String yellMessage = wholeCommand.substring(4, wholeCommand.length());
			World.sendMessage(&quot;&quot;+player.getRights().getYellPrefix()+&quot;[Global Chat] &lt;img=&quot;+player.getRights().ordinal()+&quot;&gt;&quot;+player.getUsername()+&quot;:&quot;+yellMessage);
			player.getLastYell().reset();
		}
	}

	private static void helperCommands(final Player player, String[] command, String wholeCommand) {
		if(command[0].equalsIgnoreCase(&quot;kick&quot;)) {
			String player2 = wholeCommand.substring(5);
			Player playerToKick = World.getPlayerByName(player2);
			if(playerToKick == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; couldn&#39;t be found on Artim.&quot;);
				return;
			} else if(playerToKick.getLocation() != Location.WILDERNESS) {
				World.deregister(playerToKick);
				player.getPacketSender().sendConsoleMessage(&quot;Kicked &quot;+playerToKick.getUsername()+&quot;.&quot;);
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just kicked &quot;+playerToKick.getUsername()+&quot;!&quot;);
			}
		}
		if(command[0].equals(&quot;remindvote&quot;)) {
			World.sendMessage(&quot;&lt;img=10&gt; &lt;col=008FB2&gt;Remember to collect rewards by using the ::vote command every 12 hours!&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;saveall&quot;)) {
			World.savePlayers();
			player.getPacketSender().sendMessage(&quot;Saved players!&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;teleto&quot;)) {
			String playerToTele = wholeCommand.substring(7);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Cannot find that player online..&quot;);
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					TeleportHandler.teleportPlayer(player, player2.getPosition().copy(), TeleportType.NORMAL);
					player.getPacketSender().sendConsoleMessage(&quot;Teleporting to player: &quot;+player2.getUsername()+&quot;&quot;);
				} else
					player.getPacketSender().sendConsoleMessage(&quot;You can not teleport to this player at the moment. Minigame maybe?&quot;);
			}
		}
		if(command[0].equalsIgnoreCase(&quot;movehome&quot;)) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll(&quot;_&quot;, &quot; &quot;));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += &quot; &quot;+Misc.formatText(command[2].replaceAll(&quot;_&quot;, &quot; &quot;));
			Player playerToMove = World.getPlayerByName(player2);
			if(playerToMove.getLocation() != Location.WILDERNESS) {
				player.getPacketSender().sendMessage(&quot;You cannot move that player to home now.&quot;);
				return;
			}	
				if(playerToMove != null) {
				playerToMove.moveTo(GameSettings.DEFAULT_POSITION.copy());
				playerToMove.getPacketSender().sendMessage(&quot;You&#39;ve been teleported home by &quot;+player.getUsername()+&quot;.&quot;);
				player.getPacketSender().sendConsoleMessage(&quot;Sucessfully moved &quot;+playerToMove.getUsername()+&quot; to home.&quot;);
				} 
		}
		if (command[0].equalsIgnoreCase(&quot;staffzone&quot;) &amp;&amp; player.getLocation() != Location.WILDERNESS) {
				TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
				player.getPacketSender().sendMessage(&quot;You&#39;ve teleported to the staffzone&quot;);
			}
		if(command[0].equalsIgnoreCase(&quot;sz&quot;)) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll(&quot;_&quot;, &quot; &quot;));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += &quot; &quot;+Misc.formatText(command[2].replaceAll(&quot;_&quot;, &quot; &quot;));
			Player playerToMove = World.getPlayerByName(player2);
			if(playerToMove.getLocation() == Location.WILDERNESS) {
				if(player.getRights() != PlayerRights.ADMINISTRATOR || player.getRights() != PlayerRights.OWNER || player.getRights() != PlayerRights.DEVELOPER) {
					player.getPacketSender().sendMessage(&quot;You can not teleport that player to the staffzone now.&quot;);
					return;
				} else {
					playerToMove.moveTo(GameSettings.STAFFZONE_POSITION.copy());
					player.getPacketSender().sendMessage(&quot;You&#39;ve teleported &quot;+player2+&quot; to the staffzone.&quot;);
					playerToMove.getPacketSender().sendMessage(&quot;You&#39;ve been teleported to the staffzone.&quot;);
					return;
				}
			} else {
				playerToMove.moveTo(GameSettings.STAFFZONE_POSITION.copy());
				player.getPacketSender().sendMessage(&quot;You&#39;ve teleported &quot;+player2+&quot; to the staffzone.&quot;);
				playerToMove.getPacketSender().sendMessage(&quot;You&#39;ve been teleported to the staffzone.&quot;);
			}
		}
		// down below
		if(command[0].equalsIgnoreCase(&quot;staffzone&quot;)) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll(&quot;_&quot;, &quot; &quot;));
			playerToMove = World.getPlayerByName(player2);
			if(command.length &gt; 1 &amp;&amp; command[1].equals(&quot;all&quot;) { // checks if the command[1] equals &quot;all&quot;
				if(player.getRights() == PlayerRights.ADMINISTRATOR || player.getRights() == PlayerRights.DEVELOPER || player.getRights() == PlayerRights.OWNER) { //checks to see if player has enough rights to do this
					for (Player players : World.getPlayers()) {
						if (players != null) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL); // teleports every staff member
							player.getPacketSender().sendMessage(&quot;You&#39;ve teleported every online staff member to the staffzone.&quot;); // sends messages
							World.sendStaffMessage(&quot;You&#39;ve been teleported to the staffzone by &quot;+player.getUsername()+&quot;.&quot;);
						}
					}
				}
			}	 				else if () { // checks if if-statement on line 285 is true, else it checks if the command[1] contains a player name&quot;
									
								}	 else { // if none of the above is true it will teleport the player who uses the command to the staffzone (a.k.a regular ::staffzone command)
										TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
										player.getPacketSender().sendMessage(&quot;You&#39;ve teleported to the staffzone&quot;);
									}
		}
				
	}
		
	

	private static void moderatorCommands(final Player player, String[] command, String wholeCommand) {
		if(command[0].equalsIgnoreCase(&quot;mute&quot;)) {
			String player2 = Misc.formatText(wholeCommand.substring(5));
			if(!PlayerSaving.playerExists(player2)) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; does not exist.&quot;);
				return;
			} else {
				if(PlayerPunishment.muted(player2)) {
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; already has an active mute.&quot;);
					return;
				}
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just muted &quot;+player2+&quot;!&quot;);
				PlayerPunishment.mute(player2);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; was successfully muted. Command logs written.&quot;);
				Player plr = World.getPlayerByName(player2);
				if(plr != null) {
					plr.getPacketSender().sendMessage(&quot;You have been muted by &quot;+player.getUsername()+&quot;.&quot;);
				}
			}
		}
			if(command[0].equalsIgnoreCase(&quot;jail&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(5));
			if (player2 != null) {
				if(Jail.isJailed(player2)) {
					player.getPacketSender().sendConsoleMessage(&quot;That player is already jailed!&quot;);
					return;
				}
				if(Jail.jailPlayer(player2)) {
					player2.getSkillManager().stopSkilling();
					PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just jailed &quot;+player2.getUsername()+&quot;!&quot;);
					player.getPacketSender().sendMessage(&quot;Jailed player: &quot;+player2.getUsername()+&quot;&quot;);
					player2.getPacketSender().sendMessage(&quot;You have been jailed by &quot;+player.getUsername()+&quot;.&quot;);
				} else {
					player.getPacketSender().sendConsoleMessage(&quot;Jail is currently full.&quot;);
				}
			} else {
				player.getPacketSender().sendConsoleMessage(&quot;Could not find that player online.&quot;);
			}
		}
		if(command[0].equalsIgnoreCase(&quot;unjail&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if (player2 != null) {
				Jail.unjail(player2);
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just unjailed &quot;+player2.getUsername()+&quot;!&quot;);
				player.getPacketSender().sendMessage(&quot;Unjailed player: &quot;+player2.getUsername()+&quot;&quot;);
				player2.getPacketSender().sendMessage(&quot;You have been unjailed by &quot;+player.getUsername()+&quot;.&quot;);
			} else {
				player.getPacketSender().sendConsoleMessage(&quot;Could not find that player online.&quot;);
			}
		}
		
		
		if(command[0].equalsIgnoreCase(&quot;unmute&quot;)) {
			String player2 = wholeCommand.substring(7);
			if(!PlayerSaving.playerExists(player2)) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; does not exist.&quot;);
				return;
			} else {
				if(!PlayerPunishment.muted(player2)) {
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; is not muted!&quot;);
					return;
				}
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just unmuted &quot;+player2+&quot;!&quot;);
				PlayerPunishment.unmute(player2);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; was successfully unmuted. Command logs written.&quot;);
				Player plr = World.getPlayerByName(player2);
				if(plr != null) {
					plr.getPacketSender().sendMessage(&quot;You have been unmuted by &quot;+player.getUsername()+&quot;.&quot;);
				}
			}
		}
		if(command[0].equalsIgnoreCase(&quot;unban&quot;)) {
			String playerToBan = wholeCommand.substring(6);
			if(!PlayerSaving.playerExists(playerToBan)) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; does not exist.&quot;);
				return;
			} else {
				if(!PlayerPunishment.banned(playerToBan)) {
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; is not banned!&quot;);
					return;
				}
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just unbanned &quot;+playerToBan+&quot;!&quot;);
				PlayerPunishment.unban(playerToBan);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; was successfully unbanned. Command logs written.&quot;);
			}
		}
		if(command[0].equals(&quot;sql&quot;)) {
			MySQLController.toggle();
			if(player.getRights() == PlayerRights.DEVELOPER) {
				player.getPacketSender().sendConsoleMessage(&quot;Sql toggled to status: &quot;+GameSettings.MYSQL_ENABLED);
			} else {
				player.getPacketSender().sendMessage(&quot;Sql toggled to status: &quot;+GameSettings.MYSQL_ENABLED+&quot;.&quot;);
			}
		}
		if(command[0].equalsIgnoreCase(&quot;cpuban&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if(player2 != null &amp;&amp; !player2.getSerialNumber().equals(&quot;null&quot;)) {
				World.deregister(player2);
				ConnectionHandler.banComputer(player2.getUsername(), player2.getSerialNumber());
				PlayerPunishment.ban(player2.getUsername());
				player.getPacketSender().sendConsoleMessage(&quot;CPU Banned player.&quot;);
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just CPUBanned &quot;+player2.getUsername()+&quot;!&quot;);
			} else
				player.getPacketSender().sendConsoleMessage(&quot;Could not CPU-ban that player.&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;unipmute&quot;)) {
			player.getPacketSender().sendConsoleMessage(&quot;Unipmutes can only be handled manually.&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;teletome&quot;)) {
			String playerToTele = wholeCommand.substring(9);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Cannot find that player online..&quot;);
				return;
			} 
			if(Location.getLocation(player) == Location.WILDERNESS || Location.getLocation(player2) == Location.WILDERNESS) {
				player.getPacketSender().sendMessage(&quot;You cannot teleport that player now.&quot;);
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					TeleportHandler.teleportPlayer(player2, player.getPosition().copy(), TeleportType.NORMAL);
					player.getPacketSender().sendConsoleMessage(&quot;Teleporting player to you: &quot;+player2.getUsername()+&quot;&quot;);
					player2.getPacketSender().sendMessage(&quot;You&#39;re being teleported to &quot;+player.getUsername()+&quot;...&quot;);
				} else
					player.getPacketSender().sendConsoleMessage(&quot;You can not teleport that player at the moment. Maybe you or they are in a minigame?&quot;);
			}
		}
	}

	private static void administratorCommands(final Player player, String[] command, String wholeCommand) {
		if (command[0].equals(&quot;szone&quot;)) {
			if (command.length &gt; 1 &amp;&amp; command[1].equals(&quot;all&quot;)) {
				for (Player players : World.getPlayers()) {
					if (players != null) {
						if (players.getRights().isStaff()) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL);
							player.getPacketSender().sendMessage(&quot;You&#39;ve teleported every online staff member to the staffzone.&quot;);
							World.sendStaffMessage(&quot;You&#39;ve been teleported to the staffzone by &quot;+player+&quot;.&quot;);
						}
					}
				}
			} else {
				TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
				player.getPacketSender().sendMessage(&quot;You&#39;ve teleported to the staffzone&quot;);
			}
		}
		if(command[0].equalsIgnoreCase(&quot;fmovehome&quot;)) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll(&quot;_&quot;, &quot; &quot;));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += &quot; &quot;+Misc.formatText(command[2].replaceAll(&quot;_&quot;, &quot; &quot;));
			Player playerToMove = World.getPlayerByName(player2);	
				if(playerToMove != null) {
				playerToMove.moveTo(GameSettings.DEFAULT_POSITION.copy());
				playerToMove.getPacketSender().sendMessage(&quot;You&#39;ve been teleported home by &quot;+player.getUsername()+&quot;.&quot;);
				player.getPacketSender().sendConsoleMessage(&quot;Sucessfully moved &quot;+playerToMove.getUsername()+&quot; to home.&quot;);
				} 
		}
		if(command[0].equalsIgnoreCase(&quot;fkick&quot;)) {
			String player2 = wholeCommand.substring(5);
			Player playerToKick = World.getPlayerByName(player2);
			if(playerToKick == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2+&quot; couldn&#39;t be found on Artim.&quot;);
				return;
			} else {
				World.deregister(playerToKick);
				player.getPacketSender().sendConsoleMessage(&quot;Kicked &quot;+playerToKick.getUsername()+&quot;.&quot;);
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just kicked &quot;+playerToKick.getUsername()+&quot;!&quot;);
			}
		}
	
		if(command[0].equalsIgnoreCase(&quot;toggleinvis&quot;)) {
			player.setNpcTransformationId(player.getNpcTransformationId() &gt; 0 ? -1 : 8254);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if(command[0].equalsIgnoreCase(&quot;movetome&quot;)) {
			String playerToTele = wholeCommand.substring(9);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Cannot find that player..&quot;);
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					player.getPacketSender().sendConsoleMessage(&quot;Moving player: &quot;+player2.getUsername()+&quot;&quot;);
					player2.getPacketSender().sendMessage(&quot;You&#39;ve been moved to &quot;+player.getUsername());
					player2.moveTo(player.getPosition().copy());
				} else
					player.getPacketSender().sendConsoleMessage(&quot;Failed to move player to your coords. Are you or them in a minigame?&quot;);
			}
		}
		if(command[0].equalsIgnoreCase(&quot;ipban&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(6));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Could not find that player online.&quot;);
				return;
			} else {
				if(PlayerPunishment.IPBanned(player2.getHostAddress())){
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2.getUsername()+&quot;&#39;s IP is already banned. Command logs written.&quot;);
					return;
				}
				final String bannedIP = player2.getHostAddress();
				PlayerPunishment.addBannedIP(bannedIP);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2.getUsername()+&quot;&#39;s IP was successfully banned. Command logs written.&quot;);
				for(Player playersToBan : World.getPlayers()) {
					if(playersToBan == null)
						continue;
					if(playersToBan.getHostAddress() == bannedIP) {
						PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just IPBanned &quot;+playersToBan.getUsername()+&quot;!&quot;);
						World.deregister(playersToBan);
						if(player2.getUsername() != playersToBan.getUsername())
							player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playersToBan.getUsername()+&quot; was successfully IPBanned. Command logs written.&quot;);
					}
				}
			}
		}
		if(command[0].equalsIgnoreCase(&quot;ban&quot;)) {
			String playerToBan = wholeCommand.substring(4);
			if(!PlayerSaving.playerExists(playerToBan)) {
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; does not exist.&quot;);
				return;
			} else {
				if(PlayerPunishment.banned(playerToBan)) {
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; already has an active ban.&quot;);
					return;
				}
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just banned &quot;+playerToBan+&quot;!&quot;);
				PlayerPunishment.ban(playerToBan);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+playerToBan+&quot; was successfully banned. Command logs written.&quot;);
				Player toBan = World.getPlayerByName(playerToBan);
				if(toBan != null) {
					World.deregister(toBan);
				}
			}
		}
		if(command[0].equalsIgnoreCase(&quot;ipmute&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Could not find that player online.&quot;);
				return;
			} else {
				if(PlayerPunishment.IPMuted(player2.getHostAddress())){
					player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2.getUsername()+&quot;&#39;s IP is already IPMuted. Command logs written.&quot;);
					return;
				}
				final String mutedIP = player2.getHostAddress();
				PlayerPunishment.addMutedIP(mutedIP);
				player.getPacketSender().sendConsoleMessage(&quot;Player &quot;+player2.getUsername()+&quot; was successfully IPMuted. Command logs written.&quot;);
				player2.getPacketSender().sendMessage(&quot;You have been IPMuted by &quot;+player.getUsername()+&quot;.&quot;);
				PlayerLogs.log(player.getUsername(), &quot;&quot;+player.getUsername()+&quot; just IPMuted &quot;+player2.getUsername()+&quot;!&quot;);
			}
		}
		if (command[0].equals(&quot;reset&quot;)) {
			for (Skill skill : Skill.values()) {
				int level = skill.equals(Skill.CONSTITUTION) ? 100 : skill.equals(Skill.PRAYER) ? 10 : 1;
				player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(skill == Skill.CONSTITUTION ? 10 : 1));
			}
			player.getPacketSender().sendConsoleMessage(&quot;Your skill levels have now been reset.&quot;);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals(&quot;rights&quot;)) {
			if(player.getUsername().equalsIgnoreCase(&quot;Primed&quot;) || player.getUsername().equalsIgnoreCase(&quot;Primed&quot;) || player.getUsername().equalsIgnoreCase(&quot;Primed&quot;)) {
				int rankId = Integer.parseInt(command[1]);
				if(player.getUsername().equalsIgnoreCase(&quot;server&quot;) &amp;&amp; rankId != 10) {
					player.getPacketSender().sendMessage(&quot;You cannot do that.&quot;);
					return;
				}
				Player target = World.getPlayerByName(wholeCommand.substring(rankId &gt;= 10 ? 10 : 9, wholeCommand.length()));
				if (target == null || target.getUsername().equalsIgnoreCase(&quot;Primed&quot;)){
					player.getPacketSender().sendConsoleMessage(&quot;Error processing command.&quot;);
				} else {
					target.setRights(PlayerRights.forId(rankId));
					target.getPacketSender().sendMessage(&quot;Your player rights have been changed.&quot;);
					target.getPacketSender().sendRights();
				}
			}
		}
		if (command[0].equals(&quot;master&quot;)) {
			for (Skill skill : Skill.values()) {
				int level = SkillManager.getMaxAchievingLevel(skill);
				player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(level == 120 ? 120 : 99));
			}
			player.getPacketSender().sendConsoleMessage(&quot;You are now a master of all skills.&quot;);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals(&quot;setlevel&quot;) &amp;&amp; !player.getUsername().equalsIgnoreCase(&quot;Jack&quot;)) {
			int skillId = Integer.parseInt(command[1]);
			int level = Integer.parseInt(command[2]);
			if(level &gt; 15000) {
				player.getPacketSender().sendConsoleMessage(&quot;You can only have a maxmium level of 15000.&quot;);
				return;
			}
			Skill skill = Skill.forId(skillId);
			player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(level));
			player.getPacketSender().sendConsoleMessage(&quot;You have set your &quot; + skill.getName() + &quot; level to &quot; + level);
		}
		if (command[0].equals(&quot;item&quot;)) {
			int id = Integer.parseInt(command[1]);		
			int amount = (command.length == 2 ? 1 : Integer.parseInt(command[2].trim().toLowerCase().replaceAll(&quot;k&quot;, &quot;000&quot;).replaceAll(&quot;m&quot;, &quot;000000&quot;).replaceAll(&quot;b&quot;, &quot;000000000&quot;)));
			if(amount &gt; Integer.MAX_VALUE) {
				amount = Integer.MAX_VALUE;
			}
			Item item = new Item(id, amount);
			player.getInventory().add(item, true);

			player.getPacketSender().sendItemOnInterface(47052, 11694, 1);
		}
		if(wholeCommand.toLowerCase().startsWith(&quot;yell&quot;) &amp;&amp; player.getRights() == PlayerRights.PLAYER) {
			player.getPacketSender().sendMessage(&quot;Only members can yell. To become one, simply use ::store, buy a scroll&quot;).sendMessage(&quot;and then claim it.&quot;);
		}
		if (command[0].equals(&quot;emptyitem&quot;)) {
			if(player.getInterfaceId() &gt; 0 || player.getLocation() != null &amp;&amp; player.getLocation() == Location.WILDERNESS) {
				player.getPacketSender().sendMessage(&quot;You cannot do this at the moment.&quot;);
				return;
			}
			int item = Integer.parseInt(command[1]);
			int itemAmount = player.getInventory().getAmount(item);
			Item itemToDelete = new Item(item, itemAmount);
			player.getInventory().delete(itemToDelete).refreshItems();
		}
		if(command[0].equals(&quot;gold&quot;)) {
			Player p = World.getPlayerByName(wholeCommand.substring(5));
			if(p != null) {
				long gold = 0;
				for(Item item : p.getInventory().getItems()) {
					if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
						gold+= item.getDefinition().getValue();
				}
				for(Item item : p.getEquipment().getItems()) {
					if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
						gold+= item.getDefinition().getValue();
				}
				for(int i = 0; i &lt; 9; i++) {
					for(Item item : p.getBank(i).getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
				}
				gold += p.getMoneyInPouch();
				player.getPacketSender().sendMessage(p.getUsername() + &quot; has &quot;+Misc.insertCommasToNumber(String.valueOf(gold))+&quot; coins.&quot;);
			} else
				player.getPacketSender().sendMessage(&quot;Can not find player online.&quot;);
		}
		if(command[0].equals(&quot;pray&quot;)) {
			player.getSkillManager().setCurrentLevel(Skill.PRAYER, 15000);
		}
		if(command[0].equals(&quot;cashineco&quot;)) {
			int gold = 0 , plrLoops = 0;
			for(Player p : World.getPlayers()) {
				if(p != null) {
					for(Item item : p.getInventory().getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
					for(Item item : p.getEquipment().getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
					for(int i = 0; i &lt; 9; i++) {
						for(Item item : player.getBank(i).getItems()) {
							if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
								gold+= item.getDefinition().getValue();
						}
					}
					gold += p.getMoneyInPouch();
					plrLoops++;
				}
			}
			player.getPacketSender().sendMessage(&quot;Total gold in economy right now: &quot;+gold+&quot;, went through &quot;+plrLoops+&quot; players items.&quot;);
		}
		if (command[0].equals(&quot;tele&quot;)) {
			int x = Integer.valueOf(command[1]), y = Integer.valueOf(command[2]);
			int z = player.getPosition().getZ();
			if (command.length &gt; 3)
				z = Integer.valueOf(command[3]);
			Position position = new Position(x, y, z);
			player.moveTo(position);
			player.getPacketSender().sendConsoleMessage(&quot;Teleporting to &quot; + position.toString());
		}
		if (command[0].equals(&quot;bank&quot;)) {
			player.getBank(player.getCurrentBankTab()).open();
		}
		if (command[0].equals(&quot;find&quot;)) {
			String name = wholeCommand.substring(5).toLowerCase().replaceAll(&quot;_&quot;, &quot; &quot;);
			player.getPacketSender().sendConsoleMessage(&quot;Finding item id for item - &quot; + name);
			boolean found = false;
			for (int i = 0; i &lt; ItemDefinition.getMaxAmountOfItems(); i++) {
				if (ItemDefinition.forId(i).getName().toLowerCase().contains(name)) {
					player.getPacketSender().sendConsoleMessage(&quot;Found item with name [&quot; + ItemDefinition.forId(i).getName().toLowerCase() + &quot;] - id: &quot; + i);
					found = true;
				}
			}
			if (!found) {
				player.getPacketSender().sendConsoleMessage(&quot;No item with name [&quot; + name + &quot;] has been found!&quot;);
			}
		} else if (command[0].equals(&quot;id&quot;)) {
			String name = wholeCommand.substring(3).toLowerCase().replaceAll(&quot;_&quot;, &quot; &quot;);
			player.getPacketSender().sendConsoleMessage(&quot;Finding item id for item - &quot; + name);
			boolean found = false;
			for (int i = ItemDefinition.getMaxAmountOfItems()-1; i &gt; 0; i--) {
				if (ItemDefinition.forId(i).getName().toLowerCase().contains(name)) {
					player.getPacketSender().sendConsoleMessage(&quot;Found item with name [&quot; + ItemDefinition.forId(i).getName().toLowerCase() + &quot;] - id: &quot; + i);
					found = true;
				}
			}
			if (!found) {
				player.getPacketSender().sendConsoleMessage(&quot;No item with name [&quot; + name + &quot;] has been found!&quot;);
			}
		}
		if(command[0].equals(&quot;spec&quot;)) {
			player.setSpecialPercentage(100);
			CombatSpecial.updateBar(player);
		}
		if(command[0].equals(&quot;runes&quot;)) {
			for(Item t : ShopManager.getShops().get(0).getItems()) {
				if(t != null) {
					player.getInventory().add(new Item(t.getId(), 200000));
				}
			}
		}
		if (command[0].contains(&quot;gear&quot;)) {
			int[][] data = wholeCommand.contains(&quot;jack&quot;) ? 
					new int[][]{
				{Equipment.HEAD_SLOT, 1050},
				{Equipment.CAPE_SLOT, 12170},
				{Equipment.AMULET_SLOT, 15126},
				{Equipment.WEAPON_SLOT, 15444},
				{Equipment.BODY_SLOT, 14012},
				{Equipment.SHIELD_SLOT, 13740},
				{Equipment.LEG_SLOT, 14013},
				{Equipment.HANDS_SLOT, 7462},
				{Equipment.FEET_SLOT, 11732},
				{Equipment.RING_SLOT, 15220}
			} : wholeCommand.contains(&quot;range&quot;) ? 
					new int[][]{
				{Equipment.HEAD_SLOT, 3749},
				{Equipment.CAPE_SLOT, 10499},
				{Equipment.AMULET_SLOT, 15126},
				{Equipment.WEAPON_SLOT, 18357},
				{Equipment.BODY_SLOT, 2503},
				{Equipment.SHIELD_SLOT, 13740},
				{Equipment.LEG_SLOT, 2497},
				{Equipment.HANDS_SLOT, 7462},
				{Equipment.FEET_SLOT, 11732},
				{Equipment.RING_SLOT, 15019},
				{Equipment.AMMUNITION_SLOT, 9244},
			}:
				new int[][]{
						{Equipment.HEAD_SLOT, 1163},
						{Equipment.CAPE_SLOT, 19111},
						{Equipment.AMULET_SLOT, 6585},
						{Equipment.WEAPON_SLOT, 4151},
						{Equipment.BODY_SLOT, 1127},
						{Equipment.SHIELD_SLOT, 13262},
						{Equipment.LEG_SLOT, 1079},
						{Equipment.HANDS_SLOT, 7462},
						{Equipment.FEET_SLOT, 11732},
						{Equipment.RING_SLOT, 2550}
				};
				for (int i = 0; i &lt; data.length; i++) {
					int slot = data[i][0], id = data[i][1];
					player.getEquipment().setItem(slot, new Item(id, id == 9244 ? 500 : 1));
				}
				BonusManager.update(player);
				WeaponInterfaces.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
				WeaponAnimations.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
				player.getEquipment().refreshItems();
				player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
	}

	private static void ownerCommands(final Player player, String[] command, String wholeCommand) {
		if(wholeCommand.equals(&quot;afk&quot;)) {
			World.sendMessage(&quot;&lt;img=10&gt; &lt;col=FF0000&gt;&lt;shad=0&gt;&quot;+player.getUsername()+&quot;: I am now away, please don&#39;t message me; I won&#39;t reply.&quot;);
		}
		if(wholeCommand.equals(&quot;sfs&quot;) &amp;&amp; player.getUsername().equals(&quot;Primed&quot;)) {
			Lottery.restartLottery();
		}
		if (command[0].equals(&quot;giveitem&quot;)) {
			int item = Integer.parseInt(command[1]);
			int amount = Integer.parseInt(command[2]);
			String rss = command[3];
			if(command.length &gt; 4)
				rss+= &quot; &quot;+command[4];
			if(command.length &gt; 5)
				rss+= &quot; &quot;+command[5];
			Player target = World.getPlayerByName(rss);
			if (target == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Player must be online to give them stuff!&quot;);
			} else {
				player.getPacketSender().sendConsoleMessage(&quot;Gave player gold.&quot;);
				player.getPacketSender().sendMessage(&quot;You gave the player some items!&quot;);
				target.getInventory().add(item, amount);
			}
		}
		if (command[0].equals(&quot;update&quot;)) {
			int time = Integer.parseInt(command[1]);
			if(time &gt; 0) {
				GameServer.setUpdating(true);
				for (Player players : World.getPlayers()) {
					if (players == null)
						continue;
					players.getPacketSender().sendSystemUpdate(time);
				}
				TaskManager.submit(new Task(time) {
					@Override
					protected void execute() {
						for (Player player : World.getPlayers()) {
							if (player != null) {
								World.deregister(player);
							}
						}
						WellOfGoodwill.save();
						GrandExchangeOffers.save();
						ClanChatManager.save();
						GameServer.getLogger().info(&quot;Update task finished!&quot;);
						stop();
					}
				});
			}
		}
		if(command[0].contains(&quot;host&quot;)) {
			String plr = wholeCommand.substring(command[0].length()+1);
			Player playr2 = World.getPlayerByName(plr);
			if(playr2 != null) {
				player.getPacketSender().sendConsoleMessage(&quot;&quot;+playr2.getUsername()+&quot; host IP: &quot;+playr2.getHostAddress()+&quot;, serial number: &quot;+playr2.getSerialNumber());
			} else
				player.getPacketSender().sendConsoleMessage(&quot;Could not find player: &quot;+plr);
		}
	}

	private static void developerCommands(Player player, String command[], String wholeCommand) {
		if(command[0].equals(&quot;sendstring&quot;)) {
			int child = Integer.parseInt(command[1]);
			String string = command[2];
			player.getPacketSender().sendString(child, string);
		}
		if(command[0].equals(&quot;tasks&quot;)) {
			player.getPacketSender().sendConsoleMessage(&quot;Found &quot;+TaskManager.getTaskAmount()+&quot; tasks.&quot;);
		}
		if(command[0].equals(&quot;reloadcpubans&quot;)) {
			ConnectionHandler.reloadUUIDBans();
			player.getPacketSender().sendConsoleMessage(&quot;UUID bans reloaded!&quot;);
		}
		if(command[0].equals(&quot;reloadipbans&quot;)) {
			PlayerPunishment.reloadIPBans();
			player.getPacketSender().sendConsoleMessage(&quot;IP bans reloaded!&quot;);
		}
		if(command[0].equals(&quot;reloadipmutes&quot;)) {
			PlayerPunishment.reloadIPMutes();
			player.getPacketSender().sendConsoleMessage(&quot;IP mutes reloaded!&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;cpuban2&quot;)) {
			String serial = wholeCommand.substring(8);
			ConnectionHandler.banComputer(&quot;cpuban2&quot;, serial);
			player.getPacketSender().sendConsoleMessage(&quot;&quot;+serial+&quot; cpu was successfully banned. Command logs written.&quot;);
		}
		if(command[0].equalsIgnoreCase(&quot;ipban2&quot;)) {
			String ip = wholeCommand.substring(7);
			PlayerPunishment.addBannedIP(ip);
			player.getPacketSender().sendConsoleMessage(&quot;&quot;+ip+&quot; IP was successfully banned. Command logs written.&quot;);
		}
		if(command[0].equals(&quot;scc&quot;)) {
			/*PlayerPunishment.addBannedIP(&quot;46.16.33.9&quot;);
			ConnectionHandler.banComputer(&quot;Kustoms&quot;, -527305299);
			player.getPacketSender().sendMessage(&quot;Banned Kustoms.&quot;);
			 */
			/*for(GrandExchangeOffer of : GrandExchangeOffers.getOffers()) {
				if(of != null) {
					if(of.getId() == 34) {
					//	if(of.getOwner().toLowerCase().contains(&quot;eliyahu&quot;) || of.getOwner().toLowerCase().contains(&quot;matt&quot;)) {

							player.getPacketSender().sendConsoleMessage(&quot;FOUND IT! Owner: &quot;+of.getOwner()+&quot;, amount: &quot;+of.getAmount()+&quot;, finished: &quot;+of.getAmountFinished());
						//	GrandExchangeOffers.getOffers().remove(of);
						//}
					}
				}
			}*/
			/*Player cc = World.getPlayerByName(&quot;Thresh&quot;);
			if(cc != null) {
				//cc.getPointsHandler().setPrestigePoints(50, true);
				//cc.getPointsHandler().refreshPanel();
				//player.getPacketSender().sendConsoleMessage(&quot;Did&quot;);
					cc.getSkillManager().setCurrentLevel(Skill.CONSTITUTION, 15000).updateSkill(Skill.CONSTITUTION);
					cc.getSkillManager().setCurrentLevel(Skill.PRAYER, 15000).updateSkill(Skill.PRAYER);
			}*/
			//player.getSkillManager().addExperience(Skill.CONSTITUTION, 200000000);
			//player.getSkillManager().setExperience(Skill.ATTACK, 1000000000);
			System.out.println(&quot;Seri: &quot;+player.getSerialNumber());
		}
		if(command[0].equals(&quot;memory&quot;)) {
			//	ManagementFactory.getMemoryMXBean().gc();
			/*MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
			long mb = (heapMemoryUsage.getUsed() / 1000);*/
			long used = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
			player.getPacketSender().sendConsoleMessage(&quot;Heap usage: &quot;+Misc.insertCommasToNumber(&quot;&quot;+used+&quot;&quot;)+&quot; bytes!&quot;);
		}
		if(command[0].equals(&quot;star&quot;)) {
			ShootingStar.despawn(true);
			player.getPacketSender().sendConsoleMessage(&quot;star method called.&quot;);
		}
		if(command[0].equals(&quot;save&quot;)) {
			player.save();
		}
		if(command[0].equals(&quot;saveall&quot;)) {
			World.savePlayers();
		}
		if(command[0].equals(&quot;v1&quot;)) {
			World.sendMessage(&quot;&lt;img=10&gt; &lt;col=008FB2&gt;Another 20 voters have been rewarded! Vote now using the ::vote command!&quot;);
		}
		if(command[0].equals(&quot;test&quot;)) {
			player.getSkillManager().addExperience(Skill.FARMING, 500);
		}
		if(command[0].equalsIgnoreCase(&quot;frame&quot;)) {
			int frame = Integer.parseInt(command[1]);
			String text = command[2];
			player.getPacketSender().sendString(frame, text);
		}
		if(command[0].equals(&quot;pos&quot;)) {
			player.getPacketSender().sendConsoleMessage(player.getPosition().toString());
		}
		if(command[0].equals(&quot;npc&quot;)) {
			int id = Integer.parseInt(command[1]);
			NPC npc = new NPC(id, new Position(player.getPosition().getX(), player.getPosition().getY(), player.getPosition().getZ()));
			World.register(npc);
			npc.setConstitution(20000);
			player.getPacketSender().sendEntityHint(npc);
			/*TaskManager.submit(new Task(5) {

				@Override
				protected void execute() {
					npc.moveTo(new Position(npc.getPosition().getX() + 2, npc.getPosition().getY() + 2));
					player.getPacketSender().sendEntityHintRemoval(false);
					stop();
				}

			});*/
			//npc.getMovementCoordinator().setCoordinator(new Coordinator().setCoordinate(true).setRadius(5));
		}
		if (command[0].equals(&quot;skull&quot;)) {
			if(player.getSkullTimer() &gt; 0) {
				player.setSkullTimer(0);
				player.setSkullIcon(0);
				player.getUpdateFlag().flag(Flag.APPEARANCE);
			} else {
				CombatFactory.skullPlayer(player);
			}
		}
		if (command[0].equals(&quot;fillinv&quot;)) {
			for(int i = 0; i &lt; 28; i++) {
				int it = Misc.getRandom(10000);
				player.getInventory().add(it, 1);
			}
		}
		if(command[0].equals(&quot;playnpc&quot;)) {
			player.setNpcTransformationId(Integer.parseInt(command[1]));
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		} else if(command[0].equals(&quot;playobject&quot;)) {
			player.getPacketSender().sendObjectAnimation(new GameObject(2283, player.getPosition().copy()), new Animation(751));
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals(&quot;interface&quot;)) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendInterface(id);
		}
		if (command[0].equals(&quot;walkableinterface&quot;)) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendWalkableInterface(id);
		}
		if (command[0].equals(&quot;anim&quot;)) {
			int id = Integer.parseInt(command[1]);
			player.performAnimation(new Animation(id));
			player.getPacketSender().sendConsoleMessage(&quot;Sending animation: &quot; + id);
		}
		if (command[0].equals(&quot;gfx&quot;)) {
			int id = Integer.parseInt(command[1]);
			player.performGraphic(new Graphic(id));
			player.getPacketSender().sendConsoleMessage(&quot;Sending graphic: &quot; + id);
		}
		if (command[0].equals(&quot;object&quot;)) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendObject(new GameObject(id, player.getPosition(), 10, 3));
			player.getPacketSender().sendConsoleMessage(&quot;Sending object: &quot; + id);
		}
		if (command[0].equals(&quot;config&quot;)) {
			int id = Integer.parseInt(command[1]);
			int state = Integer.parseInt(command[2]);
			player.getPacketSender().sendConfig(id, state).sendConsoleMessage(&quot;Sent config.&quot;);
		}
		if (command[0].equals(&quot;checkbank&quot;)) {
			Player plr = World.getPlayerByName(wholeCommand.substring(10));
			if(plr != null) {
				player.getPacketSender().sendConsoleMessage(&quot;Loading bank..&quot;);
				for(Bank b : player.getBanks()) {
					if(b != null) {
						b.resetItems();
					}
				}
				for(int i = 0; i &lt; plr.getBanks().length; i++) {
					for(Item it : plr.getBank(i).getItems()) {
						if(it != null) {
							player.getBank(i).add(it, false);
						}
					}
				}
				player.getBank(0).open();
			} else {
				player.getPacketSender().sendConsoleMessage(&quot;Player is offline!&quot;);
			}
		}
		if (command[0].equals(&quot;checkinv&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(9));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Cannot find that player online..&quot;);
				return;
			}
			player.getInventory().setItems(player2.getInventory().getCopiedItems()).refreshItems();
		}
		if (command[0].equals(&quot;checkequip&quot;)) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(11));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage(&quot;Cannot find that player online..&quot;);
				return;
			}
			player.getEquipment().setItems(player2.getEquipment().getCopiedItems()).refreshItems();
			WeaponInterfaces.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
			WeaponAnimations.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
			BonusManager.update(player);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
	}
}

[/code]

So i&#39;m stuck at line 296. What do i need to put in the else if statement? It needs to check if something is followed after ::staffzone and that something does not equal &quot;all&quot;, then proceed to assume it&#39;s the playername and teleport said player to the staffzone. If the playername doesn&#39;t exist (which can be checked for easely obviously by this):
[code=java]
	if (playerToMove == null) {
			return;
		}
[/code]

After all the checks are done (if it contains &quot;all&quot; or a playername) it will assume that the player just wants to teleport himself to the staffzone. But i already got that part.
I cannot give you any errors since the command isn&#39;t finished so i haven&#39;t implemented it in the source yet.

Thanks for the help!</description>
    
    <lastBuildDate>Sat, 21 Nov 2015 19:39:25 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Complicated ::staffzone command // ruse base</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>I’ve added everything you told me to with some changes because it didn’t work:</p>
<pre><code class="lang-auto">if (command[0].equalsIgnoreCase("staffzone")) {
            if (command.length &lt; 2 || command[1] == null) {
                TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
                player.getPacketSender().sendMessage("You've teleported to the staffzone");
                return; // returns because we don't want to execute the code underneath.
            }
            if (command[1].equalsIgnoreCase("all")) {
				for (Player players : World.getPlayers()) {
					if (players != null) {
						if (players.getRights().isStaff()) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL);
							player.getPacketSender().sendMessage("You've teleported every online staff member to the staffzone.");
							return;
						}
					}
				}
                    World.sendStaffMessage("You've been teleported to the staffzone by " + player.getUsername() + ".");
                    return; 
            }
			String player2 = command[1];
            Player playerToMove = World.getPlayerByName(player2);
            if (playerToMove == null) {
                player.getPacketSender().sendMessage(""+playerToMove.getUsername()+" couldn't be found.");
				return; // The playerToMove is null for some reason. End here.
            }
            // The player to move is not null, so we're going to move him.
            TeleportHandler.teleportPlayer(playerToMove, new Position(2846, 5147), TeleportType.NORMAL); // Teleports the player
            player.getPacketSender().sendMessage("You've teleported " + playerToMove.getUsername() + "  to the staffzone."); // sends messages
            playerToMove.getPacketSender().sendMessage("You've been teleported to the staffzone by " + player.getUsername() + ".");
		}</code></pre>
<p>Now it doesn’t teleport every online staff member online to the staffzone when using ::staffzone all, it only teleports the player who uses the command to the staffzone. It does however send the message to every staff member online. The other commands work fine.</p>
<p>This was a fault on my part, because i thought it worked. Do you know why the command doesn’t work?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/3</link>
        <pubDate>Sat, 21 Nov 2015 19:39:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553907-3</guid>
        <source url="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907.rss">Complicated ::staffzone command // ruse base</source>
      </item>
      <item>
        <title>Complicated ::staffzone command // ruse base</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>Believe it or not, what you’re attempting to do is really easy.</p>
<p>What you should do, instead of checking if the command contains the “all” argument, is first check if the command contains <span class="bbcode-i">no arguments</span>.<br>
Then, you check if the second argument is “all”. If it is, you move all.<br>
Finally, you check if it’s a player. Only then would you grab a player to move.</p>
<p>The reason for this, is to remove the extra “else”/“else if” statements added.</p>
<p><code>if (command[0].equalsIgnoreCase("staffzone")) {
	if (command.length &lt; 2 || command[1] == null) {
		// Only you will be teleported here.
		// As there are no other arguments to the command.
		TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
		player.getPacketSender().sendMessage("You've teleported to the staffzone");
		return; // returns because we don't want to execute the code underneath.
	}
	if (command[1].equalsIgnoreCase("all")) {
		// The second argument of the command was "all"
		// Therefore, we should move ALL players.
		for (Player p: World.getPlayers()) {
			if (p != null &amp;&amp; (p.getRights() == PlayerRights.ADMINISTRATOR || p.getRights() == PlayerRights.DEVELOPER || p.getRights() == PlayerRights.OWNER)) { // Checks that the player "p" is NOT null AND they have staff rank.
				TeleportHandler.teleportPlayer(p, new Position(2846, 5147), TeleportType.NORMAL); // Teleports the player
				player.getPacketSender().sendMessage("You've teleported every online staff member to the staffzone."); // sends messages
				return;
			}
		}
		// I assume "sendStaffMessage" is a global message that sends to ALL staff. That being the case
		// it should not be looped, otherwise it will send once for each online staff.
		World.sendStaffMessage("You've been teleported to the staffzone by " + player.getUsername() + ".");
		return; // returns because we don't want to execute the code underneath.
	}
	Player playerToMove = Misc.formatText(command[1].replaceAll("_", " ")); // unsure if you had "playerToMove" declared, so it's declared here.
	if (playerToMove == null) {
		// Can also tell the user that the name searched was null.
		return; // The playerToMove is null for some reason. End here.
	}
	// The player to move is not null, so we're going to move him.
	TeleportHandler.teleportPlayer(playerToMove, new Position(2846, 5147), TeleportType.NORMAL); // Teleports the player
	player.getPacketSender().sendMessage("You've teleported " + playerToMove.getUsername() + "  to the staffzone."); // sends messages
	playerToMove.getPacketSender().sendMessage("You've been teleported to the staffzone by " + player.getUsername() + ".");
}</code></p>
<p>The above <span class="bbcode-i">will work in theory</span>. It was all edited in notepad, so don’t expect perfection.</p>
<p>My comments explain essentially why things were moved and what they do (somewhat).<br>
If it’s still confusing, please let me know.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/2</link>
        <pubDate>Sat, 21 Nov 2015 19:05:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553907-2</guid>
        <source url="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907.rss">Complicated ::staffzone command // ruse base</source>
      </item>
      <item>
        <title>Complicated ::staffzone command // ruse base</title>
        <dc:creator><![CDATA[@Soulxs Soulxs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/soulxs">@Soulxs</a> wrote:</p>
          <blockquote>
              <p>Hey!</p>
<p>Today i will present to you my newest puzzle. The complicated staffzone command.<br>
What i want it to do is:</p>
<ul>
<li>if the entire command is ::staffzone it will teleport the player who uses the command to the staffzone</li>
<li>if the text “all” is followed after staffzone ::staffzone it will teleport every online staff member to the staffzone</li>
<li>if after ::staffzone a playername is entered it will teleport said player to the staffzone.</li>
</ul>
<p>Here’s what i’ve got so far:</p>
<pre><code class="lang-auto">		if(command[0].equalsIgnoreCase("staffzone")) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll("_", " "));
			playerToMove = World.getPlayerByName(player2);
			if(command.length &gt; 1 &amp;&amp; command[1].equals("all") { // checks if the command[1] equals "all"
				if(player.getRights() == PlayerRights.ADMINISTRATOR || player.getRights() == PlayerRights.DEVELOPER || player.getRights() == PlayerRights.OWNER) { //checks to see if player has enough rights to do this
					for (Player players : World.getPlayers()) {
						if (players != null) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL); // teleports every staff member
							player.getPacketSender().sendMessage("You've teleported every online staff member to the staffzone."); // sends messages
							World.sendStaffMessage("You've been teleported to the staffzone by "+player.getUsername()+".");
							return;
						}
					}
				}
			}	 				else if  { // checks if if-statement on line 286 is true, else it checks if the command[1] contains a player name"
									
								}	 else { // if none of the above is true it will teleport the player who uses the command to the staffzone (a.k.a regular ::staffzone command)
										TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
										player.getPacketSender().sendMessage("You've teleported to the staffzone");
										return;
									}
		}</code></pre>
<p>I’ve tried using // to tell you as best as possible what i want it to do.<br>
Here’s my entire commandpacketlistener class:</p>
<pre><code class="lang-auto">package com.ruseps.net.packet.impl;

import mysql.MySQLController;

import com.ruseps.GameServer;
import com.ruseps.GameSettings;
import com.ruseps.engine.task.Task;
import com.ruseps.engine.task.TaskManager;
import com.ruseps.model.Animation;
import com.ruseps.model.Flag;
import com.ruseps.model.GameObject;
import com.ruseps.model.Graphic;
import com.ruseps.model.GroundItem;
import com.ruseps.model.Item;
import com.ruseps.model.Locations.Location;
import com.ruseps.model.PlayerRights;
import com.ruseps.model.Position;
import com.ruseps.model.Skill;
import com.ruseps.model.container.impl.Bank;
import com.ruseps.model.container.impl.Equipment;
import com.ruseps.model.container.impl.Shop.ShopManager;
import com.ruseps.model.definitions.ItemDefinition;
import com.ruseps.model.definitions.WeaponAnimations;
import com.ruseps.model.definitions.WeaponInterfaces;
import com.ruseps.net.packet.Packet;
import com.ruseps.net.packet.PacketListener;
import com.ruseps.net.security.ConnectionHandler;
import com.ruseps.util.Misc;
import com.ruseps.world.World;
import com.ruseps.world.content.BonusManager;
import com.ruseps.world.content.WellOfGoodwill;
import com.ruseps.world.content.Lottery;
import com.ruseps.world.content.PlayerLogs;
import com.ruseps.world.content.PlayerPunishment;
import com.ruseps.world.content.PlayerPunishment.Jail;
import com.ruseps.world.content.PlayersOnlineInterface;
import com.ruseps.world.content.ShootingStar;
import com.ruseps.world.content.clan.ClanChatManager;
import com.ruseps.world.content.combat.CombatFactory;
import com.ruseps.world.content.combat.DesolaceFormulas;
import com.ruseps.world.content.combat.weapon.CombatSpecial;
import com.ruseps.world.content.grandexchange.GrandExchange;
import com.ruseps.world.content.grandexchange.GrandExchangeOffer;
import com.ruseps.world.content.grandexchange.GrandExchangeOffers;
import com.ruseps.world.content.minigames.impl.WarriorsGuild;
import com.ruseps.world.content.skill.SkillManager;
import com.ruseps.world.content.skill.impl.slayer.SlayerTasks;
import com.ruseps.world.content.transportation.TeleportHandler;
import com.ruseps.world.content.transportation.TeleportType;
import com.ruseps.world.entity.impl.GroundItemManager;
import com.ruseps.world.entity.impl.npc.NPC;
import com.ruseps.world.entity.impl.player.Player;
import com.ruseps.world.entity.impl.player.PlayerSaving;


/**
 * This packet listener manages commands a player uses by using the
 * command console prompted by using the "`" char.
 * 
 * @author Gabriel Hannason
 */

public class CommandPacketListener implements PacketListener {

	@Override
	public void handleMessage(Player player, Packet packet) {
		String command = Misc.readString(packet.getBuffer());
		String[] parts = command.toLowerCase().split(" ");
		if(command.contains("\r") || command.contains("\n")) {
			return;
		}
		try {
			switch (player.getRights()) {
			case PLAYER:
				playerCommands(player, parts, command);
				break;
			case MODERATOR:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				break;
			case ADMINISTRATOR:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				break;
			case OWNER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				ownerCommands(player, parts, command);
				developerCommands(player, parts, command);
				break;
			case DEVELOPER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				moderatorCommands(player, parts, command);
				administratorCommands(player, parts, command);
				ownerCommands(player, parts, command);
				developerCommands(player, parts, command);
				break;
			case SUPPORT:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				helperCommands(player, parts, command);
				break;
			case VETERAN:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				break;
			case BRONZE_MEMBER:
			case SILVER_MEMBER:
			case GOLD_MEMBER:
			case PLATINUM_MEMBER:
			case DIAMOND_MEMBER:
				playerCommands(player, parts, command);
				memberCommands(player, parts, command);
				break;
			default:
				break;
			}
		} catch (Exception exception) {
			//exception.printStackTrace();

			if(player.getRights() == PlayerRights.DEVELOPER) {
				player.getPacketSender().sendConsoleMessage("Error executing that command.");
			} else {
				player.getPacketSender().sendMessage("Error executing that command.");
			}

		}
	}

	private static void playerCommands(final Player player, String[] command, String wholeCommand)  {
		if(wholeCommand.equalsIgnoreCase("claim")) {
			player.getPacketSender().sendMessage("You can only claim items from Sir Prysin in the Edgeville bank.");
		}
		if (wholeCommand.equalsIgnoreCase("donate") || wholeCommand.equalsIgnoreCase("store")) {
			player.getPacketSender().sendString(1, "www.artimproject.com/store/");
			player.getPacketSender().sendMessage("Attempting to open: www.artimproject.com/store/");
		}
		if(command[0].equalsIgnoreCase("attacks")) {
			int attack = DesolaceFormulas.getMeleeAttack(player);
			int range = DesolaceFormulas.getRangedAttack(player);
			int magic = DesolaceFormulas.getMagicAttack(player);
			player.getPacketSender().sendMessage("@bla@Melee attack: @or2@"+attack+"@bla@, ranged attack: @or2@"+range+"@bla@, magic attack: @or2@"+magic);
		}
		if (command[0].equals("save")) {
			player.save();
			player.getPacketSender().sendMessage("Your progress has been saved.");
		}
		if (command[0].equals("vote")) {
			player.getPacketSender().sendString(1, "www.artimproject.com/vote/?user="+player.getUsername());
			player.getPacketSender().sendMessage("Attempting to open: www.artimproject/vote/");
		}
		if(command[0].equals("help")) {
			if(player.getLastYell().elapsed(30000)) {
				World.sendStaffMessage("&lt;col=FF0066&gt;&lt;img=10&gt; [TICKET SYSTEM]&lt;col=6600FF&gt; "+player.getUsername()+" has requested help. Please help them!");
				player.getLastYell().reset();
				player.getPacketSender().sendMessage("&lt;col=663300&gt;Your help request has been received. Please be patient.");
			} else {
				player.getPacketSender().sendMessage("").sendMessage("&lt;col=663300&gt;You need to wait 30 seconds before using this again.").sendMessage("&lt;col=663300&gt;If it's an emergency, please private message a staff member directly instead.");
			}
		}
		if(command[0].equals("empty")) {
			player.getPacketSender().sendInterfaceRemoval().sendMessage("You clear your inventory.");
			player.getSkillManager().stopSkilling();
			player.getInventory().resetItems().refreshItems();
		}
		if(command[0].equals("players")) {
			player.getPacketSender().sendInterfaceRemoval();
			PlayersOnlineInterface.showInterface(player);
		}
		if(command[0].equalsIgnoreCase("[cn]")) {
			if(player.getInterfaceId() == 40172) {
				ClanChatManager.setName(player, wholeCommand.substring(wholeCommand.indexOf(command[1])));
			}
		}
	}

	private static void memberCommands(final Player player, String[] command, String wholeCommand) {
		if(wholeCommand.toLowerCase().startsWith("yell")) {
			if(PlayerPunishment.muted(player.getUsername()) || PlayerPunishment.IPMuted(player.getHostAddress())) {
				player.getPacketSender().sendMessage("You are muted and cannot yell.");
				return;
			}
			int delay = player.getRights().getYellDelay();
			if(!player.getLastYell().elapsed((delay*1000))) {
				player.getPacketSender().sendMessage("You must wait at least "+delay+" seconds between every yell-message you send.");
				return;
			}
			String yellMessage = wholeCommand.substring(4, wholeCommand.length());
			World.sendMessage(""+player.getRights().getYellPrefix()+"[Global Chat] &lt;img="+player.getRights().ordinal()+"&gt;"+player.getUsername()+":"+yellMessage);
			player.getLastYell().reset();
		}
	}

	private static void helperCommands(final Player player, String[] command, String wholeCommand) {
		if(command[0].equalsIgnoreCase("kick")) {
			String player2 = wholeCommand.substring(5);
			Player playerToKick = World.getPlayerByName(player2);
			if(playerToKick == null) {
				player.getPacketSender().sendConsoleMessage("Player "+player2+" couldn't be found on Artim.");
				return;
			} else if(playerToKick.getLocation() != Location.WILDERNESS) {
				World.deregister(playerToKick);
				player.getPacketSender().sendConsoleMessage("Kicked "+playerToKick.getUsername()+".");
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just kicked "+playerToKick.getUsername()+"!");
			}
		}
		if(command[0].equals("remindvote")) {
			World.sendMessage("&lt;img=10&gt; &lt;col=008FB2&gt;Remember to collect rewards by using the ::vote command every 12 hours!");
		}
		if(command[0].equalsIgnoreCase("saveall")) {
			World.savePlayers();
			player.getPacketSender().sendMessage("Saved players!");
		}
		if(command[0].equalsIgnoreCase("teleto")) {
			String playerToTele = wholeCommand.substring(7);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Cannot find that player online..");
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					TeleportHandler.teleportPlayer(player, player2.getPosition().copy(), TeleportType.NORMAL);
					player.getPacketSender().sendConsoleMessage("Teleporting to player: "+player2.getUsername()+"");
				} else
					player.getPacketSender().sendConsoleMessage("You can not teleport to this player at the moment. Minigame maybe?");
			}
		}
		if(command[0].equalsIgnoreCase("movehome")) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll("_", " "));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += " "+Misc.formatText(command[2].replaceAll("_", " "));
			Player playerToMove = World.getPlayerByName(player2);
			if(playerToMove.getLocation() != Location.WILDERNESS) {
				player.getPacketSender().sendMessage("You cannot move that player to home now.");
				return;
			}	
				if(playerToMove != null) {
				playerToMove.moveTo(GameSettings.DEFAULT_POSITION.copy());
				playerToMove.getPacketSender().sendMessage("You've been teleported home by "+player.getUsername()+".");
				player.getPacketSender().sendConsoleMessage("Sucessfully moved "+playerToMove.getUsername()+" to home.");
				} 
		}
		if (command[0].equalsIgnoreCase("staffzone") &amp;&amp; player.getLocation() != Location.WILDERNESS) {
				TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
				player.getPacketSender().sendMessage("You've teleported to the staffzone");
			}
		if(command[0].equalsIgnoreCase("sz")) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll("_", " "));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += " "+Misc.formatText(command[2].replaceAll("_", " "));
			Player playerToMove = World.getPlayerByName(player2);
			if(playerToMove.getLocation() == Location.WILDERNESS) {
				if(player.getRights() != PlayerRights.ADMINISTRATOR || player.getRights() != PlayerRights.OWNER || player.getRights() != PlayerRights.DEVELOPER) {
					player.getPacketSender().sendMessage("You can not teleport that player to the staffzone now.");
					return;
				} else {
					playerToMove.moveTo(GameSettings.STAFFZONE_POSITION.copy());
					player.getPacketSender().sendMessage("You've teleported "+player2+" to the staffzone.");
					playerToMove.getPacketSender().sendMessage("You've been teleported to the staffzone.");
					return;
				}
			} else {
				playerToMove.moveTo(GameSettings.STAFFZONE_POSITION.copy());
				player.getPacketSender().sendMessage("You've teleported "+player2+" to the staffzone.");
				playerToMove.getPacketSender().sendMessage("You've been teleported to the staffzone.");
			}
		}
		// down below
		if(command[0].equalsIgnoreCase("staffzone")) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll("_", " "));
			playerToMove = World.getPlayerByName(player2);
			if(command.length &gt; 1 &amp;&amp; command[1].equals("all") { // checks if the command[1] equals "all"
				if(player.getRights() == PlayerRights.ADMINISTRATOR || player.getRights() == PlayerRights.DEVELOPER || player.getRights() == PlayerRights.OWNER) { //checks to see if player has enough rights to do this
					for (Player players : World.getPlayers()) {
						if (players != null) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL); // teleports every staff member
							player.getPacketSender().sendMessage("You've teleported every online staff member to the staffzone."); // sends messages
							World.sendStaffMessage("You've been teleported to the staffzone by "+player.getUsername()+".");
						}
					}
				}
			}	 				else if () { // checks if if-statement on line 285 is true, else it checks if the command[1] contains a player name"
									
								}	 else { // if none of the above is true it will teleport the player who uses the command to the staffzone (a.k.a regular ::staffzone command)
										TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
										player.getPacketSender().sendMessage("You've teleported to the staffzone");
									}
		}
				
	}
		
	

	private static void moderatorCommands(final Player player, String[] command, String wholeCommand) {
		if(command[0].equalsIgnoreCase("mute")) {
			String player2 = Misc.formatText(wholeCommand.substring(5));
			if(!PlayerSaving.playerExists(player2)) {
				player.getPacketSender().sendConsoleMessage("Player "+player2+" does not exist.");
				return;
			} else {
				if(PlayerPunishment.muted(player2)) {
					player.getPacketSender().sendConsoleMessage("Player "+player2+" already has an active mute.");
					return;
				}
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just muted "+player2+"!");
				PlayerPunishment.mute(player2);
				player.getPacketSender().sendConsoleMessage("Player "+player2+" was successfully muted. Command logs written.");
				Player plr = World.getPlayerByName(player2);
				if(plr != null) {
					plr.getPacketSender().sendMessage("You have been muted by "+player.getUsername()+".");
				}
			}
		}
			if(command[0].equalsIgnoreCase("jail")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(5));
			if (player2 != null) {
				if(Jail.isJailed(player2)) {
					player.getPacketSender().sendConsoleMessage("That player is already jailed!");
					return;
				}
				if(Jail.jailPlayer(player2)) {
					player2.getSkillManager().stopSkilling();
					PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just jailed "+player2.getUsername()+"!");
					player.getPacketSender().sendMessage("Jailed player: "+player2.getUsername()+"");
					player2.getPacketSender().sendMessage("You have been jailed by "+player.getUsername()+".");
				} else {
					player.getPacketSender().sendConsoleMessage("Jail is currently full.");
				}
			} else {
				player.getPacketSender().sendConsoleMessage("Could not find that player online.");
			}
		}
		if(command[0].equalsIgnoreCase("unjail")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if (player2 != null) {
				Jail.unjail(player2);
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just unjailed "+player2.getUsername()+"!");
				player.getPacketSender().sendMessage("Unjailed player: "+player2.getUsername()+"");
				player2.getPacketSender().sendMessage("You have been unjailed by "+player.getUsername()+".");
			} else {
				player.getPacketSender().sendConsoleMessage("Could not find that player online.");
			}
		}
		
		
		if(command[0].equalsIgnoreCase("unmute")) {
			String player2 = wholeCommand.substring(7);
			if(!PlayerSaving.playerExists(player2)) {
				player.getPacketSender().sendConsoleMessage("Player "+player2+" does not exist.");
				return;
			} else {
				if(!PlayerPunishment.muted(player2)) {
					player.getPacketSender().sendConsoleMessage("Player "+player2+" is not muted!");
					return;
				}
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just unmuted "+player2+"!");
				PlayerPunishment.unmute(player2);
				player.getPacketSender().sendConsoleMessage("Player "+player2+" was successfully unmuted. Command logs written.");
				Player plr = World.getPlayerByName(player2);
				if(plr != null) {
					plr.getPacketSender().sendMessage("You have been unmuted by "+player.getUsername()+".");
				}
			}
		}
		if(command[0].equalsIgnoreCase("unban")) {
			String playerToBan = wholeCommand.substring(6);
			if(!PlayerSaving.playerExists(playerToBan)) {
				player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" does not exist.");
				return;
			} else {
				if(!PlayerPunishment.banned(playerToBan)) {
					player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" is not banned!");
					return;
				}
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just unbanned "+playerToBan+"!");
				PlayerPunishment.unban(playerToBan);
				player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" was successfully unbanned. Command logs written.");
			}
		}
		if(command[0].equals("sql")) {
			MySQLController.toggle();
			if(player.getRights() == PlayerRights.DEVELOPER) {
				player.getPacketSender().sendConsoleMessage("Sql toggled to status: "+GameSettings.MYSQL_ENABLED);
			} else {
				player.getPacketSender().sendMessage("Sql toggled to status: "+GameSettings.MYSQL_ENABLED+".");
			}
		}
		if(command[0].equalsIgnoreCase("cpuban")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if(player2 != null &amp;&amp; !player2.getSerialNumber().equals("null")) {
				World.deregister(player2);
				ConnectionHandler.banComputer(player2.getUsername(), player2.getSerialNumber());
				PlayerPunishment.ban(player2.getUsername());
				player.getPacketSender().sendConsoleMessage("CPU Banned player.");
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just CPUBanned "+player2.getUsername()+"!");
			} else
				player.getPacketSender().sendConsoleMessage("Could not CPU-ban that player.");
		}
		if(command[0].equalsIgnoreCase("unipmute")) {
			player.getPacketSender().sendConsoleMessage("Unipmutes can only be handled manually.");
		}
		if(command[0].equalsIgnoreCase("teletome")) {
			String playerToTele = wholeCommand.substring(9);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Cannot find that player online..");
				return;
			} 
			if(Location.getLocation(player) == Location.WILDERNESS || Location.getLocation(player2) == Location.WILDERNESS) {
				player.getPacketSender().sendMessage("You cannot teleport that player now.");
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					TeleportHandler.teleportPlayer(player2, player.getPosition().copy(), TeleportType.NORMAL);
					player.getPacketSender().sendConsoleMessage("Teleporting player to you: "+player2.getUsername()+"");
					player2.getPacketSender().sendMessage("You're being teleported to "+player.getUsername()+"...");
				} else
					player.getPacketSender().sendConsoleMessage("You can not teleport that player at the moment. Maybe you or they are in a minigame?");
			}
		}
	}

	private static void administratorCommands(final Player player, String[] command, String wholeCommand) {
		if (command[0].equals("szone")) {
			if (command.length &gt; 1 &amp;&amp; command[1].equals("all")) {
				for (Player players : World.getPlayers()) {
					if (players != null) {
						if (players.getRights().isStaff()) {
							TeleportHandler.teleportPlayer(players, new Position(2846, 5147), TeleportType.NORMAL);
							player.getPacketSender().sendMessage("You've teleported every online staff member to the staffzone.");
							World.sendStaffMessage("You've been teleported to the staffzone by "+player+".");
						}
					}
				}
			} else {
				TeleportHandler.teleportPlayer(player, new Position(2846, 5147), TeleportType.NORMAL);
				player.getPacketSender().sendMessage("You've teleported to the staffzone");
			}
		}
		if(command[0].equalsIgnoreCase("fmovehome")) {
			String player2 = command[1];
			player2 = Misc.formatText(player2.replaceAll("_", " "));
			if(command.length &gt;= 3 &amp;&amp; command[2] != null)
				player2 += " "+Misc.formatText(command[2].replaceAll("_", " "));
			Player playerToMove = World.getPlayerByName(player2);	
				if(playerToMove != null) {
				playerToMove.moveTo(GameSettings.DEFAULT_POSITION.copy());
				playerToMove.getPacketSender().sendMessage("You've been teleported home by "+player.getUsername()+".");
				player.getPacketSender().sendConsoleMessage("Sucessfully moved "+playerToMove.getUsername()+" to home.");
				} 
		}
		if(command[0].equalsIgnoreCase("fkick")) {
			String player2 = wholeCommand.substring(5);
			Player playerToKick = World.getPlayerByName(player2);
			if(playerToKick == null) {
				player.getPacketSender().sendConsoleMessage("Player "+player2+" couldn't be found on Artim.");
				return;
			} else {
				World.deregister(playerToKick);
				player.getPacketSender().sendConsoleMessage("Kicked "+playerToKick.getUsername()+".");
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just kicked "+playerToKick.getUsername()+"!");
			}
		}
	
		if(command[0].equalsIgnoreCase("toggleinvis")) {
			player.setNpcTransformationId(player.getNpcTransformationId() &gt; 0 ? -1 : 8254);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if(command[0].equalsIgnoreCase("movetome")) {
			String playerToTele = wholeCommand.substring(9);
			Player player2 = World.getPlayerByName(playerToTele);
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Cannot find that player..");
				return;
			} else {
				boolean canTele = TeleportHandler.checkReqs(player, player2.getPosition().copy()) &amp;&amp; player.getRegionInstance() == null &amp;&amp; player2.getRegionInstance() == null;
				if(canTele) {
					player.getPacketSender().sendConsoleMessage("Moving player: "+player2.getUsername()+"");
					player2.getPacketSender().sendMessage("You've been moved to "+player.getUsername());
					player2.moveTo(player.getPosition().copy());
				} else
					player.getPacketSender().sendConsoleMessage("Failed to move player to your coords. Are you or them in a minigame?");
			}
		}
		if(command[0].equalsIgnoreCase("ipban")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(6));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Could not find that player online.");
				return;
			} else {
				if(PlayerPunishment.IPBanned(player2.getHostAddress())){
					player.getPacketSender().sendConsoleMessage("Player "+player2.getUsername()+"'s IP is already banned. Command logs written.");
					return;
				}
				final String bannedIP = player2.getHostAddress();
				PlayerPunishment.addBannedIP(bannedIP);
				player.getPacketSender().sendConsoleMessage("Player "+player2.getUsername()+"'s IP was successfully banned. Command logs written.");
				for(Player playersToBan : World.getPlayers()) {
					if(playersToBan == null)
						continue;
					if(playersToBan.getHostAddress() == bannedIP) {
						PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just IPBanned "+playersToBan.getUsername()+"!");
						World.deregister(playersToBan);
						if(player2.getUsername() != playersToBan.getUsername())
							player.getPacketSender().sendConsoleMessage("Player "+playersToBan.getUsername()+" was successfully IPBanned. Command logs written.");
					}
				}
			}
		}
		if(command[0].equalsIgnoreCase("ban")) {
			String playerToBan = wholeCommand.substring(4);
			if(!PlayerSaving.playerExists(playerToBan)) {
				player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" does not exist.");
				return;
			} else {
				if(PlayerPunishment.banned(playerToBan)) {
					player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" already has an active ban.");
					return;
				}
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just banned "+playerToBan+"!");
				PlayerPunishment.ban(playerToBan);
				player.getPacketSender().sendConsoleMessage("Player "+playerToBan+" was successfully banned. Command logs written.");
				Player toBan = World.getPlayerByName(playerToBan);
				if(toBan != null) {
					World.deregister(toBan);
				}
			}
		}
		if(command[0].equalsIgnoreCase("ipmute")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(7));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Could not find that player online.");
				return;
			} else {
				if(PlayerPunishment.IPMuted(player2.getHostAddress())){
					player.getPacketSender().sendConsoleMessage("Player "+player2.getUsername()+"'s IP is already IPMuted. Command logs written.");
					return;
				}
				final String mutedIP = player2.getHostAddress();
				PlayerPunishment.addMutedIP(mutedIP);
				player.getPacketSender().sendConsoleMessage("Player "+player2.getUsername()+" was successfully IPMuted. Command logs written.");
				player2.getPacketSender().sendMessage("You have been IPMuted by "+player.getUsername()+".");
				PlayerLogs.log(player.getUsername(), ""+player.getUsername()+" just IPMuted "+player2.getUsername()+"!");
			}
		}
		if (command[0].equals("reset")) {
			for (Skill skill : Skill.values()) {
				int level = skill.equals(Skill.CONSTITUTION) ? 100 : skill.equals(Skill.PRAYER) ? 10 : 1;
				player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(skill == Skill.CONSTITUTION ? 10 : 1));
			}
			player.getPacketSender().sendConsoleMessage("Your skill levels have now been reset.");
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals("rights")) {
			if(player.getUsername().equalsIgnoreCase("Primed") || player.getUsername().equalsIgnoreCase("Primed") || player.getUsername().equalsIgnoreCase("Primed")) {
				int rankId = Integer.parseInt(command[1]);
				if(player.getUsername().equalsIgnoreCase("server") &amp;&amp; rankId != 10) {
					player.getPacketSender().sendMessage("You cannot do that.");
					return;
				}
				Player target = World.getPlayerByName(wholeCommand.substring(rankId &gt;= 10 ? 10 : 9, wholeCommand.length()));
				if (target == null || target.getUsername().equalsIgnoreCase("Primed")){
					player.getPacketSender().sendConsoleMessage("Error processing command.");
				} else {
					target.setRights(PlayerRights.forId(rankId));
					target.getPacketSender().sendMessage("Your player rights have been changed.");
					target.getPacketSender().sendRights();
				}
			}
		}
		if (command[0].equals("master")) {
			for (Skill skill : Skill.values()) {
				int level = SkillManager.getMaxAchievingLevel(skill);
				player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(level == 120 ? 120 : 99));
			}
			player.getPacketSender().sendConsoleMessage("You are now a master of all skills.");
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals("setlevel") &amp;&amp; !player.getUsername().equalsIgnoreCase("Jack")) {
			int skillId = Integer.parseInt(command[1]);
			int level = Integer.parseInt(command[2]);
			if(level &gt; 15000) {
				player.getPacketSender().sendConsoleMessage("You can only have a maxmium level of 15000.");
				return;
			}
			Skill skill = Skill.forId(skillId);
			player.getSkillManager().setCurrentLevel(skill, level).setMaxLevel(skill, level).setExperience(skill, SkillManager.getExperienceForLevel(level));
			player.getPacketSender().sendConsoleMessage("You have set your " + skill.getName() + " level to " + level);
		}
		if (command[0].equals("item")) {
			int id = Integer.parseInt(command[1]);		
			int amount = (command.length == 2 ? 1 : Integer.parseInt(command[2].trim().toLowerCase().replaceAll("k", "000").replaceAll("m", "000000").replaceAll("b", "000000000")));
			if(amount &gt; Integer.MAX_VALUE) {
				amount = Integer.MAX_VALUE;
			}
			Item item = new Item(id, amount);
			player.getInventory().add(item, true);

			player.getPacketSender().sendItemOnInterface(47052, 11694, 1);
		}
		if(wholeCommand.toLowerCase().startsWith("yell") &amp;&amp; player.getRights() == PlayerRights.PLAYER) {
			player.getPacketSender().sendMessage("Only members can yell. To become one, simply use ::store, buy a scroll").sendMessage("and then claim it.");
		}
		if (command[0].equals("emptyitem")) {
			if(player.getInterfaceId() &gt; 0 || player.getLocation() != null &amp;&amp; player.getLocation() == Location.WILDERNESS) {
				player.getPacketSender().sendMessage("You cannot do this at the moment.");
				return;
			}
			int item = Integer.parseInt(command[1]);
			int itemAmount = player.getInventory().getAmount(item);
			Item itemToDelete = new Item(item, itemAmount);
			player.getInventory().delete(itemToDelete).refreshItems();
		}
		if(command[0].equals("gold")) {
			Player p = World.getPlayerByName(wholeCommand.substring(5));
			if(p != null) {
				long gold = 0;
				for(Item item : p.getInventory().getItems()) {
					if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
						gold+= item.getDefinition().getValue();
				}
				for(Item item : p.getEquipment().getItems()) {
					if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
						gold+= item.getDefinition().getValue();
				}
				for(int i = 0; i &lt; 9; i++) {
					for(Item item : p.getBank(i).getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
				}
				gold += p.getMoneyInPouch();
				player.getPacketSender().sendMessage(p.getUsername() + " has "+Misc.insertCommasToNumber(String.valueOf(gold))+" coins.");
			} else
				player.getPacketSender().sendMessage("Can not find player online.");
		}
		if(command[0].equals("pray")) {
			player.getSkillManager().setCurrentLevel(Skill.PRAYER, 15000);
		}
		if(command[0].equals("cashineco")) {
			int gold = 0 , plrLoops = 0;
			for(Player p : World.getPlayers()) {
				if(p != null) {
					for(Item item : p.getInventory().getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
					for(Item item : p.getEquipment().getItems()) {
						if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
							gold+= item.getDefinition().getValue();
					}
					for(int i = 0; i &lt; 9; i++) {
						for(Item item : player.getBank(i).getItems()) {
							if(item != null &amp;&amp; item.getId() &gt; 0 &amp;&amp; item.tradeable())
								gold+= item.getDefinition().getValue();
						}
					}
					gold += p.getMoneyInPouch();
					plrLoops++;
				}
			}
			player.getPacketSender().sendMessage("Total gold in economy right now: "+gold+", went through "+plrLoops+" players items.");
		}
		if (command[0].equals("tele")) {
			int x = Integer.valueOf(command[1]), y = Integer.valueOf(command[2]);
			int z = player.getPosition().getZ();
			if (command.length &gt; 3)
				z = Integer.valueOf(command[3]);
			Position position = new Position(x, y, z);
			player.moveTo(position);
			player.getPacketSender().sendConsoleMessage("Teleporting to " + position.toString());
		}
		if (command[0].equals("bank")) {
			player.getBank(player.getCurrentBankTab()).open();
		}
		if (command[0].equals("find")) {
			String name = wholeCommand.substring(5).toLowerCase().replaceAll("_", " ");
			player.getPacketSender().sendConsoleMessage("Finding item id for item - " + name);
			boolean found = false;
			for (int i = 0; i &lt; ItemDefinition.getMaxAmountOfItems(); i++) {
				if (ItemDefinition.forId(i).getName().toLowerCase().contains(name)) {
					player.getPacketSender().sendConsoleMessage("Found item with name [" + ItemDefinition.forId(i).getName().toLowerCase() + "] - id: " + i);
					found = true;
				}
			}
			if (!found) {
				player.getPacketSender().sendConsoleMessage("No item with name [" + name + "] has been found!");
			}
		} else if (command[0].equals("id")) {
			String name = wholeCommand.substring(3).toLowerCase().replaceAll("_", " ");
			player.getPacketSender().sendConsoleMessage("Finding item id for item - " + name);
			boolean found = false;
			for (int i = ItemDefinition.getMaxAmountOfItems()-1; i &gt; 0; i--) {
				if (ItemDefinition.forId(i).getName().toLowerCase().contains(name)) {
					player.getPacketSender().sendConsoleMessage("Found item with name [" + ItemDefinition.forId(i).getName().toLowerCase() + "] - id: " + i);
					found = true;
				}
			}
			if (!found) {
				player.getPacketSender().sendConsoleMessage("No item with name [" + name + "] has been found!");
			}
		}
		if(command[0].equals("spec")) {
			player.setSpecialPercentage(100);
			CombatSpecial.updateBar(player);
		}
		if(command[0].equals("runes")) {
			for(Item t : ShopManager.getShops().get(0).getItems()) {
				if(t != null) {
					player.getInventory().add(new Item(t.getId(), 200000));
				}
			}
		}
		if (command[0].contains("gear")) {
			int[][] data = wholeCommand.contains("jack") ? 
					new int[][]{
				{Equipment.HEAD_SLOT, 1050},
				{Equipment.CAPE_SLOT, 12170},
				{Equipment.AMULET_SLOT, 15126},
				{Equipment.WEAPON_SLOT, 15444},
				{Equipment.BODY_SLOT, 14012},
				{Equipment.SHIELD_SLOT, 13740},
				{Equipment.LEG_SLOT, 14013},
				{Equipment.HANDS_SLOT, 7462},
				{Equipment.FEET_SLOT, 11732},
				{Equipment.RING_SLOT, 15220}
			} : wholeCommand.contains("range") ? 
					new int[][]{
				{Equipment.HEAD_SLOT, 3749},
				{Equipment.CAPE_SLOT, 10499},
				{Equipment.AMULET_SLOT, 15126},
				{Equipment.WEAPON_SLOT, 18357},
				{Equipment.BODY_SLOT, 2503},
				{Equipment.SHIELD_SLOT, 13740},
				{Equipment.LEG_SLOT, 2497},
				{Equipment.HANDS_SLOT, 7462},
				{Equipment.FEET_SLOT, 11732},
				{Equipment.RING_SLOT, 15019},
				{Equipment.AMMUNITION_SLOT, 9244},
			}:
				new int[][]{
						{Equipment.HEAD_SLOT, 1163},
						{Equipment.CAPE_SLOT, 19111},
						{Equipment.AMULET_SLOT, 6585},
						{Equipment.WEAPON_SLOT, 4151},
						{Equipment.BODY_SLOT, 1127},
						{Equipment.SHIELD_SLOT, 13262},
						{Equipment.LEG_SLOT, 1079},
						{Equipment.HANDS_SLOT, 7462},
						{Equipment.FEET_SLOT, 11732},
						{Equipment.RING_SLOT, 2550}
				};
				for (int i = 0; i &lt; data.length; i++) {
					int slot = data[i][0], id = data[i][1];
					player.getEquipment().setItem(slot, new Item(id, id == 9244 ? 500 : 1));
				}
				BonusManager.update(player);
				WeaponInterfaces.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
				WeaponAnimations.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
				player.getEquipment().refreshItems();
				player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
	}

	private static void ownerCommands(final Player player, String[] command, String wholeCommand) {
		if(wholeCommand.equals("afk")) {
			World.sendMessage("&lt;img=10&gt; &lt;col=FF0000&gt;&lt;shad=0&gt;"+player.getUsername()+": I am now away, please don't message me; I won't reply.");
		}
		if(wholeCommand.equals("sfs") &amp;&amp; player.getUsername().equals("Primed")) {
			Lottery.restartLottery();
		}
		if (command[0].equals("giveitem")) {
			int item = Integer.parseInt(command[1]);
			int amount = Integer.parseInt(command[2]);
			String rss = command[3];
			if(command.length &gt; 4)
				rss+= " "+command[4];
			if(command.length &gt; 5)
				rss+= " "+command[5];
			Player target = World.getPlayerByName(rss);
			if (target == null) {
				player.getPacketSender().sendConsoleMessage("Player must be online to give them stuff!");
			} else {
				player.getPacketSender().sendConsoleMessage("Gave player gold.");
				player.getPacketSender().sendMessage("You gave the player some items!");
				target.getInventory().add(item, amount);
			}
		}
		if (command[0].equals("update")) {
			int time = Integer.parseInt(command[1]);
			if(time &gt; 0) {
				GameServer.setUpdating(true);
				for (Player players : World.getPlayers()) {
					if (players == null)
						continue;
					players.getPacketSender().sendSystemUpdate(time);
				}
				TaskManager.submit(new Task(time) {
					@Override
					protected void execute() {
						for (Player player : World.getPlayers()) {
							if (player != null) {
								World.deregister(player);
							}
						}
						WellOfGoodwill.save();
						GrandExchangeOffers.save();
						ClanChatManager.save();
						GameServer.getLogger().info("Update task finished!");
						stop();
					}
				});
			}
		}
		if(command[0].contains("host")) {
			String plr = wholeCommand.substring(command[0].length()+1);
			Player playr2 = World.getPlayerByName(plr);
			if(playr2 != null) {
				player.getPacketSender().sendConsoleMessage(""+playr2.getUsername()+" host IP: "+playr2.getHostAddress()+", serial number: "+playr2.getSerialNumber());
			} else
				player.getPacketSender().sendConsoleMessage("Could not find player: "+plr);
		}
	}

	private static void developerCommands(Player player, String command[], String wholeCommand) {
		if(command[0].equals("sendstring")) {
			int child = Integer.parseInt(command[1]);
			String string = command[2];
			player.getPacketSender().sendString(child, string);
		}
		if(command[0].equals("tasks")) {
			player.getPacketSender().sendConsoleMessage("Found "+TaskManager.getTaskAmount()+" tasks.");
		}
		if(command[0].equals("reloadcpubans")) {
			ConnectionHandler.reloadUUIDBans();
			player.getPacketSender().sendConsoleMessage("UUID bans reloaded!");
		}
		if(command[0].equals("reloadipbans")) {
			PlayerPunishment.reloadIPBans();
			player.getPacketSender().sendConsoleMessage("IP bans reloaded!");
		}
		if(command[0].equals("reloadipmutes")) {
			PlayerPunishment.reloadIPMutes();
			player.getPacketSender().sendConsoleMessage("IP mutes reloaded!");
		}
		if(command[0].equalsIgnoreCase("cpuban2")) {
			String serial = wholeCommand.substring(8);
			ConnectionHandler.banComputer("cpuban2", serial);
			player.getPacketSender().sendConsoleMessage(""+serial+" cpu was successfully banned. Command logs written.");
		}
		if(command[0].equalsIgnoreCase("ipban2")) {
			String ip = wholeCommand.substring(7);
			PlayerPunishment.addBannedIP(ip);
			player.getPacketSender().sendConsoleMessage(""+ip+" IP was successfully banned. Command logs written.");
		}
		if(command[0].equals("scc")) {
			/*PlayerPunishment.addBannedIP("46.16.33.9");
			ConnectionHandler.banComputer("Kustoms", -527305299);
			player.getPacketSender().sendMessage("Banned Kustoms.");
			 */
			/*for(GrandExchangeOffer of : GrandExchangeOffers.getOffers()) {
				if(of != null) {
					if(of.getId() == 34) {
					//	if(of.getOwner().toLowerCase().contains("eliyahu") || of.getOwner().toLowerCase().contains("matt")) {

							player.getPacketSender().sendConsoleMessage("FOUND IT! Owner: "+of.getOwner()+", amount: "+of.getAmount()+", finished: "+of.getAmountFinished());
						//	GrandExchangeOffers.getOffers().remove(of);
						//}
					}
				}
			}*/
			/*Player cc = World.getPlayerByName("Thresh");
			if(cc != null) {
				//cc.getPointsHandler().setPrestigePoints(50, true);
				//cc.getPointsHandler().refreshPanel();
				//player.getPacketSender().sendConsoleMessage("Did");
					cc.getSkillManager().setCurrentLevel(Skill.CONSTITUTION, 15000).updateSkill(Skill.CONSTITUTION);
					cc.getSkillManager().setCurrentLevel(Skill.PRAYER, 15000).updateSkill(Skill.PRAYER);
			}*/
			//player.getSkillManager().addExperience(Skill.CONSTITUTION, 200000000);
			//player.getSkillManager().setExperience(Skill.ATTACK, 1000000000);
			System.out.println("Seri: "+player.getSerialNumber());
		}
		if(command[0].equals("memory")) {
			//	ManagementFactory.getMemoryMXBean().gc();
			/*MemoryUsage heapMemoryUsage = ManagementFactory.getMemoryMXBean().getHeapMemoryUsage();
			long mb = (heapMemoryUsage.getUsed() / 1000);*/
			long used = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
			player.getPacketSender().sendConsoleMessage("Heap usage: "+Misc.insertCommasToNumber(""+used+"")+" bytes!");
		}
		if(command[0].equals("star")) {
			ShootingStar.despawn(true);
			player.getPacketSender().sendConsoleMessage("star method called.");
		}
		if(command[0].equals("save")) {
			player.save();
		}
		if(command[0].equals("saveall")) {
			World.savePlayers();
		}
		if(command[0].equals("v1")) {
			World.sendMessage("&lt;img=10&gt; &lt;col=008FB2&gt;Another 20 voters have been rewarded! Vote now using the ::vote command!");
		}
		if(command[0].equals("test")) {
			player.getSkillManager().addExperience(Skill.FARMING, 500);
		}
		if(command[0].equalsIgnoreCase("frame")) {
			int frame = Integer.parseInt(command[1]);
			String text = command[2];
			player.getPacketSender().sendString(frame, text);
		}
		if(command[0].equals("pos")) {
			player.getPacketSender().sendConsoleMessage(player.getPosition().toString());
		}
		if(command[0].equals("npc")) {
			int id = Integer.parseInt(command[1]);
			NPC npc = new NPC(id, new Position(player.getPosition().getX(), player.getPosition().getY(), player.getPosition().getZ()));
			World.register(npc);
			npc.setConstitution(20000);
			player.getPacketSender().sendEntityHint(npc);
			/*TaskManager.submit(new Task(5) {

				@Override
				protected void execute() {
					npc.moveTo(new Position(npc.getPosition().getX() + 2, npc.getPosition().getY() + 2));
					player.getPacketSender().sendEntityHintRemoval(false);
					stop();
				}

			});*/
			//npc.getMovementCoordinator().setCoordinator(new Coordinator().setCoordinate(true).setRadius(5));
		}
		if (command[0].equals("skull")) {
			if(player.getSkullTimer() &gt; 0) {
				player.setSkullTimer(0);
				player.setSkullIcon(0);
				player.getUpdateFlag().flag(Flag.APPEARANCE);
			} else {
				CombatFactory.skullPlayer(player);
			}
		}
		if (command[0].equals("fillinv")) {
			for(int i = 0; i &lt; 28; i++) {
				int it = Misc.getRandom(10000);
				player.getInventory().add(it, 1);
			}
		}
		if(command[0].equals("playnpc")) {
			player.setNpcTransformationId(Integer.parseInt(command[1]));
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		} else if(command[0].equals("playobject")) {
			player.getPacketSender().sendObjectAnimation(new GameObject(2283, player.getPosition().copy()), new Animation(751));
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
		if (command[0].equals("interface")) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendInterface(id);
		}
		if (command[0].equals("walkableinterface")) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendWalkableInterface(id);
		}
		if (command[0].equals("anim")) {
			int id = Integer.parseInt(command[1]);
			player.performAnimation(new Animation(id));
			player.getPacketSender().sendConsoleMessage("Sending animation: " + id);
		}
		if (command[0].equals("gfx")) {
			int id = Integer.parseInt(command[1]);
			player.performGraphic(new Graphic(id));
			player.getPacketSender().sendConsoleMessage("Sending graphic: " + id);
		}
		if (command[0].equals("object")) {
			int id = Integer.parseInt(command[1]);
			player.getPacketSender().sendObject(new GameObject(id, player.getPosition(), 10, 3));
			player.getPacketSender().sendConsoleMessage("Sending object: " + id);
		}
		if (command[0].equals("config")) {
			int id = Integer.parseInt(command[1]);
			int state = Integer.parseInt(command[2]);
			player.getPacketSender().sendConfig(id, state).sendConsoleMessage("Sent config.");
		}
		if (command[0].equals("checkbank")) {
			Player plr = World.getPlayerByName(wholeCommand.substring(10));
			if(plr != null) {
				player.getPacketSender().sendConsoleMessage("Loading bank..");
				for(Bank b : player.getBanks()) {
					if(b != null) {
						b.resetItems();
					}
				}
				for(int i = 0; i &lt; plr.getBanks().length; i++) {
					for(Item it : plr.getBank(i).getItems()) {
						if(it != null) {
							player.getBank(i).add(it, false);
						}
					}
				}
				player.getBank(0).open();
			} else {
				player.getPacketSender().sendConsoleMessage("Player is offline!");
			}
		}
		if (command[0].equals("checkinv")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(9));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Cannot find that player online..");
				return;
			}
			player.getInventory().setItems(player2.getInventory().getCopiedItems()).refreshItems();
		}
		if (command[0].equals("checkequip")) {
			Player player2 = World.getPlayerByName(wholeCommand.substring(11));
			if(player2 == null) {
				player.getPacketSender().sendConsoleMessage("Cannot find that player online..");
				return;
			}
			player.getEquipment().setItems(player2.getEquipment().getCopiedItems()).refreshItems();
			WeaponInterfaces.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
			WeaponAnimations.assign(player, player.getEquipment().get(Equipment.WEAPON_SLOT));
			BonusManager.update(player);
			player.getUpdateFlag().flag(Flag.APPEARANCE);
		}
	}
}
</code></pre>
<p>So i’m stuck at line 296. What do i need to put in the else if statement? It needs to check if something is followed after ::staffzone and that something does not equal “all”, then proceed to assume it’s the playername and teleport said player to the staffzone. If the playername doesn’t exist (which can be checked for easely obviously by this):</p>
<pre><code class="lang-auto">	if (playerToMove == null) {
			return;
		}</code></pre>
<p>After all the checks are done (if it contains “all” or a playername) it will assume that the player just wants to teleport himself to the staffzone. But i already got that part.<br>
I cannot give you any errors since the command isn’t finished so i haven’t implemented it in the source yet.</p>
<p>Thanks for the help!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907/1</link>
        <pubDate>Sat, 21 Nov 2015 18:33:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553907-1</guid>
        <source url="https://forum.moparisthebest.com/t/complicated-staffzone-command-ruse-base/553907.rss">Complicated ::staffzone command // ruse base</source>
      </item>
  </channel>
</rss>
