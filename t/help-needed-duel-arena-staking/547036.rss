<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Help Needed] Duel Arena Staking</title>
    <link>https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036</link>
    <description>Hi, I was wondering how I would go about making it so that players can stake in the duel arena. I figured out how to make it so that certain people can, but I haven&#39;t figured out how to make it so that everyone can. I tried changing some true/false statements and that didn&#39;t seem to help. I&#39;ve never messed with this sort of thing and I would appreciate it if I could get some help/advice. Here is my TradeAndDuel.java file, if you need any other just ask.
Part of file dealing with duel:
[code=java]	/**
	* Dueling
	**/
	
	public CopyOnWriteArrayList&lt;GameItem&gt; otherStakedItems = new CopyOnWriteArrayList&lt;GameItem&gt;();
	public CopyOnWriteArrayList&lt;GameItem&gt; stakedItems = new CopyOnWriteArrayList&lt;GameItem&gt;();
	
	@SuppressWarnings(&quot;static-access&quot;)
	public void requestDuel(int id) {
		try {
			if (id == c.playerId)
				return;
			resetDuel();
			resetDuelItems();
			c.duelingWith = id;
			Client o = (Client) Server.playerHandler.players[id];
			if(o == null) {
				return;
			}
			c.duelRequested = true;
			if(c.duelStatus == 0 &amp;&amp; o.duelStatus == 0 &amp;&amp; c.duelRequested &amp;&amp; o.duelRequested &amp;&amp; c.duelingWith == o.getId() &amp;&amp; o.duelingWith == c.getId()) {
				if(c.goodDistance(c.getX(), c.getY(), o.getX(), o.getY(), 1)) {			
					c.getTradeAndDuel().openDuel();
					o.getTradeAndDuel().openDuel();
				} else {
					c.sendMessage(&quot;You need to get closer to your opponent to start the duel.&quot;);
				}

			} else {
				c.sendMessage(&quot;Sending duel request...&quot;);
				o.sendMessage(c.playerName+&quot;:duelreq:&quot;);		
			}
		} catch (Exception e) {
			Misc.println(&quot;Error requesting duel.&quot;);
		}
	}
	
	
	@SuppressWarnings(&quot;static-access&quot;)
	public void openDuel() {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if(o == null) {
			return;
		}	
		c.duelStatus = 1;
		refreshduelRules();
		refreshDuelScreen();
		c.canOffer = true;
		for (int i = 0; i &lt; c.playerEquipment.length; i++) {
			sendDuelEquipment(c.playerEquipment[i], c.playerEquipmentN[i], i);
		}
		c.getPA().sendFrame126(&quot;Dueling with: &quot; + o.playerName + &quot; (level-&quot; + o.combatLevel + &quot;)&quot;, 6671);
		c.getPA().sendFrame126(&quot;&quot;, 6684);
		c.getPA().sendFrame248(6575, 3321);
		c.getItems().resetItems(3322);
	}
	
	public void sendDuelEquipment(int itemId, int amount, int slot) {
		synchronized(c) {
			if(itemId != 0) {
				c.getOutStream().createFrameVarSizeWord(34);
				c.getOutStream().writeWord(13824);
				c.getOutStream().writeByte(slot);
				c.getOutStream().writeWord(itemId+1);

				if (amount &gt; 254) {
					c.getOutStream().writeByte(255);
					c.getOutStream().writeDWord(amount);
				} else {
					c.getOutStream().writeByte(amount);
				}
				c.getOutStream().endFrameVarSizeWord();
				c.flushOutStream();
			}
		}
	}
	
	public void refreshduelRules() {
		for(int i = 0; i &lt; c.duelRule.length; i++) {	
			c.duelRule[i] = false;
		}
		c.getPA().sendFrame87(286, 0);
		c.duelOption = 0;
	}
	
	@SuppressWarnings(&quot;static-access&quot;)
	public void refreshDuelScreen() {
		synchronized(c) {
			Client o = (Client) Server.playerHandler.players[c.duelingWith];
			if(o == null) {
				return;
			}
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(6669);
			c.getOutStream().writeWord(stakedItems.toArray().length);
			int current = 0;
			for(GameItem item : stakedItems) {
				if (item.amount &gt; 254) {
					c.getOutStream().writeByte(255); 
					c.getOutStream().writeDWord_v2(item.amount);	
				} else  {
					c.getOutStream().writeByte(item.amount);
				}
				if (item.id &gt; Config.ITEM_LIMIT || item.id &lt; 0) {
					item.id = Config.ITEM_LIMIT;
				}
				c.getOutStream().writeWordBigEndianA(item.id + 1);
				
				current++;
			}
			
			if(current &lt; 27) {
				for(int i = current; i &lt; 28; i++) {
					c.getOutStream().writeByte(1);
					c.getOutStream().writeWordBigEndianA(-1);
				}
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();
			
			c.getOutStream().createFrameVarSizeWord(53);
			c.getOutStream().writeWord(6670);
			c.getOutStream().writeWord(o.getTradeAndDuel().stakedItems.toArray().length);
			current = 0;	
			for (GameItem item : o.getTradeAndDuel().stakedItems) {
				if (item.amount &gt; 254) {
					c.getOutStream().writeByte(255);
					c.getOutStream().writeDWord_v2(item.amount);
				}  else  {
					c.getOutStream().writeByte(item.amount);
				}
				if (item.id &gt; Config.ITEM_LIMIT || item.id &lt; 0) {
					item.id = Config.ITEM_LIMIT;
				}
				c.getOutStream().writeWordBigEndianA(item.id + 1);
				current++;
			}
			
			if(current &lt; 27) {
				for(int i = current; i &lt; 28; i++) {
					c.getOutStream().writeByte(1);
					c.getOutStream().writeWordBigEndianA(-1);
				}
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();
		}
	}
	
	
	@SuppressWarnings(&quot;static-access&quot;)
	public boolean stakeItem(int itemID, int fromSlot, int amount) {
		
		for (int i : Config.ITEM_TRADEABLE) {
			if(i == itemID) {
				c.sendMessage(&quot;You can&#39;t stake this item.&quot;);
				return false;
			}
                if (!c.playerName.equalsIgnoreCase(&quot;Dillon&quot;)) {
                if (!c.playerName.equalsIgnoreCase(&quot;Test&quot;)) {
                if (!c.playerName.equalsIgnoreCase(&quot;Testies&quot;)) {
				c.sendMessage(&quot;Staking has been disabled due to dupes and glitches, will be fixed soon.&quot;);
		return false;
		}		
		}
		}
		}
		if (amount &lt;= 0)
			return false;
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if (o == null ) {
			declineDuel();
			return false;
		}
		if (o.duelStatus &lt;= 0 || c.duelStatus &lt;= 0) {
			declineDuel();
			o.getTradeAndDuel().declineDuel();
			return false;
		}
		if (!c.canOffer) {
			return false;
		}
		changeDuelStuff();
		if(!Item.itemStackable[itemID]) {
			for(int a = 0; a &lt; amount; a++) {
				if(c.getItems().playerHasItem(itemID, 1)) {
					stakedItems.add(new GameItem(itemID, 1));	
					c.getItems().deleteItem(itemID, c.getItems().getItemSlot(itemID), 1);
				}
			}		
			c.getItems().resetItems(3214);
			c.getItems().resetItems(3322);
			o.getItems().resetItems(3214);
			o.getItems().resetItems(3322);
			refreshDuelScreen();
			o.getTradeAndDuel().refreshDuelScreen();
			c.getPA().sendFrame126(&quot;&quot;, 6684);
			o.getPA().sendFrame126(&quot;&quot;, 6684);
		}
		
		if(!c.getItems().playerHasItem(itemID, amount)) {
			return false;
		}
		if (Item.itemStackable[itemID] || Item.itemIsNote[itemID]) {
			boolean found = false;
			for (GameItem item : stakedItems) {
				if (item.id == itemID) {
					found = false;
					item.amount += amount;
					c.getItems().deleteItem(itemID, fromSlot, amount);
					break;
				}
			}
			if (!found) {
				c.getItems().deleteItem(itemID, fromSlot, amount);
				stakedItems.add(new GameItem(itemID, amount));
			}
		}
		
		c.getItems().resetItems(3214);
		c.getItems().resetItems(3322);
		o.getItems().resetItems(3214);
		o.getItems().resetItems(3322);
		refreshDuelScreen();
		o.getTradeAndDuel().refreshDuelScreen();
		c.getPA().sendFrame126(&quot;&quot;, 6684);
		o.getPA().sendFrame126(&quot;&quot;, 6684);
		return false;
	}
	
	
	@SuppressWarnings(&quot;static-access&quot;)
	public boolean fromDuel(int itemID, int fromSlot, int amount)  {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if (o == null ) {
			declineDuel();
			return false;
		}
		if (o.duelStatus &lt;= 0 || c.duelStatus &lt;= 0) {
			declineDuel();
			o.getTradeAndDuel().declineDuel();
			return false;
		}
		if(Item.itemStackable[itemID]) {
			if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
				c.sendMessage(&quot;You have too many rules set to remove that item.&quot;);
				return false;
			}
		}

		if(!c.canOffer){
			return false;
		}
		
		changeDuelStuff();
		boolean goodSpace = false;
		if(!Item.itemStackable[itemID]) {
			for(int a = 0; a &lt; amount; a++) {
				for (GameItem item : stakedItems) {
					if(item.id == itemID) {
						if(!item.stackable) {
							if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
								goodSpace = false;
								break;
							}
							stakedItems.remove(item);	
							c.getItems().addItem(itemID, 1);				
						}  else  {
							if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
								goodSpace = false;
								break;
							}
							if(item.amount &gt; amount) {
								item.amount -= amount;
								c.getItems().addItem(itemID, amount);						
							} else  {
								if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
									goodSpace = false;
									break;
								}
								amount = item.amount;
								stakedItems.remove(item);
								c.getItems().addItem(itemID, amount);
							}
						}
						break;
					}
					o.duelStatus = 1;
					c.duelStatus = 1;					
					c.getItems().resetItems(3214);
					c.getItems().resetItems(3322);
					o.getItems().resetItems(3214);
					o.getItems().resetItems(3322);
					c.getTradeAndDuel().refreshDuelScreen();
					o.getTradeAndDuel().refreshDuelScreen();
					o.getPA().sendFrame126(&quot;&quot;, 6684);
				}
			}		
		}
		
		for (GameItem item : stakedItems) {
			if(item.id == itemID) {
				if(!item.stackable) {
				} else {
					if(item.amount &gt; amount) {
						item.amount -= amount;
						c.getItems().addItem(itemID, amount);
					} else {
						amount = item.amount;
						stakedItems.remove(item);
						c.getItems().addItem(itemID, amount);
					}
				}
				break;
			}
		}
		o.duelStatus = 1;
		c.duelStatus = 1;					
		c.getItems().resetItems(3214);
		c.getItems().resetItems(3322);
		o.getItems().resetItems(3214);
		o.getItems().resetItems(3322);
		c.getTradeAndDuel().refreshDuelScreen();
		o.getTradeAndDuel().refreshDuelScreen();
		o.getPA().sendFrame126(&quot;&quot;, 6684);
		if(!goodSpace) {
			c.sendMessage(&quot;You have too many rules set to remove that item.&quot;);
			return false;
		}
        return false;
    }
	
	@SuppressWarnings(&quot;static-access&quot;)
	public void confirmDuel() {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if(o == null) {
			declineDuel();
			return;
		}
		String itemId = &quot;&quot;;
		for(GameItem item : stakedItems) {
			if(Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
				itemId += c.getItems().getItemName(item.id) + &quot; x &quot; + Misc.format(item.amount) +&quot;\\n&quot;;
			}  else  {
				itemId += c.getItems().getItemName(item.id) + &quot;\\n&quot;;
			}
		}
		c.getPA().sendFrame126(itemId, 6516);
		itemId = &quot;&quot;;
		for(GameItem item : o.getTradeAndDuel().stakedItems) {
			if(Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
				itemId += c.getItems().getItemName(item.id) + &quot; x &quot; + Misc.format(item.amount) +&quot;\\n&quot;;
			} else {
				itemId += c.getItems().getItemName(item.id) +&quot;\\n&quot;;
			}
		}
		c.getPA().sendFrame126(itemId, 6517);
		c.getPA().sendFrame126(&quot;&quot;, 8242);
		for(int i = 8238; i &lt;= 8253; i++) {
			c.getPA().sendFrame126(&quot;&quot;, i);
		}
		c.getPA().sendFrame126(&quot;Hitpoints will be restored.&quot;, 8250);
		c.getPA().sendFrame126(&quot;Boosted stats will be restored.&quot;, 8238);
		if(c.duelRule[8]) {
			c.getPA().sendFrame126(&quot;There will be obstacles in the arena.&quot;, 8239);
		} 
		c.getPA().sendFrame126(&quot;&quot;, 8240);
		c.getPA().sendFrame126(&quot;&quot;, 8241);
		
		String[] rulesOption = {&quot;Players cannot forfeit!&quot;, &quot;Players cannot move.&quot;, &quot;Players cannot use range.&quot;, &quot;Players cannot use melee.&quot;, &quot;Players cannot use magic.&quot;,  &quot;Players cannot drink pots.&quot;,  &quot;Players cannot eat food.&quot;, &quot;Players cannot use prayer.&quot;};
		
		int lineNumber = 8242;
		for(int i = 0; i &lt; 8; i++) {
			if(c.duelRule[i]) {
				c.getPA().sendFrame126(&quot;&quot;+rulesOption[i], lineNumber);
				lineNumber ++;
			}
		}
		c.getPA().sendFrame126(&quot;&quot;, 6571);
		c.getPA().sendFrame248(6412, 197);
		//c.getPA().showInterface(6412);
	}
	
	
	@SuppressWarnings(&quot;static-access&quot;)
	public void startDuel() {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if(o == null) {
			duelVictory();
		}
		c.headIconHints = 2;
		
		if(c.duelRule[7]){
			for(int p = 0; p &lt; c.PRAYER.length; p++) { // reset prayer glows 
				c.prayerActive[p] = false;
				c.getPA().sendFrame36(c.PRAYER_GLOW[p], 0);		
			}
			c.headIcon = -1;
			c.getPA().requestUpdates();
		}		
		if(c.duelRule[11]) {
			c.getItems().removeItem(c.playerEquipment[0], 0);
		}
		if(c.duelRule[12]) {
			c.getItems().removeItem(c.playerEquipment[1], 1);
		}
		if(c.duelRule[13]) {
			c.getItems().removeItem(c.playerEquipment[2], 2);
		}
		if(c.duelRule[14]) {
			c.getItems().removeItem(c.playerEquipment[3], 3);
		}
		if(c.duelRule[15]) {
			c.getItems().removeItem(c.playerEquipment[4], 4);
		}
		if(c.duelRule[16]) {
			c.getItems().removeItem(c.playerEquipment[5], 5);
		}
		if(c.duelRule[17]) {
			c.getItems().removeItem(c.playerEquipment[7], 7);
		}
		if(c.duelRule[18]) {
			c.getItems().removeItem(c.playerEquipment[9], 9);
		}
		if(c.duelRule[19]) {
			c.getItems().removeItem(c.playerEquipment[10], 10);
		}
		if(c.duelRule[20]) {
			c.getItems().removeItem(c.playerEquipment[12], 12);
		}
		if(c.duelRule[21]) {
			c.getItems().removeItem(c.playerEquipment[13], 13);
		}	
		if(c.altarPrayed == 1) {
			c.altarPrayed = 1;
			c.getCombat().resetPrayers();
		} else {
			c.altarPrayed = 0;
 			c.getCurse().resetCurse();
		}	
		c.duelStatus = 5;
		c.getPA().removeAllWindows();
		c.specAmount = 10;
		c.getItems().addSpecialBar(c.playerEquipment[c.playerWeapon]);
		
		if(c.duelRule[8]){	
			if(c.duelRule[1]) {
				c.getPA().movePlayer(c.duelTeleX, c.duelTeleY, 0);
			} else {
				c.getPA().movePlayer(3366 + Misc.random(12), 3246 + Misc.random(6), 0);
			}
		} else {
			if(c.duelRule[1]) {
				c.getPA().movePlayer(c.duelTeleX, c.duelTeleY, 0);
			} else {	
				c.getPA().movePlayer(3335 + Misc.random(12), 3246 + Misc.random(6), 0);
			}
		}

		c.getPA().createPlayerHints(10, o.playerId);
		c.getPA().showOption(3, 0, &quot;Attack&quot;, 1);
		for (int i = 0; i &lt; 20; i++) {
			c.playerLevel[i] = c.getPA().getLevelForXP(c.playerXP[i]);
			c.getPA().refreshSkill(i);
		}
		for(GameItem item : o.getTradeAndDuel().stakedItems) {
			otherStakedItems.add(new GameItem(item.id, item.amount));
		}
		c.getPA().requestUpdates();			
	}

	
	@SuppressWarnings(&quot;static-access&quot;)
	public void duelVictory() {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if(o != null) {
			c.getPA().sendFrame126(&quot;&quot;+o.combatLevel, 6839);
			c.getPA().sendFrame126(o.playerName, 6840);
			o.duelStatus = 0;
		} else {
			c.getPA().sendFrame126(&quot;&quot;, 6839);
			c.getPA().sendFrame126(&quot;&quot;, 6840);
		}
		c.duelStatus = 6;
		c.getCombat().resetPrayers();
		for (int i = 0; i &lt; 20; i++) {
			c.playerLevel[i] = c.getPA().getLevelForXP(c.playerXP[i]);
			c.getPA().refreshSkill(i);
		}
		c.freezeTimer = 3;
		c.getPA().refreshSkill(3);
		duelRewardInterface();
		c.getPA().showInterface(6733);
		c.getPA().movePlayer(Config.DUELING_RESPAWN_X+(Misc.random(Config.RANDOM_DUELING_RESPAWN)), Config.DUELING_RESPAWN_Y+(Misc.random(Config.RANDOM_DUELING_RESPAWN)), 0);	
		c.getPA().requestUpdates();
		c.getPA().showOption(3, 0, &quot;Challenge&quot;, 3);
		c.getPA().createPlayerHints(10, -1);
		c.canOffer = true;
		c.duelSpaceReq = 0;
		c.duelingWith = 0;
		c.getCombat().resetPlayerAttack();
		c.duelRequested = false;
	}	[/code]

thats only half th code so if you need the other half just bump and say it so I can post, I exceded the 20k character limit</description>
    
    <lastBuildDate>Fri, 03 Oct 2014 13:31:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Help Needed] Duel Arena Staking</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>Replace your stakeItem method with this:</p>
<p>[code=java]        <span class="mention">@SuppressWarnings</span>(“static-access”)<br>
public boolean stakeItem(int itemID, int fromSlot, int amount) {<br>
for (int i : Config.ITEM_TRADEABLE) {<br>
if(i == itemID) {<br>
c.sendMessage(“You can’t stake this item.”);<br>
return false;<br>
}<br>
}<br>
if (amount &lt;= 0)<br>
return false;<br>
Client o = (Client) Server.playerHandler.players[c.duelingWith];<br>
if (o == null ) {<br>
declineDuel();<br>
return false;<br>
}<br>
if (o.duelStatus &lt;= 0 || c.duelStatus &lt;= 0) {<br>
declineDuel();<br>
o.getTradeAndDuel().declineDuel();<br>
return false;<br>
}<br>
changeDuelStuff();<br>
if(!Item.itemStackable[itemID]) {<br>
for(int a = 0; a &lt; amount; a++) {<br>
if(c.getItems().playerHasItem(itemID, 1)) {<br>
stakedItems.add(new GameItem(itemID, 1));<br>
c.getItems().deleteItem(itemID, c.getItems().getItemSlot(itemID), 1);<br>
}<br>
}<br>
c.getItems().resetItems(3214);<br>
c.getItems().resetItems(3322);<br>
o.getItems().resetItems(3214);<br>
o.getItems().resetItems(3322);<br>
refreshDuelScreen();<br>
o.getTradeAndDuel().refreshDuelScreen();<br>
c.getPA().sendFrame126("", 6684);<br>
o.getPA().sendFrame126("", 6684);<br>
}</p>
<pre><code>		if(!c.getItems().playerHasItem(itemID, amount)) {
			return false;
		}
		if (Item.itemStackable[itemID] || Item.itemIsNote[itemID]) {
			boolean found = false;
			for (GameItem item : stakedItems) {
				if (item.id == itemID) {
					found = false;
					item.amount += amount;
					c.getItems().deleteItem(itemID, fromSlot, amount);
					break;
				}
			}
			if (!found) {
				c.getItems().deleteItem(itemID, fromSlot, amount);
				stakedItems.add(new GameItem(itemID, amount));
			}
		}
		
		c.getItems().resetItems(3214);
		c.getItems().resetItems(3322);
		o.getItems().resetItems(3214);
		o.getItems().resetItems(3322);
		refreshDuelScreen();
		o.getTradeAndDuel().refreshDuelScreen();
		c.getPA().sendFrame126("", 6684);
		o.getPA().sendFrame126("", 6684);
		return false;
    }[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036/2</link>
        <pubDate>Fri, 03 Oct 2014 13:31:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547036-2</guid>
        <source url="https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036.rss">[Help Needed] Duel Arena Staking</source>
      </item>
      <item>
        <title>[Help Needed] Duel Arena Staking</title>
        <dc:creator><![CDATA[@gwinter gwinter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/gwinter">@gwinter</a> wrote:</p>
          <blockquote>
              <p>Hi, I was wondering how I would go about making it so that players can stake in the duel arena. I figured out how to make it so that certain people can, but I haven’t figured out how to make it so that everyone can. I tried changing some true/false statements and that didn’t seem to help. I’ve never messed with this sort of thing and I would appreciate it if I could get some help/advice. Here is my TradeAndDuel.java file, if you need any other just ask.<br>
Part of file dealing with duel:</p>
<p>[code=java]	/**<br>
* Dueling<br>
**/</p>
<pre><code>public CopyOnWriteArrayList&lt;GameItem&gt; otherStakedItems = new CopyOnWriteArrayList&lt;GameItem&gt;();
public CopyOnWriteArrayList&lt;GameItem&gt; stakedItems = new CopyOnWriteArrayList&lt;GameItem&gt;();

@SuppressWarnings("static-access")
public void requestDuel(int id) {
	try {
		if (id == c.playerId)
			return;
		resetDuel();
		resetDuelItems();
		c.duelingWith = id;
		Client o = (Client) Server.playerHandler.players[id];
		if(o == null) {
			return;
		}
		c.duelRequested = true;
		if(c.duelStatus == 0 &amp;&amp; o.duelStatus == 0 &amp;&amp; c.duelRequested &amp;&amp; o.duelRequested &amp;&amp; c.duelingWith == o.getId() &amp;&amp; o.duelingWith == c.getId()) {
			if(c.goodDistance(c.getX(), c.getY(), o.getX(), o.getY(), 1)) {			
				c.getTradeAndDuel().openDuel();
				o.getTradeAndDuel().openDuel();
			} else {
				c.sendMessage("You need to get closer to your opponent to start the duel.");
			}

		} else {
			c.sendMessage("Sending duel request...");
			o.sendMessage(c.playerName+":duelreq:");		
		}
	} catch (Exception e) {
		Misc.println("Error requesting duel.");
	}
}


@SuppressWarnings("static-access")
public void openDuel() {
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if(o == null) {
		return;
	}	
	c.duelStatus = 1;
	refreshduelRules();
	refreshDuelScreen();
	c.canOffer = true;
	for (int i = 0; i &lt; c.playerEquipment.length; i++) {
		sendDuelEquipment(c.playerEquipment[i], c.playerEquipmentN[i], i);
	}
	c.getPA().sendFrame126("Dueling with: " + o.playerName + " (level-" + o.combatLevel + ")", 6671);
	c.getPA().sendFrame126("", 6684);
	c.getPA().sendFrame248(6575, 3321);
	c.getItems().resetItems(3322);
}

public void sendDuelEquipment(int itemId, int amount, int slot) {
	synchronized(c) {
		if(itemId != 0) {
			c.getOutStream().createFrameVarSizeWord(34);
			c.getOutStream().writeWord(13824);
			c.getOutStream().writeByte(slot);
			c.getOutStream().writeWord(itemId+1);

			if (amount &gt; 254) {
				c.getOutStream().writeByte(255);
				c.getOutStream().writeDWord(amount);
			} else {
				c.getOutStream().writeByte(amount);
			}
			c.getOutStream().endFrameVarSizeWord();
			c.flushOutStream();
		}
	}
}

public void refreshduelRules() {
	for(int i = 0; i &lt; c.duelRule.length; i++) {	
		c.duelRule[i] = false;
	}
	c.getPA().sendFrame87(286, 0);
	c.duelOption = 0;
}

@SuppressWarnings("static-access")
public void refreshDuelScreen() {
	synchronized(c) {
		Client o = (Client) Server.playerHandler.players[c.duelingWith];
		if(o == null) {
			return;
		}
		c.getOutStream().createFrameVarSizeWord(53);
		c.getOutStream().writeWord(6669);
		c.getOutStream().writeWord(stakedItems.toArray().length);
		int current = 0;
		for(GameItem item : stakedItems) {
			if (item.amount &gt; 254) {
				c.getOutStream().writeByte(255); 
				c.getOutStream().writeDWord_v2(item.amount);	
			} else  {
				c.getOutStream().writeByte(item.amount);
			}
			if (item.id &gt; Config.ITEM_LIMIT || item.id &lt; 0) {
				item.id = Config.ITEM_LIMIT;
			}
			c.getOutStream().writeWordBigEndianA(item.id + 1);
			
			current++;
		}
		
		if(current &lt; 27) {
			for(int i = current; i &lt; 28; i++) {
				c.getOutStream().writeByte(1);
				c.getOutStream().writeWordBigEndianA(-1);
			}
		}
		c.getOutStream().endFrameVarSizeWord();
		c.flushOutStream();
		
		c.getOutStream().createFrameVarSizeWord(53);
		c.getOutStream().writeWord(6670);
		c.getOutStream().writeWord(o.getTradeAndDuel().stakedItems.toArray().length);
		current = 0;	
		for (GameItem item : o.getTradeAndDuel().stakedItems) {
			if (item.amount &gt; 254) {
				c.getOutStream().writeByte(255);
				c.getOutStream().writeDWord_v2(item.amount);
			}  else  {
				c.getOutStream().writeByte(item.amount);
			}
			if (item.id &gt; Config.ITEM_LIMIT || item.id &lt; 0) {
				item.id = Config.ITEM_LIMIT;
			}
			c.getOutStream().writeWordBigEndianA(item.id + 1);
			current++;
		}
		
		if(current &lt; 27) {
			for(int i = current; i &lt; 28; i++) {
				c.getOutStream().writeByte(1);
				c.getOutStream().writeWordBigEndianA(-1);
			}
		}
		c.getOutStream().endFrameVarSizeWord();
		c.flushOutStream();
	}
}


@SuppressWarnings("static-access")
public boolean stakeItem(int itemID, int fromSlot, int amount) {
	
	for (int i : Config.ITEM_TRADEABLE) {
		if(i == itemID) {
			c.sendMessage("You can't stake this item.");
			return false;
		}
            if (!c.playerName.equalsIgnoreCase("Dillon")) {
            if (!c.playerName.equalsIgnoreCase("Test")) {
            if (!c.playerName.equalsIgnoreCase("Testies")) {
			c.sendMessage("Staking has been disabled due to dupes and glitches, will be fixed soon.");
	return false;
	}		
	}
	}
	}
	if (amount &lt;= 0)
		return false;
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if (o == null ) {
		declineDuel();
		return false;
	}
	if (o.duelStatus &lt;= 0 || c.duelStatus &lt;= 0) {
		declineDuel();
		o.getTradeAndDuel().declineDuel();
		return false;
	}
	if (!c.canOffer) {
		return false;
	}
	changeDuelStuff();
	if(!Item.itemStackable[itemID]) {
		for(int a = 0; a &lt; amount; a++) {
			if(c.getItems().playerHasItem(itemID, 1)) {
				stakedItems.add(new GameItem(itemID, 1));	
				c.getItems().deleteItem(itemID, c.getItems().getItemSlot(itemID), 1);
			}
		}		
		c.getItems().resetItems(3214);
		c.getItems().resetItems(3322);
		o.getItems().resetItems(3214);
		o.getItems().resetItems(3322);
		refreshDuelScreen();
		o.getTradeAndDuel().refreshDuelScreen();
		c.getPA().sendFrame126("", 6684);
		o.getPA().sendFrame126("", 6684);
	}
	
	if(!c.getItems().playerHasItem(itemID, amount)) {
		return false;
	}
	if (Item.itemStackable[itemID] || Item.itemIsNote[itemID]) {
		boolean found = false;
		for (GameItem item : stakedItems) {
			if (item.id == itemID) {
				found = false;
				item.amount += amount;
				c.getItems().deleteItem(itemID, fromSlot, amount);
				break;
			}
		}
		if (!found) {
			c.getItems().deleteItem(itemID, fromSlot, amount);
			stakedItems.add(new GameItem(itemID, amount));
		}
	}
	
	c.getItems().resetItems(3214);
	c.getItems().resetItems(3322);
	o.getItems().resetItems(3214);
	o.getItems().resetItems(3322);
	refreshDuelScreen();
	o.getTradeAndDuel().refreshDuelScreen();
	c.getPA().sendFrame126("", 6684);
	o.getPA().sendFrame126("", 6684);
	return false;
}


@SuppressWarnings("static-access")
public boolean fromDuel(int itemID, int fromSlot, int amount)  {
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if (o == null ) {
		declineDuel();
		return false;
	}
	if (o.duelStatus &lt;= 0 || c.duelStatus &lt;= 0) {
		declineDuel();
		o.getTradeAndDuel().declineDuel();
		return false;
	}
	if(Item.itemStackable[itemID]) {
		if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
			c.sendMessage("You have too many rules set to remove that item.");
			return false;
		}
	}

	if(!c.canOffer){
		return false;
	}
	
	changeDuelStuff();
	boolean goodSpace = false;
	if(!Item.itemStackable[itemID]) {
		for(int a = 0; a &lt; amount; a++) {
			for (GameItem item : stakedItems) {
				if(item.id == itemID) {
					if(!item.stackable) {
						if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
							goodSpace = false;
							break;
						}
						stakedItems.remove(item);	
						c.getItems().addItem(itemID, 1);				
					}  else  {
						if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
							goodSpace = false;
							break;
						}
						if(item.amount &gt; amount) {
							item.amount -= amount;
							c.getItems().addItem(itemID, amount);						
						} else  {
							if(c.getItems().freeSlots() - 1 &lt; (c.duelSpaceReq)) {
								goodSpace = false;
								break;
							}
							amount = item.amount;
							stakedItems.remove(item);
							c.getItems().addItem(itemID, amount);
						}
					}
					break;
				}
				o.duelStatus = 1;
				c.duelStatus = 1;					
				c.getItems().resetItems(3214);
				c.getItems().resetItems(3322);
				o.getItems().resetItems(3214);
				o.getItems().resetItems(3322);
				c.getTradeAndDuel().refreshDuelScreen();
				o.getTradeAndDuel().refreshDuelScreen();
				o.getPA().sendFrame126("", 6684);
			}
		}		
	}
	
	for (GameItem item : stakedItems) {
		if(item.id == itemID) {
			if(!item.stackable) {
			} else {
				if(item.amount &gt; amount) {
					item.amount -= amount;
					c.getItems().addItem(itemID, amount);
				} else {
					amount = item.amount;
					stakedItems.remove(item);
					c.getItems().addItem(itemID, amount);
				}
			}
			break;
		}
	}
	o.duelStatus = 1;
	c.duelStatus = 1;					
	c.getItems().resetItems(3214);
	c.getItems().resetItems(3322);
	o.getItems().resetItems(3214);
	o.getItems().resetItems(3322);
	c.getTradeAndDuel().refreshDuelScreen();
	o.getTradeAndDuel().refreshDuelScreen();
	o.getPA().sendFrame126("", 6684);
	if(!goodSpace) {
		c.sendMessage("You have too many rules set to remove that item.");
		return false;
	}
    return false;
}

@SuppressWarnings("static-access")
public void confirmDuel() {
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if(o == null) {
		declineDuel();
		return;
	}
	String itemId = "";
	for(GameItem item : stakedItems) {
		if(Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
			itemId += c.getItems().getItemName(item.id) + " x " + Misc.format(item.amount) +"\\n";
		}  else  {
			itemId += c.getItems().getItemName(item.id) + "\\n";
		}
	}
	c.getPA().sendFrame126(itemId, 6516);
	itemId = "";
	for(GameItem item : o.getTradeAndDuel().stakedItems) {
		if(Item.itemStackable[item.id] || Item.itemIsNote[item.id]) {
			itemId += c.getItems().getItemName(item.id) + " x " + Misc.format(item.amount) +"\\n";
		} else {
			itemId += c.getItems().getItemName(item.id) +"\\n";
		}
	}
	c.getPA().sendFrame126(itemId, 6517);
	c.getPA().sendFrame126("", 8242);
	for(int i = 8238; i &lt;= 8253; i++) {
		c.getPA().sendFrame126("", i);
	}
	c.getPA().sendFrame126("Hitpoints will be restored.", 8250);
	c.getPA().sendFrame126("Boosted stats will be restored.", 8238);
	if(c.duelRule[8]) {
		c.getPA().sendFrame126("There will be obstacles in the arena.", 8239);
	} 
	c.getPA().sendFrame126("", 8240);
	c.getPA().sendFrame126("", 8241);
	
	String[] rulesOption = {"Players cannot forfeit!", "Players cannot move.", "Players cannot use range.", "Players cannot use melee.", "Players cannot use magic.",  "Players cannot drink pots.",  "Players cannot eat food.", "Players cannot use prayer."};
	
	int lineNumber = 8242;
	for(int i = 0; i &lt; 8; i++) {
		if(c.duelRule[i]) {
			c.getPA().sendFrame126(""+rulesOption[i], lineNumber);
			lineNumber ++;
		}
	}
	c.getPA().sendFrame126("", 6571);
	c.getPA().sendFrame248(6412, 197);
	//c.getPA().showInterface(6412);
}


@SuppressWarnings("static-access")
public void startDuel() {
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if(o == null) {
		duelVictory();
	}
	c.headIconHints = 2;
	
	if(c.duelRule[7]){
		for(int p = 0; p &lt; c.PRAYER.length; p++) { // reset prayer glows 
			c.prayerActive[p] = false;
			c.getPA().sendFrame36(c.PRAYER_GLOW[p], 0);		
		}
		c.headIcon = -1;
		c.getPA().requestUpdates();
	}		
	if(c.duelRule[11]) {
		c.getItems().removeItem(c.playerEquipment[0], 0);
	}
	if(c.duelRule[12]) {
		c.getItems().removeItem(c.playerEquipment[1], 1);
	}
	if(c.duelRule[13]) {
		c.getItems().removeItem(c.playerEquipment[2], 2);
	}
	if(c.duelRule[14]) {
		c.getItems().removeItem(c.playerEquipment[3], 3);
	}
	if(c.duelRule[15]) {
		c.getItems().removeItem(c.playerEquipment[4], 4);
	}
	if(c.duelRule[16]) {
		c.getItems().removeItem(c.playerEquipment[5], 5);
	}
	if(c.duelRule[17]) {
		c.getItems().removeItem(c.playerEquipment[7], 7);
	}
	if(c.duelRule[18]) {
		c.getItems().removeItem(c.playerEquipment[9], 9);
	}
	if(c.duelRule[19]) {
		c.getItems().removeItem(c.playerEquipment[10], 10);
	}
	if(c.duelRule[20]) {
		c.getItems().removeItem(c.playerEquipment[12], 12);
	}
	if(c.duelRule[21]) {
		c.getItems().removeItem(c.playerEquipment[13], 13);
	}	
	if(c.altarPrayed == 1) {
		c.altarPrayed = 1;
		c.getCombat().resetPrayers();
	} else {
		c.altarPrayed = 0;
		c.getCurse().resetCurse();
	}	
	c.duelStatus = 5;
	c.getPA().removeAllWindows();
	c.specAmount = 10;
	c.getItems().addSpecialBar(c.playerEquipment[c.playerWeapon]);
	
	if(c.duelRule[8]){	
		if(c.duelRule[1]) {
			c.getPA().movePlayer(c.duelTeleX, c.duelTeleY, 0);
		} else {
			c.getPA().movePlayer(3366 + Misc.random(12), 3246 + Misc.random(6), 0);
		}
	} else {
		if(c.duelRule[1]) {
			c.getPA().movePlayer(c.duelTeleX, c.duelTeleY, 0);
		} else {	
			c.getPA().movePlayer(3335 + Misc.random(12), 3246 + Misc.random(6), 0);
		}
	}

	c.getPA().createPlayerHints(10, o.playerId);
	c.getPA().showOption(3, 0, "Attack", 1);
	for (int i = 0; i &lt; 20; i++) {
		c.playerLevel[i] = c.getPA().getLevelForXP(c.playerXP[i]);
		c.getPA().refreshSkill(i);
	}
	for(GameItem item : o.getTradeAndDuel().stakedItems) {
		otherStakedItems.add(new GameItem(item.id, item.amount));
	}
	c.getPA().requestUpdates();			
}


@SuppressWarnings("static-access")
public void duelVictory() {
	Client o = (Client) Server.playerHandler.players[c.duelingWith];
	if(o != null) {
		c.getPA().sendFrame126(""+o.combatLevel, 6839);
		c.getPA().sendFrame126(o.playerName, 6840);
		o.duelStatus = 0;
	} else {
		c.getPA().sendFrame126("", 6839);
		c.getPA().sendFrame126("", 6840);
	}
	c.duelStatus = 6;
	c.getCombat().resetPrayers();
	for (int i = 0; i &lt; 20; i++) {
		c.playerLevel[i] = c.getPA().getLevelForXP(c.playerXP[i]);
		c.getPA().refreshSkill(i);
	}
	c.freezeTimer = 3;
	c.getPA().refreshSkill(3);
	duelRewardInterface();
	c.getPA().showInterface(6733);
	c.getPA().movePlayer(Config.DUELING_RESPAWN_X+(Misc.random(Config.RANDOM_DUELING_RESPAWN)), Config.DUELING_RESPAWN_Y+(Misc.random(Config.RANDOM_DUELING_RESPAWN)), 0);	
	c.getPA().requestUpdates();
	c.getPA().showOption(3, 0, "Challenge", 3);
	c.getPA().createPlayerHints(10, -1);
	c.canOffer = true;
	c.duelSpaceReq = 0;
	c.duelingWith = 0;
	c.getCombat().resetPlayerAttack();
	c.duelRequested = false;
}	[/code]
</code></pre>
<p>thats only half th code so if you need the other half just bump and say it so I can post, I exceded the 20k character limit</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036/1</link>
        <pubDate>Wed, 01 Oct 2014 21:34:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547036-1</guid>
        <source url="https://forum.moparisthebest.com/t/help-needed-duel-arena-staking/547036.rss">[Help Needed] Duel Arena Staking</source>
      </item>
  </channel>
</rss>
