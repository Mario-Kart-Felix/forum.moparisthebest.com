<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Clarify Observer Pattern when Updating</title>
    <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460</link>
    <description>So, I&#39;m using the Observer pattern to make updating (appearance, hit, etc) simpler and more efficient. However, the problem I&#39;m having is handling the different types of updates. The current way I see it is this

[code=Java]
public void update(Observable source, Object arg) {
    if (arg instanceof Location) {
        // process location update
    }
    else if (arg instanceof Appearance) {
        // process appearance update
    }
    // etc
}
[/code]

How could I improve this so that the instanceof clause isn&#39;t necessary?</description>
    
    <lastBuildDate>Thu, 17 May 2012 17:40:36 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Clarify Observer Pattern when Updating</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>That was actually my initial plan, to have the Region in which entities are in observe the various events, and dispatch them to the other observers. I changed it to the current way because a Region doesn’t really need to do that. A NotificationDispatcher would make much more sense though, and get rid of the <span class="bbcode-i">instanceof</span> process (kind of).</p>
<p>Although, there really is no way to completely remove the process, because at the core, it’s still taking an Object as a parameter.</p>
<p>I will see how I can modify this to best suit my needs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/5</link>
        <pubDate>Thu, 17 May 2012 17:40:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442460-5</guid>
        <source url="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss">Clarify Observer Pattern when Updating</source>
      </item>
      <item>
        <title>Clarify Observer Pattern when Updating</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“zyle1992, post:3, topic:442460”][quote author=_s link=topic=545089.msg3995784#msg3995784 date=1337237553]<br>
why do you need to observe updating? i don’t feel the observer pattern has a legitimate usage here, hence why you’ve landed in a puddle.</p>
<p>[/quote]</p>
<p>It’s not really an “active” observation. Basically, here’s how i’ve designed it</p>
<pre><code class="lang-auto">public void setLocation(Location location) {
    // validation ommited
    this.location = location;
    setChanged();
    notifyObservers(location);
}</code></pre>
<p>such that</p>
<pre><code class="lang-auto">when setLocation is called
  notify all objects that are observing of what's being updated
    which includes (because of the different protocol changes) requires setting different flags in the "update" packet.</code></pre>
<p>Because all of the entities in the world are observable, and all “sentient” entities are observers, they are updated with the new “perception” of the map region they are in.</p>
<p>It basically takes the whole</p>
<pre><code class="lang-auto">public boolean process() {
    if (appearanceUpdateRequired) {
        updateMask |= appearanceUpdate;
    }
    if (locationUpdatedRequired) {
        updateMask |= locationUpdate;
    }
}

// ...
while (true) {
    for (Player p : Server.players) {
        p.process();
    }
}</code></pre>
<p>And breaks it down into logical parts, that doesn’t require constant polling.[/quote]<br>
that makes more sense. my suggestion is make an Observer that dispatches notifications to listeners and multiplexes dependent upon runtime type. it’s a clean solution that avoids instanceof and could be easily modified to load listeners at runtime, which could be a good idea for extensibility.</p>
<p>and since i’m a kind fucker you may just want to c+p this in and add extra shit</p>
<p>[code=java]<br>
import java.util.HashMap;<br>
import java.util.Map;<br>
import java.util.Observable;<br>
import java.util.Observer;</p>
<p>public class NotificationDispatcher implements Observer {</p>
<pre><code>public interface NotificationListener {
    public void notify(Object o);
}

Map&lt;Class&lt;?&gt;, NotificationListener&gt; handlers = new HashMap&lt;&gt;(); 

@Override
public void update(Observable o, Object arg) {
    handlers.get(arg.getClass()).notify(arg);
}

public void register(Class&lt;?&gt; clazz, NotificationListener handler) {
    handlers.put(clazz, handler);
}

// Below is the usage

public static class ObserveMe extends Observable {
    public ObserveMe(Observer o) {
        addObserver(o);
        setChanged();
        notifyObservers("Hello!");
    }
}

public static void main(String[] args) {
    NotificationDispatcher dispatcher = new NotificationDispatcher();
    dispatcher.register(String.class, new NotificationListener() {
        @Override
        public void notify(Object o) {
            System.out.println("Observed \"" + o + "\"");
        }
    });
    
    new ObserveMe(dispatcher);
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/4</link>
        <pubDate>Thu, 17 May 2012 16:06:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442460-4</guid>
        <source url="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss">Clarify Observer Pattern when Updating</source>
      </item>
      <item>
        <title>Clarify Observer Pattern when Updating</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="2" data-topic="442460">
<div class="title">
<div class="quote-controls"></div>
 _s:</div>
<blockquote>
<p>why do you need to observe updating? i don’t feel the observer pattern has a legitimate usage here, hence why you’ve landed in a puddle.</p>
</blockquote>
</aside>
<p>It’s not really an “active” observation. Basically, here’s how i’ve designed it</p>
<pre><code class="lang-auto">public void setLocation(Location location) {
    // validation ommited
    this.location = location;
    setChanged();
    notifyObservers(location);
}</code></pre>
<p>such that</p>
<pre><code class="lang-auto">when setLocation is called
  notify all objects that are observing of what's being updated
    which includes (because of the different protocol changes) requires setting different flags in the "update" packet.</code></pre>
<p>Because all of the entities in the world are observable, and all “sentient” entities are observers, they are updated with the new “perception” of the map region they are in.</p>
<p>It basically takes the whole</p>
<pre><code class="lang-auto">public boolean process() {
    if (appearanceUpdateRequired) {
        updateMask |= appearanceUpdate;
    }
    if (locationUpdatedRequired) {
        updateMask |= locationUpdate;
    }
}

// ...
while (true) {
    for (Player p : Server.players) {
        p.process();
    }
}</code></pre>
<p>And breaks it down into logical parts, that doesn’t require constant polling.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/3</link>
        <pubDate>Thu, 17 May 2012 07:02:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442460-3</guid>
        <source url="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss">Clarify Observer Pattern when Updating</source>
      </item>
      <item>
        <title>Clarify Observer Pattern when Updating</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>why do you need to observe updating? i don’t feel the observer pattern has a legitimate usage here, hence why you’ve landed in a puddle.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/2</link>
        <pubDate>Thu, 17 May 2012 06:52:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442460-2</guid>
        <source url="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss">Clarify Observer Pattern when Updating</source>
      </item>
      <item>
        <title>Clarify Observer Pattern when Updating</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>So, I’m using the Observer pattern to make updating (appearance, hit, etc) simpler and more efficient. However, the problem I’m having is handling the different types of updates. The current way I see it is this</p>
<pre><code class="lang-auto">public void update(Observable source, Object arg) {
    if (arg instanceof Location) {
        // process location update
    }
    else if (arg instanceof Appearance) {
        // process appearance update
    }
    // etc
}</code></pre>
<p>How could I improve this so that the instanceof clause isn’t necessary?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460/1</link>
        <pubDate>Thu, 17 May 2012 06:37:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-442460-1</guid>
        <source url="https://forum.moparisthebest.com/t/clarify-observer-pattern-when-updating/442460.rss">Clarify Observer Pattern when Updating</source>
      </item>
  </channel>
</rss>
