<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C] Artist Search (more functions)</title>
    <link>https://forum.moparisthebest.com/t/c-artist-search-more-functions/394901</link>
    <description>I added some more stuff, is it terrible?[code=c]#include &lt;stdio.h&gt;
#include &lt;string.h&gt;

#define MAXSIZE 200
#define NULLCHAR &#39;\0&#39;
#define NEWLINE &#39;\n&#39;
#define BLANK &#39; &#39;

typedef enum BOOL { FALSE, TRUE };
typedef enum SORT_BY { TRACK, ARTIST };
typedef enum SORT_ORDER { ASC, DESC };

typedef struct {
	char Track[200];
	char Artist[200];
} Song;

typedef struct {
	Song TrackList[MAXSIZE];
	int size;
} TrackLibrary;

void add(TrackLibrary *selectedTrackLibrary,Song SongToAdd);
void del(TrackLibrary *selectedTrackLibrary,Song SongToDel);
void swap(TrackLibrary *selectedTrackLibrary,int first,int second);
void sort(TrackLibrary *selectedTrackLibrary,enum SORT_BY,enum SORT_ORDER);
void read(TrackLibrary *selectedTrackLibrary,char *fileName);
void print(TrackLibrary selectedTrackLibrary);

int main(int argc,char **argv)
{
	enum SORT_BY sort_by = ARTIST;
	enum SORT_ORDER sort_order = ASC;

	TrackLibrary newTrackLibrary;
	Song SongToDel = {&quot;Let&#39;s Stay Together&quot;,&quot;Al Green&quot;};

	if(argc &lt; 2)
	{
		printf(&quot;usage: %s songfile\n&quot;,argv[0]);
		return 1;
	}

	if(argc &gt; 2)
		if(strcmp(argv[2],&quot;ARTIST&quot;) == 0)
			sort_by = ARTIST;
		else
			sort_by = TRACK;
	if(argc &gt; 3)
		if(strcmp(argv[3],&quot;DESC&quot;) == 0)
			sort_order = DESC;
		else
			sort_order = ASC;

	read(&amp;newTrackLibrary,argv[1]);

	add(&amp;newTrackLibrary,SongToDel);

	print(newTrackLibrary);

	sort(&amp;newTrackLibrary,sort_by,sort_order);

	print(newTrackLibrary);

	return 0;
}

void add(TrackLibrary *selectedTrackLibrary,Song SongToAdd)
{
	if(selectedTrackLibrary-&gt;size &gt;= MAXSIZE)
		return;
	selectedTrackLibrary-&gt;TrackList[++selectedTrackLibrary-&gt;size] = SongToAdd;
}

void del(TrackLibrary *selectedTrackLibrary,Song SongToDel)
{
	int index,deleted = FALSE;
	for(index = 0; index &lt; selectedTrackLibrary-&gt;size; ++index)
	{
		if(strcmp(selectedTrackLibrary-&gt;TrackList[index].Track,SongToDel.Track) == 0 &amp;&amp; strcmp(selectedTrackLibrary-&gt;TrackList[index].Artist,SongToDel.Artist) == 0)
			deleted = TRUE;
		if(deleted == TRUE)
			selectedTrackLibrary-&gt;TrackList[index] = selectedTrackLibrary-&gt;TrackList[index + 1];
	}
	if(deleted == TRUE)
		--selectedTrackLibrary-&gt;size;
}

void swap(TrackLibrary *selectedTrackLibrary,int first,int second)
{
	Song temp = selectedTrackLibrary-&gt;TrackList[first];
	selectedTrackLibrary-&gt;TrackList[first] = selectedTrackLibrary-&gt;TrackList[second];
	selectedTrackLibrary-&gt;TrackList[second] = temp;
}

void sort(TrackLibrary *selectedTrackLibrary,enum SORT_BY sort_by,enum SORT_ORDER sort_order)
{
	int index,start;
	for(index = 0; index &lt; selectedTrackLibrary-&gt;size; ++index)
		for(start = index; start &lt; selectedTrackLibrary-&gt;size; ++start)
			if(sort_by == ARTIST)
			{
				if(sort_order == ASC)
				{
					if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Artist,selectedTrackLibrary-&gt;TrackList[index].Artist) &lt; 0)
						swap(selectedTrackLibrary,index,start);
				}
				else
				{
					if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Artist,selectedTrackLibrary-&gt;TrackList[index].Artist) &gt; 0)
						swap(selectedTrackLibrary,index,start);
				}
			}
			else
			{
				if(sort_order == ASC)
				{
					if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Track,selectedTrackLibrary-&gt;TrackList[index].Track) &lt; 0)
						swap(selectedTrackLibrary,index,start);
				}
				else
				{
					if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Track,selectedTrackLibrary-&gt;TrackList[index].Track) &gt; 0)
						swap(selectedTrackLibrary,index,start);
				}
			}
}

void read(TrackLibrary *selectedTrackLibrary,char *fileName)
{
	enum BOOL skipSpaceDashSpace = FALSE, possibleSongAndArtistDivider = FALSE, populateSongName = FALSE;
	int index, selectedChar, arrayIndexPosition;
	FILE *filePointer;
	if((filePointer = fopen(fileName,&quot;r&quot;)) == NULL)
	{
		printf(&quot;File not found.&quot;);
		return;
	}
	index = arrayIndexPosition = 0;

	selectedTrackLibrary-&gt;size = 0;

	while((selectedChar = getc(filePointer)))
	{
		if(skipSpaceDashSpace == TRUE)
		{
			skipSpaceDashSpace = FALSE;
			continue;
		}
		if(selectedChar == BLANK)
			possibleSongAndArtistDivider = TRUE;
		if(selectedChar == NEWLINE)
		{
			selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = NULLCHAR;
			populateSongName = FALSE;
			arrayIndexPosition = 0;
			++index;
			++selectedTrackLibrary-&gt;size;
			continue;
		}
		if(selectedChar == EOF)
		{
			selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = NULLCHAR;
			break;
		}
		if(possibleSongAndArtistDivider == TRUE &amp;&amp; selectedChar == &#39;-&#39;)
		{
			selectedTrackLibrary-&gt;TrackList[index].Track[arrayIndexPosition - 1] = NULLCHAR;
			populateSongName = skipSpaceDashSpace = TRUE;
			possibleSongAndArtistDivider = FALSE;
			arrayIndexPosition = 0;
			continue;
		}
		if(populateSongName == FALSE)
			selectedTrackLibrary-&gt;TrackList[index].Track[arrayIndexPosition] = selectedChar;
		else
			selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = selectedChar;
		++arrayIndexPosition;
	}
}

void print(TrackLibrary selectedTrackLibrary)
{
	int index;
	for(index = 0; index &lt;= selectedTrackLibrary.size; ++index)
	{
		if(selectedTrackLibrary.TrackList[index].Track == &#39;\0&#39; || selectedTrackLibrary.TrackList[index].Artist == &#39;\0&#39;)
			break;
		printf(&quot;%s by %s\n&quot;,selectedTrackLibrary.TrackList[index].Track,selectedTrackLibrary.TrackList[index].Artist);
	}
}[/code]</description>
    
    <lastBuildDate>Sat, 14 May 2011 01:58:19 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-artist-search-more-functions/394901.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C] Artist Search (more functions)</title>
        <dc:creator><![CDATA[@z z]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/z">@z</a> wrote:</p>
          <blockquote>
              <p>I added some more stuff, is it terrible?[code=c]<span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;string.h&gt;</p>
<p><span class="hashtag">#define</span> MAXSIZE 200<br>
<span class="hashtag">#define</span> NULLCHAR ‘\0’<br>
<span class="hashtag">#define</span> NEWLINE ‘\n’<br>
<span class="hashtag">#define</span> BLANK ’ ’</p>
<p>typedef enum BOOL { FALSE, TRUE };<br>
typedef enum SORT_BY { TRACK, ARTIST };<br>
typedef enum SORT_ORDER { ASC, DESC };</p>
<p>typedef struct {<br>
char Track[200];<br>
char Artist[200];<br>
} Song;</p>
<p>typedef struct {<br>
Song TrackList[MAXSIZE];<br>
int size;<br>
} TrackLibrary;</p>
<p>void add(TrackLibrary *selectedTrackLibrary,Song SongToAdd);<br>
void del(TrackLibrary *selectedTrackLibrary,Song SongToDel);<br>
void swap(TrackLibrary *selectedTrackLibrary,int first,int second);<br>
void sort(TrackLibrary *selectedTrackLibrary,enum SORT_BY,enum SORT_ORDER);<br>
void read(TrackLibrary *selectedTrackLibrary,char *fileName);<br>
void print(TrackLibrary selectedTrackLibrary);</p>
<p>int main(int argc,char **argv)<br>
{<br>
enum SORT_BY sort_by = ARTIST;<br>
enum SORT_ORDER sort_order = ASC;</p>
<pre><code>TrackLibrary newTrackLibrary;
Song SongToDel = {"Let's Stay Together","Al Green"};

if(argc &lt; 2)
{
	printf("usage: %s songfile\n",argv[0]);
	return 1;
}

if(argc &gt; 2)
	if(strcmp(argv[2],"ARTIST") == 0)
		sort_by = ARTIST;
	else
		sort_by = TRACK;
if(argc &gt; 3)
	if(strcmp(argv[3],"DESC") == 0)
		sort_order = DESC;
	else
		sort_order = ASC;

read(&amp;newTrackLibrary,argv[1]);

add(&amp;newTrackLibrary,SongToDel);

print(newTrackLibrary);

sort(&amp;newTrackLibrary,sort_by,sort_order);

print(newTrackLibrary);

return 0;
</code></pre>
<p>}</p>
<p>void add(TrackLibrary *selectedTrackLibrary,Song SongToAdd)<br>
{<br>
if(selectedTrackLibrary-&gt;size &gt;= MAXSIZE)<br>
return;<br>
selectedTrackLibrary-&gt;TrackList[++selectedTrackLibrary-&gt;size] = SongToAdd;<br>
}</p>
<p>void del(TrackLibrary *selectedTrackLibrary,Song SongToDel)<br>
{<br>
int index,deleted = FALSE;<br>
for(index = 0; index &lt; selectedTrackLibrary-&gt;size; ++index)<br>
{<br>
if(strcmp(selectedTrackLibrary-&gt;TrackList[index].Track,SongToDel.Track) == 0 &amp;&amp; strcmp(selectedTrackLibrary-&gt;TrackList[index].Artist,SongToDel.Artist) == 0)<br>
deleted = TRUE;<br>
if(deleted == TRUE)<br>
selectedTrackLibrary-&gt;TrackList[index] = selectedTrackLibrary-&gt;TrackList[index + 1];<br>
}<br>
if(deleted == TRUE)<br>
–selectedTrackLibrary-&gt;size;<br>
}</p>
<p>void swap(TrackLibrary *selectedTrackLibrary,int first,int second)<br>
{<br>
Song temp = selectedTrackLibrary-&gt;TrackList[first];<br>
selectedTrackLibrary-&gt;TrackList[first] = selectedTrackLibrary-&gt;TrackList[second];<br>
selectedTrackLibrary-&gt;TrackList[second] = temp;<br>
}</p>
<p>void sort(TrackLibrary *selectedTrackLibrary,enum SORT_BY sort_by,enum SORT_ORDER sort_order)<br>
{<br>
int index,start;<br>
for(index = 0; index &lt; selectedTrackLibrary-&gt;size; ++index)<br>
for(start = index; start &lt; selectedTrackLibrary-&gt;size; ++start)<br>
if(sort_by == ARTIST)<br>
{<br>
if(sort_order == ASC)<br>
{<br>
if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Artist,selectedTrackLibrary-&gt;TrackList[index].Artist) &lt; 0)<br>
swap(selectedTrackLibrary,index,start);<br>
}<br>
else<br>
{<br>
if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Artist,selectedTrackLibrary-&gt;TrackList[index].Artist) &gt; 0)<br>
swap(selectedTrackLibrary,index,start);<br>
}<br>
}<br>
else<br>
{<br>
if(sort_order == ASC)<br>
{<br>
if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Track,selectedTrackLibrary-&gt;TrackList[index].Track) &lt; 0)<br>
swap(selectedTrackLibrary,index,start);<br>
}<br>
else<br>
{<br>
if(strcmp(selectedTrackLibrary-&gt;TrackList[start].Track,selectedTrackLibrary-&gt;TrackList[index].Track) &gt; 0)<br>
swap(selectedTrackLibrary,index,start);<br>
}<br>
}<br>
}</p>
<p>void read(TrackLibrary *selectedTrackLibrary,char *fileName)<br>
{<br>
enum BOOL skipSpaceDashSpace = FALSE, possibleSongAndArtistDivider = FALSE, populateSongName = FALSE;<br>
int index, selectedChar, arrayIndexPosition;<br>
FILE *filePointer;<br>
if((filePointer = fopen(fileName,“r”)) == NULL)<br>
{<br>
printf(“File not found.”);<br>
return;<br>
}<br>
index = arrayIndexPosition = 0;</p>
<pre><code>selectedTrackLibrary-&gt;size = 0;

while((selectedChar = getc(filePointer)))
{
	if(skipSpaceDashSpace == TRUE)
	{
		skipSpaceDashSpace = FALSE;
		continue;
	}
	if(selectedChar == BLANK)
		possibleSongAndArtistDivider = TRUE;
	if(selectedChar == NEWLINE)
	{
		selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = NULLCHAR;
		populateSongName = FALSE;
		arrayIndexPosition = 0;
		++index;
		++selectedTrackLibrary-&gt;size;
		continue;
	}
	if(selectedChar == EOF)
	{
		selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = NULLCHAR;
		break;
	}
	if(possibleSongAndArtistDivider == TRUE &amp;&amp; selectedChar == '-')
	{
		selectedTrackLibrary-&gt;TrackList[index].Track[arrayIndexPosition - 1] = NULLCHAR;
		populateSongName = skipSpaceDashSpace = TRUE;
		possibleSongAndArtistDivider = FALSE;
		arrayIndexPosition = 0;
		continue;
	}
	if(populateSongName == FALSE)
		selectedTrackLibrary-&gt;TrackList[index].Track[arrayIndexPosition] = selectedChar;
	else
		selectedTrackLibrary-&gt;TrackList[index].Artist[arrayIndexPosition] = selectedChar;
	++arrayIndexPosition;
}
</code></pre>
<p>}</p>
<p>void print(TrackLibrary selectedTrackLibrary)<br>
{<br>
int index;<br>
for(index = 0; index &lt;= selectedTrackLibrary.size; ++index)<br>
{<br>
if(selectedTrackLibrary.TrackList[index].Track == ‘\0’ || selectedTrackLibrary.TrackList[index].Artist == ‘\0’)<br>
break;<br>
printf("%s by %s\n",selectedTrackLibrary.TrackList[index].Track,selectedTrackLibrary.TrackList[index].Artist);<br>
}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-artist-search-more-functions/394901/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-artist-search-more-functions/394901/1</link>
        <pubDate>Sat, 14 May 2011 01:58:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-394901-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-artist-search-more-functions/394901.rss">[C] Artist Search (more functions)</source>
      </item>
  </channel>
</rss>
