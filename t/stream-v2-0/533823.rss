<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Stream v2.0!</title>
    <link>https://forum.moparisthebest.com/t/stream-v2-0/533823</link>
    <description>Works great, only need to add createFrame, and the Encryption feature. REALLY SIMPLE using the methods provided, but i wrote it as a standalone, so no has the names :(
And been long time since i did any PS programming. 

Uses:
[317]
This allows for simple bit-wise writing. I wish i could split it into two pieces (byteOff and bitOff) but seemed like a lot of code :l so looks like this is limited to an apx 255MB buffer length, sorry.

[code]
/**
 *
 * @author Matzie
 */
public class Stream {

    protected byte[] buffer;
    public int currentOffset;
    //ADD the ISaasEncryption thingy here...
    public Stream2(int size) {
        if (size &gt; Integer.MAX_VALUE / 8) {
            System.out.println(&quot;FUCK!&quot;);
        }
        buffer = new byte[size];

    }

    public Stream(byte[] ar) {
        buffer = ar;
    }

    public Stream(byte[] ar, int size) throws Exception {
        buffer = new byte[size];
        int len;
        if (ar.length &gt; size) {
            len = size;
        } else {
            len = ar.length;
        }
        if (len == 0) {
            throw new java.lang.Exception(&quot;Buffer length cannot be 0&quot;);
        }
        System.arraycopy(ar, 0, buffer, 0, len);
    }

    public int read(int bits) {
        int rtv = 0;
        for (int i = 0; i &lt; bits; i++) {
            rtv += ((buffer[currentOffset / 8] &gt;&gt; (i % 8)) &amp; 1) &lt;&lt; i;
            currentOffset++;
        }

        return rtv;
    }

    public void writeByte(int b) {
        write(b &amp; 0xff, 8);
    }
    public void writeByteA(int b) {
        writeByte(b+128);
    }
    public void writeWord(int w) {
        write(w &amp; 0xffff, 16);
    }

    public void writeDWord(int w) {
        write(w, 32);
    }

    public void writeQWord(long l) {
        write((int) (l &lt;&lt; 32) &amp; 0xffffffff, 32);
        write((int) (l &amp; 0xffffffff), 32);
    }

    public void writeWordBigEndian(int w) {
        write(w &amp; 0xff, 8);
        write(w &gt;&gt; 8 &amp; 0xff, 8);
    }

    public void writeDWordBigEndian(int w) {
        write(w &amp; 0xff, 8);
        write(w &gt;&gt; 8 &amp; 0xff, 8);
        write(w &gt;&gt; 16 &amp; 0xff, 8);
        write(w &gt;&gt; 24 &amp; 0xff, 8);
    }
    public void writeWordA(int w) {
        writeByte(w&gt;&gt;8);
        writeByteA(w);
    }
    public void writeWordBigEndianA(int w) {
        
        writeByte(w &gt;&gt; 8);
        writeByteA(w);
    }
    public void writeDWordA(int w) {
        writeWord(w &gt;&gt; 16);
        writeWordA(w);
    }
    public void writeDWordBigEndianA(int w) {
        writeWordBigEndian(w &gt;&gt; 16);
        writeWordBigEndianA(w);
    }
    public int readSignedByte() {
        int i = read(8);
        return (byte)i;
    }
    public int readUnsignedByte() {
        return read(8);
    }
    public int readUnsignedByteA() {
        return (read(8)- 128 &amp; 0xff);
    }
    public int readSignedByteA() {
        return (byte)((read(8) - 128) &amp; 0xff);
    }
    public int readUnsignedWord() {
        return read(16);
    }
    public int readSignedWord() {
        return (short)read(16);
    }
    public int readSignedWordA() {
        return (short)((read(8) &lt;&lt; 8 + ((read(8) - 128) &amp; 0xff)));
    }
    public int readUnsignedWordBigEndian() {
        return read(16);
    }
    public int readSignedWordBigEndian() {
        return (short)((readUnsignedWordBigEndian()));
    }
    public void writeString(String s) {
        for (byte b : s.getBytes())
            writeByte(b);
        writeByte(10);
    }
    public void write(int val, int bitLen) {
        for (int i = 0; i &lt; bitLen; i++) {
            buffer[currentOffset / 8] += (val &gt;&gt; i &amp; getBitMask(1)) &lt;&lt; (currentOffset % 8);
            currentOffset++;
        }

    }

    public long getBitMask(int numBits) {
        long mask = 0;
        for (int i = 0; i &lt; numBits; i++) {
            mask += (1 &lt;&lt; i);
        }
        return mask;
    }
}
[/code]</description>
    
    <lastBuildDate>Tue, 08 Oct 2013 02:31:18 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/stream-v2-0/533823.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Stream v2.0!</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p><em>slow clap</em></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/stream-v2-0/533823/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/stream-v2-0/533823/4</link>
        <pubDate>Tue, 08 Oct 2013 02:31:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533823-4</guid>
        <source url="https://forum.moparisthebest.com/t/stream-v2-0/533823.rss">Stream v2.0!</source>
      </item>
      <item>
        <title>Stream v2.0!</title>
        <dc:creator><![CDATA[@Wintercanon Wintercanon]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wintercanon">@Wintercanon</a> wrote:</p>
          <blockquote>
              <p>Don’t use this unless you’re stupid…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/stream-v2-0/533823/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/stream-v2-0/533823/3</link>
        <pubDate>Tue, 08 Oct 2013 02:02:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533823-3</guid>
        <source url="https://forum.moparisthebest.com/t/stream-v2-0/533823.rss">Stream v2.0!</source>
      </item>
      <item>
        <title>Stream v2.0!</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Naming sucks and why are you unsigning everything.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/stream-v2-0/533823/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/stream-v2-0/533823/2</link>
        <pubDate>Tue, 08 Oct 2013 00:55:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533823-2</guid>
        <source url="https://forum.moparisthebest.com/t/stream-v2-0/533823.rss">Stream v2.0!</source>
      </item>
      <item>
        <title>Stream v2.0!</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>Works great, only need to add createFrame, and the Encryption feature. REALLY SIMPLE using the methods provided, but i wrote it as a standalone, so no has the names <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"><br>
And been long time since i did any PS programming.</p>
<p>Uses:<br>
[317]<br>
This allows for simple bit-wise writing. I wish i could split it into two pieces (byteOff and bitOff) but seemed like a lot of code :l so looks like this is limited to an apx 255MB buffer length, sorry.</p>
<pre><code class="lang-auto">/**
 *
 * @author Matzie
 */
public class Stream {

    protected byte[] buffer;
    public int currentOffset;
    //ADD the ISaasEncryption thingy here...
    public Stream2(int size) {
        if (size &gt; Integer.MAX_VALUE / 8) {
            System.out.println("FUCK!");
        }
        buffer = new byte[size];

    }

    public Stream(byte[] ar) {
        buffer = ar;
    }

    public Stream(byte[] ar, int size) throws Exception {
        buffer = new byte[size];
        int len;
        if (ar.length &gt; size) {
            len = size;
        } else {
            len = ar.length;
        }
        if (len == 0) {
            throw new java.lang.Exception("Buffer length cannot be 0");
        }
        System.arraycopy(ar, 0, buffer, 0, len);
    }

    public int read(int bits) {
        int rtv = 0;
        for (int i = 0; i &lt; bits; i++) {
            rtv += ((buffer[currentOffset / 8] &gt;&gt; (i % 8)) &amp; 1) &lt;&lt; i;
            currentOffset++;
        }

        return rtv;
    }

    public void writeByte(int b) {
        write(b &amp; 0xff, 8);
    }
    public void writeByteA(int b) {
        writeByte(b+128);
    }
    public void writeWord(int w) {
        write(w &amp; 0xffff, 16);
    }

    public void writeDWord(int w) {
        write(w, 32);
    }

    public void writeQWord(long l) {
        write((int) (l &lt;&lt; 32) &amp; 0xffffffff, 32);
        write((int) (l &amp; 0xffffffff), 32);
    }

    public void writeWordBigEndian(int w) {
        write(w &amp; 0xff, 8);
        write(w &gt;&gt; 8 &amp; 0xff, 8);
    }

    public void writeDWordBigEndian(int w) {
        write(w &amp; 0xff, 8);
        write(w &gt;&gt; 8 &amp; 0xff, 8);
        write(w &gt;&gt; 16 &amp; 0xff, 8);
        write(w &gt;&gt; 24 &amp; 0xff, 8);
    }
    public void writeWordA(int w) {
        writeByte(w&gt;&gt;8);
        writeByteA(w);
    }
    public void writeWordBigEndianA(int w) {
        
        writeByte(w &gt;&gt; 8);
        writeByteA(w);
    }
    public void writeDWordA(int w) {
        writeWord(w &gt;&gt; 16);
        writeWordA(w);
    }
    public void writeDWordBigEndianA(int w) {
        writeWordBigEndian(w &gt;&gt; 16);
        writeWordBigEndianA(w);
    }
    public int readSignedByte() {
        int i = read(8);
        return (byte)i;
    }
    public int readUnsignedByte() {
        return read(8);
    }
    public int readUnsignedByteA() {
        return (read(8)- 128 &amp; 0xff);
    }
    public int readSignedByteA() {
        return (byte)((read(8) - 128) &amp; 0xff);
    }
    public int readUnsignedWord() {
        return read(16);
    }
    public int readSignedWord() {
        return (short)read(16);
    }
    public int readSignedWordA() {
        return (short)((read(8) &lt;&lt; 8 + ((read(8) - 128) &amp; 0xff)));
    }
    public int readUnsignedWordBigEndian() {
        return read(16);
    }
    public int readSignedWordBigEndian() {
        return (short)((readUnsignedWordBigEndian()));
    }
    public void writeString(String s) {
        for (byte b : s.getBytes())
            writeByte(b);
        writeByte(10);
    }
    public void write(int val, int bitLen) {
        for (int i = 0; i &lt; bitLen; i++) {
            buffer[currentOffset / 8] += (val &gt;&gt; i &amp; getBitMask(1)) &lt;&lt; (currentOffset % 8);
            currentOffset++;
        }

    }

    public long getBitMask(int numBits) {
        long mask = 0;
        for (int i = 0; i &lt; numBits; i++) {
            mask += (1 &lt;&lt; i);
        }
        return mask;
    }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/stream-v2-0/533823/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/stream-v2-0/533823/1</link>
        <pubDate>Mon, 07 Oct 2013 23:41:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-533823-1</guid>
        <source url="https://forum.moparisthebest.com/t/stream-v2-0/533823.rss">Stream v2.0!</source>
      </item>
  </channel>
</rss>
