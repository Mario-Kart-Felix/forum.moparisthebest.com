<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Auto download cache 317 PI based</title>
    <link>https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596</link>
    <description>hello you guys im stuck on this auto download cache and im getting pissed so befor i end up throwing my computed throw my window i was hoping someone could help me and may be tell me what i am doing wrong i ziped all the files right heres the [url=http://dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip]dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip[/url] put it in direct download this is my code what could be wrong? [code]import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	/*
	 * Only things you need to change
	 *
	 */
	private final int VERSION = 2; // Version of cache
	private String cacheLink = &quot;dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip&quot;; // Link to cache

	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}[/code]</description>
    
    <lastBuildDate>Mon, 24 Jun 2013 00:59:27 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Auto download cache 317 PI based</title>
        <dc:creator><![CDATA[@angel_jack angel jack]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/angel_jack">@angel_jack</a> wrote:</p>
          <blockquote>
              <p>im sorry you guys i was doing it right and im just a moron and forgot to have someone else to try it and tried to dl it myself and i didnt delet the whole thing of my computer so it crashed it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/3</link>
        <pubDate>Mon, 24 Jun 2013 00:59:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522596-3</guid>
        <source url="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596.rss">Auto download cache 317 PI based</source>
      </item>
      <item>
        <title>Auto download cache 317 PI based</title>
        <dc:creator><![CDATA[@Red_Knox Red Knox]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/red_knox">@Red_Knox</a> wrote:</p>
          <blockquote>
              <p>What’s the error you’re getting? that would help determine how to fix it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/2</link>
        <pubDate>Sun, 23 Jun 2013 20:13:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522596-2</guid>
        <source url="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596.rss">Auto download cache 317 PI based</source>
      </item>
      <item>
        <title>Auto download cache 317 PI based</title>
        <dc:creator><![CDATA[@angel_jack angel jack]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/angel_jack">@angel_jack</a> wrote:</p>
          <blockquote>
              <p>hello you guys im stuck on this auto download cache and im getting pissed so befor i end up throwing my computed throw my window i was hoping someone could help me and may be tell me what i am doing wrong i ziped all the files right heres the <a href="http://dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip" data-bbcode="true" rel="nofollow noopener">dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip</a> put it in direct download this is my code what could be wrong? [code]import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

/*
 * Only things you need to change
 *
 */
private final int VERSION = 2; // Version of cache
private String cacheLink = "dl.dropbox.com/s/lha9xvwjwh6mf5v/VisagePKCacheV2.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Downloading Cache Please wait...");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
	} else {
		if(!version.exists()) {
			//drawLoadingText("Downloading Cache Please wait...");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Finished downloading "+getArchivedName()+"!");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596/1</link>
        <pubDate>Sun, 23 Jun 2013 16:44:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522596-1</guid>
        <source url="https://forum.moparisthebest.com/t/auto-download-cache-317-pi-based/522596.rss">Auto download cache 317 PI based</source>
      </item>
  </channel>
</rss>
