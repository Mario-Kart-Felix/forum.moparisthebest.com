<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Turning this into a loader.class?</title>
    <link>https://forum.moparisthebest.com/t/turning-this-into-a-loader-class/260857</link>
    <description>Hello,

How would i turn this code into a loader.class for my webclient:

[code]import java.applet.Applet;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.net.URLConnection;
import java.util.Hashtable;

import javax.swing.JFrame;

public class MainClass {

  public static void main(String args[]) {
    String name = &quot;http://urlWithClassName&quot;;
    try {
      if (!name.endsWith(&quot;.class&quot;)) {
        System.err.println(&quot;That doesn&#39;t look like a byte code file!&quot;);
        return;
      }
      URL u = new URL(name);
      URLClassLoader ucl = new URLClassLoader(u);

      // parse out the name of the class from the URL
      String s = u.getFile();
      String classname = s.substring(s.lastIndexOf(&#39;/&#39;), s.lastIndexOf(&quot;.class&quot;));
      Class AppletClass = ucl.loadClass(classname, true);
      Applet apl = (Applet) AppletClass.newInstance();
      JFrame f = new JFrame();
      f.setSize(200, 200);
      f.add(&quot;Center&quot;, apl);
      apl.init();
      apl.start();
      f.setVisible(true);
    } catch (Exception e) {
      System.err.println(e);
    }
  }
}

class URLClassLoader extends ClassLoader {
  Hashtable cache = new Hashtable();
  URL url;

  public URLClassLoader(URL u) {
    this.url = u;
  }

  public synchronized Class loadClass(String name, boolean resolve) throws ClassNotFoundException {
    Class cls = (Class) cache.get(name);
    if (cls == null) {
      try {
        cls = findSystemClass(name);
      } catch (ClassNotFoundException e) {
      }
    }
    if (cls == null) {
      byte classData[] = loadClassData(name);
      cls = defineClass(classData, 0, classData.length);
      cache.put(name, cls);
    }
    if (resolve) {
      resolveClass(cls);
    }
    return cls;
  }
  private byte[] loadClassData(String name) throws ClassNotFoundException {
    byte[] buffer;
    InputStream theClassInputStream = null;
    int bufferLength = 128;
    try {
      URL classURL = new URL(url, name + &quot;.class&quot;);
      URLConnection uc = classURL.openConnection();
      uc.setAllowUserInteraction(false);

      try {
        theClassInputStream = uc.getInputStream();
      } catch (NullPointerException e) {
        System.err.println(e);
        throw new ClassNotFoundException(name + &quot; input stream problem&quot;);
      }
      int contentLength = uc.getContentLength();

      // A lot of web servers don&#39;t send content-lengths
      // for .class files
      if (contentLength == -1) {
        buffer = new byte[bufferLength * 16];
      } else {
        buffer = new byte[contentLength];
      }

      int bytesRead = 0;
      int offset = 0;

      while (bytesRead &gt;= 0) {
        bytesRead = theClassInputStream.read(buffer, offset, bufferLength);
        if (bytesRead == -1)
          break;
        offset += bytesRead;
        if (contentLength == -1 &amp;&amp; offset == buffer.length) { // grow the array
          byte temp[] = new byte[offset * 2];
          System.arraycopy(buffer, 0, temp, 0, offset);
          buffer = temp;
        } else if (offset &gt; buffer.length) {
          throw new ClassNotFoundException(name + &quot; error reading data into the array&quot;);
        }
      }

      if (offset &lt; buffer.length) { // shrink the array
        byte temp[] = new byte[offset];
        System.arraycopy(buffer, 0, temp, 0, offset);
        buffer = temp;
      }

      // Make sure all the bytes were received
      if (contentLength != -1 &amp;&amp; offset != contentLength) {
        throw new ClassNotFoundException(&quot;Only &quot; + offset + &quot; bytes received for &quot; + name
            + &quot;\n Expected &quot; + contentLength + &quot; bytes&quot;);
      }
    } catch (Exception e) {
      throw new ClassNotFoundException(name + &quot; &quot; + e);
    } finally {
      try {
        if (theClassInputStream != null)
          theClassInputStream.close();
      } catch (IOException e) {
      }
    }
    return buffer;
  }
}[/code]

My main files is client.class</description>
    
    <lastBuildDate>Sat, 07 Feb 2009 08:49:22 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/turning-this-into-a-loader-class/260857.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Turning this into a loader.class?</title>
        <dc:creator><![CDATA[@I_james_I I james I]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_james_i">@I_james_I</a> wrote:</p>
          <blockquote>
              <p>Hello,</p>
<p>How would i turn this code into a loader.class for my webclient:</p>
<p>[code]import java.applet.Applet;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.net.MalformedURLException;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.Hashtable;</p>
<p>import javax.swing.JFrame;</p>
<p>public class MainClass {</p>
<p>public static void main(String args[]) {<br>
String name = “<a href="http://urlWithClassName" rel="nofollow noopener">http://urlWithClassName</a>”;<br>
try {<br>
if (!name.endsWith(".class")) {<br>
System.err.println(“That doesn’t look like a byte code file!”);<br>
return;<br>
}<br>
URL u = new URL(name);<br>
URLClassLoader ucl = new URLClassLoader(u);</p>
<pre><code>  // parse out the name of the class from the URL
  String s = u.getFile();
  String classname = s.substring(s.lastIndexOf('/'), s.lastIndexOf(".class"));
  Class AppletClass = ucl.loadClass(classname, true);
  Applet apl = (Applet) AppletClass.newInstance();
  JFrame f = new JFrame();
  f.setSize(200, 200);
  f.add("Center", apl);
  apl.init();
  apl.start();
  f.setVisible(true);
} catch (Exception e) {
  System.err.println(e);
}
</code></pre>
<p>}<br>
}</p>
<p>class URLClassLoader extends ClassLoader {<br>
Hashtable cache = new Hashtable();<br>
URL url;</p>
<p>public URLClassLoader(URL u) {<br>
this.url = u;<br>
}</p>
<p>public synchronized Class loadClass(String name, boolean resolve) throws ClassNotFoundException {<br>
Class cls = (Class) cache.get(name);<br>
if (cls == null) {<br>
try {<br>
cls = findSystemClass(name);<br>
} catch (ClassNotFoundException e) {<br>
}<br>
}<br>
if (cls == null) {<br>
byte classData[] = loadClassData(name);<br>
cls = defineClass(classData, 0, classData.length);<br>
cache.put(name, cls);<br>
}<br>
if (resolve) {<br>
resolveClass(cls);<br>
}<br>
return cls;<br>
}<br>
private byte[] loadClassData(String name) throws ClassNotFoundException {<br>
byte[] buffer;<br>
InputStream theClassInputStream = null;<br>
int bufferLength = 128;<br>
try {<br>
URL classURL = new URL(url, name + “.class”);<br>
URLConnection uc = classURL.openConnection();<br>
uc.setAllowUserInteraction(false);</p>
<pre><code>  try {
    theClassInputStream = uc.getInputStream();
  } catch (NullPointerException e) {
    System.err.println(e);
    throw new ClassNotFoundException(name + " input stream problem");
  }
  int contentLength = uc.getContentLength();

  // A lot of web servers don't send content-lengths
  // for .class files
  if (contentLength == -1) {
    buffer = new byte[bufferLength * 16];
  } else {
    buffer = new byte[contentLength];
  }

  int bytesRead = 0;
  int offset = 0;

  while (bytesRead &gt;= 0) {
    bytesRead = theClassInputStream.read(buffer, offset, bufferLength);
    if (bytesRead == -1)
      break;
    offset += bytesRead;
    if (contentLength == -1 &amp;&amp; offset == buffer.length) { // grow the array
      byte temp[] = new byte[offset * 2];
      System.arraycopy(buffer, 0, temp, 0, offset);
      buffer = temp;
    } else if (offset &gt; buffer.length) {
      throw new ClassNotFoundException(name + " error reading data into the array");
    }
  }

  if (offset &lt; buffer.length) { // shrink the array
    byte temp[] = new byte[offset];
    System.arraycopy(buffer, 0, temp, 0, offset);
    buffer = temp;
  }

  // Make sure all the bytes were received
  if (contentLength != -1 &amp;&amp; offset != contentLength) {
    throw new ClassNotFoundException("Only " + offset + " bytes received for " + name
        + "\n Expected " + contentLength + " bytes");
  }
} catch (Exception e) {
  throw new ClassNotFoundException(name + " " + e);
} finally {
  try {
    if (theClassInputStream != null)
      theClassInputStream.close();
  } catch (IOException e) {
  }
}
return buffer;
</code></pre>
<p>}<br>
}[/code]</p>
<p>My main files is client.class</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/turning-this-into-a-loader-class/260857/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/turning-this-into-a-loader-class/260857/1</link>
        <pubDate>Sat, 07 Feb 2009 08:49:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-260857-1</guid>
        <source url="https://forum.moparisthebest.com/t/turning-this-into-a-loader-class/260857.rss">Turning this into a loader.class?</source>
      </item>
  </channel>
</rss>
