<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Event driven quest system / Thread.sleep() vs DelayedEvents</title>
    <link>https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151</link>
    <description>Like the topic suggest, this is a question about using threads vs using the delayedevents system in RSCD.

This is what I have at the moment: http://pastebin.com/i62Fdfnp

The problem arises when I want to ask the user for input, for example:
[code]
sendMessage(&quot;1&quot;);
sendMessage(&quot;2&quot;);
result = askForInput(&quot;Do you want to start this quest?&quot;);
if(result == 1) {
    sendMessage(&quot;succsess&quot;);
}
else {
    sendMessage(&quot;fail&quot;);
}
[/code]

If I&#39;m not going to use a threaded approach, how do I pause the quest to wait for input? Any design ideas are welcome.</description>
    
    <lastBuildDate>Tue, 28 Sep 2010 15:19:41 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Event driven quest system / Thread.sleep() vs DelayedEvents</title>
        <dc:creator><![CDATA[@Protosstribe object]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protosstribe">@Protosstribe</a> wrote:</p>
          <blockquote>
              <p>Well, one thread per player just for this would be quite bad (not to mention in generality). So instead use callbacks that resumes the quest at the given state whenever some client-request is given. For instance:</p>
<p>[CODE]public void askForInput(String text) {<br>
if(theCurrentStateWantsPlayerInput()) {<br>
player.addRequestCallbackForRequestId(THE_REQUEST_THAT_CORRESPONDS_TO_PLAYER_INPUT, this, text);//Assumes this class implements some abstract type taking a method “onRequestCallback(Object[] objects)”.<br>
}<br>
}</p>
<p>public void onRequestCallback(Object[] objects) {<br>
String string = (String)objects[0];<br>
//Do whatever else here… For instance redirect to the main quest-check-method.<br>
}[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/3</link>
        <pubDate>Tue, 28 Sep 2010 15:19:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-362151-3</guid>
        <source url="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151.rss">Event driven quest system / Thread.sleep() vs DelayedEvents</source>
      </item>
      <item>
        <title>Event driven quest system / Thread.sleep() vs DelayedEvents</title>
        <dc:creator><![CDATA[@meatstick meatstick]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meatstick">@meatstick</a> wrote:</p>
          <blockquote>
              <p><code>
public int askForInput(String s) {
//...
    while(!answerGiven) {
        for(long l = System.currentTimeMillis(); System.currentTimeMillis() - l &lt; 500;;) {
           Thread.yield();
        }
    }
//....
}</code></p>
<p>First thing i could think of.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/2</link>
        <pubDate>Tue, 28 Sep 2010 14:24:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-362151-2</guid>
        <source url="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151.rss">Event driven quest system / Thread.sleep() vs DelayedEvents</source>
      </item>
      <item>
        <title>Event driven quest system / Thread.sleep() vs DelayedEvents</title>
        <dc:creator><![CDATA[@Peter Peeter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/peter">@Peter</a> wrote:</p>
          <blockquote>
              <p>Like the topic suggest, this is a question about using threads vs using the delayedevents system in RSCD.</p>
<p>This is what I have at the moment: <a href="http://pastebin.com/i62Fdfnp">http://pastebin.com/i62Fdfnp</a></p>
<p>The problem arises when I want to ask the user for input, for example:</p>
<pre><code class="lang-auto">sendMessage("1");
sendMessage("2");
result = askForInput("Do you want to start this quest?");
if(result == 1) {
    sendMessage("succsess");
}
else {
    sendMessage("fail");
}</code></pre>
<p>If I’m not going to use a threaded approach, how do I pause the quest to wait for input? Any design ideas are welcome.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151/1</link>
        <pubDate>Tue, 28 Sep 2010 13:38:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-362151-1</guid>
        <source url="https://forum.moparisthebest.com/t/event-driven-quest-system-thread-sleep-vs-delayedevents/362151.rss">Event driven quest system / Thread.sleep() vs DelayedEvents</source>
      </item>
  </channel>
</rss>
