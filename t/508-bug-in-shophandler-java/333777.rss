<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[508] Bug In Shophandler.java</title>
    <link>https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777</link>
    <description>hello, I have this bug in my shophandler.. When player1 views PK SHOP and player2 Views GEN STORE (Or any other shops) At the same time Player1 buys an item nothing interesting happens... Then player2 trys to buy something from the GEN Store Then It automaticly goes To the PK SHOP 
So i cant figure this out myself i stopped coding a long time ago.. wel im back now.. 
If anyone can help me with this  i realy would appreciate !that;D;D :cool:
SHOPHANDLER.java (NOTEE!!@#@! I removed the shop ints shop2,shop3,shop4... because otherwise i wusnt able to post this to much characters, also deleted the imports)
[code]
public class ShopHandler {
    private Player p;
    private PlayerItems pi = new PlayerItems();
    public int maxItems = 40;

    public int[] items = new int[maxItems];
    public int[] itemsN = new int[maxItems];
    public int[] maxItemAmount = new int[maxItems];
    int shopid = 0;
    public ShopHandler() {
        
        for (int i = 0; i &lt; 40; i++) {
            items[i] = -1;
        }
        
    }
public long lastRestock = System.currentTimeMillis();
public void process() {
        if (System.currentTimeMillis() - lastRestock &gt;= 15000) {
                for (int i = 0; i &lt; items.length; i++) {
                if (itemsN[i] &lt; 100) itemsN[i]++;
            }
            lastRestock = System.currentTimeMillis();
        }
    }
 public boolean itemInList(int itemId, Player p) {
 if (itemId &lt; 0) {
            return false;
        }
switch (p.shopid) {
case 2:
for (int i = 0; i &lt; shop2.length; i++) {
        if (shop2[i] != -1 &amp;&amp; shop2[i] == itemId) {
            return true;
        }
}
break;
case 3:
for (int i = 0; i &lt; shop3.length; i++) {
        if (shop3[i] != -1 &amp;&amp; shop3[i] == itemId) {
            return true;
        }
}
break;
case 4:
for (int i = 0; i &lt; shop4.length; i++) {
        if (shop4[i] != -1 &amp;&amp; shop4[i] == itemId) {
            return true;
        }
}
break;
case 5:
for (int i = 0; i &lt; shop5.length; i++) {
        if (shop5[i] != -1 &amp;&amp; shop5[i] == itemId) {
            return true;
        }
}
break;
case 6:
for (int i = 0; i &lt; shop6.length; i++) {
        if (shop6[i] != -1 &amp;&amp; shop6[i] == itemId) {
            return true;
        }
}
break;
case 7:
for (int i = 0; i &lt; shop7.length; i++) {
        if (shop7[i] != -1 &amp;&amp; shop7[i] == itemId) {
            return true;
        }
}
break;
case 8:
for (int i = 0; i &lt; shop8.length; i++) {
        if (shop8[i] != -1 &amp;&amp; shop8[i] == itemId) {
            return true;
        }
}
break;
case 9:
for (int i = 0; i &lt; shop9.length; i++) {
        if (shop9[i] != -1 &amp;&amp; shop9[i] == itemId) {
            return true;
        }
}
break;
case 10:
for (int i = 0; i &lt; shop10.length; i++) {
        if (shop10[i] != -1 &amp;&amp; shop10[i] == itemId) {
            return true;
        }
}
break;
case 11:
for (int i = 0; i &lt; shop11.length; i++) {
        if (shop11[i] != -1 &amp;&amp; shop11[i] == itemId) {
            return true;
        }
}
break;
case 12:
for (int i = 0; i &lt; shop12.length; i++) {
        if (shop12[i] != -1 &amp;&amp; shop12[i] == itemId) {
            return true;
        }
}
break;
case 13:
for (int i = 0; i &lt; shop13.length; i++) {
        if (shop13[i] != -1 &amp;&amp; shop13[i] == itemId) {
            return true;
        }
}
break;
case 14:
for (int i = 0; i &lt; shop14.length; i++) {
        if (shop14[i] != -1 &amp;&amp; shop14[i] == itemId) {
            return true;
        }
}
break;
case 16:
for (int i = 0; i &lt; shop16.length; i++) {
        if (shop16[i] != -1 &amp;&amp; shop16[i] == itemId) {
            return true;
        }
}
}
        return false;
    }
    public void sell(Player p, int item, int amnt){
            PlayerItems pi = new PlayerItems();
            boolean shopShouldBuy = isItemOnShop(item) || itemInList(item, p);
            if (!shopShouldBuy) {
                p.frames.sendMessage(p, &quot;You cannot sell this item to this shop.&quot;);
                return;
            }
            if (item == 995) {
                p.frames.sendMessage(p, &quot;You can&#39;t sell coins to a shop&quot;);
                return;
            }
            int free = findFreeSlot();
            if (!isItemOnShop(item)) {
                if (free == -1) {
                    p.frames.sendMessage(p, &quot;This shop is full.&quot;);
                    return;
                }
                items[free] = item;
                itemsN[free] = 0;
            }
            int slot = findItemSlot(item);
        if(amnt&lt;=pi.invItemCount(p,item)) {
            if (itemStacks(item)) {
                items[slot] = item;
                itemsN[slot] += amnt;
  
                pi.deleteItem(p, item, pi.getItemSlot(p, item), amnt);
                    pi.addItem(p, 995, amnt*(int)(itemValue(item, p)*.75));
            } else {
                items[slot] = item;
                for (int notused = amnt; notused &gt; 0; notused--) {
                    pi.deleteItem(p, item, pi.getItemSlot(p, item), 1);
                    pi.addItem(p, 995, (int)(itemValue(item, p)*.75));
                    itemsN[slot]++;
  
                }
            }
        } else {
            amnt = pi.invItemCount(p,item);
            if (itemStacks(item)) {
                items[slot] = item;
                itemsN[slot] += amnt;
                pi.deleteItem(p, item, pi.getItemSlot(p, item), amnt);
                    pi.addItem(p, 995, amnt*(int)(itemValue(item, p)*.75));
            } else {
                items[slot] = item;
                for (int notused = amnt; notused &gt; 0; notused--) {
                    pi.deleteItem(p, item, pi.getItemSlot(p, item), 1);
                    pi.addItem(p, 995, (int)(itemValue(item, p)*.75));
                    itemsN[slot]++;
             
                }
            }
        }

            sendShopItems(p);
            sendPlayerInventory(p);
        }
    public void buy(Player p, int item, int amnt) {
        clearSlots(p);
        int slot = findItemSlot(item);
        if (slot == -1) {
            return;
        }
        if (itemsN[slot] &lt; amnt) amnt = itemsN[slot];
        if (amnt == 0) {
            itemsN[slot] = 0;
     
            p.frames.sendMessage(p, &quot;That item&#39;s stock has run out.&quot;);
            return;
        }
        if (itemStacks(item)) {       
            if (pi.freeSlotCount(p) &lt; 1) {
                p.frames.sendMessage(p, &quot;Not enough space on inventory&quot;);
                return;
            }
            if (pi.invItemCount(p, 995) &lt; (amnt * itemValue(item, p))) {
                p.frames.sendMessage(p, &quot;Not enough coins to buy that many.&quot;);
                return;
            }
            pi.deleteItem(p, 995, pi.getItemSlot(p, 995), amnt * itemValue(item, p));
            pi.addItem(p, item, amnt);
            itemsN[slot] -= amnt;
     
        } else {   
            for (int i = amnt; i &gt; 0; i--) {
                int price = itemValue(item, p);
                clearSlots(p);
                if (pi.invItemCount(p, 995) &lt; price) {
                    p.frames.sendMessage(p, &quot;Not enough coins to buy that many.&quot;);
                    break;
                }
                if (pi.findInvSlot(p) == -1) {
                    p.frames.sendMessage(p, &quot;Not enough space on inventory&quot;);
                    break;
                }
                if (itemsN[slot] &lt; 1) {
                    clearSlots(p);
                    p.frames.sendMessage(p, &quot;The shop has run out of stock from this item!&quot;);
                    break;
                }
                if (itemsN[slot] == 1) {
                    pi.deleteItem(p, 995, pi.getItemSlot(p, 995), price);
                    pi.addItem(p, item, 1);
                    itemsN[slot] = 0;
      
                    break;
                }
                itemsN[slot]--;
  
                pi.deleteItem(p, 995, pi.getItemSlot(p, 995), price);
                pi.addItem(p, item, 1);
                clearSlots(p);
            }

        }
        sendShopItems(p);
        sendPlayerInventory(p);
        clearSlots(p);
    }
    
    public int findItemSlot(int item) {
        for (int i = 0; i &lt; items.length; i++)
            if (item == items[i]) return i;
        return -1;
    }
    public int findFreeSlot() {
        for (int i = 0; i &lt; items.length; i++)
            if (items[i] == -1) return i;
        return -1;
    }
    public void clearSlots(Player p) {
        for (int i = 0; i &lt; items.length; i++)
            if (items[i] &lt; 1) {
                itemsN[i] = 0;
            } else {
            }
    }
public int getShopValue(int itemId, Player p) {
        if (itemId &lt; 0) {
            return 0;
        }
switch (p.shopid) {
case 2:
for (int i = 0; i &lt; shop2.length; i++) {
        if (shop2[i] != -1 &amp;&amp; shop2[i] == itemId) {
            return (shop2p[i]);
        }
}
break;
case 3:
for (int i = 0; i &lt; shop3.length; i++) {
        if (shop3[i] != -1 &amp;&amp; shop3[i] == itemId) {
            return (shop3p[i]);
        }
}
break;
case 4:
for (int i = 0; i &lt; shop4.length; i++) {
        if (shop4[i] != -1 &amp;&amp; shop4[i] == itemId) {
            return (shop4p[i]);
        }
}
break;
case 5:
for (int i = 0; i &lt; shop5.length; i++) {
        if (shop5[i] != -1 &amp;&amp; shop5[i] == itemId) {
            return (shop5p[i]);
        }
}
break;
case 6:
for (int i = 0; i &lt; shop6.length; i++) {
        if (shop6[i] != -1 &amp;&amp; shop6[i] == itemId) {
            return (shop6p[i]);
        }
}
break;
case 7:
for (int i = 0; i &lt; shop7.length; i++) {
        if (shop7[i] != -1 &amp;&amp; shop7[i] == itemId) {
            return (shop7p[i]);
        }
}
break;
case 8:
for (int i = 0; i &lt; shop8.length; i++) {
        if (shop8[i] != -1 &amp;&amp; shop8[i] == itemId) {
            return (shop8p[i]);
        }
}
break;
case 9:
for (int i = 0; i &lt; shop9.length; i++) {
        if (shop9[i] != -1 &amp;&amp; shop9[i] == itemId) {
            return (shop9p[i]);
        }
}
break;
case 10:
for (int i = 0; i &lt; shop10.length; i++) {
        if (shop10[i] != -1 &amp;&amp; shop10[i] == itemId) {
            return (shop10p[i]);
        }
}
break;
case 11:
for (int i = 0; i &lt; shop11.length; i++) {
        if (shop11[i] != -1 &amp;&amp; shop11[i] == itemId) {
            return (shop11p[i]);
        }
}
break;
case 12:
for (int i = 0; i &lt; shop12.length; i++) {
        if (shop12[i] != -1 &amp;&amp; shop12[i] == itemId) {
            return (shop12p[i]);
        }
}
break;
case 13:
for (int i = 0; i &lt; shop13.length; i++) {
        if (shop13[i] != -1 &amp;&amp; shop13[i] == itemId) {
            return (shop13p[i]);
        }
}
break;
case 14:
for (int i = 0; i &lt; shop14.length; i++) {
        if (shop14[i] != -1 &amp;&amp; shop14[i] == itemId) {
            return (shop14p[i]);
        }
}
break;
case 16:
for (int i = 0; i &lt; shop16.length; i++) {
        if (shop16[i] != -1 &amp;&amp; shop16[i] == itemId) {
            return (shop16p[i]);
        }
}
}
        return 2;
    }

    public void sendShopItems(Player p) {
for (Player p2 : Engine.players) {
if (p2 != null &amp;&amp; p2.interfaceId == p.interfaceId) 
        p2.frames.setItems(p, -1, 64271, 31, items, itemsN);
}
    }
    public boolean isItemOnShop(int item) {
        return findItemSlot(item) != -1;
    }
    public void sendPlayerInventory(Player p) {
        p.frames.setItems(p, -1, 64209, 93, p.items, p.itemsN);
    }
    public int itemValue(int item, Player p) {
        return getShopValue(item, p);
    }
    public boolean itemStacks(int item) {
        return Engine.items.itemLists[item].itemStackable;
    }
    public void handleoption(Player p, int interfaceId, int buttonId, int buttonId2, int packetId) {
        switch (interfaceId) {
            case 620:
                if (buttonId == 26) {
                    p.frames.setInterfaceConfig(p, 620, 23, true);
                    p.frames.setInterfaceConfig(p, 620, 24, false);
                    p.frames.setInterfaceConfig(p, 620, 29, true);
                    p.frames.setInterfaceConfig(p, 620, 25, false);
                    p.frames.setInterfaceConfig(p, 620, 27, false);
                    p.frames.setInterfaceConfig(p, 620, 26, true);
                    p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);
                }
                if (buttonId == 24) {
                    int itemid = items[buttonId2];
                   switch (packetId) {
                        case 233:
                            /* Value. */
                            p.frames.sendMessage(p, &quot;This item costs &quot; + getShopValue(itemid, p) + &quot; coins.&quot;);
                            break;
                        case 21:
                            /* Buy 1. */
                            buy(p, itemid, 1);
                            break;
                        case 169:
                            /* Buy 5. */
                            buy(p, itemid, 5);
                            break;
                        case 214:
                            /* Buy 10. */
                            buy(p, itemid, 10);
                            break;
                        case 90:
                            /*Examine. */
                            p.frames.sendMessage(p, Engine.items.getItemDescription(itemid));
                            break;
                    }

                }
                break;
            case 621:
                if (buttonId == 0) {
                    int itemid = p.items[buttonId2];
                    switch (packetId) {
                        case 233:
if (p.party) {
p.partyAdd(itemid);
return;
}
                            /*Value.*/
                            p.frames.sendMessage(p, &quot;This item is worth &quot; + (int)(itemValue(itemid, p)*.75) + &quot; coins.&quot;);
                            break;
                        case 21:
                            /*
                            * Sell 1.
                            */
                            sell(p, itemid, 1);
                            break;
                        case 169:
                            /*
                            * Sell 5.
                            */
                            sell(p, itemid, 5);
                            break;
                        case 214:
                            /*
                            * Sell 10.
                            */
                            sell(p, itemid, 10);
                            break;
                        case 90:
                            /*
                            * Examine.
                            */
                            p.frames.sendMessage(p, Engine.items.getItemDescription(itemid));
                            break;
                    }
                }
                break;
        }
    }
    public void shopopen(Player p, int shopId) {
        p.frames.removeShownInterface(p);
        p.frames.showInterface(p, 620); //Shop
        p.frames.setInventory(p, 621);
 p.frames.setString(p, &quot;Main Stock&quot;, 620, 31); //31 is right hand side
 p.frames.setString(p, &quot;Closed&quot;, 620, 32); //32 is left
 p.frames.setString(p, &quot;AngelZ 508&quot;, 620, 28);
 p.frames.setString(p, &quot;General Store&quot;, 620, 22); 
                    p.frames.setInterfaceConfig(p, 620, 23, true);
                    p.frames.setInterfaceConfig(p, 620, 24, false);
                    p.frames.setInterfaceConfig(p, 620, 29, true);
                    p.frames.setInterfaceConfig(p, 620, 25, false);
                    p.frames.setInterfaceConfig(p, 620, 27, false);
                    p.frames.setInterfaceConfig(p, 620, 26, true);
                    p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);
        shopid = shopId;
        Object[] setshopparams = new Object[]{shopId, 93};
        int shi = 621 &lt;&lt; 16;
        int ship = (620 &lt;&lt; 16) + 24;
        Object[] invparams = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Sell X&quot;, &quot;Sell 10&quot;, &quot;Sell 5&quot;, &quot;Sell 1&quot;, &quot;Value&quot;, -1, 0, 7, 4, 93, shi};
        Object[] shopparams = new Object[]{&quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;&quot;, &quot;Buy X&quot;, &quot;Buy 10&quot;, &quot;Buy 5&quot;, &quot;Buy 1&quot;, &quot;Value&quot;, -1, 0, 4, 10, 31, ship};
        p.frames.runScript(p, 25, setshopparams, &quot;vg&quot;);//Loads main stock items
        p.frames.runScript(p, 150, invparams, &quot;IviiiIsssssssss&quot;);
        p.frames.runScript(p, 150, shopparams, &quot;IviiiIsssssssss&quot;);
        p.frames.setAccessMask(p, 1278, 0, 621, 0, 28);
            p.frames.setInterfaceConfig(p, 620, 23, true);
            p.frames.setInterfaceConfig(p, 620, 24, false);
            p.frames.setInterfaceConfig(p, 620, 29, true);
            p.frames.setInterfaceConfig(p, 620, 25, false);
            p.frames.setInterfaceConfig(p, 620, 27, false);
            p.frames.setInterfaceConfig(p, 620, 26, true);
            p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);
        }
    public void openshop(Player p, int shopid) {
p.party = false;
        switch (shopid) {
            case 2:
                shopopen(p, 868);
                items  = shop2;
                itemsN = shop2n;
  break;
case 3:
                shopopen(p, 868);
                items  = shop3;
                itemsN = shop3n;
  break;
case 4:
                shopopen(p, 868);
                items  = shop4;
                itemsN = shop4n;
  break;
case 5:
                shopopen(p, 868);
                items  = shop5;
                itemsN = shop5n;
  break;
case 6:
                shopopen(p, 868);
                items  = shop6;
                itemsN = shop6n;
  break;
case 7:
                shopopen(p, 868);
                items  = shop7;
                itemsN = shop7n;
  break;
case 8:
                shopopen(p, 868);
                items  = shop8;
                itemsN = shop8n;
  break;
case 9:
                shopopen(p, 868);
                items  = shop9;
                itemsN = shop9n;
  break;
case 10:
                shopopen(p, 868);
                items  = shop10;
                itemsN = shop10n;
  break;
case 11:
                shopopen(p, 868);
                items  = shop11;
                itemsN = shop11n;
  break;
case 12:
                shopopen(p, 868);
                items  = shop12;
                itemsN = shop12n;
  break;
case 13:
                shopopen(p, 868);
                items  = shop13;
                itemsN = shop13n;
  break;
case 14:
                shopopen(p, 868);
                items  = shop14;
                itemsN = shop14n;
  break;
case 16:
                shopopen(p, 868);
                items  = shop16;
                itemsN = shop16n;
  break;
                
            
        }
p.frames.setItems(p, -1, 64209, 93, p.items, p.itemsN);
                p.frames.setItems(p, -1, 64271, 31, items, itemsN);
    }
}[/code]</description>
    
    <lastBuildDate>Tue, 23 Mar 2010 16:12:18 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[508] Bug In Shophandler.java</title>
        <dc:creator><![CDATA[@ploxxx ploxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ploxxx">@ploxxx</a> wrote:</p>
          <blockquote>
              <p>Lol okay ant leech, Also, i fixed this before… but i forgot how to So im an ëx coder"who started coding again so i need to warm up again otherwise this anti leech would be easy for me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/4</link>
        <pubDate>Tue, 23 Mar 2010 16:12:18 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-333777-4</guid>
        <source url="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777.rss">[508] Bug In Shophandler.java</source>
      </item>
      <item>
        <title>[508] Bug In Shophandler.java</title>
        <dc:creator><![CDATA[@cows1471 cows1471]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cows1471">@cows1471</a> wrote:</p>
          <blockquote>
              <p>What base</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/3</link>
        <pubDate>Mon, 22 Mar 2010 21:31:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-333777-3</guid>
        <source url="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777.rss">[508] Bug In Shophandler.java</source>
      </item>
      <item>
        <title>[508] Bug In Shophandler.java</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>This is an anti leech I put into my shop handler. You are either using my source or someone that leeched my shop handler. DavidScape v8 does not have this problem, and also supports a General Store.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/2</link>
        <pubDate>Mon, 22 Mar 2010 18:16:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-333777-2</guid>
        <source url="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777.rss">[508] Bug In Shophandler.java</source>
      </item>
      <item>
        <title>[508] Bug In Shophandler.java</title>
        <dc:creator><![CDATA[@ploxxx ploxxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ploxxx">@ploxxx</a> wrote:</p>
          <blockquote>
              <p>hello, I have this bug in my shophandler… When player1 views PK SHOP and player2 Views GEN STORE (Or any other shops) At the same time Player1 buys an item nothing interesting happens… Then player2 trys to buy something from the GEN Store Then It automaticly goes To the PK SHOP<br>
So i cant figure this out myself i stopped coding a long time ago… wel im back now…<br>
If anyone can help me with this  i realy would appreciate !that;D;D <img src="https://forum.moparisthebest.com/images/emoji/twitter/cool.png?v=5" title=":cool:" class="emoji" alt=":cool:"><br>
SHOPHANDLER.java (NOTEE!!@#@! I removed the shop ints shop2,shop3,shop4… because otherwise i wusnt able to post this to much characters, also deleted the imports)</p>
<p>[code]<br>
public class ShopHandler {<br>
private Player p;<br>
private PlayerItems pi = new PlayerItems();<br>
public int maxItems = 40;</p>
<pre><code>public int[] items = new int[maxItems];
public int[] itemsN = new int[maxItems];
public int[] maxItemAmount = new int[maxItems];
int shopid = 0;
public ShopHandler() {
    
    for (int i = 0; i &lt; 40; i++) {
        items[i] = -1;
    }
    
}
</code></pre>
<p>public long lastRestock = System.currentTimeMillis();<br>
public void process() {<br>
if (System.currentTimeMillis() - lastRestock &gt;= 15000) {<br>
for (int i = 0; i &lt; items.length; i++) {<br>
if (itemsN[i] &lt; 100) itemsN[i]++;<br>
}<br>
lastRestock = System.currentTimeMillis();<br>
}<br>
}<br>
public boolean itemInList(int itemId, Player p) {<br>
if (itemId &lt; 0) {<br>
return false;<br>
}<br>
switch (p.shopid) {<br>
case 2:<br>
for (int i = 0; i &lt; shop2.length; i++) {<br>
if (shop2[i] != -1 &amp;&amp; shop2[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 3:<br>
for (int i = 0; i &lt; shop3.length; i++) {<br>
if (shop3[i] != -1 &amp;&amp; shop3[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 4:<br>
for (int i = 0; i &lt; shop4.length; i++) {<br>
if (shop4[i] != -1 &amp;&amp; shop4[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 5:<br>
for (int i = 0; i &lt; shop5.length; i++) {<br>
if (shop5[i] != -1 &amp;&amp; shop5[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 6:<br>
for (int i = 0; i &lt; shop6.length; i++) {<br>
if (shop6[i] != -1 &amp;&amp; shop6[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 7:<br>
for (int i = 0; i &lt; shop7.length; i++) {<br>
if (shop7[i] != -1 &amp;&amp; shop7[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 8:<br>
for (int i = 0; i &lt; shop8.length; i++) {<br>
if (shop8[i] != -1 &amp;&amp; shop8[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 9:<br>
for (int i = 0; i &lt; shop9.length; i++) {<br>
if (shop9[i] != -1 &amp;&amp; shop9[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 10:<br>
for (int i = 0; i &lt; shop10.length; i++) {<br>
if (shop10[i] != -1 &amp;&amp; shop10[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 11:<br>
for (int i = 0; i &lt; shop11.length; i++) {<br>
if (shop11[i] != -1 &amp;&amp; shop11[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 12:<br>
for (int i = 0; i &lt; shop12.length; i++) {<br>
if (shop12[i] != -1 &amp;&amp; shop12[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 13:<br>
for (int i = 0; i &lt; shop13.length; i++) {<br>
if (shop13[i] != -1 &amp;&amp; shop13[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 14:<br>
for (int i = 0; i &lt; shop14.length; i++) {<br>
if (shop14[i] != -1 &amp;&amp; shop14[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
break;<br>
case 16:<br>
for (int i = 0; i &lt; shop16.length; i++) {<br>
if (shop16[i] != -1 &amp;&amp; shop16[i] == itemId) {<br>
return true;<br>
}<br>
}<br>
}<br>
return false;<br>
}<br>
public void sell(Player p, int item, int amnt){<br>
PlayerItems pi = new PlayerItems();<br>
boolean shopShouldBuy = isItemOnShop(item) || itemInList(item, p);<br>
if (!shopShouldBuy) {<br>
p.frames.sendMessage(p, “You cannot sell this item to this shop.”);<br>
return;<br>
}<br>
if (item == 995) {<br>
p.frames.sendMessage(p, “You can’t sell coins to a shop”);<br>
return;<br>
}<br>
int free = findFreeSlot();<br>
if (!isItemOnShop(item)) {<br>
if (free == -1) {<br>
p.frames.sendMessage(p, “This shop is full.”);<br>
return;<br>
}<br>
items[free] = item;<br>
itemsN[free] = 0;<br>
}<br>
int slot = findItemSlot(item);<br>
if(amnt&lt;=pi.invItemCount(p,item)) {<br>
if (itemStacks(item)) {<br>
items[slot] = item;<br>
itemsN[slot] += amnt;</p>
<pre><code>            pi.deleteItem(p, item, pi.getItemSlot(p, item), amnt);
                pi.addItem(p, 995, amnt*(int)(itemValue(item, p)*.75));
        } else {
            items[slot] = item;
            for (int notused = amnt; notused &gt; 0; notused--) {
                pi.deleteItem(p, item, pi.getItemSlot(p, item), 1);
                pi.addItem(p, 995, (int)(itemValue(item, p)*.75));
                itemsN[slot]++;

            }
        }
    } else {
        amnt = pi.invItemCount(p,item);
        if (itemStacks(item)) {
            items[slot] = item;
            itemsN[slot] += amnt;
            pi.deleteItem(p, item, pi.getItemSlot(p, item), amnt);
                pi.addItem(p, 995, amnt*(int)(itemValue(item, p)*.75));
        } else {
            items[slot] = item;
            for (int notused = amnt; notused &gt; 0; notused--) {
                pi.deleteItem(p, item, pi.getItemSlot(p, item), 1);
                pi.addItem(p, 995, (int)(itemValue(item, p)*.75));
                itemsN[slot]++;
         
            }
        }
    }

        sendShopItems(p);
        sendPlayerInventory(p);
    }
public void buy(Player p, int item, int amnt) {
    clearSlots(p);
    int slot = findItemSlot(item);
    if (slot == -1) {
        return;
    }
    if (itemsN[slot] &lt; amnt) amnt = itemsN[slot];
    if (amnt == 0) {
        itemsN[slot] = 0;
 
        p.frames.sendMessage(p, "That item's stock has run out.");
        return;
    }
    if (itemStacks(item)) {       
        if (pi.freeSlotCount(p) &lt; 1) {
            p.frames.sendMessage(p, "Not enough space on inventory");
            return;
        }
        if (pi.invItemCount(p, 995) &lt; (amnt * itemValue(item, p))) {
            p.frames.sendMessage(p, "Not enough coins to buy that many.");
            return;
        }
        pi.deleteItem(p, 995, pi.getItemSlot(p, 995), amnt * itemValue(item, p));
        pi.addItem(p, item, amnt);
        itemsN[slot] -= amnt;
 
    } else {   
        for (int i = amnt; i &gt; 0; i--) {
            int price = itemValue(item, p);
            clearSlots(p);
            if (pi.invItemCount(p, 995) &lt; price) {
                p.frames.sendMessage(p, "Not enough coins to buy that many.");
                break;
            }
            if (pi.findInvSlot(p) == -1) {
                p.frames.sendMessage(p, "Not enough space on inventory");
                break;
            }
            if (itemsN[slot] &lt; 1) {
                clearSlots(p);
                p.frames.sendMessage(p, "The shop has run out of stock from this item!");
                break;
            }
            if (itemsN[slot] == 1) {
                pi.deleteItem(p, 995, pi.getItemSlot(p, 995), price);
                pi.addItem(p, item, 1);
                itemsN[slot] = 0;
  
                break;
            }
            itemsN[slot]--;

            pi.deleteItem(p, 995, pi.getItemSlot(p, 995), price);
            pi.addItem(p, item, 1);
            clearSlots(p);
        }

    }
    sendShopItems(p);
    sendPlayerInventory(p);
    clearSlots(p);
}

public int findItemSlot(int item) {
    for (int i = 0; i &lt; items.length; i++)
        if (item == items[i]) return i;
    return -1;
}
public int findFreeSlot() {
    for (int i = 0; i &lt; items.length; i++)
        if (items[i] == -1) return i;
    return -1;
}
public void clearSlots(Player p) {
    for (int i = 0; i &lt; items.length; i++)
        if (items[i] &lt; 1) {
            itemsN[i] = 0;
        } else {
        }
}
</code></pre>
<p>public int getShopValue(int itemId, Player p) {<br>
if (itemId &lt; 0) {<br>
return 0;<br>
}<br>
switch (p.shopid) {<br>
case 2:<br>
for (int i = 0; i &lt; shop2.length; i++) {<br>
if (shop2[i] != -1 &amp;&amp; shop2[i] == itemId) {<br>
return (shop2p[i]);<br>
}<br>
}<br>
break;<br>
case 3:<br>
for (int i = 0; i &lt; shop3.length; i++) {<br>
if (shop3[i] != -1 &amp;&amp; shop3[i] == itemId) {<br>
return (shop3p[i]);<br>
}<br>
}<br>
break;<br>
case 4:<br>
for (int i = 0; i &lt; shop4.length; i++) {<br>
if (shop4[i] != -1 &amp;&amp; shop4[i] == itemId) {<br>
return (shop4p[i]);<br>
}<br>
}<br>
break;<br>
case 5:<br>
for (int i = 0; i &lt; shop5.length; i++) {<br>
if (shop5[i] != -1 &amp;&amp; shop5[i] == itemId) {<br>
return (shop5p[i]);<br>
}<br>
}<br>
break;<br>
case 6:<br>
for (int i = 0; i &lt; shop6.length; i++) {<br>
if (shop6[i] != -1 &amp;&amp; shop6[i] == itemId) {<br>
return (shop6p[i]);<br>
}<br>
}<br>
break;<br>
case 7:<br>
for (int i = 0; i &lt; shop7.length; i++) {<br>
if (shop7[i] != -1 &amp;&amp; shop7[i] == itemId) {<br>
return (shop7p[i]);<br>
}<br>
}<br>
break;<br>
case 8:<br>
for (int i = 0; i &lt; shop8.length; i++) {<br>
if (shop8[i] != -1 &amp;&amp; shop8[i] == itemId) {<br>
return (shop8p[i]);<br>
}<br>
}<br>
break;<br>
case 9:<br>
for (int i = 0; i &lt; shop9.length; i++) {<br>
if (shop9[i] != -1 &amp;&amp; shop9[i] == itemId) {<br>
return (shop9p[i]);<br>
}<br>
}<br>
break;<br>
case 10:<br>
for (int i = 0; i &lt; shop10.length; i++) {<br>
if (shop10[i] != -1 &amp;&amp; shop10[i] == itemId) {<br>
return (shop10p[i]);<br>
}<br>
}<br>
break;<br>
case 11:<br>
for (int i = 0; i &lt; shop11.length; i++) {<br>
if (shop11[i] != -1 &amp;&amp; shop11[i] == itemId) {<br>
return (shop11p[i]);<br>
}<br>
}<br>
break;<br>
case 12:<br>
for (int i = 0; i &lt; shop12.length; i++) {<br>
if (shop12[i] != -1 &amp;&amp; shop12[i] == itemId) {<br>
return (shop12p[i]);<br>
}<br>
}<br>
break;<br>
case 13:<br>
for (int i = 0; i &lt; shop13.length; i++) {<br>
if (shop13[i] != -1 &amp;&amp; shop13[i] == itemId) {<br>
return (shop13p[i]);<br>
}<br>
}<br>
break;<br>
case 14:<br>
for (int i = 0; i &lt; shop14.length; i++) {<br>
if (shop14[i] != -1 &amp;&amp; shop14[i] == itemId) {<br>
return (shop14p[i]);<br>
}<br>
}<br>
break;<br>
case 16:<br>
for (int i = 0; i &lt; shop16.length; i++) {<br>
if (shop16[i] != -1 &amp;&amp; shop16[i] == itemId) {<br>
return (shop16p[i]);<br>
}<br>
}<br>
}<br>
return 2;<br>
}</p>
<pre><code>public void sendShopItems(Player p) {
</code></pre>
<p>for (Player p2 : Engine.players) {<br>
if (p2 != null &amp;&amp; p2.interfaceId == p.interfaceId)<br>
p2.frames.setItems(p, -1, 64271, 31, items, itemsN);<br>
}<br>
}<br>
public boolean isItemOnShop(int item) {<br>
return findItemSlot(item) != -1;<br>
}<br>
public void sendPlayerInventory(Player p) {<br>
p.frames.setItems(p, -1, 64209, 93, p.items, p.itemsN);<br>
}<br>
public int itemValue(int item, Player p) {<br>
return getShopValue(item, p);<br>
}<br>
public boolean itemStacks(int item) {<br>
return Engine.items.itemLists[item].itemStackable;<br>
}<br>
public void handleoption(Player p, int interfaceId, int buttonId, int buttonId2, int packetId) {<br>
switch (interfaceId) {<br>
case 620:<br>
if (buttonId == 26) {<br>
p.frames.setInterfaceConfig(p, 620, 23, true);<br>
p.frames.setInterfaceConfig(p, 620, 24, false);<br>
p.frames.setInterfaceConfig(p, 620, 29, true);<br>
p.frames.setInterfaceConfig(p, 620, 25, false);<br>
p.frames.setInterfaceConfig(p, 620, 27, false);<br>
p.frames.setInterfaceConfig(p, 620, 26, true);<br>
p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);<br>
}<br>
if (buttonId == 24) {<br>
int itemid = items[buttonId2];<br>
switch (packetId) {<br>
case 233:<br>
/* Value. <em>/<br>
p.frames.sendMessage(p, “This item costs " + getShopValue(itemid, p) + " coins.”);<br>
break;<br>
case 21:<br>
/</em> Buy 1. <em>/<br>
buy(p, itemid, 1);<br>
break;<br>
case 169:<br>
/</em> Buy 5. <em>/<br>
buy(p, itemid, 5);<br>
break;<br>
case 214:<br>
/</em> Buy 10. */<br>
buy(p, itemid, 10);<br>
break;<br>
case 90:<br>
/*Examine. */<br>
p.frames.sendMessage(p, Engine.items.getItemDescription(itemid));<br>
break;<br>
}</p>
<pre><code>            }
            break;
        case 621:
            if (buttonId == 0) {
                int itemid = p.items[buttonId2];
                switch (packetId) {
                    case 233:
</code></pre>
<p>if (p.party) {<br>
p.partyAdd(itemid);<br>
return;<br>
}<br>
/<em>Value.</em>/<br>
p.frames.sendMessage(p, “This item is worth " + (int)(itemValue(itemid, p)<em>.75) + " coins.");<br>
break;<br>
case 21:<br>
/</em><br>
* Sell 1.<br>
<em>/<br>
sell(p, itemid, 1);<br>
break;<br>
case 169:<br>
/</em><br>
* Sell 5.<br>
<em>/<br>
sell(p, itemid, 5);<br>
break;<br>
case 214:<br>
/</em><br>
* Sell 10.<br>
<em>/<br>
sell(p, itemid, 10);<br>
break;<br>
case 90:<br>
/</em><br>
* Examine.<br>
*/<br>
p.frames.sendMessage(p, Engine.items.getItemDescription(itemid));<br>
break;<br>
}<br>
}<br>
break;<br>
}<br>
}<br>
public void shopopen(Player p, int shopId) {<br>
p.frames.removeShownInterface§;<br>
p.frames.showInterface(p, 620); //Shop<br>
p.frames.setInventory(p, 621);<br>
p.frames.setString(p, “Main Stock”, 620, 31); //31 is right hand side<br>
p.frames.setString(p, “Closed”, 620, 32); //32 is left<br>
p.frames.setString(p, “AngelZ 508”, 620, 28);<br>
p.frames.setString(p, “General Store”, 620, 22);<br>
p.frames.setInterfaceConfig(p, 620, 23, true);<br>
p.frames.setInterfaceConfig(p, 620, 24, false);<br>
p.frames.setInterfaceConfig(p, 620, 29, true);<br>
p.frames.setInterfaceConfig(p, 620, 25, false);<br>
p.frames.setInterfaceConfig(p, 620, 27, false);<br>
p.frames.setInterfaceConfig(p, 620, 26, true);<br>
p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);<br>
shopid = shopId;<br>
Object[] setshopparams = new Object[]{shopId, 93};<br>
int shi = 621 &lt;&lt; 16;<br>
int ship = (620 &lt;&lt; 16) + 24;<br>
Object[] invparams = new Object[]{”", “”, “”, “”, “Sell X”, “Sell 10”, “Sell 5”, “Sell 1”, “Value”, -1, 0, 7, 4, 93, shi};<br>
Object[] shopparams = new Object[]{"", “”, “”, “”, “Buy X”, “Buy 10”, “Buy 5”, “Buy 1”, “Value”, -1, 0, 4, 10, 31, ship};<br>
p.frames.runScript(p, 25, setshopparams, “vg”);//Loads main stock items<br>
p.frames.runScript(p, 150, invparams, “IviiiIsssssssss”);<br>
p.frames.runScript(p, 150, shopparams, “IviiiIsssssssss”);<br>
p.frames.setAccessMask(p, 1278, 0, 621, 0, 28);<br>
p.frames.setInterfaceConfig(p, 620, 23, true);<br>
p.frames.setInterfaceConfig(p, 620, 24, false);<br>
p.frames.setInterfaceConfig(p, 620, 29, true);<br>
p.frames.setInterfaceConfig(p, 620, 25, false);<br>
p.frames.setInterfaceConfig(p, 620, 27, false);<br>
p.frames.setInterfaceConfig(p, 620, 26, true);<br>
p.frames.setAccessMask(p, 1278, 24, 620, 0, 40);<br>
}<br>
public void openshop(Player p, int shopid) {<br>
p.party = false;<br>
switch (shopid) {<br>
case 2:<br>
shopopen(p, 868);<br>
items  = shop2;<br>
itemsN = shop2n;<br>
break;<br>
case 3:<br>
shopopen(p, 868);<br>
items  = shop3;<br>
itemsN = shop3n;<br>
break;<br>
case 4:<br>
shopopen(p, 868);<br>
items  = shop4;<br>
itemsN = shop4n;<br>
break;<br>
case 5:<br>
shopopen(p, 868);<br>
items  = shop5;<br>
itemsN = shop5n;<br>
break;<br>
case 6:<br>
shopopen(p, 868);<br>
items  = shop6;<br>
itemsN = shop6n;<br>
break;<br>
case 7:<br>
shopopen(p, 868);<br>
items  = shop7;<br>
itemsN = shop7n;<br>
break;<br>
case 8:<br>
shopopen(p, 868);<br>
items  = shop8;<br>
itemsN = shop8n;<br>
break;<br>
case 9:<br>
shopopen(p, 868);<br>
items  = shop9;<br>
itemsN = shop9n;<br>
break;<br>
case 10:<br>
shopopen(p, 868);<br>
items  = shop10;<br>
itemsN = shop10n;<br>
break;<br>
case 11:<br>
shopopen(p, 868);<br>
items  = shop11;<br>
itemsN = shop11n;<br>
break;<br>
case 12:<br>
shopopen(p, 868);<br>
items  = shop12;<br>
itemsN = shop12n;<br>
break;<br>
case 13:<br>
shopopen(p, 868);<br>
items  = shop13;<br>
itemsN = shop13n;<br>
break;<br>
case 14:<br>
shopopen(p, 868);<br>
items  = shop14;<br>
itemsN = shop14n;<br>
break;<br>
case 16:<br>
shopopen(p, 868);<br>
items  = shop16;<br>
itemsN = shop16n;<br>
break;</p>
<pre><code>    }
</code></pre>
<p>p.frames.setItems(p, -1, 64209, 93, p.items, p.itemsN);<br>
p.frames.setItems(p, -1, 64271, 31, items, itemsN);<br>
}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777/1</link>
        <pubDate>Mon, 22 Mar 2010 17:29:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-333777-1</guid>
        <source url="https://forum.moparisthebest.com/t/508-bug-in-shophandler-java/333777.rss">[508] Bug In Shophandler.java</source>
      </item>
  </channel>
</rss>
