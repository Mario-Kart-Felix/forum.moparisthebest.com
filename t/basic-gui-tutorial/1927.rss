<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Basic GUI tutorial</title>
    <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927</link>
    <description>   This tutorial was written by me, diddlewotsit (or imafatmess, depending on the forum). It is quite long and took me ages to write but oh well. Here it is:

	Ok, this tutorial is designed to make you good at writing basic GUIâ€™s, even if the example is something extremely stupid =)

	I will take it that you knows stuffs about classes and variables (if you donâ€™t and you do do java, shame on you!). Also Iâ€™ll take it you know stuff about methods and constructors. If you donâ€™t know about these then you probably be needing to go off and learn about them before trying thisâ€¦

	Before doing any coding, we need a clear idea of what the outcome will be. Before you start scripting, you must have a clear idea of what the finished application will end up looking like. I have had lots of trouble in the past because I just went straight into scripting and I put no thought into it. In one case, I even had to redesign and script the whole thing again. Please do plan your application thoroughly.  A good way to do this is to plan out all the methods you will put in your class then Javadoc it all. If you donâ€™t know what Javadoc is, I will probably explain later.

	My application will just be a basic GUI. When the user clicks a button, a label will change itâ€™s text from â€œPress the buttonâ€ to â€œMOO!â€. Here is an example of the methods being used for it:
 
[code]
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI(){}

	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[]){}

	/**
	 * Listens to see if there has been any ActionEvent 
	 * change. This will check to see if the button has 
	 * been pressed.
	 * @param ActionEvent evt
	 */
	public void actionPerformed(ActionEvent evt) {}
}
[/code]

	The class needs to implement ActionListener as whenever a button is pressed, it needs to recognise that something has happened. When you implement interfaces you must always include the methods in your java code which are needed to be implemented (in this case, it is actionPerformed(ActionEvent evt)). So far the only classes needed to be imported are the ActionEvent and ActionListener classes. Please follow the information about each class to find out what it does. Now we have the layout of the class, lets get down to actually programming it!

	We will be needing to make a JFrame first as this is where the content of out GUI will appear. In the Java API it says that you can construct a JFrame object in four different ways (multiple constructors for one class is called overloading). Here is what it says in the Java API:

&lt;blockquote&gt;JFrame() 
          Constructs a new frame that is initially invisible. 
JFrame(GraphicsConfiguration gc) 
          Creates a Frame in the specified GraphicsConfiguration of a screen device and a blank title. 
JFrame(String title) 
          Creates a new, initially invisible Frame with the specified title. 
JFrame(String title, GraphicsConfiguration gc) 
          Creates a JFrame with the specified title and the specified GraphicsConfiguration of a screen device.&lt;/blockquote&gt;

	Today, we will be using the third option. JFrame(String title). Title actually stands for the title of the JFrame (as a JFrame is just a window basically). To put one of these into our GUI, we must import java.swing.JFrame. We will be needing the stop running whenever the cross is clicked in the corner. To do this we will be needing to call a method called â€œsetDefaultCloseOperation(int operation)â€. Yes, a very original name but what do you expectâ€¦ Anyways, we will need to add this to the code but instead of  the int operation being there, we must put JFrame.EXIT_ON_CLOSE. Also for the JFrame to be visible, you need to tell the compiler that it will be visible. This can be done like this:

[code]
guiFrame.setVisible(true);
[/code]

	You may notice that the guiFrame is, at the moment, undefined as a JFrame and needs to be declared. You should know how to do this, but if not, follow on a bit moreâ€¦

	All these methods will need to be put together into the one constructor. If done correctly, it should now look somewhere along the lines of this:

[code]
JFrame guiFrame;
private void TutorialGUI()
{
	guiFrame = new JFrame(&quot;GUI Tutorial 1&quot;);

              guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              guiFrame.setVisible(true);
}
[/code]

	Now in the main method you must make a new object. As the main method is static, you must make a static declaration of the TutorialGUI object. This is done by adding: new TutorialGUI(); to it. The whole class should now compile and also it should look like this:

[code]
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	JFrame guiFrame;
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private void TutorialGUI()
	{
		guiFrame = new JFrame(&quot;GUI Tutorial 1&quot;);
		
              	guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              	guiFrame.setVisible(true);
	}

	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[])
	{
		new TutorialGUI();
	}

	/**
	 * Listens to see if there has been any ActionEvent 
	 * change. This will check to see if the button has 
	 * been pressed.
	 * @param ActionEvent evt
	 */
	public void actionPerformed(ActionEvent evt) {}
}

[/code]

	That should now compile and show up this when run (if yours didnâ€™t work, it is probably something to do with my code when typing up this tutorial):

[img]http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI1.PNG[/img]

	Now we will be needing there to be some decent content in the JFrame. To put content in, you must put a JPanel in. A JPanel basically is a container to put all the components into the frame. When using one of these, you must import java.swing.JPanel. There are four different constructors for a Jframe and the one we will be using has just one parameter: LayoutManager. The LayoutManager object would have to be a class implementing it. This has many different options to chose from (from FlowLayout to GridLayout) but today I will be using BorderLayout due to itâ€™s ease of use. A border layout basically tells the components where to be placed in the GUI by compass directions. So if you wanted to put a button at the top of a GUI, it would be north. I will explain in more detail when they are actually used.

	This is a picture of where all the things actually mean (nicely drawn in paint):

[img]http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI2.PNG[/img]

	The constructor will have to make a new BorderLayout in its parenthesis like this:

[code]
JPanel guiPanel = new JPanel(new BorderLayout);
[/code]

	Now, we will be needing to be adding this to the JFrame and this can be done extremely easily! This can be done by just calling the add(Component) method. 

	Once that is done, we will need to add the button to the JPanel. The button we will be using is called JButton. To use one of these you must import java.swing.JButton. We now need to create a new Jbutton object. This will have a String as a parameter. This String is what word/phrase will be shown on the button. Now we need to add the JButton to the JPanel. To do this you would use the add method, like before but there is an extra parameter. This extra parameter is basically where it will be in the Jpanel. We used the layout BorderLayout and as you should remember, to say where to put the component in the panel you use compass points. So this is what the add method should look like:

[code]
guiFrame.add(tutButton, BorderLayout.NORTH);
[/code]

	Also we now need to create a new JLabel object then add that to the JPanel. To do this you need to import java.swing.JLabel. The only parameter needed for a JLabel is the String to be shown. We also need to add this to the JPanel in the same way as before, just this time we will put the label to the south as we donâ€™t want it being on top of the Jbutton.

	Now we are just about ready to run our application again. There is only one thing needed left. And that is to pack the JFrame. I was never really sure what pack actually did before I wrote this tutorial but I just searched and this is what the Java API says about the pack() methods:

&lt;blockquote&gt;Causes this Window to be sized to fit the preferred size and layouts of its subcomponents. If the window and/or its owner are not yet displayable, both are made displayable before calculating the preferred size. The Window will be validated after the preferredSize is calculated.&lt;/blockquote&gt;

	After adding a guiFrame.pack() method, our application is ready to run and if you havenâ€™t already got the code, here it is:

[code]
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	private JFrame guiFrame;
	private JButton tutButton;
	private JLabel tutLabel = new JLabel(&quot;Press the button&quot;);
	private JPanel guiPanel;
	
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI()
	{
		guiFrame = new JFrame(&quot;GUI Tutorial 1&quot;);
		guiPanel = new JPanel(new BorderLayout());
		
		tutButton =  new JButton(&quot;Button&quot;);
        
        
		guiPanel.add(tutButton, BorderLayout.NORTH);
        
        
        		guiPanel.add(tutLabel, BorderLayout.SOUTH);
        
       		guiFrame.add(guiPanel);
       		guiFrame.pack();
      		guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       		guiFrame.setVisible(true);
	}
	
	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[])
	{
		new TutorialGUI();
	}

	/**
	 * Listens to see if there has been any ActionEvent 
	 * change. This will check to see if the button has 
	 * been pressed.
	 * @param ActionEvent evt
	 */
	public void actionPerformed(ActionEvent evt) {}
}
[/code]

	If this is run, it [b]should[/b] end up looking something along the lines of this:

[img]http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI3.PNG[/img]

	As you can see, the button does nothing to the text, like it is meant to. Our actionPerformed method, which was implemented from the ActionListener class, can do this for us. To allow our actionPerformed method to work, we need to use these statements in the classâ€™ constructor:

[code]
tutButton.setActionCommand(&quot;Pressed&quot;);
tutButton.addActionListener(this);
[/code]

	The setActionCommand basically is a way to be able to tell the difference between many other events. You will probably understand later. After setting the action command, you need to add the listener to the button. If the button is pressed, now the actionPerformed method will be called and itâ€™s parameter will be something along the lines of â€œPressedâ€. Now all we need to do is tell the compiler what to do when it is called. 

	Lets now look at this as an example of how to create the action listener:

[code]
public void actionPerformed(ActionEvent evt) 
{
	String c = evt.getActionCommand();
	if(c.equals(&quot;Pressed&quot;))
	{
		tutLabel.setText(&quot;MOO!&quot;);
	}
}
[/code]
	Lets now look at the first line in this method, â€œString c = evt.getActionCommand();â€. You know we set the action command a while ago, â€œtutButton.setActionCommand(&quot;Pressed&quot;);â€, this basically sets the string to â€œPressedâ€ if the button is pressed (Please try and refrain from asking questions about this because I honestly donâ€™t know much when it comes to action events ). The if statement basically says, â€œif the button is pressed, do this methodâ€. The one after this, â€œtutLabel.setText(&quot;MOO!&quot;);â€, just sets the JLabel in our GUI so the text is MOO! 

	We should be able to run our code again. Here is the code after this part:

[code]
import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;

/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	private JFrame guiFrame;
	private JButton tutButton;
	private JLabel tutLabel = new JLabel(&quot;Press the button&quot;);
	private JPanel guiPanel;
	
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI()
	{
		guiFrame = new JFrame(&quot;GUI Tutorial 1&quot;);
		guiPanel = new JPanel(new BorderLayout());
		
		tutButton =  new JButton(&quot;Button&quot;);
        
        
		tutButton.setActionCommand(&quot;Pressed&quot;);
		tutButton.addActionListener(this);
		guiPanel.add(tutButton, BorderLayout.NORTH);
        
        
        		guiPanel.add(tutLabel, BorderLayout.SOUTH);
        
       		guiFrame.add(guiPanel);
       		guiFrame.pack();
      		guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       		guiFrame.setVisible(true);
	}
	
	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[])
	{
		new TutorialGUI();
	}

	/**
	 * Listens to see if there has been any ActionEvent 
	 * change. This will check to see if the button has 
	 * been pressed.
	 * @param ActionEvent evt
	 */
	public void actionPerformed(ActionEvent evt) 
	{
		String c = evt.getActionCommand();
		if(c.equals(&quot;Pressed&quot;))
		{
			tutLabel.setText(&quot;MOO!&quot;);
		}
	}
}
[/code]

	This is what the GUI will look like to begin with:

[img]http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI3.PNG[/img]

	Then itâ€™ll look like this once the button is pressed:

[img]http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI4.PNG[/img]

	Now all that is needed is to do some finishing touches to make it look and feel better. We could make the window non-resizable with this method: â€œguiFrame.setResizable(false);â€, we could change the cursor to a hand whenever the mouse is over the button with this: â€œtutButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));â€ (note: need to import java.awt.Cursor.), we could even set the icon in the corner on the window to something with this:

[code]
try 
{
	Image image = Toolkit.getDefaultToolkit().getImage(new 				URL(&quot;http://www.fatfish.aurohost.com/&quot; +
		&quot;uploaded_files/mp3files/OpenedHelpFile.GIF&quot;));
	guiFrame.setIconImage(image);
}
catch (MalformedURLException e) 
{
	e.printStackTrace();
}
[/code]

	This is quite hard to explain how it works but just take it, it works and to change the file name for the icon, you just change the URL in it.

	This now concludes my tutorial on creating a basic GUI. I hope you have at least learnt something new from it =)</description>
    
    <lastBuildDate>Sun, 22 Jul 2007 04:59:57 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Yz85Racer Yz85Racer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yz85racer">@Yz85Racer</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="15" data-topic="1927">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/moparsc4p3/40/5_6259e4fa9dfe0dec282fb0955bb1974c.png" class="avatar"> moparsc4p3:</div>
<blockquote>
<p>This is from april lol who bumped it o.0</p>
</blockquote>
</aside>
<p>V</p>
<aside class="quote no-group" data-post="9" data-topic="1927">
<div class="title">
<div class="quote-controls"></div>
 blah bah7:</div>
<blockquote>
<p>DO_NOTHING_ON_CLOSE</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/16</link>
        <pubDate>Sun, 22 Jul 2007 04:59:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-16</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@moparsc4p3 moparsc4p3]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparsc4p3">@moparsc4p3</a> wrote:</p>
          <blockquote>
              <p>This is from april lol who bumped it o.0</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/15</link>
        <pubDate>Sun, 22 Jul 2007 01:55:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-15</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Frell Frell]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frell">@Frell</a> wrote:</p>
          <blockquote>
              <p>rofl. Remove it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/14</link>
        <pubDate>Thu, 19 Jul 2007 14:40:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-14</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@javaNoob javaNoob()]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/javanoob">@javaNoob</a> wrote:</p>
          <blockquote>
              <p>Gui.java:1: illegal character: \187<br>
∩╗┐import java.awt.BorderLayout;<br>
^<br>
Gui.java:1: illegal character: \191<br>
∩╗┐import java.awt.BorderLayout;<br>
^<br>
Gui.java:20: invalid method declaration; return type required<br>
private TutorialGUI()<br>
^<br>
3 errors<br>
Press any key to continue . . .</p>
<p>lol ∩╗┐ what teh fux?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/13</link>
        <pubDate>Thu, 19 Jul 2007 11:46:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-13</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Frell Frell]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frell">@Frell</a> wrote:</p>
          <blockquote>
              <aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://forum.moparisthebest.com/uploads/default/original/2X/1/1f0dc167bcf798bdbd70b03bf0fd1bc836e54e1a.png" class="site-icon" width="32" height="32">
      <a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://forum.moparisthebest.com/images/default-apple-touch-icon.png" class="thumbnail onebox-avatar" width="144" height="144">

<h3><a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a></h3>

<p>programming, irc, cars</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>might be the same not sure, no time to read.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/12</link>
        <pubDate>Wed, 18 Jul 2007 01:29:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-12</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Yz85Racer Yz85Racer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yz85racer">@Yz85Racer</a> wrote:</p>
          <blockquote>
              <p>This is an excellent tutorial. Well done. I’d love to see your advanced one haha.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/11</link>
        <pubDate>Tue, 17 Jul 2007 13:56:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-11</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@xxlegitxx xxlegitxx]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xxlegitxx">@xxlegitxx</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="9" data-topic="1927">
<div class="title">
<div class="quote-controls"></div>
 blah bah7:</div>
<blockquote>
<p>DO_NOTHING_ON_CLOSE</p>
</blockquote>
</aside>
<p>Umm… Irrelevant bump?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/10</link>
        <pubDate>Tue, 17 Jul 2007 07:09:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-10</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@blah_bah7 blah bah7]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/blah_bah7">@blah_bah7</a> wrote:</p>
          <blockquote>
              <p>DO_NOTHING_ON_CLOSE</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/9</link>
        <pubDate>Tue, 17 Jul 2007 07:02:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-9</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@iwasinmoparseas101cl iwasinmoparseas101class]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iwasinmoparseas101cl">@iwasinmoparseas101cl</a> wrote:</p>
          <blockquote>
              <p>pssh…mine was written in a text file <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  so my pictures and code weren’t as flashy <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:">  Nice job though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/8</link>
        <pubDate>Fri, 01 Sep 2006 07:50:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-8</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>…</p>
<p>GOOGLE JAVA, FUCK</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/7</link>
        <pubDate>Fri, 01 Sep 2006 04:03:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-7</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Java Java]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/java">@Java</a> wrote:</p>
          <blockquote>
              <p>Sorry to ask this ‘noob’ question but can you please post a link where i could download the java program where I can start scripting?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/6</link>
        <pubDate>Fri, 01 Sep 2006 03:32:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-6</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@imafatmess imafatmess]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imafatmess">@imafatmess</a> wrote:</p>
          <blockquote>
              <p>I'm not too good at GUI's but I will try. I am going to write one about javadoc first though</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/5</link>
        <pubDate>Wed, 26 Apr 2006 15:51:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-5</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@pplsuqbawlz pplsuqbawlz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pplsuqbawlz">@pplsuqbawlz</a> wrote:</p>
          <blockquote>
              <p>Wonderful beginner GUI tutorial, props!</p>

<p>And hey, may I ask you to write an interediate, an advanced, a skilled, and an expert GUI tut.</p>

<p>A complete set of Tutorials would really help this forum out... maybe we wont see such sloppy designed, and sloppy coded clients/bots/etc and so on.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/4</link>
        <pubDate>Wed, 26 Apr 2006 15:28:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-4</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@imafatmess imafatmess]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imafatmess">@imafatmess</a> wrote:</p>
          <blockquote>
              <p>=)<br>I'm gonna hopefully be writing a tutorial about javadocing your work later.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/3</link>
        <pubDate>Wed, 26 Apr 2006 06:16:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-3</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@Dr_Blunt_420 Dr_Blunt_420]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dr_blunt_420">@Dr_Blunt_420</a> wrote:</p>
          <blockquote>
              <p>Wow... Very nice <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"> I think you've just inspired me to start learning more on GUI's <img src="//forum.moparisthebest.mopar/images/emoji/emoji_one/slight_smile.png?v=3" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/2</link>
        <pubDate>Tue, 25 Apr 2006 22:16:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-2</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
      <item>
        <title>Basic GUI tutorial</title>
        <dc:creator><![CDATA[@imafatmess imafatmess]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imafatmess">@imafatmess</a> wrote:</p>
          <blockquote>
              <p>   This tutorial was written by me, diddlewotsit (or imafatmess, depending on the forum). It is quite long and took me ages to write but oh well. Here it is:</p>

<pre><code>Ok, this tutorial is designed to make you good at writing basic GUIâ€™s, even if the example is something extremely stupid =)

I will take it that you knows stuffs about classes and variables (if you donâ€™t and you do do java, shame on you!). Also Iâ€™ll take it you know stuff about methods and constructors. If you donâ€™t know about these then you probably be needing to go off and learn about them before trying thisâ€¦

Before doing any coding, we need a clear idea of what the outcome will be. Before you start scripting, you must have a clear idea of what the finished application will end up looking like. I have had lots of trouble in the past because I just went straight into scripting and I put no thought into it. In one case, I even had to redesign and script the whole thing again. Please do plan your application thoroughly.  A good way to do this is to plan out all the methods you will put in your class then Javadoc it all. If you donâ€™t know what Javadoc is, I will probably explain later.

My application will just be a basic GUI. When the user clicks a button, a label will change itâ€™s text from â€œPress the buttonâ€ to â€œMOO!â€. Here is an example of the methods being used for it:</code></pre>

<p></p><pre><code class="lang-auto">import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI(){}
    /**
 * This is the main method and is called first. It is 
 * a static class meaning you can only make static 
 * references to objects (as far as I knowâ€¦)
 * @param String[] args
 */
public static void main(String args[]){}

/**
 * Listens to see if there has been any ActionEvent 
 * change. This will check to see if the button has 
 * been pressed.
 * @param ActionEvent evt
 */
public void actionPerformed(ActionEvent evt) {}
}</code></pre>

<pre><code>The class needs to implement ActionListener as whenever a button is pressed, it needs to recognise that something has happened. When you implement interfaces you must always include the methods in your java code which are needed to be implemented (in this case, it is actionPerformed(ActionEvent evt)). So far the only classes needed to be imported are the ActionEvent and ActionListener classes. Please follow the information about each class to find out what it does. Now we have the layout of the class, lets get down to actually programming it!

We will be needing to make a JFrame first as this is where the content of out GUI will appear. In the Java API it says that you can construct a JFrame object in four different ways (multiple constructors for one class is called overloading). Here is what it says in the Java API:</code></pre>

<blockquote>JFrame() 

<br>

          Constructs a new frame that is initially invisible. 

<br>

JFrame(GraphicsConfiguration gc) 

<br>

          Creates a Frame in the specified GraphicsConfiguration of a screen device and a blank title. 

<br>

JFrame(String title) 

<br>

          Creates a new, initially invisible Frame with the specified title. 

<br>

JFrame(String title, GraphicsConfiguration gc) 

<br>

          Creates a JFrame with the specified title and the specified GraphicsConfiguration of a screen device.</blockquote>

<pre><code>Today, we will be using the third option. JFrame(String title). Title actually stands for the title of the JFrame (as a JFrame is just a window basically). To put one of these into our GUI, we must import java.swing.JFrame. We will be needing the stop running whenever the cross is clicked in the corner. To do this we will be needing to call a method called â€œsetDefaultCloseOperation(int operation)â€. Yes, a very original name but what do you expectâ€¦ Anyways, we will need to add this to the code but instead of  the int operation being there, we must put JFrame.EXIT_ON_CLOSE. Also for the JFrame to be visible, you need to tell the compiler that it will be visible. This can be done like this:</code></pre>

<p></p><pre><code class="lang-auto">guiFrame.setVisible(true);</code></pre>

<pre><code>You may notice that the guiFrame is, at the moment, undefined as a JFrame and needs to be declared. You should know how to do this, but if not, follow on a bit moreâ€¦

All these methods will need to be put together into the one constructor. If done correctly, it should now look somewhere along the lines of this:</code></pre>

<p></p><pre><code class="lang-auto">JFrame guiFrame;
private void TutorialGUI()
{
	guiFrame = new JFrame("GUI Tutorial 1");
              guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
          guiFrame.setVisible(true);
}</code></pre>

<pre><code>Now in the main method you must make a new object. As the main method is static, you must make a static declaration of the TutorialGUI object. This is done by adding: new TutorialGUI(); to it. The whole class should now compile and also it should look like this:</code></pre>

<p></p><pre><code class="lang-auto">import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JFrame;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	JFrame guiFrame;
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private void TutorialGUI()
	{
		guiFrame = new JFrame("GUI Tutorial 1");
              	guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
              	guiFrame.setVisible(true);
	}
    /**
 * This is the main method and is called first. It is 
 * a static class meaning you can only make static 
 * references to objects (as far as I knowâ€¦)
 * @param String[] args
 */
public static void main(String args[])
{
	new TutorialGUI();
}

/**
 * Listens to see if there has been any ActionEvent 
 * change. This will check to see if the button has 
 * been pressed.
 * @param ActionEvent evt
 */
public void actionPerformed(ActionEvent evt) {}
}</code></pre>

<pre><code>That should now compile and show up this when run (if yours didnâ€™t work, it is probably something to do with my code when typing up this tutorial):</code></pre>

<p><img src="http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI1.PNG" width="" height=""></p>

<pre><code>Now we will be needing there to be some decent content in the JFrame. To put content in, you must put a JPanel in. A JPanel basically is a container to put all the components into the frame. When using one of these, you must import java.swing.JPanel. There are four different constructors for a Jframe and the one we will be using has just one parameter: LayoutManager. The LayoutManager object would have to be a class implementing it. This has many different options to chose from (from FlowLayout to GridLayout) but today I will be using BorderLayout due to itâ€™s ease of use. A border layout basically tells the components where to be placed in the GUI by compass directions. So if you wanted to put a button at the top of a GUI, it would be north. I will explain in more detail when they are actually used.

This is a picture of where all the things actually mean (nicely drawn in paint):</code></pre>

<p><img src="http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI2.PNG" width="" height=""></p>

<pre><code>The constructor will have to make a new BorderLayout in its parenthesis like this:</code></pre>

<p></p><pre><code class="lang-auto">JPanel guiPanel = new JPanel(new BorderLayout);</code></pre>

<pre><code>Now, we will be needing to be adding this to the JFrame and this can be done extremely easily! This can be done by just calling the add(Component) method. 

Once that is done, we will need to add the button to the JPanel. The button we will be using is called JButton. To use one of these you must import java.swing.JButton. We now need to create a new Jbutton object. This will have a String as a parameter. This String is what word/phrase will be shown on the button. Now we need to add the JButton to the JPanel. To do this you would use the add method, like before but there is an extra parameter. This extra parameter is basically where it will be in the Jpanel. We used the layout BorderLayout and as you should remember, to say where to put the component in the panel you use compass points. So this is what the add method should look like:</code></pre>

<p></p><pre><code class="lang-auto">guiFrame.add(tutButton, BorderLayout.NORTH);</code></pre>

<pre><code>Also we now need to create a new JLabel object then add that to the JPanel. To do this you need to import java.swing.JLabel. The only parameter needed for a JLabel is the String to be shown. We also need to add this to the JPanel in the same way as before, just this time we will put the label to the south as we donâ€™t want it being on top of the Jbutton.

Now we are just about ready to run our application again. There is only one thing needed left. And that is to pack the JFrame. I was never really sure what pack actually did before I wrote this tutorial but I just searched and this is what the Java API says about the pack() methods:</code></pre>

<blockquote>Causes this Window to be sized to fit the preferred size and layouts of its subcomponents. If the window and/or its owner are not yet displayable, both are made displayable before calculating the preferred size. The Window will be validated after the preferredSize is calculated.</blockquote>

<pre><code>After adding a guiFrame.pack() method, our application is ready to run and if you havenâ€™t already got the code, here it is:</code></pre>

<p></p><pre><code class="lang-auto">import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	private JFrame guiFrame;
	private JButton tutButton;
	private JLabel tutLabel = new JLabel("Press the button");
	private JPanel guiPanel;
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI()
	{
		guiFrame = new JFrame("GUI Tutorial 1");
		guiPanel = new JPanel(new BorderLayout());
		tutButton =  new JButton("Button");
		guiPanel.add(tutButton, BorderLayout.NORTH);
        		guiPanel.add(tutLabel, BorderLayout.SOUTH);
       		guiFrame.add(guiPanel);
       		guiFrame.pack();
      		guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       		guiFrame.setVisible(true);
	}
	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[])
	{
		new TutorialGUI();
	}
    /**
 * Listens to see if there has been any ActionEvent 
 * change. This will check to see if the button has 
 * been pressed.
 * @param ActionEvent evt
 */
public void actionPerformed(ActionEvent evt) {}
}</code></pre>

<pre><code>If this is run, it [b]should[/b] end up looking something along the lines of this:</code></pre>

<p><img src="http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI3.PNG" width="" height=""></p>

<pre><code>As you can see, the button does nothing to the text, like it is meant to. Our actionPerformed method, which was implemented from the ActionListener class, can do this for us. To allow our actionPerformed method to work, we need to use these statements in the classâ€™ constructor:</code></pre>

<p></p><pre><code class="lang-auto">tutButton.setActionCommand("Pressed");
tutButton.addActionListener(this);</code></pre>

<pre><code>The setActionCommand basically is a way to be able to tell the difference between many other events. You will probably understand later. After setting the action command, you need to add the listener to the button. If the button is pressed, now the actionPerformed method will be called and itâ€™s parameter will be something along the lines of â€œPressedâ€. Now all we need to do is tell the compiler what to do when it is called. 

Lets now look at this as an example of how to create the action listener:</code></pre>

<p></p><pre><code class="lang-auto">public void actionPerformed(ActionEvent evt) 
{
	String c = evt.getActionCommand();
	if(c.equals("Pressed"))
	{
		tutLabel.setText("MOO!");
	}
}</code></pre>

<pre><code>Lets now look at the first line in this method, â€œString c = evt.getActionCommand();â€. You know we set the action command a while ago, â€œtutButton.setActionCommand("Pressed");â€, this basically sets the string to â€œPressedâ€ if the button is pressed (Please try and refrain from asking questions about this because I honestly donâ€™t know much when it comes to action events ). The if statement basically says, â€œif the button is pressed, do this methodâ€. The one after this, â€œtutLabel.setText("MOO!");â€, just sets the JLabel in our GUI so the text is MOO! 

We should be able to run our code again. Here is the code after this part:</code></pre>

<p></p><pre><code class="lang-auto">import java.awt.BorderLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
/**
 * &lt;p&gt;Title: GUI Tutorial&lt;/p&gt;
 *
 * &lt;p&gt;Description: This is a GUI for a tutorial
 * found at http://www.dingo-forums.com&lt;/p&gt;
 *
 * &lt;p&gt;Copyright: Copyright Â© 2006 diddlewotsit&lt;/p&gt;
 * 
 * @author diddlewotsit
 * @version 1.0
 */
public class TutorialGUI implements ActionListener
{
	private JFrame guiFrame;
	private JButton tutButton;
	private JLabel tutLabel = new JLabel("Press the button");
	private JPanel guiPanel;
	/**
	 * Constructs a new TutorialGUI object.
	 */
	private TutorialGUI()
	{
		guiFrame = new JFrame("GUI Tutorial 1");
		guiPanel = new JPanel(new BorderLayout());
		tutButton =  new JButton("Button");
		tutButton.setActionCommand("Pressed");
		tutButton.addActionListener(this);
		guiPanel.add(tutButton, BorderLayout.NORTH);
        		guiPanel.add(tutLabel, BorderLayout.SOUTH);
       		guiFrame.add(guiPanel);
       		guiFrame.pack();
      		guiFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
       		guiFrame.setVisible(true);
	}
	/**
	 * This is the main method and is called first. It is 
	 * a static class meaning you can only make static 
	 * references to objects (as far as I knowâ€¦)
	 * @param String[] args
	 */
	public static void main(String args[])
	{
		new TutorialGUI();
	}
    /**
 * Listens to see if there has been any ActionEvent 
 * change. This will check to see if the button has 
 * been pressed.
 * @param ActionEvent evt
 */
public void actionPerformed(ActionEvent evt) 
{
	String c = evt.getActionCommand();
	if(c.equals("Pressed"))
	{
		tutLabel.setText("MOO!");
	}
}
}</code></pre>

<pre><code>This is what the GUI will look like to begin with:</code></pre>

<p><img src="http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI3.PNG" width="" height=""></p>

<pre><code>Then itâ€™ll look like this once the button is pressed:</code></pre>

<p><img src="http://www.fatfish.aurohost.com/uploaded_images/tutorials/GUI4.PNG" width="" height=""></p>

<pre><code>Now all that is needed is to do some finishing touches to make it look and feel better. We could make the window non-resizable with this method: â€œguiFrame.setResizable(false);â€, we could change the cursor to a hand whenever the mouse is over the button with this: â€œtutButton.setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));â€ (note: need to import java.awt.Cursor.), we could even set the icon in the corner on the window to something with this:</code></pre>

<p></p><pre><code class="lang-auto">try 
{
	Image image = Toolkit.getDefaultToolkit().getImage(new 				URL("http://www.fatfish.aurohost.com/" +
		"uploaded_files/mp3files/OpenedHelpFile.GIF"));
	guiFrame.setIconImage(image);
}
catch (MalformedURLException e) 
{
	e.printStackTrace();
}</code></pre>

<pre><code>This is quite hard to explain how it works but just take it, it works and to change the file name for the icon, you just change the URL in it.

This now concludes my tutorial on creating a basic GUI. I hope you have at least learnt something new from it =)</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/basic-gui-tutorial/1927/1</link>
        <pubDate>Tue, 25 Apr 2006 20:57:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-1927-1</guid>
        <source url="https://forum.moparisthebest.com/t/basic-gui-tutorial/1927.rss">Basic GUI tutorial</source>
      </item>
  </channel>
</rss>
