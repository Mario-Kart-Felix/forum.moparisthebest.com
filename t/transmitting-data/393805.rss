<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Transmitting Data</title>
    <link>https://forum.moparisthebest.com/t/transmitting-data/393805</link>
    <description>I just have a few questions about what&#39;s the _best_ way to transmit data between a client and server.


[ol][li]Should the packet length be put in the &quot;header&quot; of a packet (1-2 bytes before the data), or in a table like the RS clients, or both?[/li]
[li]Should I have each packet it&#39;s own class, or should I just have on &quot;PacketBuilder&quot; class?[/li]
[li]I&#39;m thinking of implementing a packet codec. PacketDecoder, which reads a ByteBuffer object and creates an usable Packet object, along with a PacketEncoder which takes a Packet object and creates a usable ByteBuffer object which is sent to the receiver. Is this the best way to handle the process? If so, how should I handle the &quot;encoding&quot; part? Should I have the Packet interface look something like this?

public interface Packet {
    public ByteBuffer getData();
}

If I were to do this, then wouldn&#39;t that make the PacketDecoder obsolete, since the ByteBuffer used for the packet is already created? If I were to use the PacketDecoder, then it would have to know the structure of each packet, with an enourmouse switch statement (which I&#39;d like to avoid)[/li][/ol]


I&#39;ll add more questions once I can remember them.</description>
    
    <lastBuildDate>Mon, 09 May 2011 19:08:32 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/transmitting-data/393805.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Transmitting Data</title>
        <dc:creator><![CDATA[@_Discardedx2 `Discardedx2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_discardedx2">@_Discardedx2</a> wrote:</p>
          <blockquote>
              <aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://www.oodesign.com/images/favicon.ico" class="site-icon" width="16" height="16">
      <a href="https://www.oodesign.com/" target="_blank" rel="nofollow noopener">Design Patterns | Object Oriented Design</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:379/281;"><img src="https://www.oodesign.com/images/creational/factory-pattern.gif" class="thumbnail"></div>

<h3><a href="https://www.oodesign.com/" target="_blank" rel="nofollow noopener">Design Patterns | Object Oriented Design</a></h3>

<p>By definition, Design Patterns are reusable solutions to commonly occuring problems(in the context of software design). Design patterns were started as best practices that were applied again and again to similar problems encountered in different...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/transmitting-data/393805/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/transmitting-data/393805/3</link>
        <pubDate>Mon, 09 May 2011 19:08:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393805-3</guid>
        <source url="https://forum.moparisthebest.com/t/transmitting-data/393805.rss">Transmitting Data</source>
      </item>
      <item>
        <title>Transmitting Data</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>I’m going to be a protobuf whore and say “look into protobuf.” its not applicable in every situation but it will blow your mind with simplicity.</p>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://assets-cdn.github.com/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://github.com/google/protobuf" target="_blank" rel="nofollow noopener">GitHub</a>
  </header>
  <article class="onebox-body">
    <img src="https://avatars0.githubusercontent.com/u/1342004?s=400&amp;v=4" class="thumbnail onebox-avatar" width="400" height="400">

<h3><a href="https://github.com/google/protobuf" target="_blank" rel="nofollow noopener">google/protobuf</a></h3>

<p>protobuf - Protocol Buffers - Google's data interchange format</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>/inb4 im sounding like mopman with ruby</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/transmitting-data/393805/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/transmitting-data/393805/2</link>
        <pubDate>Thu, 05 May 2011 02:31:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393805-2</guid>
        <source url="https://forum.moparisthebest.com/t/transmitting-data/393805.rss">Transmitting Data</source>
      </item>
      <item>
        <title>Transmitting Data</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>I just have a few questions about what’s the <em>best</em> way to transmit data between a client and server.</p>
<p>[ol][li]Should the packet length be put in the “header” of a packet (1-2 bytes before the data), or in a table like the RS clients, or both?[/li]<br>
[li]Should I have each packet it’s own class, or should I just have on “PacketBuilder” class?[/li]<br>
[li]I’m thinking of implementing a packet codec. PacketDecoder, which reads a ByteBuffer object and creates an usable Packet object, along with a PacketEncoder which takes a Packet object and creates a usable ByteBuffer object which is sent to the receiver. Is this the best way to handle the process? If so, how should I handle the “encoding” part? Should I have the Packet interface look something like this?</p>
<p>public interface Packet {<br>
public ByteBuffer getData();<br>
}</p>
<p>If I were to do this, then wouldn’t that make the PacketDecoder obsolete, since the ByteBuffer used for the packet is already created? If I were to use the PacketDecoder, then it would have to know the structure of each packet, with an enourmouse switch statement (which I’d like to avoid)[/li][/ol]</p>
<p>I’ll add more questions once I can remember them.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/transmitting-data/393805/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/transmitting-data/393805/1</link>
        <pubDate>Thu, 05 May 2011 01:18:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393805-1</guid>
        <source url="https://forum.moparisthebest.com/t/transmitting-data/393805.rss">Transmitting Data</source>
      </item>
  </channel>
</rss>
