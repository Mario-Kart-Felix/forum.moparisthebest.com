<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Small CryptoCoin library</title>
    <link>https://forum.moparisthebest.com/t/small-cryptocoin-library/549628</link>
    <description>I wrote this to assist in a project where I needed to verify coin addresses from multiple CryptoCoins Currently it support the validation of Bitcoin, Dogecoin, Darkcoin, and Reddcoin.  Other coins can be added easily enough by continuing the CryptoCoinType enumeration. You will need to find the decimal value of the coins identifier.  If you are using the identification process you should be aware of the fact that if two coins have the same identifier  the first one in the list will be chosen every time so should not be relied upon. Instead it is best to include a list of valid coin identities for verification. 

https://github.com/silabsoft/CryptoCoinLib

[code]
public class IdentificationTest {

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        String addressesToTest[] = new String[]{
            &quot;1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoq&quot;, //failed size
            &quot;1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoqF&quot;, // should be valid
            &quot;DNy1UBfm3QJmgGoVJnaXPtdfKyvdpFwRkc&quot;, //dogecoin
            &quot;RqdoFVWu4Keio22GQD9nBSAHMynTNhy39j&quot;, //reddcoin
            &quot;Xe32GbzrVi2L4WvFLT6Bf6gtRp1mVgR8rW&quot;, //darkcoin
        };
        AddressIdentifier identifier = new AddressIdentifier();
        for (String address : addressesToTest) {
          
            try {
                Address cca = identifier.identifierAddressFromEncodedString(address);
                System.out.println(cca.getEncodedAddress() + &quot; Type: &quot; + cca.getCryptoCoinTypeAddressType());
            } catch (AddressIdentifierException ex) {
                System.out.println(&quot;Address: &quot; + address + &quot; is Invalid: &quot; + ex.getMessage());
            }

        }
    }
}
[/code]

output:

[code]
Address: 1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoq is Invalid: Invalid Decode Length
1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoqF Type: BITCOIN_PUBKEY
DNy1UBfm3QJmgGoVJnaXPtdfKyvdpFwRkc Type: DOGECOIN_PUBKEY
RqdoFVWu4Keio22GQD9nBSAHMynTNhy39j Type: REDDCOIN_PUBKEY
Xe32GbzrVi2L4WvFLT6Bf6gtRp1mVgR8rW Type: DARKCOIN_PUBKEY
[/code]</description>
    
    <lastBuildDate>Tue, 03 Feb 2015 02:49:17 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/small-cryptocoin-library/549628.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Small CryptoCoin library</title>
        <dc:creator><![CDATA[@silabsoft RuneAgent]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/silabsoft">@silabsoft</a> wrote:</p>
          <blockquote>
              <p>I wrote this to assist in a project where I needed to verify coin addresses from multiple CryptoCoins Currently it support the validation of Bitcoin, Dogecoin, Darkcoin, and Reddcoin.  Other coins can be added easily enough by continuing the CryptoCoinType enumeration. You will need to find the decimal value of the coins identifier.  If you are using the identification process you should be aware of the fact that if two coins have the same identifier  the first one in the list will be chosen every time so should not be relied upon. Instead it is best to include a list of valid coin identities for verification.</p>
<p><a href="https://github.com/silabsoft/CryptoCoinLib" class="onebox" target="_blank" rel="nofollow noopener">https://github.com/silabsoft/CryptoCoinLib</a></p>
<pre><code class="lang-auto">public class IdentificationTest {

    /**
     *
     * @param args
     */
    public static void main(String[] args) {
        String addressesToTest[] = new String[]{
            "1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoq", //failed size
            "1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoqF", // should be valid
            "DNy1UBfm3QJmgGoVJnaXPtdfKyvdpFwRkc", //dogecoin
            "RqdoFVWu4Keio22GQD9nBSAHMynTNhy39j", //reddcoin
            "Xe32GbzrVi2L4WvFLT6Bf6gtRp1mVgR8rW", //darkcoin
        };
        AddressIdentifier identifier = new AddressIdentifier();
        for (String address : addressesToTest) {
          
            try {
                Address cca = identifier.identifierAddressFromEncodedString(address);
                System.out.println(cca.getEncodedAddress() + " Type: " + cca.getCryptoCoinTypeAddressType());
            } catch (AddressIdentifierException ex) {
                System.out.println("Address: " + address + " is Invalid: " + ex.getMessage());
            }

        }
    }
}</code></pre>
<p>output:</p>
<pre><code class="lang-auto">Address: 1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoq is Invalid: Invalid Decode Length
1vF5XepSWqvjMUdkFGQdgE1oqLjhZWoqF Type: BITCOIN_PUBKEY
DNy1UBfm3QJmgGoVJnaXPtdfKyvdpFwRkc Type: DOGECOIN_PUBKEY
RqdoFVWu4Keio22GQD9nBSAHMynTNhy39j Type: REDDCOIN_PUBKEY
Xe32GbzrVi2L4WvFLT6Bf6gtRp1mVgR8rW Type: DARKCOIN_PUBKEY</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/small-cryptocoin-library/549628/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/small-cryptocoin-library/549628/1</link>
        <pubDate>Tue, 03 Feb 2015 02:49:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-549628-1</guid>
        <source url="https://forum.moparisthebest.com/t/small-cryptocoin-library/549628.rss">Small CryptoCoin library</source>
      </item>
  </channel>
</rss>
