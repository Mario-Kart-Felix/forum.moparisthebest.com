<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>C# Code to compile VB.net and C# scripts (Better than Scipt Control)</title>
    <link>https://forum.moparisthebest.com/t/c-code-to-compile-vb-net-and-c-scripts-better-than-scipt-control/9389</link>
    <description>Here is a C# code to allow you to compile C# and Visual Basic scripts at runtime.
It returns whether it has errors, and outputs the errors to a DataGridView, and outputs data though the Ouput variable.

[code]using System.CodeDom;
using System.CodeDom.Compiler;
using System.IO;
using System.Globalization;
using System;
public class CodeCompiler
{
    public static bool CompileCode(String[] S, language l, ref
        System.Windows.Forms.DataGridView ErrorOut, bool
        TreatWarningsAsErrors, ref string Output)
    {
        CodeDomProvider Provider = null;
        switch (l) {
            case language.VisualBasic:
                Provider = new Microsoft.VisualBasic.VBCodeProvider();
                break;
            case language.Csharp:
                Provider = new Microsoft.CSharp.CSharpCodeProvider();
                break;
            default:
                System.Windows.Forms.MessageBox.Show(&quot;Invalid Language&quot;);
                return false;
        }
        CompilerParameters Cp = new CompilerParameters();
        
        {
            Cp.GenerateExecutable = false;
            Cp.GenerateInMemory = true;
            Cp.TreatWarningsAsErrors = TreatWarningsAsErrors;
            string[] d = {&quot;System.Windows.Forms.dll&quot;, &quot;System.dll&quot;, &quot;System.Data.dll&quot;, &quot;System.Drawing.dll&quot;};
            Cp.ReferencedAssemblies.AddRange(d);
        }
        CompilerResults Cr = Provider.CompileAssemblyFromSource(Cp, S);
        if (Cr.Errors.Count &gt; 0)
        {
            ErrorOut.DataSource = Cr.Errors;
            return true;
        }
        else
        {
            Output = RunAssembly(Cr.CompiledAssembly);
        }
        return false;
    }
    private static string RunAssembly(System.Reflection.Assembly Assembly)
    {
        Type scriptType;
        try {
            scriptType = Assembly.GetType(&quot;myMacro.BootScript&quot;);
            return (string)scriptType.InvokeMember(&quot;Main&quot;,
                System.Reflection.BindingFlags.InvokeMethod |
                System.Reflection.BindingFlags.Public |
                System.Reflection.BindingFlags.Static,
                null, null, null);
        }
        catch (Exception ex) {
            System.Windows.Forms.MessageBox.Show(ex.Message );
        }
        return null;
    }
    public enum language
    {
        VisualBasic,
        Csharp,
    }
}[/code]

Here are examples on creating blank forms. You need a label called label1, and a Data Grid View named dataGridView1.

For C# codes:
[code]            string[] ScriptArray =
               {&quot;using System;\n&quot; +
                &quot;using System.Collections.Generic;\n&quot; +
                &quot;using System.ComponentModel;\n&quot; +
                &quot;using System.Drawing;\n&quot; +
                &quot;using System.Data;\n&quot; +
                &quot;using System.Text;\n&quot; +
                &quot;using System.Windows.Forms;\n&quot; +
                &quot;\n&quot;+
                &quot;namespace myMacro\n&quot; +
                &quot;{\n&quot; +
                &quot;    public static class BootScript\n&quot; +
                &quot;    {\n&quot; +
                &quot;        public static string Main()\n&quot; +
                &quot;        {\n&quot; +
                &quot;            System.Windows.Forms.Form F = new System.Windows.Forms.Form();\n&quot; +
                &quot;            return F.ShowDialog().ToString();\n&quot; +
                &quot;        }\n&quot; +
                &quot;    }\n&quot; +
                &quot;}&quot;};

            string Out = null;
            CodeCompiler.CompileCode(ScriptArray, CodeCompiler.language.Csharp,ref  this.dataGridView1, false, ref Out);
            this.label1.Text = Out;[/code]

And for Visual Basic:
[code]            string[] ScriptArray =
               {&quot;Imports System\n&quot; +
                &quot;Imports System.Collections.Generic\n&quot; +
                &quot;Imports System.ComponentModel\n&quot; +
                &quot;Imports System.Drawing\n&quot; +
                &quot;Imports System.Data\n&quot; +
                &quot;Imports System.Text\n&quot; +
                &quot;Imports System.Windows.Forms\n&quot; +
                &quot;\n&quot; +
                &quot;Namespace myMacro\n&quot; +
                &quot;   Public Module BootScript\n&quot; +
                &quot;       Public Function Main() As String\n&quot; +
                &quot;           Dim F As New System.Windows.Forms.Form\n&quot; +
                &quot;           Return F.ShowDialog().ToString\n&quot; +
                &quot;       End Function\n&quot; +
                &quot;   End Module\n&quot; +
                &quot;End Namespace&quot;};

            string Out = null;
            CodeCompiler.CompileCode(ScriptArray, CodeCompiler.language.VisualBasic,ref  this.dataGridView1, false, ref Out);
            this.label1.Text = Out;[/code]

This can be used anywhere from a calculator to a Macro client. Feel free to modify, but credit me!
To use multiple scripts, just add more to the script array.

Note: I will not be realeasing the Visual Basic 2005 equivelent to the compiler, even though I have it  :P</description>
    
    <lastBuildDate>Mon, 14 Aug 2006 08:14:12 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-code-to-compile-vb-net-and-c-scripts-better-than-scipt-control/9389.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>C# Code to compile VB.net and C# scripts (Better than Scipt Control)</title>
        <dc:creator><![CDATA[@Flaming_Idiot Flaming Idiot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/flaming_idiot">@Flaming_Idiot</a> wrote:</p>
          <blockquote>
              <p>Here is a C# code to allow you to compile C# and Visual Basic scripts at runtime.<br>
It returns whether it has errors, and outputs the errors to a DataGridView, and outputs data though the Ouput variable.</p>
<p>[code]using System.CodeDom;<br>
using System.CodeDom.Compiler;<br>
using <a href="http://System.IO" rel="nofollow noopener">System.IO</a>;<br>
using System.Globalization;<br>
using System;<br>
public class CodeCompiler<br>
{<br>
public static bool CompileCode(String[] S, language l, ref<br>
System.Windows.Forms.DataGridView ErrorOut, bool<br>
TreatWarningsAsErrors, ref string Output)<br>
{<br>
CodeDomProvider Provider = null;<br>
switch (l) {<br>
case language.VisualBasic:<br>
Provider = new Microsoft.VisualBasic.VBCodeProvider();<br>
break;<br>
case language.Csharp:<br>
Provider = new Microsoft.CSharp.CSharpCodeProvider();<br>
break;<br>
default:<br>
System.Windows.Forms.MessageBox.Show(“Invalid Language”);<br>
return false;<br>
}<br>
CompilerParameters Cp = new CompilerParameters();</p>
<pre><code>    {
        Cp.GenerateExecutable = false;
        Cp.GenerateInMemory = true;
        Cp.TreatWarningsAsErrors = TreatWarningsAsErrors;
        string[] d = {"System.Windows.Forms.dll", "System.dll", "System.Data.dll", "System.Drawing.dll"};
        Cp.ReferencedAssemblies.AddRange(d);
    }
    CompilerResults Cr = Provider.CompileAssemblyFromSource(Cp, S);
    if (Cr.Errors.Count &gt; 0)
    {
        ErrorOut.DataSource = Cr.Errors;
        return true;
    }
    else
    {
        Output = RunAssembly(Cr.CompiledAssembly);
    }
    return false;
}
private static string RunAssembly(System.Reflection.Assembly Assembly)
{
    Type scriptType;
    try {
        scriptType = Assembly.GetType("myMacro.BootScript");
        return (string)scriptType.InvokeMember("Main",
            System.Reflection.BindingFlags.InvokeMethod |
            System.Reflection.BindingFlags.Public |
            System.Reflection.BindingFlags.Static,
            null, null, null);
    }
    catch (Exception ex) {
        System.Windows.Forms.MessageBox.Show(ex.Message );
    }
    return null;
}
public enum language
{
    VisualBasic,
    Csharp,
}
</code></pre>
<p>}[/code]</p>
<p>Here are examples on creating blank forms. You need a label called label1, and a Data Grid View named dataGridView1.</p>
<p>For C# codes:</p>
<p>[code]            string[] ScriptArray =<br>
{“using System;\n” +<br>
“using System.Collections.Generic;\n” +<br>
“using System.ComponentModel;\n” +<br>
“using System.Drawing;\n” +<br>
“using System.Data;\n” +<br>
“using System.Text;\n” +<br>
“using System.Windows.Forms;\n” +<br>
“\n”+<br>
“namespace myMacro\n” +<br>
“{\n” +<br>
"    public static class BootScript\n" +<br>
"    {\n" +<br>
"        public static string Main()\n" +<br>
"        {\n" +<br>
"            System.Windows.Forms.Form F = new System.Windows.Forms.Form();\n" +<br>
"            return F.ShowDialog().ToString();\n" +<br>
"        }\n" +<br>
"    }\n" +<br>
“}”};</p>
<pre><code>        string Out = null;
        CodeCompiler.CompileCode(ScriptArray, CodeCompiler.language.Csharp,ref  this.dataGridView1, false, ref Out);
        this.label1.Text = Out;[/code]
</code></pre>
<p>And for Visual Basic:</p>
<p>[code]            string[] ScriptArray =<br>
{“Imports System\n” +<br>
“Imports System.Collections.Generic\n” +<br>
“Imports System.ComponentModel\n” +<br>
“Imports System.Drawing\n” +<br>
“Imports System.Data\n” +<br>
“Imports System.Text\n” +<br>
“Imports System.Windows.Forms\n” +<br>
“\n” +<br>
“Namespace myMacro\n” +<br>
"   Public Module BootScript\n" +<br>
"       Public Function Main() As String\n" +<br>
"           Dim F As New System.Windows.Forms.Form\n" +<br>
"           Return F.ShowDialog().ToString\n" +<br>
"       End Function\n" +<br>
"   End Module\n" +<br>
“End Namespace”};</p>
<pre><code>        string Out = null;
        CodeCompiler.CompileCode(ScriptArray, CodeCompiler.language.VisualBasic,ref  this.dataGridView1, false, ref Out);
        this.label1.Text = Out;[/code]
</code></pre>
<p>This can be used anywhere from a calculator to a Macro client. Feel free to modify, but credit me!<br>
To use multiple scripts, just add more to the script array.</p>
<p>Note: I will not be realeasing the Visual Basic 2005 equivelent to the compiler, even though I have it  <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-code-to-compile-vb-net-and-c-scripts-better-than-scipt-control/9389/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-code-to-compile-vb-net-and-c-scripts-better-than-scipt-control/9389/1</link>
        <pubDate>Mon, 14 Aug 2006 08:14:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-9389-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-code-to-compile-vb-net-and-c-scripts-better-than-scipt-control/9389.rss">C# Code to compile VB.net and C# scripts (Better than Scipt Control)</source>
      </item>
  </channel>
</rss>
