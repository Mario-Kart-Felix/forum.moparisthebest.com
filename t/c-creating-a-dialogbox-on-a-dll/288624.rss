<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[C++] Creating a DialogBox on a DLL</title>
    <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624</link>
    <description>There are several ways to create one, but I found this method really easy for beginners that want to learn how.

This method only works on a DLL, though you can use this code as a base to help you create one for a C++ Applications.

[size=15pt][b]1.1 Getting Started:[/b][/size]
To start off, you need to have Microsoft Visual Studio C++ 2008 (You can have any version as long as it&#39;s not Express, since it doesn&#39;t support making Resource files.)

What this tutorial will do is help you learn how A Dialog works, and how to make it change strings according to what you want. You can do several other things, but I won&#39;t talk about that for now. It&#39;s also helpful and better than creating a Pop Up Based DLL when you can just have it show everything you want on one box.

Once you have everything ready, Create a new Win32 Dynamic-Link Library project.

Start off making your code look similar to this:
[code]
//Includes
#include &lt;windows.h&gt;

//Functions
void Main()
{
//Code in Loop
}

BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved )
{
	DisableThreadLibraryCalls(hinstDLL);

	switch(fdwReason)
	{
		case DLL_PROCESS_ATTACH:
			//Creates Main() and runs it in a Loop Continuously
			CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Main), NULL, NULL, NULL); 
			break;
		case DLL_PROCESS_DETACH:
			//Detaches&#39;s HINSTANCE
			FreeLibrary(hinstDLL);
			break;
	}
	return true;
}[/code]

That&#39;s a basic DLL That does nothing for now.

[size=15pt][b]1.2 Coding the Dialog Box:[/b][/size]
Now that we have everything ready to begin, we&#39;ll start to hardcode in the DialogBox that we want to display.
First we&#39;ll need to add the code to create a DialogBox from our RC File (Which will be later explained how to make)
So We&#39;ll need to create a New Function to tell it to create a New Box, normally I&#39;d put it in Main() But after applying This piece of code, everything after the instruction freezes.

Add a CreateThread in your &quot;Attach&quot; Under Main, so that that function runs separately, and only for our DialogBox not affecting any of our code. For example:
[code]CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Box), NULL, NULL, NULL);[/code]
That would create the loop for a Function called Box but you could put any name you want.

After creating the thread Make a new function &quot;void whatever()&quot; (Make sure it matches what ever you put in CreateThread). Add a while statement to it, to ensure you run the script inside your function according to your while statement in this case I used while(1) Which would look like this in my case:
[code]
void Box()
{
	while(1)
	{
			//Code
	}
}[/code]

That&#39;s a simple piece of function that runs no instruction while it is 1. Thus meaning it does nothing at the moment, but that&#39;s not what we want. We want it to create a Dialog in our function.

I used DialogBox in this tutorial, though theres countless other ways to do it. A DialogBox() Function allows you to create a dialogbox linking to your Resource file.
Here&#39;s a basic outline I wrote of how it works:
DialogBox(
HINSTANCE, //Used in DLL Main, but since it doesn&#39;t exist in our function We&#39;ll have to create a special Variable for it
MAKEINTRESOURCE(WhatEver), //This links to your RC File which we will later use.
NULL, //This is our handle to the window, but since we&#39;re running it in a DLL we don&#39;t need to add anything.
YourProc, //You can make this anything, it just links to the code it&#39;ll run in &quot;YourProc&quot;
);

Here&#39;s how mine resulted:
[code]			DialogBox(WhatEver,MAKEINTRESOURCE(IDD_DIALOG1), NULL, Dialog);[/code]
The WhatEver is a define I made which would link to HINSTANCE I&#39;ll show you how to do that after explaining what this function does.
The second part creates the resource IDD_DIALOG1 (Displays it)
We&#39;ll ignore the NULL and go to Dialog which is the Process name I used.

Next we&#39;ll make some Variables.
Under [code]case DLL_PROCESS_ATTACH:[/code]
We&#39;ll make a variable for HINSTANCE, because that&#39;s where HINSTANCE exists.
Making a variable is fairly simple, heres an example of one
[code]WhatEver = hinstDLL;[/code]
This sets the value of what hinstDLL is, to WhatEver variable
You can put anything you want in WhatEver as long as it&#39;s the same thing you put in DialogBox

After adding that, we&#39;ll now need to make it a global variable since it only exists in that function.
At the very top under your Windows.h include We&#39;ll need to re-define it so it exists in our DLL to be used in anything we want.
This would look like [code]HINSTANCE WhatEver;[/code]
This tells the DLL that HINSTANCE is WhatEver (Your Variable you made in our DLLMain).

Once this is done Your variable is now usable in DialogBox, but we still need to make our Process.
In our Process we can make it display what ever we want, set what we want. But in this tutorial we won&#39;t be using this function that much. But instead use it in Main().

At the very top under all your includes and your Variable definitions add
[code]BOOL CALLBACK Dialog(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
	{ 
    return false;
}[/code]

This is the Process name we chose earlier in our DialogBox() Function.
But we can&#39;t use it&#39;s functions in Main() Yet. This is because Main() doesn&#39;t know which window we&#39;re using to set our text.
In order to do that, we&#39;ll need to make another variable in our function.
Above [code]return false;[/code] add another variable similar to what we added in DLLMain linking to hwnd
For example:
[code]MyWindowID = hwnd;[/code]
This will set MyWindowID&#39;s value to hwnd automatically. But like before, this cannot be accessible yet so we&#39;ll need to make this as another global variable.
Under your previous Global Variable add
[code]HWND MyWindowID;[/code]

Now we&#39;ve coded most of what we needed. Next I&#39;ll show you how to make a hotkey change a simple piece of text on the DialogBox.

[size=15pt][b]1.3 Setting Data + Hotkeys:[/b][/size]

Now we will finally use Main(); to code our Hotkeys to perform what we want.

Since we want Main to run as well We&#39;ll also want to include a While statement, like so:
[code]void Main()
{	
	while(1)
	{
//code
        }
}[/code]

Now that we&#39;ve done that, we&#39;ll need it to check for hotkeys pressed so We&#39;ll add an If Statement checking out our hotkeys.
Heres an example of a check if the ALT key and the 1 key is pressed on the keyboard.
[code]if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))[/code]
This will run continuously checking if VK_ALT and VK_1 is pressed.
But We&#39;ll need to define it&#39;s KEYS to so it doesn&#39;t give any errors. Here&#39;s a list of defines.
[code]// Definitions:
#define VK_0 0x30 // 0 key 
#define VK_1 0x31 // 1 key 
#define VK_2 0x32 // 2 key 
#define VK_3 0x33 // 3 key 
#define VK_4 0x34 // 4 key 
#define VK_5 0x35 // 5 key 
#define VK_6 0x36 // 6 key 
#define VK_7 0x37 // 7 key 
#define VK_8 0x38 // 8 key 
#define VK_9 0x39 // 9 key 
#define VK_ALT 0x12[/code]
Add that above your global variables.
This will let you use keys from 0 to 9 and the ALT key. You can do this by just adding in the hex of the KEY but I prefer doing things like this.

Now that we have a hotkey check our code should appear like this:
[code]void Main()
{	
	while(1)
	{
		if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))
		{
		}
		Sleep(10); //This is needed to prevent it from running rapidly. This prevents any sort of lag that might occur.
	}
}[/code]

Now if it appears similar to this, that means you&#39;ve done it correct. We just need to add instructions to what the Hotkey should do. I&#39;ll show you how to make it change text on an existing Static_Text (We will later talk about this) But since we have none, we can make it any name we want.

We&#39;ll use the &quot;SetDlgItemText();&quot; to change the text we want. Here&#39;s how it&#39;s used.
[code]SetDlgItemText(      
    HWND hDlg,
    int nIDDlgItem,
    LPCTSTR lpString
);[/code]
The HWND is the Window ID of the GUI, since we&#39;ve already defined it we&#39;ll use that global variable in my case I&#39;d use MyWindowID
The second part is the name of the static_text box you will later make. Just name it anything you want, and we&#39;ll adapt to it later on when creating the dialog box&#39;s appearance.
and in the Third part is the string in Quotes put any message you want.
This is how mine would look like.
[code]SetDlgItemText(MyWindowID,MyTextBox,L&quot;Message!&quot;);[/code]

The final code should look similar to this:
[code]void Main()
{	
	while(1)
	{
		if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))
		{
			SetDlgItemText(MyWindowID,MyTextBox,L&quot;Message!&quot;);
		}
		Sleep(10); //This is needed to prevent it from running rapidly. This prevents any sort of lag that might occur.
	}
}[/code]

Now we&#39;re done coding our DLL, we now need to work on the appearance!

[size=15pt][b]1.4 Creating the DialogBox&#39;s Appearance:[/b][/size]
Now that you&#39;ve gotten this far, you should know most of the basics of how C++ Works. We&#39;ll need to create a new file in our project. In order to do so, click on Project, then select &quot;Add new item&quot;. Select &quot;Resource&quot; then pick Resource (.RC) and enter a name for it.
In Tree View of all your files right click YourName.rc and double click Dialog to create a Dialog.

You will now be taken to a Dialog Screen similar to this:
[img width=600 height=464]http://i25.tinypic.com/13zxw6w.png[/img]
Here you&#39;ll see your Resource Name you first set
Go back to your code [code]DialogBox(WhatEver,MAKEINTRESOURCE(IDD_DIALOG1), NULL, Dialog);[/code]
And Make the IDD_DIALOG1 match with your Dialog ID.

In your default Dialog, you&#39;ll see two Buttons as shown in the screenshot. They aren&#39;t needed so feel free to delete them. In the ToolBox Create a Static Text box and place it where ever you want on your Dialog Box (Feel free to resize the box).

After adding a Static Text, look at it&#39;s properties and Set the Caption to what ever you want. (When you inject the DLL, it&#39;ll show the default caption you&#39;ve put, but when pressing the Hotkey, that text will change)

In the Properties of the Static Text box change the ID according to what you put in your SetDlgItemText
[code]SetDlgItemText(MyWindowID,MyTextBox,L&quot;Message!&quot;);[/code]

In My Case I&#39;ll put MyTextBox in the ID rather than IDC_STATIC.

Now we&#39;re done making the DialogBox. Save the RC file and go back to your code

It will still won&#39;t compile since the Source isn&#39;t yet linked with the DialogBox we just made. So at the top where you put windows.h add 
[code]#include &quot;resource.h&quot;[/code]
Reason we put this in quotations is because the resource.h is automatically generated in the same project folder.

Compile your project, and it should compile successfully! Inject the DLL to any application then press Alt + 1 and your message should change!

Here is the Source file for the Project if anyone needs: [url=http://www.mediafire.com/?yyemhn4wwmn]http://www.mediafire.com/?yyemhn4wwmn[/url]

Please tell me if I&#39;m lacking any information, or having any problems!

Credits To me for writing the Tutorial.
Credits to Ape for helping from solving minor problems.</description>
    
    <lastBuildDate>Sat, 18 Jul 2009 14:37:29 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>wxWidgets, which has been improving constantly for 17 years, is far from being an amateurish library.<br>
Unlike QT, wxWidgets uses native controls whenever possible, meaning the look &amp; feel and efficiency of most wxWidgets applications is equivalent to that of a native WINAPI one. It also means that since millions of people use these controls, it is extremely unlikely to find a significant bug in one of them. QT on the other side renders the controls itself, trying to imitate native controls, being as a result less efficient and more prone to look &amp; feel discrepancies, as well as leading to accesiblity issues (as accessibility tools often work only on the native controls of the OS).</p>
<p>It is also noteworthy that QT abuses virtual functions, which has a significant overhead and doesn’t help with efficiency either.</p>
<p>Apart form all that, QT has a more restrictive license (and, in fact, it’s only been some months since it can be used on commercial projects), and QT is not C++ (as it requires a non-standard preprocessor).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/7</link>
        <pubDate>Sat, 18 Jul 2009 14:37:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-7</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@qauters qauters]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/qauters">@qauters</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="5" data-topic="288624">
<div class="title">
<div class="quote-controls"></div>
 seand:</div>
<blockquote>
<p>[quote]I’d recommend wxWidgets or .NET for more complex GUIs though</p>
</blockquote>
</aside>
<p>wxWidgets is amateur crap, i switched from that to Qt, and it’s a much more impressive library[/quote]<br>
wxWidgets can be used perfectly for almost any kind of program and it got a way better license then QT does.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/6</link>
        <pubDate>Fri, 17 Jul 2009 22:10:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-6</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <blockquote>I'd recommend wxWidgets or .NET for more complex GUIs though</blockquote>
<p>wxWidgets is amateur crap, i switched from that to Qt, and it’s a much more impressive library</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/5</link>
        <pubDate>Fri, 17 Jul 2009 04:10:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-5</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@zstars zstars]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zstars">@zstars</a> wrote:</p>
          <blockquote>
              <p>Should be “int main()” rather than “void Main()” if it’s an actual .exe. But now I see for some reason it’s a DLL so NVM. I’d recommend wxWidgets or .NET for more complex GUIs though <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/4</link>
        <pubDate>Wed, 15 Jul 2009 14:23:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-4</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@Zirakac Zirakac]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zirakac">@Zirakac</a> wrote:</p>
          <blockquote>
              <p>Thanks man, I decided to write this up while I had nothing to do.</p>
<p>[quote=“Mopman, post:2, topic:288624”]You are aware I’m sure that if you want a dialog box with an ok+cancel button and a message that you can just use MessageBox() ?</p>
<p>Nevertheless, nice to see some C++ around here :p[/quote]</p>
<p>Yes I’m aware, but a MessageBox is more of a nuisance since it interrupts your DLL if it’s in the same function. It’s really annoying to see a message box come and go.</p>
<p>The purpose of the GUI is to display everything on one box, and change according to what you want from a Hotkey.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/3</link>
        <pubDate>Tue, 14 Jul 2009 16:13:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-3</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>You are aware I’m sure that if you want a dialog box with an ok+cancel button and a message that you can just use MessageBox() ?</p>
<p>Nevertheless, nice to see some C++ around here <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/2</link>
        <pubDate>Tue, 14 Jul 2009 12:45:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-2</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
      <item>
        <title>[C++] Creating a DialogBox on a DLL</title>
        <dc:creator><![CDATA[@Zirakac Zirakac]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zirakac">@Zirakac</a> wrote:</p>
          <blockquote>
              <p>There are several ways to create one, but I found this method really easy for beginners that want to learn how.</p>
<p>This method only works on a DLL, though you can use this code as a base to help you create one for a C++ Applications.</p>
<p>[size=15pt]<span class="bbcode-b">1.1 Getting Started:</span>[/size]<br>
To start off, you need to have Microsoft Visual Studio C++ 2008 (You can have any version as long as it’s not Express, since it doesn’t support making Resource files.)</p>
<p>What this tutorial will do is help you learn how A Dialog works, and how to make it change strings according to what you want. You can do several other things, but I won’t talk about that for now. It’s also helpful and better than creating a Pop Up Based DLL when you can just have it show everything you want on one box.</p>
<p>Once you have everything ready, Create a new Win32 Dynamic-Link Library project.</p>
<p>Start off making your code look similar to this:</p>
<p>[code]<br>
//Includes<br>
<span class="hashtag">#include</span> &lt;windows.h&gt;</p>
<p>//Functions<br>
void Main()<br>
{<br>
//Code in Loop<br>
}</p>
<p>BOOL WINAPI DllMain(HINSTANCE hinstDLL, DWORD fdwReason, LPVOID lpvReserved )<br>
{<br>
DisableThreadLibraryCalls(hinstDLL);</p>
<pre><code>switch(fdwReason)
{
	case DLL_PROCESS_ATTACH:
		//Creates Main() and runs it in a Loop Continuously
		CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Main), NULL, NULL, NULL); 
		break;
	case DLL_PROCESS_DETACH:
		//Detaches's HINSTANCE
		FreeLibrary(hinstDLL);
		break;
}
return true;
</code></pre>
<p>}[/code]</p>
<p>That’s a basic DLL That does nothing for now.</p>
<p>[size=15pt]<span class="bbcode-b">1.2 Coding the Dialog Box:</span>[/size]<br>
Now that we have everything ready to begin, we’ll start to hardcode in the DialogBox that we want to display.<br>
First we’ll need to add the code to create a DialogBox from our RC File (Which will be later explained how to make)<br>
So We’ll need to create a New Function to tell it to create a New Box, normally I’d put it in Main() But after applying This piece of code, everything after the instruction freezes.</p>
<p>Add a CreateThread in your “Attach” Under Main, so that that function runs separately, and only for our DialogBox not affecting any of our code. For example:</p>
<pre><code class="lang-auto">CreateThread(NULL, NULL, LPTHREAD_START_ROUTINE(Box), NULL, NULL, NULL);</code></pre>
<p>That would create the loop for a Function called Box but you could put any name you want.</p>
<p>After creating the thread Make a new function “void whatever()” (Make sure it matches what ever you put in CreateThread). Add a while statement to it, to ensure you run the script inside your function according to your while statement in this case I used while(1) Which would look like this in my case:</p>
<p><code>
void Box()
{
	while(1)
	{
			//Code
	}
}</code></p>
<p>That’s a simple piece of function that runs no instruction while it is 1. Thus meaning it does nothing at the moment, but that’s not what we want. We want it to create a Dialog in our function.</p>
<p>I used DialogBox in this tutorial, though theres countless other ways to do it. A DialogBox() Function allows you to create a dialogbox linking to your Resource file.<br>
Here’s a basic outline I wrote of how it works:<br>
DialogBox(<br>
HINSTANCE, //Used in DLL Main, but since it doesn’t exist in our function We’ll have to create a special Variable for it<br>
MAKEINTRESOURCE(WhatEver), //This links to your RC File which we will later use.<br>
NULL, //This is our handle to the window, but since we’re running it in a DLL we don’t need to add anything.<br>
YourProc, //You can make this anything, it just links to the code it’ll run in “YourProc”<br>
);</p>
<p>Here’s how mine resulted:</p>
<pre><code class="lang-auto">			DialogBox(WhatEver,MAKEINTRESOURCE(IDD_DIALOG1), NULL, Dialog);</code></pre>
<p>The WhatEver is a define I made which would link to HINSTANCE I’ll show you how to do that after explaining what this function does.<br>
The second part creates the resource IDD_DIALOG1 (Displays it)<br>
We’ll ignore the NULL and go to Dialog which is the Process name I used.</p>
<p>Next we’ll make some Variables.<br>
Under <code>case DLL_PROCESS_ATTACH:</code><br>
We’ll make a variable for HINSTANCE, because that’s where HINSTANCE exists.<br>
Making a variable is fairly simple, heres an example of one</p>
<pre><code class="lang-auto">WhatEver = hinstDLL;</code></pre>
<p>This sets the value of what hinstDLL is, to WhatEver variable<br>
You can put anything you want in WhatEver as long as it’s the same thing you put in DialogBox</p>
<p>After adding that, we’ll now need to make it a global variable since it only exists in that function.<br>
At the very top under your Windows.h include We’ll need to re-define it so it exists in our DLL to be used in anything we want.<br>
This would look like <code>HINSTANCE WhatEver;</code><br>
This tells the DLL that HINSTANCE is WhatEver (Your Variable you made in our DLLMain).</p>
<p>Once this is done Your variable is now usable in DialogBox, but we still need to make our Process.<br>
In our Process we can make it display what ever we want, set what we want. But in this tutorial we won’t be using this function that much. But instead use it in Main().</p>
<p>At the very top under all your includes and your Variable definitions add</p>
<p><code>BOOL CALLBACK Dialog(HWND hwnd, UINT message, WPARAM wParam, LPARAM lParam)
	{ 
    return false;
}</code></p>
<p>This is the Process name we chose earlier in our DialogBox() Function.<br>
But we can’t use it’s functions in Main() Yet. This is because Main() doesn’t know which window we’re using to set our text.<br>
In order to do that, we’ll need to make another variable in our function.<br>
Above <code>return false;</code> add another variable similar to what we added in DLLMain linking to hwnd<br>
For example:</p>
<pre><code class="lang-auto">MyWindowID = hwnd;</code></pre>
<p>This will set MyWindowID’s value to hwnd automatically. But like before, this cannot be accessible yet so we’ll need to make this as another global variable.<br>
Under your previous Global Variable add</p>
<pre><code class="lang-auto">HWND MyWindowID;</code></pre>
<p>Now we’ve coded most of what we needed. Next I’ll show you how to make a hotkey change a simple piece of text on the DialogBox.</p>
<p>[size=15pt]<span class="bbcode-b">1.3 Setting Data + Hotkeys:</span>[/size]</p>
<p>Now we will finally use Main(); to code our Hotkeys to perform what we want.</p>
<p>Since we want Main to run as well We’ll also want to include a While statement, like so:</p>
<p><code>void Main()
{	
	while(1)
	{
//code
        }
}</code></p>
<p>Now that we’ve done that, we’ll need it to check for hotkeys pressed so We’ll add an If Statement checking out our hotkeys.<br>
Heres an example of a check if the ALT key and the 1 key is pressed on the keyboard.</p>
<pre><code class="lang-auto">if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))</code></pre>
<p>This will run continuously checking if VK_ALT and VK_1 is pressed.<br>
But We’ll need to define it’s KEYS to so it doesn’t give any errors. Here’s a list of defines.</p>
<p><code>// Definitions:
#define VK_0 0x30 // 0 key 
#define VK_1 0x31 // 1 key 
#define VK_2 0x32 // 2 key 
#define VK_3 0x33 // 3 key 
#define VK_4 0x34 // 4 key 
#define VK_5 0x35 // 5 key 
#define VK_6 0x36 // 6 key 
#define VK_7 0x37 // 7 key 
#define VK_8 0x38 // 8 key 
#define VK_9 0x39 // 9 key 
#define VK_ALT 0x12</code><br>
Add that above your global variables.<br>
This will let you use keys from 0 to 9 and the ALT key. You can do this by just adding in the hex of the KEY but I prefer doing things like this.</p>
<p>Now that we have a hotkey check our code should appear like this:</p>
<p><code>void Main()
{	
	while(1)
	{
		if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))
		{
		}
		Sleep(10); //This is needed to prevent it from running rapidly. This prevents any sort of lag that might occur.
	}
}</code></p>
<p>Now if it appears similar to this, that means you’ve done it correct. We just need to add instructions to what the Hotkey should do. I’ll show you how to make it change text on an existing Static_Text (We will later talk about this) But since we have none, we can make it any name we want.</p>
<p>We’ll use the “SetDlgItemText();” to change the text we want. Here’s how it’s used.</p>
<p><code>SetDlgItemText(      
    HWND hDlg,
    int nIDDlgItem,
    LPCTSTR lpString
);</code><br>
The HWND is the Window ID of the GUI, since we’ve already defined it we’ll use that global variable in my case I’d use MyWindowID<br>
The second part is the name of the static_text box you will later make. Just name it anything you want, and we’ll adapt to it later on when creating the dialog box’s appearance.<br>
and in the Third part is the string in Quotes put any message you want.<br>
This is how mine would look like.</p>
<pre><code class="lang-auto">SetDlgItemText(MyWindowID,MyTextBox,L"Message!");</code></pre>
<p>The final code should look similar to this:</p>
<p><code>void Main()
{	
	while(1)
	{
		if(GetAsyncKeyState(VK_ALT) &amp;&amp; GetAsyncKeyState(VK_1))
		{
			SetDlgItemText(MyWindowID,MyTextBox,L"Message!");
		}
		Sleep(10); //This is needed to prevent it from running rapidly. This prevents any sort of lag that might occur.
	}
}</code></p>
<p>Now we’re done coding our DLL, we now need to work on the appearance!</p>
<p>[size=15pt]<span class="bbcode-b">1.4 Creating the DialogBox’s Appearance:</span>[/size]<br>
Now that you’ve gotten this far, you should know most of the basics of how C++ Works. We’ll need to create a new file in our project. In order to do so, click on Project, then select “Add new item”. Select “Resource” then pick Resource (.RC) and enter a name for it.<br>
In Tree View of all your files right click YourName.rc and double click Dialog to create a Dialog.</p>
<p>You will now be taken to a Dialog Screen similar to this:<br>
<img src="http://i25.tinypic.com/13zxw6w.png" alt width="" height=""><br>
Here you’ll see your Resource Name you first set<br>
Go back to your code <code>DialogBox(WhatEver,MAKEINTRESOURCE(IDD_DIALOG1), NULL, Dialog);</code><br>
And Make the IDD_DIALOG1 match with your Dialog ID.</p>
<p>In your default Dialog, you’ll see two Buttons as shown in the screenshot. They aren’t needed so feel free to delete them. In the ToolBox Create a Static Text box and place it where ever you want on your Dialog Box (Feel free to resize the box).</p>
<p>After adding a Static Text, look at it’s properties and Set the Caption to what ever you want. (When you inject the DLL, it’ll show the default caption you’ve put, but when pressing the Hotkey, that text will change)</p>
<p>In the Properties of the Static Text box change the ID according to what you put in your SetDlgItemText</p>
<pre><code class="lang-auto">SetDlgItemText(MyWindowID,MyTextBox,L"Message!");</code></pre>
<p>In My Case I’ll put MyTextBox in the ID rather than IDC_STATIC.</p>
<p>Now we’re done making the DialogBox. Save the RC file and go back to your code</p>
<p>It will still won’t compile since the Source isn’t yet linked with the DialogBox we just made. So at the top where you put windows.h add</p>
<pre><code class="lang-auto">#include "resource.h"</code></pre>
<p>Reason we put this in quotations is because the resource.h is automatically generated in the same project folder.</p>
<p>Compile your project, and it should compile successfully! Inject the DLL to any application then press Alt + 1 and your message should change!</p>
<p>Here is the Source file for the Project if anyone needs: <a href="http://www.mediafire.com/?yyemhn4wwmn" data-bbcode="true" rel="nofollow noopener">http://www.mediafire.com/?yyemhn4wwmn</a></p>
<p>Please tell me if I’m lacking any information, or having any problems!</p>
<p>Credits To me for writing the Tutorial.<br>
Credits to Ape for helping from solving minor problems.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624/1</link>
        <pubDate>Tue, 14 Jul 2009 01:04:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-288624-1</guid>
        <source url="https://forum.moparisthebest.com/t/c-creating-a-dialogbox-on-a-dll/288624.rss">[C++] Creating a DialogBox on a DLL</source>
      </item>
  </channel>
</rss>
