<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[508] How i can make ice barrage only for in wild</title>
    <link>https://forum.moparisthebest.com/t/508-how-i-can-make-ice-barrage-only-for-in-wild/242739</link>
    <description>Hello, just added full ancients but....


I can cast them in the middle of edge on a player

how can i make it only for the wild? (edgeville), (Bounty hunter place) (Varrock wild etc all the wildy&#39;s)
just like real rs....

Code MagicOnPlayer.java


[code]
/*
 * Class MagicOnPlayer
 *
 * Version 1.0
 *
 * Saturday, September 11, 2008
 *
 * Created by ROYALE.
 */

package palidino76.rs2.io.packets;


import palidino76.rs2.Engine;
import palidino76.rs2.players.Player;
import palidino76.rs2.util.Misc;
import palidino76.rs2.Server;


public class MagicOnPlayer implements Packet {

    /**
     * Handles magic on players.
     * @param p The Player which the frame should be handled for.
     * @param packetId The packet id this belongs to.
     * @param packetSize The amount of bytes being recieved for this packet.
     */
    public void handlePacket(Player p, int packetId, int packetSize) {
     
        p.attackPlayer = p.stream.readSignedWordA();
        int playerId = p.stream.readSignedWordBigEndian();
        int interfaceId = p.stream.readUnsignedWord();

        p.clickId = p.stream.readUnsignedWord();
        Player p2 = Server.engine.players[playerId];

        switch (interfaceId) {
        case 193:
            if (p.magicDelay == 0) {
                if (p.clickId == 3 || p.skillLvl[6] &gt;= 94) {
                    if (Engine.playerItems.invItemCount(p, 560) &gt; 3
                            &amp;&amp; Engine.playerItems.invItemCount(p, 555) &gt; 5
                            &amp;&amp; Engine.playerItems.invItemCount(p, 565) &gt; 1) {
                        p.requestFaceTo(p2.playerId + 32768);
                        p.stopMovement(p);
                        p.magicDelay = 5;
                        p.requestAnim(1979, 0);
                        p.frames.sendMessage(p, &quot;You You cast ice barrage on this failure&quot;);
                        p2.requestGFX(369, 0);
                        p2.appendHit(Misc.random(30), 0);
                        p2.requestFaceTo(p.playerId + 32768);
                        p2.freezeDelay = 10;
                        p2.frames.sendMessage(p2, &quot; You are Frozen!!&quot;);
                        p.combatDelay += p.attackDelay;
                        Engine.playerItems.deleteItem(p, 560,
                                Engine.playerItems.getItemSlot(p, 560), 4);
                        Engine.playerItems.deleteItem(p, 555,
                                Engine.playerItems.getItemSlot(p, 555), 6);
                        Engine.playerItems.deleteItem(p, 556,
                                Engine.playerItems.getItemSlot(p, 556), 2);
                    } else {
                        p.frames.sendMessage(p,
                                &quot;You don&#39;t have enough runes to cast this spell.&quot;);
                    }
                } else {
                    p.frames.sendMessage(p,
                            &quot;You need a magic level of 94 to cast this spell.&quot;);
                }
            } else {
                p.stopMovement(p);
            }
            break;

        default:
            Misc.println(
                    &quot;PlayerID &quot; + playerId + &quot; - InterfaceID &quot; + interfaceId
                    + &quot; - ButtonID &quot; + p.clickId + &quot;.&quot;);
            break;
        }
    } 
}
[/code]



Engine.java code :

[code]
/*
 * Class Engine
 *
 * Version 1.0
 *
 * Thursday, August 14, 2008
 *
 * Created by Palidino76
 */

package palidino76.rs2;


import java.net.Socket;
import palidino76.rs2.players.Player;
import palidino76.rs2.players.items.*;
import palidino76.rs2.players.update.*;
import palidino76.rs2.players.combat.*;
import palidino76.rs2.world.mapdata.MapData;
import palidino76.rs2.world.items.Items;
import palidino76.rs2.io.*;
import palidino76.rs2.util.Misc;
import palidino76.rs2.npcs.NPC;
import palidino76.rs2.npcs.update.*;
import palidino76.rs2.npcs.loading.*;
import palidino76.rs2.npcs.combat.*;
import palidino76.rs2.players.PlayerFollow;
import palidino76.rs2.players.castlewars.*;
import palidino76.rs2.content.*;
import palidino76.rs2.world.minigame.bountyHunter;


public class Engine implements Runnable {

    /**
     * When a new player logs in, a new player is created and stored in this array.
     * &lt;p&gt;The server cannot exceed 2000 players.
     * The id 0 cannot be used as it is not handled by the client corrently.
     */
    public static Player[] players = new Player[2000];

    /**
     * Max id an NPC can have loaded out of the npclist config.
     */
    public static int maxListedNPCs = 8041;

    /**
     * When a new NPC is created, it is stored in this array.
     * &lt;p&gt;There can not be more than 5000 NPCs spawned at a time.
     * The id 0 cannot be used as it is not handled by the client corrently.
     */
    public static NPC[] npcs = new NPC[5000];

    /**
     * Contains NPC data such as respawn times, names, examines, etc.
     */
    public static NPCList[] npcLists = new NPCList[maxListedNPCs];

    /**
     * The class thread.
     */
    private Thread engineThread = new Thread(this);

    /**
     * Set true if the engine should run.
     */
    private boolean engineRunning = true;

    /**
     * Handles packets recieved from the server.
     */
    public static Packets packets = new Packets();

    /**
     * Loads and stores map data for map regions.
     */
    public static MapData mapData = new MapData();

    /**
     * Contains a method for every known frame.
     */
    public static Frames frames = new Frames();

    /**
     * Handles player movement.
     */
    public static PlayerMovement playerMovement = new PlayerMovement();

    /**
     * Contains all item information.
     */
    public static Items items;

    /**
     * Handles player updates.
     */
    public static PlayerUpdate playerUpdate = new PlayerUpdate();

    /**
     * Handles NPC movement.
     */
    public static NPCMovement npcMovement = new NPCMovement();

    /**
     * Handles NPC updates.
     */
    public static NPCUpdate npcUpdate = new NPCUpdate();

    /**
     * Handles players items.
     */
    public static PlayerItems playerItems = new PlayerItems();

    /**
     * Handles file saving and loading.
     */
    public static FileManager fileManager = new FileManager();
    public static PlayerBank playerBank = new PlayerBank();
    public static PlayerCombat playerCombat = new PlayerCombat();
	   public static PlayerFollow playerFollow = new PlayerFollow();
    public static PlayerNPCCombat playerNPCCombat = new PlayerNPCCombat();
    public static NPCPlayerCombat npcPlayerCombat = new NPCPlayerCombat();
	public static CastleWarsFL cwFl = new CastleWarsFL();
public static bountyHunter bountyhunter = new bountyHunter();

	/**
     *player trading. - by mad turnip
     */
    public static PlayerTrade playerTrade = new PlayerTrade();

    /**
     * Constructs a new Engine and loads item and NPC data from configs.
     */
    public Engine() {
        items = new Items(this);
        LoadNPCLists lnl = new LoadNPCLists();

        lnl = null;
        engineThread.start();
    }

    /**
     * The thread&#39;s process.
     * &lt;p&gt;This processes at a rate of 100 milliseconds, and the processing time
     * is subtracted from the amount of time it sleeps to keep at a rate of 100
     * milliseonds. Packets are checked every 100 milliseconds for faster response time,
     * and most other updates are processed every 600 milliseconds.
     */
    public void run() {
        long lastEntityUpdate = 0;
        long curTime;

        while (engineRunning) {
            curTime = System.currentTimeMillis();
            connectAwaitingPlayers();
            packets.parseIncomingPackets();
            if (curTime - lastEntityUpdate &gt;= 600) {
                items.process();
                for (Player p : players) {
                    // Proccess and player movement, removing disconnected players.
                    if (p == null || !p.online) {
                        continue;
                    }
                    if (p.disconnected[0] &amp;&amp; p.disconnected[1]) {
                        removePlayer(p.playerId);
                        continue;
                    }
                    p.process();
                    playerMovement.getNextPlayerMovement(p);
                }
                for (Player p: players) {
                    // Update players.
                    if (p == null || !p.online) {
                        continue;
                    }
                    playerUpdate.update(p);
                }
                for (Player p : players) {
                    // Reset masks and send bytes.
                    if (p == null || !p.online) {
                        continue;
                    }
                    playerUpdate.clearUpdateReqs(p);
                    Server.socketListener.writeBuffer(p);
                }
                for (NPC n : npcs) {
                    if (n == null) {
                        continue;
                    }
                    npcUpdate.clearUpdateMasks(n);
                }
                for (NPC n : npcs) {
                    if (n == null) {
                        continue;
                    }
                    n.process();
                    if (!n.isDead) {
                        if (n.randomWalk &amp;&amp; !n.attackingPlayer) {
                            npcMovement.randomWalk(n);
                        }
                    } else {
                        if (!n.deadEmoteDone) {
                            n.requestAnim(n.deathEmote, 0);
                            n.deadEmoteDone = true;
                            n.combatDelay = 3;
                       } else if (n.deadEmoteDone &amp;&amp; !n.hiddenNPC &amp;&amp; n.combatDelay &lt;= 0) {
							n.npccanloot = true;
							n.npcDied(Engine.players[1], n.npcType, n.absX, n.absY);
                            n.hiddenNPC = true;
						 } else if (n.deadEmoteDone &amp;&amp; !n.hiddenNPC
                                &amp;&amp; n.combatDelay &lt;= 0) {
                            n.hiddenNPC = true;
                        }  else if (n.hiddenNPC &amp;&amp; n.respawnDelay &lt;= 0) {
                            if (n.needsRespawn) {
                                newNPC(n.npcType, n.makeX, n.makeY,
                                        n.heightLevel, n.moveRangeX1,
                                        n.moveRangeY1, n.moveRangeX2,
                                        n.moveRangeY2, true);
                            }
                            npcs[n.npcId] = null;
                            rebuildNPCs();
                        }
                    }
                    lastEntityUpdate = curTime;
                }
            }
            try {
                Thread.sleep(100 - (System.currentTimeMillis() - curTime));
            } catch (Exception e) {}
        }
    }

    /**
     * Assign a player to the connection.
     * &lt;p&gt;When a new connection is recieved, a new Player class is created which waits for the run method
     * to run the Login class to finish the connection. If the id is 0, or the server is full, no
     * connection is made and the socket is closed.
     * @param socket The socket the new player is connected to.
     * @param id The id which the new player will be created at.
     */
    public void addConnection(Socket socket, int id) {
        if (id == 0) {
            Server.socketListener.removeSocket(id);
            return;
        }
        players[id] = new Player(socket, id);
    }

    /**
     * Run the login class to finish a new connection.
     * &lt;p&gt;Loops through all the players looking for any that are not online.
     * Because the socket can&#39;t cause the server to process slower, there
     * are multiple login stages, and the player will go through the login class
     * two or three times before fully logging in.
     */
    public void connectAwaitingPlayers() {
        Login login = null;

        for (Player p : players) {
            if (p == null || p.online) {
                continue;
            }
            if (login == null) {
                login = new Login();
            }
            login.login(p);
            if (!p.online &amp;&amp; p.loginStage == -1
                    || (System.currentTimeMillis() - p.loginTimeout) &gt;= 15000) {

                /*
                 * Remove the player if he failed to connect or it was the update server.
                 */
                removePlayer(p.playerId);
            }
        }
    }

    /**
     * Discard a player with the specified id in the player array.
     * &lt;p&gt;This method should only be called when the player is ready to be removed.
     * This nulls closes the players socket and then nulls the player.
     * @param id The position in the player array that should be removed.
     */
    public void removePlayer(int id) {
        if (players[id] == null) {
            return;
        }
        if (players[id].online) {
            try {
                fileManager.saveCharacter(players[id]);
            } catch (Exception e) {}
        }
        players[id].destruct();
        players[id] = null;
        Server.socketListener.removeSocket(id);
    }

    /**
     * This method tells every player to re-add any NPCs within distance.
     * &lt;p&gt;By calling this method, with the next NPC update it will discard the NPC list and
     * re-loop through every NPC and re-add them if they fit the specifications.
     */
    public void rebuildNPCs() {
        for (Player p : players) {
            if (p == null) {
                continue;
            }
            p.rebuildNPCList = true;
        }
    }

    /**
     * Returns a players id based on their username, or 0 if the player is not online.
     * &lt;p&gt;This will check if a player is online based on searching every characters username,
     * and comparing it to playerName. Because index 0 is not used and won&#39;t throw an
     * ArrayoutofBounds exception error, 0 is returned if the username isn&#39;t found.
     * @param playerName The name to compare with the other online player names.
     * @return Returns the index of the player with that username, or 0 if the username isn&#39;t found.
     */
    public int getIdFromName(String playerName) {
        playerName.replaceAll(&quot;_&quot;, &quot; &quot;);
        for (Player p : players) {
            if (p == null) {
                continue;
            }
            if (p.username.equalsIgnoreCase(playerName)) {
                return p.playerId;
            }
        }
        return 0;
    }

    /**
     * boolean to check if player is in wild.
     */
    public static boolean wildernessArea(int absX, int absY) {
        return (absX &gt;= 2940 &amp;&amp; absX &lt;= 3395 &amp;&amp; absY &gt;= 3524 &amp;&amp; absY &lt;= 4000);
    
    }
	public static boolean cwarea(int absX, int absY) {
        return (absX &gt;= 2368 &amp;&amp; absX &lt;= 2428 &amp;&amp; absY &gt;= 3072 &amp;&amp; absY &lt;= 3132);
		}
	

    /**
     * Returns the description of npcId.
     * @param npcId The NPC to get the examine for.
     * @return Returns the examine.
     */
    public String getNPCDescription(int npcId) {
        if (npcId == -1 || npcId &gt;= maxListedNPCs) {
            return new String(&quot;An NPC.&quot;);
        }
        if (npcLists[npcId] != null) {
            return (npcLists[npcId].examine);
        }
        return new String(&quot;NPC &quot; + npcId);
    }

    /**
     * Check player count.
     */
    public static int getPlayerCount() {
        int count = 0;

        for (Player p : players) {
            if (p != null) {
                count++;
            }
        }
        return count;
    }

    /**
     * Spawn a new NPC.
     * &lt;p&gt;This will create a new visible NPC, with the default values from its list and the parameters.
     * @param type The type of NPC this is, such as 50 for the King black dragon.
     * @param absX The absolute x coordinate to spawn the NPC.
     * @param absY The absolute y coordinate to spawn the NPC.
     * @param height The height level to set the NPC.
     * @param mRXY1 The distance it can walk west; must be lower than absX to have any effect.
     * @param mRY1 The distance it can walk south; must be lower than absY to have any effect.
     * @param mRX2 The distance it can walk east; must be higher than absX to have any effect.
     * @param mRY2 The distance it can walk north; must be higher than absY to have any effect.
     * @param needsRespawn Set to true if the NPC should respawn after it dies.
     * @return Returns the index the NPC was placed at.
     */
    public static int newNPC(int type, int absX, int absY, int height, int mRX1, int mRY1, int mRX2, int mRY2, boolean needsRespawn) {
        int index = -1;

        for (int i = 1; i &lt; npcs.length; i++) {
            if (npcs[i] == null) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            Misc.println(&quot;Max number of NPCs spawned.&quot;);
            return -1;
        }
        NPC n = npcs[index] = new NPC(type, index);

        n.absX = absX;
        n.absY = absY;
        n.makeX = absX;
        n.makeY = absY;
        n.heightLevel = height;
        n.moveRangeX1 = mRX1;
        n.moveRangeY1 = mRY1;
        n.moveRangeX2 = mRX2;
        n.moveRangeY2 = mRY2;
        n.needsRespawn = needsRespawn;
        NPCList nl = npcLists[type];

        if (nl != null) {
            n.name = nl.npcName;
            n.combatLevel = nl.combatLevel;
            n.maxHP = nl.maxHP;
            n.currentHP = n.maxHP;
            n.maxHit = nl.maxHit;
            n.atkType = nl.atkType;
            n.weakness = nl.weakness;
            n.respawnDelay = nl.respawnDelay;
            n.attackEmote = nl.attackEmote;
            n.defendEmote = nl.defendEmote;
            n.deathEmote = nl.deathEmote;
            n.attackDelay = nl.attackDelay;
        }
        return index;
    }
}
[/code]

I only want that i can cast ice barrage in wild and not in middle of edge... Thank you.

Please post code i really need help!</description>
    
    <lastBuildDate>Mon, 10 Nov 2008 20:01:08 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/508-how-i-can-make-ice-barrage-only-for-in-wild/242739.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[508] How i can make ice barrage only for in wild</title>
        <dc:creator><![CDATA[@ohbpking ohbpking]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ohbpking">@ohbpking</a> wrote:</p>
          <blockquote>
              <p>Hello, just added full ancients but…</p>
<p>I can cast them in the middle of edge on a player</p>
<p>how can i make it only for the wild? (edgeville), (Bounty hunter place) (Varrock wild etc all the wildy’s)<br>
just like real rs…</p>
<p>Code MagicOnPlayer.java</p>
<pre><code class="lang-auto">/*
 * Class MagicOnPlayer
 *
 * Version 1.0
 *
 * Saturday, September 11, 2008
 *
 * Created by ROYALE.
 */

package palidino76.rs2.io.packets;


import palidino76.rs2.Engine;
import palidino76.rs2.players.Player;
import palidino76.rs2.util.Misc;
import palidino76.rs2.Server;


public class MagicOnPlayer implements Packet {

    /**
     * Handles magic on players.
     * @param p The Player which the frame should be handled for.
     * @param packetId The packet id this belongs to.
     * @param packetSize The amount of bytes being recieved for this packet.
     */
    public void handlePacket(Player p, int packetId, int packetSize) {
     
        p.attackPlayer = p.stream.readSignedWordA();
        int playerId = p.stream.readSignedWordBigEndian();
        int interfaceId = p.stream.readUnsignedWord();

        p.clickId = p.stream.readUnsignedWord();
        Player p2 = Server.engine.players[playerId];

        switch (interfaceId) {
        case 193:
            if (p.magicDelay == 0) {
                if (p.clickId == 3 || p.skillLvl[6] &gt;= 94) {
                    if (Engine.playerItems.invItemCount(p, 560) &gt; 3
                            &amp;&amp; Engine.playerItems.invItemCount(p, 555) &gt; 5
                            &amp;&amp; Engine.playerItems.invItemCount(p, 565) &gt; 1) {
                        p.requestFaceTo(p2.playerId + 32768);
                        p.stopMovement(p);
                        p.magicDelay = 5;
                        p.requestAnim(1979, 0);
                        p.frames.sendMessage(p, "You You cast ice barrage on this failure");
                        p2.requestGFX(369, 0);
                        p2.appendHit(Misc.random(30), 0);
                        p2.requestFaceTo(p.playerId + 32768);
                        p2.freezeDelay = 10;
                        p2.frames.sendMessage(p2, " You are Frozen!!");
                        p.combatDelay += p.attackDelay;
                        Engine.playerItems.deleteItem(p, 560,
                                Engine.playerItems.getItemSlot(p, 560), 4);
                        Engine.playerItems.deleteItem(p, 555,
                                Engine.playerItems.getItemSlot(p, 555), 6);
                        Engine.playerItems.deleteItem(p, 556,
                                Engine.playerItems.getItemSlot(p, 556), 2);
                    } else {
                        p.frames.sendMessage(p,
                                "You don't have enough runes to cast this spell.");
                    }
                } else {
                    p.frames.sendMessage(p,
                            "You need a magic level of 94 to cast this spell.");
                }
            } else {
                p.stopMovement(p);
            }
            break;

        default:
            Misc.println(
                    "PlayerID " + playerId + " - InterfaceID " + interfaceId
                    + " - ButtonID " + p.clickId + ".");
            break;
        }
    } 
}</code></pre>
<p>Engine.java code :</p>
<pre><code class="lang-auto">/*
 * Class Engine
 *
 * Version 1.0
 *
 * Thursday, August 14, 2008
 *
 * Created by Palidino76
 */

package palidino76.rs2;


import java.net.Socket;
import palidino76.rs2.players.Player;
import palidino76.rs2.players.items.*;
import palidino76.rs2.players.update.*;
import palidino76.rs2.players.combat.*;
import palidino76.rs2.world.mapdata.MapData;
import palidino76.rs2.world.items.Items;
import palidino76.rs2.io.*;
import palidino76.rs2.util.Misc;
import palidino76.rs2.npcs.NPC;
import palidino76.rs2.npcs.update.*;
import palidino76.rs2.npcs.loading.*;
import palidino76.rs2.npcs.combat.*;
import palidino76.rs2.players.PlayerFollow;
import palidino76.rs2.players.castlewars.*;
import palidino76.rs2.content.*;
import palidino76.rs2.world.minigame.bountyHunter;


public class Engine implements Runnable {

    /**
     * When a new player logs in, a new player is created and stored in this array.
     * &lt;p&gt;The server cannot exceed 2000 players.
     * The id 0 cannot be used as it is not handled by the client corrently.
     */
    public static Player[] players = new Player[2000];

    /**
     * Max id an NPC can have loaded out of the npclist config.
     */
    public static int maxListedNPCs = 8041;

    /**
     * When a new NPC is created, it is stored in this array.
     * &lt;p&gt;There can not be more than 5000 NPCs spawned at a time.
     * The id 0 cannot be used as it is not handled by the client corrently.
     */
    public static NPC[] npcs = new NPC[5000];

    /**
     * Contains NPC data such as respawn times, names, examines, etc.
     */
    public static NPCList[] npcLists = new NPCList[maxListedNPCs];

    /**
     * The class thread.
     */
    private Thread engineThread = new Thread(this);

    /**
     * Set true if the engine should run.
     */
    private boolean engineRunning = true;

    /**
     * Handles packets recieved from the server.
     */
    public static Packets packets = new Packets();

    /**
     * Loads and stores map data for map regions.
     */
    public static MapData mapData = new MapData();

    /**
     * Contains a method for every known frame.
     */
    public static Frames frames = new Frames();

    /**
     * Handles player movement.
     */
    public static PlayerMovement playerMovement = new PlayerMovement();

    /**
     * Contains all item information.
     */
    public static Items items;

    /**
     * Handles player updates.
     */
    public static PlayerUpdate playerUpdate = new PlayerUpdate();

    /**
     * Handles NPC movement.
     */
    public static NPCMovement npcMovement = new NPCMovement();

    /**
     * Handles NPC updates.
     */
    public static NPCUpdate npcUpdate = new NPCUpdate();

    /**
     * Handles players items.
     */
    public static PlayerItems playerItems = new PlayerItems();

    /**
     * Handles file saving and loading.
     */
    public static FileManager fileManager = new FileManager();
    public static PlayerBank playerBank = new PlayerBank();
    public static PlayerCombat playerCombat = new PlayerCombat();
	   public static PlayerFollow playerFollow = new PlayerFollow();
    public static PlayerNPCCombat playerNPCCombat = new PlayerNPCCombat();
    public static NPCPlayerCombat npcPlayerCombat = new NPCPlayerCombat();
	public static CastleWarsFL cwFl = new CastleWarsFL();
public static bountyHunter bountyhunter = new bountyHunter();

	/**
     *player trading. - by mad turnip
     */
    public static PlayerTrade playerTrade = new PlayerTrade();

    /**
     * Constructs a new Engine and loads item and NPC data from configs.
     */
    public Engine() {
        items = new Items(this);
        LoadNPCLists lnl = new LoadNPCLists();

        lnl = null;
        engineThread.start();
    }

    /**
     * The thread's process.
     * &lt;p&gt;This processes at a rate of 100 milliseconds, and the processing time
     * is subtracted from the amount of time it sleeps to keep at a rate of 100
     * milliseonds. Packets are checked every 100 milliseconds for faster response time,
     * and most other updates are processed every 600 milliseconds.
     */
    public void run() {
        long lastEntityUpdate = 0;
        long curTime;

        while (engineRunning) {
            curTime = System.currentTimeMillis();
            connectAwaitingPlayers();
            packets.parseIncomingPackets();
            if (curTime - lastEntityUpdate &gt;= 600) {
                items.process();
                for (Player p : players) {
                    // Proccess and player movement, removing disconnected players.
                    if (p == null || !p.online) {
                        continue;
                    }
                    if (p.disconnected[0] &amp;&amp; p.disconnected[1]) {
                        removePlayer(p.playerId);
                        continue;
                    }
                    p.process();
                    playerMovement.getNextPlayerMovement(p);
                }
                for (Player p: players) {
                    // Update players.
                    if (p == null || !p.online) {
                        continue;
                    }
                    playerUpdate.update(p);
                }
                for (Player p : players) {
                    // Reset masks and send bytes.
                    if (p == null || !p.online) {
                        continue;
                    }
                    playerUpdate.clearUpdateReqs(p);
                    Server.socketListener.writeBuffer(p);
                }
                for (NPC n : npcs) {
                    if (n == null) {
                        continue;
                    }
                    npcUpdate.clearUpdateMasks(n);
                }
                for (NPC n : npcs) {
                    if (n == null) {
                        continue;
                    }
                    n.process();
                    if (!n.isDead) {
                        if (n.randomWalk &amp;&amp; !n.attackingPlayer) {
                            npcMovement.randomWalk(n);
                        }
                    } else {
                        if (!n.deadEmoteDone) {
                            n.requestAnim(n.deathEmote, 0);
                            n.deadEmoteDone = true;
                            n.combatDelay = 3;
                       } else if (n.deadEmoteDone &amp;&amp; !n.hiddenNPC &amp;&amp; n.combatDelay &lt;= 0) {
							n.npccanloot = true;
							n.npcDied(Engine.players[1], n.npcType, n.absX, n.absY);
                            n.hiddenNPC = true;
						 } else if (n.deadEmoteDone &amp;&amp; !n.hiddenNPC
                                &amp;&amp; n.combatDelay &lt;= 0) {
                            n.hiddenNPC = true;
                        }  else if (n.hiddenNPC &amp;&amp; n.respawnDelay &lt;= 0) {
                            if (n.needsRespawn) {
                                newNPC(n.npcType, n.makeX, n.makeY,
                                        n.heightLevel, n.moveRangeX1,
                                        n.moveRangeY1, n.moveRangeX2,
                                        n.moveRangeY2, true);
                            }
                            npcs[n.npcId] = null;
                            rebuildNPCs();
                        }
                    }
                    lastEntityUpdate = curTime;
                }
            }
            try {
                Thread.sleep(100 - (System.currentTimeMillis() - curTime));
            } catch (Exception e) {}
        }
    }

    /**
     * Assign a player to the connection.
     * &lt;p&gt;When a new connection is recieved, a new Player class is created which waits for the run method
     * to run the Login class to finish the connection. If the id is 0, or the server is full, no
     * connection is made and the socket is closed.
     * @param socket The socket the new player is connected to.
     * @param id The id which the new player will be created at.
     */
    public void addConnection(Socket socket, int id) {
        if (id == 0) {
            Server.socketListener.removeSocket(id);
            return;
        }
        players[id] = new Player(socket, id);
    }

    /**
     * Run the login class to finish a new connection.
     * &lt;p&gt;Loops through all the players looking for any that are not online.
     * Because the socket can't cause the server to process slower, there
     * are multiple login stages, and the player will go through the login class
     * two or three times before fully logging in.
     */
    public void connectAwaitingPlayers() {
        Login login = null;

        for (Player p : players) {
            if (p == null || p.online) {
                continue;
            }
            if (login == null) {
                login = new Login();
            }
            login.login(p);
            if (!p.online &amp;&amp; p.loginStage == -1
                    || (System.currentTimeMillis() - p.loginTimeout) &gt;= 15000) {

                /*
                 * Remove the player if he failed to connect or it was the update server.
                 */
                removePlayer(p.playerId);
            }
        }
    }

    /**
     * Discard a player with the specified id in the player array.
     * &lt;p&gt;This method should only be called when the player is ready to be removed.
     * This nulls closes the players socket and then nulls the player.
     * @param id The position in the player array that should be removed.
     */
    public void removePlayer(int id) {
        if (players[id] == null) {
            return;
        }
        if (players[id].online) {
            try {
                fileManager.saveCharacter(players[id]);
            } catch (Exception e) {}
        }
        players[id].destruct();
        players[id] = null;
        Server.socketListener.removeSocket(id);
    }

    /**
     * This method tells every player to re-add any NPCs within distance.
     * &lt;p&gt;By calling this method, with the next NPC update it will discard the NPC list and
     * re-loop through every NPC and re-add them if they fit the specifications.
     */
    public void rebuildNPCs() {
        for (Player p : players) {
            if (p == null) {
                continue;
            }
            p.rebuildNPCList = true;
        }
    }

    /**
     * Returns a players id based on their username, or 0 if the player is not online.
     * &lt;p&gt;This will check if a player is online based on searching every characters username,
     * and comparing it to playerName. Because index 0 is not used and won't throw an
     * ArrayoutofBounds exception error, 0 is returned if the username isn't found.
     * @param playerName The name to compare with the other online player names.
     * @return Returns the index of the player with that username, or 0 if the username isn't found.
     */
    public int getIdFromName(String playerName) {
        playerName.replaceAll("_", " ");
        for (Player p : players) {
            if (p == null) {
                continue;
            }
            if (p.username.equalsIgnoreCase(playerName)) {
                return p.playerId;
            }
        }
        return 0;
    }

    /**
     * boolean to check if player is in wild.
     */
    public static boolean wildernessArea(int absX, int absY) {
        return (absX &gt;= 2940 &amp;&amp; absX &lt;= 3395 &amp;&amp; absY &gt;= 3524 &amp;&amp; absY &lt;= 4000);
    
    }
	public static boolean cwarea(int absX, int absY) {
        return (absX &gt;= 2368 &amp;&amp; absX &lt;= 2428 &amp;&amp; absY &gt;= 3072 &amp;&amp; absY &lt;= 3132);
		}
	

    /**
     * Returns the description of npcId.
     * @param npcId The NPC to get the examine for.
     * @return Returns the examine.
     */
    public String getNPCDescription(int npcId) {
        if (npcId == -1 || npcId &gt;= maxListedNPCs) {
            return new String("An NPC.");
        }
        if (npcLists[npcId] != null) {
            return (npcLists[npcId].examine);
        }
        return new String("NPC " + npcId);
    }

    /**
     * Check player count.
     */
    public static int getPlayerCount() {
        int count = 0;

        for (Player p : players) {
            if (p != null) {
                count++;
            }
        }
        return count;
    }

    /**
     * Spawn a new NPC.
     * &lt;p&gt;This will create a new visible NPC, with the default values from its list and the parameters.
     * @param type The type of NPC this is, such as 50 for the King black dragon.
     * @param absX The absolute x coordinate to spawn the NPC.
     * @param absY The absolute y coordinate to spawn the NPC.
     * @param height The height level to set the NPC.
     * @param mRXY1 The distance it can walk west; must be lower than absX to have any effect.
     * @param mRY1 The distance it can walk south; must be lower than absY to have any effect.
     * @param mRX2 The distance it can walk east; must be higher than absX to have any effect.
     * @param mRY2 The distance it can walk north; must be higher than absY to have any effect.
     * @param needsRespawn Set to true if the NPC should respawn after it dies.
     * @return Returns the index the NPC was placed at.
     */
    public static int newNPC(int type, int absX, int absY, int height, int mRX1, int mRY1, int mRX2, int mRY2, boolean needsRespawn) {
        int index = -1;

        for (int i = 1; i &lt; npcs.length; i++) {
            if (npcs[i] == null) {
                index = i;
                break;
            }
        }
        if (index == -1) {
            Misc.println("Max number of NPCs spawned.");
            return -1;
        }
        NPC n = npcs[index] = new NPC(type, index);

        n.absX = absX;
        n.absY = absY;
        n.makeX = absX;
        n.makeY = absY;
        n.heightLevel = height;
        n.moveRangeX1 = mRX1;
        n.moveRangeY1 = mRY1;
        n.moveRangeX2 = mRX2;
        n.moveRangeY2 = mRY2;
        n.needsRespawn = needsRespawn;
        NPCList nl = npcLists[type];

        if (nl != null) {
            n.name = nl.npcName;
            n.combatLevel = nl.combatLevel;
            n.maxHP = nl.maxHP;
            n.currentHP = n.maxHP;
            n.maxHit = nl.maxHit;
            n.atkType = nl.atkType;
            n.weakness = nl.weakness;
            n.respawnDelay = nl.respawnDelay;
            n.attackEmote = nl.attackEmote;
            n.defendEmote = nl.defendEmote;
            n.deathEmote = nl.deathEmote;
            n.attackDelay = nl.attackDelay;
        }
        return index;
    }
}</code></pre>
<p>I only want that i can cast ice barrage in wild and not in middle of edge… Thank you.</p>
<p>Please post code i really need help!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/508-how-i-can-make-ice-barrage-only-for-in-wild/242739/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/508-how-i-can-make-ice-barrage-only-for-in-wild/242739/1</link>
        <pubDate>Mon, 10 Nov 2008 20:01:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-242739-1</guid>
        <source url="https://forum.moparisthebest.com/t/508-how-i-can-make-ice-barrage-only-for-in-wild/242739.rss">[508] How i can make ice barrage only for in wild</source>
      </item>
  </channel>
</rss>
