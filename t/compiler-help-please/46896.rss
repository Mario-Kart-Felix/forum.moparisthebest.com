<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Compiler Help please?</title>
    <link>https://forum.moparisthebest.com/t/compiler-help-please/46896</link>
    <description>My compiler says ( when i try to compile it )

Note: stream.java uses or overrides a deprecated API.
Note: Recompile with -Xlint:deprecation for details.
press any key to continue...........



What does this mean? [br][size=1]Posted on: January 12, 2007, 01:14:05 PM[/size][hr]And this is my stream.java

public class stream {

	public stream() {
	}

	public stream(byte abyte0[]) {
		buffer = abyte0;
		currentOffset = 0;
	}

	public byte readSignedByteA() {
		return (byte)(buffer[currentOffset++] - 128);
	}

	public byte readSignedByteC() {
		return (byte)(-buffer[currentOffset++]);
	}

	public byte readSignedByteS() {
		return (byte)(128 - buffer[currentOffset++]);
	}

	public int readUnsignedByteA() {
		return buffer[currentOffset++] - 128 &amp; 0xff;
	}

	public int readUnsignedByteC() {
		return -buffer[currentOffset++] &amp; 0xff;
	}

	public int readUnsignedByteS() {
		return 128 - buffer[currentOffset++] &amp; 0xff;
	}

	public void writeByteA(int i) {
		buffer[currentOffset++] = (byte)(i + 128);
	}

	public void writeByteS(int i) {
		buffer[currentOffset++] = (byte)(128 - i);
	}

	public void writeByteC(int i) {
		buffer[currentOffset++] = (byte)(-i);
	}

	public int readSignedWordBigEndian() {
		currentOffset += 2;
		int i = ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}

	public int readSignedWordA() {
		currentOffset += 2;
		int i = ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] - 128 &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}

	public int readSignedWordBigEndianA() {
		currentOffset += 2;
		int i = ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] - 128 &amp; 0xff);
		if(i &gt; 32767)
			i -= 0x10000;
		return i;
	}

	public int readUnsignedWordBigEndian() {
		currentOffset += 2;
		return ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
	}

	public int readUnsignedWordA() {
		currentOffset += 2;
		return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] - 128 &amp; 0xff);
	}

	public int readUnsignedWordBigEndianA() {
		currentOffset += 2;
		return ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] - 128 &amp; 0xff);
	}

	public void writeWordBigEndianA(int i) {
		buffer[currentOffset++] = (byte)(i + 128);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	}

	public void writeWordA(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)(i + 128);
	}

	public void writeWordBigEndian_dup(int i) {
		buffer[currentOffset++] = (byte)i;
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	}

	public int readDWord_v1() {
		currentOffset += 4;
		return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 3] &amp; 0xff);
	}

	public int readDWord_v2() {
		currentOffset += 4;
		return ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
	}

	public void writeDWord_v1(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)i;
		buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
	}

	public void writeDWord_v2(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
		buffer[currentOffset++] = (byte)i;
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	}

	public void readBytes_reverse(byte abyte0[], int i, int j) {
		for(int k = (j + i) - 1; k &gt;= j; k--) {
			abyte0[k] = buffer[currentOffset++];

		}
	}

	public void writeBytes_reverse(byte abyte0[], int i, int j) {
		for(int k = (j + i) - 1; k &gt;= j; k--)
			buffer[currentOffset++] = abyte0[k];

	}

	public void readBytes_reverseA(byte abyte0[], int i, int j) {
		for(int k = (j + i) - 1; k &gt;= j; k--)
			abyte0[k] = (byte)(buffer[currentOffset++] - 128);

	}

	public void writeBytes_reverseA(byte abyte0[], int i, int j) {
		for(int k = (j + i) - 1; k &gt;= j; k--)
			buffer[currentOffset++] = (byte)(abyte0[k] + 128);

	}

	public void createFrame(int id) {
		buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
	}

	private static final int frameStackSize = 10;
	private int frameStackPtr = -1;
	private int frameStack[] = new int[frameStackSize];
	public void createFrameVarSize(int id){ // creates a variable sized frame
		buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
		buffer[currentOffset++] = 0;		// placeholder for size byte
		if(frameStackPtr &gt;= frameStackSize-1) {
			throw new RuntimeException(&quot;Stack overflow&quot;);
		}
		else frameStack[++frameStackPtr] = currentOffset;
	}
	public void createFrameVarSizeWord(int id) { // creates a variable sized frame
		buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
		writeWord(0);		// placeholder for size word
		if(frameStackPtr &gt;= frameStackSize-1) {
			throw new RuntimeException(&quot;Stack overflow&quot;);
		}
		else frameStack[++frameStackPtr] = currentOffset;
	}

	public void endFrameVarSize() {// ends a variable sized frame
		if(frameStackPtr &lt; 0) throw new RuntimeException(&quot;Stack empty&quot;);
		else writeFrameSize(currentOffset - frameStack[frameStackPtr--]);
	}

	public void endFrameVarSizeWord() { // ends a variable sized frame
		if(frameStackPtr &lt; 0) throw new RuntimeException(&quot;Stack empty&quot;);
		else writeFrameSizeWord(currentOffset - frameStack[frameStackPtr--]);
	}

	public void writeByte(int i) {
		buffer[currentOffset++] = (byte)i;
	}

	public void writeWord(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)i;
	}

	public void writeWordBigEndian(int i) {
		buffer[currentOffset++] = (byte)i;
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	}

	public void write3Byte(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)i;
	}

	public void writeDWord(int i) {
		buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)i;
	}

	public void writeDWordBigEndian(int i) {
		buffer[currentOffset++] = (byte)i;
		buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
		buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
	}

	public void writeQWord(long l) {
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 56);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 48);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 40);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 32);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 24);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 16);
		buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 8);
		buffer[currentOffset++] = (byte)(int)l;
	}

	public void writeString(java.lang.String s) {
		s.getBytes(0, s.length(), buffer, currentOffset);
		currentOffset += s.length();
		buffer[currentOffset++] = 10;
	}

	public void writeBytes(byte abyte0[], int i, int j) {
		for(int k = j; k &lt; j + i; k++)
			buffer[currentOffset++] = abyte0[k];

	}

	public void writeFrameSize(int i) {
		buffer[currentOffset - i - 1] = (byte)i;
	}

	public void writeFrameSizeWord(int i) {
		buffer[currentOffset - i - 2] = (byte)(i &gt;&gt; 8);
		buffer[currentOffset - i - 1] = (byte)i;
	}

	public int readUnsignedByte() {
		return buffer[currentOffset++] &amp; 0xff;
	}

	public byte readSignedByte() {
		return buffer[currentOffset++];
	}

	public int readUnsignedWord() {
		currentOffset += 2;
		return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
	}

	public int readSignedWord() {
		currentOffset += 2;
		int i = ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
		if(i &gt; 32767) {
			i -= 0x10000;
		}
		return i;
	}

	public int readDWord() {
		currentOffset += 4;
		return ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
	}

	public long readQWord() {
		long l = (long)readDWord() &amp; 0xffffffffL;
		long l1 = (long)readDWord() &amp; 0xffffffffL;
		return (l &lt;&lt; 32) + l1;
	}
	public long readQWord2() {
		currentOffset += 8;
		return (((buffer[currentOffset - 8] &amp; 0xff) &lt;&lt; 56) + ((buffer[currentOffset - 7] &amp; 0xff) &lt;&lt; 48) + ((buffer[currentOffset - 6] &amp; 0xff) &lt;&lt; 40) + ((buffer[currentOffset - 5] &amp; 0xff) &lt;&lt; 32) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff));
	}

	public java.lang.String readString() {
		int i = currentOffset;
		while(buffer[currentOffset++] != 10) ;
		return new String(buffer, i, currentOffset - i - 1);
	}

	public void readBytes(byte abyte0[], int i, int j) {
		for(int k = j; k &lt; j + i; k++)
			abyte0[k] = buffer[currentOffset++];

	}

	public void initBitAccess() {
		bitPosition = currentOffset * 8;
	}

	public void writeBits(int numBits, int value) {
		int bytePos = bitPosition &gt;&gt; 3;
		int bitOffset = 8 - (bitPosition &amp; 7);
		bitPosition += numBits;

		for(; numBits &gt; bitOffset; bitOffset = 8) {
			buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];		// mask out the desired area
			buffer[bytePos++] |= (value &gt;&gt; (numBits-bitOffset)) &amp; bitMaskOut[bitOffset];

			numBits -= bitOffset;
		}
		if(numBits == bitOffset) {
			buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];
			buffer[bytePos] |= value &amp; bitMaskOut[bitOffset];
		} else {
			buffer[bytePos] &amp;= ~ (bitMaskOut[numBits]&lt;&lt;(bitOffset - numBits));
			buffer[bytePos] |= (value&amp;bitMaskOut[numBits]) &lt;&lt; (bitOffset - numBits);
		}
	}

	public void finishBitAccess() {
		currentOffset = (bitPosition + 7) / 8;
	}

	public byte buffer[] = null;
	public int currentOffset = 0;
	public int bitPosition = 0;

	public static int bitMaskOut[] = new int[32];
	static {
		for(int i = 0; i &lt; 32; i++)
			bitMaskOut[i] = (1 &lt;&lt; i) - 1;
	}

	public Cryption packetEncryption = null;

}</description>
    
    <lastBuildDate>Sat, 13 Jan 2007 00:30:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@1m_3m0 1m 3m0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/1m_3m0">@1m_3m0</a> wrote:</p>
          <blockquote>
              <p>don’t know anything about changing xp can’t help sorry  <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=6" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/6</link>
        <pubDate>Sat, 13 Jan 2007 00:30:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-6</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@Wolf_Carmen Wolf_Carmen]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wolf_carmen">@Wolf_Carmen</a> wrote:</p>
          <blockquote>
              <p>ok well…ummm when i do the exp change it’s not working for me <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=6" title=":frowning:" class="emoji" alt=":frowning:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/5</link>
        <pubDate>Sat, 13 Jan 2007 00:27:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-5</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@1m_3m0 1m 3m0]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/1m_3m0">@1m_3m0</a> wrote:</p>
          <blockquote>
              <p>it’s nothing important it’s just something that’s there and always will be just ignore it and “ress a kaey” <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"> and get server building <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/4</link>
        <pubDate>Sat, 13 Jan 2007 00:23:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-4</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@Wolf_Carmen Wolf_Carmen]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wolf_carmen">@Wolf_Carmen</a> wrote:</p>
          <blockquote>
              <p>What do you mean use the code tags? O.o? I need like…an example…it’s the only way i can understand…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/3</link>
        <pubDate>Sat, 13 Jan 2007 00:18:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-3</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@Javacisnotrecognized _^_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/javacisnotrecognized">@Javacisnotrecognized</a> wrote:</p>
          <blockquote>
              <p>Fist off, use the code tags. And second off that doesn’t mean anything important to you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/2</link>
        <pubDate>Sat, 13 Jan 2007 00:16:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-2</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
      <item>
        <title>Compiler Help please?</title>
        <dc:creator><![CDATA[@Wolf_Carmen Wolf_Carmen]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wolf_carmen">@Wolf_Carmen</a> wrote:</p>
          <blockquote>
              <p>My compiler says ( when i try to compile it )</p>
<p>Note: stream.java uses or overrides a deprecated API.<br>
Note: Recompile with -Xlint:deprecation for details.<br>
press any key to continue…</p>
<p>What does this mean? [br][size=1]Posted on: January 12, 2007, 01:14:05 PM[/size][hr]And this is my stream.java</p>
<p>public class stream {</p>
<pre><code>public stream() {
}

public stream(byte abyte0[]) {
	buffer = abyte0;
	currentOffset = 0;
}

public byte readSignedByteA() {
	return (byte)(buffer[currentOffset++] - 128);
}

public byte readSignedByteC() {
	return (byte)(-buffer[currentOffset++]);
}

public byte readSignedByteS() {
	return (byte)(128 - buffer[currentOffset++]);
}

public int readUnsignedByteA() {
	return buffer[currentOffset++] - 128 &amp; 0xff;
}

public int readUnsignedByteC() {
	return -buffer[currentOffset++] &amp; 0xff;
}

public int readUnsignedByteS() {
	return 128 - buffer[currentOffset++] &amp; 0xff;
}

public void writeByteA(int i) {
	buffer[currentOffset++] = (byte)(i + 128);
}

public void writeByteS(int i) {
	buffer[currentOffset++] = (byte)(128 - i);
}

public void writeByteC(int i) {
	buffer[currentOffset++] = (byte)(-i);
}

public int readSignedWordBigEndian() {
	currentOffset += 2;
	int i = ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}

public int readSignedWordA() {
	currentOffset += 2;
	int i = ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] - 128 &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}

public int readSignedWordBigEndianA() {
	currentOffset += 2;
	int i = ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] - 128 &amp; 0xff);
	if(i &gt; 32767)
		i -= 0x10000;
	return i;
}

public int readUnsignedWordBigEndian() {
	currentOffset += 2;
	return ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
}

public int readUnsignedWordA() {
	currentOffset += 2;
	return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] - 128 &amp; 0xff);
}

public int readUnsignedWordBigEndianA() {
	currentOffset += 2;
	return ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] - 128 &amp; 0xff);
}

public void writeWordBigEndianA(int i) {
	buffer[currentOffset++] = (byte)(i + 128);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
}

public void writeWordA(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)(i + 128);
}

public void writeWordBigEndian_dup(int i) {
	buffer[currentOffset++] = (byte)i;
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
}

public int readDWord_v1() {
	currentOffset += 4;
	return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 3] &amp; 0xff);
}

public int readDWord_v2() {
	currentOffset += 4;
	return ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 1] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 2] &amp; 0xff);
}

public void writeDWord_v1(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)i;
	buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
}

public void writeDWord_v2(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
	buffer[currentOffset++] = (byte)i;
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
}

public void readBytes_reverse(byte abyte0[], int i, int j) {
	for(int k = (j + i) - 1; k &gt;= j; k--) {
		abyte0[k] = buffer[currentOffset++];

	}
}

public void writeBytes_reverse(byte abyte0[], int i, int j) {
	for(int k = (j + i) - 1; k &gt;= j; k--)
		buffer[currentOffset++] = abyte0[k];

}

public void readBytes_reverseA(byte abyte0[], int i, int j) {
	for(int k = (j + i) - 1; k &gt;= j; k--)
		abyte0[k] = (byte)(buffer[currentOffset++] - 128);

}

public void writeBytes_reverseA(byte abyte0[], int i, int j) {
	for(int k = (j + i) - 1; k &gt;= j; k--)
		buffer[currentOffset++] = (byte)(abyte0[k] + 128);

}

public void createFrame(int id) {
	buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
}

private static final int frameStackSize = 10;
private int frameStackPtr = -1;
private int frameStack[] = new int[frameStackSize];
public void createFrameVarSize(int id){ // creates a variable sized frame
	buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
	buffer[currentOffset++] = 0;		// placeholder for size byte
	if(frameStackPtr &gt;= frameStackSize-1) {
		throw new RuntimeException("Stack overflow");
	}
	else frameStack[++frameStackPtr] = currentOffset;
}
public void createFrameVarSizeWord(int id) { // creates a variable sized frame
	buffer[currentOffset++] = (byte)(id + packetEncryption.getNextKey());
	writeWord(0);		// placeholder for size word
	if(frameStackPtr &gt;= frameStackSize-1) {
		throw new RuntimeException("Stack overflow");
	}
	else frameStack[++frameStackPtr] = currentOffset;
}

public void endFrameVarSize() {// ends a variable sized frame
	if(frameStackPtr &lt; 0) throw new RuntimeException("Stack empty");
	else writeFrameSize(currentOffset - frameStack[frameStackPtr--]);
}

public void endFrameVarSizeWord() { // ends a variable sized frame
	if(frameStackPtr &lt; 0) throw new RuntimeException("Stack empty");
	else writeFrameSizeWord(currentOffset - frameStack[frameStackPtr--]);
}

public void writeByte(int i) {
	buffer[currentOffset++] = (byte)i;
}

public void writeWord(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)i;
}

public void writeWordBigEndian(int i) {
	buffer[currentOffset++] = (byte)i;
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
}

public void write3Byte(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)i;
}

public void writeDWord(int i) {
	buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)i;
}

public void writeDWordBigEndian(int i) {
	buffer[currentOffset++] = (byte)i;
	buffer[currentOffset++] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 16);
	buffer[currentOffset++] = (byte)(i &gt;&gt; 24);
}

public void writeQWord(long l) {
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 56);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 48);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 40);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 32);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 24);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 16);
	buffer[currentOffset++] = (byte)(int)(l &gt;&gt; 8);
	buffer[currentOffset++] = (byte)(int)l;
}

public void writeString(java.lang.String s) {
	s.getBytes(0, s.length(), buffer, currentOffset);
	currentOffset += s.length();
	buffer[currentOffset++] = 10;
}

public void writeBytes(byte abyte0[], int i, int j) {
	for(int k = j; k &lt; j + i; k++)
		buffer[currentOffset++] = abyte0[k];

}

public void writeFrameSize(int i) {
	buffer[currentOffset - i - 1] = (byte)i;
}

public void writeFrameSizeWord(int i) {
	buffer[currentOffset - i - 2] = (byte)(i &gt;&gt; 8);
	buffer[currentOffset - i - 1] = (byte)i;
}

public int readUnsignedByte() {
	return buffer[currentOffset++] &amp; 0xff;
}

public byte readSignedByte() {
	return buffer[currentOffset++];
}

public int readUnsignedWord() {
	currentOffset += 2;
	return ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
}

public int readSignedWord() {
	currentOffset += 2;
	int i = ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
	if(i &gt; 32767) {
		i -= 0x10000;
	}
	return i;
}

public int readDWord() {
	currentOffset += 4;
	return ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff);
}

public long readQWord() {
	long l = (long)readDWord() &amp; 0xffffffffL;
	long l1 = (long)readDWord() &amp; 0xffffffffL;
	return (l &lt;&lt; 32) + l1;
}
public long readQWord2() {
	currentOffset += 8;
	return (((buffer[currentOffset - 8] &amp; 0xff) &lt;&lt; 56) + ((buffer[currentOffset - 7] &amp; 0xff) &lt;&lt; 48) + ((buffer[currentOffset - 6] &amp; 0xff) &lt;&lt; 40) + ((buffer[currentOffset - 5] &amp; 0xff) &lt;&lt; 32) + ((buffer[currentOffset - 4] &amp; 0xff) &lt;&lt; 24) + ((buffer[currentOffset - 3] &amp; 0xff) &lt;&lt; 16) + ((buffer[currentOffset - 2] &amp; 0xff) &lt;&lt; 8) + (buffer[currentOffset - 1] &amp; 0xff));
}

public java.lang.String readString() {
	int i = currentOffset;
	while(buffer[currentOffset++] != 10) ;
	return new String(buffer, i, currentOffset - i - 1);
}

public void readBytes(byte abyte0[], int i, int j) {
	for(int k = j; k &lt; j + i; k++)
		abyte0[k] = buffer[currentOffset++];

}

public void initBitAccess() {
	bitPosition = currentOffset * 8;
}

public void writeBits(int numBits, int value) {
	int bytePos = bitPosition &gt;&gt; 3;
	int bitOffset = 8 - (bitPosition &amp; 7);
	bitPosition += numBits;

	for(; numBits &gt; bitOffset; bitOffset = 8) {
		buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];		// mask out the desired area
		buffer[bytePos++] |= (value &gt;&gt; (numBits-bitOffset)) &amp; bitMaskOut[bitOffset];

		numBits -= bitOffset;
	}
	if(numBits == bitOffset) {
		buffer[bytePos] &amp;= ~ bitMaskOut[bitOffset];
		buffer[bytePos] |= value &amp; bitMaskOut[bitOffset];
	} else {
		buffer[bytePos] &amp;= ~ (bitMaskOut[numBits]&lt;&lt;(bitOffset - numBits));
		buffer[bytePos] |= (value&amp;bitMaskOut[numBits]) &lt;&lt; (bitOffset - numBits);
	}
}

public void finishBitAccess() {
	currentOffset = (bitPosition + 7) / 8;
}

public byte buffer[] = null;
public int currentOffset = 0;
public int bitPosition = 0;

public static int bitMaskOut[] = new int[32];
static {
	for(int i = 0; i &lt; 32; i++)
		bitMaskOut[i] = (1 &lt;&lt; i) - 1;
}

public Cryption packetEncryption = null;
</code></pre>
<p>}</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/compiler-help-please/46896/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/compiler-help-please/46896/1</link>
        <pubDate>Sat, 13 Jan 2007 00:14:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-46896-1</guid>
        <source url="https://forum.moparisthebest.com/t/compiler-help-please/46896.rss">Compiler Help please?</source>
      </item>
  </channel>
</rss>
