<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>ByteQueue</title>
    <link>https://forum.moparisthebest.com/t/bytequeue/218845</link>
    <description>For the NIO networking API I developed, when there are bytes available to read on a channel the NIO thread reads the bytes into a ByteBuffer, then copies then into holder. The holder is technically a Queue, but I need a much better way then what I have right now.

What I have right now is a real piece of crap, and here it is:
[code]
/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package net.allgofree.nio.BlitzIO;
import java.nio.ByteBuffer;

/**
 * A container for bytes read from the actual channel. Stores bytes TEMPORARILY.
 * @author ry60003333
 */
public class ByteHolder {
    
    public ByteHolder(){}
    
    /**
     * The byte array that holds the actual bytes.
     */
    private byte[] holdBuffer = new byte[0];
    
    /**
     * Append bytes to the end of this ByteHolder.
     * @param byteBuffer The ByteBuffer object holding the bytes to be added.
     * @param Amount The amount of bytes to add.
     */
    public void appendBytes(ByteBuffer byteBuffer, int Amount)
    {
        byte[] theBytes = byteBuffer.array();
        byte[] newBytes = new byte[Amount];
        System.arraycopy(theBytes, 0, newBytes, 0, Amount);
        appendBytes(newBytes);
    }
    
    /**
     * Append bytes to the end of this ByteHolder.
     * @param bytesToAppend The bytes to append.
     */
    public void appendBytes(byte[] bytesToAppend)
    {
        synchronized(holdBuffer)
        {
            byte[] temp = new byte[bytesToAppend.length + holdBuffer.length];
            System.arraycopy(holdBuffer, 0, temp, 0, holdBuffer.length);
            System.arraycopy(bytesToAppend, 0, temp, holdBuffer.length, bytesToAppend.length);
            holdBuffer = temp;
            //System.out.println(&quot;Appended &quot; + bytesToAppend.length + &quot; bytes. Total: &quot; + holdBuffer.length + &quot; First byte: &quot; + holdBuffer[0]);
        }
    }
    
    /**
     * Read the next byte from this ByteHolder.
     * @return The next byte read from this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte read() throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (1 &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            byte firstByte = holdBuffer[0];
            byte[] newArray = new byte[holdBuffer.length-1];
            System.arraycopy(holdBuffer, 1, newArray, 0, newArray.length);
            holdBuffer = newArray;
            
            //StackTraceElement[] trace = new Throwable().getStackTrace();
            
            //System.out.println(&quot;Read 1 by &quot; + trace[1].getMethodName());
            return firstByte;
        }
    }
    
    /**
     * Read an Amount of bytes from this holder into the specified array.
     * @param byteHolder The array to read the bytes into.
     * @param startPoint The point to start at in the array.
     * @param Amount The amount of bytes to read.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public void read(byte[] byteHolder, int startPoint, int Amount) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (Amount &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            System.arraycopy(holdBuffer, 0, byteHolder, startPoint, Amount);

            byte[] newArray = new byte[holdBuffer.length-Amount];
            System.arraycopy(holdBuffer, Amount, newArray, 0, newArray.length);
            holdBuffer = newArray;
            
            //StackTraceElement[] trace = new Throwable().getStackTrace();
            //new Throwable().printStackTrace();
            
            //System.out.println(&quot;Read &quot; + Amount + &quot; by &quot; + trace[1].getMethodName());
        }
    }
    
    /**
     * Peek at the next byte from this ByteHolder. 
     * @return The next byte in this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte peek() throws NotEnoughBytesException
    {
        return peek(0);
    }
    
    /**
     * Peek at the next byte from this ByteHolder.
     * @param bufferOffset The offset of the byte to peek at.
     * @return The next byte in this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte peek(int bufferOffset) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (bufferOffset+1 &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            return holdBuffer[bufferOffset];
        }
    }
    
    /**
     * Peek at an Amount of bytes from this holder and put them into the specified array.
     * @param byteHolder The array to put the bytes into.
     * @param startPoint The point to start at in the array.
     * @param Amount The amount of bytes to peek at.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public void peek(byte[] byteHolder, int startPoint, int Amount) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (Amount &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            System.arraycopy(holdBuffer, 0, byteHolder, startPoint, Amount);
        }
    }
    
    /**
     * How many bytes are available to be read from this ByteHolder.
     * @return How many bytes are available to be read from this ByteHolder.
     */
    public int available()
    {
        synchronized(holdBuffer)
        {
            return holdBuffer.length;
        }
    }
    
}
[/code]

I was thinking about using something like this:
[code]
private Queue&lt;Byte&gt; byteQueue;
[/code]
But that seems like a big problem also for reading and peeking at multiple bytes. And it has to be synchronized obviously, because the NIO thread and the actual streams have to access the holder to add/get bytes. Any ideas?</description>
    
    <lastBuildDate>Mon, 14 Jul 2008 07:35:07 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/bytequeue/218845.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@BAsh BAsh]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash">@BAsh</a> wrote:</p>
          <blockquote>
              <p>Copy the first half then loop around and copy the rest. You should only use that to copy data in and out. The rest of the time you should be using indexes so you don’t need to move bytes in the buffer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/7</link>
        <pubDate>Mon, 14 Jul 2008 07:35:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-7</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@ry60003333 ry60003333]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ry60003333">@ry60003333</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="2" data-topic="218845">
<div class="title">
<div class="quote-controls"></div>
 frank_:</div>
<blockquote>
<p>use a circular buffer</p>
</blockquote>
</aside>
<p>Seems like the best choice.</p>
<aside class="quote no-group quote-modified" data-post="4" data-topic="218845">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/bash/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> BAsh:</div>
<blockquote>
<p>How does it work if the message is longer than the length of the circular buffer? Wrapping round wouldn’t be a very good idea as you would destroy data.</p>
</blockquote>
</aside>
<p>Increase the buffer size, copy and format the old data and add the new data. I think. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>[quote=“TeleNubby, post:3, topic:218845”]<code>
public void appendBytes(ByteBuffer byteBuffer, int Amount)
</code><br>
int <span class="bbcode-b">Amount</span>… No! MoparScaper conventions. <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=6" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>But, I don’t really understand your question (I’m spacing out). I did, though, create my own “buffer” to use when I created my proxy server, as the API hogged up too much memory when I tried using it for the same purpose. <a href="http://www.moparisthebest.com/smf/index.php/topic,281139.0.html%5B/quote%5D" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,281139.0.html[/quote]</a><br>
Yea that was from a while ago and I wrote it fast, which is probably why is sucks so much. I’ll take a look at that.</p>
<p>Edit: Just ran into a problem. System.arraycopy is the fastest way to append an array of bytes, but I can’t loop around to the beginning of the buffer with that. Any ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/6</link>
        <pubDate>Mon, 14 Jul 2008 04:40:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-6</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>[quote=“BAsh, post:4, topic:218845”]How does it work if the message is longer than the length of the circular buffer? Wrapping round wouldn’t be a very good idea as you would destroy data.[/quote]dont put it into the buffer… the whole idea of a buffer is to have it big enough to fit your messages</p>
<p>whoever deleted the image, you deserve to be stabbed</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/5</link>
        <pubDate>Fri, 11 Jul 2008 00:15:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-5</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@BAsh BAsh]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash">@BAsh</a> wrote:</p>
          <blockquote>
              <p>How does it work if the message is longer than the length of the circular buffer? Wrapping round wouldn’t be a very good idea as you would destroy data.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/4</link>
        <pubDate>Fri, 11 Jul 2008 00:08:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-4</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@TeleNubby TeleNubby]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/telenubby">@TeleNubby</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:1, topic:218951”]Although that was spam… I’m gonna leave it because it was fucking win.[/quote]reported and rep–!!!11</p>
<pre><code class="lang-auto">public void appendBytes(ByteBuffer byteBuffer, int Amount)</code></pre>
<p>int <span class="bbcode-b">Amount</span>… No! MoparScaper conventions. <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=6" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>But, I don’t really understand your question (I’m spacing out). I did, though, create my own “buffer” to use when I created my proxy server, as the API hogged up too much memory when I tried using it for the same purpose. <a href="http://www.moparisthebest.com/smf/index.php/topic,281139.0.html" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,281139.0.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/3</link>
        <pubDate>Thu, 10 Jul 2008 22:53:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-3</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>use a circular buffer</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/2</link>
        <pubDate>Thu, 10 Jul 2008 11:01:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-2</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
      <item>
        <title>ByteQueue</title>
        <dc:creator><![CDATA[@ry60003333 ry60003333]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ry60003333">@ry60003333</a> wrote:</p>
          <blockquote>
              <p>For the NIO networking API I developed, when there are bytes available to read on a channel the NIO thread reads the bytes into a ByteBuffer, then copies then into holder. The holder is technically a Queue, but I need a much better way then what I have right now.</p>
<p>What I have right now is a real piece of crap, and here it is:</p>
<pre><code class="lang-auto">/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

package net.allgofree.nio.BlitzIO;
import java.nio.ByteBuffer;

/**
 * A container for bytes read from the actual channel. Stores bytes TEMPORARILY.
 * @author ry60003333
 */
public class ByteHolder {
    
    public ByteHolder(){}
    
    /**
     * The byte array that holds the actual bytes.
     */
    private byte[] holdBuffer = new byte[0];
    
    /**
     * Append bytes to the end of this ByteHolder.
     * @param byteBuffer The ByteBuffer object holding the bytes to be added.
     * @param Amount The amount of bytes to add.
     */
    public void appendBytes(ByteBuffer byteBuffer, int Amount)
    {
        byte[] theBytes = byteBuffer.array();
        byte[] newBytes = new byte[Amount];
        System.arraycopy(theBytes, 0, newBytes, 0, Amount);
        appendBytes(newBytes);
    }
    
    /**
     * Append bytes to the end of this ByteHolder.
     * @param bytesToAppend The bytes to append.
     */
    public void appendBytes(byte[] bytesToAppend)
    {
        synchronized(holdBuffer)
        {
            byte[] temp = new byte[bytesToAppend.length + holdBuffer.length];
            System.arraycopy(holdBuffer, 0, temp, 0, holdBuffer.length);
            System.arraycopy(bytesToAppend, 0, temp, holdBuffer.length, bytesToAppend.length);
            holdBuffer = temp;
            //System.out.println("Appended " + bytesToAppend.length + " bytes. Total: " + holdBuffer.length + " First byte: " + holdBuffer[0]);
        }
    }
    
    /**
     * Read the next byte from this ByteHolder.
     * @return The next byte read from this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte read() throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (1 &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            byte firstByte = holdBuffer[0];
            byte[] newArray = new byte[holdBuffer.length-1];
            System.arraycopy(holdBuffer, 1, newArray, 0, newArray.length);
            holdBuffer = newArray;
            
            //StackTraceElement[] trace = new Throwable().getStackTrace();
            
            //System.out.println("Read 1 by " + trace[1].getMethodName());
            return firstByte;
        }
    }
    
    /**
     * Read an Amount of bytes from this holder into the specified array.
     * @param byteHolder The array to read the bytes into.
     * @param startPoint The point to start at in the array.
     * @param Amount The amount of bytes to read.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public void read(byte[] byteHolder, int startPoint, int Amount) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (Amount &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            System.arraycopy(holdBuffer, 0, byteHolder, startPoint, Amount);

            byte[] newArray = new byte[holdBuffer.length-Amount];
            System.arraycopy(holdBuffer, Amount, newArray, 0, newArray.length);
            holdBuffer = newArray;
            
            //StackTraceElement[] trace = new Throwable().getStackTrace();
            //new Throwable().printStackTrace();
            
            //System.out.println("Read " + Amount + " by " + trace[1].getMethodName());
        }
    }
    
    /**
     * Peek at the next byte from this ByteHolder. 
     * @return The next byte in this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte peek() throws NotEnoughBytesException
    {
        return peek(0);
    }
    
    /**
     * Peek at the next byte from this ByteHolder.
     * @param bufferOffset The offset of the byte to peek at.
     * @return The next byte in this holder.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public byte peek(int bufferOffset) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (bufferOffset+1 &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            return holdBuffer[bufferOffset];
        }
    }
    
    /**
     * Peek at an Amount of bytes from this holder and put them into the specified array.
     * @param byteHolder The array to put the bytes into.
     * @param startPoint The point to start at in the array.
     * @param Amount The amount of bytes to peek at.
     * @throws net.allgofree.nio.BlitzIO.NotEnoughBytesException
     */
    public void peek(byte[] byteHolder, int startPoint, int Amount) throws NotEnoughBytesException
    {
        synchronized(holdBuffer)
        {
            if (Amount &gt; available())
            {
                throw new NotEnoughBytesException();
            }
            System.arraycopy(holdBuffer, 0, byteHolder, startPoint, Amount);
        }
    }
    
    /**
     * How many bytes are available to be read from this ByteHolder.
     * @return How many bytes are available to be read from this ByteHolder.
     */
    public int available()
    {
        synchronized(holdBuffer)
        {
            return holdBuffer.length;
        }
    }
    
}</code></pre>
<p>I was thinking about using something like this:</p>
<pre><code class="lang-auto">private Queue&lt;Byte&gt; byteQueue;</code></pre>
<p>But that seems like a big problem also for reading and peeking at multiple bytes. And it has to be synchronized obviously, because the NIO thread and the actual streams have to access the holder to add/get bytes. Any ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bytequeue/218845/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bytequeue/218845/1</link>
        <pubDate>Thu, 10 Jul 2008 09:13:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-218845-1</guid>
        <source url="https://forum.moparisthebest.com/t/bytequeue/218845.rss">ByteQueue</source>
      </item>
  </channel>
</rss>
