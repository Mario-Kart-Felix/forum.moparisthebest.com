<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Auto Cache Downloader Crashes</title>
    <link>https://forum.moparisthebest.com/t/auto-cache-downloader-crashes/480706</link>
    <description>Hello, I have just been trying to finish up my client and when I came to test the cache downloader, my client freezes with no errors in the console.

Here is my code:

[CODE]import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.net.URLConnection;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

public class CacheDownloader {

   private Client client;
   private final int BUFFER = 1024;
   private final int VERSION = 1;
   private String cacheLink = &quot;Cache link&quot;; // obviously i have put my download link here, i just removed it so i could post it to you guys :)
   private String fileToExtract = this.getCacheDir() + this.getArchivedName();


   public CacheDownloader(Client client) {
      this.client = client;
   }

   private void drawLoadingText(String text) {
      this.client.drawLoadingText(35, text);
      System.out.println(text);
   }

   private void drawLoadingText(int amount, String text) {
      this.client.drawLoadingText(amount, text);
      System.out.println(text);
   }

   private String getCacheDir() {
      return SignLink.findcachedir();
   }

   private String getCacheLink() {
      return this.cacheLink;
   }

   private int getCacheVersion() {
      return 1;
   }

   public CacheDownloader downloadCache() {
      try {
         File e = new File(this.getCacheDir());
         File version = new File(this.getCacheDir() + &quot;/cacheVersion&quot; + this.getCacheVersion() + &quot;.dat&quot;);
         BufferedWriter versionFile;
         if(!e.exists()) {
            this.downloadFile(this.getCacheLink(), this.getArchivedName());
            this.unZip();
            System.out.println(&quot;UNZIP&quot;);
            versionFile = new BufferedWriter(new FileWriter(this.getCacheDir() + &quot;/cacheVersion&quot; + this.getCacheVersion() + &quot;.dat&quot;));
            versionFile.close();
         } else {
            if(version.exists()) {
               return null;
            }

            this.downloadFile(this.getCacheLink(), this.getArchivedName());
            this.unZip();
            System.out.println(&quot;UNZIP&quot;);
            versionFile = new BufferedWriter(new FileWriter(this.getCacheDir() + &quot;/cacheVersion&quot; + this.getCacheVersion() + &quot;.dat&quot;));
            versionFile.close();
         }
      } catch (Exception var4) {
         ;
      }

      return null;
   }

   private void downloadFile(String adress, String localFileName) {
      BufferedOutputStream out = null;
      InputStream in = null;

      try {
         URL ioe = new URL(adress);
         out = new BufferedOutputStream(new FileOutputStream(this.getCacheDir() + &quot;/&quot; + localFileName));
         URLConnection conn = ioe.openConnection();
         in = conn.getInputStream();
         byte[] data = new byte[1024];
         long numWritten = 0L;
         int length = conn.getContentLength();

         int numRead;
         while((numRead = in.read(data)) != -1) {
            out.write(data, 0, numRead);
            numWritten += (long)numRead;
            int percentage = (int)((double)numWritten / (double)length * 100.0D);
            this.drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
         }

         System.out.println(localFileName + &quot;\t&quot; + numWritten);
         this.drawLoadingText(&quot;Finished downloading &quot; + this.getArchivedName() + &quot;!&quot;);
      } catch (Exception var21) {
         var21.printStackTrace();
      } finally {
         try {
            if(in != null) {
               in.close();
            }

            if(out != null) {
               out.close();
            }
         } catch (IOException var20) {
            ;
         }

      }

   }

   private String getArchivedName() {
      int lastSlashIndex = this.getCacheLink().lastIndexOf(47);
      if(lastSlashIndex &gt;= 0 &amp;&amp; lastSlashIndex &lt; this.getCacheLink().length() - 1) {
         return this.getCacheLink().substring(lastSlashIndex + 1);
      } else {
         System.err.println(&quot;Download link.&quot;);
         return &quot;&quot;;
      }
   }

   private void unZip() {
      try {
         BufferedInputStream e = new BufferedInputStream(new FileInputStream(this.fileToExtract));

         ZipInputStream zin;
         ZipEntry e1;
         for(zin = new ZipInputStream(e); (e1 = zin.getNextEntry()) != null; System.out.println(&quot;unzipping2 &quot; + e1.getName())) {
            if(e1.isDirectory()) {
               (new File(this.getCacheDir() + e1.getName())).mkdir();
            } else {
               if(e1.getName().equals(this.fileToExtract)) {
                  this.unzip(zin, this.fileToExtract);
                  break;
               }

               this.unzip(zin, this.getCacheDir() + e1.getName());
            }
         }

         zin.close();
      } catch (Exception var4) {
         var4.printStackTrace();
      }

   }

   private void unzip(ZipInputStream zin, String s) throws IOException {
      FileOutputStream out = new FileOutputStream(s);
      byte[] b = new byte[1024];
      boolean len = false;

      int len1;
      while((len1 = zin.read(b)) != -1) {
         out.write(b, 0, len1);
      }

      out.close();
   }
}
[/CODE]

And before someone says, yes I have added my cache link in cacheLink = &quot;&quot;; i just removed it so i could post it here. I use dropbox as my cache storage and if I enter the link into a browser i get the direct download (e.g. [url=http://dl.dropbox.com/blahblahblah/cache.zip]http://dl.dropbox.com/blahblahblah/cache.zip[/url]). So if anyone could help that would be very nice :)
Oh and all that i have in my console is
[CODE]Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%[/CODE]

Strangely, only 16kb of the cache&#39;s download every time?

So I decided to change from a cacherdownloader to a gameupdater that checks what files you have and what files you need so you do not need to download the whole zipped cache files. This does the exact same thing too! 16kb!

[code]import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URL;
import java.net.URLConnection;
import java.security.MessageDigest;

import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;

import org.w3c.dom.Document;
import org.w3c.dom.Element;

/**
 * Game Updater, Update from CacheDownloader
 * 
 * @author SoFlawLess_
 * @creditto 
 *           http://www.mkyong.com/java/how-to-generate-a-file-checksum-value-in-
 *           java/ for md5 file checksum
 */
public class GameUpdater {

	// Uploaded folder containing the update.php file
	private final static String SERVER = &quot;http://127.0.0.1/game_update/&quot;;

	// Cache location
	// Make sure your findcachedir() method ends with a forward slash (/)
	private final static String CACHE = SignLink.findcachedir();

	private GameUpdater() {

	}

	/**
	 * Checks for updates
	 * 
	 * @param c
	 */
	public static void checkForUpdates(Client c) {
		c.drawLoadingText(0, &quot;Checking for updates&quot;);

		if (!SERVER.endsWith(&quot;/&quot;)) {
			System.err.println(&quot;Server must end with a forward slash (/)&quot;);
			return;
		} else if (!SERVER.startsWith(&quot;http://&quot;)) {
			System.err.println(&quot;Server must start with http://&quot;);
			return;
		}

		try {
			DocumentBuilderFactory documentbuilderfactory = DocumentBuilderFactory
					.newInstance();
			DocumentBuilder documentbuilder = documentbuilderfactory
					.newDocumentBuilder();
			Document document = documentbuilder.parse(new URL(SERVER
					.concat(&quot;update.php&quot;)).openStream());
			org.w3c.dom.NodeList nodelist = document
					.getElementsByTagName(&quot;Part&quot;);

			cleanCache(c, nodelist, new File(CACHE));
		} catch (Exception exception) {
			exception.printStackTrace();
		}
	}

	/**
	 * Deletes files and folders that are not needed
	 * 
	 * @param c
	 * @param list
	 * @param file
	 */
	private static void cleanCache(Client c, org.w3c.dom.NodeList list,
			File file) {
		File[] directory = file.listFiles();

		FileLoop: for (File f : directory) {
			if (f.isDirectory()) {
				cleanCache(c, list, f);
			} else {
				for (int j = 0; j &lt; list.getLength(); j++) {
					org.w3c.dom.Node node = list.item(j);

					if (node.getNodeType() != 1) {
						continue;
					}

					Element e = (Element) node;

					String filePath = CACHE.concat(getElement(e, &quot;Name&quot;));
					File filePath_ = new File(filePath);
					String adress = SERVER.concat(&quot;cache/&quot;
							+ getElement(e, &quot;Name&quot;).replaceAll(&quot;\\s&quot;, &quot;%20&quot;));

					if (f.equals(filePath_)) {
						String currentChecksum = getMD5Checksum(f
								.getAbsolutePath());

						if (currentChecksum != null) {
							String checksum = getElement(e, &quot;Hash&quot;);

							if (!checksum.equals(currentChecksum)) {
								downloadFile(c, adress, filePath_);
							}
						}
						continue FileLoop;
					} else if (!filePath_.exists()) {
						int index = filePath_.getAbsolutePath().lastIndexOf(
								File.separator);

						if (index != -1) {
							File checkFolder = new File(filePath_
									.getAbsolutePath().substring(0, index));

							if (!checkFolder.exists()) {
								checkFolder.mkdirs();
							}

						}

						downloadFile(c, adress, filePath_);
					}
				}

				f.delete();

				int index = f.getAbsolutePath().lastIndexOf(File.separator);

				if (index != -1) {
					File checkFolder = new File(f.getAbsolutePath().substring(
							0, index));

					if (checkFolder.listFiles().length == 0) {
						checkFolder.delete();
					}

				}
			}
		}
	}

	/**
	 * Download a file :D Credits to whoever the hell added it or where it came
	 * from in the first CacheDownloader
	 * 
	 * @param c
	 * @param adress
	 * @param filePath_
	 */
	private static void downloadFile(Client c, String adress, File filePath_) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		String fileName = null;
		int index = adress.lastIndexOf(&#39;/&#39;);

		if (index != -1) {
			fileName = adress.substring(index + 1, adress.length());
		}

		try {
			URL url = new URL(adress);
			out = new BufferedOutputStream(new FileOutputStream(filePath_));
			conn = url.openConnection();
			in = conn.getInputStream();
			byte[] data = new byte[1024];
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();
			while ((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;
				int percentage = (int) (((double) numWritten / (double) length) * 100D);
				c.drawLoadingText(percentage,
						&quot;Updating &quot; + fileName.replaceAll(&quot;%20&quot;, &quot; &quot;) + &quot; ... &quot;
								+ percentage + &quot;%&quot;);
			}
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}
	}

	/**
	 * Faster way of getting an element value
	 * 
	 * @param e
	 * @param key
	 * @return
	 */
	private static String getElement(Element e, String key) {
		return ((Element) e.getElementsByTagName(key).item(0)).getChildNodes()
				.item(0).getNodeValue();
	}

	/**
	 * 
	 * @param filename
	 * @return
	 */
	public static String getMD5Checksum(String fileName) {
		String result = null;
		try {

			MessageDigest md = MessageDigest.getInstance(&quot;MD5&quot;);
			FileInputStream fis = new FileInputStream(fileName);
			byte[] dataBytes = new byte[1024];

			int nread = 0;

			while ((nread = fis.read(dataBytes)) != -1) {
				md.update(dataBytes, 0, nread);
			}
			;

			byte[] mdbytes = md.digest();

			// convert the byte to hex format
			StringBuffer sb = new StringBuffer(&quot;&quot;);
			for (int i = 0; i &lt; mdbytes.length; i++) {
				sb.append(Integer.toString((mdbytes[i] &amp; 0xff) + 0x100, 16)
						.substring(1));
			}

			result = sb.toString();
		} catch (Exception e) {

		}
		return result;
	}

}[/code]

Is there anything that could effect the way cache&#39;s are downloaded? I&#39;m confused.</description>
    
    <lastBuildDate>Wed, 30 Jan 2013 03:19:14 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/auto-cache-downloader-crashes/480706.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Auto Cache Downloader Crashes</title>
        <dc:creator><![CDATA[@ProTayToe ProTayToe]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/protaytoe">@ProTayToe</a> wrote:</p>
          <blockquote>
              <p>Hello, I have just been trying to finish up my client and when I came to test the cache downloader, my client freezes with no errors in the console.</p>
<p>Here is my code:</p>
<p>[CODE]import java.io.BufferedInputStream;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedWriter;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileWriter;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>public class CacheDownloader {</p>
<p>private Client client;<br>
private final int BUFFER = 1024;<br>
private final int VERSION = 1;<br>
private String cacheLink = “Cache link”; // obviously i have put my download link here, i just removed it so i could post it to you guys <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
private String fileToExtract = this.getCacheDir() + this.getArchivedName();</p>
<p>public CacheDownloader(Client client) {<br>
this.client = client;<br>
}</p>
<p>private void drawLoadingText(String text) {<br>
this.client.drawLoadingText(35, text);<br>
System.out.println(text);<br>
}</p>
<p>private void drawLoadingText(int amount, String text) {<br>
this.client.drawLoadingText(amount, text);<br>
System.out.println(text);<br>
}</p>
<p>private String getCacheDir() {<br>
return SignLink.findcachedir();<br>
}</p>
<p>private String getCacheLink() {<br>
return this.cacheLink;<br>
}</p>
<p>private int getCacheVersion() {<br>
return 1;<br>
}</p>
<p>public CacheDownloader downloadCache() {<br>
try {<br>
File e = new File(this.getCacheDir());<br>
File version = new File(this.getCacheDir() + “/cacheVersion” + this.getCacheVersion() + “.dat”);<br>
BufferedWriter versionFile;<br>
if(!e.exists()) {<br>
this.downloadFile(this.getCacheLink(), this.getArchivedName());<br>
this.unZip();<br>
System.out.println(“UNZIP”);<br>
versionFile = new BufferedWriter(new FileWriter(this.getCacheDir() + “/cacheVersion” + this.getCacheVersion() + “.dat”));<br>
versionFile.close();<br>
} else {<br>
if(version.exists()) {<br>
return null;<br>
}</p>
<pre><code>        this.downloadFile(this.getCacheLink(), this.getArchivedName());
        this.unZip();
        System.out.println("UNZIP");
        versionFile = new BufferedWriter(new FileWriter(this.getCacheDir() + "/cacheVersion" + this.getCacheVersion() + ".dat"));
        versionFile.close();
     }
  } catch (Exception var4) {
     ;
  }

  return null;
</code></pre>
<p>}</p>
<p>private void downloadFile(String adress, String localFileName) {<br>
BufferedOutputStream out = null;<br>
InputStream in = null;</p>
<pre><code>  try {
     URL ioe = new URL(adress);
     out = new BufferedOutputStream(new FileOutputStream(this.getCacheDir() + "/" + localFileName));
     URLConnection conn = ioe.openConnection();
     in = conn.getInputStream();
     byte[] data = new byte[1024];
     long numWritten = 0L;
     int length = conn.getContentLength();

     int numRead;
     while((numRead = in.read(data)) != -1) {
        out.write(data, 0, numRead);
        numWritten += (long)numRead;
        int percentage = (int)((double)numWritten / (double)length * 100.0D);
        this.drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
     }

     System.out.println(localFileName + "\t" + numWritten);
     this.drawLoadingText("Finished downloading " + this.getArchivedName() + "!");
  } catch (Exception var21) {
     var21.printStackTrace();
  } finally {
     try {
        if(in != null) {
           in.close();
        }

        if(out != null) {
           out.close();
        }
     } catch (IOException var20) {
        ;
     }

  }
</code></pre>
<p>}</p>
<p>private String getArchivedName() {<br>
int lastSlashIndex = this.getCacheLink().lastIndexOf(47);<br>
if(lastSlashIndex &gt;= 0 &amp;&amp; lastSlashIndex &lt; this.getCacheLink().length() - 1) {<br>
return this.getCacheLink().substring(lastSlashIndex + 1);<br>
} else {<br>
System.err.println(“Download link.”);<br>
return “”;<br>
}<br>
}</p>
<p>private void unZip() {<br>
try {<br>
BufferedInputStream e = new BufferedInputStream(new FileInputStream(this.fileToExtract));</p>
<pre><code>     ZipInputStream zin;
     ZipEntry e1;
     for(zin = new ZipInputStream(e); (e1 = zin.getNextEntry()) != null; System.out.println("unzipping2 " + e1.getName())) {
        if(e1.isDirectory()) {
           (new File(this.getCacheDir() + e1.getName())).mkdir();
        } else {
           if(e1.getName().equals(this.fileToExtract)) {
              this.unzip(zin, this.fileToExtract);
              break;
           }

           this.unzip(zin, this.getCacheDir() + e1.getName());
        }
     }

     zin.close();
  } catch (Exception var4) {
     var4.printStackTrace();
  }
</code></pre>
<p>}</p>
<p>private void unzip(ZipInputStream zin, String s) throws IOException {<br>
FileOutputStream out = new FileOutputStream(s);<br>
byte[] b = new byte[1024];<br>
boolean len = false;</p>
<pre><code>  int len1;
  while((len1 = zin.read(b)) != -1) {
     out.write(b, 0, len1);
  }

  out.close();
</code></pre>
<p>}<br>
}<br>
[/CODE]</p>
<p>And before someone says, yes I have added my cache link in cacheLink = “”; i just removed it so i could post it here. I use dropbox as my cache storage and if I enter the link into a browser i get the direct download (e.g. <a href="http://dl.dropbox.com/blahblahblah/cache.zip" data-bbcode="true" rel="nofollow noopener">http://dl.dropbox.com/blahblahblah/cache.zip</a>). So if anyone could help that would be very nice <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
Oh and all that i have in my console is</p>
<p><code>Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%
Downloading Cache 0%</code></p>
<p>Strangely, only 16kb of the cache’s download every time?</p>
<p>So I decided to change from a cacherdownloader to a gameupdater that checks what files you have and what files you need so you do not need to download the whole zipped cache files. This does the exact same thing too! 16kb!</p>
<p>[code]import java.io.BufferedOutputStream;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.io.OutputStream;<br>
import java.net.URL;<br>
import java.net.URLConnection;<br>
import java.security.MessageDigest;</p>
<p>import javax.xml.parsers.DocumentBuilder;<br>
import javax.xml.parsers.DocumentBuilderFactory;</p>
<p>import org.w3c.dom.Document;<br>
import org.w3c.dom.Element;</p>
<p>/**</p>
<ul>
<li>Game Updater, Update from CacheDownloader</li>
<li>
</li>
<li>
<span class="mention">@author</span> SoFlawLess_</li>
<li><span class="mention">@creditto</span></li>
<li>
<pre><code>      http://www.mkyong.com/java/how-to-generate-a-file-checksum-value-in-
</code></pre>
</li>
<li>
<pre><code>      java/ for md5 file checksum
</code></pre>
</li>
</ul>
<p>*/<br>
public class GameUpdater {</p>
<pre><code>// Uploaded folder containing the update.php file
private final static String SERVER = "http://127.0.0.1/game_update/";

// Cache location
// Make sure your findcachedir() method ends with a forward slash (/)
private final static String CACHE = SignLink.findcachedir();

private GameUpdater() {

}

/**
 * Checks for updates
 * 
 * @param c
 */
public static void checkForUpdates(Client c) {
	c.drawLoadingText(0, "Checking for updates");

	if (!SERVER.endsWith("/")) {
		System.err.println("Server must end with a forward slash (/)");
		return;
	} else if (!SERVER.startsWith("http://")) {
		System.err.println("Server must start with http://");
		return;
	}

	try {
		DocumentBuilderFactory documentbuilderfactory = DocumentBuilderFactory
				.newInstance();
		DocumentBuilder documentbuilder = documentbuilderfactory
				.newDocumentBuilder();
		Document document = documentbuilder.parse(new URL(SERVER
				.concat("update.php")).openStream());
		org.w3c.dom.NodeList nodelist = document
				.getElementsByTagName("Part");

		cleanCache(c, nodelist, new File(CACHE));
	} catch (Exception exception) {
		exception.printStackTrace();
	}
}

/**
 * Deletes files and folders that are not needed
 * 
 * @param c
 * @param list
 * @param file
 */
private static void cleanCache(Client c, org.w3c.dom.NodeList list,
		File file) {
	File[] directory = file.listFiles();

	FileLoop: for (File f : directory) {
		if (f.isDirectory()) {
			cleanCache(c, list, f);
		} else {
			for (int j = 0; j &lt; list.getLength(); j++) {
				org.w3c.dom.Node node = list.item(j);

				if (node.getNodeType() != 1) {
					continue;
				}

				Element e = (Element) node;

				String filePath = CACHE.concat(getElement(e, "Name"));
				File filePath_ = new File(filePath);
				String adress = SERVER.concat("cache/"
						+ getElement(e, "Name").replaceAll("\\s", "%20"));

				if (f.equals(filePath_)) {
					String currentChecksum = getMD5Checksum(f
							.getAbsolutePath());

					if (currentChecksum != null) {
						String checksum = getElement(e, "Hash");

						if (!checksum.equals(currentChecksum)) {
							downloadFile(c, adress, filePath_);
						}
					}
					continue FileLoop;
				} else if (!filePath_.exists()) {
					int index = filePath_.getAbsolutePath().lastIndexOf(
							File.separator);

					if (index != -1) {
						File checkFolder = new File(filePath_
								.getAbsolutePath().substring(0, index));

						if (!checkFolder.exists()) {
							checkFolder.mkdirs();
						}

					}

					downloadFile(c, adress, filePath_);
				}
			}

			f.delete();

			int index = f.getAbsolutePath().lastIndexOf(File.separator);

			if (index != -1) {
				File checkFolder = new File(f.getAbsolutePath().substring(
						0, index));

				if (checkFolder.listFiles().length == 0) {
					checkFolder.delete();
				}

			}
		}
	}
}

/**
 * Download a file :D Credits to whoever the hell added it or where it came
 * from in the first CacheDownloader
 * 
 * @param c
 * @param adress
 * @param filePath_
 */
private static void downloadFile(Client c, String adress, File filePath_) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	String fileName = null;
	int index = adress.lastIndexOf('/');

	if (index != -1) {
		fileName = adress.substring(index + 1, adress.length());
	}

	try {
		URL url = new URL(adress);
		out = new BufferedOutputStream(new FileOutputStream(filePath_));
		conn = url.openConnection();
		in = conn.getInputStream();
		byte[] data = new byte[1024];
		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();
		while ((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;
			int percentage = (int) (((double) numWritten / (double) length) * 100D);
			c.drawLoadingText(percentage,
					"Updating " + fileName.replaceAll("%20", " ") + " ... "
							+ percentage + "%");
		}
	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}
}

/**
 * Faster way of getting an element value
 * 
 * @param e
 * @param key
 * @return
 */
private static String getElement(Element e, String key) {
	return ((Element) e.getElementsByTagName(key).item(0)).getChildNodes()
			.item(0).getNodeValue();
}

/**
 * 
 * @param filename
 * @return
 */
public static String getMD5Checksum(String fileName) {
	String result = null;
	try {

		MessageDigest md = MessageDigest.getInstance("MD5");
		FileInputStream fis = new FileInputStream(fileName);
		byte[] dataBytes = new byte[1024];

		int nread = 0;

		while ((nread = fis.read(dataBytes)) != -1) {
			md.update(dataBytes, 0, nread);
		}
		;

		byte[] mdbytes = md.digest();

		// convert the byte to hex format
		StringBuffer sb = new StringBuffer("");
		for (int i = 0; i &lt; mdbytes.length; i++) {
			sb.append(Integer.toString((mdbytes[i] &amp; 0xff) + 0x100, 16)
					.substring(1));
		}

		result = sb.toString();
	} catch (Exception e) {

	}
	return result;
}
</code></pre>
<p>}[/code]</p>
<p>Is there anything that could effect the way cache’s are downloaded? I’m confused.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-cache-downloader-crashes/480706/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-cache-downloader-crashes/480706/1</link>
        <pubDate>Wed, 30 Jan 2013 03:19:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-480706-1</guid>
        <source url="https://forum.moparisthebest.com/t/auto-cache-downloader-crashes/480706.rss">Auto Cache Downloader Crashes</source>
      </item>
  </channel>
</rss>
