<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cpool.h</title>
    <link>https://forum.moparisthebest.com/t/cpool-h/292822</link>
    <description>[code]#ifndef _H_BYTECODE_CPOOL

#define _H_BYTECODE_CPOOL

#include &quot;./types.h&quot;

#define CLASS_INFO_TAG			7
#define FIELDREF_INFO_TAG		9
#define METHODREF_INFO_TAG		10
#define INTERFACEMETHODREF_INFO_TAG	11
#define STRING_INFO_TAG			8
#define INTEGER_INFO_TAG		3
#define FLOAT_INFO_TAG			4
#define LONG_INFO_TAG			5
#define DOUBLE_INFO_TAG			6
#define NAMEANDTYPE_INFO_TAG		12
#define UTF8_INFO_TAG			1

typedef struct _cp_info {
    u1 tag;
} cp_info;

typedef struct _cp_class_info {
    cp_info cinfo;
    u2 name_index;
} cp_class_info;

typedef struct _cp_fieldref_info {
    cp_info cinfo;
    u2 class_index;
    u2 name_and_type_index;
} cp_fieldref_info;

typedef struct _cp_methodref_info {
    cp_info cinfo;
    u2 class_index;
    u2 name_and_type_index;
} cp_methodref_info;

typedef struct _cp_interfacemethodref_info {
    cp_info cinfo;
    u2 class_index;
    u2 name_and_type_index;
} cp_interfacemethodref_info;

typedef struct _cp_string_info {
    cp_info cinfo;
    u2 string_index;
} cp_string_info;

typedef struct _cp_integer_info {
    cp_info cinfo;
    u4 bytes;
} cp_integer_info;

typedef struct _cp_float_info {
    cp_info cinfo;
    float bytes;
} cp_float_info;

typedef struct _cp_long_info {
    cp_info cinfo;
    s8 bytes;
} cp_long_info;

typedef struct _cp_double_info {
    cp_info cinfo;
    double bytes;
} cp_double_info;

typedef struct _cp_nameandtype_info {
    cp_info cinfo;
    u2 name_index;
    u2 descriptor_index;
} cp_nameandtype_info;

typedef struct _cp_utf8_info {
    cp_info cinfo;
    u2 length;
    wchar_t *bytes;
} cp_utf8_info;

#endif[/code]

I must admit it&#39;s nasty, but it is better than frank_&#39;s! 
&lt;blockquote&gt;&lt;frank_&gt; i think i had a struct { u1 type; union { ... the constant data types ... }; };
&lt;super_&gt; :O
&lt;frank_&gt; struct _constant
&lt;super_&gt; hmm
&lt;frank_&gt; {
&lt;frank_&gt;     u1 tag;
&lt;frank_&gt;     union
&lt;frank_&gt;     {
&lt;frank_&gt;         constant_class* cclass;
&lt;frank_&gt;         constant_fieldref* cfieldref;
&lt;frank_&gt;         constant_methodref* cmethodref;
&lt;frank_&gt; etc&lt;/blockquote&gt;

PS C false inheritance with structs is kool.
[code]cpool_info *read(...) {
    ...
    switch (...) {
        case CLASS_INFO_TAG: {
            cp_class_info cinfo;
            ...
            return (cpool_info *) &amp;cinfo;
        }
        ...         
    }
    ...
}[/code]

&lt;blockquote&gt;&lt;frank_&gt; c is orsm cus you can randomly cast pointers :P&lt;/blockquote&gt;[br][br][size=1]Posted on: August 04, 2009, 03:34:03 am[/size][hr]Yes, there is no point to this other than to quote frank_ :3</description>
    
    <lastBuildDate>Mon, 24 Aug 2009 21:19:13 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/cpool-h/292822.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@abraham2119 abraham2119]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/abraham2119">@abraham2119</a> wrote:</p>
          <blockquote>
              <p>heres mine:</p>
<p>[code]<span class="hashtag">#ifndef</span> C_POOL</p>
<p><span class="hashtag">#define</span> C_POOL</p>
<p><span class="hashtag">#include</span> “instructions.h”</p>
<p><span class="hashtag">#define</span> UTF_8 1<br>
<span class="hashtag">#define</span> INTEGER 3<br>
<span class="hashtag">#define</span> FLOAT 4<br>
<span class="hashtag">#define</span> LONG 5<br>
<span class="hashtag">#define</span> DOUBLE 6<br>
<span class="hashtag">#define</span> CLASS 7<br>
<span class="hashtag">#define</span> STRING 8<br>
<span class="hashtag">#define</span> FIELD_REF 9<br>
<span class="hashtag">#define</span> METHOD_REF 10<br>
<span class="hashtag">#define</span> INTERFACE_METHOD_REF 11<br>
<span class="hashtag">#define</span> NAME_TYPE 12</p>
<p>typedef struct {<br>
unsigned char tag;<br>
void *info;<br>
} cp_entry;</p>
<p>typedef struct {<br>
unsigned short int cp_count;<br>
cp_entry *entry;<br>
} const_pool;</p>
<p>typedef struct {<br>
unsigned short int cp_index;<br>
} class_inf, interface_inf;</p>
<p>typedef struct {<br>
unsigned short int class_index;<br>
unsigned short int nt_index;<br>
} ref_inf;</p>
<p>typedef struct {<br>
unsigned short int string_index;<br>
} string_inf;</p>
<p>typedef struct {<br>
unsigned int bytes;<br>
} int_inf, float_inf;</p>
<p>typedef struct {<br>
double bytes;<br>
} long_inf, double_inf;</p>
<p>typedef struct {<br>
unsigned short int name_index;<br>
unsigned short int desc_index;<br>
} nt_inf;</p>
<p>typedef struct {<br>
unsigned short int length;<br>
char *bytes;<br>
} utf8_inf;</p>
<p>typedef struct {<br>
unsigned short int name_index;<br>
unsigned int attr_length;<br>
void *info;<br>
} attr_inf;</p>
<p>typedef struct {<br>
unsigned short int start_pc;<br>
unsigned short int end_pc;<br>
unsigned short int handler_pc;<br>
unsigned short int catch_type;<br>
} exception_table;</p>
<p>typedef struct {<br>
unsigned short int max_stack;<br>
unsigned short int max_locals;<br>
unsigned int code_length;<br>
unsigned char *code;<br>
unsigned short int excep_table_length;<br>
exception_table *table;<br>
unsigned short int attr_count;<br>
attr_inf *attributes;<br>
} code_attr;</p>
<p>typedef struct {<br>
unsigned short int acc_flags;<br>
unsigned short int name_index;<br>
unsigned short int desc_index;<br>
unsigned short int attr_count;<br>
unsigned short int instr_count;<br>
instr *instructions;<br>
attr_inf *attr;<br>
} field_method_inf, method_inf, field_inf;</p>
<p><span class="hashtag">#endif</span>[/code]<br>
super_ and i had discussed memory flaws in our bytecode libraries, but what i thought to be a mistake in how i handled memory allocation, was really an instruction parsing error. so super_, i removed the nasty anonymous union fix. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/7</link>
        <pubDate>Mon, 24 Aug 2009 21:19:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-7</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <p>I only know ANSI C <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/6</link>
        <pubDate>Tue, 04 Aug 2009 21:54:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-6</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[quote=“unlimitedorb, post:4, topic:292822”][quote author=Mopman link=topic=386894.msg2898719#msg2898719 date=1249391743]<br>
ugh whats wrong with consts<br>
[/quote]</p>
<p>I’m still learning C++, but i grazed over Effective C++ and it states that the “const” qualifier should be preferred over <span class="hashtag">#define</span>. This isn’t true in ANSI C though, because they aren’t the same thing:</p>
<p>//This works in C++, but it’s a compilation error in C.<br>
const int MAX_BUFFER = 256;<br>
int buffer[MAX_BUFFER];</p>
<p>/* This works in C */<br>
<span class="hashtag">#define</span> MAX_BUFFER 256<br>
int buffer[MAX_BUFFER];[/quote][br][br][size=1]Posted on: August 04, 2009, 08:08:13 pm[/size][hr]PS dafan, the first isn’t a compilation error in C, or at least anymore… I’m pretty sure it works now that C has dynamically allocated array support <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/5</link>
        <pubDate>Tue, 04 Aug 2009 19:42:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-5</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@unlimitedorb unlimitedorb]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/unlimitedorb">@unlimitedorb</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="3" data-topic="292822">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/mopman/40/33_1.png" class="avatar"> Mopman:</div>
<blockquote>
<p>ugh whats wrong with consts</p>
</blockquote>
</aside>
<p>I’m still learning C++, but i grazed over Effective C++ and it states that the “const” qualifier should be preferred over <span class="hashtag">#define</span>. This isn’t true in ANSI C though, because they aren’t the same thing:</p>
<p>//This works in C++, but it’s a compilation error in C.<br>
const int MAX_BUFFER = 256;<br>
int buffer[MAX_BUFFER];</p>
<p>/* This works in C */<br>
<span class="hashtag">#define</span> MAX_BUFFER 256<br>
int buffer[MAX_BUFFER];</p>
<p>EDIT: So basically, types qualified with const can’t be used as constant expressions in C (you’re allowed to take the address of a constant though).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/4</link>
        <pubDate>Tue, 04 Aug 2009 19:33:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-4</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>ugh whats wrong with consts</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/3</link>
        <pubDate>Tue, 04 Aug 2009 13:15:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-3</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>my constantpool header was much worse than that ;D</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/2</link>
        <pubDate>Tue, 04 Aug 2009 03:35:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-2</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
      <item>
        <title>Cpool.h</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>[code]<span class="hashtag">#ifndef</span> _H_BYTECODE_CPOOL</p>
<p><span class="hashtag">#define</span> _H_BYTECODE_CPOOL</p>
<p><span class="hashtag">#include</span> “./types.h”</p>
<p><span class="hashtag">#define</span> CLASS_INFO_TAG			7<br>
<span class="hashtag">#define</span> FIELDREF_INFO_TAG		9<br>
<span class="hashtag">#define</span> METHODREF_INFO_TAG		10<br>
<span class="hashtag">#define</span> INTERFACEMETHODREF_INFO_TAG	11<br>
<span class="hashtag">#define</span> STRING_INFO_TAG			8<br>
<span class="hashtag">#define</span> INTEGER_INFO_TAG		3<br>
<span class="hashtag">#define</span> FLOAT_INFO_TAG			4<br>
<span class="hashtag">#define</span> LONG_INFO_TAG			5<br>
<span class="hashtag">#define</span> DOUBLE_INFO_TAG			6<br>
<span class="hashtag">#define</span> NAMEANDTYPE_INFO_TAG		12<br>
<span class="hashtag">#define</span> UTF8_INFO_TAG			1</p>
<p>typedef struct _cp_info {<br>
u1 tag;<br>
} cp_info;</p>
<p>typedef struct _cp_class_info {<br>
cp_info cinfo;<br>
u2 name_index;<br>
} cp_class_info;</p>
<p>typedef struct _cp_fieldref_info {<br>
cp_info cinfo;<br>
u2 class_index;<br>
u2 name_and_type_index;<br>
} cp_fieldref_info;</p>
<p>typedef struct _cp_methodref_info {<br>
cp_info cinfo;<br>
u2 class_index;<br>
u2 name_and_type_index;<br>
} cp_methodref_info;</p>
<p>typedef struct _cp_interfacemethodref_info {<br>
cp_info cinfo;<br>
u2 class_index;<br>
u2 name_and_type_index;<br>
} cp_interfacemethodref_info;</p>
<p>typedef struct _cp_string_info {<br>
cp_info cinfo;<br>
u2 string_index;<br>
} cp_string_info;</p>
<p>typedef struct _cp_integer_info {<br>
cp_info cinfo;<br>
u4 bytes;<br>
} cp_integer_info;</p>
<p>typedef struct _cp_float_info {<br>
cp_info cinfo;<br>
float bytes;<br>
} cp_float_info;</p>
<p>typedef struct _cp_long_info {<br>
cp_info cinfo;<br>
s8 bytes;<br>
} cp_long_info;</p>
<p>typedef struct _cp_double_info {<br>
cp_info cinfo;<br>
double bytes;<br>
} cp_double_info;</p>
<p>typedef struct _cp_nameandtype_info {<br>
cp_info cinfo;<br>
u2 name_index;<br>
u2 descriptor_index;<br>
} cp_nameandtype_info;</p>
<p>typedef struct _cp_utf8_info {<br>
cp_info cinfo;<br>
u2 length;<br>
wchar_t *bytes;<br>
} cp_utf8_info;</p>
<p><span class="hashtag">#endif</span>[/code]</p>
<p>I must admit it’s nasty, but it is better than frank_'s!</p>
<blockquote> i think i had a struct { u1 type; union { ... the constant data types ... }; };
 :O
 struct _constant
 hmm
 {
     u1 tag;
     union
     {
         constant_class* cclass;
         constant_fieldref* cfieldref;
         constant_methodref* cmethodref;
 etc</blockquote>
<p>PS C false inheritance with structs is kool.</p>
<p><code>cpool_info *read(...) {
    ...
    switch (...) {
        case CLASS_INFO_TAG: {
            cp_class_info cinfo;
            ...
            return (cpool_info *) &amp;cinfo;
        }
        ...         
    }
    ...
}</code></p>
<blockquote> c is orsm cus you can randomly cast pointers :P</blockquote>[br][br][size=1]Posted on: August 04, 2009, 03:34:03 am[/size][hr]Yes, there is no point to this other than to quote frank_ :3
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cpool-h/292822/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cpool-h/292822/1</link>
        <pubDate>Tue, 04 Aug 2009 03:33:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-292822-1</guid>
        <source url="https://forum.moparisthebest.com/t/cpool-h/292822.rss">Cpool.h</source>
      </item>
  </channel>
</rss>
