<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Exception</title>
    <link>https://forum.moparisthebest.com/t/exception/412193</link>
    <description>I am getting this error:
[code][8/26/11 5:44 PM]: java.lang.ArrayIndexOutOfBoundsException: 1150
[8/26/11 5:44 PM]:      at server.model.npcs.NPCHandler.process(NPCHandler.java:
2183)
[8/26/11 5:44 PM]:      at server.Server.main(Server.java:190)[/code]

Here is line 2183:
[code]Client c = (Client) PlayerHandler.players[i];[/code]

Here is the method:
[code]	public void process() {
		for (int i = 0; i &lt; maxNPCs; i++) {
			if (npcs[i] == null) {
				continue;
			}
			npcs[i].clearUpdateFlags();

		}

		for (int i = 0; i &lt; maxNPCs; i++) {
			if (npcs[i] != null) {


				if (npcs[i].summon == true) {
					Client c = (Client) PlayerHandler.players[npcs[i].spawnedBy];


					if (c != null &amp;&amp; c.npcIndex &gt; 0) {

						follownpc(i, c.npcIndex);
					}

					if (c != null &amp;&amp; c.playerIndex &lt; 1 &amp;&amp; npcs[i].summon == true) {
						if (!npcs[i].underAttack) {
							if (!PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 2) &amp;&amp; c.npcIndex &lt; 1) {
								followPlayer(i, c.playerId);
							}
						}
					} else {
						if (c != null &amp;&amp; npcs[i].summon == true) {
							if (!PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 5) &amp;&amp; c.playerIndex &lt; 1 || c.npcIndex &lt; 1) {
								followPlayer(i, c.playerId);
							}
						}

					}


					if (c != null &amp;&amp; c.lastsummon &gt; 0 &amp;&amp; !PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 10) &amp;&amp; npcs[i].summon == true &amp;&amp; !npcs[i].isDead) {

						npcs[i].isDead = true;
						npcs[i].applyDead = true;
						c.Summoning.SummonNewNPC(c.lastsummon);
						npcs[i].gfx0(1315);
						npcs[i].underAttackBy2 = -1;
						npcs[i].updateRequired = true;
						npcs[i].dirUpdateRequired = true;
						npcs[i].getNextWalkingDirection();
					}


					if (c != null &amp;&amp; c.lastsummon &lt; 0 || c == null) {
						npcs[i].isDead = true;
						npcs[i].applyDead = true;
						npcs[i].summon = false;
						npcs[i].underAttackBy2 = -1;
					}


					if (c != null &amp;&amp; npcs[i].actionTimer &lt; 1 &amp;&amp; npcs[i].summon == true) {
						if (c.playerIndex &gt; 0) {
							Client o = (Client) PlayerHandler.players[c.playerIndex];
							if (o != null) {
								if (npcs[i].IsAttackingPerson = true &amp;&amp; o.inMulti()) {
									followPlayer(i, o.playerId);
									attackPlayer(o, i);
									npcs[i].index = o.playerId;
									npcs[i].actionTimer = 7;
								}
							}
						}
					}
				}

				if (npcs[i].npcType == 692) {
					if (Misc.random2(2) &lt;= 3) {
						npcs[i].updateRequired = true;
						npcs[i].forceChat(&quot;Get ya Fresh &#39;ome grown Weed &#39;ere, 1 Dollar a Gram!&quot;);
					}
				}

				if (npcs[i].npcType == 2578) {
					if (Misc.random2(6) &lt;= 20) {
						npcs[i].updateRequired = true;
						npcs[i].forceChat(&quot;All hail James! Thats right im a fanboy!!&quot;);
						npcs[i].forceChat(&quot;EVERYONE VOTE  YES IM A WANNABE MOD!&quot;);
						npcs[i].forceChat(&quot;James is a sexy beast im going to follow him all day!&quot;);
					}
				}

				if (npcs[i].npcType == 659) {
					if (Misc.random2(2) &lt;= 3) {
						npcs[i].updateRequired = true;
						npcs[i].forceChat(&quot;Welcome to the donator zone! Trade me ;)&quot;);
					}
				}

				if (npcs[i].actionTimer &gt; 0) {
					npcs[i].actionTimer--;
				}
				if (npcs[i].freezeTimer &gt; 0) {
					npcs[i].freezeTimer--;
				}
				if (npcs[i].hitDelayTimer &gt; 0) {
					npcs[i].hitDelayTimer--;
				}

				if (npcs[i].hitDelayTimer == 1) {
					npcs[i].hitDelayTimer = 0;
					applyDamage(i);
				}

				if (npcs[i].attackTimer &gt; 0) {
					npcs[i].attackTimer--;
				}

				if (npcs[i].spawnedBy &gt; 0) { // delete summons npc
					if (PlayerHandler.players[npcs[i].spawnedBy] == null || PlayerHandler.players[npcs[i].spawnedBy].heightLevel != npcs[i].heightLevel || PlayerHandler.players[npcs[i].spawnedBy].respawnTimer &gt; 0 || !PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 10)) {

						if (PlayerHandler.players[npcs[i].spawnedBy] != null) {
							for (int o = 0; o &lt; PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs.length; o++) {
								if (npcs[i].npcType == PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][0]) {
									if (PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][1] == 1) {
										PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][1] = 0;
									}
								}
							}
						}
						npcs[i] = null;
					}
				}
				if (npcs[i] == null) {
					continue;
				}

				/**
				 * Attacking player
				 **/
				if (isAggressive(i) &amp;&amp; !npcs[i].underAttack &amp;&amp; !npcs[i].isDead &amp;&amp; !switchesAttackers(i)) {
					npcs[i].killerId = getCloseRandomPlayer(i);
				} else if (isAggressive(i) &amp;&amp; !npcs[i].underAttack &amp;&amp; !npcs[i].isDead &amp;&amp; switchesAttackers(i)) {
					npcs[i].killerId = getCloseRandomPlayer(i);
				}

				if (System.currentTimeMillis() - npcs[i].lastDamageTaken &gt; 5000) {
					npcs[i].underAttackBy = 0;
				}

				if ((npcs[i].killerId &gt; 0 || npcs[i].underAttack) &amp;&amp; !npcs[i].walkingHome &amp;&amp; retaliates(npcs[i].npcType)) {
					if (!npcs[i].isDead) {
						int p = npcs[i].killerId;
						if (PlayerHandler.players[p] != null) {
							Client c = (Client) PlayerHandler.players[p];
							followPlayer(i, c.playerId);
							if (npcs[i] == null) {
								continue;
							}
							if (npcs[i].attackTimer == 0) {
								if (c != null) {
									attackPlayer(c, i);
								} else {
									npcs[i].killerId = 0;
									npcs[i].underAttack = false;
									npcs[i].facePlayer(0);
								}
							}
						} else {
							npcs[i].killerId = 0;
							npcs[i].underAttack = false;
							npcs[i].facePlayer(0);
						}
					}
				}
				/**
				 * Random walking and walking home
				 **/
				if (npcs[i] == null) {
					continue;
				}
				if ((!npcs[i].underAttack || npcs[i].walkingHome) &amp;&amp; npcs[i].randomWalk &amp;&amp; !npcs[i].isDead) {
					npcs[i].facePlayer(0);
					npcs[i].killerId = 0;
					if (npcs[i].spawnedBy == 0) {
						if ((npcs[i].absX &gt; npcs[i].makeX + Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absX &lt; npcs[i].makeX - Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absY &gt; npcs[i].makeY + Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absY &lt; npcs[i].makeY - Config.NPC_RANDOM_WALK_DISTANCE)) {
							npcs[i].walkingHome = true;
						}
					}

					if (npcs[i].walkingHome &amp;&amp; npcs[i].absX == npcs[i].makeX &amp;&amp; npcs[i].absY == npcs[i].makeY) {
						npcs[i].walkingHome = false;
					} else if (npcs[i].walkingHome) {
						npcs[i].moveX = GetMove(npcs[i].absX, npcs[i].makeX);
						npcs[i].moveY = GetMove(npcs[i].absY, npcs[i].makeY);
						npcs[i].getNextNPCMovement(i);
						npcs[i].updateRequired = true;
					}
					if (npcs[i].walkingType == 1) {
						if (Misc.random(3) == 1 &amp;&amp; !npcs[i].walkingHome) {
							int MoveX = 0;
							int MoveY = 0;
							int Rnd = Misc.random(9);
							if (Rnd == 1) {
								MoveX = 1;
								MoveY = 1;
							} else if (Rnd == 2) {
								MoveX = -1;
							} else if (Rnd == 3) {
								MoveY = -1;
							} else if (Rnd == 4) {
								MoveX = 1;
							} else if (Rnd == 5) {
								MoveY = 1;
							} else if (Rnd == 6) {
								MoveX = -1;
								MoveY = -1;
							} else if (Rnd == 7) {
								MoveX = -1;
								MoveY = 1;
							} else if (Rnd == 8) {
								MoveX = 1;
								MoveY = -1;
							}

							if (MoveX == 1) {
								if (npcs[i].absX + MoveX &lt; npcs[i].makeX + 1) {
									npcs[i].moveX = MoveX;
								} else {
									npcs[i].moveX = -1;
								}
							}

							if (MoveX == -1) {
								if (npcs[i].absX - MoveX &gt; npcs[i].makeX - 1) {
									npcs[i].moveX = MoveX;
								} else {
									npcs[i].moveX = -1;
								}
							}

							if (MoveY == 1) {
								if (npcs[i].absY + MoveY &lt; npcs[i].makeY + 1) {
									npcs[i].moveY = MoveY;
								} else {
									npcs[i].moveY = -1;
								}
							}

							if (MoveY == -1) {
								if (npcs[i].absY - MoveY &gt; npcs[i].makeY - 1) {
									npcs[i].moveY = MoveY;
								} else {
									npcs[i].moveY = -1;
								}
							}


							int x = (npcs[i].absX + npcs[i].moveX);
							int y = (npcs[i].absY + npcs[i].moveY);
							if (VirtualWorld.I(npcs[i].heightLevel, npcs[i].absX, npcs[i].absY, x, y, 0)) {
								npcs[i].getNextNPCMovement(i);
							} else {
								npcs[i].moveX = -1;
								npcs[i].moveY = -1;
							}
							npcs[i].updateRequired = true;
						}
					}
				}

				if (npcs[i].isDead == true) {
					if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].applyDead == false &amp;&amp; npcs[i].needRespawn == false) {
						npcs[i].updateRequired = true;
						npcs[i].facePlayer(0);
						npcs[i].killedBy = getNpcKillerId(i);
						npcs[i].animNumber = getDeadEmote(i); // dead emote
						npcs[i].animUpdateRequired = true;
						npcs[i].freezeTimer = 0;
						npcs[i].applyDead = true;
						killedBarrow(i);
						if (isFightCaveNpc(i)) {
							killedTzhaar(i);
						}
						if (npcs[i].summon == true) {
							npcs[i].summon = false;
						}
						npcs[i].actionTimer = 4; // delete time
						resetPlayersInCombat(i);
						/*if (npcs[i].npcType == 1158){
							handleKalpite(i);
						}*/


					} else if (npcs[i] != null &amp;&amp; npcs[i].actionTimer == 0 &amp;&amp; npcs[i].applyDead == true &amp;&amp; npcs[i].needRespawn == false) {
						//if (npcs[i] != null) {
						npcs[i].needRespawn = true;
						npcs[i].actionTimer = getRespawnTime(i); // respawn time
						dropItems(i); // npc drops items!
						appendSlayerExperience(i);
						//appendKillCount(i);
						npcs[i].absX = npcs[i].makeX;
						npcs[i].absY = npcs[i].makeY;
						npcs[i].HP = npcs[i].MaxHP;
						npcs[i].animNumber = 0x328;
						npcs[i].updateRequired = true;
						npcs[i].animUpdateRequired = true;
						if (npcs[i].npcType &gt;= 2440 &amp;&amp; npcs[i].npcType &lt;= 2446) {
							Server.objectManager.removeObject(npcs[i].absX, npcs[i].absY);
						}
						Client c = (Client) PlayerHandler.players[i];
						if (npcs[i].npcType == 5666) {
							c.getAchievements().getBarrelChestAchievement().completeTask(c);
						} else if (npcs[i].npcType == 6247) {
							c.getAchievements().getCommanderZilyanaAchievement().completeTask(c);
						} else if (npcs[i].npcType == 8133) {
							c.getAchievements().getCorporalBeastAchievement().completeTask(c);
						} else if (npcs[i].npcType == 6260) {
							c.getAchievements().getGeneralGraardorAchievement().completeTask(c);
						} else if (npcs[i].npcType == 2745) {
							handleJadDeath(i);
							c.getAchievements().getJadAchievement().completeTask(c);
						} else if (npcs[i].npcType == 50) {
							c.getAchievements().getKingBlackDragonAchievement().completeTask(c);
						} else if (npcs[i].npcType == 6222) {
							c.getAchievements().getKreeArraAchievement().completeTask(c);
						} else if (npcs[i].npcType == 6203) {
							c.getAchievements().getKRilTsusarothAchievement().completeTask(c);
						} else if (npcs[i].npcType == 8349) {
							c.getAchievements().getTormentedDemonAchievement().completeTask(c);
						}
						if (npcs[i].npcType == 3491) {
							handleRFDDeath(i);
						}

						if (npcs[i] != null &amp;&amp; npcs[i].npcType != 1158) {
							if (!npcs[i].needRespawn) {
								npcs[i] = null;
								for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
									if (PlayerHandler.players[j] != null) {
										PlayerHandler.players[j].RebuildNPCList = true;
									}
								}
								continue;
							}
							npcs[i].needRespawn = true;
							npcs[i].actionTimer = 30;
							npcs[i].absX = npcs[i].makeX;
							npcs[i].absY = npcs[i].makeY - 1;
						} else if (npcs[i] != null &amp;&amp; npcs[i].npcType == 1158) {
							npcs[i] = null;
							for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
								if (PlayerHandler.players[j] != null) {
									PlayerHandler.players[j].RebuildNPCList = true;
								}
							}
						}

					} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].needRespawn == true) {
						if (npcs[i].spawnedBy &gt; 0) {
							npcs[i] = null;
						} else {
							/*if (npcs[i].actionTimer &lt;= 0 &amp;&amp; npcs[i].needRespawn &amp;&amp; npcs[i].NeedsRespawn) {
							for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
								if (Server.playerHandler.players[j] != null) {
									Server.playerHandler.players[j].RebuildNPCList = true;
								}
							}*/
							int type = npcs[i].npcType;
							if (type == 1160) {
								type = 1158;
							}
							int x = npcs[i].makeX;
							int y = npcs[i].makeY;
							int height = npcs[i].heightLevel;
							int walk = npcs[i].walkingType;
							int mHp = npcs[i].MaxHP;
							int mHit = npcs[i].maxHit;
							int attack = npcs[i].attack;
							int defence = npcs[i].defence;

							npcs[i] = null;
							newNPC(type, x, y, height, walk, mHp, mHit, attack, defence);
						}
					}
				}
			}
		}
	}[/code]

Thanks  ;D</description>
    
    <lastBuildDate>Sat, 27 Aug 2011 02:20:26 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/exception/412193.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>It has to go near the dropitems method.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/6</link>
        <pubDate>Sat, 27 Aug 2011 02:20:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-6</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@pk2play pk2play]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pk2play">@pk2play</a> wrote:</p>
          <blockquote>
              <p>Tried that already it does not give the player the achievement.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/5</link>
        <pubDate>Sat, 27 Aug 2011 02:14:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-5</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>It’s suppose to be</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/4</link>
        <pubDate>Sat, 27 Aug 2011 02:07:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-4</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@pk2play pk2play]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pk2play">@pk2play</a> wrote:</p>
          <blockquote>
              <p>Yes</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/3</link>
        <pubDate>Sat, 27 Aug 2011 02:06:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-3</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@imsuperman05 imsuperman05]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imsuperman05">@imsuperman05</a> wrote:</p>
          <blockquote>
              <p>You’re not using this correctly.</p>
<pre><code class="lang-auto"></code></pre>
<p>Is it suppose to give those Achievements when they kill the npc?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/2</link>
        <pubDate>Sat, 27 Aug 2011 02:05:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-2</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
      <item>
        <title>Exception</title>
        <dc:creator><![CDATA[@pk2play pk2play]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pk2play">@pk2play</a> wrote:</p>
          <blockquote>
              <p>I am getting this error:</p>
<p><code>[8/26/11 5:44 PM]: java.lang.ArrayIndexOutOfBoundsException: 1150
[8/26/11 5:44 PM]:      at server.model.npcs.NPCHandler.process(NPCHandler.java:
2183)
[8/26/11 5:44 PM]:      at server.Server.main(Server.java:190)</code></p>
<p>Here is line 2183:</p>
<pre><code class="lang-auto"></code></pre>
<p>Here is the method:</p>
<p>[code]	public void process() {<br>
for (int i = 0; i &lt; maxNPCs; i++) {<br>
if (npcs[i] == null) {<br>
continue;<br>
}<br>
npcs[i].clearUpdateFlags();</p>
<pre><code>	}

	for (int i = 0; i &lt; maxNPCs; i++) {
		if (npcs[i] != null) {


			if (npcs[i].summon == true) {
				Client c = (Client) PlayerHandler.players[npcs[i].spawnedBy];


				if (c != null &amp;&amp; c.npcIndex &gt; 0) {

					follownpc(i, c.npcIndex);
				}

				if (c != null &amp;&amp; c.playerIndex &lt; 1 &amp;&amp; npcs[i].summon == true) {
					if (!npcs[i].underAttack) {
						if (!PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 2) &amp;&amp; c.npcIndex &lt; 1) {
							followPlayer(i, c.playerId);
						}
					}
				} else {
					if (c != null &amp;&amp; npcs[i].summon == true) {
						if (!PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 5) &amp;&amp; c.playerIndex &lt; 1 || c.npcIndex &lt; 1) {
							followPlayer(i, c.playerId);
						}
					}

				}


				if (c != null &amp;&amp; c.lastsummon &gt; 0 &amp;&amp; !PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 10) &amp;&amp; npcs[i].summon == true &amp;&amp; !npcs[i].isDead) {

					npcs[i].isDead = true;
					npcs[i].applyDead = true;
					c.Summoning.SummonNewNPC(c.lastsummon);
					npcs[i].gfx0(1315);
					npcs[i].underAttackBy2 = -1;
					npcs[i].updateRequired = true;
					npcs[i].dirUpdateRequired = true;
					npcs[i].getNextWalkingDirection();
				}


				if (c != null &amp;&amp; c.lastsummon &lt; 0 || c == null) {
					npcs[i].isDead = true;
					npcs[i].applyDead = true;
					npcs[i].summon = false;
					npcs[i].underAttackBy2 = -1;
				}


				if (c != null &amp;&amp; npcs[i].actionTimer &lt; 1 &amp;&amp; npcs[i].summon == true) {
					if (c.playerIndex &gt; 0) {
						Client o = (Client) PlayerHandler.players[c.playerIndex];
						if (o != null) {
							if (npcs[i].IsAttackingPerson = true &amp;&amp; o.inMulti()) {
								followPlayer(i, o.playerId);
								attackPlayer(o, i);
								npcs[i].index = o.playerId;
								npcs[i].actionTimer = 7;
							}
						}
					}
				}
			}

			if (npcs[i].npcType == 692) {
				if (Misc.random2(2) &lt;= 3) {
					npcs[i].updateRequired = true;
					npcs[i].forceChat("Get ya Fresh 'ome grown Weed 'ere, 1 Dollar a Gram!");
				}
			}

			if (npcs[i].npcType == 2578) {
				if (Misc.random2(6) &lt;= 20) {
					npcs[i].updateRequired = true;
					npcs[i].forceChat("All hail James! Thats right im a fanboy!!");
					npcs[i].forceChat("EVERYONE VOTE  YES IM A WANNABE MOD!");
					npcs[i].forceChat("James is a sexy beast im going to follow him all day!");
				}
			}

			if (npcs[i].npcType == 659) {
				if (Misc.random2(2) &lt;= 3) {
					npcs[i].updateRequired = true;
					npcs[i].forceChat("Welcome to the donator zone! Trade me ;)");
				}
			}

			if (npcs[i].actionTimer &gt; 0) {
				npcs[i].actionTimer--;
			}
			if (npcs[i].freezeTimer &gt; 0) {
				npcs[i].freezeTimer--;
			}
			if (npcs[i].hitDelayTimer &gt; 0) {
				npcs[i].hitDelayTimer--;
			}

			if (npcs[i].hitDelayTimer == 1) {
				npcs[i].hitDelayTimer = 0;
				applyDamage(i);
			}

			if (npcs[i].attackTimer &gt; 0) {
				npcs[i].attackTimer--;
			}

			if (npcs[i].spawnedBy &gt; 0) { // delete summons npc
				if (PlayerHandler.players[npcs[i].spawnedBy] == null || PlayerHandler.players[npcs[i].spawnedBy].heightLevel != npcs[i].heightLevel || PlayerHandler.players[npcs[i].spawnedBy].respawnTimer &gt; 0 || !PlayerHandler.players[npcs[i].spawnedBy].goodDistance(npcs[i].getX(), npcs[i].getY(), PlayerHandler.players[npcs[i].spawnedBy].getX(), PlayerHandler.players[npcs[i].spawnedBy].getY(), 10)) {

					if (PlayerHandler.players[npcs[i].spawnedBy] != null) {
						for (int o = 0; o &lt; PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs.length; o++) {
							if (npcs[i].npcType == PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][0]) {
								if (PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][1] == 1) {
									PlayerHandler.players[npcs[i].spawnedBy].barrowsNpcs[o][1] = 0;
								}
							}
						}
					}
					npcs[i] = null;
				}
			}
			if (npcs[i] == null) {
				continue;
			}

			/**
			 * Attacking player
			 **/
			if (isAggressive(i) &amp;&amp; !npcs[i].underAttack &amp;&amp; !npcs[i].isDead &amp;&amp; !switchesAttackers(i)) {
				npcs[i].killerId = getCloseRandomPlayer(i);
			} else if (isAggressive(i) &amp;&amp; !npcs[i].underAttack &amp;&amp; !npcs[i].isDead &amp;&amp; switchesAttackers(i)) {
				npcs[i].killerId = getCloseRandomPlayer(i);
			}

			if (System.currentTimeMillis() - npcs[i].lastDamageTaken &gt; 5000) {
				npcs[i].underAttackBy = 0;
			}

			if ((npcs[i].killerId &gt; 0 || npcs[i].underAttack) &amp;&amp; !npcs[i].walkingHome &amp;&amp; retaliates(npcs[i].npcType)) {
				if (!npcs[i].isDead) {
					int p = npcs[i].killerId;
					if (PlayerHandler.players[p] != null) {
						Client c = (Client) PlayerHandler.players[p];
						followPlayer(i, c.playerId);
						if (npcs[i] == null) {
							continue;
						}
						if (npcs[i].attackTimer == 0) {
							if (c != null) {
								attackPlayer(c, i);
							} else {
								npcs[i].killerId = 0;
								npcs[i].underAttack = false;
								npcs[i].facePlayer(0);
							}
						}
					} else {
						npcs[i].killerId = 0;
						npcs[i].underAttack = false;
						npcs[i].facePlayer(0);
					}
				}
			}
			/**
			 * Random walking and walking home
			 **/
			if (npcs[i] == null) {
				continue;
			}
			if ((!npcs[i].underAttack || npcs[i].walkingHome) &amp;&amp; npcs[i].randomWalk &amp;&amp; !npcs[i].isDead) {
				npcs[i].facePlayer(0);
				npcs[i].killerId = 0;
				if (npcs[i].spawnedBy == 0) {
					if ((npcs[i].absX &gt; npcs[i].makeX + Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absX &lt; npcs[i].makeX - Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absY &gt; npcs[i].makeY + Config.NPC_RANDOM_WALK_DISTANCE) || (npcs[i].absY &lt; npcs[i].makeY - Config.NPC_RANDOM_WALK_DISTANCE)) {
						npcs[i].walkingHome = true;
					}
				}

				if (npcs[i].walkingHome &amp;&amp; npcs[i].absX == npcs[i].makeX &amp;&amp; npcs[i].absY == npcs[i].makeY) {
					npcs[i].walkingHome = false;
				} else if (npcs[i].walkingHome) {
					npcs[i].moveX = GetMove(npcs[i].absX, npcs[i].makeX);
					npcs[i].moveY = GetMove(npcs[i].absY, npcs[i].makeY);
					npcs[i].getNextNPCMovement(i);
					npcs[i].updateRequired = true;
				}
				if (npcs[i].walkingType == 1) {
					if (Misc.random(3) == 1 &amp;&amp; !npcs[i].walkingHome) {
						int MoveX = 0;
						int MoveY = 0;
						int Rnd = Misc.random(9);
						if (Rnd == 1) {
							MoveX = 1;
							MoveY = 1;
						} else if (Rnd == 2) {
							MoveX = -1;
						} else if (Rnd == 3) {
							MoveY = -1;
						} else if (Rnd == 4) {
							MoveX = 1;
						} else if (Rnd == 5) {
							MoveY = 1;
						} else if (Rnd == 6) {
							MoveX = -1;
							MoveY = -1;
						} else if (Rnd == 7) {
							MoveX = -1;
							MoveY = 1;
						} else if (Rnd == 8) {
							MoveX = 1;
							MoveY = -1;
						}

						if (MoveX == 1) {
							if (npcs[i].absX + MoveX &lt; npcs[i].makeX + 1) {
								npcs[i].moveX = MoveX;
							} else {
								npcs[i].moveX = -1;
							}
						}

						if (MoveX == -1) {
							if (npcs[i].absX - MoveX &gt; npcs[i].makeX - 1) {
								npcs[i].moveX = MoveX;
							} else {
								npcs[i].moveX = -1;
							}
						}

						if (MoveY == 1) {
							if (npcs[i].absY + MoveY &lt; npcs[i].makeY + 1) {
								npcs[i].moveY = MoveY;
							} else {
								npcs[i].moveY = -1;
							}
						}

						if (MoveY == -1) {
							if (npcs[i].absY - MoveY &gt; npcs[i].makeY - 1) {
								npcs[i].moveY = MoveY;
							} else {
								npcs[i].moveY = -1;
							}
						}


						int x = (npcs[i].absX + npcs[i].moveX);
						int y = (npcs[i].absY + npcs[i].moveY);
						if (VirtualWorld.I(npcs[i].heightLevel, npcs[i].absX, npcs[i].absY, x, y, 0)) {
							npcs[i].getNextNPCMovement(i);
						} else {
							npcs[i].moveX = -1;
							npcs[i].moveY = -1;
						}
						npcs[i].updateRequired = true;
					}
				}
			}

			if (npcs[i].isDead == true) {
				if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].applyDead == false &amp;&amp; npcs[i].needRespawn == false) {
					npcs[i].updateRequired = true;
					npcs[i].facePlayer(0);
					npcs[i].killedBy = getNpcKillerId(i);
					npcs[i].animNumber = getDeadEmote(i); // dead emote
					npcs[i].animUpdateRequired = true;
					npcs[i].freezeTimer = 0;
					npcs[i].applyDead = true;
					killedBarrow(i);
					if (isFightCaveNpc(i)) {
						killedTzhaar(i);
					}
					if (npcs[i].summon == true) {
						npcs[i].summon = false;
					}
					npcs[i].actionTimer = 4; // delete time
					resetPlayersInCombat(i);
					/*if (npcs[i].npcType == 1158){
						handleKalpite(i);
					}*/


				} else if (npcs[i] != null &amp;&amp; npcs[i].actionTimer == 0 &amp;&amp; npcs[i].applyDead == true &amp;&amp; npcs[i].needRespawn == false) {
					//if (npcs[i] != null) {
					npcs[i].needRespawn = true;
					npcs[i].actionTimer = getRespawnTime(i); // respawn time
					dropItems(i); // npc drops items!
					appendSlayerExperience(i);
					//appendKillCount(i);
					npcs[i].absX = npcs[i].makeX;
					npcs[i].absY = npcs[i].makeY;
					npcs[i].HP = npcs[i].MaxHP;
					npcs[i].animNumber = 0x328;
					npcs[i].updateRequired = true;
					npcs[i].animUpdateRequired = true;
					if (npcs[i].npcType &gt;= 2440 &amp;&amp; npcs[i].npcType &lt;= 2446) {
						Server.objectManager.removeObject(npcs[i].absX, npcs[i].absY);
					}
					Client c = (Client) PlayerHandler.players[i];
					if (npcs[i].npcType == 5666) {
						c.getAchievements().getBarrelChestAchievement().completeTask(c);
					} else if (npcs[i].npcType == 6247) {
						c.getAchievements().getCommanderZilyanaAchievement().completeTask(c);
					} else if (npcs[i].npcType == 8133) {
						c.getAchievements().getCorporalBeastAchievement().completeTask(c);
					} else if (npcs[i].npcType == 6260) {
						c.getAchievements().getGeneralGraardorAchievement().completeTask(c);
					} else if (npcs[i].npcType == 2745) {
						handleJadDeath(i);
						c.getAchievements().getJadAchievement().completeTask(c);
					} else if (npcs[i].npcType == 50) {
						c.getAchievements().getKingBlackDragonAchievement().completeTask(c);
					} else if (npcs[i].npcType == 6222) {
						c.getAchievements().getKreeArraAchievement().completeTask(c);
					} else if (npcs[i].npcType == 6203) {
						c.getAchievements().getKRilTsusarothAchievement().completeTask(c);
					} else if (npcs[i].npcType == 8349) {
						c.getAchievements().getTormentedDemonAchievement().completeTask(c);
					}
					if (npcs[i].npcType == 3491) {
						handleRFDDeath(i);
					}

					if (npcs[i] != null &amp;&amp; npcs[i].npcType != 1158) {
						if (!npcs[i].needRespawn) {
							npcs[i] = null;
							for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
								if (PlayerHandler.players[j] != null) {
									PlayerHandler.players[j].RebuildNPCList = true;
								}
							}
							continue;
						}
						npcs[i].needRespawn = true;
						npcs[i].actionTimer = 30;
						npcs[i].absX = npcs[i].makeX;
						npcs[i].absY = npcs[i].makeY - 1;
					} else if (npcs[i] != null &amp;&amp; npcs[i].npcType == 1158) {
						npcs[i] = null;
						for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
							if (PlayerHandler.players[j] != null) {
								PlayerHandler.players[j].RebuildNPCList = true;
							}
						}
					}

				} else if (npcs[i].actionTimer == 0 &amp;&amp; npcs[i].needRespawn == true) {
					if (npcs[i].spawnedBy &gt; 0) {
						npcs[i] = null;
					} else {
						/*if (npcs[i].actionTimer &lt;= 0 &amp;&amp; npcs[i].needRespawn &amp;&amp; npcs[i].NeedsRespawn) {
						for (int j = 1; j &lt; Config.MAX_PLAYERS; j++) {
							if (Server.playerHandler.players[j] != null) {
								Server.playerHandler.players[j].RebuildNPCList = true;
							}
						}*/
						int type = npcs[i].npcType;
						if (type == 1160) {
							type = 1158;
						}
						int x = npcs[i].makeX;
						int y = npcs[i].makeY;
						int height = npcs[i].heightLevel;
						int walk = npcs[i].walkingType;
						int mHp = npcs[i].MaxHP;
						int mHit = npcs[i].maxHit;
						int attack = npcs[i].attack;
						int defence = npcs[i].defence;

						npcs[i] = null;
						newNPC(type, x, y, height, walk, mHp, mHit, attack, defence);
					}
				}
			}
		}
	}
}[/code]
</code></pre>
<p>Thanks  ;D</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/exception/412193/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/exception/412193/1</link>
        <pubDate>Sat, 27 Aug 2011 01:44:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-412193-1</guid>
        <source url="https://forum.moparisthebest.com/t/exception/412193.rss">Exception</source>
      </item>
  </channel>
</rss>
