<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>FindImage Method</title>
    <link>https://forum.moparisthebest.com/t/findimage-method/182238</link>
    <description>Was bored, uses the same needleHaystack theory as my other findImage...
[code]
package com.vibesoft;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Random;

/**
 * Created with IntelliJ IDEA.
 * User: Vaughan D
 * Date: Feb 16, 2008
 * Time: 5:51:35 PM
 * To change this template use File | Settings | File Templates.
 */
public class Main {
    public Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public Dimension frameSize = new Dimension(350, 250);
    public BufferedImage buffImg;
    public JFileChooser fileChooser;
    public JTextArea log;

    public static void main(String[] args) {
        new Main();
    }

    public Main() {
        JFrame frame = new JFrame(&quot;FindImage by Speedster239&quot;);
        frame.setLocation(screenSize.width / 2 - frameSize.width / 2, screenSize.height / 2 - frameSize.height / 2);
        frame.setSize(frameSize);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);
        //
        log = new JTextArea();
        log.setColumns(20);
        log.setRows(5);
        log.setFont(new Font(&quot;Tahoma&quot;,0,11));
        log.setEditable(false);
        log.setLineWrap(true);
        log.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.getViewport().add(log);
        JPanel logHolder = new JPanel();
        logHolder.setLayout(new BorderLayout());
        logHolder.setBounds(0,95,345,125);
        logHolder.add(scrollPane);
        frame.getContentPane().add(logHolder);
        //
        final JSlider checkSlider = new JSlider(10,45,15);
        checkSlider.setPaintLabels(true);
        checkSlider.setPaintTicks(true);
        checkSlider.setMinorTickSpacing(2);
        checkSlider.setMajorTickSpacing(5);
        checkSlider.setBounds(5,23,150,63);
        checkSlider.setBorder(BorderFactory.createTitledBorder(&quot;Check-Percent&quot;));
        frame.getContentPane().add(checkSlider);
        //
        JButton openButton = new JButton(&quot;Open File...&quot;);
        openButton.setBounds(frameSize.width / 2 - 75, 5, 150, 25);
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fileChooser = new JFileChooser();
                fileChooser.showOpenDialog(null);
                try {
                    buffImg = ImageIO.read(new File(fileChooser.getSelectedFile().getPath()));
                } catch (Exception ex) {
                }
                long start = System.currentTimeMillis();
                Point local = findImage(buffImg, new Dimension(0, 0), screenSize, checkSlider.getValue());
                log(&quot;Searching took &quot; + (System.currentTimeMillis() - start) + &quot; milliseconds, 1/4 the amount of time to blink your eye.&quot;);
                moveSmooth(local.x,local.y);
            }
        });
        frame.getContentPane().add(openButton);
        frame.setVisible(true);
    }

    public Point findImage(BufferedImage searchImg, Dimension start, Dimension end, int checkpercent) {
        Point imagePoint = null;
        log(&quot;Searching for image &quot;+fileChooser.getSelectedFile().getName()+&quot; which is &quot;+searchImg.getWidth()+&quot;x&quot;+searchImg.getHeight()+&quot; on a &quot;+screenSize.width+&quot;x&quot;+screenSize.height+&quot; screen.&quot;);
        BufferedImage screenImg = null;
        int checkSum = 0;
        Color firstPix = new Color(searchImg.getRGB(0, 0));
        try {
            Robot r = new Robot();
            screenImg = r.createScreenCapture(new Rectangle(screenSize));
        } catch (Exception ex) {
            log(&quot;[Error] - ISO 1 - Capturing screen image.&quot;);
        }
        for (int x = 0; x &lt; screenSize.getWidth(); x++) {
            for (int y = 0; y &lt; screenSize.getHeight(); y++) {
                if (new Color(screenImg.getRGB(x, y)).getRGB() == firstPix.getRGB()) {
                    for (int x2 = 0; x2 &lt; searchImg.getWidth(); x2++) {
                        for (int y2 = 0; y2 &lt; searchImg.getHeight(); y2++) {
                            if (new Color(searchImg.getRGB(x2, y2)).getRGB() == new Color(screenImg.getRGB(x2 + x, y2 + y)).getRGB()) {
                                checkSum++;
                                if (checkSum &gt;= (checkpercent/100) * (searchImg.getWidth() * searchImg.getHeight())) {
                                    try {
                                        log(&quot;Found image @ &quot; + x + &quot;,&quot; + y);
                                        imagePoint = new Point(x + searchImg.getWidth()/2, y + searchImg.getHeight()/2);
                                        return imagePoint;
                                    } catch (Exception ex) {
                                        log(&quot;[Error] - ISO 2 - Relocation of mousepointer.&quot;);
                                    }
                                }
                            } else {
                                if(checkSum &gt; 0) {
                                    checkSum--;
                                }else{
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public void log(String message) {
        log.append(new StringBuilder(&quot;\n &quot;+message).toString());
        log.setCaretPosition(log.getText().length());
    }

        //MoveSmooth mouse
    public static void moveSmooth(int destX, int destY) {
        int localX = getMouseX();
        int localY = getMouseY();
        Random r = new Random();
        while (localX != destX || localY != destY) {
            if (getMouseX() &gt; destX) {
                localX = localX - 1;
            } else if (getMouseX() &lt; destX) {
                localX = localX + 1;
            }
            if (getMouseY() &gt; destY) {
                localY = localY - 1;
            } else if (getMouseY() &lt; destY) {
                localY = localY + 1;
            }
            try {
                Thread.sleep(r.nextInt(2)); //Randomized sleep
            }
            catch (Exception ex) {
            }
            try {
                Robot r2 = new Robot();
                r2.mouseMove(localX, localY);
            } catch (Exception ex) {
            }

        }
    }

    public static final int getMouseX() {
        PointerInfo pI = MouseInfo.getPointerInfo();
        return new Double(pI.getLocation().getX()).intValue();
    }

    public static final int getMouseY() {
        PointerInfo pI = MouseInfo.getPointerInfo();
        return new Double(pI.getLocation().getY()).intValue();
    }
}

[/code]

Some outputs:
[code]
 Searching for image img.png which is 12x14 on a 1280x1024 screen.
 Found image @ 14,1003
 Searching took 94 milliseconds, 1/4 the amount of time to blink your eye.

 Searching for image run.png which is 17x12 on a 1280x1024 screen.
 Found image @ 213,1409
 Searching took 204 milliseconds, 1/4 the amount of time to blink your eye.
[/code]

The attached jar has it all setup to be able to open image files and search for them on the screen...
Assuming that you have some intelligence you should be able to modify the findImage function to work with your own stuff.</description>
    
    <lastBuildDate>Mon, 18 Feb 2008 06:35:14 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/findimage-method/182238.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>FindImage Method</title>
        <dc:creator><![CDATA[@speedster239 speedster239]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speedster239">@speedster239</a> wrote:</p>
          <blockquote>
              <p>Will do.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findimage-method/182238/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findimage-method/182238/5</link>
        <pubDate>Mon, 18 Feb 2008 06:35:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-182238-5</guid>
        <source url="https://forum.moparisthebest.com/t/findimage-method/182238.rss">FindImage Method</source>
      </item>
      <item>
        <title>FindImage Method</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>ignore taharok for he is a twat</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findimage-method/182238/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findimage-method/182238/4</link>
        <pubDate>Mon, 18 Feb 2008 03:30:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-182238-4</guid>
        <source url="https://forum.moparisthebest.com/t/findimage-method/182238.rss">FindImage Method</source>
      </item>
      <item>
        <title>FindImage Method</title>
        <dc:creator><![CDATA[@speedster239 speedster239]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speedster239">@speedster239</a> wrote:</p>
          <blockquote>
              <p>Perhaps you are speaking of this one:<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://forum.moparisthebest.com/uploads/default/original/2X/1/1f0dc167bcf798bdbd70b03bf0fd1bc836e54e1a.png" class="site-icon" width="32" height="32">
      <a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a>
  </header>
  <article class="onebox-body">
    <img src="https://forum.moparisthebest.com/uploads/default/original/2X/4/41fecb6185fddc2758aeba68c3f8c9c78e26e4ff.png" class="thumbnail onebox-avatar" width="500" height="500">

<h3><a href="https://forum.moparisthebest.com/" target="_blank">moparisthebest.com</a></h3>

<p>programming, irc, cars</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
<p>and perhaps you didn’t take three seconds to recognize the difference between:</p>
<pre><code class="lang-auto">    public Point findImage(BufferedImage searchImg, Dimension start, Dimension end, int checkpercent) {
        Point imagePoint = null;
        log("Searching for image "+fileChooser.getSelectedFile().getName()+" which is "+searchImg.getWidth()+"x"+searchImg.getHeight()+" on a "+screenSize.width+"x"+screenSize.height+" screen.");
        BufferedImage screenImg = null;
        int checkSum = 0;
        Color firstPix = new Color(searchImg.getRGB(0, 0));
        try {
            Robot r = new Robot();
            screenImg = r.createScreenCapture(new Rectangle(screenSize));
        } catch (Exception ex) {
            log("[Error] - ISO 1 - Capturing screen image.");
        }
        for (int x = 0; x &lt; screenSize.getWidth(); x++) {
            for (int y = 0; y &lt; screenSize.getHeight(); y++) {
                if (new Color(screenImg.getRGB(x, y)).getRGB() == firstPix.getRGB()) {
                    for (int x2 = 0; x2 &lt; searchImg.getWidth(); x2++) {
                        for (int y2 = 0; y2 &lt; searchImg.getHeight(); y2++) {
                            if (new Color(searchImg.getRGB(x2, y2)).getRGB() == new Color(screenImg.getRGB(x2 + x, y2 + y)).getRGB()) {
                                checkSum++;
                                if (checkSum &gt;= (checkpercent/100) * (searchImg.getWidth() * searchImg.getHeight())) {
                                    try {
                                        log("Found image @ " + x + "," + y);
                                        imagePoint = new Point(x + searchImg.getWidth()/2, y + searchImg.getHeight()/2);
                                        return imagePoint;
                                    } catch (Exception ex) {
                                        log("[Error] - ISO 2 - Relocation of mousepointer.");
                                    }
                                }
                            } else {
                                if(checkSum &gt; 0) {
                                    checkSum--;
                                }else{
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }</code></pre>
<p>and…</p>
<pre><code class="lang-auto">   public static boolean findImage(String path, Dimension start, Dimension end, int tolerance, boolean move) {
        try {
            Robot r = new Robot();
            int checkSum = 0;
            BufferedImage searchImg = null;
            try {
                searchImg = ImageIO.read(new File(path));
            } catch (Exception ex) {
                System.out.println("Couldn't load the image we are searching for.");
            }
            Dimension d = Toolkit.getDefaultToolkit().getScreenSize();
            BufferedImage canvasImg = r.createScreenCapture(new Rectangle(d.width, d.height));
            Color firstPixel = new Color(searchImg.getRGB(0, 0));
            for (int y = start.height; y &lt; end.height; y++) {
                for (int x = start.width; x &lt; end.width; x++) {
                    Color curPixel = new Color(canvasImg.getRGB(x, y));
                    if (Math.abs(firstPixel.getRed() - curPixel.getRed()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getGreen() - curPixel.getGreen()) &lt;= tolerance &amp;&amp; Math.abs(firstPixel.getBlue() - curPixel.getBlue()) &lt;= tolerance) {
                        for (int px = 1; px &lt; searchImg.getWidth(); px++) {
                            for (int py = 1; py &lt; searchImg.getHeight(); py++) {
                                Color lapsePixel = new Color(searchImg.getRGB(px, py));
                                if (px + x &gt;= end.width &amp;&amp; py + y &gt;= end.height) {
                                    return false;
                                }
                                Color canvasPixel = new Color(canvasImg.getRGB(x + px, y + py));
                                if (Math.abs(lapsePixel.getRed() - canvasPixel.getRed()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getGreen() - canvasPixel.getGreen()) &lt;= tolerance + 10 &amp;&amp; Math.abs(lapsePixel.getBlue() - canvasPixel.getBlue()) &lt;= tolerance + 10) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else if (lapsePixel.getRed() == 0 &amp;&amp; lapsePixel.getGreen() == 240 &amp;&amp; lapsePixel.getBlue() == 240) {
                                    checkSum++;
                                    if (checkSum &gt;= .35 * (searchImg.getWidth() * searchImg.getHeight())) {
                                        if (move) {
                                            r.mouseMove(x + (searchImg.getWidth() / 2), y + (searchImg.getHeight() / 2));
                                        }
                                        found = true;
                                        return found;
                                    }
                                } else {
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        } catch (Exception ex) {
        }
        return found;
    }</code></pre>
<p>…or perhaps you were to busy looking for a flaw to <span class="bbcode-i">actually</span> post something constructive?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findimage-method/182238/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findimage-method/182238/3</link>
        <pubDate>Mon, 18 Feb 2008 03:14:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-182238-3</guid>
        <source url="https://forum.moparisthebest.com/t/findimage-method/182238.rss">FindImage Method</source>
      </item>
      <item>
        <title>FindImage Method</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>I swear I saw this in this section only a week or two ago…</p>
<p>Ah, I see. You made <span class="bbcode-i">another</span> topic for this findImage method of yours…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findimage-method/182238/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findimage-method/182238/2</link>
        <pubDate>Mon, 18 Feb 2008 02:33:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-182238-2</guid>
        <source url="https://forum.moparisthebest.com/t/findimage-method/182238.rss">FindImage Method</source>
      </item>
      <item>
        <title>FindImage Method</title>
        <dc:creator><![CDATA[@speedster239 speedster239]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/speedster239">@speedster239</a> wrote:</p>
          <blockquote>
              <p>Was bored, uses the same needleHaystack theory as my other findImage…</p>
<pre><code class="lang-auto">package com.vibesoft;

import javax.swing.*;
import javax.imageio.ImageIO;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.Random;

/**
 * Created with IntelliJ IDEA.
 * User: Vaughan D
 * Date: Feb 16, 2008
 * Time: 5:51:35 PM
 * To change this template use File | Settings | File Templates.
 */
public class Main {
    public Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
    public Dimension frameSize = new Dimension(350, 250);
    public BufferedImage buffImg;
    public JFileChooser fileChooser;
    public JTextArea log;

    public static void main(String[] args) {
        new Main();
    }

    public Main() {
        JFrame frame = new JFrame("FindImage by Speedster239");
        frame.setLocation(screenSize.width / 2 - frameSize.width / 2, screenSize.height / 2 - frameSize.height / 2);
        frame.setSize(frameSize);
        frame.setResizable(false);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLayout(null);
        //
        log = new JTextArea();
        log.setColumns(20);
        log.setRows(5);
        log.setFont(new Font("Tahoma",0,11));
        log.setEditable(false);
        log.setLineWrap(true);
        log.setWrapStyleWord(true);
        JScrollPane scrollPane = new JScrollPane();
        scrollPane.getViewport().add(log);
        JPanel logHolder = new JPanel();
        logHolder.setLayout(new BorderLayout());
        logHolder.setBounds(0,95,345,125);
        logHolder.add(scrollPane);
        frame.getContentPane().add(logHolder);
        //
        final JSlider checkSlider = new JSlider(10,45,15);
        checkSlider.setPaintLabels(true);
        checkSlider.setPaintTicks(true);
        checkSlider.setMinorTickSpacing(2);
        checkSlider.setMajorTickSpacing(5);
        checkSlider.setBounds(5,23,150,63);
        checkSlider.setBorder(BorderFactory.createTitledBorder("Check-Percent"));
        frame.getContentPane().add(checkSlider);
        //
        JButton openButton = new JButton("Open File...");
        openButton.setBounds(frameSize.width / 2 - 75, 5, 150, 25);
        openButton.addActionListener(new ActionListener() {
            public void actionPerformed(ActionEvent e) {
                fileChooser = new JFileChooser();
                fileChooser.showOpenDialog(null);
                try {
                    buffImg = ImageIO.read(new File(fileChooser.getSelectedFile().getPath()));
                } catch (Exception ex) {
                }
                long start = System.currentTimeMillis();
                Point local = findImage(buffImg, new Dimension(0, 0), screenSize, checkSlider.getValue());
                log("Searching took " + (System.currentTimeMillis() - start) + " milliseconds, 1/4 the amount of time to blink your eye.");
                moveSmooth(local.x,local.y);
            }
        });
        frame.getContentPane().add(openButton);
        frame.setVisible(true);
    }

    public Point findImage(BufferedImage searchImg, Dimension start, Dimension end, int checkpercent) {
        Point imagePoint = null;
        log("Searching for image "+fileChooser.getSelectedFile().getName()+" which is "+searchImg.getWidth()+"x"+searchImg.getHeight()+" on a "+screenSize.width+"x"+screenSize.height+" screen.");
        BufferedImage screenImg = null;
        int checkSum = 0;
        Color firstPix = new Color(searchImg.getRGB(0, 0));
        try {
            Robot r = new Robot();
            screenImg = r.createScreenCapture(new Rectangle(screenSize));
        } catch (Exception ex) {
            log("[Error] - ISO 1 - Capturing screen image.");
        }
        for (int x = 0; x &lt; screenSize.getWidth(); x++) {
            for (int y = 0; y &lt; screenSize.getHeight(); y++) {
                if (new Color(screenImg.getRGB(x, y)).getRGB() == firstPix.getRGB()) {
                    for (int x2 = 0; x2 &lt; searchImg.getWidth(); x2++) {
                        for (int y2 = 0; y2 &lt; searchImg.getHeight(); y2++) {
                            if (new Color(searchImg.getRGB(x2, y2)).getRGB() == new Color(screenImg.getRGB(x2 + x, y2 + y)).getRGB()) {
                                checkSum++;
                                if (checkSum &gt;= (checkpercent/100) * (searchImg.getWidth() * searchImg.getHeight())) {
                                    try {
                                        log("Found image @ " + x + "," + y);
                                        imagePoint = new Point(x + searchImg.getWidth()/2, y + searchImg.getHeight()/2);
                                        return imagePoint;
                                    } catch (Exception ex) {
                                        log("[Error] - ISO 2 - Relocation of mousepointer.");
                                    }
                                }
                            } else {
                                if(checkSum &gt; 0) {
                                    checkSum--;
                                }else{
                                    checkSum = 0;
                                }
                            }
                        }
                    }
                }
            }
        }
        return null;
    }

    public void log(String message) {
        log.append(new StringBuilder("\n "+message).toString());
        log.setCaretPosition(log.getText().length());
    }

        //MoveSmooth mouse
    public static void moveSmooth(int destX, int destY) {
        int localX = getMouseX();
        int localY = getMouseY();
        Random r = new Random();
        while (localX != destX || localY != destY) {
            if (getMouseX() &gt; destX) {
                localX = localX - 1;
            } else if (getMouseX() &lt; destX) {
                localX = localX + 1;
            }
            if (getMouseY() &gt; destY) {
                localY = localY - 1;
            } else if (getMouseY() &lt; destY) {
                localY = localY + 1;
            }
            try {
                Thread.sleep(r.nextInt(2)); //Randomized sleep
            }
            catch (Exception ex) {
            }
            try {
                Robot r2 = new Robot();
                r2.mouseMove(localX, localY);
            } catch (Exception ex) {
            }

        }
    }

    public static final int getMouseX() {
        PointerInfo pI = MouseInfo.getPointerInfo();
        return new Double(pI.getLocation().getX()).intValue();
    }

    public static final int getMouseY() {
        PointerInfo pI = MouseInfo.getPointerInfo();
        return new Double(pI.getLocation().getY()).intValue();
    }
}
</code></pre>
<p>Some outputs:</p>
<pre><code class="lang-auto"> Searching for image img.png which is 12x14 on a 1280x1024 screen.
 Found image @ 14,1003
 Searching took 94 milliseconds, 1/4 the amount of time to blink your eye.

 Searching for image run.png which is 17x12 on a 1280x1024 screen.
 Found image @ 213,1409
 Searching took 204 milliseconds, 1/4 the amount of time to blink your eye.</code></pre>
<p>The attached jar has it all setup to be able to open image files and search for them on the screen…<br>
Assuming that you have some intelligence you should be able to modify the findImage function to work with your own stuff.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/findimage-method/182238/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/findimage-method/182238/1</link>
        <pubDate>Sun, 17 Feb 2008 23:27:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-182238-1</guid>
        <source url="https://forum.moparisthebest.com/t/findimage-method/182238.rss">FindImage Method</source>
      </item>
  </channel>
</rss>
