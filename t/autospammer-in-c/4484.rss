<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Autospammer in C++</title>
    <link>https://forum.moparisthebest.com/t/autospammer-in-c/4484</link>
    <description>Hope you like it :)
[code]
// Made by suck my r2h.  Permission to distribute and use as long as this source is not modified in any way whatsoever.
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;
#include &lt;windows.h&gt;
void sendkeys(string keys)
{
	for(int i = 0; i &lt; keys.size(); i++)
	{
		keybd_event(VkKeyScan(keys.at(i)),NULL,NULL,NULL);
		keybd_event(VkKeyScan(keys.at(i)),NULL,KEYEVENTF_KEYUP,NULL);
	}
	keybd_event(VK_RETURN,NULL,NULL,NULL);
}

int main(int argc, char *argv[])
{
	int times,sleeptime;
	string spamtext;
	cout &lt;&lt; &quot;Welcome to suck my r2h\&#39;s autospammer.\nEnter a string of text to spam (Press enter TWICE!!): &quot;;
	getline(cin,spamtext);
	cout &lt;&lt; &quot;Now enter the number of times to spam this text: &quot;; cin &gt;&gt; times;
	cout &lt;&lt; &quot;Enter the millisecond delay between spammings: &quot;; cin &gt;&gt; sleeptime;
	cout &lt;&lt; &quot;5 Seconds before spamming begins!\n&quot;;
	for(int i = 0; i &lt; times+1; i++)
	{
		sendkeys(spamtext);
		Sleep(sleeptime);
	}
	return 0;
}
[/code]

And if you get an error during compile/link/runtime, add this header to your project:
[code]/*++

Copyright (c) 1997-1998  Microsoft Corporation

Module Name:

    basetsd.h

Abstract:

    Type definitions for the basic sized types.

Author:

    Jeff Havens (jhavens)   23-Oct-1997

Revision History:

--*/

#ifndef _BASETSD_H_
#define _BASETSD_H_

#ifdef __cplusplus
extern &quot;C&quot; {
#endif

//
// The following types are guaranteed to be signed and 32 bits wide.
//

typedef int LONG32, *PLONG32;
typedef int INT32, *PINT32;

//
// The following types are guaranteed to be unsigned and 32 bits wide.
//

typedef unsigned int ULONG32, *PULONG32;
typedef unsigned int DWORD32, *PDWORD32;
typedef unsigned int UINT32, *PUINT32;

//
// The INT_PTR is guaranteed to be the same size as a pointer.  Its
// size with change with pointer size (32/64).  It should be used
// anywhere that a pointer is cast to an integer type. UINT_PTR is
// the unsigned variation.
//
// HALF_PTR is half the size of a pointer it intended for use with
// within strcuture which contain a pointer and two small fields.
// UHALF_PTR is the unsigned variation.
//

#ifdef _WIN64

typedef __int64 INT_PTR, *PINT_PTR;
typedef unsigned __int64 UINT_PTR, *PUINT_PTR;

#define MAXINT_PTR (0x7fffffffffffffffI64)
#define MININT_PTR (0x8000000000000000I64)
#define MAXUINT_PTR (0xffffffffffffffffUI64)

typedef unsigned int UHALF_PTR, *PUHALF_PTR;
typedef int HALF_PTR, *PHALF_PTR;

#define MAXUHALF_PTR (0xffffffffUL)
#define MAXHALF_PTR (0x7fffffffL)
#define MINHALF_PTR (0x80000000L)

#pragma warning(disable:4311)   // type cast truncation

#if !defined(__midl)
__inline
unsigned long
HandleToUlong(
    void *h
    )
{
    return((unsigned long) h );
}

__inline
unsigned long
PtrToUlong(
    void  *p
    )
{
    return((unsigned long) p );
}

__inline
unsigned short
PtrToUshort(
    void  *p
    )
{
    return((unsigned short) p );
}

__inline
long
PtrToLong(
    void  *p
    )
{
    return((long) p );
}

__inline
short
PtrToShort(
    void  *p
    )
{
    return((short) p );
}
#endif
#pragma warning(3:4311)   // type cast truncation

#else


typedef long INT_PTR, *PINT_PTR;
typedef unsigned long UINT_PTR, *PUINT_PTR;

#define MAXINT_PTR (0x7fffffffL)
#define MININT_PTR (0x80000000L)
#define MAXUINT_PTR (0xffffffffUL)

typedef unsigned short UHALF_PTR, *PUHALF_PTR;
typedef short HALF_PTR, *PHALF_PTR;

#define MAXUHALF_PTR 0xffff
#define MAXHALF_PTR 0x7fff
#define MINHALF_PTR 0x8000

#define HandleToUlong( h ) ((ULONG) (h) )
#define PtrToUlong( p ) ((ULONG) (p) )
#define PtrToLong( p ) ((LONG) (p) )
#define PtrToUshort( p ) ((unsigned short) (p) )
#define PtrToShort( p ) ((short) (p) )

#endif

//
// SIZE_T used for counts or ranges which need to span the range of
// of a pointer.  SSIZE_T is the signed variation.
//

typedef UINT_PTR SIZE_T, *PSIZE_T;
typedef INT_PTR SSIZE_T, *PSSIZE_T;

//
// The following types are guaranteed to be signed and 64 bits wide.
//

typedef __int64 LONG64, *PLONG64;
typedef __int64 INT64, *PINT64;


//
// The following types are guaranteed to be unsigned and 64 bits wide.
//

typedef unsigned __int64 ULONG64, *PULONG64;
typedef unsigned __int64 DWORD64, *PDWORD64;
typedef unsigned __int64 UINT64, *PUINT64;

#ifdef __cplusplus
}
#endif

#endif // _BASETSD_H_[/code]
save the file as basetsd.h and add the line
[code]#include &quot;basetsd.h&quot;[/code]
to the main CPP project file

And please tell me what you think of my source :)</description>
    
    <lastBuildDate>Fri, 07 Jul 2006 18:33:47 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/autospammer-in-c/4484.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Autospammer in C++</title>
        <dc:creator><![CDATA[@suck_my_r2h suck my r2h]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/suck_my_r2h">@suck_my_r2h</a> wrote:</p>
          <blockquote>
              <p>Hope you like it <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<pre><code class="lang-auto">// Made by suck my r2h.  Permission to distribute and use as long as this source is not modified in any way whatsoever.
#include &lt;string&gt;
#include &lt;iostream&gt;
using namespace std;
#include &lt;windows.h&gt;
void sendkeys(string keys)
{
	for(int i = 0; i &lt; keys.size(); i++)
	{
		keybd_event(VkKeyScan(keys.at(i)),NULL,NULL,NULL);
		keybd_event(VkKeyScan(keys.at(i)),NULL,KEYEVENTF_KEYUP,NULL);
	}
	keybd_event(VK_RETURN,NULL,NULL,NULL);
}

int main(int argc, char *argv[])
{
	int times,sleeptime;
	string spamtext;
	cout &lt;&lt; "Welcome to suck my r2h\'s autospammer.\nEnter a string of text to spam (Press enter TWICE!!): ";
	getline(cin,spamtext);
	cout &lt;&lt; "Now enter the number of times to spam this text: "; cin &gt;&gt; times;
	cout &lt;&lt; "Enter the millisecond delay between spammings: "; cin &gt;&gt; sleeptime;
	cout &lt;&lt; "5 Seconds before spamming begins!\n";
	for(int i = 0; i &lt; times+1; i++)
	{
		sendkeys(spamtext);
		Sleep(sleeptime);
	}
	return 0;
}</code></pre>
<p>And if you get an error during compile/link/runtime, add this header to your project:</p>
<p>[code]/*++</p>
<p>Copyright © 1997-1998  Microsoft Corporation</p>
<p>Module Name:</p>
<pre><code>basetsd.h
</code></pre>
<p>Abstract:</p>
<pre><code>Type definitions for the basic sized types.
</code></pre>
<p>Author:</p>
<pre><code>Jeff Havens (jhavens)   23-Oct-1997
</code></pre>
<p>Revision History:</p>
<p>–*/</p>
<p><span class="hashtag">#ifndef</span> <em>BASETSD_H</em><br>
<span class="hashtag">#define</span> <em>BASETSD_H</em></p>
<p><span class="hashtag">#ifdef</span> __cplusplus<br>
extern “C” {<br>
<span class="hashtag">#endif</span></p>
<p>//<br>
// The following types are guaranteed to be signed and 32 bits wide.<br>
//</p>
<p>typedef int LONG32, *PLONG32;<br>
typedef int INT32, *PINT32;</p>
<p>//<br>
// The following types are guaranteed to be unsigned and 32 bits wide.<br>
//</p>
<p>typedef unsigned int ULONG32, *PULONG32;<br>
typedef unsigned int DWORD32, *PDWORD32;<br>
typedef unsigned int UINT32, *PUINT32;</p>
<p>//<br>
// The INT_PTR is guaranteed to be the same size as a pointer.  Its<br>
// size with change with pointer size (32/64).  It should be used<br>
// anywhere that a pointer is cast to an integer type. UINT_PTR is<br>
// the unsigned variation.<br>
//<br>
// HALF_PTR is half the size of a pointer it intended for use with<br>
// within strcuture which contain a pointer and two small fields.<br>
// UHALF_PTR is the unsigned variation.<br>
//</p>
<p><span class="hashtag">#ifdef</span> _WIN64</p>
<p>typedef __int64 INT_PTR, *PINT_PTR;<br>
typedef unsigned __int64 UINT_PTR, *PUINT_PTR;</p>
<p><span class="hashtag">#define</span> MAXINT_PTR (0x7fffffffffffffffI64)<br>
<span class="hashtag">#define</span> MININT_PTR (0x8000000000000000I64)<br>
<span class="hashtag">#define</span> MAXUINT_PTR (0xffffffffffffffffUI64)</p>
<p>typedef unsigned int UHALF_PTR, *PUHALF_PTR;<br>
typedef int HALF_PTR, *PHALF_PTR;</p>
<p><span class="hashtag">#define</span> MAXUHALF_PTR (0xffffffffUL)<br>
<span class="hashtag">#define</span> MAXHALF_PTR (0x7fffffffL)<br>
<span class="hashtag">#define</span> MINHALF_PTR (0x80000000L)</p>
<p><span class="hashtag">#pragma</span> warning(disable:4311)   // type cast truncation</p>
<p><span class="hashtag">#if</span> !defined(__midl)<br>
__inline<br>
unsigned long<br>
HandleToUlong(<br>
void *h<br>
)<br>
{<br>
return((unsigned long) h );<br>
}</p>
<p>__inline<br>
unsigned long<br>
PtrToUlong(<br>
void  *p<br>
)<br>
{<br>
return((unsigned long) p );<br>
}</p>
<p>__inline<br>
unsigned short<br>
PtrToUshort(<br>
void  *p<br>
)<br>
{<br>
return((unsigned short) p );<br>
}</p>
<p>__inline<br>
long<br>
PtrToLong(<br>
void  *p<br>
)<br>
{<br>
return((long) p );<br>
}</p>
<p>__inline<br>
short<br>
PtrToShort(<br>
void  *p<br>
)<br>
{<br>
return((short) p );<br>
}<br>
<span class="hashtag">#endif</span><br>
<span class="hashtag">#pragma</span> warning(3:4311)   // type cast truncation</p>
<p><span class="hashtag">#else</span></p>
<p>typedef long INT_PTR, *PINT_PTR;<br>
typedef unsigned long UINT_PTR, *PUINT_PTR;</p>
<p><span class="hashtag">#define</span> MAXINT_PTR (0x7fffffffL)<br>
<span class="hashtag">#define</span> MININT_PTR (0x80000000L)<br>
<span class="hashtag">#define</span> MAXUINT_PTR (0xffffffffUL)</p>
<p>typedef unsigned short UHALF_PTR, *PUHALF_PTR;<br>
typedef short HALF_PTR, *PHALF_PTR;</p>
<p><span class="hashtag">#define</span> MAXUHALF_PTR 0xffff<br>
<span class="hashtag">#define</span> MAXHALF_PTR 0x7fff<br>
<span class="hashtag">#define</span> MINHALF_PTR 0x8000</p>
<p><span class="hashtag">#define</span> HandleToUlong( h ) ((ULONG) (h) )<br>
<span class="hashtag">#define</span> PtrToUlong( p ) ((ULONG) § )<br>
<span class="hashtag">#define</span> PtrToLong( p ) ((LONG) § )<br>
<span class="hashtag">#define</span> PtrToUshort( p ) ((unsigned short) § )<br>
<span class="hashtag">#define</span> PtrToShort( p ) ((short) § )</p>
<p><span class="hashtag">#endif</span></p>
<p>//<br>
// SIZE_T used for counts or ranges which need to span the range of<br>
// of a pointer.  SSIZE_T is the signed variation.<br>
//</p>
<p>typedef UINT_PTR SIZE_T, *PSIZE_T;<br>
typedef INT_PTR SSIZE_T, *PSSIZE_T;</p>
<p>//<br>
// The following types are guaranteed to be signed and 64 bits wide.<br>
//</p>
<p>typedef __int64 LONG64, *PLONG64;<br>
typedef __int64 INT64, *PINT64;</p>
<p>//<br>
// The following types are guaranteed to be unsigned and 64 bits wide.<br>
//</p>
<p>typedef unsigned __int64 ULONG64, *PULONG64;<br>
typedef unsigned __int64 DWORD64, *PDWORD64;<br>
typedef unsigned __int64 UINT64, *PUINT64;</p>
<p><span class="hashtag">#ifdef</span> __cplusplus<br>
}<br>
<span class="hashtag">#endif</span></p>
<p><span class="hashtag">#endif</span> // <em>BASETSD_H</em>[/code]<br>
save the file as basetsd.h and add the line</p>
<pre><code class="lang-auto">#include "basetsd.h"</code></pre>
<p>to the main CPP project file</p>
<p>And please tell me what you think of my source <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/autospammer-in-c/4484/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/autospammer-in-c/4484/1</link>
        <pubDate>Fri, 07 Jul 2006 18:33:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-4484-1</guid>
        <source url="https://forum.moparisthebest.com/t/autospammer-in-c/4484.rss">Autospammer in C++</source>
      </item>
  </channel>
</rss>
