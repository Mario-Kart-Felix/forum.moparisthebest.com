<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>317 winterLove RSPS: Understanding packet I/O</title>
    <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509</link>
    <description>Hello!

I got a 317 winterLove RSPS that I have been working on for quite some time now,
but there is an issue that have been bugging me for ages now,
and that is that I&#39;m still unsure/confused by how the TCP-packets are handled
by the server, and I am wondering just exactly how the protocol works.

The server&#39;s [b]Client.class[/b] is declareing private blueprints of input and output streams like so:
[code]
//The socket&#39;s input stream.
private java.io.InputStream inputStream;

//The socket&#39;s output stream.
private java.io.OutputStream outputStream;
[/code]

In the class&#39; constructor, it&#39;s constructing the two streams with the socket&#39;s
getInputStream and getOutputStream methods, like so:
[code]
//Make the &quot;inputStream&quot; the input stream for the Socket.
inputStream = clientSocket.getInputStream();

//Make the &quot;outputStream&quot; the output stream for the Socket.
outputStream = clientSocket.getOutputStream();
[/code]

Still in the constructor; it&#39;s constructing two instances of [b]stream.class[/b], like so:
[code]
outStream = new stream(new byte[bufferSize]);

inStream = new stream(new byte[bufferSize]);
[/code]

I understand that the stream-class constructs the server&#39;s protocol, but as far as I can see it, the socket&#39;s I/O-streams and these two stream-instances are completely seperate.

So what I&#39;m really asking for is how the server is taking the stream-instances in use and how it starts handling data in the I/O-streams with the 317 protocol.

I&#39;m sorry if my question got obfuscated.
Looking forward for replies.

Have a nice day.  :cool:</description>
    
    <lastBuildDate>Fri, 12 Sep 2014 17:56:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@bbrt bbrt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bbrt">@bbrt</a> wrote:</p>
          <blockquote>
              <p>The Stream class basically allows you to not only get bytes from an array (as you can do by indexing to a byte array) but lets you get different data types from the byte array by combining read bytes into one. Somewhere in your code there is a method that calls Socket$read(buffer), which reads up to buffer.length bytes into the array. Then you wrap it into a ‘Stream’ object (which is a shitty name by the way), now you can read from the data. To write a ‘Stream’ to the socket you initialize a new stream object with an empty array and you call Socket$write(buffer).</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/7</link>
        <pubDate>Fri, 12 Sep 2014 17:56:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-7</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <p>Thank you, <span class="bbcode-b">lare69</span>.</p>
<p>Do you by any chance know of an available 317 protocol documentation/overview/tutorial?<br>
I have seen this before: <a href="http://rsps.wikia.com/wiki/317_Protocol" data-bbcode="true" rel="nofollow noopener">http://rsps.wikia.com/wiki/317_Protocol</a>.<br>
But I am looking for a reference with a bit deeper explanation of it.</p>
<p>Thanks.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/6</link>
        <pubDate>Fri, 12 Sep 2014 16:50:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-6</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>the buffer (Stream) stores the data that was read, or waiting to be written. although with blocking IO you can read/write directly from/to the socket</p>
<p>with NIO it forces you to use to a buffer for reading/writing so you cannot read/write directly from/to the socket</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/5</link>
        <pubDate>Mon, 08 Sep 2014 05:16:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-5</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>[quote=“Ole Kristian, post:3, topic:546509”]Hello, <span class="bbcode-b">matzie</span>!<br>
Thank you for your reply.</p>
<p>After the establishment of the stream-objects and setting the offset for both streams,<br>
the following code runs:</p>
<pre><code class="lang-auto">readPtr = writePtr = 0;
buffer = buffer = new byte[bufferSize];</code></pre>
<p>This is also something I don’t understand.<br>
Why not write the code like this?</p>
<p><code>
readPtr = 0;
writePtr = 0;
buffer = new byte[bufferSize];
</code>[/quote]<br>
the buffer = buffer is poor programming.<br>
and the readPtr = writePtr = 0; is just assiging 0 to both, since the code is processed from right to left anyways as<br>
(readPtr = (writePtr = 0)); It is just saving a line of code, also denoting that both of them should be set to the same value.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/4</link>
        <pubDate>Sat, 06 Sep 2014 20:21:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-4</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <p>Hello, <span class="bbcode-b">matzie</span>!<br>
Thank you for your reply.</p>
<p>After the establishment of the stream-objects and setting the offset for both streams,<br>
the following code runs:</p>
<pre><code class="lang-auto">readPtr = writePtr = 0;
buffer = buffer = new byte[bufferSize];</code></pre>
<p>This is also something I don’t understand.<br>
Why not write the code like this?</p>
<pre><code class="lang-auto">readPtr = 0;
writePtr = 0;
buffer = new byte[bufferSize];</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/3</link>
        <pubDate>Sat, 06 Sep 2014 18:12:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-3</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>at the end of the Constructor the read/writing of the buffer begins. In reality, the client is never fully initialized until the player disconnects.</p>
<p>The inputStream is handled by the processPacket() or immediately preceding method calls. The outputStream is handled by the “constructor” part of the code. (I believe that is where it is) It comes after all of the login logic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/2</link>
        <pubDate>Fri, 05 Sep 2014 17:58:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-2</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
      <item>
        <title>317 winterLove RSPS: Understanding packet I/O</title>
        <dc:creator><![CDATA[@Ole_Kristian Ole Kristian]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ole_kristian">@Ole_Kristian</a> wrote:</p>
          <blockquote>
              <p>Hello!</p>
<p>I got a 317 winterLove RSPS that I have been working on for quite some time now,<br>
but there is an issue that have been bugging me for ages now,<br>
and that is that I’m still unsure/confused by how the TCP-packets are handled<br>
by the server, and I am wondering just exactly how the protocol works.</p>
<p>The server’s <span class="bbcode-b">Client.class</span> is declareing private blueprints of input and output streams like so:</p>
<pre><code class="lang-auto">//The socket's input stream.
private java.io.InputStream inputStream;

//The socket's output stream.
private java.io.OutputStream outputStream;</code></pre>
<p>In the class’ constructor, it’s constructing the two streams with the socket’s<br>
getInputStream and getOutputStream methods, like so:</p>
<pre><code class="lang-auto">//Make the "inputStream" the input stream for the Socket.
inputStream = clientSocket.getInputStream();

//Make the "outputStream" the output stream for the Socket.
outputStream = clientSocket.getOutputStream();</code></pre>
<p>Still in the constructor; it’s constructing two instances of <span class="bbcode-b">stream.class</span>, like so:</p>
<pre><code class="lang-auto">outStream = new stream(new byte[bufferSize]);

inStream = new stream(new byte[bufferSize]);</code></pre>
<p>I understand that the stream-class constructs the server’s protocol, but as far as I can see it, the socket’s I/O-streams and these two stream-instances are completely seperate.</p>
<p>So what I’m really asking for is how the server is taking the stream-instances in use and how it starts handling data in the I/O-streams with the 317 protocol.</p>
<p>I’m sorry if my question got obfuscated.<br>
Looking forward for replies.</p>
<p>Have a nice day.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/cool.png?v=5" title=":cool:" class="emoji" alt=":cool:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509/1</link>
        <pubDate>Fri, 05 Sep 2014 14:09:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546509-1</guid>
        <source url="https://forum.moparisthebest.com/t/317-winterlove-rsps-understanding-packet-i-o/546509.rss">317 winterLove RSPS: Understanding packet I/O</source>
      </item>
  </channel>
</rss>
