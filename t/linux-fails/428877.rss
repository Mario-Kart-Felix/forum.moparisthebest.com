<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Linux fails</title>
    <link>https://forum.moparisthebest.com/t/linux-fails/428877</link>
    <description>Stop posting. I realised what i did wrong after 1day. Btw if you spend a little more time on linux its easy. Please lock topic.</description>
    
    <lastBuildDate>Thu, 02 Feb 2012 23:29:26 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/linux-fails/428877.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“The Enforcer, post:75, topic:428877”][quote author=_s link=topic=531574.msg3901404#msg3901404 date=1327799776]<br>
i believe requiring a wrapper around various representations of basically the same thing indicates a design flaw in the language, <span class="bbcode-b">they should have introduced it earlier</span> on and used std::function as an underlying representation of everything anyway.<br>
[/quote]</p>
<p>I’ll continue this thread. I actually have a love-hate relationship with C++, there are times when I really hate it. Mostly because they don’t add important libraries early and are always too late. Almost every 3rd party application programming framework has it’s own string class, STL classes (Qt duplicates the STL), threading classes, networking classes, because in a distant past there was no STL, no threads in C++. Now there’s std::thread, where does it fit (doesn’t integrate with existing frameworks)? Next step is to standardize libraries based on Boost.Filesystem and Boost.Asio. This is a serious problem. By the time the standard’s committee decides to add a library, all places are full of 3rd party libraries with similar functionality.[/quote]that too is one of my pet hates with C++, it’s a shame really. C++ would definitely be better off being the early bird with those things.</p>
<p>[quote=“t4, post:76, topic:428877”]i love boost :)[/quote]it’s a bit heavy but it’s cool</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/77">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/77</link>
        <pubDate>Thu, 02 Feb 2012 23:29:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-77</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>i love boost <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/76">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/76</link>
        <pubDate>Wed, 01 Feb 2012 17:20:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-76</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="74" data-topic="428877">
<div class="title">
<div class="quote-controls"></div>
 _s:</div>
<blockquote>
<p>i believe requiring a wrapper around various representations of basically the same thing indicates a design flaw in the language, <span class="bbcode-b">they should have introduced it earlier</span> on and used std::function as an underlying representation of everything anyway.</p>
</blockquote>
</aside>
<p>I’ll continue this thread. I actually have a love-hate relationship with C++, there are times when I really hate it. Mostly because they don’t add important libraries early and are always too late. Almost every 3rd party application programming framework has it’s own string class, STL classes (Qt duplicates the STL), threading classes, networking classes, because in a distant past there was no STL, no threads in C++. Now there’s std::thread, where does it fit (doesn’t integrate with existing frameworks)? Next step is to standardize libraries based on Boost.Filesystem and Boost.Asio. This is a serious problem. By the time the standard’s committee decides to add a library, all places are full of 3rd party libraries with similar functionality.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/75">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/75</link>
        <pubDate>Wed, 01 Feb 2012 15:19:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-75</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“The Enforcer, post:71, topic:428877”][quote author=_s link=topic=531574.msg3901069#msg3901069 date=1327777411]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>pointers, references, smart pointers come quickly to mind of features that really do attempt to solve the same problems, essentially. there’s also the fun in playing around with functions, function pointers, functors (functionoids to some), anonymous functions (which boil down to the previous) and the various other beautiful things built upon these conceptually sound but collectively awful things, ie. the STL algorithms accepting functions and functors because duplicating your functionality to allow for people to mix up what they’re doing is a great example of the ridiculous and superfluous complexity. arguing flexibility is a completely moot point here, i think we all know that one way of passing around function-like constructs is more than enough. i do realise that the standards committee are present in the ratifying and construction of new standards, but evidently they’re still in the mindset that incorporating everything is a good idea. that is not careful considering from a bystander’s point of view.</p>
<p>C++ is difficult, so are many languages, but C++ is difficult because it’s overly complex and easy to make awful mistakes in. i don’t understand why you don’t want a babysitting compiler though, since a babysitting compiler is a better compiler; fixing your mistakes at compile time is much more desirable than spending hours debugging a runtime bug stemming from a silly mistake that the compiler probably could have picked up on its own had it been a qualified babysitter. i think you’ll realise on your own that a compiler that sees more mistakes in your code can be extremely useful when you’re on a tight deadline with your job on the table.</p>
<p>the author of that presentation, Felix von Leitner, i believe is much more qualified to talk about standard libraries and language design than anyone else considering he is the creator and maintainer of dietlibc (a tiny C standard library implementation for use in embeddable applications), and really i think it was more of an exemplar of <a href="http://www.c2.com/cgi/wiki?HaHaOnlySerious" data-bbcode="true" rel="nofollow noopener">Ha Ha Only Serious</a> humour than an actual hateful criticism, it points out the ambiguities in C++'s syntax that often leaves maintainers and adopters of codebases guessing what a certain line does and since you evidently don’t have much maintenance experience, you seem to have missed the actual wisdom of that slideshow. i think you’ll get it eventually.</p>
<p>edit: you’ll want to read <a href="http://yosefk.com/c++fqa/defective.html" data-bbcode="true" rel="nofollow noopener">this</a> too</p>
</blockquote>
</aside>
<p>Pointers, references, smart pointers: What’s the confusion here? Pointers point to dynamically allocated objects, you use smart pointers if you don’t want to call ‘delete’ yourself. References are there to effectively pass around stack allocated objects. In fact C# also has references (ref/out keywords).</p>
<p>Functions, function pointers, function objects: Why do you care about the STL algorithms accepting them all? If it creates confusion in your own code, then you can just wrap them all in std::function to have a unified picture. Function objects are quite useful when you need to maintain state.</p>
<p>The author of the presentation can be a C guru all he wants, but there are many mistakes in his “C++ story”. Also, at times he complains about things that bring up the question “why the fuck would anyone even want to do this?”.</p>
<p>The only thing I don’t like about C++ is that it started as a ‘superset’ of C and has since maintained compatibility with it - this results in some feature-duplication. But it’s really not an issue if you always write C++ and resort to C only if needed.<br>
[/quote]passing around stack allocated objects can also be done with pointers though, which is an archaic C way but still allowed in the language, and many people do it. i’m sure there’s also a lot of passing of various smart pointers going on in the wild, the problem is the overlap of features which either completely deprecates one or gives rise to confusion when abusing the others.</p>
<p>oh wait, let’s add std::function to my previous list too! why the hell are these all needed? function objects can maintain state, true, but what i don’t see is why all these different ways of expressing a function are required. surely it would be easier just to drop the whole idea of a traditional C function and work purely with things boiling down to std::functions so that there’s no plethora of types that you must deal with.</p>
<p>and you obviously haven’t been anywhere close to a real codebase if you’re asking why certain things would ever be done, because they will. certain programmers do stranger things than others, and i’m sure there’s a real world example of everything he pointed out floating around somewhere, all you have to do is take a look at codebases like the openssh one (albeit in C but still relevant for being awful on so many levels) to realise that anything that can be abused will probably be abused. yes, this delves down to poor programmers being poor, but in reality it shouldn’t be allowed.</p>
<p>C++ still trying to retain somewhat backwards compatibility with C is stupid, i don’t see why they ever chose to keep it that way, but there we go, D exists for when you get fed up.</p>
</blockquote>
</aside>
<p>std::function is just for wrapping all the function representations you can think of (including lambdas). Example: a std::map&lt;std::string, std::function&lt;void (void)&gt;&gt; that stores a function, a function object, a lambda.</p>
<p>And of course I’ve been near a real codebase. I’ve seen bad code, but it’s the fault of incompetent programmers, no reason to blame the language. That’s why employers screen programmers by looking at their previous works and assigning them demo jobs. In fact it’s more likely that a Java programmer makes a mistake than a C or C++ programmer, people who write code in a managed language generally pay less attention to what they write.</p>
<p>Anyway, this arguing is getting nowhere. It’s not about what is right and what’s wrong. I don’t mind that C++ is versatile. You like minimalism, doing everything in a certain way, that’s ok.[/quote]i believe requiring a wrapper around various representations of basically the same thing indicates a design flaw in the language, they should have introduced it earlier on and used std::function as an underlying representation of everything anyway.</p>
<p>i would also like to see proof of your speculative comment that Java programmers make more mistakes than C++ programmers, competent C++ programmers still have to worry about the various things that C++ can bend them over with while the majority of Java bugs are more likely to be logic errors or clumsy mistakes, due to the lack of control that it gives the programmer. you have a point that i shouldn’t blame the language for the tremendous amounts of incompetent programmers that use it, but surely their incompetency comes from the overcomplexities?</p>
<p>finally, why do you think minimalism implies exiguity in solutions? it shows that one can do lots with very little, ie. the minimalistic nature of Lisp gives rise to incredible power and flexibility, hence why it has the reputation of being one of the most, if not the most powerful and flexible language. i would rather you not assume that minimalism is rigidity.</p>
<p>and this really isn’t going anywhere is it? C++ has a reputation of having an underexperienced userbase and a complexity level that hits the sky, i don’t think that will ever change.</p>
<p>[quote=“t4, post:72, topic:428877”]why can’t we all just get along? <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> it’s not like Enforcer or I are advocating Visual Basic.[/quote]you should be, i heard it’s great for noobs!!!1111 <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=5" title=":smiley:" class="emoji" alt=":smiley:"></p>
<p>[quote=“Daginith, post:73, topic:428877”][quote author=t4 link=topic=531574.msg3901361#msg3901361 date=1327796306]<br>
why can’t we all just get along? <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> it’s not like Enforcer or I are advocating Visual Basic.<br>
[/quote]</p>
<p>^^o great, now they are going to argue about Visiual Basic… -.- thx alot.[/quote]Well i think Visual BASIC is great Because I can Make Many drag A&amp; Drops things With It!!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/74">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/74</link>
        <pubDate>Sun, 29 Jan 2012 01:16:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-74</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <aside class="quote quote-modified" data-post="72" data-topic="428877">
<div class="title">
<div class="quote-controls"></div>
 t4:</div>
<blockquote>
<p>why can’t we all just get along? <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> it’s not like Enforcer or I are advocating Visual Basic.</p>
</blockquote>
</aside>
<p>^^o great, now they are going to argue about Visiual Basic… -.- thx alot.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/73">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/73</link>
        <pubDate>Sun, 29 Jan 2012 00:53:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-73</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>why can’t we all just get along? <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"> it’s not like Enforcer or I are advocating Visual Basic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/72">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/72</link>
        <pubDate>Sun, 29 Jan 2012 00:18:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-72</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:69, topic:428877"][quote author=The Enforcer link=topic=531574.msg3901017#msg3901017 date=1327773664]</p>
<aside class="quote">
<blockquote>
<p>pointers, references, smart pointers come quickly to mind of features that really do attempt to solve the same problems, essentially. there’s also the fun in playing around with functions, function pointers, functors (functionoids to some), anonymous functions (which boil down to the previous) and the various other beautiful things built upon these conceptually sound but collectively awful things, ie. the STL algorithms accepting functions and functors because duplicating your functionality to allow for people to mix up what they’re doing is a great example of the ridiculous and superfluous complexity. arguing flexibility is a completely moot point here, i think we all know that one way of passing around function-like constructs is more than enough. i do realise that the standards committee are present in the ratifying and construction of new standards, but evidently they’re still in the mindset that incorporating everything is a good idea. that is not careful considering from a bystander’s point of view.</p>
<p>C++ is difficult, so are many languages, but C++ is difficult because it’s overly complex and easy to make awful mistakes in. i don’t understand why you don’t want a babysitting compiler though, since a babysitting compiler is a better compiler; fixing your mistakes at compile time is much more desirable than spending hours debugging a runtime bug stemming from a silly mistake that the compiler probably could have picked up on its own had it been a qualified babysitter. i think you’ll realise on your own that a compiler that sees more mistakes in your code can be extremely useful when you’re on a tight deadline with your job on the table.</p>
<p>the author of that presentation, Felix von Leitner, i believe is much more qualified to talk about standard libraries and language design than anyone else considering he is the creator and maintainer of dietlibc (a tiny C standard library implementation for use in embeddable applications), and really i think it was more of an exemplar of <a href="http://www.c2.com/cgi/wiki?HaHaOnlySerious" data-bbcode="true" rel="nofollow noopener">Ha Ha Only Serious</a> humour than an actual hateful criticism, it points out the ambiguities in C++'s syntax that often leaves maintainers and adopters of codebases guessing what a certain line does and since you evidently don’t have much maintenance experience, you seem to have missed the actual wisdom of that slideshow. i think you’ll get it eventually.</p>
<p>edit: you’ll want to read <a href="http://yosefk.com/c++fqa/defective.html" data-bbcode="true" rel="nofollow noopener">this</a> too</p>
</blockquote>
</aside>
<p>Pointers, references, smart pointers: What’s the confusion here? Pointers point to dynamically allocated objects, you use smart pointers if you don’t want to call ‘delete’ yourself. References are there to effectively pass around stack allocated objects. In fact C# also has references (ref/out keywords).</p>
<p>Functions, function pointers, function objects: Why do you care about the STL algorithms accepting them all? If it creates confusion in your own code, then you can just wrap them all in std::function to have a unified picture. Function objects are quite useful when you need to maintain state.</p>
<p>The author of the presentation can be a C guru all he wants, but there are many mistakes in his “C++ story”. Also, at times he complains about things that bring up the question “why the fuck would anyone even want to do this?”.</p>
<p>The only thing I don’t like about C++ is that it started as a ‘superset’ of C and has since maintained compatibility with it - this results in some feature-duplication. But it’s really not an issue if you always write C++ and resort to C only if needed.<br>
[/quote]passing around stack allocated objects can also be done with pointers though, which is an archaic C way but still allowed in the language, and many people do it. i’m sure there’s also a lot of passing of various smart pointers going on in the wild, the problem is the overlap of features which either completely deprecates one or gives rise to confusion when abusing the others.</p>
<p>oh wait, let’s add std::function to my previous list too! why the hell are these all needed? function objects can maintain state, true, but what i don’t see is why all these different ways of expressing a function are required. surely it would be easier just to drop the whole idea of a traditional C function and work purely with things boiling down to std::functions so that there’s no plethora of types that you must deal with.</p>
<p>and you obviously haven’t been anywhere close to a real codebase if you’re asking why certain things would ever be done, because they will. certain programmers do stranger things than others, and i’m sure there’s a real world example of everything he pointed out floating around somewhere, all you have to do is take a look at codebases like the openssh one (albeit in C but still relevant for being awful on so many levels) to realise that anything that can be abused will probably be abused. yes, this delves down to poor programmers being poor, but in reality it shouldn’t be allowed.</p>
<p>C++ still trying to retain somewhat backwards compatibility with C is stupid, i don’t see why they ever chose to keep it that way, but there we go, D exists for when you get fed up.[/quote]</p>
<p>std::function is just for wrapping all the function representations you can think of (including lambdas). Example: a std::map&lt;std::string, std::function&lt;void (void)&gt;&gt; that stores a function, a function object, a lambda.</p>
<p>And of course I’ve been near a real codebase. I’ve seen bad code, but it’s the fault of incompetent programmers, no reason to blame the language. That’s why employers screen programmers by looking at their previous works and assigning them demo jobs. In fact it’s more likely that a Java programmer makes a mistake than a C or C++ programmer, people who write code in a managed language generally pay less attention to what they write.</p>
<p>Anyway, this arguing is getting nowhere. It’s not about what is right and what’s wrong. I don’t mind that C++ is versatile. You like minimalism, doing everything in a certain way, that’s ok.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/71">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/71</link>
        <pubDate>Sat, 28 Jan 2012 20:27:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-71</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <p>[quote=“Moparisthebest, post:64, topic:428877”][quote author=Daginith link=topic=531574.msg3900338#msg3900338 date=1327706456]<br>
also, mopar, when i used kubuntu, i had issues with EVERYTHING. i guess i was not used to the way it was set up. also, i HATE how it locks you out of a root acc (when you first run it). you have to change the root password, then login to su. i guess thats their way of making it more user friendly.<br>
[/quote]</p>
<p>Nothing a quick ‘sudo passwd root’ can’t fix.</p>
<p>They do it that way because best practice says you really shouldn’t need to use the root account, because you can really mess things up if you do something wrong.[/quote]</p>
<p>oh i see, they dont want you overwriting the /boot directory or something :P. that would be bad. XD.</p>
<p>i guess some people like it the new ‘safer’ way of doing it, and some people like the ‘old-school’ way. it just depends what you like, and what your used to useing.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/70">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/70</link>
        <pubDate>Sat, 28 Jan 2012 19:18:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-70</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“The Enforcer, post:68, topic:428877”][quote author=_s link=topic=531574.msg3900937#msg3900937 date=1327768569]<br>
pointers, references, smart pointers come quickly to mind of features that really do attempt to solve the same problems, essentially. there’s also the fun in playing around with functions, function pointers, functors (functionoids to some), anonymous functions (which boil down to the previous) and the various other beautiful things built upon these conceptually sound but collectively awful things, ie. the STL algorithms accepting functions and functors because duplicating your functionality to allow for people to mix up what they’re doing is a great example of the ridiculous and superfluous complexity. arguing flexibility is a completely moot point here, i think we all know that one way of passing around function-like constructs is more than enough. i do realise that the standards committee are present in the ratifying and construction of new standards, but evidently they’re still in the mindset that incorporating everything is a good idea. that is not careful considering from a bystander’s point of view.</p>
<p>C++ is difficult, so are many languages, but C++ is difficult because it’s overly complex and easy to make awful mistakes in. i don’t understand why you don’t want a babysitting compiler though, since a babysitting compiler is a better compiler; fixing your mistakes at compile time is much more desirable than spending hours debugging a runtime bug stemming from a silly mistake that the compiler probably could have picked up on its own had it been a qualified babysitter. i think you’ll realise on your own that a compiler that sees more mistakes in your code can be extremely useful when you’re on a tight deadline with your job on the table.</p>
<p>the author of that presentation, Felix von Leitner, i believe is much more qualified to talk about standard libraries and language design than anyone else considering he is the creator and maintainer of dietlibc (a tiny C standard library implementation for use in embeddable applications), and really i think it was more of an exemplar of <a href="http://www.c2.com/cgi/wiki?HaHaOnlySerious" data-bbcode="true" rel="nofollow noopener">Ha Ha Only Serious</a> humour than an actual hateful criticism, it points out the ambiguities in C++'s syntax that often leaves maintainers and adopters of codebases guessing what a certain line does and since you evidently don’t have much maintenance experience, you seem to have missed the actual wisdom of that slideshow. i think you’ll get it eventually.</p>
<p>edit: you’ll want to read <a href="http://yosefk.com/c++fqa/defective.html" data-bbcode="true" rel="nofollow noopener">this</a> too<br>
[/quote]</p>
<p>Pointers, references, smart pointers: What’s the confusion here? Pointers point to dynamically allocated objects, you use smart pointers if you don’t want to call ‘delete’ yourself. References are there to effectively pass around stack allocated objects. In fact C# also has references (ref/out keywords).</p>
<p>Functions, function pointers, function objects: Why do you care about the STL algorithms accepting them all? If it creates confusion in your own code, then you can just wrap them all in std::function to have a unified picture. Function objects are quite useful when you need to maintain state.</p>
<p>The author of the presentation can be a C guru all he wants, but there are many mistakes in his “C++ story”. Also, at times he complains about things that bring up the question “why the fuck would anyone even want to do this?”.</p>
<p>The only thing I don’t like about C++ is that it started as a ‘superset’ of C and has since maintained compatibility with it - this results in some feature-duplication. But it’s really not an issue if you always write C++ and resort to C only if needed.[/quote]passing around stack allocated objects can also be done with pointers though, which is an archaic C way but still allowed in the language, and many people do it. i’m sure there’s also a lot of passing of various smart pointers going on in the wild, the problem is the overlap of features which either completely deprecates one or gives rise to confusion when abusing the others.</p>
<p>oh wait, let’s add std::function to my previous list too! why the hell are these all needed? function objects can maintain state, true, but what i don’t see is why all these different ways of expressing a function are required. surely it would be easier just to drop the whole idea of a traditional C function and work purely with things boiling down to std::functions so that there’s no plethora of types that you must deal with.</p>
<p>and you obviously haven’t been anywhere close to a real codebase if you’re asking why certain things would ever be done, because they will. certain programmers do stranger things than others, and i’m sure there’s a real world example of everything he pointed out floating around somewhere, all you have to do is take a look at codebases like the openssh one (albeit in C but still relevant for being awful on so many levels) to realise that anything that can be abused will probably be abused. yes, this delves down to poor programmers being poor, but in reality it shouldn’t be allowed.</p>
<p>C++ still trying to retain somewhat backwards compatibility with C is stupid, i don’t see why they ever chose to keep it that way, but there we go, D exists for when you get fed up.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/69">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/69</link>
        <pubDate>Sat, 28 Jan 2012 19:03:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-69</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:65, topic:428877"]pointers, references, smart pointers come quickly to mind of features that really do attempt to solve the same problems, essentially. there’s also the fun in playing around with functions, function pointers, functors (functionoids to some), anonymous functions (which boil down to the previous) and the various other beautiful things built upon these conceptually sound but collectively awful things, ie. the STL algorithms accepting functions and functors because duplicating your functionality to allow for people to mix up what they’re doing is a great example of the ridiculous and superfluous complexity. arguing flexibility is a completely moot point here, i think we all know that one way of passing around function-like constructs is more than enough. i do realise that the standards committee are present in the ratifying and construction of new standards, but evidently they’re still in the mindset that incorporating everything is a good idea. that is not careful considering from a bystander’s point of view.</p>
<p>C++ is difficult, so are many languages, but C++ is difficult because it’s overly complex and easy to make awful mistakes in. i don’t understand why you don’t want a babysitting compiler though, since a babysitting compiler is a better compiler; fixing your mistakes at compile time is much more desirable than spending hours debugging a runtime bug stemming from a silly mistake that the compiler probably could have picked up on its own had it been a qualified babysitter. i think you’ll realise on your own that a compiler that sees more mistakes in your code can be extremely useful when you’re on a tight deadline with your job on the table.</p>
<p>the author of that presentation, Felix von Leitner, i believe is much more qualified to talk about standard libraries and language design than anyone else considering he is the creator and maintainer of dietlibc (a tiny C standard library implementation for use in embeddable applications), and really i think it was more of an exemplar of <a href="http://www.c2.com/cgi/wiki?HaHaOnlySerious" data-bbcode="true" rel="nofollow noopener">Ha Ha Only Serious</a> humour than an actual hateful criticism, it points out the ambiguities in C++'s syntax that often leaves maintainers and adopters of codebases guessing what a certain line does and since you evidently don’t have much maintenance experience, you seem to have missed the actual wisdom of that slideshow. i think you’ll get it eventually.</p>
<p>edit: you’ll want to read <a href="http://yosefk.com/c++fqa/defective.html" data-bbcode="true" rel="nofollow noopener">this</a> too[/quote]</p>
<p>Pointers, references, smart pointers: What’s the confusion here? Pointers point to dynamically allocated objects, you use smart pointers if you don’t want to call ‘delete’ yourself. References are there to effectively pass around stack allocated objects. In fact C# also has references (ref/out keywords).</p>
<p>Functions, function pointers, function objects: Why do you care about the STL algorithms accepting them all? If it creates confusion in your own code, then you can just wrap them all in std::function to have a unified picture. Function objects are quite useful when you need to maintain state.</p>
<p>The author of the presentation can be a C guru all he wants, but there are many mistakes in his “C++ story”. Also, at times he complains about things that bring up the question “why the fuck would anyone even want to do this?”.</p>
<p>The only thing I don’t like about C++ is that it started as a ‘superset’ of C and has since maintained compatibility with it - this results in some feature-duplication. But it’s really not an issue if you always write C++ and resort to C only if needed.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/68">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/68</link>
        <pubDate>Sat, 28 Jan 2012 18:01:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-68</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:66, topic:428877”]pointers and references are a slightly different beast, a smart point, however, it very different in the fact it deletes its data it points to when going out of scope. i use them all.[/quote]different smart pointers employ different initialisation/deinitialisation schemes, shared_ptr doesn’t operate only on scope, it works with reference counting instead.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/67">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/67</link>
        <pubDate>Sat, 28 Jan 2012 17:01:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-67</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>pointers and references are a slightly different beast, a smart point, however, it very different in the fact it deletes its data it points to when going out of scope. i use them all.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/66">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/66</link>
        <pubDate>Sat, 28 Jan 2012 16:45:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-66</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:62, topic:428877”]the first link made me laugh a little, but some of the examples i’d consider programming mistakes[/quote]mistakes arising from complexity are much more common than mistakes arising from simplicity, and in the case of complexity-derived bugs and mistakes, the error messages are seldom simple; take note of STL related fuckups.</p>
<p>[quote=“The Enforcer, post:63, topic:428877”][quote author=_s link=topic=531574.msg3900347#msg3900347 date=1327707134]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p><span class="mention">@t4</span></p>
<p>C++ is essentially an extension of c but technically it is not.</p>
<p>Please don’t go around saying that.</p>
</blockquote>
</aside>
<p>I can use most, if not all, C libraries whilst writing C++.</p>
</blockquote>
</aside>
<p>that does not necessarily mean it is an extension. c++ works well with c natively ONLY BECAUSE it used to be considered “C with classes.” do some research.</p>
<aside class="quote">
<blockquote>
<p>Having influence and having compatibility are two separate things.</p>
</blockquote>
</aside>
<p>you answered most of your argument.</p>
</blockquote>
</aside>
<p>extension: A part that is added to something to enlarge or prolong it; a continuation.<br>
superset: In mathematics, especially in set theory, a set A is a subset of a set B if A is “contained” inside B. A and B may coincide.</p>
<p>Fair enough, the word I was looking for was superset.</p>
</blockquote>
</aside>
<p>that’s better, however professionals still don’t even like calling it a superset, subset, extension, whatever.  it is considered it’s own language. java can natively support C as well.</p>
<p>c++ is its own language, either way.</p>
<p>ps: i’m not a hipster, bitch.</p>
</blockquote>
</aside>
<p>Yes, I am aware of JNI; however the native code is not compiled by javac whereas a c++ compiler (ex: g++) can compile C code.<br>
[/quote]there are some subtle gotchas in C++ that invalidate this when technically speaking, not all C++ compilers will compile C code identically to how a C compiler would do it.</p>
<p>i don’t see why people use reasoning that C++ is influenced heavily by C and therefore can’t be shit without C being shit, the reason for me thinking C++ is shit is because it’s taken just about everything under the sun and crammed it into one language without any actual consideration. there’s so many different language features created to address one problem it’s unreal and really does stink of a poorly thought out language with much more bloat than needed. i really don’t mind large languages with lots of concepts (ie. Haskell), but i hate it when all these concepts are either superfluous and/or appear to be bolted on to the language as a little extension to please a small pocket of cargo-cult programmers who absolutely love one concept to bits that they think C++ should include it… since… well why the hell not?</p>
</blockquote>
</aside>
<p>Give a few examples of those features that have been crammed into C++ and shouldn’t be there. I’d also like you to give examples of those ‘so many different language features for doing one thing’ that get you confused when picking the right one. The C++ standard’s committee consists of a lot of people - they don’t just add stuff, they consider it carefully, voting takes place.</p>
<p>[quote author=_s link=topic=531574.msg3900483#msg3900483 date=1327717722]</p>
<aside class="quote">
<blockquote>
<p>gotta love the moparscapian fanboys</p>
<p><a href="http://unthought.net/c++/c_vs_c++.html" rel="nofollow noopener">http://unthought.net/c++/c_vs_c++.html</a><br>
[/quote]it’s funny because you’re also one of them</p>
<p><a href="http://www.fefe.de/c++/c%2B%2B-talk.pdf" rel="nofollow noopener">www.fefe.de/c++/c%2B%2B-talk.pdf</a><br>
<a href="http://en.wikipedia.org/wiki/C%2B%2B#Criticism" rel="nofollow noopener">http://en.wikipedia.org/wiki/C%2B%2B#Criticism</a><br>
<a href="http://harmful.cat-v.org/software/c++/" rel="nofollow noopener">http://harmful.cat-v.org/software/c++/</a><br>
<a href="http://www.literateprogramming.com/c++critique.pdf" rel="nofollow noopener">http://www.literateprogramming.com/c++critique.pdf</a><br>
<a href="http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html" rel="nofollow noopener">http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html</a></p>
</blockquote>
</aside>
<p>Went over these links quickly. It’s mostly about how C++ is so difficult and it’s easy to make a mistake, and how the compiler doesn’t tell you about every possible error out there. Errors are the programmer’s fault and the compiler isn’t there to babysit you. Only a small amount of those arguments were valid, but not anymore - C++11 solves those issues.</p>
<p>EDIT:<br>
I read through this <a href="http://www.fefe.de/c++/c%2B%2B-talk.pdf" rel="nofollow noopener">www.fefe.de/c++/c%2B%2B-talk.pdf</a> as it seemed to be the most hateful out of all. All it contained was bullshit, in fact the author seems to be an idiot. Given C++'s complexity, to properly criticize it you have to be an expert in it to not make any mistakes. However, you simply don’t become a C++ expert to start hating it.[/quote]pointers, references, smart pointers come quickly to mind of features that really do attempt to solve the same problems, essentially. there’s also the fun in playing around with functions, function pointers, functors (functionoids to some), anonymous functions (which boil down to the previous) and the various other beautiful things built upon these conceptually sound but collectively awful things, ie. the STL algorithms accepting functions and functors because duplicating your functionality to allow for people to mix up what they’re doing is a great example of the ridiculous and superfluous complexity. arguing flexibility is a completely moot point here, i think we all know that one way of passing around function-like constructs is more than enough. i do realise that the standards committee are present in the ratifying and construction of new standards, but evidently they’re still in the mindset that incorporating everything is a good idea. that is not careful considering from a bystander’s point of view.</p>
<p>C++ is difficult, so are many languages, but C++ is difficult because it’s overly complex and easy to make awful mistakes in. i don’t understand why you don’t want a babysitting compiler though, since a babysitting compiler is a better compiler; fixing your mistakes at compile time is much more desirable than spending hours debugging a runtime bug stemming from a silly mistake that the compiler probably could have picked up on its own had it been a qualified babysitter. i think you’ll realise on your own that a compiler that sees more mistakes in your code can be extremely useful when you’re on a tight deadline with your job on the table.</p>
<p>the author of that presentation, Felix von Leitner, i believe is much more qualified to talk about standard libraries and language design than anyone else considering he is the creator and maintainer of dietlibc (a tiny C standard library implementation for use in embeddable applications), and really i think it was more of an exemplar of <a href="http://www.c2.com/cgi/wiki?HaHaOnlySerious" data-bbcode="true" rel="nofollow noopener">Ha Ha Only Serious</a> humour than an actual hateful criticism, it points out the ambiguities in C++'s syntax that often leaves maintainers and adopters of codebases guessing what a certain line does and since you evidently don’t have much maintenance experience, you seem to have missed the actual wisdom of that slideshow. i think you’ll get it eventually.</p>
<p>edit: you’ll want to read <a href="http://yosefk.com/c++fqa/defective.html" data-bbcode="true" rel="nofollow noopener">this</a> too</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/65">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/65</link>
        <pubDate>Sat, 28 Jan 2012 16:36:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-65</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="57" data-topic="428877">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/daginith/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Daginith:</div>
<blockquote>
<p>also, mopar, when i used kubuntu, i had issues with EVERYTHING. i guess i was not used to the way it was set up. also, i HATE how it locks you out of a root acc (when you first run it). you have to change the root password, then login to su. i guess thats their way of making it more user friendly.</p>
</blockquote>
</aside>
<p>Nothing a quick ‘sudo passwd root’ can’t fix.</p>
<p>They do it that way because best practice says you really shouldn’t need to use the root account, because you can really mess things up if you do something wrong.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/64">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/64</link>
        <pubDate>Sat, 28 Jan 2012 14:45:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-64</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@The_Enforcer The Enforcer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_enforcer">@The_Enforcer</a> wrote:</p>
          <blockquote>
              <p>[quote="_s, post:58, topic:428877"][quote author=t4 link=topic=531574.msg3900319#msg3900319 date=1327705249]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p><span class="mention">@t4</span></p>
<p>C++ is essentially an extension of c but technically it is not.</p>
<p>Please don’t go around saying that.</p>
</blockquote>
</aside>
<p>I can use most, if not all, C libraries whilst writing C++.</p>
</blockquote>
</aside>
<p>that does not necessarily mean it is an extension. c++ works well with c natively ONLY BECAUSE it used to be considered “C with classes.” do some research.</p>
<aside class="quote">
<blockquote>
<p>Having influence and having compatibility are two separate things.</p>
</blockquote>
</aside>
<p>you answered most of your argument.</p>
</blockquote>
</aside>
<p>extension: A part that is added to something to enlarge or prolong it; a continuation.<br>
superset: In mathematics, especially in set theory, a set A is a subset of a set B if A is “contained” inside B. A and B may coincide.</p>
<p>Fair enough, the word I was looking for was superset.</p>
</blockquote>
</aside>
<p>that’s better, however professionals still don’t even like calling it a superset, subset, extension, whatever.  it is considered it’s own language. java can natively support C as well.</p>
<p>c++ is its own language, either way.</p>
<p>ps: i’m not a hipster, bitch.</p>
</blockquote>
</aside>
<p>Yes, I am aware of JNI; however the native code is not compiled by javac whereas a c++ compiler (ex: g++) can compile C code.<br>
[/quote]there are some subtle gotchas in C++ that invalidate this when technically speaking, not all C++ compilers will compile C code identically to how a C compiler would do it.</p>
<p>i don’t see why people use reasoning that C++ is influenced heavily by C and therefore can’t be shit without C being shit, the reason for me thinking C++ is shit is because it’s taken just about everything under the sun and crammed it into one language without any actual consideration. there’s so many different language features created to address one problem it’s unreal and really does stink of a poorly thought out language with much more bloat than needed. i really don’t mind large languages with lots of concepts (ie. Haskell), but i hate it when all these concepts are either superfluous and/or appear to be bolted on to the language as a little extension to please a small pocket of cargo-cult programmers who absolutely love one concept to bits that they think C++ should include it… since… well why the hell not?[/quote]</p>
<p>Give a few examples of those features that have been crammed into C++ and shouldn’t be there. I’d also like you to give examples of those ‘so many different language features for doing one thing’ that get you confused when picking the right one. The C++ standard’s committee consists of a lot of people - they don’t just add stuff, they consider it carefully, voting takes place.</p>
<p>[quote="_s, post:61, topic:428877"][quote author=t4 link=topic=531574.msg3900459#msg3900459 date=1327715670]<br>
gotta love the moparscapian fanboys</p>
<p><a href="http://unthought.net/c++/c_vs_c++.html" class="onebox" target="_blank" rel="nofollow noopener">http://unthought.net/c++/c_vs_c++.html</a><br>
[/quote]it’s funny because you’re also one of them</p>
<p><a href="http://www.fefe.de/c++/c%2B%2B-talk.pdf" class="onebox" target="_blank" rel="nofollow noopener">www.fefe.de/c++/c%2B%2B-talk.pdf</a><br>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:140/157;"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/140px-ISO_C%2B%2B_Logo.svg.png" class="thumbnail"></div>

<h3><a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="nofollow noopener">C++</a></h3>

<p>C++ (/ˌsiːˌplʌsˈplʌs/ "cee plus plus") is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastr...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<a href="http://harmful.cat-v.org/software/c++/" class="onebox" target="_blank" rel="nofollow noopener">http://harmful.cat-v.org/software/c++/</a><br>
<a href="http://www.literateprogramming.com/c++critique.pdf" class="onebox" target="_blank" rel="nofollow noopener">http://www.literateprogramming.com/c++critique.pdf</a><br>
<a href="http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html%5B/quote%5D" class="onebox" target="_blank" rel="nofollow noopener">http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html[/quote]</a></p>
<p>Went over these links quickly. It’s mostly about how C++ is so difficult and it’s easy to make a mistake, and how the compiler doesn’t tell you about every possible error out there. Errors are the programmer’s fault and the compiler isn’t there to babysit you. Only a small amount of those arguments were valid, but not anymore - C++11 solves those issues.</p>
<p>EDIT:<br>
I read through this <a href="http://www.fefe.de/c++/c%2B%2B-talk.pdf" rel="nofollow noopener">www.fefe.de/c++/c%2B%2B-talk.pdf</a> as it seemed to be the most hateful out of all. All it contained was bullshit, in fact the author seems to be an idiot. Given C++'s complexity, to properly criticize it you have to be an expert in it to not make any mistakes. However, you simply don’t become a C++ expert to start hating it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/63">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/63</link>
        <pubDate>Sat, 28 Jan 2012 09:38:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-63</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>the first link made me laugh a little, but some of the examples i’d consider programming mistakes</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/62">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/62</link>
        <pubDate>Sat, 28 Jan 2012 02:58:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-62</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:60, topic:428877”]gotta love the moparscapian fanboys</p>
<p><a href="http://unthought.net/c++/c_vs_c++.html%5B/quote%5Dit's" rel="nofollow noopener">http://unthought.net/c++/c_vs_c++.html[/quote]it’s</a> funny because you’re also one of them</p>
<p><a href="http://www.fefe.de/c++/c%2B%2B-talk.pdf" class="onebox" target="_blank" rel="nofollow noopener">www.fefe.de/c++/c%2B%2B-talk.pdf</a><br>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:140/157;"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/1/18/ISO_C%2B%2B_Logo.svg/140px-ISO_C%2B%2B_Logo.svg.png" class="thumbnail"></div>

<h3><a href="https://en.wikipedia.org/wiki/C%2B%2B" target="_blank" rel="nofollow noopener">C++</a></h3>

<p>C++ (/ˌsiːˌplʌsˈplʌs/ "cee plus plus") is a general-purpose programming language. It has imperative, object-oriented and generic programming features, while also providing facilities for low-level memory manipulation. It was designed with a bias toward system programming and embedded, resource-constrained and large systems, with performance, efficiency and flexibility of use as its design highlights. C++ has also been found useful in many other contexts, with key strengths being software infrastr...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
<br>
<a href="http://harmful.cat-v.org/software/c++/" class="onebox" target="_blank" rel="nofollow noopener">http://harmful.cat-v.org/software/c++/</a><br>
<a href="http://www.literateprogramming.com/c++critique.pdf" class="onebox" target="_blank" rel="nofollow noopener">http://www.literateprogramming.com/c++critique.pdf</a><br>
<a href="http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html" class="onebox" target="_blank" rel="nofollow noopener">http://www.mistybeach.com/articles/WhyIDontLikeCPlusPlusForLargeProjects.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/61">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/61</link>
        <pubDate>Sat, 28 Jan 2012 02:28:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-61</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>gotta love the moparscapian fanboys</p>
<p><a href="http://unthought.net/c++/c_vs_c++.html" class="onebox" target="_blank" rel="nofollow noopener">http://unthought.net/c++/c_vs_c++.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/60">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/60</link>
        <pubDate>Sat, 28 Jan 2012 01:54:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-60</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <p>[quote=“Omer_, post:3, topic:428899”]C++ started off as a macro library for C.<br>
It then evolved into a massive pile of shit.<br>
Get over it.[/quote]</p>
<p>nicely said.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/59">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/59</link>
        <pubDate>Sat, 28 Jan 2012 01:17:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-59</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:55, topic:428877”][quote author=lemme_winks_ link=topic=531574.msg3900314#msg3900314 date=1327705113]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p><span class="mention">@t4</span></p>
<p>C++ is essentially an extension of c but technically it is not.</p>
<p>Please don’t go around saying that.</p>
</blockquote>
</aside>
<p>I can use most, if not all, C libraries whilst writing C++.</p>
</blockquote>
</aside>
<p>that does not necessarily mean it is an extension. c++ works well with c natively ONLY BECAUSE it used to be considered “C with classes.” do some research.</p>
<aside class="quote">
<blockquote>
<p>Having influence and having compatibility are two separate things.</p>
</blockquote>
</aside>
<p>you answered most of your argument.</p>
</blockquote>
</aside>
<p>extension: A part that is added to something to enlarge or prolong it; a continuation.<br>
superset: In mathematics, especially in set theory, a set A is a subset of a set B if A is “contained” inside B. A and B may coincide.</p>
<p>Fair enough, the word I was looking for was superset.</p>
</blockquote>
</aside>
<p>that’s better, however professionals still don’t even like calling it a superset, subset, extension, whatever.  it is considered it’s own language. java can natively support C as well.</p>
<p>c++ is its own language, either way.</p>
<p>ps: i’m not a hipster, bitch.<br>
[/quote]<br>
Yes, I am aware of JNI; however the native code is not compiled by javac whereas a c++ compiler (ex: g++) can compile C code.[/quote]there are some subtle gotchas in C++ that invalidate this when technically speaking, not all C++ compilers will compile C code identically to how a C compiler would do it.</p>
<p>i don’t see why people use reasoning that C++ is influenced heavily by C and therefore can’t be shit without C being shit, the reason for me thinking C++ is shit is because it’s taken just about everything under the sun and crammed it into one language without any actual consideration. there’s so many different language features created to address one problem it’s unreal and really does stink of a poorly thought out language with much more bloat than needed. i really don’t mind large languages with lots of concepts (ie. Haskell), but i hate it when all these concepts are either superfluous and/or appear to be bolted on to the language as a little extension to please a small pocket of cargo-cult programmers who absolutely love one concept to bits that they think C++ should include it… since… well why the hell not?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/58">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/58</link>
        <pubDate>Fri, 27 Jan 2012 23:32:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-58</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@Daginith Daginith]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/daginith">@Daginith</a> wrote:</p>
          <blockquote>
              <p>[quote=“Moparisthebest, post:54, topic:428877”][quote author=Daginith link=topic=531574.msg3899284#msg3899284 date=1327617257]</p>
<aside class="quote">
<blockquote>
<p>So, because of your incompetence, Linux ‘fails’? There’s something wrong here…</p>
</blockquote>
</aside>
<p>I agree with you so much.</p>
<p>altough the VPS he got might have a shitty linux distro (“Ubuntu”) that distro dosnt let u do (almost) anything via the command line. tell them to switch to ArchLinux <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
[/quote][quote author=Daginith link=topic=531574.msg3899317#msg3899317 date=1327618540]<br>
thats ok. basically Ubuntu is a “user friendly” Linux OS. (they dont want you to modify or change things in the os, so it wont get messed up. just like windows). You dont have acces to the root by default, so everytime you want to do something as root you need to do</p>
<pre><code class="lang-auto"></code></pre>
<p>also when i tested it out, i found it impossible to do:</p>
<pre><code class="lang-auto"> cd /home/username/FILE/
 sudo chmod +x ./executable
 sudo ./executable</code></pre>
<p>everytime, it gave me the error “Premission Denied” even with the ‘sudo’ in use.</p>
<p>on Arch linux, you need to do</p>
<pre><code class="lang-auto"> su
(password)
cd /home/username/FILE/
chmod +x ./name
./name</code></pre>
<p>and it works WAAY easier, this goes for compileing programs to (useing GCC, G++, JAVA…etc)</p>
<p>^^hope that educated you on your question <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
[/quote]</p>
<p>You can do anything with ubuntu that you can with any other linux distro, command line or otherwise.</p>
<p>Also, you realize you don’t HAVE to use sudo in ubuntu or anything else, your second bit of code where you use su, that would work fine in ubuntu as well.</p>
<p>I either run debian or ubuntu for just about everything, and I’ve never ran into a problem or something I couldn’t do.  I run it on 1 dedicated server (this forum is running on it) in a data center, a dedicated server I use for my router at home, a file server at a church I work for sometimes, and in multiple VPS’s that I use for various things.  And I run Kubuntu on my desktop and 2 laptops, and my mediacenter and a PC I use as a thin client as well.[/quote]</p>
<p>woah. i just got pwned by my Idol :3</p>
<p>also, mopar, when i used kubuntu, i had issues with EVERYTHING. i guess i was not used to the way it was set up. also, i HATE how it locks you out of a root acc (when you first run it). you have to change the root password, then login to su. i guess thats their way of making it more user friendly.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/57">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/57</link>
        <pubDate>Fri, 27 Jan 2012 23:20:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-57</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>you could make your own java compiler to compile C code as well</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/56">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/56</link>
        <pubDate>Fri, 27 Jan 2012 23:07:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-56</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“lemme_winks_, post:53, topic:428877”][quote author=t4 link=topic=531574.msg3900312#msg3900312 date=1327705001]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p><span class="mention">@t4</span></p>
<p>C++ is essentially an extension of c but technically it is not.</p>
<p>Please don’t go around saying that.</p>
</blockquote>
</aside>
<p>I can use most, if not all, C libraries whilst writing C++.</p>
</blockquote>
</aside>
<p>that does not necessarily mean it is an extension. c++ works well with c natively ONLY BECAUSE it used to be considered “C with classes.” do some research.</p>
<aside class="quote">
<blockquote>
<p>Having influence and having compatibility are two separate things.</p>
</blockquote>
</aside>
<p>you answered most of your argument.</p>
</blockquote>
</aside>
<p>extension: A part that is added to something to enlarge or prolong it; a continuation.<br>
superset: In mathematics, especially in set theory, a set A is a subset of a set B if A is “contained” inside B. A and B may coincide.</p>
<p>Fair enough, the word I was looking for was superset.<br>
[/quote]</p>
<p>that’s better, however professionals still don’t even like calling it a superset, subset, extension, whatever.  it is considered it’s own language. java can natively support C as well.</p>
<p>c++ is its own language, either way.</p>
<p>ps: i’m not a hipster, bitch.[/quote]<br>
Yes, I am aware of JNI; however the native code is not compiled by javac whereas a c++ compiler (ex: g++) can compile C code.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/55">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/55</link>
        <pubDate>Fri, 27 Jan 2012 23:00:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-55</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>[quote=“Daginith, post:15, topic:428877”][quote author=Omer_ link=topic=531574.msg3884412#msg3884412 date=1326320161]<br>
So, because of your incompetence, Linux ‘fails’? There’s something wrong here…<br>
[/quote]</p>
<p>I agree with you so much.</p>
<p>altough the VPS he got might have a shitty linux distro (“Ubuntu”) that distro dosnt let u do (almost) anything via the command line. tell them to switch to ArchLinux :)[/quote][quote=“Daginith, post:18, topic:428877”]thats ok. basically Ubuntu is a “user friendly” Linux OS. (they dont want you to modify or change things in the os, so it wont get messed up. just like windows). You dont have acces to the root by default, so everytime you want to do something as root you need to do</p>
<pre><code class="lang-auto"></code></pre>
<p>also when i tested it out, i found it impossible to do:</p>
<pre><code class="lang-auto"> cd /home/username/FILE/
 sudo chmod +x ./executable
 sudo ./executable</code></pre>
<p>everytime, it gave me the error “Premission Denied” even with the ‘sudo’ in use.</p>
<p>on Arch linux, you need to do</p>
<pre><code class="lang-auto"> su
(password)
cd /home/username/FILE/
chmod +x ./name
./name</code></pre>
<p>and it works WAAY easier, this goes for compileing programs to (useing GCC, G++, JAVA…etc)</p>
<p>^^hope that educated you on your question :)[/quote]</p>
<p>You can do anything with ubuntu that you can with any other linux distro, command line or otherwise.</p>
<p>Also, you realize you don’t HAVE to use sudo in ubuntu or anything else, your second bit of code where you use su, that would work fine in ubuntu as well.</p>
<p>I either run debian or ubuntu for just about everything, and I’ve never ran into a problem or something I couldn’t do.  I run it on 1 dedicated server (this forum is running on it) in a data center, a dedicated server I use for my router at home, a file server at a church I work for sometimes, and in multiple VPS’s that I use for various things.  And I run Kubuntu on my desktop and 2 laptops, and my mediacenter and a PC I use as a thin client as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/54">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/54</link>
        <pubDate>Fri, 27 Jan 2012 22:58:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-54</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
      <item>
        <title>Linux fails</title>
        <dc:creator><![CDATA[@lemme_winks lemme_winks_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lemme_winks">@lemme_winks</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:52, topic:428877”][quote author=lemme_winks_ link=topic=531574.msg3900295#msg3900295 date=1327704270]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p><span class="mention">@t4</span></p>
<p>C++ is essentially an extension of c but technically it is not.</p>
<p>Please don’t go around saying that.</p>
</blockquote>
</aside>
<p>I can use most, if not all, C libraries whilst writing C++.</p>
</blockquote>
</aside>
<p>that does not necessarily mean it is an extension. c++ works well with c natively ONLY BECAUSE it used to be considered “C with classes.” do some research.</p>
<aside class="quote">
<blockquote>
<p>Having influence and having compatibility are two separate things.</p>
</blockquote>
</aside>
<p>you answered most of your argument.<br>
[/quote]<br>
extension: A part that is added to something to enlarge or prolong it; a continuation.<br>
superset: In mathematics, especially in set theory, a set A is a subset of a set B if A is “contained” inside B. A and B may coincide.</p>
<p>Fair enough, the word I was looking for was superset.[/quote]</p>
<p>that’s better, however professionals still don’t even like calling it a superset, subset, extension, whatever.  it is considered its own language. java can natively support C as well.</p>
<p>c++ is its own language, either way.</p>
<p>ps: i’m not a hipster, bitch.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/linux-fails/428877/53">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/linux-fails/428877/53</link>
        <pubDate>Fri, 27 Jan 2012 22:58:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-428877-53</guid>
        <source url="https://forum.moparisthebest.com/t/linux-fails/428877.rss">Linux fails</source>
      </item>
  </channel>
</rss>
