<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[hyperion / other sources] Prayer base incomplete [ looking for feedback]</title>
    <link>https://forum.moparisthebest.com/t/hyperion-other-sources-prayer-base-incomplete-looking-for-feedback/535395</link>
    <description>im currently working on prayer for a hyperion source and i figured why not share

i also wanted feedback as to what im doing wrong or if theres a better way to do something

some things are not included cus im lazy 


[code=java]package org.hyperion.rs2.model.combat;

import java.util.ArrayList;

import org.hyperion.rs2.event.impl.PrayerDrainEvent;
import org.hyperion.rs2.model.Sound;
import org.hyperion.rs2.model.World;
import org.hyperion.rs2.model.player.Player;

public class Prayer {
	
	/**
	 * creates an editable list of active prayers
	 */
	private static ArrayList&lt;Integer&gt; activeprayers = new ArrayList&lt;Integer&gt;();
	
	
	public enum PrayerData {
		/**
		 * defence prayers
		 */
		THICK_SKIN(5, 83, 1, new int[] {5}, 0.5, new int[] {15}, &quot;DEFENCE&quot;, &quot;Thick Skin&quot;),
		ROCK_SKIN(15, 86, 10, new int[] {10}, 1.0, new int[] {5}, &quot;DEFENCE&quot;, &quot;Rock Skin&quot;),
		/**
		 * strength prayers
		 */
		BURST_OF_STRENGTH(7, 84, 4, new int[]{5}, 0.5, new int[] {}, &quot;STRENGTH&quot;, &quot;Burst of Strength&quot;),
		/**
		 * attack prayers
		 */
		CLARITY_OF_THOUGHT(9, 85, 7, new int[]{5}, 0.5, new int[] {}, &quot;ATTACK&quot;, &quot;Clarity of Thought&quot;),
		/**
		 * ranged prayers
		 */
		SHARP_EYE(11, 862, 8, new int[]{5}, 0.5,  new int[] {}, &quot;RANGED&quot;, &quot;Sharp Eye&quot;),
		/**
		 * magic prayers
		 */
		MYSTIC_WILL(13, 863, 9, new int[] {5}, 0.5, new int[] {}, &quot;MAGIC&quot;, &quot;Mystic Will&quot;);
		
		int prayerId, configId, levelReq;
		int[] bonuses, conflicts;
		double drainRate;
		String prayerType, prayerName;

		private PrayerData(int prayerId, int configId, int levelReq, int[] bonuses, double drainRate, int[] conflicts, String prayerType, String prayerName) {
			this.prayerId = prayerId;
			this.configId = configId;
			this.levelReq = levelReq;
			this.bonuses = bonuses;
			this.drainRate = drainRate;
			this.conflicts = conflicts;
			this.prayerType = prayerType;
			this.prayerName = prayerName;
		}
		
		public String getPrayerName() {
			return prayerName;
		}
		
		public String getPrayerType() {
			return prayerType;
		}
		
		public int[] getBonuses() {
			return bonuses;
		}
		
		public double getDrainRate() {
			return drainRate;
		}
		
		public int[] getConflicts() {
			return conflicts;
		}
		
		public int getPrayerId() {
			return prayerId;
		}
		
		public int getConfigId() {
			return configId;
		}
		
		public int getLevelReq() {
			return levelReq;
		}
	}
	
	public static void sendPrayer(Player player, int prayerId) {
		/**
		 * if the prayer is active then deactivate it and return the method
		 */
		if(activeprayers.contains(prayerId)) {
			deactivate(player, new int[] {prayerId} );
			return;
		}
		/**
		 * the player does not have enough prayer points so they cannot use prayer
		 */
		if(player.getSkills().getPrayerPoints() &lt;= 0) {
			return;
		}
		
		for(PrayerData pd: PrayerData.values()) {
			/**
			 * find the prayer using the prayerId and returns only those values correlated with that id
			 */
			if(pd.getPrayerId() == prayerId) {
				
			/**
			 * if the level requirement is higher than the players level they cannot use this prayer
			 */
			if(player.getSkills().getLevelForExperience(5) &lt; pd.getLevelReq()) {
				player.getActionSender().sendMessage(&quot;You need a prayer level of at least &quot;+pd.getLevelReq()+&quot; to use &quot;+pd.getPrayerName());
				return;
			}
			/**
			 * sends prayer data to the activate method
			 */
			activate(player,  pd.getPrayerId(), pd.getConfigId(), pd.getBonuses(), pd.getDrainRate(), pd.getConflicts(), pd.getPrayerType());
			return;
			}
		}
	}
	
	private static void activate(Player player, int prayerId, int configId, int[] bonuses, double drainRate, int[] conflicts, String prayerType) {
		/**
		 * deactives any active conflicting prayers to prevent unwanted bonuses
		 */
			deactivate(player, conflicts);
		/**
		 * adds the prayer to the activeprayers Array
		 */
			activeprayers.add(prayerId);
		/**
		 * toggles prayer glow on
		 */
			player.getActionSender().sendConfig(configId, 1);
		/**
		 * adds the prayer drain
		 */
			player.handleDrainRate(drainRate, &quot;add&quot;);
		/**
		 * toggles using prayer boolean
		 */
			Player.usingPrayer = true;
		/**
		 * adds the proper bonuses based on prayer type 
		 */
			switch(prayerType) {
			case &quot;DEFENCE&quot;:
				player.handleDefenceBonus(bonuses[0], &quot;add&quot;);
				break;
			
			case &quot;STRENGTH&quot;:
				player.handleStrengthBonus(bonuses[0], &quot;add&quot;);
				break;
				
			case &quot;ATTACK&quot;:
				player.handleAttackBonus(bonuses[0], &quot;add&quot;);
				break;
				
			case &quot;RANGED&quot;:
				player.handleRangedBonus(bonuses[0], &quot;add&quot;);
				break;
				
			case &quot;MAGIC&quot;:
				player.handleMagicBonus(bonuses[0], &quot;add&quot;);
				break;
				default:
					System.out.println(&quot;unhandled prayerType &quot;+prayerType);
					break;
			}
			World.getWorld().submit(new PrayerDrainEvent(player));
	}
	
	private static void deactivate(Player player, int[]prayerIds) {
		/**
		 * if there are no prayers  to deactivate then theres no point in continuing
		 */
		if(prayerIds.length &lt;= 0) return;
		/**
		 * loops through the prayer Id length
		 */
		for(int i = 0; i &lt; prayerIds.length; i++) {
			if(activeprayers.contains(prayerIds[i])) {
			/**
		 	* loops through the PrayerData values so we can deactive them properly
		 	*/
			for(PrayerData pd: PrayerData.values()) {
			/**
			 * makes sure it only decreases the bonuses of the prayer wanted 
			 */
			if(prayerIds[i] == pd.getPrayerId()) {
			/**
			 * create a new int for prayer bonuses
			 */
			int[] bonuses = pd.getBonuses();
			/**
			 * another switch statement based on prayer type
			 */
			switch(pd.getPrayerType()) {
			
			case &quot;DEFENCE&quot;:
				player.handleDefenceBonus(bonuses[0], &quot;decrease&quot;);
				break;
				
			case &quot;STRENGTH&quot;:
				player.handleStrengthBonus(bonuses[0], &quot;decrease&quot;);
				break;
				
			case &quot;ATTACK&quot;:
				player.handleAttackBonus(bonuses[0], &quot;decrease&quot;);
				break;
	
			case &quot;RANGED&quot;:
				player.handleRangedBonus(bonuses[0], &quot;decrease&quot;);
				break;
				
			case &quot;MAGIC&quot;:
				player.handleMagicBonus(bonuses[0], &quot;decrease&quot;);
				break;
			}
			/**
			 * send the config to the client to remove the prayer glow
			 */
			player.getActionSender().sendConfig(pd.getConfigId(), 0);;
			/**
			 * plays a little sound for the player
			 */
			player.getActionSender().playSound(Sound.create(2663, (byte) 1, 0));
			/**
			 * decreases the players drain rate
			 */
			player.handleDrainRate(pd.getDrainRate(), &quot;decrease&quot;);
			/**
			 * finally remove the prayer from the active prayers list
			 */
			activeprayers.remove(activeprayers.get(activeprayers.indexOf(prayerIds[i])));
				}
			  }
			}//end of prayerData loop
			
		}
		if(activeprayers.size() == 0) {
			player.usingPrayer = false;
		}
	}
	
	public static void resetPrayer(Player player) {
		if(activeprayers.size() &gt; 0) {
			for(int i = 0; i &lt; activeprayers.size(); i++) {
				for(PrayerData pd: PrayerData.values()) {
					if(activeprayers.get(i) == pd.getPrayerId()) {
						player.getActionSender().sendConfig(pd.getConfigId(), 0);
						activeprayers.remove(i);
					}
				}
			}
		}
		player.resetPrayer();
		
	}
	
}
[/code]</description>
    
    <lastBuildDate>Sat, 09 Nov 2013 04:04:11 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/hyperion-other-sources-prayer-base-incomplete-looking-for-feedback/535395.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[hyperion / other sources] Prayer base incomplete [ looking for feedback]</title>
        <dc:creator><![CDATA[@chazion chazion]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chazion">@chazion</a> wrote:</p>
          <blockquote>
              <p>im currently working on prayer for a hyperion source and i figured why not share</p>
<p>i also wanted feedback as to what im doing wrong or if theres a better way to do something</p>
<p>some things are not included cus im lazy</p>
<p>[code=java]package org.hyperion.rs2.model.combat;</p>
<p>import java.util.ArrayList;</p>
<p>import org.hyperion.rs2.event.impl.PrayerDrainEvent;<br>
import org.hyperion.rs2.model.Sound;<br>
import org.hyperion.rs2.model.World;<br>
import org.hyperion.rs2.model.player.Player;</p>
<p>public class Prayer {</p>
<pre><code>/**
 * creates an editable list of active prayers
 */
private static ArrayList&lt;Integer&gt; activeprayers = new ArrayList&lt;Integer&gt;();


public enum PrayerData {
	/**
	 * defence prayers
	 */
	THICK_SKIN(5, 83, 1, new int[] {5}, 0.5, new int[] {15}, "DEFENCE", "Thick Skin"),
	ROCK_SKIN(15, 86, 10, new int[] {10}, 1.0, new int[] {5}, "DEFENCE", "Rock Skin"),
	/**
	 * strength prayers
	 */
	BURST_OF_STRENGTH(7, 84, 4, new int[]{5}, 0.5, new int[] {}, "STRENGTH", "Burst of Strength"),
	/**
	 * attack prayers
	 */
	CLARITY_OF_THOUGHT(9, 85, 7, new int[]{5}, 0.5, new int[] {}, "ATTACK", "Clarity of Thought"),
	/**
	 * ranged prayers
	 */
	SHARP_EYE(11, 862, 8, new int[]{5}, 0.5,  new int[] {}, "RANGED", "Sharp Eye"),
	/**
	 * magic prayers
	 */
	MYSTIC_WILL(13, 863, 9, new int[] {5}, 0.5, new int[] {}, "MAGIC", "Mystic Will");
	
	int prayerId, configId, levelReq;
	int[] bonuses, conflicts;
	double drainRate;
	String prayerType, prayerName;

	private PrayerData(int prayerId, int configId, int levelReq, int[] bonuses, double drainRate, int[] conflicts, String prayerType, String prayerName) {
		this.prayerId = prayerId;
		this.configId = configId;
		this.levelReq = levelReq;
		this.bonuses = bonuses;
		this.drainRate = drainRate;
		this.conflicts = conflicts;
		this.prayerType = prayerType;
		this.prayerName = prayerName;
	}
	
	public String getPrayerName() {
		return prayerName;
	}
	
	public String getPrayerType() {
		return prayerType;
	}
	
	public int[] getBonuses() {
		return bonuses;
	}
	
	public double getDrainRate() {
		return drainRate;
	}
	
	public int[] getConflicts() {
		return conflicts;
	}
	
	public int getPrayerId() {
		return prayerId;
	}
	
	public int getConfigId() {
		return configId;
	}
	
	public int getLevelReq() {
		return levelReq;
	}
}

public static void sendPrayer(Player player, int prayerId) {
	/**
	 * if the prayer is active then deactivate it and return the method
	 */
	if(activeprayers.contains(prayerId)) {
		deactivate(player, new int[] {prayerId} );
		return;
	}
	/**
	 * the player does not have enough prayer points so they cannot use prayer
	 */
	if(player.getSkills().getPrayerPoints() &lt;= 0) {
		return;
	}
	
	for(PrayerData pd: PrayerData.values()) {
		/**
		 * find the prayer using the prayerId and returns only those values correlated with that id
		 */
		if(pd.getPrayerId() == prayerId) {
			
		/**
		 * if the level requirement is higher than the players level they cannot use this prayer
		 */
		if(player.getSkills().getLevelForExperience(5) &lt; pd.getLevelReq()) {
			player.getActionSender().sendMessage("You need a prayer level of at least "+pd.getLevelReq()+" to use "+pd.getPrayerName());
			return;
		}
		/**
		 * sends prayer data to the activate method
		 */
		activate(player,  pd.getPrayerId(), pd.getConfigId(), pd.getBonuses(), pd.getDrainRate(), pd.getConflicts(), pd.getPrayerType());
		return;
		}
	}
}

private static void activate(Player player, int prayerId, int configId, int[] bonuses, double drainRate, int[] conflicts, String prayerType) {
	/**
	 * deactives any active conflicting prayers to prevent unwanted bonuses
	 */
		deactivate(player, conflicts);
	/**
	 * adds the prayer to the activeprayers Array
	 */
		activeprayers.add(prayerId);
	/**
	 * toggles prayer glow on
	 */
		player.getActionSender().sendConfig(configId, 1);
	/**
	 * adds the prayer drain
	 */
		player.handleDrainRate(drainRate, "add");
	/**
	 * toggles using prayer boolean
	 */
		Player.usingPrayer = true;
	/**
	 * adds the proper bonuses based on prayer type 
	 */
		switch(prayerType) {
		case "DEFENCE":
			player.handleDefenceBonus(bonuses[0], "add");
			break;
		
		case "STRENGTH":
			player.handleStrengthBonus(bonuses[0], "add");
			break;
			
		case "ATTACK":
			player.handleAttackBonus(bonuses[0], "add");
			break;
			
		case "RANGED":
			player.handleRangedBonus(bonuses[0], "add");
			break;
			
		case "MAGIC":
			player.handleMagicBonus(bonuses[0], "add");
			break;
			default:
				System.out.println("unhandled prayerType "+prayerType);
				break;
		}
		World.getWorld().submit(new PrayerDrainEvent(player));
}

private static void deactivate(Player player, int[]prayerIds) {
	/**
	 * if there are no prayers  to deactivate then theres no point in continuing
	 */
	if(prayerIds.length &lt;= 0) return;
	/**
	 * loops through the prayer Id length
	 */
	for(int i = 0; i &lt; prayerIds.length; i++) {
		if(activeprayers.contains(prayerIds[i])) {
		/**
	 	* loops through the PrayerData values so we can deactive them properly
	 	*/
		for(PrayerData pd: PrayerData.values()) {
		/**
		 * makes sure it only decreases the bonuses of the prayer wanted 
		 */
		if(prayerIds[i] == pd.getPrayerId()) {
		/**
		 * create a new int for prayer bonuses
		 */
		int[] bonuses = pd.getBonuses();
		/**
		 * another switch statement based on prayer type
		 */
		switch(pd.getPrayerType()) {
		
		case "DEFENCE":
			player.handleDefenceBonus(bonuses[0], "decrease");
			break;
			
		case "STRENGTH":
			player.handleStrengthBonus(bonuses[0], "decrease");
			break;
			
		case "ATTACK":
			player.handleAttackBonus(bonuses[0], "decrease");
			break;

		case "RANGED":
			player.handleRangedBonus(bonuses[0], "decrease");
			break;
			
		case "MAGIC":
			player.handleMagicBonus(bonuses[0], "decrease");
			break;
		}
		/**
		 * send the config to the client to remove the prayer glow
		 */
		player.getActionSender().sendConfig(pd.getConfigId(), 0);;
		/**
		 * plays a little sound for the player
		 */
		player.getActionSender().playSound(Sound.create(2663, (byte) 1, 0));
		/**
		 * decreases the players drain rate
		 */
		player.handleDrainRate(pd.getDrainRate(), "decrease");
		/**
		 * finally remove the prayer from the active prayers list
		 */
		activeprayers.remove(activeprayers.get(activeprayers.indexOf(prayerIds[i])));
			}
		  }
		}//end of prayerData loop
		
	}
	if(activeprayers.size() == 0) {
		player.usingPrayer = false;
	}
}

public static void resetPrayer(Player player) {
	if(activeprayers.size() &gt; 0) {
		for(int i = 0; i &lt; activeprayers.size(); i++) {
			for(PrayerData pd: PrayerData.values()) {
				if(activeprayers.get(i) == pd.getPrayerId()) {
					player.getActionSender().sendConfig(pd.getConfigId(), 0);
					activeprayers.remove(i);
				}
			}
		}
	}
	player.resetPrayer();
	
}
</code></pre>
<p>}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/hyperion-other-sources-prayer-base-incomplete-looking-for-feedback/535395/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/hyperion-other-sources-prayer-base-incomplete-looking-for-feedback/535395/1</link>
        <pubDate>Sat, 09 Nov 2013 04:04:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-535395-1</guid>
        <source url="https://forum.moparisthebest.com/t/hyperion-other-sources-prayer-base-incomplete-looking-for-feedback/535395.rss">[hyperion / other sources] Prayer base incomplete [ looking for feedback]</source>
      </item>
  </channel>
</rss>
