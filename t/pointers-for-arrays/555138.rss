<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pointers for Arrays</title>
    <link>https://forum.moparisthebest.com/t/pointers-for-arrays/555138</link>
    <description>I&#39;m trying to call an array from main() into a function and transpose it in c++. I have the code written, but in c++ you can&#39;t return multiple values from functions without using pointers. I&#39;ve tried looking into it myself online but with no progress. My guess is I can&#39;t comprehend the idea behind it. Can one of you guys break it down for me. I&#39;m going to post the code and show what progress I&#39;ve made so far. It&#39;s still not complete as I have to add logic tests and such. I was mainly trying to get the hardest part of the code finished first.

[code=cpp]/*
*Zach Marshall
*3/31/2016
*For MATLAB Dr. Ross
*
*
*Description:
*Develop a program that will take the dimmensions of 2 seperate arrays and multiply them together.
*The Dimmensions must match as following: The Columns of the First, and the Rows of the Second.
*We will be writing this code in C++ and then converting to a MATLAB Script
*/

/* WHAT WILL WE NEED:
Functions: Size -- Checks the size of the arrays and makes sure that the corresponding rows and columns match up
Functions: Multiplicaton -- This function will actually do the multiplication
Orientations:
[X,Y] * [Y,X]
[Y,X] * [X,Y]
[X,Y] * [X,Y]&#39; -- The &#39; is a transpose in MATLAB and will flip the array.
[X,Y]&#39; * [X,Y]
-------------
-------------
*/

#include &lt;iostream&gt;
using namespace std;

const int rowA = 4, rowB = 5;
const int colA = 5, colB = 4;

int* Transpose(int ArrayA[rowA][colA], int* ArrayB[rowB][colB]); //pass both lengths and widths

int main()
{

	//declare variables


	//setup arrays
	int ArrayA[rowA][colA] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20} };

	int ArrayB[rowB][colB];

	for (int i = 0; i &lt; 5; i++)
	{
		for (int j = 0; j &lt; 4; j++)
		{
			cout &lt;&lt; ArrayB[i][j] &lt;&lt; &quot;\t&quot;;

		}
		cout &lt;&lt; endl;
	}

	ArrayB[rowB][colB] = *Transpose(ArrayA[4][5], ArrayB(5)[4]);

}

int* Transpose(int ArrayA[rowA][colA], int *ArrayB[rowB][colB]) //pass both lengths and widths
{
	//this loop transposes ArrayA into ArrayB
	//Swaps the dimmensions of ArrayB to match ArrayA
	for (int i = 0; i &lt; 4; i++)
	{
		for (int j = 0; j &lt; 5; j++)
		{
			*ArrayB[j][i] = ArrayA[i][j];
		}
	}
	return ArrayB[colB][rowB];
}[/code]

I&#39;m not asking for you to re-write the code for me, I would never want that. But some of you are probably capable of teaching introductory classes on this type of programming. I looked into JustAGuy&#39;s meta-template programming but it was a bit over my head as well.</description>
    
    <lastBuildDate>Thu, 07 Apr 2016 04:48:42 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/pointers-for-arrays/555138.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pointers for Arrays</title>
        <dc:creator><![CDATA[@Tree Tree]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tree">@Tree</a> wrote:</p>
          <blockquote>
              <blockquote>you can't return multiple values from functions without using pointers.</blockquote>
<p>Not really.<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://ariya.io/favicon.ico" class="site-icon" width="32" height="32">
      <a href="https://ariya.io/2015/04/c-multiple-return-values" target="_blank" title="10:14PM - 30 April 2015" rel="nofollow noopener">ariya.io – 30 Apr 15</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:206/300;"><img src="https://ariya.io/images/2015/04/ninja.png" class="thumbnail"></div>

<h3><a href="https://ariya.io/2015/04/c-multiple-return-values" target="_blank" rel="nofollow noopener">C++ Multiple Return Values</a></h3>

<p>With a complex application, it is often convenient to have a function that returns not just one value. There are many different ways to achieve this in C++, from using a structure to taking advantage of the latest C++ 11 tuple class template.</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pointers-for-arrays/555138/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pointers-for-arrays/555138/2</link>
        <pubDate>Thu, 07 Apr 2016 04:48:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555138-2</guid>
        <source url="https://forum.moparisthebest.com/t/pointers-for-arrays/555138.rss">Pointers for Arrays</source>
      </item>
      <item>
        <title>Pointers for Arrays</title>
        <dc:creator><![CDATA[@Xellium Xellium]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xellium">@Xellium</a> wrote:</p>
          <blockquote>
              <p>I’m trying to call an array from main() into a function and transpose it in c++. I have the code written, but in c++ you can’t return multiple values from functions without using pointers. I’ve tried looking into it myself online but with no progress. My guess is I can’t comprehend the idea behind it. Can one of you guys break it down for me. I’m going to post the code and show what progress I’ve made so far. It’s still not complete as I have to add logic tests and such. I was mainly trying to get the hardest part of the code finished first.</p>
<p>[code=cpp]/*<br>
*Zach Marshall<br>
*3/31/2016<br>
*For MATLAB Dr. Ross<br>
*<br>
*<br>
*Description:<br>
*Develop a program that will take the dimmensions of 2 seperate arrays and multiply them together.<br>
*The Dimmensions must match as following: The Columns of the First, and the Rows of the Second.<br>
*We will be writing this code in C++ and then converting to a MATLAB Script<br>
*/</p>
<h2>/* WHAT WILL WE NEED:<br>
Functions: Size – Checks the size of the arrays and makes sure that the corresponding rows and columns match up<br>
Functions: Multiplicaton – This function will actually do the multiplication<br>
Orientations:<br>
[X,Y] * [Y,X]<br>
[Y,X] * [X,Y]<br>
[X,Y] * [X,Y]’ – The ’ is a transpose in MATLAB and will flip the array.<br>
[X,Y]’ * [X,Y]</h2>
<hr>
<p>*/</p>
<p><span class="hashtag">#include</span> <br>
using namespace std;</p>
<p>const int rowA = 4, rowB = 5;<br>
const int colA = 5, colB = 4;</p>
<p>int* Transpose(int ArrayA[rowA][colA], int* ArrayB[rowB][colB]); //pass both lengths and widths</p>
<p>int main()<br>
{</p>
<pre><code>//declare variables


//setup arrays
int ArrayA[rowA][colA] = { {1, 2, 3, 4, 5}, {6, 7, 8, 9, 10}, {11, 12, 13, 14, 15}, {16, 17, 18, 19, 20} };

int ArrayB[rowB][colB];

for (int i = 0; i &lt; 5; i++)
{
	for (int j = 0; j &lt; 4; j++)
	{
		cout &lt;&lt; ArrayB[i][j] &lt;&lt; "\t";

	}
	cout &lt;&lt; endl;
}

ArrayB[rowB][colB] = *Transpose(ArrayA[4][5], ArrayB(5)[4]);
</code></pre>
<p>}</p>
<p>int* Transpose(int ArrayA[rowA][colA], int *ArrayB[rowB][colB]) //pass both lengths and widths<br>
{<br>
//this loop transposes ArrayA into ArrayB<br>
//Swaps the dimmensions of ArrayB to match ArrayA<br>
for (int i = 0; i &lt; 4; i++)<br>
{<br>
for (int j = 0; j &lt; 5; j++)<br>
{<br>
*ArrayB[j][i] = ArrayA[i][j];<br>
}<br>
}<br>
return ArrayB[colB][rowB];<br>
}[/code]</p>
<p>I’m not asking for you to re-write the code for me, I would never want that. But some of you are probably capable of teaching introductory classes on this type of programming. I looked into JustAGuy’s meta-template programming but it was a bit over my head as well.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pointers-for-arrays/555138/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pointers-for-arrays/555138/1</link>
        <pubDate>Tue, 05 Apr 2016 15:08:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-555138-1</guid>
        <source url="https://forum.moparisthebest.com/t/pointers-for-arrays/555138.rss">Pointers for Arrays</source>
      </item>
  </channel>
</rss>
