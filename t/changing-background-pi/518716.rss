<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Changing Background pi</title>
    <link>https://forum.moparisthebest.com/t/changing-background-pi/518716</link>
    <description>This is my sprite.java
[code]// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.
// Jad home page: http://www.kpdus.com/jad.html
// Decompiler options: packimports(3) 

import sign.signlink;
import java.awt.*;
import java.awt.image.PixelGrabber;
import java.awt.image.*;
import javax.imageio.*;
import java.io.*;
import javax.swing.ImageIcon;

public final class Sprite extends DrawingArea {

	public Sprite(int i, int j) {
		myPixels = new int[i * j];
		myWidth = anInt1444 = i;
		myHeight = anInt1445 = j;
		anInt1442 = anInt1443 = 0;
	}
	
	
	public String location = &quot;C:/Cache4/Sprites/&quot;;

	public Sprite(byte abyte0[], Component component) {
		try {
			Image image = Toolkit.getDefaultToolkit().getImage(location+&quot;mopar.jpg&quot;);
			//Image image = Toolkit.getDefaultToolkit().createImage(abyte0);
			MediaTracker mediatracker = new MediaTracker(component);
			mediatracker.addImage(image, 0);
			mediatracker.waitForAll();
			myWidth = image.getWidth(component);
			myHeight = image.getHeight(component);
			anInt1444 = myWidth;
			anInt1445 = myHeight;
			anInt1442 = 0;
			anInt1443 = 0;
			myPixels = new int[myWidth * myHeight];
			PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
			pixelgrabber.grabPixels();
		} catch(Exception _ex) {
			System.out.println(&quot;Error converting jpg&quot;);
		}
	}

	public Sprite(String img, int width, int height) {
		try {
			Image image = Toolkit.getDefaultToolkit().createImage(FileOperations.ReadFile(img));
			myWidth = width;
			myHeight = height;
			anInt1444 = myWidth;
			anInt1445 = myHeight;
			anInt1442 = 0;
			anInt1443 = 0;
			myPixels = new int[myWidth * myHeight];
			PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
			pixelgrabber.grabPixels();
			image = null;
		} catch(Exception _ex) {
			System.out.println(_ex);
		}
	}

    public Sprite(String img) {
		try {
			Image image = Toolkit.getDefaultToolkit().getImage(location + img + &quot;.png&quot;);
			ImageIcon sprite = new ImageIcon(image);
			myWidth = sprite.getIconWidth();
			myHeight = sprite.getIconHeight();
			anInt1444 = myWidth;
			anInt1445 = myHeight;
			anInt1442 = 0;
			anInt1443 = 0;
			myPixels = new int[myWidth * myHeight];
			PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
			pixelgrabber.grabPixels();
			image = null;
			setTransparency(255, 0, 255);
		} catch(Exception _ex) {
			System.out.println(_ex);
		}
	}
	
	public void setTransparency(int transRed, int transGreen, int transBlue)
	{
		for(int index = 0; index &lt; myPixels.length; index++)
			if(((myPixels[index] &gt;&gt; 16) &amp; 255) == transRed &amp;&amp; ((myPixels[index] &gt;&gt; 8) &amp; 255) == transGreen &amp;&amp; (myPixels[index] &amp; 255) == transBlue)
				myPixels[index] = 0;
	}
	
	public Sprite(StreamLoader streamLoader, String s, int i)
	{
		Stream stream = new Stream(streamLoader.getDataForName(s + &quot;.dat&quot;));
		Stream stream_1 = new Stream(streamLoader.getDataForName(&quot;index.dat&quot;));
		stream_1.currentOffset = stream.readUnsignedWord();
		anInt1444 = stream_1.readUnsignedWord();
		anInt1445 = stream_1.readUnsignedWord();
		int j = stream_1.readUnsignedByte();
		int ai[] = new int[j];
		for(int k = 0; k &lt; j - 1; k++)
		{
			ai[k + 1] = stream_1.read3Bytes();
			if(ai[k + 1] == 0)
				ai[k + 1] = 1;
		}

		for(int l = 0; l &lt; i; l++)
		{
			stream_1.currentOffset += 2;
			stream.currentOffset += stream_1.readUnsignedWord() * stream_1.readUnsignedWord();
			stream_1.currentOffset++;
		}

		anInt1442 = stream_1.readUnsignedByte();
		anInt1443 = stream_1.readUnsignedByte();
		myWidth = stream_1.readUnsignedWord();
		myHeight = stream_1.readUnsignedWord();
		int i1 = stream_1.readUnsignedByte();
		int j1 = myWidth * myHeight;
		myPixels = new int[j1];
		if(i1 == 0)
		{
			for(int k1 = 0; k1 &lt; j1; k1++)
				myPixels[k1] = ai[stream.readUnsignedByte()];
			setTransparency(255,0,255);
			return;
		}
		if(i1 == 1)
		{
			for(int l1 = 0; l1 &lt; myWidth; l1++)
			{
				for(int i2 = 0; i2 &lt; myHeight; i2++)
					myPixels[l1 + i2 * myWidth] = ai[stream.readUnsignedByte()];
			}

		}
		setTransparency(255,0,255);
	}

	public void method343()
	{
		DrawingArea.initDrawingArea(myHeight, myWidth, myPixels);
	}

	public void method344(int i, int j, int k)
	{
		for(int i1 = 0; i1 &lt; myPixels.length; i1++)
		{
			int j1 = myPixels[i1];
			if(j1 != 0)
			{
				int k1 = j1 &gt;&gt; 16 &amp; 0xff;
				k1 += i;
				if(k1 &lt; 1)
					k1 = 1;
				else
				if(k1 &gt; 255)
					k1 = 255;
				int l1 = j1 &gt;&gt; 8 &amp; 0xff;
				l1 += j;
				if(l1 &lt; 1)
					l1 = 1;
				else
				if(l1 &gt; 255)
					l1 = 255;
				int i2 = j1 &amp; 0xff;
				i2 += k;
				if(i2 &lt; 1)
					i2 = 1;
				else
				if(i2 &gt; 255)
					i2 = 255;
				myPixels[i1] = (k1 &lt;&lt; 16) + (l1 &lt;&lt; 8) + i2;
			}
		}

	}

	public void method345()
	{
		int ai[] = new int[anInt1444 * anInt1445];
		for(int j = 0; j &lt; myHeight; j++)
		{
			System.arraycopy(myPixels, j * myWidth, ai, j + anInt1443 * anInt1444 + anInt1442, myWidth);
		}

		myPixels = ai;
		myWidth = anInt1444;
		myHeight = anInt1445;
		anInt1442 = 0;
		anInt1443 = 0;
	}

	public void method346(int i, int j)
	{
		i += anInt1442;
		j += anInt1443;
		int l = i + j * DrawingArea.width;
		int i1 = 0;
		int j1 = myHeight;
		int k1 = myWidth;
		int l1 = DrawingArea.width - k1;
		int i2 = 0;
		if(j &lt; DrawingArea.topY)
		{
			int j2 = DrawingArea.topY - j;
			j1 -= j2;
			j = DrawingArea.topY;
			i1 += j2 * k1;
			l += j2 * DrawingArea.width;
		}
		if(j + j1 &gt; DrawingArea.bottomY)
			j1 -= (j + j1) - DrawingArea.bottomY;
		if(i &lt; DrawingArea.topX)
		{
			int k2 = DrawingArea.topX - i;
			k1 -= k2;
			i = DrawingArea.topX;
			i1 += k2;
			l += k2;
			i2 += k2;
			l1 += k2;
		}
		if(i + k1 &gt; DrawingArea.bottomX)
		{
			int l2 = (i + k1) - DrawingArea.bottomX;
			k1 -= l2;
			i2 += l2;
			l1 += l2;
		}
		if(k1 &lt;= 0 || j1 &lt;= 0)
		{
		} else
		{
			method347(l, k1, j1, i2, i1, l1, myPixels, DrawingArea.pixels);
		}
	}

	private void method347(int i, int j, int k, int l, int i1, int k1,
						   int ai[], int ai1[])
	{
		int l1 = -(j &gt;&gt; 2);
		j = -(j &amp; 3);
		for(int i2 = -k; i2 &lt; 0; i2++)
		{
			for(int j2 = l1; j2 &lt; 0; j2++)
			{
				ai1[i++] = ai[i1++];
				ai1[i++] = ai[i1++];
				ai1[i++] = ai[i1++];
				ai1[i++] = ai[i1++];
			}

			for(int k2 = j; k2 &lt; 0; k2++)
				ai1[i++] = ai[i1++];

			i += k1;
			i1 += l;
		}
	}

	public void drawSprite1(int i, int j)
	{
		int k = 128;//was parameter
		i += anInt1442;
		j += anInt1443;
		int i1 = i + j * DrawingArea.width;
		int j1 = 0;
		int k1 = myHeight;
		int l1 = myWidth;
		int i2 = DrawingArea.width - l1;
		int j2 = 0;
		if(j &lt; DrawingArea.topY)
		{
			int k2 = DrawingArea.topY - j;
			k1 -= k2;
			j = DrawingArea.topY;
			j1 += k2 * l1;
			i1 += k2 * DrawingArea.width;
		}
		if(j + k1 &gt; DrawingArea.bottomY)
			k1 -= (j + k1) - DrawingArea.bottomY;
		if(i &lt; DrawingArea.topX)
		{
			int l2 = DrawingArea.topX - i;
			l1 -= l2;
			i = DrawingArea.topX;
			j1 += l2;
			i1 += l2;
			j2 += l2;
			i2 += l2;
		}
		if(i + l1 &gt; DrawingArea.bottomX)
		{
			int i3 = (i + l1) - DrawingArea.bottomX;
			l1 -= i3;
			j2 += i3;
			i2 += i3;
		}
		if(!(l1 &lt;= 0 || k1 &lt;= 0))
		{
			method351(j1, l1, DrawingArea.pixels, myPixels, j2, k1, i2, k, i1);
		}
	}

	public void drawSprite(int i, int k)
	{
		i += anInt1442;
		k += anInt1443;
		int l = i + k * DrawingArea.width;
		int i1 = 0;
		int j1 = myHeight;
		int k1 = myWidth;
		int l1 = DrawingArea.width - k1;
		int i2 = 0;
		if(k &lt; DrawingArea.topY)
		{
			int j2 = DrawingArea.topY - k;
			j1 -= j2;
			k = DrawingArea.topY;
			i1 += j2 * k1;
			l += j2 * DrawingArea.width;
		}
		if(k + j1 &gt; DrawingArea.bottomY)
			j1 -= (k + j1) - DrawingArea.bottomY;
		if(i &lt; DrawingArea.topX)
		{
			int k2 = DrawingArea.topX - i;
			k1 -= k2;
			i = DrawingArea.topX;
			i1 += k2;
			l += k2;
			i2 += k2;
			l1 += k2;
		}
		if(i + k1 &gt; DrawingArea.bottomX)
		{
			int l2 = (i + k1) - DrawingArea.bottomX;
			k1 -= l2;
			i2 += l2;
			l1 += l2;
		}
		if(!(k1 &lt;= 0 || j1 &lt;= 0))
		{
			method349(DrawingArea.pixels, myPixels, i1, l, k1, j1, l1, i2);
		}
	}

	public void drawSprite(int i, int k, int color) {
		int tempWidth = myWidth + 2;
		int tempHeight = myHeight + 2;
		int[] tempArray = new int[tempWidth * tempHeight];
		for(int x = 0; x &lt; myWidth; x++) {
			for(int y = 0; y &lt; myHeight; y++) {
				if(myPixels[x + y * myWidth] != 0)
					tempArray[(x + 1) + (y + 1) * tempWidth] = myPixels[x + y * myWidth];
			}
		}
		for(int x = 0; x &lt; tempWidth; x++) {
			for(int y = 0; y &lt; tempHeight; y++) {
				if(tempArray[(x) + (y) * tempWidth] == 0) {
					if(x &lt; tempWidth - 1 &amp;&amp; tempArray[(x + 1) + ((y) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x + 1) + ((y) * tempWidth)] != 0xffffff) {
						tempArray[(x) + (y) * tempWidth] = color;
					}
					if(x &gt; 0 &amp;&amp; tempArray[(x - 1) + ((y) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x - 1) + ((y) * tempWidth)] != 0xffffff) {
						tempArray[(x) + (y) * tempWidth] = color;
					}
					if(y &lt; tempHeight - 1 &amp;&amp; tempArray[(x) + ((y + 1) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x) + ((y + 1) * tempWidth)] != 0xffffff) {
						tempArray[(x) + (y) * tempWidth] = color;
					}
					if(y &gt; 0 &amp;&amp; tempArray[(x) + ((y - 1) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x) + ((y - 1) * tempWidth)] != 0xffffff) {
						tempArray[(x) + (y) * tempWidth] = color;
					}
				}
			}
		}
		i--;
		k--;
		i += anInt1442;
		k += anInt1443;
		int l = i + k * DrawingArea.width;
		int i1 = 0;
		int j1 = tempHeight;
		int k1 = tempWidth;
		int l1 = DrawingArea.width - k1;
		int i2 = 0;
		if (k &lt; DrawingArea.topY) {
			int j2 = DrawingArea.topY - k;
			j1 -= j2;
			k = DrawingArea.topY;
			i1 += j2 * k1;
			l += j2 * DrawingArea.width;
		}
		if (k + j1 &gt; DrawingArea.bottomY) {
			j1 -= (k + j1) - DrawingArea.bottomY;
		}
		if (i &lt; DrawingArea.topX) {
			int k2 = DrawingArea.topX - i;
			k1 -= k2;
			i = DrawingArea.topX;
			i1 += k2;
			l += k2;
			i2 += k2;
			l1 += k2;
		}
		if (i + k1 &gt; DrawingArea.bottomX) {
			int l2 = (i + k1) - DrawingArea.bottomX;
			k1 -= l2;
			i2 += l2;
			l1 += l2;
		}
		if (!(k1 &lt;= 0 || j1 &lt;= 0)) {
			method349(DrawingArea.pixels, tempArray, i1, l, k1, j1, l1, i2);
		}
	}
	
	
	public void drawSprite2(int i, int j) {
		int k = 225;//was parameter
		i += anInt1442;
		j += anInt1443;
		int i1 = i + j * DrawingArea.width;
		int j1 = 0;
		int k1 = myHeight;
		int l1 = myWidth;
		int i2 = DrawingArea.width - l1;
		int j2 = 0;
		if(j &lt; DrawingArea.topY) {
			int k2 = DrawingArea.topY - j;
			k1 -= k2;
			j = DrawingArea.topY;
			j1 += k2 * l1;
			i1 += k2 * DrawingArea.width;
		}
		if(j + k1 &gt; DrawingArea.bottomY)
			k1 -= (j + k1) - DrawingArea.bottomY;
		if(i &lt; DrawingArea.topX) {
			int l2 = DrawingArea.topX - i;
			l1 -= l2;
			i = DrawingArea.topX;
			j1 += l2;
			i1 += l2;
			j2 += l2;
			i2 += l2;
		}
		if(i + l1 &gt; DrawingArea.bottomX) {
			int i3 = (i + l1) - DrawingArea.bottomX;
			l1 -= i3;
			j2 += i3;
			i2 += i3;
		}
		if(!(l1 &lt;= 0 || k1 &lt;= 0)) {
			method351(j1, l1, DrawingArea.pixels, myPixels, j2, k1, i2, k, i1);
		}
	}

	private void method349(int ai[], int ai1[], int j, int k, int l, int i1, int j1, int k1) {
		int i;//was parameter
		int l1 = -(l &gt;&gt; 2);
		l = -(l &amp; 3);
		for(int i2 = -i1; i2 &lt; 0; i2++) {
			for(int j2 = l1; j2 &lt; 0; j2++) {
				i = ai1[j++];
				if(i != 0 &amp;&amp; i != -1)
				{
					ai[k++] = i;
				} else {
				k++;
			}
			i = ai1[j++];
			if(i != 0 &amp;&amp; i != -1) {
				ai[k++] = i;
			} else {
				k++;
			}
			i = ai1[j++];
			if(i != 0 &amp;&amp; i != -1) {
				ai[k++] = i;
			} else {
				k++;
			}
			i = ai1[j++];
			if(i != 0 &amp;&amp; i != -1) {
				ai[k++] = i;
			} else {
				k++;
			}
		}

		for(int k2 = l; k2 &lt; 0; k2++) {
			i = ai1[j++];
			if(i != 0 &amp;&amp; i != -1) {
				ai[k++] = i;
			} else {
				k++;
			}
		}
		k += j1;
		j += k1;
		}
	}

	private void method351(int i, int j, int ai[], int ai1[], int l, int i1,
						   int j1, int k1, int l1)
	{
		int k;//was parameter
		int j2 = 256 - k1;
		for(int k2 = -i1; k2 &lt; 0; k2++)
		{
			for(int l2 = -j; l2 &lt; 0; l2++)
			{
				k = ai1[i++];
				if(k != 0)
				{
					int i3 = ai[l1];
					ai[l1++] = ((k &amp; 0xff00ff) * k1 + (i3 &amp; 0xff00ff) * j2 &amp; 0xff00ff00) + ((k &amp; 0xff00) * k1 + (i3 &amp; 0xff00) * j2 &amp; 0xff0000) &gt;&gt; 8;
				} else
				{
					l1++;
				}
			}

			l1 += j1;
			i += l;
		}
	}

	public void method352(int i, int j, int ai[], int k, int ai1[], int i1,
						  int j1, int k1, int l1, int i2)
	{
		try
		{
			int j2 = -l1 / 2;
			int k2 = -i / 2;
			int l2 = (int)(Math.sin((double)j / 326.11000000000001D) * 65536D);
			int i3 = (int)(Math.cos((double)j / 326.11000000000001D) * 65536D);
			l2 = l2 * k &gt;&gt; 8;
			i3 = i3 * k &gt;&gt; 8;
			int j3 = (i2 &lt;&lt; 16) + (k2 * l2 + j2 * i3);
			int k3 = (i1 &lt;&lt; 16) + (k2 * i3 - j2 * l2);
			int l3 = k1 + j1 * DrawingArea.width;
			for(j1 = 0; j1 &lt; i; j1++)
			{
				int i4 = ai1[j1];
				int j4 = l3 + i4;
				int k4 = j3 + i3 * i4;
				int l4 = k3 - l2 * i4;
				for(k1 = -ai[j1]; k1 &lt; 0; k1++)
				{
					DrawingArea.pixels[j4++] = myPixels[(k4 &gt;&gt; 16) + (l4 &gt;&gt; 16) * myWidth];
					k4 += i3;
					l4 -= l2;
				}

				j3 += l2;
				k3 += i3;
				l3 += DrawingArea.width;
			}

		}
		catch(Exception _ex)
		{
		}
	}

	public void method353(int i,
						  double d, int l1)
	{
		//all of the following were parameters
		int j = 15;
		int k = 20;
		int l = 15;
		int j1 = 256;
		int k1 = 20;
		//all of the previous were parameters
		try
		{
			int i2 = -k / 2;
			int j2 = -k1 / 2;
			int k2 = (int)(Math.sin(d) * 65536D);
			int l2 = (int)(Math.cos(d) * 65536D);
			k2 = k2 * j1 &gt;&gt; 8;
			l2 = l2 * j1 &gt;&gt; 8;
			int i3 = (l &lt;&lt; 16) + (j2 * k2 + i2 * l2);
			int j3 = (j &lt;&lt; 16) + (j2 * l2 - i2 * k2);
			int k3 = l1 + i * DrawingArea.width;
			for(i = 0; i &lt; k1; i++)
			{
				int l3 = k3;
				int i4 = i3;
				int j4 = j3;
				for(l1 = -k; l1 &lt; 0; l1++)
				{
					int k4 = myPixels[(i4 &gt;&gt; 16) + (j4 &gt;&gt; 16) * myWidth];
					if(k4 != 0)
						DrawingArea.pixels[l3++] = k4;
					else
						l3++;
					i4 += l2;
					j4 -= k2;
				}

				i3 += k2;
				j3 += l2;
				k3 += DrawingArea.width;
			}

		}
		catch(Exception _ex)
		{
		}
	}

	public void method354(Background background, int i, int j)
	{
		j += anInt1442;
		i += anInt1443;
		int k = j + i * DrawingArea.width;
		int l = 0;
		int i1 = myHeight;
		int j1 = myWidth;
		int k1 = DrawingArea.width - j1;
		int l1 = 0;
		if(i &lt; DrawingArea.topY)
		{
			int i2 = DrawingArea.topY - i;
			i1 -= i2;
			i = DrawingArea.topY;
			l += i2 * j1;
			k += i2 * DrawingArea.width;
		}
		if(i + i1 &gt; DrawingArea.bottomY)
			i1 -= (i + i1) - DrawingArea.bottomY;
		if(j &lt; DrawingArea.topX)
		{
			int j2 = DrawingArea.topX - j;
			j1 -= j2;
			j = DrawingArea.topX;
			l += j2;
			k += j2;
			l1 += j2;
			k1 += j2;
		}
		if(j + j1 &gt; DrawingArea.bottomX)
		{
			int k2 = (j + j1) - DrawingArea.bottomX;
			j1 -= k2;
			l1 += k2;
			k1 += k2;
		}
		if(!(j1 &lt;= 0 || i1 &lt;= 0))
		{
			method355(myPixels, j1, background.aByteArray1450, i1, DrawingArea.pixels, 0, k1, k, l1, l);
		}
	}

	private void method355(int ai[], int i, byte abyte0[], int j, int ai1[], int k,
						   int l, int i1, int j1, int k1)
	{
		int l1 = -(i &gt;&gt; 2);
		i = -(i &amp; 3);
		for(int j2 = -j; j2 &lt; 0; j2++)
		{
			for(int k2 = l1; k2 &lt; 0; k2++)
			{
				k = ai[k1++];
				if(k != 0 &amp;&amp; abyte0[i1] == 0)
					ai1[i1++] = k;
				else
					i1++;
				k = ai[k1++];
				if(k != 0 &amp;&amp; abyte0[i1] == 0)
					ai1[i1++] = k;
				else
					i1++;
				k = ai[k1++];
				if(k != 0 &amp;&amp; abyte0[i1] == 0)
					ai1[i1++] = k;
				else
					i1++;
				k = ai[k1++];
				if(k != 0 &amp;&amp; abyte0[i1] == 0)
					ai1[i1++] = k;
				else
					i1++;
			}

			for(int l2 = i; l2 &lt; 0; l2++)
			{
				k = ai[k1++];
				if(k != 0 &amp;&amp; abyte0[i1] == 0)
					ai1[i1++] = k;
				else
					i1++;
			}

			i1 += l;
			k1 += j1;
		}

	}

	public int myPixels[];
	public int myWidth;
	public int myHeight;
	private int anInt1442;
	private int anInt1443;
	public int anInt1444;
	public int anInt1445;
}
[/code]
I named it mopar.jpg both in my sprites class and my sprites folder with the correct demensions
this is the error I am receiving
[code]Error: loaderror Loading [name of my server]... 20[/code]
Can someone tell me what I&#39;m doing wrong?
Possible questions that I will answer now

1. Yes my cache is downloading correctly
2. Yes it&#39;s unzipping my cache that i zipped.
3. My cache is zipped no problems with it at all
4. my image is named mopar.jpg inside my sprites folder as the directory says.</description>
    
    <lastBuildDate>Fri, 10 May 2013 03:53:59 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/changing-background-pi/518716.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Changing Background pi</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>try to load the regular rs logo background and see if it works. If it does that tells you right there you will need to name it as it is listed in the cache.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/changing-background-pi/518716/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/changing-background-pi/518716/4</link>
        <pubDate>Fri, 10 May 2013 03:53:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518716-4</guid>
        <source url="https://forum.moparisthebest.com/t/changing-background-pi/518716.rss">Changing Background pi</source>
      </item>
      <item>
        <title>Changing Background pi</title>
        <dc:creator><![CDATA[@jamie233 jamie233]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jamie233">@jamie233</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="518716">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/loveandpower/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> Loveandpower:</div>
<blockquote>
<p>have you tried using toms suite and just replacing the runescape background in the cached area?</p>
</blockquote>
</aside>
<p>There was no background to replace besides the default :L I used tom’s cache suite only thing related to the background I found was the RS logo.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/changing-background-pi/518716/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/changing-background-pi/518716/3</link>
        <pubDate>Fri, 10 May 2013 00:25:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518716-3</guid>
        <source url="https://forum.moparisthebest.com/t/changing-background-pi/518716.rss">Changing Background pi</source>
      </item>
      <item>
        <title>Changing Background pi</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>have you tried using toms suite and just replacing the runescape background in the cached area?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/changing-background-pi/518716/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/changing-background-pi/518716/2</link>
        <pubDate>Wed, 08 May 2013 11:13:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518716-2</guid>
        <source url="https://forum.moparisthebest.com/t/changing-background-pi/518716.rss">Changing Background pi</source>
      </item>
      <item>
        <title>Changing Background pi</title>
        <dc:creator><![CDATA[@jamie233 jamie233]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jamie233">@jamie233</a> wrote:</p>
          <blockquote>
              <p>This is my sprite.java</p>
<p>[code]// Decompiled by Jad v1.5.8f. Copyright 2001 Pavel Kouznetsov.<br>
// Jad home page: <a href="http://www.kpdus.com/jad.html" rel="nofollow noopener">http://www.kpdus.com/jad.html</a><br>
// Decompiler options: packimports(3)</p>
<p>import sign.signlink;<br>
import java.awt.<em>;<br>
import java.awt.image.PixelGrabber;<br>
import java.awt.image.</em>;<br>
import javax.imageio.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import javax.swing.ImageIcon;</p>
<p>public final class Sprite extends DrawingArea {</p>
<pre><code>public Sprite(int i, int j) {
	myPixels = new int[i * j];
	myWidth = anInt1444 = i;
	myHeight = anInt1445 = j;
	anInt1442 = anInt1443 = 0;
}


public String location = "C:/Cache4/Sprites/";

public Sprite(byte abyte0[], Component component) {
	try {
		Image image = Toolkit.getDefaultToolkit().getImage(location+"mopar.jpg");
		//Image image = Toolkit.getDefaultToolkit().createImage(abyte0);
		MediaTracker mediatracker = new MediaTracker(component);
		mediatracker.addImage(image, 0);
		mediatracker.waitForAll();
		myWidth = image.getWidth(component);
		myHeight = image.getHeight(component);
		anInt1444 = myWidth;
		anInt1445 = myHeight;
		anInt1442 = 0;
		anInt1443 = 0;
		myPixels = new int[myWidth * myHeight];
		PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
		pixelgrabber.grabPixels();
	} catch(Exception _ex) {
		System.out.println("Error converting jpg");
	}
}

public Sprite(String img, int width, int height) {
	try {
		Image image = Toolkit.getDefaultToolkit().createImage(FileOperations.ReadFile(img));
		myWidth = width;
		myHeight = height;
		anInt1444 = myWidth;
		anInt1445 = myHeight;
		anInt1442 = 0;
		anInt1443 = 0;
		myPixels = new int[myWidth * myHeight];
		PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
		pixelgrabber.grabPixels();
		image = null;
	} catch(Exception _ex) {
		System.out.println(_ex);
	}
}

public Sprite(String img) {
	try {
		Image image = Toolkit.getDefaultToolkit().getImage(location + img + ".png");
		ImageIcon sprite = new ImageIcon(image);
		myWidth = sprite.getIconWidth();
		myHeight = sprite.getIconHeight();
		anInt1444 = myWidth;
		anInt1445 = myHeight;
		anInt1442 = 0;
		anInt1443 = 0;
		myPixels = new int[myWidth * myHeight];
		PixelGrabber pixelgrabber = new PixelGrabber(image, 0, 0, myWidth, myHeight, myPixels, 0, myWidth);
		pixelgrabber.grabPixels();
		image = null;
		setTransparency(255, 0, 255);
	} catch(Exception _ex) {
		System.out.println(_ex);
	}
}

public void setTransparency(int transRed, int transGreen, int transBlue)
{
	for(int index = 0; index &lt; myPixels.length; index++)
		if(((myPixels[index] &gt;&gt; 16) &amp; 255) == transRed &amp;&amp; ((myPixels[index] &gt;&gt; 8) &amp; 255) == transGreen &amp;&amp; (myPixels[index] &amp; 255) == transBlue)
			myPixels[index] = 0;
}

public Sprite(StreamLoader streamLoader, String s, int i)
{
	Stream stream = new Stream(streamLoader.getDataForName(s + ".dat"));
	Stream stream_1 = new Stream(streamLoader.getDataForName("index.dat"));
	stream_1.currentOffset = stream.readUnsignedWord();
	anInt1444 = stream_1.readUnsignedWord();
	anInt1445 = stream_1.readUnsignedWord();
	int j = stream_1.readUnsignedByte();
	int ai[] = new int[j];
	for(int k = 0; k &lt; j - 1; k++)
	{
		ai[k + 1] = stream_1.read3Bytes();
		if(ai[k + 1] == 0)
			ai[k + 1] = 1;
	}

	for(int l = 0; l &lt; i; l++)
	{
		stream_1.currentOffset += 2;
		stream.currentOffset += stream_1.readUnsignedWord() * stream_1.readUnsignedWord();
		stream_1.currentOffset++;
	}

	anInt1442 = stream_1.readUnsignedByte();
	anInt1443 = stream_1.readUnsignedByte();
	myWidth = stream_1.readUnsignedWord();
	myHeight = stream_1.readUnsignedWord();
	int i1 = stream_1.readUnsignedByte();
	int j1 = myWidth * myHeight;
	myPixels = new int[j1];
	if(i1 == 0)
	{
		for(int k1 = 0; k1 &lt; j1; k1++)
			myPixels[k1] = ai[stream.readUnsignedByte()];
		setTransparency(255,0,255);
		return;
	}
	if(i1 == 1)
	{
		for(int l1 = 0; l1 &lt; myWidth; l1++)
		{
			for(int i2 = 0; i2 &lt; myHeight; i2++)
				myPixels[l1 + i2 * myWidth] = ai[stream.readUnsignedByte()];
		}

	}
	setTransparency(255,0,255);
}

public void method343()
{
	DrawingArea.initDrawingArea(myHeight, myWidth, myPixels);
}

public void method344(int i, int j, int k)
{
	for(int i1 = 0; i1 &lt; myPixels.length; i1++)
	{
		int j1 = myPixels[i1];
		if(j1 != 0)
		{
			int k1 = j1 &gt;&gt; 16 &amp; 0xff;
			k1 += i;
			if(k1 &lt; 1)
				k1 = 1;
			else
			if(k1 &gt; 255)
				k1 = 255;
			int l1 = j1 &gt;&gt; 8 &amp; 0xff;
			l1 += j;
			if(l1 &lt; 1)
				l1 = 1;
			else
			if(l1 &gt; 255)
				l1 = 255;
			int i2 = j1 &amp; 0xff;
			i2 += k;
			if(i2 &lt; 1)
				i2 = 1;
			else
			if(i2 &gt; 255)
				i2 = 255;
			myPixels[i1] = (k1 &lt;&lt; 16) + (l1 &lt;&lt; 8) + i2;
		}
	}

}

public void method345()
{
	int ai[] = new int[anInt1444 * anInt1445];
	for(int j = 0; j &lt; myHeight; j++)
	{
		System.arraycopy(myPixels, j * myWidth, ai, j + anInt1443 * anInt1444 + anInt1442, myWidth);
	}

	myPixels = ai;
	myWidth = anInt1444;
	myHeight = anInt1445;
	anInt1442 = 0;
	anInt1443 = 0;
}

public void method346(int i, int j)
{
	i += anInt1442;
	j += anInt1443;
	int l = i + j * DrawingArea.width;
	int i1 = 0;
	int j1 = myHeight;
	int k1 = myWidth;
	int l1 = DrawingArea.width - k1;
	int i2 = 0;
	if(j &lt; DrawingArea.topY)
	{
		int j2 = DrawingArea.topY - j;
		j1 -= j2;
		j = DrawingArea.topY;
		i1 += j2 * k1;
		l += j2 * DrawingArea.width;
	}
	if(j + j1 &gt; DrawingArea.bottomY)
		j1 -= (j + j1) - DrawingArea.bottomY;
	if(i &lt; DrawingArea.topX)
	{
		int k2 = DrawingArea.topX - i;
		k1 -= k2;
		i = DrawingArea.topX;
		i1 += k2;
		l += k2;
		i2 += k2;
		l1 += k2;
	}
	if(i + k1 &gt; DrawingArea.bottomX)
	{
		int l2 = (i + k1) - DrawingArea.bottomX;
		k1 -= l2;
		i2 += l2;
		l1 += l2;
	}
	if(k1 &lt;= 0 || j1 &lt;= 0)
	{
	} else
	{
		method347(l, k1, j1, i2, i1, l1, myPixels, DrawingArea.pixels);
	}
}

private void method347(int i, int j, int k, int l, int i1, int k1,
					   int ai[], int ai1[])
{
	int l1 = -(j &gt;&gt; 2);
	j = -(j &amp; 3);
	for(int i2 = -k; i2 &lt; 0; i2++)
	{
		for(int j2 = l1; j2 &lt; 0; j2++)
		{
			ai1[i++] = ai[i1++];
			ai1[i++] = ai[i1++];
			ai1[i++] = ai[i1++];
			ai1[i++] = ai[i1++];
		}

		for(int k2 = j; k2 &lt; 0; k2++)
			ai1[i++] = ai[i1++];

		i += k1;
		i1 += l;
	}
}

public void drawSprite1(int i, int j)
{
	int k = 128;//was parameter
	i += anInt1442;
	j += anInt1443;
	int i1 = i + j * DrawingArea.width;
	int j1 = 0;
	int k1 = myHeight;
	int l1 = myWidth;
	int i2 = DrawingArea.width - l1;
	int j2 = 0;
	if(j &lt; DrawingArea.topY)
	{
		int k2 = DrawingArea.topY - j;
		k1 -= k2;
		j = DrawingArea.topY;
		j1 += k2 * l1;
		i1 += k2 * DrawingArea.width;
	}
	if(j + k1 &gt; DrawingArea.bottomY)
		k1 -= (j + k1) - DrawingArea.bottomY;
	if(i &lt; DrawingArea.topX)
	{
		int l2 = DrawingArea.topX - i;
		l1 -= l2;
		i = DrawingArea.topX;
		j1 += l2;
		i1 += l2;
		j2 += l2;
		i2 += l2;
	}
	if(i + l1 &gt; DrawingArea.bottomX)
	{
		int i3 = (i + l1) - DrawingArea.bottomX;
		l1 -= i3;
		j2 += i3;
		i2 += i3;
	}
	if(!(l1 &lt;= 0 || k1 &lt;= 0))
	{
		method351(j1, l1, DrawingArea.pixels, myPixels, j2, k1, i2, k, i1);
	}
}

public void drawSprite(int i, int k)
{
	i += anInt1442;
	k += anInt1443;
	int l = i + k * DrawingArea.width;
	int i1 = 0;
	int j1 = myHeight;
	int k1 = myWidth;
	int l1 = DrawingArea.width - k1;
	int i2 = 0;
	if(k &lt; DrawingArea.topY)
	{
		int j2 = DrawingArea.topY - k;
		j1 -= j2;
		k = DrawingArea.topY;
		i1 += j2 * k1;
		l += j2 * DrawingArea.width;
	}
	if(k + j1 &gt; DrawingArea.bottomY)
		j1 -= (k + j1) - DrawingArea.bottomY;
	if(i &lt; DrawingArea.topX)
	{
		int k2 = DrawingArea.topX - i;
		k1 -= k2;
		i = DrawingArea.topX;
		i1 += k2;
		l += k2;
		i2 += k2;
		l1 += k2;
	}
	if(i + k1 &gt; DrawingArea.bottomX)
	{
		int l2 = (i + k1) - DrawingArea.bottomX;
		k1 -= l2;
		i2 += l2;
		l1 += l2;
	}
	if(!(k1 &lt;= 0 || j1 &lt;= 0))
	{
		method349(DrawingArea.pixels, myPixels, i1, l, k1, j1, l1, i2);
	}
}

public void drawSprite(int i, int k, int color) {
	int tempWidth = myWidth + 2;
	int tempHeight = myHeight + 2;
	int[] tempArray = new int[tempWidth * tempHeight];
	for(int x = 0; x &lt; myWidth; x++) {
		for(int y = 0; y &lt; myHeight; y++) {
			if(myPixels[x + y * myWidth] != 0)
				tempArray[(x + 1) + (y + 1) * tempWidth] = myPixels[x + y * myWidth];
		}
	}
	for(int x = 0; x &lt; tempWidth; x++) {
		for(int y = 0; y &lt; tempHeight; y++) {
			if(tempArray[(x) + (y) * tempWidth] == 0) {
				if(x &lt; tempWidth - 1 &amp;&amp; tempArray[(x + 1) + ((y) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x + 1) + ((y) * tempWidth)] != 0xffffff) {
					tempArray[(x) + (y) * tempWidth] = color;
				}
				if(x &gt; 0 &amp;&amp; tempArray[(x - 1) + ((y) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x - 1) + ((y) * tempWidth)] != 0xffffff) {
					tempArray[(x) + (y) * tempWidth] = color;
				}
				if(y &lt; tempHeight - 1 &amp;&amp; tempArray[(x) + ((y + 1) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x) + ((y + 1) * tempWidth)] != 0xffffff) {
					tempArray[(x) + (y) * tempWidth] = color;
				}
				if(y &gt; 0 &amp;&amp; tempArray[(x) + ((y - 1) * tempWidth)] &gt; 0 &amp;&amp; tempArray[(x) + ((y - 1) * tempWidth)] != 0xffffff) {
					tempArray[(x) + (y) * tempWidth] = color;
				}
			}
		}
	}
	i--;
	k--;
	i += anInt1442;
	k += anInt1443;
	int l = i + k * DrawingArea.width;
	int i1 = 0;
	int j1 = tempHeight;
	int k1 = tempWidth;
	int l1 = DrawingArea.width - k1;
	int i2 = 0;
	if (k &lt; DrawingArea.topY) {
		int j2 = DrawingArea.topY - k;
		j1 -= j2;
		k = DrawingArea.topY;
		i1 += j2 * k1;
		l += j2 * DrawingArea.width;
	}
	if (k + j1 &gt; DrawingArea.bottomY) {
		j1 -= (k + j1) - DrawingArea.bottomY;
	}
	if (i &lt; DrawingArea.topX) {
		int k2 = DrawingArea.topX - i;
		k1 -= k2;
		i = DrawingArea.topX;
		i1 += k2;
		l += k2;
		i2 += k2;
		l1 += k2;
	}
	if (i + k1 &gt; DrawingArea.bottomX) {
		int l2 = (i + k1) - DrawingArea.bottomX;
		k1 -= l2;
		i2 += l2;
		l1 += l2;
	}
	if (!(k1 &lt;= 0 || j1 &lt;= 0)) {
		method349(DrawingArea.pixels, tempArray, i1, l, k1, j1, l1, i2);
	}
}


public void drawSprite2(int i, int j) {
	int k = 225;//was parameter
	i += anInt1442;
	j += anInt1443;
	int i1 = i + j * DrawingArea.width;
	int j1 = 0;
	int k1 = myHeight;
	int l1 = myWidth;
	int i2 = DrawingArea.width - l1;
	int j2 = 0;
	if(j &lt; DrawingArea.topY) {
		int k2 = DrawingArea.topY - j;
		k1 -= k2;
		j = DrawingArea.topY;
		j1 += k2 * l1;
		i1 += k2 * DrawingArea.width;
	}
	if(j + k1 &gt; DrawingArea.bottomY)
		k1 -= (j + k1) - DrawingArea.bottomY;
	if(i &lt; DrawingArea.topX) {
		int l2 = DrawingArea.topX - i;
		l1 -= l2;
		i = DrawingArea.topX;
		j1 += l2;
		i1 += l2;
		j2 += l2;
		i2 += l2;
	}
	if(i + l1 &gt; DrawingArea.bottomX) {
		int i3 = (i + l1) - DrawingArea.bottomX;
		l1 -= i3;
		j2 += i3;
		i2 += i3;
	}
	if(!(l1 &lt;= 0 || k1 &lt;= 0)) {
		method351(j1, l1, DrawingArea.pixels, myPixels, j2, k1, i2, k, i1);
	}
}

private void method349(int ai[], int ai1[], int j, int k, int l, int i1, int j1, int k1) {
	int i;//was parameter
	int l1 = -(l &gt;&gt; 2);
	l = -(l &amp; 3);
	for(int i2 = -i1; i2 &lt; 0; i2++) {
		for(int j2 = l1; j2 &lt; 0; j2++) {
			i = ai1[j++];
			if(i != 0 &amp;&amp; i != -1)
			{
				ai[k++] = i;
			} else {
			k++;
		}
		i = ai1[j++];
		if(i != 0 &amp;&amp; i != -1) {
			ai[k++] = i;
		} else {
			k++;
		}
		i = ai1[j++];
		if(i != 0 &amp;&amp; i != -1) {
			ai[k++] = i;
		} else {
			k++;
		}
		i = ai1[j++];
		if(i != 0 &amp;&amp; i != -1) {
			ai[k++] = i;
		} else {
			k++;
		}
	}

	for(int k2 = l; k2 &lt; 0; k2++) {
		i = ai1[j++];
		if(i != 0 &amp;&amp; i != -1) {
			ai[k++] = i;
		} else {
			k++;
		}
	}
	k += j1;
	j += k1;
	}
}

private void method351(int i, int j, int ai[], int ai1[], int l, int i1,
					   int j1, int k1, int l1)
{
	int k;//was parameter
	int j2 = 256 - k1;
	for(int k2 = -i1; k2 &lt; 0; k2++)
	{
		for(int l2 = -j; l2 &lt; 0; l2++)
		{
			k = ai1[i++];
			if(k != 0)
			{
				int i3 = ai[l1];
				ai[l1++] = ((k &amp; 0xff00ff) * k1 + (i3 &amp; 0xff00ff) * j2 &amp; 0xff00ff00) + ((k &amp; 0xff00) * k1 + (i3 &amp; 0xff00) * j2 &amp; 0xff0000) &gt;&gt; 8;
			} else
			{
				l1++;
			}
		}

		l1 += j1;
		i += l;
	}
}

public void method352(int i, int j, int ai[], int k, int ai1[], int i1,
					  int j1, int k1, int l1, int i2)
{
	try
	{
		int j2 = -l1 / 2;
		int k2 = -i / 2;
		int l2 = (int)(Math.sin((double)j / 326.11000000000001D) * 65536D);
		int i3 = (int)(Math.cos((double)j / 326.11000000000001D) * 65536D);
		l2 = l2 * k &gt;&gt; 8;
		i3 = i3 * k &gt;&gt; 8;
		int j3 = (i2 &lt;&lt; 16) + (k2 * l2 + j2 * i3);
		int k3 = (i1 &lt;&lt; 16) + (k2 * i3 - j2 * l2);
		int l3 = k1 + j1 * DrawingArea.width;
		for(j1 = 0; j1 &lt; i; j1++)
		{
			int i4 = ai1[j1];
			int j4 = l3 + i4;
			int k4 = j3 + i3 * i4;
			int l4 = k3 - l2 * i4;
			for(k1 = -ai[j1]; k1 &lt; 0; k1++)
			{
				DrawingArea.pixels[j4++] = myPixels[(k4 &gt;&gt; 16) + (l4 &gt;&gt; 16) * myWidth];
				k4 += i3;
				l4 -= l2;
			}

			j3 += l2;
			k3 += i3;
			l3 += DrawingArea.width;
		}

	}
	catch(Exception _ex)
	{
	}
}

public void method353(int i,
					  double d, int l1)
{
	//all of the following were parameters
	int j = 15;
	int k = 20;
	int l = 15;
	int j1 = 256;
	int k1 = 20;
	//all of the previous were parameters
	try
	{
		int i2 = -k / 2;
		int j2 = -k1 / 2;
		int k2 = (int)(Math.sin(d) * 65536D);
		int l2 = (int)(Math.cos(d) * 65536D);
		k2 = k2 * j1 &gt;&gt; 8;
		l2 = l2 * j1 &gt;&gt; 8;
		int i3 = (l &lt;&lt; 16) + (j2 * k2 + i2 * l2);
		int j3 = (j &lt;&lt; 16) + (j2 * l2 - i2 * k2);
		int k3 = l1 + i * DrawingArea.width;
		for(i = 0; i &lt; k1; i++)
		{
			int l3 = k3;
			int i4 = i3;
			int j4 = j3;
			for(l1 = -k; l1 &lt; 0; l1++)
			{
				int k4 = myPixels[(i4 &gt;&gt; 16) + (j4 &gt;&gt; 16) * myWidth];
				if(k4 != 0)
					DrawingArea.pixels[l3++] = k4;
				else
					l3++;
				i4 += l2;
				j4 -= k2;
			}

			i3 += k2;
			j3 += l2;
			k3 += DrawingArea.width;
		}

	}
	catch(Exception _ex)
	{
	}
}

public void method354(Background background, int i, int j)
{
	j += anInt1442;
	i += anInt1443;
	int k = j + i * DrawingArea.width;
	int l = 0;
	int i1 = myHeight;
	int j1 = myWidth;
	int k1 = DrawingArea.width - j1;
	int l1 = 0;
	if(i &lt; DrawingArea.topY)
	{
		int i2 = DrawingArea.topY - i;
		i1 -= i2;
		i = DrawingArea.topY;
		l += i2 * j1;
		k += i2 * DrawingArea.width;
	}
	if(i + i1 &gt; DrawingArea.bottomY)
		i1 -= (i + i1) - DrawingArea.bottomY;
	if(j &lt; DrawingArea.topX)
	{
		int j2 = DrawingArea.topX - j;
		j1 -= j2;
		j = DrawingArea.topX;
		l += j2;
		k += j2;
		l1 += j2;
		k1 += j2;
	}
	if(j + j1 &gt; DrawingArea.bottomX)
	{
		int k2 = (j + j1) - DrawingArea.bottomX;
		j1 -= k2;
		l1 += k2;
		k1 += k2;
	}
	if(!(j1 &lt;= 0 || i1 &lt;= 0))
	{
		method355(myPixels, j1, background.aByteArray1450, i1, DrawingArea.pixels, 0, k1, k, l1, l);
	}
}

private void method355(int ai[], int i, byte abyte0[], int j, int ai1[], int k,
					   int l, int i1, int j1, int k1)
{
	int l1 = -(i &gt;&gt; 2);
	i = -(i &amp; 3);
	for(int j2 = -j; j2 &lt; 0; j2++)
	{
		for(int k2 = l1; k2 &lt; 0; k2++)
		{
			k = ai[k1++];
			if(k != 0 &amp;&amp; abyte0[i1] == 0)
				ai1[i1++] = k;
			else
				i1++;
			k = ai[k1++];
			if(k != 0 &amp;&amp; abyte0[i1] == 0)
				ai1[i1++] = k;
			else
				i1++;
			k = ai[k1++];
			if(k != 0 &amp;&amp; abyte0[i1] == 0)
				ai1[i1++] = k;
			else
				i1++;
			k = ai[k1++];
			if(k != 0 &amp;&amp; abyte0[i1] == 0)
				ai1[i1++] = k;
			else
				i1++;
		}

		for(int l2 = i; l2 &lt; 0; l2++)
		{
			k = ai[k1++];
			if(k != 0 &amp;&amp; abyte0[i1] == 0)
				ai1[i1++] = k;
			else
				i1++;
		}

		i1 += l;
		k1 += j1;
	}

}

public int myPixels[];
public int myWidth;
public int myHeight;
private int anInt1442;
private int anInt1443;
public int anInt1444;
public int anInt1445;
</code></pre>
<p>}<br>
[/code]<br>
I named it mopar.jpg both in my sprites class and my sprites folder with the correct demensions<br>
this is the error I am receiving</p>
<pre><code class="lang-auto"></code></pre>
<p>Can someone tell me what I’m doing wrong?<br>
Possible questions that I will answer now</p>
<ol>
<li>Yes my cache is downloading correctly</li>
<li>Yes it’s unzipping my cache that i zipped.</li>
<li>My cache is zipped no problems with it at all</li>
<li>my image is named mopar.jpg inside my sprites folder as the directory says.</li>
</ol>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/changing-background-pi/518716/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/changing-background-pi/518716/1</link>
        <pubDate>Wed, 08 May 2013 08:07:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-518716-1</guid>
        <source url="https://forum.moparisthebest.com/t/changing-background-pi/518716.rss">Changing Background pi</source>
      </item>
  </channel>
</rss>
