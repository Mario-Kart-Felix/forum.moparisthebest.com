<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Object Oriented Commands</title>
    <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310</link>
    <description>[size=14pt][b]Object Oriented Commands[/b][/size]


[b][u]Intro:[/u][/b]

To those of you who don&#39;t know me, My name is Meiscooldude, I&#39;m an old Moparscaper, been around for a while now. I&#39;m a Client 317 Die-Hard. You&#39;ll see me online from time to time, but its usually months apart. My MSN is Meiscooldude@gmail.com, feel free to message me for help, or just to say whats up. Thats enough about me, let me tell you what we are doing today.

Today I will introduce a new way to do Commands, [u]an[/u] Object Oriented Way.


[u][b]What we will be learning about today :
[/b][/u]
[i]Interfaces
Hash Tables
Regular Expressions
Misc. Keywords
Much More...[/i]


[u][b]Todays Goal:[/b][/u]

We are going to reduce the method &#39;customCommand(String command)&#39; to [b]two[/b] lines of code. Impossible you say? I think not!


[u][b]Regular Expressions[/b][/u]

[b]Definition:[/b] A regular expression (regex or regexp for short) is a special text string for describing a search pattern. You can think of regular expressions as wildcards on steroids. (Source: [url=http://www.regular-expressions.info/]http://www.regular-expressions.info/[/url] &lt;-- no seriously, have a look)

Commands normally come in a String like this &quot;yell hello world!&quot; or &quot;kick Meiscooldude&quot;, to check which command the player is trying to activate, you have to do something like String.startsWith(&quot;yell&quot;), and then call the subString method, and it just gets hairier from there. Well, we are going to solve this confusing mess by using [i]Regular Expressions[/i] using String&#39;s split(String regex) method. 

String&#39;s split(String regex) method will take a knife and split the String making it into a String Array (String[]) anywhere there is a match with the provided regex. This is made usefull if we standardize the way commands are inputted.

I want commands to put put in like so:

::CommandName [Parameter] [Parameter] [Parameter] ext...

(example: ::yell [Hello World!])

And when I call split, I want it to return a String array with the command name at index 0, and the Parameters in order after that, each its own String. Well, that is the easiest thing in the world using Regular Expressions! The solution is ... ( \[)|(\] )|\[|\]   &lt;---Parse that at [url=http://regexp.resource.googlepages.com/analyzer.html]http://regexp.resource.googlepages.com/analyzer.html[/url] to see exactly what it means (epic tool btw)

[code]String command = &quot;yell [Hello World!]&quot;;
String strArray[] = command.split(&quot;( \\[)|(\\] )|\\[|\\]&quot;);
for(String s : strArray)
    System.out.println(s);[/code]

Output:

[code]yell
Hello World![/code]

What the regex is doing, is its searching for a &quot; [&quot;, &quot;[&quot;, &quot;]&quot;, or a &quot;] &quot;, removing them, and splitting the String right where the occurrence was. Completely eliminating the need for confusing substring methods, its all done for us in one line of code! (Yes this does elliminate the ability to use [ or ] in any names, messages, commands, ext... but, they are rarely used, so who cares!)


[u][b]Hash Tables[/b][/u]

What in the world is a Hash!? Well, I really like Wikipedia&#39;s definition:

[b]Definition:[/b] A hash function is any well-defined procedure or mathematical function which converts a large, possibly variable-sized amount of data into a small datum, usually a single integer that may serve as an index into an array. (Source: http://en.wikipedia.org/wiki/Hash_function &lt;--- Once again, go to the site!)

Wikipedia explains how hash tables work fairly well, so have a look there if you want more information.

What a joy it would be for the programmer of a RSPS if he could assume that everyone knew that ::3 meant ::yell, and ::5 meant  ::coins, and ::29 meant ::starter, that would mean all he would have to do is make his whole command method a large switch case making the way he determines which command is which super freaking fast! No more large if - else blocks, with String comparisons, saving the system a lot of memory, and the Garbage collector a lot time. But alas, people are not that smart, so we have to use descriptive keys, such as ::coins, ::yell, or ::starter. But, what if there was a way, to make &#39;coins&#39;, or &#39;yell, or even &#39;starter&#39; your index? Wait! there is a way! Its called Hashing! 
 

[u][b]Starting to Code![/b][/u]


Now that we know a little bit more about Regex and Hashtables we can start Coding!

And we are going to start by doing something no other tutorial ever asks you to do, [u]Create a new file![/u] Call it Commands.java.

Lets go ahead and create a Commands Class inside of our Commands.java file, like so:

[code]
import java.util.HashMap;

public class Commands
{

}[/code]

Notice how I am importing the HashMap class from java.util, we will need this later, as the reason I quickly went over hash tables.

Well, I said I would do Polymorphism and Interfaces, so, I shall keep my word.

Lets create an interface right after the Commands class, name is Command, and lets create a YellCommand class that implements that Command Interface.

[code]import java.util.HashMap;

public class Commands
{

}
interface Command
{

}
class YellCommand implements Command
{

}[/code]

Now, we are going to be putting &#39;Commands&#39; into the hashtable later, so we want everything that [b]is a[/b] Command, to have a getKey() method that returns a String. Also, we want to be able to execute these Commands, so lets add a method of type void that will execute the command, lets call it execute(). The execute method will need to take some parameters, it needs to know WHO is calling the command, what other parameters it has, Since not every command has the same amount of parameters, we must use a generic form of passing params, like an array of Strings.

So, we are going to use the heading of (client c, String args[]) for our execute method.

But, since the YellCommand class [b]is a[/b] Command, it must implement all the methods that Command has. So, we have something like this.

[code]interface Command
{
	void execute(client c, String args[]);
	String getKey();
}
class YellCommand implements Command
{
	public void execute(client c, String args[])
	{

	}
	public String getKey()
	{
		return null;
	}
}[/code]

That will work for right now, keep that code above in the back of your head, you will need it for later. But for now, lets start working on implementing the Commands Class we created earlier. We left it as blank as it gets, so lets add a method called execute that returns boolean, which takes a client, and a String. The client will be the player executing the command, the String will be what they entered for the command. Lets also declare and initialize a Regex String, make it a constant, and create a HashMap (Hashtable), go ahead and initialize the HashMap in the Static Initialization Block, these are nifty little things, weird syntax tho...

So, here we go:

[code]
import java.util.HashMap;

public class Commands
{
	//true if command executed correctly, false otherwise
	public static boolean execute (client c, String cmdStr)
	{
		return false;
	}

	private static final String REGEX = &quot;( \\[)|(\\] )|\\[|\\]&quot;;
	private static HashMap m_commands;

	static
	{
		m_commands = new HashMap();
	}
}
[/code]

Something you have to be careful of is to make sure your not calling m_commands BEFORE your declare it, i know it sounds obvious. but you usually don&#39;t run into that error with static variables, but its still possible.

Now, what we are going to do, is we are going to put our YellCommand object into our HashMap. Thats why we added the getKey() method, so, lets go implement that real quick like...

[b]Inside YellCommand Class[/b]
[code]
...
	public String getKey()
	{
		return KEY;
	}

	public final String KEY = &quot;yell&quot;;
...
[/code]

The reason I chose &#39;yell&#39; as the key is because that is the actually command name they would type ::yell &lt;-- look, do you see it ? Pretty obvious eh? Now that we actually have a key to use in our hash we can add it to our hash table!

[b]Inside Commands Class (static init block)[/b]
[code]...
	static
	{
		m_commands = new HashMap();
		
		//creates a new Command
		Command yell = new YellCommand();
		
		//adds a command to the hashmap
		m_commands.put(yell.getKey(), yell);
	}
...[/code]


Now lets put that Regex expression to some use! Lets go to the execute boolean of the Commands class, We want to split the cmdStr (command String), given to us by the player. and then we want to get the first String in the array, and set itself to itself but in lower case, this will be equivalent to equalsIgnoreCase(String s). Alright, so lets put that in there...


[b]Inside the Commands Class (execute method)[/b]
[code]
...

	public static boolean execute (client c, String cmdStr)
	{
		//will split w/ the regex we declared earlier
		String[] args = cmdStr.split(REGEX);

		//sets the first case to all lower case
		args[0] = args[0].toLowerCase();
	}

...
[/code]


Good, now we need to &#39;get&#39; the correct Command that corresponds to the key (args[0]), we do that very simply by doing this:

[b]Cont. of Commands Class&#39;s execute method[/b]
[code]

...
		//sets the first case to all lower case
		args[0] = args[0].toLowerCase();

		Command cmd = m_commands.get(args[0]);
...
[/code]

Now, that will work, compile and run! your completely done! Read the rest of this tutorial by your free will!

If you did actually just attempt to compile your program, you should have gotten a nice error complaining that if found an object, but required a Command. This is when we have to do something called casting, which basically does a conversion (IFF a conversion is possible).

[code]		Command cmd = (Command) m_commands.get(args[0]);[/code]

That code will convert the Object to a Command Object. Successfully solving that problem. We need to make sure that it actually casted (and that the command exists in the table), so lets add a few lines for that, and then we can go ahead a call the command itself and get some work done!, (then return true).

[b]Cont. of Commands Class&#39;s execute method[/b]
[code]...

		Command cmd = (Command) m_commands.get(args[0]);

		if (cmd == null)
			return false;

		cmd.execute (c, args);

		return true;

	} //end of execute method

...[/code]

Now! before you think your all done, we need to go back to the YellCommand and make it actually do something!

Inside the YellCommand Class&#39;s execute method, simply make it do this:

[code]	public void execute(client c, String args[])
	{

		c.yell (args[1]);
		
	}[/code]

And there you go, you should have command completely Object Oriented w/ the use of Regex and Hashing!!! Aren&#39;t you excited!!! NOT!!!

You almost completely forgot about the customCommand(String command) method in the client.java file!
Well, silly, this won&#39;t work if thats not set up to send its commands to it!

So, replace your ENTIRE customCommand(String command) method with this one:

[code]	private void customCommand(String command)
	{
		Commands.execute(this, command);
	}[/code]

If your using an IDE you may notice that &#39;this&#39; is a keyword, that basically returns the object that you are currently in.

Now, for 100% for real, you are set up to use Object Oriented Commands!!!

Compile and run!

[hr]
[center][size=15pt][u][b]FINISHED[/b][/u][/size][/center]
[hr]

[b]READ ME:[/b]

I would much prefer that you use the Commands.java I have already made, it comes with a few extra features and seriously reduces the chances of something bad happening. Plus, I have a few standard commands already defined. The tut is so you can under stand what exactly is going on and how it works.

Also, if you use mine instead of make your own, use this customCommand method instead of the on in the Tut:

[code]	private void customCommand(String command)
	{
		if (!Commands.execute(this, command))
	  		sM(&quot;Error with command.&quot;);
	}[/code]

Remember, anytime you add a new command to add it to the Hashtable!

Also that commands w/ this system are defined as follows:

::CommandName [Parameter] [Parameter] [Parameter] ext...</description>
    
    <lastBuildDate>Fri, 20 Aug 2010 23:48:51 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@john55223v2 john55223v2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/john55223v2">@john55223v2</a> wrote:</p>
          <blockquote>
              <p>good tutorial, y on last page? well ill bump it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/15</link>
        <pubDate>Fri, 20 Aug 2010 23:48:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-15</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jGod jGod]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jgod">@jGod</a> wrote:</p>
          <blockquote>
              <p>[quote=“meiscooldude, post:13, topic:266310”][quote author=jGod link=topic=351611.msg2702566#msg2702566 date=1236721602]<br>
Simply the fact that it’s redundant.<br>
[/quote]</p>
<p>How is this redundant? The point of this tutorial is to help teach object oriented subjects, is that redundant? My friend, don’t get me wrong, i respect your opinion, I just question its logic.[/quote]</p>
<p>Although the overall goal of the the tutorial is redundant, I’m glad you explained a few new concepts such as hashmaps to them.</p>
<p>Just one example of redundancy …</p>
<p><code>private static final String REGEX = "( \\[)|(\\] )|\\[|\\]";
String[] args = cmdStr.split(REGEX);</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/14</link>
        <pubDate>Wed, 11 Mar 2009 02:59:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-14</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="12" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jgod/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jGod:</div>
<blockquote>
<p>Simply the fact that it’s redundant.</p>
</blockquote>
</aside>
<p>How is this redundant? The point of this tutorial is to help teach object oriented subjects, is that redundant? My friend, don’t get me wrong, i respect your opinion, I just question its logic.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/13</link>
        <pubDate>Wed, 11 Mar 2009 00:07:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-13</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jGod jGod]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jgod">@jGod</a> wrote:</p>
          <blockquote>
              <p>Simply the fact that it’s redundant.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/12</link>
        <pubDate>Tue, 10 Mar 2009 21:46:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-12</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="7" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jgod/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jGod:</div>
<blockquote>
<p>By someone who’s blind, yes.</p>
</blockquote>
</aside>
<p>As the above member has mentioned;</p>
<p>Do not criticize this tutorial, if you have no reason to back up your accusation.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/11</link>
        <pubDate>Tue, 10 Mar 2009 21:02:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-11</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="9" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jgod/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jGod:</div>
<blockquote>
<p>To reply to you, …</p>
</blockquote>
</aside>
<p>I believe everyone has a right to their opinion, and I believe that since you also have that right, it is your responsibility to not criticize others on their opinions.</p>
<p>I think you can find it easy to understand why I am skeptical about your logic. Being as your labeled as a ‘Member’ and only have 26 reputation points, even though rep means nothing.</p>
<p>Now, I agree, this very well may not be the best tutorial on here. But, if I may, ask why you think this is a bad tutorial. As that is the impression you are giving me.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/10</link>
        <pubDate>Tue, 10 Mar 2009 20:59:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-10</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jGod jGod]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jgod">@jGod</a> wrote:</p>
          <blockquote>
              <p>[quote=“si force, post:8, topic:266310”]This is a very good tutorial, i had to read it over a few times to understand all the concepts, but the end result is worth it,</p>
<p>Very nice ;)[/quote]</p>
<p>To reply to you, …</p>
<aside class="quote no-group" data-post="6" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jc22493/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jc22493:</div>
<blockquote>
<p>Yeah, I can see; this can be seen as the best tutorial on here.</p>
</blockquote>
</aside>
<aside class="quote no-group quote-modified" data-post="7" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/jgod/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> jGod:</div>
<blockquote>
<p>By someone who’s blind, yes.</p>
</blockquote>
</aside>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/9</link>
        <pubDate>Tue, 10 Mar 2009 20:22:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-9</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@si_force Si Force]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/si_force">@si_force</a> wrote:</p>
          <blockquote>
              <p>This is a very good tutorial, i had to read it over a few times to understand all the concepts, but the end result is worth it,</p>
<p>Very nice <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/8</link>
        <pubDate>Tue, 10 Mar 2009 19:41:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-8</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jGod jGod]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jgod">@jGod</a> wrote:</p>
          <blockquote>
              <p>By someone who’s blind, yes.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/7</link>
        <pubDate>Tue, 10 Mar 2009 03:42:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-7</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jc22493 Jc22493]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jc22493">@jc22493</a> wrote:</p>
          <blockquote>
              <p>Yeah, I can see; this can be seen as the best tutorial on here.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/6</link>
        <pubDate>Mon, 09 Mar 2009 16:49:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-6</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="2" data-topic="266310">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/darkning/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> Darkning:</div>
<blockquote>
<p>woah, nice![/quote][quote=“pure ess ftw, post:3, topic:266310”]well done <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"> it will teach alot of people things[/quote][quote=“jc22493, post:4, topic:266310”]Wow, this is pretty nice. Had to read it over a few times to get it. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
</blockquote>
</aside>
<p>Thanks, it took me a while to write…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/5</link>
        <pubDate>Mon, 09 Mar 2009 01:45:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-5</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@jc22493 Jc22493]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jc22493">@jc22493</a> wrote:</p>
          <blockquote>
              <p>Wow, this is pretty nice. Had to read it over a few times to get it. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/4</link>
        <pubDate>Sun, 08 Mar 2009 13:40:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-4</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@pure_ess_ftw pure ess ftw]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure_ess_ftw">@pure_ess_ftw</a> wrote:</p>
          <blockquote>
              <p>well done <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"> it will teach alot of people things</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/3</link>
        <pubDate>Sun, 08 Mar 2009 13:16:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-3</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@Darkning Darkning]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/darkning">@Darkning</a> wrote:</p>
          <blockquote>
              <p>woah, nice!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/2</link>
        <pubDate>Sun, 08 Mar 2009 04:04:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-2</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
      <item>
        <title>Object Oriented Commands</title>
        <dc:creator><![CDATA[@meiscooldude meiscooldude]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/meiscooldude">@meiscooldude</a> wrote:</p>
          <blockquote>
              <p>[size=14pt]<span class="bbcode-b">Object Oriented Commands</span>[/size]</p>
<p><span class="bbcode-b"><span class="bbcode-u">Intro:</span></span></p>
<p>To those of you who don’t know me, My name is Meiscooldude, I’m an old Moparscaper, been around for a while now. I’m a Client 317 Die-Hard. You’ll see me online from time to time, but its usually months apart. My MSN is <a href="mailto:Meiscooldude@gmail.com">Meiscooldude@gmail.com</a>, feel free to message me for help, or just to say whats up. Thats enough about me, let me tell you what we are doing today.</p>
<p>Today I will introduce a new way to do Commands, <span class="bbcode-u">an</span> Object Oriented Way.</p>
<p><span class="bbcode-u"><span class="bbcode-b">What we will be learning about today :<br>
</span></span><br>
<span class="bbcode-i">Interfaces<br>
Hash Tables<br>
Regular Expressions<br>
Misc. Keywords<br>
Much More…</span></p>
<p><span class="bbcode-u"><span class="bbcode-b">Todays Goal:</span></span></p>
<p>We are going to reduce the method ‘customCommand(String command)’ to <span class="bbcode-b">two</span> lines of code. Impossible you say? I think not!</p>
<p><span class="bbcode-u"><span class="bbcode-b">Regular Expressions</span></span></p>
<p><span class="bbcode-b">Definition:</span> A regular expression (regex or regexp for short) is a special text string for describing a search pattern. You can think of regular expressions as wildcards on steroids. (Source: <a href="http://www.regular-expressions.info/" data-bbcode="true" rel="nofollow noopener">http://www.regular-expressions.info/</a> &lt;-- no seriously, have a look)</p>
<p>Commands normally come in a String like this “yell hello world!” or “kick Meiscooldude”, to check which command the player is trying to activate, you have to do something like String.startsWith(“yell”), and then call the subString method, and it just gets hairier from there. Well, we are going to solve this confusing mess by using <span class="bbcode-i">Regular Expressions</span> using String’s split(String regex) method.</p>
<p>String’s split(String regex) method will take a knife and split the String making it into a String Array (String[]) anywhere there is a match with the provided regex. This is made usefull if we standardize the way commands are inputted.</p>
<p>I want commands to put put in like so:</p>
<p>::CommandName [Parameter] [Parameter] [Parameter] ext…</p>
<p>(example: ::yell [Hello World!])</p>
<p>And when I call split, I want it to return a String array with the command name at index 0, and the Parameters in order after that, each its own String. Well, that is the easiest thing in the world using Regular Expressions! The solution is … ( [)|(] )|[|]   &lt;—Parse that at <a href="http://regexp.resource.googlepages.com/analyzer.html" data-bbcode="true" rel="nofollow noopener">http://regexp.resource.googlepages.com/analyzer.html</a> to see exactly what it means (epic tool btw)</p>
<p><code>String command = "yell [Hello World!]";
String strArray[] = command.split("( \\[)|(\\] )|\\[|\\]");
for(String s : strArray)
    System.out.println(s);</code></p>
<p>Output:</p>
<p><code>yell
Hello World!</code></p>
<p>What the regex is doing, is its searching for a " [", “[”, “]”, or a "] ", removing them, and splitting the String right where the occurrence was. Completely eliminating the need for confusing substring methods, its all done for us in one line of code! (Yes this does elliminate the ability to use [ or ] in any names, messages, commands, ext… but, they are rarely used, so who cares!)</p>
<p><span class="bbcode-u"><span class="bbcode-b">Hash Tables</span></span></p>
<p>What in the world is a Hash!? Well, I really like Wikipedia’s definition:</p>
<p><span class="bbcode-b">Definition:</span> A hash function is any well-defined procedure or mathematical function which converts a large, possibly variable-sized amount of data into a small datum, usually a single integer that may serve as an index into an array. (Source: <a href="http://en.wikipedia.org/wiki/Hash_function" rel="nofollow noopener">http://en.wikipedia.org/wiki/Hash_function</a> &lt;— Once again, go to the site!)</p>
<p>Wikipedia explains how hash tables work fairly well, so have a look there if you want more information.</p>
<p>What a joy it would be for the programmer of a RSPS if he could assume that everyone knew that ::3 meant ::yell, and ::5 meant  ::coins, and ::29 meant ::starter, that would mean all he would have to do is make his whole command method a large switch case making the way he determines which command is which super freaking fast! No more large if - else blocks, with String comparisons, saving the system a lot of memory, and the Garbage collector a lot time. But alas, people are not that smart, so we have to use descriptive keys, such as ::coins, ::yell, or ::starter. But, what if there was a way, to make ‘coins’, or 'yell, or even ‘starter’ your index? Wait! there is a way! Its called Hashing!</p>
<p><span class="bbcode-u"><span class="bbcode-b">Starting to Code!</span></span></p>
<p>Now that we know a little bit more about Regex and Hashtables we can start Coding!</p>
<p>And we are going to start by doing something no other tutorial ever asks you to do, <span class="bbcode-u">Create a new file!</span> Call it Commands.java.</p>
<p>Lets go ahead and create a Commands Class inside of our Commands.java file, like so:</p>
<p>[code]<br>
import java.util.HashMap;</p>
<p>public class Commands<br>
{</p>
<p>}[/code]</p>
<p>Notice how I am importing the HashMap class from java.util, we will need this later, as the reason I quickly went over hash tables.</p>
<p>Well, I said I would do Polymorphism and Interfaces, so, I shall keep my word.</p>
<p>Lets create an interface right after the Commands class, name is Command, and lets create a YellCommand class that implements that Command Interface.</p>
<p>[code]import java.util.HashMap;</p>
<p>public class Commands<br>
{</p>
<p>}<br>
interface Command<br>
{</p>
<p>}<br>
class YellCommand implements Command<br>
{</p>
<p>}[/code]</p>
<p>Now, we are going to be putting ‘Commands’ into the hashtable later, so we want everything that <span class="bbcode-b">is a</span> Command, to have a getKey() method that returns a String. Also, we want to be able to execute these Commands, so lets add a method of type void that will execute the command, lets call it execute(). The execute method will need to take some parameters, it needs to know WHO is calling the command, what other parameters it has, Since not every command has the same amount of parameters, we must use a generic form of passing params, like an array of Strings.</p>
<p>So, we are going to use the heading of (client c, String args[]) for our execute method.</p>
<p>But, since the YellCommand class <span class="bbcode-b">is a</span> Command, it must implement all the methods that Command has. So, we have something like this.</p>
<p>[code]interface Command<br>
{<br>
void execute(client c, String args[]);<br>
String getKey();<br>
}<br>
class YellCommand implements Command<br>
{<br>
public void execute(client c, String args[])<br>
{</p>
<pre><code>}
public String getKey()
{
	return null;
}
</code></pre>
<p>}[/code]</p>
<p>That will work for right now, keep that code above in the back of your head, you will need it for later. But for now, lets start working on implementing the Commands Class we created earlier. We left it as blank as it gets, so lets add a method called execute that returns boolean, which takes a client, and a String. The client will be the player executing the command, the String will be what they entered for the command. Lets also declare and initialize a Regex String, make it a constant, and create a HashMap (Hashtable), go ahead and initialize the HashMap in the Static Initialization Block, these are nifty little things, weird syntax tho…</p>
<p>So, here we go:</p>
<pre><code class="lang-auto">import java.util.HashMap;

public class Commands
{
	//true if command executed correctly, false otherwise
	public static boolean execute (client c, String cmdStr)
	{
		return false;
	}

	private static final String REGEX = "( \\[)|(\\] )|\\[|\\]";
	private static HashMap m_commands;

	static
	{
		m_commands = new HashMap();
	}
}</code></pre>
<p>Something you have to be careful of is to make sure your not calling m_commands BEFORE your declare it, i know it sounds obvious. but you usually don’t run into that error with static variables, but its still possible.</p>
<p>Now, what we are going to do, is we are going to put our YellCommand object into our HashMap. Thats why we added the getKey() method, so, lets go implement that real quick like…</p>
<p><span class="bbcode-b">Inside YellCommand Class</span></p>
<pre><code class="lang-auto">...
	public String getKey()
	{
		return KEY;
	}

	public final String KEY = "yell";
...</code></pre>
<p>The reason I chose ‘yell’ as the key is because that is the actually command name they would type ::yell &lt;-- look, do you see it ? Pretty obvious eh? Now that we actually have a key to use in our hash we can add it to our hash table!</p>
<p><span class="bbcode-b">Inside Commands Class (static init block)</span></p>
<p>[code]…<br>
static<br>
{<br>
m_commands = new HashMap();</p>
<pre><code>	//creates a new Command
	Command yell = new YellCommand();
	
	//adds a command to the hashmap
	m_commands.put(yell.getKey(), yell);
}
</code></pre>
<p>…[/code]</p>
<p>Now lets put that Regex expression to some use! Lets go to the execute boolean of the Commands class, We want to split the cmdStr (command String), given to us by the player. and then we want to get the first String in the array, and set itself to itself but in lower case, this will be equivalent to equalsIgnoreCase(String s). Alright, so lets put that in there…</p>
<p><span class="bbcode-b">Inside the Commands Class (execute method)</span></p>
<pre><code class="lang-auto">...

	public static boolean execute (client c, String cmdStr)
	{
		//will split w/ the regex we declared earlier
		String[] args = cmdStr.split(REGEX);

		//sets the first case to all lower case
		args[0] = args[0].toLowerCase();
	}

...</code></pre>
<p>Good, now we need to ‘get’ the correct Command that corresponds to the key (args[0]), we do that very simply by doing this:</p>
<p><span class="bbcode-b">Cont. of Commands Class’s execute method</span></p>
<pre><code class="lang-auto">
...
		//sets the first case to all lower case
		args[0] = args[0].toLowerCase();

		Command cmd = m_commands.get(args[0]);
...</code></pre>
<p>Now, that will work, compile and run! your completely done! Read the rest of this tutorial by your free will!</p>
<p>If you did actually just attempt to compile your program, you should have gotten a nice error complaining that if found an object, but required a Command. This is when we have to do something called casting, which basically does a conversion (IFF a conversion is possible).</p>
<pre><code class="lang-auto">		Command cmd = (Command) m_commands.get(args[0]);</code></pre>
<p>That code will convert the Object to a Command Object. Successfully solving that problem. We need to make sure that it actually casted (and that the command exists in the table), so lets add a few lines for that, and then we can go ahead a call the command itself and get some work done!, (then return true).</p>
<p><span class="bbcode-b">Cont. of Commands Class’s execute method</span></p>
<p>[code]…</p>
<pre><code>	Command cmd = (Command) m_commands.get(args[0]);

	if (cmd == null)
		return false;

	cmd.execute (c, args);

	return true;

} //end of execute method
</code></pre>
<p>…[/code]</p>
<p>Now! before you think your all done, we need to go back to the YellCommand and make it actually do something!</p>
<p>Inside the YellCommand Class’s execute method, simply make it do this:</p>
<p>[code]	public void execute(client c, String args[])<br>
{</p>
<pre><code>	c.yell (args[1]);
	
}[/code]
</code></pre>
<p>And there you go, you should have command completely Object Oriented w/ the use of Regex and Hashing!!! Aren’t you excited!!! NOT!!!</p>
<p>You almost completely forgot about the customCommand(String command) method in the client.java file!<br>
Well, silly, this won’t work if thats not set up to send its commands to it!</p>
<p>So, replace your ENTIRE customCommand(String command) method with this one:</p>
<p><code>	private void customCommand(String command)
	{
		Commands.execute(this, command);
	}</code></p>
<p>If your using an IDE you may notice that ‘this’ is a keyword, that basically returns the object that you are currently in.</p>
<p>Now, for 100% for real, you are set up to use Object Oriented Commands!!!</p>
<p>Compile and run!</p>
<p>[hr]<br>
[center][size=15pt]<span class="bbcode-u"><span class="bbcode-b">FINISHED</span></span>[/size][/center]<br>
[hr]</p>
<p><span class="bbcode-b">READ ME:</span></p>
<p>I would much prefer that you use the Commands.java I have already made, it comes with a few extra features and seriously reduces the chances of something bad happening. Plus, I have a few standard commands already defined. The tut is so you can under stand what exactly is going on and how it works.</p>
<p>Also, if you use mine instead of make your own, use this customCommand method instead of the on in the Tut:</p>
<p><code>	private void customCommand(String command)
	{
		if (!Commands.execute(this, command))
	  		sM("Error with command.");
	}</code></p>
<p>Remember, anytime you add a new command to add it to the Hashtable!</p>
<p>Also that commands w/ this system are defined as follows:</p>
<p>::CommandName [Parameter] [Parameter] [Parameter] ext…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/object-oriented-commands/266310/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/object-oriented-commands/266310/1</link>
        <pubDate>Sun, 08 Mar 2009 03:27:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-266310-1</guid>
        <source url="https://forum.moparisthebest.com/t/object-oriented-commands/266310.rss">Object Oriented Commands</source>
      </item>
  </channel>
</rss>
