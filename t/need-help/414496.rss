<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need help</title>
    <link>https://forum.moparisthebest.com/t/need-help/414496</link>
    <description>A guys Name ZeroScape made a 100% Cooking for Delta Without Loop
can someone explain me where are the code who&#39;s doing the loop without using while loop
[code]/** |------------------------------------------------------------------|
  * |          Cooking Handler by `ZeroScape from MoparScape           |
  * |                      Get newest version at                       |
  * |   http://www.moparisthebest.com/smf/index.php/topic,439768.0.html    |
  * |       This is 100% cooking (without loop) for your server        |
  * |                           VERSION 1.2                            |
  * |------------------------------------------------------------------|
  * | Notice! To change the XP-rate change the ExpRate variable below. |
  * |------------------------------------------------------------------|
  * |     Supporting: Shrimps, Tuna, Lobster, Swordfish and Sharks.    |
  * |          Can add more without too much Java experience.          |
  * |------------------------------------------------------------------|
  */
 
public class Cooking {
        /**
         * VARIABLES!
         */
        public static double Version = 1.2;
        public static int CookingEmote = 0x340;
        public static int ExpRate = 50;
        public static int GlovesId = 775;
        public static long actionInterval = 1250;
        public static long lastAction = System.currentTimeMillis();
        /**
         * MAIN COOKING ARRAY.
         */
        public static int[][] CookingArray = {
                {1, 30, 40, 45, 80}, // Cooking Level Needed
                {317, 359, 377, 371, 383}, // Raw Food Id
                {315, 361, 379, 373, 385}, // Cooked Food Id
                {323, 367, 381, 375, 387}, // Burnt Food Id
                {30, 100, 120, 140, 210}, // Experience * ExpRate
                {15, 65, 68, 86, 100}, // Noburn Level (Without Cooking Gauntlets)
                {15, 65, 74, 86, 94}, // Noburn Level (With Cooking Gauntlets)
        };
        /**
         * FOOD NAME ARRAY!
         */
        public static String[] FoodName = {&quot;shrimps&quot;, &quot;tuna&quot;, &quot;lobster&quot;, &quot;swordfish&quot;, &quot;shark&quot;};
        
        /**
         * CONGRATULATIONS METHOD!
         */
        public static void GratulationsMessage(int playerId, int newLevel) {
                client c = (client) server.playerHandler.players[playerId];
                int ActionType = 1;
                if (newLevel == 99)
                        ActionType = 2;
                if (ActionType == 2) {
                        sM(playerId, &quot;@red@You have achieved the highest possible level in this skill!&quot;);
                }
                sM(playerId, &quot;You&#39;ve just advanced a Cooking level! You have reached level &quot; + newLevel + &quot;.&quot;);
        }
        /**
         * SENDMESSAGE METHOD!
         */
        public static void sM(int playerId, String Text) {
                client c = (client) server.playerHandler.players[playerId];
                c.sM(Text);
        }
        /**
         * GIVE COOKING EXPERIENCE!
         */
        public static void AddExperience(int playerId, int Amount) {
                client c = (client) server.playerHandler.players[playerId];
                c.addSkillXP(Amount, 7);
        }
        /**
         * PRINT TO THE COMMAND PROMPT!
         */
        public static void Print(int playerId, String Text) {
                client c = (client) server.playerHandler.players[playerId];
                System.out.println(&quot;[Client-&quot; + playerId + &quot;-&quot; + c.playerName + &quot;]: &quot; + Text);
        }
        /**
         * REPLACE THE RAW FOOD WITH COOKED OR BURNT!
         */
        public static void CookFood(int playerId, int oldId, int newId) {
                client c = (client) server.playerHandler.players[playerId];
                c.deleteItem(oldId, 1);
                c.addItem(newId, 1);
        }
        /**
         * MAIN COOKING METHOD!
         */
        public static void Cooking(int playerId, int ArrayIndex) {
                client c = (client) server.playerHandler.players[playerId];
                /**
                 * ANTI-FLOOD!
                 */
                if (System.currentTimeMillis() - lastAction &lt; actionInterval)
                        return;
                /**
                 * SET COOKING BOOLEANS!
                 */
                boolean Burn = true;
                boolean Gloves = false;
                /**
                 * SET COOKING INTEGERS!
                 */
                int CookingLevel = c.playerLevel[c.playerCooking];
                int CookingNeeded = CookingArray[0][ArrayIndex];
                int RawId = CookingArray[1][ArrayIndex];
                int CookedId = CookingArray[2][ArrayIndex];
                int BurntId = CookingArray[3][ArrayIndex];
                int Experience = (CookingArray[4][ArrayIndex] * ExpRate);
                int Noburn = CookingArray[5][ArrayIndex];
                int Noburn2 = CookingArray[6][ArrayIndex];
                /**
                 * SET COOKING STRING!
                 */
                String FoodType = FoodName[ArrayIndex];
                /**
                 * ARE THE PLAYER CURRENTLY WEARING COOKING GLOVES?
                 */
                if (c.playerEquipment[9] == GlovesId)
                        Gloves = true;
                /**
                 * ARE YOU GONNA BURN THIS TIME.
                 */
                if ((Gloves &amp;&amp; (CookingLevel &gt;= Noburn2 || misc.random(5) &gt; 2)) || (!Gloves &amp;&amp; (CookingLevel &gt;= Noburn || misc.random(4) &gt; 2)))
                        Burn = false;
                /**
                 * CHECK IF THE PLAYER HAVE HIGH ENOUGH COOKING LEVEL!
                 */
                if (CookingLevel &gt;= CookingNeeded) {
                        c.setAnimation(CookingEmote);
                        lastAction = System.currentTimeMillis();
                        if (Burn) {
                        CookFood(playerId, RawId, BurntId);
                                sM(playerId, &quot;You accidently burned the &quot; + FoodType + &quot;.&quot;);
                        } else {
                                CookFood(playerId, RawId, CookedId);
                                sM(playerId, &quot;You successfully cooked the &quot; + FoodType + &quot;.&quot;);
                                AddExperience(playerId, Experience);
                                if (c.playerLevel[c.playerCooking] &gt; CookingLevel) {
                                        GratulationsMessage(playerId, c.playerLevel[c.playerCooking]);
                                }      
                        }
                } else {
                        sM(playerId, &quot;You need a Cooking level of &quot; + CookingNeeded + &quot; to cook &quot; + FoodType + &quot;.&quot;);
                }
        }
}[/code]
I think the code is on this void
[code]public static void Cooking(int playerId, int ArrayIndex) {

                client c = (client) server.playerHandler.players[playerId];
                if (System.currentTimeMillis() - lastAction &lt; actionInterval)
                        return;

                boolean Burn = true;
                boolean Gloves = false;
                int CookingLevel = c.playerLevel[c.playerCooking];
                int CookingNeeded = CookingArray[0][ArrayIndex];
                int RawId = CookingArray[1][ArrayIndex];
                int CookedId = CookingArray[2][ArrayIndex];
                int BurntId = CookingArray[3][ArrayIndex];
                int Experience = (CookingArray[4][ArrayIndex] * ExpRate);
                int Noburn = CookingArray[5][ArrayIndex];
                int Noburn2 = CookingArray[6][ArrayIndex];

                String FoodType = FoodName[ArrayIndex];

                if (c.playerEquipment[9] == GlovesId)
                        Gloves = true;
                if ((Gloves &amp;&amp; (CookingLevel &gt;= Noburn2 || misc.random(5) &gt; 2)) || (!Gloves &amp;&amp; (CookingLevel &gt;= Noburn || misc.random(4) &gt; 2)))
                        Burn = false;
                if (CookingLevel &gt;= CookingNeeded) {
                        c.setAnimation(CookingEmote);
                        lastAction = System.currentTimeMillis();
                        if (Burn) {
                        CookFood(playerId, RawId, BurntId);
                                sM(playerId, &quot;You accidently burned the &quot; + FoodType + &quot;.&quot;);
                        } else {
                                CookFood(playerId, RawId, CookedId);
                                sM(playerId, &quot;You successfully cooked the &quot; + FoodType + &quot;.&quot;);
                                AddExperience(playerId, Experience);
                                if (c.playerLevel[c.playerCooking] &gt; CookingLevel) {
                                        GratulationsMessage(playerId, c.playerLevel[c.playerCooking]);
                                }      
                        }
                } else {
                        sM(playerId, &quot;You need a Cooking level of &quot; + CookingNeeded + &quot; to cook &quot; + FoodType + &quot;.&quot;);
                }
        }[/code]

Thanks :)</description>
    
    <lastBuildDate>Mon, 12 Sep 2011 23:57:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-help/414496.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need help</title>
        <dc:creator><![CDATA[@wanttobecoders wanttobecoders]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/wanttobecoders">@wanttobecoders</a> wrote:</p>
          <blockquote>
              <p>A guys Name ZeroScape made a 100% Cooking for Delta Without Loop<br>
can someone explain me where are the code who’s doing the loop without using while loop</p>
<p>[code]/** |------------------------------------------------------------------|</p>
<ul>
<li>|          Cooking Handler by `ZeroScape from MoparScape           |</li>
<li>|                      Get newest version at                       |</li>
<li>|   <a href="http://www.moparisthebest.com/smf/index.php/topic,439768.0.html" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,439768.0.html</a>    |</li>
<li>|       This is 100% cooking (without loop) for your server        |</li>
<li>|                           VERSION 1.2                            |</li>
<li>|------------------------------------------------------------------|</li>
<li>| Notice! To change the XP-rate change the ExpRate variable below. |</li>
<li>|------------------------------------------------------------------|</li>
<li>|     Supporting: Shrimps, Tuna, Lobster, Swordfish and Sharks.    |</li>
<li>|          Can add more without too much Java experience.          |</li>
<li>|------------------------------------------------------------------|<br>
*/</li>
</ul>
<p>public class Cooking {<br>
/**<br>
* VARIABLES!<br>
<em>/<br>
public static double Version = 1.2;<br>
public static int CookingEmote = 0x340;<br>
public static int ExpRate = 50;<br>
public static int GlovesId = 775;<br>
public static long actionInterval = 1250;<br>
public static long lastAction = System.currentTimeMillis();<br>
/</em>*<br>
* MAIN COOKING ARRAY.<br>
<em>/<br>
public static int[][] CookingArray = {<br>
{1, 30, 40, 45, 80}, // Cooking Level Needed<br>
{317, 359, 377, 371, 383}, // Raw Food Id<br>
{315, 361, 379, 373, 385}, // Cooked Food Id<br>
{323, 367, 381, 375, 387}, // Burnt Food Id<br>
{30, 100, 120, 140, 210}, // Experience * ExpRate<br>
{15, 65, 68, 86, 100}, // Noburn Level (Without Cooking Gauntlets)<br>
{15, 65, 74, 86, 94}, // Noburn Level (With Cooking Gauntlets)<br>
};<br>
/</em>*<br>
* FOOD NAME ARRAY!<br>
*/<br>
public static String[] FoodName = {“shrimps”, “tuna”, “lobster”, “swordfish”, “shark”};</p>
<pre><code>    /**
     * CONGRATULATIONS METHOD!
     */
    public static void GratulationsMessage(int playerId, int newLevel) {
            client c = (client) server.playerHandler.players[playerId];
            int ActionType = 1;
            if (newLevel == 99)
                    ActionType = 2;
            if (ActionType == 2) {
                    sM(playerId, "@red@You have achieved the highest possible level in this skill!");
            }
            sM(playerId, "You've just advanced a Cooking level! You have reached level " + newLevel + ".");
    }
    /**
     * SENDMESSAGE METHOD!
     */
    public static void sM(int playerId, String Text) {
            client c = (client) server.playerHandler.players[playerId];
            c.sM(Text);
    }
    /**
     * GIVE COOKING EXPERIENCE!
     */
    public static void AddExperience(int playerId, int Amount) {
            client c = (client) server.playerHandler.players[playerId];
            c.addSkillXP(Amount, 7);
    }
    /**
     * PRINT TO THE COMMAND PROMPT!
     */
    public static void Print(int playerId, String Text) {
            client c = (client) server.playerHandler.players[playerId];
            System.out.println("[Client-" + playerId + "-" + c.playerName + "]: " + Text);
    }
    /**
     * REPLACE THE RAW FOOD WITH COOKED OR BURNT!
     */
    public static void CookFood(int playerId, int oldId, int newId) {
            client c = (client) server.playerHandler.players[playerId];
            c.deleteItem(oldId, 1);
            c.addItem(newId, 1);
    }
    /**
     * MAIN COOKING METHOD!
     */
    public static void Cooking(int playerId, int ArrayIndex) {
            client c = (client) server.playerHandler.players[playerId];
            /**
             * ANTI-FLOOD!
             */
            if (System.currentTimeMillis() - lastAction &lt; actionInterval)
                    return;
            /**
             * SET COOKING BOOLEANS!
             */
            boolean Burn = true;
            boolean Gloves = false;
            /**
             * SET COOKING INTEGERS!
             */
            int CookingLevel = c.playerLevel[c.playerCooking];
            int CookingNeeded = CookingArray[0][ArrayIndex];
            int RawId = CookingArray[1][ArrayIndex];
            int CookedId = CookingArray[2][ArrayIndex];
            int BurntId = CookingArray[3][ArrayIndex];
            int Experience = (CookingArray[4][ArrayIndex] * ExpRate);
            int Noburn = CookingArray[5][ArrayIndex];
            int Noburn2 = CookingArray[6][ArrayIndex];
            /**
             * SET COOKING STRING!
             */
            String FoodType = FoodName[ArrayIndex];
            /**
             * ARE THE PLAYER CURRENTLY WEARING COOKING GLOVES?
             */
            if (c.playerEquipment[9] == GlovesId)
                    Gloves = true;
            /**
             * ARE YOU GONNA BURN THIS TIME.
             */
            if ((Gloves &amp;&amp; (CookingLevel &gt;= Noburn2 || misc.random(5) &gt; 2)) || (!Gloves &amp;&amp; (CookingLevel &gt;= Noburn || misc.random(4) &gt; 2)))
                    Burn = false;
            /**
             * CHECK IF THE PLAYER HAVE HIGH ENOUGH COOKING LEVEL!
             */
            if (CookingLevel &gt;= CookingNeeded) {
                    c.setAnimation(CookingEmote);
                    lastAction = System.currentTimeMillis();
                    if (Burn) {
                    CookFood(playerId, RawId, BurntId);
                            sM(playerId, "You accidently burned the " + FoodType + ".");
                    } else {
                            CookFood(playerId, RawId, CookedId);
                            sM(playerId, "You successfully cooked the " + FoodType + ".");
                            AddExperience(playerId, Experience);
                            if (c.playerLevel[c.playerCooking] &gt; CookingLevel) {
                                    GratulationsMessage(playerId, c.playerLevel[c.playerCooking]);
                            }      
                    }
            } else {
                    sM(playerId, "You need a Cooking level of " + CookingNeeded + " to cook " + FoodType + ".");
            }
    }
</code></pre>
<p>}[/code]<br>
I think the code is on this void</p>
<p>[code]public static void Cooking(int playerId, int ArrayIndex) {</p>
<pre><code>            client c = (client) server.playerHandler.players[playerId];
            if (System.currentTimeMillis() - lastAction &lt; actionInterval)
                    return;

            boolean Burn = true;
            boolean Gloves = false;
            int CookingLevel = c.playerLevel[c.playerCooking];
            int CookingNeeded = CookingArray[0][ArrayIndex];
            int RawId = CookingArray[1][ArrayIndex];
            int CookedId = CookingArray[2][ArrayIndex];
            int BurntId = CookingArray[3][ArrayIndex];
            int Experience = (CookingArray[4][ArrayIndex] * ExpRate);
            int Noburn = CookingArray[5][ArrayIndex];
            int Noburn2 = CookingArray[6][ArrayIndex];

            String FoodType = FoodName[ArrayIndex];

            if (c.playerEquipment[9] == GlovesId)
                    Gloves = true;
            if ((Gloves &amp;&amp; (CookingLevel &gt;= Noburn2 || misc.random(5) &gt; 2)) || (!Gloves &amp;&amp; (CookingLevel &gt;= Noburn || misc.random(4) &gt; 2)))
                    Burn = false;
            if (CookingLevel &gt;= CookingNeeded) {
                    c.setAnimation(CookingEmote);
                    lastAction = System.currentTimeMillis();
                    if (Burn) {
                    CookFood(playerId, RawId, BurntId);
                            sM(playerId, "You accidently burned the " + FoodType + ".");
                    } else {
                            CookFood(playerId, RawId, CookedId);
                            sM(playerId, "You successfully cooked the " + FoodType + ".");
                            AddExperience(playerId, Experience);
                            if (c.playerLevel[c.playerCooking] &gt; CookingLevel) {
                                    GratulationsMessage(playerId, c.playerLevel[c.playerCooking]);
                            }      
                    }
            } else {
                    sM(playerId, "You need a Cooking level of " + CookingNeeded + " to cook " + FoodType + ".");
            }
    }[/code]
</code></pre>
<p>Thanks <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/414496/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/414496/1</link>
        <pubDate>Mon, 12 Sep 2011 23:57:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-414496-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/414496.rss">Need help</source>
      </item>
  </channel>
</rss>
