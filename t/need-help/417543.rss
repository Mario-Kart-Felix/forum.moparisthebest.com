<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Need Help</title>
    <link>https://forum.moparisthebest.com/t/need-help/417543</link>
    <description>Since I have close to know idea what to do, can somebody help me?

I wan&#39;t to know how I can make this;
[code]import java.net.*;
import java.text.SimpleDateFormat;
import java.util.*;
import java.io.*;
import org.apache.commons.lang.StringEscapeUtils;

public class Main {
        
        public enum Category {
                DEFAULT(&quot;Unsorted&quot;, -1, new String[]{}),
                R317(&quot;317&quot;, 0, new String[]{&quot;317&quot;}), 
                R508(&quot;508&quot;, 0, new String[]{&quot;508&quot;}),
                R525(&quot;525+&quot;, 0, new String[]{&quot;525&quot;, &quot;530&quot;, &quot;562&quot;, &quot;602&quot;, &quot;614&quot;}),
                LINUX(&quot;Other Operating Systems/VPS&#39;s&quot;, 0, new String[]{&quot;linux&quot;, &quot;vps&quot;, &quot;ubuntu&quot;, &quot;mac&quot;, &quot;osx&quot;, &quot;android&quot;, &quot;phone&quot;, &quot;itouch&quot;, &quot;iphone&quot;}),
                PORTF(&quot;Portforwarding&quot;, 0, new String[]{&quot;port&quot;}),
                PI(&quot;Projet Insaniy&quot;, 1, new String[]{&quot;[pi]&quot;, &quot;insanity&quot;, &quot;(pi)&quot;, &quot; pi &quot;}),
                Hyperion(&quot;Hyperion&quot;, 1, new String[]{&quot;hyperion&quot;}),
                DELTA(&quot;Delta&quot;, 1, new String[]{&quot;delta&quot;});

                Category(String n, int p, String[] k) {
                        name = n;
                        keywords = k;
                        precedence = p;
                }

                String name;
                String[] keywords;
                int precedence;

                public String getName() {
                        return name;
                }

                public String[] getKeywords() {
                        return keywords;
                }

                public int getPrecedence() {
                        return precedence;
                }
        }
        
        private final String LIST_TITLE = &quot;Tutorial List&quot;;
        private final int BOARD_ID = 51;
        private final String AUTHOR_DATA = &quot;&lt;td class=\&quot;windowbg2 starter\&quot;&gt;&quot;;
        private final String SUBJECT_DATA = &quot;&lt;td class=\&quot;subject windowbg\&quot; &gt;&quot;;
        private final String REPLIES_DATA = &quot;&lt;td class=\&quot;windowbg replies\&quot;&gt;&quot;;
        private final String VIEWS_DATA = &quot;&lt;td class=\&quot;windowbg views\&quot;&gt;&quot;;
        private final int THREAD_COUNT = 200;
        private ArrayList&lt;Thread&gt; threads = new ArrayList&lt;Thread&gt;();
        
        /*private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
                public int compare(Thread t1, Thread t2) {
                        return t1.getTitle().compareTo(t2.getTitle());
                }
        };*/
        private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
                public int compare(Thread t1, Thread t2) {
                        return t1.getAuthor().compareTo(t2.getAuthor());
                }
        };
        /*private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
                public int compare(Thread t1, Thread t2) {
                        return (t1.getReplies() &lt; t2.getReplies()) ? 1 : -1;
                }
        };
        private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
                public int compare(Thread t1, Thread t2) {
                        return (t1.getViews() &lt; t2.getViews()) ? 1 : -1;
                }
        };*/

        public static void main(String args[]) {
                new Main();
        }
        
        Main() {
                for(int i = 0; i &lt; THREAD_COUNT; i += 20) {
                        loadPage(&quot;http://www.moparisthebest.com/smf/index.php/board,&quot; + BOARD_ID + &quot;.&quot;+ i +&quot;.html&quot;);
                }
                sort();
                System.out.println(createBBC());
        }
        
        private void loadPage(String page) {
                try {
                        URLConnection connection = new URL(page).openConnection();
                        connection.setRequestProperty(&quot;Cookie&quot;, &quot;mpr_agree4=yes&quot;);
                        connection.connect();
                        BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                        Thread currentThread = new Thread();
                        String line;
                        while ((line = in.readLine()) != null) {
                                line = line.trim();
                                if(line.startsWith(SUBJECT_DATA)) { 
                                        if(currentThread.getAuthor() != null) {
                                                currentThread = new Thread();
                                        }
                                        currentThread.setImgData(in.readLine().trim()); //Either lock or sticky, or blank
                                        in.readLine(); //Junk, blame SMF
                                        String titleDataHTML = in.readLine().trim();
                                        currentThread.setTitle(parseTitleHTML(titleDataHTML));
                                        currentThread.setTitleLink(parseTitleLinkHTML(titleDataHTML));
                                } else if(line.equals(AUTHOR_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                        currentThread.setAuthor(parseAuthorHTML(in.readLine().trim()));
                                } else if(line.equals(REPLIES_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                        currentThread.setReplies(Integer.parseInt(in.readLine().trim()));
                                } else if(line.equals(VIEWS_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                        currentThread.setViews(Integer.parseInt(in.readLine().trim()));
                                }
                                if(currentThread.complete()) {
                                        if(!currentThread.locked()) {
                                                threads.add(currentThread);
                                        }
                                        currentThread = new Thread();
                                }
                        }
                        in.close();
                } catch (Exception e) {
                        e.printStackTrace();
                }
        }
        
        private void sort() {
                for(Thread t : threads) {
                        String title = t.getTitle();
                        for(Category c : Category.values()) {
                                for(String s : c.getKeywords()) {
                                        if(title.toLowerCase().contains(s)) {
                                                if(c.getPrecedence() &gt; t.getCategory().getPrecedence()) {
                                                        t.setCategory(c);
                                                }
                                                break;
                                        }
                                }
                        }
                }
                Collections.sort(threads, SORT);
        }

        private String createBBC() {
                String output = &quot;[center][size=22pt]&quot; + LIST_TITLE + &quot;[/size][/center]\n\n&quot;;
                output += &quot;Last updated: [u]&quot; + new SimpleDateFormat(&quot;MMMM dd, yyyy - h:mm a z&quot;).format(new Date()) + &quot;[/u]\n&quot;;
                output += &quot;Total threads: [u]&quot; + threads.size() + &quot;/&quot; + THREAD_COUNT + &quot; (&quot; + (THREAD_COUNT - threads.size())+ &quot; locked)[/u]\n\n&quot;;
                output += &quot;[size=16pt][u]Categories[/u][/size]\n
[ul]&quot;;
                for(Main.Category c : Main.Category.values()) {
                        output += &quot;[li][iurl=#&quot; + c.name() + &quot;]&quot; + c.getName() + &quot;[/iurl][/li]&quot;;
                }
                output += &quot;[/ul]
\n[hr]\n&quot;;
                for(Main.Category c : Main.Category.values()) {
                        String temp = &quot;[anchor=&quot; + c.name() + &quot;][b][u]&quot; + c.getName() + &quot;[/u][/b]\n
[ul]\n&quot;;
                        for(Thread t : threads) {
                                if(t.getCategory().equals(c)) {
                                        temp += &quot;[li]&quot; + t.getTitleLink() + &quot; [b]by: [/b]&quot; + t.getAuthor() + &quot; (&quot; + t.getReplies() + ((t.getReplies() == 1) ?&quot; reply, &quot; : &quot; replies, &quot;) + t.getViews() + &quot; views)[/li]\n&quot;;
                                }
                        }
                        temp += &quot;[/ul]
\n&quot;;
                        output += temp;
                }
                return output;
        }

        private String parseTitleHTML(String html) {
                try {
                        html = html.substring(0, html.indexOf(&quot;&lt;/a&gt;&quot;));
                        html = html.substring(html.lastIndexOf(&quot;&gt;&quot;) + 1); //Get only title portion of the HTML
                        return StringEscapeUtils.unescapeHtml(html); //Decode the HTML (&amp;amp; &amp;quot; etc)
                } catch (Exception e) {
                        return &quot;Not found&quot;;
                }
        }

        private String parseTitleLinkHTML(String html) {
                try {
                        html = html.substring(0, html.indexOf(&quot;&lt;/a&gt;&quot;)+4).substring(html.indexOf(&quot;&lt;a&quot;)); //Get only the link part of the HTML
                        return StringEscapeUtils.unescapeHtml(html.replace(&quot;&lt;a href&quot;, &quot;[url&quot;).replace(&quot;&lt;/a&gt;&quot;, &quot;[/url]&quot;).replace(&quot;&gt;&quot;, &quot;]&quot;).replace(&quot;\&quot;&quot;, &quot;&quot;)); //Turn it into BBC after decoding the HTML (&amp;amp; &amp;quot; etc)
                } catch (Exception e) {
                        return &quot;Not found&quot;;
                }
        }

        private String parseAuthorHTML(String html) {
                try {
                        html = html.substring(0, html.indexOf(&quot;&lt;/a&quot;));
                        return StringEscapeUtils.unescapeHtml(html.substring(html.lastIndexOf(&quot;&gt;&quot;) + 1));
                } catch (Exception e) {
                        return &quot;Not found&quot;;
                }
        }

        private class Thread {

                private String author = null, imgData = null, title = null, titleLink = null;
                private int views = -1, replies = -1;

                private Main.Category category = Main.Category.DEFAULT;

                public void setImgData(String iD) {
                        imgData = iD;
                }

                public String getTitle() {
                        return title;
                }

                public void setTitle(String t) {
                        title = t;
                }

                public String getAuthor() {
                        return author;
                }

                public void setAuthor(String a) {
                        author = a;
                }

                public String getTitleLink() {
                        return titleLink;
                }

                public void setTitleLink(String tL) {
                        titleLink = tL;
                }

                public Main.Category getCategory() {
                        return category;
                }

                public void setCategory(Main.Category c) {
                        category = c;
                }

                public int getViews() {
                        return views;
                }

                public void setViews(int v) {
                        views = v;
                }

                public int getReplies() {
                        return replies;
                }

                public void setReplies(int r) {
                        replies = r;
                }

                public boolean complete() {
                        return author != null &amp;&amp; title != null &amp;&amp; titleLink != null &amp;&amp; imgData != null &amp;&amp; views &gt; -1 &amp;&amp;  replies &gt; -1;
                }

                public boolean locked() {
                        return imgData.contains(&quot;quick_lock.gif&quot;);
                }
        }

}[/code]

Please help..

Dont flame!..</description>
    
    <lastBuildDate>Sun, 09 Oct 2011 06:52:28 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/need-help/417543.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@_Rebirth `Rebirth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_rebirth">@_Rebirth</a> wrote:</p>
          <blockquote>
              <p>ok. But first I still need help…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/7</link>
        <pubDate>Sun, 09 Oct 2011 06:52:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-7</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@RiiPiiNFtW RiiPiiNFtW]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/riipiinftw">@RiiPiiNFtW</a> wrote:</p>
          <blockquote>
              <p>Just report it</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/6</link>
        <pubDate>Sun, 09 Oct 2011 06:49:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-6</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@_Rebirth `Rebirth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_rebirth">@_Rebirth</a> wrote:</p>
          <blockquote>
              <p>Well, then help me then ask a moderator to move it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/5</link>
        <pubDate>Sun, 09 Oct 2011 06:47:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-5</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@RiiPiiNFtW RiiPiiNFtW]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/riipiinftw">@RiiPiiNFtW</a> wrote:</p>
          <blockquote>
              <p>This looks like it has nothing to do with “Server” help. This does not belong on this board.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/4</link>
        <pubDate>Sun, 09 Oct 2011 06:34:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-4</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@_Rebirth `Rebirth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_rebirth">@_Rebirth</a> wrote:</p>
          <blockquote>
              <p>I got that code from this thread. <a href="https://www.moparisthebest.com/smf/index.php/topic,488704.20.html" rel="nofollow noopener">https://www.moparisthebest.com/smf/index.php/topic,488704.20.html</a></p>
<p>Tell me if that is specific enough, if you can help I have TeamViewer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/3</link>
        <pubDate>Sun, 09 Oct 2011 05:00:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-3</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@RiiPiiNFtW RiiPiiNFtW]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/riipiinftw">@RiiPiiNFtW</a> wrote:</p>
          <blockquote>
              <p>Be more specific? Don’t just post a class and expect someone to take their time to read it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/2</link>
        <pubDate>Sun, 09 Oct 2011 04:59:10 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-2</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
      <item>
        <title>Need Help</title>
        <dc:creator><![CDATA[@_Rebirth `Rebirth]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_rebirth">@_Rebirth</a> wrote:</p>
          <blockquote>
              <p>Since I have close to know idea what to do, can somebody help me?</p>
<p>I wan’t to know how I can make this;</p>
<p>[code]import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import java.text.SimpleDateFormat;<br>
import java.util.</em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
import org.apache.commons.lang.StringEscapeUtils;</p>
<p>public class Main {</p>
<pre><code>    public enum Category {
            DEFAULT("Unsorted", -1, new String[]{}),
            R317("317", 0, new String[]{"317"}), 
            R508("508", 0, new String[]{"508"}),
            R525("525+", 0, new String[]{"525", "530", "562", "602", "614"}),
            LINUX("Other Operating Systems/VPS's", 0, new String[]{"linux", "vps", "ubuntu", "mac", "osx", "android", "phone", "itouch", "iphone"}),
            PORTF("Portforwarding", 0, new String[]{"port"}),
            PI("Projet Insaniy", 1, new String[]{"[pi]", "insanity", "(pi)", " pi "}),
            Hyperion("Hyperion", 1, new String[]{"hyperion"}),
            DELTA("Delta", 1, new String[]{"delta"});

            Category(String n, int p, String[] k) {
                    name = n;
                    keywords = k;
                    precedence = p;
            }

            String name;
            String[] keywords;
            int precedence;

            public String getName() {
                    return name;
            }

            public String[] getKeywords() {
                    return keywords;
            }

            public int getPrecedence() {
                    return precedence;
            }
    }
    
    private final String LIST_TITLE = "Tutorial List";
    private final int BOARD_ID = 51;
    private final String AUTHOR_DATA = "&lt;td class=\"windowbg2 starter\"&gt;";
    private final String SUBJECT_DATA = "&lt;td class=\"subject windowbg\" &gt;";
    private final String REPLIES_DATA = "&lt;td class=\"windowbg replies\"&gt;";
    private final String VIEWS_DATA = "&lt;td class=\"windowbg views\"&gt;";
    private final int THREAD_COUNT = 200;
    private ArrayList&lt;Thread&gt; threads = new ArrayList&lt;Thread&gt;();
    
    /*private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
            public int compare(Thread t1, Thread t2) {
                    return t1.getTitle().compareTo(t2.getTitle());
            }
    };*/
    private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
            public int compare(Thread t1, Thread t2) {
                    return t1.getAuthor().compareTo(t2.getAuthor());
            }
    };
    /*private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
            public int compare(Thread t1, Thread t2) {
                    return (t1.getReplies() &lt; t2.getReplies()) ? 1 : -1;
            }
    };
    private final Comparator&lt;Thread&gt; SORT = new Comparator&lt;Thread&gt;() {
            public int compare(Thread t1, Thread t2) {
                    return (t1.getViews() &lt; t2.getViews()) ? 1 : -1;
            }
    };*/

    public static void main(String args[]) {
            new Main();
    }
    
    Main() {
            for(int i = 0; i &lt; THREAD_COUNT; i += 20) {
                    loadPage("http://www.moparisthebest.com/smf/index.php/board," + BOARD_ID + "."+ i +".html");
            }
            sort();
            System.out.println(createBBC());
    }
    
    private void loadPage(String page) {
            try {
                    URLConnection connection = new URL(page).openConnection();
                    connection.setRequestProperty("Cookie", "mpr_agree4=yes");
                    connection.connect();
                    BufferedReader in = new BufferedReader(new InputStreamReader(connection.getInputStream()));
                    Thread currentThread = new Thread();
                    String line;
                    while ((line = in.readLine()) != null) {
                            line = line.trim();
                            if(line.startsWith(SUBJECT_DATA)) { 
                                    if(currentThread.getAuthor() != null) {
                                            currentThread = new Thread();
                                    }
                                    currentThread.setImgData(in.readLine().trim()); //Either lock or sticky, or blank
                                    in.readLine(); //Junk, blame SMF
                                    String titleDataHTML = in.readLine().trim();
                                    currentThread.setTitle(parseTitleHTML(titleDataHTML));
                                    currentThread.setTitleLink(parseTitleLinkHTML(titleDataHTML));
                            } else if(line.equals(AUTHOR_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                    currentThread.setAuthor(parseAuthorHTML(in.readLine().trim()));
                            } else if(line.equals(REPLIES_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                    currentThread.setReplies(Integer.parseInt(in.readLine().trim()));
                            } else if(line.equals(VIEWS_DATA) &amp;&amp; currentThread.getTitle() != null) {
                                    currentThread.setViews(Integer.parseInt(in.readLine().trim()));
                            }
                            if(currentThread.complete()) {
                                    if(!currentThread.locked()) {
                                            threads.add(currentThread);
                                    }
                                    currentThread = new Thread();
                            }
                    }
                    in.close();
            } catch (Exception e) {
                    e.printStackTrace();
            }
    }
    
    private void sort() {
            for(Thread t : threads) {
                    String title = t.getTitle();
                    for(Category c : Category.values()) {
                            for(String s : c.getKeywords()) {
                                    if(title.toLowerCase().contains(s)) {
                                            if(c.getPrecedence() &gt; t.getCategory().getPrecedence()) {
                                                    t.setCategory(c);
                                            }
                                            break;
                                    }
                            }
                    }
            }
            Collections.sort(threads, SORT);
    }

    private String createBBC() {
            String output = "[center][size=22pt]" + LIST_TITLE + "[/size][/center]\n\n";
            output += "Last updated: [u]" + new SimpleDateFormat("MMMM dd, yyyy - h:mm a z").format(new Date()) + "[/u]\n";
            output += "Total threads: [u]" + threads.size() + "/" + THREAD_COUNT + " (" + (THREAD_COUNT - threads.size())+ " locked)[/u]\n\n";
            output += "[size=16pt][u]Categories[/u][/size]\n
</code></pre>
<p>[ul]";<br>
for(Main.Category c : Main.Category.values()) {<br>
output += “[li][iurl=#” + c.name() + “]” + c.getName() + “[/iurl][/li]”;<br>
}<br>
output += “[/ul]<br>
\n[hr]\n”;<br>
for(Main.Category c : Main.Category.values()) {<br>
String temp = “[anchor=” + c.name() + “]<span class="bbcode-b"><span class="bbcode-u">" + c.getName() + "</span></span>\n<br>
[ul]\n”;<br>
for(Thread t : threads) {<br>
if(t.getCategory().equals©) {<br>
temp += “[li]” + t.getTitleLink() + " <span class="bbcode-b">by: </span>" + t.getAuthor() + " (" + t.getReplies() + ((t.getReplies() == 1) ?" reply, " : " replies, “) + t.getViews() + " views)[/li]\n”;<br>
}<br>
}<br>
temp += “[/ul]<br>
\n”;<br>
output += temp;<br>
}<br>
return output;<br>
}</p>
<pre><code>    private String parseTitleHTML(String html) {
            try {
                    html = html.substring(0, html.indexOf("&lt;/a&gt;"));
                    html = html.substring(html.lastIndexOf("&gt;") + 1); //Get only title portion of the HTML
                    return StringEscapeUtils.unescapeHtml(html); //Decode the HTML (&amp;amp; &amp;quot; etc)
            } catch (Exception e) {
                    return "Not found";
            }
    }

    private String parseTitleLinkHTML(String html) {
            try {
                    html = html.substring(0, html.indexOf("&lt;/a&gt;")+4).substring(html.indexOf("&lt;a")); //Get only the link part of the HTML
                    return StringEscapeUtils.unescapeHtml(html.replace("&lt;a href", "[url").replace("&lt;/a&gt;", "[/url]").replace("&gt;", "]").replace("\"", "")); //Turn it into BBC after decoding the HTML (&amp;amp; &amp;quot; etc)
            } catch (Exception e) {
                    return "Not found";
            }
    }

    private String parseAuthorHTML(String html) {
            try {
                    html = html.substring(0, html.indexOf("&lt;/a"));
                    return StringEscapeUtils.unescapeHtml(html.substring(html.lastIndexOf("&gt;") + 1));
            } catch (Exception e) {
                    return "Not found";
            }
    }

    private class Thread {

            private String author = null, imgData = null, title = null, titleLink = null;
            private int views = -1, replies = -1;

            private Main.Category category = Main.Category.DEFAULT;

            public void setImgData(String iD) {
                    imgData = iD;
            }

            public String getTitle() {
                    return title;
            }

            public void setTitle(String t) {
                    title = t;
            }

            public String getAuthor() {
                    return author;
            }

            public void setAuthor(String a) {
                    author = a;
            }

            public String getTitleLink() {
                    return titleLink;
            }

            public void setTitleLink(String tL) {
                    titleLink = tL;
            }

            public Main.Category getCategory() {
                    return category;
            }

            public void setCategory(Main.Category c) {
                    category = c;
            }

            public int getViews() {
                    return views;
            }

            public void setViews(int v) {
                    views = v;
            }

            public int getReplies() {
                    return replies;
            }

            public void setReplies(int r) {
                    replies = r;
            }

            public boolean complete() {
                    return author != null &amp;&amp; title != null &amp;&amp; titleLink != null &amp;&amp; imgData != null &amp;&amp; views &gt; -1 &amp;&amp;  replies &gt; -1;
            }

            public boolean locked() {
                    return imgData.contains("quick_lock.gif");
            }
    }
</code></pre>
<p>}[/code]</p>
<p>Please help…</p>
<p>Dont flame!..</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/need-help/417543/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/need-help/417543/1</link>
        <pubDate>Sun, 09 Oct 2011 04:53:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-417543-1</guid>
        <source url="https://forum.moparisthebest.com/t/need-help/417543.rss">Need Help</source>
      </item>
  </channel>
</rss>
