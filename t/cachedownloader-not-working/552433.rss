<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>CacheDownloader not working</title>
    <link>https://forum.moparisthebest.com/t/cachedownloader-not-working/552433</link>
    <description>Hello Moparscape,

I&#39;m using the Epicurus base and have launched my server, but noticed that the CacheDownloader doesn&#39;t appear to be working when someone without the cache in their C:/users/user folder tries to download the cache.

This is the error I&#39;ve got (it gets stuck on this screen)
[img]http://www.upload.ee/image/4834284/stuck.png[/img]

Here is a picture of my CMD.
[img]http://www.upload.ee/image/4834290/cmd.png[/img]

here is my cachedownloader:

[SPOILER=Cachedownloader]

import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;


public class CacheDownloader {

        private Client client;

        private final int BUFFER = 1024;

        /*
         * Only things you need to change
         *
         */
        private final int VERSION = 2; // Version of cache
        private String cacheLink = &quot;https://www.dropbox.com/s/0vh3grahbhrukxj/ProjectLifeCache.zip&quot;; // Link to cache

        private String fileToExtract = getCacheDir() + getArchivedName();

        public CacheDownloader(Client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
                System.out.println(text);
        }


        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
                System.out.println(text);
        }

        private String getCacheDir() {
                return SignLink.getCacheLocation();
        }

        private String getCacheLink() {
                return cacheLink;
        }

        private int getCacheVersion() {
                return VERSION;
        }

        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                
                if(!location.exists()) {
                        drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                        downloadFile(getCacheLink(), getArchivedName());

                        unZip();
                        System.out.println(&quot;UNZIP&quot;);

                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
                                drawLoadingText(&quot;Downloading Cache Please wait...&quot;);
                                downloadFile(getCacheLink(), getArchivedName());

                                unZip();
                                System.out.println(&quot;UNZIP&quot;);

                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();

                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {

                }
                return null;
        }
        
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                
                try {

                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                                new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                
                        byte[] data = new byte[BUFFER]; 
        
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();

        
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;

                                    int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Project Life: Downloading Cache [&quot; + percentage + &quot;%]&quot;);

                        }

                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Project Life: Unzipping...&quot;);

                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }

        }

        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }



        private void unZip() {

            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;

                while((e=zin.getNextEntry()) != null) {

                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {

                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
                    System.out.println(&quot;unzipping2 &quot; + e.getName());
                }
                zin.close();

            } catch(Exception e) {
                e.printStackTrace();
            }
        }

        private void unzip(ZipInputStream zin, String s) 
                throws IOException {

                FileOutputStream out = new FileOutputStream(s);
                System.out.println(&quot;unzipping &quot; + s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
                }
                out.close();
        }
}
[/SPOILER]

After reading some other posts online I found out that it&#39;s trying to load the cache before the cache has even downloaded? But I&#39;m stuck on how to get it to download properly. 

It appears to be a common problem on epicurus clients.

If anyone could help that would be great, cheers :)</description>
    
    <lastBuildDate>Sat, 18 Jul 2015 22:32:28 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>CacheDownloader not working</title>
        <dc:creator><![CDATA[@malimt malimt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malimt">@malimt</a> wrote:</p>
          <blockquote>
              <p>Well, you can grab the cache link it’s trying to download from and use it!<br>
Download the cache urself first and place it in C:/ and try it then!<br>
If you want to fix it as well, you’re going to need to DL the Cache!<br>
So do that first and then post back.<br>
There might be a (Cache) already in a folder DL’ed after u ran ur client but delete it and replace it with the actual cache.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/3</link>
        <pubDate>Sat, 18 Jul 2015 22:32:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552433-3</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433.rss">CacheDownloader not working</source>
      </item>
      <item>
        <title>CacheDownloader not working</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>It isn’t a direct download.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/2</link>
        <pubDate>Mon, 13 Jul 2015 12:56:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552433-2</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433.rss">CacheDownloader not working</source>
      </item>
      <item>
        <title>CacheDownloader not working</title>
        <dc:creator><![CDATA[@purestrme100 purestrme100]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/purestrme100">@purestrme100</a> wrote:</p>
          <blockquote>
              <p>Hello Moparscape,</p>
<p>I’m using the Epicurus base and have launched my server, but noticed that the CacheDownloader doesn’t appear to be working when someone without the cache in their C:/users/user folder tries to download the cache.</p>
<p>This is the error I’ve got (it gets stuck on this screen)<br>
<img src="http://www.upload.ee/image/4834284/stuck.png" alt width="" height=""></p>
<p>Here is a picture of my CMD.<br>
<img src="http://www.upload.ee/image/4834290/cmd.png" alt width="" height=""></p>
<p>here is my cachedownloader:</p>
<p>[SPOILER=Cachedownloader]</p>
<p>import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private Client client;

    private final int BUFFER = 1024;

    /*
     * Only things you need to change
     *
     */
    private final int VERSION = 2; // Version of cache
    private String cacheLink = "https://www.dropbox.com/s/0vh3grahbhrukxj/ProjectLifeCache.zip"; // Link to cache

    private String fileToExtract = getCacheDir() + getArchivedName();

    public CacheDownloader(Client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
            System.out.println(text);
    }


    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
            System.out.println(text);
    }

    private String getCacheDir() {
            return SignLink.getCacheLocation();
    }

    private String getCacheLink() {
            return cacheLink;
    }

    private int getCacheVersion() {
            return VERSION;
    }

    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            
            if(!location.exists()) {
                    drawLoadingText("Downloading Cache Please wait...");
                    downloadFile(getCacheLink(), getArchivedName());

                    unZip();
                    System.out.println("UNZIP");

                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
                            drawLoadingText("Downloading Cache Please wait...");
                            downloadFile(getCacheLink(), getArchivedName());

                            unZip();
                            System.out.println("UNZIP");

                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();

                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {

            }
            return null;
    }
    
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            
            try {

                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                            new FileOutputStream(getCacheDir() + "/" +localFileName)); 

                    conn = url.openConnection();
                    in = conn.getInputStream(); 
            
                    byte[] data = new byte[BUFFER]; 
    
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();

    
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;

                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Project Life: Downloading Cache [" + percentage + "%]");

                    }

                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Project Life: Unzipping...");

            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }

    }

    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }



    private void unZip() {

        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;

            while((e=zin.getNextEntry()) != null) {

                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {

                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
                System.out.println("unzipping2 " + e.getName());
            }
            zin.close();

        } catch(Exception e) {
            e.printStackTrace();
        }
    }

    private void unzip(ZipInputStream zin, String s) 
            throws IOException {

            FileOutputStream out = new FileOutputStream(s);
            System.out.println("unzipping " + s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
            }
            out.close();
    }
</code></pre>
<p>}<br>
[/SPOILER]</p>
<p>After reading some other posts online I found out that it’s trying to load the cache before the cache has even downloaded? But I’m stuck on how to get it to download properly.</p>
<p>It appears to be a common problem on epicurus clients.</p>
<p>If anyone could help that would be great, cheers <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cachedownloader-not-working/552433/1</link>
        <pubDate>Sun, 12 Jul 2015 22:48:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552433-1</guid>
        <source url="https://forum.moparisthebest.com/t/cachedownloader-not-working/552433.rss">CacheDownloader not working</source>
      </item>
  </channel>
</rss>
