<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Question regarding CacheDownloader (317)</title>
    <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220</link>
    <description>Hello there, I just recently got a Server and today I decided to change the Cache name and it worked fine!
Then, I decided to also change the Link in Cachedownloader.java However, it doesn&#39;t seem to be working?? It doesn&#39;t auto-DL anymore.
Can somebody help me with this? 
I am using LostLegacy Client.
(Cachedownloader.java) below.
[CODE]
import java.io.*;
import java.net.URLConnection;
import java.net.URL;
import java.net.URLClassLoader;
import java.util.jar.Attributes;
import java.util.jar.Manifest;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

        /*
         * The manifest version for the jared client.
         * Current state: Uninitialized.
         * @author TRMayhem
         */
        
	private double VERSION;
        
        /*
         * The manifest version for the cache.
         * Current state: Uninitialized.
         * @author TRMayhem
         */
        
        private double VERSION1;
        
        /*
         * The direct download URL for the zipped cache.
         * Current State: &quot;http://dl.dropbox.com/u/7372010/GRCache.zip&quot;
         * @author Shamon King
         */
        
	private String cacheLink = &quot;http://dl.dropbox.com/s/007lidd8t41h234/AppleRSCache.zip&quot;;

	private String fileToExtract = getCacheDir() + getArchivedName();
	
        /*
         * The updateAvailable flag.
         * Current State: Uninitialized.
         * @author TRMayhem
         */
        
	public boolean updateAvailable;
	
        /*
         * The checkVersion method. Returns true when it detects an update for the cache.
         * Current State: Uninitialized.
         * @author TRMayhem
         */
        
	public boolean checkVersion() {
            
		try {
                    
                        FileInputStream FIS = null;
                        URLClassLoader cl = (URLClassLoader) getClass().getClassLoader();
                        
                        try {
                            File version = new File(getCacheDir() + &quot;/MANIFEST.MF&quot;);
                            
                            if(!version.exists()) {
                                version.createNewFile();
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/MANIFEST.MF&quot;));
                                versionFile.write(&quot;Manifest-Version: 0.0&quot;);
                                versionFile.newLine();
                                versionFile.close();
                            } else if(version.exists()) {
                                FIS = new FileInputStream(version);
                            }
                            
                            URL url = cl.findResource(&quot;META-INF/MANIFEST.MF&quot;);
                            
                            Manifest jarManifest = null;
                            
                            if(url != null)
                                 jarManifest = new Manifest(url.openStream());
                            
                            Manifest cacheManifest = null;
                            
                            if(FIS != null)
                                cacheManifest = new Manifest(FIS);
                            
                            Attributes attr1 = null;
                            
                            if(jarManifest != null)
                                 attr1 = jarManifest.getMainAttributes();
                            
                            Attributes attr2 = null;
                            
                            if(cacheManifest != null)
                                attr2 = cacheManifest.getMainAttributes();
                            
                            if(attr1 != null) {
                                this.VERSION = (double) Double.parseDouble(attr1.getValue(&quot;Manifest-Version&quot;));
                            } else {
                                this.VERSION = 1.0;
                            }
                            
                            if(attr2 != null) {
                                this.VERSION1 = (double) Double.parseDouble(attr2.getValue(&quot;Manifest-Version&quot;));
                            } else  {
                                this.VERSION1 = 0.0;
                            }
                            
                            if(this.VERSION1 != this.VERSION) {
                                return true;
                            }
                            
                        } catch (IOException e) {
                            e.printStackTrace();
                        }
                        
		} catch(Exception e) {
			e.printStackTrace();
		}
                
                return false;
	}
	
        /*
         * The updated CacheDownloader class constructor.
         * Old author: Shamon King
         * @author TRMayhem
         */
        
	public CacheDownloader(client client) {
		this.client = client;
		this.updateAvailable = this.checkVersion();
		if(this.updateAvailable) {
			new File(getCacheDir()).delete();
		}
	} 

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private double getCacheVersion() {
		return VERSION;
	}

        /*
         * The updated downloadCache method.
         * Old author: Shamon King
         * @author TRMayhem
         */
        
	public CacheDownloader downloadCache() {
		try {
                    File location = new File(getCacheDir());
                    File version = new File(getCacheDir() + &quot;/MANIFEST.MF&quot;);
                    if(location.exists()) {
                        if(version.exists()) {
                            System.out.println(version.getName());
                            if(!this.updateAvailable)
                                return null;
                        }
                    }
                    if(!location.exists()) {
                        downloadFile(getCacheLink(), getArchivedName());
                        unZip();
                        System.out.println(&quot;UNZIP&quot;);
                        version.createNewFile();
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/MANIFEST.MF&quot;));
                        versionFile.write(&quot;Manifest-Version: &quot; + this.VERSION);
                        versionFile.newLine();
                        versionFile.close();
                    } else {
                        if(this.updateAvailable) {
                            downloadFile(getCacheLink(), getArchivedName());
                            unZip();
                            System.out.println(&quot;UNZIP&quot;);
                            version.createNewFile();
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/MANIFEST.MF&quot;));
                            versionFile.write(&quot;Manifest-Version: &quot; + this.VERSION);
                            versionFile.newLine();
                            versionFile.close();
                        }
                    }
		} catch(Exception e) {

		}
		return null;
	}
        
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

        public boolean dot = true;
        
        /*
         * The updated unzip (ZipInputStream, String) method.
         * Old author: Shamon King
         * @author TRMayhem
         */
        
	private void unzip(ZipInputStream zin, String s) throws IOException {

                File currentFile = new File(s);
		FileOutputStream out = new FileOutputStream(s);
		byte [] b = new byte[BUFFER];
		int len;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
                        drawLoadingText(((dot == true) ? &quot;Unzipping Files.&quot; : &quot;Unzipping Files..&quot;));
                        this.dot = !this.dot;
		}
		out.close();
	}
}
[/CODE]
Any and every help is greatly appreciated! Thank you!</description>
    
    <lastBuildDate>Thu, 02 Jul 2015 21:56:40 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>[quote=“Pure_, post:6, topic:552220”]Maybe increment the version.</p>
<p>[quote author=Welliton_inc link=topic=671136.msg4488526#msg4488526 date=1435841217]<br>
It’s your download link that is incorrect that is why, since it isn’t a direct download.<br>
[/quote]It worked for me :/[/quote]</p>
<p>Ahh yes, didn’t see the “dl.” in the download link. But yeah what Pure_ said, it is probably the version that needs to be increased.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/7</link>
        <pubDate>Thu, 02 Jul 2015 21:56:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-7</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>Maybe increment the version.</p>
<p>[quote=“Welliton_inc, post:5, topic:552220”]It’s your download link that is incorrect that is why, since it isn’t a direct download.[/quote]It worked for me <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/6</link>
        <pubDate>Thu, 02 Jul 2015 14:48:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-6</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@Welliton_inc Welliton_inc]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/welliton_inc">@Welliton_inc</a> wrote:</p>
          <blockquote>
              <p>It’s your download link that is incorrect that is why, since it isn’t a direct download.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/5</link>
        <pubDate>Thu, 02 Jul 2015 12:46:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-5</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@mattadog18 mattadog18]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mattadog18">@mattadog18</a> wrote:</p>
          <blockquote>
              <p>Did the CacheDownloader work before you changed the Cache name? If so its probably the link.<br>
Make sure you zipped the files inside the Cache and not the file…</p>
<pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/4</link>
        <pubDate>Thu, 02 Jul 2015 07:10:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-4</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@malimt malimt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malimt">@malimt</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="552220">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/beale/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> beale:</div>
<blockquote>
<p>did you zip the contents correctly?</p>
</blockquote>
</aside>
<p>Yes I have.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/3</link>
        <pubDate>Mon, 29 Jun 2015 16:08:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-3</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@beale beale]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/beale">@beale</a> wrote:</p>
          <blockquote>
              <p>did you zip the contents correctly?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/2</link>
        <pubDate>Mon, 29 Jun 2015 13:37:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-2</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
      <item>
        <title>Question regarding CacheDownloader (317)</title>
        <dc:creator><![CDATA[@malimt malimt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malimt">@malimt</a> wrote:</p>
          <blockquote>
              <p>Hello there, I just recently got a Server and today I decided to change the Cache name and it worked fine!<br>
Then, I decided to also change the Link in Cachedownloader.java However, it doesn’t seem to be working?? It doesn’t auto-DL anymore.<br>
Can somebody help me with this?<br>
I am using LostLegacy Client.<br>
(Cachedownloader.java) below.</p>
<p>[CODE]<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.net.URLClassLoader;<br>
import java.util.jar.Attributes;<br>
import java.util.jar.Manifest;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

    /*
     * The manifest version for the jared client.
     * Current state: Uninitialized.
     * @author TRMayhem
     */
    
private double VERSION;
    
    /*
     * The manifest version for the cache.
     * Current state: Uninitialized.
     * @author TRMayhem
     */
    
    private double VERSION1;
    
    /*
     * The direct download URL for the zipped cache.
     * Current State: "http://dl.dropbox.com/u/7372010/GRCache.zip"
     * @author Shamon King
     */
    
private String cacheLink = "http://dl.dropbox.com/s/007lidd8t41h234/AppleRSCache.zip";

private String fileToExtract = getCacheDir() + getArchivedName();

    /*
     * The updateAvailable flag.
     * Current State: Uninitialized.
     * @author TRMayhem
     */
    
public boolean updateAvailable;

    /*
     * The checkVersion method. Returns true when it detects an update for the cache.
     * Current State: Uninitialized.
     * @author TRMayhem
     */
    
public boolean checkVersion() {
        
	try {
                
                    FileInputStream FIS = null;
                    URLClassLoader cl = (URLClassLoader) getClass().getClassLoader();
                    
                    try {
                        File version = new File(getCacheDir() + "/MANIFEST.MF");
                        
                        if(!version.exists()) {
                            version.createNewFile();
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/MANIFEST.MF"));
                            versionFile.write("Manifest-Version: 0.0");
                            versionFile.newLine();
                            versionFile.close();
                        } else if(version.exists()) {
                            FIS = new FileInputStream(version);
                        }
                        
                        URL url = cl.findResource("META-INF/MANIFEST.MF");
                        
                        Manifest jarManifest = null;
                        
                        if(url != null)
                             jarManifest = new Manifest(url.openStream());
                        
                        Manifest cacheManifest = null;
                        
                        if(FIS != null)
                            cacheManifest = new Manifest(FIS);
                        
                        Attributes attr1 = null;
                        
                        if(jarManifest != null)
                             attr1 = jarManifest.getMainAttributes();
                        
                        Attributes attr2 = null;
                        
                        if(cacheManifest != null)
                            attr2 = cacheManifest.getMainAttributes();
                        
                        if(attr1 != null) {
                            this.VERSION = (double) Double.parseDouble(attr1.getValue("Manifest-Version"));
                        } else {
                            this.VERSION = 1.0;
                        }
                        
                        if(attr2 != null) {
                            this.VERSION1 = (double) Double.parseDouble(attr2.getValue("Manifest-Version"));
                        } else  {
                            this.VERSION1 = 0.0;
                        }
                        
                        if(this.VERSION1 != this.VERSION) {
                            return true;
                        }
                        
                    } catch (IOException e) {
                        e.printStackTrace();
                    }
                    
	} catch(Exception e) {
		e.printStackTrace();
	}
            
            return false;
}

    /*
     * The updated CacheDownloader class constructor.
     * Old author: Shamon King
     * @author TRMayhem
     */
    
public CacheDownloader(client client) {
	this.client = client;
	this.updateAvailable = this.checkVersion();
	if(this.updateAvailable) {
		new File(getCacheDir()).delete();
	}
} 

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private double getCacheVersion() {
	return VERSION;
}

    /*
     * The updated downloadCache method.
     * Old author: Shamon King
     * @author TRMayhem
     */
    
public CacheDownloader downloadCache() {
	try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + "/MANIFEST.MF");
                if(location.exists()) {
                    if(version.exists()) {
                        System.out.println(version.getName());
                        if(!this.updateAvailable)
                            return null;
                    }
                }
                if(!location.exists()) {
                    downloadFile(getCacheLink(), getArchivedName());
                    unZip();
                    System.out.println("UNZIP");
                    version.createNewFile();
                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/MANIFEST.MF"));
                    versionFile.write("Manifest-Version: " + this.VERSION);
                    versionFile.newLine();
                    versionFile.close();
                } else {
                    if(this.updateAvailable) {
                        downloadFile(getCacheLink(), getArchivedName());
                        unZip();
                        System.out.println("UNZIP");
                        version.createNewFile();
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/MANIFEST.MF"));
                        versionFile.write("Manifest-Version: " + this.VERSION);
                        versionFile.newLine();
                        versionFile.close();
                    }
                }
	} catch(Exception e) {

	}
	return null;
}
    
private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%");

		}

		System.out.println(localFileName + "\t" + numWritten);

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}

    public boolean dot = true;
    
    /*
     * The updated unzip (ZipInputStream, String) method.
     * Old author: Shamon King
     * @author TRMayhem
     */
    
private void unzip(ZipInputStream zin, String s) throws IOException {

            File currentFile = new File(s);
	FileOutputStream out = new FileOutputStream(s);
	byte [] b = new byte[BUFFER];
	int len;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
                    drawLoadingText(((dot == true) ? "Unzipping Files." : "Unzipping Files.."));
                    this.dot = !this.dot;
	}
	out.close();
}
</code></pre>
<p>}<br>
[/CODE]<br>
Any and every help is greatly appreciated! Thank you!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220/1</link>
        <pubDate>Mon, 29 Jun 2015 00:02:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-552220-1</guid>
        <source url="https://forum.moparisthebest.com/t/question-regarding-cachedownloader-317/552220.rss">Question regarding CacheDownloader (317)</source>
      </item>
  </channel>
</rss>
