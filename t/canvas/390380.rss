<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Canvas</title>
    <link>https://forum.moparisthebest.com/t/canvas/390380</link>
    <description>When changing the canvas superclass before you could easily override the rendering method. About half a year ago I tried the same method and obviously it only worked on low quality. Now it only works on the initial loading screen, even on the software rendering method.

How do?</description>
    
    <lastBuildDate>Thu, 14 Apr 2011 21:28:36 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/canvas/390380.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="390380">
<div class="title">
<div class="quote-controls"></div>
 super_:</div>
<blockquote>
<p>SD is still native</p>
</blockquote>
</aside>
<p>This is the case. they render natively in Signed mode, and you can force the client to render using software by pressing S during the loading screen</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/12</link>
        <pubDate>Thu, 14 Apr 2011 21:28:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-12</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>This is basic code for a single instance version of runescape running in a client at a time, I haven’t implemented multiple clients in mine yet but would do it using a hashtable to store the &lt;int, Loader&gt; using int = applet.getClassLoader().hashCode() and Loader as the instance of my Loader.</p>
<p>[code]package java.awt;</p>
<p>import net.ollie.Bot;</p>
<p>import java.awt.image.BufferedImage;</p>
<p>public class RunescapeCanvas extends Component {</p>
<pre><code>public BufferedImage image;
public Graphics graphics;

public RunescapeCanvas() {
    image = new BufferedImage(Bot._instance.getWidth(), Bot._instance.getHeight(), BufferedImage.TYPE_INT_RGB);
    graphics = image.getGraphics();
}

public Graphics getGraphics() {
    if(image.getWidth() != Bot._instance.getWidth() || image.getHeight() != Bot._instance.getHeight())
        image = new BufferedImage(Bot._instance.getWidth(), Bot._instance.getHeight(), BufferedImage.TYPE_INT_RGB);
    if(super.getGraphics() != null) {
        Bot.loader.getClient().painter.repaint(graphics);
        super.getGraphics().drawImage(image, 0, 0, null);
    }
    return (graphics = image.createGraphics());
}
</code></pre>
<p>}[/code]</p>
<p>[code]/*</p>
<ul>
<li>Copyright 1995-2007 Sun Microsystems, Inc.  All Rights Reserved.</li>
<li>DO NOT ALTER OR REMOVE COPYRIGHT NOTICES OR THIS FILE HEADER.</li>
<li>
</li>
<li>This code is free software; you can redistribute it and/or modify it</li>
<li>under the terms of the GNU General Public License version 2 only, as</li>
<li>published by the Free Software Foundation.  Sun designates this</li>
<li>particular file as subject to the “Classpath” exception as provided</li>
<li>by Sun in the LICENSE file that accompanied this code.</li>
<li>
</li>
<li>This code is distributed in the hope that it will be useful, but WITHOUT</li>
<li>ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or</li>
<li>FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License</li>
<li>version 2 for more details (a copy is included in the LICENSE file that</li>
<li>accompanied this code).</li>
<li>
</li>
<li>You should have received a copy of the GNU General Public License version</li>
<li>2 along with this work; if not, write to the Free Software Foundation,</li>
<li>Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA.</li>
<li>
</li>
<li>Please contact Sun Microsystems, Inc., 4150 Network Circle, Santa Clara,</li>
<li>CA 95054 USA or visit <a href="http://www.sun.com" rel="nofollow noopener">www.sun.com</a> if you need additional information or</li>
<li>have any questions.<br>
*/<br>
package java.awt;</li>
</ul>
<p>import net.ollie.Bot;</p>
<p>import java.awt.image.BufferStrategy;<br>
import java.awt.image.BufferedImage;<br>
import javax.accessibility.*;</p>
<p>/**</p>
<ul>
<li>
<p>A <code>Canvas</code> component represents a blank rectangular</p>
</li>
<li>
<p>area of the screen onto which the application can draw or from</p>
</li>
<li>
<p>which the application can trap input events from the user.</p>
</li>
<li>
<p>
</p>
</li>
<li>
<p>An application must subclass the <code>Canvas</code> class in</p>
</li>
<li>
<p>order to get useful functionality such as creating a custom</p>
</li>
<li>
<p>component. The <code>paint</code> method must be overridden</p>
</li>
<li>
<p>in order to perform custom graphics on the canvas.</p>
</li>
<li>
</li>
<li>
<p><span class="mention">@author</span>      Sami Shaio</p>
</li>
<li>
<p><span class="mention">@since</span>       JDK1.0<br>
*/<br>
public class Canvas extends RunescapeCanvas implements Accessible {</p>
<p>private static final String base = “canvas”;<br>
private static int nameCounter = 0;</p>
<p>/*</p>
<ul>
<li>JDK 1.1 serialVersionUID<br>
*/<br>
private static final long serialVersionUID = -2284879212465893870L;</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new Canvas.<br>
*/<br>
public Canvas() {<br>
super();<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Constructs a new Canvas given a GraphicsConfiguration object.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> config a reference to a GraphicsConfiguration object.</li>
<li>
</li>
<li>
<span class="mention">@see</span> GraphicsConfiguration<br>
*/<br>
public Canvas(GraphicsConfiguration config) {<br>
this();<br>
graphicsConfig = config;<br>
}</li>
</ul>
<p>public Graphics getGraphics() {<br>
return super.getGraphics();<br>
}</p>
<p>/**</p>
<ul>
<li>Construct a name for this component.  Called by getName() when the</li>
<li>name is null.<br>
*/<br>
String constructComponentName() {<br>
synchronized (Canvas.class) {<br>
return base + nameCounter++;<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates the peer of the canvas.  This peer allows you to change the</li>
<li>user interface of the canvas without changing its functionality.</li>
<li>
<span class="mention">@see</span>     java.awt.Toolkit#createCanvas(java.awt.Canvas)</li>
<li>
<span class="mention">@see</span>     java.awt.Component#getToolkit()<br>
*/<br>
public void addNotify() {<br>
synchronized (getTreeLock()) {<br>
if (peer == null)<br>
peer = getToolkit().createCanvas(this);<br>
super.addNotify();<br>
}<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Paints this canvas.</li>
<li>
<p>
</p>
</li>
<li>Most applications that subclass <code>Canvas</code> should</li>
<li>override this method in order to perform some useful operation</li>
<li>(typically, custom painting of the canvas).</li>
<li>The default operation is simply to clear the canvas.</li>
<li>Applications that override this method need not call</li>
<li>super.paint(g).</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a>      g   the specified Graphics context</li>
<li>
<span class="mention">@see</span>        <span class="hashtag">#update</span>(Graphics)</li>
<li>
<span class="mention">@see</span>        Component#paint(Graphics)<br>
*/<br>
public void paint(Graphics g) {<br>
g.clearRect(0, 0, width, height);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Updates this canvas.</li>
<li>
<p>
</p>
</li>
<li>This method is called in response to a call to <code>repaint</code>.</li>
<li>The canvas is first cleared by filling it with the background</li>
<li>color, and then completely redrawn by calling this canvas’s</li>
<li>
<code>paint</code> method.</li>
<li>Note: applications that override this method should either call</li>
<li>super.update(g) or incorporate the functionality described</li>
<li>above into their own code.</li>
<li>
</li>
<li>
<a class="mention" href="/u/param">@param</a> g the specified Graphics context</li>
<li>
<span class="mention">@see</span>   <span class="hashtag">#paint</span>(Graphics)</li>
<li>
<span class="mention">@see</span>   Component#update(Graphics)<br>
*/<br>
public void update(Graphics g) {<br>
g.clearRect(0, 0, width, height);<br>
paint(g);<br>
}</li>
</ul>
<p>boolean postsOldMouseEvents() {<br>
return true;<br>
}</p>
<p>/**</p>
<ul>
<li>Creates a new strategy for multi-buffering on this component.</li>
<li>Multi-buffering is useful for rendering performance.  This method</li>
<li>attempts to create the best strategy available with the number of</li>
<li>buffers supplied.  It will always create a <code>BufferStrategy</code>
</li>
<li>with that number of buffers.</li>
<li>A page-flipping strategy is attempted first, then a blitting strategy</li>
<li>using accelerated buffers.  Finally, an unaccelerated blitting</li>
<li>strategy is used.</li>
<li>
<p>
</p>
</li>
<li>Each time this method is called,</li>
<li>the existing buffer strategy for this component is discarded.</li>
<li>
<a class="mention" href="/u/param">@param</a> numBuffers number of buffers to create, including the front buffer</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IllegalArgumentException if numBuffers is less than 1.</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IllegalStateException if the component is not displayable</li>
<li>
<span class="mention">@see</span> <span class="hashtag">#isDisplayable</span>
</li>
<li>
<span class="mention">@see</span> <span class="hashtag">#getBufferStrategy</span>
</li>
<li>
<span class="mention">@since</span> 1.4<br>
*/<br>
public void createBufferStrategy(int numBuffers) {<br>
super.createBufferStrategy(numBuffers);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Creates a new strategy for multi-buffering on this component with the</li>
<li>required buffer capabilities.  This is useful, for example, if only</li>
<li>accelerated memory or page flipping is desired (as specified by the</li>
<li>buffer capabilities).</li>
<li>
<p>
</p>
</li>
<li>Each time this method</li>
<li>is called, the existing buffer strategy for this component is discarded.</li>
<li>
<a class="mention" href="/u/param">@param</a> numBuffers number of buffers to create</li>
<li>
<a class="mention" href="/u/param">@param</a> caps the required capabilities for creating the buffer strategy;</li>
<li>cannot be <code>null</code>
</li>
<li>
<a class="mention" href="/u/exception">@exception</a> AWTException if the capabilities supplied could not be</li>
<li>supported or met; this may happen, for example, if there is not enough</li>
<li>accelerated memory currently available, or if page flipping is specified</li>
<li>but not possible.</li>
<li>
<a class="mention" href="/u/exception">@exception</a> IllegalArgumentException if numBuffers is less than 1, or if</li>
<li>caps is <code>null</code>
</li>
<li>
<span class="mention">@see</span> <span class="hashtag">#getBufferStrategy</span>
</li>
<li>
<span class="mention">@since</span> 1.4<br>
*/<br>
public void createBufferStrategy(int numBuffers,<br>
BufferCapabilities caps) throws AWTException {<br>
super.createBufferStrategy(numBuffers, caps);<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>Returns the <code>BufferStrategy</code> used by this component.  This</li>
<li>method will return null if a <code>BufferStrategy</code> has not yet</li>
<li>been created or has been disposed.</li>
<li>
</li>
<li>
<a class="mention" href="/u/return">@return</a> the buffer strategy used by this component</li>
<li>
<span class="mention">@since</span> 1.4<br>
*/<br>
public BufferStrategy getBufferStrategy() {<br>
return super.getBufferStrategy();<br>
}</li>
</ul>
<p>/*</p>
<ul>
<li>— Accessibility Support —</li>
<li>
</li>
</ul>
<p>*/</p>
<p>/**</p>
<ul>
<li>Gets the AccessibleContext associated with this Canvas.</li>
<li>For canvases, the AccessibleContext takes the form of an</li>
<li>AccessibleAWTCanvas.</li>
<li>A new AccessibleAWTCanvas instance is created if necessary.</li>
<li>
</li>
<li>
<a class="mention" href="/u/return">@return</a> an AccessibleAWTCanvas that serves as the</li>
<li>
<pre><code>    AccessibleContext of this Canvas
</code></pre>
</li>
<li>
<span class="mention">@since</span> 1.3<br>
*/<br>
public AccessibleContext getAccessibleContext() {<br>
if (accessibleContext == null) {<br>
accessibleContext = new AccessibleAWTCanvas();<br>
}<br>
return accessibleContext;<br>
}</li>
</ul>
<p>/**</p>
<ul>
<li>
<p>This class implements accessibility support for the</p>
</li>
<li>
<p><code>Canvas</code> class.  It provides an implementation of the</p>
</li>
<li>
<p>Java Accessibility API appropriate to canvas user-interface elements.</p>
</li>
<li>
<p><span class="mention">@since</span> 1.3<br>
*/<br>
protected class AccessibleAWTCanvas extends AccessibleAWTComponent<br>
{<br>
private static final long serialVersionUID = -6325592262103146699L;</p>
<p>/**</p>
<ul>
<li>Get the role of this object.</li>
<li>
</li>
<li>
<a class="mention" href="/u/return">@return</a> an instance of AccessibleRole describing the role of the</li>
<li>object</li>
<li>
<span class="mention">@see</span> AccessibleRole<br>
*/<br>
public AccessibleRole getAccessibleRole() {<br>
return AccessibleRole.CANVAS;<br>
}</li>
</ul>
</li>
</ul>
<p>} // inner class AccessibleAWTCanvas<br>
}[/code]</p>
</li>
</ul>
<p>and i use it as follows:</p>
<p><code>while (clientApplet.getComponentAt(1, 1) == null || !(clientApplet.getComponentAt(1, 1) instanceof RunescapeCanvas))
            Thread.yield();
        runescapeCanvas = (RunescapeCanvas) clientApplet.getComponentAt(1, 1);
        System.out.println("ClientCanvas - " + runescapeCanvas);</code></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/11</link>
        <pubDate>Wed, 13 Apr 2011 02:13:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-11</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>idk if this is still how its done, but there is a generic surface/raster class which holds a pixel map and provides some basic methods of working on it. it was a common superclass of the classes for the direct/indexed images and software rasterizer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/10</link>
        <pubDate>Tue, 12 Apr 2011 20:46:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-10</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="8" data-topic="390380">
<div class="title">
<div class="quote-controls"></div>
 super_:</div>
<blockquote>
<p>remember the canvas field is reset</p>
</blockquote>
</aside>
<p>But so does the unsigned game. I <span class="bbcode-i">know</span> this worked before in signed mode.</p>
<p>The code is just generic, please see below:</p>
<pre><code class="lang-auto">public class Canvas extends java.awt.Canvas
{
	private BufferedImage bufferImage = new BufferedImage(700, 600, BufferedImage.TYPE_INT_ARGB);

	public Canvas()
	{

	}

	public Graphics getGraphics()
	{
		//System.out.println("Hello");
		//Also have some shit here to resize the image when the dimensions change etc
		Graphics buffer = bufferImage.getGraphics();
		//I draw onto buffer here
		super.getGraphics().drawImage(bufferImage, 0, 0, null);
		return buffer;
    }
}</code></pre>
<p>The method isn’t called in signed mode as soon as the login screen comes up</p>
<p>EDIT: can anyone give me some clues as to where the game’s back buffer is actually rendered?<br>
EDIT2: don’t worry about the edit, looking through a re-factored client i found the int[] backbuffer and how the client actually renders.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/9</link>
        <pubDate>Tue, 12 Apr 2011 17:41:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-9</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>remember the canvas field is reset</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/8</link>
        <pubDate>Mon, 11 Apr 2011 19:35:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-8</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <p>Update: it seems this only fails in Signed mode, as soon as the loading screen gets up to the login screen. No matter the display settings, it’s gone.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/7</link>
        <pubDate>Mon, 11 Apr 2011 10:51:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-7</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I believe you can avoid using ‘Xbootclasspath’ by writing your stuff as a java agent.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/6</link>
        <pubDate>Sun, 10 Apr 2011 19:37:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-6</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <p>[quote=“m.dog311, post:4, topic:390380”]It’s probably not the best way, but I usually override java.awt.Canvas completely.</p>
<pre><code class="lang-auto"></code></pre>
<p>Then use Xbootclasspath when you run it.[/quote]<br>
I want to avoid this method, if possible.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/5</link>
        <pubDate>Sun, 10 Apr 2011 19:07:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-5</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@m.dog311 m.dog311]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/m.dog311">@m.dog311</a> wrote:</p>
          <blockquote>
              <p>It’s probably not the best way, but I usually override java.awt.Canvas completely.</p>
<p>[code]package java.awt;</p>
<p>import java.awt.image.BufferStrategy;<br>
import java.awt.image.BufferedImage;</p>
<p>import javax.accessibility.Accessible;<br>
import javax.accessibility.AccessibleContext;<br>
import javax.accessibility.AccessibleRole;<br>
import javax.swing.ImageIcon;</p>
<p>import net.sce.bot.tabs.Bot;</p>
<p>public class Canvas extends Component implements Accessible {<br>
private static final String base = “canvas”;<br>
private static int nameCounter = 0;</p>
<pre><code>private BufferedImage bot;
private BufferedImage game;

private static final long serialVersionUID = -2284879212465893870L;

public Graphics getGraphics() {
	// need to wait till component is added to do this,
	// so we can't just make the images in the constructor
	checkImages();
	
	Graphics render = bot.getGraphics();
	render.drawImage(game, 0, 0, null);
	
	// paint bot graphics here
	((Bot) getParent().getParent()).doClientPainting(render);
	
	// Draw an icon
	Image im = new ImageIcon("icon.png").getImage();
	render.drawImage(im, getWidth() - 32, getHeight() - 32, null);
	
	Graphics g = super.getGraphics();
	g.drawImage(bot, 0, 0, null);
	return game.getGraphics();
}

private void checkImages() {
	Dimension dim = getSize();
	if(bot == null || game == null 
			|| bot.getWidth() != dim.width || bot.getHeight() != dim.height) {
		bot = new BufferedImage(dim.width, dim.height, BufferedImage.TYPE_INT_RGB);
		game = new BufferedImage(dim.width, dim.height, BufferedImage.TYPE_INT_RGB);
	}
}

public Canvas() { 
	
}

public String toString() { return "SCE Canvas"; }

public Canvas(GraphicsConfiguration config) {
	graphicsConfig = config;
}

String constructComponentName() {
	synchronized (getClass()) {
		return base + nameCounter++;
	}
}

public void addNotify() {
	synchronized (getTreeLock()) {
		if (peer == null)
			peer = getToolkit().createCanvas(this);
		super.addNotify();
	}
}

public void paint(Graphics g) {
	g.clearRect(0, 0, width, height);
}

public void update(Graphics g) {
	g.clearRect(0, 0, width, height);
	paint(g);
}

boolean postsOldMouseEvents() {
	return true;
}

public void createBufferStrategy(int numBuffers) {
	super.createBufferStrategy(numBuffers);
}

public void createBufferStrategy(int numBuffers, BufferCapabilities caps)
		throws AWTException {
	super.createBufferStrategy(numBuffers, caps);
}

public BufferStrategy getBufferStrategy() {
	return super.getBufferStrategy();
}

public AccessibleContext getAccessibleContext() {
	if (accessibleContext == null) {
		accessibleContext = new AccessibleAWTCanvas();
	}
	return accessibleContext;
}

protected class AccessibleAWTCanvas extends AccessibleAWTComponent {
	private static final long serialVersionUID = -6325592262103146699L;

	public AccessibleRole getAccessibleRole() {
		return AccessibleRole.CANVAS;
	}
}
</code></pre>
<p>}<br>
[/code]<br>
Then use Xbootclasspath when you run it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/4</link>
        <pubDate>Sun, 10 Apr 2011 19:05:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-4</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="390380">
<div class="title">
<div class="quote-controls"></div>
 super_:</div>
<blockquote>
<p>SD is still native</p>
</blockquote>
</aside>
<p>i gathered this, i am now wondering if there’s a simple way to do this (not looked at the game/deob for a long time)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/3</link>
        <pubDate>Sun, 10 Apr 2011 18:54:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-3</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>SD is still native</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/2</link>
        <pubDate>Sun, 10 Apr 2011 18:51:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-2</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
      <item>
        <title>Canvas</title>
        <dc:creator><![CDATA[@chri5 chri5]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/chri5">@chri5</a> wrote:</p>
          <blockquote>
              <p>When changing the canvas superclass before you could easily override the rendering method. About half a year ago I tried the same method and obviously it only worked on low quality. Now it only works on the initial loading screen, even on the software rendering method.</p>
<p>How do?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/canvas/390380/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/canvas/390380/1</link>
        <pubDate>Sun, 10 Apr 2011 18:40:08 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-390380-1</guid>
        <source url="https://forum.moparisthebest.com/t/canvas/390380.rss">Canvas</source>
      </item>
  </channel>
</rss>
