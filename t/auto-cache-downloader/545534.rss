<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Auto Cache Downloader</title>
    <link>https://forum.moparisthebest.com/t/auto-cache-downloader/545534</link>
    <description>So I&#39;m having a problem getting my cache to load on my client. I&#39;m not sure what to do. I&#39;m not sure what I&#39;m supposed to put in my client.java

Here is my Signlink.java
[code]
package sign;

import java.applet.Applet;
import java.io.*;
import java.net.*;

public final class signlink
    implements Runnable
{

    public static void startpriv(InetAddress inetaddress)
    {
        threadliveid = (int)(Math.random() * 99999999D);
        if(active)
        {
            try
            {
                Thread.sleep(500L);
            }
            catch(Exception _ex) { }
            active = false;
        }
        socketreq = 0;
        threadreq = null;
        dnsreq = null;
        savereq = null;
        urlreq = null;
        socketip = inetaddress;
        Thread thread = new Thread(new signlink());
        thread.setDaemon(true);
        thread.start();
        while(!active)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
    }

	public static void setuid() {
	uid = 26342;
	}
    public void run()
    {
        active = true;
        String s = findcachedir();
       // uid = getuid(s);
	   uid = 26342;
        try {
            cache_dat = new RandomAccessFile(s + &quot;main_file_cache.dat&quot;, &quot;rw&quot;);
            for(int j = 0; j &lt; 5; j++) {
                cache_idx[j] = new RandomAccessFile(s + &quot;main_file_cache.idx&quot; + j, &quot;rw&quot;);
			}
        } catch(Exception exception) {
            exception.printStackTrace();
        }
        for(int i = threadliveid; threadliveid == i;)
        {
            if(socketreq != 0)
            {
                try
                {
                    socket = new Socket(socketip, socketreq);
                }
                catch(Exception _ex)
                {
                    socket = null;
                }
                socketreq = 0;
            } else
            if(threadreq != null)
            {
                Thread thread = new Thread(threadreq);
                thread.setDaemon(true);
                thread.start();
                thread.setPriority(threadreqpri);
                threadreq = null;
            } else
            if(dnsreq != null)
            {
                try
                {
                    dns = InetAddress.getByName(dnsreq).getHostName();
                }
                catch(Exception _ex)
                {
                    dns = &quot;unknown&quot;;
                }
                dnsreq = null;
            } else
            if(savereq != null)
            {
                if(savebuf != null)
                    try
                    {
                        FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                        fileoutputstream.write(savebuf, 0, savelen);
                        fileoutputstream.close();
                    }
                    catch(Exception _ex) { }
                if(waveplay)
                {
                    String wave = s + savereq;
                    waveplay = false;
                }
                if(midiplay)
                {
                    midi = s + savereq;
                    midiplay = false;
                }
                savereq = null;
            } else
            if(urlreq != null)
            {
                try
                {
                    System.out.println(&quot;urlstream&quot;);
                    urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
                }
                catch(Exception _ex)
                {
                    urlstream = null;
                }
                urlreq = null;
            }
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }
        }

    }

    public static String findcachedir() {
        String as[] = {&quot;C:/&quot;};
        if(storeid &lt; 32 || storeid &gt; 34)
            storeid = 32;
        String s = &quot;UnitedRebellionCache&quot;;
        for(int i = 0; i &lt; as.length; i++)
            try {
                String s1 = as[i];
                if(s1.length() &gt; 0) {
                    File file = new File(s1);
                    if(!file.exists())
                        continue;
                }
                File file1 = new File(s1 + s);
                if(file1.exists() || file1.mkdir())
                    return s1 + s + &quot;/&quot;;
            }
            catch(Exception _ex) { }
        return null;
    }

    public static int getuid(String s) {
	return 26342;
    }
	
   /* private static int getuid(String s)
    {
        try
        {
            File file = new File(s + &quot;uid.dat&quot;);
            if(!file.exists() || file.length() &lt; 4L)
            {
                DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + &quot;uid.dat&quot;));
                dataoutputstream.writeInt((int)(Math.random() * 99999999D));
                dataoutputstream.close();
            }
        }
        catch(Exception _ex) { }
        try
        {
            DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + &quot;uid.dat&quot;));
            int i = datainputstream.readInt();
            datainputstream.close();
            return i + 1;
        }
        catch(Exception _ex)
        {
            return 0;
        }
    }*/

    public static synchronized Socket opensocket(int i)
        throws IOException
    {
        for(socketreq = i; socketreq != 0;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(socket == null)
            throw new IOException(&quot;could not open socket&quot;);
        else
            return socket;
    }

    public static synchronized DataInputStream openurl(String s)
        throws IOException
    {
        for(urlreq = s; urlreq != null;)
            try
            {
                Thread.sleep(50L);
            }
            catch(Exception _ex) { }

        if(urlstream == null)
            throw new IOException(&quot;could not open: &quot; + s);
        else
            return urlstream;
    }

    public static synchronized void dnslookup(String s)
    {
        dns = s;
        dnsreq = s;
    }

    public static synchronized void startthread(Runnable runnable, int i)
    {
        threadreqpri = i;
        threadreq = runnable;
    }

    public static synchronized boolean wavesave(byte abyte0[], int i)
    {
        /*if(i &gt; 0x1e8480)
            return false;
        if(savereq != null)
        {
            return false;
        } else
        {
            wavepos = (wavepos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }*/
		return false;
    }

    public static synchronized boolean wavereplay()
    {
        if(savereq != null)
        {
            return false;
        } else
        {
            savebuf = null;
            waveplay = true;
            savereq = &quot;sound&quot; + wavepos + &quot;.wav&quot;;
            return true;
        }
    }

    public static synchronized void midisave(byte abyte0[], int i)
    {
        /*if(i &gt; 0x1e8480)
            return;
        if(savereq != null)
        {
        } else
        {
            midipos = (midipos + 1) % 5;
            savelen = i;
            savebuf = abyte0;
            midiplay = true;
            savereq = &quot;jingle&quot; + midipos + &quot;.mid&quot;;
        }*/
    }

    public static void reporterror(String s)
    {
        System.out.println(&quot;Error: &quot; + s);
    }

    private signlink()
    {
    }

    public static final int clientversion = 317;
   public static int uid;
    public static int storeid = 32;
    public static RandomAccessFile cache_dat = null;
    public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];
    public static boolean sunjava;
    public static Applet mainapp = null;
    private static boolean active;
    private static int threadliveid;
    private static InetAddress socketip;
    private static int socketreq;
    private static Socket socket = null;
    private static int threadreqpri = 1;
    private static Runnable threadreq = null;
    private static String dnsreq = null;
    public static String dns = null;
    private static String urlreq = null;
    private static DataInputStream urlstream = null;
    private static int savelen;
    private static String savereq = null;
    private static byte[] savebuf = null;
    private static boolean midiplay;
    private static int midipos;
    public static String midi = null;
    public static int midivol;
    public static int midifade;
    private static boolean waveplay;
    private static int wavepos;
    public static int wavevol;
    public static boolean reporterror = true;
    public static String errorname = &quot;&quot;;

}[/code]

here is my cachedownloader.java
[code]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;
import javax.swing.*;
import java.awt.event.*;
import java.net.*;
import java.io.*;
import sign.signlink;

public class CacheDownloader {

        private client client;
		client frame;
        private final int BUFFER = 1024;
		/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
		/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
        /* OPTION 3*/private String cacheLink = &quot;https://dl.dropboxusercontent.com/u/58681657/UnitedRebellionCache.zip&quot; ;   // URL of cache on remote server. IE: &quot;http://google.com/cache.zip&quot;
		/* OPTION 4 */private String cacheDir = &quot;C:/UnitedRebellionCache&quot; ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing &#39;/&#39; 
		/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        private String fileToExtract = getCacheDir() + getArchivedName();
        public CacheDownloader(client client) {
                this.client = client;
        }

        private void drawLoadingText(String text) {
                client.drawLoadingText(35, text);
        }
		
        private void drawLoadingText(int amount, String text) {
                client.drawLoadingText(amount, text);
        }

        private String getCacheLink() {
                return cacheLink;
        }
		
        private String getCacheDir() {
                return cacheDir;
        }

        private int getCacheVersion() {
                return VERSION;
        }
		
		private int pauseHandlerDelay1000Equals1Second() {
				return pauseHandlerDelay;
		}
	
		private String localCacheFile() {
				return getCacheDir() + getArchivedName();
		}
        public CacheDownloader downloadCache() {
                try {
                File location = new File(getCacheDir());
                File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
                if(!location.exists()) {
						cacheHasUpdated();
                        downloadFile(getCacheLink(), getArchivedName());
                        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                        versionFile.close();
                } else {
                        if(!version.exists()) {
								cacheHasUpdated();
                                downloadFile(getCacheLink(), getArchivedName());
                                BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
                                versionFile.close();
                        } else {
                                return null;
                        }
                }
                } catch(Exception e) {
                }
                return null;
        }			
			public void cacheHasUpdated() {
				JOptionPane.showMessageDialog(frame, &quot;It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.&quot;, &quot;Cache Version Invalid&quot;, JOptionPane.WARNING_MESSAGE);
				}
        private void downloadFile(String adress, String localFileName) {
                OutputStream out = null;
                URLConnection conn;
                InputStream in = null;
                try {
                        URL url = new URL(adress);
                        out = new BufferedOutputStream(
                        new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 
                        conn = url.openConnection();
                        in = conn.getInputStream(); 
                        byte[] data = new byte[BUFFER]; 
                        int numRead;
                        long numWritten = 0;
                        int length = conn.getContentLength();
                        while((numRead = in.read(data)) != -1) {
                                out.write(data, 0, numRead);
                                numWritten += numRead;
                                int percentage = (int)(((double)numWritten / (double)length) * 100D);
                                drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%&quot;);
                        }
                        System.out.println(localFileName + &quot;\t&quot; + numWritten);
                        drawLoadingText(&quot;Finished downloading &quot;+getArchivedName()+&quot;!&quot;);
                } catch (Exception exception) {
                        exception.printStackTrace();
                } finally {
                        try {
                                if (in != null) {
                                        in.close();
                                }
                                if (out != null) {
                                        out.close();
                                }
                        } catch (IOException ioe) {
                        }
                }
				fileExists();
        }
        private String getArchivedName() {
                int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
                if (lastSlashIndex &gt;= 0 
                        &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                        return getCacheLink().substring(lastSlashIndex + 1);
                } else {
                        System.err.println(&quot;error retreiving archivaed name.&quot;);
                }
                return &quot;&quot;;
        }
	public void fileExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;The cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please download it manually at:&quot;);
	  System.out.println(localCacheFile());
	  System.out.println(&quot;File Directory:&quot;);
	  System.out.println(getCacheDir());
	  pauseHandler();
	cacheDownloadError();
    }else {
      drawLoadingText(&quot;Your cache is downloaded and ready to un-zip!&quot;);
	  pauseHandler();
	  unZip();	  
    }
	}
	        private void unZip() {
            try {
                    InputStream in = 
                    new BufferedInputStream(new FileInputStream(fileToExtract));
                ZipInputStream zin = new ZipInputStream(in);
                ZipEntry e;
                while((e=zin.getNextEntry()) != null) {
                               if(e.isDirectory()) {
                        (new File(getCacheDir() + e.getName())).mkdir();
                               } else {
                    if (e.getName().equals(fileToExtract)) {
                        unzip(zin, fileToExtract);
                        break;
                    }
                               unzip(zin, getCacheDir() + e.getName());
                    }
					drawLoadingText(&quot;[UN-ZIP]: &quot; + e.getName());
                }
                zin.close();
            } catch(Exception e) {
                e.printStackTrace();
            }
			pauseHandler();
			unNeededCacheExists();
        }
        private void unzip(ZipInputStream zin, String s) 
                throws IOException {
                FileOutputStream out = new FileOutputStream(s);
                byte [] b = new byte[BUFFER];
                int len = 0;

                while ((len = zin.read(b)) != -1) {
                        out.write(b,0,len);
				}
        }
	public void unNeededCacheExists() {
    File file=new File(localCacheFile());
    boolean exists = file.exists();
    if (!exists) {
      System.out.println(&quot;Your cache was not downloaded correctly.&quot;);
	  System.out.println(&quot;Please try to re re run the client.&quot;);
    }else {
      System.out.println(&quot;Your cache is on your HDD&quot;);
	  System.out.println(&quot;Auto Cache Deleter Attempting to delete...&quot;);
	  delete();	  
    }
	}
	    public void delete() {	
    	try{
    		File file = new File(localCacheFile());
    		if(file.delete()){
    			drawLoadingText(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
				System.out.println(&quot;[SUCCESS]&quot; +file.getName()+ &quot; was deleted!&quot;);
    		}else{
    			drawLoadingText(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
				System.out.println(&quot;[ERROR]&quot; +file.getName()+ &quot; was not deleted.&quot;);
    		}
    	}catch(Exception e){
    		e.printStackTrace();
    	}
    }
	public void cacheDownloadError() {
		try {
            drawLoadingText(&quot;Cache Download Error - Contact an admin&quot;);
			}
			catch(Exception e){
    		e.printStackTrace();
    	}
			}
  public void pauseHandler() {
     try {
       Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());
       }
     catch (InterruptedException e) {
       e.printStackTrace();
       }
     }  
}
/*************************
@author Google411
*************************/[/code]

What am I doing wrong?</description>
    
    <lastBuildDate>Thu, 31 Jul 2014 21:05:11 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/auto-cache-downloader/545534.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Auto Cache Downloader</title>
        <dc:creator><![CDATA[@Teh_Vodka Teh Vodka]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/teh_vodka">@Teh_Vodka</a> wrote:</p>
          <blockquote>
              <p>Are you running a server alone? Because im interested in Co-owning with someone. Also im having the same problem but maybe I can help with the problem, add me on Skype</p>
<p>skittles.harr0x</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-cache-downloader/545534/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-cache-downloader/545534/2</link>
        <pubDate>Thu, 31 Jul 2014 21:05:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545534-2</guid>
        <source url="https://forum.moparisthebest.com/t/auto-cache-downloader/545534.rss">Auto Cache Downloader</source>
      </item>
      <item>
        <title>Auto Cache Downloader</title>
        <dc:creator><![CDATA[@whitefox125 whitefox125]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whitefox125">@whitefox125</a> wrote:</p>
          <blockquote>
              <p>So I’m having a problem getting my cache to load on my client. I’m not sure what to do. I’m not sure what I’m supposed to put in my client.java</p>
<p>Here is my Signlink.java</p>
<p>[code]<br>
package sign;</p>
<p>import java.applet.Applet;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.</em>;</p>
<p>public final class signlink<br>
implements Runnable<br>
{</p>
<pre><code>public static void startpriv(InetAddress inetaddress)
{
    threadliveid = (int)(Math.random() * 99999999D);
    if(active)
    {
        try
        {
            Thread.sleep(500L);
        }
        catch(Exception _ex) { }
        active = false;
    }
    socketreq = 0;
    threadreq = null;
    dnsreq = null;
    savereq = null;
    urlreq = null;
    socketip = inetaddress;
    Thread thread = new Thread(new signlink());
    thread.setDaemon(true);
    thread.start();
    while(!active)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
}

public static void setuid() {
uid = 26342;
}
public void run()
{
    active = true;
    String s = findcachedir();
   // uid = getuid(s);
   uid = 26342;
    try {
        cache_dat = new RandomAccessFile(s + "main_file_cache.dat", "rw");
        for(int j = 0; j &lt; 5; j++) {
            cache_idx[j] = new RandomAccessFile(s + "main_file_cache.idx" + j, "rw");
		}
    } catch(Exception exception) {
        exception.printStackTrace();
    }
    for(int i = threadliveid; threadliveid == i;)
    {
        if(socketreq != 0)
        {
            try
            {
                socket = new Socket(socketip, socketreq);
            }
            catch(Exception _ex)
            {
                socket = null;
            }
            socketreq = 0;
        } else
        if(threadreq != null)
        {
            Thread thread = new Thread(threadreq);
            thread.setDaemon(true);
            thread.start();
            thread.setPriority(threadreqpri);
            threadreq = null;
        } else
        if(dnsreq != null)
        {
            try
            {
                dns = InetAddress.getByName(dnsreq).getHostName();
            }
            catch(Exception _ex)
            {
                dns = "unknown";
            }
            dnsreq = null;
        } else
        if(savereq != null)
        {
            if(savebuf != null)
                try
                {
                    FileOutputStream fileoutputstream = new FileOutputStream(s + savereq);
                    fileoutputstream.write(savebuf, 0, savelen);
                    fileoutputstream.close();
                }
                catch(Exception _ex) { }
            if(waveplay)
            {
                String wave = s + savereq;
                waveplay = false;
            }
            if(midiplay)
            {
                midi = s + savereq;
                midiplay = false;
            }
            savereq = null;
        } else
        if(urlreq != null)
        {
            try
            {
                System.out.println("urlstream");
                urlstream = new DataInputStream((new URL(mainapp.getCodeBase(), urlreq)).openStream());
            }
            catch(Exception _ex)
            {
                urlstream = null;
            }
            urlreq = null;
        }
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }
    }

}

public static String findcachedir() {
    String as[] = {"C:/"};
    if(storeid &lt; 32 || storeid &gt; 34)
        storeid = 32;
    String s = "UnitedRebellionCache";
    for(int i = 0; i &lt; as.length; i++)
        try {
            String s1 = as[i];
            if(s1.length() &gt; 0) {
                File file = new File(s1);
                if(!file.exists())
                    continue;
            }
            File file1 = new File(s1 + s);
            if(file1.exists() || file1.mkdir())
                return s1 + s + "/";
        }
        catch(Exception _ex) { }
    return null;
}

public static int getuid(String s) {
return 26342;
}
</code></pre>
<p>/* private static int getuid(String s)<br>
{<br>
try<br>
{<br>
File file = new File(s + “uid.dat”);<br>
if(!file.exists() || file.length() &lt; 4L)<br>
{<br>
DataOutputStream dataoutputstream = new DataOutputStream(new FileOutputStream(s + “uid.dat”));<br>
dataoutputstream.writeInt((int)(Math.random() * 99999999D));<br>
dataoutputstream.close();<br>
}<br>
}<br>
catch(Exception _ex) { }<br>
try<br>
{<br>
DataInputStream datainputstream = new DataInputStream(new FileInputStream(s + “uid.dat”));<br>
int i = datainputstream.readInt();<br>
datainputstream.close();<br>
return i + 1;<br>
}<br>
catch(Exception _ex)<br>
{<br>
return 0;<br>
}<br>
}*/</p>
<pre><code>public static synchronized Socket opensocket(int i)
    throws IOException
{
    for(socketreq = i; socketreq != 0;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(socket == null)
        throw new IOException("could not open socket");
    else
        return socket;
}

public static synchronized DataInputStream openurl(String s)
    throws IOException
{
    for(urlreq = s; urlreq != null;)
        try
        {
            Thread.sleep(50L);
        }
        catch(Exception _ex) { }

    if(urlstream == null)
        throw new IOException("could not open: " + s);
    else
        return urlstream;
}

public static synchronized void dnslookup(String s)
{
    dns = s;
    dnsreq = s;
}

public static synchronized void startthread(Runnable runnable, int i)
{
    threadreqpri = i;
    threadreq = runnable;
}

public static synchronized boolean wavesave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return false;
    if(savereq != null)
    {
        return false;
    } else
    {
        wavepos = (wavepos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }*/
	return false;
}

public static synchronized boolean wavereplay()
{
    if(savereq != null)
    {
        return false;
    } else
    {
        savebuf = null;
        waveplay = true;
        savereq = "sound" + wavepos + ".wav";
        return true;
    }
}

public static synchronized void midisave(byte abyte0[], int i)
{
    /*if(i &gt; 0x1e8480)
        return;
    if(savereq != null)
    {
    } else
    {
        midipos = (midipos + 1) % 5;
        savelen = i;
        savebuf = abyte0;
        midiplay = true;
        savereq = "jingle" + midipos + ".mid";
    }*/
}

public static void reporterror(String s)
{
    System.out.println("Error: " + s);
}

private signlink()
{
}

public static final int clientversion = 317;
</code></pre>
<p>public static int uid;<br>
public static int storeid = 32;<br>
public static RandomAccessFile cache_dat = null;<br>
public static final RandomAccessFile[] cache_idx = new RandomAccessFile[5];<br>
public static boolean sunjava;<br>
public static Applet mainapp = null;<br>
private static boolean active;<br>
private static int threadliveid;<br>
private static InetAddress socketip;<br>
private static int socketreq;<br>
private static Socket socket = null;<br>
private static int threadreqpri = 1;<br>
private static Runnable threadreq = null;<br>
private static String dnsreq = null;<br>
public static String dns = null;<br>
private static String urlreq = null;<br>
private static DataInputStream urlstream = null;<br>
private static int savelen;<br>
private static String savereq = null;<br>
private static byte[] savebuf = null;<br>
private static boolean midiplay;<br>
private static int midipos;<br>
public static String midi = null;<br>
public static int midivol;<br>
public static int midifade;<br>
private static boolean waveplay;<br>
private static int wavepos;<br>
public static int wavevol;<br>
public static boolean reporterror = true;<br>
public static String errorname = “”;</p>
<p>}[/code]</p>
<p>here is my cachedownloader.java</p>
<p>[code]<br>
import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;<br>
import javax.swing.<em>;<br>
import java.awt.event.</em>;<br>
import <a href="http://java.net" rel="nofollow noopener">java.net</a>.<em>;<br>
import <a href="http://java.io" rel="nofollow noopener">java.io</a>.</em>;<br>
import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>    private client client;
	client frame;
    private final int BUFFER = 1024;
	/* OPTIONS START HERE *///----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    /* OPTION 1 */private final int VERSION = 1 ;   // Version of cache, make it +1 if you updated your cache on your remote server
	/* OPTION 2 */private final int pauseHandlerDelay = 1000 ;   // 1000  = 1 second. This is for when ever the pauseHandler void is called. It just pauses the entire code for the amount of time set.
    /* OPTION 3*/private String cacheLink = "https://dl.dropboxusercontent.com/u/58681657/UnitedRebellionCache.zip" ;   // URL of cache on remote server. IE: "http://google.com/cache.zip"
	/* OPTION 4 */private String cacheDir = "C:/UnitedRebellionCache" ;   // Local link to cache directory - Same as sign.signlink.findcachedir() - Remember trailing '/' 
	/* OPTIONS END HERE *///--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    private String fileToExtract = getCacheDir() + getArchivedName();
    public CacheDownloader(client client) {
            this.client = client;
    }

    private void drawLoadingText(String text) {
            client.drawLoadingText(35, text);
    }
	
    private void drawLoadingText(int amount, String text) {
            client.drawLoadingText(amount, text);
    }

    private String getCacheLink() {
            return cacheLink;
    }
	
    private String getCacheDir() {
            return cacheDir;
    }

    private int getCacheVersion() {
            return VERSION;
    }
	
	private int pauseHandlerDelay1000Equals1Second() {
			return pauseHandlerDelay;
	}

	private String localCacheFile() {
			return getCacheDir() + getArchivedName();
	}
    public CacheDownloader downloadCache() {
            try {
            File location = new File(getCacheDir());
            File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
            if(!location.exists()) {
					cacheHasUpdated();
                    downloadFile(getCacheLink(), getArchivedName());
                    BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                    versionFile.close();
            } else {
                    if(!version.exists()) {
							cacheHasUpdated();
                            downloadFile(getCacheLink(), getArchivedName());
                            BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
                            versionFile.close();
                    } else {
                            return null;
                    }
            }
            } catch(Exception e) {
            }
            return null;
    }			
		public void cacheHasUpdated() {
			JOptionPane.showMessageDialog(frame, "It seems you either, 1. Have no cache on localhost or, 2. You have an older version of the cache. Click OK to download the new cache.", "Cache Version Invalid", JOptionPane.WARNING_MESSAGE);
			}
    private void downloadFile(String adress, String localFileName) {
            OutputStream out = null;
            URLConnection conn;
            InputStream in = null;
            try {
                    URL url = new URL(adress);
                    out = new BufferedOutputStream(
                    new FileOutputStream(getCacheDir() + "/" +localFileName)); 
                    conn = url.openConnection();
                    in = conn.getInputStream(); 
                    byte[] data = new byte[BUFFER]; 
                    int numRead;
                    long numWritten = 0;
                    int length = conn.getContentLength();
                    while((numRead = in.read(data)) != -1) {
                            out.write(data, 0, numRead);
                            numWritten += numRead;
                            int percentage = (int)(((double)numWritten / (double)length) * 100D);
                            drawLoadingText(percentage, "Downloading Cache " + percentage + "%");
                    }
                    System.out.println(localFileName + "\t" + numWritten);
                    drawLoadingText("Finished downloading "+getArchivedName()+"!");
            } catch (Exception exception) {
                    exception.printStackTrace();
            } finally {
                    try {
                            if (in != null) {
                                    in.close();
                            }
                            if (out != null) {
                                    out.close();
                            }
                    } catch (IOException ioe) {
                    }
            }
			fileExists();
    }
    private String getArchivedName() {
            int lastSlashIndex = getCacheLink().lastIndexOf('/');
            if (lastSlashIndex &gt;= 0 
                    &amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
                    return getCacheLink().substring(lastSlashIndex + 1);
            } else {
                    System.err.println("error retreiving archivaed name.");
            }
            return "";
    }
public void fileExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("The cache was not downloaded correctly.");
  System.out.println("Please download it manually at:");
  System.out.println(localCacheFile());
  System.out.println("File Directory:");
  System.out.println(getCacheDir());
  pauseHandler();
cacheDownloadError();
}else {
  drawLoadingText("Your cache is downloaded and ready to un-zip!");
  pauseHandler();
  unZip();	  
}
}
        private void unZip() {
        try {
                InputStream in = 
                new BufferedInputStream(new FileInputStream(fileToExtract));
            ZipInputStream zin = new ZipInputStream(in);
            ZipEntry e;
            while((e=zin.getNextEntry()) != null) {
                           if(e.isDirectory()) {
                    (new File(getCacheDir() + e.getName())).mkdir();
                           } else {
                if (e.getName().equals(fileToExtract)) {
                    unzip(zin, fileToExtract);
                    break;
                }
                           unzip(zin, getCacheDir() + e.getName());
                }
				drawLoadingText("[UN-ZIP]: " + e.getName());
            }
            zin.close();
        } catch(Exception e) {
            e.printStackTrace();
        }
		pauseHandler();
		unNeededCacheExists();
    }
    private void unzip(ZipInputStream zin, String s) 
            throws IOException {
            FileOutputStream out = new FileOutputStream(s);
            byte [] b = new byte[BUFFER];
            int len = 0;

            while ((len = zin.read(b)) != -1) {
                    out.write(b,0,len);
			}
    }
public void unNeededCacheExists() {
File file=new File(localCacheFile());
boolean exists = file.exists();
if (!exists) {
  System.out.println("Your cache was not downloaded correctly.");
  System.out.println("Please try to re re run the client.");
}else {
  System.out.println("Your cache is on your HDD");
  System.out.println("Auto Cache Deleter Attempting to delete...");
  delete();	  
}
}
    public void delete() {	
	try{
		File file = new File(localCacheFile());
		if(file.delete()){
			drawLoadingText("[SUCCESS]" +file.getName()+ " was deleted!");
			System.out.println("[SUCCESS]" +file.getName()+ " was deleted!");
		}else{
			drawLoadingText("[ERROR]" +file.getName()+ " was not deleted.");
			System.out.println("[ERROR]" +file.getName()+ " was not deleted.");
		}
	}catch(Exception e){
		e.printStackTrace();
	}
}
public void cacheDownloadError() {
	try {
        drawLoadingText("Cache Download Error - Contact an admin");
		}
		catch(Exception e){
		e.printStackTrace();
	}
		}
</code></pre>
<p>public void pauseHandler() {<br>
try {<br>
Thread.currentThread().sleep(pauseHandlerDelay1000Equals1Second());<br>
}<br>
catch (InterruptedException e) {<br>
e.printStackTrace();<br>
}<br>
}<br>
}<br>
/*************************<br>
<span class="mention">@author</span> Google411<br>
*************************/[/code]</p>
<p>What am I doing wrong?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/auto-cache-downloader/545534/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/auto-cache-downloader/545534/1</link>
        <pubDate>Thu, 31 Jul 2014 19:34:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-545534-1</guid>
        <source url="https://forum.moparisthebest.com/t/auto-cache-downloader/545534.rss">Auto Cache Downloader</source>
      </item>
  </channel>
</rss>
