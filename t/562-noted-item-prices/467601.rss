<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>562 Noted Item Prices</title>
    <link>https://forum.moparisthebest.com/t/562-noted-item-prices/467601</link>
    <description>So I noticed how on a lot of 562&#39;s the prices are really fucked.  Most of the items that are fucked are noted.  So I located the file that loaded the prices and looked at what sent the item prices.  It was coded like: [code=java]
						itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
						itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
						itemPriceMax[ItemId] = Integer.parseInt(token3[3]);[/code]
What I decided to do was simply check if it was noted and made it use the item price before it, but it doesn&#39;t work for some reason. Here&#39;s what it looks like: [code=java]public class LoadPrices {

	private final int [] itemPriceMin = new int[30000];
	private final int [] itemPriceMed = new int[30000];
	private final int [] itemPriceMax = new int[30000];
	
	public void DumpData(int Id) {
		try {
			BufferedWriter  bf = new BufferedWriter(new FileWriter(&quot;./data/mapdata/special/&quot;+Id+&quot;.txt&quot;, false));
			bf.write(&quot;0&quot;);
			bf.newLine();
			bf.flush();
			bf.write(&quot;0&quot;);
			bf.newLine();
			bf.flush();
			bf.write(&quot;0&quot;);
			bf.newLine();
			bf.flush();
			bf.write(&quot;0&quot;);
			bf.newLine();
			bf.flush();
			bf.flush();
			bf.close();
			bf = null; 
		} catch(Exception e) {
		}
	}
	
	public void LoadObjects() {
	
	}

	public LoadPrices() {
		/*for(int i = 0; i &lt; 17500; i++) {
			DumpData(i);
		}*/
		int amt = 0;
		String line = &quot;&quot;, token = &quot;&quot;, token2 = &quot;&quot;, token2_2 = &quot;&quot;, token3[] = new String[10];
		BufferedReader list = null;
		try {
			list = new BufferedReader(new FileReader(&quot;./data/prices.cfg&quot;));
			line = list.readLine().trim();
		} catch (Exception e) {
			Logger.getInstance().info(&quot;Error loading item list.&quot;);
		}
		while (line != null) {
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot).trim();
				token2 = line.substring(spot + 1).trim();
				token2_2 = token2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token2_2 = token2_2.replaceAll(&quot;\t\t&quot;, &quot;\t&quot;);
				token3 = token2_2.split(&quot;\t&quot;);
				if (token.equals(&quot;Item&quot;)) {
					amt ++;
					int ItemId = Integer.parseInt(token3[0]);
					if(noted(ItemId)){
						itemPriceMin[ItemId] = getMinimumPrice(ItemId-1);
						itemPriceMed[ItemId] = getNormalPrice(ItemId-1);
						itemPriceMax[ItemId] = getMaximumPrice(ItemId-1);
					} else {
						itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
						itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
						itemPriceMax[ItemId] = Integer.parseInt(token3[3]);
					}
				}             
			} else {
				if (line.equals(&quot;[ENDOFPRICELIST]&quot;)) {
					try {
						LoadObjects();
						Logger.getInstance().info(&quot;Loaded &quot;+ amt + &quot;item prices.&quot;);
						list.close();
					} catch (Exception exception) {
					}
					list = null;
					return;
				}
			}
			try {
				line = list.readLine().trim();
			} catch (Exception exception1) {
				try {
					list.close();
				} catch (Exception exception) {
				}
				list = null;
				return;
			}
		}
	}
	public boolean noted(int item){
		ItemDefinition def = ItemDefinition.forId(item);
		if(def.isNoted())
			return true;
		else
			return false;
	}
	public int getMinimumPrice(int Id) {
		return itemPriceMin[Id];
	}

	public int getNormalPrice(int Id) {
		return itemPriceMed[Id];
	}

	public int getMaximumPrice(int Id) {
		return itemPriceMax[Id];
	}

}[/code] The part I changed was here: [code=java]
				if (token.equals(&quot;Item&quot;)) {
					amt ++;
					int ItemId = Integer.parseInt(token3[0]);
					if(noted(ItemId)){
						itemPriceMin[ItemId] = getMinimumPrice(ItemId-1);
						itemPriceMed[ItemId] = getNormalPrice(ItemId-1);
						itemPriceMax[ItemId] = getMaximumPrice(ItemId-1);
					} else {
						itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
						itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
						itemPriceMax[ItemId] = Integer.parseInt(token3[3]);
					}
				} [/code]I also added a boolean to check if the item is noted.  I&#39;m not seeing why this won&#39;t work, could someone please help me?</description>
    
    <lastBuildDate>Mon, 12 Nov 2012 21:25:59 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/562-noted-item-prices/467601.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>562 Noted Item Prices</title>
        <dc:creator><![CDATA[@sageofmali sageofmali]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sageofmali">@sageofmali</a> wrote:</p>
          <blockquote>
              <p>So I noticed how on a lot of 562’s the prices are really fucked.  Most of the items that are fucked are noted.  So I located the file that loaded the prices and looked at what sent the item prices.  It was coded like: <code>
						itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
						itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
						itemPriceMax[ItemId] = Integer.parseInt(token3[3]);</code><br>
What I decided to do was simply check if it was noted and made it use the item price before it, but it doesn’t work for some reason. Here’s what it looks like: [code=java]public class LoadPrices {</p>
<pre><code>private final int [] itemPriceMin = new int[30000];
private final int [] itemPriceMed = new int[30000];
private final int [] itemPriceMax = new int[30000];

public void DumpData(int Id) {
	try {
		BufferedWriter  bf = new BufferedWriter(new FileWriter("./data/mapdata/special/"+Id+".txt", false));
		bf.write("0");
		bf.newLine();
		bf.flush();
		bf.write("0");
		bf.newLine();
		bf.flush();
		bf.write("0");
		bf.newLine();
		bf.flush();
		bf.write("0");
		bf.newLine();
		bf.flush();
		bf.flush();
		bf.close();
		bf = null; 
	} catch(Exception e) {
	}
}

public void LoadObjects() {

}

public LoadPrices() {
	/*for(int i = 0; i &lt; 17500; i++) {
		DumpData(i);
	}*/
	int amt = 0;
	String line = "", token = "", token2 = "", token2_2 = "", token3[] = new String[10];
	BufferedReader list = null;
	try {
		list = new BufferedReader(new FileReader("./data/prices.cfg"));
		line = list.readLine().trim();
	} catch (Exception e) {
		Logger.getInstance().info("Error loading item list.");
	}
	while (line != null) {
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot).trim();
			token2 = line.substring(spot + 1).trim();
			token2_2 = token2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token2_2 = token2_2.replaceAll("\t\t", "\t");
			token3 = token2_2.split("\t");
			if (token.equals("Item")) {
				amt ++;
				int ItemId = Integer.parseInt(token3[0]);
				if(noted(ItemId)){
					itemPriceMin[ItemId] = getMinimumPrice(ItemId-1);
					itemPriceMed[ItemId] = getNormalPrice(ItemId-1);
					itemPriceMax[ItemId] = getMaximumPrice(ItemId-1);
				} else {
					itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
					itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
					itemPriceMax[ItemId] = Integer.parseInt(token3[3]);
				}
			}             
		} else {
			if (line.equals("[ENDOFPRICELIST]")) {
				try {
					LoadObjects();
					Logger.getInstance().info("Loaded "+ amt + "item prices.");
					list.close();
				} catch (Exception exception) {
				}
				list = null;
				return;
			}
		}
		try {
			line = list.readLine().trim();
		} catch (Exception exception1) {
			try {
				list.close();
			} catch (Exception exception) {
			}
			list = null;
			return;
		}
	}
}
public boolean noted(int item){
	ItemDefinition def = ItemDefinition.forId(item);
	if(def.isNoted())
		return true;
	else
		return false;
}
public int getMinimumPrice(int Id) {
	return itemPriceMin[Id];
}

public int getNormalPrice(int Id) {
	return itemPriceMed[Id];
}

public int getMaximumPrice(int Id) {
	return itemPriceMax[Id];
}
</code></pre>
<p>}[/code] The part I changed was here: <code>
				if (token.equals("Item")) {
					amt ++;
					int ItemId = Integer.parseInt(token3[0]);
					if(noted(ItemId)){
						itemPriceMin[ItemId] = getMinimumPrice(ItemId-1);
						itemPriceMed[ItemId] = getNormalPrice(ItemId-1);
						itemPriceMax[ItemId] = getMaximumPrice(ItemId-1);
					} else {
						itemPriceMin[ItemId] = Integer.parseInt(token3[1]);
						itemPriceMed[ItemId] = Integer.parseInt(token3[2]);
						itemPriceMax[ItemId] = Integer.parseInt(token3[3]);
					}
				} </code>I also added a boolean to check if the item is noted.  I’m not seeing why this won’t work, could someone please help me?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/562-noted-item-prices/467601/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/562-noted-item-prices/467601/1</link>
        <pubDate>Mon, 12 Nov 2012 21:25:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-467601-1</guid>
        <source url="https://forum.moparisthebest.com/t/562-noted-item-prices/467601.rss">562 Noted Item Prices</source>
      </item>
  </channel>
</rss>
