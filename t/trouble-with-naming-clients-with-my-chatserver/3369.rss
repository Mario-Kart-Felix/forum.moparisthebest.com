<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Trouble with naming clients with my chatserver</title>
    <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369</link>
    <description>hey everyone i have this code and here and i want to know how to name the clients with a specified name from a string in the client. yeah heres my files

ill love you forever if you can help me out

[code]
import java.net.*;
import java.io.*;

public class ChatServer implements Runnable
{  private ChatServerThread clients[] = new ChatServerThread[50];
   private ServerSocket server = null;
   private Thread       thread = null;
   private int clientCount = 0;
   	
   public static void main(String args[])
   {  
   	  ChatServer server = null;
   	  server = new ChatServer(4444);
      if (args.length != 1)
         System.out.println(&quot;Usage: java ChatServer port&quot;);
      else
         server = new ChatServer(Integer.parseInt(args[0]));
   }
   
   public ChatServer(int port)
   {  try
      {  
      	 
      	 System.out.println(&quot;Binding to port &quot; + port + &quot;, please wait  ...&quot;);
         server = new ServerSocket(port);  
         System.out.println(&quot;Server started: &quot; + server);
         start(); }
      catch(IOException ioe)
      {  System.out.println(&quot;Can not bind to port &quot; + port + &quot;: &quot; + ioe.getMessage()); }
   }
   public void run()
   {  while (thread != null)
      {  try
         {  System.out.println(&quot;Waiting for a client ...&quot;); 
            addThread(server.accept()); }
         catch(IOException ioe)
         {  System.out.println(&quot;Server accept error: &quot; + ioe); stop(); }
      }
   }
   public void start()
   {  
   	  if (thread == null)
      {  thread = new Thread(this); 
         thread.start();
      }
   }
   public void stop()
   {  
      if (thread != null)
      {  thread.stop(); 
         thread = null;
      }
   }
   private int findClient(int ID)
   {  for (int i = 0; i &lt; clientCount; i++)
         if (clients[i].getID() == ID)
            return i;
      return -1;
   }
   public synchronized void handle(int ID, String input)
   {  if (input.equals(&quot;.bye&quot;))
      {  clients[findClient(ID)].send(&quot;.bye&quot;);
         remove(ID); }
      else
         for (int i = 0; i &lt; clientCount; i++)
            clients[i].send(input);   
   }
   public synchronized void remove(int ID)
   {  int pos = findClient(ID);
      if (pos &gt;= 0)
      {  ChatServerThread toTerminate = clients[pos];
         System.out.println(&quot;Removing client thread &quot; + ID + &quot; at &quot; + pos);
         if (pos &lt; clientCount-1)
            for (int i = pos+1; i &lt; clientCount; i++)
               clients[i-1] = clients[i];
         clientCount--;
         try
         {  toTerminate.close(); }
         catch(IOException ioe)
         {  System.out.println(&quot;Error closing thread: &quot; + ioe); }
         toTerminate.stop(); }
   }
   private void addThread(Socket socket)
   {  if (clientCount &lt; clients.length)
      {  System.out.println(&quot;Client accepted: &quot; + socket);
         clients[clientCount] = new ChatServerThread(this, socket);
         try
         {  clients[clientCount].open(); 
            clients[clientCount].start();  
            clientCount++; }
         catch(IOException ioe)
         {  System.out.println(&quot;Error opening thread: &quot; + ioe); } }
      else
         System.out.println(&quot;Client refused: maximum &quot; + clients.length + &quot; reached.&quot;);
   }

}
[/code]
this is part 1 to the server
[code]

import java.net.*;
import java.io.*;

public class ChatServerThread extends Thread
{  private ChatServer       server    = null;
   private Socket           socket    = null;
   private int              ID        = -1;
   private DataInputStream  streamIn  =  null;
   private DataOutputStream streamOut = null;

   public ChatServerThread(ChatServer _server, Socket _socket)
   {  super();
      server = _server;
      socket = _socket;
      ID     = socket.getPort();
   }
   public void send(String msg)
   {   try
       {  streamOut.writeUTF(msg);
          streamOut.flush();
       }
       catch(IOException ioe)
       {  System.out.println(ID + &quot; ERROR sending: &quot; + ioe.getMessage());
          server.remove(ID);
          stop();
       }
   }
   public int getID()
   {  return ID;
   }
   public void run()
   {  System.out.println(&quot;Server Thread &quot; + ID + &quot; running.&quot;);
      while (true)
      {  try
         {  server.handle(ID, streamIn.readUTF());
         }
         catch(IOException ioe)
         {  System.out.println(ID + &quot; ERROR reading: &quot; + ioe.getMessage());
            server.remove(ID);
            stop();
         }
      }
   }
   public void open() throws IOException
   {  streamIn = new DataInputStream(new 
                        BufferedInputStream(socket.getInputStream()));
      streamOut = new DataOutputStream(new
                        BufferedOutputStream(socket.getOutputStream()));
   }
   public void close() throws IOException
   {  if (socket != null)    socket.close();
      if (streamIn != null)  streamIn.close();
      if (streamOut != null) streamOut.close();
   }
}
[/code]
tahts the second part of the server


heres my client
and the read and write file part its not encrypted or anything 
the password thing is there for upgrades down the road

all i want to know is how i could get the client.user to get sent to the server and used instead of the client id
compile and run all of this


[code]
import java.net.*;
import java.io.*;
import java.util.*;

public class ChatClient implements Runnable
{  
	
    private Socket socket              = null;
    private Thread thread              = null;
    private DataInputStream  console   = null;
    private DataOutputStream streamOut = null;
    private ChatClientThread client    = null;
    public static int Ready 		   =    0;
    public static String user 		      	   = null;
    public static String pass 		           = null;
	public static int x 		       =    0;  
   
   public ChatClient(String serverName, int serverPort)
   {  
   	  System.out.println(&quot;Establishing connection. Please wait ...&quot;);
      try
      {  
      	 ReadUser.ReadUser();
      	 if(Ready == 1)
      	 {
      	 socket = new Socket(serverName, serverPort);
         System.out.println(&quot;Connected: &quot; + socket);
         start();
         }
         else
         {
         	System.out.println(&quot;User Def Not Found&quot;);
         	console   = new DataInputStream(System.in);
         	String line = null;
         	String name = null;
         	String pass = null;
			System.out.println(&quot;do you want to write a new user def?[y/n]&quot;);
     		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	line = br.readLine(); 
         	System.out.println(line);
         	if(line.startsWith(&quot;y&quot;))
         	{
         		System.out.println(&quot;name?&quot;);
     			BufferedReader nm = new BufferedReader(new InputStreamReader(System.in));
      			try 
      			{
         			name = nm.readLine();
      			}
 				catch (IOException ioe) 
 				{
         			System.out.println(&quot;IO error trying to read your name!&quot;);
         			System.exit(1);
      			} 	
	         	System.out.println(&quot;pass?&quot;);
	     		BufferedReader ps = new BufferedReader(new InputStreamReader(System.in));
      			try 
      			{
         			pass = ps.readLine();
      			} 
      			catch (IOException ioe) 
      			{
        			System.out.println(&quot;IO error trying to read your name!&quot;);
        			System.exit(1);
      			}         			    			        			
         			ReadUser.WriteUser(name, pass);
         			System.out.println(&quot;File Created!!&quot;);
         		}
         	else
         	{
         			System.out.println(&quot;Program closing&quot;);
         	}
         } 	
      }
      catch(UnknownHostException uhe)
      {  System.out.println(&quot;Host unknown: &quot; + uhe.getMessage()); }
      catch(IOException ioe)
      {  System.out.println(&quot;Unexpected exception: &quot; + ioe.getMessage()); }
   }
   public void run()
   {  while (thread != null)
      {  try
         {  streamOut.writeUTF(console.readLine());
            streamOut.flush();
         }
         catch(IOException ioe)
         {  System.out.println(&quot;Sending error: &quot; + ioe.getMessage());
            stop();
         }
      }
   }
   public void handle(String msg)
   {  if (msg.equals(&quot;::bye&quot;))
      {  System.out.println(&quot;Good bye. Press RETURN to exit ...&quot;);
         stop();
      }
      else
         System.out.println(user+&quot;: &quot;+msg);
   }
   public void start() throws IOException
   {  console   = new DataInputStream(System.in);
      streamOut = new DataOutputStream(socket.getOutputStream());
      if (thread == null)
      {  client = new ChatClientThread(this, socket);
         thread = new Thread(this);                   
         thread.start();
      }
   }
   public void stop()
   {  if (thread != null)
      {  thread.stop();  
         thread = null;
      }
      try
      {  if (console   != null)  console.close();
         if (streamOut != null)  streamOut.close();
         if (socket    != null)  socket.close();
      }
      catch(IOException ioe)
      {  System.out.println(&quot;Error closing ...&quot;); }
      client.close();  
      client.stop();
   }
   public static void main(String args[])
   {  ChatClient client = null;
      client = new ChatClient(&quot;127.0.0.1&quot;, 4444);
   }
}
[/code]

[code]





import java.net.*;
import java.io.*;

public class ChatClientThread extends Thread
{  private Socket           socket   = null;
   private ChatClient       client   = null;
   private DataInputStream  streamIn = null;

   public ChatClientThread(ChatClient _client, Socket _socket)
   {  client   = _client;
      socket   = _socket;
      open();  
      start();
   }
   public void open()
   {  try
      {  streamIn  = new DataInputStream(socket.getInputStream());
      }
      catch(IOException ioe)
      {  System.out.println(&quot;Error getting input stream: &quot; + ioe);
         client.stop();
      }
   }
   public void close()
   {  try
      {  if (streamIn != null) streamIn.close();
      }
      catch(IOException ioe)
      {  System.out.println(&quot;Error closing input stream: &quot; + ioe);
      }
   }
   public void run()
   {  while (true)
      {  try
         {  client.handle(streamIn.readUTF());
         }
         catch(IOException ioe)
         {  System.out.println(&quot;Listening error: &quot; + ioe.getMessage());
            client.stop();
         }
      }
   }
}


[/code]


[code]
import java.io.*;

class ReadUser
{
   public static void ReadUser()
   {  
            try
			{
             	FileInputStream fstream = new 
	         	FileInputStream(&quot;user.dat&quot;);
			 	DataInputStream in = new DataInputStream(fstream);
             	while (in.available() !=0)
			 	{
			 		ChatClient.user = in.readLine();
			 		ChatClient.pass = in.readLine();
				}
			 	in.close();
			 	ChatClient.Ready = 1;
			 } 
             catch (Exception e)
			 {
			 	System.err.println(&quot;File input error&quot;);
			 	ChatClient.Ready = 0;
			 }	
      
      /*
      try
      {
         DataInputStream dataIn = new DataInputStream(new FileInputStream(&quot;user.dat&quot;));
         String password = dataIn.readUTF();
         dataIn.readChar();
         String name = dataIn.readUTF();
         dataIn.close();
         ChatClient.Ready = 1;
      }
      
      catch(IOException e)
      {
         ChatClient.Ready = 0;
      }
      */
   }
     public static void WriteUser(String name, String password)
   {
        FileOutputStream out; // declare a file output object
        PrintStream p; // declare a print stream object
   		try
        {
			out = new FileOutputStream(&quot;user.dat&quot;);
			p = new PrintStream( out );
			p.println (name);
			p.println (password);
			p.close();
        }
        catch (Exception e)
        {
        	System.err.println (&quot;Error writing to file&quot;);
        }      
   /*   
      try
      {
         DataOutputStream dataOut = new DataOutputStream(new FileOutputStream(&quot;user.dat&quot;));
         dataOut.writeUTF(password);
         dataOut.writeChar(&#39;|&#39;);
         dataOut.writeUTF(name);
         dataOut.close();
         
      }
      catch(IOException e)
      {
         System.out.println(&quot;Problem creating file&quot;);
      }
     */
   }
}
[/code]


welll i think it works now
 ttyl leech all you want</description>
    
    <lastBuildDate>Mon, 29 May 2006 23:34:57 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Trouble with naming clients with my chatserver</title>
        <dc:creator><![CDATA[@oldschool oldschool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/oldschool">@oldschool</a> wrote:</p>
          <blockquote>
              <p>lol that code kinda works ive improved it to the point where its a fully functional chatroom<br>
im working on a nice gui and client to client chat</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/5</link>
        <pubDate>Mon, 29 May 2006 23:34:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-3369-5</guid>
        <source url="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss">Trouble with naming clients with my chatserver</source>
      </item>
      <item>
        <title>Trouble with naming clients with my chatserver</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>If it works, you did good for a noob <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/4</link>
        <pubDate>Sun, 28 May 2006 22:11:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-3369-4</guid>
        <source url="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss">Trouble with naming clients with my chatserver</source>
      </item>
      <item>
        <title>Trouble with naming clients with my chatserver</title>
        <dc:creator><![CDATA[@oldschool oldschool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/oldschool">@oldschool</a> wrote:</p>
          <blockquote>
              <p>lol im a weird person<br>
lol and well im a complete noob trying to write a chat server<br>
i think i did pretty good for a first time</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/3</link>
        <pubDate>Sun, 28 May 2006 22:09:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-3369-3</guid>
        <source url="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss">Trouble with naming clients with my chatserver</source>
      </item>
      <item>
        <title>Trouble with naming clients with my chatserver</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>You code funny <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=9" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/2</link>
        <pubDate>Sun, 28 May 2006 21:55:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-3369-2</guid>
        <source url="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss">Trouble with naming clients with my chatserver</source>
      </item>
      <item>
        <title>Trouble with naming clients with my chatserver</title>
        <dc:creator><![CDATA[@oldschool oldschool]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/oldschool">@oldschool</a> wrote:</p>
          <blockquote>
              <p>hey everyone i have this code and here and i want to know how to name the clients with a specified name from a string in the client. yeah heres my files</p>
<p>ill love you forever if you can help me out</p>
<pre><code class="lang-auto">import java.net.*;
import java.io.*;

public class ChatServer implements Runnable
{  private ChatServerThread clients[] = new ChatServerThread[50];
   private ServerSocket server = null;
   private Thread       thread = null;
   private int clientCount = 0;
   	
   public static void main(String args[])
   {  
   	  ChatServer server = null;
   	  server = new ChatServer(4444);
      if (args.length != 1)
         System.out.println("Usage: java ChatServer port");
      else
         server = new ChatServer(Integer.parseInt(args[0]));
   }
   
   public ChatServer(int port)
   {  try
      {  
      	 
      	 System.out.println("Binding to port " + port + ", please wait  ...");
         server = new ServerSocket(port);  
         System.out.println("Server started: " + server);
         start(); }
      catch(IOException ioe)
      {  System.out.println("Can not bind to port " + port + ": " + ioe.getMessage()); }
   }
   public void run()
   {  while (thread != null)
      {  try
         {  System.out.println("Waiting for a client ..."); 
            addThread(server.accept()); }
         catch(IOException ioe)
         {  System.out.println("Server accept error: " + ioe); stop(); }
      }
   }
   public void start()
   {  
   	  if (thread == null)
      {  thread = new Thread(this); 
         thread.start();
      }
   }
   public void stop()
   {  
      if (thread != null)
      {  thread.stop(); 
         thread = null;
      }
   }
   private int findClient(int ID)
   {  for (int i = 0; i &lt; clientCount; i++)
         if (clients[i].getID() == ID)
            return i;
      return -1;
   }
   public synchronized void handle(int ID, String input)
   {  if (input.equals(".bye"))
      {  clients[findClient(ID)].send(".bye");
         remove(ID); }
      else
         for (int i = 0; i &lt; clientCount; i++)
            clients[i].send(input);   
   }
   public synchronized void remove(int ID)
   {  int pos = findClient(ID);
      if (pos &gt;= 0)
      {  ChatServerThread toTerminate = clients[pos];
         System.out.println("Removing client thread " + ID + " at " + pos);
         if (pos &lt; clientCount-1)
            for (int i = pos+1; i &lt; clientCount; i++)
               clients[i-1] = clients[i];
         clientCount--;
         try
         {  toTerminate.close(); }
         catch(IOException ioe)
         {  System.out.println("Error closing thread: " + ioe); }
         toTerminate.stop(); }
   }
   private void addThread(Socket socket)
   {  if (clientCount &lt; clients.length)
      {  System.out.println("Client accepted: " + socket);
         clients[clientCount] = new ChatServerThread(this, socket);
         try
         {  clients[clientCount].open(); 
            clients[clientCount].start();  
            clientCount++; }
         catch(IOException ioe)
         {  System.out.println("Error opening thread: " + ioe); } }
      else
         System.out.println("Client refused: maximum " + clients.length + " reached.");
   }

}</code></pre>
<p>this is part 1 to the server</p>
<pre><code class="lang-auto">
import java.net.*;
import java.io.*;

public class ChatServerThread extends Thread
{  private ChatServer       server    = null;
   private Socket           socket    = null;
   private int              ID        = -1;
   private DataInputStream  streamIn  =  null;
   private DataOutputStream streamOut = null;

   public ChatServerThread(ChatServer _server, Socket _socket)
   {  super();
      server = _server;
      socket = _socket;
      ID     = socket.getPort();
   }
   public void send(String msg)
   {   try
       {  streamOut.writeUTF(msg);
          streamOut.flush();
       }
       catch(IOException ioe)
       {  System.out.println(ID + " ERROR sending: " + ioe.getMessage());
          server.remove(ID);
          stop();
       }
   }
   public int getID()
   {  return ID;
   }
   public void run()
   {  System.out.println("Server Thread " + ID + " running.");
      while (true)
      {  try
         {  server.handle(ID, streamIn.readUTF());
         }
         catch(IOException ioe)
         {  System.out.println(ID + " ERROR reading: " + ioe.getMessage());
            server.remove(ID);
            stop();
         }
      }
   }
   public void open() throws IOException
   {  streamIn = new DataInputStream(new 
                        BufferedInputStream(socket.getInputStream()));
      streamOut = new DataOutputStream(new
                        BufferedOutputStream(socket.getOutputStream()));
   }
   public void close() throws IOException
   {  if (socket != null)    socket.close();
      if (streamIn != null)  streamIn.close();
      if (streamOut != null) streamOut.close();
   }
}</code></pre>
<p>tahts the second part of the server</p>
<p>heres my client<br>
and the read and write file part its not encrypted or anything<br>
the password thing is there for upgrades down the road</p>
<p>all i want to know is how i could get the client.user to get sent to the server and used instead of the client id<br>
compile and run all of this</p>
<pre><code class="lang-auto">import java.net.*;
import java.io.*;
import java.util.*;

public class ChatClient implements Runnable
{  
	
    private Socket socket              = null;
    private Thread thread              = null;
    private DataInputStream  console   = null;
    private DataOutputStream streamOut = null;
    private ChatClientThread client    = null;
    public static int Ready 		   =    0;
    public static String user 		      	   = null;
    public static String pass 		           = null;
	public static int x 		       =    0;  
   
   public ChatClient(String serverName, int serverPort)
   {  
   	  System.out.println("Establishing connection. Please wait ...");
      try
      {  
      	 ReadUser.ReadUser();
      	 if(Ready == 1)
      	 {
      	 socket = new Socket(serverName, serverPort);
         System.out.println("Connected: " + socket);
         start();
         }
         else
         {
         	System.out.println("User Def Not Found");
         	console   = new DataInputStream(System.in);
         	String line = null;
         	String name = null;
         	String pass = null;
			System.out.println("do you want to write a new user def?[y/n]");
     		BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        	line = br.readLine(); 
         	System.out.println(line);
         	if(line.startsWith("y"))
         	{
         		System.out.println("name?");
     			BufferedReader nm = new BufferedReader(new InputStreamReader(System.in));
      			try 
      			{
         			name = nm.readLine();
      			}
 				catch (IOException ioe) 
 				{
         			System.out.println("IO error trying to read your name!");
         			System.exit(1);
      			} 	
	         	System.out.println("pass?");
	     		BufferedReader ps = new BufferedReader(new InputStreamReader(System.in));
      			try 
      			{
         			pass = ps.readLine();
      			} 
      			catch (IOException ioe) 
      			{
        			System.out.println("IO error trying to read your name!");
        			System.exit(1);
      			}         			    			        			
         			ReadUser.WriteUser(name, pass);
         			System.out.println("File Created!!");
         		}
         	else
         	{
         			System.out.println("Program closing");
         	}
         } 	
      }
      catch(UnknownHostException uhe)
      {  System.out.println("Host unknown: " + uhe.getMessage()); }
      catch(IOException ioe)
      {  System.out.println("Unexpected exception: " + ioe.getMessage()); }
   }
   public void run()
   {  while (thread != null)
      {  try
         {  streamOut.writeUTF(console.readLine());
            streamOut.flush();
         }
         catch(IOException ioe)
         {  System.out.println("Sending error: " + ioe.getMessage());
            stop();
         }
      }
   }
   public void handle(String msg)
   {  if (msg.equals("::bye"))
      {  System.out.println("Good bye. Press RETURN to exit ...");
         stop();
      }
      else
         System.out.println(user+": "+msg);
   }
   public void start() throws IOException
   {  console   = new DataInputStream(System.in);
      streamOut = new DataOutputStream(socket.getOutputStream());
      if (thread == null)
      {  client = new ChatClientThread(this, socket);
         thread = new Thread(this);                   
         thread.start();
      }
   }
   public void stop()
   {  if (thread != null)
      {  thread.stop();  
         thread = null;
      }
      try
      {  if (console   != null)  console.close();
         if (streamOut != null)  streamOut.close();
         if (socket    != null)  socket.close();
      }
      catch(IOException ioe)
      {  System.out.println("Error closing ..."); }
      client.close();  
      client.stop();
   }
   public static void main(String args[])
   {  ChatClient client = null;
      client = new ChatClient("127.0.0.1", 4444);
   }
}</code></pre>
<pre><code class="lang-auto">




import java.net.*;
import java.io.*;

public class ChatClientThread extends Thread
{  private Socket           socket   = null;
   private ChatClient       client   = null;
   private DataInputStream  streamIn = null;

   public ChatClientThread(ChatClient _client, Socket _socket)
   {  client   = _client;
      socket   = _socket;
      open();  
      start();
   }
   public void open()
   {  try
      {  streamIn  = new DataInputStream(socket.getInputStream());
      }
      catch(IOException ioe)
      {  System.out.println("Error getting input stream: " + ioe);
         client.stop();
      }
   }
   public void close()
   {  try
      {  if (streamIn != null) streamIn.close();
      }
      catch(IOException ioe)
      {  System.out.println("Error closing input stream: " + ioe);
      }
   }
   public void run()
   {  while (true)
      {  try
         {  client.handle(streamIn.readUTF());
         }
         catch(IOException ioe)
         {  System.out.println("Listening error: " + ioe.getMessage());
            client.stop();
         }
      }
   }
}

</code></pre>
<pre><code class="lang-auto">import java.io.*;

class ReadUser
{
   public static void ReadUser()
   {  
            try
			{
             	FileInputStream fstream = new 
	         	FileInputStream("user.dat");
			 	DataInputStream in = new DataInputStream(fstream);
             	while (in.available() !=0)
			 	{
			 		ChatClient.user = in.readLine();
			 		ChatClient.pass = in.readLine();
				}
			 	in.close();
			 	ChatClient.Ready = 1;
			 } 
             catch (Exception e)
			 {
			 	System.err.println("File input error");
			 	ChatClient.Ready = 0;
			 }	
      
      /*
      try
      {
         DataInputStream dataIn = new DataInputStream(new FileInputStream("user.dat"));
         String password = dataIn.readUTF();
         dataIn.readChar();
         String name = dataIn.readUTF();
         dataIn.close();
         ChatClient.Ready = 1;
      }
      
      catch(IOException e)
      {
         ChatClient.Ready = 0;
      }
      */
   }
     public static void WriteUser(String name, String password)
   {
        FileOutputStream out; // declare a file output object
        PrintStream p; // declare a print stream object
   		try
        {
			out = new FileOutputStream("user.dat");
			p = new PrintStream( out );
			p.println (name);
			p.println (password);
			p.close();
        }
        catch (Exception e)
        {
        	System.err.println ("Error writing to file");
        }      
   /*   
      try
      {
         DataOutputStream dataOut = new DataOutputStream(new FileOutputStream("user.dat"));
         dataOut.writeUTF(password);
         dataOut.writeChar('|');
         dataOut.writeUTF(name);
         dataOut.close();
         
      }
      catch(IOException e)
      {
         System.out.println("Problem creating file");
      }
     */
   }
}</code></pre>
<p>welll i think it works now<br>
ttyl leech all you want</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369/1</link>
        <pubDate>Sun, 28 May 2006 02:56:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-3369-1</guid>
        <source url="https://forum.moparisthebest.com/t/trouble-with-naming-clients-with-my-chatserver/3369.rss">Trouble with naming clients with my chatserver</source>
      </item>
  </channel>
</rss>
