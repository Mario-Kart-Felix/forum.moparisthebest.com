<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Not a typical shops problem</title>
    <link>https://forum.moparisthebest.com/t/not-a-typical-shops-problem/381215</link>
    <description>Ok so lets start out with the version which is a z508, I go to buy from any shop and i get dced and the item does not buy. I looked over the shops.java, shophandler, and the npcoptions2.java. None of that seems to have bad code since i recoded it like 5 times. i get no errors so i think its the packetmanager but i also added all the packet cases in there that i have found on every single tut. i will show my code if someone is willing to help out. Don&#39;t say to use google or the search on forums because there is no thread for my solution. 



packetmanager.java


[code]/*
 * Class PacketManager
 *
 * Version 1.0
 *
 * Sunday, August 17, 2008
 *
 * Created by Palidino76
 */

package net.com.codeusa.io;

import net.com.codeusa.Server;
import net.com.codeusa.Engine;
import net.com.codeusa.model.Player;
import net.com.codeusa.util.Misc;
import net.com.codeusa.net.packethandler.*;

public class PacketManager {
    /*
     * Create all the packets for use.
     */
    public Walking walk = new Walking();
    public ItemOption3 itemOption3 = new ItemOption3();
    public PublicChat publicChat = new PublicChat();
    public Commands command = new Commands();
    public SwitchItems switchItems = new SwitchItems();
    public ActionButtons actionButtons = new ActionButtons();
    public Equipment equipment = new Equipment();
    public ItemOption1 itemOption1 = new ItemOption1();
    public ItemOption2 itemOption2 = new ItemOption2();
    public ItemOperate itemOperate = new ItemOperate();
    public ItemOnItem itemOnItem = new ItemOnItem();
    public DropItem dropItem = new DropItem();
    public PickupItem pickupItem = new PickupItem();
    public PlayerOption1 playerOption1 = new PlayerOption1();
    public PlayerOption2 playerOption2 = new PlayerOption2();
    public PlayerOption3 playerOption3 = new PlayerOption3();
    public NPCAttack npcAttack = new NPCAttack();
    public NPCOption1 npcOption1 = new NPCOption1();
    public NPCOption2 npcOption2 = new NPCOption2();
    public ItemSelect itemSelect = new ItemSelect();
    //public ItemSelect2 itemSelect2 = new ItemSelect2();
    public ObjectOption1 objectOption1 = new ObjectOption1();
    public ObjectOption2 objectOption2 = new ObjectOption2();
    public SwitchItems2 switchItems2 = new SwitchItems2();
    public ItemOnNPC itemOnNPC = new ItemOnNPC();
    public ItemOnObject itemOnObject = new ItemOnObject();

    public PacketManager() {
    }

    /**
     * Handle any packets.
     * &lt;p&gt;Handles all packets within the range of 0 - 255. Not every
     * packet has been setup, you&#39;ll have to do some yourself.
     * @param p The Player which the frame should be created for.
     * @param packetId The packet id to handle.
     * @param packetSize The number of bytes the packet contains.
     */
    public void parsePacket(Player p, int packetId, int packetSize) {
        if (p == null) {
            return;
        }
        if (p.clickDelay &gt; 0 &amp;&amp; packetId != 222) {
            /*
             * When delayed only allow chatting.
             */
            return;
        }
        switch (packetId) {

       
              case 43:
                p.input.setInput(p.stream.readDWord());
                break;








	case 224:
	    /**
	     * Item on Object
 	     */
	    itemOnObject.createPacket(p);
	    break;
        case 115:
            /*
             * This packet is constantly sent almost like a ping to verify the still exists.
             */
            break;
        case 22:
            /*
             * Recieved every time updateReq is set to true.
             */
            p.stream.readDWord(); // Junk? Same value every time.
            break;
	case 12:
	    /**
	     * Item on NPC
	     */
	    itemOnNPC.addItemOnNPCEvent(p);
	    break;
case 60:
p.objects();
break; 
     case 253:
                int playerId = p.stream.readUnsignedWord();
                playerId -= 33024;
                playerId = playerId / 256;
                playerId++;
                if (playerId &lt; 0 || playerId &gt;= Engine.players.length || Engine.players[playerId] == null) {
                    return;
                }
                if (Engine.players[playerId].pTrade.getPartner() == p) {
                p.pTrade.tradePlayer(Engine.players[playerId]);
                }

                break;


    case 152:
        itemOption3.handlePacket(p, packetId, packetSize);
    break;
 
        case 99:
            /*
             * Unknown.
             */
            p.stream.readUnsignedWordBigEndianA();
            p.stream.readUnsignedWordA();
            break;
        case 117:
        case 248:
        case 247: // Possibly a packet sent if the login  is successful.
            /*
             * Unknown.
             */
            break;
        case 59:
            /*
             * Send every time you click your mouse.
             */
            p.stream.readUnsignedWord();
            p.stream.readDWord_v1();
            break;
        case 49:
            /*
             * Main map walking.
             */
	case 119:
		if (p.interfaceId == 762) {
		p.getActionSender().removeShownInterface(p);
		}
		if(p.interfaceId==335 || p.interfaceId==334 || p.interfaceId==620) {
			p.pTrade.declineTrade();
		}
        case 138:
            walk.handlePacket(p, packetId, packetSize);
            break;
        case 222:
            /*
             * Public chatting.
             */
            publicChat.handlePacket(p, packetId, packetSize);
            break;
            case 107:
            /*
             * When you type text starting with ::, its sent with this packet Id rather than as 
             * Normal chat.
             */
            command.handlePacket(p, packetId, packetSize);
            break;

            case 30:
	    long name = p.getByteVector().readQWord();
	    if(p.friends.size() &gt;= 200) {
                p.getActionSender().sendMessage(p, &quot;Your friends list is full.&quot;);
		break;
	    }
	    if(p.friends.contains((Long) name)) {
                p.getActionSender().sendMessage(p, &quot;Already on your friends list.&quot;);
		break;
	    }
	    p.friends.add((Long) name);
	    p.getActionSender().sendFriend(p, name, p.getWorld(name));
	    break;

	case 61:
	    name = p.getByteVector().readQWord();
	    if(p.ignores.size() &gt;= 100) {
                p.getActionSender().sendMessage(p, &quot;Your ignore list is full.&quot;);
		break;
	    }
	    if(p.ignores.contains((Long) name)) {
                p.getActionSender().sendMessage(p, &quot;Already on your ignore list.&quot;);
		break;
	    }
	    p.ignores.add((Long) name);
	    break;

	case 132:
	    name = p.getByteVector().readQWord();
	    p.friends.remove((Long) name);
	    break;

            case 195:
                    int itemId = p.getByteVector().readUnsignedWord();
		    System.out.println(itemId);
		    break;

	case 2:
	    name = p.getByteVector().readQWord();
	    p.ignores.remove((Long) name);
	    break;

        case 178:
            name = p.stream.readQWord();
        int numChars = p.stream.readUnsignedByte();
String stringshiz = String.valueOf(&#39;\u0022&#39;);
String a = (&quot;x&quot;);
        String text = Misc.decryptPlayerChat(p.stream, numChars);
        for(Player p2 : Engine.players) {
                if(p2 != null &amp;&amp; p2.online) {
                    if(Misc.stringToLong(p2.username) == name) {
if (text.contains(stringshiz)) {
return;
}
if (text.contains(&quot;&gt;&quot;) || text.contains(&quot;&lt;&quot;) || text.contains(&quot;^&quot;) || text.contains(&quot;@&quot;) || text.contains(&quot;#&quot;) || text.contains(&quot;)&quot;) || text.contains(&quot;(&quot;) || text.contains(&quot;!&quot;) || text.contains(&quot;?&quot;) || text.contains(&quot;:&quot;) || text.contains(&quot;;&quot;) || text.contains(&quot;$&quot;) || text.contains(&quot;%&quot;) || text.contains(&quot;&amp;&quot;) || text.contains(&quot;*&quot;) || text.contains(&quot;_&quot;) || text.contains(&quot;+&quot;) || text.contains(&quot;}&quot;) || text.contains(&quot;{&quot;) || text.contains(&quot;?&quot;)) {
return;
}
if (a.length() &gt; 10) {
return;
}
                        p2.getActionSender().sendReceivedPrivateMessage(p2, Misc.stringToLong(p.username), p.rights, text);
            p.getActionSender().sendSentPrivateMessage(p, name, text);
            return;
            }
        }
        }
        p.getActionSender().sendMessage(p, &quot;Player is unavailable.&quot;);
        break;  
        
        case 167:
            /*
             * Switching items on interfaces.
             */
            switchItems.handlePacket(p, packetId, packetSize);
            break;

             case 233:
        case 113:
        case 21:
        case 169:
        case 232:
		case 214:
		case 90:
		case 173:
		case 133:
		case 226:
		case 102:
            /*
             * When you click an interface button this packet is sent.
             */
            actionButtons.handlePacket(p, packetId, packetSize);
            break;

        case 3:
            /*
             * Equipping an item.
             */
             equipment.handlePacket(p, packetId, packetSize);
             break;
        case 203:
            /*
             * Item options 1.
             */
            itemOption1.handlePacket(p, packetId, packetSize);
            break;
        case 186:
            /*
             * Item operating.
             */
            itemOperate.handlePacket(p, packetId, packetSize);
            break;
        case 211:
            /*
             * Dropping an item.
             */
            dropItem.handlePacket(p, packetId, packetSize);
            break;
        case 201:
            /*
             * Picking an item up.
             */
            pickupItem.handlePacket(p, packetId, packetSize);
            break;
        case 160:
            /*
             * First option on a player.
             */
            playerOption1.handlePacket(p, packetId, packetSize);
            break;
        case 37:
            /*
             * Second option on a player.
             */
          	 playerOption2.handlePacket(p, packetId, packetSize);
           	 break;
        case 227:
            /*
             * Third option on a player.
             */
            playerOption3.handlePacket(p, packetId, packetSize);
            break;
        case 123:
            /*
             * NPC attack option.
             */
            npcAttack.handlePacket(p, packetId, packetSize);
            break;
        case 7:
            /*
             * NPC first option.
             */
            npcOption1.handlePacket(p, packetId, packetSize);
            break;
        case 220:
            /* 
             * Item eating, drinking, etc.
             */
            itemSelect.handlePacket(p, packetId, packetSize);
            break;
        case 158:
            /*
             * Object first option.
             */
            objectOption1.handlePacket(p, packetId, packetSize);
            break;
        case 165:
            /*
             * Settings buttons, such as music volume.
             */
            p.stream.readDWord_v2();
            break;
        case 108:
            /*
             * Remove open interfaces.
             */
            p.getActionSender().removeShownInterface(p);
            break;
        case 228:
            /*
             * Second object option.
             */
            objectOption2.handlePacket(p, packetId, packetSize);
            break;
        case 52:
            /*
             * Second NPC option.
             */
            npcOption2.handlePacket(p, packetId, packetSize);
            break;
        case 38:
            /*
             * Item examining.
             */
            p.getActionSender().sendMessage(p, Engine.items.getItemDescription(p.stream.readUnsignedWordBigEndianA()));
            break;
        case 88:
            /*
             * NPC examining.
             */
            p.getActionSender().sendMessage(p, Server.engine.getNPCDescription(p.stream.readUnsignedWord()));
            break;
        case 84:
            /*
             * Object examining.
             */
            int objectId = p.stream.readUnsignedWordA();
            p.getActionSender().sendMessage(p, &quot;An object.&quot;);

            break;
        case 47:
            /*
             * Idle packet.
             */
            break;

	case 70: //Magic
		new MagicOnPlayer(p);
	break;
            case 24: // Magic on Npc
                new MagicOnNpc(p);
                break;

	case 134:
		itemOption2.handlePacket(p, packetId, packetSize);
	break;
	case 40:
	    /**
	     * Item on item packet
	     */
	    itemOnItem.handlePacket(p, packetId, packetSize);
	break;
        case 179:
            /*
             * Switching items on interfaces.
             */
            switchItems2.handlePacket(p, packetId, packetSize);
            break;
case 63:
	    /**
	     * First option on options.
	     */
	    new OptionClicking(p);
	break;
        default:
            Misc.println(&quot;[&quot; + p.username + &quot;] Unhandled packet: &quot; + packetId);
            break;
        }
    }
}[/code]






Wow your all assholes for not helping.

fixed fucking fags...</description>
    
    <lastBuildDate>Fri, 04 Feb 2011 20:37:27 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/not-a-typical-shops-problem/381215.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Not a typical shops problem</title>
        <dc:creator><![CDATA[@Sir_wootness Sir wootness]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sir_wootness">@Sir_wootness</a> wrote:</p>
          <blockquote>
              <p>Ok so lets start out with the version which is a z508, I go to buy from any shop and i get dced and the item does not buy. I looked over the shops.java, shophandler, and the npcoptions2.java. None of that seems to have bad code since i recoded it like 5 times. i get no errors so i think its the packetmanager but i also added all the packet cases in there that i have found on every single tut. i will show my code if someone is willing to help out. Don’t say to use google or the search on forums because there is no thread for my solution.</p>
<p>packetmanager.java</p>
<p>[code]/*</p>
<ul>
<li>Class PacketManager</li>
<li>
</li>
<li>Version 1.0</li>
<li>
</li>
<li>Sunday, August 17, 2008</li>
<li>
</li>
<li>Created by Palidino76<br>
*/</li>
</ul>
<p>package <a href="http://net.com.codeusa.io" rel="nofollow noopener">net.com.codeusa.io</a>;</p>
<p>import net.com.codeusa.Server;<br>
import net.com.codeusa.Engine;<br>
import net.com.codeusa.model.Player;<br>
import net.com.codeusa.util.Misc;<br>
import net.com.codeusa.net.packethandler.*;</p>
<p>public class PacketManager {<br>
/*<br>
* Create all the packets for use.<br>
*/<br>
public Walking walk = new Walking();<br>
public ItemOption3 itemOption3 = new ItemOption3();<br>
public PublicChat publicChat = new PublicChat();<br>
public Commands command = new Commands();<br>
public SwitchItems switchItems = new SwitchItems();<br>
public ActionButtons actionButtons = new ActionButtons();<br>
public Equipment equipment = new Equipment();<br>
public ItemOption1 itemOption1 = new ItemOption1();<br>
public ItemOption2 itemOption2 = new ItemOption2();<br>
public ItemOperate itemOperate = new ItemOperate();<br>
public ItemOnItem itemOnItem = new ItemOnItem();<br>
public DropItem dropItem = new DropItem();<br>
public PickupItem pickupItem = new PickupItem();<br>
public PlayerOption1 playerOption1 = new PlayerOption1();<br>
public PlayerOption2 playerOption2 = new PlayerOption2();<br>
public PlayerOption3 playerOption3 = new PlayerOption3();<br>
public NPCAttack npcAttack = new NPCAttack();<br>
public NPCOption1 npcOption1 = new NPCOption1();<br>
public NPCOption2 npcOption2 = new NPCOption2();<br>
public ItemSelect itemSelect = new ItemSelect();<br>
//public ItemSelect2 itemSelect2 = new ItemSelect2();<br>
public ObjectOption1 objectOption1 = new ObjectOption1();<br>
public ObjectOption2 objectOption2 = new ObjectOption2();<br>
public SwitchItems2 switchItems2 = new SwitchItems2();<br>
public ItemOnNPC itemOnNPC = new ItemOnNPC();<br>
public ItemOnObject itemOnObject = new ItemOnObject();</p>
<pre><code>public PacketManager() {
}

/**
 * Handle any packets.
 * &lt;p&gt;Handles all packets within the range of 0 - 255. Not every
 * packet has been setup, you'll have to do some yourself.
 * @param p The Player which the frame should be created for.
 * @param packetId The packet id to handle.
 * @param packetSize The number of bytes the packet contains.
 */
public void parsePacket(Player p, int packetId, int packetSize) {
    if (p == null) {
        return;
    }
    if (p.clickDelay &gt; 0 &amp;&amp; packetId != 222) {
        /*
         * When delayed only allow chatting.
         */
        return;
    }
    switch (packetId) {

   
          case 43:
            p.input.setInput(p.stream.readDWord());
            break;








case 224:
    /**
     * Item on Object
     */
    itemOnObject.createPacket(p);
    break;
    case 115:
        /*
         * This packet is constantly sent almost like a ping to verify the still exists.
         */
        break;
    case 22:
        /*
         * Recieved every time updateReq is set to true.
         */
        p.stream.readDWord(); // Junk? Same value every time.
        break;
case 12:
    /**
     * Item on NPC
     */
    itemOnNPC.addItemOnNPCEvent(p);
    break;
</code></pre>
<p>case 60:<br>
p.objects();<br>
break;<br>
case 253:<br>
int playerId = p.stream.readUnsignedWord();<br>
playerId -= 33024;<br>
playerId = playerId / 256;<br>
playerId++;<br>
if (playerId &lt; 0 || playerId &gt;= Engine.players.length || Engine.players[playerId] == null) {<br>
return;<br>
}<br>
if (Engine.players[playerId].pTrade.getPartner() == p) {<br>
p.pTrade.tradePlayer(Engine.players[playerId]);<br>
}</p>
<pre><code>            break;


case 152:
    itemOption3.handlePacket(p, packetId, packetSize);
break;

    case 99:
        /*
         * Unknown.
         */
        p.stream.readUnsignedWordBigEndianA();
        p.stream.readUnsignedWordA();
        break;
    case 117:
    case 248:
    case 247: // Possibly a packet sent if the login  is successful.
        /*
         * Unknown.
         */
        break;
    case 59:
        /*
         * Send every time you click your mouse.
         */
        p.stream.readUnsignedWord();
        p.stream.readDWord_v1();
        break;
    case 49:
        /*
         * Main map walking.
         */
case 119:
	if (p.interfaceId == 762) {
	p.getActionSender().removeShownInterface(p);
	}
	if(p.interfaceId==335 || p.interfaceId==334 || p.interfaceId==620) {
		p.pTrade.declineTrade();
	}
    case 138:
        walk.handlePacket(p, packetId, packetSize);
        break;
    case 222:
        /*
         * Public chatting.
         */
        publicChat.handlePacket(p, packetId, packetSize);
        break;
        case 107:
        /*
         * When you type text starting with ::, its sent with this packet Id rather than as 
         * Normal chat.
         */
        command.handlePacket(p, packetId, packetSize);
        break;

        case 30:
    long name = p.getByteVector().readQWord();
    if(p.friends.size() &gt;= 200) {
            p.getActionSender().sendMessage(p, "Your friends list is full.");
	break;
    }
    if(p.friends.contains((Long) name)) {
            p.getActionSender().sendMessage(p, "Already on your friends list.");
	break;
    }
    p.friends.add((Long) name);
    p.getActionSender().sendFriend(p, name, p.getWorld(name));
    break;

case 61:
    name = p.getByteVector().readQWord();
    if(p.ignores.size() &gt;= 100) {
            p.getActionSender().sendMessage(p, "Your ignore list is full.");
	break;
    }
    if(p.ignores.contains((Long) name)) {
            p.getActionSender().sendMessage(p, "Already on your ignore list.");
	break;
    }
    p.ignores.add((Long) name);
    break;

case 132:
    name = p.getByteVector().readQWord();
    p.friends.remove((Long) name);
    break;

        case 195:
                int itemId = p.getByteVector().readUnsignedWord();
	    System.out.println(itemId);
	    break;

case 2:
    name = p.getByteVector().readQWord();
    p.ignores.remove((Long) name);
    break;

    case 178:
        name = p.stream.readQWord();
    int numChars = p.stream.readUnsignedByte();
</code></pre>
<p>String stringshiz = String.valueOf(’\u0022’);<br>
String a = (“x”);<br>
String text = Misc.decryptPlayerChat(p.stream, numChars);<br>
for(Player p2 : Engine.players) {<br>
if(p2 != null &amp;&amp; p2.online) {<br>
if(Misc.stringToLong(p2.username) == name) {<br>
if (text.contains(stringshiz)) {<br>
return;<br>
}<br>
if (text.contains("&gt;") || text.contains("&lt;") || text.contains("^") || text.contains("@") || text.contains("#") || text.contains(")") || text.contains("(") || text.contains("!") || text.contains("?") || text.contains(":") || text.contains(";") || text.contains("$") || text.contains("%") || text.contains("&amp;") || text.contains("*") || text.contains("_") || text.contains("+") || text.contains("}") || text.contains("{") || text.contains("?")) {<br>
return;<br>
}<br>
if (a.length() &gt; 10) {<br>
return;<br>
}<br>
p2.getActionSender().sendReceivedPrivateMessage(p2, Misc.stringToLong(p.username), p.rights, text);<br>
p.getActionSender().sendSentPrivateMessage(p, name, text);<br>
return;<br>
}<br>
}<br>
}<br>
p.getActionSender().sendMessage(p, “Player is unavailable.”);<br>
break;</p>
<pre><code>    case 167:
        /*
         * Switching items on interfaces.
         */
        switchItems.handlePacket(p, packetId, packetSize);
        break;

         case 233:
    case 113:
    case 21:
    case 169:
    case 232:
	case 214:
	case 90:
	case 173:
	case 133:
	case 226:
	case 102:
        /*
         * When you click an interface button this packet is sent.
         */
        actionButtons.handlePacket(p, packetId, packetSize);
        break;

    case 3:
        /*
         * Equipping an item.
         */
         equipment.handlePacket(p, packetId, packetSize);
         break;
    case 203:
        /*
         * Item options 1.
         */
        itemOption1.handlePacket(p, packetId, packetSize);
        break;
    case 186:
        /*
         * Item operating.
         */
        itemOperate.handlePacket(p, packetId, packetSize);
        break;
    case 211:
        /*
         * Dropping an item.
         */
        dropItem.handlePacket(p, packetId, packetSize);
        break;
    case 201:
        /*
         * Picking an item up.
         */
        pickupItem.handlePacket(p, packetId, packetSize);
        break;
    case 160:
        /*
         * First option on a player.
         */
        playerOption1.handlePacket(p, packetId, packetSize);
        break;
    case 37:
        /*
         * Second option on a player.
         */
      	 playerOption2.handlePacket(p, packetId, packetSize);
       	 break;
    case 227:
        /*
         * Third option on a player.
         */
        playerOption3.handlePacket(p, packetId, packetSize);
        break;
    case 123:
        /*
         * NPC attack option.
         */
        npcAttack.handlePacket(p, packetId, packetSize);
        break;
    case 7:
        /*
         * NPC first option.
         */
        npcOption1.handlePacket(p, packetId, packetSize);
        break;
    case 220:
        /* 
         * Item eating, drinking, etc.
         */
        itemSelect.handlePacket(p, packetId, packetSize);
        break;
    case 158:
        /*
         * Object first option.
         */
        objectOption1.handlePacket(p, packetId, packetSize);
        break;
    case 165:
        /*
         * Settings buttons, such as music volume.
         */
        p.stream.readDWord_v2();
        break;
    case 108:
        /*
         * Remove open interfaces.
         */
        p.getActionSender().removeShownInterface(p);
        break;
    case 228:
        /*
         * Second object option.
         */
        objectOption2.handlePacket(p, packetId, packetSize);
        break;
    case 52:
        /*
         * Second NPC option.
         */
        npcOption2.handlePacket(p, packetId, packetSize);
        break;
    case 38:
        /*
         * Item examining.
         */
        p.getActionSender().sendMessage(p, Engine.items.getItemDescription(p.stream.readUnsignedWordBigEndianA()));
        break;
    case 88:
        /*
         * NPC examining.
         */
        p.getActionSender().sendMessage(p, Server.engine.getNPCDescription(p.stream.readUnsignedWord()));
        break;
    case 84:
        /*
         * Object examining.
         */
        int objectId = p.stream.readUnsignedWordA();
        p.getActionSender().sendMessage(p, "An object.");

        break;
    case 47:
        /*
         * Idle packet.
         */
        break;

case 70: //Magic
	new MagicOnPlayer(p);
break;
        case 24: // Magic on Npc
            new MagicOnNpc(p);
            break;

case 134:
	itemOption2.handlePacket(p, packetId, packetSize);
break;
case 40:
    /**
     * Item on item packet
     */
    itemOnItem.handlePacket(p, packetId, packetSize);
break;
    case 179:
        /*
         * Switching items on interfaces.
         */
        switchItems2.handlePacket(p, packetId, packetSize);
        break;
</code></pre>
<p>case 63:<br>
/**<br>
* First option on options.<br>
*/<br>
new OptionClicking§;<br>
break;<br>
default:<br>
Misc.println("[" + p.username + "] Unhandled packet: " + packetId);<br>
break;<br>
}<br>
}<br>
}[/code]</p>
<p>Wow your all assholes for not helping.</p>
<p>fixed fucking fags…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/not-a-typical-shops-problem/381215/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/not-a-typical-shops-problem/381215/1</link>
        <pubDate>Fri, 04 Feb 2011 20:37:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-381215-1</guid>
        <source url="https://forum.moparisthebest.com/t/not-a-typical-shops-problem/381215.rss">Not a typical shops problem</source>
      </item>
  </channel>
</rss>
