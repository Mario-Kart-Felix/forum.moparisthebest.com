<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Write to another program&#39;s stdin in windows?</title>
    <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973</link>
    <description>I have a java program that starts a native program I have written in C++, the java program reads fine what the native program prints to stdout, on all operating systems.  On Linux and OSX the native program reads fine what the java program sends it, but on windows nothing ever gets through.  However, if I run the program on the command line on any OS, including windows, whatever key I press is read fine.  I really have no idea what the problem could be here, unless it&#39;s something to do with running the program in the windows command line vs not, I&#39;d appreciate some help.

Here is the native code that reads 1 character from stdin, the top is for windows, bottom is for everything else:
[code=cpp]#ifdef _WIN32
#define EXE &quot;.exe&quot;

#if defined(_MSC_VER)
#	define for if (false) {} else for
#endif

#include &lt;windows.h&gt;
#include &lt;conio.h&gt;

bool sleep_and_input(char* c, int sleep)
{
	for (int i = 0; i &lt; sleep * 2; ++i)
	{
		if (_kbhit())
		{
			*c = _getch();
			return true;
		}
		Sleep(500);
	}
	return false;
};

#else
#define EXE &quot;&quot;

#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;

#include &lt;termios.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/ioctl.h&gt;

struct set_keypress
{
	set_keypress()
	{
		termios new_settings;
		tcgetattr(0,&amp;stored_settings);
		new_settings = stored_settings;
		// Disable canonical mode, and set buffer size to 1 byte
		new_settings.c_lflag &amp;= (~ICANON);
		new_settings.c_cc[VTIME] = 0;
		new_settings.c_cc[VMIN] = 1;
		tcsetattr(0,TCSANOW,&amp;new_settings);
	}
	~set_keypress() { tcsetattr(0,TCSANOW,&amp;stored_settings); }
	termios stored_settings;
};

bool sleep_and_input(char* c, int sleep)
{
	// sets the terminal to single-character mode
	// and resets when destructed
	set_keypress s;
	libtorrent::ptime start = libtorrent::time_now_hires();
	int ret = 0;
retry:
	fd_set set;
	FD_ZERO(&amp;set);
	FD_SET(0, &amp;set);
	timeval tv = {sleep, 0};
	ret = select(1, &amp;set, 0, 0, &amp;tv);
	if (ret &gt; 0)
	{
		*c = getc(stdin);
		return true;
	}
	if (errno == EINTR)
	{
		if (total_milliseconds(libtorrent::time_now_hires() - start) &lt; sleep * 1000)
			goto retry;
		return false;
	}

	if (ret &lt; 0 &amp;&amp; errno != 0 &amp;&amp; errno != ETIMEDOUT)
		debug(&quot;select failed: %s\n&quot;, strerror(errno));

	libtorrent::sleep(500);
	return false;
}

#endif[/code]

This is the relevant java code:

[code=java5]    
// stdout initialized like this:
stdin = new BufferedReader(new InputStreamReader(proc.getInputStream()));

     private synchronized void inputCommands(String... commands) throws IOException {
        for (String command : commands)
            stdout.write(command, 0, command.length());
        stdout.flush();
    }

// and it is called like this:
inputCommands(&quot;r&quot;);
[/code]

No exceptions are ever thrown, by the way.

Any ideas?</description>
    
    <lastBuildDate>Sat, 06 Aug 2011 00:11:35 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="29" data-topic="405973">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/slavemaster/40/5_e05bb34c421432ee4d40de30c10af3e5.png" class="avatar"> slavemaster:</div>
<blockquote>
<p>Have you considered using Overlapped I/O on the standard input file handle?</p>
</blockquote>
</aside>
<p>I’m pretty sure I tried that, but stdin doesn’t support it, do you know differently?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/30">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/30</link>
        <pubDate>Sat, 06 Aug 2011 00:11:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-30</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@slavemaster veer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/slavemaster">@slavemaster</a> wrote:</p>
          <blockquote>
              <p>Have you considered using Overlapped I/O on the standard input file handle?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/29">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/29</link>
        <pubDate>Fri, 05 Aug 2011 20:01:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-29</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Yes, it waits for a newline, here is what I’ve tried so far:</p>
<pre><code class="lang-auto">// never returns when not running from console
*c = _getch();
// waits for enter to be pressed, includes newline in output
std::cin.get(*c);
*c = std::cin.get();
*c = getc(stdin);
// waits for enter to be pressed, doesn't include newline
std::cin &gt;&gt; c;
std::getline(std::cin, thread_char);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/28">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/28</link>
        <pubDate>Fri, 29 Jul 2011 16:08:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-28</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>have you tried cin.get() ?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/27">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/27</link>
        <pubDate>Fri, 29 Jul 2011 14:11:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-27</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>So I guess this is what I’m going to use:</p>
<p>[code=cpp]<span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> <br>
<span class="hashtag">#include</span> </p>
<p>bool print_debug = true;<br>
FILE* g_log_file = 0;</p>
<p>void debug( const char* format, … ) {<br>
if(!print_debug)<br>
return;<br>
printf("DEBUG: ");<br>
va_list args;<br>
va_start( args, format );<br>
vprintf(format, args);<br>
if (g_log_file){<br>
fprintf(g_log_file, “DEBUG: “);<br>
vfprintf(g_log_file, format, args);<br>
fprintf(g_log_file, “\n”);<br>
fflush(g_log_file);<br>
}<br>
va_end( args );<br>
printf(”\n”);<br>
fflush(stdout);<br>
}</p>
<p><span class="hashtag">#if</span> defined _WIN32 || defined <strong>CYGWIN32</strong></p>
<p><span class="hashtag">#if</span> defined(_MSC_VER)</p>
<h1>define for if (false) {} else for</h1>
<p><span class="hashtag">#endif</span></p>
<p><span class="hashtag">#include</span> &lt;windows.h&gt;<br>
<span class="hashtag">#include</span> &lt;process.h&gt;<br>
//<span class="hashtag">#include</span> &lt;string.h&gt;<br>
//<span class="hashtag">#include</span> &lt;conio.h&gt;</p>
<p>std::string thread_char;<br>
bool thread_running = false;</p>
<p>void Thread( void* pParams )<br>
{<br>
debug(“thread started”);<br>
// waits for enter to be pressed, doesn’t include newline<br>
//std::cin &gt;&gt; thread_char;<br>
std::getline(std::cin, thread_char);<br>
thread_running = false;<br>
debug(“thread stopped”);<br>
}</p>
<p>bool sleep_and_input(char* c, int sleep)<br>
{<br>
if(thread_running){<br>
Sleep(sleep*1000);<br>
return false;<br>
}<br>
debug(“1 thread_char: ‘%s’ c: ‘%c’”, thread_char.c_str(), *c);<br>
if(!thread_char.empty()){<br>
//strncpy(c, &amp;thread_char, 1);<br>
thread_char.copy(c,1,0);<br>
debug(“2 thread_char: ‘%s’ c: ‘%c’”, thread_char.c_str(), *c);<br>
thread_char.clear();<br>
// we don’t want to start the thread again here, since after we return from<br>
// this function we might want to read from stdin someplace else<br>
debug(“3 thread_char: ‘%s’ c: ‘%c’”, thread_char.c_str(), <em>c);<br>
return true;<br>
}<br>
thread_running = true;<br>
_beginthread( Thread, 0, NULL );<br>
return false;<br>
};<br>
/</em><br>
VOID WINAPI FileIOCompletionRoutine( DWORD fdwError, DWORD cbTransferred,<br>
OVERLAPPED *po )<br>
{<br>
debug(“in FileIOCompletionRoutine”);<br>
char *pszBuf = (char *)po-&gt;hEvent;</p>
<p>pszBuf[cbTransferred] = 0;<br>
printf( “%s\n”, pszBuf );<br>
free( pszBuf );<br>
free( po );<br>
}</p>
<p>void do_async()<br>
{<br>
HANDLE hin;<br>
DWORD dwBytesRead;<br>
char buff[16];</p>
<pre><code>//hin = CreateFile("CONIN$",GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,0,0);
//hin = CreateFile("STDIN$",GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING | FILE_FLAG_OVERLAPPED,0,0);
hin = GetStdHandle(STD_INPUT_HANDLE);

OVERLAPPED *po = (OVERLAPPED *)malloc(sizeof(OVERLAPPED));
char *pszBuf = (char *)malloc(128);

po-&gt;Offset = 0;
po-&gt;hEvent = (HANDLE)pszBuf;
if ( ReadFileEx( hin, pszBuf, 128, po, FileIOCompletionRoutine ) )
	debug( "ReadFileEx() succeded" );
else
{
	debug( "ReadFileEx() failed" );
	//  free( pszBuf );
	//  free( po );
}
debug("bottom of do_async");

//CloseHandle(hin);
</code></pre>
<p>};</p>
<p>bool sleep_and_input(char* c, int sleep)<br>
{<br>
HANDLE input = GetStdHandle(STD_INPUT_HANDLE);<br>
//debug(“resetting handle”);<br>
//WaitForSingleObject(input, 0);<br>
debug(“starting to wait”);<br>
int wait_result = WaitForSingleObject(input, sleep*1000);<br>
debug(“finished waiting”);<br>
if (wait_result ==  WAIT_TIMEOUT) {<br>
// it timed out - no input<br>
debug(“wait timed out, no input”);<br>
return false;<br>
} else if (wait_result == WAIT_OBJECT_0){<br>
debug(“recieved input, calling blocking read”);<br>
// never returns when not running from console<br>
// *c = _getch();<br>
// waits for enter to be pressed, includes newline in output<br>
// std::cin.get(*c);<br>
// *c = std::cin.get();<br>
// *c = getc(stdin);<br>
// waits for enter to be pressed, doesn’t include newline<br>
std::cin &gt;&gt; c;<br>
debug(“blocking read returned ‘%c’, returning true”, *c);<br>
return true;<br>
} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {<br>
// some shit went wrong<br>
debug(“somethting went wrong with wait”);<br>
return false;<br>
}<br>
return false;<br>
};</p>
<p>// this always goes directly to the blocking read, whether the first ‘resetting’ wait is there or not<br>
void do_conin()<br>
{<br>
HANDLE hin;<br>
DWORD dwBytesRead;<br>
char buff[16];</p>
<pre><code>//hin = CreateFile("CONIN$",GENERIC_READ,FILE_SHARE_READ,0,OPEN_EXISTING,0,0);
hin = GetStdHandle(STD_INPUT_HANDLE);

while(ReadFile(hin, buff, 16, &amp;dwBytesRead, NULL)){
	debug("bytes read: '%d'", dwBytesRead);
	std::cout &lt;&lt; buff &lt;&lt; std::endl;
}

CloseHandle(hin);
</code></pre>
<p>};</p>
<p>// this always goes directly to the blocking read, whether the first ‘resetting’ wait is there or not<br>
bool sleep_and_input(char* c, int sleep)<br>
{<br>
HANDLE input = GetStdHandle(STD_INPUT_HANDLE);<br>
//debug(“resetting handle”);<br>
//WaitForSingleObject(input, 0);<br>
debug(“starting to wait”);<br>
int wait_result = WaitForSingleObject(input, sleep*1000);<br>
debug(“finished waiting”);<br>
if (wait_result ==  WAIT_TIMEOUT) {<br>
// it timed out - no input<br>
debug(“wait timed out, no input”);<br>
return false;<br>
} else if (wait_result == WAIT_OBJECT_0){<br>
debug(“recieved input, calling blocking read”);<br>
// never returns when not running from console<br>
// *c = _getch();<br>
// waits for enter to be pressed, includes newline in output<br>
// std::cin.get(*c);<br>
// *c = std::cin.get();<br>
// *c = getc(stdin);<br>
// waits for enter to be pressed, doesn’t include newline<br>
std::cin &gt;&gt; c;<br>
debug(“blocking read returned ‘%c’, returning true”, *c);<br>
return true;<br>
} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {<br>
// some shit went wrong<br>
debug(“somethting went wrong with wait”);<br>
return false;<br>
}<br>
return false;<br>
};<br>
*/</p>
<p>/*<br>
int mykbhit(void)<br>
{<br>
debug(“in mykbhit”);<br>
int retval = 0;<br>
INPUT_RECORD *ir = NULL;<br>
DWORD count = 0, i;</p>
<pre><code>void *console_in = GetStdHandle(STD_INPUT_HANDLE);

GetNumberOfConsoleInputEvents(console_in, &amp;count);
debug("number of console events: '%d'", count);

if (count &amp;&amp; (ir = (INPUT_RECORD*)malloc(count * sizeof(INPUT_RECORD))) &amp;&amp;
    PeekConsoleInputA(console_in, ir, count, &amp;count))
{
  for(i = 0; i &lt; count - 1; i++)
  {
    if (ir[i].EventType == KEY_EVENT &amp;&amp;
        ir[i].Event.KeyEvent.bKeyDown &amp;&amp;
        ir[i].Event.KeyEvent.uChar.AsciiChar)
    {
      retval = 1;
      break;
    }
  }
free(ir);
}
</code></pre>
<p>return retval;<br>
}</p>
<p>bool keyHit(void)<br>
{<br>
HANDLE  stdIn = GetStdHandle(STD_INPUT_HANDLE);</p>
<p>DWORD   saveMode;<br>
GetConsoleMode(stdIn, &amp;saveMode);<br>
SetConsoleMode(stdIn, ENABLE_PROCESSED_INPUT);</p>
<p>bool  ret = false;</p>
<p>if (WaitForSingleObject(stdIn, 1) == WAIT_OBJECT_0) ret = true;</p>
<p>SetConsoleMode(stdIn, saveMode);</p>
<p>return(ret);<br>
}</p>
<p>bool getChar(TCHAR &amp;ch)<br>
{<br>
bool    ret = false;</p>
<p>HANDLE  stdIn = GetStdHandle(STD_INPUT_HANDLE);</p>
<p>DWORD   saveMode;<br>
GetConsoleMode(stdIn, &amp;saveMode);<br>
SetConsoleMode(stdIn, ENABLE_PROCESSED_INPUT);</p>
<p>if (WaitForSingleObject(stdIn, INFINITE) == WAIT_OBJECT_0)<br>
{<br>
DWORD num;<br>
//ReadConsole(stdIn, &amp;ch, 1, &amp;num, NULL);<br>
ReadFile(stdIn, &amp;ch, 1, &amp;num, NULL);<br>
//std::cin &gt;&gt; ch;</p>
<pre><code>if (num == 1) ret = true;
</code></pre>
<p>}</p>
<p>SetConsoleMode(stdIn, saveMode);</p>
<p>return(ret);<br>
}</p>
<p>TCHAR getChar(void)<br>
{<br>
TCHAR ch = 0;<br>
getChar(ch);<br>
return(ch);<br>
}</p>
<p>bool sleep_and_input(char* c, int sleep)<br>
{<br>
debug(“in sleep_and_input”);<br>
for (int i = 0; i &lt; sleep * 2; ++i)<br>
{<br>
// this always just returns 0<br>
//int size = std::cin.rdbuf()-&gt;in_avail();<br>
//debug(“cin size: ‘%d’”, size);<br>
// never returns true<br>
//if (mykbhit())<br>
Sleep(500);<br>
if(keyHit)<br>
{<br>
debug(“reading character now”);<br>
// *c = fgetc(stdin);<br>
// <em>c = getchar();<br>
<em>c = getChar();<br>
// waits for enter to be pressed, doesn’t include newline<br>
//std::cin &gt;&gt; c;<br>
debug(“character returned ‘%c’, returning true”, <em>c);<br>
return true;<br>
}<br>
}<br>
debug(“returning false”);<br>
return false;<br>
};</em>/<br>
/</em><br>
// this works when ran from the windows console, but not any other way<br>
// such as if the process is spawned from java, or ran over cygwin ssh<br>
bool sleep_and_input(char</em> c, int sleep)<br>
{<br>
for (int i = 0; i &lt; sleep * 2; ++i)<br>
{<br>
if (_kbhit())<br>
{<br>
*c = _getch();<br>
return true;<br>
}<br>
Sleep(500);<br>
}<br>
return false;<br>
};</p>
<p>// this always says “PeekConsoleInput failed.”, presumably from the same reason _kbhit never returns true<br>
// it must be looking in a different buffer than stdin<br>
void peek_print_keypress()<br>
{<br>
HANDLE input_handle = GetStdHandle(STD_INPUT_HANDLE);<br>
DWORD events = 0;      // how many events took place<br>
INPUT_RECORD input_record;  // a record of input events<br>
DWORD input_size = 1;    // how many characters to read</p>
<p>BOOL peeked = PeekConsoleInput(input_handle, &amp;input_record, input_size, &amp;events);<br>
if(!peeked)<br>
{<br>
debug(“PeekConsoleInput failed.”);<br>
return;<br>
}</p>
<p>if(peeked &amp;&amp; input_record.EventType == KEY_EVENT &amp;&amp; input_record.Event.KeyEvent.bKeyDown)<br>
{ // PeekConsoleInput succeeded and a key was pressed, so set control_key and return vk.<br>
debug(“control key state: ‘%d’, keycode: ‘%d’”, input_record.Event.KeyEvent.dwControlKeyState, input_record.Event.KeyEvent.wVirtualKeyCode);<br>
return;<br>
}</p>
<p>debug(“Key wasn’t pressed.”);<br>
}<br>
*/<br>
<span class="hashtag">#else</span></p>
<p><span class="hashtag">#include</span> &lt;stdlib.h&gt;<br>
<span class="hashtag">#include</span> </p>
<p><span class="hashtag">#include</span> &lt;termios.h&gt;<br>
<span class="hashtag">#include</span> &lt;string.h&gt;<br>
<span class="hashtag">#include</span> &lt;sys/ioctl.h&gt;<br>
<span class="hashtag">#include</span> &lt;sys/select.h&gt;</p>
<p>struct set_keypress<br>
{<br>
set_keypress()<br>
{<br>
termios new_settings;<br>
tcgetattr(0,&amp;stored_settings);<br>
new_settings = stored_settings;<br>
// Disable canonical mode, and set buffer size to 1 byte<br>
new_settings.c_lflag &amp;= (~ICANON);<br>
new_settings.c_cc[VTIME] = 0;<br>
new_settings.c_cc[VMIN] = 1;<br>
tcsetattr(0,TCSANOW,&amp;new_settings);<br>
}<br>
~set_keypress() { tcsetattr(0,TCSANOW,&amp;stored_settings); }<br>
termios stored_settings;<br>
};</p>
<p>// this code works perfectly under Linux and Mac OSX<br>
bool sleep_and_input(char* c, int sleep)<br>
{<br>
// sets the terminal to single-character mode<br>
// and resets when destructed<br>
set_keypress s;<br>
int ret = 0;</p>
<pre><code>fd_set set;
FD_ZERO(&amp;set);
FD_SET(0, &amp;set);
timeval tv = {sleep, 0};
ret = select(1, &amp;set, 0, 0, &amp;tv);
if (ret &gt; 0)
{
	*c = getc(stdin);
	return true;
}
if (errno == EINTR)
{
	debug("select failed: %s\n", strerror(errno));
	return false;
}

if (ret &lt; 0 &amp;&amp; errno != 0 &amp;&amp; errno != ETIMEDOUT)
	debug("select failed: %s\n", strerror(errno));

return false;
</code></pre>
<p>}</p>
<p><span class="hashtag">#endif</span></p>
<p>int main()<br>
{<br>
//do_async();	return 0;<br>
int refresh_delay = 3;<br>
// main loop<br>
while (true)<br>
{</p>
<pre><code>	char c = 0;
	while (sleep_and_input(&amp;c, refresh_delay))
	{
		//if(c == '\n') break;
		debug("character read: '%c'", c);

		if (c == 'q'){
			break;
		}

					// add torrent, requires a magnet link, url link, or path to a torrent file, and a save_path
		if(c == 'a'){
			// get magnet_url
			std::string magnet_url, save_path;
			std::getline(std::cin, magnet_url);
			//std::cin.ignore(INT_MAX, '\n');
			// get save_path
			std::getline(std::cin, save_path);
			//std::cin.ignore(INT_MAX, '\n');
			// add torrent, print result
			debug("magnet_url: '%s' save_path: '%s' ", magnet_url.c_str(), save_path.c_str());
			std::cout.flush();
			break;
		}

		debug("another key was pressed, handling it...");
	}

	if (c == 'q') break;

	debug("processing stuff... (Press 'q' to quit.)");
	debug("--------------------------------------------------------");
}

return 0;
</code></pre>
<p>}<br>
[/code]</p>
<p>As you see, I have a dedicated thread that spends most of it’s time blocked in a std::getline() call, which sets a string when getline() returns, then ends the thread.  It’s about as nice of code as I can come up with, judging by all the other code I’ve tried as you can see in the comments.</p>
<p>I don’t suppose anyone has a nice way to just read a single character without having to press enter in windows?  As you see from the comments, _getch() doesn’t work on stdin, and setting the console mode doesn’t make a difference since I’m not reading from the console, I’m reading from stdin.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/26">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/26</link>
        <pubDate>Thu, 28 Jul 2011 19:51:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-26</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I don’t know, it is very excessive and I don’t think creating and destroying 2 threads each second is really the way to go…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/25">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/25</link>
        <pubDate>Wed, 27 Jul 2011 20:33:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-25</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>so, does it work?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/24">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/24</link>
        <pubDate>Wed, 27 Jul 2011 19:22:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-24</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I went ahead and wrote up an example program with no dependencies that anyone can compile/run:</p>
<p><a href="https://www.moparisthebest.com/downloads/nonblockingread.7z">https://www.moparisthebest.com/downloads/nonblockingread.7z</a> (139k, complete with win32 and linux x86 executables)</p>
<pre><code class="lang-auto">#include &lt;stdio.h&gt;
#include &lt;cstdarg&gt;
#include &lt;iostream&gt;

bool print_debug = true;
FILE* g_log_file = 0;

void debug( const char* format, ... ) {
	if(!print_debug)
		return;
	printf("DEBUG: ");
	va_list args;
	va_start( args, format );
	vprintf(format, args);
	if (g_log_file){
		fprintf(g_log_file, "DEBUG: ");
		vfprintf(g_log_file, format, args);
		fprintf(g_log_file, "\n");
		fflush(g_log_file);
	}
	va_end( args );
	printf("\n");
	fflush(stdout);
}

#if defined _WIN32 || defined __CYGWIN32__

#if defined(_MSC_VER)
#	define for if (false) {} else for
#endif

#include &lt;windows.h&gt;
//#include &lt;conio.h&gt;

// this always goes directly to the blocking read, whether the first 'resetting' wait is there or not
bool sleep_and_input(char* c, int sleep)
{
	void *input = GetStdHandle(STD_INPUT_HANDLE);
	debug("resetting handle");
	WaitForSingleObject(input, 0);
	debug("starting to wait");
	int wait_result = WaitForSingleObject(input, sleep*1000);
	debug("finished waiting");
	if (wait_result ==  WAIT_TIMEOUT) {
		// it timed out - no input
		debug("wait timed out, no input");
		return false;
	} else if (wait_result == WAIT_OBJECT_0){
		debug("recieved input, calling blocking read");
		// never returns when not running from console
		// *c = _getch();
		// waits for enter to be pressed, includes newline in output
		// std::cin.get(*c);
		// *c = std::cin.get();
		// *c = getc(stdin);
		// waits for enter to be pressed, doesn't include newline
		std::cin &gt;&gt; c;
		debug("blocking read returned '%c', returning true", *c);
		return true;
	} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {
		// some shit went wrong
		debug("somethting went wrong with wait");
		return false;
	}
	return false;
};
/*

bool sleep_and_input(char* c, int sleep)
{
	debug("in sleep_and_input");
	for (int i = 0; i &lt; sleep * 2; ++i)
	{
		// this always just returns 0
		int size = std::cin.rdbuf()-&gt;in_avail();
		debug("cin size: '%d'", size);
		if (size &gt; 0)
		{
			debug("reading character now");
			// *c = fgetc(stdin);
			// *c = getchar();

			// waits for enter to be pressed, doesn't include newline
			std::cin &gt;&gt; c;
			debug("character returned '%c', returning true", *c);
			return true;
		}
		Sleep(500);
	}
	debug("returning false");
	return false;
};

// this works when ran from the windows console, but not any other way
// such as if the process is spawned from java, or ran over cygwin ssh
bool sleep_and_input(char* c, int sleep)
{
	for (int i = 0; i &lt; sleep * 2; ++i)
	{
		if (_kbhit())
		{
			*c = _getch();
			return true;
		}
		Sleep(500);
	}
	return false;
};

// this always says "PeekConsoleInput failed.", presumably from the same reason _kbhit never returns true
// it must be looking in a different buffer than stdin
void peek_print_keypress()
{
  HANDLE input_handle = GetStdHandle(STD_INPUT_HANDLE);
  DWORD events = 0;      // how many events took place
  INPUT_RECORD input_record;  // a record of input events
  DWORD input_size = 1;    // how many characters to read

  BOOL peeked = PeekConsoleInput(input_handle, &amp;input_record, input_size, &amp;events);
  if(!peeked)
  {
    debug("PeekConsoleInput failed.");
    return;
  }

  if(peeked &amp;&amp; input_record.EventType == KEY_EVENT &amp;&amp; input_record.Event.KeyEvent.bKeyDown)
  { // PeekConsoleInput succeeded and a key was pressed, so set control_key and return vk.
	 debug("control key state: '%d', keycode: '%d'", input_record.Event.KeyEvent.dwControlKeyState, input_record.Event.KeyEvent.wVirtualKeyCode);
	 return;
  }

  debug("Key wasn't pressed.");
}
*/
#else

#include &lt;stdlib.h&gt;
#include &lt;cerrno&gt;

#include &lt;termios.h&gt;
#include &lt;string.h&gt;
#include &lt;sys/ioctl.h&gt;
#include &lt;sys/select.h&gt;

struct set_keypress
{
	set_keypress()
	{
		termios new_settings;
		tcgetattr(0,&amp;stored_settings);
		new_settings = stored_settings;
		// Disable canonical mode, and set buffer size to 1 byte
		new_settings.c_lflag &amp;= (~ICANON);
		new_settings.c_cc[VTIME] = 0;
		new_settings.c_cc[VMIN] = 1;
		tcsetattr(0,TCSANOW,&amp;new_settings);
	}
	~set_keypress() { tcsetattr(0,TCSANOW,&amp;stored_settings); }
	termios stored_settings;
};

// this code works perfectly under Linux and Mac OSX
bool sleep_and_input(char* c, int sleep)
{
	// sets the terminal to single-character mode
	// and resets when destructed
	set_keypress s;
	int ret = 0;

	fd_set set;
	FD_ZERO(&amp;set);
	FD_SET(0, &amp;set);
	timeval tv = {sleep, 0};
	ret = select(1, &amp;set, 0, 0, &amp;tv);
	if (ret &gt; 0)
	{
		*c = getc(stdin);
		return true;
	}
	if (errno == EINTR)
	{
		debug("select failed: %s\n", strerror(errno));
		return false;
	}

	if (ret &lt; 0 &amp;&amp; errno != 0 &amp;&amp; errno != ETIMEDOUT)
		debug("select failed: %s\n", strerror(errno));

	return false;
}

#endif

int main()
{
	int refresh_delay = 1;
	// main loop
	while (true)
	{

		char c = 0;
		while (sleep_and_input(&amp;c, refresh_delay))
		{
			//if(c == '\n') break;
			debug("character read: '%c'", c);

			if (c == 'q'){
				break;
			}

			debug("another key was pressed, handling it...");
		}

		if (c == 'q') break;

		debug("processing stuff... (Press 'q' to quit.)");
		debug("--------------------------------------------------------");
	}

    return 0;
}
</code></pre>
<p>The comments show most of what I have tried and what happens.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/23">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/23</link>
        <pubDate>Wed, 27 Jul 2011 17:07:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-23</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>this looks excessive but probably works<br>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <a href="https://www.daniweb.com/programming/software-development/threads/349105/timeout-timer-on-cin-stdin-cin-get-etc" target="_blank" rel="nofollow noopener">DaniWeb</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:110/67;"><img src="https://static.daniweb.com/icon.png" class="thumbnail"></div>

<h3><a href="https://www.daniweb.com/programming/software-development/threads/349105/timeout-timer-on-cin-stdin-cin-get-etc" target="_blank" rel="nofollow noopener">Timeout/timer on cin/stdin/cin.get() etc..</a></h3>

<p>Basically If the user does not enter a string or character or press any keys after a certain length of time, program will goto or ask again.. or do whatever.. ...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>
</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/22">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/22</link>
        <pubDate>Wed, 27 Jul 2011 16:58:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-22</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I thought I wasn’t looking at console input, since it seems to be different than stdin?</p>
<p>edit:<br>
Yes, PeekConsole does nothing since it isn’t being ran from the console.  At this point I’m ready to go with assembly code if I have to, since this part is only targeting x86 windows anyway.</p>
<p>edit2:<br>
Anyone know a good windows-based programming forum where people might be more knowledgeable about this?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/21">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/21</link>
        <pubDate>Wed, 27 Jul 2011 15:03:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-21</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>loop with WaitForSingleObject() and PeekConsoleInput() until an INPUT_RECORD.EventType is a KEY_EVENT</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/20">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/20</link>
        <pubDate>Wed, 27 Jul 2011 03:27:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-20</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>[quote=“super_, post:18, topic:405973”]the handle is already signaled; reset it</p>
<p><code>
WaitForSingleObject(input, 0);
</code>[/quote]</p>
<p>Nope, same thing:</p>
<p><code>DEBUG: resetting handle
DEBUG: starting to wait
DEBUG: finished waiting
DEBUG: recieved input, calling getch</code></p>
<p>Here is the function as I’m using it:</p>
<p><code>bool sleep_and_input(char* c, int sleep)
{
	void *input = GetStdHandle(STD_INPUT_HANDLE);
	debug("resetting handle");
	WaitForSingleObject(input, 0);
	debug("starting to wait");
	int wait_result = WaitForSingleObject(input, sleep*1000);
	debug("finished waiting");
	if (wait_result ==  WAIT_TIMEOUT) {
		// it timed out - no input 
		debug("wait timed out, no input");
		return false;
	} else if (wait_result == WAIT_OBJECT_0){
		debug("recieved input, calling getch");
		// *c = _getch();
		// waits for enter to be pressed, includes newline in output
		//std::cin.get(*c);
		// *c = std::cin.get();
		// waits for enter to be pressed, doesn't include newline
		std::cin &gt;&gt; c;
		debug("getch returned '%c', returning true", *c);
		return true;
	} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {
		// some shit went wrong
		debug("somethting went wrong with wait");
		return false;
	}
	return false;
};</code></p>
<p>Any other ideas?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/19">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/19</link>
        <pubDate>Wed, 27 Jul 2011 03:00:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-19</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>the handle is already signaled; reset it</p>
<pre><code class="lang-auto">WaitForSingleObject(input, 0);</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/18">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/18</link>
        <pubDate>Wed, 27 Jul 2011 00:49:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-18</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>you need to be more careful with GetStdHandle(), i.e.</p>
<p>void *input = Condom(GetStdHandle(STD_INPUT_HANDLE));</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/17">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/17</link>
        <pubDate>Tue, 26 Jul 2011 18:08:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-17</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Damnit, even that code doesn’t work, it immediately returns that it has been ‘woken up’ and is ready to read from, even when it isn’t, which causes it to call _getch() and lock up the entire program waiting for input:</p>
<p><code>bool sleep_and_input(char* c, int sleep)
{
	void *input = GetStdHandle(STD_INPUT_HANDLE);
	debug("starting to wait");
	int wait_result = WaitForSingleObject(input, sleep*1000);
	debug("finished waiting");
	if (wait_result ==  WAIT_TIMEOUT) {
		/* it timed out - no input */
		debug("wait timed out, no input");
		return false;
	} else if (wait_result == WAIT_OBJECT_0){
		/* it signaled in time - input available */
		debug("recieved input, calling getch");
		*c = _getch();
		debug("getch returned, returning true");
		return true;
	} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {
		/* some shit went wrong */
		debug("somethting went wrong with wait");
		return false;
	}
	return false;
};</code></p>
<p>Running it turns out like this:<code>
DEBUG: starting to wait
DEBUG: finished waiting
DEBUG: recieved input, calling getch
</code></p>
<p>Then it locks up until I give it input…</p>
<p>edit:<br>
A lot of googling later and I simply can’t find any asynchronous or non-blocking read functions for windows that don’t use kbhit, I’m sure someone somewhere has came across this problem in the past and has a solution, any other ideas?</p>
<p>edit2:<br>
Another of my hopes shot down:<br>
int size = std::cin.rdbuf()-&gt;in_avail();<br>
Just returns 0 on windows every time…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/16">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/16</link>
        <pubDate>Tue, 26 Jul 2011 17:02:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-16</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>[quote=“Mopman, post:14, topic:405973”]I like how you tried to turn it into a Windows bashing post, when really you just weren’t doing what you thought you were.</p>
<p>It’s all very well to spout off about how files work in Unix and whatever, but you weren’t even reading from one. <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
<p>Linux isn’t magical either.[/quote]</p>
<p>In Linux, reading from stdin, or a socket, or most anything else, is the same as reading from a file.</p>
<p>Anyway, like I said in the previous post, I just can’t imagine a need to ever have 2 buffers in a console program, one for stdin, and one for keyboard input, and somehow a call to cin.getline() draws from both of them?  Why in the hell?</p>
<p>I’m giving this a test now by the way.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/15">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/15</link>
        <pubDate>Tue, 26 Jul 2011 13:57:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-15</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Mopman Mopman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mopman">@Mopman</a> wrote:</p>
          <blockquote>
              <p>I like how you tried to turn it into a Windows bashing post, when really you just weren’t doing what you thought you were.</p>
<p>It’s all very well to spout off about how files work in Unix and whatever, but you weren’t even reading from one. <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
<p>Linux isn’t magical either.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/14">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/14</link>
        <pubDate>Tue, 26 Jul 2011 07:28:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-14</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>well duh, the code is straight forward<br>
GetStdHandle(STD_INPUT_HANDLE) gives you the appropriate HANDLE to the stdin file in windows (akin to the file descriptor in unix)<br>
WaitForSingleObject() is like java’s Object.wait(); it waits for a “wake-up” signal and has an optional timeout</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/13</link>
        <pubDate>Tue, 26 Jul 2011 03:24:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-13</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I may have found a solution at the bottom of this thread:</p>
<p><a href="http://www.cplusplus.com/forum/general/5304/" class="onebox" target="_blank">http://www.cplusplus.com/forum/general/5304/</a></p>
<p>I’ll have to test it out tomorrow.</p>
<p>edit:<br>
Looks the same as the method super_ edited his post with, looks like it will work, I’ll let you know, thanks much! <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/12</link>
        <pubDate>Tue, 26 Jul 2011 03:17:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-12</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>stdin doesn’t care where input comes from, but a function designed to manipulate the keyboard buffer is well bound to manipulate the keyboard buffer…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/11</link>
        <pubDate>Tue, 26 Jul 2011 03:13:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-11</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>Perhaps it is implemented that way, though for the life of me I can’t imagine any possible reason why a console app should know or care where the characters are coming from, as long as it is getting characters sent to it.  As you can see, in Linux or OSX (assuming any other Unix-like OS too) they don’t care, and the app works the same ran from a bash shell as ran from java.</p>
<p>Some googling hasn’t really helped me any, I see plenty of ‘non-blocking’ windows read code, but so far, it ALL includes kb_hit…</p>
<aside class="onebox whitelistedgeneric">
  <header class="source">
      <img src="https://www.gamedev.net/uploads/themes/monthly_2017_04/favicon.ico.59546a253c4cfb8defa436b7865b4736.ico" class="site-icon" width="32" height="32">
      <a href="http://www.gamedev.net/forums/topic/285863-non-blocking-stdin-read-on-win32/" target="_blank" rel="nofollow noopener">GameDev.net</a>
  </header>
  <article class="onebox-body">
    <img src="https://www.gamedev.net/uploads/themes/monthly_2017_09/Gamedev-Logo-G-200x200.png.6c84cc696e42b794d39d14559abb294a.png" class="thumbnail onebox-avatar" width="200" height="200">

<h3><a href="http://www.gamedev.net/forums/topic/285863-non-blocking-stdin-read-on-win32/" target="_blank" rel="nofollow noopener">Non-blocking stdin read on win32</a></h3>

<p>I am currently in the process of porting the server side of my current project over to win32 from unix-world. Part of the app allows for someone at the console to enter in simple commands via keyboard. On the unix side, this was fairly simple. I...</p>


  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/10</link>
        <pubDate>Tue, 26 Jul 2011 03:05:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-10</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <blockquote>The buffer implemented by the C run-time functions for the stream "stdin" is different from the BIOS keyboard typeahead buffer.</blockquote>
hurrrrrrrrrrrrrrrrrrrrrrrrrrrrrrr
[code]bdos (0xC, 0, 0) ;       // clear BIOS keyboard buffer
//  Alternative method:
//  while (kbhit()) getch();[/code]
there definitely should be a different, especially if the input is piped from another process and it's input is... not from the keyboard buffer
i also do not know how to have a cin.get() timeout
<p>edit:<br>
for a windows only way to timeout on stdin…</p>
<pre><code class="lang-auto">#include &lt;windows.h&gt;

#define INPUT_TIMEOUT 5000

void *input = GetStdHandle(STD_INPUT_HANDLE);
int wait_result = WaitForSingleObject(input, INPUT_TIMEOUT);
if (wait_result ==  WAIT_TIMEOUT) {
    /* it timed out - no input */
} else if (wait_result == WAIT_OBJECT_0){
    /* it signaled in time - input available */
} else if (wait_result == WAIT_FAILED || wait_result == WAIT_ABANDONED) {
    /* some shit went wrong */
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/9</link>
        <pubDate>Tue, 26 Jul 2011 02:45:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-9</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>[quote=“super_, post:4, topic:405973”]moparisthebest there is a difference between hitting a key and data being in stdin<br>
cin.get() ought to block[/quote]</p>
<p>There really shouldn’t be a difference, and according to the only docs I found on it, it really says two different things.  It says it checks for a recent keystroke, but then it says it returns a non-zero value if a key is waiting in the buffer, which is the behavior I expected.  (and really, what is a ‘keystroke’ to a command line program if not just data in the stdin buffer?)</p>
<blockquote>The _kbhit function checks the console for a recent keystroke. If the function returns a nonzero value, a keystroke is waiting in the buffer. The program can then call _getch or _getche to get the keystroke.</blockquote>
<p>cin.get() of course does block, but as you see, I don’t want it to block, I need to implement a timeout.  Any ideas windows guru’s?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/8</link>
        <pubDate>Tue, 26 Jul 2011 02:38:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-8</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I’m actually running under XP right now, but it needs to work for all windows versions, I didnt write that particular code, but as you see I need it to block but with a timeout, cin.get can’t do that can it?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/7</link>
        <pubDate>Sun, 24 Jul 2011 05:29:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-7</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
      <item>
        <title>Write to another program&#39;s stdin in windows?</title>
        <dc:creator><![CDATA[@lawl lawl]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lawl">@lawl</a> wrote:</p>
          <blockquote>
              <p>[quote=“abraham2119, post:5, topic:405973”]im going to assume you’re running it under windows vista or 7, in which case, neither _kbhit nor _getch are supported:</p>
<p>[quote]<br>
<span class="bbcode-b">Compatibility:</span> Windows 95, Windows 98, Windows 98 Second Edition, Windows Millennium Edition, Windows NT 4.0, Windows 2000, Windows XP Home Edition, Windows XP Professional, Windows Server 2003[/quote][/quote]<br>
unless that document is old…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973/6</link>
        <pubDate>Sun, 24 Jul 2011 03:40:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-405973-6</guid>
        <source url="https://forum.moparisthebest.com/t/write-to-another-programs-stdin-in-windows/405973.rss">Write to another program&#39;s stdin in windows?</source>
      </item>
  </channel>
</rss>
