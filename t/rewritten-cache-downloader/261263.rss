<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Rewritten cache downloader</title>
    <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263</link>
    <description>[code]
	public static void initilize() throws Exception 
		{
		loadCacheFromMirrors();
                blablabla...
		}
	public static String[] links;
	public static void loadCacheFromMirrors()
	    {
        File file = new File(System.getProperty(&quot;user.home&quot;) + File.separator + &quot;.darkquest&quot;);
        if(!file.exists())
        	{
            file.mkdir();
            System.out.println(&quot;Created cache directory.&quot;);
        	}
        ArrayList&lt;String&gt; arraylist = new ArrayList&lt;String&gt;();
		try
			{
			URL url = new URL(&quot;http://www.darkq.org/links.txt&quot;); 
	        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())); 
	        String line = null;
	        while(in.ready() &amp;&amp; (line = in.readLine().trim().toLowerCase()) != null)
	        	{
	        	arraylist.add(line);
	        	}
			}
		catch(Exception e)
			{
			System.out.println(&quot;Error: failed to load cache links, are you sure you&#39;re connected to the internet?\n&quot;);
			e.printStackTrace();
			System.exit(1);
			}
        links = (String[])arraylist.toArray(new String[arraylist.size()]);
        System.out.println(&quot;Loaded &quot; + links.length + &quot; data mirrors&quot;);
	    }
	public static final File loadcache(String filename)
	    {
        File file = new File(System.getProperty(&quot;user.home&quot;) + File.separator + &quot;.darkquest&quot; + File.separator + filename);
        if(file.isFile())
        	{
        	String url = links[0] + &quot;/&quot; + filename;
        	HttpURLConnection httpurlconnection = null;
			try 
				{
				httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();
				}
			catch (Exception e) 
				{
				System.exit(1);
				e.printStackTrace();
				}
        	if(file.lastModified() &lt; httpurlconnection.getLastModified() || file.length() != httpurlconnection.getContentLength()) 
        		{
        		System.out.println(&quot;Local file out of date, deleting &quot; + filename + &quot;.&quot;);
        		file.delete();
        		}
        	else { return file; }
        	}
        System.out.println(&quot;Data file not found locally: &quot; + filename);
        ArrayList&lt;Exception&gt; arraylist	 = new ArrayList&lt;Exception&gt;();
        int failedTimes = 0;
        for(int x = 0; x &lt; links.length;)
        	{
        	String linkAddress = links[x];
        	String url = linkAddress + &quot;/&quot; + filename;
        	System.out.print(&quot;\tTrying &quot; + linkAddress + &quot; =&gt; &quot;);

        	try
        		{
        		HttpURLConnection httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();
        		if(httpurlconnection.getResponseCode() != 200)
        			{
        			System.out.println(&quot;Unable to obtain file.&quot;);
        			if(failedTimes == 20) 
        				{
        				arraylist.add(new Exception(linkAddress + &quot; returned 200.&quot;));
        				x++;
        				failedTimes = 0;
        				}
        			else { failedTimes++; }
        			continue;
        			}
        		int size = httpurlconnection.getContentLength();
        		System.out.print(&quot;Downloading... &quot;);
        		InputStream inputstream = httpurlconnection.getInputStream();
        		file.createNewFile();
        		FileOutputStream fileoutputstream = new FileOutputStream(file);
        		byte abyte0[] = new byte[1024];
        		long i = 0;
        		for(int k1 = 0; (k1 = inputstream.read(abyte0)) != -1;)
        			{
        			i += k1;
        			int percent = Math.round(i*100/size);
        			drawDownloadProgress(filename,percent);
        			fileoutputstream.write(abyte0, 0, k1);
        			}
        		inputstream.close();
        		fileoutputstream.close();
        		System.out.println(&quot;done.&quot;);
        		break;
        		}
        	catch(Exception exception1)
        		{
        		System.out.println(&quot;Unable to obtain file.&quot;);
        		arraylist.add(exception1);
        		x++;
        		}
        	}
        if(arraylist.size() == links.length)
        	{
        	System.out.println(&quot;\nDownloading &quot; + filename + &quot; failed.\nPlease report the error, and include the following exception data: &quot;);
        	Exception exception;
        	for(Iterator&lt;Exception&gt; iterator = arraylist.iterator(); iterator.hasNext(); System.out.println(&quot;\t&quot; + exception.getMessage()))
        		{
        		exception = (Exception)iterator.next();
        		}
        	System.exit(0);
        	}
        return file;
    	}
[/code]

Thought I&#39;d post it to save a few minutes of your time. Should work on all OSs + checks for updates.[br][br][size=1]Posted on: February 09, 2009, 03:28:05 am[/size][hr]Ugh code tags fuck up indenting.</description>
    
    <lastBuildDate>Tue, 10 Feb 2009 08:31:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Rewritten cache downloader</title>
        <dc:creator><![CDATA[@xEnt xEnt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xent">@xEnt</a> wrote:</p>
          <blockquote>
              <p>[quote=“Lothy, post:3, topic:261263”]Take three:</p>
<p>[code]<br>
public static void initilize() throws Exception {<br>
loadCacheFromMirrors();<br>
blablabla…<br>
}</p>
<pre><code>public static String[] links;

public static void loadCacheFromMirrors() {
    File file = new File(System.getProperty("user.home") + File.separator + ".darkquest");
    if (!file.exists()) {
        file.mkdir();
        System.out.println("Created cache directory.");
    }
    ArrayList&lt;String&gt; arraylist = new ArrayList&lt;String&gt;();
    try {
        URL url = new URL("http://www.darkq.org/links.txt");
        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
        String line = null;
        while (in.ready() &amp;&amp; (line = in.readLine().trim().toLowerCase()) != null) {
            arraylist.add(line);
        }
    }
    catch (Exception e) {
        System.out.println("Error: failed to load cache links, are you sure you're connected to the internet?\n");
        e.printStackTrace();
        System.exit(1);
    }
    links = (String[]) arraylist.toArray(new String[arraylist.size()]);
    System.out.println("Loaded " + links.length + " data mirrors");
}

public static final File loadcache(String filename) {
    File file = new File(System.getProperty("user.home") + File.separator + ".darkquest" + File.separator + filename);
    if (file.isFile()) {
        String url = links[0] + "/" + filename;
        HttpURLConnection httpurlconnection = null;
        try {
            httpurlconnection = (HttpURLConnection) (new URL(url)).openConnection();
        }
        catch (Exception e) {
            System.exit(1);
            e.printStackTrace();
        }
        if (file.lastModified() &lt; httpurlconnection.getLastModified() || file.length() != httpurlconnection.getContentLength()) {
            System.out.println("Local file out of date, deleting " + filename + ".");
            file.delete();
        } else {
            return file;
        }
    }
    System.out.println("Data file not found locally: " + filename);
    ArrayList&lt;Exception&gt; arraylist = new ArrayList&lt;Exception&gt;();
    int failedTimes = 0;
    for (int x = 0; x &lt; links.length;) {
        String linkAddress = links[x];
        String url = linkAddress + "/" + filename;
        System.out.print("\tTrying " + linkAddress + " =&gt; ");

        try {
            HttpURLConnection httpurlconnection = (HttpURLConnection) (new URL(url)).openConnection();
            if (httpurlconnection.getResponseCode() != 200) {
                System.out.println("Unable to obtain file.");
                if (failedTimes == 20) {
                    arraylist.add(new Exception(linkAddress + " returned 200."));
                    x++;
                    failedTimes = 0;
                } else {
                    failedTimes++;
                }
                continue;
            }
            int size = httpurlconnection.getContentLength();
            System.out.print("Downloading... ");
            InputStream inputstream = httpurlconnection.getInputStream();
            file.createNewFile();
            FileOutputStream fileoutputstream = new FileOutputStream(file);
            byte abyte0[] = new byte[1024];
            long i = 0;
            for (int k1 = 0; (k1 = inputstream.read(abyte0)) != -1;) {
                i += k1;
                int percent = Math.round(i * 100 / size);
                drawDownloadProgress(filename, percent);
                fileoutputstream.write(abyte0, 0, k1);
            }
            inputstream.close();
            fileoutputstream.close();
            System.out.println("done.");
            break;
        }
        catch (Exception exception1) {
            System.out.println("Unable to obtain file.");
            arraylist.add(exception1);
            x++;
        }
    }
    if (arraylist.size() == links.length) {
        System.out.println("\nDownloading " + filename + " failed.\nPlease report the error, and include the following exception data: ");
        Exception exception;
        for (Iterator&lt;Exception&gt; iterator = arraylist.iterator(); iterator.hasNext(); System.out.println("\t" + exception.getMessage())) {
            exception = (Exception) iterator.next();
        }
        System.exit(0);
    }
    return file;
}
</code></pre>
<p>[/code][/quote]</p>
<p>Yeh Eclipse auto-indenting on Peter’s code didn’t align the first brackets on the same line at the end of the methods, so i could not be fucked manually doing it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/5</link>
        <pubDate>Tue, 10 Feb 2009 08:31:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261263-5</guid>
        <source url="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss">Rewritten cache downloader</source>
      </item>
      <item>
        <title>Rewritten cache downloader</title>
        <dc:creator><![CDATA[@Peter Peeter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/peter">@Peter</a> wrote:</p>
          <blockquote>
              <p>Ugly indenting! Anyways, this will work as an autoupdater for data files also.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/4</link>
        <pubDate>Tue, 10 Feb 2009 06:12:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261263-4</guid>
        <source url="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss">Rewritten cache downloader</source>
      </item>
      <item>
        <title>Rewritten cache downloader</title>
        <dc:creator><![CDATA[@lothy Lothy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lothy">@lothy</a> wrote:</p>
          <blockquote>
              <p>Take three:</p>
<pre><code class="lang-auto">    public static void initilize() throws Exception {
        loadCacheFromMirrors();
        blablabla...
    }

    public static String[] links;

    public static void loadCacheFromMirrors() {
        File file = new File(System.getProperty("user.home") + File.separator + ".darkquest");
        if (!file.exists()) {
            file.mkdir();
            System.out.println("Created cache directory.");
        }
        ArrayList&lt;String&gt; arraylist = new ArrayList&lt;String&gt;();
        try {
            URL url = new URL("http://www.darkq.org/links.txt");
            BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));
            String line = null;
            while (in.ready() &amp;&amp; (line = in.readLine().trim().toLowerCase()) != null) {
                arraylist.add(line);
            }
        }
        catch (Exception e) {
            System.out.println("Error: failed to load cache links, are you sure you're connected to the internet?\n");
            e.printStackTrace();
            System.exit(1);
        }
        links = (String[]) arraylist.toArray(new String[arraylist.size()]);
        System.out.println("Loaded " + links.length + " data mirrors");
    }

    public static final File loadcache(String filename) {
        File file = new File(System.getProperty("user.home") + File.separator + ".darkquest" + File.separator + filename);
        if (file.isFile()) {
            String url = links[0] + "/" + filename;
            HttpURLConnection httpurlconnection = null;
            try {
                httpurlconnection = (HttpURLConnection) (new URL(url)).openConnection();
            }
            catch (Exception e) {
                System.exit(1);
                e.printStackTrace();
            }
            if (file.lastModified() &lt; httpurlconnection.getLastModified() || file.length() != httpurlconnection.getContentLength()) {
                System.out.println("Local file out of date, deleting " + filename + ".");
                file.delete();
            } else {
                return file;
            }
        }
        System.out.println("Data file not found locally: " + filename);
        ArrayList&lt;Exception&gt; arraylist = new ArrayList&lt;Exception&gt;();
        int failedTimes = 0;
        for (int x = 0; x &lt; links.length;) {
            String linkAddress = links[x];
            String url = linkAddress + "/" + filename;
            System.out.print("\tTrying " + linkAddress + " =&gt; ");

            try {
                HttpURLConnection httpurlconnection = (HttpURLConnection) (new URL(url)).openConnection();
                if (httpurlconnection.getResponseCode() != 200) {
                    System.out.println("Unable to obtain file.");
                    if (failedTimes == 20) {
                        arraylist.add(new Exception(linkAddress + " returned 200."));
                        x++;
                        failedTimes = 0;
                    } else {
                        failedTimes++;
                    }
                    continue;
                }
                int size = httpurlconnection.getContentLength();
                System.out.print("Downloading... ");
                InputStream inputstream = httpurlconnection.getInputStream();
                file.createNewFile();
                FileOutputStream fileoutputstream = new FileOutputStream(file);
                byte abyte0[] = new byte[1024];
                long i = 0;
                for (int k1 = 0; (k1 = inputstream.read(abyte0)) != -1;) {
                    i += k1;
                    int percent = Math.round(i * 100 / size);
                    drawDownloadProgress(filename, percent);
                    fileoutputstream.write(abyte0, 0, k1);
                }
                inputstream.close();
                fileoutputstream.close();
                System.out.println("done.");
                break;
            }
            catch (Exception exception1) {
                System.out.println("Unable to obtain file.");
                arraylist.add(exception1);
                x++;
            }
        }
        if (arraylist.size() == links.length) {
            System.out.println("\nDownloading " + filename + " failed.\nPlease report the error, and include the following exception data: ");
            Exception exception;
            for (Iterator&lt;Exception&gt; iterator = arraylist.iterator(); iterator.hasNext(); System.out.println("\t" + exception.getMessage())) {
                exception = (Exception) iterator.next();
            }
            System.exit(0);
        }
        return file;
    }</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/3</link>
        <pubDate>Tue, 10 Feb 2009 05:39:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261263-3</guid>
        <source url="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss">Rewritten cache downloader</source>
      </item>
      <item>
        <title>Rewritten cache downloader</title>
        <dc:creator><![CDATA[@xEnt xEnt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/xent">@xEnt</a> wrote:</p>
          <blockquote>
              <p>[code]public static void initilize() throws Exception<br>
{<br>
loadCacheFromMirrors();<br>
blablabla…<br>
}<br>
public static String[] links;<br>
public static void loadCacheFromMirrors()<br>
{<br>
File file = new File(System.getProperty(“user.home”) + File.separator + “.darkquest”);<br>
if(!file.exists())<br>
{<br>
file.mkdir();<br>
System.out.println(“Created cache directory.”);<br>
}<br>
ArrayList arraylist = new ArrayList();<br>
try<br>
{<br>
URL url = new URL(“<a href="http://www.darkq.org/links.txt" rel="nofollow noopener">http://www.darkq.org/links.txt</a>”);<br>
BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream()));<br>
String line = null;<br>
while(in.ready() &amp;&amp; (line = in.readLine().trim().toLowerCase()) != null)<br>
{<br>
arraylist.add(line);<br>
}<br>
}<br>
catch(Exception e)<br>
{<br>
System.out.println(“Error: failed to load cache links, are you sure you’re connected to the internet?\n”);<br>
e.printStackTrace();<br>
System.exit(1);<br>
}<br>
links = (String[])arraylist.toArray(new String[arraylist.size()]);<br>
System.out.println(“Loaded " + links.length + " data mirrors”);<br>
}<br>
public static final File loadcache(String filename)<br>
{<br>
File file = new File(System.getProperty(“user.home”) + File.separator + “.darkquest” + File.separator + filename);<br>
if(file.isFile())<br>
{<br>
String url = links[0] + “/” + filename;<br>
HttpURLConnection httpurlconnection = null;<br>
try<br>
{<br>
httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();<br>
}<br>
catch (Exception e)<br>
{<br>
System.exit(1);<br>
e.printStackTrace();<br>
}<br>
if(file.lastModified() &lt; httpurlconnection.getLastModified() || file.length() != httpurlconnection.getContentLength())<br>
{<br>
System.out.println("Local file out of date, deleting " + filename + “.”);<br>
file.delete();<br>
}<br>
else { return file; }<br>
}<br>
System.out.println(“Data file not found locally: " + filename);<br>
ArrayList arraylist	 = new ArrayList();<br>
int failedTimes = 0;<br>
for(int x = 0; x &lt; links.length;)<br>
{<br>
String linkAddress = links[x];<br>
String url = linkAddress + “/” + filename;<br>
System.out.print(”\tTrying " + linkAddress + " =&gt; ");</p>
<pre><code>			try
			{
				HttpURLConnection httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();
				if(httpurlconnection.getResponseCode() != 200)
				{
					System.out.println("Unable to obtain file.");
					if(failedTimes == 20) 
					{
						arraylist.add(new Exception(linkAddress + " returned 200."));
						x++;
						failedTimes = 0;
					}
					else { failedTimes++; }
					continue;
				}
				int size = httpurlconnection.getContentLength();
				System.out.print("Downloading... ");
				InputStream inputstream = httpurlconnection.getInputStream();
				file.createNewFile();
				FileOutputStream fileoutputstream = new FileOutputStream(file);
				byte abyte0[] = new byte[1024];
				long i = 0;
				for(int k1 = 0; (k1 = inputstream.read(abyte0)) != -1;)
				{
					i += k1;
					int percent = Math.round(i*100/size);
					drawDownloadProgress(filename,percent);
					fileoutputstream.write(abyte0, 0, k1);
				}
				inputstream.close();
				fileoutputstream.close();
				System.out.println("done.");
				break;
			}
			catch(Exception exception1)
			{
				System.out.println("Unable to obtain file.");
				arraylist.add(exception1);
				x++;
			}
		}
		if(arraylist.size() == links.length)
		{
			System.out.println("\nDownloading " + filename + " failed.\nPlease report the error, and include the following exception data: ");
			Exception exception;
			for(Iterator&lt;Exception&gt; iterator = arraylist.iterator(); iterator.hasNext(); System.out.println("\t" + exception.getMessage()))
			{
				exception = (Exception)iterator.next();
			}
			System.exit(0);
		}
		return file;
	}	[/code]
</code></pre>
<p>Re-indented re-post of the above code.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/2</link>
        <pubDate>Tue, 10 Feb 2009 04:58:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261263-2</guid>
        <source url="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss">Rewritten cache downloader</source>
      </item>
      <item>
        <title>Rewritten cache downloader</title>
        <dc:creator><![CDATA[@Peter Peeter]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/peter">@Peter</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto">	public static void initilize() throws Exception 
		{
		loadCacheFromMirrors();
                blablabla...
		}
	public static String[] links;
	public static void loadCacheFromMirrors()
	    {
        File file = new File(System.getProperty("user.home") + File.separator + ".darkquest");
        if(!file.exists())
        	{
            file.mkdir();
            System.out.println("Created cache directory.");
        	}
        ArrayList&lt;String&gt; arraylist = new ArrayList&lt;String&gt;();
		try
			{
			URL url = new URL("http://www.darkq.org/links.txt"); 
	        BufferedReader in = new BufferedReader(new InputStreamReader(url.openStream())); 
	        String line = null;
	        while(in.ready() &amp;&amp; (line = in.readLine().trim().toLowerCase()) != null)
	        	{
	        	arraylist.add(line);
	        	}
			}
		catch(Exception e)
			{
			System.out.println("Error: failed to load cache links, are you sure you're connected to the internet?\n");
			e.printStackTrace();
			System.exit(1);
			}
        links = (String[])arraylist.toArray(new String[arraylist.size()]);
        System.out.println("Loaded " + links.length + " data mirrors");
	    }
	public static final File loadcache(String filename)
	    {
        File file = new File(System.getProperty("user.home") + File.separator + ".darkquest" + File.separator + filename);
        if(file.isFile())
        	{
        	String url = links[0] + "/" + filename;
        	HttpURLConnection httpurlconnection = null;
			try 
				{
				httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();
				}
			catch (Exception e) 
				{
				System.exit(1);
				e.printStackTrace();
				}
        	if(file.lastModified() &lt; httpurlconnection.getLastModified() || file.length() != httpurlconnection.getContentLength()) 
        		{
        		System.out.println("Local file out of date, deleting " + filename + ".");
        		file.delete();
        		}
        	else { return file; }
        	}
        System.out.println("Data file not found locally: " + filename);
        ArrayList&lt;Exception&gt; arraylist	 = new ArrayList&lt;Exception&gt;();
        int failedTimes = 0;
        for(int x = 0; x &lt; links.length;)
        	{
        	String linkAddress = links[x];
        	String url = linkAddress + "/" + filename;
        	System.out.print("\tTrying " + linkAddress + " =&gt; ");

        	try
        		{
        		HttpURLConnection httpurlconnection = (HttpURLConnection)(new URL(url)).openConnection();
        		if(httpurlconnection.getResponseCode() != 200)
        			{
        			System.out.println("Unable to obtain file.");
        			if(failedTimes == 20) 
        				{
        				arraylist.add(new Exception(linkAddress + " returned 200."));
        				x++;
        				failedTimes = 0;
        				}
        			else { failedTimes++; }
        			continue;
        			}
        		int size = httpurlconnection.getContentLength();
        		System.out.print("Downloading... ");
        		InputStream inputstream = httpurlconnection.getInputStream();
        		file.createNewFile();
        		FileOutputStream fileoutputstream = new FileOutputStream(file);
        		byte abyte0[] = new byte[1024];
        		long i = 0;
        		for(int k1 = 0; (k1 = inputstream.read(abyte0)) != -1;)
        			{
        			i += k1;
        			int percent = Math.round(i*100/size);
        			drawDownloadProgress(filename,percent);
        			fileoutputstream.write(abyte0, 0, k1);
        			}
        		inputstream.close();
        		fileoutputstream.close();
        		System.out.println("done.");
        		break;
        		}
        	catch(Exception exception1)
        		{
        		System.out.println("Unable to obtain file.");
        		arraylist.add(exception1);
        		x++;
        		}
        	}
        if(arraylist.size() == links.length)
        	{
        	System.out.println("\nDownloading " + filename + " failed.\nPlease report the error, and include the following exception data: ");
        	Exception exception;
        	for(Iterator&lt;Exception&gt; iterator = arraylist.iterator(); iterator.hasNext(); System.out.println("\t" + exception.getMessage()))
        		{
        		exception = (Exception)iterator.next();
        		}
        	System.exit(0);
        	}
        return file;
    	}</code></pre>
<p>Thought I’d post it to save a few minutes of your time. Should work on all OSs + checks for updates.[br][br][size=1]Posted on: February 09, 2009, 03:28:05 am[/size][hr]Ugh code tags fuck up indenting.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263/1</link>
        <pubDate>Mon, 09 Feb 2009 09:27:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-261263-1</guid>
        <source url="https://forum.moparisthebest.com/t/rewritten-cache-downloader/261263.rss">Rewritten cache downloader</source>
      </item>
  </channel>
</rss>
