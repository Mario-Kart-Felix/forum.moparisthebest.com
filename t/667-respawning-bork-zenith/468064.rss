<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>667 Respawning Bork [Zenith]</title>
    <link>https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064</link>
    <description>[spoiler]
package com.rs.game.npc.others;

import java.util.List;
import java.util.concurrent.TimeUnit;

import com.rs.cores.CoresManager;
import com.rs.game.Animation;
import com.rs.game.Entity;
import com.rs.game.Graphics;
import com.rs.game.Hit;
import com.rs.game.Hit.HitLook;
import com.rs.game.World;
import com.rs.game.WorldTile;
import com.rs.game.npc.NPC;
import com.rs.game.npc.combat.NPCCombatDefinitions;
import com.rs.game.player.Player;
import com.rs.game.tasks.WorldTask;
import com.rs.game.tasks.WorldTasksManager;
import com.rs.utils.Utils;

@SuppressWarnings(&quot;serial&quot;)
public final class Bork extends NPC {

        //private boolean[] demonPrayer;
        private int fixedCombatType;
        private int[] cachedDamage;
        //private int shieldTimer;
        private int fixedAmount;
        //private int prayerTimer;

        public Bork(int id, WorldTile tile, int mapAreaNameHash,
                        boolean canBeAttackFromOutOfArea, boolean spawned) {
                super(id, tile, mapAreaNameHash, canBeAttackFromOutOfArea, spawned);
                //demonPrayer = new boolean[3];
                cachedDamage = new int[3];
                //shieldTimer = 0;
                //switchPrayers(0);
        }

        //public void switchPrayers(int type) {
        //        transformIntoNPC(8133);
        //        demonPrayer[type] = false;
        //        resetPrayerTimer();
        //}

        //private void resetPrayerTimer() {
        //        prayerTimer = 16;
        //}

        //@Override
        //public void processNPC() {
        //        super.processNPC();
        //        if (isDead())
        //                return;
        //        if (Utils.getRandom(40) &lt;= 2)
        //                sendRandomProjectile();
        //        if (getCombat().process()) {// no point in processing
        //                if (shieldTimer &gt; 0)
        //                        shieldTimer--;
        //                if (prayerTimer &gt; 0)
        //                        prayerTimer--;
        //                if (fixedAmount &gt;= 5)
        //                        fixedAmount = 0;
        //                if (prayerTimer == 0) {
        //                        for (int i = 0; i &lt; cachedDamage.length; i++) {
        //                                if (cachedDamage[i] &gt;= 310) {
        //                                        demonPrayer = new boolean[3];
        //                                        switchPrayers(i);
        //                                        cachedDamage = new int[3];
        //                                }
        //                        }
        //                }
        //                for (int i = 0; i &lt; cachedDamage.length; i++) {
        //                        if (cachedDamage[i] &gt;= 310) {
        //                                demonPrayer = new boolean[3];
        //                                switchPrayers(i);
        //                                cachedDamage = new int[3];
        //                        }
        //                }
        //        }
        //}

        //@Override
        //public void handleIngoingHit(final Hit hit) {
        //        int type = 0;
        //        super.handleIngoingHit(hit);
        //        if (hit.getSource() instanceof Player) {// darklight
        //                Player player = (Player) hit.getSource();
        //                if ((player.getEquipment().getWeaponId() == 6746 || player
        //                                .getEquipment().getWeaponId() == 2402)
        //                                &amp;&amp; hit.getLook() == HitLook.MELEE_DAMAGE
        //                                &amp;&amp; hit.getDamage() &gt; 0) {
        //                        shieldTimer = 60;
        //                        player.getPackets().sendGameMessage(
        //                                        &quot;The Corporeal Beast is temporarily weakend by your weapon.&quot;);
        //                }
        //        }
        //        if (shieldTimer &lt;= 0) {// 75% of damage is absorbed
        //                hit.setDamage((int) (hit.getDamage() * 0.25));
        //                setNextGraphics(new Graphics(1885));
        //        }
        //        if (hit.getLook() == HitLook.MELEE_DAMAGE) {
        //                if (demonPrayer[0]) {
        //                        hit.setDamage(0);
        //                } else {
        //                        cachedDamage[0] += hit.getDamage();
        //                }
        //        } else if (hit.getLook() == HitLook.MELEE_DAMAGE) {
        //                type = 1;
        //                if (demonPrayer[1]) {
        //                        hit.setDamage(0);
        //                } else {
        //                        cachedDamage[1] += hit.getDamage();
        //                }
        //        } else if (hit.getLook() == HitLook.RANGE_DAMAGE) {
        //                type = 2;
        //                if (demonPrayer[2]) {
        //                        hit.setDamage(0);
        //                } else {
        //                        cachedDamage[2] += hit.getDamage();
        //                }
        //        } else if (hit.getLook() == HitLook.MISSED) {
        //                cachedDamage[type] += 20;
        //        } else {
        //                cachedDamage[Utils.getRandom(2)] += 20;// random
        //        }
        //}

        @Override
        public void sendDeath(Entity source) {
                final NPCCombatDefinitions defs = getCombatDefinitions();
                resetWalkSteps();
                getCombat().removeTarget();
                setNextAnimation(null);
                //shieldTimer = 0;
                WorldTasksManager.schedule(new WorldTask() {
                        int loop;

                        @Override
                        public void run() {
                                if (loop == 0) {
                                        setNextAnimation(new Animation(defs.getDeathEmote()));
                                } else if (loop &gt;= defs.getDeathDelay()) {
                                        drop();
                                        reset();
                                        setLocation(getRespawnTile());
                                        finish();
                                        setRespawnTask();
                                        stop();
                                }
                                loop++;
                        }
                }, 0, 1);
        }

        //private void sendRandomProjectile() {
        //        WorldTile tile = new WorldTile(getX() + Utils.random(7), getY()
        //                        + Utils.random(7), getPlane());
        //        setNextAnimation(new Animation(10918));
        //        World.sendProjectile(this, tile, 1887, 34, 16, 40, 35, 16, 0);
        //        for (int regionId : getMapRegionsIds()) {
        //                List&lt;Integer&gt; playerIndexes = World.getRegion(regionId)
        //                                .getPlayerIndexes();
        //                if (playerIndexes != null) {
        //                        for (int npcIndex : playerIndexes) {
        //                                Player player = World.getPlayers().get(npcIndex);
        //                                if (player == null || player.isDead()
        //                                                || player.hasFinished() || !player.isRunning()
        //                                                || !player.withinDistance(tile, 3))
        //                                        continue;
        //                                player.getPackets().sendGameMessage(
        //                                                &quot;The Corporeal Beast&#39;s magical attack splashes on you.&quot;);
        //                                player.applyHit(new Hit(this, 281, HitLook.MAGIC_DAMAGE, 1));
        //                        }
        //                }
        //        }
        //}

        @Override
        public void setRespawnTask() {
                if (!hasFinished()) {
                        reset();
                        setLocation(getRespawnTile());
                        finish();
                }
                final NPC npc = this;
                CoresManager.slowExecutor.schedule(new Runnable() {
                        @Override
                        public void run() {
                                setFinished(false);
                                World.addNPC(npc);
                                npc.setLastRegionId(0);
                                World.updateEntityRegion(npc);
                                loadMapRegions();
                                checkMultiArea();
                                //shieldTimer = 0;
                                fixedCombatType = 0;
                                fixedAmount = 0;
                        }
                }, getCombatDefinitions().getRespawnDelay() * 10000,
                                TimeUnit.MILLISECONDS);
        }
        public int getFixedCombatType() {
                return fixedCombatType;
        }

        public void setFixedCombatType(int fixedCombatType) {
                this.fixedCombatType = fixedCombatType;
        }

        public int getFixedAmount() {
                return fixedAmount;
        }

        public void setFixedAmount(int fixedAmount) {
                this.fixedAmount = fixedAmount;
        }

}
[/spoiler]

Don&#39;t insult the code, I&#39;ve got a cleaner one but this is the same thing. It compiles correctly, i&#39;ve added the world.java segments and it still doesn&#39;t spawn. I don&#39;t quite understand this, if someone could help it would be greatly appriciated.

~Andrew
Inb4 &quot;l2code&quot; comments.</description>
    
    <lastBuildDate>Tue, 13 Nov 2012 21:53:34 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>667 Respawning Bork [Zenith]</title>
        <dc:creator><![CDATA[@noobs1234111 noobs1234111]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/noobs1234111">@noobs1234111</a> wrote:</p>
          <blockquote>
              <p>:fp: quote where i fucked up please. lolol</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/3</link>
        <pubDate>Tue, 13 Nov 2012 21:53:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-468064-3</guid>
        <source url="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064.rss">667 Respawning Bork [Zenith]</source>
      </item>
      <item>
        <title>667 Respawning Bork [Zenith]</title>
        <dc:creator><![CDATA[@PvPXile PvPXile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pvpxile">@PvPXile</a> wrote:</p>
          <blockquote>
              <p>Why is there //'s before the respawn</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/2</link>
        <pubDate>Tue, 13 Nov 2012 20:34:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-468064-2</guid>
        <source url="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064.rss">667 Respawning Bork [Zenith]</source>
      </item>
      <item>
        <title>667 Respawning Bork [Zenith]</title>
        <dc:creator><![CDATA[@noobs1234111 noobs1234111]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/noobs1234111">@noobs1234111</a> wrote:</p>
          <blockquote>
              <p>[spoiler]<br>
package com.rs.game.npc.others;</p>
<p>import java.util.List;<br>
import java.util.concurrent.TimeUnit;</p>
<p>import com.rs.cores.CoresManager;<br>
import com.rs.game.Animation;<br>
import com.rs.game.Entity;<br>
import com.rs.game.Graphics;<br>
import com.rs.game.Hit;<br>
import com.rs.game.Hit.HitLook;<br>
import com.rs.game.World;<br>
import com.rs.game.WorldTile;<br>
import com.rs.game.npc.NPC;<br>
import com.rs.game.npc.combat.NPCCombatDefinitions;<br>
import com.rs.game.player.Player;<br>
import com.rs.game.tasks.WorldTask;<br>
import com.rs.game.tasks.WorldTasksManager;<br>
import com.rs.utils.Utils;</p>
<p><span class="mention">@SuppressWarnings</span>(“serial”)<br>
public final class Bork extends NPC {</p>
<pre><code>    //private boolean[] demonPrayer;
    private int fixedCombatType;
    private int[] cachedDamage;
    //private int shieldTimer;
    private int fixedAmount;
    //private int prayerTimer;

    public Bork(int id, WorldTile tile, int mapAreaNameHash,
                    boolean canBeAttackFromOutOfArea, boolean spawned) {
            super(id, tile, mapAreaNameHash, canBeAttackFromOutOfArea, spawned);
            //demonPrayer = new boolean[3];
            cachedDamage = new int[3];
            //shieldTimer = 0;
            //switchPrayers(0);
    }

    //public void switchPrayers(int type) {
    //        transformIntoNPC(8133);
    //        demonPrayer[type] = false;
    //        resetPrayerTimer();
    //}

    //private void resetPrayerTimer() {
    //        prayerTimer = 16;
    //}

    //@Override
    //public void processNPC() {
    //        super.processNPC();
    //        if (isDead())
    //                return;
    //        if (Utils.getRandom(40) &lt;= 2)
    //                sendRandomProjectile();
    //        if (getCombat().process()) {// no point in processing
    //                if (shieldTimer &gt; 0)
    //                        shieldTimer--;
    //                if (prayerTimer &gt; 0)
    //                        prayerTimer--;
    //                if (fixedAmount &gt;= 5)
    //                        fixedAmount = 0;
    //                if (prayerTimer == 0) {
    //                        for (int i = 0; i &lt; cachedDamage.length; i++) {
    //                                if (cachedDamage[i] &gt;= 310) {
    //                                        demonPrayer = new boolean[3];
    //                                        switchPrayers(i);
    //                                        cachedDamage = new int[3];
    //                                }
    //                        }
    //                }
    //                for (int i = 0; i &lt; cachedDamage.length; i++) {
    //                        if (cachedDamage[i] &gt;= 310) {
    //                                demonPrayer = new boolean[3];
    //                                switchPrayers(i);
    //                                cachedDamage = new int[3];
    //                        }
    //                }
    //        }
    //}

    //@Override
    //public void handleIngoingHit(final Hit hit) {
    //        int type = 0;
    //        super.handleIngoingHit(hit);
    //        if (hit.getSource() instanceof Player) {// darklight
    //                Player player = (Player) hit.getSource();
    //                if ((player.getEquipment().getWeaponId() == 6746 || player
    //                                .getEquipment().getWeaponId() == 2402)
    //                                &amp;&amp; hit.getLook() == HitLook.MELEE_DAMAGE
    //                                &amp;&amp; hit.getDamage() &gt; 0) {
    //                        shieldTimer = 60;
    //                        player.getPackets().sendGameMessage(
    //                                        "The Corporeal Beast is temporarily weakend by your weapon.");
    //                }
    //        }
    //        if (shieldTimer &lt;= 0) {// 75% of damage is absorbed
    //                hit.setDamage((int) (hit.getDamage() * 0.25));
    //                setNextGraphics(new Graphics(1885));
    //        }
    //        if (hit.getLook() == HitLook.MELEE_DAMAGE) {
    //                if (demonPrayer[0]) {
    //                        hit.setDamage(0);
    //                } else {
    //                        cachedDamage[0] += hit.getDamage();
    //                }
    //        } else if (hit.getLook() == HitLook.MELEE_DAMAGE) {
    //                type = 1;
    //                if (demonPrayer[1]) {
    //                        hit.setDamage(0);
    //                } else {
    //                        cachedDamage[1] += hit.getDamage();
    //                }
    //        } else if (hit.getLook() == HitLook.RANGE_DAMAGE) {
    //                type = 2;
    //                if (demonPrayer[2]) {
    //                        hit.setDamage(0);
    //                } else {
    //                        cachedDamage[2] += hit.getDamage();
    //                }
    //        } else if (hit.getLook() == HitLook.MISSED) {
    //                cachedDamage[type] += 20;
    //        } else {
    //                cachedDamage[Utils.getRandom(2)] += 20;// random
    //        }
    //}

    @Override
    public void sendDeath(Entity source) {
            final NPCCombatDefinitions defs = getCombatDefinitions();
            resetWalkSteps();
            getCombat().removeTarget();
            setNextAnimation(null);
            //shieldTimer = 0;
            WorldTasksManager.schedule(new WorldTask() {
                    int loop;

                    @Override
                    public void run() {
                            if (loop == 0) {
                                    setNextAnimation(new Animation(defs.getDeathEmote()));
                            } else if (loop &gt;= defs.getDeathDelay()) {
                                    drop();
                                    reset();
                                    setLocation(getRespawnTile());
                                    finish();
                                    setRespawnTask();
                                    stop();
                            }
                            loop++;
                    }
            }, 0, 1);
    }

    //private void sendRandomProjectile() {
    //        WorldTile tile = new WorldTile(getX() + Utils.random(7), getY()
    //                        + Utils.random(7), getPlane());
    //        setNextAnimation(new Animation(10918));
    //        World.sendProjectile(this, tile, 1887, 34, 16, 40, 35, 16, 0);
    //        for (int regionId : getMapRegionsIds()) {
    //                List&lt;Integer&gt; playerIndexes = World.getRegion(regionId)
    //                                .getPlayerIndexes();
    //                if (playerIndexes != null) {
    //                        for (int npcIndex : playerIndexes) {
    //                                Player player = World.getPlayers().get(npcIndex);
    //                                if (player == null || player.isDead()
    //                                                || player.hasFinished() || !player.isRunning()
    //                                                || !player.withinDistance(tile, 3))
    //                                        continue;
    //                                player.getPackets().sendGameMessage(
    //                                                "The Corporeal Beast's magical attack splashes on you.");
    //                                player.applyHit(new Hit(this, 281, HitLook.MAGIC_DAMAGE, 1));
    //                        }
    //                }
    //        }
    //}

    @Override
    public void setRespawnTask() {
            if (!hasFinished()) {
                    reset();
                    setLocation(getRespawnTile());
                    finish();
            }
            final NPC npc = this;
            CoresManager.slowExecutor.schedule(new Runnable() {
                    @Override
                    public void run() {
                            setFinished(false);
                            World.addNPC(npc);
                            npc.setLastRegionId(0);
                            World.updateEntityRegion(npc);
                            loadMapRegions();
                            checkMultiArea();
                            //shieldTimer = 0;
                            fixedCombatType = 0;
                            fixedAmount = 0;
                    }
            }, getCombatDefinitions().getRespawnDelay() * 10000,
                            TimeUnit.MILLISECONDS);
    }
    public int getFixedCombatType() {
            return fixedCombatType;
    }

    public void setFixedCombatType(int fixedCombatType) {
            this.fixedCombatType = fixedCombatType;
    }

    public int getFixedAmount() {
            return fixedAmount;
    }

    public void setFixedAmount(int fixedAmount) {
            this.fixedAmount = fixedAmount;
    }
</code></pre>
<p>}<br>
[/spoiler]</p>
<p>Don’t insult the code, I’ve got a cleaner one but this is the same thing. It compiles correctly, i’ve added the world.java segments and it still doesn’t spawn. I don’t quite understand this, if someone could help it would be greatly appriciated.</p>
<p>~Andrew<br>
Inb4 “l2code” comments.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064/1</link>
        <pubDate>Tue, 13 Nov 2012 20:15:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-468064-1</guid>
        <source url="https://forum.moparisthebest.com/t/667-respawning-bork-zenith/468064.rss">667 Respawning Bork [Zenith]</source>
      </item>
  </channel>
</rss>
