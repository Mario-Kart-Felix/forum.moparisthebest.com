<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Engine Reusability?</title>
    <link>https://forum.moparisthebest.com/t/engine-reusability/401922</link>
    <description>So In the process of creating a simple game, I&#39;m trying to create a game engine as well so I could reuse a majority of it later on. Would it be better to have the main loop inside the engine with some virtual methods to override if you want some processing done in between? Or let the user control the loop...

I.E.
[code=cpp]#include &quot;engine/GameEngine.h&quot;

int main(int argc, char* argv[]) {
	GameEngine engine;

	if(engine.initialize()) {
		long last_tick = SDL_GetTicks();

		while(engine.is_running()) {
			engine.poll_events();

			long this_tick = SDL_GetTicks();
			float delta = this_tick - last_tick;
			last_tick = this_tick;

			engine.update(delta);
			engine.render(delta);
		}
		engine.cleanup();
		return 0;
	} else {
		engine.cleanup();
		return 1;
	}
}[/code]

or something like

[code=cpp]#include &quot;engine/GameEngine.h&quot;

int main(int argc, char* argv[]) {
	GameEngine engine;

	if(engine.initialize()) {
		engine.start();
		return 0;
	} else {
		engine.cleanup();
		return 1;
	}
}[/code]

And have a pre/post_update/render method</description>
    
    <lastBuildDate>Sun, 03 Jul 2011 00:21:23 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/engine-reusability/401922.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Engine Reusability?</title>
        <dc:creator><![CDATA[@Jython super_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jython">@Jython</a> wrote:</p>
          <blockquote>
              <p>an engine should have update-display frames</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/engine-reusability/401922/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/engine-reusability/401922/5</link>
        <pubDate>Sun, 03 Jul 2011 00:21:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401922-5</guid>
        <source url="https://forum.moparisthebest.com/t/engine-reusability/401922.rss">Engine Reusability?</source>
      </item>
      <item>
        <title>Engine Reusability?</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>[quote="<em>s, post:3, topic:401922"]Tu, App::Main -</em>-</p>
<p><span class="mention">@OP</span>, personally i keep the game loop hidden for no real reason, it just seems a bit cleaner. and instead of your overriding idea, you could create a callback registering system where each callback registered is invoked during the game loop (perhaps allow the user to specify when the callback should be executed ie. pre-rendering etc.)[/quote]</p>
<p>Ahh I had forgotten about callbacks, thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/engine-reusability/401922/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/engine-reusability/401922/4</link>
        <pubDate>Sat, 02 Jul 2011 22:45:49 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401922-4</guid>
        <source url="https://forum.moparisthebest.com/t/engine-reusability/401922.rss">Engine Reusability?</source>
      </item>
      <item>
        <title>Engine Reusability?</title>
        <dc:creator><![CDATA[@_s11 s1gma]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_s11">@_s11</a> wrote:</p>
          <blockquote>
              <p>Tu, App::Main -_-</p>
<p><span class="mention">@OP</span>, personally i keep the game loop hidden for no real reason, it just seems a bit cleaner. and instead of your overriding idea, you could create a callback registering system where each callback registered is invoked during the game loop (perhaps allow the user to specify when the callback should be executed ie. pre-rendering etc.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/engine-reusability/401922/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/engine-reusability/401922/3</link>
        <pubDate>Sat, 02 Jul 2011 14:37:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401922-3</guid>
        <source url="https://forum.moparisthebest.com/t/engine-reusability/401922.rss">Engine Reusability?</source>
      </item>
      <item>
        <title>Engine Reusability?</title>
        <dc:creator><![CDATA[@Tu1 Tu]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tu1">@Tu1</a> wrote:</p>
          <blockquote>
              <p>this is what i was thinking about doing but idk if it’s good idk if it works either i wrote it in the textbox</p>
<p>it could give you can idea though i got the design from another engine i was playing around with</p>
<pre><code class="lang-auto">// define directives

class Engine
{
  public:
    virtual bool Init();
    virtual int Clean();
};

class App : public Engine
{
  public:
    int Main(int, char**);
    bool Init();
    int Clean();
};

bool App::Init()
{
  return Engine::Init();
}

int App::Main(int argc, char *argv[])
{
  Init();

  SDL_Event event;

  while(1)
  {
    Event(&amp;event);
    Logic();
    Render();
  }

  return Clean();
}

int App::Clean()
{
  return Engine::Clean();
}

int main(int argc, char *argv[])
{
  App app;
  return app.Main(argc, argv);
}</code></pre>
<p>this is what i am using now it’s nothing like the one above because i am just trying to write a framework i can use</p>
<pre><code class="lang-auto">#include "App.h"

App::App()
{
  Init();
}

App::~App()
{
  Close();
}

bool App::Load()
{
  Player.SetType(TYPE_PLAYER);
  Stick.SetType(TYPE_OBJECT);
  
  return 1;
}

void App::Render()
{
  G.FillScreen(0, 0, 0);
  
  for(int i = 0; i &lt; (int) Entity::EntityList.size(); i++)
  {
    if(!Entity::EntityList[i]) continue;
    Entity::EntityList[i]-&gt;CalculateDirection();
    Entity::EntityList[i]-&gt;Render(G.GetScreen());
  }
  
  G.UpdateScreen();
  SDL_Delay(20);
}

void App::Logic()
{
  if(Player.CollidesWith(&amp;Stick) == true)
  {
  }
  
  for(int i = 0; i &lt; (int) Entity::EntityList.size(); i++)
  {
    if(!Entity::EntityList[i]) continue;
    Entity::EntityList[i]-&gt;Logic();
  }
}

void App::Event()
{
    while(SDL_PollEvent(&amp;E))
    {
      switch(E.type)
      {
        case SDL_QUIT:
          Running = false;
          break;
        case SDL_KEYDOWN:
          switch(E.key.keysym.sym)
          {
            case SDLK_UP:
              Player.Move(DIR_UP);
              break;
            case SDLK_DOWN:
              Player.Move(DIR_DOWN);
              break;
            case SDLK_LEFT:
              Player.Move(DIR_LEFT);
              break;
            case SDLK_RIGHT:
              Player.Move(DIR_RIGHT);
              break;
          }
          break;
        case SDL_KEYUP:
          switch(E.key.keysym.sym)
          {
            case SDLK_UP:
              Player.Move(DIR_DOWN);
              break;
            case SDLK_DOWN:
              Player.Move(DIR_UP);
              break;
            case SDLK_LEFT:
              Player.Move(DIR_RIGHT);
              break;
            case SDLK_RIGHT:
              Player.Move(DIR_LEFT);
              break;
          }
          break;
      }
    }
}

int App::Main(int argc, char *argv[])
{
  SDL_Event event;
  
  while(Running)
  {
    Event();
    Logic();
    Render();
  }
  
  return 0;
}

bool App::Init()
{
  G.Init();
  G.CreateScreen(640, 480, 0, "Title");
  Running = true;
  Load();
  
  return 1;
}

void App::Close()
{
  for(int i = 0; i &lt; (int) Entity::EntityList.size(); i++)
  {
    if(!Entity::EntityList[i]) continue;
    Entity::EntityList[i]-&gt;FreeBuffer();
  }
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/engine-reusability/401922/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/engine-reusability/401922/2</link>
        <pubDate>Sat, 02 Jul 2011 05:15:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401922-2</guid>
        <source url="https://forum.moparisthebest.com/t/engine-reusability/401922.rss">Engine Reusability?</source>
      </item>
      <item>
        <title>Engine Reusability?</title>
        <dc:creator><![CDATA[@HcoJustin HcoJustin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/hcojustin">@HcoJustin</a> wrote:</p>
          <blockquote>
              <p>So In the process of creating a simple game, I’m trying to create a game engine as well so I could reuse a majority of it later on. Would it be better to have the main loop inside the engine with some virtual methods to override if you want some processing done in between? Or let the user control the loop…</p>
<p>I.E.</p>
<p>[code=cpp]<span class="hashtag">#include</span> “engine/GameEngine.h”</p>
<p>int main(int argc, char* argv[]) {<br>
GameEngine engine;</p>
<pre><code>if(engine.initialize()) {
	long last_tick = SDL_GetTicks();

	while(engine.is_running()) {
		engine.poll_events();

		long this_tick = SDL_GetTicks();
		float delta = this_tick - last_tick;
		last_tick = this_tick;

		engine.update(delta);
		engine.render(delta);
	}
	engine.cleanup();
	return 0;
} else {
	engine.cleanup();
	return 1;
}
</code></pre>
<p>}[/code]</p>
<p>or something like</p>
<p>[code=cpp]<span class="hashtag">#include</span> “engine/GameEngine.h”</p>
<p>int main(int argc, char* argv[]) {<br>
GameEngine engine;</p>
<pre><code>if(engine.initialize()) {
	engine.start();
	return 0;
} else {
	engine.cleanup();
	return 1;
}
</code></pre>
<p>}[/code]</p>
<p>And have a pre/post_update/render method</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/engine-reusability/401922/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/engine-reusability/401922/1</link>
        <pubDate>Sat, 02 Jul 2011 03:54:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-401922-1</guid>
        <source url="https://forum.moparisthebest.com/t/engine-reusability/401922.rss">Engine Reusability?</source>
      </item>
  </channel>
</rss>
