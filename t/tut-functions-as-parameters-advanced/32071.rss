<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[TUT] Functions as parameters (Advanced)</title>
    <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071</link>
    <description>Since I&#39;ve never written a tutorial for SCAR, I figured I might try it out. ;)
Wasn&#39;t sure what to write about since there&#39;s only so much you can do with SCAR.
Hopefully there has been a tutorial for this already... it&#39;s always hard to tell.

This tutorial will explain how to use functions as arguments in other functions. This is not used very often... most likely because there is not all that many uses for it (SCAR being limited with objects, pointers, variables, and such). But it could have potential use for some people who just don&#39;t know about it.
If you&#39;ve ever worked with forms, then you&#39;ve used this somewhat (even if you didn&#39;t know it). I will post a sample script and explain it bit-by-bit afterward, for those that need it.

[code]program New;
type TMyFunc = function(v: TVariantArray): TVariantArray;

function RandomFunc(Func: TMyFunc; var v: TVariantArray; Range: Integer): Boolean;
begin
   Result:= Random(Range)+1 = Range;
   if Result then v:= Func(v);
end;

function zFindColor(v: TVariantArray): TVariantArray;
var
   x,y: Integer;
   dBool: Boolean;
begin
   SetArrayLength(Result,3);
   dBool:= FindColor(x,y,v[0],v[1],v[2],v[3],v[4]);
   Result:= [dBool,x,y];
end;

var
   i: Integer;
   Params: TVariantArray;

begin
   for i:= 1 to 10 do begin
      SetArrayLength(Params,5);
      Params:= [clWhite,0,0,500,500];
      if RandomFunc(@zFindColor,Params,2) then
         if Params[0] then
            WriteLn(&#39;Color found at: (&#39;+IntToStr(Params[1])+&#39;,&#39;+IntToStr(Params[2])+&#39;)&#39;);
   end;
end.[/code]
Doesn&#39;t look too hard, eh?
Now for the explanations:
[code]type TMyFunc = function(v: TVariantArray): TVariantArray;[/code]
This is exactly what it looks like. This make a variable of a function with such parameters.
This specific script uses [b]function zFindColor(v: TVariantArray): TVariantArray;[/b] as the main desired function.
And to assigned that function to something, or use it as a parameter, you simply use @zFindColor. You&#39;ll see later.
TVariantArray type is use for what I like to call &quot;generalization for encapsulation&quot;. Meaning that it is purposefully generalized for any possible combination of arguments so that it allows for a good encapsulation function for virtually every function. So feel free to change it if you&#39;re not in need of such generalization. You could make several different [i]types[/i] if you wished.

[code]function RandomFunc(Func: TMyFunc; var v: TVariantArray; Range: Integer): Boolean;
begin
   Result:= Random(Range)+1 = Range;
   if Result then v:= Func(v);
end;[/code]
This is the function we&#39;ll be using directly. This is just an example of a possible use for functions in arguments.
As you can see, the first parameter is our function type [TMyFunc]. The second if our parameter array, both input and output. Meaning that parameters are supplied to [b]Func[/b] with this, and they likewise handle the returned values (hence the [i]var[/i] switch).
The third parameter, Range, unlike the first two, is unique to this function... since the first two are needed just to fulfill the function and it&#39;s generalized parameters. [i]Range[/i] simply specifies the chance of function execution (1 for 100%, 2 for 50%, 20 for 5%, etc, etc).
And if the function is executed, if returns True.
This boolean return value is also essential, so that it can give back a signal to whether or not this function is returning parameters from the specified function parameter to be handled.

[code]function zFindColor(v: TVariantArray): TVariantArray;
var
   x,y: Integer;
   dBool: Boolean;
begin
   SetArrayLength(Result,3);
   dBool:= FindColor(x,y,v[0],v[1],v[2],v[3],v[4]);
   Result:= [dBool,x,y];
end;[/code]
This function, as I said, is the function we&#39;re using to pass as a parameter. And you can plainly see how it follows the declaration format of the [i]TMyFunc[/i] type.
Basically, all this function does is call [b]FindColor[/b]. Lame? Yes... but this is just a simple example, lol.
The first line of the actual function is setting the length of the returned array, which is the number of variable to be returned. In this case we&#39;re returning 3 variables (one for the boolean result of FindColor, and the other two for the x &amp; y values it returns).
Then we simply call the function (using the supplied parameters from the array, [b]v[/b]) and then return the resulting values.

And now onto the main code:
[code]begin
   for i:= 1 to 10 do begin
      SetArrayLength(Params,5);
      Params:= [clWhite,0,0,500,500];
      if RandomFunc(@zFindColor,Params,2) then
         if Params[0] then
            WriteLn(&#39;Color found at: (&#39;+IntToStr(Params[1])+&#39;,&#39;+IntToStr(Params[2])+&#39;)&#39;);
   end;
end.[/code]
This will loop through 10 times and execute [b]RandomFunc[/b] (to display it&#39;s random behavior).
It supplies the parameter [clWhite,0,0,500,500] for [i]zFindColor[/i] which, if you look back at that function, is just the color and the search box coords for FindColor to use. Then it checks the returned boolean param and prints out the coord that has the color, if found.
Since it&#39;s using 2 as the range, it should print out the coord around 5 times (50%).


That&#39;s about it.
Now you should get the general idea. You won&#39;t use this often probably... but the TVariantArray type definitely could be. ;)</description>
    
    <lastBuildDate>Tue, 05 Dec 2006 09:38:07 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[TUT] Functions as parameters (Advanced)</title>
        <dc:creator><![CDATA[@Janilabo Janilabo]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/janilabo">@Janilabo</a> wrote:</p>
          <blockquote>
              <p>Sweet one Cruel <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/5</link>
        <pubDate>Tue, 05 Dec 2006 09:38:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-32071-5</guid>
        <source url="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss">[TUT] Functions as parameters (Advanced)</source>
      </item>
      <item>
        <title>[TUT] Functions as parameters (Advanced)</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>this could be quite good for SCAR doing two things at once, like moving the mouse and looking for a color at the same time<br>
[scar]</p>
<p>procedure MMouseFunc(x1,y1,dx,dy:integer;left:boolean; Func:TMyFunc; var t:TVariantArray);<br>
begin<br>
//…benland’s spline alogarithm<br>
end;</p>
<p>begin<br>
MMouseFunc(50,50,5,5,true, zFindColor, Parims);</p>
<p>Mouse(Parims[0],Parims[1],0,0,true);<br>
end.<br>
[/scar]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/4</link>
        <pubDate>Tue, 05 Dec 2006 05:56:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-32071-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss">[TUT] Functions as parameters (Advanced)</source>
      </item>
      <item>
        <title>[TUT] Functions as parameters (Advanced)</title>
        <dc:creator><![CDATA[@cruel cruel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cruel">@cruel</a> wrote:</p>
          <blockquote>
              <p>Yeah, exactly. And it can hold any types… probably even arrays.</p>
<p>And the rest of the tut just explains for the RandomFunc function uses the zFindColor function.<br>
It may help if I post more sample scripts. Perhaps some that have a better use.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/3</link>
        <pubDate>Tue, 05 Dec 2006 05:30:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-32071-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss">[TUT] Functions as parameters (Advanced)</source>
      </item>
      <item>
        <title>[TUT] Functions as parameters (Advanced)</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>i kind of see what your saying, is it that TVariantArray can hold loads of parameters,</p>
<p>this is what i undedstand about it<br>
[scar]<br>
function VarGetMousePos:TVariantArray;<br>
var tx,ty:integer;<br>
begin<br>
getmousepos(tx,ty);<br>
setarraylength(result,2);<br>
result[0]:=tx:<br>
result[1]:=ty;<br>
end;<br>
[/scar]</p>
<p>but i think this is only half to story, since you use another type and call it with a function</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/2</link>
        <pubDate>Mon, 04 Dec 2006 14:17:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-32071-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss">[TUT] Functions as parameters (Advanced)</source>
      </item>
      <item>
        <title>[TUT] Functions as parameters (Advanced)</title>
        <dc:creator><![CDATA[@cruel cruel]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cruel">@cruel</a> wrote:</p>
          <blockquote>
              <p>Since I’ve never written a tutorial for SCAR, I figured I might try it out. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"><br>
Wasn’t sure what to write about since there’s only so much you can do with SCAR.<br>
Hopefully there has been a tutorial for this already… it’s always hard to tell.</p>
<p>This tutorial will explain how to use functions as arguments in other functions. This is not used very often… most likely because there is not all that many uses for it (SCAR being limited with objects, pointers, variables, and such). But it could have potential use for some people who just don’t know about it.<br>
If you’ve ever worked with forms, then you’ve used this somewhat (even if you didn’t know it). I will post a sample script and explain it bit-by-bit afterward, for those that need it.</p>
<p>[code]program New;<br>
type TMyFunc = function(v: TVariantArray): TVariantArray;</p>
<p>function RandomFunc(Func: TMyFunc; var v: TVariantArray; Range: Integer): Boolean;<br>
begin<br>
Result:= Random(Range)+1 = Range;<br>
if Result then v:= Func(v);<br>
end;</p>
<p>function zFindColor(v: TVariantArray): TVariantArray;<br>
var<br>
x,y: Integer;<br>
dBool: Boolean;<br>
begin<br>
SetArrayLength(Result,3);<br>
dBool:= FindColor(x,y,v[0],v[1],v[2],v[3],v[4]);<br>
Result:= [dBool,x,y];<br>
end;</p>
<p>var<br>
i: Integer;<br>
Params: TVariantArray;</p>
<p>begin<br>
for i:= 1 to 10 do begin<br>
SetArrayLength(Params,5);<br>
Params:= [clWhite,0,0,500,500];<br>
if RandomFunc(<span class="mention">@zFindColor</span>,Params,2) then<br>
if Params[0] then<br>
WriteLn(‘Color found at: (’+IntToStr(Params[1])+’,’+IntToStr(Params[2])+’)’);<br>
end;<br>
end.[/code]<br>
Doesn’t look too hard, eh?<br>
Now for the explanations:</p>
<pre><code class="lang-auto">type TMyFunc = function(v: TVariantArray): TVariantArray;</code></pre>
<p>This is exactly what it looks like. This make a variable of a function with such parameters.<br>
This specific script uses <span class="bbcode-b">function zFindColor(v: TVariantArray): TVariantArray;</span> as the main desired function.<br>
And to assigned that function to something, or use it as a parameter, you simply use <span class="mention">@zFindColor</span>. You’ll see later.<br>
TVariantArray type is use for what I like to call “generalization for encapsulation”. Meaning that it is purposefully generalized for any possible combination of arguments so that it allows for a good encapsulation function for virtually every function. So feel free to change it if you’re not in need of such generalization. You could make several different <span class="bbcode-i">types</span> if you wished.</p>
<p><code>function RandomFunc(Func: TMyFunc; var v: TVariantArray; Range: Integer): Boolean;
begin
   Result:= Random(Range)+1 = Range;
   if Result then v:= Func(v);
end;</code><br>
This is the function we’ll be using directly. This is just an example of a possible use for functions in arguments.<br>
As you can see, the first parameter is our function type [TMyFunc]. The second if our parameter array, both input and output. Meaning that parameters are supplied to <span class="bbcode-b">Func</span> with this, and they likewise handle the returned values (hence the <span class="bbcode-i">var</span> switch).<br>
The third parameter, Range, unlike the first two, is unique to this function… since the first two are needed just to fulfill the function and it’s generalized parameters. <span class="bbcode-i">Range</span> simply specifies the chance of function execution (1 for 100%, 2 for 50%, 20 for 5%, etc, etc).<br>
And if the function is executed, if returns True.<br>
This boolean return value is also essential, so that it can give back a signal to whether or not this function is returning parameters from the specified function parameter to be handled.</p>
<p><code>function zFindColor(v: TVariantArray): TVariantArray;
var
   x,y: Integer;
   dBool: Boolean;
begin
   SetArrayLength(Result,3);
   dBool:= FindColor(x,y,v[0],v[1],v[2],v[3],v[4]);
   Result:= [dBool,x,y];
end;</code><br>
This function, as I said, is the function we’re using to pass as a parameter. And you can plainly see how it follows the declaration format of the <span class="bbcode-i">TMyFunc</span> type.<br>
Basically, all this function does is call <span class="bbcode-b">FindColor</span>. Lame? Yes… but this is just a simple example, lol.<br>
The first line of the actual function is setting the length of the returned array, which is the number of variable to be returned. In this case we’re returning 3 variables (one for the boolean result of FindColor, and the other two for the x &amp; y values it returns).<br>
Then we simply call the function (using the supplied parameters from the array, <span class="bbcode-b">v</span>) and then return the resulting values.</p>
<p>And now onto the main code:</p>
<p><code>begin
   for i:= 1 to 10 do begin
      SetArrayLength(Params,5);
      Params:= [clWhite,0,0,500,500];
      if RandomFunc(@zFindColor,Params,2) then
         if Params[0] then
            WriteLn('Color found at: ('+IntToStr(Params[1])+','+IntToStr(Params[2])+')');
   end;
end.</code><br>
This will loop through 10 times and execute <span class="bbcode-b">RandomFunc</span> (to display it’s random behavior).<br>
It supplies the parameter [clWhite,0,0,500,500] for <span class="bbcode-i">zFindColor</span> which, if you look back at that function, is just the color and the search box coords for FindColor to use. Then it checks the returned boolean param and prints out the coord that has the color, if found.<br>
Since it’s using 2 as the range, it should print out the coord around 5 times (50%).</p>
<p>That’s about it.<br>
Now you should get the general idea. You won’t use this often probably… but the TVariantArray type definitely could be. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071/1</link>
        <pubDate>Mon, 04 Dec 2006 13:07:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-32071-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-functions-as-parameters-advanced/32071.rss">[TUT] Functions as parameters (Advanced)</source>
      </item>
  </channel>
</rss>
