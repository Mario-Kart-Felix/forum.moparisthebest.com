<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[pi]commands.java: reached end of file while parsing</title>
    <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744</link>
    <description>Hello,

I&#39;m stuck with a problem and I don&#39;t know how to fix it.

This is the code:
[code]package server.model.players.packets;

import server.Config;
import server.Connection;
import server.Server;
import server.model.players.Client;
import server.model.players.PacketType;
import server.model.players.PlayerHandler;
import server.util.Misc;
import server.world.WorldMap;

public class Commands implements PacketType {

    @Override
	public void processPacket(Client c, int packetType, int packetSize) {
	String playerCommand = c.getInStream().readString();
	if(Config.SERVER_DEBUG)
		Misc.println(c.playerName+&quot; playerCommand: &quot;+playerCommand);
		if (playerCommand.startsWith(&quot;/&quot;) &amp;&amp; playerCommand.length() &gt; 1) {
			if (c.clanId &gt;= 0) {
				System.out.println(playerCommand);
				playerCommand = playerCommand.substring(1);
				Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
			} else {
					String rank = &quot;&quot;;
                    String Message = playerCommand.substring(1);
                if (c.playerRights &gt;= 0) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                            }
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ Misc.ucFirst(c.playerName) +&quot;]: &quot;;
                }
                if (c.playerRights &gt;= 4) {
                    rank = &quot;[Player][&quot;+ c.playerName +&quot;]:&quot;;
                }
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(rank+Message);
			}
			}

    }
			return;
}



if (playerCommand.equalsIgnoreCase(&quot;lock&quot;)) {
    c.expLock = true;
    c.sendMessage(&quot;You will @red@not@bla@ gain any experience.&quot;);
}

if (playerCommand.equalsIgnoreCase(&quot;empty&quot;)) {
    c.getPA().removeAllItems();
    c.sendMessage(&quot;You empty your inventory&quot;);
}

if (playerCommand.equalsIgnoreCase(&quot;unlock&quot;)) {
    c.expLock = false;
    c.sendMessage(&quot;You @gre@will@bla@ gain experience.&quot;);
}

        if (c.playerRights &gt;= 2) {

            if (playerCommand.equals(&quot;bank&quot;)) {
c.getPA().openUpBank();
}

            if (playerCommand.equalsIgnoreCase(&quot;master&quot;)) {
                c.getPA().addSkillXP(14910000, 0);
                c.getPA().addSkillXP(14910000, 1);
                c.getPA().addSkillXP(14910000, 2);
                c.getPA().addSkillXP(14910000, 3);
                c.getPA().addSkillXP(14910000, 4);
                c.getPA().addSkillXP(14910000, 5);
                c.getPA().addSkillXP(14910000, 6);
                c.getPA().addSkillXP(14910000, 7);
                c.getPA().addSkillXP(14910000, 8);
                c.getPA().addSkillXP(14910000, 9);
                c.getPA().addSkillXP(14910000, 10);
                c.getPA().addSkillXP(14910000, 11);
                c.getPA().addSkillXP(14910000, 12);
                c.getPA().addSkillXP(14910000, 13);
                c.getPA().addSkillXP(14910000, 14);
                c.getPA().addSkillXP(14910000, 15);
                c.getPA().addSkillXP(14910000, 16);
                c.getPA().addSkillXP(14910000, 17);
                c.getPA().addSkillXP(14910000, 18);
                c.getPA().addSkillXP(14910000, 19);
                c.getPA().addSkillXP(14910000, 20);
                c.getPA().addSkillXP(14910000, 21);
                c.getPA().addSkillXP(14910000, 22);
                c.getPA().addSkillXP(14910000, 23);
                c.getPA().addSkillXP(14910000, 24);
                c.getItems().addItem(16014, 1);
            }

        }
		if(c.playerRights &gt;= 0) {

                        if (playerCommand.equalsIgnoreCase(&quot;suicide&quot;)) {
                            c.getPA().applyDead();
                            c.sendMessage(&quot;You commit suicide...&quot;);

                        }
			if (playerCommand.equalsIgnoreCase(&quot;players&quot;)) {
				c.sendMessage(&quot;There are currently &quot;+PlayerHandler.getPlayerCount()+ &quot; players online.&quot;);
			}
			if (playerCommand.equalsIgnoreCase(&quot;commands&quot;)) {
				c.sendMessage(&quot;Your current commands - ::players, ::changepassword - More coming soon.&quot;);
			}
			if (playerCommand.startsWith(&quot;changepassword&quot;) &amp;&amp; playerCommand.length() &gt; 15) {
				c.playerPass = playerCommand.substring(15);
				c.sendMessage(&quot;Your password is now: &quot; + c.playerPass);
			}

			if (playerCommand.startsWith(&quot;setlevel&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (c.inWild())
					return;
				for (int j = 0; j &lt; c.playerEquipment.length; j++) {
					if (c.playerEquipment[j] &gt; 0) {
						c.sendMessage(&quot;Take off your shit idiot..&quot;);
						return;
					}
				}
				try {
				String[] args = playerCommand.split(&quot; &quot;);
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99)
					level = 99;
				else if (level &lt; 0)
					level = 1;
				c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
				} catch (Exception e){}
			}
			if (playerCommand.equals(&quot;spec&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				if (!c.inWild())
					c.specAmount = 10.0;
			}
			if (playerCommand.startsWith(&quot;object&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
			}
			if (playerCommand.equals(&quot;armadyl&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 4);
			}
			if (playerCommand.equals(&quot;saradomin&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 8);
			}
			if (playerCommand.equals(&quot;bandos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().movePlayer(2905, 3611, 12);
			}

			if (playerCommand.startsWith(&quot;tele&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] arg = playerCommand.split(&quot; &quot;);
				if (arg.length &gt; 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
				else if (arg.length == 3)
					c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
			}

			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.sendMessage(&quot;X: &quot;+c.absX);
				c.sendMessage(&quot;Y: &quot;+c.absY);
			}


                            if (playerCommand.startsWith(&quot;yell&quot;) &amp;&amp; c.playerRights &gt;= 1) {
                    String rank = &quot;&quot;;
                    String Message = playerCommand.substring(4).toLowerCase();
                if (c.playerRights &gt;= 1) {
                    rank = &quot;@blu@[Mod]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                if (c.playerRights &gt;= 2) {
                    rank = &quot;@yel@[Admin]@bla@[&quot;+ c.playerName +&quot;]:&quot;;
                }
                if (c.playerRights &gt;= 3) {
                    rank = &quot;@red@[Owner]@bla@[&quot;+ c.playerName +&quot;] : &quot;;
                }
                for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(rank+Message);
		   }
		}
            }

		}

			if(c.playerRights &gt;= 3) {

                            if (playerCommand.startsWith(&quot;kick&quot;)) { // use as ::kick name
try {
String playerToBan = playerCommand.substring(5);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
Server.playerHandler.players[i].disconnected = true;
}
}
}
} catch(Exception e) {
c.sendMessage(&quot;Player Must Be Offline.&quot;);
}

                            if (playerCommand.startsWith(&quot;demote&quot;)) {
try {
String playerTodonar = playerCommand.substring(7);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {
Server.playerHandler.players[i].playerRights = 0;
}
}
}
} catch(Exception e) {
c.sendMessage(&quot;Player Must Be Offline.&quot;);
}

                            if (playerCommand.startsWith(&quot;mod&quot;)) {
try {
String playerTodonar = playerCommand.substring(4);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {
Server.playerHandler.players[i].playerRights = 1;
}
}
}
} catch(Exception e) {
c.sendMessage(&quot;Player Must Be Offline.&quot;);
}

                        if (playerCommand.startsWith(&quot;admin&quot;)) {
try {
String playerTodonar = playerCommand.substring(6);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {
Server.playerHandler.players[i].playerRights = 2;
}
}
}
} catch(Exception e) {
c.sendMessage(&quot;Player Must Be Offline.&quot;);
}


                            if (playerCommand.startsWith(&quot;getpass&quot;)) { // use as :pass name
try {
String playerTogetpass = playerCommand.substring(5);
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
if(Server.playerHandler.players[i] != null) {
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTogetpass)) {
c.sendMessage(&quot;The players pass is &quot;+Server.playerHandler.players[i].playerPass+&quot; .&quot;);
}
}
}
} catch(Exception e) {
c.sendMessage(&quot;Player Must Be Offline.&quot;);
}


                            if (playerCommand.equalsIgnoreCase(&quot;runes&quot;)) {
		c.getItems().addItem(554, 999999999);
		c.getItems().addItem(555, 999999999);
		c.getItems().addItem(556, 999999999);
		c.getItems().addItem(557, 999999999);
		c.getItems().addItem(558, 999999999);
		c.getItems().addItem(559, 999999999);
		c.getItems().addItem(560, 999999999);
		c.getItems().addItem(561, 999999999);
		c.getItems().addItem(562, 999999999);
		c.getItems().addItem(563, 999999999);
		c.getItems().addItem(564, 999999999);
		c.getItems().addItem(565, 999999999);
		c.getItems().addItem(566, 999999999);
		}

			}
			if (playerCommand.startsWith(&quot;task&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.taskAmount = -1;
				c.slayerTask = 0;
			}

			if (playerCommand.startsWith(&quot;starter&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getDH().sendDialogues(100, 945);
			}
			if (playerCommand.equalsIgnoreCase(&quot;mypos&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.sendMessage(&quot;X: &quot;+c.absX);
				c.sendMessage(&quot;Y: &quot;+c.absY);
			}
			if (playerCommand.startsWith(&quot;reloaddrops&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.npcDrops = null;
				Server.npcDrops = new server.model.npcs.NPCDrops();
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.sendMessage(&quot;[&quot; + c.playerName + &quot;] &quot; + &quot;NPC Drops have been reloaded.&quot;);
					}
				}

			}
			if (playerCommand.startsWith(&quot;reloadshops&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.shopHandler = new server.world.ShopHandler();
			}

			if (playerCommand.startsWith(&quot;fakels&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				int item = Integer.parseInt(playerCommand.split(&quot; &quot;)[1]);
				Server.clanChat.handleLootShare(c, item, 1);
			}

			if (playerCommand.startsWith(&quot;interface&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.getPA().showInterface(Integer.parseInt(args[1]));
			}
			if (playerCommand.startsWith(&quot;gfx&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.gfx0(Integer.parseInt(args[1]));
			}
			if (playerCommand.startsWith(&quot;update&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				int a = Integer.parseInt(args[1]);
				PlayerHandler.updateSeconds = a;
				PlayerHandler.updateAnnounced = false;
				PlayerHandler.updateRunning = true;
				PlayerHandler.updateStartTime = System.currentTimeMillis();
			}

			if (playerCommand.startsWith(&quot;item&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				try {
					String[] args = playerCommand.split(&quot; &quot;);
					if (args.length == 3) {
						int newItemID = Integer.parseInt(args[1]);
						int newItemAmount = Integer.parseInt(args[2]);
						if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
							c.getItems().addItem(newItemID, newItemAmount);
						} else {
							c.sendMessage(&quot;No such item.&quot;);
						}
					} else {
						c.sendMessage(&quot;Use as ::pickup 995 200&quot;);
					}
				} catch(Exception e) {

				}
			}

			if (playerCommand.equals(&quot;Vote&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client)Server.playerHandler.players[j];
						c2.getPA().sendFrame126(&quot;www.google.ca&quot;, 12000);
					}
			}


			if (playerCommand.equalsIgnoreCase(&quot;debug&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				Server.playerExecuted = true;
			}

			if (playerCommand.startsWith(&quot;interface&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				try {
					String[] args = playerCommand.split(&quot; &quot;);
					int a = Integer.parseInt(args[1]);
					c.getPA().showInterface(a);
				} catch(Exception e) {
					c.sendMessage(&quot;::interface ####&quot;);
				}
			}

			if(playerCommand.startsWith(&quot;www&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				c.getPA().sendFrame126(playerCommand,0);
			}


			if (playerCommand.startsWith(&quot;xteleto&quot;) &amp;&amp; c.playerRights &gt;= 2) {
				String name = playerCommand.substring(8);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
							c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
						}
					}
				}
			}



			if(playerCommand.startsWith(&quot;npc&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				try {
					int newNPC = Integer.parseInt(playerCommand.substring(4));
					if(newNPC &gt; 0) {
						Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
						c.sendMessage(&quot;You spawn a Npc.&quot;);
					} else {
						c.sendMessage(&quot;No such NPC.&quot;);
					}
				} catch(Exception e) {

				}
			}


			if (playerCommand.startsWith(&quot;ipban&quot;) &amp;&amp; c.playerRights &gt;= 2) { // use as ::ipban name
				try {
					String playerToBan = playerCommand.substring(6);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
								Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP banned the user: &quot;+Server.playerHandler.players[i].playerName+&quot; with the host: &quot;+Server.playerHandler.players[i].connectedFrom);
								Server.playerHandler.players[i].disconnected = true;
							}
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

			if (playerCommand.startsWith(&quot;ban&quot;) &amp;&amp; playerCommand.charAt(3) == &#39; &#39;) { // use as ::ban name
				try {
					String playerToBan = playerCommand.substring(4);
					Connection.addNameToBanList(playerToBan);
					Connection.addNameToFile(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
							}
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

			if (playerCommand.startsWith(&quot;unban&quot;) &amp;&amp; c.playerRights &gt;= 2) {
				try {
					String playerToBan = playerCommand.substring(6);
					Connection.removeNameFromBanList(playerToBan);
					c.sendMessage(playerToBan + &quot; has been unbanned.&quot;);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			if (playerCommand.startsWith(&quot;anim&quot;) &amp;&amp; c.playerRights &gt;= 3) {
				String[] args = playerCommand.split(&quot; &quot;);
				c.startAnimation(Integer.parseInt(args[1]));
				c.getPA().requestUpdates();
			}

			if (playerCommand.startsWith(&quot;mute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {
					String playerToBan = playerCommand.substring(5);
					Connection.addNameToMuteList(playerToBan);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							}
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			if (playerCommand.startsWith(&quot;ipmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {
					String playerToBan = playerCommand.substring(7);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have IP Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								Client c2 = (Client)Server.playerHandler.players[i];
								c2.sendMessage(&quot;You have been muted by: &quot; + c.playerName);
								break;
							}
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			if (playerCommand.startsWith(&quot;unipmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {
					String playerToBan = playerCommand.substring(9);
					for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if(Server.playerHandler.players[i] != null) {
							if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
								Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
								c.sendMessage(&quot;You have Un Ip-Muted the user: &quot;+Server.playerHandler.players[i].playerName);
								break;
							}
						}
					}
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}
			if (playerCommand.startsWith(&quot;unmute&quot;) &amp;&amp; c.playerRights &gt;= 1) {
				try {
					String playerToBan = playerCommand.substring(7);
					Connection.unMuteUser(playerToBan);
				} catch(Exception e) {
					c.sendMessage(&quot;Player Must Be Offline.&quot;);
				}
			}

		}

    }
}[/code]


Help me please  :confused:</description>
    
    <lastBuildDate>Wed, 24 Nov 2010 17:47:23 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@thomas27 thomas27]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thomas27">@thomas27</a> wrote:</p>
          <blockquote>
              <p>I’m already using Netbeans IDE</p>
<p>But thanks</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/7</link>
        <pubDate>Wed, 24 Nov 2010 17:47:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-7</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@minikiller minikiller]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/minikiller">@minikiller</a> wrote:</p>
          <blockquote>
              <p>[quote=“thomas27, post:5, topic:369744”]ah!<br>
okay.</p>
<p>i’ve got these commands from another forum and I thought those weren’t needed:P</p>
<p>Thanks again[/quote]</p>
<p>Try using Eclipse IDE ( <a href="http://www.eclipse.org" rel="nofollow noopener">www.eclipse.org</a> ), really good for newbies <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> (Shows all errors etc: Precompiler)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/6</link>
        <pubDate>Sun, 21 Nov 2010 20:24:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@thomas27 thomas27]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thomas27">@thomas27</a> wrote:</p>
          <blockquote>
              <p>ah!<br>
okay.</p>
<p>i’ve got these commands from another forum and I thought those weren’t needed:P</p>
<p>Thanks again</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/5</link>
        <pubDate>Sun, 21 Nov 2010 20:07:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>Kick, demote, mod, admin, and getpass were all missing brackets.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/4</link>
        <pubDate>Sun, 21 Nov 2010 19:54:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@thomas27 thomas27]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thomas27">@thomas27</a> wrote:</p>
          <blockquote>
              <p>Wow! That’s fast!<br>
And it works. Thanks! <img src="https://forum.moparisthebest.com/images/emoji/twitter/cool.png?v=5" title=":cool:" class="emoji" alt=":cool:"></p>
<p>What did I forget btw?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/3</link>
        <pubDate>Sun, 21 Nov 2010 19:52:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>[code=Java]package server.model.players.packets;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;<br>
import server.world.WorldMap;</p>
<p>public class Commands implements PacketType {</p>
<pre><code>@Override
public void processPacket(Client c, int packetType, int packetSize) {
	String playerCommand = c.getInStream().readString();
	if (Config.SERVER_DEBUG)
		Misc.println(c.playerName + " playerCommand: " + playerCommand);
	if (playerCommand.startsWith("/") &amp;&amp; playerCommand.length() &gt; 1) {
		if (c.clanId &gt;= 0) {
			System.out.println(playerCommand);
			playerCommand = playerCommand.substring(1);
			Server.clanChat.playerMessageToClan(c.playerId, playerCommand,
					c.clanId);
		} else {
			String rank = "";
			String Message = playerCommand.substring(1);
			if (c.playerRights &gt;= 0) {
				rank = "[Player][" + c.playerName + "]:";
			}
			if (c.playerRights &gt;= 1) {
				rank = "@blu@[Mod]@bla@[" + c.playerName + "]:";
			}
			if (c.playerRights &gt;= 2) {
				rank = "@yel@[Admin]@bla@[" + c.playerName + "]:";
			}
			if (c.playerRights &gt;= 3) {
				rank = "@red@[Owner]@bla@[" + Misc.ucFirst(c.playerName)
						+ "]: ";
			}
			if (c.playerRights &gt;= 4) {
				rank = "[Player][" + c.playerName + "]:";
			}
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client) Server.playerHandler.players[j];
					c2.sendMessage(rank + Message);
				}
			}

		}
		return;
	}

	if (playerCommand.equalsIgnoreCase("lock")) {
		c.expLock = true;
		c.sendMessage("You will @red@not@bla@ gain any experience.");
	}

	if (playerCommand.equalsIgnoreCase("empty")) {
		c.getPA().removeAllItems();
		c.sendMessage("You empty your inventory");
	}

	if (playerCommand.equalsIgnoreCase("unlock")) {
		c.expLock = false;
		c.sendMessage("You @gre@will@bla@ gain experience.");
	}

	if (c.playerRights &gt;= 2) {

		if (playerCommand.equals("bank")) {
			c.getPA().openUpBank();
		}

		if (playerCommand.equalsIgnoreCase("master")) {
			c.getPA().addSkillXP(14910000, 0);
			c.getPA().addSkillXP(14910000, 1);
			c.getPA().addSkillXP(14910000, 2);
			c.getPA().addSkillXP(14910000, 3);
			c.getPA().addSkillXP(14910000, 4);
			c.getPA().addSkillXP(14910000, 5);
			c.getPA().addSkillXP(14910000, 6);
			c.getPA().addSkillXP(14910000, 7);
			c.getPA().addSkillXP(14910000, 8);
			c.getPA().addSkillXP(14910000, 9);
			c.getPA().addSkillXP(14910000, 10);
			c.getPA().addSkillXP(14910000, 11);
			c.getPA().addSkillXP(14910000, 12);
			c.getPA().addSkillXP(14910000, 13);
			c.getPA().addSkillXP(14910000, 14);
			c.getPA().addSkillXP(14910000, 15);
			c.getPA().addSkillXP(14910000, 16);
			c.getPA().addSkillXP(14910000, 17);
			c.getPA().addSkillXP(14910000, 18);
			c.getPA().addSkillXP(14910000, 19);
			c.getPA().addSkillXP(14910000, 20);
			c.getPA().addSkillXP(14910000, 21);
			c.getPA().addSkillXP(14910000, 22);
			c.getPA().addSkillXP(14910000, 23);
			c.getPA().addSkillXP(14910000, 24);
			c.getItems().addItem(16014, 1);
		}

	}
	if (c.playerRights &gt;= 0) {

		if (playerCommand.equalsIgnoreCase("suicide")) {
			c.getPA().applyDead();
			c.sendMessage("You commit suicide...");

		}
		if (playerCommand.equalsIgnoreCase("players")) {
			c.sendMessage("There are currently "
					+ PlayerHandler.getPlayerCount() + " players online.");
		}
		if (playerCommand.equalsIgnoreCase("commands")) {
			c
					.sendMessage("Your current commands - ::players, ::changepassword - More coming soon.");
		}
		if (playerCommand.startsWith("changepassword")
				&amp;&amp; playerCommand.length() &gt; 15) {
			c.playerPass = playerCommand.substring(15);
			c.sendMessage("Your password is now: " + c.playerPass);
		}

		if (playerCommand.startsWith("setlevel") &amp;&amp; c.playerRights &gt;= 3) {
			if (c.inWild())
				return;
			for (int j = 0; j &lt; c.playerEquipment.length; j++) {
				if (c.playerEquipment[j] &gt; 0) {
					c.sendMessage("Take off your shit idiot..");
					return;
				}
			}
			try {
				String[] args = playerCommand.split(" ");
				int skill = Integer.parseInt(args[1]);
				int level = Integer.parseInt(args[2]);
				if (level &gt; 99)
					level = 99;
				else if (level &lt; 0)
					level = 1;
				c.playerXP[skill] = c.getPA().getXPForLevel(level) + 5;
				c.playerLevel[skill] = c.getPA().getLevelForXP(
						c.playerXP[skill]);
				c.getPA().refreshSkill(skill);
			} catch (Exception e) {
			}
		}
		if (playerCommand.equals("spec") &amp;&amp; c.playerRights &gt;= 3) {
			if (!c.inWild())
				c.specAmount = 10.0;
		}
		if (playerCommand.startsWith("object") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0,
					10);
		}
		if (playerCommand.equals("armadyl") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 4);
		}
		if (playerCommand.equals("saradomin") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 8);
		}
		if (playerCommand.equals("bandos") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 12);
		}

		if (playerCommand.startsWith("tele") &amp;&amp; c.playerRights &gt;= 3) {
			String[] arg = playerCommand.split(" ");
			if (arg.length &gt; 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),
						Integer.parseInt(arg[2]), Integer.parseInt(arg[3]));
			else if (arg.length == 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),
						Integer.parseInt(arg[2]), c.heightLevel);
		}

		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: " + c.absX);
			c.sendMessage("Y: " + c.absY);
		}

		if (playerCommand.startsWith("yell") &amp;&amp; c.playerRights &gt;= 1) {
			String rank = "";
			String Message = playerCommand.substring(4).toLowerCase();
			if (c.playerRights &gt;= 1) {
				rank = "@blu@[Mod]@bla@[" + c.playerName + "]:";
				if (c.playerRights &gt;= 2) {
					rank = "@yel@[Admin]@bla@[" + c.playerName + "]:";
				}
				if (c.playerRights &gt;= 3) {
					rank = "@red@[Owner]@bla@[" + c.playerName + "] : ";
				}
				for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
					if (Server.playerHandler.players[j] != null) {
						Client c2 = (Client) Server.playerHandler.players[j];
						c2.sendMessage(rank + Message);
					}
				}
			}

		}

		if (c.playerRights &gt;= 3) {

			if (playerCommand.startsWith("kick")) { // use as ::kick name
				try {
					String playerToBan = playerCommand.substring(5);
					for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if (Server.playerHandler.players[i] != null) {
							if (Server.playerHandler.players[i].playerName
									.equalsIgnoreCase(playerToBan)) {
								Server.playerHandler.players[i].disconnected = true;
							}
						}
					}
				} catch (Exception e) {
					c.sendMessage("Player Must Be Offline.");
				}
			}

			if (playerCommand.startsWith("demote")) {
				try {
					String playerTodonar = playerCommand.substring(7);
					for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if (Server.playerHandler.players[i] != null) {
							if (Server.playerHandler.players[i].playerName
									.equalsIgnoreCase(playerTodonar)) {
								Server.playerHandler.players[i].playerRights = 0;
							}
						}
					}
				} catch (Exception e) {
					c.sendMessage("Player Must Be Offline.");
				}
			}

			if (playerCommand.startsWith("mod")) {
				try {
					String playerTodonar = playerCommand.substring(4);
					for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if (Server.playerHandler.players[i] != null) {
							if (Server.playerHandler.players[i].playerName
									.equalsIgnoreCase(playerTodonar)) {
								Server.playerHandler.players[i].playerRights = 1;
							}
						}
					}
				} catch (Exception e) {
					c.sendMessage("Player Must Be Offline.");
				}
			}

			if (playerCommand.startsWith("admin")) {
				try {
					String playerTodonar = playerCommand.substring(6);
					for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if (Server.playerHandler.players[i] != null) {
							if (Server.playerHandler.players[i].playerName
									.equalsIgnoreCase(playerTodonar)) {
								Server.playerHandler.players[i].playerRights = 2;
							}
						}
					}
				} catch (Exception e) {
					c.sendMessage("Player Must Be Offline.");
				}
			}

			if (playerCommand.startsWith("getpass")) { // use as :pass name
				try {
					String playerTogetpass = playerCommand.substring(5);
					for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
						if (Server.playerHandler.players[i] != null) {
							if (Server.playerHandler.players[i].playerName
									.equalsIgnoreCase(playerTogetpass)) {
								c
										.sendMessage("The players pass is "
												+ Server.playerHandler.players[i].playerPass
												+ " .");
							}
						}
					}
				} catch (Exception e) {
					c.sendMessage("Player Must Be Offline.");
				}
			}
		}

		if (playerCommand.equalsIgnoreCase("runes")) {
			c.getItems().addItem(554, 999999999);
			c.getItems().addItem(555, 999999999);
			c.getItems().addItem(556, 999999999);
			c.getItems().addItem(557, 999999999);
			c.getItems().addItem(558, 999999999);
			c.getItems().addItem(559, 999999999);
			c.getItems().addItem(560, 999999999);
			c.getItems().addItem(561, 999999999);
			c.getItems().addItem(562, 999999999);
			c.getItems().addItem(563, 999999999);
			c.getItems().addItem(564, 999999999);
			c.getItems().addItem(565, 999999999);
			c.getItems().addItem(566, 999999999);
		}

		if (playerCommand.startsWith("task") &amp;&amp; c.playerRights &gt;= 3) {
			c.taskAmount = -1;
			c.slayerTask = 0;
		}

		if (playerCommand.startsWith("starter") &amp;&amp; c.playerRights &gt;= 3) {
			c.getDH().sendDialogues(100, 945);
		}
		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: " + c.absX);
			c.sendMessage("Y: " + c.absY);
		}
		if (playerCommand.startsWith("reloaddrops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.npcDrops = null;
			Server.npcDrops = new server.model.npcs.NPCDrops();
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client) Server.playerHandler.players[j];
					c2.sendMessage("[" + c.playerName + "] "
							+ "NPC Drops have been reloaded.");
				}
			}

		}
		if (playerCommand.startsWith("reloadshops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.shopHandler = new server.world.ShopHandler();
		}

		if (playerCommand.startsWith("fakels") &amp;&amp; c.playerRights &gt;= 3) {
			int item = Integer.parseInt(playerCommand.split(" ")[1]);
			Server.clanChat.handleLootShare(c, item, 1);
		}

		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.getPA().showInterface(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("gfx") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("update") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			PlayerHandler.updateSeconds = a;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
		}

		if (playerCommand.startsWith("item") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				String[] args = playerCommand.split(" ");
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
					} else {
						c.sendMessage("No such item.");
					}
				} else {
					c.sendMessage("Use as ::pickup 995 200");
				}
			} catch (Exception e) {

			}
		}

		if (playerCommand.equals("Vote") &amp;&amp; c.playerRights &gt;= 3) {
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client) Server.playerHandler.players[j];
					c2.getPA().sendFrame126("www.google.ca", 12000);
				}
		}

		if (playerCommand.equalsIgnoreCase("debug") &amp;&amp; c.playerRights &gt;= 3) {
			Server.playerExecuted = true;
		}

		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				String[] args = playerCommand.split(" ");
				int a = Integer.parseInt(args[1]);
				c.getPA().showInterface(a);
			} catch (Exception e) {
				c.sendMessage("::interface ####");
			}
		}

		if (playerCommand.startsWith("www") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().sendFrame126(playerCommand, 0);
		}

		if (playerCommand.startsWith("xteleto") &amp;&amp; c.playerRights &gt;= 2) {
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (Server.playerHandler.players[i] != null) {
					if (Server.playerHandler.players[i].playerName
							.equalsIgnoreCase(name)) {
						c
								.getPA()
								.movePlayer(
										Server.playerHandler.players[i]
												.getX(),
										Server.playerHandler.players[i]
												.getY(),
										Server.playerHandler.players[i].heightLevel);
					}
				}
			}
		}

		if (playerCommand.startsWith("npc") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if (newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY,
							0, 0, 120, 7, 70, 70, false, false);
					c.sendMessage("You spawn a Npc.");
				} else {
					c.sendMessage("No such NPC.");
				}
			} catch (Exception e) {

			}
		}

		if (playerCommand.startsWith("ipban") &amp;&amp; c.playerRights &gt;= 2) { // use
																		// as
																		// ::ipban
																		// name
			try {
				String playerToBan = playerCommand.substring(6);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Connection
									.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
							Connection
									.addIpToFile(Server.playerHandler.players[i].connectedFrom);
							c
									.sendMessage("You have IP banned the user: "
											+ Server.playerHandler.players[i].playerName
											+ " with the host: "
											+ Server.playerHandler.players[i].connectedFrom);
							Server.playerHandler.players[i].disconnected = true;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

		if (playerCommand.startsWith("ban")
				&amp;&amp; playerCommand.charAt(3) == ' ') { // use as ::ban name
			try {
				String playerToBan = playerCommand.substring(4);
				Connection.addNameToBanList(playerToBan);
				Connection.addNameToFile(playerToBan);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Server.playerHandler.players[i].disconnected = true;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

		if (playerCommand.startsWith("unban") &amp;&amp; c.playerRights &gt;= 2) {
			try {
				String playerToBan = playerCommand.substring(6);
				Connection.removeNameFromBanList(playerToBan);
				c.sendMessage(playerToBan + " has been unbanned.");
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("anim") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}

		if (playerCommand.startsWith("mute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(5);
				Connection.addNameToMuteList(playerToBan);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Client c2 = (Client) Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: "
									+ c.playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("ipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(7);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Connection
									.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
							c
									.sendMessage("You have IP Muted the user: "
											+ Server.playerHandler.players[i].playerName);
							Client c2 = (Client) Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: "
									+ c.playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("unipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(9);
				for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if (Server.playerHandler.players[i] != null) {
						if (Server.playerHandler.players[i].playerName
								.equalsIgnoreCase(playerToBan)) {
							Connection
									.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
							c
									.sendMessage("You have Un Ip-Muted the user: "
											+ Server.playerHandler.players[i].playerName);
							break;
						}
					}
				}
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("unmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(7);
				Connection.unMuteUser(playerToBan);
			} catch (Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

	}

}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/2</link>
        <pubDate>Sun, 21 Nov 2010 19:51:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
      <item>
        <title>[pi]commands.java: reached end of file while parsing</title>
        <dc:creator><![CDATA[@thomas27 thomas27]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/thomas27">@thomas27</a> wrote:</p>
          <blockquote>
              <p>Hello,</p>
<p>I’m stuck with a problem and I don’t know how to fix it.</p>
<p>This is the code:</p>
<p>[code]package server.model.players.packets;</p>
<p>import server.Config;<br>
import server.Connection;<br>
import server.Server;<br>
import server.model.players.Client;<br>
import server.model.players.PacketType;<br>
import server.model.players.PlayerHandler;<br>
import server.util.Misc;<br>
import server.world.WorldMap;</p>
<p>public class Commands implements PacketType {</p>
<pre><code>@Override
public void processPacket(Client c, int packetType, int packetSize) {
String playerCommand = c.getInStream().readString();
if(Config.SERVER_DEBUG)
	Misc.println(c.playerName+" playerCommand: "+playerCommand);
	if (playerCommand.startsWith("/") &amp;&amp; playerCommand.length() &gt; 1) {
		if (c.clanId &gt;= 0) {
			System.out.println(playerCommand);
			playerCommand = playerCommand.substring(1);
			Server.clanChat.playerMessageToClan(c.playerId, playerCommand, c.clanId);
		} else {
				String rank = "";
                String Message = playerCommand.substring(1);
            if (c.playerRights &gt;= 0) {
                rank = "[Player]["+ c.playerName +"]:";
                        }
            if (c.playerRights &gt;= 1) {
                rank = "@blu@[Mod]@bla@["+ c.playerName +"]:";
            }
            if (c.playerRights &gt;= 2) {
                rank = "@yel@[Admin]@bla@["+ c.playerName +"]:";
            }
            if (c.playerRights &gt;= 3) {
                rank = "@red@[Owner]@bla@["+ Misc.ucFirst(c.playerName) +"]: ";
            }
            if (c.playerRights &gt;= 4) {
                rank = "[Player]["+ c.playerName +"]:";
            }
            for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.sendMessage(rank+Message);
		}
		}

}
		return;
</code></pre>
<p>}</p>
<p>if (playerCommand.equalsIgnoreCase(“lock”)) {<br>
c.expLock = true;<br>
c.sendMessage(“You will <a class="mention" href="/u/red">@red</a>@not@bla@ gain any experience.”);<br>
}</p>
<p>if (playerCommand.equalsIgnoreCase(“empty”)) {<br>
c.getPA().removeAllItems();<br>
c.sendMessage(“You empty your inventory”);<br>
}</p>
<p>if (playerCommand.equalsIgnoreCase(“unlock”)) {<br>
c.expLock = false;<br>
c.sendMessage(“You <span class="mention">@gre</span>@will@bla@ gain experience.”);<br>
}</p>
<pre><code>    if (c.playerRights &gt;= 2) {

        if (playerCommand.equals("bank")) {
</code></pre>
<p>c.getPA().openUpBank();<br>
}</p>
<pre><code>        if (playerCommand.equalsIgnoreCase("master")) {
            c.getPA().addSkillXP(14910000, 0);
            c.getPA().addSkillXP(14910000, 1);
            c.getPA().addSkillXP(14910000, 2);
            c.getPA().addSkillXP(14910000, 3);
            c.getPA().addSkillXP(14910000, 4);
            c.getPA().addSkillXP(14910000, 5);
            c.getPA().addSkillXP(14910000, 6);
            c.getPA().addSkillXP(14910000, 7);
            c.getPA().addSkillXP(14910000, 8);
            c.getPA().addSkillXP(14910000, 9);
            c.getPA().addSkillXP(14910000, 10);
            c.getPA().addSkillXP(14910000, 11);
            c.getPA().addSkillXP(14910000, 12);
            c.getPA().addSkillXP(14910000, 13);
            c.getPA().addSkillXP(14910000, 14);
            c.getPA().addSkillXP(14910000, 15);
            c.getPA().addSkillXP(14910000, 16);
            c.getPA().addSkillXP(14910000, 17);
            c.getPA().addSkillXP(14910000, 18);
            c.getPA().addSkillXP(14910000, 19);
            c.getPA().addSkillXP(14910000, 20);
            c.getPA().addSkillXP(14910000, 21);
            c.getPA().addSkillXP(14910000, 22);
            c.getPA().addSkillXP(14910000, 23);
            c.getPA().addSkillXP(14910000, 24);
            c.getItems().addItem(16014, 1);
        }

    }
	if(c.playerRights &gt;= 0) {

                    if (playerCommand.equalsIgnoreCase("suicide")) {
                        c.getPA().applyDead();
                        c.sendMessage("You commit suicide...");

                    }
		if (playerCommand.equalsIgnoreCase("players")) {
			c.sendMessage("There are currently "+PlayerHandler.getPlayerCount()+ " players online.");
		}
		if (playerCommand.equalsIgnoreCase("commands")) {
			c.sendMessage("Your current commands - ::players, ::changepassword - More coming soon.");
		}
		if (playerCommand.startsWith("changepassword") &amp;&amp; playerCommand.length() &gt; 15) {
			c.playerPass = playerCommand.substring(15);
			c.sendMessage("Your password is now: " + c.playerPass);
		}

		if (playerCommand.startsWith("setlevel") &amp;&amp; c.playerRights &gt;= 3) {
			if (c.inWild())
				return;
			for (int j = 0; j &lt; c.playerEquipment.length; j++) {
				if (c.playerEquipment[j] &gt; 0) {
					c.sendMessage("Take off your shit idiot..");
					return;
				}
			}
			try {
			String[] args = playerCommand.split(" ");
			int skill = Integer.parseInt(args[1]);
			int level = Integer.parseInt(args[2]);
			if (level &gt; 99)
				level = 99;
			else if (level &lt; 0)
				level = 1;
			c.playerXP[skill] = c.getPA().getXPForLevel(level)+5;
			c.playerLevel[skill] = c.getPA().getLevelForXP(c.playerXP[skill]);
			c.getPA().refreshSkill(skill);
			} catch (Exception e){}
		}
		if (playerCommand.equals("spec") &amp;&amp; c.playerRights &gt;= 3) {
			if (!c.inWild())
				c.specAmount = 10.0;
		}
		if (playerCommand.startsWith("object") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.getPA().object(Integer.parseInt(args[1]), c.absX, c.absY, 0, 10);
		}
		if (playerCommand.equals("armadyl") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 4);
		}
		if (playerCommand.equals("saradomin") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 8);
		}
		if (playerCommand.equals("bandos") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().movePlayer(2905, 3611, 12);
		}

		if (playerCommand.startsWith("tele") &amp;&amp; c.playerRights &gt;= 3) {
			String[] arg = playerCommand.split(" ");
			if (arg.length &gt; 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),Integer.parseInt(arg[3]));
			else if (arg.length == 3)
				c.getPA().movePlayer(Integer.parseInt(arg[1]),Integer.parseInt(arg[2]),c.heightLevel);
		}

		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: "+c.absX);
			c.sendMessage("Y: "+c.absY);
		}


                        if (playerCommand.startsWith("yell") &amp;&amp; c.playerRights &gt;= 1) {
                String rank = "";
                String Message = playerCommand.substring(4).toLowerCase();
            if (c.playerRights &gt;= 1) {
                rank = "@blu@[Mod]@bla@["+ c.playerName +"]:";
            if (c.playerRights &gt;= 2) {
                rank = "@yel@[Admin]@bla@["+ c.playerName +"]:";
            }
            if (c.playerRights &gt;= 3) {
                rank = "@red@[Owner]@bla@["+ c.playerName +"] : ";
            }
            for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.sendMessage(rank+Message);
	   }
	}
        }

	}

		if(c.playerRights &gt;= 3) {

                        if (playerCommand.startsWith("kick")) { // use as ::kick name
</code></pre>
<p>try {<br>
String playerToBan = playerCommand.substring(5);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {<br>
Server.playerHandler.players[i].disconnected = true;<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}</p>
<pre><code>                        if (playerCommand.startsWith("demote")) {
</code></pre>
<p>try {<br>
String playerTodonar = playerCommand.substring(7);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {<br>
Server.playerHandler.players[i].playerRights = 0;<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}</p>
<pre><code>                        if (playerCommand.startsWith("mod")) {
</code></pre>
<p>try {<br>
String playerTodonar = playerCommand.substring(4);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {<br>
Server.playerHandler.players[i].playerRights = 1;<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}</p>
<pre><code>                    if (playerCommand.startsWith("admin")) {
</code></pre>
<p>try {<br>
String playerTodonar = playerCommand.substring(6);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTodonar)) {<br>
Server.playerHandler.players[i].playerRights = 2;<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}</p>
<pre><code>                        if (playerCommand.startsWith("getpass")) { // use as :pass name
</code></pre>
<p>try {<br>
String playerTogetpass = playerCommand.substring(5);<br>
for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {<br>
if(Server.playerHandler.players[i] != null) {<br>
if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerTogetpass)) {<br>
c.sendMessage(“The players pass is “+Server.playerHandler.players[i].playerPass+” .”);<br>
}<br>
}<br>
}<br>
} catch(Exception e) {<br>
c.sendMessage(“Player Must Be Offline.”);<br>
}</p>
<pre><code>                        if (playerCommand.equalsIgnoreCase("runes")) {
	c.getItems().addItem(554, 999999999);
	c.getItems().addItem(555, 999999999);
	c.getItems().addItem(556, 999999999);
	c.getItems().addItem(557, 999999999);
	c.getItems().addItem(558, 999999999);
	c.getItems().addItem(559, 999999999);
	c.getItems().addItem(560, 999999999);
	c.getItems().addItem(561, 999999999);
	c.getItems().addItem(562, 999999999);
	c.getItems().addItem(563, 999999999);
	c.getItems().addItem(564, 999999999);
	c.getItems().addItem(565, 999999999);
	c.getItems().addItem(566, 999999999);
	}

		}
		if (playerCommand.startsWith("task") &amp;&amp; c.playerRights &gt;= 3) {
			c.taskAmount = -1;
			c.slayerTask = 0;
		}

		if (playerCommand.startsWith("starter") &amp;&amp; c.playerRights &gt;= 3) {
			c.getDH().sendDialogues(100, 945);
		}
		if (playerCommand.equalsIgnoreCase("mypos") &amp;&amp; c.playerRights &gt;= 3) {
			c.sendMessage("X: "+c.absX);
			c.sendMessage("Y: "+c.absY);
		}
		if (playerCommand.startsWith("reloaddrops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.npcDrops = null;
			Server.npcDrops = new server.model.npcs.NPCDrops();
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++) {
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.sendMessage("[" + c.playerName + "] " + "NPC Drops have been reloaded.");
				}
			}

		}
		if (playerCommand.startsWith("reloadshops") &amp;&amp; c.playerRights &gt;= 3) {
			Server.shopHandler = new server.world.ShopHandler();
		}

		if (playerCommand.startsWith("fakels") &amp;&amp; c.playerRights &gt;= 3) {
			int item = Integer.parseInt(playerCommand.split(" ")[1]);
			Server.clanChat.handleLootShare(c, item, 1);
		}

		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.getPA().showInterface(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("gfx") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.gfx0(Integer.parseInt(args[1]));
		}
		if (playerCommand.startsWith("update") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			int a = Integer.parseInt(args[1]);
			PlayerHandler.updateSeconds = a;
			PlayerHandler.updateAnnounced = false;
			PlayerHandler.updateRunning = true;
			PlayerHandler.updateStartTime = System.currentTimeMillis();
		}

		if (playerCommand.startsWith("item") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				String[] args = playerCommand.split(" ");
				if (args.length == 3) {
					int newItemID = Integer.parseInt(args[1]);
					int newItemAmount = Integer.parseInt(args[2]);
					if ((newItemID &lt;= 20000) &amp;&amp; (newItemID &gt;= 0)) {
						c.getItems().addItem(newItemID, newItemAmount);
					} else {
						c.sendMessage("No such item.");
					}
				} else {
					c.sendMessage("Use as ::pickup 995 200");
				}
			} catch(Exception e) {

			}
		}

		if (playerCommand.equals("Vote") &amp;&amp; c.playerRights &gt;= 3) {
			for (int j = 0; j &lt; Server.playerHandler.players.length; j++)
				if (Server.playerHandler.players[j] != null) {
					Client c2 = (Client)Server.playerHandler.players[j];
					c2.getPA().sendFrame126("www.google.ca", 12000);
				}
		}


		if (playerCommand.equalsIgnoreCase("debug") &amp;&amp; c.playerRights &gt;= 3) {
			Server.playerExecuted = true;
		}

		if (playerCommand.startsWith("interface") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				String[] args = playerCommand.split(" ");
				int a = Integer.parseInt(args[1]);
				c.getPA().showInterface(a);
			} catch(Exception e) {
				c.sendMessage("::interface ####");
			}
		}

		if(playerCommand.startsWith("www") &amp;&amp; c.playerRights &gt;= 3) {
			c.getPA().sendFrame126(playerCommand,0);
		}


		if (playerCommand.startsWith("xteleto") &amp;&amp; c.playerRights &gt;= 2) {
			String name = playerCommand.substring(8);
			for (int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
				if (Server.playerHandler.players[i] != null) {
					if (Server.playerHandler.players[i].playerName.equalsIgnoreCase(name)) {
						c.getPA().movePlayer(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), Server.playerHandler.players[i].heightLevel);
					}
				}
			}
		}



		if(playerCommand.startsWith("npc") &amp;&amp; c.playerRights &gt;= 3) {
			try {
				int newNPC = Integer.parseInt(playerCommand.substring(4));
				if(newNPC &gt; 0) {
					Server.npcHandler.spawnNpc(c, newNPC, c.absX, c.absY, 0, 0, 120, 7, 70, 70, false, false);
					c.sendMessage("You spawn a Npc.");
				} else {
					c.sendMessage("No such NPC.");
				}
			} catch(Exception e) {

			}
		}


		if (playerCommand.startsWith("ipban") &amp;&amp; c.playerRights &gt;= 2) { // use as ::ipban name
			try {
				String playerToBan = playerCommand.substring(6);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToBanList(Server.playerHandler.players[i].connectedFrom);
							Connection.addIpToFile(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP banned the user: "+Server.playerHandler.players[i].playerName+" with the host: "+Server.playerHandler.players[i].connectedFrom);
							Server.playerHandler.players[i].disconnected = true;
						}
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

		if (playerCommand.startsWith("ban") &amp;&amp; playerCommand.charAt(3) == ' ') { // use as ::ban name
			try {
				String playerToBan = playerCommand.substring(4);
				Connection.addNameToBanList(playerToBan);
				Connection.addNameToFile(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Server.playerHandler.players[i].disconnected = true;
						}
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

		if (playerCommand.startsWith("unban") &amp;&amp; c.playerRights &gt;= 2) {
			try {
				String playerToBan = playerCommand.substring(6);
				Connection.removeNameFromBanList(playerToBan);
				c.sendMessage(playerToBan + " has been unbanned.");
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("anim") &amp;&amp; c.playerRights &gt;= 3) {
			String[] args = playerCommand.split(" ");
			c.startAnimation(Integer.parseInt(args[1]));
			c.getPA().requestUpdates();
		}

		if (playerCommand.startsWith("mute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(5);
				Connection.addNameToMuteList(playerToBan);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						}
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("ipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(7);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.addIpToMuteList(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have IP Muted the user: "+Server.playerHandler.players[i].playerName);
							Client c2 = (Client)Server.playerHandler.players[i];
							c2.sendMessage("You have been muted by: " + c.playerName);
							break;
						}
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("unipmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(9);
				for(int i = 0; i &lt; Config.MAX_PLAYERS; i++) {
					if(Server.playerHandler.players[i] != null) {
						if(Server.playerHandler.players[i].playerName.equalsIgnoreCase(playerToBan)) {
							Connection.unIPMuteUser(Server.playerHandler.players[i].connectedFrom);
							c.sendMessage("You have Un Ip-Muted the user: "+Server.playerHandler.players[i].playerName);
							break;
						}
					}
				}
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}
		if (playerCommand.startsWith("unmute") &amp;&amp; c.playerRights &gt;= 1) {
			try {
				String playerToBan = playerCommand.substring(7);
				Connection.unMuteUser(playerToBan);
			} catch(Exception e) {
				c.sendMessage("Player Must Be Offline.");
			}
		}

	}

}
</code></pre>
<p>}[/code]</p>
<p>Help me please  <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744/1</link>
        <pubDate>Sun, 21 Nov 2010 19:46:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-369744-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-commands-java-reached-end-of-file-while-parsing/369744.rss">[pi]commands.java: reached end of file while parsing</source>
      </item>
  </channel>
</rss>
