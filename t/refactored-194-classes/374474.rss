<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Refactored 194 classes</title>
    <link>https://forum.moparisthebest.com/t/refactored-194-classes/374474</link>
    <description>These are all from the [b]194 client[/b]. I couldn&#39;t find a better board for this.

Class5 = RSSocket
Class37 = StringUtils

[code=java]import java.io.InputStream;
import java.io.IOException;
import java.io.OutputStream;
import java.net.Socket;

public final class RSSocket implements Runnable {
    
    private Applet_Sub1 applet;
    private boolean closed = false;
    private boolean writing = false;
    private boolean aBoolean92 = false; //TODO
    private byte[] buffer;
    private int bufferIndex;
    private int writeIndex;
    private InputStream inputStream;
    private OutputStream outputStream;
    private Socket socket;

    /**
     * The RSSocket constructor.
     * 
     * @param applet
     *  The RSApplet.
     * @param socket
     *  The socket.
     * @throws IOException
     *  If there is any error getting the
     *  input or output streams.
     */
    public RSSocket(Applet_Sub1 applet, Socket socket) throws IOException {
        ((RSSocket) this).applet = applet;
        this.socket = socket;
        this.socket.setSoTimeout(30000);
        this.socket.setTcpNoDelay(true);
        this.inputStream = socket.getInputStream();
        this.outputStream = socket.getOutputStream();
    }

    /**
     * Closes the RSSocket.
     */
    public void close() {
        try {
            if (inputStream != null)
                inputStream.close();
            if (outputStream != null)
                outputStream.close();
            if (socket != null)
                socket.close();
        } catch (IOException io) {
            System.out.println(&quot;Error closing stream!&quot;);
        }
        writing = false; // Hmm...?
        synchronized (this) {
            this.notify();
        }
        buffer = null;
        closed = true;
    }

    /**
     * Reads the next byte of data.
     *
     * @return
     *  The next byte of data
     * @throws IOException
     *  If an I/O error occurs.
     * @see
     *  java.io.InputStream#read()
     */
    public int read() throws IOException {
        return closed ? 0 : inputStream.read();
    }

    /**
     * Returns the number of bytes that can be read.
     *
     * @return
     *  The number of bytes that can be read;
     * @throws IOException
     *  If an I/O error occurs.
     * @see
     *  java.io.InputStream#available()
     */
    public int available() throws IOException {
        return closed ? 0 : inputStream.available();
    }

    /**
     * Reads up to &lt;code&gt;maxBytes&lt;/code&gt; bytes
     * of data in the &lt;code&gt;buffer&lt;/byte&gt;,
     * starting from &lt;code&gt;offset&lt;/code&gt; bytes
     * in a loop.
     *
     * @param buffer
     *  The array of bytes to read in.
     * @param offset
     *  The offset.
     * @param maxBytes
     *  The maximum number of bytes to read.
     * @throws IOException
     *  If an I/O error occurs.
     */
    public void read(byte[] buffer, int offset, int maxBytes) throws IOException {
        if (!closed) {
            // The total number of bytes read into the buffer.
            int totalBytes;

            for (; maxBytes &gt; 0; maxBytes -= totalBytes) {
                totalBytes = inputStream.read(buffer, offset, maxBytes);
                if (totalBytes &lt;= 0)
                    throw new IOException(&quot;No bytes!&quot;);
                offset += totalBytes;
            }
        }
    }

    /**
     * Queues bytes into the &lt;code&gt;buffer&lt;/code&gt;.
     *
     * @param buffer
     *  The array of bytes.
     * @param i
     *  A dummy var.
     * @throws IOException
     *  If any I/O error occurs.
     */
    public void queue(byte[] buffer, int i) throws IOException {
        if (!closed) {
            if (aBoolean92) {
                aBoolean92 = false;
                throw new IOException(&quot;Error in writer thread!&quot;);
            }
            if (buffer == null) {
                buffer = new byte[5000];
            }
            synchronized (this) {
                for (int idx = 0; idx &lt; i; idx++) {
                    this.buffer[bufferIndex] = buffer[idx];
                    bufferIndex = (bufferIndex + 1) % 5000;
                    if (bufferIndex == (writeIndex + 4900) % 5000) {
                        throw new IOException(&quot;Buffer overflow!&quot;);
                    }
                }
                if (!writing) {
                    writing = true;
                    applet.method12(this, 2);
                }
                this.notify();
            }
        }
    }

    /**
     * The thread.
     */
    @Override
    public void run() {
        System.out.println(&quot;Stream writer started.&quot;);
        while (writing) {
            int i;
            // most probably
            int remaining;

            synchronized (this) {
                if (bufferIndex == writeIndex) {
                    try {
                        this.wait();
                    } catch (InterruptedException ie) {
                        System.out.println(&quot;Interrupted while waiting!&quot;);
                    }
                }
                if (!writing)
                    break;
                i = writeIndex;
                remaining = (bufferIndex &gt;= writeIndex) ? bufferIndex-writeIndex : 5000 - writeIndex;
            }
            if (remaining &gt; 0) {
                try {
                    outputStream.write(buffer, i, remaining);
                } catch (IOException io) {
                    aBoolean92 = true;
                }
                writeIndex = (writeIndex + remaining) % 5000;
                try {
                    if (bufferIndex == writeIndex) {
                        outputStream.flush();
                    }
                } catch (IOException io) {
                    aBoolean92 = true;
                }
            }
        }
        System.out.println(&quot;Stream writer stopped.&quot;);
    }
}[/code]</description>
    
    <lastBuildDate>Thu, 23 Dec 2010 04:01:21 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/refactored-194-classes/374474.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Refactored 194 classes</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p><a href="http://www.moparisthebest.com/smf/index.php/topic,346599.0.html" rel="nofollow noopener">http://www.moparisthebest.com/smf/index.php/topic,346599.0.html</a> <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>An almost-refactored StringUtils class:</p>
<p>[code=java]import sign.signlink;</p>
<p>public final class StringUtils {<br>
static char[] aCharArray522 = new char[12];<br>
static char[] validCharacters = {<br>
‘_’, ‘a’, ‘b’, ‘c’, ‘d’, ‘e’, ‘f’, ‘g’, ‘h’,<br>
‘i’, ‘j’, ‘k’, ‘l’, ‘m’, ‘n’, ‘o’, ‘p’, ‘q’,<br>
‘r’, ‘s’, ‘t’, ‘u’, ‘v’,  ‘w’, ‘x’, ‘y’, ‘z’,<br>
‘0’, ‘1’, ‘2’, ‘3’, ‘4’, ‘5’, ‘6’, ‘7’, ‘8’,<br>
‘9’<br>
};</p>
<pre><code>/**
 * Gets a username as a long from a string.
 *
 * @param usernameAsString
 *  The username as a string.
 * @return
 *  The username as a long.
 */
public static long getUsernameAsLong(String usernameAsString) {
    usernameAsString = usernameAsString.trim();
    long usernameAsLong = 0L;

    // 12 = max username length
    for (int i = 0; i &lt; usernameAsString.length() &amp;&amp; i &lt; 12; i++) {
        char c = usernameAsString.charAt(i);
        usernameAsLong *= 37L;
        if (c &gt;= 'A' &amp;&amp; c &lt;= 'Z') {
            usernameAsLong += (long) ('\001' + c - 'A');
        } else if (c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
            usernameAsLong += (long) ('\001' + c - 'a');
        } else if (c &gt;= '0' &amp;&amp; c &lt;= '9') {
            usernameAsLong += (long) ('\033' + c - '0');
        }
    }
    return usernameAsLong;
}

//TODO
public static long method420(String string, byte i) {
    string = string.toLowerCase();
    long l = 0L;

    for (int i_1 = 0; i_1 &lt; string.length(); i_1++) {
        l = l * 61L + (long) string.charAt(i_1) - 32L;
    }
    if (i != 6) {
        throw new NullPointerException();
    }
    return l;
}

/**
 * Censors a string.
 *
 * @param string
 *  The string to censor.
 * @return
 *  A censored string.
 */
public static String censorString(String string) {
    String string_6 = "";

    for (int i_7 = 0; i_7 &lt; string.length(); i_7++) {
        string_6 += "*";
    }
    return string_6;
}

/**
 * Formats a string, usually in
 * a chat.
 *
 * e.g. hello. world -&gt; Hello. World
 *
 * @param string
 *  The string to format.
 * @return
 *  The formatted string.
 */
public static String formatString(String string) {
    string = string.toLowerCase();
    char[] cs = string.toCharArray();
    int i_3 = cs.length;
    boolean bool = true;

    for (int i_4 = 0; i_4 &lt; i_3; i_4++) {
        char c = cs[i_4];

        if (bool &amp;&amp; c &gt;= 'a' &amp;&amp; c &lt;= 'z') {
            cs[i_4] += -32;
            bool = false;
        }
        if (c == '.' || c == '!') {
            bool = true;
        }
    }
    return new String(cs);
}

/**
 * Formats a username by capitalizing the
 * first letter and/or replacing underscores
 * with spaces.
 *
 * e.g. hurr_durr -&gt; Hurr durr
 * 
 * @param string
 *  The username to format.
 * @return
 *  A formatted username.
 */
public static String formatUsername(String string) {
    if (string.length() &gt; 0) {
        char[] cs = string.toCharArray();

        for (int i_2 = 0; i_2 &lt; cs.length; i_2++) {
            if (cs[i_2] == '_') {
                cs[i_2] = ' ';
                if (i_2 + 1 &lt; cs.length &amp;&amp; cs[i_2 + 1] &gt;= 'a'
                        &amp;&amp; cs[i_2 + 1] &lt;= 'z') {
                    cs[i_2 + 1] = (char) (cs[i_2 + 1] + 'A' - 'a');
                }
            }
        }
        if (cs[0] &gt;= 'a' &amp;&amp; cs[0] &lt;= 'z') {
            cs[0] = (char) (cs[0] + 'A' - 'a');
        }
        return new String(cs);
    }
    return string;
}

/**
 * Gets a username as a string from a long.
 *
 * @param usernameAsLong
 *  The username as a long.
 * @return
 *  The username as a string.
 */
public static String getUsernameAsString(long usernameAsLong) {
    try {
        if (usernameAsLong &lt; 0L || usernameAsLong &gt;= 6582952005840035281L) {
            return "invalid_name";
        }
        int i = 0;
        while (usernameAsLong != 0L) {
            long l_0 = usernameAsLong;
            usernameAsLong /= 37L;
            aCharArray522[11 - i++] = validCharacters[(int) (l_0 - usernameAsLong * 37L)];
        }
        return new String(aCharArray522, 12 - i, i);
    } catch (RuntimeException re) {
        signlink.reporterror(
                "17221, " + usernameAsLong + ", "
                + re.toString());
        throw new RuntimeException();
    }
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/refactored-194-classes/374474/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/refactored-194-classes/374474/3</link>
        <pubDate>Thu, 23 Dec 2010 04:01:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374474-3</guid>
        <source url="https://forum.moparisthebest.com/t/refactored-194-classes/374474.rss">Refactored 194 classes</source>
      </item>
      <item>
        <title>Refactored 194 classes</title>
        <dc:creator><![CDATA[@ollie123 Ollie123]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie123">@ollie123</a> wrote:</p>
          <blockquote>
              <p>Nice to see people are still dabbling with this.</p>
<p>Can you tell me where you got your 194 from?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/refactored-194-classes/374474/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/refactored-194-classes/374474/2</link>
        <pubDate>Wed, 22 Dec 2010 16:46:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374474-2</guid>
        <source url="https://forum.moparisthebest.com/t/refactored-194-classes/374474.rss">Refactored 194 classes</source>
      </item>
      <item>
        <title>Refactored 194 classes</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>These are all from the <span class="bbcode-b">194 client</span>. I couldn’t find a better board for this.</p>
<p>Class5 = RSSocket<br>
Class37 = StringUtils</p>
<p>[code=java]import java.io.InputStream;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.net.Socket;</p>
<p>public final class RSSocket implements Runnable {</p>
<pre><code>private Applet_Sub1 applet;
private boolean closed = false;
private boolean writing = false;
private boolean aBoolean92 = false; //TODO
private byte[] buffer;
private int bufferIndex;
private int writeIndex;
private InputStream inputStream;
private OutputStream outputStream;
private Socket socket;

/**
 * The RSSocket constructor.
 * 
 * @param applet
 *  The RSApplet.
 * @param socket
 *  The socket.
 * @throws IOException
 *  If there is any error getting the
 *  input or output streams.
 */
public RSSocket(Applet_Sub1 applet, Socket socket) throws IOException {
    ((RSSocket) this).applet = applet;
    this.socket = socket;
    this.socket.setSoTimeout(30000);
    this.socket.setTcpNoDelay(true);
    this.inputStream = socket.getInputStream();
    this.outputStream = socket.getOutputStream();
}

/**
 * Closes the RSSocket.
 */
public void close() {
    try {
        if (inputStream != null)
            inputStream.close();
        if (outputStream != null)
            outputStream.close();
        if (socket != null)
            socket.close();
    } catch (IOException io) {
        System.out.println("Error closing stream!");
    }
    writing = false; // Hmm...?
    synchronized (this) {
        this.notify();
    }
    buffer = null;
    closed = true;
}

/**
 * Reads the next byte of data.
 *
 * @return
 *  The next byte of data
 * @throws IOException
 *  If an I/O error occurs.
 * @see
 *  java.io.InputStream#read()
 */
public int read() throws IOException {
    return closed ? 0 : inputStream.read();
}

/**
 * Returns the number of bytes that can be read.
 *
 * @return
 *  The number of bytes that can be read;
 * @throws IOException
 *  If an I/O error occurs.
 * @see
 *  java.io.InputStream#available()
 */
public int available() throws IOException {
    return closed ? 0 : inputStream.available();
}

/**
 * Reads up to &lt;code&gt;maxBytes&lt;/code&gt; bytes
 * of data in the &lt;code&gt;buffer&lt;/byte&gt;,
 * starting from &lt;code&gt;offset&lt;/code&gt; bytes
 * in a loop.
 *
 * @param buffer
 *  The array of bytes to read in.
 * @param offset
 *  The offset.
 * @param maxBytes
 *  The maximum number of bytes to read.
 * @throws IOException
 *  If an I/O error occurs.
 */
public void read(byte[] buffer, int offset, int maxBytes) throws IOException {
    if (!closed) {
        // The total number of bytes read into the buffer.
        int totalBytes;

        for (; maxBytes &gt; 0; maxBytes -= totalBytes) {
            totalBytes = inputStream.read(buffer, offset, maxBytes);
            if (totalBytes &lt;= 0)
                throw new IOException("No bytes!");
            offset += totalBytes;
        }
    }
}

/**
 * Queues bytes into the &lt;code&gt;buffer&lt;/code&gt;.
 *
 * @param buffer
 *  The array of bytes.
 * @param i
 *  A dummy var.
 * @throws IOException
 *  If any I/O error occurs.
 */
public void queue(byte[] buffer, int i) throws IOException {
    if (!closed) {
        if (aBoolean92) {
            aBoolean92 = false;
            throw new IOException("Error in writer thread!");
        }
        if (buffer == null) {
            buffer = new byte[5000];
        }
        synchronized (this) {
            for (int idx = 0; idx &lt; i; idx++) {
                this.buffer[bufferIndex] = buffer[idx];
                bufferIndex = (bufferIndex + 1) % 5000;
                if (bufferIndex == (writeIndex + 4900) % 5000) {
                    throw new IOException("Buffer overflow!");
                }
            }
            if (!writing) {
                writing = true;
                applet.method12(this, 2);
            }
            this.notify();
        }
    }
}

/**
 * The thread.
 */
@Override
public void run() {
    System.out.println("Stream writer started.");
    while (writing) {
        int i;
        // most probably
        int remaining;

        synchronized (this) {
            if (bufferIndex == writeIndex) {
                try {
                    this.wait();
                } catch (InterruptedException ie) {
                    System.out.println("Interrupted while waiting!");
                }
            }
            if (!writing)
                break;
            i = writeIndex;
            remaining = (bufferIndex &gt;= writeIndex) ? bufferIndex-writeIndex : 5000 - writeIndex;
        }
        if (remaining &gt; 0) {
            try {
                outputStream.write(buffer, i, remaining);
            } catch (IOException io) {
                aBoolean92 = true;
            }
            writeIndex = (writeIndex + remaining) % 5000;
            try {
                if (bufferIndex == writeIndex) {
                    outputStream.flush();
                }
            } catch (IOException io) {
                aBoolean92 = true;
            }
        }
    }
    System.out.println("Stream writer stopped.");
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/refactored-194-classes/374474/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/refactored-194-classes/374474/1</link>
        <pubDate>Wed, 22 Dec 2010 11:53:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-374474-1</guid>
        <source url="https://forum.moparisthebest.com/t/refactored-194-classes/374474.rss">Refactored 194 classes</source>
      </item>
  </channel>
</rss>
