<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[194 and 317 compared] Refactored FloorDefinition class</title>
    <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620</link>
    <description>Here&#39;s a comparison of the 317 and 194 FloorDefinition class so we can see the changes that occurred during that time.

[size=18pt]194[/size]
[code=Java]public class FloorDefinition {
	public static int floorCount;
	public static FloorDefinition[] floorCache;
	public int terrainColour;
	public int textureId = -1;
	public boolean occlude = true;
	public String name;
	public int hue;
	public int saturation;
	public int lightness;
	public int hueVariation;
	public int hueDivider;

	public static void load(Archive archive) {
		Stream stream = new Stream(archive.getFile(null, &quot;flo.dat&quot;));
		floorCount = stream.getUnsignedLEShort();
		if (floorCache == null)
			floorCache = new FloorDefinition[floorCount];
		for (int f = 0; f &lt; floorCount; f++) {
			if (floorCache[f] == null)
				floorCache[f] = new FloorDefinition();
			floorCache[f].readValues(stream);
		}
	}

	public void readValues(Stream stream) {
		for (;;) {
			int configCode = stream.getUnsignedByte();
			if (configCode == 0)
				break;
			if (configCode == 1) {
				terrainColour = stream.get24BitInt();
				RGBToHSL(terrainColour);
			} else if (configCode == 2)
				textureId = stream.getUnsignedByte();
			else if (configCode == 5)
				occlude = false;
			else if (configCode == 6)
				name = stream.getString();
			else
				System.out.println(&quot;Error unrecognised config code: &quot; + configCode);
		}
	}

	private void RGBToHSL(int rgb) {
		double r = (double) (rgb &gt;&gt; 16 &amp; 0xff) / 256.0;
		double g = (double) (rgb &gt;&gt; 8 &amp; 0xff) / 256.0;
		double b = (double) (rgb &amp; 0xff) / 256.0;
		double minC = r;
		if (g &lt; minC)
			minC = g;
		if (b &lt; minC)
			minC = b;
		double maxC = r;
		if (g &gt; maxC)
			maxC = g;
		if (b &gt; maxC)
			maxC = b;
		double h = 0.0;
		double s = 0.0;
		double l = (minC + maxC) / 2.0;
		if (minC != maxC) {
			if (l &lt; 0.5)
				s = (maxC - minC) / (maxC + minC);
			if (l &gt;= 0.5)
				s = (maxC - minC) / (2.0 - maxC - minC);
			if (r == maxC)
				h = (g - b) / (maxC - minC);
			else if (g == maxC)
				h = 2.0 + (b - r) / (maxC - minC);
			else if (b == maxC)
				h = 4.0 + (r - g) / (maxC - minC);
		}
		h /= 6.0;
		hue = (int) (h * 256.0);
		saturation = (int) (s * 256.0);
		lightness = (int) (l * 256.0);
		if (saturation &lt; 0)
			saturation = 0;
		else if (saturation &gt; 255)
			saturation = 255;
		if (lightness &lt; 0)
			lightness = 0;
		else if (lightness &gt; 255)
			lightness = 255;
		if (l &gt; 0.5)
			hueDivider = (int) ((1.0 - l) * s * 512.0);
		else
			hueDivider = (int) (l * s * 512.0);
		if (hueDivider &lt; 1)
			hueDivider = 1;
		hueVariation = (int) (h * (double) hueDivider);
	}
}[/code]

[size=18pt]317[/size]
[code=Java]package com.jagex.runescape;

public final class FloorDefinition {

	public static void load(Archive archive) {
		Stream stream = new Stream(archive.getFile(&quot;flo.dat&quot;));
		int floorCount = stream.getUnsignedLEShort();
		if (floorCache == null)
			floorCache = new FloorDefinition[floorCount];
		for (int f = 0; f &lt; floorCount; f++) {
			if (floorCache[f] == null)
				floorCache[f] = new FloorDefinition();
			floorCache[f].readValues(stream);
		}
	}

	private void readValues(Stream stream) {
		do {
			int configCode = stream.getUnsignedByte();
			if (configCode == 0)
				return;
			else if (configCode == 1) {
				terrainColour = stream.get24BitInt();
				RGBToHSL(terrainColour);
			} else if (configCode == 2)
				textureId = stream.getUnsignedByte();
			else if (configCode == 5)
				occlude = false;
			else if (configCode == 6)
				name = stream.getString();
			else if (configCode == 7) {
				int hue = this.hue;
				int saturation = this.saturation;
				int lightness = this.lightness;
				int hueVariation = this.hueVariation;
				int rgb = stream.get24BitInt();
				RGBToHSL(rgb);
				this.hue = hue;
				this.saturation = saturation;
				this.lightness = lightness;
				this.hueVariation = hueVariation;
				hueDivider = hueVariation;
			} else {
				System.out.println(&quot;Error unrecognised config code: &quot;
						+ configCode);
			}
		} while (true);
	}

	private void RGBToHSL(int rgb) {
		double red = (double) (rgb &gt;&gt; 16 &amp; 0xff) / 256D;
		double green = (double) (rgb &gt;&gt; 8 &amp; 0xff) / 256D;
		double blue = (double) (rgb &amp; 0xff) / 256D;
		double minC = red;
		if (green &lt; minC)
			minC = green;
		if (blue &lt; minC)
			minC = blue;
		double maxC = red;
		if (green &gt; maxC)
			maxC = green;
		if (blue &gt; maxC)
			maxC = blue;
		double h = 0.0D;
		double s = 0.0D;
		double l = (minC + maxC) / 2D;
		if (minC != maxC) {
			if (l &lt; 0.5D)
				s = (maxC - minC) / (maxC + minC);
			if (l &gt;= 0.5D)
				s = (maxC - minC) / (2D - maxC - minC);
			if (red == maxC)
				h = (green - blue) / (maxC - minC);
			else if (green == maxC)
				h = 2D + (blue - red) / (maxC - minC);
			else if (blue == maxC)
				h = 4D + (red - green) / (maxC - minC);
		}
		h /= 6D;
		hue = (int) (h * 256D);
		saturation = (int) (s * 256D);
		lightness = (int) (l * 256D);
		if (saturation &lt; 0)
			saturation = 0;
		else if (saturation &gt; 255)
			saturation = 255;
		if (lightness &lt; 0)
			lightness = 0;
		else if (lightness &gt; 255)
			lightness = 255;
		if (l &gt; 0.5D)
			hueDivider = (int) ((1.0D - l) * s * 512D);
		else
			hueDivider = (int) (l * s * 512D);
		if (hueDivider &lt; 1)
			hueDivider = 1;
		hueVariation = (int) (h * (double) hueDivider);
		int randomHue = (hue + (int) (Math.random() * 16D)) - 8;
		if (randomHue &lt; 0)
			randomHue = 0;
		else if (randomHue &gt; 255)
			randomHue = 255;
		int randomSaturation = (saturation + (int) (Math.random() * 48D)) - 24;
		if (randomSaturation &lt; 0)
			randomSaturation = 0;
		else if (randomSaturation &gt; 255)
			randomSaturation = 255;
		int randomLightness = (lightness + (int) (Math.random() * 48D)) - 24;
		if (randomLightness &lt; 0)
			randomLightness = 0;
		else if (randomLightness &gt; 255)
			randomLightness = 255;
		hsl = packHSL(randomHue, randomSaturation, randomLightness);
	}

	private int packHSL(int h, int s, int l) {
		if (l &gt; 179)
			s /= 2;
		if (l &gt; 192)
			s /= 2;
		if (l &gt; 217)
			s /= 2;
		if (l &gt; 243)
			s /= 2;
		return (h / 4 &lt;&lt; 10) + (s / 32 &lt;&lt; 7) + l / 2;
	}

	private FloorDefinition() {
		textureId = -1;
		occlude = true;
	}

	public static FloorDefinition floorCache[];
	public int terrainColour;
	public int textureId;
	public boolean occlude;
	public int hue;
	public int saturation;
	public int lightness;
	public int hueVariation;
	public int hueDivider;
	public int hsl;
	public String name;
}[/code]

As you can see, the classes as a whole stay the same - the loading is kept uniform for the most part, except for a new attribute is added by 317 which appears to reload the colours although I&#39;m not sure exactly.

In the [i]RGBToHSL[/i] method, we see a new part added by 317 - the colour randomisation. This can be seen in most modern servers where the colours on the minimap and on the ground change slightly, presumably as a defence against colour clicking bots.</description>
    
    <lastBuildDate>Thu, 06 Nov 2014 23:25:48 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="10" data-topic="547620">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/davidi2/40/2579_1.png" class="avatar"> Davidi2:</div>
<blockquote>
<p>You’re misinterpreting what arbitrary means in this case – it is not an exclusive defining trait of a hash. The code I gave you is a valid hash of fixed input length, but it is still a hash that can be used like any other hash in java. Arbitrary input length means you can define anything you like as the input, whether that be a fixed input or a variable one. To put it in perspective, you could also define a fixed length input and output that DOES have data loss (for example a string hashing algorithm that requires exactly 13 characters or something). The two are not mutually exclusive.</p>
</blockquote>
</aside>
<p>I concede. My gripe is that a hash <span class="bbcode-i">usually</span> implies that it is just a unique identifier for data rather than the data itself and as such to prevent confusion we should refer to the word packing seen here as simply an encoding.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/11</link>
        <pubDate>Thu, 06 Nov 2014 23:25:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-11</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>You’re misinterpreting what arbitrary means in this case – it is not an exclusive defining trait of a hash. The code I gave you is a valid hash of fixed input length, but it is still a hash that can be used like any other hash in java. Arbitrary input length means you can define anything you like as the input, whether that be a fixed input or a variable one. To put it in perspective, you could also define a fixed length input and output that DOES have data loss (for example a string hashing algorithm that requires exactly 13 characters or something). The two are not mutually exclusive.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/10</link>
        <pubDate>Thu, 06 Nov 2014 21:58:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-10</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“AtomicInt_, post:7, topic:547620”][quote author=t4 link=topic=666528.msg4456661#msg4456661 date=1415306268]</p>
<aside class="quote">
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding. If the sum of the words used in 194 equals the packed word in 317 then it doesn’t save any bandwidth.<br>
[/quote]</p>
<p>If that is the case then what is the purpose of packing the data?[/quote]<br>
Less system calls technically, less code statements. Bitwise operations are cheap.</p>
<p>[quote=“Davidi2, post:8, topic:547620”][quote author=Pure_ link=topic=666528.msg4456669#msg4456669 date=1415307132]</p>
<p>[quote author=t4 link=topic=666528.msg4456667#msg4456667 date=1415306885]</p>
<p>[quote author=Davidi2 link=topic=666528.msg4456665#msg4456665 date=1415306611]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding.<br>
[/quote]It can be a hash. There are many different types of hashes, and they don’t all mean you lose the data values.</p>
</blockquote>
</aside>
<p>I’ve always understood hashing as a function that takes arbitrary length input and produces fixed length output with best case 1:1 mapping.<br>
[/quote]Yes you’re correct t4.<br>
[/quote]Yes, this is correct, but it doesn’t always mean there is data loss. IE, you cant say “this has no data loss” as a reason to say something doesn’t count as a hash.</p>
<pre><code class="lang-auto">class PackedInt {

  private short word1;
  private short word2;

  @Override
  public int hashCode() {
    return word2 &lt;&lt; 16 | word1;
  }
}</code></pre>
<p>Valid, no data loss.[/quote]<br>
Data loss does not mean hash code, rather a hashing function by definition should contain data loss under certain circumstances given the fact an arbitrary input data length must be accepted.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/9</link>
        <pubDate>Thu, 06 Nov 2014 21:53:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-9</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“Pure_, post:6, topic:547620”][quote author=t4 link=topic=666528.msg4456667#msg4456667 date=1415306885]</p>
<p>[quote author=Davidi2 link=topic=666528.msg4456665#msg4456665 date=1415306611]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding.<br>
[/quote]It can be a hash. There are many different types of hashes, and they don’t all mean you lose the data values.</p>
</blockquote>
</aside>
<p>I’ve always understood hashing as a function that takes arbitrary length input and produces fixed length output with best case 1:1 mapping.<br>
[/quote]Yes you’re correct t4.[/quote]Yes, this is correct, but it doesn’t always mean there is data loss. IE, you cant say “this has no data loss” as a reason to say something doesn’t count as a hash.</p>
<pre><code class="lang-auto">class PackedInt {

  private short word1;
  private short word2;

  @Override
  public int hashCode() {
    return word2 &lt;&lt; 16 | word1;
  }
}</code></pre>
<p>Valid, no data loss.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/8</link>
        <pubDate>Thu, 06 Nov 2014 21:31:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-8</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:3, topic:547620”][quote author=AtomicInt_ link=topic=666528.msg4456548#msg4456548 date=1415240235]<br>
They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.<br>
[/quote]<br>
Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding. If the sum of the words used in 194 equals the packed word in 317 then it doesn’t save any bandwidth.[/quote]</p>
<p>If that is the case then what is the purpose of packing the data?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/7</link>
        <pubDate>Thu, 06 Nov 2014 20:55:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-7</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@pure2ownage Pure_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pure2ownage">@pure2ownage</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:5, topic:547620”][quote author=Davidi2 link=topic=666528.msg4456665#msg4456665 date=1415306611]</p>
<aside class="quote">
<blockquote>
<aside class="quote">
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding.<br>
[/quote]It can be a hash. There are many different types of hashes, and they don’t all mean you lose the data values.</p>
</blockquote>
</aside>
<p>I’ve always understood hashing as a function that takes arbitrary length input and produces fixed length output with best case 1:1 mapping.[/quote]Yes you’re correct t4.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/6</link>
        <pubDate>Thu, 06 Nov 2014 20:52:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-6</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <p>[quote=“Davidi2, post:4, topic:547620”][quote author=t4 link=topic=666528.msg4456661#msg4456661 date=1415306268]</p>
<aside class="quote">
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding.<br>
[/quote]It can be a hash. There are many different types of hashes, and they don’t all mean you lose the data values.[/quote]<br>
I’ve always understood hashing as a function that takes arbitrary length input and produces fixed length output with best case 1:1 mapping.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/5</link>
        <pubDate>Thu, 06 Nov 2014 20:48:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-5</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@davidi2 Davidi2]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/davidi2">@davidi2</a> wrote:</p>
          <blockquote>
              <p>[quote=“t4, post:3, topic:547620”][quote author=AtomicInt_ link=topic=666528.msg4456548#msg4456548 date=1415240235]<br>
They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.<br>
[/quote]<br>
Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding.[/quote]It can be a hash. There are many different types of hashes, and they don’t all mean you lose the data values.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/4</link>
        <pubDate>Thu, 06 Nov 2014 20:43:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-4</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@T41 t4]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/t41">@T41</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="2" data-topic="547620">
<div class="title">
<div class="quote-controls"></div>
 AtomicInt_:</div>
<blockquote>
<p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
</blockquote>
</aside>
<p>Packing values into a larger size word is not a hash (there is no data loss), it’s more of an encoding. If the sum of the words used in 194 equals the packed word in 317 then it doesn’t save any bandwidth.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/3</link>
        <pubDate>Thu, 06 Nov 2014 20:37:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-3</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>They’re the same minus the color-bot randomization in the 317 and that they tried to save on bandwidth (assumption? maybe they just liked hashcodes…) by packing hue, saturation and lightness values into a single int, hehe.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/2</link>
        <pubDate>Thu, 06 Nov 2014 02:17:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-2</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
      <item>
        <title>[194 and 317 compared] Refactored FloorDefinition class</title>
        <dc:creator><![CDATA[@Ambokile Ambokile]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ambokile">@Ambokile</a> wrote:</p>
          <blockquote>
              <p>Here’s a comparison of the 317 and 194 FloorDefinition class so we can see the changes that occurred during that time.</p>
<p>[size=18pt]194[/size]</p>
<p>[code=Java]public class FloorDefinition {<br>
public static int floorCount;<br>
public static FloorDefinition[] floorCache;<br>
public int terrainColour;<br>
public int textureId = -1;<br>
public boolean occlude = true;<br>
public String name;<br>
public int hue;<br>
public int saturation;<br>
public int lightness;<br>
public int hueVariation;<br>
public int hueDivider;</p>
<pre><code>public static void load(Archive archive) {
	Stream stream = new Stream(archive.getFile(null, "flo.dat"));
	floorCount = stream.getUnsignedLEShort();
	if (floorCache == null)
		floorCache = new FloorDefinition[floorCount];
	for (int f = 0; f &lt; floorCount; f++) {
		if (floorCache[f] == null)
			floorCache[f] = new FloorDefinition();
		floorCache[f].readValues(stream);
	}
}

public void readValues(Stream stream) {
	for (;;) {
		int configCode = stream.getUnsignedByte();
		if (configCode == 0)
			break;
		if (configCode == 1) {
			terrainColour = stream.get24BitInt();
			RGBToHSL(terrainColour);
		} else if (configCode == 2)
			textureId = stream.getUnsignedByte();
		else if (configCode == 5)
			occlude = false;
		else if (configCode == 6)
			name = stream.getString();
		else
			System.out.println("Error unrecognised config code: " + configCode);
	}
}

private void RGBToHSL(int rgb) {
	double r = (double) (rgb &gt;&gt; 16 &amp; 0xff) / 256.0;
	double g = (double) (rgb &gt;&gt; 8 &amp; 0xff) / 256.0;
	double b = (double) (rgb &amp; 0xff) / 256.0;
	double minC = r;
	if (g &lt; minC)
		minC = g;
	if (b &lt; minC)
		minC = b;
	double maxC = r;
	if (g &gt; maxC)
		maxC = g;
	if (b &gt; maxC)
		maxC = b;
	double h = 0.0;
	double s = 0.0;
	double l = (minC + maxC) / 2.0;
	if (minC != maxC) {
		if (l &lt; 0.5)
			s = (maxC - minC) / (maxC + minC);
		if (l &gt;= 0.5)
			s = (maxC - minC) / (2.0 - maxC - minC);
		if (r == maxC)
			h = (g - b) / (maxC - minC);
		else if (g == maxC)
			h = 2.0 + (b - r) / (maxC - minC);
		else if (b == maxC)
			h = 4.0 + (r - g) / (maxC - minC);
	}
	h /= 6.0;
	hue = (int) (h * 256.0);
	saturation = (int) (s * 256.0);
	lightness = (int) (l * 256.0);
	if (saturation &lt; 0)
		saturation = 0;
	else if (saturation &gt; 255)
		saturation = 255;
	if (lightness &lt; 0)
		lightness = 0;
	else if (lightness &gt; 255)
		lightness = 255;
	if (l &gt; 0.5)
		hueDivider = (int) ((1.0 - l) * s * 512.0);
	else
		hueDivider = (int) (l * s * 512.0);
	if (hueDivider &lt; 1)
		hueDivider = 1;
	hueVariation = (int) (h * (double) hueDivider);
}
</code></pre>
<p>}[/code]</p>
<p>[size=18pt]317[/size]</p>
<p>[code=Java]package com.jagex.runescape;</p>
<p>public final class FloorDefinition {</p>
<pre><code>public static void load(Archive archive) {
	Stream stream = new Stream(archive.getFile("flo.dat"));
	int floorCount = stream.getUnsignedLEShort();
	if (floorCache == null)
		floorCache = new FloorDefinition[floorCount];
	for (int f = 0; f &lt; floorCount; f++) {
		if (floorCache[f] == null)
			floorCache[f] = new FloorDefinition();
		floorCache[f].readValues(stream);
	}
}

private void readValues(Stream stream) {
	do {
		int configCode = stream.getUnsignedByte();
		if (configCode == 0)
			return;
		else if (configCode == 1) {
			terrainColour = stream.get24BitInt();
			RGBToHSL(terrainColour);
		} else if (configCode == 2)
			textureId = stream.getUnsignedByte();
		else if (configCode == 5)
			occlude = false;
		else if (configCode == 6)
			name = stream.getString();
		else if (configCode == 7) {
			int hue = this.hue;
			int saturation = this.saturation;
			int lightness = this.lightness;
			int hueVariation = this.hueVariation;
			int rgb = stream.get24BitInt();
			RGBToHSL(rgb);
			this.hue = hue;
			this.saturation = saturation;
			this.lightness = lightness;
			this.hueVariation = hueVariation;
			hueDivider = hueVariation;
		} else {
			System.out.println("Error unrecognised config code: "
					+ configCode);
		}
	} while (true);
}

private void RGBToHSL(int rgb) {
	double red = (double) (rgb &gt;&gt; 16 &amp; 0xff) / 256D;
	double green = (double) (rgb &gt;&gt; 8 &amp; 0xff) / 256D;
	double blue = (double) (rgb &amp; 0xff) / 256D;
	double minC = red;
	if (green &lt; minC)
		minC = green;
	if (blue &lt; minC)
		minC = blue;
	double maxC = red;
	if (green &gt; maxC)
		maxC = green;
	if (blue &gt; maxC)
		maxC = blue;
	double h = 0.0D;
	double s = 0.0D;
	double l = (minC + maxC) / 2D;
	if (minC != maxC) {
		if (l &lt; 0.5D)
			s = (maxC - minC) / (maxC + minC);
		if (l &gt;= 0.5D)
			s = (maxC - minC) / (2D - maxC - minC);
		if (red == maxC)
			h = (green - blue) / (maxC - minC);
		else if (green == maxC)
			h = 2D + (blue - red) / (maxC - minC);
		else if (blue == maxC)
			h = 4D + (red - green) / (maxC - minC);
	}
	h /= 6D;
	hue = (int) (h * 256D);
	saturation = (int) (s * 256D);
	lightness = (int) (l * 256D);
	if (saturation &lt; 0)
		saturation = 0;
	else if (saturation &gt; 255)
		saturation = 255;
	if (lightness &lt; 0)
		lightness = 0;
	else if (lightness &gt; 255)
		lightness = 255;
	if (l &gt; 0.5D)
		hueDivider = (int) ((1.0D - l) * s * 512D);
	else
		hueDivider = (int) (l * s * 512D);
	if (hueDivider &lt; 1)
		hueDivider = 1;
	hueVariation = (int) (h * (double) hueDivider);
	int randomHue = (hue + (int) (Math.random() * 16D)) - 8;
	if (randomHue &lt; 0)
		randomHue = 0;
	else if (randomHue &gt; 255)
		randomHue = 255;
	int randomSaturation = (saturation + (int) (Math.random() * 48D)) - 24;
	if (randomSaturation &lt; 0)
		randomSaturation = 0;
	else if (randomSaturation &gt; 255)
		randomSaturation = 255;
	int randomLightness = (lightness + (int) (Math.random() * 48D)) - 24;
	if (randomLightness &lt; 0)
		randomLightness = 0;
	else if (randomLightness &gt; 255)
		randomLightness = 255;
	hsl = packHSL(randomHue, randomSaturation, randomLightness);
}

private int packHSL(int h, int s, int l) {
	if (l &gt; 179)
		s /= 2;
	if (l &gt; 192)
		s /= 2;
	if (l &gt; 217)
		s /= 2;
	if (l &gt; 243)
		s /= 2;
	return (h / 4 &lt;&lt; 10) + (s / 32 &lt;&lt; 7) + l / 2;
}

private FloorDefinition() {
	textureId = -1;
	occlude = true;
}

public static FloorDefinition floorCache[];
public int terrainColour;
public int textureId;
public boolean occlude;
public int hue;
public int saturation;
public int lightness;
public int hueVariation;
public int hueDivider;
public int hsl;
public String name;
</code></pre>
<p>}[/code]</p>
<p>As you can see, the classes as a whole stay the same - the loading is kept uniform for the most part, except for a new attribute is added by 317 which appears to reload the colours although I’m not sure exactly.</p>
<p>In the <span class="bbcode-i">RGBToHSL</span> method, we see a new part added by 317 - the colour randomisation. This can be seen in most modern servers where the colours on the minimap and on the ground change slightly, presumably as a defence against colour clicking bots.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620/1</link>
        <pubDate>Tue, 04 Nov 2014 14:34:24 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547620-1</guid>
        <source url="https://forum.moparisthebest.com/t/194-and-317-compared-refactored-floordefinition-class/547620.rss">[194 and 317 compared] Refactored FloorDefinition class</source>
      </item>
  </channel>
</rss>
