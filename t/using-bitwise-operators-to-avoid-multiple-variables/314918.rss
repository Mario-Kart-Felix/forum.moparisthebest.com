<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Using Bitwise Operators to Avoid Multiple Variables</title>
    <link>https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918</link>
    <description>Alright, so this tutorial is going to teach you how to use the ^ (Exclusive OR [XOR]), | (Bitwise Logical OR), and &amp; (Logical AND) operators. [s]Rather than explaining what each operator really does which will probably confuse the fuck out of you and go further than we need to, I&#39;ll just tell you what we use them for [b]in simple terms[/b].[/s] Scroll down to the bottom to see what each one really does.

[b]|[/b] - We&#39;ll be using this to set a flag to true (Basically, set one part of the variable to true)
[b]&amp;[/b] - This is basically for checking if a flag was set
[b]^[/b] - It&#39;s the same as |, but it reverses the operation and would set the flag to false

OK. So, you&#39;re probably wondering how this helps you. Let&#39;s say you have 3 things to check, so you declare 3 properties and set them all to false.
[code]boolean bool1 = false;
boolean bool2 = false;
boolean bool3 = false;[/code]That could get annoying after a while. Instead, we&#39;d be doing something like this.
[code]int single = 0; //Set all 3 properties to false[/code]

Now, let&#39;s say you wanted to set bool1 to [b]true[/b]. You&#39;d simple just do this operation.
[code]single |= 1; //Set bool1 to true[/code]
If you wanted to set it to false, you&#39;d just replace that | with the ^ operator, like this.
[code]single ^= 1; //Set bool1 to false[/code]

So now that we have the setting done, how do we check it? Simple! We just reverse it! If we wanted to check if [i]bool1[/i] was set to true, we&#39;d do something like this.
[code]if ((single &amp; 1) != 0) { //Checking if we&#39;ve set the bool1 flag[/code]

Now, this part is [b]very important[/b]. For every property you want to have, you must [b]double[/b] the last value to used in the operation. So it&#39;d go something like this.
[code]single |= 1; //Set bool1 to true
single |= 2; //Set bool2 to true
single ^= 4; //Set bool3 to false
single |= 8; //Again, just continue[/code]

Some of you might use this, others won&#39;t. The truth is, it doesn&#39;t matter what you&#39;re doing. It&#39;s very good for checking several things (Like player updating), or transmitting properties over the internet (Again, like player updating).


[u][b]What each operator does (Bit Twiddling)[/b][/u]
[b]| (OR)[/b]
This operator lines up the number&#39;s bits vertically, and if both of the values being checked aren&#39;t 0, it replaces the new bit with a 1.
[code]55 | 42 =
00110111 | 00101010 = 00111111 = 63[/code]
[b]&amp; (AND)[/b]
This operator is much like the OR operator, except it only inserts a 1 if the corresponding bits are both 1.
[code]55 &amp; 42 =
00110111 &amp; 00101010 = 00100010 = 34[/code]
[b]^ (XOR)[/b]
Finally, this operator is pretty much the exact opposite of the above operators. Instead of inserting a 1 if they do match, it only inserts a 1 when the bits don&#39;t.
[code]55 ^ 42 =
00110111 ^ 00101010 = 00011101 = 29[/code]

That&#39;s all,

~Lin</description>
    
    <lastBuildDate>Thu, 19 Nov 2009 01:29:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Using Bitwise Operators to Avoid Multiple Variables</title>
        <dc:creator><![CDATA[@Skype1 Skype™]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/skype1">@Skype1</a> wrote:</p>
          <blockquote>
              <p>Good tutorial; however I find the old way more easier. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/4</link>
        <pubDate>Thu, 19 Nov 2009 01:29:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-314918-4</guid>
        <source url="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918.rss">Using Bitwise Operators to Avoid Multiple Variables</source>
      </item>
      <item>
        <title>Using Bitwise Operators to Avoid Multiple Variables</title>
        <dc:creator><![CDATA[@Scape-JAVA Scape-JAVA]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/scape-java">@Scape-JAVA</a> wrote:</p>
          <blockquote>
              <p>Good Job on this Lin.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/3</link>
        <pubDate>Thu, 19 Nov 2009 01:18:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-314918-3</guid>
        <source url="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918.rss">Using Bitwise Operators to Avoid Multiple Variables</source>
      </item>
      <item>
        <title>Using Bitwise Operators to Avoid Multiple Variables</title>
        <dc:creator><![CDATA[@JaydenD12 JaydenD12]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/jaydend12">@JaydenD12</a> wrote:</p>
          <blockquote>
              <p>Great tutorial Lin =)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/2</link>
        <pubDate>Thu, 19 Nov 2009 00:58:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-314918-2</guid>
        <source url="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918.rss">Using Bitwise Operators to Avoid Multiple Variables</source>
      </item>
      <item>
        <title>Using Bitwise Operators to Avoid Multiple Variables</title>
        <dc:creator><![CDATA[@Lin Lin]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lin">@Lin</a> wrote:</p>
          <blockquote>
              <p>Alright, so this tutorial is going to teach you how to use the ^ (Exclusive OR [XOR]), | (Bitwise Logical OR), and &amp; (Logical AND) operators. <span class="bbcode-s">Rather than explaining what each operator really does which will probably confuse the fuck out of you and go further than we need to, I’ll just tell you what we use them for <span class="bbcode-b">in simple terms</span>.</span> Scroll down to the bottom to see what each one really does.</p>
<p><span class="bbcode-b">|</span> - We’ll be using this to set a flag to true (Basically, set one part of the variable to true)<br>
<span class="bbcode-b">&amp;</span> - This is basically for checking if a flag was set<br>
<span class="bbcode-b">^</span> - It’s the same as |, but it reverses the operation and would set the flag to false</p>
<p>OK. So, you’re probably wondering how this helps you. Let’s say you have 3 things to check, so you declare 3 properties and set them all to false.</p>
<p><code>boolean bool1 = false;
boolean bool2 = false;
boolean bool3 = false;</code>That could get annoying after a while. Instead, we’d be doing something like this.</p>
<pre><code class="lang-auto">int single = 0; //Set all 3 properties to false</code></pre>
<p>Now, let’s say you wanted to set bool1 to <span class="bbcode-b">true</span>. You’d simple just do this operation.</p>
<pre><code class="lang-auto">single |= 1; //Set bool1 to true</code></pre>
<p>If you wanted to set it to false, you’d just replace that | with the ^ operator, like this.</p>
<pre><code class="lang-auto">single ^= 1; //Set bool1 to false</code></pre>
<p>So now that we have the setting done, how do we check it? Simple! We just reverse it! If we wanted to check if <span class="bbcode-i">bool1</span> was set to true, we’d do something like this.</p>
<pre><code class="lang-auto">if ((single &amp; 1) != 0) { //Checking if we've set the bool1 flag</code></pre>
<p>Now, this part is <span class="bbcode-b">very important</span>. For every property you want to have, you must <span class="bbcode-b">double</span> the last value to used in the operation. So it’d go something like this.</p>
<p><code>single |= 1; //Set bool1 to true
single |= 2; //Set bool2 to true
single ^= 4; //Set bool3 to false
single |= 8; //Again, just continue</code></p>
<p>Some of you might use this, others won’t. The truth is, it doesn’t matter what you’re doing. It’s very good for checking several things (Like player updating), or transmitting properties over the internet (Again, like player updating).</p>
<p><span class="bbcode-u"><span class="bbcode-b">What each operator does (Bit Twiddling)</span></span><br>
<span class="bbcode-b">| (OR)</span><br>
This operator lines up the number’s bits vertically, and if both of the values being checked aren’t 0, it replaces the new bit with a 1.</p>
<p><code>55 | 42 =
00110111 | 00101010 = 00111111 = 63</code><br>
<span class="bbcode-b">&amp; (AND)</span><br>
This operator is much like the OR operator, except it only inserts a 1 if the corresponding bits are both 1.</p>
<p><code>55 &amp; 42 =
00110111 &amp; 00101010 = 00100010 = 34</code><br>
<span class="bbcode-b">^ (XOR)</span><br>
Finally, this operator is pretty much the exact opposite of the above operators. Instead of inserting a 1 if they do match, it only inserts a 1 when the bits don’t.</p>
<p><code>55 ^ 42 =
00110111 ^ 00101010 = 00011101 = 29</code></p>
<p>That’s all,</p>
<p>~Lin</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918/1</link>
        <pubDate>Thu, 19 Nov 2009 00:14:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-314918-1</guid>
        <source url="https://forum.moparisthebest.com/t/using-bitwise-operators-to-avoid-multiple-variables/314918.rss">Using Bitwise Operators to Avoid Multiple Variables</source>
      </item>
  </channel>
</rss>
