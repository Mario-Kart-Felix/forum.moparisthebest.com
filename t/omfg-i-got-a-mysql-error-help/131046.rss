<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>OMFG! I Got a MySQL Error HELP!</title>
    <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046</link>
    <description>Help!!!

I Cant get MySQL to work!
I Get this compiler error, which says &quot;unclosed string literal&quot; and it leads me to this code...

[code]println(&quot;Place=&quot;+rs.getString(1)+&quot; X=&quot;+rs.getInt(2)+&quot; Y=&quot;+rs.getInt(3)+&quot; HeightLevel=&quot;+rs.getInt(4)+&quot;;[/code]
This is the entire mysqlHandler...

[code]import java.io.*;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.ResultSet;
import java.sql.Driver;

public class SqlHandler extends misc {

	public static String MySQL = &quot;jdbc:mysql://localhost/projectnoobscape&quot;;
	public static String MySQLUser = &quot;root&quot;;
	public static String MySQLPass = &quot;&quot;;
	public static Connection myConnection = null;
	
	public static int spawnCount = 0;
	public static int sPointBoundary[] = new int[2000];
	public static int sPointX[] = new int[2000];
	public static int sPointY[] = new int[2000];
	public static int sPointHeightLevel[] = new int[2000];
	public static int sPointNpcID[] = new int[2000];
	public static int sPointSpawnTime[] = new int[2000];
	public static boolean sPointStatic[] = new boolean[2000];

	public static int gotoCount = 0;
	public static String gotoPlaces[] = new String[500];
	public static int gotoPlacesX[] = new int[500];
	public static int gotoPlacesY[] = new int[500];
	public static int gotoPlacesHeightLevel[] = new int[500];
	public static int gotoPlacesCount;

	public static String objectAction;
	public static int objectActionTimer;
	public static int objectActionX;
	public static int objectActionY;
	public static boolean objectResult;

	public static String bannedIPS[] = new String[500];
	
	public static String itemName;
	public static int itemID;
	public static String itemDesc;
	public static int shopValue;
	
	public static int npcTalkTo;

	public static int chatNPCID;
	public static int chatID;
	public static int chatType;
	public static String chatQuestion;
	public static String chatText1;
	public static String chatText2;
	public static String chatText3;
	public static String chatText4;
	public static int chatNext1;
	public static int chatNext2;
	public static int chatNext3;
	public static int chatNext4;
	public static String chatAction1;
	public static String chatAction2;
	public static String chatAction3;
	public static String chatAction4;

	public static int stealNPCID;
	public static int stealReqLevel;
	public static int maxLoot;
	public static String itemLootID;
	public static String itemLootAmount;
	public static int stealExpLoot;
	public static int stealStunDamage;
	public static int stealLootType;

	public static String staticDropID;
	public static String staticDropAmount;
	public static String randDropID;
	public static String randDropAmount;
	public static String questDropID;
	public static String questDrop;
	public static String questDropAmount;
	public static int npcKillXP;

	public static int foodStatID;
	public static int foodStatHeal;
	public static int foodStatNext;

	public static int atItemID;
	public static int atItemInt1;
	public static int atItemInt2;
	public static int atItemInt3;
	public static String atItemActionName;
	public static int atItemAnimation;
	public static int atItemAnimationTimer;

	public static String npcName;
	public static String npcDesc;
	public static String npcAction;
	public static int npcCombat;

	public static String npcActionType;
	public static String itemActionType;

	public static void createConnection(){
		try{
			Class.forName(&quot;com.mysql.jdbc.Driver&quot;).newInstance();
			myConnection = DriverManager.getConnection(MySQL, MySQLUser, MySQLPass);
		} catch (Exception e) {
		}
	}

	public static void destroyConnection(){
		try{
			if(myConnection != null) myConnection.close();
		} catch (Exception e) {
		}
	}

	public static void executeQuery(String qUery) {
	 try{
		  	Statement stmt = myConnection.createStatement();
			stmt.executeUpdate(qUery);
			stmt.close();
		} catch (Exception e) {	}	
	}

	public static int getSpawnPoints() {
	 try {
		String query = &quot;SELECT * FROM spawnpoints&quot;;
		  	Statement stmt = myConnection.createStatement();
			    ResultSet rs = stmt.executeQuery(query);
				while (rs.next()) {
					spawnCount = rs.getRow();
					misc.printlnTag(spawnCount+&quot; X=&quot;+rs.getInt(1)+&quot; Y=&quot;+rs.getInt(2)+&quot; HeightLevel=&quot;+rs.getInt(3)+&quot; NpcID=&quot;+rs.getInt(4)+&quot; SpawnTime=&quot;+rs.getInt(5)+&quot; Static=&quot;+rs.getString(6));
						sPointX[spawnCount] = rs.getInt(1);
						sPointY[spawnCount] = rs.getInt(2);
						sPointHeightLevel[spawnCount] = rs.getInt(3);
						sPointNpcID[spawnCount] = rs.getInt(4);
						sPointSpawnTime[spawnCount] = rs.getInt(5);
						sPointBoundary[spawnCount] = rs.getInt(7);
						if(rs.getString(6).equalsIgnoreCase(&quot;n&quot;))
							sPointStatic[spawnCount] = false;
						else
							sPointStatic[spawnCount] = true;
				}
				stmt.close();
				return spawnCount;
			 } catch (Exception e) { }	
		return spawnCount;
	}

	public static boolean getChat(int ID) {
	chatQuestion = &quot;&quot;;
	chatNPCID = 0;	chatID = 0;	chatType = 0;
	chatText1 = &quot;&quot;;	chatText2 = &quot;&quot;;	chatText3 = &quot;&quot;;	chatText4 = &quot;&quot;;
	chatNext1 = 0;	chatNext2 = 0;	chatNext3 = 0;	chatNext4 = 0;
	chatAction1 = &quot;&quot;;	chatAction2 = &quot;&quot;;	chatAction3 = &quot;&quot;;	chatAction4 = &quot;&quot;;
	 try {
		  	Statement stmt = myConnection.createStatement();
			String query = &quot;SELECT * FROM chatnpc WHERE id=&quot;+ID+&quot;;&quot;;
			ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				chatID = rs.getInt(&quot;chatID&quot;);
				chatNPCID = rs.getInt(&quot;chatNPCID&quot;);
				chatType = rs.getInt(&quot;chatType&quot;);
				chatQuestion = rs.getString(&quot;chatQuestion&quot;);
				chatText1 = rs.getString(&quot;chatText1&quot;);
				chatText2 = rs.getString(&quot;chatText2&quot;);
				chatText3 = rs.getString(&quot;chatText3&quot;);
				chatText4 = rs.getString(&quot;chatText4&quot;);
				chatNext1 = rs.getInt(&quot;chatNext1&quot;);
				chatNext2 = rs.getInt(&quot;chatNext2&quot;);
				chatNext3 = rs.getInt(&quot;chatNext3&quot;);
				chatNext4 = rs.getInt(&quot;chatNext4&quot;);
				chatAction1 = rs.getString(&quot;chatAction1&quot;);
				chatAction2 = rs.getString(&quot;chatAction2&quot;);
				chatAction3 = rs.getString(&quot;chatAction3&quot;);
				chatAction4 = rs.getString(&quot;chatAction4&quot;);
			}
			stmt.close();
			 } catch (Exception e) { }
		return true;
	}

	public static int getGotoPlaces() {		
		 try {
		String query = &quot;SELECT * FROM gotopoints&quot;;
		  	Statement stmt = myConnection.createStatement();
			    ResultSet rs = stmt.executeQuery(query);
				while (rs.next()) {
					gotoCount = rs.getRow();
						gotoPlaces[gotoCount] = rs.getString(1);
						gotoPlacesX[gotoCount] = rs.getInt(2);
						gotoPlacesY[gotoCount] = rs.getInt(3);
						gotoPlacesHeightLevel[gotoCount] = rs.getInt(4);
						println(&quot;Place=&quot;+rs.getString(1)+&quot; X=&quot;+rs.getInt(2)+&quot; Y=&quot;+rs.getInt(3)+&quot; HeightLevel=&quot;+rs.getInt(4)+&quot;;
				}
				stmt.close();
				return gotoCount;
			 } catch (Exception e) { }
		return gotoCount;
	}

	public static void addGotoPlaces(String place, int placeX, int placeY, int heightLevel) {
		gotoPlaces[gotoPlacesCount] = place;
		gotoPlacesX[gotoPlacesCount] = placeX;
		gotoPlacesY[gotoPlacesCount] = placeY;
		gotoPlacesHeightLevel[gotoPlacesCount] = heightLevel;
		gotoPlacesCount += 1;
		saveGotoPlaces();
	}


	public static void saveGotoPlaces() {
	 try {
		 boolean continueSaving = true;
		  	Statement stmt = myConnection.createStatement();
			stmt.executeUpdate(&quot;DELETE FROM gotopoints WHERE 1&gt;0;&quot;);
			int saveCount = 0;
				while(continueSaving) {
					stmt.executeUpdate(&quot;INSERT INTO gotopoints VALUES(&#39;&quot;+gotoPlaces[saveCount]+&quot;&#39;,&quot;+gotoPlacesX[saveCount]+&quot;,&quot;+gotoPlacesY[saveCount]+&quot;,&quot;+gotoPlacesHeightLevel[saveCount]+&quot;);&quot;);
					saveCount += 1;
					if (saveCount == (gotoPlacesCount))
						continueSaving = false;
				}
			stmt.close();
		 } catch (Exception e) { }
	}

	public static boolean getNpcInfo(int npcID) {
		npcName = &quot;&quot;;
		npcDesc = &quot;&quot;;
		npcAction = &quot;&quot;;
		npcCombat = 0;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcdb WHERE id=&quot;+npcID+&quot;;&quot;);
			while (rs.next()) {
				npcName = rs.getString(&quot;name&quot;);
				npcDesc = rs.getString(&quot;description&quot;);
				npcAction = rs.getString(&quot;actions&quot;);
				npcCombat = rs.getInt(&quot;combat&quot;);
			}
			stmt.close();
	 } catch (Exception e) { return false; }
	if(npcName != &quot;&quot;) 
	 return true;
	else 
	 return false;
	}

	public static String getActions(int npcID) {
		npcActionType = &quot;&quot;;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcdb WHERE id=&quot;+npcID+&quot;;&quot;);
			while (rs.next()) {
				npcActionType = rs.getString(&quot;actions&quot;);
			}
			stmt.close();
	 } catch (Exception e) { }
		return npcActionType;
	}

	public static boolean getSteal(int npcID) {
		stealNPCID = -1;
		stealReqLevel = -1;
		maxLoot = -1;
		itemLootID = &quot;&quot;;
		itemLootAmount = &quot;&quot;;
		stealExpLoot = -1;
		stealStunDamage = -1;
		stealLootType = -1;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM skill_thieve_steal WHERE npcID=&quot;+npcID+&quot;;&quot;);
			while (rs.next()) {
				stealNPCID = rs.getInt(&quot;npcID&quot;);
				stealReqLevel = rs.getInt(&quot;reqLevel&quot;);
				maxLoot = rs.getInt(&quot;maxLoot&quot;);
				itemLootID = rs.getString(&quot;itemLootID&quot;);
				itemLootAmount = rs.getString(&quot;itemLootAmount&quot;);
				stealExpLoot = rs.getInt(&quot;expLoot&quot;);
				stealStunDamage = rs.getInt(&quot;stunDamage&quot;);
				stealLootType = rs.getInt(&quot;lootType&quot;);
			}
			stmt.close();
			 } catch (Exception e) { e.printStackTrace(); return false; }
		return true;
	}

	public static int getTalkTo(int npcID) {
		npcTalkTo = 0;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcaction WHERE npcID=&quot;+npcID+&quot;;&quot;);
			while (rs.next()) {
				npcTalkTo = rs.getInt(&quot;talkTo&quot;);
			}
			stmt.close();
			 } catch (Exception e) { }
		return npcTalkTo;
	}

	public static String getItemActions(int itemID) {
		itemActionType = &quot;&quot;;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM itemdb WHERE id=&quot;+itemID+&quot;;&quot;);
			while (rs.next()) {
				itemActionType = rs.getString(&quot;actions2&quot;);
			}
			stmt.close();
	 } catch (Exception e) { }
		return itemActionType;
	}

	public static Boolean getAtItem(int itemID) {
		atItemID = -1;
		atItemInt1 = -1;
		atItemInt2 = -1;
		atItemInt3 = -1;
		atItemActionName = &quot;&quot;;
		atItemAnimation = -1;
		atItemAnimationTimer = -1;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM misc_atitem WHERE itemID=&quot;+itemID+&quot;;&quot;);
			while (rs.next()) {
				atItemID = rs.getInt(&quot;itemID&quot;);
				atItemInt1 = rs.getInt(&quot;itemInt1&quot;);
				atItemInt2 = rs.getInt(&quot;itemInt2&quot;);
				atItemInt3 = rs.getInt(&quot;itemInt3&quot;);
				atItemActionName = rs.getString(&quot;actionName&quot;);
				atItemAnimation = rs.getInt(&quot;actionEmote&quot;);
				atItemAnimationTimer = rs.getInt(&quot;actionTimer&quot;);
			}
			stmt.close();
			 } catch (Exception e) { e.printStackTrace(); }
		return (atItemID != -1);
	}

	public static Boolean getFoodStats(int foodID) {
		foodStatID = -1;
		foodStatHeal = -1;
		foodStatNext = -1;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM misc_food WHERE foodID=&quot;+foodID+&quot;;&quot;);
			while (rs.next()) {
				foodStatID = rs.getInt(&quot;foodID&quot;);
				foodStatHeal = rs.getInt(&quot;foodHeal&quot;);
				foodStatNext = rs.getInt(&quot;foodNext&quot;);
			}
			stmt.close();
			 } catch (Exception e) { e.printStackTrace(); }
		return (foodStatID != -1);
	}

	public static Boolean getDropNPC(int npcID) {
		staticDropID = &quot;&quot;;
		staticDropAmount = &quot;&quot;;
		randDropID = &quot;&quot;;
		randDropAmount = &quot;&quot;;
		questDropID = &quot;&quot;;
		questDrop = &quot;&quot;;
		questDropAmount = &quot;&quot;;
		npcKillXP = 0;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcdeath WHERE npcID=&quot;+npcID+&quot;;&quot;);
			while (rs.next()) {
				staticDropID = rs.getString(&quot;staticDropsID&quot;);
				staticDropAmount = rs.getString(&quot;staticDropAmount&quot;);
				randDropID = rs.getString(&quot;randDropID&quot;);
				randDropAmount = rs.getString(&quot;randDropAmount&quot;);
				questDropID = &quot;&quot;;
				questDrop = &quot;&quot;;
				questDropAmount = &quot;&quot;;
				npcKillXP = rs.getInt(&quot;gainedXP&quot;);
			}
			stmt.close();
			 } catch (Exception e) { e.printStackTrace(); }
		return (foodStatID != -1);
	}

	public static void addTalkTo(int npcID, int chatID) {
		try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcaction WHERE npcID=&quot;+npcID+&quot;;&quot;);
			boolean Update = false;
			while (rs.next()) {
				Update = true;
			}
			stmt.close();
			if(!Update) {
				Statement statement = myConnection.createStatement();
				String query = &quot;INSERT INTO npcaction (npcID, talkTo) VALUES(&quot;+npcID+&quot;,&quot;+chatID+&quot;);&quot;;
				statement.executeUpdate(query);
			 } else {
				Statement statement = myConnection.createStatement();
				String query = &quot;UPDATE npcaction SET npcID=&quot;+npcID+&quot; AND talkTo=&quot;+chatID+&quot; WHERE npcID=&quot;+npcID+&quot;);&quot;;
				statement.executeUpdate(query);
			}
		} catch (Exception e) { }
	}

	public static String getItem(int ID) {
	 itemName = null;
	  try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM itemdb WHERE id=&quot;+ID+&quot;;&quot;);
			while (rs.next()) {
				itemName = rs.getString(2);
			}
			stmt.close();
		} catch (Exception e) { }
		return itemName;
	}

	public static int getItemID(String name) {
		itemID = 0;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM itemdb WHERE name=&#39;&quot;+name+&quot;&#39;;&quot;);
			while (rs.next()) {
				itemID = rs.getInt(&quot;id&quot;);
				itemDesc = rs.getString(&quot;description&quot;);
			}
			stmt.close();
		 } catch (Exception e) { }
		if(itemDesc.startsWith(&quot;Swap this note&quot;))
			return itemID-1;
		else
			return itemID;
	}

	public static int getItemFixID(int name) {
		itemID = 0;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM itemdb WHERE id=&#39;&quot;+name+&quot;&#39;;&quot;);
			while (rs.next()) {
				itemID = rs.getInt(&quot;id&quot;);
				itemDesc = rs.getString(&quot;description&quot;);
			}
			stmt.close();
			 } catch (Exception e) { }
		if(itemDesc.startsWith(&quot;Swap this note&quot;))
			return itemID-1;
		else
			return itemID;
	}

	public static String getNPCName(int ID) {
		npcName = &quot;&quot;;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM npcdb WHERE id=&quot;+ID+&quot;;&quot;);
			while (rs.next()) {
				npcName = rs.getString(&quot;name&quot;);
			}
			stmt.close();
		 } catch (Exception e) {	}	
		return npcName;
	}

	public static boolean addObjectState(int objectX, int objectY, int objectHeightLevel, int objectID, int objectDirection) {
		try {
			Statement statement = myConnection.createStatement();
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM objectstate WHERE objectX=&quot;+objectX+&quot; AND objectY=&quot;+objectY+&quot; AND objectHeightLevel=&quot;+objectHeightLevel+&quot;;&quot;);
			boolean Update = false;
			while (rs.next()) {
				Update = true;
			}
			stmt.close();
			if(!Update) {
				String query = &quot;INSERT INTO objectstate (objectX, objectY, objectDefaultID, objectCurrentID, objectHeightLevel, objectDirection) VALUES(&quot;+objectX+&quot;,&quot;+objectY+&quot;,&#39;&quot;+objectID+&quot;&#39;,0,&quot;+objectHeightLevel+&quot;,&#39;&quot;+objectDirection+&quot;&#39;)&quot;;
				statement.executeUpdate(query);
			} else {
				String query = &quot;UPDATE objectstate SET objectDefaultID=&quot;+objectID+&quot;, objectCurrentID=&quot;+objectID+&quot; WHERE objectX=&quot;+objectX+&quot; AND objectY=&quot;+objectY+&quot; AND objectHeightLevel=&quot;+objectHeightLevel+&quot;;&quot;;
				statement.executeUpdate(query);
			}
		} catch (Exception e) { e.printStackTrace(); return false; }
		return true;
	}

	public static int getShopValue(int ID) {
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM itemdb WHERE id=&quot;+ID+&quot;;&quot;);
			while (rs.next()) {
				shopValue = rs.getInt(6);
			}
			stmt.close();
			 } catch (Exception e) { }
		return shopValue;
	}

	public static String getCount(String DB) {
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM &quot;+DB+&quot;;&quot;);
			while (rs.next()) {
				itemName = rs.getString(2);
			}
			stmt.close();
			 } catch (Exception e) { }
		return itemName;
	}

	public static boolean getObject(int ID, int objectID, int objectX, int objectY, int objectHeightLevel) {
		objectResult = false;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM objectdb WHERE objectID=&quot;+objectID+&quot; AND objectX=&quot;+objectX+&quot; AND objectY=&quot;+objectY+&quot; AND objectHeightLevel=&quot;+objectHeightLevel+&quot;;&quot;);
			while (rs.next()) {
				objectAction = rs.getString(&quot;actionName&quot;+ID);
				objectActionTimer = rs.getInt(&quot;actionTimer&quot;+ID);
				objectActionX = rs.getInt(&quot;objectX&quot;);
				objectActionY = rs.getInt(&quot;objectY&quot;);
				objectResult = true;
			}
			stmt.close();
			 } catch (Exception e) { }
		return objectResult;
	}

	public static boolean addObject(int ID, int objectID, int objectX, int objectY, int objectHeightLevel, String actionName, int actionTimer) {
		try {
			Statement statement = myConnection.createStatement();
		  	Statement stmt = myConnection.createStatement();

			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM objectdb WHERE objectID=&quot;+objectID+&quot; AND objectX=&quot;+objectX+&quot; AND objectY=&quot;+objectY+&quot; AND objectHeightLevel=&quot;+objectHeightLevel+&quot;;&quot;);
			boolean Update = false;
			while (rs.next()) {
				Update = true;
			}
			stmt.close();
			if(!Update) {
				String query = &quot;INSERT INTO objectdb (objectID, objectX, objectY, actionName&quot;+ID+&quot;, actionTimer&quot;+ID+&quot;,objectHeightLevel)VALUES(&quot;+objectID+&quot;,&quot;+objectX+&quot;,&quot;+objectY+&quot;,&#39;&quot;+actionName+&quot;&#39;,&quot;+actionTimer+&quot;,&quot;+objectHeightLevel+&quot;)&quot;;
				statement.executeUpdate(query);
					return true;
			} else {
				String query = &quot;UPDATE objectdb SET actionName&quot;+ID+&quot;=&#39;&quot;+actionName+&quot;&#39;, actionTimer&quot;+ID+&quot;=&quot;+actionTimer+&quot; WHERE objectID=&quot;+objectID+&quot; AND objectX=&quot;+objectX+&quot; AND objectY=&quot;+objectY+&quot; AND objectHeightLevel=&quot;+objectHeightLevel+&quot;;&quot;;
				statement.executeUpdate(query);
					return false;
			}
		} catch (Exception e) { return false; } // 1747
	}

	public static void addBan(String host) {
		try {
			Statement statement = myConnection.createStatement();
			String query = &quot;INSERT INTO banned VALUES(&#39;&quot;+host+&quot;&#39;);&quot;;
			statement.executeUpdate(query);
		} catch (Exception e) { }
	}

	public static void removeBan(String host) {
		try {
			Statement statement = myConnection.createStatement();
			String query = &quot;DELETE FROM banned WHERE host=&#39;&quot;+host+&quot;&#39;;&quot;;
			statement.executeUpdate(query);
		} catch (Exception e) { }
	}

	public static String listBans() {
		for(int x=1; x&lt;499; x++)
			bannedIPS[x] = null;
	 try {
		  	Statement stmt = myConnection.createStatement();
			ResultSet rs = stmt.executeQuery(&quot;SELECT * FROM banned;&quot;);
			while (rs.next()) {
				bannedIPS[rs.getRow()] = rs.getString(&quot;host&quot;);
			}
			stmt.close();
			 } catch (Exception e) { }
		return itemName;
	}

}[/code]</description>
    
    <lastBuildDate>Tue, 07 Aug 2007 21:24:43 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@Exodust Exodust]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exodust">@Exodust</a> wrote:</p>
          <blockquote>
              <p>If you dont know java, php, mysql than forget about it, your wasting your time…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/6</link>
        <pubDate>Tue, 07 Aug 2007 21:24:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-6</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@Cheesy_G13 Cheesy_G13]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/cheesy_g13">@Cheesy_G13</a> wrote:</p>
          <blockquote>
              <p>what is ‘mySQL’ are? <img src="https://forum.moparisthebest.com/images/emoji/twitter/open_mouth.png?v=6" title=":open_mouth:" class="emoji" alt=":open_mouth:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/5</link>
        <pubDate>Tue, 07 Aug 2007 20:49:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-5</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@toonshorty toonshorty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/toonshorty">@toonshorty</a> wrote:</p>
          <blockquote>
              <p>Ok, sorry… <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=6" title=":frowning:" class="emoji" alt=":frowning:"> but i need helP!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/4</link>
        <pubDate>Tue, 07 Aug 2007 18:37:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-4</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@Tree Tree]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tree">@Tree</a> wrote:</p>
          <blockquote>
              <p>No bumping please.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/3</link>
        <pubDate>Tue, 07 Aug 2007 18:36:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-3</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@toonshorty toonshorty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/toonshorty">@toonshorty</a> wrote:</p>
          <blockquote>
              <p>Help Please![br][size=1]Posted on: August 07, 2007, 03:22:19 AM[/size][hr]Can anyone tell me what i can do?</p>
<p>is there any other way to host your server 24/7 without having to leave your PC on!?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/2</link>
        <pubDate>Tue, 07 Aug 2007 18:30:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-2</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
      <item>
        <title>OMFG! I Got a MySQL Error HELP!</title>
        <dc:creator><![CDATA[@toonshorty toonshorty]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/toonshorty">@toonshorty</a> wrote:</p>
          <blockquote>
              <p>Help!!!</p>
<p>I Cant get MySQL to work!<br>
I Get this compiler error, which says “unclosed string literal” and it leads me to this code…</p>
<pre><code class="lang-auto">println("Place="+rs.getString(1)+" X="+rs.getInt(2)+" Y="+rs.getInt(3)+" HeightLevel="+rs.getInt(4)+";</code></pre>
<p>This is the entire mysqlHandler…</p>
<p>[code]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*;<br>
import java.sql.Connection;<br>
import java.sql.DriverManager;<br>
import java.sql.SQLException;<br>
import java.sql.Statement;<br>
import java.sql.ResultSet;<br>
import java.sql.Driver;</p>
<p>public class SqlHandler extends misc {</p>
<pre><code>public static String MySQL = "jdbc:mysql://localhost/projectnoobscape";
public static String MySQLUser = "root";
public static String MySQLPass = "";
public static Connection myConnection = null;

public static int spawnCount = 0;
public static int sPointBoundary[] = new int[2000];
public static int sPointX[] = new int[2000];
public static int sPointY[] = new int[2000];
public static int sPointHeightLevel[] = new int[2000];
public static int sPointNpcID[] = new int[2000];
public static int sPointSpawnTime[] = new int[2000];
public static boolean sPointStatic[] = new boolean[2000];

public static int gotoCount = 0;
public static String gotoPlaces[] = new String[500];
public static int gotoPlacesX[] = new int[500];
public static int gotoPlacesY[] = new int[500];
public static int gotoPlacesHeightLevel[] = new int[500];
public static int gotoPlacesCount;

public static String objectAction;
public static int objectActionTimer;
public static int objectActionX;
public static int objectActionY;
public static boolean objectResult;

public static String bannedIPS[] = new String[500];

public static String itemName;
public static int itemID;
public static String itemDesc;
public static int shopValue;

public static int npcTalkTo;

public static int chatNPCID;
public static int chatID;
public static int chatType;
public static String chatQuestion;
public static String chatText1;
public static String chatText2;
public static String chatText3;
public static String chatText4;
public static int chatNext1;
public static int chatNext2;
public static int chatNext3;
public static int chatNext4;
public static String chatAction1;
public static String chatAction2;
public static String chatAction3;
public static String chatAction4;

public static int stealNPCID;
public static int stealReqLevel;
public static int maxLoot;
public static String itemLootID;
public static String itemLootAmount;
public static int stealExpLoot;
public static int stealStunDamage;
public static int stealLootType;

public static String staticDropID;
public static String staticDropAmount;
public static String randDropID;
public static String randDropAmount;
public static String questDropID;
public static String questDrop;
public static String questDropAmount;
public static int npcKillXP;

public static int foodStatID;
public static int foodStatHeal;
public static int foodStatNext;

public static int atItemID;
public static int atItemInt1;
public static int atItemInt2;
public static int atItemInt3;
public static String atItemActionName;
public static int atItemAnimation;
public static int atItemAnimationTimer;

public static String npcName;
public static String npcDesc;
public static String npcAction;
public static int npcCombat;

public static String npcActionType;
public static String itemActionType;

public static void createConnection(){
	try{
		Class.forName("com.mysql.jdbc.Driver").newInstance();
		myConnection = DriverManager.getConnection(MySQL, MySQLUser, MySQLPass);
	} catch (Exception e) {
	}
}

public static void destroyConnection(){
	try{
		if(myConnection != null) myConnection.close();
	} catch (Exception e) {
	}
}

public static void executeQuery(String qUery) {
 try{
	  	Statement stmt = myConnection.createStatement();
		stmt.executeUpdate(qUery);
		stmt.close();
	} catch (Exception e) {	}	
}

public static int getSpawnPoints() {
 try {
	String query = "SELECT * FROM spawnpoints";
	  	Statement stmt = myConnection.createStatement();
		    ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				spawnCount = rs.getRow();
				misc.printlnTag(spawnCount+" X="+rs.getInt(1)+" Y="+rs.getInt(2)+" HeightLevel="+rs.getInt(3)+" NpcID="+rs.getInt(4)+" SpawnTime="+rs.getInt(5)+" Static="+rs.getString(6));
					sPointX[spawnCount] = rs.getInt(1);
					sPointY[spawnCount] = rs.getInt(2);
					sPointHeightLevel[spawnCount] = rs.getInt(3);
					sPointNpcID[spawnCount] = rs.getInt(4);
					sPointSpawnTime[spawnCount] = rs.getInt(5);
					sPointBoundary[spawnCount] = rs.getInt(7);
					if(rs.getString(6).equalsIgnoreCase("n"))
						sPointStatic[spawnCount] = false;
					else
						sPointStatic[spawnCount] = true;
			}
			stmt.close();
			return spawnCount;
		 } catch (Exception e) { }	
	return spawnCount;
}

public static boolean getChat(int ID) {
chatQuestion = "";
chatNPCID = 0;	chatID = 0;	chatType = 0;
chatText1 = "";	chatText2 = "";	chatText3 = "";	chatText4 = "";
chatNext1 = 0;	chatNext2 = 0;	chatNext3 = 0;	chatNext4 = 0;
chatAction1 = "";	chatAction2 = "";	chatAction3 = "";	chatAction4 = "";
 try {
	  	Statement stmt = myConnection.createStatement();
		String query = "SELECT * FROM chatnpc WHERE id="+ID+";";
		ResultSet rs = stmt.executeQuery(query);
		while (rs.next()) {
			chatID = rs.getInt("chatID");
			chatNPCID = rs.getInt("chatNPCID");
			chatType = rs.getInt("chatType");
			chatQuestion = rs.getString("chatQuestion");
			chatText1 = rs.getString("chatText1");
			chatText2 = rs.getString("chatText2");
			chatText3 = rs.getString("chatText3");
			chatText4 = rs.getString("chatText4");
			chatNext1 = rs.getInt("chatNext1");
			chatNext2 = rs.getInt("chatNext2");
			chatNext3 = rs.getInt("chatNext3");
			chatNext4 = rs.getInt("chatNext4");
			chatAction1 = rs.getString("chatAction1");
			chatAction2 = rs.getString("chatAction2");
			chatAction3 = rs.getString("chatAction3");
			chatAction4 = rs.getString("chatAction4");
		}
		stmt.close();
		 } catch (Exception e) { }
	return true;
}

public static int getGotoPlaces() {		
	 try {
	String query = "SELECT * FROM gotopoints";
	  	Statement stmt = myConnection.createStatement();
		    ResultSet rs = stmt.executeQuery(query);
			while (rs.next()) {
				gotoCount = rs.getRow();
					gotoPlaces[gotoCount] = rs.getString(1);
					gotoPlacesX[gotoCount] = rs.getInt(2);
					gotoPlacesY[gotoCount] = rs.getInt(3);
					gotoPlacesHeightLevel[gotoCount] = rs.getInt(4);
					println("Place="+rs.getString(1)+" X="+rs.getInt(2)+" Y="+rs.getInt(3)+" HeightLevel="+rs.getInt(4)+";
			}
			stmt.close();
			return gotoCount;
		 } catch (Exception e) { }
	return gotoCount;
}

public static void addGotoPlaces(String place, int placeX, int placeY, int heightLevel) {
	gotoPlaces[gotoPlacesCount] = place;
	gotoPlacesX[gotoPlacesCount] = placeX;
	gotoPlacesY[gotoPlacesCount] = placeY;
	gotoPlacesHeightLevel[gotoPlacesCount] = heightLevel;
	gotoPlacesCount += 1;
	saveGotoPlaces();
}


public static void saveGotoPlaces() {
 try {
	 boolean continueSaving = true;
	  	Statement stmt = myConnection.createStatement();
		stmt.executeUpdate("DELETE FROM gotopoints WHERE 1&gt;0;");
		int saveCount = 0;
			while(continueSaving) {
				stmt.executeUpdate("INSERT INTO gotopoints VALUES('"+gotoPlaces[saveCount]+"',"+gotoPlacesX[saveCount]+","+gotoPlacesY[saveCount]+","+gotoPlacesHeightLevel[saveCount]+");");
				saveCount += 1;
				if (saveCount == (gotoPlacesCount))
					continueSaving = false;
			}
		stmt.close();
	 } catch (Exception e) { }
}

public static boolean getNpcInfo(int npcID) {
	npcName = "";
	npcDesc = "";
	npcAction = "";
	npcCombat = 0;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcdb WHERE id="+npcID+";");
		while (rs.next()) {
			npcName = rs.getString("name");
			npcDesc = rs.getString("description");
			npcAction = rs.getString("actions");
			npcCombat = rs.getInt("combat");
		}
		stmt.close();
 } catch (Exception e) { return false; }
if(npcName != "") 
 return true;
else 
 return false;
}

public static String getActions(int npcID) {
	npcActionType = "";
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcdb WHERE id="+npcID+";");
		while (rs.next()) {
			npcActionType = rs.getString("actions");
		}
		stmt.close();
 } catch (Exception e) { }
	return npcActionType;
}

public static boolean getSteal(int npcID) {
	stealNPCID = -1;
	stealReqLevel = -1;
	maxLoot = -1;
	itemLootID = "";
	itemLootAmount = "";
	stealExpLoot = -1;
	stealStunDamage = -1;
	stealLootType = -1;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM skill_thieve_steal WHERE npcID="+npcID+";");
		while (rs.next()) {
			stealNPCID = rs.getInt("npcID");
			stealReqLevel = rs.getInt("reqLevel");
			maxLoot = rs.getInt("maxLoot");
			itemLootID = rs.getString("itemLootID");
			itemLootAmount = rs.getString("itemLootAmount");
			stealExpLoot = rs.getInt("expLoot");
			stealStunDamage = rs.getInt("stunDamage");
			stealLootType = rs.getInt("lootType");
		}
		stmt.close();
		 } catch (Exception e) { e.printStackTrace(); return false; }
	return true;
}

public static int getTalkTo(int npcID) {
	npcTalkTo = 0;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcaction WHERE npcID="+npcID+";");
		while (rs.next()) {
			npcTalkTo = rs.getInt("talkTo");
		}
		stmt.close();
		 } catch (Exception e) { }
	return npcTalkTo;
}

public static String getItemActions(int itemID) {
	itemActionType = "";
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM itemdb WHERE id="+itemID+";");
		while (rs.next()) {
			itemActionType = rs.getString("actions2");
		}
		stmt.close();
 } catch (Exception e) { }
	return itemActionType;
}

public static Boolean getAtItem(int itemID) {
	atItemID = -1;
	atItemInt1 = -1;
	atItemInt2 = -1;
	atItemInt3 = -1;
	atItemActionName = "";
	atItemAnimation = -1;
	atItemAnimationTimer = -1;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM misc_atitem WHERE itemID="+itemID+";");
		while (rs.next()) {
			atItemID = rs.getInt("itemID");
			atItemInt1 = rs.getInt("itemInt1");
			atItemInt2 = rs.getInt("itemInt2");
			atItemInt3 = rs.getInt("itemInt3");
			atItemActionName = rs.getString("actionName");
			atItemAnimation = rs.getInt("actionEmote");
			atItemAnimationTimer = rs.getInt("actionTimer");
		}
		stmt.close();
		 } catch (Exception e) { e.printStackTrace(); }
	return (atItemID != -1);
}

public static Boolean getFoodStats(int foodID) {
	foodStatID = -1;
	foodStatHeal = -1;
	foodStatNext = -1;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM misc_food WHERE foodID="+foodID+";");
		while (rs.next()) {
			foodStatID = rs.getInt("foodID");
			foodStatHeal = rs.getInt("foodHeal");
			foodStatNext = rs.getInt("foodNext");
		}
		stmt.close();
		 } catch (Exception e) { e.printStackTrace(); }
	return (foodStatID != -1);
}

public static Boolean getDropNPC(int npcID) {
	staticDropID = "";
	staticDropAmount = "";
	randDropID = "";
	randDropAmount = "";
	questDropID = "";
	questDrop = "";
	questDropAmount = "";
	npcKillXP = 0;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcdeath WHERE npcID="+npcID+";");
		while (rs.next()) {
			staticDropID = rs.getString("staticDropsID");
			staticDropAmount = rs.getString("staticDropAmount");
			randDropID = rs.getString("randDropID");
			randDropAmount = rs.getString("randDropAmount");
			questDropID = "";
			questDrop = "";
			questDropAmount = "";
			npcKillXP = rs.getInt("gainedXP");
		}
		stmt.close();
		 } catch (Exception e) { e.printStackTrace(); }
	return (foodStatID != -1);
}

public static void addTalkTo(int npcID, int chatID) {
	try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcaction WHERE npcID="+npcID+";");
		boolean Update = false;
		while (rs.next()) {
			Update = true;
		}
		stmt.close();
		if(!Update) {
			Statement statement = myConnection.createStatement();
			String query = "INSERT INTO npcaction (npcID, talkTo) VALUES("+npcID+","+chatID+");";
			statement.executeUpdate(query);
		 } else {
			Statement statement = myConnection.createStatement();
			String query = "UPDATE npcaction SET npcID="+npcID+" AND talkTo="+chatID+" WHERE npcID="+npcID+");";
			statement.executeUpdate(query);
		}
	} catch (Exception e) { }
}

public static String getItem(int ID) {
 itemName = null;
  try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM itemdb WHERE id="+ID+";");
		while (rs.next()) {
			itemName = rs.getString(2);
		}
		stmt.close();
	} catch (Exception e) { }
	return itemName;
}

public static int getItemID(String name) {
	itemID = 0;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM itemdb WHERE name='"+name+"';");
		while (rs.next()) {
			itemID = rs.getInt("id");
			itemDesc = rs.getString("description");
		}
		stmt.close();
	 } catch (Exception e) { }
	if(itemDesc.startsWith("Swap this note"))
		return itemID-1;
	else
		return itemID;
}

public static int getItemFixID(int name) {
	itemID = 0;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM itemdb WHERE id='"+name+"';");
		while (rs.next()) {
			itemID = rs.getInt("id");
			itemDesc = rs.getString("description");
		}
		stmt.close();
		 } catch (Exception e) { }
	if(itemDesc.startsWith("Swap this note"))
		return itemID-1;
	else
		return itemID;
}

public static String getNPCName(int ID) {
	npcName = "";
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM npcdb WHERE id="+ID+";");
		while (rs.next()) {
			npcName = rs.getString("name");
		}
		stmt.close();
	 } catch (Exception e) {	}	
	return npcName;
}

public static boolean addObjectState(int objectX, int objectY, int objectHeightLevel, int objectID, int objectDirection) {
	try {
		Statement statement = myConnection.createStatement();
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM objectstate WHERE objectX="+objectX+" AND objectY="+objectY+" AND objectHeightLevel="+objectHeightLevel+";");
		boolean Update = false;
		while (rs.next()) {
			Update = true;
		}
		stmt.close();
		if(!Update) {
			String query = "INSERT INTO objectstate (objectX, objectY, objectDefaultID, objectCurrentID, objectHeightLevel, objectDirection) VALUES("+objectX+","+objectY+",'"+objectID+"',0,"+objectHeightLevel+",'"+objectDirection+"')";
			statement.executeUpdate(query);
		} else {
			String query = "UPDATE objectstate SET objectDefaultID="+objectID+", objectCurrentID="+objectID+" WHERE objectX="+objectX+" AND objectY="+objectY+" AND objectHeightLevel="+objectHeightLevel+";";
			statement.executeUpdate(query);
		}
	} catch (Exception e) { e.printStackTrace(); return false; }
	return true;
}

public static int getShopValue(int ID) {
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM itemdb WHERE id="+ID+";");
		while (rs.next()) {
			shopValue = rs.getInt(6);
		}
		stmt.close();
		 } catch (Exception e) { }
	return shopValue;
}

public static String getCount(String DB) {
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM "+DB+";");
		while (rs.next()) {
			itemName = rs.getString(2);
		}
		stmt.close();
		 } catch (Exception e) { }
	return itemName;
}

public static boolean getObject(int ID, int objectID, int objectX, int objectY, int objectHeightLevel) {
	objectResult = false;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM objectdb WHERE objectID="+objectID+" AND objectX="+objectX+" AND objectY="+objectY+" AND objectHeightLevel="+objectHeightLevel+";");
		while (rs.next()) {
			objectAction = rs.getString("actionName"+ID);
			objectActionTimer = rs.getInt("actionTimer"+ID);
			objectActionX = rs.getInt("objectX");
			objectActionY = rs.getInt("objectY");
			objectResult = true;
		}
		stmt.close();
		 } catch (Exception e) { }
	return objectResult;
}

public static boolean addObject(int ID, int objectID, int objectX, int objectY, int objectHeightLevel, String actionName, int actionTimer) {
	try {
		Statement statement = myConnection.createStatement();
	  	Statement stmt = myConnection.createStatement();

		ResultSet rs = stmt.executeQuery("SELECT * FROM objectdb WHERE objectID="+objectID+" AND objectX="+objectX+" AND objectY="+objectY+" AND objectHeightLevel="+objectHeightLevel+";");
		boolean Update = false;
		while (rs.next()) {
			Update = true;
		}
		stmt.close();
		if(!Update) {
			String query = "INSERT INTO objectdb (objectID, objectX, objectY, actionName"+ID+", actionTimer"+ID+",objectHeightLevel)VALUES("+objectID+","+objectX+","+objectY+",'"+actionName+"',"+actionTimer+","+objectHeightLevel+")";
			statement.executeUpdate(query);
				return true;
		} else {
			String query = "UPDATE objectdb SET actionName"+ID+"='"+actionName+"', actionTimer"+ID+"="+actionTimer+" WHERE objectID="+objectID+" AND objectX="+objectX+" AND objectY="+objectY+" AND objectHeightLevel="+objectHeightLevel+";";
			statement.executeUpdate(query);
				return false;
		}
	} catch (Exception e) { return false; } // 1747
}

public static void addBan(String host) {
	try {
		Statement statement = myConnection.createStatement();
		String query = "INSERT INTO banned VALUES('"+host+"');";
		statement.executeUpdate(query);
	} catch (Exception e) { }
}

public static void removeBan(String host) {
	try {
		Statement statement = myConnection.createStatement();
		String query = "DELETE FROM banned WHERE host='"+host+"';";
		statement.executeUpdate(query);
	} catch (Exception e) { }
}

public static String listBans() {
	for(int x=1; x&lt;499; x++)
		bannedIPS[x] = null;
 try {
	  	Statement stmt = myConnection.createStatement();
		ResultSet rs = stmt.executeQuery("SELECT * FROM banned;");
		while (rs.next()) {
			bannedIPS[rs.getRow()] = rs.getString("host");
		}
		stmt.close();
		 } catch (Exception e) { }
	return itemName;
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046/1</link>
        <pubDate>Tue, 07 Aug 2007 14:20:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-131046-1</guid>
        <source url="https://forum.moparisthebest.com/t/omfg-i-got-a-mysql-error-help/131046.rss">OMFG! I Got a MySQL Error HELP!</source>
      </item>
  </channel>
</rss>
