<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Pi Combat assistant (casting problem)</title>
    <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494</link>
    <description>Hey guys, i have a problem with casting magic. when ever i cast magic, it automaticaly runs up to my opponent right away. i heard that there was a c.stopmovement or like a method to stop the running twords opponent. here&#39;s my method i need to add it to.

public void attackPlayer(int i) {

		if (Server.playerHandler.players[i] != null) {
			
			if (Server.playerHandler.players[i] != null) {
				
				if (Server.playerHandler.players[i].isDead) {
					resetPlayerAttack();
					return;
				}
				
				if(c.respawnTimer &gt; 0 || Server.playerHandler.players[i].respawnTimer &gt; 0) {
					resetPlayerAttack();
					return;
				}
				
				if(!c.getCombat().checkReqs()) {
					return;
				}
			
			boolean sameSpot = c.absX == Server.playerHandler.players[i].getX() &amp;&amp; c.absY == Server.playerHandler.players[i].getY();
			if(!c.goodDistance(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), c.getX(), c.getY(), 25) &amp;&amp; !sameSpot) {
				resetPlayerAttack();
				return;
			}

			if(Server.playerHandler.players[i].respawnTimer &gt; 0) {
				Server.playerHandler.players[i].playerIndex = 0;
				resetPlayerAttack();
				return;
			}
			
			if (Server.playerHandler.players[i].heightLevel != c.heightLevel) {
				resetPlayerAttack();
				return;
			}
			
			c.followId = i;
			c.followId2 = 0;
			if(c.attackTimer &lt;= 0) {
				c.usingBow = false;
				c.specEffect = 0;
				c.usingRangeWeapon = false;
				c.rangeItemUsed = 0;
				boolean usingBow = false;
				boolean usingArrows = false;
				boolean usingOtherRangeWeapons = false;
				boolean usingCross = c.playerEquipment[c.playerWeapon] == 9185;
				c.projectileStage = 0;
				if (c.autocasting) {
					c.spellId = c.autocastId;
					c.usingMagic = true;
				}
				if(c.spellId &gt; 0) {
                    c.usingMagic = true;
                }
				if (c.absX == Server.playerHandler.players[i].absX &amp;&amp; c.absY == Server.playerHandler.players[i].absY) {
					if (c.freezeTimer &gt; 0) {
						resetPlayerAttack();
						return;
					}	
					c.followId = i;
					c.attackTimer = 0;
					return;
				}
				
				if(!c.usingMagic) {
					for (int bowId : c.BOWS) {
						if(c.playerEquipment[c.playerWeapon] == bowId) {
							usingBow = true;
							for (int arrowId : c.ARROWS) {
								if(c.playerEquipment[c.playerArrows] == arrowId) {
									usingArrows = true;
								}
							}
						}
					}				
				
					for (int otherRangeId : c.OTHER_RANGE_WEAPONS) {
						if(c.playerEquipment[c.playerWeapon] == otherRangeId) {
							usingOtherRangeWeapons = true;
						}
					}
				}
				if (c.autocasting) {
					c.spellId = c.autocastId;
					c.usingMagic = true;
				}
				//c.sendMessage(&quot;Made it here2.&quot;);
				if(c.spellId &gt; 0) {
                    c.usingMagic = true;
                }
				c.attackTimer = getAttackDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());

				if(c.duelRule[9]){
				boolean canUseWeapon = false;
					for(int funWeapon: Config.FUN_WEAPONS) {
						if(c.playerEquipment[c.playerWeapon] == funWeapon) {
							canUseWeapon = true;
						}
					}
					if(!canUseWeapon) {
						c.sendMessage(&quot;You can only use fun weapons in this duel!&quot;);
						resetPlayerAttack();
						return;
					}
				}
				//c.sendMessage(&quot;Made it here3.&quot;);
				if(c.duelRule[2] &amp;&amp; (usingBow || usingOtherRangeWeapons)) {
					c.sendMessage(&quot;Range has been disabled in this duel!&quot;);
					return;
				}
				if(c.duelRule[3] &amp;&amp; (!usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic)) {
					c.sendMessage(&quot;Melee has been disabled in this duel!&quot;);
					return;
				}
				
				if(c.duelRule[4] &amp;&amp; c.usingMagic) {
					c.sendMessage(&quot;Magic has been disabled in this duel!&quot;);
					resetPlayerAttack();
					return;
				}
				
				if((!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 4) &amp;&amp; (usingOtherRangeWeapons &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
				|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 2) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
				|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), getRequiredDistance()) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; !usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
				|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 10) &amp;&amp; (usingBow || c.usingMagic))) {
					//c.sendMessage(&quot;Setting attack timer to 1&quot;);
					c.attackTimer = 1;
					if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons &amp;&amp; c.freezeTimer &gt; 0)
						resetPlayerAttack();
					return;
				}
				
				if(!usingCross &amp;&amp; !usingArrows &amp;&amp; usingBow &amp;&amp; (c.playerEquipment[c.playerWeapon] &lt; 4212 || c.playerEquipment[c.playerWeapon] &gt; 4223) &amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You have run out of arrows!&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if(correctBowAndArrows() &lt; c.playerEquipment[c.playerArrows] &amp;&amp; Config.CORRECT_ARROWS &amp;&amp; usingBow &amp;&amp; !usingCrystalBow() &amp;&amp; c.playerEquipment[c.playerWeapon] != 9185 &amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You can&#39;t use &quot;+c.getItems().getItemName(c.playerEquipment[c.playerArrows]).toLowerCase()+&quot;s with a &quot;+c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()+&quot;.&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;
				}
				if (c.playerEquipment[c.playerWeapon] == 9185 &amp;&amp; !properBolts() &amp;&amp; !c.usingMagic) {
					c.sendMessage(&quot;You must use bolts with a crossbow.&quot;);
					c.stopMovement();
					resetPlayerAttack();
					return;				
				}
				
				
				if(usingBow || c.usingMagic || usingOtherRangeWeapons || usingHally()) {
					c.stopMovement();
				}
				
				if(usingBow || c.usingMagic || usingOtherRangeWeapons || (c.goodDistance(c.getX(), c.getY(), Server.npcHandler.npcs[i].getX(), Server.npcHandler.npcs[i].getY(), 2) &amp;&amp; usingHally())) {
					c.stopMovement();
				}

				if(!checkMagicReqs(c.spellId)) {
					c.stopMovement();
					c.npcIndex = 0;
					return;
				}
				
				if(!checkMagicReqs(c.spellId)) {
					c.stopMovement();
					resetPlayerAttack();
					return;
				}

				if(!checkMagicReqs(c.spellId)) {
					c.stopMovement();
					c.npcIndex = 0;
					return;
				}
				
				c.faceUpdate(i+32768);
				
				if(c.duelStatus != 5) {
					if(!c.attackedPlayers.contains(c.playerIndex) &amp;&amp; !Server.playerHandler.players[c.playerIndex].attackedPlayers.contains(c.playerId)) {
						c.attackedPlayers.add(c.playerIndex);
						c.isSkulled = true;
						c.skullTimer = Config.SKULL_TIMER;
						c.headIconPk = 0;
						c.getPA().requestUpdates();
					} 
				}
				c.specAccuracy = 1.0;
				c.specDamage = 1.0;
				c.delayedDamage = c.delayedDamage2 = 0;
				if(c.usingSpecial &amp;&amp; !c.usingMagic) {
					if(c.duelRule[10] &amp;&amp; c.duelStatus == 5) {
						c.sendMessage(&quot;Special attacks have been disabled during this duel!&quot;);
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						resetPlayerAttack();
						return;
					}
					if(checkSpecAmount(c.playerEquipment[c.playerWeapon])){
						c.lastArrowUsed = c.playerEquipment[c.playerArrows];
						activateSpecial(c.playerEquipment[c.playerWeapon], i);
						c.followId = c.playerIndex;
						return;
					} else {
						c.sendMessage(&quot;You don&#39;t have the required special energy to use this attack.&quot;);
						c.usingSpecial = false;
						c.getItems().updateSpecialBar();
						c.playerIndex = 0;
						return;
					}	
				}
				
				if(!c.usingMagic) {
					c.startAnimation(getWepAnim(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()));
					c.mageFollow = false;
				} else {
					c.startAnimation(c.MAGIC_SPELLS[c.spellId][2]);
					c.mageFollow = true;
					c.followId = c.playerIndex;
				}
				Server.playerHandler.players[i].underAttackBy = c.playerId;
				Server.playerHandler.players[i].logoutDelay = System.currentTimeMillis();
				Server.playerHandler.players[i].singleCombatDelay = System.currentTimeMillis();
				Server.playerHandler.players[i].killerId = c.playerId;
				c.lastArrowUsed = 0;
				c.rangeItemUsed = 0;
				if(!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons) { // melee hit delay
					c.followId = Server.playerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
					c.delayedDamage = Misc.random(calculateMeleeMaxHit());
					c.projectileStage = 0;
					c.oldPlayerIndex = i;
				}
								
				if(usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic || usingCross) { // range hit delay
					if(c.playerEquipment[c.playerWeapon] &gt;= 4212 &amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223) {
						c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
						c.crystalBowArrowCount++;
					} else {
						c.rangeItemUsed = c.playerEquipment[c.playerArrows];
						c.getItems().deleteArrow();
					}
					if (c.fightMode == 2)
						c.attackTimer--;
					if (usingCross)
						c.usingBow = true;
					c.usingBow = true;
					c.followId = Server.playerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					c.gfx100(getRangeStartGFX());	
					c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}
											
				if(usingOtherRangeWeapons) {	// knives, darts, etc hit delay
					c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
					c.getItems().deleteEquipment();
					c.usingRangeWeapon = true;
					c.followId = Server.playerHandler.players[c.playerIndex].playerId;
					c.getPA().followPlayer();
					c.gfx100(getRangeStartGFX());
					if (c.fightMode == 2)
						c.attackTimer--;
					c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
					c.projectileStage = 1;
					c.oldPlayerIndex = i;
					fireProjectilePlayer();
				}

				if(c.usingMagic) {	// magic hit delay
					int pX = c.getX();
					int pY = c.getY();
					int nX = Server.playerHandler.players[i].getX();
					int nY = Server.playerHandler.players[i].getY();
					int offX = (pY - nY)* -1;
					int offY = (pX - nX)* -1;
					c.castingMagic = true;
					c.projectileStage = 2;
					if(c.MAGIC_SPELLS[c.spellId][3] &gt; 0) {
						if(getStartGfxHeight() == 100) {
							c.gfx100(c.MAGIC_SPELLS[c.spellId][3]);
						} else {
							c.gfx0(c.MAGIC_SPELLS[c.spellId][3]);
						}
					}
					if(c.MAGIC_SPELLS[c.spellId][4] &gt; 0) {
						c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 78, c.MAGIC_SPELLS[c.spellId][4], getStartHeight(), getEndHeight(), -i - 1, getStartDelay());
					}
					if (c.autocastId &gt; 0) {
						c.followId = c.playerIndex;
						//c.followDistance = 5;
					}	
					c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
					c.oldPlayerIndex = i;
					c.oldSpellId = c.spellId;
                   			c.spellId = 0;
					Client o = (Client)Server.playerHandler.players[i];
					if(c.MAGIC_SPELLS[c.oldSpellId][0] == 12891 &amp;&amp; o.isMoving) {
						//c.sendMessage(&quot;Barrage projectile..&quot;);
						c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 85, 368, 25, 25, -i - 1, getStartDelay());
					}
					if(Misc.random(mageAtk()) &gt; Misc.random(o.getCombat().mageDef())) {
						c.magicFailed = false;
					} else if(Misc.random(mageAtk()) &lt; Misc.random(o.getCombat().mageDef())) {
						c.magicFailed = true;
					}
					int freezeDelay = getFreezeTime();//freeze time
					if(freezeDelay &gt; 0 &amp;&amp; Server.playerHandler.players[i].freezeTimer &lt;= -3 &amp;&amp; !c.magicFailed) { 
						Server.playerHandler.players[i].freezeTimer = freezeDelay;
						o.resetWalkingQueue();
						o.sendMessage(&quot;You have been frozen.&quot;);
						o.frozenBy = c.playerId;
					}
					if (!c.autocasting &amp;&amp; c.spellId &lt;= 0)
						c.playerIndex = 0;
				}

				if(usingBow &amp;&amp; Config.CRYSTAL_BOW_DEGRADES) { // crystal bow degrading
					if(c.playerEquipment[c.playerWeapon] == 4212) { // new crystal bow becomes full bow on the first shot
						c.getItems().wearItem(4214, 1, 3);
					}
					
					if(c.crystalBowArrowCount &gt;= 250){
						switch(c.playerEquipment[c.playerWeapon]) {
							
							case 4223: // 1/10 bow
							c.getItems().wearItem(-1, 1, 3);
							c.sendMessage(&quot;Your crystal bow has fully degraded.&quot;);
							if(!c.getItems().addItem(4207, 1)) {
								Server.itemHandler.createGroundItem(c, 4207, c.getX(), c.getY(), 1, c.getId());
							}
							c.crystalBowArrowCount = 0;
							break;
							
							default:
							c.getItems().wearItem(++c.playerEquipment[c.playerWeapon], 1, 3);
							c.sendMessage(&quot;Your crystal bow degrades.&quot;);
							c.crystalBowArrowCount = 0;
							break;
						}
					}	
				}
			}
		}
	}
		}

Please hlep me add a method to stop running twords oopponent when casting a spell.</description>
    
    <lastBuildDate>Sun, 17 Jun 2012 14:07:00 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>I’ve ben working on this dumb thing for over a week… still cannot figure it out.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/13</link>
        <pubDate>Sun, 17 Jun 2012 14:07:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-13</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>No, I’m not <span class="bbcode-i">giving</span> you anything.</p>
<p>You have to do it yourself.</p>
<p>What your friend said was correct.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/12</link>
        <pubDate>Sun, 17 Jun 2012 13:39:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-12</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>so you want me to add just this or acually make a method myelf becuase can’t.<br>
getDistance(int, int, int, int, int);</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/11</link>
        <pubDate>Sun, 17 Jun 2012 13:22:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-11</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@tomato721 tomato721]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tomato721">@tomato721</a> wrote:</p>
          <blockquote>
              <p>[quote=“shank beast, post:1, topic:445494”]Hey guys, i have a problem with casting magic. when ever i cast magic, it automaticaly runs up to my opponent right away. i heard that there was a c.stopmovement or like a method to stop the running twords opponent. here’s my method i need to add it to.</p>
<p>[code]public void attackPlayer(int i) {</p>
<pre><code>	if (Server.playerHandler.players[i] != null) {
		
		if (Server.playerHandler.players[i] != null) {
			
			if (Server.playerHandler.players[i].isDead) {
				resetPlayerAttack();
				return;
			}
			
			if(c.respawnTimer &gt; 0 || Server.playerHandler.players[i].respawnTimer &gt; 0) {
				resetPlayerAttack();
				return;
			}
			
			if(!c.getCombat().checkReqs()) {
				return;
			}
		
		boolean sameSpot = c.absX == Server.playerHandler.players[i].getX() &amp;&amp; c.absY == Server.playerHandler.players[i].getY();
		if(!c.goodDistance(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), c.getX(), c.getY(), 25) &amp;&amp; !sameSpot) {
			resetPlayerAttack();
			return;
		}

		if(Server.playerHandler.players[i].respawnTimer &gt; 0) {
			Server.playerHandler.players[i].playerIndex = 0;
			resetPlayerAttack();
			return;
		}
		
		if (Server.playerHandler.players[i].heightLevel != c.heightLevel) {
			resetPlayerAttack();
			return;
		}
		
		c.followId = i;
		c.followId2 = 0;
		if(c.attackTimer &lt;= 0) {
			c.usingBow = false;
			c.specEffect = 0;
			c.usingRangeWeapon = false;
			c.rangeItemUsed = 0;
			boolean usingBow = false;
			boolean usingArrows = false;
			boolean usingOtherRangeWeapons = false;
			boolean usingCross = c.playerEquipment[c.playerWeapon] == 9185;
			c.projectileStage = 0;
			if (c.autocasting) {
				c.spellId = c.autocastId;
				c.usingMagic = true;
			}
			if(c.spellId &gt; 0) {
                c.usingMagic = true;
            }
			if (c.absX == Server.playerHandler.players[i].absX &amp;&amp; c.absY == Server.playerHandler.players[i].absY) {
				if (c.freezeTimer &gt; 0) {
					resetPlayerAttack();
					return;
				}	
				c.followId = i;
				c.attackTimer = 0;
				return;
			}
			
			if(!c.usingMagic) {
				for (int bowId : c.BOWS) {
					if(c.playerEquipment[c.playerWeapon] == bowId) {
						usingBow = true;
						for (int arrowId : c.ARROWS) {
							if(c.playerEquipment[c.playerArrows] == arrowId) {
								usingArrows = true;
							}
						}
					}
				}				
			
				for (int otherRangeId : c.OTHER_RANGE_WEAPONS) {
					if(c.playerEquipment[c.playerWeapon] == otherRangeId) {
						usingOtherRangeWeapons = true;
					}
				}
			}
			if (c.autocasting) {
				c.spellId = c.autocastId;
				c.usingMagic = true;
			}
			//c.sendMessage("Made it here2.");
			if(c.spellId &gt; 0) {
                c.usingMagic = true;
            }
			c.attackTimer = getAttackDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());

			if(c.duelRule[9]){
			boolean canUseWeapon = false;
				for(int funWeapon: Config.FUN_WEAPONS) {
					if(c.playerEquipment[c.playerWeapon] == funWeapon) {
						canUseWeapon = true;
					}
				}
				if(!canUseWeapon) {
					c.sendMessage("You can only use fun weapons in this duel!");
					resetPlayerAttack();
					return;
				}
			}
			//c.sendMessage("Made it here3.");
			if(c.duelRule[2] &amp;&amp; (usingBow || usingOtherRangeWeapons)) {
				c.sendMessage("Range has been disabled in this duel!");
				return;
			}
			if(c.duelRule[3] &amp;&amp; (!usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic)) {
				c.sendMessage("Melee has been disabled in this duel!");
				return;
			}
			
			if(c.duelRule[4] &amp;&amp; c.usingMagic) {
				c.sendMessage("Magic has been disabled in this duel!");
				resetPlayerAttack();
				return;
			}
			
			if((!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 4) &amp;&amp; (usingOtherRangeWeapons &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 2) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), getRequiredDistance()) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; !usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 10) &amp;&amp; (usingBow || c.usingMagic))) {
				//c.sendMessage("Setting attack timer to 1");
				c.attackTimer = 1;
				if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons &amp;&amp; c.freezeTimer &gt; 0)
					resetPlayerAttack();
				return;
			}
			
			if(!usingCross &amp;&amp; !usingArrows &amp;&amp; usingBow &amp;&amp; (c.playerEquipment[c.playerWeapon] &lt; 4212 || c.playerEquipment[c.playerWeapon] &gt; 4223) &amp;&amp; !c.usingMagic) {
				c.sendMessage("You have run out of arrows!");
				c.stopMovement();
				resetPlayerAttack();
				return;
			}
			if(correctBowAndArrows() &lt; c.playerEquipment[c.playerArrows] &amp;&amp; Config.CORRECT_ARROWS &amp;&amp; usingBow &amp;&amp; !usingCrystalBow() &amp;&amp; c.playerEquipment[c.playerWeapon] != 9185 &amp;&amp; !c.usingMagic) {
				c.sendMessage("You can't use "+c.getItems().getItemName(c.playerEquipment[c.playerArrows]).toLowerCase()+"s with a "+c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()+".");
				c.stopMovement();
				resetPlayerAttack();
				return;
			}
			if (c.playerEquipment[c.playerWeapon] == 9185 &amp;&amp; !properBolts() &amp;&amp; !c.usingMagic) {
				c.sendMessage("You must use bolts with a crossbow.");
				c.stopMovement();
				resetPlayerAttack();
				return;				
			}
			
			
			if(usingBow || c.usingMagic || usingOtherRangeWeapons || usingHally()) {
				c.stopMovement();
			}
			
			if(usingBow || c.usingMagic || usingOtherRangeWeapons || (c.goodDistance(c.getX(), c.getY(), Server.npcHandler.npcs[i].getX(), Server.npcHandler.npcs[i].getY(), 2) &amp;&amp; usingHally())) {
				c.stopMovement();
			}

			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				c.npcIndex = 0;
				return;
			}
			
			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				resetPlayerAttack();
				return;
			}

			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				c.npcIndex = 0;
				return;
			}
			
			c.faceUpdate(i+32768);
			
			if(c.duelStatus != 5) {
				if(!c.attackedPlayers.contains(c.playerIndex) &amp;&amp; !Server.playerHandler.players[c.playerIndex].attackedPlayers.contains(c.playerId)) {
					c.attackedPlayers.add(c.playerIndex);
					c.isSkulled = true;
					c.skullTimer = Config.SKULL_TIMER;
					c.headIconPk = 0;
					c.getPA().requestUpdates();
				} 
			}
			c.specAccuracy = 1.0;
			c.specDamage = 1.0;
			c.delayedDamage = c.delayedDamage2 = 0;
			if(c.usingSpecial &amp;&amp; !c.usingMagic) {
				if(c.duelRule[10] &amp;&amp; c.duelStatus == 5) {
					c.sendMessage("Special attacks have been disabled during this duel!");
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					resetPlayerAttack();
					return;
				}
				if(checkSpecAmount(c.playerEquipment[c.playerWeapon])){
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					activateSpecial(c.playerEquipment[c.playerWeapon], i);
					c.followId = c.playerIndex;
					return;
				} else {
					c.sendMessage("You don't have the required special energy to use this attack.");
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					c.playerIndex = 0;
					return;
				}	
			}
			
			if(!c.usingMagic) {
				c.startAnimation(getWepAnim(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()));
				c.mageFollow = false;
			} else {
				c.startAnimation(c.MAGIC_SPELLS[c.spellId][2]);
				c.mageFollow = true;
				c.followId = c.playerIndex;
			}
			Server.playerHandler.players[i].underAttackBy = c.playerId;
			Server.playerHandler.players[i].logoutDelay = System.currentTimeMillis();
			Server.playerHandler.players[i].singleCombatDelay = System.currentTimeMillis();
			Server.playerHandler.players[i].killerId = c.playerId;
			c.lastArrowUsed = 0;
			c.rangeItemUsed = 0;
			if(!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons) { // melee hit delay
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.delayedDamage = Misc.random(calculateMeleeMaxHit());
				c.projectileStage = 0;
				c.oldPlayerIndex = i;
			}
							
			if(usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic || usingCross) { // range hit delay
				if(c.playerEquipment[c.playerWeapon] &gt;= 4212 &amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223) {
					c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
					c.crystalBowArrowCount++;
				} else {
					c.rangeItemUsed = c.playerEquipment[c.playerArrows];
					c.getItems().deleteArrow();
				}
				if (c.fightMode == 2)
					c.attackTimer--;
				if (usingCross)
					c.usingBow = true;
				c.usingBow = true;
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
				c.lastArrowUsed = c.playerEquipment[c.playerArrows];
				c.gfx100(getRangeStartGFX());	
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.projectileStage = 1;
				c.oldPlayerIndex = i;
				fireProjectilePlayer();
			}
										
			if(usingOtherRangeWeapons) {	// knives, darts, etc hit delay
				c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
				c.getItems().deleteEquipment();
				c.usingRangeWeapon = true;
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.gfx100(getRangeStartGFX());
				if (c.fightMode == 2)
					c.attackTimer--;
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.projectileStage = 1;
				c.oldPlayerIndex = i;
				fireProjectilePlayer();
			}

			if(c.usingMagic) {	// magic hit delay
				int pX = c.getX();
				int pY = c.getY();
				int nX = Server.playerHandler.players[i].getX();
				int nY = Server.playerHandler.players[i].getY();
				int offX = (pY - nY)* -1;
				int offY = (pX - nX)* -1;
				c.castingMagic = true;
				c.projectileStage = 2;
				if(c.MAGIC_SPELLS[c.spellId][3] &gt; 0) {
					if(getStartGfxHeight() == 100) {
						c.gfx100(c.MAGIC_SPELLS[c.spellId][3]);
					} else {
						c.gfx0(c.MAGIC_SPELLS[c.spellId][3]);
					}
				}
				if(c.MAGIC_SPELLS[c.spellId][4] &gt; 0) {
					c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 78, c.MAGIC_SPELLS[c.spellId][4], getStartHeight(), getEndHeight(), -i - 1, getStartDelay());
				}
				if (c.autocastId &gt; 0) {
					c.followId = c.playerIndex;
					//c.followDistance = 5;
				}	
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.oldPlayerIndex = i;
				c.oldSpellId = c.spellId;
               			c.spellId = 0;
				Client o = (Client)Server.playerHandler.players[i];
				if(c.MAGIC_SPELLS[c.oldSpellId][0] == 12891 &amp;&amp; o.isMoving) {
					//c.sendMessage("Barrage projectile..");
					c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 85, 368, 25, 25, -i - 1, getStartDelay());
				}
				if(Misc.random(mageAtk()) &gt; Misc.random(o.getCombat().mageDef())) {
					c.magicFailed = false;
				} else if(Misc.random(mageAtk()) &lt; Misc.random(o.getCombat().mageDef())) {
					c.magicFailed = true;
				}
				int freezeDelay = getFreezeTime();//freeze time
				if(freezeDelay &gt; 0 &amp;&amp; Server.playerHandler.players[i].freezeTimer &lt;= -3 &amp;&amp; !c.magicFailed) { 
					Server.playerHandler.players[i].freezeTimer = freezeDelay;
					o.resetWalkingQueue();
					o.sendMessage("You have been frozen.");
					o.frozenBy = c.playerId;
				}
				if (!c.autocasting &amp;&amp; c.spellId &lt;= 0)
					c.playerIndex = 0;
			}

			if(usingBow &amp;&amp; Config.CRYSTAL_BOW_DEGRADES) { // crystal bow degrading
				if(c.playerEquipment[c.playerWeapon] == 4212) { // new crystal bow becomes full bow on the first shot
					c.getItems().wearItem(4214, 1, 3);
				}
				
				if(c.crystalBowArrowCount &gt;= 250){
					switch(c.playerEquipment[c.playerWeapon]) {
						
						case 4223: // 1/10 bow
						c.getItems().wearItem(-1, 1, 3);
						c.sendMessage("Your crystal bow has fully degraded.");
						if(!c.getItems().addItem(4207, 1)) {
							Server.itemHandler.createGroundItem(c, 4207, c.getX(), c.getY(), 1, c.getId());
						}
						c.crystalBowArrowCount = 0;
						break;
						
						default:
						c.getItems().wearItem(++c.playerEquipment[c.playerWeapon], 1, 3);
						c.sendMessage("Your crystal bow degrades.");
						c.crystalBowArrowCount = 0;
						break;
					}
				}	
			}
		}
	}
}
	}
</code></pre>
<p>[/code]</p>
<p>Please hlep me add a method to stop running twords oopponent when casting a spell.[/quote]</p>
<p>use code plz</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/10</link>
        <pubDate>Sun, 17 Jun 2012 10:51:27 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-10</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Lmao, no, you don’t add [tt]stopMovement();[/tt] to that, you don’t need to call stop movement.</p>
<p>What he’s telling you is to use the method: [tt]getDistance(int, int, int, int, int);[/tt] to your advantage.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/9</link>
        <pubDate>Sun, 17 Jun 2012 07:56:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-9</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>sorry, my friend gave me a hint… he said this is a pro help “good distance”. well, there’s a method called gooddistance. i tried adding stopmovement to it. it still hasn’t worked. also, i fixed auto casting movement but, i cannot fix normal casting.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/8</link>
        <pubDate>Sun, 17 Jun 2012 06:10:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-8</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>I know?</p>
<p>I was telling you that you already had the check, and posted the code where it was. I wasn’t giving you an answer.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/7</link>
        <pubDate>Sun, 17 Jun 2012 06:04:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-7</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>atomic, i already added c.stopMovement(); to that method and added it. still will not work in attackplayer packet. this is hard…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/6</link>
        <pubDate>Sun, 17 Jun 2012 05:56:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>Try it in your attackPlayer packet</p>
<pre><code class="lang-auto"></code></pre>
<p>packet 249 to be specific?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/5</link>
        <pubDate>Sun, 17 Jun 2012 05:45:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@ExtremeX-Scape Ryley]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/extremex-scape">@ExtremeX-Scape</a> wrote:</p>
          <blockquote>
              <p>Whenever I saw “casting problem” I assumed [tt]((SuperiorClass) Class).method();[/tt]</p>
<p>Anyway, no not under [tt]if (!c.usingMagic)[/tt] the ! means, if you’re NOT using magic, do this.</p>
<p>And, it appears that you already have this check in place.</p>
<pre><code class="lang-auto">if (usingBow || c.usingMagic || usingOtherRangeWeapons || usingHally()) {
    c.stopMovement();
}</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/4</link>
        <pubDate>Sun, 17 Jun 2012 05:23:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>Doesn’t work D: hm</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/3</link>
        <pubDate>Sun, 17 Jun 2012 05:21:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@asshole_rule asshole_rule]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/asshole_rule">@asshole_rule</a> wrote:</p>
          <blockquote>
              <p>add the stopmovement under</p>
<pre><code class="lang-auto"></code></pre>
<p>See if that works</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/2</link>
        <pubDate>Sun, 17 Jun 2012 04:34:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
      <item>
        <title>Pi Combat assistant (casting problem)</title>
        <dc:creator><![CDATA[@shank_beast shank beast]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/shank_beast">@shank_beast</a> wrote:</p>
          <blockquote>
              <p>Hey guys, i have a problem with casting magic. when ever i cast magic, it automaticaly runs up to my opponent right away. i heard that there was a c.stopmovement or like a method to stop the running twords opponent. here’s my method i need to add it to.</p>
<p>public void attackPlayer(int i) {</p>
<pre><code>	if (Server.playerHandler.players[i] != null) {
		
		if (Server.playerHandler.players[i] != null) {
			
			if (Server.playerHandler.players[i].isDead) {
				resetPlayerAttack();
				return;
			}
			
			if(c.respawnTimer &gt; 0 || Server.playerHandler.players[i].respawnTimer &gt; 0) {
				resetPlayerAttack();
				return;
			}
			
			if(!c.getCombat().checkReqs()) {
				return;
			}
		
		boolean sameSpot = c.absX == Server.playerHandler.players[i].getX() &amp;&amp; c.absY == Server.playerHandler.players[i].getY();
		if(!c.goodDistance(Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), c.getX(), c.getY(), 25) &amp;&amp; !sameSpot) {
			resetPlayerAttack();
			return;
		}

		if(Server.playerHandler.players[i].respawnTimer &gt; 0) {
			Server.playerHandler.players[i].playerIndex = 0;
			resetPlayerAttack();
			return;
		}
		
		if (Server.playerHandler.players[i].heightLevel != c.heightLevel) {
			resetPlayerAttack();
			return;
		}
		
		c.followId = i;
		c.followId2 = 0;
		if(c.attackTimer &lt;= 0) {
			c.usingBow = false;
			c.specEffect = 0;
			c.usingRangeWeapon = false;
			c.rangeItemUsed = 0;
			boolean usingBow = false;
			boolean usingArrows = false;
			boolean usingOtherRangeWeapons = false;
			boolean usingCross = c.playerEquipment[c.playerWeapon] == 9185;
			c.projectileStage = 0;
			if (c.autocasting) {
				c.spellId = c.autocastId;
				c.usingMagic = true;
			}
			if(c.spellId &gt; 0) {
                c.usingMagic = true;
            }
			if (c.absX == Server.playerHandler.players[i].absX &amp;&amp; c.absY == Server.playerHandler.players[i].absY) {
				if (c.freezeTimer &gt; 0) {
					resetPlayerAttack();
					return;
				}	
				c.followId = i;
				c.attackTimer = 0;
				return;
			}
			
			if(!c.usingMagic) {
				for (int bowId : c.BOWS) {
					if(c.playerEquipment[c.playerWeapon] == bowId) {
						usingBow = true;
						for (int arrowId : c.ARROWS) {
							if(c.playerEquipment[c.playerArrows] == arrowId) {
								usingArrows = true;
							}
						}
					}
				}				
			
				for (int otherRangeId : c.OTHER_RANGE_WEAPONS) {
					if(c.playerEquipment[c.playerWeapon] == otherRangeId) {
						usingOtherRangeWeapons = true;
					}
				}
			}
			if (c.autocasting) {
				c.spellId = c.autocastId;
				c.usingMagic = true;
			}
			//c.sendMessage("Made it here2.");
			if(c.spellId &gt; 0) {
                c.usingMagic = true;
            }
			c.attackTimer = getAttackDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());

			if(c.duelRule[9]){
			boolean canUseWeapon = false;
				for(int funWeapon: Config.FUN_WEAPONS) {
					if(c.playerEquipment[c.playerWeapon] == funWeapon) {
						canUseWeapon = true;
					}
				}
				if(!canUseWeapon) {
					c.sendMessage("You can only use fun weapons in this duel!");
					resetPlayerAttack();
					return;
				}
			}
			//c.sendMessage("Made it here3.");
			if(c.duelRule[2] &amp;&amp; (usingBow || usingOtherRangeWeapons)) {
				c.sendMessage("Range has been disabled in this duel!");
				return;
			}
			if(c.duelRule[3] &amp;&amp; (!usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic)) {
				c.sendMessage("Melee has been disabled in this duel!");
				return;
			}
			
			if(c.duelRule[4] &amp;&amp; c.usingMagic) {
				c.sendMessage("Magic has been disabled in this duel!");
				resetPlayerAttack();
				return;
			}
			
			if((!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 4) &amp;&amp; (usingOtherRangeWeapons &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 2) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic))
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), getRequiredDistance()) &amp;&amp; (!usingOtherRangeWeapons &amp;&amp; !usingHally() &amp;&amp; !usingBow &amp;&amp; !c.usingMagic)) 
			|| (!c.goodDistance(c.getX(), c.getY(), Server.playerHandler.players[i].getX(), Server.playerHandler.players[i].getY(), 10) &amp;&amp; (usingBow || c.usingMagic))) {
				//c.sendMessage("Setting attack timer to 1");
				c.attackTimer = 1;
				if (!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons &amp;&amp; c.freezeTimer &gt; 0)
					resetPlayerAttack();
				return;
			}
			
			if(!usingCross &amp;&amp; !usingArrows &amp;&amp; usingBow &amp;&amp; (c.playerEquipment[c.playerWeapon] &lt; 4212 || c.playerEquipment[c.playerWeapon] &gt; 4223) &amp;&amp; !c.usingMagic) {
				c.sendMessage("You have run out of arrows!");
				c.stopMovement();
				resetPlayerAttack();
				return;
			}
			if(correctBowAndArrows() &lt; c.playerEquipment[c.playerArrows] &amp;&amp; Config.CORRECT_ARROWS &amp;&amp; usingBow &amp;&amp; !usingCrystalBow() &amp;&amp; c.playerEquipment[c.playerWeapon] != 9185 &amp;&amp; !c.usingMagic) {
				c.sendMessage("You can't use "+c.getItems().getItemName(c.playerEquipment[c.playerArrows]).toLowerCase()+"s with a "+c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()+".");
				c.stopMovement();
				resetPlayerAttack();
				return;
			}
			if (c.playerEquipment[c.playerWeapon] == 9185 &amp;&amp; !properBolts() &amp;&amp; !c.usingMagic) {
				c.sendMessage("You must use bolts with a crossbow.");
				c.stopMovement();
				resetPlayerAttack();
				return;				
			}
			
			
			if(usingBow || c.usingMagic || usingOtherRangeWeapons || usingHally()) {
				c.stopMovement();
			}
			
			if(usingBow || c.usingMagic || usingOtherRangeWeapons || (c.goodDistance(c.getX(), c.getY(), Server.npcHandler.npcs[i].getX(), Server.npcHandler.npcs[i].getY(), 2) &amp;&amp; usingHally())) {
				c.stopMovement();
			}

			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				c.npcIndex = 0;
				return;
			}
			
			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				resetPlayerAttack();
				return;
			}

			if(!checkMagicReqs(c.spellId)) {
				c.stopMovement();
				c.npcIndex = 0;
				return;
			}
			
			c.faceUpdate(i+32768);
			
			if(c.duelStatus != 5) {
				if(!c.attackedPlayers.contains(c.playerIndex) &amp;&amp; !Server.playerHandler.players[c.playerIndex].attackedPlayers.contains(c.playerId)) {
					c.attackedPlayers.add(c.playerIndex);
					c.isSkulled = true;
					c.skullTimer = Config.SKULL_TIMER;
					c.headIconPk = 0;
					c.getPA().requestUpdates();
				} 
			}
			c.specAccuracy = 1.0;
			c.specDamage = 1.0;
			c.delayedDamage = c.delayedDamage2 = 0;
			if(c.usingSpecial &amp;&amp; !c.usingMagic) {
				if(c.duelRule[10] &amp;&amp; c.duelStatus == 5) {
					c.sendMessage("Special attacks have been disabled during this duel!");
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					resetPlayerAttack();
					return;
				}
				if(checkSpecAmount(c.playerEquipment[c.playerWeapon])){
					c.lastArrowUsed = c.playerEquipment[c.playerArrows];
					activateSpecial(c.playerEquipment[c.playerWeapon], i);
					c.followId = c.playerIndex;
					return;
				} else {
					c.sendMessage("You don't have the required special energy to use this attack.");
					c.usingSpecial = false;
					c.getItems().updateSpecialBar();
					c.playerIndex = 0;
					return;
				}	
			}
			
			if(!c.usingMagic) {
				c.startAnimation(getWepAnim(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase()));
				c.mageFollow = false;
			} else {
				c.startAnimation(c.MAGIC_SPELLS[c.spellId][2]);
				c.mageFollow = true;
				c.followId = c.playerIndex;
			}
			Server.playerHandler.players[i].underAttackBy = c.playerId;
			Server.playerHandler.players[i].logoutDelay = System.currentTimeMillis();
			Server.playerHandler.players[i].singleCombatDelay = System.currentTimeMillis();
			Server.playerHandler.players[i].killerId = c.playerId;
			c.lastArrowUsed = 0;
			c.rangeItemUsed = 0;
			if(!usingBow &amp;&amp; !c.usingMagic &amp;&amp; !usingOtherRangeWeapons) { // melee hit delay
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.delayedDamage = Misc.random(calculateMeleeMaxHit());
				c.projectileStage = 0;
				c.oldPlayerIndex = i;
			}
							
			if(usingBow &amp;&amp; !usingOtherRangeWeapons &amp;&amp; !c.usingMagic || usingCross) { // range hit delay
				if(c.playerEquipment[c.playerWeapon] &gt;= 4212 &amp;&amp; c.playerEquipment[c.playerWeapon] &lt;= 4223) {
					c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
					c.crystalBowArrowCount++;
				} else {
					c.rangeItemUsed = c.playerEquipment[c.playerArrows];
					c.getItems().deleteArrow();
				}
				if (c.fightMode == 2)
					c.attackTimer--;
				if (usingCross)
					c.usingBow = true;
				c.usingBow = true;
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.lastWeaponUsed = c.playerEquipment[c.playerWeapon];
				c.lastArrowUsed = c.playerEquipment[c.playerArrows];
				c.gfx100(getRangeStartGFX());	
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.projectileStage = 1;
				c.oldPlayerIndex = i;
				fireProjectilePlayer();
			}
										
			if(usingOtherRangeWeapons) {	// knives, darts, etc hit delay
				c.rangeItemUsed = c.playerEquipment[c.playerWeapon];
				c.getItems().deleteEquipment();
				c.usingRangeWeapon = true;
				c.followId = Server.playerHandler.players[c.playerIndex].playerId;
				c.getPA().followPlayer();
				c.gfx100(getRangeStartGFX());
				if (c.fightMode == 2)
					c.attackTimer--;
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.projectileStage = 1;
				c.oldPlayerIndex = i;
				fireProjectilePlayer();
			}

			if(c.usingMagic) {	// magic hit delay
				int pX = c.getX();
				int pY = c.getY();
				int nX = Server.playerHandler.players[i].getX();
				int nY = Server.playerHandler.players[i].getY();
				int offX = (pY - nY)* -1;
				int offY = (pX - nX)* -1;
				c.castingMagic = true;
				c.projectileStage = 2;
				if(c.MAGIC_SPELLS[c.spellId][3] &gt; 0) {
					if(getStartGfxHeight() == 100) {
						c.gfx100(c.MAGIC_SPELLS[c.spellId][3]);
					} else {
						c.gfx0(c.MAGIC_SPELLS[c.spellId][3]);
					}
				}
				if(c.MAGIC_SPELLS[c.spellId][4] &gt; 0) {
					c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 78, c.MAGIC_SPELLS[c.spellId][4], getStartHeight(), getEndHeight(), -i - 1, getStartDelay());
				}
				if (c.autocastId &gt; 0) {
					c.followId = c.playerIndex;
					//c.followDistance = 5;
				}	
				c.hitDelay = getHitDelay(c.getItems().getItemName(c.playerEquipment[c.playerWeapon]).toLowerCase());
				c.oldPlayerIndex = i;
				c.oldSpellId = c.spellId;
               			c.spellId = 0;
				Client o = (Client)Server.playerHandler.players[i];
				if(c.MAGIC_SPELLS[c.oldSpellId][0] == 12891 &amp;&amp; o.isMoving) {
					//c.sendMessage("Barrage projectile..");
					c.getPA().createPlayersProjectile(pX, pY, offX, offY, 50, 85, 368, 25, 25, -i - 1, getStartDelay());
				}
				if(Misc.random(mageAtk()) &gt; Misc.random(o.getCombat().mageDef())) {
					c.magicFailed = false;
				} else if(Misc.random(mageAtk()) &lt; Misc.random(o.getCombat().mageDef())) {
					c.magicFailed = true;
				}
				int freezeDelay = getFreezeTime();//freeze time
				if(freezeDelay &gt; 0 &amp;&amp; Server.playerHandler.players[i].freezeTimer &lt;= -3 &amp;&amp; !c.magicFailed) { 
					Server.playerHandler.players[i].freezeTimer = freezeDelay;
					o.resetWalkingQueue();
					o.sendMessage("You have been frozen.");
					o.frozenBy = c.playerId;
				}
				if (!c.autocasting &amp;&amp; c.spellId &lt;= 0)
					c.playerIndex = 0;
			}

			if(usingBow &amp;&amp; Config.CRYSTAL_BOW_DEGRADES) { // crystal bow degrading
				if(c.playerEquipment[c.playerWeapon] == 4212) { // new crystal bow becomes full bow on the first shot
					c.getItems().wearItem(4214, 1, 3);
				}
				
				if(c.crystalBowArrowCount &gt;= 250){
					switch(c.playerEquipment[c.playerWeapon]) {
						
						case 4223: // 1/10 bow
						c.getItems().wearItem(-1, 1, 3);
						c.sendMessage("Your crystal bow has fully degraded.");
						if(!c.getItems().addItem(4207, 1)) {
							Server.itemHandler.createGroundItem(c, 4207, c.getX(), c.getY(), 1, c.getId());
						}
						c.crystalBowArrowCount = 0;
						break;
						
						default:
						c.getItems().wearItem(++c.playerEquipment[c.playerWeapon], 1, 3);
						c.sendMessage("Your crystal bow degrades.");
						c.crystalBowArrowCount = 0;
						break;
					}
				}	
			}
		}
	}
}
	}
</code></pre>
<p>Please hlep me add a method to stop running twords oopponent when casting a spell.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494/1</link>
        <pubDate>Sun, 17 Jun 2012 03:53:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-445494-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-combat-assistant-casting-problem/445494.rss">Pi Combat assistant (casting problem)</source>
      </item>
  </channel>
</rss>
