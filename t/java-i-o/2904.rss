<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Java I/O</title>
    <link>https://forum.moparisthebest.com/t/java-i-o/2904</link>
    <description>Right, just a little intro to I/O In java.  It can be VERY useful if you want to carry information over from one session of running your Java program to another.  I assume you at least have some knowledge of Java, as I will not go into the basic stuff.

[size=20pt][b][u]READING[/u][/b][/size]

First, we have to import the IO package:
[CODE]
import java.io.*;
[/CODE]

Next, put together your class, then continue.

[CODE]
	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new FileReader(&quot;File.txt&quot;));
	}
[/CODE]

Lets just throw an exception, since i&#39;m feeling lazy right now.  Now that we have what we need to Read from a file, lets actually READ from it.  We use the readLine() method to read, and everytime you execute it, if you execute it again it will move down to the next line automatically.

[code]
		String all = &quot;&quot;;
		String line = &quot;&quot;;
[/code]

Lets declare two files, one to hold the current line and the other to store the entire file.

Now to read from the file:
[code]
		while((line = br.readLine()) != null)
		{
			
		}
[/code]
Now, that block of code pretty much says line is equal to whatever br reads from the file, then it makes sure it doesnt equal null (The file is over.)

Now to do something with that:

[code]
		while((line = br.readLine()) != null)
		{
			all += line + &quot;\n&quot;;
		}
[/code]
That will run through the file, storing every line in the String line, then when it finds that the file has ended, it will exit the for loop.

Thats the end of the file reading, now for the fun part.  Writing to a file.

[size=20pt][b][u]WRITING[/u][/b][/size]

We start off the same way as reading, import java.io.*, create your class, then continue:

For reading we used a BufferedReader, and for writing we will use the PrintWriter class.

[code]
PrintWriter pw = new PrintWriter(new FileWriter(&quot;File.txt&quot;));
[/code]

Now, if you want to append to the file (Add on at the end) instead of just overwriting it everytime you add something on, then make your PrintWriter like this:
[code]
PrintWriter pw = new PrintWriter(new FileWriter(&quot;File.txt&quot;),true);
[/code]

Now to writer to a file, use the print() or println() methods.

[code]
pw.println(&quot;This is a test.&quot;);
[/code]

Then make sure to flush the PrintWriter object to make it print what you told it to.  When you are finished, close it:

[CODE]
pw.flush();
pw.close();
[/code]

That wraps it up then, enjoy using IO.</description>
    
    <lastBuildDate>Sat, 20 May 2006 01:23:25 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-i-o/2904.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Lysol Lysol]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lysol">@Lysol</a> wrote:</p>
          <blockquote>
              <p>Why not just use an java.util.ArrayList to store all the lines? Considering it would be better than just a single String or String[], seeing as ArrayLists are created to automatically up the size when needed.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/12</link>
        <pubDate>Sat, 20 May 2006 01:23:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-12</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>Exactly. =D</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/11</link>
        <pubDate>Thu, 18 May 2006 02:32:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-11</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@BobDole81 BobDole81]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bobdole81">@BobDole81</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="9" data-topic="2904">
<div class="title">
<div class="quote-controls"></div>
 White Castle:</div>
<blockquote>
<p>Buffers are safer if you’re not just sending immediatly and then closing. Like if you have the stream open longer than just one method.</p>
</blockquote>
</aside>
<p>Definately, but when using buffered streams, its also useful to flush at strategic intervals.  When using socket streams for example, every time you finish writing a certain bunch of data to the buffer, it’s necessary to flush, otherwise the connected server might just sit idle for an unnecessarily long period of time…buffers make i/o more efficient, but only if you use them properly <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/10</link>
        <pubDate>Thu, 18 May 2006 02:29:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-10</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>Buffers are safer if you’re not just sending immediatly and then closing. Like if you have the stream open longer than just one method.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/9</link>
        <pubDate>Wed, 17 May 2006 22:06:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-9</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>That’s actually a perfect description.  Thank you, Bob.  <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/8</link>
        <pubDate>Wed, 17 May 2006 12:13:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-8</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@BobDole81 BobDole81]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bobdole81">@BobDole81</a> wrote:</p>
          <blockquote>
              <p>It depends on whether the i/o object is buffered.  Classes like InputStream and OutputStream, I believe, are not buffered, and therefore when you invoke a write/print method, it will immediately send.  Buffered i/o objects will fill up the i/o buffer, which could be various sizes, before writing the data to the stream, and flush is what will empty this buffer and send the contents.</p>
<p>Sorry if that’s not a very good description of it…too tired to think about it any further about it now <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/7</link>
        <pubDate>Wed, 17 May 2006 02:26:32 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-7</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>Ah, yes Bob, that’s it.  And in i/o not all data is sent right away; it accumulates, right?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/6</link>
        <pubDate>Tue, 16 May 2006 21:16:26 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-6</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Fasga Fasga]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fasga">@Fasga</a> wrote:</p>
          <blockquote>
              <p>Ah, I forgot about those.  I guess that’s what writing it here without testing it does <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=9" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/5</link>
        <pubDate>Tue, 16 May 2006 21:08:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-5</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@BobDole81 BobDole81]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bobdole81">@BobDole81</a> wrote:</p>
          <blockquote>
              <p>flush() is used in buffered streams to write all buffered data to the stream; it sorta closes the stream and reopens it, ensuring that all data has been sent.  (I liked the analogy in  one tutorial I read, forget which, that compared flushing an io stream to flushing a toilet…ridding the “buffer” of accumulated “data” :P)</p>
<p>So you really don’t need flush() before close(), as the close() automatically flushes the buffer before closing the stream.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/4</link>
        <pubDate>Tue, 16 May 2006 15:40:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-4</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Pwnd Pwnd]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pwnd">@Pwnd</a> wrote:</p>
          <blockquote>
              <p>Well, you should close the stream, so out.close(); would be needed.<br>
When I get home I’ll have to check on what flush(); does.  I know it has nothing to do with what it sounds like. (I believe, lmao.)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/3</link>
        <pubDate>Tue, 16 May 2006 15:22:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-3</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>Nice tut, but I always use</p>
<pre><code class="lang-auto">PrintWriter/Reader out = new PrintWriter/Reader(new BufferedWriter/Reader(new FileWriter/Reader("file.txt")));</code></pre>
<p>followed with</p>
<p><code>out.flush();
out.close();</code></p>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=9" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/2</link>
        <pubDate>Tue, 16 May 2006 03:51:19 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-2</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
      <item>
        <title>Java I/O</title>
        <dc:creator><![CDATA[@Fasga Fasga]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fasga">@Fasga</a> wrote:</p>
          <blockquote>
              <p>Right, just a little intro to I/O In java.  It can be VERY useful if you want to carry information over from one session of running your Java program to another.  I assume you at least have some knowledge of Java, as I will not go into the basic stuff.</p>
<p>[size=20pt]<span class="bbcode-b"><span class="bbcode-u">READING</span></span>[/size]</p>
<p>First, we have to import the IO package:</p>
<pre><code class="lang-auto">import java.io.*;</code></pre>
<p>Next, put together your class, then continue.</p>
<pre><code class="lang-auto">	public static void main(String[] args) throws IOException
	{
		BufferedReader br = new BufferedReader(new FileReader("File.txt"));
	}</code></pre>
<p>Lets just throw an exception, since i’m feeling lazy right now.  Now that we have what we need to Read from a file, lets actually READ from it.  We use the readLine() method to read, and everytime you execute it, if you execute it again it will move down to the next line automatically.</p>
<pre><code class="lang-auto">		String all = "";
		String line = "";</code></pre>
<p>Lets declare two files, one to hold the current line and the other to store the entire file.</p>
<p>Now to read from the file:</p>
<pre><code class="lang-auto">		while((line = br.readLine()) != null)
		{
			
		}</code></pre>
<p>Now, that block of code pretty much says line is equal to whatever br reads from the file, then it makes sure it doesnt equal null (The file is over.)</p>
<p>Now to do something with that:</p>
<pre><code class="lang-auto">		while((line = br.readLine()) != null)
		{
			all += line + "\n";
		}</code></pre>
<p>That will run through the file, storing every line in the String line, then when it finds that the file has ended, it will exit the for loop.</p>
<p>Thats the end of the file reading, now for the fun part.  Writing to a file.</p>
<p>[size=20pt]<span class="bbcode-b"><span class="bbcode-u">WRITING</span></span>[/size]</p>
<p>We start off the same way as reading, import <a href="http://java.io" rel="nofollow noopener">java.io</a>.*, create your class, then continue:</p>
<p>For reading we used a BufferedReader, and for writing we will use the PrintWriter class.</p>
<pre><code class="lang-auto">PrintWriter pw = new PrintWriter(new FileWriter("File.txt"));</code></pre>
<p>Now, if you want to append to the file (Add on at the end) instead of just overwriting it everytime you add something on, then make your PrintWriter like this:</p>
<pre><code class="lang-auto">PrintWriter pw = new PrintWriter(new FileWriter("File.txt"),true);</code></pre>
<p>Now to writer to a file, use the print() or println() methods.</p>
<pre><code class="lang-auto">pw.println("This is a test.");</code></pre>
<p>Then make sure to flush the PrintWriter object to make it print what you told it to.  When you are finished, close it:</p>
<pre><code class="lang-auto">pw.flush();
pw.close();</code></pre>
<p>That wraps it up then, enjoy using IO.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-i-o/2904/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-i-o/2904/1</link>
        <pubDate>Tue, 16 May 2006 02:19:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-2904-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-i-o/2904.rss">Java I/O</source>
      </item>
  </channel>
</rss>
