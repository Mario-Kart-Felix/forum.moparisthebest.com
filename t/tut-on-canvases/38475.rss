<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Tut on Canvases</title>
    <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475</link>
    <description>[anchor=top][/anchor]
[center][size=20pt]Weibs&#39; Canvas Tutorial[/size][/center]
[hr]


[b]Note: If you find any compiling errors in the example scripts, or something that&#39;s incorrect, or something worth noticing me about, please do tell me. :)[/b]


First of all, I recommend that you read Yakman&#39;s [url=http://dakotastorm.sslpowered.com/villu-reborn.com/showthread.php?t=3019]Everything About Canvases[/url] tutorial because he explains canvases and how they can be used very well.

Now, in this tutorial, you&#39;ll learn how to use the Debug Image Window&#39;s canvas&#39; properties like [b]Brush[/b] and [b]Pen[/b], and the canvas procedures like [b]Rectangle[/b] or [b]LineTo[/b].

[b]Table of Contents:[/b]

[ul][*] [iurl=#p1]The Brush and Pen Properties, and the Rectangle Procedure[/iurl]
[*] [iurl=#p2]The MoveTo and LineTo Procedures[/iurl]
[*] [iurl=#p3]Text Functions and the Font Property[/iurl]
[*] [iurl=#p4]The Pixels Property[/iurl]
[*] [iurl=#bottom]Bottom[/iurl][/ul]


[anchor=p1][/anchor]
[center][b][size=12pt]The Brush and Pen Properties, and the Rectangle Procedure[/size][/b][/center]
[hr]
[right][iurl=#top]Back To Top[/iurl][/right]

First, I&#39;ll start with a simple example script:

[code]program New;

var
  Canvas: TCanvas;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

begin
  Setup;
  
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clRed;
  
  Canvas.Rectangle(5, 5, 245, 245);
end.[/code]

Let me break this down. First, we declared a variable:

[code]var
  Canvas: TCanvas;[/code]

We set the variable &#39;Canvas&#39; to the [b]TCanvas[/b] type. This is the variable type that handles canvases.

Next, we created a Setup; procedure:

[code]procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;[/code]

This opens up the Debug Image Window, and sets our &#39;Canvas&#39; variable to the Debug Window&#39;s canvas, so that we can access it using the &#39;Canvas&#39; variable from now on.

Finally, in the main loop, we have this:

[code]begin
  Setup;
  
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clRed;
  
  Canvas.Rectangle(5, 5, 245, 245);
end.[/code]

This is the important part. The first line involving the canvas is this:

[code]  Canvas.Brush.Style := bsSolid;[/code]

The Canvas part refers to our variable that holds the Debug Window&#39;s canvas handle. Next we access the canvas&#39; Brush property by using this:

[code]  Canvas.Brush[/code]

The brush property is pretty much self-explanatory, it&#39;s used to paint something on the canvas.
Next we access the Style property of the Brush by using this:

[code]  Brush.Style[/code]

The style is essentially how the brush strokes will look when the Brush is used to paint. I&#39;ll be using [b]bsSolid[/b] in this tutorial. bsSolid is exactly how it looks, it&#39;s a solid stroke.

Now, after we set the Style, we need to set the Color property of our Brush, so we use this line:

[code]  Canvas.Brush.Color := clRed;[/code]

We access the Color property the same way we did with the Style, and we set it to [b]clRed[/b], which is one of Scar&#39;s many color constants. 

Finally, we have this line:

[code]  Canvas.Rectangle(5, 5, 245, 245);[/code]

Again, we access our Debug Image Window&#39;s canvas by using the &#39;Canvas&#39; variable, and then we call a painting procedure:

[code]  Canvas.Rectangle[/code]

This procedure will use the Brush to paint a rectangle on the Canvas. The parameters are simple. The Rectangle() procedure calls for the starting x, y coordinates and the ending x, y coordinates. So, as you can see, our procedure calls for a rectangle to be drawn starting at the coordinates of 5, 5 and ending at 245, 245.

Run this script and see the turnout. That wasn&#39;t too hard, now was it?

Next, I&#39;ll explain the Pen property. This example script has a few things added to it, and includes the Pen property:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

begin
  Setup;
  ClearDebugWindow;
  
  Canvas.Pen.Color := clRed;  
  Canvas.Rectangle(5, 5, 245, 245);
end.[/code]

Now, you&#39;ll see a new procedure: ClearDebugWindow;

[code]procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;[/code]

All this does is overwrite any previous drawings that are still on the Debug Window by drawing a solid black rectangle around the whole canvas.

Now, the only other thing that&#39;s new is the last two lines in the main loop:

[code]  Canvas.Pen.Color := clRed;
  Canvas.Rectangle(5, 5, 245, 245);[/code]

This should look familiar, simply because it&#39;s almost exactly the same as the Brush property.

First we access the Pen property by using this:

[code]  Canvas.Pen[/code]

And then we access the Pen&#39;s Color property by using this:

[code]  Pen.Color[/code]

And we set that to clRed;. Finally, we call the exact same rectangle procedure from the first example script, but the turnout is different when using the Pen instead of the Brush, try it out and see the result.

As you can see, it drew a box using the Rectangle() parameters, but did not fill it in. That is exactly what the Pen is used for, drawing lines.

Now, we&#39;re going to put the first example script together with the second one:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Pen.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

begin
  Setup;
  ClearDebugWindow;
  
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clGray;
  Canvas.Pen.Color := clRed;
  Canvas.Rectangle(5, 5, 245, 245);
end.[/code]

Now, we set the Brush Style to bsSolid;, the Brush Color to clGray, and the Pen Color to clRed. Now, this will draw a Rectangle just like the other two, but this stime, since we&#39;re using the Brush and the Pen property, the turnout will be a little different. Run it.

You should see a Gray box with a Red outline. The Brush drew the gray box and filled it in, because we set it&#39;s Color property to clGray and then the Pen property drew a red box around the same area, and did not fill it in.

That&#39;s the basics of the Brush and Pen properties, you can mess around with those until you&#39;re comfortable. Maybe try some different Brush styles, or different colors, just experiment.

[anchor=p2][/anchor]
[center][b][size=12pt]The MoveTo and LineTo Procedures[/size][/b][/center]
[hr]
[right][iurl=#top]Back To Top[/iurl][/right]

The next two procedures I&#39;ll be explaining go hand-in-hand.

Here&#39;s an example script:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Pen.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

begin
  Setup;
  ClearDebugWindow;
  
  Canvas.Pen.Color := clRed;
  Canvas.MoveTo(10, 10);
  Canvas.LineTo(100, 100);
end.[/code]

Now, everything is the same, except for the main loop. Here we set the Pen Color to clRed because the LineTo procedure uses the pen to draw the line.

So, after we set the Pen Color, we use the MoveTo() procedure:

[code]  Canvas.MoveTo(10, 10);[/code]

This procedure is sort of hard to explain. First, you should know, the canvas has its own coordinates. So the MoveTo(x, y) procedure sort of sets the current coordinate to x, y. Therefore, by using MoveTo(10, 10), we set the current coordinate to 10, 10. This is important for the use of the LineTo() procedure.

Next we call the LineTo() procedure:

[code]  Canvas.LineTo(100, 100);[/code]

This draws a line, starting at the current canvas coordinate (Set by the MoveTo() procedure) and ending at the given coordinates. So this example script should draw a diagonal line from 10, 10 to 100, 100.

Simple. :)  So that&#39;s pretty much all there is to MoveTo and LineTo.

[anchor=p3][/anchor]
[center][b][size=12pt]Text Functions and the Font Property[/size][/b][/center]
[hr]
[right][iurl=#top]Back To Top[/iurl][/right]

There&#39;s two main Font Properties: Color and Size. There&#39;s also a Height property for Font, which is basically the same as size.

Then, there&#39;s two Text Functions: TextWidth() and TextHeight(), and there&#39;s one Text Procedure: TextOut().

All of these things will be covered in this section.
Here&#39;s an example script using the Text functions and Font Properties:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Pen.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

begin
  Setup;
  ClearDebugWindow;
  
  Canvas.Font.Color := clRed;
  Canvas.Font.Size := 20;
  Canvas.TextOut(10, 10, &#39;Hello&#39;);
  
  Canvas.Font.Color := clGreen;
  Canvas.Font.Size := 40;
  Canvas.TextOut(10, 70, &#39;Hello&#39;);
  
  Canvas.Font.Color := clYellow;
  Canvas.Font.Size := 70;
  Canvas.TextOut(10, 140, &#39;Hello&#39;);
  
  WriteLn(&#39;Text Height of &#39;&#39;Hello&#39;&#39;: &#39; + IntToStr(Canvas.TextHeight(&#39;Hello&#39;)));
  WriteLn(&#39;Text Width of &#39;&#39;Hello&#39;&#39;:  &#39; + IntToStr(Canvas.TextWidth(&#39;Hello&#39;)));
end.[/code]

This may look like a lot, but it&#39;s all pretty simple.

First we have this:

[code]  Canvas.Font.Color := clRed;
  Canvas.Font.Size := 20;
  Canvas.TextOut(10, 10, &#39;Hello&#39;);[/code]

As you can see, we access the Font property by using Canvas.Font and then the Color property by using Font.Color, and we set that to clRed.

Then we set the Font Size by using this: Canvas.Font.Size, and we set it to 20.

Finally, we call the TextOut() procedure. This procedure calls for these parameters: x, y and str. The x and y is obviously where to start printing the text, and str is what to print. When this procedure is called, it prints the str in the Color that we defined and in the size that we defined.

The next two bits are pretty much the same:

[code]  Canvas.Font.Color := clGreen;
  Canvas.Font.Size := 40;
  Canvas.TextOut(10, 70, &#39;Hello&#39;);
  
  Canvas.Font.Color := clYellow;
  Canvas.Font.Size := 70;
  Canvas.TextOut(10, 140, &#39;Hello&#39;);[/code]

There&#39;s just some Size and Color variation so that you can see the effects.

After that we have this:

[code]  WriteLn(&#39;Text Height of &#39;&#39;Hello&#39;&#39;: &#39; + IntToStr(Canvas.TextHeight(&#39;Hello&#39;)));
  WriteLn(&#39;Text Width of &#39;&#39;Hello&#39;&#39;:  &#39; + IntToStr(Canvas.TextWidth(&#39;Hello&#39;)));[/code]

The two Text functions used in those lines are these: TextHeight() and TextWidth(). Obviously, TextHeight() returns the height of the given string depending on what the Font.Size has been set to, and TextWidth() returns the width of the given string, which also depends on what the Font.Size has been set to.

There&#39;s not much more explaining to be done about those two.

[anchor=p4][/anchor]
[center][b][size=12pt]The Pixels Property[/size][/b][/center]
[hr]
[right][iurl=#top]Back To Top[/iurl][/right]

Every canvas has a Pixels property. It&#39;s an array of every pixel, but it&#39;s not like a regular array. Here&#39;s the format:

[code]  Pixels[x, y][/code]

Here&#39;s an example script using the Pixels Property:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Pen.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

var
  i, i2: Integer;
  
begin
  Setup;
  ClearDebugWindow;

  Canvas.Pixels[10, 10] := clRed;
  Canvas.Pixels[50, 50] := clRed;
end.[/code]

First, we access the Pixels property by using Canvas.Pixels, and we select our coordinates. In the first one we&#39;ve chosen 10, 10, and we&#39;ve set that pixel to the color of clRed.

Next we select the pixel located at the coordinates of 50, 50 and also set that to clRed.

Simple enough, right?

Here&#39;s a little more complicated script:

[code]program New;

var
  Canvas: TCanvas;

procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Pen.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;

procedure Setup;
begin
  DisplayDebugImgWindow(250, 250);
  
  Canvas := GetDebugCanvas;
end;

var
  i, i2: Integer;
  
begin
  Setup;
  ClearDebugWindow;

  for i := 1 to 20 do
  begin
    i2 := 12*i;
    Canvas.Pixels[i2-1, i2-1] := clRed;
    Canvas.Pixels[i2, i2-1] := clRed;
    Canvas.Pixels[i2+1, i2-1] := clRed;
    Canvas.Pixels[i2-1, i2] := clRed;
    Canvas.Pixels[i2, i2] := clRed;
    Canvas.Pixels[i2+1, i2] := clRed;
    Canvas.Pixels[i2-1, i2+1] := clRed;
    Canvas.Pixels[i2, i2+1] := clRed;
    Canvas.Pixels[i2+1, i2+1] := clRed;
  end;
end.[/code]

What we have here is a for loop that starts at 1 and loops through 20 times. Each time it stores the value of i*12 into the &#39;i2&#39; variable. That is the coordinates for our main pixel. The 9 lines that deal with the Pixels property are just setting the Main pixel and the 8 adjacent pixels to the color of clRed. When you run this script you should see 20 red squares running diagonally top-left to bottom-right.

That&#39;s all there is to the Pixels property. :)

[hr]
[anchor=bottom][/anchor]
Well, that&#39;s as far as I&#39;m going to go with this tutorial for now, I hope you enjoyed this tutorial, and most of all, I hope you learned something :P.

Thank you for reading my tutorial,

-Weibs.</description>
    
    <lastBuildDate>Thu, 28 Dec 2006 03:55:25 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group quote-modified" data-post="6" data-topic="38475">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/user_avatar/forum.moparisthebest.com/weibs/40/367_2.png" class="avatar"> Weibs:</div>
<blockquote>
<p>All of that is already in the tut <a href="http://www.moparisthebest.com/smf/index.php/topic,54249.msg690010.html#post_p3" data-bbcode="true" rel="nofollow noopener">here</a> with the exception of the Name property, which I’ll add. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
</blockquote>
</aside>
<p><img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> i didnt see that, which is strange because i saw the pixel property after it</p>
<p>hmm, how did i miss that <img src="https://forum.moparisthebest.com/images/emoji/twitter/expressionless.png?v=6" title=":expressionless:" class="emoji" alt=":expressionless:"></p>
<p>well it happens</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/7</link>
        <pubDate>Thu, 28 Dec 2006 03:55:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-7</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@Weibs Weibs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weibs">@Weibs</a> wrote:</p>
          <blockquote>
              <p>[quote=“yakman, post:5, topic:38475”]heres something which should be included, Text and Font</p>
<p>[tut]<br>
another thing that TCanvases can do, is output text<br>
its like this<br>
[scar]<br>
GetDebugCanvas.TextOut(100,100,‘Hello World!’);<br>
[/scar]</p>
<p>this would make the words ‘Hello World!’ be written on the debug image at co-ordinates 100,100</p>
<p>the text can be manipulated with TCanvas.Font (amongst other things)</p>
<p>[scar]<br>
GetDebugCanvas.Font.Color := clRed;<br>
GetDebugCanvas.Font.Size := 10;<br>
GetDebugCanvas.Font.Name:= ‘Arial’;<br>
//all text outputted with be the font name ‘Arial’ of size 10<br>
//font name and is the same as what you get from MS Word<br>
[/scar]</p>
<p>[/tut][/quote]</p>
<p>All of that is already in the tut <a href="http://www.moparisthebest.com/smf/index.php/topic,54249.msg690010.html#post_p3" data-bbcode="true" rel="nofollow noopener">here</a> with the exception of the Name property, which I’ll add. <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=6" title=":wink:" class="emoji" alt=":wink:"></p>
<p>[quote=“yakman, post:5, topic:38475”]i think you should mention that the type TCanvas is something that in java would be called an object (i think its called component in delphi, not sure though)</p>
<p>also tell people that clRed, clWhite and all others are just Constants<br>
if you do WriteLn(InToStr(clRed)); you get 255</p>
<p>Also tell people about Pressing Ctrl+Space in SCAR --&gt;&gt; Very Useful  ;D[/quote]</p>
<p>I’ll add those 3 things, too, but right now I have to go, but I’ll add them right when I get back. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Thanks for the input!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/6</link>
        <pubDate>Thu, 28 Dec 2006 02:53:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-6</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>this looks good, my tutorial on SRL is about SCAR calls like FastDrawTransparent, this is more towards Delphi Calls</p>
<p>i used most of these on my Radial Walking Aid, MoveTo and LineTO are <span class="bbcode-b">VERY</span> useful</p>
<p>i thought of updating my tutorial over there to include these, but i wont bother now  ;D</p>
<p>i think you should mention that the type TCanvas is something that in java would be called an object (i think its called component in delphi, not sure though)</p>
<p>heres something which should be included, Text and Font</p>
<p>[tut]<br>
another thing that TCanvases can do, is output text<br>
its like this<br>
[scar]<br>
GetDebugCanvas.TextOut(100,100,‘Hello World!’);<br>
[/scar]</p>
<p>this would make the words ‘Hello World!’ be written on the debug image at co-ordinates 100,100</p>
<p>the text can be manipulated with TCanvas.Font (amongst other things)</p>
<p>[scar]<br>
GetDebugCanvas.Font.Color := clRed;<br>
GetDebugCanvas.Font.Size := 10;<br>
GetDebugCanvas.Font.Name:= ‘Arial’;<br>
//all text outputted with be the font name ‘Arial’ of size 10<br>
//font name and is the same as what you get from MS Word<br>
[/scar]</p>
<p>[/tut]</p>
<p>also tell people that clRed, clWhite and all others are just Constants<br>
if you do WriteLn(InToStr(clRed)); you get 255</p>
<p>Also tell people about Pressing Ctrl+Space in SCAR --&gt;&gt; Very Useful  ;D</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/5</link>
        <pubDate>Thu, 28 Dec 2006 00:54:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-5</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@Ron Ron]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ron">@Ron</a> wrote:</p>
          <blockquote>
              <p>Oh man this looks awesome! I’ll try it soon, but I skimmed it and I could follow this tutorial. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>Nice job.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/4</link>
        <pubDate>Wed, 27 Dec 2006 09:51:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-4</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@Weibs Weibs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weibs">@Weibs</a> wrote:</p>
          <blockquote>
              <p>Thanks, can you think of anything else to add?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/3</link>
        <pubDate>Wed, 27 Dec 2006 08:08:51 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-3</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@The_Un-Named The Un-Named]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_un-named">@The_Un-Named</a> wrote:</p>
          <blockquote>
              <p>Oh NICE Weibs!</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/2</link>
        <pubDate>Tue, 26 Dec 2006 02:15:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-2</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
      <item>
        <title>Tut on Canvases</title>
        <dc:creator><![CDATA[@Weibs Weibs]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/weibs">@Weibs</a> wrote:</p>
          <blockquote>
              <p>[anchor=top][/anchor]<br>
[center][size=20pt]Weibs’ Canvas Tutorial[/size][/center]<br>
[hr]</p>
<p><span class="bbcode-b">Note: If you find any compiling errors in the example scripts, or something that’s incorrect, or something worth noticing me about, please do tell me. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></span></p>
<p>First of all, I recommend that you read Yakman’s <a href="http://dakotastorm.sslpowered.com/villu-reborn.com/showthread.php?t=3019" data-bbcode="true" rel="nofollow noopener">Everything About Canvases</a> tutorial because he explains canvases and how they can be used very well.</p>
<p>Now, in this tutorial, you’ll learn how to use the Debug Image Window’s canvas’ properties like <span class="bbcode-b">Brush</span> and <span class="bbcode-b">Pen</span>, and the canvas procedures like <span class="bbcode-b">Rectangle</span> or <span class="bbcode-b">LineTo</span>.</p>
<p><span class="bbcode-b">Table of Contents:</span></p>
<p>[ul][<em>] [iurl=#p1]The Brush and Pen Properties, and the Rectangle Procedure[/iurl]<br>
[</em>] [iurl=#p2]The MoveTo and LineTo Procedures[/iurl]<br>
[<em>] [iurl=#p3]Text Functions and the Font Property[/iurl]<br>
[</em>] [iurl=#p4]The Pixels Property[/iurl]<br>
[*] [iurl=#bottom]Bottom[/iurl][/ul]</p>
<p>[anchor=p1][/anchor]<br>
[center]<span class="bbcode-b">[size=12pt]The Brush and Pen Properties, and the Rectangle Procedure[/size]</span>[/center]<br>
[hr]<br>
[right][iurl=#top]Back To Top[/iurl][/right]</p>
<p>First, I’ll start with a simple example script:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>begin<br>
Setup;</p>
<p>Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clRed;</p>
<p>Canvas.Rectangle(5, 5, 245, 245);<br>
end.[/code]</p>
<p>Let me break this down. First, we declared a variable:</p>
<p><code>var
  Canvas: TCanvas;</code></p>
<p>We set the variable ‘Canvas’ to the <span class="bbcode-b">TCanvas</span> type. This is the variable type that handles canvases.</p>
<p>Next, we created a Setup; procedure:</p>
<p>[code]procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;[/code]</p>
<p>This opens up the Debug Image Window, and sets our ‘Canvas’ variable to the Debug Window’s canvas, so that we can access it using the ‘Canvas’ variable from now on.</p>
<p>Finally, in the main loop, we have this:</p>
<p>[code]begin<br>
Setup;</p>
<p>Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clRed;</p>
<p>Canvas.Rectangle(5, 5, 245, 245);<br>
end.[/code]</p>
<p>This is the important part. The first line involving the canvas is this:</p>
<pre><code class="lang-auto">  Canvas.Brush.Style := bsSolid;</code></pre>
<p>The Canvas part refers to our variable that holds the Debug Window’s canvas handle. Next we access the canvas’ Brush property by using this:</p>
<pre><code class="lang-auto">  Canvas.Brush</code></pre>
<p>The brush property is pretty much self-explanatory, it’s used to paint something on the canvas.<br>
Next we access the Style property of the Brush by using this:</p>
<pre><code class="lang-auto">  Brush.Style</code></pre>
<p>The style is essentially how the brush strokes will look when the Brush is used to paint. I’ll be using <span class="bbcode-b">bsSolid</span> in this tutorial. bsSolid is exactly how it looks, it’s a solid stroke.</p>
<p>Now, after we set the Style, we need to set the Color property of our Brush, so we use this line:</p>
<pre><code class="lang-auto">  Canvas.Brush.Color := clRed;</code></pre>
<p>We access the Color property the same way we did with the Style, and we set it to <span class="bbcode-b">clRed</span>, which is one of Scar’s many color constants.</p>
<p>Finally, we have this line:</p>
<pre><code class="lang-auto">  Canvas.Rectangle(5, 5, 245, 245);</code></pre>
<p>Again, we access our Debug Image Window’s canvas by using the ‘Canvas’ variable, and then we call a painting procedure:</p>
<pre><code class="lang-auto">  Canvas.Rectangle</code></pre>
<p>This procedure will use the Brush to paint a rectangle on the Canvas. The parameters are simple. The Rectangle() procedure calls for the starting x, y coordinates and the ending x, y coordinates. So, as you can see, our procedure calls for a rectangle to be drawn starting at the coordinates of 5, 5 and ending at 245, 245.</p>
<p>Run this script and see the turnout. That wasn’t too hard, now was it?</p>
<p>Next, I’ll explain the Pen property. This example script has a few things added to it, and includes the Pen property:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>Canvas.Pen.Color := clRed;<br>
Canvas.Rectangle(5, 5, 245, 245);<br>
end.[/code]</p>
<p>Now, you’ll see a new procedure: ClearDebugWindow;</p>
<p><code>procedure ClearDebugWindow;
begin
  Canvas.Brush.Style := bsSolid;
  Canvas.Brush.Color := clBlack;
  Canvas.Rectangle(0, 0, 250, 250);
end;</code></p>
<p>All this does is overwrite any previous drawings that are still on the Debug Window by drawing a solid black rectangle around the whole canvas.</p>
<p>Now, the only other thing that’s new is the last two lines in the main loop:</p>
<p><code>  Canvas.Pen.Color := clRed;
  Canvas.Rectangle(5, 5, 245, 245);</code></p>
<p>This should look familiar, simply because it’s almost exactly the same as the Brush property.</p>
<p>First we access the Pen property by using this:</p>
<pre><code class="lang-auto">  Canvas.Pen</code></pre>
<p>And then we access the Pen’s Color property by using this:</p>
<pre><code class="lang-auto">  Pen.Color</code></pre>
<p>And we set that to clRed;. Finally, we call the exact same rectangle procedure from the first example script, but the turnout is different when using the Pen instead of the Brush, try it out and see the result.</p>
<p>As you can see, it drew a box using the Rectangle() parameters, but did not fill it in. That is exactly what the Pen is used for, drawing lines.</p>
<p>Now, we’re going to put the first example script together with the second one:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Pen.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clGray;<br>
Canvas.Pen.Color := clRed;<br>
Canvas.Rectangle(5, 5, 245, 245);<br>
end.[/code]</p>
<p>Now, we set the Brush Style to bsSolid;, the Brush Color to clGray, and the Pen Color to clRed. Now, this will draw a Rectangle just like the other two, but this stime, since we’re using the Brush and the Pen property, the turnout will be a little different. Run it.</p>
<p>You should see a Gray box with a Red outline. The Brush drew the gray box and filled it in, because we set it’s Color property to clGray and then the Pen property drew a red box around the same area, and did not fill it in.</p>
<p>That’s the basics of the Brush and Pen properties, you can mess around with those until you’re comfortable. Maybe try some different Brush styles, or different colors, just experiment.</p>
<p>[anchor=p2][/anchor]<br>
[center]<span class="bbcode-b">[size=12pt]The MoveTo and LineTo Procedures[/size]</span>[/center]<br>
[hr]<br>
[right][iurl=#top]Back To Top[/iurl][/right]</p>
<p>The next two procedures I’ll be explaining go hand-in-hand.</p>
<p>Here’s an example script:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Pen.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>Canvas.Pen.Color := clRed;<br>
Canvas.MoveTo(10, 10);<br>
Canvas.LineTo(100, 100);<br>
end.[/code]</p>
<p>Now, everything is the same, except for the main loop. Here we set the Pen Color to clRed because the LineTo procedure uses the pen to draw the line.</p>
<p>So, after we set the Pen Color, we use the MoveTo() procedure:</p>
<pre><code class="lang-auto">  Canvas.MoveTo(10, 10);</code></pre>
<p>This procedure is sort of hard to explain. First, you should know, the canvas has its own coordinates. So the MoveTo(x, y) procedure sort of sets the current coordinate to x, y. Therefore, by using MoveTo(10, 10), we set the current coordinate to 10, 10. This is important for the use of the LineTo() procedure.</p>
<p>Next we call the LineTo() procedure:</p>
<pre><code class="lang-auto">  Canvas.LineTo(100, 100);</code></pre>
<p>This draws a line, starting at the current canvas coordinate (Set by the MoveTo() procedure) and ending at the given coordinates. So this example script should draw a diagonal line from 10, 10 to 100, 100.</p>
<p>Simple. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:">  So that’s pretty much all there is to MoveTo and LineTo.</p>
<p>[anchor=p3][/anchor]<br>
[center]<span class="bbcode-b">[size=12pt]Text Functions and the Font Property[/size]</span>[/center]<br>
[hr]<br>
[right][iurl=#top]Back To Top[/iurl][/right]</p>
<p>There’s two main Font Properties: Color and Size. There’s also a Height property for Font, which is basically the same as size.</p>
<p>Then, there’s two Text Functions: TextWidth() and TextHeight(), and there’s one Text Procedure: TextOut().</p>
<p>All of these things will be covered in this section.<br>
Here’s an example script using the Text functions and Font Properties:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Pen.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>Canvas.Font.Color := clRed;<br>
Canvas.Font.Size := 20;<br>
Canvas.TextOut(10, 10, ‘Hello’);</p>
<p>Canvas.Font.Color := clGreen;<br>
Canvas.Font.Size := 40;<br>
Canvas.TextOut(10, 70, ‘Hello’);</p>
<p>Canvas.Font.Color := clYellow;<br>
Canvas.Font.Size := 70;<br>
Canvas.TextOut(10, 140, ‘Hello’);</p>
<p>WriteLn('Text Height of ‘‘Hello’’: ’ + IntToStr(Canvas.TextHeight(‘Hello’)));<br>
WriteLn('Text Width of ‘‘Hello’’:  ’ + IntToStr(Canvas.TextWidth(‘Hello’)));<br>
end.[/code]</p>
<p>This may look like a lot, but it’s all pretty simple.</p>
<p>First we have this:</p>
<p><code>  Canvas.Font.Color := clRed;
  Canvas.Font.Size := 20;
  Canvas.TextOut(10, 10, 'Hello');</code></p>
<p>As you can see, we access the Font property by using Canvas.Font and then the Color property by using Font.Color, and we set that to clRed.</p>
<p>Then we set the Font Size by using this: Canvas.Font.Size, and we set it to 20.</p>
<p>Finally, we call the TextOut() procedure. This procedure calls for these parameters: x, y and str. The x and y is obviously where to start printing the text, and str is what to print. When this procedure is called, it prints the str in the Color that we defined and in the size that we defined.</p>
<p>The next two bits are pretty much the same:</p>
<p>[code]  Canvas.Font.Color := clGreen;<br>
Canvas.Font.Size := 40;<br>
Canvas.TextOut(10, 70, ‘Hello’);</p>
<p>Canvas.Font.Color := clYellow;<br>
Canvas.Font.Size := 70;<br>
Canvas.TextOut(10, 140, ‘Hello’);[/code]</p>
<p>There’s just some Size and Color variation so that you can see the effects.</p>
<p>After that we have this:</p>
<p><code>  WriteLn('Text Height of ''Hello'': ' + IntToStr(Canvas.TextHeight('Hello')));
  WriteLn('Text Width of ''Hello'':  ' + IntToStr(Canvas.TextWidth('Hello')));</code></p>
<p>The two Text functions used in those lines are these: TextHeight() and TextWidth(). Obviously, TextHeight() returns the height of the given string depending on what the Font.Size has been set to, and TextWidth() returns the width of the given string, which also depends on what the Font.Size has been set to.</p>
<p>There’s not much more explaining to be done about those two.</p>
<p>[anchor=p4][/anchor]<br>
[center]<span class="bbcode-b">[size=12pt]The Pixels Property[/size]</span>[/center]<br>
[hr]<br>
[right][iurl=#top]Back To Top[/iurl][/right]</p>
<p>Every canvas has a Pixels property. It’s an array of every pixel, but it’s not like a regular array. Here’s the format:</p>
<pre><code class="lang-auto">  Pixels[x, y]</code></pre>
<p>Here’s an example script using the Pixels Property:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Pen.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>var<br>
i, i2: Integer;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>Canvas.Pixels[10, 10] := clRed;<br>
Canvas.Pixels[50, 50] := clRed;<br>
end.[/code]</p>
<p>First, we access the Pixels property by using Canvas.Pixels, and we select our coordinates. In the first one we’ve chosen 10, 10, and we’ve set that pixel to the color of clRed.</p>
<p>Next we select the pixel located at the coordinates of 50, 50 and also set that to clRed.</p>
<p>Simple enough, right?</p>
<p>Here’s a little more complicated script:</p>
<p>[code]program New;</p>
<p>var<br>
Canvas: TCanvas;</p>
<p>procedure ClearDebugWindow;<br>
begin<br>
Canvas.Brush.Style := bsSolid;<br>
Canvas.Brush.Color := clBlack;<br>
Canvas.Pen.Color := clBlack;<br>
Canvas.Rectangle(0, 0, 250, 250);<br>
end;</p>
<p>procedure Setup;<br>
begin<br>
DisplayDebugImgWindow(250, 250);</p>
<p>Canvas := GetDebugCanvas;<br>
end;</p>
<p>var<br>
i, i2: Integer;</p>
<p>begin<br>
Setup;<br>
ClearDebugWindow;</p>
<p>for i := 1 to 20 do<br>
begin<br>
i2 := 12*i;<br>
Canvas.Pixels[i2-1, i2-1] := clRed;<br>
Canvas.Pixels[i2, i2-1] := clRed;<br>
Canvas.Pixels[i2+1, i2-1] := clRed;<br>
Canvas.Pixels[i2-1, i2] := clRed;<br>
Canvas.Pixels[i2, i2] := clRed;<br>
Canvas.Pixels[i2+1, i2] := clRed;<br>
Canvas.Pixels[i2-1, i2+1] := clRed;<br>
Canvas.Pixels[i2, i2+1] := clRed;<br>
Canvas.Pixels[i2+1, i2+1] := clRed;<br>
end;<br>
end.[/code]</p>
<p>What we have here is a for loop that starts at 1 and loops through 20 times. Each time it stores the value of i*12 into the ‘i2’ variable. That is the coordinates for our main pixel. The 9 lines that deal with the Pixels property are just setting the Main pixel and the 8 adjacent pixels to the color of clRed. When you run this script you should see 20 red squares running diagonally top-left to bottom-right.</p>
<p>That’s all there is to the Pixels property. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[hr]<br>
[anchor=bottom][/anchor]<br>
Well, that’s as far as I’m going to go with this tutorial for now, I hope you enjoyed this tutorial, and most of all, I hope you learned something :P.</p>
<p>Thank you for reading my tutorial,</p>
<p>-Weibs.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/tut-on-canvases/38475/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/tut-on-canvases/38475/1</link>
        <pubDate>Sat, 23 Dec 2006 11:28:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-38475-1</guid>
        <source url="https://forum.moparisthebest.com/t/tut-on-canvases/38475.rss">Tut on Canvases</source>
      </item>
  </channel>
</rss>
