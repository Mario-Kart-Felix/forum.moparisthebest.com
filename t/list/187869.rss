<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>List</title>
    <link>https://forum.moparisthebest.com/t/list/187869</link>
    <description>Hey, I was just foolin&#39; around with linked lists and I came up with a model that made me especially cream myself, and just thought it might be of some interest to you java cats. It uses no external libraries.

[code]public class List&lt;T&gt; {
  private Node&lt;T&gt; head, current;

  public void add(T t) {
    if(head == null)
      head = current = new Node&lt;T&gt;(t);
    else {
      Node&lt;T&gt; n = current;
      current = new Node&lt;T&gt;(t);
      current.previous = n;
    }
  }

  public T first() {
    return head != null ? head.t : null;
  }

  public T last() {
    return current != null ? current.t : null;
  }

  public T removeFirst() {
    if(head == null)
      return null;
    if(current.previous == null) {
      Node&lt;T&gt; n = head;
      head = null;
      current = null;
      return n.t;
    }
    Node&lt;T&gt; n = current;
    for(; n.previous.previous != null; n = n.previous);
    T t = head.t;
    head = n;
    head.previous = null;
    return t;
  }

  public T removeLast() {
    if(head == null)
      return null;
    if(current.previous == null) {
      Node&lt;T&gt; n = head;
      head = null;
      current = null;
      return n.t;
    }
    Node&lt;T&gt; n = current;
    current = current.previous;
    return n.t;
  }

  public boolean has() {
    return head != null;
  }

  private static class Node&lt;T&gt; {
    Node&lt;T&gt; previous;
    T t;

    Node(T t) {
      this.t = t;
    }
  }
}[/code]</description>
    
    <lastBuildDate>Wed, 12 Mar 2008 21:15:55 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/list/187869.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>List</title>
        <dc:creator><![CDATA[@super_OLDACCOUNT super_OLDACCOUNT]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/super_oldaccount">@super_OLDACCOUNT</a> wrote:</p>
          <blockquote>
              <p>give it an Iterator implementation, and change it to conform to the Collection specification (aka implement Collection)</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/list/187869/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/list/187869/4</link>
        <pubDate>Wed, 12 Mar 2008 21:15:55 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-187869-4</guid>
        <source url="https://forum.moparisthebest.com/t/list/187869.rss">List</source>
      </item>
      <item>
        <title>List</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>its not so much a list as a deque</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/list/187869/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/list/187869/3</link>
        <pubDate>Mon, 10 Mar 2008 04:23:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-187869-3</guid>
        <source url="https://forum.moparisthebest.com/t/list/187869.rss">List</source>
      </item>
      <item>
        <title>List</title>
        <dc:creator><![CDATA[@BAsh_CntLgn BAsh(CntLgn)]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash_cntlgn">@BAsh_CntLgn</a> wrote:</p>
          <blockquote>
              <p>Its a singly linked list. Given how few times people iterate backwards through the list its certainly a memory optimization. You just need to add some code allowing you to loop through it with an iterator.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/list/187869/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/list/187869/2</link>
        <pubDate>Mon, 10 Mar 2008 02:59:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-187869-2</guid>
        <source url="https://forum.moparisthebest.com/t/list/187869.rss">List</source>
      </item>
      <item>
        <title>List</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>Hey, I was just foolinâ€™ around with linked lists and I came up with a model that made me especially cream myself, and just thought it might be of some interest to you java cats. It uses no external libraries.</p>
<p>[code]public class List {<br>
private Node head, current;</p>
<p>public void add(T t) {<br>
if(head == null)<br>
head = current = new Node(t);<br>
else {<br>
Node n = current;<br>
current = new Node(t);<br>
current.previous = n;<br>
}<br>
}</p>
<p>public T first() {<br>
return head != null ? head.t : null;<br>
}</p>
<p>public T last() {<br>
return current != null ? current.t : null;<br>
}</p>
<p>public T removeFirst() {<br>
if(head == null)<br>
return null;<br>
if(current.previous == null) {<br>
Node n = head;<br>
head = null;<br>
current = null;<br>
return n.t;<br>
}<br>
Node n = current;<br>
for(; n.previous.previous != null; n = n.previous);<br>
T t = head.t;<br>
head = n;<br>
head.previous = null;<br>
return t;<br>
}</p>
<p>public T removeLast() {<br>
if(head == null)<br>
return null;<br>
if(current.previous == null) {<br>
Node n = head;<br>
head = null;<br>
current = null;<br>
return n.t;<br>
}<br>
Node n = current;<br>
current = current.previous;<br>
return n.t;<br>
}</p>
<p>public boolean has() {<br>
return head != null;<br>
}</p>
<p>private static class Node {<br>
Node previous;<br>
T t;</p>
<pre><code>Node(T t) {
  this.t = t;
}
</code></pre>
<p>}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/list/187869/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/list/187869/1</link>
        <pubDate>Mon, 10 Mar 2008 02:12:58 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-187869-1</guid>
        <source url="https://forum.moparisthebest.com/t/list/187869.rss">List</source>
      </item>
  </channel>
</rss>
