<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>How to create user accounts and help with PlayerSave.java</title>
    <link>https://forum.moparisthebest.com/t/how-to-create-user-accounts-and-help-with-playersave-java/553396</link>
    <description>I tried creating characters in the character folder but when i try to login with the username and password it says its invalid can anyone help me with this???? 317 server

[code]package server.model.players;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;

import server.Server;
import server.util.Misc;

public class PlayerSave
{

	
	
	/**
	*Loading
	**/
	public static int loadGame(Client p, String playerName, String playerPass) {
		String line = &quot;&quot;;
		String token = &quot;&quot;;
		String token2 = &quot;&quot;;
		String[] token3 = new String[3];
		boolean EndOfFile = false;
		int ReadMode = 0;
		BufferedReader characterfile = null;
		boolean File1 = false;
		
		try {
			characterfile = new BufferedReader(new FileReader(&quot;./characters/&quot;+playerName+&quot;.txt&quot;));
			File1 = true;
		} catch(FileNotFoundException fileex1) {
		}
		
		if (File1) {
			//new File (&quot;./characters/&quot;+playerName+&quot;.txt&quot;);
		} else {
			Misc.println(playerName+&quot;: character file not found.&quot;);
			p.newPlayer = false;
			return 0;
		}
		try {
			line = characterfile.readLine();
		} catch(IOException ioexception) {
			Misc.println(playerName+&quot;: error loading file.&quot;);
			return 3;
		}
		while(EndOfFile == false &amp;&amp; line != null) {
			line = line.trim();
			int spot = line.indexOf(&quot;=&quot;);
			if (spot &gt; -1) {
				token = line.substring(0, spot);
				token = token.trim();
				token2 = line.substring(spot + 1);
				token2 = token2.trim();
				token3 = token2.split(&quot;\t&quot;);
				switch (ReadMode) {
				case 1:
					 if (token.equals(&quot;character-password&quot;)) {
						if (playerPass.equalsIgnoreCase(token2) || Misc.basicEncrypt(playerPass).equals(token2)) {
							playerPass = token2;
						} else {
							return 3;
						}
					}
					break;
				case 2:
					if (token.equals(&quot;character-height&quot;)) {
						p.heightLevel = Integer.parseInt(token2);
					} else if (token.equals(&quot;character-posx&quot;)) {
						p.teleportToX = (Integer.parseInt(token2) &lt;= 0 ? 3210 : Integer.parseInt(token2));
					} else if (token.equals(&quot;character-posy&quot;)) {
						p.teleportToY = (Integer.parseInt(token2) &lt;= 0 ? 3424 : Integer.parseInt(token2));
					} else if (token.equals(&quot;character-rights&quot;)) {
						p.playerRights = Integer.parseInt(token2);
					} else if (token.equals(&quot;dungPoints&quot;)) {
						p.dungPoints = Integer.parseInt(token2);
                    			} else if (token.equals(&quot;Used-Puremaster&quot;)) {
                        			p.pure = Integer.parseInt(token2);
					} else if (token.equals(&quot;tutorial-progress&quot;)) {
						p.tutorial = Integer.parseInt(token2);	
					} else if (token.equals(&quot;skull-timer&quot;)) {
						p.skullTimer = Integer.parseInt(token2);
					} else if (token.equals(&quot;EP&quot;)) {
						p.earningPotential = Integer.parseInt(token2);
                   } else if (token.equals(&quot;character-longsword&quot;)) {
                        p.vlsLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-warhammer&quot;)) {
                        p.statLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-spear&quot;)) {
                        p.vSpearLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-chainbody&quot;)) {
                        p.vTopLeft = Integer.parseInt(token2);
					} else if (token.equals(&quot;shopcollect&quot;)) {
						p.playerCollect = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-chainskirt&quot;)) {
                        p.vLegsLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-full helm&quot;)) {
                        p.sHelmLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-platebody&quot;)) {
                        p.sTopLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-platelegs&quot;)) {
                        p.sLegsLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-hood&quot;)) {
                        p.zHoodLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-staff&quot;)) {
                        p.zStaffLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-robe top&quot;)) {
                        p.zTopLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-robe bottom&quot;)) {
                        p.zBottomLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-leather body&quot;)) {
                        p.mBodyLeft = Integer.parseInt(token2);
                    } else if (token.equals(&quot;character-chaps&quot;)) {
                        p.mChapsLeft = Integer.parseInt(token2);
					} else if (token.equals(&quot;magic-book&quot;)) {
						p.playerMagicBook = Integer.parseInt(token2);
					} else if (token.equals(&quot;xpLock&quot;)) {
						p.xpLock = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;Jailed&quot;)) {
						p.Jail = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;Agrith&quot;)) {
						p.Agrith = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;degrade&quot;)) {
					        p.degradeTime = Integer.parseInt(token2); 
					} else if (token.equals(&quot;Flambeed&quot;)) {
						p.Flambeed = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;Karamel&quot;)) {
						p.Karamel = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;Dessourt&quot;)) {
						p.Dessourt = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;culin&quot;)) {
						p.Culin = Boolean.parseBoolean(token2);		
					} else if (token.equals(&quot;brother-info&quot;)) {
						p.barrowsNpcs[Integer.parseInt(token3[0])][1] = Integer.parseInt(token3[1]);
					 } else if (token.equals(&quot;special-amount&quot;)) {
						p.specAmount = Double.parseDouble(token2);	
					 } else if (token.equals(&quot;selected-coffin&quot;)) {
						p.randomCoffin = Integer.parseInt(token2);	
					} else if (token.equals(&quot;barrows-killcount&quot;)) {
						p.pkPoints = Integer.parseInt(token2);							
					} else if (token.equals(&quot;teleblock-length&quot;)) {
						p.teleBlockDelay = System.currentTimeMillis();
						p.teleBlockLength = Integer.parseInt(token2);							
					} else if (token.equals(&quot;pc-points&quot;)) {
						p.pcPoints = Integer.parseInt(token2);	
					} else if (token.equals(&quot;isHelper&quot;)) {
                        p.isDonator = Integer.parseInt(token2);	
					} else if (token.equals(&quot;gwdelay&quot;)) {
						p.gwdelay = Integer.parseInt(token2);
					} else if (token.equals(&quot;summonSpec&quot;)) {
						p.summonSpec = Integer.parseInt(token2);
						} else if (token.equals(&quot;dungRest&quot;)) {
						p.dungRest = Integer.parseInt(token2);
					} else if (token.equals(&quot;Altar&quot;)) {
						p.altarPrayed = Integer.parseInt(token2);
					} else if (token.equals(&quot;Arma-KC&quot;)) {
						p.Arma = Integer.parseInt(token2);	
					} else if (token.equals(&quot;Band-KC&quot;)) {
						p.Band = Integer.parseInt(token2);	
					} else if (token.equals(&quot;Zammy-KC&quot;)) {
						p.Zammy = Integer.parseInt(token2);	
					} else if (token.equals(&quot;Sara-KC&quot;)) {
						p.Sara = Integer.parseInt(token2);	
					} else if (token.equals(&quot;pk-points&quot;)) {
						p.pkPoints = Integer.parseInt(token2);	
					} else if (token.equals(&quot;isDonator&quot;)) {
						p.isDonator = Integer.parseInt(token2);
					} else if (token.equals(&quot;donatorChest&quot;)) {
						p.donatorChest = Integer.parseInt(token2);						
					} else if (token.equals(&quot;slayerTask&quot;)) {
						p.slayerTask = Integer.parseInt(token2);					
					} else if (token.equals(&quot;taskAmount&quot;)) {
						p.taskAmount = Integer.parseInt(token2);					
					} else if (token.equals(&quot;magePoints&quot;)) {
						p.magePoints = Integer.parseInt(token2);
					} else if (line.startsWith(&quot;KC&quot;)) {
						p.KC = Integer.parseInt(token2);
					} else if (line.startsWith(&quot;DC&quot;)) {
						p.DC = Integer.parseInt(token2);
					} else if (line.startsWith(&quot;totalstored&quot;)) {
						p.totalstored = Integer.parseInt(token2);
					} else if (token.equals(&quot;autoRet&quot;)) {
						p.autoRet = Integer.parseInt(token2);
					} else if (token.equals(&quot;trade11&quot;)) {
						p.trade11 = Integer.parseInt(token2);
					} else if (token.equals(&quot;SpeDelay&quot;)) {
						p.SpecialDelay = Integer.parseInt(token2);
					} else if (token.equals(&quot;barrowskillcount&quot;)) {
						p.barrowsKillCount = Integer.parseInt(token2);
					} else if (token.equals(&quot;flagged&quot;)) {
						p.accountFlagged = Boolean.parseBoolean(token2);
					} else if (token.equals(&quot;Rules&quot;)) {
						p.readRules = Boolean.parseBoolean(token2);
											} else if (token.equals(&quot;isShopping&quot;)) {
						p.isShopping = Boolean.parseBoolean(token2);
							} else if (token.equals(&quot;SPoints&quot;)) {
						p.SPoints = Integer.parseInt(token2);
					} else if (token.equals(&quot;wave&quot;)) {
						p.waveId = Integer.parseInt(token2);
} else if (token.equals(&quot;dfs-charges&quot;)) {
						p.dfsCount = Integer.parseInt(token2);
					} else if (token.equals(&quot;lastsummon&quot;)) {
						p.lastsummon = Integer.parseInt(token2);

					} else if (token.equals(&quot;summoningnpcid&quot;)) {
						p.summoningnpcid = Integer.parseInt(token2);

					} else if (token.equals(&quot;void&quot;)) {
						for (int j = 0; j &lt; token3.length; j++) {
							p.voidStatus[j] = Integer.parseInt(token3[j]);						
						}
					} else if (token.equals(&quot;fightMode&quot;)) {
						p.fightMode = Integer.parseInt(token2);
					
					} else if (token.equals(&quot;Black-marks&quot;)) {
						p.BlackMarks = Integer.parseInt(token2);
					}
					break;
				case 3:
					if (token.equals(&quot;character-equip&quot;)) {
						p.playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 4:
					if (token.equals(&quot;character-look&quot;)) {
						p.playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					} 
					break;
				case 5:
					if (token.equals(&quot;character-skill&quot;)) {
						p.playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 6:
					if (token.equals(&quot;character-item&quot;)) {
						p.playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 7:
					if (token.equals(&quot;character-bank&quot;)) {
						p.bankItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
						p.bankItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
					}
					break;
				case 8:
					 if (token.equals(&quot;character-friend&quot;)) {
						p.friends[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
					} 
					break;
				case 9:
					/* if (token.equals(&quot;character-ignore&quot;)) {
						ignores[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
					} */
					break;
				case 20:
					if (token.equals(&quot;stored&quot;)) {
						p.storeditems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					}
					break;

				case 21:
					 if (token.equals(&quot;occupy&quot;)) {
						p.occupied[Integer.parseInt(token3[0])] = Boolean.parseBoolean(token3[1]);
					} 
					break;
				case 10:
		if (token.equals(&quot;character-shop&quot;)) {
			p.playerShop[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
			p.playerShopP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
			p.playerShopN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[3]);
		} 
	break;
				}
			} else {
				if (line.equals(&quot;[ACCOUNT]&quot;)) {		ReadMode = 1;
				} else if (line.equals(&quot;[CHARACTER]&quot;)) {	ReadMode = 2;
				} else if (line.equals(&quot;[EQUIPMENT]&quot;)) {	ReadMode = 3;
				} else if (line.equals(&quot;[LOOK]&quot;)) {		ReadMode = 4;
				} else if (line.equals(&quot;[SKILLS]&quot;)) {		ReadMode = 5;
				} else if (line.equals(&quot;[ITEMS]&quot;)) {		ReadMode = 6;
				} else if (line.equals(&quot;[BANK]&quot;)) {		ReadMode = 7;
				} else if (line.equals(&quot;[FRIENDS]&quot;)) {		ReadMode = 8;
				} else if (line.equals(&quot;[IGNORES]&quot;)) {		ReadMode = 9;
} else if (line.equals(&quot;[STORED]&quot;)) {		ReadMode = 20;
} else if (line.equals(&quot;[OCCUPY]&quot;)) {		ReadMode = 21;
} else if (line.equals(&quot;[SHOP]&quot;)) {		ReadMode = 10;
				} else if (line.equals(&quot;[EOF]&quot;)) {		try { characterfile.close(); } catch(IOException ioexception) { } return 1;
				}
			}
			try {
				line = characterfile.readLine();
			} catch(IOException ioexception1) { EndOfFile = true; }
		}
		try { characterfile.close(); } catch(IOException ioexception) { }
		return 13;
	}
	
	
	
	
	/**
	*Saving
	**/
	public static boolean saveGame(Client p) {
		if(!p.saveFile || p.newPlayer || !p.saveCharacter) {
			//System.out.println(&quot;first&quot;);
			return false;
		}
		if(p.playerName == null || Server.playerHandler.players[p.playerId] == null) {
			//System.out.println(&quot;second&quot;);
			return false;
		}
		p.playerName = p.playerName2;
		int tbTime = (int)(p.teleBlockDelay - System.currentTimeMillis() + p.teleBlockLength);
		if(tbTime &gt; 300000 || tbTime &lt; 0){
			tbTime = 0;
		}
		
		BufferedWriter characterfile = null;
		try {
			characterfile = new BufferedWriter(new FileWriter(&quot;./characters/&quot;+p.playerName+&quot;.txt&quot;));
			
			/*ACCOUNT*/
			characterfile.write(&quot;[ACCOUNT]&quot;, 0, 9);
			characterfile.newLine();
			characterfile.write(&quot;character-username = &quot;, 0, 21);
			characterfile.write(p.playerName, 0, p.playerName.length());
			characterfile.newLine();
			characterfile.write(&quot;character-password = &quot;, 0, 21);
			characterfile.write(p.playerPass, 0, p.playerPass.length());
			characterfile.newLine();
			characterfile.newLine();
			characterfile.write(&quot;KC = &quot;, 0, 4);
			characterfile.write(Integer.toString(p.KC), 0, Integer.toString(p.KC).length());
			characterfile.newLine();
			characterfile.write(&quot;DC = &quot;, 0, 4);
			characterfile.write(Integer.toString(p.DC), 0, Integer.toString(p.DC).length());
			characterfile.newLine();
			
			/*CHARACTER*/
			characterfile.write(&quot;[CHARACTER]&quot;, 0, 11);
			characterfile.newLine();
			characterfile.write(&quot;character-height = &quot;, 0, 19);
			characterfile.write(Integer.toString(p.heightLevel), 0, Integer.toString(p.heightLevel).length());
			characterfile.newLine();

			characterfile.write(&quot;character-posx = &quot;, 0, 17);
			characterfile.write(Integer.toString(p.absX), 0, Integer.toString(p.absX).length());
			characterfile.newLine();
			characterfile.write(&quot;character-posy = &quot;, 0, 17);
			characterfile.write(Integer.toString(p.absY), 0, Integer.toString(p.absY).length());
			characterfile.newLine();
			characterfile.write(&quot;character-rights = &quot;, 0, 19);
			characterfile.write(Integer.toString(p.playerRights), 0, Integer.toString(p.playerRights).length());
			characterfile.newLine();
			characterfile.write(&quot;shopcollect = &quot;, 0, 14);
			characterfile.write(Integer.toString(p.playerCollect), 0, Integer.toString(p.playerCollect).length());
			characterfile.newLine();
			characterfile.write(&quot;dungPoints = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());
			characterfile.newLine();
			characterfile.write(&quot;crystal-bow-shots = &quot;, 0, 20);
			characterfile.write(Integer.toString(p.crystalBowArrowCount), 0, Integer.toString(p.crystalBowArrowCount).length());
			characterfile.newLine();
			characterfile.write(&quot;VLS-hits = &quot;, 0, 11);
			characterfile.write(Integer.toString(p.degradeTime), 0, Integer.toString(p.degradeTime).length());
			/*characterfile.newLine();
			characterfile.write(&quot;dungPoints = &quot;, 0, 20);
			characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());*/
			characterfile.newLine(); 
			characterfile.write(&quot;skull-timer = &quot;, 0, 14);
			characterfile.write(Integer.toString(p.skullTimer), 0, Integer.toString(p.skullTimer).length());
			characterfile.newLine();
			characterfile.write(&quot;EP = &quot;, 0, 5);
			characterfile.write(Integer.toString(p.earningPotential), 0, Integer.toString(p.earningPotential).length());
			characterfile.newLine();
                 characterfile.write(&quot;character-longsword = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.vlsLeft), 0, Integer.toString(p.vlsLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-warhammer = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.statLeft), 0, Integer.toString(p.statLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-spear = &quot;, 0, 18);
                  characterfile.write(Integer.toString(p.vSpearLeft), 0, Integer.toString(p.vSpearLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-chainbody = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.vTopLeft), 0, Integer.toString(p.vTopLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-chainskirt = &quot;, 0, 23);
                  characterfile.write(Integer.toString(p.vLegsLeft), 0, Integer.toString(p.vLegsLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-full helm = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.sHelmLeft), 0, Integer.toString(p.sHelmLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-platebody = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.sTopLeft), 0, Integer.toString(p.sTopLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-platelegs = &quot;, 0, 22);
                  characterfile.write(Integer.toString(p.sLegsLeft), 0, Integer.toString(p.sLegsLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-hood = &quot;, 0, 17);
                  characterfile.write(Integer.toString(p.zHoodLeft), 0, Integer.toString(p.zHoodLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-staff = &quot;, 0, 18);
                  characterfile.write(Integer.toString(p.zStaffLeft), 0, Integer.toString(p.zStaffLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-robe top = &quot;, 0, 21);
                  characterfile.write(Integer.toString(p.zTopLeft), 0, Integer.toString(p.zTopLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-robe bottom = &quot;, 0, 24);
                  characterfile.write(Integer.toString(p.zBottomLeft), 0, Integer.toString(p.zBottomLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-leather body = &quot;, 0, 25);
                  characterfile.write(Integer.toString(p.mBodyLeft), 0, Integer.toString(p.mBodyLeft).length());
                  characterfile.newLine();
                  characterfile.write(&quot;character-chaps = &quot;, 0, 18);
                  characterfile.write(Integer.toString(p.mChapsLeft), 0, Integer.toString(p.mChapsLeft).length());
                  characterfile.newLine();
			characterfile.write(&quot;magic-book = &quot;, 0, 13);
			characterfile.write(Integer.toString(p.playerMagicBook), 0, Integer.toString(p.playerMagicBook).length());
			characterfile.newLine();
			for (int b = 0; b &lt; p.barrowsNpcs.length; b++) {
				characterfile.write(&quot;brother-info = &quot;, 0, 15);
				characterfile.write(Integer.toString(b), 0, Integer.toString(b).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(p.barrowsNpcs[b][1] &lt;= 1 ? Integer.toString(0) : Integer.toString(p.barrowsNpcs[b][1]), 0, Integer.toString(p.barrowsNpcs[b][1]).length());
				characterfile.newLine();
			}	
			characterfile.write(&quot;special-amount = &quot;, 0, 17);
			characterfile.write(Double.toString(p.specAmount), 0, Double.toString(p.specAmount).length());
			characterfile.newLine();
			characterfile.write(&quot;selected-coffin = &quot;, 0, 18);
			characterfile.write(Integer.toString(p.randomCoffin), 0, Integer.toString(p.randomCoffin).length());
			characterfile.newLine();
			characterfile.write(&quot;barrows-killcount = &quot;, 0, 20);
			characterfile.write(Integer.toString(p.barrowsKillCount), 0, Integer.toString(p.barrowsKillCount).length());
			characterfile.newLine();
			characterfile.write(&quot;teleblock-length = &quot;, 0, 19);
			characterfile.write(Integer.toString(tbTime), 0, Integer.toString(tbTime).length());
			characterfile.newLine();
			characterfile.write(&quot;pc-points = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.pcPoints), 0, Integer.toString(p.pcPoints).length());
			characterfile.newLine();
			characterfile.write(&quot;isHelper = &quot;, 0, 12);
            characterfile.write(Integer.toString(p.isDonator), 0, Integer.toString(p.isDonator).length());
            characterfile.newLine();
			characterfile.write(&quot;gwdelay = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.gwdelay), 0, Integer.toString(p.gwdelay).length());
			characterfile.newLine();
			characterfile.write(&quot;summonSpec = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.summonSpec), 0, Integer.toString(p.summonSpec).length());
			characterfile.newLine();
			characterfile.write(&quot;dungRest = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.dungRest), 0, Integer.toString(p.dungRest).length());
			characterfile.newLine();
			characterfile.write(&quot;Altar = &quot;, 0, 8);
			characterfile.write(Integer.toString(p.altarPrayed), 0, Integer.toString(p.altarPrayed).length());
			characterfile.newLine();
			characterfile.write(&quot;Arma-KC = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.Arma), 0, Integer.toString(p.Arma).length());
			characterfile.newLine();
			characterfile.write(&quot;Band-KC = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.Band), 0, Integer.toString(p.Band).length());
			characterfile.newLine();
			characterfile.write(&quot;Zammy-KC = &quot;, 0, 11);
			characterfile.write(Integer.toString(p.Zammy), 0, Integer.toString(p.Zammy).length());
			characterfile.newLine();
			characterfile.write(&quot;Sara-KC = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.Sara), 0, Integer.toString(p.Sara).length());
			characterfile.newLine();
			characterfile.newLine();
			characterfile.write(&quot;pk-points = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.pkPoints), 0, Integer.toString(p.pkPoints).length());
			characterfile.newLine();
			characterfile.newLine();
			characterfile.write(&quot;isDonator = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.isDonator), 0, Integer.toString(p.isDonator).length());
			characterfile.newLine();
			characterfile.write(&quot;donatorChest = &quot;, 0, 15);
			characterfile.write(Integer.toString(p.donatorChest), 0, Integer.toString(p.donatorChest).length());
			characterfile.newLine();
			characterfile.write(&quot;slayerTask = &quot;, 0, 13);
			characterfile.write(Integer.toString(p.slayerTask), 0, Integer.toString(p.slayerTask).length());
			characterfile.newLine();
			characterfile.write(&quot;xpLock = &quot;, 0, 9);
			characterfile.write(Boolean.toString(p.xpLock), 0, Boolean.toString(p.xpLock).length());
			characterfile.newLine();
			characterfile.write(&quot;Agrith = &quot;, 0, 9);
			characterfile.write(Boolean.toString(p.Agrith), 0, Boolean.toString(p.Agrith).length());
			characterfile.newLine();
			characterfile.write(&quot;Flambeed = &quot;, 0, 11);
			characterfile.write(Boolean.toString(p.Flambeed), 0, Boolean.toString(p.Flambeed).length());
			characterfile.newLine();
			characterfile.write(&quot;Karamel = &quot;, 0, 10);
			characterfile.write(Boolean.toString(p.Karamel), 0, Boolean.toString(p.Karamel).length());
			characterfile.newLine();
			characterfile.write(&quot;Dessourt = &quot;, 0, 11);
			characterfile.write(Boolean.toString(p.Dessourt), 0, Boolean.toString(p.Dessourt).length());
			characterfile.newLine();
			characterfile.write(&quot;culin = &quot;, 0, 8);
			characterfile.write(Boolean.toString(p.Culin), 0, Boolean.toString(p.Culin).length());
			characterfile.newLine();
			characterfile.write(&quot;taskAmount = &quot;, 0, 13);
			characterfile.write(Integer.toString(p.taskAmount), 0, Integer.toString(p.taskAmount).length());
			characterfile.newLine();
			characterfile.write(&quot;magePoints = &quot;, 0, 13);
			characterfile.write(Integer.toString(p.magePoints), 0, Integer.toString(p.magePoints).length());
			characterfile.newLine();
			characterfile.write(&quot;KC = &quot;, 0, 4);
			characterfile.write(Integer.toString(p.KC), 0, Integer.toString(p.KC).length());
			characterfile.newLine();
			characterfile.write(&quot;DC = &quot;, 0, 4);
			characterfile.write(Integer.toString(p.DC), 0, Integer.toString(p.DC).length());
			characterfile.newLine();
			characterfile.write(&quot;totalstored = &quot;, 0, 14);
			characterfile.write(Integer.toString(p.totalstored), 0, Integer.toString(p.totalstored).length());
			characterfile.newLine();
			characterfile.write(&quot;autoRet = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.autoRet), 0, Integer.toString(p.autoRet).length());
			characterfile.newLine();
			characterfile.write(&quot;trade11 = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.trade11), 0, Integer.toString(p.trade11).length());
			characterfile.newLine();
			characterfile.write(&quot;SpeDelay = &quot;, 0, 11);
			characterfile.write(Long.toString(p.SpecialDelay), 0, Long.toString(p.SpecialDelay).length());
			characterfile.newLine();
			characterfile.write(&quot;barrowskillcount = &quot;, 0, 19);
			characterfile.write(Integer.toString(p.barrowsKillCount), 0, Integer.toString(p.barrowsKillCount).length());
			characterfile.newLine();
			characterfile.write(&quot;flagged = &quot;, 0, 10);
			characterfile.write(Boolean.toString(p.accountFlagged), 0, Boolean.toString(p.accountFlagged).length());
			characterfile.newLine();
			characterfile.write(&quot;Rules = &quot;, 0, 8);
			characterfile.write(Boolean.toString(p.readRules), 0, Boolean.toString(p.readRules).length());
			characterfile.newLine();
			characterfile.write(&quot;shopping = &quot;, 0, 11);
			characterfile.write(Boolean.toString(p.isShopping), 0, Boolean.toString(p.isShopping).length());
			characterfile.newLine();
			characterfile.write(&quot;Jailed = &quot;, 0, 9);
			characterfile.write(Boolean.toString(p.Jail), 0, Boolean.toString(p.Jail).length());
			characterfile.newLine();
			characterfile.write(&quot;wave = &quot;, 0, 7);
			characterfile.write(Integer.toString(p.waveId), 0, Integer.toString(p.waveId).length());
			characterfile.newLine();
			characterfile.write(&quot;dfs-charges = &quot;, 0, 14);
			characterfile.write(Integer.toString(p.dfsCount), 0, Integer.toString(p.dfsCount).length());
			characterfile.newLine();
			characterfile.write(&quot;lastsummon = &quot;, 0, 13);
			characterfile.write(Integer.toString(p.lastsummon), 0, Integer.toString(p.lastsummon).length());
			characterfile.newLine();
			characterfile.write(&quot;summoningnpcid = &quot;, 0, 17);
			characterfile.write(Integer.toString(p.summoningnpcid), 0, Integer.toString(p.summoningnpcid).length());
			characterfile.newLine();
			characterfile.write(&quot;fightMode = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.fightMode), 0, Integer.toString(p.fightMode).length());
			characterfile.newLine();
			characterfile.write(&quot;SPoints = &quot;, 0, 10);
			characterfile.write(Integer.toString(p.SPoints), 0, Integer.toString(p.SPoints).length());
			characterfile.newLine();
			characterfile.write(&quot;dungPoints = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());
			characterfile.newLine();
			characterfile.write(&quot;Black-marks = &quot;, 0, 12);
			characterfile.write(Integer.toString(p.BlackMarks), 0, Integer.toString(p.BlackMarks).length());
			characterfile.newLine();
			characterfile.write(&quot;void = &quot;, 0, 7);
			String toWrite = p.voidStatus[0] + &quot;\t&quot; + p.voidStatus[1] + &quot;\t&quot; + p.voidStatus[2] + &quot;\t&quot; + p.voidStatus[3] + &quot;\t&quot; + p.voidStatus[4];
			characterfile.write(toWrite);
			characterfile.newLine();
			characterfile.newLine();
			
			/*EQUIPMENT*/
			characterfile.write(&quot;[EQUIPMENT]&quot;, 0, 11);
			characterfile.newLine();
			for (int i = 0; i &lt; p.playerEquipment.length; i++) {
				characterfile.write(&quot;character-equip = &quot;, 0, 18);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(Integer.toString(p.playerEquipment[i]), 0, Integer.toString(p.playerEquipment[i]).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(Integer.toString(p.playerEquipmentN[i]), 0, Integer.toString(p.playerEquipmentN[i]).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.newLine();
			}
			characterfile.newLine();
			
			/*LOOK*/
			characterfile.write(&quot;[LOOK]&quot;, 0, 6);
			characterfile.newLine();
			for (int i = 0; i &lt; p.playerAppearance.length; i++) {
				characterfile.write(&quot;character-look = &quot;, 0, 17);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(Integer.toString(p.playerAppearance[i]), 0, Integer.toString(p.playerAppearance[i]).length());
				characterfile.newLine();
			}
			characterfile.newLine();
			
			/*SKILLS*/
			characterfile.write(&quot;[SKILLS]&quot;, 0, 8);
			characterfile.newLine();
			for (int i = 0; i &lt; p.playerLevel.length; i++) {
				characterfile.write(&quot;character-skill = &quot;, 0, 18);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(Integer.toString(p.playerLevel[i]), 0, Integer.toString(p.playerLevel[i]).length());
				characterfile.write(&quot;	&quot;, 0, 1);
				characterfile.write(Integer.toString(p.playerXP[i]), 0, Integer.toString(p.playerXP[i]).length());
				characterfile.newLine();
			}
			characterfile.newLine();
			
			/*ITEMS*/
			characterfile.write(&quot;[ITEMS]&quot;, 0, 7);
			characterfile.newLine();
			for (int i = 0; i &lt; p.playerItems.length; i++) {
				if (p.playerItems[i] &gt; 0) {
					characterfile.write(&quot;character-item = &quot;, 0, 17);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.playerItems[i]), 0, Integer.toString(p.playerItems[i]).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.playerItemsN[i]), 0, Integer.toString(p.playerItemsN[i]).length());
					characterfile.newLine();
				}
			}
			characterfile.newLine();
			
		/*BANK*/
			characterfile.write(&quot;[BANK]&quot;, 0, 6);
			characterfile.newLine();
			for (int i = 0; i &lt; p.bankItems.length; i++) {
				if (p.bankItems[i] &gt; 0) {
					characterfile.write(&quot;character-bank = &quot;, 0, 17);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.bankItems[i]), 0, Integer.toString(p.bankItems[i]).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.bankItemsN[i]), 0, Integer.toString(p.bankItemsN[i]).length());
					characterfile.newLine();
				}
			}
			characterfile.newLine();
			
		/*FRIENDS*/
			characterfile.write(&quot;[FRIENDS]&quot;, 0, 9);
			characterfile.newLine();
			for (int i = 0; i &lt; p.friends.length; i++) {
				if (p.friends[i] &gt; 0) {
					characterfile.write(&quot;character-friend = &quot;, 0, 19);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(&quot;&quot; + p.friends[i]);
					characterfile.newLine();
				}
			}
			characterfile.newLine();
			
		/*Storeditems*/
			characterfile.write(&quot;[STORED]&quot;, 0, 8);
			characterfile.newLine();
for (int i = 0; i &lt; p.storeditems.length; i++) {
					characterfile.write(&quot;stored = &quot;, 0, 9);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
characterfile.write(Integer.toString(p.storeditems[i]), 0, Integer.toString(p.storeditems[i]).length());
					characterfile.newLine();
			}
characterfile.newLine();

/*Storeditems*/
			characterfile.write(&quot;[OCCUPY]&quot;, 0, 8);
			characterfile.newLine();
for (int i = 0; i &lt; p.occupied.length; i++) {
					characterfile.write(&quot;occupy = &quot;, 0, 9);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
characterfile.write(Boolean.toString(p.occupied[i]), 0, Boolean.toString(p.occupied[i]).length());
					characterfile.newLine();
			}
characterfile.newLine();


		/*SHOP*/
			characterfile.write(&quot;[SHOP]&quot;, 0, 6);
			characterfile.newLine();
			for (int i = 0; i &lt; p.playerShop.length; i++) {
				if (p.playerShop[i] &gt; 0) {
					characterfile.write(&quot;character-shop = &quot;, 0, 17);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.playerShop[i]), 0, Integer.toString(p.playerShop[i]).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.playerShopP[i]), 0, Integer.toString(p.playerShopP[i]).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Integer.toString(p.playerShopN[i]), 0, Integer.toString(p.playerShopN[i]).length());
					characterfile.newLine();
				}
			}
			characterfile.newLine();

			
			
		/*IGNORES*/
			/*characterfile.write(&quot;[IGNORES]&quot;, 0, 9);
			characterfile.newLine();
			for (int i = 0; i &lt; ignores.length; i++) {
				if (ignores[i] &gt; 0) {
					characterfile.write(&quot;character-ignore = &quot;, 0, 19);
					characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
					characterfile.write(&quot;	&quot;, 0, 1);
					characterfile.write(Long.toString(ignores[i]), 0, Long.toString(ignores[i]).length());
					characterfile.newLine();
				}
			}
			characterfile.newLine();*/
		/*EOF*/
			characterfile.write(&quot;[EOF]&quot;, 0, 5);
			characterfile.newLine();
			characterfile.newLine();
			characterfile.close();
		} catch(IOException ioexception) {
			Misc.println(p.playerName+&quot;: error writing file.&quot;);
			return false;
		}
		return true;
	}	
	

}[/code]</description>
    
    <lastBuildDate>Fri, 25 Sep 2015 05:24:56 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/how-to-create-user-accounts-and-help-with-playersave-java/553396.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>How to create user accounts and help with PlayerSave.java</title>
        <dc:creator><![CDATA[@Malific40 Malific40]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malific40">@Malific40</a> wrote:</p>
          <blockquote>
              <p>I tried creating characters in the character folder but when i try to login with the username and password it says its invalid can anyone help me with this??? 317 server</p>
<p>[code]package server.model.players;<br>
import java.io.BufferedReader;<br>
import java.io.BufferedWriter;<br>
import java.io.File;<br>
import java.io.FileNotFoundException;<br>
import java.io.FileReader;<br>
import java.io.FileWriter;<br>
import java.io.IOException;</p>
<p>import server.Server;<br>
import server.util.Misc;</p>
<p>public class PlayerSave<br>
{</p>
<pre><code>/**
*Loading
**/
public static int loadGame(Client p, String playerName, String playerPass) {
	String line = "";
	String token = "";
	String token2 = "";
	String[] token3 = new String[3];
	boolean EndOfFile = false;
	int ReadMode = 0;
	BufferedReader characterfile = null;
	boolean File1 = false;
	
	try {
		characterfile = new BufferedReader(new FileReader("./characters/"+playerName+".txt"));
		File1 = true;
	} catch(FileNotFoundException fileex1) {
	}
	
	if (File1) {
		//new File ("./characters/"+playerName+".txt");
	} else {
		Misc.println(playerName+": character file not found.");
		p.newPlayer = false;
		return 0;
	}
	try {
		line = characterfile.readLine();
	} catch(IOException ioexception) {
		Misc.println(playerName+": error loading file.");
		return 3;
	}
	while(EndOfFile == false &amp;&amp; line != null) {
		line = line.trim();
		int spot = line.indexOf("=");
		if (spot &gt; -1) {
			token = line.substring(0, spot);
			token = token.trim();
			token2 = line.substring(spot + 1);
			token2 = token2.trim();
			token3 = token2.split("\t");
			switch (ReadMode) {
			case 1:
				 if (token.equals("character-password")) {
					if (playerPass.equalsIgnoreCase(token2) || Misc.basicEncrypt(playerPass).equals(token2)) {
						playerPass = token2;
					} else {
						return 3;
					}
				}
				break;
			case 2:
				if (token.equals("character-height")) {
					p.heightLevel = Integer.parseInt(token2);
				} else if (token.equals("character-posx")) {
					p.teleportToX = (Integer.parseInt(token2) &lt;= 0 ? 3210 : Integer.parseInt(token2));
				} else if (token.equals("character-posy")) {
					p.teleportToY = (Integer.parseInt(token2) &lt;= 0 ? 3424 : Integer.parseInt(token2));
				} else if (token.equals("character-rights")) {
					p.playerRights = Integer.parseInt(token2);
				} else if (token.equals("dungPoints")) {
					p.dungPoints = Integer.parseInt(token2);
                			} else if (token.equals("Used-Puremaster")) {
                    			p.pure = Integer.parseInt(token2);
				} else if (token.equals("tutorial-progress")) {
					p.tutorial = Integer.parseInt(token2);	
				} else if (token.equals("skull-timer")) {
					p.skullTimer = Integer.parseInt(token2);
				} else if (token.equals("EP")) {
					p.earningPotential = Integer.parseInt(token2);
               } else if (token.equals("character-longsword")) {
                    p.vlsLeft = Integer.parseInt(token2);
                } else if (token.equals("character-warhammer")) {
                    p.statLeft = Integer.parseInt(token2);
                } else if (token.equals("character-spear")) {
                    p.vSpearLeft = Integer.parseInt(token2);
                } else if (token.equals("character-chainbody")) {
                    p.vTopLeft = Integer.parseInt(token2);
				} else if (token.equals("shopcollect")) {
					p.playerCollect = Integer.parseInt(token2);
                } else if (token.equals("character-chainskirt")) {
                    p.vLegsLeft = Integer.parseInt(token2);
                } else if (token.equals("character-full helm")) {
                    p.sHelmLeft = Integer.parseInt(token2);
                } else if (token.equals("character-platebody")) {
                    p.sTopLeft = Integer.parseInt(token2);
                } else if (token.equals("character-platelegs")) {
                    p.sLegsLeft = Integer.parseInt(token2);
                } else if (token.equals("character-hood")) {
                    p.zHoodLeft = Integer.parseInt(token2);
                } else if (token.equals("character-staff")) {
                    p.zStaffLeft = Integer.parseInt(token2);
                } else if (token.equals("character-robe top")) {
                    p.zTopLeft = Integer.parseInt(token2);
                } else if (token.equals("character-robe bottom")) {
                    p.zBottomLeft = Integer.parseInt(token2);
                } else if (token.equals("character-leather body")) {
                    p.mBodyLeft = Integer.parseInt(token2);
                } else if (token.equals("character-chaps")) {
                    p.mChapsLeft = Integer.parseInt(token2);
				} else if (token.equals("magic-book")) {
					p.playerMagicBook = Integer.parseInt(token2);
				} else if (token.equals("xpLock")) {
					p.xpLock = Boolean.parseBoolean(token2);
				} else if (token.equals("Jailed")) {
					p.Jail = Boolean.parseBoolean(token2);
				} else if (token.equals("Agrith")) {
					p.Agrith = Boolean.parseBoolean(token2);
				} else if (token.equals("degrade")) {
				        p.degradeTime = Integer.parseInt(token2); 
				} else if (token.equals("Flambeed")) {
					p.Flambeed = Boolean.parseBoolean(token2);
				} else if (token.equals("Karamel")) {
					p.Karamel = Boolean.parseBoolean(token2);
				} else if (token.equals("Dessourt")) {
					p.Dessourt = Boolean.parseBoolean(token2);
				} else if (token.equals("culin")) {
					p.Culin = Boolean.parseBoolean(token2);		
				} else if (token.equals("brother-info")) {
					p.barrowsNpcs[Integer.parseInt(token3[0])][1] = Integer.parseInt(token3[1]);
				 } else if (token.equals("special-amount")) {
					p.specAmount = Double.parseDouble(token2);	
				 } else if (token.equals("selected-coffin")) {
					p.randomCoffin = Integer.parseInt(token2);	
				} else if (token.equals("barrows-killcount")) {
					p.pkPoints = Integer.parseInt(token2);							
				} else if (token.equals("teleblock-length")) {
					p.teleBlockDelay = System.currentTimeMillis();
					p.teleBlockLength = Integer.parseInt(token2);							
				} else if (token.equals("pc-points")) {
					p.pcPoints = Integer.parseInt(token2);	
				} else if (token.equals("isHelper")) {
                    p.isDonator = Integer.parseInt(token2);	
				} else if (token.equals("gwdelay")) {
					p.gwdelay = Integer.parseInt(token2);
				} else if (token.equals("summonSpec")) {
					p.summonSpec = Integer.parseInt(token2);
					} else if (token.equals("dungRest")) {
					p.dungRest = Integer.parseInt(token2);
				} else if (token.equals("Altar")) {
					p.altarPrayed = Integer.parseInt(token2);
				} else if (token.equals("Arma-KC")) {
					p.Arma = Integer.parseInt(token2);	
				} else if (token.equals("Band-KC")) {
					p.Band = Integer.parseInt(token2);	
				} else if (token.equals("Zammy-KC")) {
					p.Zammy = Integer.parseInt(token2);	
				} else if (token.equals("Sara-KC")) {
					p.Sara = Integer.parseInt(token2);	
				} else if (token.equals("pk-points")) {
					p.pkPoints = Integer.parseInt(token2);	
				} else if (token.equals("isDonator")) {
					p.isDonator = Integer.parseInt(token2);
				} else if (token.equals("donatorChest")) {
					p.donatorChest = Integer.parseInt(token2);						
				} else if (token.equals("slayerTask")) {
					p.slayerTask = Integer.parseInt(token2);					
				} else if (token.equals("taskAmount")) {
					p.taskAmount = Integer.parseInt(token2);					
				} else if (token.equals("magePoints")) {
					p.magePoints = Integer.parseInt(token2);
				} else if (line.startsWith("KC")) {
					p.KC = Integer.parseInt(token2);
				} else if (line.startsWith("DC")) {
					p.DC = Integer.parseInt(token2);
				} else if (line.startsWith("totalstored")) {
					p.totalstored = Integer.parseInt(token2);
				} else if (token.equals("autoRet")) {
					p.autoRet = Integer.parseInt(token2);
				} else if (token.equals("trade11")) {
					p.trade11 = Integer.parseInt(token2);
				} else if (token.equals("SpeDelay")) {
					p.SpecialDelay = Integer.parseInt(token2);
				} else if (token.equals("barrowskillcount")) {
					p.barrowsKillCount = Integer.parseInt(token2);
				} else if (token.equals("flagged")) {
					p.accountFlagged = Boolean.parseBoolean(token2);
				} else if (token.equals("Rules")) {
					p.readRules = Boolean.parseBoolean(token2);
										} else if (token.equals("isShopping")) {
					p.isShopping = Boolean.parseBoolean(token2);
						} else if (token.equals("SPoints")) {
					p.SPoints = Integer.parseInt(token2);
				} else if (token.equals("wave")) {
					p.waveId = Integer.parseInt(token2);
</code></pre>
<p>} else if (token.equals(“dfs-charges”)) {<br>
p.dfsCount = Integer.parseInt(token2);<br>
} else if (token.equals(“lastsummon”)) {<br>
p.lastsummon = Integer.parseInt(token2);</p>
<pre><code>				} else if (token.equals("summoningnpcid")) {
					p.summoningnpcid = Integer.parseInt(token2);

				} else if (token.equals("void")) {
					for (int j = 0; j &lt; token3.length; j++) {
						p.voidStatus[j] = Integer.parseInt(token3[j]);						
					}
				} else if (token.equals("fightMode")) {
					p.fightMode = Integer.parseInt(token2);
				
				} else if (token.equals("Black-marks")) {
					p.BlackMarks = Integer.parseInt(token2);
				}
				break;
			case 3:
				if (token.equals("character-equip")) {
					p.playerEquipment[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerEquipmentN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 4:
				if (token.equals("character-look")) {
					p.playerAppearance[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
				} 
				break;
			case 5:
				if (token.equals("character-skill")) {
					p.playerLevel[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerXP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 6:
				if (token.equals("character-item")) {
					p.playerItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.playerItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 7:
				if (token.equals("character-bank")) {
					p.bankItems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
					p.bankItemsN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
				}
				break;
			case 8:
				 if (token.equals("character-friend")) {
					p.friends[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
				} 
				break;
			case 9:
				/* if (token.equals("character-ignore")) {
					ignores[Integer.parseInt(token3[0])] = Long.parseLong(token3[1]);
				} */
				break;
			case 20:
				if (token.equals("stored")) {
					p.storeditems[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
				}
				break;

			case 21:
				 if (token.equals("occupy")) {
					p.occupied[Integer.parseInt(token3[0])] = Boolean.parseBoolean(token3[1]);
				} 
				break;
			case 10:
	if (token.equals("character-shop")) {
		p.playerShop[Integer.parseInt(token3[0])] = Integer.parseInt(token3[1]);
		p.playerShopP[Integer.parseInt(token3[0])] = Integer.parseInt(token3[2]);
		p.playerShopN[Integer.parseInt(token3[0])] = Integer.parseInt(token3[3]);
	} 
break;
			}
		} else {
			if (line.equals("[ACCOUNT]")) {		ReadMode = 1;
			} else if (line.equals("[CHARACTER]")) {	ReadMode = 2;
			} else if (line.equals("[EQUIPMENT]")) {	ReadMode = 3;
			} else if (line.equals("[LOOK]")) {		ReadMode = 4;
			} else if (line.equals("[SKILLS]")) {		ReadMode = 5;
			} else if (line.equals("[ITEMS]")) {		ReadMode = 6;
			} else if (line.equals("[BANK]")) {		ReadMode = 7;
			} else if (line.equals("[FRIENDS]")) {		ReadMode = 8;
			} else if (line.equals("[IGNORES]")) {		ReadMode = 9;
</code></pre>
<p>} else if (line.equals("[STORED]")) {		ReadMode = 20;<br>
} else if (line.equals("[OCCUPY]")) {		ReadMode = 21;<br>
} else if (line.equals("[SHOP]")) {		ReadMode = 10;<br>
} else if (line.equals("[EOF]")) {		try { characterfile.close(); } catch(IOException ioexception) { } return 1;<br>
}<br>
}<br>
try {<br>
line = characterfile.readLine();<br>
} catch(IOException ioexception1) { EndOfFile = true; }<br>
}<br>
try { characterfile.close(); } catch(IOException ioexception) { }<br>
return 13;<br>
}</p>
<pre><code>/**
*Saving
**/
public static boolean saveGame(Client p) {
	if(!p.saveFile || p.newPlayer || !p.saveCharacter) {
		//System.out.println("first");
		return false;
	}
	if(p.playerName == null || Server.playerHandler.players[p.playerId] == null) {
		//System.out.println("second");
		return false;
	}
	p.playerName = p.playerName2;
	int tbTime = (int)(p.teleBlockDelay - System.currentTimeMillis() + p.teleBlockLength);
	if(tbTime &gt; 300000 || tbTime &lt; 0){
		tbTime = 0;
	}
	
	BufferedWriter characterfile = null;
	try {
		characterfile = new BufferedWriter(new FileWriter("./characters/"+p.playerName+".txt"));
		
		/*ACCOUNT*/
		characterfile.write("[ACCOUNT]", 0, 9);
		characterfile.newLine();
		characterfile.write("character-username = ", 0, 21);
		characterfile.write(p.playerName, 0, p.playerName.length());
		characterfile.newLine();
		characterfile.write("character-password = ", 0, 21);
		characterfile.write(p.playerPass, 0, p.playerPass.length());
		characterfile.newLine();
		characterfile.newLine();
		characterfile.write("KC = ", 0, 4);
		characterfile.write(Integer.toString(p.KC), 0, Integer.toString(p.KC).length());
		characterfile.newLine();
		characterfile.write("DC = ", 0, 4);
		characterfile.write(Integer.toString(p.DC), 0, Integer.toString(p.DC).length());
		characterfile.newLine();
		
		/*CHARACTER*/
		characterfile.write("[CHARACTER]", 0, 11);
		characterfile.newLine();
		characterfile.write("character-height = ", 0, 19);
		characterfile.write(Integer.toString(p.heightLevel), 0, Integer.toString(p.heightLevel).length());
		characterfile.newLine();

		characterfile.write("character-posx = ", 0, 17);
		characterfile.write(Integer.toString(p.absX), 0, Integer.toString(p.absX).length());
		characterfile.newLine();
		characterfile.write("character-posy = ", 0, 17);
		characterfile.write(Integer.toString(p.absY), 0, Integer.toString(p.absY).length());
		characterfile.newLine();
		characterfile.write("character-rights = ", 0, 19);
		characterfile.write(Integer.toString(p.playerRights), 0, Integer.toString(p.playerRights).length());
		characterfile.newLine();
		characterfile.write("shopcollect = ", 0, 14);
		characterfile.write(Integer.toString(p.playerCollect), 0, Integer.toString(p.playerCollect).length());
		characterfile.newLine();
		characterfile.write("dungPoints = ", 0, 12);
		characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());
		characterfile.newLine();
		characterfile.write("crystal-bow-shots = ", 0, 20);
		characterfile.write(Integer.toString(p.crystalBowArrowCount), 0, Integer.toString(p.crystalBowArrowCount).length());
		characterfile.newLine();
		characterfile.write("VLS-hits = ", 0, 11);
		characterfile.write(Integer.toString(p.degradeTime), 0, Integer.toString(p.degradeTime).length());
		/*characterfile.newLine();
		characterfile.write("dungPoints = ", 0, 20);
		characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());*/
		characterfile.newLine(); 
		characterfile.write("skull-timer = ", 0, 14);
		characterfile.write(Integer.toString(p.skullTimer), 0, Integer.toString(p.skullTimer).length());
		characterfile.newLine();
		characterfile.write("EP = ", 0, 5);
		characterfile.write(Integer.toString(p.earningPotential), 0, Integer.toString(p.earningPotential).length());
		characterfile.newLine();
             characterfile.write("character-longsword = ", 0, 22);
              characterfile.write(Integer.toString(p.vlsLeft), 0, Integer.toString(p.vlsLeft).length());
              characterfile.newLine();
              characterfile.write("character-warhammer = ", 0, 22);
              characterfile.write(Integer.toString(p.statLeft), 0, Integer.toString(p.statLeft).length());
              characterfile.newLine();
              characterfile.write("character-spear = ", 0, 18);
              characterfile.write(Integer.toString(p.vSpearLeft), 0, Integer.toString(p.vSpearLeft).length());
              characterfile.newLine();
              characterfile.write("character-chainbody = ", 0, 22);
              characterfile.write(Integer.toString(p.vTopLeft), 0, Integer.toString(p.vTopLeft).length());
              characterfile.newLine();
              characterfile.write("character-chainskirt = ", 0, 23);
              characterfile.write(Integer.toString(p.vLegsLeft), 0, Integer.toString(p.vLegsLeft).length());
              characterfile.newLine();
              characterfile.write("character-full helm = ", 0, 22);
              characterfile.write(Integer.toString(p.sHelmLeft), 0, Integer.toString(p.sHelmLeft).length());
              characterfile.newLine();
              characterfile.write("character-platebody = ", 0, 22);
              characterfile.write(Integer.toString(p.sTopLeft), 0, Integer.toString(p.sTopLeft).length());
              characterfile.newLine();
              characterfile.write("character-platelegs = ", 0, 22);
              characterfile.write(Integer.toString(p.sLegsLeft), 0, Integer.toString(p.sLegsLeft).length());
              characterfile.newLine();
              characterfile.write("character-hood = ", 0, 17);
              characterfile.write(Integer.toString(p.zHoodLeft), 0, Integer.toString(p.zHoodLeft).length());
              characterfile.newLine();
              characterfile.write("character-staff = ", 0, 18);
              characterfile.write(Integer.toString(p.zStaffLeft), 0, Integer.toString(p.zStaffLeft).length());
              characterfile.newLine();
              characterfile.write("character-robe top = ", 0, 21);
              characterfile.write(Integer.toString(p.zTopLeft), 0, Integer.toString(p.zTopLeft).length());
              characterfile.newLine();
              characterfile.write("character-robe bottom = ", 0, 24);
              characterfile.write(Integer.toString(p.zBottomLeft), 0, Integer.toString(p.zBottomLeft).length());
              characterfile.newLine();
              characterfile.write("character-leather body = ", 0, 25);
              characterfile.write(Integer.toString(p.mBodyLeft), 0, Integer.toString(p.mBodyLeft).length());
              characterfile.newLine();
              characterfile.write("character-chaps = ", 0, 18);
              characterfile.write(Integer.toString(p.mChapsLeft), 0, Integer.toString(p.mChapsLeft).length());
              characterfile.newLine();
		characterfile.write("magic-book = ", 0, 13);
		characterfile.write(Integer.toString(p.playerMagicBook), 0, Integer.toString(p.playerMagicBook).length());
		characterfile.newLine();
		for (int b = 0; b &lt; p.barrowsNpcs.length; b++) {
			characterfile.write("brother-info = ", 0, 15);
			characterfile.write(Integer.toString(b), 0, Integer.toString(b).length());
			characterfile.write("	", 0, 1);
			characterfile.write(p.barrowsNpcs[b][1] &lt;= 1 ? Integer.toString(0) : Integer.toString(p.barrowsNpcs[b][1]), 0, Integer.toString(p.barrowsNpcs[b][1]).length());
			characterfile.newLine();
		}	
		characterfile.write("special-amount = ", 0, 17);
		characterfile.write(Double.toString(p.specAmount), 0, Double.toString(p.specAmount).length());
		characterfile.newLine();
		characterfile.write("selected-coffin = ", 0, 18);
		characterfile.write(Integer.toString(p.randomCoffin), 0, Integer.toString(p.randomCoffin).length());
		characterfile.newLine();
		characterfile.write("barrows-killcount = ", 0, 20);
		characterfile.write(Integer.toString(p.barrowsKillCount), 0, Integer.toString(p.barrowsKillCount).length());
		characterfile.newLine();
		characterfile.write("teleblock-length = ", 0, 19);
		characterfile.write(Integer.toString(tbTime), 0, Integer.toString(tbTime).length());
		characterfile.newLine();
		characterfile.write("pc-points = ", 0, 12);
		characterfile.write(Integer.toString(p.pcPoints), 0, Integer.toString(p.pcPoints).length());
		characterfile.newLine();
		characterfile.write("isHelper = ", 0, 12);
        characterfile.write(Integer.toString(p.isDonator), 0, Integer.toString(p.isDonator).length());
        characterfile.newLine();
		characterfile.write("gwdelay = ", 0, 10);
		characterfile.write(Integer.toString(p.gwdelay), 0, Integer.toString(p.gwdelay).length());
		characterfile.newLine();
		characterfile.write("summonSpec = ", 0, 10);
		characterfile.write(Integer.toString(p.summonSpec), 0, Integer.toString(p.summonSpec).length());
		characterfile.newLine();
		characterfile.write("dungRest = ", 0, 10);
		characterfile.write(Integer.toString(p.dungRest), 0, Integer.toString(p.dungRest).length());
		characterfile.newLine();
		characterfile.write("Altar = ", 0, 8);
		characterfile.write(Integer.toString(p.altarPrayed), 0, Integer.toString(p.altarPrayed).length());
		characterfile.newLine();
		characterfile.write("Arma-KC = ", 0, 10);
		characterfile.write(Integer.toString(p.Arma), 0, Integer.toString(p.Arma).length());
		characterfile.newLine();
		characterfile.write("Band-KC = ", 0, 10);
		characterfile.write(Integer.toString(p.Band), 0, Integer.toString(p.Band).length());
		characterfile.newLine();
		characterfile.write("Zammy-KC = ", 0, 11);
		characterfile.write(Integer.toString(p.Zammy), 0, Integer.toString(p.Zammy).length());
		characterfile.newLine();
		characterfile.write("Sara-KC = ", 0, 10);
		characterfile.write(Integer.toString(p.Sara), 0, Integer.toString(p.Sara).length());
		characterfile.newLine();
		characterfile.newLine();
		characterfile.write("pk-points = ", 0, 12);
		characterfile.write(Integer.toString(p.pkPoints), 0, Integer.toString(p.pkPoints).length());
		characterfile.newLine();
		characterfile.newLine();
		characterfile.write("isDonator = ", 0, 12);
		characterfile.write(Integer.toString(p.isDonator), 0, Integer.toString(p.isDonator).length());
		characterfile.newLine();
		characterfile.write("donatorChest = ", 0, 15);
		characterfile.write(Integer.toString(p.donatorChest), 0, Integer.toString(p.donatorChest).length());
		characterfile.newLine();
		characterfile.write("slayerTask = ", 0, 13);
		characterfile.write(Integer.toString(p.slayerTask), 0, Integer.toString(p.slayerTask).length());
		characterfile.newLine();
		characterfile.write("xpLock = ", 0, 9);
		characterfile.write(Boolean.toString(p.xpLock), 0, Boolean.toString(p.xpLock).length());
		characterfile.newLine();
		characterfile.write("Agrith = ", 0, 9);
		characterfile.write(Boolean.toString(p.Agrith), 0, Boolean.toString(p.Agrith).length());
		characterfile.newLine();
		characterfile.write("Flambeed = ", 0, 11);
		characterfile.write(Boolean.toString(p.Flambeed), 0, Boolean.toString(p.Flambeed).length());
		characterfile.newLine();
		characterfile.write("Karamel = ", 0, 10);
		characterfile.write(Boolean.toString(p.Karamel), 0, Boolean.toString(p.Karamel).length());
		characterfile.newLine();
		characterfile.write("Dessourt = ", 0, 11);
		characterfile.write(Boolean.toString(p.Dessourt), 0, Boolean.toString(p.Dessourt).length());
		characterfile.newLine();
		characterfile.write("culin = ", 0, 8);
		characterfile.write(Boolean.toString(p.Culin), 0, Boolean.toString(p.Culin).length());
		characterfile.newLine();
		characterfile.write("taskAmount = ", 0, 13);
		characterfile.write(Integer.toString(p.taskAmount), 0, Integer.toString(p.taskAmount).length());
		characterfile.newLine();
		characterfile.write("magePoints = ", 0, 13);
		characterfile.write(Integer.toString(p.magePoints), 0, Integer.toString(p.magePoints).length());
		characterfile.newLine();
		characterfile.write("KC = ", 0, 4);
		characterfile.write(Integer.toString(p.KC), 0, Integer.toString(p.KC).length());
		characterfile.newLine();
		characterfile.write("DC = ", 0, 4);
		characterfile.write(Integer.toString(p.DC), 0, Integer.toString(p.DC).length());
		characterfile.newLine();
		characterfile.write("totalstored = ", 0, 14);
		characterfile.write(Integer.toString(p.totalstored), 0, Integer.toString(p.totalstored).length());
		characterfile.newLine();
		characterfile.write("autoRet = ", 0, 10);
		characterfile.write(Integer.toString(p.autoRet), 0, Integer.toString(p.autoRet).length());
		characterfile.newLine();
		characterfile.write("trade11 = ", 0, 10);
		characterfile.write(Integer.toString(p.trade11), 0, Integer.toString(p.trade11).length());
		characterfile.newLine();
		characterfile.write("SpeDelay = ", 0, 11);
		characterfile.write(Long.toString(p.SpecialDelay), 0, Long.toString(p.SpecialDelay).length());
		characterfile.newLine();
		characterfile.write("barrowskillcount = ", 0, 19);
		characterfile.write(Integer.toString(p.barrowsKillCount), 0, Integer.toString(p.barrowsKillCount).length());
		characterfile.newLine();
		characterfile.write("flagged = ", 0, 10);
		characterfile.write(Boolean.toString(p.accountFlagged), 0, Boolean.toString(p.accountFlagged).length());
		characterfile.newLine();
		characterfile.write("Rules = ", 0, 8);
		characterfile.write(Boolean.toString(p.readRules), 0, Boolean.toString(p.readRules).length());
		characterfile.newLine();
		characterfile.write("shopping = ", 0, 11);
		characterfile.write(Boolean.toString(p.isShopping), 0, Boolean.toString(p.isShopping).length());
		characterfile.newLine();
		characterfile.write("Jailed = ", 0, 9);
		characterfile.write(Boolean.toString(p.Jail), 0, Boolean.toString(p.Jail).length());
		characterfile.newLine();
		characterfile.write("wave = ", 0, 7);
		characterfile.write(Integer.toString(p.waveId), 0, Integer.toString(p.waveId).length());
		characterfile.newLine();
		characterfile.write("dfs-charges = ", 0, 14);
		characterfile.write(Integer.toString(p.dfsCount), 0, Integer.toString(p.dfsCount).length());
		characterfile.newLine();
		characterfile.write("lastsummon = ", 0, 13);
		characterfile.write(Integer.toString(p.lastsummon), 0, Integer.toString(p.lastsummon).length());
		characterfile.newLine();
		characterfile.write("summoningnpcid = ", 0, 17);
		characterfile.write(Integer.toString(p.summoningnpcid), 0, Integer.toString(p.summoningnpcid).length());
		characterfile.newLine();
		characterfile.write("fightMode = ", 0, 12);
		characterfile.write(Integer.toString(p.fightMode), 0, Integer.toString(p.fightMode).length());
		characterfile.newLine();
		characterfile.write("SPoints = ", 0, 10);
		characterfile.write(Integer.toString(p.SPoints), 0, Integer.toString(p.SPoints).length());
		characterfile.newLine();
		characterfile.write("dungPoints = ", 0, 12);
		characterfile.write(Integer.toString(p.dungPoints), 0, Integer.toString(p.dungPoints).length());
		characterfile.newLine();
		characterfile.write("Black-marks = ", 0, 12);
		characterfile.write(Integer.toString(p.BlackMarks), 0, Integer.toString(p.BlackMarks).length());
		characterfile.newLine();
		characterfile.write("void = ", 0, 7);
		String toWrite = p.voidStatus[0] + "\t" + p.voidStatus[1] + "\t" + p.voidStatus[2] + "\t" + p.voidStatus[3] + "\t" + p.voidStatus[4];
		characterfile.write(toWrite);
		characterfile.newLine();
		characterfile.newLine();
		
		/*EQUIPMENT*/
		characterfile.write("[EQUIPMENT]", 0, 11);
		characterfile.newLine();
		for (int i = 0; i &lt; p.playerEquipment.length; i++) {
			characterfile.write("character-equip = ", 0, 18);
			characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
			characterfile.write("	", 0, 1);
			characterfile.write(Integer.toString(p.playerEquipment[i]), 0, Integer.toString(p.playerEquipment[i]).length());
			characterfile.write("	", 0, 1);
			characterfile.write(Integer.toString(p.playerEquipmentN[i]), 0, Integer.toString(p.playerEquipmentN[i]).length());
			characterfile.write("	", 0, 1);
			characterfile.newLine();
		}
		characterfile.newLine();
		
		/*LOOK*/
		characterfile.write("[LOOK]", 0, 6);
		characterfile.newLine();
		for (int i = 0; i &lt; p.playerAppearance.length; i++) {
			characterfile.write("character-look = ", 0, 17);
			characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
			characterfile.write("	", 0, 1);
			characterfile.write(Integer.toString(p.playerAppearance[i]), 0, Integer.toString(p.playerAppearance[i]).length());
			characterfile.newLine();
		}
		characterfile.newLine();
		
		/*SKILLS*/
		characterfile.write("[SKILLS]", 0, 8);
		characterfile.newLine();
		for (int i = 0; i &lt; p.playerLevel.length; i++) {
			characterfile.write("character-skill = ", 0, 18);
			characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
			characterfile.write("	", 0, 1);
			characterfile.write(Integer.toString(p.playerLevel[i]), 0, Integer.toString(p.playerLevel[i]).length());
			characterfile.write("	", 0, 1);
			characterfile.write(Integer.toString(p.playerXP[i]), 0, Integer.toString(p.playerXP[i]).length());
			characterfile.newLine();
		}
		characterfile.newLine();
		
		/*ITEMS*/
		characterfile.write("[ITEMS]", 0, 7);
		characterfile.newLine();
		for (int i = 0; i &lt; p.playerItems.length; i++) {
			if (p.playerItems[i] &gt; 0) {
				characterfile.write("character-item = ", 0, 17);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.playerItems[i]), 0, Integer.toString(p.playerItems[i]).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.playerItemsN[i]), 0, Integer.toString(p.playerItemsN[i]).length());
				characterfile.newLine();
			}
		}
		characterfile.newLine();
		
	/*BANK*/
		characterfile.write("[BANK]", 0, 6);
		characterfile.newLine();
		for (int i = 0; i &lt; p.bankItems.length; i++) {
			if (p.bankItems[i] &gt; 0) {
				characterfile.write("character-bank = ", 0, 17);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.bankItems[i]), 0, Integer.toString(p.bankItems[i]).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.bankItemsN[i]), 0, Integer.toString(p.bankItemsN[i]).length());
				characterfile.newLine();
			}
		}
		characterfile.newLine();
		
	/*FRIENDS*/
		characterfile.write("[FRIENDS]", 0, 9);
		characterfile.newLine();
		for (int i = 0; i &lt; p.friends.length; i++) {
			if (p.friends[i] &gt; 0) {
				characterfile.write("character-friend = ", 0, 19);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write("	", 0, 1);
				characterfile.write("" + p.friends[i]);
				characterfile.newLine();
			}
		}
		characterfile.newLine();
		
	/*Storeditems*/
		characterfile.write("[STORED]", 0, 8);
		characterfile.newLine();
</code></pre>
<p>for (int i = 0; i &lt; p.storeditems.length; i++) {<br>
characterfile.write("stored = “, 0, 9);<br>
characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());<br>
characterfile.write(”	", 0, 1);<br>
characterfile.write(Integer.toString(p.storeditems[i]), 0, Integer.toString(p.storeditems[i]).length());<br>
characterfile.newLine();<br>
}<br>
characterfile.newLine();</p>
<p>/<em>Storeditems</em>/<br>
characterfile.write("[OCCUPY]", 0, 8);<br>
characterfile.newLine();<br>
for (int i = 0; i &lt; p.occupied.length; i++) {<br>
characterfile.write("occupy = “, 0, 9);<br>
characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());<br>
characterfile.write(”	", 0, 1);<br>
characterfile.write(Boolean.toString(p.occupied[i]), 0, Boolean.toString(p.occupied[i]).length());<br>
characterfile.newLine();<br>
}<br>
characterfile.newLine();</p>
<pre><code>	/*SHOP*/
		characterfile.write("[SHOP]", 0, 6);
		characterfile.newLine();
		for (int i = 0; i &lt; p.playerShop.length; i++) {
			if (p.playerShop[i] &gt; 0) {
				characterfile.write("character-shop = ", 0, 17);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.playerShop[i]), 0, Integer.toString(p.playerShop[i]).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.playerShopP[i]), 0, Integer.toString(p.playerShopP[i]).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Integer.toString(p.playerShopN[i]), 0, Integer.toString(p.playerShopN[i]).length());
				characterfile.newLine();
			}
		}
		characterfile.newLine();

		
		
	/*IGNORES*/
		/*characterfile.write("[IGNORES]", 0, 9);
		characterfile.newLine();
		for (int i = 0; i &lt; ignores.length; i++) {
			if (ignores[i] &gt; 0) {
				characterfile.write("character-ignore = ", 0, 19);
				characterfile.write(Integer.toString(i), 0, Integer.toString(i).length());
				characterfile.write("	", 0, 1);
				characterfile.write(Long.toString(ignores[i]), 0, Long.toString(ignores[i]).length());
				characterfile.newLine();
			}
		}
		characterfile.newLine();*/
	/*EOF*/
		characterfile.write("[EOF]", 0, 5);
		characterfile.newLine();
		characterfile.newLine();
		characterfile.close();
	} catch(IOException ioexception) {
		Misc.println(p.playerName+": error writing file.");
		return false;
	}
	return true;
}	
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/how-to-create-user-accounts-and-help-with-playersave-java/553396/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/how-to-create-user-accounts-and-help-with-playersave-java/553396/1</link>
        <pubDate>Fri, 25 Sep 2015 05:24:56 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-553396-1</guid>
        <source url="https://forum.moparisthebest.com/t/how-to-create-user-accounts-and-help-with-playersave-java/553396.rss">How to create user accounts and help with PlayerSave.java</source>
      </item>
  </channel>
</rss>
