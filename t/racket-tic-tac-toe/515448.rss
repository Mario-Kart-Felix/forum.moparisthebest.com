<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[racket] tic tac toe</title>
    <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448</link>
    <description>Since I&#39;m new at Lisp perhaps you Lisp guys here (aka c`p, s1gma, t4, bnl, fc, Echo_, anthony_ etc.) could give me some feedback.

It&#39;s a command line Tic Tac Toe, written in Racket (basically Scheme) and it&#39;s pretty simple. I tried my best to stick with functional practices and avoid state, etc. but I probably failed at that as you can see below. I also had some trouble with multidimensional lists so you can tell pretty easily that I hacked up a quick solution.

But yeah, please tell me what I did wrong. :P

Lisp tags since Scheme tags are broken and Racket tags don&#39;t exist. :(

[code=lisp]#lang racket
; CLI Tic Tac Toe (Lisp Version).
; by Justin_

(require unstable/list)

(define TTT-SIZE 3)

(define (new-board sz)
  (define (new-row) (build-list sz (lambda (l) &quot; &quot;)))
  (build-list sz (lambda (l) (new-row))))

(define (board-at board x y)
  (list-ref (list-ref board y) x))

(define (is-avail? board x y)
  (string=? (board-at board x y) &quot; &quot;))

(define (is-marked? board c x y)
  (string=? (board-at board x y) c))

(define (mark board c x y)
  (cond
    ((or (out-of-bounds? board x y) (not (is-avail? board x y))) board)
    (else (list-update board y (lambda (l) (list-set l x c))))))

(define (out-of-bounds? board x y)
  (let ((sz (length board)))
    (or (&gt;= x sz) (&lt; x 0) (&gt;= y sz) (&lt; y 0))))

(define (is-draw? board)
  (zero? (count (lambda (s)
                  (string=? s &quot; &quot;)) (filter string? (flatten board)))))

(define (is-win? board c)
  (or (check-horiz? board c) (check-vert? board c) (check-diag? board c)))

(define (check-horiz? board c)
  (let ((sz (length board)))
    (&lt; (count false?
              (map (lambda (y) (has-filled-row? board c y))
                   (range sz))) sz)))

(define (has-filled-row? board c y)
  (= (count (lambda (l)
              (string=? l c)) (list-ref board y)) (length board)))

(define (check-vert? board c)
  (let ((sz (length board)))
    (&lt; (count false?
              (map (lambda (x) (has-filled-column? board c x))
                   (range sz))) sz)))

(define (has-filled-column? board c x)
  (let ((sz (length board)))
    (= (count (lambda (b) (not (false? b)))
              (map (lambda (l)
                     (string=? (list-ref (list-ref board l) x) c))
                   (range sz))) sz)))

(define (check-diag? board c)
  (let ((sz (length board)))
    (define (check-right-diag?)
      (zero? 
       (count false?
              (map (lambda (n)
                     (is-marked? board c n (- sz 1 n))) (range sz)))))
    (define (check-left-diag?)
      (zero?
       (count false?
              (map (lambda (n)
                     (is-marked? board c n n)) (range sz)))))
    (or (check-right-diag?) (check-left-diag?))))

(define (board-&gt;string board)
  (define (row-&gt;string row)
    (string-join
     (map (lambda (x) (string-append &quot;[&quot; x &quot;]&quot;)) row) &quot;&quot;))
  (string-join
   (map (lambda (x)
          (row-&gt;string (list-ref board x)))
        (range (length board))) &quot;\n&quot;))

(define (next-plr curr-p)
  (cond
    ((string=? curr-p &quot;x&quot;) &quot;o&quot;)
    (else &quot;x&quot;)))

(define (prompt-int s)
  (display s)
  (read))

(define (check-status board c)
  (cond ((is-win? board c)
         (displayln &quot;You have won!&quot;)
         (displayln (board-&gt;string board)) (exit))
        ((is-draw? board)
         (displayln &quot;It is a draw!&quot;) (exit))))

(define (tic-tac-toe-main sz)
  (displayln &quot;Welcome to CLI Tic Tac Toe - Written in Racket! :-)&quot;)
  (displayln &quot;Take turns marking a square. Coordinates start with 0.&quot;)
  (displayln &quot;Example: (1, 1) is the center square of a 3x3 board.&quot;)
  (tic-tac-toe-loop (new-board sz) &quot;x&quot;))

(define (tic-tac-toe-loop board p)
  (displayln (board-&gt;string board))
  (displayln (string-append &quot;It is now &quot; p &quot;&#39;s turn.&quot;))
  (let ((new-board (tic-tac-toe-input board p)))
    (cond
      ((is-draw? board) (display &quot;It is a draw!&quot;) (exit))
      (else (tic-tac-toe-loop new-board (next-plr p))))))

(define (tic-tac-toe-input board p)
  (let ((x (prompt-int &quot;Enter X: &quot;))
        (y (prompt-int &quot;Enter Y: &quot;)))
    (cond
      ((not (or (number? x) (number? y)))
       (displayln &quot;Invalid input. Try again.&quot;)
       (tic-tac-toe-input board p))
      (else
       (let ((new-board (mark board p x y)))
         (cond
           ((not (equal? board new-board))
            (displayln (string-append &quot;You have marked (&quot;
                                      (number-&gt;string x) &quot;, &quot;
                                      (number-&gt;string y) &quot;)&quot;))
            (check-status new-board p) new-board)
           (else
            (displayln &quot;That square is already marked/out of bounds.&quot;)
            (tic-tac-toe-input board p))))))))

(tic-tac-toe-main TTT-SIZE)[/code]

You can also visit https://gist.github.com/Whackatre/5334878 for superior syntax highlighting.</description>
    
    <lastBuildDate>Mon, 13 May 2013 17:26:42 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[racket] tic tac toe</title>
        <dc:creator><![CDATA[@imthenull imthenull]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/imthenull">@imthenull</a> wrote:</p>
          <blockquote>
              <p>cool, I wanna make my own tic tac toe in C now.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/5</link>
        <pubDate>Mon, 13 May 2013 17:26:42 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515448-5</guid>
        <source url="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss">[racket] tic tac toe</source>
      </item>
      <item>
        <title>[racket] tic tac toe</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>I also worked on a C version about a week ago. Once again feedback is appreciated! <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
<p>[code=c]/*</p>
<ul>
<li>ttt.c</li>
<li>by justin_</li>
<li>
</li>
<li>CLI Tic Tac Toe - The C version.<br>
*/</li>
</ul>
<p><span class="hashtag">#include</span> &lt;stdio.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdlib.h&gt;<br>
<span class="hashtag">#include</span> &lt;string.h&gt;<br>
<span class="hashtag">#include</span> &lt;stdbool.h&gt;<br>
<span class="hashtag">#include</span> &lt;ctype.h&gt;</p>
<p><span class="hashtag">#define</span> X_CHR ‘x’<br>
<span class="hashtag">#define</span> O_CHR ‘o’<br>
<span class="hashtag">#define</span> FIRST_PLR X_CHR<br>
<span class="hashtag">#define</span> TTT_SZ 3<br>
<span class="hashtag">#define</span> INPUT_MAX 32</p>
<p>typedef char t_board[TTT_SZ][TTT_SZ];</p>
<p>void brd_reset(t_board board) {<br>
int y, x;<br>
for (y = 0; y &lt; TTT_SZ; ++y) {<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
board[y][x] = ’ ';<br>
}<br>
}<br>
}</p>
<p>void brd_show(t_board board) {<br>
int y, x;<br>
for (y = 0; y &lt; TTT_SZ; ++y) {<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
printf("[%c]", board[y][x]);<br>
}<br>
printf("\n");<br>
}<br>
}</p>
<p>bool is_avail(t_board board, int x, int y) {<br>
return board[y][x] == ’ ';<br>
}</p>
<p>bool out_of_bounds(t_board board, int x, int y) {<br>
return x &gt;= TTT_SZ || x &lt; 0 || y &gt;= TTT_SZ || y &lt; 0;<br>
}</p>
<p>bool is_marked(t_board board, char c, int x, int y) {<br>
return board[y][x] == c;<br>
}</p>
<p>bool mark(t_board board, char c, int x, int y) {<br>
if (out_of_bounds(board, x, y) || !(is_avail(board, x, y))) {<br>
return false;<br>
}<br>
board[y][x] = c;<br>
return true;<br>
}</p>
<p>bool is_draw(t_board board) {<br>
int y, x;<br>
for (y = 0; y &lt; TTT_SZ; ++y) {<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
if (board[y][x] == ’ ') {<br>
return false;<br>
}<br>
}<br>
}<br>
return true;<br>
}</p>
<p>bool check_horizontal(t_board board, char c) {<br>
int y, x;<br>
for (y = 0; y &lt; TTT_SZ; ++y) {<br>
int sq = 0;<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
if (is_marked(board, c, x, y)) {<br>
++sq;<br>
}<br>
}<br>
if (sq == TTT_SZ) {<br>
return true;<br>
}<br>
}<br>
return false;<br>
}</p>
<p>bool check_vertical(t_board board, char c) {<br>
int y, x;<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
int sq = 0;<br>
for (y = 0; y &lt; TTT_SZ; ++y) {<br>
if (is_marked(board, c, x, y)) {<br>
++sq;<br>
}<br>
}<br>
if (sq == TTT_SZ) {<br>
return true;<br>
}<br>
}<br>
return false;<br>
}</p>
<p>bool check_diagonal(t_board board, char c) {<br>
int y, x, sq = 0;<br>
for (x = 0; x &lt; TTT_SZ; ++x) {<br>
if (is_marked(board, c, x, TTT_SZ - 1 - x)) {<br>
++sq;<br>
}<br>
}<br>
if (sq == TTT_SZ) {<br>
return true;<br>
}<br>
sq = 0;</p>
<pre><code>// Note: The parameters in function is_marked below are not a typo.
for (x = 0; x &lt; TTT_SZ; ++x) {
	if (is_marked(board, c, x, x)) {
		++sq;
	}
}
if (sq == TTT_SZ) {
	return true;
}
return false;
</code></pre>
<p>}</p>
<p>bool is_win(t_board board, char c) {<br>
return check_horizontal(board, c) || check_vertical(board, c) || check_diagonal(board, c);<br>
}</p>
<p>void str_input(char buf[], char s[]) {<br>
int n = 0;</p>
<pre><code>// Clean the input buffer from previous use.
// memset(buf, 0, sizeof(buf));
if (s != NULL) {
	printf("%s ", s);
}
while (1) {
	char c = getchar();
	if (c == EOF) {
		exit(EXIT_FAILURE);
	} else if (c == '\n') {
		buf[n] = '\0';
		return;
	} else if (n &lt; sizeof(buf) - 1) {
		buf[n++] = c;
	}
}
</code></pre>
<p>}</p>
<p>int main(int argc, char *argv[]) {<br>
char c, buf[INPUT_MAX], currplr;<br>
t_board board;</p>
<pre><code>memset(buf, 0, sizeof(buf));
brd_reset(board);
currplr = FIRST_PLR;

printf("Welcome to CLI Tic Tac Toe - Written in C.\n"
	"Take turns marking a square. Coordinates start with 0.\n"
	"Example: (1, 1) is the center square in a 3x3.\n"
	"Terminate this program using CTRL-C/D.\n");

while (1) {
	while (1) {
		int x = 0, y = 0;
		brd_show(board);
		printf("It is now %c's turn.\n", toupper(currplr));

		str_input(buf, "Enter X:");
		x = atoi(buf);
		str_input(buf, "Enter Y:");
		y = atoi(buf);

		if (mark(board, currplr, x, y)) {
			printf("You have marked (%d, %d).\n", x, y);
			break;
		} else {
			printf("That square is already marked/out of bounds. Try again.\n");
			continue;
		}
	}
	if (is_win(board, currplr)) {
		printf("Congratulations, player %c. You have won! :-)\n", toupper(currplr));
		brd_show(board);
		return EXIT_SUCCESS;
	} else if (is_draw(board)) {
		printf("It is a draw.\n");
		return EXIT_SUCCESS;
	}
	currplr = currplr == X_CHR ? O_CHR : X_CHR;
}
return EXIT_SUCCESS;
</code></pre>
<p>}[/code]</p>
<p>(<a href="https://gist.github.com/Whackatre/5493815" rel="nofollow noopener">https://gist.github.com/Whackatre/5493815</a>)</p>
<p>[quote=“Ollie, post:3, topic:515448”]))))))))</p>
<p>WTF?[/quote]</p>
<p>ye m8</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/4</link>
        <pubDate>Mon, 06 May 2013 14:41:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515448-4</guid>
        <source url="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss">[racket] tic tac toe</source>
      </item>
      <item>
        <title>[racket] tic tac toe</title>
        <dc:creator><![CDATA[@Ollie Ollie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie">@Ollie</a> wrote:</p>
          <blockquote>
              <p>))))))))</p>
<p>WTF?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/3</link>
        <pubDate>Wed, 10 Apr 2013 17:43:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515448-3</guid>
        <source url="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss">[racket] tic tac toe</source>
      </item>
      <item>
        <title>[racket] tic tac toe</title>
        <dc:creator><![CDATA[@Rixxx Rix_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/rixxx">@Rixxx</a> wrote:</p>
          <blockquote>
              <p>[quote=“Whackatre, post:1, topic:515448”]But yeah, please tell me what I did wrong. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Lisp[/quote]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/2</link>
        <pubDate>Tue, 09 Apr 2013 13:10:23 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515448-2</guid>
        <source url="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss">[racket] tic tac toe</source>
      </item>
      <item>
        <title>[racket] tic tac toe</title>
        <dc:creator><![CDATA[@whackatre Whackatre]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/whackatre">@whackatre</a> wrote:</p>
          <blockquote>
              <p>Since I’m new at Lisp perhaps you Lisp guys here (aka c`p, s1gma, t4, bnl, fc, Echo_, anthony_ etc.) could give me some feedback.</p>
<p>It’s a command line Tic Tac Toe, written in Racket (basically Scheme) and it’s pretty simple. I tried my best to stick with functional practices and avoid state, etc. but I probably failed at that as you can see below. I also had some trouble with multidimensional lists so you can tell pretty easily that I hacked up a quick solution.</p>
<p>But yeah, please tell me what I did wrong. <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>Lisp tags since Scheme tags are broken and Racket tags don’t exist. <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>[code=lisp]<span class="hashtag">#lang</span> racket<br>
; CLI Tic Tac Toe (Lisp Version).<br>
; by Justin_</p>
<p>(require unstable/list)</p>
<p>(define TTT-SIZE 3)</p>
<p>(define (new-board sz)<br>
(define (new-row) (build-list sz (lambda (l) " ")))<br>
(build-list sz (lambda (l) (new-row))))</p>
<p>(define (board-at board x y)<br>
(list-ref (list-ref board y) x))</p>
<p>(define (is-avail? board x y)<br>
(string=? (board-at board x y) " "))</p>
<p>(define (is-marked? board c x y)<br>
(string=? (board-at board x y) c))</p>
<p>(define (mark board c x y)<br>
(cond<br>
((or (out-of-bounds? board x y) (not (is-avail? board x y))) board)<br>
(else (list-update board y (lambda (l) (list-set l x c))))))</p>
<p>(define (out-of-bounds? board x y)<br>
(let ((sz (length board)))<br>
(or (&gt;= x sz) (&lt; x 0) (&gt;= y sz) (&lt; y 0))))</p>
<p>(define (is-draw? board)<br>
(zero? (count (lambda (s)<br>
(string=? s " ")) (filter string? (flatten board)))))</p>
<p>(define (is-win? board c)<br>
(or (check-horiz? board c) (check-vert? board c) (check-diag? board c)))</p>
<p>(define (check-horiz? board c)<br>
(let ((sz (length board)))<br>
(&lt; (count false?<br>
(map (lambda (y) (has-filled-row? board c y))<br>
(range sz))) sz)))</p>
<p>(define (has-filled-row? board c y)<br>
(= (count (lambda (l)<br>
(string=? l c)) (list-ref board y)) (length board)))</p>
<p>(define (check-vert? board c)<br>
(let ((sz (length board)))<br>
(&lt; (count false?<br>
(map (lambda (x) (has-filled-column? board c x))<br>
(range sz))) sz)))</p>
<p>(define (has-filled-column? board c x)<br>
(let ((sz (length board)))<br>
(= (count (lambda (b) (not (false? b)))<br>
(map (lambda (l)<br>
(string=? (list-ref (list-ref board l) x) c))<br>
(range sz))) sz)))</p>
<p>(define (check-diag? board c)<br>
(let ((sz (length board)))<br>
(define (check-right-diag?)<br>
(zero?<br>
(count false?<br>
(map (lambda (n)<br>
(is-marked? board c n (- sz 1 n))) (range sz)))))<br>
(define (check-left-diag?)<br>
(zero?<br>
(count false?<br>
(map (lambda (n)<br>
(is-marked? board c n n)) (range sz)))))<br>
(or (check-right-diag?) (check-left-diag?))))</p>
<p>(define (board-&gt;string board)<br>
(define (row-&gt;string row)<br>
(string-join<br>
(map (lambda (x) (string-append “[” x “]”)) row) “”))<br>
(string-join<br>
(map (lambda (x)<br>
(row-&gt;string (list-ref board x)))<br>
(range (length board))) “\n”))</p>
<p>(define (next-plr curr-p)<br>
(cond<br>
((string=? curr-p “x”) “o”)<br>
(else “x”)))</p>
<p>(define (prompt-int s)<br>
(display s)<br>
(read))</p>
<p>(define (check-status board c)<br>
(cond ((is-win? board c)<br>
(displayln “You have won!”)<br>
(displayln (board-&gt;string board)) (exit))<br>
((is-draw? board)<br>
(displayln “It is a draw!”) (exit))))</p>
<p>(define (tic-tac-toe-main sz)<br>
(displayln “Welcome to CLI Tic Tac Toe - Written in Racket! :-)”)<br>
(displayln “Take turns marking a square. Coordinates start with 0.”)<br>
(displayln “Example: (1, 1) is the center square of a 3x3 board.”)<br>
(tic-tac-toe-loop (new-board sz) “x”))</p>
<p>(define (tic-tac-toe-loop board p)<br>
(displayln (board-&gt;string board))<br>
(displayln (string-append "It is now " p “'s turn.”))<br>
(let ((new-board (tic-tac-toe-input board p)))<br>
(cond<br>
((is-draw? board) (display “It is a draw!”) (exit))<br>
(else (tic-tac-toe-loop new-board (next-plr p))))))</p>
<p>(define (tic-tac-toe-input board p)<br>
(let ((x (prompt-int "Enter X: "))<br>
(y (prompt-int "Enter Y: ")))<br>
(cond<br>
((not (or (number? x) (number? y)))<br>
(displayln “Invalid input. Try again.”)<br>
(tic-tac-toe-input board p))<br>
(else<br>
(let ((new-board (mark board p x y)))<br>
(cond<br>
((not (equal? board new-board))<br>
(displayln (string-append “You have marked (”<br>
(number-&gt;string x) ", "<br>
(number-&gt;string y) “)”))<br>
(check-status new-board p) new-board)<br>
(else<br>
(displayln “That square is already marked/out of bounds.”)<br>
(tic-tac-toe-input board p))))))))</p>
<p>(tic-tac-toe-main TTT-SIZE)[/code]</p>
<p>You can also visit <a href="https://gist.github.com/Whackatre/5334878" rel="nofollow noopener">https://gist.github.com/Whackatre/5334878</a> for superior syntax highlighting.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448/1</link>
        <pubDate>Mon, 08 Apr 2013 07:31:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-515448-1</guid>
        <source url="https://forum.moparisthebest.com/t/racket-tic-tac-toe/515448.rss">[racket] tic tac toe</source>
      </item>
  </channel>
</rss>
