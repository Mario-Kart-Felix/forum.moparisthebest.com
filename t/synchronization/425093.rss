<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Synchronization</title>
    <link>https://forum.moparisthebest.com/t/synchronization/425093</link>
    <description>*</description>
    
    <lastBuildDate>Thu, 15 Dec 2011 16:15:52 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/synchronization/425093.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“dain bramage, post:6, topic:425093”][quote author=sinisoul link=topic=527757.msg3849943#msg3849943 date=1323925087]</p>
<aside class="quote">
<blockquote>
<pre><code class="lang-auto"></code></pre>
</blockquote>
</aside>
<p>Wouldn’t work for what I am doing.</p>
<pre><code class="lang-auto">synchronized(this) {</code></pre>
<p>Would be overkill.</p>
<p>That’s why I did the blocks individually, since the two files are considered separate.<br>
[/quote]<br>
You don’t need to do the blocks separately. The method can be synchronized so only one thread can call the method at a time (others will sleep until the method finishes for the first). You do not need to synchronize every file that may cause a problem if synchronization isn’t implemented. You could also always make an object lock if you want to…</p>
<p>[code]private final Object lock = new Object();</p>
<p>public void write(FileArchive archive) throws IOException {<br>
synchronized(lock) {<br>
// Do whatever here<br>
}<br>
}[/code][/quote]</p>
<p>This would be true, if it was just one method. There is both a read and write method and it could be possible for the two to happen at the same time. Since the two files are considered to be different entities, then you could use a single lock or use separate locks which make more sense in the long run.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/8</link>
        <pubDate>Thu, 15 Dec 2011 16:15:52 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-8</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@CodeForFame CodeForFame]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/codeforfame">@CodeForFame</a> wrote:</p>
          <blockquote>
              <p>[quote=“dain bramage, post:6, topic:425093”][quote author=sinisoul link=topic=527757.msg3849943#msg3849943 date=1323925087]</p>
<aside class="quote">
<blockquote>
<pre><code class="lang-auto"></code></pre>
</blockquote>
</aside>
<p>Wouldn’t work for what I am doing.</p>
<pre><code class="lang-auto">synchronized(this) {</code></pre>
<p>Would be overkill.</p>
<p>That’s why I did the blocks individually, since the two files are considered separate.<br>
[/quote]<br>
You don’t need to do the blocks separately. The method can be synchronized so only one thread can call the method at a time (others will sleep until the method finishes for the first). You do not need to synchronize every file that may cause a problem if synchronization isn’t implemented. You could also always make an object lock if you want to…</p>
<p>[code]private final Object lock = new Object();</p>
<p>public void write(FileArchive archive) throws IOException {<br>
synchronized(lock) {<br>
// Do whatever here<br>
}<br>
}[/code][/quote]<br>
Synchronizing this method doesn’t conform to the idea that locks should be held for the least amount of instructions as possible.</p>
<p>I think multiple blocks is justified seeing it’s accessing multiple files.  I mean, if it’s done with the first file why not let another thread start working on it, while the first thread is working on the second one?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/7</link>
        <pubDate>Thu, 15 Dec 2011 15:47:38 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-7</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <p>[quote=“sinisoul, post:5, topic:425093”][quote author=dain bramage link=topic=527757.msg3849304#msg3849304 date=1323896112]</p>
<pre><code class="lang-auto"></code></pre>
<p>[/quote]</p>
<p>Wouldn’t work for what I am doing.</p>
<pre><code class="lang-auto">synchronized(this) {</code></pre>
<p>Would be overkill.</p>
<p>That’s why I did the blocks individually, since the two files are considered separate.[/quote]<br>
You don’t need to do the blocks separately. The method can be synchronized so only one thread can call the method at a time (others will sleep until the method finishes for the first). You do not need to synchronize every file that may cause a problem if synchronization isn’t implemented. You could also always make an object lock if you want to…</p>
<p>[code]private final Object lock = new Object();</p>
<p>public void write(FileArchive archive) throws IOException {<br>
synchronized(lock) {<br>
// Do whatever here<br>
}<br>
}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/6</link>
        <pubDate>Thu, 15 Dec 2011 14:07:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-6</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <aside class="quote" data-post="4" data-topic="425093">
<div class="title">
<div class="quote-controls"></div>
 dain bramage:</div>
<blockquote>
<p><code>public synchronized void write(FileArchive archive) throws IOException {</code></p>
</blockquote>
</aside>
<p>Wouldn’t work for what I am doing.</p>
<pre><code class="lang-auto">synchronized(this) {</code></pre>
<p>Would be overkill.</p>
<p>That’s why I did the blocks individually, since the two files are considered separate.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/5</link>
        <pubDate>Thu, 15 Dec 2011 04:58:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-5</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@dain_bramage dain bramage]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/dain_bramage">@dain_bramage</a> wrote:</p>
          <blockquote>
              <pre><code class="lang-auto"></code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/4</link>
        <pubDate>Wed, 14 Dec 2011 20:55:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-4</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <p>[quote=“Taharok, post:2, topic:425093”]Well, you may have a logic flaw to assume multiple threads can read from the file archive (at any pointer, for any size) concurrently. The java monitor construct is designed to force threads to pause during execution if they wish to access code which is currently locked by another thread. The file lock employs similar concepts to file IO, for that given channel. They are two entirely different concepts, and separately achieve similar effects.</p>
<p>For starters, if that’s the sole usage of [tt]indexfile[/tt], then you don’t even need the file lock. The synchronization block will prevent multiple reads from the file, regardless of the location or size. On the opposite end of the spectrum, if the file lock exists to prevent reading from a given chunk in a file in a concurrent environment, will that’s impossible with the synchronization block there. Only one thread can access that file channel during that method at any given instance. So together, one functionality overrides another.</p>
<p>However, if the point of this method is to:</p>
<ol>
<li>Allow one, and only one, read operation at any given moment regardless of threads</li>
<li>Allow reading to occur at an exact place in a file for an exact length of bytes without the intersection of any other IO operations for that file channel<br>
then the way it is programmed is correct.</li>
</ol>
<p>Chances are, you were intending the following:</p>
<ol>
<li>Allow multiple threads to read from a file, but an exact chunk of the file (given by an offset and length) can only be read by a single thread at a time<br>
This new setup implies you don’t need the synchronization block.[/quote]</li>
</ol>
<p>Very glad someone who knew what they are talking about posted, I will definitely look at what you said in detail after I finish my write method. Thanks for the help. Oh I might have forgotten to mention that,</p>
<pre><code class="lang-auto">public void write(FileArchive archive) throws IOException {
        if(archive.getIndex() != n)
            throw new RuntimeException("Invalid write operation "+archive);
        final byte[] bytes = archive.getBytes();
        boolean merge = true;
        int block;   
        synchronized(indexfile) {
            FileChannel channel = indexfile.getChannel();
            channel.position(INDEXBLOCKSIZE * archive.getFile());
            FileLock lock = channel.lock(indexfile.getFilePointer(), INDEXBLOCKSIZE, false);
            ByteBuffer buffer = ByteBuffer.allocate(INDEXBLOCKSIZE);
            int read;
            for(int i = 0; i &lt; INDEXBLOCKSIZE; i += read) {
                read = channel.read(buffer);
                if(read &lt; 0) {
                    merge = false;
                    break;
                }
            }
            buffer.rewind();
            BufferUtils.skip(buffer, 3);
            block = merge ? (int) ((datafile.length() + 519L)/512L) : BufferUtils.getTri(buffer);
            block = block &gt; 0 ? block : 1;
            buffer.rewind();
            BufferUtils.putTri(buffer, bytes.length);
            BufferUtils.putTri(buffer, block);
            buffer.flip();
            channel.write(buffer);
            lock.release();
        }
        synchronized(datafile) {
            FileChannel channel = datafile.getChannel();
            int offset = 0;
            for(int c = 0; offset &lt; bytes.length; c++) {
                channel.position(DATABLOCKSIZE * block);
                FileLock lock = channel.lock(datafile.getFilePointer(), DATABLOCKSIZE, false);
                ByteBuffer buffer = ByteBuffer.allocate(DATABLOCKSIZE);
                if(merge) {
                    int read = 0;
                    for(int i = 0; i &lt; DATABLOCKSIZE; i += read) {
                        read = channel.read(buffer);
                        if(read &lt; 0) {
                            merge = false;
                            break;
                        }
                    }
                }
                if(merge) {
                    int file = buffer.getShort();
                    int chunk = buffer.getShort();
                    block = BufferUtils.getTri(buffer);
                    int index = buffer.get();
                    if(index - 1 != n || chunk != c || file != archive.getFile())
                        throw new InvalidArchiveException("Invalid check variable Index="
                        +(index -1 == n)+", Chunk="+(chunk == c)+", "
                        + "File="+(file == archive.getFile()));
                } else {
                    int oldvalue = block;
                    block = (int) ((datafile.length() + 519L)/512L);
                    if(block &lt;= 0)
                        block = 1;
                    if(block == oldvalue)
                        block++;
                }
                int size = bytes.length - offset &gt; DATABLOCKSIZE ? DATABLOCKSIZE : bytes.length - offset;
                if(size &lt;= 512)
                    block = 0;               
                buffer.rewind();
                buffer.putShort((short) archive.getFile());
                buffer.putShort((short) c);
                BufferUtils.putTri(buffer, block);
                buffer.put((byte) (n + 1));
                buffer.put(bytes, offset, size - HEADERSIZE);
                buffer.flip();
                channel.write(buffer);
                lock.release();
                offset += size;
            }           
        }
    } </code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/3</link>
        <pubDate>Tue, 13 Dec 2011 01:10:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-3</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Well, you may have a logic flaw to assume multiple threads can read from the file archive (at any pointer, for any size) concurrently. The java monitor construct is designed to force threads to pause during execution if they wish to access code which is currently locked by another thread. The file lock employs similar concepts to file IO, for that given channel. They are two entirely different concepts, and separately achieve similar effects.</p>
<p>For starters, if that’s the sole usage of [tt]indexfile[/tt], then you don’t even need the file lock. The synchronization block will prevent multiple reads from the file, regardless of the location or size. On the opposite end of the spectrum, if the file lock exists to prevent reading from a given chunk in a file in a concurrent environment, will that’s impossible with the synchronization block there. Only one thread can access that file channel during that method at any given instance. So together, one functionality overrides another.</p>
<p>However, if the point of this method is to:</p>
<ol>
<li>Allow one, and only one, read operation at any given moment regardless of threads</li>
<li>Allow reading to occur at an exact place in a file for an exact length of bytes without the intersection of any other IO operations for that file channel<br>
then the way it is programmed is correct.</li>
</ol>
<p>Chances are, you were intending the following:</p>
<ol>
<li>Allow multiple threads to read from a file, but an exact chunk of the file (given by an offset and length) can only be read by a single thread at a time<br>
This new setup implies you don’t need the synchronization block.</li>
</ol>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/2</link>
        <pubDate>Tue, 13 Dec 2011 00:54:45 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-2</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
      <item>
        <title>Synchronization</title>
        <dc:creator><![CDATA[@sinisoul sini]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinisoul">@sinisoul</a> wrote:</p>
          <blockquote>
              <ul>
<li>
</li>
</ul>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/synchronization/425093/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/synchronization/425093/1</link>
        <pubDate>Mon, 12 Dec 2011 23:16:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-425093-1</guid>
        <source url="https://forum.moparisthebest.com/t/synchronization/425093.rss">Synchronization</source>
      </item>
  </channel>
</rss>
