<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>java.lang.ArrayIndexOutOfBoundsException - Help</title>
    <link>https://forum.moparisthebest.com/t/java-lang-arrayindexoutofboundsexception-help/388303</link>
    <description>[code]java.lang.ArrayIndexOutOfBoundsException: 20001
        at stream.createFrame(stream.java:34)
        at client$$M$66bfc4ac.logout(client.java:17476)
        at client$$A$66bfc4ac.logout(&lt;generated&gt;)
        at client.logout(client.java:17439)
        at PlayerHandler.saveGame(PlayerHandler.java:379)
        at PlayerHandler.removePlayer(PlayerHandler.java:371)
        at PlayerHandler.process(PlayerHandler.java:284)
        at process.run(process.java:14)
        at java.lang.Thread.run(Thread.java:619)
[/code]

It happens when I click button 66111:
[code]case 66111:
	for(int z = 0; z &lt; 101; z++) {
	for(int t = 0; t &lt; 28; t++) {
		c.bankItem(z, t, 2147400000);
		}
	}
break;[/code]

Bankitem method: (Sorry its huge)
[code]
	public boolean bankItem(int itemID, int fromSlot, int amount) {
		if (!IsBanking)
			return false;
		if (playerItemsN[fromSlot] &lt;= 0) {
			return false;
		}
		if (!Item.itemIsNote[playerItems[fromSlot] - 1]) {
			if (playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[playerItems[fromSlot] - 1]
					|| (playerItemsN[fromSlot] &gt; 1)) {
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == playerItems[fromSlot]) {
						if (playerItemsN[fromSlot] &lt; amount) {
							amount = playerItemsN[fromSlot];
						}
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}

				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					bankItems[toBankSlot] = playerItems[fromSlot];
					if (playerItemsN[fromSlot] &lt; amount) {
						amount = playerItemsN[fromSlot];
					}
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						sM(&quot;Bank full!&quot;);
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						sM(&quot;Bank full!&quot;);
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM(&quot;Bank full!&quot;);
					return false;
				}
			} else {
				itemID = playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == playerItems[fromSlot]) {
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}
				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItems[toBankSlot] = playerItems[firstPossibleSlot];
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM(&quot;Bank full!&quot;);
					return false;
				}
			}
		} else if (Item.itemIsNote[playerItems[fromSlot] - 1]
				&amp;&amp; !Item.itemIsNote[playerItems[fromSlot] - 2]) {
			if (playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[playerItems[fromSlot] - 1]
					|| (playerItemsN[fromSlot] &gt; 1)) {
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == (playerItems[fromSlot] - 1)) {
						if (playerItemsN[fromSlot] &lt; amount) {
							amount = playerItemsN[fromSlot];
						}
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}

				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					bankItems[toBankSlot] = (playerItems[fromSlot] - 1);
					if (playerItemsN[fromSlot] &lt; amount) {
						amount = playerItemsN[fromSlot];
					}
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM(&quot;Bank full!&quot;);
					return false;
				}
			} else {
				itemID = playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == (playerItems[fromSlot] - 1)) {
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}
				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItems[toBankSlot] = (playerItems[firstPossibleSlot] - 1);
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM(&quot;Bank full!&quot;);
					return false;
				}
			}
		} else {
			sM(&quot;Item not supported &quot; + (playerItems[fromSlot] - 1));
			return false;
		}
	}
[/code]

What is causing the exception?  :confused:</description>
    
    <lastBuildDate>Sun, 27 Mar 2011 16:23:53 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/java-lang-arrayindexoutofboundsexception-help/388303.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>java.lang.ArrayIndexOutOfBoundsException - Help</title>
        <dc:creator><![CDATA[@4markie 4markie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/4markie">@4markie</a> wrote:</p>
          <blockquote>
              <p><code>java.lang.ArrayIndexOutOfBoundsException: 20001
        at stream.createFrame(stream.java:34)
        at client$$M$66bfc4ac.logout(client.java:17476)
        at client$$A$66bfc4ac.logout(&lt;generated&gt;)
        at client.logout(client.java:17439)
        at PlayerHandler.saveGame(PlayerHandler.java:379)
        at PlayerHandler.removePlayer(PlayerHandler.java:371)
        at PlayerHandler.process(PlayerHandler.java:284)
        at process.run(process.java:14)
        at java.lang.Thread.run(Thread.java:619)
</code></p>
<p>It happens when I click button 66111:</p>
<p><code>case 66111:
	for(int z = 0; z &lt; 101; z++) {
	for(int t = 0; t &lt; 28; t++) {
		c.bankItem(z, t, 2147400000);
		}
	}
break;</code></p>
<p>Bankitem method: (Sorry its huge)</p>
<pre><code class="lang-auto">	public boolean bankItem(int itemID, int fromSlot, int amount) {
		if (!IsBanking)
			return false;
		if (playerItemsN[fromSlot] &lt;= 0) {
			return false;
		}
		if (!Item.itemIsNote[playerItems[fromSlot] - 1]) {
			if (playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[playerItems[fromSlot] - 1]
					|| (playerItemsN[fromSlot] &gt; 1)) {
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == playerItems[fromSlot]) {
						if (playerItemsN[fromSlot] &lt; amount) {
							amount = playerItemsN[fromSlot];
						}
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}

				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					bankItems[toBankSlot] = playerItems[fromSlot];
					if (playerItemsN[fromSlot] &lt; amount) {
						amount = playerItemsN[fromSlot];
					}
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						sM("Bank full!");
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						sM("Bank full!");
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM("Bank full!");
					return false;
				}
			} else {
				itemID = playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == playerItems[fromSlot]) {
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}
				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItems[toBankSlot] = playerItems[firstPossibleSlot];
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM("Bank full!");
					return false;
				}
			}
		} else if (Item.itemIsNote[playerItems[fromSlot] - 1]
				&amp;&amp; !Item.itemIsNote[playerItems[fromSlot] - 2]) {
			if (playerItems[fromSlot] &lt;= 0) {
				return false;
			}
			if (Item.itemStackable[playerItems[fromSlot] - 1]
					|| (playerItemsN[fromSlot] &gt; 1)) {
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == (playerItems[fromSlot] - 1)) {
						if (playerItemsN[fromSlot] &lt; amount) {
							amount = playerItemsN[fromSlot];
						}
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}

				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					bankItems[toBankSlot] = (playerItems[fromSlot] - 1);
					if (playerItemsN[fromSlot] &lt; amount) {
						amount = playerItemsN[fromSlot];
					}
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					if (((bankItemsN[toBankSlot] + amount) &lt;= maxItemAmount)
							&amp;&amp; ((bankItemsN[toBankSlot] + amount) &gt; -1)) {
						bankItemsN[toBankSlot] += amount;
					} else {
						return false;
					}
					deleteItem((playerItems[fromSlot] - 1), fromSlot, amount);
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM("Bank full!");
					return false;
				}
			} else {
				itemID = playerItems[fromSlot];
				int toBankSlot = 0;
				boolean alreadyInBank = false;

				for (int i = 0; i &lt; playerBankSize; i++) {
					if (bankItems[i] == (playerItems[fromSlot] - 1)) {
						alreadyInBank = true;
						toBankSlot = i;
						i = playerBankSize + 1;
					}
				}
				if (!alreadyInBank &amp;&amp; (freeBankSlots() &gt; 0)) {
					for (int i = 0; i &lt; playerBankSize; i++) {
						if (bankItems[i] &lt;= 0) {
							toBankSlot = i;
							i = playerBankSize + 1;
						}
					}
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItems[toBankSlot] = (playerItems[firstPossibleSlot] - 1);
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else if (alreadyInBank) {
					int firstPossibleSlot = 0;
					boolean itemExists = false;

					while (amount &gt; 0) {
						itemExists = false;
						for (int i = firstPossibleSlot; i &lt; playerItems.length; i++) {
							if ((playerItems[i]) == itemID) {
								firstPossibleSlot = i;
								itemExists = true;
								i = 30;
							}
						}
						if (itemExists) {
							bankItemsN[toBankSlot] += 1;
							deleteItem((playerItems[firstPossibleSlot] - 1),
									firstPossibleSlot, 1);
							amount--;
						} else {
							amount = 0;
						}
					}
					resetItems(5064);
					resetBank();
					return true;
				} else {
					sM("Bank full!");
					return false;
				}
			}
		} else {
			sM("Item not supported " + (playerItems[fromSlot] - 1));
			return false;
		}
	}</code></pre>
<p>What is causing the exception?  <img src="https://forum.moparisthebest.com/images/emoji/twitter/confused.png?v=5" title=":confused:" class="emoji" alt=":confused:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/java-lang-arrayindexoutofboundsexception-help/388303/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/java-lang-arrayindexoutofboundsexception-help/388303/1</link>
        <pubDate>Sun, 27 Mar 2011 16:23:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-388303-1</guid>
        <source url="https://forum.moparisthebest.com/t/java-lang-arrayindexoutofboundsexception-help/388303.rss">java.lang.ArrayIndexOutOfBoundsException - Help</source>
      </item>
  </channel>
</rss>
