<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Block SYIS,FLOODS,NULLS</title>
    <link>https://forum.moparisthebest.com/t/block-syis-floods-nulls/322078</link>
    <description>.:When I say Server class It means Server.java:.
.:When I say client class it means Client.java :.
Etc Keep that In Mind

.:You Maybe Thinking right now as you View This &quot;holy fuckin shit thats long!&quot; :.
.:it May Look Long But its really Short :.

.: Is this Clean,stable? :.
Yep

THIS IS TESTED to Be 100% WORKING
I even have it on my server myself!
*This works on any base you just gota declare some shit Like czar*

First open server.java
declare this arraylist under &quot;server implements runnable {&quot;
[code]
public static ArrayList&lt;String&gt; connectedList = new ArrayList&lt;String&gt;();
[/code]

now in the server class find this:
[code]
if (true) {
[/code]

IT MAY HAVE A COMMENT /*      */ THAT TAKES UP ABOUT 2 LINES DEPENDING ON YOUR SOURCE.
it also May Look Like this
[code]					if ( /*
					 * connectingHost.startsWith(&quot;localhost&quot;) ||
					 * connectingHost.equals(&quot;127.0.0.1&quot;)
					 */true) {[/code]
replace &quot;true&quot; with this:
or just replace the whole if true thing with
[code]
!connectedList.contains(connectingHost)
[/code]

so it looks like this:
[code]
if (!connectedList.contains(connectingHost)) {
[/code]



now a couple lines under that if statement, u should see &quot;} else {&quot; twice, above the second one add this line:
[code]
connectedList.add(connectingHost);
[/code]


now in your client class, in your destruct method, right below:
[code]
disconnected = true;
[/code]

 add this:
[code]
server.connectedList.remove(mySock.getInetAddress().getHostName());
[/code]



and your done, this will block floods and syi from connecting in the first place, as it will only allow 1 connection per ip address, if u want to allow more than 1 connection per ip then just post and ill post the code.


 IF YOU WANT TO ALLOW MORE THAN 1 CONNECTION, LIKE 2 OR 3 FOR INSTANCE:

add this method to your server class:
[code]
public boolean Contains(int a, String c) {
	String[] array = new String[connectedList.size()];
	connectedList.toArray(array);
	int result = 0;
	for (int b = 0; b &lt; array.length; b++) {
		if (array[b].equalsIgnoreCase(c))
			result++;
	}
	if (result &gt;= a)
		return true;
	return false;
}
[/code]


and replace this:
[code]
if (!connectedList.contains(connectingHost)) {
[/code]

with this:
[code]
if (!Contains(AMOUNT YOU WANT TO ALLOW, connectingHost)) {
[/code]

filling in the amount of connections per ip you would like to allow.

Next now that floodings fixed now to patch that annoying rejected (IP) 

go to your server class
find
[code]public void run() {[/code]

find something like this
urs might be diffrent
[code]                        if (connectingHost.contains(&quot;*&quot;)) {
                            misc.println(&quot;Checking Server Status...&quot;);
                            s.close();
                        } else {[/code]
add this under it
[code]                            connections.add(connectingHost);
                            if (limitcount(connectingHost) &gt; 2) {
                                s.close();
                            }[/code]
next
search for
[code]} catch (java.io.IOException ioe) {[/code]
remove one bracket }
and add this
under it
[code]    public int limitcount(String host) {
        int numz = 0;
        for (String h : connections) {
            if (host.equals(h)) {
                numz++;
            }
        return numz;
        }
        return numz;
        }
}[/code]

Stage 2: Blocking NULL SO it does Not Appear In the Players

1.open server.java
check if you have this [code]import java.net.*;[/code]
it should be somewhere near the top

2. Add this somewhere in server.java

[Code]
public Socket acceptSocketSafe(ServerSocket x) {
   boolean socketFound = false;
   Socket s = null;
   do {
      try {
      s = x.accept();
      int i = s.getInputStream().read();
      if ((i &amp; 0xFF) == 14) {
        socketFound = true;
      }
   } catch (Exception e) {
   }
} while (!socketFound);

return s;
}
[/code]
3. Replace

[Code]
java.net.Socket s = clientListener.accept();
[/code]
with

[Code]
java.net.Socket s = acceptSocketSafe(clientListener);
[/code]
4. Open client.java, and replace

[Code]
fillInStream(2);
 if(inStream.readUnsignedByte() != 14) {
 shutdownError(&quot;Expected login Id 14 from client.&quot;);
 disconnected = true;
 return;
}
[/code]
with

[Code]
fillInStream(1);
[/code]

save and compile
and ur set to block floods,and syis

THIS IS TESTED to Be 100% WORKING
I even have it on my server myself!

if ur haveing trouble
since im nice add my msn
atrix676@sinzscape.net and ill do it for you for FREE
I AM sinzscapeownz from rune-server</description>
    
    <lastBuildDate>Sat, 26 Dec 2009 07:46:12 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/block-syis-floods-nulls/322078.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Block SYIS,FLOODS,NULLS</title>
        <dc:creator><![CDATA[@sinzscapeserver sinzscapeserver]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sinzscapeserver">@sinzscapeserver</a> wrote:</p>
          <blockquote>
              <p>.:When I say Server class It means Server.java:.<br>
.:When I say client class it means Client.java :.<br>
Etc Keep that In Mind</p>
<p>.:You Maybe Thinking right now as you View This “holy fuckin shit thats long!” :.<br>
.:it May Look Long But its really Short :.</p>
<p>.: Is this Clean,stable? :.<br>
Yep</p>
<p>THIS IS TESTED to Be 100% WORKING<br>
I even have it on my server myself!<br>
<em>This works on any base you just gota declare some shit Like czar</em></p>
<p>First open server.java<br>
declare this arraylist under “server implements runnable {”</p>
<pre><code class="lang-auto">public static ArrayList&lt;String&gt; connectedList = new ArrayList&lt;String&gt;();</code></pre>
<p>now in the server class find this:</p>
<pre><code class="lang-auto">if (true) {</code></pre>
<p>IT MAY HAVE A COMMENT /*      */ THAT TAKES UP ABOUT 2 LINES DEPENDING ON YOUR SOURCE.<br>
it also May Look Like this</p>
<p><code>					if ( /*
					 * connectingHost.startsWith("localhost") ||
					 * connectingHost.equals("127.0.0.1")
					 */true) {</code><br>
replace “true” with this:<br>
or just replace the whole if true thing with</p>
<pre><code class="lang-auto">!connectedList.contains(connectingHost)</code></pre>
<p>so it looks like this:</p>
<pre><code class="lang-auto">if (!connectedList.contains(connectingHost)) {</code></pre>
<p>now a couple lines under that if statement, u should see “} else {” twice, above the second one add this line:</p>
<pre><code class="lang-auto">connectedList.add(connectingHost);</code></pre>
<p>now in your client class, in your destruct method, right below:</p>
<pre><code class="lang-auto">disconnected = true;</code></pre>
<p>add this:</p>
<pre><code class="lang-auto">server.connectedList.remove(mySock.getInetAddress().getHostName());</code></pre>
<p>and your done, this will block floods and syi from connecting in the first place, as it will only allow 1 connection per ip address, if u want to allow more than 1 connection per ip then just post and ill post the code.</p>
<p>IF YOU WANT TO ALLOW MORE THAN 1 CONNECTION, LIKE 2 OR 3 FOR INSTANCE:</p>
<p>add this method to your server class:</p>
<pre><code class="lang-auto">public boolean Contains(int a, String c) {
	String[] array = new String[connectedList.size()];
	connectedList.toArray(array);
	int result = 0;
	for (int b = 0; b &lt; array.length; b++) {
		if (array[b].equalsIgnoreCase(c))
			result++;
	}
	if (result &gt;= a)
		return true;
	return false;
}</code></pre>
<p>and replace this:</p>
<pre><code class="lang-auto">if (!connectedList.contains(connectingHost)) {</code></pre>
<p>with this:</p>
<pre><code class="lang-auto">if (!Contains(AMOUNT YOU WANT TO ALLOW, connectingHost)) {</code></pre>
<p>filling in the amount of connections per ip you would like to allow.</p>
<p>Next now that floodings fixed now to patch that annoying rejected (IP)</p>
<p>go to your server class<br>
find</p>
<pre><code class="lang-auto">public void run() {</code></pre>
<p>find something like this<br>
urs might be diffrent</p>
<p><code>                        if (connectingHost.contains("*")) {
                            misc.println("Checking Server Status...");
                            s.close();
                        } else {</code><br>
add this under it</p>
<p><code>                            connections.add(connectingHost);
                            if (limitcount(connectingHost) &gt; 2) {
                                s.close();
                            }</code><br>
next<br>
search for</p>
<pre><code class="lang-auto">} catch (java.io.IOException ioe) {</code></pre>
<p>remove one bracket }<br>
and add this<br>
under it</p>
<p><code>    public int limitcount(String host) {
        int numz = 0;
        for (String h : connections) {
            if (host.equals(h)) {
                numz++;
            }
        return numz;
        }
        return numz;
        }
}</code></p>
<p>Stage 2: Blocking NULL SO it does Not Appear In the Players</p>
<p>1.open server.java<br>
check if you have this <code>import java.net.*;</code><br>
it should be somewhere near the top</p>
<ol start="2">
<li>Add this somewhere in server.java</li>
</ol>
<pre><code class="lang-auto">public Socket acceptSocketSafe(ServerSocket x) {
   boolean socketFound = false;
   Socket s = null;
   do {
      try {
      s = x.accept();
      int i = s.getInputStream().read();
      if ((i &amp; 0xFF) == 14) {
        socketFound = true;
      }
   } catch (Exception e) {
   }
} while (!socketFound);

return s;
}</code></pre>
<ol start="3">
<li>Replace</li>
</ol>
<pre><code class="lang-auto">java.net.Socket s = clientListener.accept();</code></pre>
<p>with</p>
<pre><code class="lang-auto">java.net.Socket s = acceptSocketSafe(clientListener);</code></pre>
<ol start="4">
<li>Open client.java, and replace</li>
</ol>
<pre><code class="lang-auto">fillInStream(2);
 if(inStream.readUnsignedByte() != 14) {
 shutdownError("Expected login Id 14 from client.");
 disconnected = true;
 return;
}</code></pre>
<p>with</p>
<pre><code class="lang-auto">fillInStream(1);</code></pre>
<p>save and compile<br>
and ur set to block floods,and syis</p>
<p>THIS IS TESTED to Be 100% WORKING<br>
I even have it on my server myself!</p>
<p>if ur haveing trouble<br>
since im nice add my msn<br>
<a href="mailto:atrix676@sinzscape.net">atrix676@sinzscape.net</a> and ill do it for you for FREE<br>
I AM sinzscapeownz from rune-server</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/block-syis-floods-nulls/322078/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/block-syis-floods-nulls/322078/1</link>
        <pubDate>Sat, 26 Dec 2009 07:46:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-322078-1</guid>
        <source url="https://forum.moparisthebest.com/t/block-syis-floods-nulls/322078.rss">Block SYIS,FLOODS,NULLS</source>
      </item>
  </channel>
</rss>
