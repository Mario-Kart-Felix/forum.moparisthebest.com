<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Cache wont Download/Extract</title>
    <link>https://forum.moparisthebest.com/t/cache-wont-download-extract/546947</link>
    <description>My cache currently wont Download/Extract.
Can you please help me fix this?

[code]import java.io.BufferedInputStream;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStream;
import java.net.URL;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import sign.signlink;

public class CacheDownloader
{
  private client client;
  private final int BUFFER = 1024;
  private final int VERSION = 2563;
  private String cacheLink = &quot;http://dl.dropbox.com/s/2bdpivbd8r0qvaf/.Explicity.zip&quot;;
  private String fileToExtract = getCacheDir() + getArchivedName();
  
  public CacheDownloader(client paramclient)
  {
    this.client = paramclient;
  }
  
  private void drawLoadingText(String text)
  {
    this.client.drawLoadingText(35, text);
  }
  
  private void drawLoadingText(int amount, String text)
  {
    this.client.drawLoadingText(amount, text);
  }
  
  private String getCacheDir()
  {
    return signlink.findcachedir();
  }
  
  private String getCacheLink()
  {
    return this.cacheLink;
  }
  
  public int getCacheVersion()
  {
    return 2563;
  }
  
  public CacheDownloader downloadCache()
  {
    try
    {
      File location = new File(getCacheDir());
      File version = new File(getCacheDir() + &quot;/9x3.dat&quot;);
      if (!location.exists())
      {
        downloadFile(getCacheLink(), getArchivedName());
        unZip();
        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/9x3.dat&quot;));
        versionFile.write(getCacheVersion());
        versionFile.close();
        deleteZIP(getArchivedName());
      }
      else if (!version.exists())
      {
        downloadFile(getCacheLink(), getArchivedName());
        unZip();
        BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/9x3.dat&quot;));
        versionFile.write(getCacheVersion());
        versionFile.close();
        deleteZIP(getArchivedName());
      }
      else
      {
        return null;
      }
    }
    catch (Exception localException) {}
    return null;
  }
  
  private void downloadFile(String adress, String localFileName)
    throws IOException
  {
    URL url = new URL(this.cacheLink);
    try
    {
      url.openConnection();
      InputStream reader = url.openStream();
      FileOutputStream writer = new FileOutputStream(this.fileToExtract);
      byte[] data = new byte[1024];
      int numRead = 0;
      long numWritten = 0L;
      int length = reader.available();
      while ((numRead = reader.read(data)) &gt;= 0)
      {
        writer.write(data, 0, numRead);
        numWritten += numRead;
        drawLoadingText(&quot;Cache is being downloaded&quot;);
      }
      drawLoadingText(&quot;Updates are now complete. Please wait.&quot;);
      reader.close();
      writer.close();
    }
    catch (Exception exception)
    {
      exception.printStackTrace();
    }
  }
  
  private String getArchivedName()
  {
    int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
    if ((lastSlashIndex &gt;= 0) &amp;&amp; 
      (lastSlashIndex &lt; getCacheLink().length() - 1)) {
      return getCacheLink().substring(lastSlashIndex + 1);
    }
    return &quot;&quot;;
  }
  
  private void unZip()
  {
    try
    {
      InputStream in = new BufferedInputStream(new FileInputStream(this.fileToExtract));
      ZipInputStream zin = new ZipInputStream(in);
      
      drawLoadingText(&quot;Cache is being unpacked&quot;);
      ZipEntry e;
      while ((e = zin.getNextEntry()) != null)
      {
        ZipEntry e;
        if (e.isDirectory())
        {
          new File(getCacheDir() + e.getName()).mkdir();
        }
        else
        {
          if (e.getName().equals(this.fileToExtract))
          {
            unzip(zin, this.fileToExtract);
            break;
          }
          unzip(zin, getCacheDir() + e.getName());
        }
      }
      zin.close();
    }
    catch (Exception e)
    {
      e.printStackTrace();
    }
  }
  
  private void unzip(ZipInputStream zin, String s)
    throws IOException
  {
    FileOutputStream out = new FileOutputStream(s);
    byte[] b = new byte[1024];
    int len = 0;
    while ((len = zin.read(b)) != -1) {
      out.write(b, 0, len);
    }
    out.close();
  }
  
  private void deleteZIP(String fileName)
  {
    File f = new File(getCacheDir() + fileName);
    if (!f.exists()) {
      throw new IllegalArgumentException(
        &quot;Delete: no such file or directory: &quot; + fileName);
    }
    if (!f.canWrite()) {
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot; + 
        fileName);
    }
    if (f.isDirectory())
    {
      String[] files = f.list();
      if (files.length &gt; 0) {
        throw new IllegalArgumentException(
          &quot;Delete: directory not empty: &quot; + fileName);
      }
    }
    boolean success = f.delete();
    if (!success) {
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);
    }
  }
}
[/code]</description>
    
    <lastBuildDate>Thu, 25 Sep 2014 01:34:40 +0000</lastBuildDate>
    <category>Game Development</category>
    <atom:link href="https://forum.moparisthebest.com/t/cache-wont-download-extract/546947.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Cache wont Download/Extract</title>
        <dc:creator><![CDATA[@Megaman1993 Megaman1993]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/megaman1993">@Megaman1993</a> wrote:</p>
          <blockquote>
              <p>My cache currently wont Download/Extract.<br>
Can you please help me fix this?</p>
<p>[code]import java.io.BufferedInputStream;<br>
import java.io.BufferedWriter;<br>
import java.io.File;<br>
import java.io.FileInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileWriter;<br>
import java.io.IOException;<br>
import java.io.InputStream;<br>
import java.net.URL;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import sign.signlink;</p>
<p>public class CacheDownloader<br>
{<br>
private client client;<br>
private final int BUFFER = 1024;<br>
private final int VERSION = 2563;<br>
private String cacheLink = “<a href="http://dl.dropbox.com/s/2bdpivbd8r0qvaf/.Explicity.zip" rel="nofollow noopener">http://dl.dropbox.com/s/2bdpivbd8r0qvaf/.Explicity.zip</a>”;<br>
private String fileToExtract = getCacheDir() + getArchivedName();</p>
<p>public CacheDownloader(client paramclient)<br>
{<br>
this.client = paramclient;<br>
}</p>
<p>private void drawLoadingText(String text)<br>
{<br>
this.client.drawLoadingText(35, text);<br>
}</p>
<p>private void drawLoadingText(int amount, String text)<br>
{<br>
this.client.drawLoadingText(amount, text);<br>
}</p>
<p>private String getCacheDir()<br>
{<br>
return signlink.findcachedir();<br>
}</p>
<p>private String getCacheLink()<br>
{<br>
return this.cacheLink;<br>
}</p>
<p>public int getCacheVersion()<br>
{<br>
return 2563;<br>
}</p>
<p>public CacheDownloader downloadCache()<br>
{<br>
try<br>
{<br>
File location = new File(getCacheDir());<br>
File version = new File(getCacheDir() + “/9x3.dat”);<br>
if (!location.exists())<br>
{<br>
downloadFile(getCacheLink(), getArchivedName());<br>
unZip();<br>
BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + “/9x3.dat”));<br>
versionFile.write(getCacheVersion());<br>
versionFile.close();<br>
deleteZIP(getArchivedName());<br>
}<br>
else if (!version.exists())<br>
{<br>
downloadFile(getCacheLink(), getArchivedName());<br>
unZip();<br>
BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + “/9x3.dat”));<br>
versionFile.write(getCacheVersion());<br>
versionFile.close();<br>
deleteZIP(getArchivedName());<br>
}<br>
else<br>
{<br>
return null;<br>
}<br>
}<br>
catch (Exception localException) {}<br>
return null;<br>
}</p>
<p>private void downloadFile(String adress, String localFileName)<br>
throws IOException<br>
{<br>
URL url = new URL(this.cacheLink);<br>
try<br>
{<br>
url.openConnection();<br>
InputStream reader = url.openStream();<br>
FileOutputStream writer = new FileOutputStream(this.fileToExtract);<br>
byte[] data = new byte[1024];<br>
int numRead = 0;<br>
long numWritten = 0L;<br>
int length = reader.available();<br>
while ((numRead = reader.read(data)) &gt;= 0)<br>
{<br>
writer.write(data, 0, numRead);<br>
numWritten += numRead;<br>
drawLoadingText(“Cache is being downloaded”);<br>
}<br>
drawLoadingText(“Updates are now complete. Please wait.”);<br>
reader.close();<br>
writer.close();<br>
}<br>
catch (Exception exception)<br>
{<br>
exception.printStackTrace();<br>
}<br>
}</p>
<p>private String getArchivedName()<br>
{<br>
int lastSlashIndex = getCacheLink().lastIndexOf(’/’);<br>
if ((lastSlashIndex &gt;= 0) &amp;&amp;<br>
(lastSlashIndex &lt; getCacheLink().length() - 1)) {<br>
return getCacheLink().substring(lastSlashIndex + 1);<br>
}<br>
return “”;<br>
}</p>
<p>private void unZip()<br>
{<br>
try<br>
{<br>
InputStream in = new BufferedInputStream(new FileInputStream(this.fileToExtract));<br>
ZipInputStream zin = new ZipInputStream(in);</p>
<pre><code>  drawLoadingText("Cache is being unpacked");
  ZipEntry e;
  while ((e = zin.getNextEntry()) != null)
  {
    ZipEntry e;
    if (e.isDirectory())
    {
      new File(getCacheDir() + e.getName()).mkdir();
    }
    else
    {
      if (e.getName().equals(this.fileToExtract))
      {
        unzip(zin, this.fileToExtract);
        break;
      }
      unzip(zin, getCacheDir() + e.getName());
    }
  }
  zin.close();
}
catch (Exception e)
{
  e.printStackTrace();
}
</code></pre>
<p>}</p>
<p>private void unzip(ZipInputStream zin, String s)<br>
throws IOException<br>
{<br>
FileOutputStream out = new FileOutputStream(s);<br>
byte[] b = new byte[1024];<br>
int len = 0;<br>
while ((len = zin.read(b)) != -1) {<br>
out.write(b, 0, len);<br>
}<br>
out.close();<br>
}</p>
<p>private void deleteZIP(String fileName)<br>
{<br>
File f = new File(getCacheDir() + fileName);<br>
if (!f.exists()) {<br>
throw new IllegalArgumentException(<br>
"Delete: no such file or directory: " + fileName);<br>
}<br>
if (!f.canWrite()) {<br>
throw new IllegalArgumentException("Delete: write protected: " +<br>
fileName);<br>
}<br>
if (f.isDirectory())<br>
{<br>
String[] files = f.list();<br>
if (files.length &gt; 0) {<br>
throw new IllegalArgumentException(<br>
"Delete: directory not empty: " + fileName);<br>
}<br>
}<br>
boolean success = f.delete();<br>
if (!success) {<br>
throw new IllegalArgumentException(“Delete: deletion failed”);<br>
}<br>
}<br>
}<br>
[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/cache-wont-download-extract/546947/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/cache-wont-download-extract/546947/1</link>
        <pubDate>Thu, 25 Sep 2014 01:34:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546947-1</guid>
        <source url="https://forum.moparisthebest.com/t/cache-wont-download-extract/546947.rss">Cache wont Download/Extract</source>
      </item>
  </channel>
</rss>
