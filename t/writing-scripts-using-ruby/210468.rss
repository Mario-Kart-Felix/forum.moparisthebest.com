<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Writing Scripts Using Ruby</title>
    <link>https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468</link>
    <description>First, let me explain that i havent seen many Ruby scripts under any topics on here, i may be wrong. So i thought i&#39;d post a tutorial on how to use &amp; write some basic ruby scripts.
&gt;search &quot;ruby&quot; in the forums &amp; you will see this post, has the highest relevance to the topic you have searched (80%).

[i]Introduction.[/i]

[b]What Kind of Language Is Ruby?[/b]
In the old days, the distinction between languages was simple: they were either compiled, like C or Fortran, or interpreted, like BASIC. Compiled languages gave you speed and low-level access; interpreted languages were higher-level but slower. Times change and things aren&#39;t that simple anymore. Some language designers have taken to calling their creations &quot;scripting languages.&#39;&#39; By this, we guess they mean that their languages are interpreted and can be used to replace batch files and shell scripts, orchestrating the behavior of other programs and the underlying operating system. Perl, TCL, and Python have all been called scripting languages.

Ruby is not the universal &#39;panacea&#39; for programmers&#39; problems. There will always be times when you&#39;ll need a particular language: the environment may dictate it, you may have special libraries you need, performance concerns, or simply an issue with training. 

[b]Installing Ruby[/b] 

You can get Ruby from http://www2.ruby-lang.org/en/20020102.html the downloading and instalation steps are pretty basic.


[b]Running Ruby[/b]

Now that Ruby is installed, you&#39;d probably like to run some programs. Unlike compiled environments, there are two ways to run Ruby---[i]interactively and as a program. [/i] 
[i]Interactive Ruby[/i]

The easiest way to run Ruby interactively is simply to type &quot;ruby&#39;&#39; at the shell prompt. 

[code]% ruby
puts &quot;Hello, world!&quot;
^D
Hello, world![/code]

Here we typed in the single puts expression and an end of file character (which is control-D on our system). This process works, but it&#39;s sort of painful if you make a typo, and you can&#39;t really see what&#39;s going on as you type. 

In the sample directory in the Ruby distribution you&#39;ll find a script named &quot;eval.rb&#39;&#39;. It goes one step better by showing us the value of each expression as it is entered: 

[code]% cd sample
% ruby eval.rb
ruby&gt; a = &quot;Hello, world!&quot;
&quot;Hello, world!&quot;
ruby&gt; puts a
Hello, world!
nil
ruby&gt; ^D
%[/code]
 
Here we can see the output from puts, and then the return value from puts (which is nil). That&#39;s all fine and well, except that multiline expressions do not work, and you can&#39;t edit the line you&#39;re on, or go back and use previous lines (as you might with command history in a shell). 

[b]Ruby Programs[/b]

Finally, you can run a Ruby program from a file as you would any other shell script, Perl program, or Python program. You can simply run Ruby giving the script name as an argument: 

[code]% ruby myprog.rb[/code]
 
Or you can use the Unix &quot;shebang&#39;&#39; notation as the first line of the program file.[If your system supports it, you can avoid hard-coding the path to Ruby in the shebang line by using #!/usr/bin/env ruby, which will search your path for ruby and then execute it.] 

[code]#!/usr/local/bin/ruby -w

puts &quot;Hello, World!&quot;[/code]

 If you make this source file executable (using, for instance, chmod +x myprog.rb), Unix lets you run the file as a program: 

[code]% ./myprog.rb
Hello, World![/code]
 
You can do something similar under Microsoft Windows using file associations. 


[u][b]Some Basic Ruby[/b][/u]

Not many people like to read heaps of boring syntax rules when they&#39;re picking up a new language. So we&#39;re going to &quot;cheat&quot;. In this section i&#39;ll hit some of the highlights, the stuff you&#39;ll just have to know if you&#39;re going to write Ruby programs.

Let&#39;s start off with a simple Ruby program. I&#39;ll write a method that returns a string, adding to that string a person&#39;s name. I&#39;ll then invoke that method a couple of times. 

[code]def sayGoodnight(name)
  result = &quot;Goodnight, &quot; + name
  return result
end

# Time for bed...
puts sayGoodnight(&quot;John-Boy&quot;)
puts sayGoodnight(&quot;Mary-Ellen&quot;)[/code]

First, some general observations. Ruby syntax is clean. You don&#39;t need semicolons at the ends of statements as long as you put each statement on a separate line. Ruby comments start with a # character and run to the end of the line. Code layout is pretty much up to you; indentation is not significant.

Methods are defined with the keyword def, followed by the method name (in this case, &quot;sayGoodnight&#39;&#39;) and the method&#39;s parameters between parentheses. Ruby doesn&#39;t use braces to delimit the bodies of compound statements and definitions. Instead, you simply finish the body with the keyword end. Our method&#39;s body is pretty simple. The first line concatenates the literal string &quot;Goodnight,&#39;&#39; to the parameter name and assigns the result to the local variable result. The next line returns that result to the caller. Note that we didn&#39;t have to declare the variable result; it sprang into existence when we assigned to it.

Having defined the method, we call it twice. In both cases we pass the result to the method puts, which simply outputs its argument followed by a newline. 

[code]Goodnight, John-Boy
Goodnight, Mary-Ellen[/code]

The line &quot;sayGoodnight(&quot;John-Boy&quot;)&#39;&#39; contains two method calls, one to sayGoodnight and the other to puts. Why does one call have its arguments in parentheses while the other doesn&#39;t? In this case it&#39;s purely a matter of taste. The following lines are all equivalent. 

[code]puts sayGoodnight &quot;John-Boy&quot;
puts sayGoodnight(&quot;John-Boy&quot;)
puts(sayGoodnight &quot;John-Boy&quot;)
puts(sayGoodnight(&quot;John-Boy&quot;))[/code]

However, life isn&#39;t always that simple, and precedence rules can make it difficult to know which argument goes with which method invocation, so we recommend using parentheses in all but the simplest cases.  This example also shows some Ruby string objects. There are many ways to create a string object, but probably the most common is to use string literals: sequences of characters between single or double quotation marks. The difference between the two forms is the amount of processing Ruby does on the string while constructing the literal. In the single-quoted case, Ruby does very little. With a few exceptions, what you type into the string literal becomes the string&#39;s value. 

In the double-quoted case, Ruby does more work. First, it looks for substitutions---sequences that start with a backslash character---and replaces them with some binary value. The most common of these is &quot;\n&#39;&#39;, which is replaced with a newline character. When a string containing a newline is output, the &quot;\n&#39;&#39; forces a line break. 

[code]puts &quot;And Goodnight,\nGrandma&quot;

 
produces: And Goodnight,
Grandma[/code]

The second thing that Ruby does with double-quoted strings is expression interpolation. Within the string, the sequence #{ expression } is replaced by the value of expression. We could use this to rewrite our previous method. 

[code]def sayGoodnight(name)
  result = &quot;Goodnight, #{name}&quot;
  return result
end[/code]

When Ruby constructs this string object, it looks at the current value of name and substitutes it into the string. Arbitrarily complex expressions are allowed in the #{...} construct. As a shortcut, you don&#39;t need to supply the braces when the expression is simply a global, instance, or class variable.

Finally, we could simplify this method some more. The value returned by a Ruby method is the value of the last expression evaluated, so we can get rid of the return statement altogether. 

[code]def sayGoodnight(name)
  &quot;Goodnight, #{name}&quot;
end[/code]




[b]This &#39;tutorial&#39; is not finished, i will be updating it over the next few days i people havent flamed etc. [/b]
[b]Please post feedback, both constructive critismand praise, so that i know what i can fix up &amp; what i have done well.[/b][br][br][size=1]Posted on: June 04, 2008, 01:29:29 PM[/size][hr][quote=&quot;Thug-life&quot;]http://www.ruby-doc.org/docs/ProgrammingRuby/html/intro.html

Leech more, exact wording and everything.[/quote]

Like i said. &quot;still editing&quot; i was literally in the process of writing &quot;sources&quot; how many tutorials on teaching ruby is there on here? 0. 

Yes i have took a tutorial from a book, but ive cut it down, took the basics in order to help people learn.</description>
    
    <lastBuildDate>Thu, 05 Jun 2008 00:50:01 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Writing Scripts Using Ruby</title>
        <dc:creator><![CDATA[@eVokki1 Cowie`]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/evokki1">@eVokki1</a> wrote:</p>
          <blockquote>
              <p>Give sources if you post a tutorial, don’t leech.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/4</link>
        <pubDate>Thu, 05 Jun 2008 00:50:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-210468-4</guid>
        <source url="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468.rss">Writing Scripts Using Ruby</source>
      </item>
      <item>
        <title>Writing Scripts Using Ruby</title>
        <dc:creator><![CDATA[@ownagesbot ownagesbot]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ownagesbot">@ownagesbot</a> wrote:</p>
          <blockquote>
              <p>Lame. Why claim it’s yours when it’s not? You’ll get just as much credit for posting a decent tutorial that you’ve found on the internet.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/3</link>
        <pubDate>Thu, 05 Jun 2008 00:30:01 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-210468-3</guid>
        <source url="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468.rss">Writing Scripts Using Ruby</source>
      </item>
      <item>
        <title>Writing Scripts Using Ruby</title>
        <dc:creator><![CDATA[@tL tL]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/tl">@tL</a> wrote:</p>
          <blockquote>
              <p><a href="http://www.ruby-doc.org/docs/ProgrammingRuby" class="onebox" target="_blank" rel="nofollow noopener">http://www.ruby-doc.org/docs/ProgrammingRuby</a></p>
<p>99% of this post is from there, excluding the extra little irrelevant information added on.</p>
<aside class="quote no-group" data-post="1" data-topic="210468">
<div class="title">
<div class="quote-controls"></div>
 Projeckt Revolution:</div>
<blockquote>
<p>Yes i have took a tutorial from a book, but ive cut it down, took the basics in order to help people learn.</p>
</blockquote>
</aside>
<p>Except you have taken it word for word off that site…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/2</link>
        <pubDate>Thu, 05 Jun 2008 00:29:31 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-210468-2</guid>
        <source url="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468.rss">Writing Scripts Using Ruby</source>
      </item>
      <item>
        <title>Writing Scripts Using Ruby</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>First, let me explain that i havent seen many Ruby scripts under any topics on here, i may be wrong. So i thought i’d post a tutorial on how to use &amp; write some basic ruby scripts.</p>
<blockquote>
<p>search “ruby” in the forums &amp; you will see this post, has the highest relevance to the topic you have searched (80%).</p>
</blockquote>
<p><span class="bbcode-i">Introduction.</span></p>
<p><span class="bbcode-b">What Kind of Language Is Ruby?</span><br>
In the old days, the distinction between languages was simple: they were either compiled, like C or Fortran, or interpreted, like BASIC. Compiled languages gave you speed and low-level access; interpreted languages were higher-level but slower. Times change and things aren’t that simple anymore. Some language designers have taken to calling their creations "scripting languages.’’ By this, we guess they mean that their languages are interpreted and can be used to replace batch files and shell scripts, orchestrating the behavior of other programs and the underlying operating system. Perl, TCL, and Python have all been called scripting languages.</p>
<p>Ruby is not the universal ‘panacea’ for programmers’ problems. There will always be times when you’ll need a particular language: the environment may dictate it, you may have special libraries you need, performance concerns, or simply an issue with training.</p>
<p><span class="bbcode-b">Installing Ruby</span></p>
<p>You can get Ruby from <a href="http://www2.ruby-lang.org/en/20020102.html" rel="nofollow noopener">http://www2.ruby-lang.org/en/20020102.html</a> the downloading and instalation steps are pretty basic.</p>
<p><span class="bbcode-b">Running Ruby</span></p>
<p>Now that Ruby is installed, you’d probably like to run some programs. Unlike compiled environments, there are two ways to run Ruby—<span class="bbcode-i">interactively and as a program. </span><br>
<span class="bbcode-i">Interactive Ruby</span></p>
<p>The easiest way to run Ruby interactively is simply to type "ruby’’ at the shell prompt.</p>
<p><code>% ruby
puts "Hello, world!"
^D
Hello, world!</code></p>
<p>Here we typed in the single puts expression and an end of file character (which is control-D on our system). This process works, but it’s sort of painful if you make a typo, and you can’t really see what’s going on as you type.</p>
<p>In the sample directory in the Ruby distribution you’ll find a script named "eval.rb’’. It goes one step better by showing us the value of each expression as it is entered:</p>
<p><code>% cd sample
% ruby eval.rb
ruby&gt; a = "Hello, world!"
"Hello, world!"
ruby&gt; puts a
Hello, world!
nil
ruby&gt; ^D
%</code></p>
<p>Here we can see the output from puts, and then the return value from puts (which is nil). That’s all fine and well, except that multiline expressions do not work, and you can’t edit the line you’re on, or go back and use previous lines (as you might with command history in a shell).</p>
<p><span class="bbcode-b">Ruby Programs</span></p>
<p>Finally, you can run a Ruby program from a file as you would any other shell script, Perl program, or Python program. You can simply run Ruby giving the script name as an argument:</p>
<pre><code class="lang-auto">% ruby myprog.rb</code></pre>
<p>Or you can use the Unix "shebang’’ notation as the first line of the program file.[If your system supports it, you can avoid hard-coding the path to Ruby in the shebang line by using #!/usr/bin/env ruby, which will search your path for ruby and then execute it.]</p>
<p>[code]#!/usr/local/bin/ruby -w</p>
<p>puts “Hello, World!”[/code]</p>
<p>If you make this source file executable (using, for instance, chmod +x myprog.rb), Unix lets you run the file as a program:</p>
<p><code>% ./myprog.rb
Hello, World!</code></p>
<p>You can do something similar under Microsoft Windows using file associations.</p>
<p><span class="bbcode-u"><span class="bbcode-b">Some Basic Ruby</span></span></p>
<p>Not many people like to read heaps of boring syntax rules when they’re picking up a new language. So we’re going to “cheat”. In this section i’ll hit some of the highlights, the stuff you’ll just have to know if you’re going to write Ruby programs.</p>
<p>Let’s start off with a simple Ruby program. I’ll write a method that returns a string, adding to that string a person’s name. I’ll then invoke that method a couple of times.</p>
<p>[code]def sayGoodnight(name)<br>
result = "Goodnight, " + name<br>
return result<br>
end</p>
<h1>Time for bed…</h1>
<p>puts sayGoodnight(“John-Boy”)<br>
puts sayGoodnight(“Mary-Ellen”)[/code]</p>
<p>First, some general observations. Ruby syntax is clean. You don’t need semicolons at the ends of statements as long as you put each statement on a separate line. Ruby comments start with a # character and run to the end of the line. Code layout is pretty much up to you; indentation is not significant.</p>
<p>Methods are defined with the keyword def, followed by the method name (in this case, "sayGoodnight’’) and the method’s parameters between parentheses. Ruby doesn’t use braces to delimit the bodies of compound statements and definitions. Instead, you simply finish the body with the keyword end. Our method’s body is pretty simple. The first line concatenates the literal string "Goodnight,’’ to the parameter name and assigns the result to the local variable result. The next line returns that result to the caller. Note that we didn’t have to declare the variable result; it sprang into existence when we assigned to it.</p>
<p>Having defined the method, we call it twice. In both cases we pass the result to the method puts, which simply outputs its argument followed by a newline.</p>
<p><code>Goodnight, John-Boy
Goodnight, Mary-Ellen</code></p>
<p>The line "sayGoodnight(“John-Boy”)’’ contains two method calls, one to sayGoodnight and the other to puts. Why does one call have its arguments in parentheses while the other doesn’t? In this case it’s purely a matter of taste. The following lines are all equivalent.</p>
<p><code>puts sayGoodnight "John-Boy"
puts sayGoodnight("John-Boy")
puts(sayGoodnight "John-Boy")
puts(sayGoodnight("John-Boy"))</code></p>
<p>However, life isn’t always that simple, and precedence rules can make it difficult to know which argument goes with which method invocation, so we recommend using parentheses in all but the simplest cases.  This example also shows some Ruby string objects. There are many ways to create a string object, but probably the most common is to use string literals: sequences of characters between single or double quotation marks. The difference between the two forms is the amount of processing Ruby does on the string while constructing the literal. In the single-quoted case, Ruby does very little. With a few exceptions, what you type into the string literal becomes the string’s value.</p>
<p>In the double-quoted case, Ruby does more work. First, it looks for substitutions—sequences that start with a backslash character—and replaces them with some binary value. The most common of these is "\n’’, which is replaced with a newline character. When a string containing a newline is output, the "\n’’ forces a line break.</p>
<p>[code]puts “And Goodnight,\nGrandma”</p>
<p>produces: And Goodnight,<br>
Grandma[/code]</p>
<p>The second thing that Ruby does with double-quoted strings is expression interpolation. Within the string, the sequence #{ expression } is replaced by the value of expression. We could use this to rewrite our previous method.</p>
<p><code>def sayGoodnight(name)
  result = "Goodnight, #{name}"
  return result
end</code></p>
<p>When Ruby constructs this string object, it looks at the current value of name and substitutes it into the string. Arbitrarily complex expressions are allowed in the #{…} construct. As a shortcut, you don’t need to supply the braces when the expression is simply a global, instance, or class variable.</p>
<p>Finally, we could simplify this method some more. The value returned by a Ruby method is the value of the last expression evaluated, so we can get rid of the return statement altogether.</p>
<p><code>def sayGoodnight(name)
  "Goodnight, #{name}"
end</code></p>
<p><span class="bbcode-b">This ‘tutorial’ is not finished, i will be updating it over the next few days i people havent flamed etc. </span><br>
<span class="bbcode-b">Please post feedback, both constructive critismand praise, so that i know what i can fix up &amp; what i have done well.</span>[br][br][size=1]Posted on: June 04, 2008, 01:29:29 PM[/size][hr][quote=“Thug-life”]<a href="http://www.ruby-doc.org/docs/ProgrammingRuby/html/intro.html" rel="nofollow noopener">http://www.ruby-doc.org/docs/ProgrammingRuby/html/intro.html</a></p>
<p>Leech more, exact wording and everything.[/quote]</p>
<p>Like i said. “still editing” i was literally in the process of writing “sources” how many tutorials on teaching ruby is there on here? 0.</p>
<p>Yes i have took a tutorial from a book, but ive cut it down, took the basics in order to help people learn.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468/1</link>
        <pubDate>Thu, 05 Jun 2008 00:23:11 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-210468-1</guid>
        <source url="https://forum.moparisthebest.com/t/writing-scripts-using-ruby/210468.rss">Writing Scripts Using Ruby</source>
      </item>
  </channel>
</rss>
