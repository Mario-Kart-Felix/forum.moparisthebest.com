<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Helpful scripts or snippets</title>
    <link>https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330</link>
    <description>I think I&#39;ve already cornered the market on the number of topics in this section, so instead of posting more, let&#39;s just dedicate a thread to helpful scripts or snippets that you have written/found on the internet.

1.  I&#39;ve recently been trying out chrome, but I still use 64-bit firefox, and every now and then 32-bit firefox to test things with.  It&#39;s annoying have 1 default browser that everything uses when you are trying something else, so I whipped this up and set it as my default browser so that when I click a link (in Xchat for instance) it opens in whatever browser I happen to have open at the time:
[code=bash]
#!/bin/sh
# check if each one is open in this order, if we find one open, open the tab there
if [ &quot;$(ps -Af | grep -v grep | grep firefox-bin | grep default)&quot; != &quot;&quot; ]; then
     /usr/bin/firefox -P default $@;
     exit;
fi
if [ &quot;$(ps -Af | grep -v grep | grep firefox-bin | grep ff32)&quot; != &quot;&quot; ]; then
     /opt/firefox32/firefox -P ff32 $@;
     exit;
fi
if [ &quot;$(ps -Af | grep -v grep | grep google-chrome)&quot; != &quot;&quot; ]; then
     /usr/bin/google-chrome $@;
     exit;
fi
# if we reached this, we didn&#39;t find an open browser, so lets use a default browser:
/usr/bin/firefox -P default $@;
[/code]
To improve it, it would be great to cache the results of &#39;ps -Af&#39; and only make it return processes owned by my user, anyone know how to do those things?  (without writing to a file).

2. the customized section of my current .bashrc, I found &#39;extract&#39; today, but I wrote the automatic completion for managing services awhile ago, it saves me a lot of typing:
[code=bash]
extract () {
   if [ -f $1 ] ; then
       case $1 in
     *.tar.bz2)     tar xvjf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tar.bz2) ;;
     *.tar.gz) tar xvzf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tar.gz) ;;
     *.tar.xz) tar Jxvf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tar.xz) ;;
     *.bz2)         bunzip2 $1 &amp;&amp; cd $(basename &quot;$1&quot; /bz2) ;;
     *.rar)         unrar x $1 &amp;&amp; cd $(basename &quot;$1&quot; .rar) ;;
     *.gz)          gunzip $1 &amp;&amp; cd $(basename &quot;$1&quot; .gz) ;;
     *.tar)         tar xvf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tar) ;;
     *.tbz2)        tar xvjf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tbz2) ;;
     *.tgz)         tar xvzf $1 &amp;&amp; cd $(basename &quot;$1&quot; .tgz) ;;
     *.zip)         unzip $1 &amp;&amp; cd $(basename &quot;$1&quot; .zip) ;;
     *.Z)      uncompress $1 &amp;&amp; cd $(basename &quot;$1&quot; .Z) ;;
     *.7z)          7z x $1 &amp;&amp; cd $(basename &quot;$1&quot; .7z) ;;
     *)        echo &quot;don&#39;t know how to extract &#39;$1&#39;...&quot; ;;
       esac
   else
       echo &quot;&#39;$1&#39; is not a valid file!&quot;
   fi
 }

function fsize() {
  ls -lh $1 | cut -f5 -d&#39; &#39;
}

function mkcd() {
  [ -n &quot;$1&quot; ] &amp;&amp; mkdir -p &quot;$@&quot; &amp;&amp; cd &quot;$1&quot;;
}

function restart() {
  [ -n &quot;$1&quot; ] &amp;&amp; sudo /etc/init.d/$1 restart;
}

function start() {
  [ -n &quot;$1&quot; ] &amp;&amp; sudo /etc/init.d/$1 start;
}

function stop() {
  [ -n &quot;$1&quot; ] &amp;&amp; sudo /etc/init.d/$1 stop;
}

function init_d_complete(){
# &#39;local&#39; can only be used within a function, exclude it if not using a function
  COMPREPLY=()
  local cur=&quot;${COMP_WORDS[COMP_CWORD]}&quot;
  local opts=$(ls /etc/init.d)
  COMPREPLY=($(compgen -W &quot;${opts}&quot; -- ${cur}))
}
complete -F &quot;init_d_complete&quot; -o &quot;default&quot; &quot;restart&quot;
complete -F &quot;init_d_complete&quot; -o &quot;default&quot; &quot;start&quot;
complete -F &quot;init_d_complete&quot; -o &quot;default&quot; &quot;stop&quot;
[/code]

3. my latest backup script for the forums/irc/server, I just finished it up today as well.  I migrated from tar&#39;ing and bzip&#39;ing things up once a week, to using rdiff-backup to take up less space and be more efficient.  I backup all the files I think I need in a central place, then rsync them to my server at home as well.  This must be run as root so that it can read all the files it needs.
[code=bash]
#!/bin/bash
cd /home2/backup
USERNAME=&quot;mysql_root_user&quot;
PASSWORD=&quot;mysql_root_pass&quot;

RESTORE_DIR=/home/mopar/restore

DATABASES=&quot;db1 db2 db3 etc etc2&quot;

# backup databases
mkdir tmp
for database in $DATABASES
do
#	echo &quot;mysqldump -u$USERNAME -p$PASSWORD $database | bzip2 -c &gt; ./tmp/$database.sql.bz2&quot;
	mysqldump -u$USERNAME -p$PASSWORD $database | bzip2 -c &gt; ./tmp/$database.sql.bz2
done
rdiff-backup ./tmp ./dbs
rm -rf tmp

# backup configuration
rdiff-backup /etc ./etc

# backup irc from remote host
rdiff-backup user@irc.host::/home/ircd ./ircd

mkdir -p $RESTORE_DIR
# backup ownership and permissions
find / -xdev -printf &quot;chmod %m \&quot;/%P\&quot;;\nchown %u:%g \&quot;/%P\&quot;;\n&quot; &gt; $RESTORE_DIR/fix_perms_owner.sh
# backup installed packages
dpkg --get-selections &gt; $RESTORE_DIR/package_list
# backup menu.lst
cp /boot/grub/menu.lst $RESTORE_DIR
# grab specific conf files from remote host
rsync -az root@irc.host:/etc/nginx $RESTORE_DIR
rsync -az root@irc.host:/etc/pound $RESTORE_DIR
chown -R mopar.mopar $RESTORE_DIR

# backup /home
rdiff-backup --exclude /home/mopar/logs --exclude /home/mineos/ram-disk --exclude /home/mineos/worldmap /home ./home

# sync to another hard drive
# not anymore, after RAID
#rsync -a * /home/mopar/backup/

# sync to another server, offsite
rsync -az * user@my.house:/home2/backup/
[/code]
I believe that it backs up securely everything that I should need to set the server up very quickly on another host, even if I no longer have access to these computers at all.  If you can think of something I missed, or a better way to do something, let me know. :)</description>
    
    <lastBuildDate>Fri, 21 Jan 2011 13:01:02 +0000</lastBuildDate>
    <category>Technology</category>
    <atom:link href="https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Helpful scripts or snippets</title>
        <dc:creator><![CDATA[@SomethingToHide STH]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/somethingtohide">@SomethingToHide</a> wrote:</p>
          <blockquote>
              <p>I’m loving that extract one.</p>
<p>I’ve tried to alias most of my often used commads. Typing “l” gives me the results of “ls -la”, etc. Also, any scripts I’ve made (such as check a folder for missing frames in a file sequence, batch rename a file sequence, mount a network drive, etc) I’ve tied to the F keys so I can press F1 and it will check the folder for missing frames and so on.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330/2</link>
        <pubDate>Fri, 21 Jan 2011 13:01:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-379330-2</guid>
        <source url="https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330.rss">Helpful scripts or snippets</source>
      </item>
      <item>
        <title>Helpful scripts or snippets</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>I think I’ve already cornered the market on the number of topics in this section, so instead of posting more, let’s just dedicate a thread to helpful scripts or snippets that you have written/found on the internet.</p>
<ol>
<li>I’ve recently been trying out chrome, but I still use 64-bit firefox, and every now and then 32-bit firefox to test things with.  It’s annoying have 1 default browser that everything uses when you are trying something else, so I whipped this up and set it as my default browser so that when I click a link (in Xchat for instance) it opens in whatever browser I happen to have open at the time:</li>
</ol>
<pre><code class="lang-auto">#!/bin/sh
# check if each one is open in this order, if we find one open, open the tab there
if [ "$(ps -Af | grep -v grep | grep firefox-bin | grep default)" != "" ]; then
     /usr/bin/firefox -P default $@;
     exit;
fi
if [ "$(ps -Af | grep -v grep | grep firefox-bin | grep ff32)" != "" ]; then
     /opt/firefox32/firefox -P ff32 $@;
     exit;
fi
if [ "$(ps -Af | grep -v grep | grep google-chrome)" != "" ]; then
     /usr/bin/google-chrome $@;
     exit;
fi
# if we reached this, we didn't find an open browser, so lets use a default browser:
/usr/bin/firefox -P default $@;</code></pre>
<p>To improve it, it would be great to cache the results of ‘ps -Af’ and only make it return processes owned by my user, anyone know how to do those things?  (without writing to a file).</p>
<ol start="2">
<li>the customized section of my current .bashrc, I found ‘extract’ today, but I wrote the automatic completion for managing services awhile ago, it saves me a lot of typing:</li>
</ol>
<pre><code class="lang-auto">extract () {
   if [ -f $1 ] ; then
       case $1 in
     *.tar.bz2)     tar xvjf $1 &amp;&amp; cd $(basename "$1" .tar.bz2) ;;
     *.tar.gz) tar xvzf $1 &amp;&amp; cd $(basename "$1" .tar.gz) ;;
     *.tar.xz) tar Jxvf $1 &amp;&amp; cd $(basename "$1" .tar.xz) ;;
     *.bz2)         bunzip2 $1 &amp;&amp; cd $(basename "$1" /bz2) ;;
     *.rar)         unrar x $1 &amp;&amp; cd $(basename "$1" .rar) ;;
     *.gz)          gunzip $1 &amp;&amp; cd $(basename "$1" .gz) ;;
     *.tar)         tar xvf $1 &amp;&amp; cd $(basename "$1" .tar) ;;
     *.tbz2)        tar xvjf $1 &amp;&amp; cd $(basename "$1" .tbz2) ;;
     *.tgz)         tar xvzf $1 &amp;&amp; cd $(basename "$1" .tgz) ;;
     *.zip)         unzip $1 &amp;&amp; cd $(basename "$1" .zip) ;;
     *.Z)      uncompress $1 &amp;&amp; cd $(basename "$1" .Z) ;;
     *.7z)          7z x $1 &amp;&amp; cd $(basename "$1" .7z) ;;
     *)        echo "don't know how to extract '$1'..." ;;
       esac
   else
       echo "'$1' is not a valid file!"
   fi
 }

function fsize() {
  ls -lh $1 | cut -f5 -d' '
}

function mkcd() {
  [ -n "$1" ] &amp;&amp; mkdir -p "$@" &amp;&amp; cd "$1";
}

function restart() {
  [ -n "$1" ] &amp;&amp; sudo /etc/init.d/$1 restart;
}

function start() {
  [ -n "$1" ] &amp;&amp; sudo /etc/init.d/$1 start;
}

function stop() {
  [ -n "$1" ] &amp;&amp; sudo /etc/init.d/$1 stop;
}

function init_d_complete(){
# 'local' can only be used within a function, exclude it if not using a function
  COMPREPLY=()
  local cur="${COMP_WORDS[COMP_CWORD]}"
  local opts=$(ls /etc/init.d)
  COMPREPLY=($(compgen -W "${opts}" -- ${cur}))
}
complete -F "init_d_complete" -o "default" "restart"
complete -F "init_d_complete" -o "default" "start"
complete -F "init_d_complete" -o "default" "stop"</code></pre>
<ol start="3">
<li>my latest backup script for the forums/irc/server, I just finished it up today as well.  I migrated from tar’ing and bzip’ing things up once a week, to using rdiff-backup to take up less space and be more efficient.  I backup all the files I think I need in a central place, then rsync them to my server at home as well.  This must be run as root so that it can read all the files it needs.</li>
</ol>
<pre><code class="lang-auto">#!/bin/bash
cd /home2/backup
USERNAME="mysql_root_user"
PASSWORD="mysql_root_pass"

RESTORE_DIR=/home/mopar/restore

DATABASES="db1 db2 db3 etc etc2"

# backup databases
mkdir tmp
for database in $DATABASES
do
#	echo "mysqldump -u$USERNAME -p$PASSWORD $database | bzip2 -c &gt; ./tmp/$database.sql.bz2"
	mysqldump -u$USERNAME -p$PASSWORD $database | bzip2 -c &gt; ./tmp/$database.sql.bz2
done
rdiff-backup ./tmp ./dbs
rm -rf tmp

# backup configuration
rdiff-backup /etc ./etc

# backup irc from remote host
rdiff-backup user@irc.host::/home/ircd ./ircd

mkdir -p $RESTORE_DIR
# backup ownership and permissions
find / -xdev -printf "chmod %m \"/%P\";\nchown %u:%g \"/%P\";\n" &gt; $RESTORE_DIR/fix_perms_owner.sh
# backup installed packages
dpkg --get-selections &gt; $RESTORE_DIR/package_list
# backup menu.lst
cp /boot/grub/menu.lst $RESTORE_DIR
# grab specific conf files from remote host
rsync -az root@irc.host:/etc/nginx $RESTORE_DIR
rsync -az root@irc.host:/etc/pound $RESTORE_DIR
chown -R mopar.mopar $RESTORE_DIR

# backup /home
rdiff-backup --exclude /home/mopar/logs --exclude /home/mineos/ram-disk --exclude /home/mineos/worldmap /home ./home

# sync to another hard drive
# not anymore, after RAID
#rsync -a * /home/mopar/backup/

# sync to another server, offsite
rsync -az * user@my.house:/home2/backup/</code></pre>
<p>I believe that it backs up securely everything that I should need to set the server up very quickly on another host, even if I no longer have access to these computers at all.  If you can think of something I missed, or a better way to do something, let me know. <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330/1</link>
        <pubDate>Fri, 21 Jan 2011 10:54:57 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-379330-1</guid>
        <source url="https://forum.moparisthebest.com/t/helpful-scripts-or-snippets/379330.rss">Helpful scripts or snippets</source>
      </item>
  </channel>
</rss>
