<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Switching Locations Problem *Fixed*</title>
    <link>https://forum.moparisthebest.com/t/switching-locations-problem-fixed/126842</link>
    <description>EDIT: A mod can delete this topic.

I am making a script for the monk monastery near edgeville, and this little portion is meant to find which location you are closest to (Center, top left, or lower left), and search for a location to go to where there is a monk and no PlayerDot near the monk. I just can&#39;t get it to work, however. Can anyone provide a little help?

[code]program SwitchSpotTest;

type
  TDTMPoints = record
    MainPoint : TDTMPointDef;
    SubPoints : array [0..2] of TDTMPointDef;
end;
var
  MasterDTM : array [0..3] of TDTM;
  TDTMArray : array [0..3] of TDTMPoints;
  CenterDTM, ULDTM, LLDTM, LRDTM : integer;

procedure AssembleDTM;
var
  i,mark : integer;
begin
  MarkTime(mark);

  TDTMArray[0].MainPoint.x := 652;
  TDTMArray[0].MainPoint.y := 81;
  TDTMArray[0].MainPoint.areasize := 1;
  TDTMArray[0].MainPoint.areashape := 0;
  TDTMArray[0].MainPoint.color := 0;
  TDTMArray[0].MainPoint.tolerance := 255;

  TDTMArray[0].Subpoints[0].x := 624;
  TDTMArray[0].Subpoints[0].y := 53;
  TDTMArray[0].Subpoints[0].areasize := 3;
  TDTMArray[0].Subpoints[0].areashape := 0;
  TDTMArray[0].Subpoints[0].color := RoadColor;
  TDTMArray[0].Subpoints[0].tolerance := 0;

  TDTMArray[0].Subpoints[1].x := 675;
  TDTMArray[0].Subpoints[1].y := 52;
  TDTMArray[0].Subpoints[1].areasize := 3;
  TDTMArray[0].Subpoints[1].areashape := 0;
  TDTMArray[0].Subpoints[1].color := RoadColor;
  TDTMArray[0].Subpoints[1].tolerance := 0;

  TDTMArray[0].Subpoints[2].x := 623;
  TDTMArray[0].Subpoints[2].y := 103;
  TDTMArray[0].Subpoints[2].areasize := 3;
  TDTMArray[0].Subpoints[2].areashape := 0;
  TDTMArray[0].Subpoints[2].color := RoadColor;
  TDTMArray[0].Subpoints[2].tolerance := 0;

  TDTMArray[1].MainPoint.x := 624;
  TDTMArray[1].MainPoint.y := 52;
  TDTMArray[1].MainPoint.areasize := 1;
  TDTMArray[1].MainPoint.areashape := 0;
  TDTMArray[1].MainPoint.color := RoadColor;
  TDTMArray[1].MainPoint.tolerance := 0;

  TDTMArray[1].Subpoints[0].x := 676;
  TDTMArray[1].Subpoints[0].y := 53;
  TDTMArray[1].Subpoints[0].areasize := 3;
  TDTMArray[1].Subpoints[0].areashape := 0;
  TDTMArray[1].Subpoints[0].color := RoadColor;
  TDTMArray[1].Subpoints[0].tolerance := 0;

  TDTMArray[1].Subpoints[1].x := 623;
  TDTMArray[1].Subpoints[1].y := 104;
  TDTMArray[1].Subpoints[1].areasize := 3;
  TDTMArray[1].Subpoints[1].areashape := 0;
  TDTMArray[1].Subpoints[1].color := RoadColor;
  TDTMArray[1].Subpoints[1].tolerance := 0;

  TDTMArray[1].Subpoints[2].x := 678;
  TDTMArray[1].Subpoints[2].y := 105;
  TDTMArray[1].Subpoints[2].areasize := 3;
  TDTMArray[1].Subpoints[2].areashape := 0;
  TDTMArray[1].Subpoints[2].color := RoadColor;
  TDTMArray[1].Subpoints[2].tolerance := 0;

  TDTMArray[2].MainPoint.x := 623;
  TDTMArray[2].MainPoint.y := 106;
  TDTMArray[2].MainPoint.areasize := 1;
  TDTMArray[2].MainPoint.areashape := 0;
  TDTMArray[2].MainPoint.color := RoadColor;
  TDTMArray[2].MainPoint.tolerance := 0;

  TDTMArray[2].Subpoints[0].x := 622;
  TDTMArray[2].Subpoints[0].y := 54;
  TDTMArray[2].Subpoints[0].areasize := 3;
  TDTMArray[2].Subpoints[0].areashape := 0;
  TDTMArray[2].Subpoints[0].color := RoadColor;
  TDTMArray[2].Subpoints[0].tolerance := 0;

  TDTMArray[2].Subpoints[1].x := 677;
  TDTMArray[2].Subpoints[1].y := 51;
  TDTMArray[2].Subpoints[1].areasize := 3;
  TDTMArray[2].Subpoints[1].areashape := 0;
  TDTMArray[2].Subpoints[1].color := RoadColor;
  TDTMArray[2].Subpoints[1].tolerance := 0;

  TDTMArray[2].Subpoints[2].x := 677;
  TDTMArray[2].Subpoints[2].y := 106;
  TDTMArray[2].Subpoints[2].areasize := 3;
  TDTMArray[2].Subpoints[2].areashape := 0;
  TDTMArray[2].Subpoints[2].color := RoadColor;
  TDTMArray[2].Subpoints[2].tolerance := 0;

  TDTMArray[3].MainPoint.x := 676;
  TDTMArray[3].MainPoint.y := 106;
  TDTMArray[3].MainPoint.areasize := 1;
  TDTMArray[3].MainPoint.areashape := 0;
  TDTMArray[3].MainPoint.color := RoadColor;
  TDTMArray[3].MainPoint.tolerance := 0;

  TDTMArray[3].Subpoints[0].x := 674;
  TDTMArray[3].Subpoints[0].y := 51;
  TDTMArray[3].Subpoints[0].areasize := 3;
  TDTMArray[3].Subpoints[0].areashape := 0;
  TDTMArray[3].Subpoints[0].color := RoadColor;
  TDTMArray[3].Subpoints[0].tolerance := 0;

  TDTMArray[3].Subpoints[1].x := 624;
  TDTMArray[3].Subpoints[1].y := 51;
  TDTMArray[3].Subpoints[1].areasize := 3;
  TDTMArray[3].Subpoints[1].areashape := 0;
  TDTMArray[3].Subpoints[1].color := RoadColor;
  TDTMArray[3].Subpoints[1].tolerance := 0;

  TDTMArray[3].Subpoints[2].x := 622;
  TDTMArray[3].Subpoints[2].y := 104;
  TDTMArray[3].Subpoints[2].areasize := 3;
  TDTMArray[3].Subpoints[2].areashape := 0;
  TDTMArray[3].Subpoints[2].color := RoadColor;
  TDTMArray[3].Subpoints[2].tolerance := 0;

  for i := 0 to 3 do
  begin
    MasterDTM[i].MainPoint := TDTMArray[i].MainPoint;
    MasterDTM[i].Subpoints := TDTMArray[i].Subpoints;
    Case i of
    0: CenterDTM := AddDTM(MasterDTM[i]);
    1: ULDTM := AddDTM(MasterDTM[i]);
    2: LLDTM := AddDTM(MasterDTM[i]);
    3: LRDTM := AddDTM(MasterDTM[i]);
    end;
  end;

  Writeln(&#39;AssembleDTM took &#39;+IntToStr(TimeFromMark(mark))+&#39; msecs&#39;);
end;

{*******************************************************************************
function ClosestCoords(var returncoords : TPoint; origincoords : TPoint;
         numbers : TPointArray) : integer;
By: Infantry001
Description: ReturnCoords is the TPoint from Numbers that is closest to the
origincoords. Returns array number of the closest point.
*******************************************************************************}
function ClosestCoords(var returncoords : TPoint; origincoords : TPoint; numbers : TPointArray) : integer;
var
  i,Closest,temp : integer;
begin
  Closest := 1000;
  for i := 0 to getarraylength(numbers) - 1 do
  begin
    if (Distance(OriginCoords.x,OriginCoords.y,Numbers[i].x,Numbers[i].y) &lt; closest) then
    begin
      result := i;
      returncoords.x := Numbers[i].x;
      returncoords.y := Numbers[i].y;
      Closest := Distance(OriginCoords.x,OriginCoords.y,Numbers[i].x,Numbers[i].y);
    end;
  end;
  writeln(&#39;Closest coords are &#39;+IntToStr(returncoords.x)+&#39;,&#39;+IntToStr(returncoords.x));
end;

function SwitchSpot : boolean;
var
  i,Closest,spread : integer;
  iX,iY,yX,yY,wX,wY : integer;
  angle : extended;
  TPT : array [0..2] of TPoint;
  Click,MMC : TPoint;
begin
  writeln(&#39;Switching spots&#39;);
  if not LoggedIn then exit;
  for i := 0 to 2 do
  begin
    Case i of
    0: if FindDTMRotated(CenterDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),
          Radians(20),0.005,angle) then
       begin
         writeln(&#39;Found &#39;+IntToStr(i)+&#39; dtm&#39;);
         TPT[i].x := iX;
         TPT[i].y := iY;
       end;
    1: if FindDTMRotated(ULDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),
          Radians(20),0.005,angle) then
       begin
         writeln(&#39;Found &#39;+IntToStr(i)+&#39; dtm&#39;);
         TPT[i].x := iX;
         TPT[i].y := iY;
       end;
    2: if FindDTMRotated(LLDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),
          Radians(20),0.005,angle) then
       begin
         writeln(&#39;Found &#39;+IntToStr(i)+&#39; dtm&#39;);
         TPT[i].x := iX;
         TPT[i].y := iY;
       end;
    end;
    Wait(5);
  end;
  MMC.x := MMCX;
  MMC.y := MMCY;
  Closest := ClosestCoords(Click,MMC,TPT);
  for i := 0 to 2 do
  begin
    if i &lt;&gt; closest then
    begin
      repeat
        if FindColorSpiralTolerance(yX,yY,195836,TPT[i].x - spread,
           TPT[i].y - spread,TPT[i].x + spread,TPT[i].y + spread,7) then
        begin
          if FindColorSpiralTolerance(wX,wY,16777215,yx - 2,yy - 2,yx + 2,yy + 2,3) then
          begin
            writeln(&#39;Player fighting Monk&#39;);
            result := false;
            break;
          end else
          begin
            MouseFlag(yX,yY,3,3);
            result := true;
            break;
          end;
        end else
        begin
          if spread &gt; 15 then
          begin
            writeln(&#39;No monk in DTM&#39;+IntToStr(i));
            result := false;
            break;
          end;
          spread := spread + 5;
        end;
        Wait(5);
      until(result or (spread &gt; 15))
    end;
    Wait(5);
  end;
  if not Result then writeln(&#39;Fightable Monks not found&#39;) else
  writeln(&#39;SwitchSpot returns true&#39;);
end;

begin
  SwitchSpot;
end.[/code]</description>
    
    <lastBuildDate>Wed, 25 Jul 2007 03:48:20 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/switching-locations-problem-fixed/126842.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Switching Locations Problem *Fixed*</title>
        <dc:creator><![CDATA[@Infintry001 Infintry001]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/infintry001">@Infintry001</a> wrote:</p>
          <blockquote>
              <p>EDIT: A mod can delete this topic.</p>
<p>I am making a script for the monk monastery near edgeville, and this little portion is meant to find which location you are closest to (Center, top left, or lower left), and search for a location to go to where there is a monk and no PlayerDot near the monk. I just can’t get it to work, however. Can anyone provide a little help?</p>
<p>[code]program SwitchSpotTest;</p>
<p>type<br>
TDTMPoints = record<br>
MainPoint : TDTMPointDef;<br>
SubPoints : array [0…2] of TDTMPointDef;<br>
end;<br>
var<br>
MasterDTM : array [0…3] of TDTM;<br>
TDTMArray : array [0…3] of TDTMPoints;<br>
CenterDTM, ULDTM, LLDTM, LRDTM : integer;</p>
<p>procedure AssembleDTM;<br>
var<br>
i,mark : integer;<br>
begin<br>
MarkTime(mark);</p>
<p>TDTMArray[0].MainPoint.x := 652;<br>
TDTMArray[0].MainPoint.y := 81;<br>
TDTMArray[0].MainPoint.areasize := 1;<br>
TDTMArray[0].MainPoint.areashape := 0;<br>
TDTMArray[0].MainPoint.color := 0;<br>
TDTMArray[0].MainPoint.tolerance := 255;</p>
<p>TDTMArray[0].Subpoints[0].x := 624;<br>
TDTMArray[0].Subpoints[0].y := 53;<br>
TDTMArray[0].Subpoints[0].areasize := 3;<br>
TDTMArray[0].Subpoints[0].areashape := 0;<br>
TDTMArray[0].Subpoints[0].color := RoadColor;<br>
TDTMArray[0].Subpoints[0].tolerance := 0;</p>
<p>TDTMArray[0].Subpoints[1].x := 675;<br>
TDTMArray[0].Subpoints[1].y := 52;<br>
TDTMArray[0].Subpoints[1].areasize := 3;<br>
TDTMArray[0].Subpoints[1].areashape := 0;<br>
TDTMArray[0].Subpoints[1].color := RoadColor;<br>
TDTMArray[0].Subpoints[1].tolerance := 0;</p>
<p>TDTMArray[0].Subpoints[2].x := 623;<br>
TDTMArray[0].Subpoints[2].y := 103;<br>
TDTMArray[0].Subpoints[2].areasize := 3;<br>
TDTMArray[0].Subpoints[2].areashape := 0;<br>
TDTMArray[0].Subpoints[2].color := RoadColor;<br>
TDTMArray[0].Subpoints[2].tolerance := 0;</p>
<p>TDTMArray[1].MainPoint.x := 624;<br>
TDTMArray[1].MainPoint.y := 52;<br>
TDTMArray[1].MainPoint.areasize := 1;<br>
TDTMArray[1].MainPoint.areashape := 0;<br>
TDTMArray[1].MainPoint.color := RoadColor;<br>
TDTMArray[1].MainPoint.tolerance := 0;</p>
<p>TDTMArray[1].Subpoints[0].x := 676;<br>
TDTMArray[1].Subpoints[0].y := 53;<br>
TDTMArray[1].Subpoints[0].areasize := 3;<br>
TDTMArray[1].Subpoints[0].areashape := 0;<br>
TDTMArray[1].Subpoints[0].color := RoadColor;<br>
TDTMArray[1].Subpoints[0].tolerance := 0;</p>
<p>TDTMArray[1].Subpoints[1].x := 623;<br>
TDTMArray[1].Subpoints[1].y := 104;<br>
TDTMArray[1].Subpoints[1].areasize := 3;<br>
TDTMArray[1].Subpoints[1].areashape := 0;<br>
TDTMArray[1].Subpoints[1].color := RoadColor;<br>
TDTMArray[1].Subpoints[1].tolerance := 0;</p>
<p>TDTMArray[1].Subpoints[2].x := 678;<br>
TDTMArray[1].Subpoints[2].y := 105;<br>
TDTMArray[1].Subpoints[2].areasize := 3;<br>
TDTMArray[1].Subpoints[2].areashape := 0;<br>
TDTMArray[1].Subpoints[2].color := RoadColor;<br>
TDTMArray[1].Subpoints[2].tolerance := 0;</p>
<p>TDTMArray[2].MainPoint.x := 623;<br>
TDTMArray[2].MainPoint.y := 106;<br>
TDTMArray[2].MainPoint.areasize := 1;<br>
TDTMArray[2].MainPoint.areashape := 0;<br>
TDTMArray[2].MainPoint.color := RoadColor;<br>
TDTMArray[2].MainPoint.tolerance := 0;</p>
<p>TDTMArray[2].Subpoints[0].x := 622;<br>
TDTMArray[2].Subpoints[0].y := 54;<br>
TDTMArray[2].Subpoints[0].areasize := 3;<br>
TDTMArray[2].Subpoints[0].areashape := 0;<br>
TDTMArray[2].Subpoints[0].color := RoadColor;<br>
TDTMArray[2].Subpoints[0].tolerance := 0;</p>
<p>TDTMArray[2].Subpoints[1].x := 677;<br>
TDTMArray[2].Subpoints[1].y := 51;<br>
TDTMArray[2].Subpoints[1].areasize := 3;<br>
TDTMArray[2].Subpoints[1].areashape := 0;<br>
TDTMArray[2].Subpoints[1].color := RoadColor;<br>
TDTMArray[2].Subpoints[1].tolerance := 0;</p>
<p>TDTMArray[2].Subpoints[2].x := 677;<br>
TDTMArray[2].Subpoints[2].y := 106;<br>
TDTMArray[2].Subpoints[2].areasize := 3;<br>
TDTMArray[2].Subpoints[2].areashape := 0;<br>
TDTMArray[2].Subpoints[2].color := RoadColor;<br>
TDTMArray[2].Subpoints[2].tolerance := 0;</p>
<p>TDTMArray[3].MainPoint.x := 676;<br>
TDTMArray[3].MainPoint.y := 106;<br>
TDTMArray[3].MainPoint.areasize := 1;<br>
TDTMArray[3].MainPoint.areashape := 0;<br>
TDTMArray[3].MainPoint.color := RoadColor;<br>
TDTMArray[3].MainPoint.tolerance := 0;</p>
<p>TDTMArray[3].Subpoints[0].x := 674;<br>
TDTMArray[3].Subpoints[0].y := 51;<br>
TDTMArray[3].Subpoints[0].areasize := 3;<br>
TDTMArray[3].Subpoints[0].areashape := 0;<br>
TDTMArray[3].Subpoints[0].color := RoadColor;<br>
TDTMArray[3].Subpoints[0].tolerance := 0;</p>
<p>TDTMArray[3].Subpoints[1].x := 624;<br>
TDTMArray[3].Subpoints[1].y := 51;<br>
TDTMArray[3].Subpoints[1].areasize := 3;<br>
TDTMArray[3].Subpoints[1].areashape := 0;<br>
TDTMArray[3].Subpoints[1].color := RoadColor;<br>
TDTMArray[3].Subpoints[1].tolerance := 0;</p>
<p>TDTMArray[3].Subpoints[2].x := 622;<br>
TDTMArray[3].Subpoints[2].y := 104;<br>
TDTMArray[3].Subpoints[2].areasize := 3;<br>
TDTMArray[3].Subpoints[2].areashape := 0;<br>
TDTMArray[3].Subpoints[2].color := RoadColor;<br>
TDTMArray[3].Subpoints[2].tolerance := 0;</p>
<p>for i := 0 to 3 do<br>
begin<br>
MasterDTM[i].MainPoint := TDTMArray[i].MainPoint;<br>
MasterDTM[i].Subpoints := TDTMArray[i].Subpoints;<br>
Case i of<br>
0: CenterDTM := AddDTM(MasterDTM[i]);<br>
1: ULDTM := AddDTM(MasterDTM[i]);<br>
2: LLDTM := AddDTM(MasterDTM[i]);<br>
3: LRDTM := AddDTM(MasterDTM[i]);<br>
end;<br>
end;</p>
<p>Writeln(‘AssembleDTM took ‘+IntToStr(TimeFromMark(mark))+’ msecs’);<br>
end;</p>
<p>{*******************************************************************************<br>
function ClosestCoords(var returncoords : TPoint; origincoords : TPoint;<br>
numbers : TPointArray) : integer;<br>
By: Infantry001<br>
Description: ReturnCoords is the TPoint from Numbers that is closest to the<br>
origincoords. Returns array number of the closest point.<br>
*******************************************************************************}<br>
function ClosestCoords(var returncoords : TPoint; origincoords : TPoint; numbers : TPointArray) : integer;<br>
var<br>
i,Closest,temp : integer;<br>
begin<br>
Closest := 1000;<br>
for i := 0 to getarraylength(numbers) - 1 do<br>
begin<br>
if (Distance(OriginCoords.x,OriginCoords.y,Numbers[i].x,Numbers[i].y) &lt; closest) then<br>
begin<br>
result := i;<br>
returncoords.x := Numbers[i].x;<br>
returncoords.y := Numbers[i].y;<br>
Closest := Distance(OriginCoords.x,OriginCoords.y,Numbers[i].x,Numbers[i].y);<br>
end;<br>
end;<br>
writeln(‘Closest coords are ‘+IntToStr(returncoords.x)+’,’+IntToStr(returncoords.x));<br>
end;</p>
<p>function SwitchSpot : boolean;<br>
var<br>
i,Closest,spread : integer;<br>
iX,iY,yX,yY,wX,wY : integer;<br>
angle : extended;<br>
TPT : array [0…2] of TPoint;<br>
Click,MMC : TPoint;<br>
begin<br>
writeln(‘Switching spots’);<br>
if not LoggedIn then exit;<br>
for i := 0 to 2 do<br>
begin<br>
Case i of<br>
0: if FindDTMRotated(CenterDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),<br>
Radians(20),0.005,angle) then<br>
begin<br>
writeln(‘Found ‘+IntToStr(i)+’ dtm’);<br>
TPT[i].x := iX;<br>
TPT[i].y := iY;<br>
end;<br>
1: if FindDTMRotated(ULDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),<br>
Radians(20),0.005,angle) then<br>
begin<br>
writeln(‘Found ‘+IntToStr(i)+’ dtm’);<br>
TPT[i].x := iX;<br>
TPT[i].y := iY;<br>
end;<br>
2: if FindDTMRotated(LLDTM,iX,iY,MMX1,MMY1,MMX2,MMY2,Radians(-20),<br>
Radians(20),0.005,angle) then<br>
begin<br>
writeln(‘Found ‘+IntToStr(i)+’ dtm’);<br>
TPT[i].x := iX;<br>
TPT[i].y := iY;<br>
end;<br>
end;<br>
Wait(5);<br>
end;<br>
MMC.x := MMCX;<br>
MMC.y := MMCY;<br>
Closest := ClosestCoords(Click,MMC,TPT);<br>
for i := 0 to 2 do<br>
begin<br>
if i &lt;&gt; closest then<br>
begin<br>
repeat<br>
if FindColorSpiralTolerance(yX,yY,195836,TPT[i].x - spread,<br>
TPT[i].y - spread,TPT[i].x + spread,TPT[i].y + spread,7) then<br>
begin<br>
if FindColorSpiralTolerance(wX,wY,16777215,yx - 2,yy - 2,yx + 2,yy + 2,3) then<br>
begin<br>
writeln(‘Player fighting Monk’);<br>
result := false;<br>
break;<br>
end else<br>
begin<br>
MouseFlag(yX,yY,3,3);<br>
result := true;<br>
break;<br>
end;<br>
end else<br>
begin<br>
if spread &gt; 15 then<br>
begin<br>
writeln(‘No monk in DTM’+IntToStr(i));<br>
result := false;<br>
break;<br>
end;<br>
spread := spread + 5;<br>
end;<br>
Wait(5);<br>
until(result or (spread &gt; 15))<br>
end;<br>
Wait(5);<br>
end;<br>
if not Result then writeln(‘Fightable Monks not found’) else<br>
writeln(‘SwitchSpot returns true’);<br>
end;</p>
<p>begin<br>
SwitchSpot;<br>
end.[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/switching-locations-problem-fixed/126842/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/switching-locations-problem-fixed/126842/1</link>
        <pubDate>Wed, 25 Jul 2007 03:48:20 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-126842-1</guid>
        <source url="https://forum.moparisthebest.com/t/switching-locations-problem-fixed/126842.rss">Switching Locations Problem *Fixed*</source>
      </item>
  </channel>
</rss>
