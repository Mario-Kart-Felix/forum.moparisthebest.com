<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>3 Main Ways of how to run Binary Class files</title>
    <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806</link>
    <description>Ok there are 3 main ways of running Class files. These ways are the following:


[ul][li]Using a Batch files to run the main class file with the Standard Binary Edition 2. [/li]
[li]Using a Manifest to tell the Standard Bindary Edition 2 to run the main class file through a Jar executable. [/li]
[li]Using an applet in HTML to run your main class file. [/li][/ul]


Ok I will first go through how to use Batch files to run your main class files. Open up Notepad and paste in the following code:

[code]
@echo off
title Batch Archive for running Java applications.
&quot;C:\Program Files\Java\jdk1.5.0_09\bin\java.exe&quot; 1
pause
[/code]

[center] KEY
~~~
1 = put the name of your main class file WITHOUT the extension (I.E. main)[/center]

Now save it as runapps.bat and you are finished =)
This pretty much closes up this part of my small tutorial.

------------------------------------------------------------------------------------

Now I will explain how to make any Java application into a &quot;1-click&quot; executable &amp; compressed Jar archive.
First off make a new folder in your source called the following:

[code]
META-INF
[/code]

Next go into the folder. Now open up Notepad and put in the following code:

[code]
Manifest-Version: 1.0
Created-By: 1.5.0_06 (Sun Microsystems Inc.)
Main-Class: main
[/code]

Now you can change the &quot;main&quot; to whatever your main class is WITHOUT it&#39;s extension. Now save this file
in your META-INF folder. Save it as the following (EXACTALY):

[code]
MANIFEST.mf
[/code]
Now you go back up 1 directory, back into your main sverer folder, and press ctrl+a. Now right click it and go to the &quot;Squeez&quot; (for those who have WinZip, use that) option and compress your source into a Jar file. Now you can double click your Jar file and your application [i]should[/i] run normally. Some errors may come up as the following:

-Invalid or corrupt maifest file

-Cannot read from mainfest file

-Cannot read main-class from manifest

These are quite simple. The first one means that you either do not have a manifest altogether, or that your mainifest is all screwed up and typed wrong. The next one may mean that your mainifest file has some errors in it. The last one simply means that your main-class that you put is not the main class of the application, or that it is not set up for running as a single application without a Batch file.

-------------------------------------------------------------------------------------------------------------------------------------------

The final thing I will explain in this tutorial is how to run class files through applets in HTML. This way is quite useful for people who want to run web-based clients on a webpage. This is similar to the Jar file and runs the best when using a Jar file (explained below.)

First off open up notepad and paste the following code:

[code]
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Java Application&lt;/title&gt;
    &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Your Application using a main class archive:&lt;/h1&gt;
      &lt;hr&gt;
      &lt;applet code=###.class width=120 height=120&gt;
	alt=&quot;Your browser understands the &amp;lt;APPLET&amp;gt; tag but isn&#39;t running the applet, for some reason.&quot;
	Your browser is completely ignoring the &amp;lt;APPLET&amp;gt; tag!
      &lt;/applet&gt;
      &lt;hr&gt;
      &lt;a href=&quot;@@@.java&quot;&gt;The source.&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

Save this as runapp.html or main.html (or anything else you want with the .html extension.)

This is the first example of using applets to run a class file. Where it has the &quot;###&quot; is where the NAME of your class file goes. The .class extension is already there for you. The &quot;@@@&quot; is the JAVA VERSION of your main class file. The class file you want in the &quot;###&quot; spot is your main class file of your aplication.

Here is the example for running a Jar file with an applet:

[code]
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Java Application&lt;/title&gt;
    &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Your application using a Jar archive:&lt;/h1&gt;
      &lt;hr&gt;
      &lt;applet archive=###.jar code=~~~.class width=450 height=400&gt;
	alt=&quot;Your browser understands the &amp;lt;APPLET&amp;gt; tag but isn&#39;t running the applet, for some reason.&quot;
	Your browser is completely ignoring the &amp;lt;APPLET&amp;gt; tag!
      &lt;/applet&gt;
      &lt;hr&gt;
      &lt;a href=&quot;./@@@.jar&quot;&gt;To Download the Jar.&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

Where it has the &quot;###.jar&quot; you can put your Jar file name + extension there. Where the &quot;./@@@.jar&quot; do the same thing as you did for the &quot;###.jar&quot; except include the &quot;./&quot; in front of it. Also if you looked closly enough at the code, you could tell I change the width and height of the two webpages. The &quot;450&quot; and &quot;400&quot; above are the width and height. Change them at your will lolz. The &quot;./@@@.jar&quot; is only to download it and is not needed if one so chooses not to have it. Also, since Frank_ reminded me about running Jar files with HTML, I originally forgot about the proper code. I updated it now. The ~~~.class means you need to put the same class name there that you put as the main-class in you manifest file in the Jar archive.

---------------------------------------------------------------------------------------------------------

Enjoy my short tutorial on bried descriptions of only 3 ways of running Java applications. I hope you took pleasure in reading my tutorial. Enjoy!

~Mod Taharok</description>
    
    <lastBuildDate>Sat, 25 Nov 2006 01:31:43 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>I see how that works. How would you put it in the main java files to run that class?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/7</link>
        <pubDate>Sat, 25 Nov 2006 01:31:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-7</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@Iamadam Iamadam]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/iamadam">@Iamadam</a> wrote:</p>
          <blockquote>
              <p>Reflection is pretty much a way of analyzing and running classes, from within the JVM.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/6</link>
        <pubDate>Thu, 23 Nov 2006 12:43:54 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-6</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p><a href="http://java.sun.com/j2se/1.3/docs/api/java/lang/reflect/package-summary.html" class="onebox" target="_blank" rel="nofollow noopener">http://java.sun.com/j2se/1.3/docs/api/java/lang/reflect/package-summary.html</a></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/5</link>
        <pubDate>Thu, 23 Nov 2006 04:31:40 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-5</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>[quote=“frank_, post:2, topic:27806”]your example html is exactly the same as the “template” <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"><br>
also, if the jar’s manifest doesnt contain a main-class attribute, i think in the applet tage you have to use<code>archive=###.jar code=@@@.class</code></p>
<p>aaaaaaaaaaaaaaaand people should realy know how to set their %PATH% var so that they dont have to type the full path to the java executable :D[/quote]</p>
<p>Lol dang forgot about that =/[br][size=1]Posted at: November 22, 2006, 05:16:53 PM[/size][hr][quote=“moparisthebest, post:3, topic:27806”]You can also run Binary classes via reflection &lt;3[/quote]</p>
<p>One can only learn more about somthing and the only way to do that is by asking questions…</p>
<p>…Refelection?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/4</link>
        <pubDate>Thu, 23 Nov 2006 04:21:28 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-4</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@moparisthebest Moparisthebest]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/moparisthebest">@moparisthebest</a> wrote:</p>
          <blockquote>
              <p>You can also run Binary classes via reflection &lt;3</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/3</link>
        <pubDate>Wed, 22 Nov 2006 13:50:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-3</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>your example html is exactly the same as the “template” <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"><br>
also, if the jar’s manifest doesnt contain a main-class attribute, i think in the applet tage you have to use<code>archive=###.jar code=@@@.class</code></p>
<p>aaaaaaaaaaaaaaaand people should realy know how to set their %PATH% var so that they dont have to type the full path to the java executable <img src="https://forum.moparisthebest.com/images/emoji/twitter/smiley.png?v=6" title=":smiley:" class="emoji" alt=":smiley:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/2</link>
        <pubDate>Wed, 22 Nov 2006 11:22:09 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-2</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
      <item>
        <title>3 Main Ways of how to run Binary Class files</title>
        <dc:creator><![CDATA[@mod_taharok Taharok]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mod_taharok">@mod_taharok</a> wrote:</p>
          <blockquote>
              <p>Ok there are 3 main ways of running Class files. These ways are the following:</p>
<p>[ul][li]Using a Batch files to run the main class file with the Standard Binary Edition 2. [/li]<br>
[li]Using a Manifest to tell the Standard Bindary Edition 2 to run the main class file through a Jar executable. [/li]<br>
[li]Using an applet in HTML to run your main class file. [/li][/ul]</p>
<p>Ok I will first go through how to use Batch files to run your main class files. Open up Notepad and paste in the following code:</p>
<pre><code class="lang-auto">@echo off
title Batch Archive for running Java applications.
"C:\Program Files\Java\jdk1.5.0_09\bin\java.exe" 1
pause</code></pre>
<p>[center] KEY</p>
<pre><code class="lang-auto">1 = put the name of your main class file WITHOUT the extension (I.E. main)[/center]

Now save it as runapps.bat and you are finished =)
This pretty much closes up this part of my small tutorial.

------------------------------------------------------------------------------------

Now I will explain how to make any Java application into a "1-click" executable &amp; compressed Jar archive.
First off make a new folder in your source called the following:

[code]
META-INF
[/code]

Next go into the folder. Now open up Notepad and put in the following code:

[code]
Manifest-Version: 1.0
Created-By: 1.5.0_06 (Sun Microsystems Inc.)
Main-Class: main
[/code]

Now you can change the "main" to whatever your main class is WITHOUT it's extension. Now save this file
in your META-INF folder. Save it as the following (EXACTALY):

[code]
MANIFEST.mf
[/code]
Now you go back up 1 directory, back into your main sverer folder, and press ctrl+a. Now right click it and go to the "Squeez" (for those who have WinZip, use that) option and compress your source into a Jar file. Now you can double click your Jar file and your application [i]should[/i] run normally. Some errors may come up as the following:

-Invalid or corrupt maifest file

-Cannot read from mainfest file

-Cannot read main-class from manifest

These are quite simple. The first one means that you either do not have a manifest altogether, or that your mainifest is all screwed up and typed wrong. The next one may mean that your mainifest file has some errors in it. The last one simply means that your main-class that you put is not the main class of the application, or that it is not set up for running as a single application without a Batch file.

-------------------------------------------------------------------------------------------------------------------------------------------

The final thing I will explain in this tutorial is how to run class files through applets in HTML. This way is quite useful for people who want to run web-based clients on a webpage. This is similar to the Jar file and runs the best when using a Jar file (explained below.)

First off open up notepad and paste the following code:

[code]
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Java Application&lt;/title&gt;
    &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Your Application using a main class archive:&lt;/h1&gt;
      &lt;hr&gt;
      &lt;applet code=###.class width=120 height=120&gt;
	alt="Your browser understands the &amp;lt;APPLET&amp;gt; tag but isn't running the applet, for some reason."
	Your browser is completely ignoring the &amp;lt;APPLET&amp;gt; tag!
      &lt;/applet&gt;
      &lt;hr&gt;
      &lt;a href="@@@.java"&gt;The source.&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

Save this as runapp.html or main.html (or anything else you want with the .html extension.)

This is the first example of using applets to run a class file. Where it has the "###" is where the NAME of your class file goes. The .class extension is already there for you. The "@@@" is the JAVA VERSION of your main class file. The class file you want in the "###" spot is your main class file of your aplication.

Here is the example for running a Jar file with an applet:

[code]
&lt;html&gt;
  &lt;head&gt;
    &lt;title&gt;Java Application&lt;/title&gt;
    &lt;/head&gt;
  &lt;body&gt;
      &lt;h1&gt;Your application using a Jar archive:&lt;/h1&gt;
      &lt;hr&gt;
      &lt;applet archive=###.jar code=~~~.class width=450 height=400&gt;
	alt="Your browser understands the &amp;lt;APPLET&amp;gt; tag but isn't running the applet, for some reason."
	Your browser is completely ignoring the &amp;lt;APPLET&amp;gt; tag!
      &lt;/applet&gt;
      &lt;hr&gt;
      &lt;a href="./@@@.jar"&gt;To Download the Jar.&lt;/a&gt;
  &lt;/body&gt;
&lt;/html&gt;
[/code]

Where it has the "###.jar" you can put your Jar file name + extension there. Where the "./@@@.jar" do the same thing as you did for the "###.jar" except include the "./" in front of it. Also if you looked closly enough at the code, you could tell I change the width and height of the two webpages. The "450" and "400" above are the width and height. Change them at your will lolz. The "./@@@.jar" is only to download it and is not needed if one so chooses not to have it. Also, since Frank_ reminded me about running Jar files with HTML, I originally forgot about the proper code. I updated it now. The ~~~.class means you need to put the same class name there that you put as the main-class in you manifest file in the Jar archive.

---------------------------------------------------------------------------------------------------------

Enjoy my short tutorial on bried descriptions of only 3 ways of running Java applications. I hope you took pleasure in reading my tutorial. Enjoy!

~Mod Taharok</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806/1</link>
        <pubDate>Wed, 22 Nov 2006 11:16:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-27806-1</guid>
        <source url="https://forum.moparisthebest.com/t/3-main-ways-of-how-to-run-binary-class-files/27806.rss">3 Main Ways of how to run Binary Class files</source>
      </item>
  </channel>
</rss>
