<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[Any] Client Launcher/Updater</title>
    <link>https://forum.moparisthebest.com/t/any-client-launcher-updater/540573</link>
    <description>First, no I did not choose to livestream the jar file, this would consume a lot of bandwidth on large servers and some people use shitty hosting with limited bandwidth. This was also just something I made in my spare time to learn something about swing, so please no hate ;_;

You could also use this to get rid of the shitty checking in most 317 clients where you have to change a number and all that other shit. This will compare dates to the file stored online, and if It&#39;s newer it will prompt you for the download.[u][b] Works only for clients, not the cache.[/b][/u]
----------
Preview:
[spoiler][img]http://i.imgur.com/PSGNfv8.png[/img]
[img]http://i.imgur.com/UlI4DIr.png[/img][/spoiler]


First, you need to make a new folder, call it whatever you like. Then inside, you need to make this structure:



[ul][li]Main Folder
-- bin/ (output folder)
-- src/
---- Launcher.java
---- Splash.java[/li][/ul]

Splash.java:
[code=Java]
import javax.swing.*;
 /**
  * @author King Fox
  */
public class Launcher {
   
    public static void main(String[] args) {
        final Splash s = new Splash();
         s.setVisible(true);
         SwingUtilities.invokeLater(new Runnable(){
             public void run()  {
                  s.setVisible(true);
             }
         });
    }

}
[/code]

Launcher.java:
[code=java]
import javax.swing.*;


import java.awt.*;
import java.io.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
 
@SuppressWarnings(&quot;serial&quot;)
public class Splash extends JFrame {

// START EDIT
   private static String downloadUrl = &quot;http://somelink.com//718Client.jar&quot;; // the download url
   private static String fileName = &quot;SomeJar.jar&quot;; // the name you wish to save it as
   private static String serverName = &quot;Foxtrot&quot;; // the server name
   private static String backgroundImageUrl = &quot;http://somelink.com/images/splash.png&quot;; // url to a background image
   private static String saveDirectory = System.getProperty(&quot;user.home&quot;)+&quot;/Desktop/&quot;; // the location where you wish to store the Jar
// END EDIT

   public static URL url;
   private JLabel imglabel;
   private ImageIcon img;
   private static JProgressBar pbar;
   Thread t = null;
 
   public Splash() {
      super(&quot;Splash&quot;);
        
      File file = new File(saveDirectory + fileName);
        
      try {
         url = new URL(downloadUrl);
      } catch (MalformedURLException e) {
         e.printStackTrace();
      }
      
      setSize(543, 391);
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      setLocationRelativeTo(null);
      setUndecorated(true);
        
      try {
         img = new ImageIcon(new URL(backgroundImageUrl));
      } catch (MalformedURLException e1) {
         e1.printStackTrace();
      }
        
      imglabel = new JLabel(img);
      add(imglabel);
      setLayout(null);
      pbar = new JProgressBar();
      pbar.setMinimum(0);
      pbar.setMaximum(100);
      pbar.setStringPainted(true);
      pbar.setForeground(Color.LIGHT_GRAY);
      imglabel.setBounds(0, 0, 543, 391);
      add(pbar);
      pbar.setPreferredSize(new Dimension(310, 30));
      pbar.setBounds(70, 320, 404, 20);


      try {
         if (file.exists()) {
            URLConnection connection = url.openConnection();
            connection.connect();
            long time = connection.getLastModified();
            if (time &gt; file.lastModified()) {
               if (!startDialogue()) {
                  startApplication();
                  return;
               }
            } else {
               setVisible(true);
               Thread.sleep(3000);
               startApplication();
               return;
            }
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
        
      Thread t = new Thread() {
 
         public void run() {
            OutputStream dest = null;
            URLConnection download;
            InputStream readFileToDownload = null;
            try {
               dest = new BufferedOutputStream(new FileOutputStream(saveDirectory + fileName)); 
               download = url.openConnection();
               readFileToDownload = download.getInputStream();
               byte[] data = new byte[1024];
               int numRead;
               long numWritten = 0;
               int length = download.getContentLength();
               while ((numRead = readFileToDownload.read(data)) != -1) {
                  dest.write(data, 0, numRead);
                  numWritten += numRead;
                  int percent = (int)(((double)numWritten / (double)length) * 100D);
                  pbar.setValue(percent);
                  pbar.setString(&quot;&quot;+(percent &lt; 99 ? &quot;Downloading &quot;+serverName+&quot; - &quot;+percent+&quot;%&quot; : &quot;Complete&quot;)+&quot;&quot;);
               }
            } catch (Exception exception) {
               exception.printStackTrace();
            } finally {
               try {
                  if (readFileToDownload != null)
                     readFileToDownload.close();
                  if (dest != null)
                     dest.close();
                  Thread.sleep(1000L);
                  startApplication();
               } catch (IOException | InterruptedException ioe) {
               
               }
            }
         }
      };
      t.start();
   }
    
   public boolean startDialogue() {
      setVisible(true);
      int selection = JOptionPane.showConfirmDialog(null, &quot;An update is available. Do you wish to download?&quot;, &quot;Update Available&quot;, JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
      return selection == JOptionPane.OK_OPTION;
   }


   /**
   * Launches the downloaded Jar file and closes the progress bar
   */
   public static void startApplication() {
      try {
         Runtime.getRuntime().exec(&quot;java -jar &quot;+(saveDirectory + fileName)+&quot;&quot;);
         Thread.sleep(1000L);
         System.exit(0);
      } catch (IOException | InterruptedException e) {
         e.printStackTrace();
      }
   }

}
[/code]

Suggested you do this with an IDE such as [url=https://www.eclipse.org/downloads/packages/eclipse-standard-431/keplersr1]Eclipse[/url].
Hopefully someone finds use for it ^-^ Splash.java contains all the information you need to edit.</description>
    
    <lastBuildDate>Tue, 11 Mar 2014 12:30:39 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[Any] Client Launcher/Updater</title>
        <dc:creator><![CDATA[@Clawz_fury lare69]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/clawz_fury">@Clawz_fury</a> wrote:</p>
          <blockquote>
              <p>[quote=“Vain_, post:2, topic:540573”]useful to pushing out updates, but only if the user chooses to download it. id remove the prompt and just download it directly.</p>
<p>another alternative would be runajar,  but of course will only be useful to servers with large bandwidth. it essentially runs the archive from the URL, without downloading anything except the cache. would basically run the client on the webserver, which would only be updated by the host.</p>
<p>I use runajar personally because I can have one jar file, and quite a few shell scripts/batch commands and run any number of clients I want, only using different parameters. it saves hd space for all the servers I play from time to time.[/quote]<br>
NERD</p>
<p>just kidding <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"> pretty good release although I agree that they shouldn’t be prompted and it should just download directly</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/3</link>
        <pubDate>Tue, 11 Mar 2014 12:30:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540573-3</guid>
        <source url="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573.rss">[Any] Client Launcher/Updater</source>
      </item>
      <item>
        <title>[Any] Client Launcher/Updater</title>
        <dc:creator><![CDATA[@Vain1 Vain_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/vain1">@Vain1</a> wrote:</p>
          <blockquote>
              <p>useful to pushing out updates, but only if the user chooses to download it. id remove the prompt and just download it directly.</p>
<p>another alternative would be runajar,  but of course will only be useful to servers with large bandwidth. it essentially runs the archive from the URL, without downloading anything except the cache. would basically run the client on the webserver, which would only be updated by the host.</p>
<p>I use runajar personally because I can have one jar file, and quite a few shell scripts/batch commands and run any number of clients I want, only using different parameters. it saves hd space for all the servers I play from time to time.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/2</link>
        <pubDate>Mon, 24 Feb 2014 15:27:44 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540573-2</guid>
        <source url="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573.rss">[Any] Client Launcher/Updater</source>
      </item>
      <item>
        <title>[Any] Client Launcher/Updater</title>
        <dc:creator><![CDATA[@Fox2007 Fox2007]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fox2007">@Fox2007</a> wrote:</p>
          <blockquote>
              <p>First, no I did not choose to livestream the jar file, this would consume a lot of bandwidth on large servers and some people use shitty hosting with limited bandwidth. This was also just something I made in my spare time to learn something about swing, so please no hate ;_;</p>
<h2>You could also use this to get rid of the shitty checking in most 317 clients where you have to change a number and all that other shit. This will compare dates to the file stored online, and if It’s newer it will prompt you for the download.<span class="bbcode-u"><span class="bbcode-b"> Works only for clients, not the cache.</span></span>
</h2>
<p>Preview:<br>
[spoiler]<img src="http://i.imgur.com/PSGNfv8.png" alt width="" height=""><br>
<img src="http://i.imgur.com/UlI4DIr.png" alt width="" height="">[/spoiler]</p>
<p>First, you need to make a new folder, call it whatever you like. Then inside, you need to make this structure:</p>
<p>[ul][li]Main Folder<br>
– bin/ (output folder)<br>
– src/<br>
---- Launcher.java<br>
---- Splash.java[/li][/ul]</p>
<p>Splash.java:</p>
<pre><code class="lang-auto">import javax.swing.*;
 /**
  * @author King Fox
  */
public class Launcher {
   
    public static void main(String[] args) {
        final Splash s = new Splash();
         s.setVisible(true);
         SwingUtilities.invokeLater(new Runnable(){
             public void run()  {
                  s.setVisible(true);
             }
         });
    }

}</code></pre>
<p>Launcher.java:</p>
<pre><code class="lang-auto">import javax.swing.*;


import java.awt.*;
import java.io.*;
import javax.swing.*;
import java.io.*;
import java.net.*;
 
@SuppressWarnings("serial")
public class Splash extends JFrame {

// START EDIT
   private static String downloadUrl = "http://somelink.com//718Client.jar"; // the download url
   private static String fileName = "SomeJar.jar"; // the name you wish to save it as
   private static String serverName = "Foxtrot"; // the server name
   private static String backgroundImageUrl = "http://somelink.com/images/splash.png"; // url to a background image
   private static String saveDirectory = System.getProperty("user.home")+"/Desktop/"; // the location where you wish to store the Jar
// END EDIT

   public static URL url;
   private JLabel imglabel;
   private ImageIcon img;
   private static JProgressBar pbar;
   Thread t = null;
 
   public Splash() {
      super("Splash");
        
      File file = new File(saveDirectory + fileName);
        
      try {
         url = new URL(downloadUrl);
      } catch (MalformedURLException e) {
         e.printStackTrace();
      }
      
      setSize(543, 391);
      setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
      setLocationRelativeTo(null);
      setUndecorated(true);
        
      try {
         img = new ImageIcon(new URL(backgroundImageUrl));
      } catch (MalformedURLException e1) {
         e1.printStackTrace();
      }
        
      imglabel = new JLabel(img);
      add(imglabel);
      setLayout(null);
      pbar = new JProgressBar();
      pbar.setMinimum(0);
      pbar.setMaximum(100);
      pbar.setStringPainted(true);
      pbar.setForeground(Color.LIGHT_GRAY);
      imglabel.setBounds(0, 0, 543, 391);
      add(pbar);
      pbar.setPreferredSize(new Dimension(310, 30));
      pbar.setBounds(70, 320, 404, 20);


      try {
         if (file.exists()) {
            URLConnection connection = url.openConnection();
            connection.connect();
            long time = connection.getLastModified();
            if (time &gt; file.lastModified()) {
               if (!startDialogue()) {
                  startApplication();
                  return;
               }
            } else {
               setVisible(true);
               Thread.sleep(3000);
               startApplication();
               return;
            }
         }
      } catch (Exception e) {
         e.printStackTrace();
      }
        
      Thread t = new Thread() {
 
         public void run() {
            OutputStream dest = null;
            URLConnection download;
            InputStream readFileToDownload = null;
            try {
               dest = new BufferedOutputStream(new FileOutputStream(saveDirectory + fileName)); 
               download = url.openConnection();
               readFileToDownload = download.getInputStream();
               byte[] data = new byte[1024];
               int numRead;
               long numWritten = 0;
               int length = download.getContentLength();
               while ((numRead = readFileToDownload.read(data)) != -1) {
                  dest.write(data, 0, numRead);
                  numWritten += numRead;
                  int percent = (int)(((double)numWritten / (double)length) * 100D);
                  pbar.setValue(percent);
                  pbar.setString(""+(percent &lt; 99 ? "Downloading "+serverName+" - "+percent+"%" : "Complete")+"");
               }
            } catch (Exception exception) {
               exception.printStackTrace();
            } finally {
               try {
                  if (readFileToDownload != null)
                     readFileToDownload.close();
                  if (dest != null)
                     dest.close();
                  Thread.sleep(1000L);
                  startApplication();
               } catch (IOException | InterruptedException ioe) {
               
               }
            }
         }
      };
      t.start();
   }
    
   public boolean startDialogue() {
      setVisible(true);
      int selection = JOptionPane.showConfirmDialog(null, "An update is available. Do you wish to download?", "Update Available", JOptionPane.OK_CANCEL_OPTION, JOptionPane.INFORMATION_MESSAGE);
      return selection == JOptionPane.OK_OPTION;
   }


   /**
   * Launches the downloaded Jar file and closes the progress bar
   */
   public static void startApplication() {
      try {
         Runtime.getRuntime().exec("java -jar "+(saveDirectory + fileName)+"");
         Thread.sleep(1000L);
         System.exit(0);
      } catch (IOException | InterruptedException e) {
         e.printStackTrace();
      }
   }

}</code></pre>
<p>Suggested you do this with an IDE such as <a href="https://www.eclipse.org/downloads/packages/eclipse-standard-431/keplersr1" data-bbcode="true" rel="nofollow noopener">Eclipse</a>.<br>
Hopefully someone finds use for it ^-^ Splash.java contains all the information you need to edit.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/any-client-launcher-updater/540573/1</link>
        <pubDate>Mon, 24 Feb 2014 06:10:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-540573-1</guid>
        <source url="https://forum.moparisthebest.com/t/any-client-launcher-updater/540573.rss">[Any] Client Launcher/Updater</source>
      </item>
  </channel>
</rss>
