<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Logic gates; bitwise operators? boolean algebra?</title>
    <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008</link>
    <description>Could somebody give me some in depth explanations or links for some of the expressions because they&#39;re completely mind loveing me lol. 

I got a slight idea of XOR, OR from eyeownyew but I need to understand how they&#39;re used, uses, what they do etc. 
Other gates such as
NOR, XNOR, NAND [b]etc [/b]I really have no idea what they are :(


PS: I am a total NOOB at computer science and pretty much need a spoonfeed :S
I don&#39;t know binary very well but I&#39;ll get into learning it&#39;s extents soon enough.</description>
    
    <lastBuildDate>Tue, 18 Jun 2013 11:27:46 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@eXemplar eXemplar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exemplar">@eXemplar</a> wrote:</p>
          <blockquote>
              <p>[21:44:03] * %Fat_Cookies (fat@still.worst.network.ever) Quit (K-Lined: king’d)</p>
<p><span class="bbcode-b">(USER WAS BANNED FOR THIS POST)</span></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/6</link>
        <pubDate>Tue, 18 Jun 2013 11:27:46 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-6</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>In formal logic they have symbols:<br>
¬ NOT<br>
∧ AND<br>
V OR<br>
⊕ XOR</p>
<p>It’s simply just a way of representing it. In C based programming languages they have the equivalent symbols which i’ve already written. When you’re drawing logic they have symbols as well:<br>
<img src="http://i1-news.softpedia-static.com/images/news2/How-Logic-Gates-Work-3.gif" alt width="400" height="400"></p>
<p>etc etc</p>
<p>XOR and NOR can be seen as “opposite” operations but are completely unrelated to addition and subtraction. Although the former is often used to implement <a href="http://en.wikipedia.org/wiki/Adder_(electronics)" data-bbcode="true">arithmetic operations</a> but you must remember that logical gates can be created using other gates since it’s cheaper to stick the same gate in mass numbers onto a chip.</p>
<p><a href="http://en.wikipedia.org/wiki/XOR_cipher" data-bbcode="true">XOR encryption</a> works on a verrrry simple principle:</p>
<p>plaintext ⊕ key = ciphertext<br>
ciphertext ⊕ key = plaintext</p>
<p>So the XOR function is used both to encrypt and decrypt.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/5</link>
        <pubDate>Tue, 18 Jun 2013 11:26:03 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-5</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@eXemplar eXemplar]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exemplar">@eXemplar</a> wrote:</p>
          <blockquote>
              <p>or is one or the other or both, xor is one or the other BUT NOT both, savvy ?</p>
<aside class="onebox wikipedia">
  <header class="source">
      <a href="https://en.wikipedia.org/wiki/Bitwise_operation" target="_blank" rel="nofollow noopener">en.wikipedia.org</a>
  </header>
  <article class="onebox-body">
    <div class="aspect-image" style="--aspect-ratio:150/100;"><img src="//upload.wikimedia.org/wikipedia/commons/thumb/5/5c/Rotate_left_logically.svg/150px-Rotate_left_logically.svg.png" class="thumbnail"></div>

<h3><a href="https://en.wikipedia.org/wiki/Bitwise_operation" target="_blank" rel="nofollow noopener">Bitwise operation</a></h3>

<p>In digital computer programming, a bitwise operation operates on one or more bit patterns or binary numerals at the level of their individual bits. It is a fast, simple action directly supported by the processor, and is used to manipulate values for comparisons and calculations. On simple low-cost processors, typically, bitwise operations are substantially faster than division, several times faster than multiplication, and sometimes significantly faster than addition. While modern processors usua...</p>

  </article>
  <div class="onebox-metadata">
    
    
  </div>
  <div style="clear: both"></div>
</aside>

<p>Just go to the operation you want and click on the specific article, should have info as to what the operations are used for.</p>
<p>also fatcookies smells</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/4</link>
        <pubDate>Tue, 18 Jun 2013 11:24:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-4</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>I want your brain.</p>
<p>One thing I don’t understand is what are can they be used for instance applications? All I was told/could think of was streams, encryption and security?</p>
<p>e.g. encryption? hashing…?<br>
password ^ rand = output (for example) then on the other side: output <span class="bbcode-b">v</span> rand = password : (password ^ [rand]) v [rand] == pasword (crap security example!)<br>
I though <span class="bbcode-b">v</span> was the sign for OR, or | just being the C operator? I might be confusing myself with NOT lol?</p>
<p>OR being opposite or XOR? More or less XOR being used to subtract and OR being used for addition (prob’s more to it ofc)</p>
<p>^ I’m confusing myself lmao only just I got 2 different answers to the question</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/3</link>
        <pubDate>Mon, 17 Jun 2013 21:02:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-3</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>k boolean algebra is just algebra involving binary and logic gates.</p>
<p>Binary representation is just numerical base 2. For the purposes of boolean algebra we see 1 = true and 0 = false.</p>
<p>There are four main gates:<br>
NOT<br>
AND<br>
OR<br>
XOR</p>
<p>They simply are operations you can do on binary patterns. To start off, lets just think about 1 bit, a 1 or a 0.</p>
<p>NOT inverts the input so:<br>
NOT 1 = 0<br>
NOT 0 = 1<br>
And that’s all.</p>
<p>AND will simply return true if BOTH inputs are true therefore:<br>
1 AND 1 = 1</p>
<p>and any other combination will return 0 eg:<br>
0 AND 0 = 0<br>
0 AND 1 = 0<br>
1 AND 0 = 0</p>
<p>OR returns true if either or both inputs are true.<br>
0 OR 0 = 0 (neither are true, so result is false)<br>
1 OR 0 = 1<br>
0 OR 1 = 1<br>
1 OR 1 = 1 (both are true, and since OR is INCLUSIVE, the result is true)</p>
<p>XOR returns true if one of the inputs is true and only one. It’s EXCLUSIVE or.<br>
0 XOR 0 = 0<br>
1 XOR 0 = 1<br>
0 XOR 1 = 1<br>
1 XOR 1 = 0 (This is the important “exclusive part”, and differentiates this function from OR)</p>
<p>NAND, NOR and XNOR are essentially two gates stuck together, one of after the other.<br>
NAND will “do” an AND operation and then a NOT operation afterwards.<br>
NOR will do OR and then NOT.<br>
XNOR will do XOR and then NOT.</p>
<p>So eg the truth table for XNOR would be:</p>
<p>0 XNOR 0 = 1<br>
1 XNOR 0 = 0<br>
0 XNOR 1 = 0<br>
1 XNOR 1 = 1</p>
<p>Notice that the result is just the opposite of the XOR table, since XNOR is just XOR followed by the NOT function.</p>
<p>All these functions can be extended to several bits, bytes, words etc. eg: if you did:<br>
NOT 0000<br>
you would simply apply the operation to each bit individually and just put the result back together so in this case the result would just be:<br>
NOT 0000 = 1111</p>
<p>Similarly if you do:<br>
1010 AND<br>
0010<br>
=0010<br>
(made that vertical just to make it more clear that the operation is just done on each bit individually.</p>
<p>In C based language the bitwise operators are as follows:<br>
~  NOT<br>
&amp;  AND<br>
|   OR<br>
^  XOR</p>
<p>And if you do want to produce the effects of NAND, NOR or XNOR you would just place the operators in appropriate places so they are evaluated one after the other.</p>
<p>Another two operators you should be familiar with are bitshifts.<br>
&lt;&lt;</p>
<blockquote>
<blockquote></blockquote>
</blockquote>
<p>They “shift” bits x number of places to whichever direction you point the pointy brackets towards <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
Suppose we shift the binary number:</p>
<p>1101 1000</p>
<p>2 places to the right (&gt;&gt; 2). So the operation is:</p>
<p>1101 1000 &gt;&gt; 2<br>
=0011 0110</p>
<p>As you can see the first two 1’s have moved two places the right. The empty space (the first two bits) are simply padded with 0’s.</p>
<p>Practical uses?<br>
Well you can pack data together and extract it using bitwise operators and just general neat tricks such as <a href="http://en.wikipedia.org/wiki/XOR_swap_algorithm" data-bbcode="true">swapping two variables without a temporary variable</a>. Bit shifts can also be used to multiply and divide numbers by powers of 2 (I wont go into detail about this, but if you know how binary works, i’m sure you’d get it).</p>
<p>derp</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/2</link>
        <pubDate>Mon, 17 Jun 2013 20:06:50 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-2</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
      <item>
        <title>Logic gates; bitwise operators? boolean algebra?</title>
        <dc:creator><![CDATA[@Ashi Ashi]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ashi">@Ashi</a> wrote:</p>
          <blockquote>
              <p>Could somebody give me some in depth explanations or links for some of the expressions because they’re completely mind loveing me lol.</p>
<p>I got a slight idea of XOR, OR from eyeownyew but I need to understand how they’re used, uses, what they do etc.<br>
Other gates such as<br>
NOR, XNOR, NAND <span class="bbcode-b">etc </span>I really have no idea what they are <img src="https://forum.moparisthebest.com/images/emoji/twitter/frowning.png?v=5" title=":frowning:" class="emoji" alt=":frowning:"></p>
<p>PS: I am a total NOOB at computer science and pretty much need a spoonfeed :S<br>
I don’t know binary very well but I’ll get into learning it’s extents soon enough.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008/1</link>
        <pubDate>Mon, 17 Jun 2013 16:40:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-522008-1</guid>
        <source url="https://forum.moparisthebest.com/t/logic-gates-bitwise-operators-boolean-algebra/522008.rss">Logic gates; bitwise operators? boolean algebra?</source>
      </item>
  </channel>
</rss>
