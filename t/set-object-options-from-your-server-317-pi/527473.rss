<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Set object options from your server[317][PI]</title>
    <link>https://forum.moparisthebest.com/t/set-object-options-from-your-server-317-pi/527473</link>
    <description>--FINISHED-- kind of?
[b]Purpose[/b]: Allow server to tell Client object commands :P (Allows for changing them live in game)
Can give your server an added advantage by randomizing which option the player has to click to &quot;thief&quot; or whatever.
[b]Difficulty[/b]: 6/10 (C&amp;P), but i am a crappy tut-maker :\

[center][size=14pt]Process[/size][/center]
Step 1: Pick your packet
Knowing not many people have added packets to their server this should be rather simple, use the same one i did. 
Step 2: Push your packet.
Server side: add the method.
[code]    public void setObjectAction(int objectID,int slot,String action) {

        outStream.createFrameVarSize(127);
        outStream.writeByte(slot);
        outStream.writeWord(objectID);
        outStream.writeString(action);
        outStream.endFrameVarSize();
    }[/code]
The first line is the frame, i chose 127. I did this because frame 126 is the one that sets interface text, so i grouped similarities.
It is variable size due to the string will not always be the same length.
Second Line: writes the slot (0-4) that the object will take.
Third Line: write objectID, of which you replace command of.
forth line: the actual &quot;action&quot; that it wants to know.
fifth line: This line ends the frame by writing the size to the allotted spot.(Set by createFrameVarSize
and outStream is the stream that sends data from the server to the client.

Step 3: Parse your packet
Client sided:
open client.java and search for:
[code](pktType == 126)[/code]
after the if-statement add this:
[code]			if (pktType == 127) {
				int slot = inStream.readSignedByte();
				int objectID = inStream.readUnsignedWord();
				String newCmd = inStream.readString();
				if (newCmd.length()==0)
					newCmd = null;
				ObjectDef.setOption(objectID,slot,newCmd);
				pktType = -1;
				return true;
			}[/code]
The only thing in this that should interest you should be ObjectDef.setOption, because everything else is just reading from the server(what you wrote)
Now you need to add another thing, dont worry were almost done :P

open up your ObjectDef class and add this:
[code]	public static java.util.HashMap&lt;String,String[]&gt; customCommands = new java.util.HashMap();
	public static void setOption(int obj,int slot,String cmd) {
		if (slot &gt;=0&amp;&amp;slot&lt;=4) {
		ObjectDef item = forID(obj);
		String[] actions = item.actions;
		if (actions==null)
			actions = new String[]{null,null,null,null,null};
		actions[slot] = cmd;
		customCommands.put(obj+&quot;&quot;,actions);
		}
	}[/code]
The HashMap is the code that stores your commands, but first it checks if commands exist, if they do it uses them. 
[[PLEASE IF YOU HAVE A BETTER METHOD OF ADDING THIS TELL ME OR POST]]
and in your forID( method (also in ObjectDef) after the .readValues(stream) make it look something like this:
[code]	public static ObjectDef forID(int i)
	{
		for(int j = 0; j &lt; 20; j++)
			if(cache[j].type == i)
				return cache[j];

		cacheIndex = (cacheIndex + 1) % 20;
		ObjectDef class46 = cache[cacheIndex];
		stream.currentOffset = streamIndices[i];
		class46.type = i;
		class46.setDefaults();
		class46.readValues(stream);
		if (customCommands.get(i+&quot;&quot;)!=null)
		class46.actions = (String[])customCommands.get(i+&quot;&quot;);
		return class46;
	}[/code]
The reason i convert it to a string is because you cannot use an int as a key. or i would.

ONE LAST THING. HOPEFULLY NO ERRORS YET :P
Client Side:
Tell the client how to read the packet. We do this by telling it how to find the length of the packet using the packetSizes array.



in
SizeConstants
find
[code]	public static final int[] packetSizes = {

[/code]
If you are using the same packet as i am then Simply change the 128th array item to -1;
-1 lets the client know that the packet being read has a variable length, stored in a byte.
mine looks like this:
&lt;blockquote&gt;public static final int[] packetSizes = {
		0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, -2, 4, 3, 0, 0, 0, 
		0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 
		9, 0, 0, -2, 0, 0, 0, 0, 0, 0, 
		-2, 1, 0, 0, 2, -2, 0, 0, 0, 0, 
		6, 3, 2, 4, 2, 4, 0, 0, 0, 4, 
		0, -2, 0, 0, 7, 2, 0, 6, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 
		0, 2, 0, 0, -1, 4, 1, 0, 0, 0, 
		1, 0, 0, 0, 2, 0, 0, 15, 0, 0, 
		0, 4, 4, 0, 0, 0, -2, -1, 0, 0, 
		0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 
		0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 
		0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 
		4, 0, 0, 0, 2, 0, 6, 0, 0, 0, 
		0, 3, 0, 0, 5, 0, 10, 6, 0, 0, 
		0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 
		4, 0, 0, 0, 0, 0, 3, 0, 2, 0, 
		0, 0, 0, 0, -2, 7, 0, 0, 2, 0, 
		0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
		8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		2, -2, 0, 0, 0, 0, 6, 0, 4, 3, 
		0, 0, 0, -1, 6, 0, 0
	};&lt;/blockquote&gt;
The red value is the 128th item, (packet 127-because it starts at 0)</description>
    
    <lastBuildDate>Wed, 07 Aug 2013 07:06:59 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/set-object-options-from-your-server-317-pi/527473.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Set object options from your server[317][PI]</title>
        <dc:creator><![CDATA[@matzie matzie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/matzie">@matzie</a> wrote:</p>
          <blockquote>
              <p>–FINISHED-- kind of?<br>
<span class="bbcode-b">Purpose</span>: Allow server to tell Client object commands <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"> (Allows for changing them live in game)<br>
Can give your server an added advantage by randomizing which option the player has to click to “thief” or whatever.<br>
<span class="bbcode-b">Difficulty</span>: 6/10 (C&amp;P), but i am a crappy tut-maker :\</p>
<p>[center][size=14pt]Process[/size][/center]<br>
Step 1: Pick your packet<br>
Knowing not many people have added packets to their server this should be rather simple, use the same one i did.<br>
Step 2: Push your packet.<br>
Server side: add the method.</p>
<p>[code]    public void setObjectAction(int objectID,int slot,String action) {</p>
<pre><code>    outStream.createFrameVarSize(127);
    outStream.writeByte(slot);
    outStream.writeWord(objectID);
    outStream.writeString(action);
    outStream.endFrameVarSize();
}[/code]
</code></pre>
<p>The first line is the frame, i chose 127. I did this because frame 126 is the one that sets interface text, so i grouped similarities.<br>
It is variable size due to the string will not always be the same length.<br>
Second Line: writes the slot (0-4) that the object will take.<br>
Third Line: write objectID, of which you replace command of.<br>
forth line: the actual “action” that it wants to know.<br>
fifth line: This line ends the frame by writing the size to the allotted spot.(Set by createFrameVarSize<br>
and outStream is the stream that sends data from the server to the client.</p>
<p>Step 3: Parse your packet<br>
Client sided:<br>
open client.java and search for:</p>
<pre><code class="lang-auto"></code></pre>
<p>after the if-statement add this:</p>
<p><code>			if (pktType == 127) {
				int slot = inStream.readSignedByte();
				int objectID = inStream.readUnsignedWord();
				String newCmd = inStream.readString();
				if (newCmd.length()==0)
					newCmd = null;
				ObjectDef.setOption(objectID,slot,newCmd);
				pktType = -1;
				return true;
			}</code><br>
The only thing in this that should interest you should be ObjectDef.setOption, because everything else is just reading from the server(what you wrote)<br>
Now you need to add another thing, dont worry were almost done <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
<p>open up your ObjectDef class and add this:</p>
<p><code>	public static java.util.HashMap&lt;String,String[]&gt; customCommands = new java.util.HashMap();
	public static void setOption(int obj,int slot,String cmd) {
		if (slot &gt;=0&amp;&amp;slot&lt;=4) {
		ObjectDef item = forID(obj);
		String[] actions = item.actions;
		if (actions==null)
			actions = new String[]{null,null,null,null,null};
		actions[slot] = cmd;
		customCommands.put(obj+"",actions);
		}
	}</code><br>
The HashMap is the code that stores your commands, but first it checks if commands exist, if they do it uses them.<br>
[[PLEASE IF YOU HAVE A BETTER METHOD OF ADDING THIS TELL ME OR POST]]<br>
and in your forID( method (also in ObjectDef) after the .readValues(stream) make it look something like this:</p>
<p>[code]	public static ObjectDef forID(int i)<br>
{<br>
for(int j = 0; j &lt; 20; j++)<br>
if(cache[j].type == i)<br>
return cache[j];</p>
<pre><code>	cacheIndex = (cacheIndex + 1) % 20;
	ObjectDef class46 = cache[cacheIndex];
	stream.currentOffset = streamIndices[i];
	class46.type = i;
	class46.setDefaults();
	class46.readValues(stream);
	if (customCommands.get(i+"")!=null)
	class46.actions = (String[])customCommands.get(i+"");
	return class46;
}[/code]
</code></pre>
<p>The reason i convert it to a string is because you cannot use an int as a key. or i would.</p>
<p>ONE LAST THING. HOPEFULLY NO ERRORS YET <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=5" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"><br>
Client Side:<br>
Tell the client how to read the packet. We do this by telling it how to find the length of the packet using the packetSizes array.</p>
<p>in<br>
SizeConstants<br>
find</p>
<p>[code]	public static final int[] packetSizes = {</p>
<p>[/code]<br>
If you are using the same packet as i am then Simply change the 128th array item to -1;<br>
-1 lets the client know that the packet being read has a variable length, stored in a byte.<br>
mine looks like this:</p>
<blockquote>public static final int[] packetSizes = {
		0, 0, 0, 0, 6, 0, 0, 0, 4, 0, 
		0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
		0, 0, 0, 0, -2, 4, 3, 0, 0, 0, 
		0, 0, 0, 0, 5, 0, 0, 6, 0, 0, 
		9, 0, 0, -2, 0, 0, 0, 0, 0, 0, 
		-2, 1, 0, 0, 2, -2, 0, 0, 0, 0, 
		6, 3, 2, 4, 2, 4, 0, 0, 0, 4, 
		0, -2, 0, 0, 7, 2, 0, 6, 0, 0, 
		0, 0, 0, 0, 0, 0, 0, 2, 0, 1, 
		0, 2, 0, 0, -1, 4, 1, 0, 0, 0, 
		1, 0, 0, 0, 2, 0, 0, 15, 0, 0, 
		0, 4, 4, 0, 0, 0, -2, -1, 0, 0, 
		0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 
		0, 0, 2, 0, 0, 0, 0, 14, 0, 0, 
		0, 4, 0, 0, 0, 0, 3, 0, 0, 0, 
		4, 0, 0, 0, 2, 0, 6, 0, 0, 0, 
		0, 3, 0, 0, 5, 0, 10, 6, 0, 0, 
		0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 
		0, 0, 0, 0, 0, 0, -1, 0, 0, 0, 
		4, 0, 0, 0, 0, 0, 3, 0, 2, 0, 
		0, 0, 0, 0, -2, 7, 0, 0, 2, 0, 
		0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 
		8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
		2, -2, 0, 0, 0, 0, 6, 0, 4, 3, 
		0, 0, 0, -1, 6, 0, 0
	};</blockquote>
The red value is the 128th item, (packet 127-because it starts at 0)
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/set-object-options-from-your-server-317-pi/527473/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/set-object-options-from-your-server-317-pi/527473/1</link>
        <pubDate>Wed, 07 Aug 2013 07:06:59 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-527473-1</guid>
        <source url="https://forum.moparisthebest.com/t/set-object-options-from-your-server-317-pi/527473.rss">Set object options from your server[317][PI]</source>
      </item>
  </channel>
</rss>
