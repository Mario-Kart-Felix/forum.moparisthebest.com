<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Fletching making x5 x10 work</title>
    <link>https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073</link>
    <description>my classes below


fletch.java

[code]package server.model.players.skills;

import server.model.players.Client;

public class Fletching {

	Client c;

	public boolean fletching;

	public Fletching(Client c) {
		this.c = c;
	}

	private enum Arrows {
		HEADLESS(52, 314, 53, 15, 1),
		BRONZE(53, 39, 882, 40, 1),
		IRON(53, 40, 884, 58, 15),
		STEEL(53, 41, 886, 95, 30),
		MITHRIL(53, 42, 888, 132, 45),
		ADAMANT(53, 43, 890, 170, 60),
		RUNE(53, 44, 892, 207, 75);

		public int item1, item2, outcome, xp, levelReq;
		private Arrows(int item1, int item2, int outcome, int xp, int levelReq) {
			this.item1 = item1;
			this.item2 = item2;
			this.outcome = outcome;
			this.xp = xp;
			this.levelReq = levelReq;
		}
		public int getItem1() {
			return item1;
		}

		public int getItem2() {
			return item2;
		}

		public int getOutcome() {
			return outcome;
		}

		public int getXp() {
			return xp;
		}

		public int getLevelReq() {
			return levelReq;
		}
	}

	private Arrows forArrow(int id) {
		for (Arrows ar : Arrows.values()) {
			if (ar.getItem2() == id) {
				return ar;
			}
		}
		return null;
	}

	public int getPrimary(int item1, int item2) {
		return item1 == 52 || item1 == 53 ? item2 : item1;
	}

	public void makeArrows(int item1, int item2) {
		Arrows arr = forArrow(getPrimary(item1, item2));
		if (arr != null) {
			if (c.playerLevel[c.playerFletching] &gt;= arr.getLevelReq()) {
				System.out.println(arr.getItem1()+&quot;, &quot;+ c.getItems().getItemCount(arr.getItem1()));
				System.out.println(arr.getItem2()+&quot;, &quot;+ c.getItems().getItemCount(arr.getItem2()));
				if (c.getItems().getItemCount(arr.getItem1()) &gt;= 15 &amp;&amp; c.getItems().getItemCount(arr.getItem2()) &gt;= 15) {
					c.getItems().deleteItem(arr.getItem1(), c.getItems().getItemSlot(arr.getItem1()), 15); 
					c.getItems().deleteItem(arr.getItem2(), c.getItems().getItemSlot(arr.getItem2()), 15);
					c.getItems().addItem(arr.getOutcome(), 15);
					c.getPA().addSkillXP(arr.getXp(), c.playerFletching);
				} else {
					System.out.println(&quot;1&quot;);
					c.sendMessage(&quot;You must have at least 15 of each supply to make arrows!&quot;);
				}
			} else {
				System.out.println(&quot;2&quot;);
				c.sendMessage(&quot;You need a fletching level of &quot;+arr.getLevelReq()+&quot; to fletch this.&quot;);
			}
		}
	}
	private enum Fletch {

		ARROWSHAFTS(1511, 52, 5, 15),

		SHORTBOW(1511, 841, 5, 5),
		LONGBOW(1511, 839, 10, 10),

		OAKSBOW(1521, 843, 17, 20),
		OAKLBOW(1521, 845, 25, 25),

		WILLOWSBOW(1519, 849, 34, 35),
		WILLOWLBOW(1519, 847, 42, 40),

		MAPLESBOW(1517, 853, 50, 50),
		MAPLELBOW(1517, 851, 59, 55),

		YEWSBOW(1515, 857, 68, 65),
		YEWLBOW(1515, 855, 75, 70),

		MAGICSBOW(1513, 861, 84, 80),
		MAGICLBOW(1513, 859, 92, 87);

		public int logID, unstrungBow, xp, levelReq;

		private Fletch(int logID, int unstrungBow, int xp, int levelReq) {
			this.logID = logID;
			this.unstrungBow = unstrungBow;
			this.xp = xp;
			this.levelReq = levelReq;
		}

		public int getLogID() {
			return logID;
		}

		public int getBowID() {
			return unstrungBow;
		}

		public int getXp() {
			return xp;
		}

		public int getLevelReq() {
			return levelReq;
		}
	}

	private Fletch forBow(int id) {
		for (Fletch fl : Fletch.values()) {
			if (fl.getBowID() == id) {
				return fl;
			}
		}
		return null;
	}
	public void handleLog(int item1, int item2) {
		openFletching((item1 == 946) ? item2 : item1);
	}

	private void resetFletching() {
		fletching = false;
		c.log = -1;
	}

	public void handleFletchingClick(int abutton) {
		switch (abutton) {
		case 34185:
			switch (c.log) {
			case 1511: //Normal log
				fletchBow(841);
				break;
			case 1521: //Oak log
				fletchBow(843);
				break;
			case 1519: //Willow log
				fletchBow(849);
				break;
			case 1517: //Maple log
				fletchBow(853);
				break;
			case 1515: //Yew log
				fletchBow(857);
				break;
			case 1513: //Magic logs
				fletchBow(861);
				break;
			}
			break;
		case 34189:
			switch (c.log) {
			case 1511: //Normal log
				fletchBow(839);
				break;
			case 1521: //Oak log
				fletchBow(845);
				break;
			case 1519: //Willow log
				fletchBow(847);
				break;
			case 1517: //Maple log
				fletchBow(851);
				break;
			case 1515: //Yew log
				fletchBow(855);
				break;
			case 1513: //Magic logs
				fletchBow(859);
				break;
			}
			break;
		case 34193: //Arrow shafts
			fletchBow(52);
			c.startAnimation(1248);
			break;
		}
	}

	public void fletchBow(int id) {
		Fletch fle = forBow(id);
		if (fle != null) {
			if (id == 52) {
				int[] logArray = {1511, 1521, 1519, 1517, 1515, 1513};
				for (int i = 0; i &lt; logArray.length; i++)
					if (c.getItems().playerHasItem(logArray[i])) {
						c.getItems().deleteItem(logArray[i], c.getItems().getItemSlot(logArray[i]), 1);
						c.getItems().addItem(fle.getBowID(), 15);
						c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
						return;
					}
			} else {
				if (c.getItems().playerHasItem(fle.getLogID())) {
					if (c.playerLevel[c.playerFletching] &gt;= fle.getLevelReq()) {
						c.getItems().deleteItem(fle.getLogID(), c.getItems().getItemSlot(fle.getLogID()), 1);
						c.getItems().addItem(fle.getBowID(), 1);
						c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
						c.startAnimation(1248);
					} else {
						c.sendMessage(&quot;You need a fletching level of at least&quot; +fle.getLevelReq()+&quot; to cut this log.&quot;);
					}
				} 
			}
					
			resetFletching();
			c.getPA().removeAllWindows();
		}
	}
	
	
	c.getPA().removeAllWindows();
	
	
	
	int[][] ifItems = {
			{1511, 839, 841},
			{1521, 845, 843},
			{1519, 847, 849},
			{1517, 851, 853},
			{1515, 855, 857},
			{1513, 859, 861}
	};

	public void openFletching(int item) {
		for (int i = 0; i &lt; ifItems.length; i++) {
			if (ifItems[i][0] == item) {
				c.getPA().sendFrame164(8880);
				c.getPA().sendFrame126(&quot;What would you like to make?&quot;, 8879);
				c.getPA().sendFrame246(8884, 250, ifItems[i][1]); // middle
				c.getPA().sendFrame246(8883, 250, ifItems[i][2]); // left picture
				c.getPA().sendFrame246(8885, 250, 52); // right pic
				c.getPA().sendFrame126(&quot;Shortbow&quot;, 8889);
				c.getPA().sendFrame126(&quot;Longbow&quot;, 8893);
				c.getPA().sendFrame126(&quot;Arrow Shafts&quot;, 8897);
			}
		}
		c.log = item;
		fletching = true;
	}
}[/code]



clicking buttons


[code]case 34185: case 34184: case 34183: case 34182: case 34189: case 34188: case 34187: case 34186: case 34193: case 34192: case 34191: case 34190:
				if (c.craftingLeather)
					c.getCrafting().handleCraftingClick(actionButtonId);
				if (c.getFletching().fletching)
					c.getFletching().handleFletchingClick(actionButtonId);
			break;[/code]


How can I add x5 and x10</description>
    
    <lastBuildDate>Tue, 19 Aug 2014 20:22:25 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Fletching making x5 x10 work</title>
        <dc:creator><![CDATA[@sk8rdude461 sk8rdude461]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/sk8rdude461">@sk8rdude461</a> wrote:</p>
          <blockquote>
              <p>So I played with your Arrow enum a bit. Read my couple of comments for a bit of advice.</p>
<p>[code=java]package server.model.players.skills;</p>
<p>import server.model.players.Client;</p>
<p>public class Fletching {</p>
<pre><code>Client c;

private boolean isFletching;
private static int HEADLESS_ARROW = 52;
private static int ARROW_SHAFT = 53;

public Fletching(Client c) {
	this.c = c;
}

/* Renamed some of your variables, for readability (imo)
 * HEADLESS arrow making data was incorrect. You were attempting
 * to make arrow shafts out of headless arrows. It's the other way around.
 * I also added 2 constants as you can tell.
 */
private enum ArrowData {
	HEADLESS(ARROW_SHAFT, 314, HEADLESS_ARROW, 15, 1),
	BRONZE(HEADLESS_ARROW, 39, 882, 40, 1),
	IRON(HEADLESS_ARROW, 40, 884, 58, 15),
	STEEL(HEADLESS_ARROW, 41, 886, 95, 30),
	MITHRIL(HEADLESS_ARROW, 42, 888, 132, 45),
	ADAMANT(HEADLESS_ARROW, 43, 890, 170, 60),
	RUNE(HEADLESS_ARROW, 44, 892, 207, 75);
	
	// Never use numbers in variable names, there are very rare exceptions to this.
	private int itemUsed, usedWith, itemMade, xpGained, levelReq;
	
	/*
	 * Added setters with your getters. No real reason.
	 * Made your variables private, as they don't need to be accessed by anything besides the enum itself,
	 * that's what the getters are for
	 */
	private ArrowData(int itemUsed, int usedWith, int itemMade, int xpGained, int levelReq) {
		this.setItemUsed(itemUsed);
		this.setUsedWith(usedWith);
		this.setItemMade(itemMade);
		this.setXpGained(xpGained);
		this.setLevelReq(levelReq);
	}
	
	public void setItemUsed(int itemUsed) {
		this.itemUsed = itemUsed;
	}

	public void setUsedWith(int usedWith) {
		this.usedWith = usedWith;
	}

	public void setItemMade(int itemMade) {
		this.itemMade = itemMade;
	}

	public void setXp(int xpGained) {
		this.xpGained = xpGained;
	}

	public void setLevelReq(int levelReq) {
		this.levelReq = levelReq;
	}
	
	public int getItemUsed() {
		return itemUsed;
	}

	public int getUsedWith() {
		return usedWith;
	}

	public int getItemMade() {
		return itemMade;
	}

	public int getXpGained() {
		return xpGained;
	}

	public int getLevelReq() {
		return levelReq;
	}
}

private ArrowData forArrow(int id) {
	for (ArrowData a : ArrowData.values()) {
		if (a.getItemUsed == id) {
			return ar;
		}
	}
	return null;
}

public int getPrimary(int itemUsed, int itemUsedWith) {
	return itemUsed == 52 || itemUsed == 53 ? itemUsedWith : itemUsed;
}


/*
 * I renamed some variables and removed your nested if statements.
 * I also added an "amountToMake" variable which would be used in the
 * bank item packets. You should add an event that would loop as long as
 * another variable wasn't equal to how much they requested to make,
 * don't forget to check the player has the needed supplies EACH TIME
 * the event is executed otherwise they could get free arrows and XP.
 * NOTE: You might get an error with: ItemAssistant.getItemName
 */
public void makeArrows(int itemUsed, int usedWith, int amountToMake) {
	ArrowData arrow = forArrow(getPrimary(itemUsed, usedWith));
	
	if(arrow == null)
		return;
		
	if (c.playerLevel[c.playerFletching] &gt;= arr.getLevelReq()) {
		c.sendMessage("You need a fletching level of " + arr.getLevelReq() + " to make " +
			ItemAssistant.getItemName(arr.getItemMade()) + ".");
		return;
	}
	// You should add the event right about here or below the following if statement.
	
	if (c.getItems().getItemCount(arr.getItemUsed()) &lt; 15 || c.getItems().getItemCount(arr.getUsedWith()) &lt; 15) {
			c.sendMessage("You must have at least 15 of each supply to make arrows!");
			return;
	}
	// This will be executed EVERY time the player successfully makes an arrow or headless arrow.
	c.getItems().deleteItem(arr.getItemUsed(), c.getItems().getItemSlot(arr.getItemUsed()), 15); 
	c.getItems().deleteItem(arr.getUsedWith(), c.getItems().getItemSlot(arr.getItemUsed()), 15);
	c.getItems().addItem(arr.getItemMade(), 15);
	c.getPA().addSkillXP(arr.getXpGained(), c.playerFletching);
	c.sendMessage("You fletched a " + ItemAssistant.getItemName(arr.getItemMade()) + ".");
}

private enum Fletch {

	ARROWSHAFTS(1511, 52, 5, 15),

	SHORTBOW(1511, 841, 5, 5),
	LONGBOW(1511, 839, 10, 10),

	OAKSBOW(1521, 843, 17, 20),
	OAKLBOW(1521, 845, 25, 25),

	WILLOWSBOW(1519, 849, 34, 35),
	WILLOWLBOW(1519, 847, 42, 40),

	MAPLESBOW(1517, 853, 50, 50),
	MAPLELBOW(1517, 851, 59, 55),

	YEWSBOW(1515, 857, 68, 65),
	YEWLBOW(1515, 855, 75, 70),

	MAGICSBOW(1513, 861, 84, 80),
	MAGICLBOW(1513, 859, 92, 87);

	public int logID, unstrungBow, xp, levelReq;

	private Fletch(int logID, int unstrungBow, int xp, int levelReq) {
		this.logID = logID;
		this.unstrungBow = unstrungBow;
		this.xp = xp;
		this.levelReq = levelReq;
	}

	public int getLogID() {
		return logID;
	}

	public int getBowID() {
		return unstrungBow;
	}

	public int getXp() {
		return xp;
	}

	public int getLevelReq() {
		return levelReq;
	}
}

private Fletch forBow(int id) {
	for (Fletch fl : Fletch.values()) {
		if (fl.getBowID() == id) {
			return fl;
		}
	}
	return null;
}
public void handleLog(int item1, int item2) {
	openFletching((item1 == 946) ? item2 : item1);
}

private void resetFletching() {
	c.getFletching.isFletching = false;
	c.log = -1;
}

public void handleFletchingClick(int abutton) {
	switch (abutton) {
	case 34185:
		switch (c.log) {
		case 1511: //Normal log
			fletchBow(841);
			break;
		case 1521: //Oak log
			fletchBow(843);
			break;
		case 1519: //Willow log
			fletchBow(849);
			break;
		case 1517: //Maple log
			fletchBow(853);
			break;
		case 1515: //Yew log
			fletchBow(857);
			break;
		case 1513: //Magic logs
			fletchBow(861);
			break;
		}
		break;
	case 34189:
		switch (c.log) {
		case 1511: //Normal log
			fletchBow(839);
			break;
		case 1521: //Oak log
			fletchBow(845);
			break;
		case 1519: //Willow log
			fletchBow(847);
			break;
		case 1517: //Maple log
			fletchBow(851);
			break;
		case 1515: //Yew log
			fletchBow(855);
			break;
		case 1513: //Magic logs
			fletchBow(859);
			break;
		}
		break;
	case 34193: //Arrow shafts
		fletchBow(52);
		c.startAnimation(1248);
		break;
	}
}

public void fletchBow(int id) {
	Fletch fle = forBow(id);
	if (fle != null) {
		if (id == 52) {
			int[] logArray = {1511, 1521, 1519, 1517, 1515, 1513};
			for (int i = 0; i &lt; logArray.length; i++)
				if (c.getItems().playerHasItem(logArray[i])) {
					c.getItems().deleteItem(logArray[i], c.getItems().getItemSlot(logArray[i]), 1);
					c.getItems().addItem(fle.getBowID(), 15);
					c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
					return;
				}
		} else {
			if (c.getItems().playerHasItem(fle.getLogID())) {
				if (c.playerLevel[c.playerFletching] &gt;= fle.getLevelReq()) {
					c.getItems().deleteItem(fle.getLogID(), c.getItems().getItemSlot(fle.getLogID()), 1);
					c.getItems().addItem(fle.getBowID(), 1);
					c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
					c.startAnimation(1248);
				} else {
					c.sendMessage("You need a fletching level of at least" +fle.getLevelReq()+" to cut this log.");
				}
			} 
		}
				
		resetFletching();
		c.getPA().removeAllWindows();
	}
}


c.getPA().removeAllWindows();



int[][] ifItems = {
		{1511, 839, 841},
		{1521, 845, 843},
		{1519, 847, 849},
		{1517, 851, 853},
		{1515, 855, 857},
		{1513, 859, 861}
};

public void openFletching(int item) {
	for (int i = 0; i &lt; ifItems.length; i++) {
		if (ifItems[i][0] == item) {
			c.getPA().sendFrame164(8880);
			c.getPA().sendFrame126("What would you like to make?", 8879);
			c.getPA().sendFrame246(8884, 250, ifItems[i][1]); // middle
			c.getPA().sendFrame246(8883, 250, ifItems[i][2]); // left picture
			c.getPA().sendFrame246(8885, 250, 52); // right pic
			c.getPA().sendFrame126("Shortbow", 8889);
			c.getPA().sendFrame126("Longbow", 8893);
			c.getPA().sendFrame126("Arrow Shafts", 8897);
		}
	}
	c.log = item;
	c.getFletching.isFletching = true;
}
</code></pre>
<p>}[/code]</p>
<p>There might be errors if you just copy-pasted this because I was editing in notepad++ and idk how you had it executing, so direct copy and paste may not be the best suggestion.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/3</link>
        <pubDate>Tue, 19 Aug 2014 20:22:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546073-3</guid>
        <source url="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073.rss">Fletching making x5 x10 work</source>
      </item>
      <item>
        <title>Fletching making x5 x10 work</title>
        <dc:creator><![CDATA[@zyle1992 Zymus]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/zyle1992">@zyle1992</a> wrote:</p>
          <blockquote>
              <p>Well, what are the “clicking buttons” ids of the make 5 and make 10. Then, if your current <span class="bbcode-b">large</span> case statement contains those two ids, remove them. Make another case statement for the 5 and 10. Something like:</p>
<pre><code class="lang-auto">case MAKE_5_ARROWS:
    Fletching.fletchArrows(player, 5);
    break;

case MAKE_10_ARROWS:
    Fletching.fletchArrows(player, 10);
    break;</code></pre>
<p>Then have something like</p>
<pre><code class="lang-auto">public static void fletchArrows(final Player player, final int amount) {
    if (player.getInventory().contains(LOGS, amount)) {
        final int featherAmount = ARROWS_PER_LOG * amount;
        if (player.getInventory().contains(FEATHERS, featherAmount)) {
            final int arrowTipAmount = ARROWS_PER_LOG * amount;
            if (player.getInventory.contains(ARROW_TIPS, arrowTipAmount)) {
                player.getInventory().remove(LOGS, amount);
                player.getInventory().remove(FEATHERS, featherAmount);
                player.getInventory().remove(ARROW_TIPS, arrowTipAmount);

                final int arrowAmount = ARROWS_PER_LOG * amount;
                player.getInventory().add(ARROWS, arrowAmount);
            }
            else {
                player.sendMessage("You do not have enough arrow tips.");
            }
        }
        else {
            player.sendMessage("You do not have enough feathers.");
        }
    }
    else {
        player.sendMessage("You do not have enough logs.");
    }
}

public static final int ARROWS_PER_LOG = 15;</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/2</link>
        <pubDate>Tue, 19 Aug 2014 09:23:14 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546073-2</guid>
        <source url="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073.rss">Fletching making x5 x10 work</source>
      </item>
      <item>
        <title>Fletching making x5 x10 work</title>
        <dc:creator><![CDATA[@I_Smoke_Kush I Smoke Kush]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/i_smoke_kush">@I_Smoke_Kush</a> wrote:</p>
          <blockquote>
              <p>my classes below</p>
<p>fletch.java</p>
<p>[code]package server.model.players.skills;</p>
<p>import server.model.players.Client;</p>
<p>public class Fletching {</p>
<pre><code>Client c;

public boolean fletching;

public Fletching(Client c) {
	this.c = c;
}

private enum Arrows {
	HEADLESS(52, 314, 53, 15, 1),
	BRONZE(53, 39, 882, 40, 1),
	IRON(53, 40, 884, 58, 15),
	STEEL(53, 41, 886, 95, 30),
	MITHRIL(53, 42, 888, 132, 45),
	ADAMANT(53, 43, 890, 170, 60),
	RUNE(53, 44, 892, 207, 75);

	public int item1, item2, outcome, xp, levelReq;
	private Arrows(int item1, int item2, int outcome, int xp, int levelReq) {
		this.item1 = item1;
		this.item2 = item2;
		this.outcome = outcome;
		this.xp = xp;
		this.levelReq = levelReq;
	}
	public int getItem1() {
		return item1;
	}

	public int getItem2() {
		return item2;
	}

	public int getOutcome() {
		return outcome;
	}

	public int getXp() {
		return xp;
	}

	public int getLevelReq() {
		return levelReq;
	}
}

private Arrows forArrow(int id) {
	for (Arrows ar : Arrows.values()) {
		if (ar.getItem2() == id) {
			return ar;
		}
	}
	return null;
}

public int getPrimary(int item1, int item2) {
	return item1 == 52 || item1 == 53 ? item2 : item1;
}

public void makeArrows(int item1, int item2) {
	Arrows arr = forArrow(getPrimary(item1, item2));
	if (arr != null) {
		if (c.playerLevel[c.playerFletching] &gt;= arr.getLevelReq()) {
			System.out.println(arr.getItem1()+", "+ c.getItems().getItemCount(arr.getItem1()));
			System.out.println(arr.getItem2()+", "+ c.getItems().getItemCount(arr.getItem2()));
			if (c.getItems().getItemCount(arr.getItem1()) &gt;= 15 &amp;&amp; c.getItems().getItemCount(arr.getItem2()) &gt;= 15) {
				c.getItems().deleteItem(arr.getItem1(), c.getItems().getItemSlot(arr.getItem1()), 15); 
				c.getItems().deleteItem(arr.getItem2(), c.getItems().getItemSlot(arr.getItem2()), 15);
				c.getItems().addItem(arr.getOutcome(), 15);
				c.getPA().addSkillXP(arr.getXp(), c.playerFletching);
			} else {
				System.out.println("1");
				c.sendMessage("You must have at least 15 of each supply to make arrows!");
			}
		} else {
			System.out.println("2");
			c.sendMessage("You need a fletching level of "+arr.getLevelReq()+" to fletch this.");
		}
	}
}
private enum Fletch {

	ARROWSHAFTS(1511, 52, 5, 15),

	SHORTBOW(1511, 841, 5, 5),
	LONGBOW(1511, 839, 10, 10),

	OAKSBOW(1521, 843, 17, 20),
	OAKLBOW(1521, 845, 25, 25),

	WILLOWSBOW(1519, 849, 34, 35),
	WILLOWLBOW(1519, 847, 42, 40),

	MAPLESBOW(1517, 853, 50, 50),
	MAPLELBOW(1517, 851, 59, 55),

	YEWSBOW(1515, 857, 68, 65),
	YEWLBOW(1515, 855, 75, 70),

	MAGICSBOW(1513, 861, 84, 80),
	MAGICLBOW(1513, 859, 92, 87);

	public int logID, unstrungBow, xp, levelReq;

	private Fletch(int logID, int unstrungBow, int xp, int levelReq) {
		this.logID = logID;
		this.unstrungBow = unstrungBow;
		this.xp = xp;
		this.levelReq = levelReq;
	}

	public int getLogID() {
		return logID;
	}

	public int getBowID() {
		return unstrungBow;
	}

	public int getXp() {
		return xp;
	}

	public int getLevelReq() {
		return levelReq;
	}
}

private Fletch forBow(int id) {
	for (Fletch fl : Fletch.values()) {
		if (fl.getBowID() == id) {
			return fl;
		}
	}
	return null;
}
public void handleLog(int item1, int item2) {
	openFletching((item1 == 946) ? item2 : item1);
}

private void resetFletching() {
	fletching = false;
	c.log = -1;
}

public void handleFletchingClick(int abutton) {
	switch (abutton) {
	case 34185:
		switch (c.log) {
		case 1511: //Normal log
			fletchBow(841);
			break;
		case 1521: //Oak log
			fletchBow(843);
			break;
		case 1519: //Willow log
			fletchBow(849);
			break;
		case 1517: //Maple log
			fletchBow(853);
			break;
		case 1515: //Yew log
			fletchBow(857);
			break;
		case 1513: //Magic logs
			fletchBow(861);
			break;
		}
		break;
	case 34189:
		switch (c.log) {
		case 1511: //Normal log
			fletchBow(839);
			break;
		case 1521: //Oak log
			fletchBow(845);
			break;
		case 1519: //Willow log
			fletchBow(847);
			break;
		case 1517: //Maple log
			fletchBow(851);
			break;
		case 1515: //Yew log
			fletchBow(855);
			break;
		case 1513: //Magic logs
			fletchBow(859);
			break;
		}
		break;
	case 34193: //Arrow shafts
		fletchBow(52);
		c.startAnimation(1248);
		break;
	}
}

public void fletchBow(int id) {
	Fletch fle = forBow(id);
	if (fle != null) {
		if (id == 52) {
			int[] logArray = {1511, 1521, 1519, 1517, 1515, 1513};
			for (int i = 0; i &lt; logArray.length; i++)
				if (c.getItems().playerHasItem(logArray[i])) {
					c.getItems().deleteItem(logArray[i], c.getItems().getItemSlot(logArray[i]), 1);
					c.getItems().addItem(fle.getBowID(), 15);
					c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
					return;
				}
		} else {
			if (c.getItems().playerHasItem(fle.getLogID())) {
				if (c.playerLevel[c.playerFletching] &gt;= fle.getLevelReq()) {
					c.getItems().deleteItem(fle.getLogID(), c.getItems().getItemSlot(fle.getLogID()), 1);
					c.getItems().addItem(fle.getBowID(), 1);
					c.getPA().addSkillXP(fle.getXp(), c.playerFletching);
					c.startAnimation(1248);
				} else {
					c.sendMessage("You need a fletching level of at least" +fle.getLevelReq()+" to cut this log.");
				}
			} 
		}
				
		resetFletching();
		c.getPA().removeAllWindows();
	}
}


c.getPA().removeAllWindows();



int[][] ifItems = {
		{1511, 839, 841},
		{1521, 845, 843},
		{1519, 847, 849},
		{1517, 851, 853},
		{1515, 855, 857},
		{1513, 859, 861}
};

public void openFletching(int item) {
	for (int i = 0; i &lt; ifItems.length; i++) {
		if (ifItems[i][0] == item) {
			c.getPA().sendFrame164(8880);
			c.getPA().sendFrame126("What would you like to make?", 8879);
			c.getPA().sendFrame246(8884, 250, ifItems[i][1]); // middle
			c.getPA().sendFrame246(8883, 250, ifItems[i][2]); // left picture
			c.getPA().sendFrame246(8885, 250, 52); // right pic
			c.getPA().sendFrame126("Shortbow", 8889);
			c.getPA().sendFrame126("Longbow", 8893);
			c.getPA().sendFrame126("Arrow Shafts", 8897);
		}
	}
	c.log = item;
	fletching = true;
}
</code></pre>
<p>}[/code]</p>
<p>clicking buttons</p>
<p><code>case 34185: case 34184: case 34183: case 34182: case 34189: case 34188: case 34187: case 34186: case 34193: case 34192: case 34191: case 34190:
				if (c.craftingLeather)
					c.getCrafting().handleCraftingClick(actionButtonId);
				if (c.getFletching().fletching)
					c.getFletching().handleFletchingClick(actionButtonId);
			break;</code></p>
<p>How can I add x5 and x10</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073/1</link>
        <pubDate>Tue, 19 Aug 2014 07:34:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-546073-1</guid>
        <source url="https://forum.moparisthebest.com/t/fletching-making-x5-x10-work/546073.rss">Fletching making x5 x10 work</source>
      </item>
  </channel>
</rss>
