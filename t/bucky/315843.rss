<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Bucky</title>
    <link>https://forum.moparisthebest.com/t/bucky/315843</link>
    <description>I&#39;ve followed some Java tutorials for some time now [http://www.youtube.com/user/thenewboston] And have been doing a series of his game development tuts[http://www.youtube.com/watch?v=c74DlUMbeZI&amp;feature=SeriesPlayList&amp;p=A331A6709F40B79D]. I have all the code, but when I run it, It just displays a white screen, and nothing else.

Bass.java[code]import java.awt.*;
import javax.swing.ImageIcon;
import javax.swing.JFrame;

public class Bass extends JFrame {
	public static void main(String[] args){
		Bass b = new Bass();
		b.run();
	}
	
	private Animation a;
	private ScreenManager s;
	private Image bg;
	private static final DisplayMode modes1[] = {
		new DisplayMode(800,600,32,0),
		new DisplayMode(800,600,24,0),
		new DisplayMode(800,600,16,0),
		new DisplayMode(640,480,32,0),
		new DisplayMode(640,480,24,0),
		new DisplayMode(640,480,16,0),
	};
	
	//load images and add scenes
	public void loadImages() {
		bg = new ImageIcon(&quot;C:\\Users\\Bass-Bounce\\Pictures\\Back.jpg&quot;).getImage();
		Image face1 = new ImageIcon(&quot;C:\\Users\\Bass-Bounce\\Pictures\\Face.png&quot;).getImage();
		Image face2 = new ImageIcon(&quot;C:\\Users\\Bass-Bounce\\Pictures\\Face2.png&quot;).getImage();
		
		a = new Animation();
		a.addScene(face1,250);
		a.addScene(face2,250);
	}
	
	//main method from main
	public void run() {
		s = new ScreenManager();
		try {
			DisplayMode dm = s.findFirstCompatibleMode(modes1);
			s.setFullScreen(dm);
			loadImages();
			movieLoop();
		} finally {
			s.restoreScreen();
		}
	}
	
	//movie loop
	public void movieLoop() {
		long startingTime = System.currentTimeMillis();
		long cumTime = startingTime;
		while (cumTime - startingTime &lt; 5000) {
			long timePassed = System.currentTimeMillis() - cumTime;
			cumTime += timePassed;
			a.update(timePassed);
			
			//draw and update screen
			Graphics2D g = s.getGraphics();
			draw(g);
			g.dispose();
			s.update();
			
			try {
				Thread.sleep(20);
			} catch (Exception ex) {}
		}
	}
	
	//draw graphics
	public void draw(Graphics g) {
		g.drawImage(bg,0,0,null);
		g.drawImage(a.getImage(),0,0,null);
	}
	
}
[/code]
Animation.java[code]import java.awt.Image;
import java.util.ArrayList;

public class Animation {
	
	private ArrayList scenes;
	private int sceneIndex;
	private long movieTime;
	private long totalTime;
	
	public Animation() {
		scenes = new ArrayList();
		totalTime = 0;
		start();
		
	}
	
	public synchronized void addScene(Image i, long t) {
		totalTime += t;
		scenes.add(new OneScene(i, totalTime));
	}
	
	public synchronized void start() {
		movieTime = 0;
		sceneIndex = 0;
	}
	
	public synchronized void update(long timePassed) {
		if(scenes.size() &gt; 1) {
			movieTime += timePassed;
			if(movieTime &gt;= totalTime) {
				movieTime = 0;
				sceneIndex = 0;
			}
			while(movieTime &gt; getScene(sceneIndex).endTime) {
				sceneIndex++;
			}
		}
	}
	
	public synchronized Image getImage() {
		if (scenes.size() == 0) {
			return null;
		} else {
			return getScene(sceneIndex).pic;
		}
	}
	
	private OneScene getScene(int x) {
		return (OneScene)scenes.get(x);
	}
	
	private class OneScene {
		Image pic;
		long endTime;
		
		public OneScene(Image pic, long endTime) {
			this.pic = pic;
			this.endTime = endTime;
		}
	}

}
[/code]
ScreenManager.java[code]import java.awt.*;
import java.awt.image.BufferedImage;
import java.awt.image.BufferStrategy;
import java.lang.reflect.InvocationTargetException;
import javax.swing.JFrame;

public class ScreenManager {
	
	private GraphicsDevice vc;
	
	//give vc access to monitor
	public ScreenManager() {
		GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
		vc = e.getDefaultScreenDevice();
	}
	
	//get all compatible DM&#39;s
	public DisplayMode[] getCompatibleDisplayModes() {
		return vc.getDisplayModes();
	}

	//compared Dm passed into VC, see if they match
	public DisplayMode findFirstCompatibleMode(DisplayMode modes[]) {
		DisplayMode goodModes[] = vc.getDisplayModes();
		for (int x = 0; x &lt; modes.length; x++) {
			for (int y = 0; y &lt; goodModes.length; y++) {
				if (displayModesMatch(modes[x], goodModes[y])) {
					return modes[x];
				}
			}
		}
		return null;
	}
	
	//get current DM
	public DisplayMode getCurrentDisplayMode() {
		return vc.getDisplayMode();
	}
	
	//check if 2 modes match
	public boolean displayModesMatch(DisplayMode m1, DisplayMode m2) {
		if (m1.getWidth() != m2.getWidth() || m1.getHeight() != m2.getHeight()) {
		return false;
		} 
		if (m1.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI &amp;&amp; m2.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI &amp;&amp; m1.getBitDepth() != m2.getBitDepth()) {
		return false;
		}
		if (m1.getRefreshRate() != DisplayMode.REFRESH_RATE_UNKNOWN &amp;&amp; m2.getRefreshRate() != DisplayMode.REFRESH_RATE_UNKNOWN &amp;&amp; m1.getRefreshRate() != m2.getRefreshRate()) {
		return false;
		}
		
		return true;
	}
	
	//make Fullscreen
	public void setFullScreen(DisplayMode dm) {
		JFrame f = new JFrame();
		f.setUndecorated(true);
		f.setIgnoreRepaint(true);
		f.setResizable(false);
		vc.setFullScreenWindow(f);
		
		if (dm != null &amp;&amp; vc.isDisplayChangeSupported()) {
			try {
				vc.setDisplayMode(dm);
			} catch (Exception ex){}
		}
		f.createBufferStrategy(2);
	}
	
	//set graphicsobject to this
	public Graphics2D getGraphics() {
		Window w = vc.getFullScreenWindow();
		if (w != null) {
			BufferStrategy s = w.getBufferStrategy();
			return (Graphics2D)s.getDrawGraphics();
		} else {
			return null;
		}
	}
	
	//updates display
	public void update() {
		Window w = vc.getFullScreenWindow();
		if (w != null) {
			BufferStrategy s = w.getBufferStrategy();
			if (s.contentsLost()) {
				s.show();
			}
		}
	}
	
	//returns full screen window
	public Window getFullScreenWindow() {
		return vc.getFullScreenWindow();
	}
	
	//get width of window
	public int getWidth() {
		Window w = vc.getFullScreenWindow();
		if (w != null) {
			return w.getWidth();
		} else {
			return 0;
		}
	}
	
	//get height of window
	public int getHeight() {
		Window w = vc.getFullScreenWindow();
		if (w != null) {
			return w.getWidth();
		} else {
			return 0;
		}
	}
	
	//get out of fs
	public void restoreScreen() {
		Window w = vc.getFullScreenWindow();
		if (w != null) {
			w.dispose();
		}
		vc.setFullScreenWindow(null);
	}
	
	//create image compatible with monitor[
	public BufferedImage createCompatibleImage(int w, int h, int t) {
		Window win = vc.getFullScreenWindow();
		if (win != null) {
			GraphicsConfiguration gc = win.getGraphicsConfiguration();
			return gc.createCompatibleImage(w,h,t);
		}
		return null;
	}
	
}[/code]

Any help?[br][br][size=1]Posted on: November 23, 2009, 11:42:40 am[/size][hr]Btw, using Eclipse.</description>
    
    <lastBuildDate>Mon, 23 Nov 2009 18:30:34 +0000</lastBuildDate>
    <category>General Discussion</category>
    <atom:link href="https://forum.moparisthebest.com/t/bucky/315843.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Bucky</title>
        <dc:creator><![CDATA[@_BBLLAARRGGHH __--BBLLAARRGGHH--__]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_bbllaarrgghh">@_BBLLAARRGGHH</a> wrote:</p>
          <blockquote>
              <p>I’ll try, but It worked with those directories before.[br][br][size=1]Posted on: November 23, 2009, 12:32:48 pm[/size][hr]Nope, still just does a white screen :\<br>
Images.java</p>
<p>[code]import java.awt.*;<br>
import javax.swing.ImageIcon;<br>
import javax.swing.JFrame;</p>
<p>public class Images extends JFrame {<br>
public static void main(String[] args){</p>
<pre><code>	DisplayMode dm = new DisplayMode(800,600,16, DisplayMode.REFRESH_RATE_UNKNOWN);
	Images i = new Images();
	i.run(dm);
}

private Screen s;
private Image bg;
private Image pic;
private boolean loaded;
	
public void run(DisplayMode dm) {
	setBackground(Color.PINK);
	setForeground(Color.WHITE);
	setFont(new Font("Arial", Font.PLAIN, 24));
	loaded = false;
	
	s = new Screen();
	try {
		s.setFullScreen(dm, this);
		loadpics();
		try{
			Thread.sleep(30000);
		} catch(Exception ex){}
	} finally {
		s.restoreScreen();
	}
}

public void loadpics() {
	bg = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Back.jpg").getImage();
	pic = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Face.png").getImage();
	loaded = true;
	repaint();
}

public void paint(Graphics g) {
	if (g instanceof Graphics2D) {
		Graphics2D g2 = (Graphics2D)g;
		g2.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING, RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
	}
	if(loaded) {
		g.drawImage(bg,0,0,null);
		g.drawImage(pic,170,180,null);
		g.drawImage(pic,370,180,null);
		g.drawImage(pic,170,380,null);
		g.drawImage(pic,370,380,null);
	}
}
</code></pre>
<p>}<br>
[/code]</p>
<p>This worked when I used it in an earlier tut.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bucky/315843/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bucky/315843/4</link>
        <pubDate>Mon, 23 Nov 2009 18:30:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-315843-4</guid>
        <source url="https://forum.moparisthebest.com/t/bucky/315843.rss">Bucky</source>
      </item>
      <item>
        <title>Bucky</title>
        <dc:creator><![CDATA[@ollie123 Ollie123]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ollie123">@ollie123</a> wrote:</p>
          <blockquote>
              <p>I can see some of this comes from “Developing Games in Java” by David Brackeen - I have that book :D. Anyway just do what Fat Cookies said (except it’s not in the Animations class), you should be fine.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bucky/315843/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bucky/315843/3</link>
        <pubDate>Mon, 23 Nov 2009 18:26:12 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-315843-3</guid>
        <source url="https://forum.moparisthebest.com/t/bucky/315843.rss">Bucky</source>
      </item>
      <item>
        <title>Bucky</title>
        <dc:creator><![CDATA[@Fat_Cookies Fat Cookies]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/fat_cookies">@Fat_Cookies</a> wrote:</p>
          <blockquote>
              <p>I doubt your running this from the directory in the source so…</p>
<p>in yo Animations class in the loadImages method change:</p>
<pre><code>	[code]bg = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Back.jpg").getImage();
	Image face1 = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Face.png").getImage();
	Image face2 = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Face2.png").getImage();[/code]
</code></pre>
<p>to…<br>
<code>bg = new ImageIcon("Back.jpg").getImage();
		Image face1 = new ImageIcon("Face.png").getImage();
		Image face2 = new ImageIcon("Face2.png").getImage();</code></p>
<p>and dump the 3 images into the same directory as your classes. Should be in the test or build folder in eclipse within your project folder.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bucky/315843/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bucky/315843/2</link>
        <pubDate>Mon, 23 Nov 2009 18:21:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-315843-2</guid>
        <source url="https://forum.moparisthebest.com/t/bucky/315843.rss">Bucky</source>
      </item>
      <item>
        <title>Bucky</title>
        <dc:creator><![CDATA[@_BBLLAARRGGHH __--BBLLAARRGGHH--__]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_bbllaarrgghh">@_BBLLAARRGGHH</a> wrote:</p>
          <blockquote>
              <p>I’ve followed some Java tutorials for some time now [<a href="http://www.youtube.com/user/thenewboston" rel="nofollow noopener">http://www.youtube.com/user/thenewboston</a>] And have been doing a series of his game development tuts[<a href="http://www.youtube.com/watch?v=c74DlUMbeZI&amp;feature=SeriesPlayList&amp;p=A331A6709F40B79D" rel="nofollow noopener">http://www.youtube.com/watch?v=c74DlUMbeZI&amp;feature=SeriesPlayList&amp;p=A331A6709F40B79D</a>]. I have all the code, but when I run it, It just displays a white screen, and nothing else.</p>
<p>Bass.java[code]import java.awt.*;<br>
import javax.swing.ImageIcon;<br>
import javax.swing.JFrame;</p>
<p>public class Bass extends JFrame {<br>
public static void main(String[] args){<br>
Bass b = new Bass();<br>
b.run();<br>
}</p>
<pre><code>private Animation a;
private ScreenManager s;
private Image bg;
private static final DisplayMode modes1[] = {
	new DisplayMode(800,600,32,0),
	new DisplayMode(800,600,24,0),
	new DisplayMode(800,600,16,0),
	new DisplayMode(640,480,32,0),
	new DisplayMode(640,480,24,0),
	new DisplayMode(640,480,16,0),
};

//load images and add scenes
public void loadImages() {
	bg = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Back.jpg").getImage();
	Image face1 = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Face.png").getImage();
	Image face2 = new ImageIcon("C:\\Users\\Bass-Bounce\\Pictures\\Face2.png").getImage();
	
	a = new Animation();
	a.addScene(face1,250);
	a.addScene(face2,250);
}

//main method from main
public void run() {
	s = new ScreenManager();
	try {
		DisplayMode dm = s.findFirstCompatibleMode(modes1);
		s.setFullScreen(dm);
		loadImages();
		movieLoop();
	} finally {
		s.restoreScreen();
	}
}

//movie loop
public void movieLoop() {
	long startingTime = System.currentTimeMillis();
	long cumTime = startingTime;
	while (cumTime - startingTime &lt; 5000) {
		long timePassed = System.currentTimeMillis() - cumTime;
		cumTime += timePassed;
		a.update(timePassed);
		
		//draw and update screen
		Graphics2D g = s.getGraphics();
		draw(g);
		g.dispose();
		s.update();
		
		try {
			Thread.sleep(20);
		} catch (Exception ex) {}
	}
}

//draw graphics
public void draw(Graphics g) {
	g.drawImage(bg,0,0,null);
	g.drawImage(a.getImage(),0,0,null);
}
</code></pre>
<p>}<br>
[/code]<br>
Animation.java[code]import java.awt.Image;<br>
import java.util.ArrayList;</p>
<p>public class Animation {</p>
<pre><code>private ArrayList scenes;
private int sceneIndex;
private long movieTime;
private long totalTime;

public Animation() {
	scenes = new ArrayList();
	totalTime = 0;
	start();
	
}

public synchronized void addScene(Image i, long t) {
	totalTime += t;
	scenes.add(new OneScene(i, totalTime));
}

public synchronized void start() {
	movieTime = 0;
	sceneIndex = 0;
}

public synchronized void update(long timePassed) {
	if(scenes.size() &gt; 1) {
		movieTime += timePassed;
		if(movieTime &gt;= totalTime) {
			movieTime = 0;
			sceneIndex = 0;
		}
		while(movieTime &gt; getScene(sceneIndex).endTime) {
			sceneIndex++;
		}
	}
}

public synchronized Image getImage() {
	if (scenes.size() == 0) {
		return null;
	} else {
		return getScene(sceneIndex).pic;
	}
}

private OneScene getScene(int x) {
	return (OneScene)scenes.get(x);
}

private class OneScene {
	Image pic;
	long endTime;
	
	public OneScene(Image pic, long endTime) {
		this.pic = pic;
		this.endTime = endTime;
	}
}
</code></pre>
<p>}<br>
[/code]<br>
ScreenManager.java[code]import java.awt.*;<br>
import java.awt.image.BufferedImage;<br>
import java.awt.image.BufferStrategy;<br>
import java.lang.reflect.InvocationTargetException;<br>
import javax.swing.JFrame;</p>
<p>public class ScreenManager {</p>
<pre><code>private GraphicsDevice vc;

//give vc access to monitor
public ScreenManager() {
	GraphicsEnvironment e = GraphicsEnvironment.getLocalGraphicsEnvironment();
	vc = e.getDefaultScreenDevice();
}

//get all compatible DM's
public DisplayMode[] getCompatibleDisplayModes() {
	return vc.getDisplayModes();
}

//compared Dm passed into VC, see if they match
public DisplayMode findFirstCompatibleMode(DisplayMode modes[]) {
	DisplayMode goodModes[] = vc.getDisplayModes();
	for (int x = 0; x &lt; modes.length; x++) {
		for (int y = 0; y &lt; goodModes.length; y++) {
			if (displayModesMatch(modes[x], goodModes[y])) {
				return modes[x];
			}
		}
	}
	return null;
}

//get current DM
public DisplayMode getCurrentDisplayMode() {
	return vc.getDisplayMode();
}

//check if 2 modes match
public boolean displayModesMatch(DisplayMode m1, DisplayMode m2) {
	if (m1.getWidth() != m2.getWidth() || m1.getHeight() != m2.getHeight()) {
	return false;
	} 
	if (m1.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI &amp;&amp; m2.getBitDepth() != DisplayMode.BIT_DEPTH_MULTI &amp;&amp; m1.getBitDepth() != m2.getBitDepth()) {
	return false;
	}
	if (m1.getRefreshRate() != DisplayMode.REFRESH_RATE_UNKNOWN &amp;&amp; m2.getRefreshRate() != DisplayMode.REFRESH_RATE_UNKNOWN &amp;&amp; m1.getRefreshRate() != m2.getRefreshRate()) {
	return false;
	}
	
	return true;
}

//make Fullscreen
public void setFullScreen(DisplayMode dm) {
	JFrame f = new JFrame();
	f.setUndecorated(true);
	f.setIgnoreRepaint(true);
	f.setResizable(false);
	vc.setFullScreenWindow(f);
	
	if (dm != null &amp;&amp; vc.isDisplayChangeSupported()) {
		try {
			vc.setDisplayMode(dm);
		} catch (Exception ex){}
	}
	f.createBufferStrategy(2);
}

//set graphicsobject to this
public Graphics2D getGraphics() {
	Window w = vc.getFullScreenWindow();
	if (w != null) {
		BufferStrategy s = w.getBufferStrategy();
		return (Graphics2D)s.getDrawGraphics();
	} else {
		return null;
	}
}

//updates display
public void update() {
	Window w = vc.getFullScreenWindow();
	if (w != null) {
		BufferStrategy s = w.getBufferStrategy();
		if (s.contentsLost()) {
			s.show();
		}
	}
}

//returns full screen window
public Window getFullScreenWindow() {
	return vc.getFullScreenWindow();
}

//get width of window
public int getWidth() {
	Window w = vc.getFullScreenWindow();
	if (w != null) {
		return w.getWidth();
	} else {
		return 0;
	}
}

//get height of window
public int getHeight() {
	Window w = vc.getFullScreenWindow();
	if (w != null) {
		return w.getWidth();
	} else {
		return 0;
	}
}

//get out of fs
public void restoreScreen() {
	Window w = vc.getFullScreenWindow();
	if (w != null) {
		w.dispose();
	}
	vc.setFullScreenWindow(null);
}

//create image compatible with monitor[
public BufferedImage createCompatibleImage(int w, int h, int t) {
	Window win = vc.getFullScreenWindow();
	if (win != null) {
		GraphicsConfiguration gc = win.getGraphicsConfiguration();
		return gc.createCompatibleImage(w,h,t);
	}
	return null;
}
</code></pre>
<p>}[/code]</p>
<p>Any help?[br][br][size=1]Posted on: November 23, 2009, 11:42:40 am[/size][hr]Btw, using Eclipse.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/bucky/315843/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/bucky/315843/1</link>
        <pubDate>Mon, 23 Nov 2009 17:41:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-315843-1</guid>
        <source url="https://forum.moparisthebest.com/t/bucky/315843.rss">Bucky</source>
      </item>
  </channel>
</rss>
