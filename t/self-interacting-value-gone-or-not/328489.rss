<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>&quot;self-interacting&quot; value, gone or not?</title>
    <link>https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489</link>
    <description>From what I can tell after looking at RSbot/Kbot sources,
the &quot;self-interacting&quot; value is used to determine wether or not the player is interacting with himself,
and change the offset into the character-array accordingly (to index 2047, for some reason I didn&#39;t figure out yet).

Taken from RSbot code, this method pretty much explains itself:
(PS:  Should anyone from RSBot read this, the &quot;else if&quot; is redundant)
[code]
public RSCharacter getInteracting() {

		final int interact = c.getInteracting();
		if (interact == -1)
			return null;

		if (interact &lt; 32768)
			return new org.rsbot.script.wrappers.RSNPC(Bot.getClient().getRSNPCArray()[interact]);
		else if (interact &gt;= 32768) {
			int index = interact - 32768;
			//   ANNOYING COMMENT USED AS A POINTER TO THE RELEVANT PART
			if (index == Bot.getClient().getSelfInteracting()) {
				index = 2047;
			}

			return new org.rsbot.script.wrappers.RSPlayer(Bot.getClient().getRSPlayerArray()[index]);
		}

		return null;
	}
[/code]

So I set out to locate the actual field, find out it&#39;s supposed to be &quot;client.mb&quot; (iirc) and discover that that field is actually the &#39;control field&#39;, used to (... better stfu here, have no real clue about the obfuscation atm)

Seeing as this value will always be 0 (in the current #582), it has to be an error. So I travel back in time, to KBot #554 and see that he/they hook field &quot;af.h&quot;, which makes perfect sense given this extract ...
[code]
        a++;
        if(i1 != 2)
            return;
        if(uf1.Tb == 0)
            return;
        qi1 = uf1.b(-1399);
        if(~uf1.rb != 0 &amp;&amp; uf1.rb &lt; 32768)
        {
            vd vd = ih.E[uf1.rb];
            if(vd != null)
            {
                int i2 = -((uf) (vd)).u + uf1.u;
                int l2 = -((uf) (vd)).yb + uf1.yb;
                if(~i2 != -1 || ~l2 != -1)
                    uf1.Db = (int)(Math.atan2(i2, l2) * 325.94900000000001D) &amp; 0x7ff;
            }
        }
        if(~uf1.rb &lt;= -32769)
        {
            int j1 = uf1.rb - 32768;
            //   ANNOYING COMMENT USED AS A POINTER TO THE RELEVANT PART
            if(~j1 == ~af.h)
                j1 = 2047;
            dl dl1 = rj.C[j1];
            if(dl1 != null)
            {
                int i3 = -((uf) (dl1)).u + uf1.u;
                int l3 = -((uf) (dl1)).yb + uf1.yb;
                if(~i3 != -1 || l3 != 0)
                    uf1.Db = (int)(325.94900000000001D * Math.atan2(i3, l3)) &amp; 0x7ff;
            }
        }
[/code]

Seems easy enough to find that one. Even I should be able to hook that. So I locate the corresponding #582 method, and this is what I get:
[code]
        if(bn1.wb == 0)
            return 0;
        if(~bn1.sb != 0)
        {
            Object obj = null;
            if(~bn1.sb &gt; -32769)
                obj = pn.u[bn1.sb];
            else
            if(bn1.sb &gt;= 32768)
                obj = tb.A[-32768 + bn1.sb];
            if(obj != null)
            {
                int i = -((jo) (obj)).h + ((jo) (bn1)).h;
                int k = ((jo) (bn1)).o - ((jo) (obj)).o;
                if(~i != -1 || ~k != -1)
                    bn1.a((byte)-50, 0x3fff &amp; (int)(Math.atan2(i, k) * 2607.5945876176133D));
            }
        }
        if(byte0 != 11)
            a(((bn) (null)), (byte)-26);
[/code]

So my question is ... where did that &quot;check index X, switch to 2047 if ...&quot; go?

If you went through the effort of reading all of the above, I&#39;d appreciate any insights on the matter.
Flaming my (undoubted) stupidity is appreciated aswell, as long as somewhere along the line you shed some light on why exactly I&#39;m stupid ;)</description>
    
    <lastBuildDate>Sat, 06 Feb 2010 21:25:21 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>&quot;self-interacting&quot; value, gone or not?</title>
        <dc:creator><![CDATA[@DarKcookie DarKcookie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/darkcookie">@DarKcookie</a> wrote:</p>
          <blockquote>
              <p>Well I first ran a check to determine all the classes that had a reference to that field,<br>
and ofcourse I ended up with the sipush 2047 being a gift-wrapped opportunity for a hook.</p>
<p>Following your advice, I tracked the (only) assignment of the field:</p>
<pre><code class="lang-auto">        tf.d.t = 0;
        cd.e = tf.d.c((byte)38);
        bi.m = tf.d.c((byte)95);
        ql.i = tf.d.c((byte)30) == 1;
        hm.K = tf.d.c((byte)-112) == 1;
        ri.o = ~tf.d.c((byte)-122) == -2;
        ra.T = tf.d.c((byte)48) == 1;
        vk.c = ~tf.d.c((byte)111) == -2;
        af.h = tf.d.h((byte)51);   // self-interacting value right here
        am.U = tf.d.c((byte)79) == 1;
        wc.i = tf.d.c((byte)104) == 1;</code></pre>
<p>Given the fact that “tf.d” contains an instance of the I/O class that handles packet data,<br>
I think it’s safe to assume that the order of assignments will always be the same (right?),<br>
so I can ‘just’ take the 3rd integer assignment (or something like that) and I have my goodies.</p>
<p>I checked the <span class="hashtag">#578</span> version of the previously mentioned source (no more free advertisement today),<br>
and it appears to return the same field for both “getBaseX” and “getSelfInteracting”.<br>
I don’t see any way how that could possibly be reasonable, so I’ll just assume bot X has flaws.</p>
<p>Final question (for now I’m afraid, many more are bound to arise as I find this deob/hook thing highly entertaining) …<br>
As shown above, the self-interacting value is used in the bot’s code to switch the index into the array.<br>
However the corresponding code in the client seems to have gone missing (or was just removed).<br>
Doesn’t this mean the bot’s code should be modified accordingly?<br>
Or are they relying on the fact that they return some unrelated value so the condition is never met for the switch?</p>
<p>PS:  Ty frank_ for the answer <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=5" title=":slight_smile:" class="emoji" alt=":slight_smile:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/3</link>
        <pubDate>Sat, 06 Feb 2010 21:25:21 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328489-3</guid>
        <source url="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489.rss">&quot;self-interacting&quot; value, gone or not?</source>
      </item>
      <item>
        <title>&quot;self-interacting&quot; value, gone or not?</title>
        <dc:creator><![CDATA[@frank frank_]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/frank">@frank</a> wrote:</p>
          <blockquote>
              <p>try looking where the value is assigned?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/2</link>
        <pubDate>Sat, 06 Feb 2010 19:39:05 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328489-2</guid>
        <source url="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489.rss">&quot;self-interacting&quot; value, gone or not?</source>
      </item>
      <item>
        <title>&quot;self-interacting&quot; value, gone or not?</title>
        <dc:creator><![CDATA[@DarKcookie DarKcookie]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/darkcookie">@DarKcookie</a> wrote:</p>
          <blockquote>
              <p>From what I can tell after looking at RSbot/Kbot sources,<br>
the “self-interacting” value is used to determine wether or not the player is interacting with himself,<br>
and change the offset into the character-array accordingly (to index 2047, for some reason I didn’t figure out yet).</p>
<p>Taken from RSbot code, this method pretty much explains itself:<br>
(PS:  Should anyone from RSBot read this, the “else if” is redundant)</p>
<pre><code class="lang-auto">public RSCharacter getInteracting() {

		final int interact = c.getInteracting();
		if (interact == -1)
			return null;

		if (interact &lt; 32768)
			return new org.rsbot.script.wrappers.RSNPC(Bot.getClient().getRSNPCArray()[interact]);
		else if (interact &gt;= 32768) {
			int index = interact - 32768;
			//   ANNOYING COMMENT USED AS A POINTER TO THE RELEVANT PART
			if (index == Bot.getClient().getSelfInteracting()) {
				index = 2047;
			}

			return new org.rsbot.script.wrappers.RSPlayer(Bot.getClient().getRSPlayerArray()[index]);
		}

		return null;
	}</code></pre>
<p>So I set out to locate the actual field, find out it’s supposed to be “client.mb” (iirc) and discover that that field is actually the ‘control field’, used to (… better stfu here, have no real clue about the obfuscation atm)</p>
<p>Seeing as this value will always be 0 (in the current <span class="hashtag">#582</span>), it has to be an error. So I travel back in time, to KBot <span class="hashtag">#554</span> and see that he/they hook field “af.h”, which makes perfect sense given this extract …</p>
<pre><code class="lang-auto">        a++;
        if(i1 != 2)
            return;
        if(uf1.Tb == 0)
            return;
        qi1 = uf1.b(-1399);
        if(~uf1.rb != 0 &amp;&amp; uf1.rb &lt; 32768)
        {
            vd vd = ih.E[uf1.rb];
            if(vd != null)
            {
                int i2 = -((uf) (vd)).u + uf1.u;
                int l2 = -((uf) (vd)).yb + uf1.yb;
                if(~i2 != -1 || ~l2 != -1)
                    uf1.Db = (int)(Math.atan2(i2, l2) * 325.94900000000001D) &amp; 0x7ff;
            }
        }
        if(~uf1.rb &lt;= -32769)
        {
            int j1 = uf1.rb - 32768;
            //   ANNOYING COMMENT USED AS A POINTER TO THE RELEVANT PART
            if(~j1 == ~af.h)
                j1 = 2047;
            dl dl1 = rj.C[j1];
            if(dl1 != null)
            {
                int i3 = -((uf) (dl1)).u + uf1.u;
                int l3 = -((uf) (dl1)).yb + uf1.yb;
                if(~i3 != -1 || l3 != 0)
                    uf1.Db = (int)(325.94900000000001D * Math.atan2(i3, l3)) &amp; 0x7ff;
            }
        }</code></pre>
<p>Seems easy enough to find that one. Even I should be able to hook that. So I locate the corresponding <span class="hashtag">#582</span> method, and this is what I get:</p>
<pre><code class="lang-auto">        if(bn1.wb == 0)
            return 0;
        if(~bn1.sb != 0)
        {
            Object obj = null;
            if(~bn1.sb &gt; -32769)
                obj = pn.u[bn1.sb];
            else
            if(bn1.sb &gt;= 32768)
                obj = tb.A[-32768 + bn1.sb];
            if(obj != null)
            {
                int i = -((jo) (obj)).h + ((jo) (bn1)).h;
                int k = ((jo) (bn1)).o - ((jo) (obj)).o;
                if(~i != -1 || ~k != -1)
                    bn1.a((byte)-50, 0x3fff &amp; (int)(Math.atan2(i, k) * 2607.5945876176133D));
            }
        }
        if(byte0 != 11)
            a(((bn) (null)), (byte)-26);</code></pre>
<p>So my question is … where did that “check index X, switch to 2047 if …” go?</p>
<p>If you went through the effort of reading all of the above, I’d appreciate any insights on the matter.<br>
Flaming my (undoubted) stupidity is appreciated aswell, as long as somewhere along the line you shed some light on why exactly I’m stupid <img src="https://forum.moparisthebest.com/images/emoji/twitter/wink.png?v=5" title=":wink:" class="emoji" alt=":wink:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489/1</link>
        <pubDate>Sat, 06 Feb 2010 18:17:04 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-328489-1</guid>
        <source url="https://forum.moparisthebest.com/t/self-interacting-value-gone-or-not/328489.rss">&quot;self-interacting&quot; value, gone or not?</source>
      </item>
  </channel>
</rss>
