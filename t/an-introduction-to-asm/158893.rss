<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>An Introduction to ASM</title>
    <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893</link>
    <description>I assume you have a basic idea of what a class file is. You don&#39;t need to know what a constant pool is, one of the advantages of ASM, but what you do need to know is what an instruction is and what a descriptor is. (ie. Ljava/lang/String; and Z)

ASM works on a visitor based method. This is, in my opinion, ugly as hell and means that you cant do anything useful because you are only able to see the currently processed instruction or field/method name. So the answer lies in ClassNode. It is a visitor like everything else but once loaded it allows you to analyze the class file and take it apart piece by piece.

The following piece of code outputs all the method names and field names of all the classes in a directory. Once read using ClassReader it loops through the classes outputting the names of methods and fields. Note that there is not a single ConstantPool index to be seen, no stuffing around with confusing indexes. It then outputs them back to a directory called &lt;dirName&gt;NEW using ClassWriter. The COMPUTE_MAXS constant passed to it means that if you have modified the depth of the stack in your classhackery it recomputes it.

You really don&#39;t need to know much about the loading and unloading of classes. What you really need to look at is ClassNode and MethodNode since this is where all the code inside the class file lies. All the instructions in the method are directly accessible which means you don&#39;t need to using MethodGen from BCEL and worry about more objects. Here is the API link: http://asm.objectweb.org/current/doc/javadoc/user/index.html And for ClassNode: http://asm.objectweb.org/current/doc/javadoc/user/org/objectweb/asm/tree/ClassNode.html

[code]import java.io.*;
import java.util.*;

import org.objectweb.asm.*;
import org.objectweb.asm.tree.*;


public class Test {
	//Loads all files ending in .class in workDir into an array of classnodes 
	public static ClassNode[] loadClassesFromDir(File workDir) throws Exception {
		Vector&lt;ClassNode&gt; cns = new Vector&lt;ClassNode&gt;();
		File[] fs = workDir.listFiles();
		for (int i = 0; i &lt; fs.length; i++) {
			if (!fs[i].isFile()) continue;
			if (!fs[i].getName().endsWith(&quot;.class&quot;)) continue;
			ClassReader cr = new ClassReader(new BufferedInputStream(new FileInputStream(fs[i])));
			ClassNode cn = new ClassNode();
			cr.accept(cn, 0);
			cns.add(cn);
		}
		return cns.toArray(new ClassNode[0]);
	}
	
	public static void main(String[] args) throws Exception {
		if (args.length != 1) return;
		File loadDir = new File(args[0]);
		if (!loadDir.isDirectory()) return;
		System.out.println(&quot;Loading classes from: &quot; + loadDir);
		ClassNode[] cns = loadClassesFromDir(loadDir);
		for (ClassNode cn : cns) { //for every Class
			System.out.println(&quot;Class: &quot; + cn.name);
			for (Iterator it = cn.fields.iterator(); it.hasNext();) { // for every field
				FieldNode fn = (FieldNode) it.next();
				System.out.println(&quot;  Field:  &quot; + fn.name);
			}
			for (Iterator it = cn.methods.iterator(); it.hasNext();) { //for every method
				MethodNode mn = (MethodNode) it.next();
				System.out.println(&quot;  Method: &quot; + mn.name + &quot;  &quot; + mn.desc);
			}
		}
		File dumpDir = new File(loadDir.getParent(),loadDir.getName() + &quot;NEW&quot;);
		System.out.println(&quot;Dumping classes to: &quot; + dumpDir);
		dumpClassesToDir(cns, dumpDir);
	}

	private static void dumpClassesToDir(ClassNode[] cns, File dumpDir) throws FileNotFoundException, IOException {
		for (ClassNode cn : cns) { //for every Class
			File classFile = new File(dumpDir,cn.name);
			BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(classFile));
			ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
			cn.accept(cw);
			byte[] bs = cw.toByteArray();
			bos.write(bs);
			bos.close();
		}
	}
}[/code]</description>
    
    <lastBuildDate>Mon, 19 Nov 2007 13:33:22 +0000</lastBuildDate>
    <category>General Programming</category>
    <atom:link href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>in that case, you might as well use bcel on its own.</p>
<p>also Bash, what happens when you ClassNodeInstance.superName = null; how come there isnt a setter/getter method for that, which checks you cant put things like that in there, or does null default to java/lang/Object?<br>
[size=1pt]I suspect solarwind doesnt know much about what hes talking about[/size]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/13">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/13</link>
        <pubDate>Mon, 19 Nov 2007 13:33:22 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-13</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@solarwind solarwind]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/solarwind">@solarwind</a> wrote:</p>
          <blockquote>
              <p>You don’t have to use ASM to do it. You can use ASM and BCEL together.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/12">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/12</link>
        <pubDate>Mon, 19 Nov 2007 06:37:37 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-12</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@BAsh_CntLgn BAsh(CntLgn)]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash_cntlgn">@BAsh_CntLgn</a> wrote:</p>
          <blockquote>
              <aside class="quote no-group" data-post="5" data-topic="158893">
<div class="title">
<div class="quote-controls"></div>
<img alt width="20" height="20" src="https://forum.moparisthebest.com/letter_avatar/yakman/40/5_6bca9977b612b7aeef77ba1ec1cd67b3.png" class="avatar"> yakman:</div>
<blockquote>
<p>ClassNodeInstance.changeSuperclass() or something.</p>
</blockquote>
</aside>
<p>ClassNodeInstance.superName = “java/my/ROFL”;</p>
<blockquote>Believe me, it's an advantage. You could have access to the constant pool directly if you want.</blockquote>
Unfortunately you cant access the constant pool at all because it doesn't exist. It is all converted into strings and back.
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/11">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/11</link>
        <pubDate>Mon, 19 Nov 2007 06:34:34 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-11</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@solarwind solarwind]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/solarwind">@solarwind</a> wrote:</p>
          <blockquote>
              <p>ASM gives you a better interface <img src="https://forum.moparisthebest.com/images/emoji/twitter/stuck_out_tongue.png?v=6" title=":stuck_out_tongue:" class="emoji" alt=":stuck_out_tongue:"></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/10">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/10</link>
        <pubDate>Mon, 19 Nov 2007 00:00:48 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-10</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <p>imo if you’re going to be a speed whore, instead of using the object orientation, rip shit out straight from the buffer form the class file.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/9">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/9</link>
        <pubDate>Sun, 18 Nov 2007 23:38:15 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-9</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@solarwind solarwind]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/solarwind">@solarwind</a> wrote:</p>
          <blockquote>
              <p>ASM is smaller and faster.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/8">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/8</link>
        <pubDate>Sun, 18 Nov 2007 23:35:25 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-8</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@Exception Exception]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/exception">@Exception</a> wrote:</p>
          <blockquote>
              <p>In your example, it really doesn’t seem any more difficult or even that much different than BCEL. Perhaps I’ll give it a try…</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/7">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/7</link>
        <pubDate>Sun, 18 Nov 2007 23:23:13 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-7</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@solarwind solarwind]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/solarwind">@solarwind</a> wrote:</p>
          <blockquote>
              <p>[quote=“yakman, post:5, topic:158893”]a good start Bash <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
could we have more examples please, you’ve started up a hunger in me</p>
<aside class="quote no-group">
<blockquote>
<p>The constantpool abstraction isn’t an advantage, it’s an impediment.</p>
</blockquote>
</aside>
<p>i would have to agree with this, there are some things where having access to the constant pool is really great,<br>
like i remember from somewhere, a loader which replaced the defineClass() method with injectDefine() by changing a UTF8 in the constant pool,<br>
also with changing the superclass of a class, you have to use the constant pool, now I’m sure ASM has a method for it, like ClassNodeInstance.changeSuperclass() or something.[/quote]<br>
Believe me, it’s an advantage. You could have access to the constant pool directly if you want.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/6</link>
        <pubDate>Sun, 18 Nov 2007 22:18:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-6</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@yakman yakman]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/yakman">@yakman</a> wrote:</p>
          <blockquote>
              <p>a good start Bash <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=6" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
could we have more examples please, you’ve started up a hunger in me</p>
<aside class="quote no-group quote-modified" data-post="4" data-topic="158893">
<div class="title">
<div class="quote-controls"></div>
 White Castle:</div>
<blockquote>
<p>The constantpool abstraction isn’t an advantage, it’s an impediment.</p>
</blockquote>
</aside>
<p>i would have to agree with this, there are some things where having access to the constant pool is really great,<br>
like i remember from somewhere, a loader which replaced the defineClass() method with injectDefine() by changing a UTF8 in the constant pool,<br>
also with changing the superclass of a class, you have to use the constant pool, now I’m sure ASM has a method for it, like ClassNodeInstance.changeSuperclass() or something.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/5</link>
        <pubDate>Sun, 18 Nov 2007 19:47:53 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-5</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@White_Castle White Castle]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/white_castle">@White_Castle</a> wrote:</p>
          <blockquote>
              <p>The constantpool abstraction isn’t an advantage, it’s an impediment.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/4</link>
        <pubDate>Sun, 18 Nov 2007 11:43:07 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-4</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@solarwind solarwind]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/solarwind">@solarwind</a> wrote:</p>
          <blockquote>
              <p>Wow, ok, thanks BAsh.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/3</link>
        <pubDate>Sun, 18 Nov 2007 07:11:36 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-3</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@_cake _cake]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/_cake">@_cake</a> wrote:</p>
          <blockquote>
              <p>I guess it’s ok, but whats the fun of hiding all the ‘confusing’ stuff?</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/2</link>
        <pubDate>Sun, 18 Nov 2007 06:59:39 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-2</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
      <item>
        <title>An Introduction to ASM</title>
        <dc:creator><![CDATA[@BAsh_CntLgn BAsh(CntLgn)]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/bash_cntlgn">@BAsh_CntLgn</a> wrote:</p>
          <blockquote>
              <p>I assume you have a basic idea of what a class file is. You don’t need to know what a constant pool is, one of the advantages of ASM, but what you do need to know is what an instruction is and what a descriptor is. (ie. Ljava/lang/String; and Z)</p>
<p>ASM works on a visitor based method. This is, in my opinion, ugly as hell and means that you cant do anything useful because you are only able to see the currently processed instruction or field/method name. So the answer lies in ClassNode. It is a visitor like everything else but once loaded it allows you to analyze the class file and take it apart piece by piece.</p>
<p>The following piece of code outputs all the method names and field names of all the classes in a directory. Once read using ClassReader it loops through the classes outputting the names of methods and fields. Note that there is not a single ConstantPool index to be seen, no stuffing around with confusing indexes. It then outputs them back to a directory called NEW using ClassWriter. The COMPUTE_MAXS constant passed to it means that if you have modified the depth of the stack in your classhackery it recomputes it.</p>
<p>You really don’t need to know much about the loading and unloading of classes. What you really need to look at is ClassNode and MethodNode since this is where all the code inside the class file lies. All the instructions in the method are directly accessible which means you don’t need to using MethodGen from BCEL and worry about more objects. Here is the API link: <a href="http://asm.objectweb.org/current/doc/javadoc/user/index.html" rel="nofollow noopener">http://asm.objectweb.org/current/doc/javadoc/user/index.html</a> And for ClassNode: <a href="http://asm.objectweb.org/current/doc/javadoc/user/org/objectweb/asm/tree/ClassNode.html" rel="nofollow noopener">http://asm.objectweb.org/current/doc/javadoc/user/org/objectweb/asm/tree/ClassNode.html</a></p>
<p>[code]import <a href="http://java.io" rel="nofollow noopener">java.io</a>.<em>;<br>
import java.util.</em>;</p>
<p>import org.objectweb.asm.<em>;<br>
import org.objectweb.asm.tree.</em>;</p>
<p>public class Test {<br>
//Loads all files ending in .class in workDir into an array of classnodes<br>
public static ClassNode[] loadClassesFromDir(File workDir) throws Exception {<br>
Vector cns = new Vector();<br>
File[] fs = workDir.listFiles();<br>
for (int i = 0; i &lt; fs.length; i++) {<br>
if (!fs[i].isFile()) continue;<br>
if (!fs[i].getName().endsWith(".class")) continue;<br>
ClassReader cr = new ClassReader(new BufferedInputStream(new FileInputStream(fs[i])));<br>
ClassNode cn = new ClassNode();<br>
cr.accept(cn, 0);<br>
cns.add(cn);<br>
}<br>
return cns.toArray(new ClassNode[0]);<br>
}</p>
<pre><code>public static void main(String[] args) throws Exception {
	if (args.length != 1) return;
	File loadDir = new File(args[0]);
	if (!loadDir.isDirectory()) return;
	System.out.println("Loading classes from: " + loadDir);
	ClassNode[] cns = loadClassesFromDir(loadDir);
	for (ClassNode cn : cns) { //for every Class
		System.out.println("Class: " + cn.name);
		for (Iterator it = cn.fields.iterator(); it.hasNext();) { // for every field
			FieldNode fn = (FieldNode) it.next();
			System.out.println("  Field:  " + fn.name);
		}
		for (Iterator it = cn.methods.iterator(); it.hasNext();) { //for every method
			MethodNode mn = (MethodNode) it.next();
			System.out.println("  Method: " + mn.name + "  " + mn.desc);
		}
	}
	File dumpDir = new File(loadDir.getParent(),loadDir.getName() + "NEW");
	System.out.println("Dumping classes to: " + dumpDir);
	dumpClassesToDir(cns, dumpDir);
}

private static void dumpClassesToDir(ClassNode[] cns, File dumpDir) throws FileNotFoundException, IOException {
	for (ClassNode cn : cns) { //for every Class
		File classFile = new File(dumpDir,cn.name);
		BufferedOutputStream bos = new BufferedOutputStream(new FileOutputStream(classFile));
		ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_MAXS);
		cn.accept(cw);
		byte[] bs = cw.toByteArray();
		bos.write(bs);
		bos.close();
	}
}
</code></pre>
<p>}[/code]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/an-introduction-to-asm/158893/1</link>
        <pubDate>Sun, 18 Nov 2007 06:33:16 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-158893-1</guid>
        <source url="https://forum.moparisthebest.com/t/an-introduction-to-asm/158893.rss">An Introduction to ASM</source>
      </item>
  </channel>
</rss>
