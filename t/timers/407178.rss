<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>Timers</title>
    <link>https://forum.moparisthebest.com/t/timers/407178</link>
    <description>Okay, I&#39;m helping this kid make Castle Wars and the current Castle Wars he has is a skull fuck, trust me. What I don&#39;t get is where he is getting these numbers for his timers. 
[b]CastleWars.java:[/b]
[code=Java]
package server.model.minigames;


import java.util.ArrayList;

import server.Server;
import server.model.players.Client;
import server.util.Misc;

public class CastleWars {
	
	private CastleWarObjects cwo = new CastleWarObjects();
	
	public CastleWars() {
		/**
		* Constructor
		*/
	}
	
	public ArrayList&lt;Integer&gt; saradomin = new ArrayList&lt;Integer&gt; (); //team 1
	public ArrayList&lt;Integer&gt; zamorak = new ArrayList&lt;Integer&gt; (); //team 2
	public ArrayList&lt;Integer&gt; saradominWait = new ArrayList&lt;Integer&gt; (); //team 1
	public ArrayList&lt;Integer&gt; zamorakWait = new ArrayList&lt;Integer&gt; (); //team 2
	public int saradominScore = 0;
	public int zamorakScore = 0;
	public boolean saraFlagSafe = true;
	public boolean zammyFlagSafe = true;
	private final int GAME_TIMER = 200; //1500 * 600 = 900000ms = 15 minutes
	private final int GAME_START_TIMER = 20;	
	public int timeRemaining = -1;
	public int gameStartTimer = GAME_START_TIMER;
	

	public void joinWait(Client c, int team) {
		if (c.playerEquipment[c.playerHat] &gt; 0 || c.playerEquipment[c.playerCape] &gt; 0) {
			c.sendMessage(&quot;You may not wear capes or helmets inside of castle wars.&quot;);
			return;
		}
		if (team == 1) {
			if (saradominWait.size() &gt; zamorakWait.size()) {
				c.sendMessage(&quot;This team is currently full.&quot;);
				return;
			} else {
				saradominWait.add(c.playerId);
				c.castleWarsTeam = 1;
                                toWaitingRoom(c, c.castleWarsTeam);
                                c.sendMessage(&quot;You have been added to the Saradomin team.&quot;);
			}
		} else if (team == 2) {
			if (zamorakWait.size() &gt; saradominWait.size()) {
				c.sendMessage(&quot;This team is currently full.&quot;);
				return;
			} else {
				zamorakWait.add(c.playerId);
				c.castleWarsTeam = 2;
                                toWaitingRoom(c, c.castleWarsTeam);
                                c.sendMessage(&quot;You have been added to the Zamorak team.&quot;);
			}
		}
	}

	public void toWaitingRoom(Client c, int team) {
		if (team == 1) {
			c.getPA().movePlayer(2377 + Misc.random(10), 9485 + Misc.random(5),0);
		} else if (team == 2) {
			c.getPA().movePlayer(2417 + Misc.random(10), 9485 + Misc.random(7),0);
		}
		c.inCwWait = true;
	}
	
	public void leaveWaitingRoom(Client c) {
		c.inCwWait = false;
		c.getPA().movePlayer(2439 + Misc.random(4), 3085 + Misc.random(5), 0);
		if (c.castleWarsTeam == 1) {
			saradominWait.remove(saradomin.indexOf(c.playerId));
			c.castleWarsTeam = -1;
		} else if (c.castleWarsTeam == 2) {
			zamorakWait.remove(zamorak.indexOf(c.playerId));
			c.castleWarsTeam = -1;
		}			
	}
	
	
	int properTimer = 0;
	public void process() {
		if (properTimer &gt; 0) {
			properTimer--;
			return;
		} else {
			properTimer = 4;
		}
			
		if (gameStartTimer &gt; 0) {
			gameStartTimer--;
			updatePlayers();
		} else if (gameStartTimer == 0) {
			startGame();
		}
		if (timeRemaining &gt; 0) {
			timeRemaining--;
			updateInGamePlayers();
		} else if (timeRemaining == 0) {
			endGame();
		}
		/** 
		* The process of the castle wars game - called every 3 seconds
		*/
	}
	
	public void updatePlayers() {
		//saradomin players
		for (int player : saradominWait) {
			if (Server.playerHandler.players[player] != null) {
				Client c = (Client) Server.playerHandler.players[player];
				c.getPA().walkableInterface(6673);
				c.getPA().sendFrame126(&quot;Next Game Begins In : &quot; + gameStartTimer * 3 + &quot; seconds.&quot;, 6570);
				c.getPA().sendFrame126(&quot;&quot;, 6572);
				c.getPA().sendFrame126(&quot;&quot;, 6664);
			//update interface here
			} else {
				saradominWait.remove(saradominWait.indexOf(player));
			}
		}
		for (int player : zamorakWait) {
			if (Server.playerHandler.players[player] != null) {
				Client c = (Client) Server.playerHandler.players[player];
				c.getPA().walkableInterface(6673);
				c.getPA().sendFrame126(&quot;Next Game Begins In : &quot; + gameStartTimer * 3 + &quot; seconds.&quot;, 6570);
				c.getPA().sendFrame126(&quot;&quot;, 6572);
				c.getPA().sendFrame126(&quot;&quot;, 6664);
			//update interface here
			} else {
				zamorakWait.remove(zamorakWait.indexOf(player));
			}
		}
	}
	
	public void updateInGamePlayers() {
		if (saradomin.size() &gt; 0) {
			for (int player : saradomin) {
				if (Server.playerHandler.players[player] != null) {
					Client c = (Client) Server.playerHandler.players[player];
					c.getPA().walkableInterface(11146);
					c.getPA().sendFrame126(saradominScore + &quot; = Saradomin&quot;, 11148);
					c.getPA().sendFrame126(&quot;Zamorak = &quot; + zamorakScore, 11147);
					c.getPA().sendFrame126(gameStartTimer * 3 + &quot; secs&quot;, 11155);
					c.getPA().sendFrame126(&quot;&quot;, 11158);
					c.getPA().sendFrame126(&quot;&quot;, 11160);
					c.getPA().sendFrame126(&quot;&quot;, 11162);
					c.getPA().sendFrame126(&quot;&quot;, 11164);
					c.getPA().sendFrame126(&quot;&quot;, 11168);
					if (saraFlagSafe) {
						c.getPA().sendFrame126(&quot;@gre@Safe&quot;, 11166);
					} else {
						c.getPA().sendFrame126(&quot;@red@Taken&quot;, 11166);
					}
					if (zammyFlagSafe) {
						c.getPA().sendFrame126(&quot;@gre@Safe&quot;, 11167);
					} else {
						c.getPA().sendFrame126(&quot;@red@Taken&quot;, 11167);
					}
				//update interface here
				} else {
					saradomin.remove(saradomin.indexOf(player));
				}
			
			}
		}
		if (zamorak.size() &gt; 0) {
			for (int player : zamorak) {
				if (Server.playerHandler.players[player] != null) {
					Client c = (Client) Server.playerHandler.players[player];
					c.getPA().walkableInterface(11146);
					c.getPA().sendFrame126(saradominScore + &quot; = Saradomin&quot;, 11148);
					c.getPA().sendFrame126(&quot;Zamorak = &quot; + zamorakScore, 11147);
					c.getPA().sendFrame126(gameStartTimer * 3 + &quot; secs&quot;, 11155);
					c.getPA().sendFrame126(&quot;&quot;, 11158);
					c.getPA().sendFrame126(&quot;&quot;, 11160);
					c.getPA().sendFrame126(&quot;&quot;, 11162);
					c.getPA().sendFrame126(&quot;&quot;, 11164);
					c.getPA().sendFrame126(&quot;&quot;, 11168);
					if (saraFlagSafe) {
						c.getPA().sendFrame126(&quot;@gre@Safe&quot;, 11166);
					} else {
						c.getPA().sendFrame126(&quot;@red@Taken&quot;, 11166);
					}
					if (zammyFlagSafe) {
						c.getPA().sendFrame126(&quot;@gre@Safe&quot;, 11167);
					} else {
						c.getPA().sendFrame126(&quot;@red@Taken&quot;, 11167);
					}
				//update interface here
				} else {
					zamorak.remove(zamorak.indexOf(player));
				}
			
			}
		}	
	
	}
	public void startGame() {
		gameStartTimer = -1;
		System.out.println(&quot;Starting Castle Wars game.&quot;);
		timeRemaining = GAME_TIMER;
		for (int player : saradominWait) {
			if (Server.playerHandler.players[player] != null) {
				//put player @ coords
				Client c = (Client)Server.playerHandler.players[player];
				c.getPA().walkableInterface(-1);
				c.getPA().movePlayer(2426 + Misc.random(3), 3076 - Misc.random(3), 1);
				saradomin.add(player);
				c.inCwWait = false;
				c.inCwGame = true;
			}		
		}
		saradominWait.clear();
		
		for (int player : zamorakWait) {
			if (Server.playerHandler.players[player] != null) {
				//put player @ coords
				Client c = (Client)Server.playerHandler.players[player];
				c.getPA().walkableInterface(-1);
				c.getPA().movePlayer(2373 + Misc.random(3), 3131 - Misc.random(3), 1);
				zamorak.add(player);
				c.inCwWait = false;
				c.inCwGame = true;
			}		
		}
		saradominWait.clear();
	}
	
	public void endGame() {
		timeRemaining = -1;
		System.out.println(&quot;Ending Castle Wars game.&quot;);
		gameStartTimer = GAME_START_TIMER;
	}
	
	public void handleObjects(Client c, int objectId, int objectX, int objectY){
		cwo.handleObject(c, objectId, objectX, objectY);
	}
}[/code]

Process being called in Server.java
[b]Server.java:[/b]
[code=Java]
package server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.text.DecimalFormat;

import org.apache.mina.common.IoAcceptor;
import org.apache.mina.transport.socket.nio.SocketAcceptor;
import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;

import server.event.EventManager;
import server.model.npcs.NPCHandler;
import server.model.npcs.NPCDrops;
import server.model.players.PlayerHandler;
import server.model.players.Player;
import server.model.players.Client;
import server.model.players.PlayerSave;
import server.model.minigames.*;
import server.net.ConnectionHandler;
import server.net.ConnectionThrottleFilter;
import server.util.ShutDownHook;
import server.util.SimpleTimer;
import server.util.log.Logger;
import server.event.Event; 
import server.event.EventContainer;
import server.world.ItemHandler;
import server.world.ObjectHandler;
import server.world.ObjectManager;
import server.world.ShopHandler;
import server.world.map.VirtualWorld;
import server.world.ClanChatHandler;
import server.world.WorldMap;
import server.world.WalkingHandler;

/**
 * Server.java
 *
 * @author Sanity
 * @author Graham
 * @author Blake
 * @author Ryan Lmctruck30
 *
 */

public class Server {
	
	
	public static boolean sleeping;
	public static int cycleRate;
	public static boolean UpdateServer = false;
	public static long lastMassSave = System.currentTimeMillis();
	private static IoAcceptor acceptor;
	private static ConnectionHandler connectionHandler;
	private static ConnectionThrottleFilter throttleFilter;
	private static SimpleTimer engineTimer, debugTimer;
	private static long cycleTime, cycles, totalCycleTime, sleepTime;
	private static DecimalFormat debugPercentFormat;
	public static boolean shutdownServer = false;		
	public static boolean shutdownClientHandler;			
	public static int serverlistenerPort; 
	public static ItemHandler itemHandler = new ItemHandler();
	public static PlayerHandler playerHandler = new PlayerHandler();
	public static NPCHandler npcHandler = new NPCHandler();
	public static ShopHandler shopHandler = new ShopHandler();
	public static ObjectHandler objectHandler = new ObjectHandler();
	public static ObjectManager objectManager = new ObjectManager();
	public static CastleWars castleWars = new CastleWars();
	public static FightPits fightPits = new FightPits();
	public static PestControl pestControl = new PestControl();
	public static NPCDrops npcDrops = new NPCDrops();
	public static ClanChatHandler clanChat = new ClanChatHandler();
	public static FightCaves fightCaves = new FightCaves();
	public static RFD rfd = new RFD();
	//public static WorldMap worldMap = new WorldMap();
	public static long[] TIMES = new long[5];
	//private static final WorkerThread engine = new WorkerThread();
	
	static {
		if(!Config.SERVER_DEBUG) {
			serverlistenerPort = 43594;
		} else {
			serverlistenerPort = 43595;
		}
		cycleRate = 575;
		shutdownServer = false;
		engineTimer = new SimpleTimer();
		debugTimer = new SimpleTimer();
		sleepTime = 0;
		debugPercentFormat = new DecimalFormat(&quot;0.0#%&quot;);
	}
	//height,absX,absY,toAbsX,toAbsY,type
    /*public static final boolean checkPos(int height,int absX,int absY,int toAbsX,int toAbsY,int type)
    {
        return I.I(height,absX,absY,toAbsX,toAbsY,type);
    }*/
	public static void main(java.lang.String args[]) throws NullPointerException, IOException {

		/**
		 * Starting Up Server
		 */
		 
		System.setOut(new Logger(System.out));
		System.setErr(new Logger(System.err));
		System.out.println(&quot;Launching BrokenX v2...&quot;);
		
		/**
		 * World Map Loader
		 */
		//if(!Config.SERVER_DEBUG)
			//VirtualWorld.init();
		//WorldMap.loadWorldMap();	

		/**
		 * Script Loader
		 */
		//ScriptManager.loadScripts();
		
		/**
		 * Accepting Connections
		 */
		acceptor = new SocketAcceptor();
		connectionHandler = new ConnectionHandler();
		
		SocketAcceptorConfig sac = new SocketAcceptorConfig();
		sac.getSessionConfig().setTcpNoDelay(false);
		sac.setReuseAddress(true);
		sac.setBacklog(100);
		
		throttleFilter = new ConnectionThrottleFilter(Config.CONNECTION_DELAY);
		sac.getFilterChain().addFirst(&quot;throttleFilter&quot;, throttleFilter);
		acceptor.bind(new InetSocketAddress(serverlistenerPort), connectionHandler, sac);

		/**
		 * Initialize Handlers
		 */
		//VoteForCash.createConnection();
		EventManager.initialize();
		Connection.initialize();
		//PlayerSaving.initialize();
		//MysqlManager.createConnection();
		
		/**
		 * Clipped Following (NPC)
		 */
		try {
		 WalkingHandler.getSingleton().initialize();
		} catch(Exception ex) {
		ex.printStackTrace();
		}
		/**
		 * Server Successfully Loaded 
		 */
		System.out.println(&quot;Server listening on port:&quot; + serverlistenerPort);
		/**
		 * Main Server Tick
		 */
		try {
			while (!Server.shutdownServer) {
				if (sleepTime &gt; 0)
					Thread.sleep(sleepTime);
				engineTimer.reset();
				itemHandler.process();
				playerHandler.process();	
	                        npcHandler.process();
				shopHandler.process();
				objectManager.process();
				fightPits.process();
				pestControl.process();
                                castleWars.process();
				cycleTime = engineTimer.elapsed();
				if(cycleTime &lt; 575)
					sleepTime = cycleRate - cycleTime;
				else
					sleepTime = 0;
				totalCycleTime += cycleTime;
				cycles++;
				debug();
				if(Config.SERVER_DEBUG) //i see.... i used wrong symbol lol LOL !
					//System.out.println(cycleTime+&quot;--&quot;+sleepTime);
				if (System.currentTimeMillis() - lastMassSave &gt; 25000) {
					for(Player p : PlayerHandler.players) {
						if(p == null)
							continue;						
						PlayerSave.saveGame((Client)p);
						System.out.println(&quot;Saved game for &quot; + p.playerName + &quot;.&quot;);
						lastMassSave = System.currentTimeMillis();
					}
				
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println(&quot;A fatal exception has been thrown!&quot;);
			for(Player p : PlayerHandler.players) {
				if(p == null)
					continue;						
				PlayerSave.saveGame((Client)p);
				System.out.println(&quot;Saved game for &quot; + p.playerName + &quot;.&quot;);
			}
		}
		acceptor = null;
		connectionHandler = null;
		sac = null;
		System.exit(0);
	}
	
	public static void processAllPackets() {
		for (int j = 0; j &lt; playerHandler.players.length; j++) {
			if (playerHandler.players[j] != null) {
				while(playerHandler.players[j].processQueuedPackets());			
			}	
		}
	}
	
	public static boolean playerExecuted = false;
	private static void debug() {
		if (debugTimer.elapsed() &gt; 360*1000 || playerExecuted) {
			long averageCycleTime = totalCycleTime / cycles;
			System.out.println(&quot;Average Cycle Time: &quot; + averageCycleTime + &quot;ms&quot;);
			double engineLoad = ((double) averageCycleTime / (double) cycleRate);
			System.out.println(&quot;Players online: &quot; + PlayerHandler.playerCount+ &quot;, engine load: &quot;+ debugPercentFormat.format(engineLoad));
			totalCycleTime = 0;
			cycles = 0;
			System.gc();
			System.runFinalization();
			debugTimer.reset();
			playerExecuted = false;
		}
	}
	
	public static long getSleepTimer() {
		return sleepTime;
	}
	
}
[/code]
I have a much better way of doing this, but I have no idea how he got 200 = 15 minutes. It doesn&#39;t work either, as when I join the game the time is -3 because the idiot that wrote this forgot that he didn&#39;t define public int timeRemaining as anything else besides -1. :fp: was really a mess trying to understand what he was trying to do.

As a review of what I want to know, how do those numbers interact with each other? Like is 200 in milliseconds? How is it defined as milliseconds? And no, none of those are defined anywhere else.</description>
    
    <lastBuildDate>Sat, 30 Jul 2011 02:17:17 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/timers/407178.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>Timers</title>
        <dc:creator><![CDATA[@the_wanderer The Wanderer]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/the_wanderer">@the_wanderer</a> wrote:</p>
          <blockquote>
              <p>Okay, I’m helping this kid make Castle Wars and the current Castle Wars he has is a skull fuck, trust me. What I don’t get is where he is getting these numbers for his timers.<br>
<span class="bbcode-b">CastleWars.java:</span></p>
<p>[code=Java]<br>
package server.model.minigames;</p>
<p>import java.util.ArrayList;</p>
<p>import server.Server;<br>
import server.model.players.Client;<br>
import server.util.Misc;</p>
<p>public class CastleWars {</p>
<pre><code>private CastleWarObjects cwo = new CastleWarObjects();

public CastleWars() {
	/**
	* Constructor
	*/
}

public ArrayList&lt;Integer&gt; saradomin = new ArrayList&lt;Integer&gt; (); //team 1
public ArrayList&lt;Integer&gt; zamorak = new ArrayList&lt;Integer&gt; (); //team 2
public ArrayList&lt;Integer&gt; saradominWait = new ArrayList&lt;Integer&gt; (); //team 1
public ArrayList&lt;Integer&gt; zamorakWait = new ArrayList&lt;Integer&gt; (); //team 2
public int saradominScore = 0;
public int zamorakScore = 0;
public boolean saraFlagSafe = true;
public boolean zammyFlagSafe = true;
private final int GAME_TIMER = 200; //1500 * 600 = 900000ms = 15 minutes
private final int GAME_START_TIMER = 20;	
public int timeRemaining = -1;
public int gameStartTimer = GAME_START_TIMER;


public void joinWait(Client c, int team) {
	if (c.playerEquipment[c.playerHat] &gt; 0 || c.playerEquipment[c.playerCape] &gt; 0) {
		c.sendMessage("You may not wear capes or helmets inside of castle wars.");
		return;
	}
	if (team == 1) {
		if (saradominWait.size() &gt; zamorakWait.size()) {
			c.sendMessage("This team is currently full.");
			return;
		} else {
			saradominWait.add(c.playerId);
			c.castleWarsTeam = 1;
                            toWaitingRoom(c, c.castleWarsTeam);
                            c.sendMessage("You have been added to the Saradomin team.");
		}
	} else if (team == 2) {
		if (zamorakWait.size() &gt; saradominWait.size()) {
			c.sendMessage("This team is currently full.");
			return;
		} else {
			zamorakWait.add(c.playerId);
			c.castleWarsTeam = 2;
                            toWaitingRoom(c, c.castleWarsTeam);
                            c.sendMessage("You have been added to the Zamorak team.");
		}
	}
}

public void toWaitingRoom(Client c, int team) {
	if (team == 1) {
		c.getPA().movePlayer(2377 + Misc.random(10), 9485 + Misc.random(5),0);
	} else if (team == 2) {
		c.getPA().movePlayer(2417 + Misc.random(10), 9485 + Misc.random(7),0);
	}
	c.inCwWait = true;
}

public void leaveWaitingRoom(Client c) {
	c.inCwWait = false;
	c.getPA().movePlayer(2439 + Misc.random(4), 3085 + Misc.random(5), 0);
	if (c.castleWarsTeam == 1) {
		saradominWait.remove(saradomin.indexOf(c.playerId));
		c.castleWarsTeam = -1;
	} else if (c.castleWarsTeam == 2) {
		zamorakWait.remove(zamorak.indexOf(c.playerId));
		c.castleWarsTeam = -1;
	}			
}


int properTimer = 0;
public void process() {
	if (properTimer &gt; 0) {
		properTimer--;
		return;
	} else {
		properTimer = 4;
	}
		
	if (gameStartTimer &gt; 0) {
		gameStartTimer--;
		updatePlayers();
	} else if (gameStartTimer == 0) {
		startGame();
	}
	if (timeRemaining &gt; 0) {
		timeRemaining--;
		updateInGamePlayers();
	} else if (timeRemaining == 0) {
		endGame();
	}
	/** 
	* The process of the castle wars game - called every 3 seconds
	*/
}

public void updatePlayers() {
	//saradomin players
	for (int player : saradominWait) {
		if (Server.playerHandler.players[player] != null) {
			Client c = (Client) Server.playerHandler.players[player];
			c.getPA().walkableInterface(6673);
			c.getPA().sendFrame126("Next Game Begins In : " + gameStartTimer * 3 + " seconds.", 6570);
			c.getPA().sendFrame126("", 6572);
			c.getPA().sendFrame126("", 6664);
		//update interface here
		} else {
			saradominWait.remove(saradominWait.indexOf(player));
		}
	}
	for (int player : zamorakWait) {
		if (Server.playerHandler.players[player] != null) {
			Client c = (Client) Server.playerHandler.players[player];
			c.getPA().walkableInterface(6673);
			c.getPA().sendFrame126("Next Game Begins In : " + gameStartTimer * 3 + " seconds.", 6570);
			c.getPA().sendFrame126("", 6572);
			c.getPA().sendFrame126("", 6664);
		//update interface here
		} else {
			zamorakWait.remove(zamorakWait.indexOf(player));
		}
	}
}

public void updateInGamePlayers() {
	if (saradomin.size() &gt; 0) {
		for (int player : saradomin) {
			if (Server.playerHandler.players[player] != null) {
				Client c = (Client) Server.playerHandler.players[player];
				c.getPA().walkableInterface(11146);
				c.getPA().sendFrame126(saradominScore + " = Saradomin", 11148);
				c.getPA().sendFrame126("Zamorak = " + zamorakScore, 11147);
				c.getPA().sendFrame126(gameStartTimer * 3 + " secs", 11155);
				c.getPA().sendFrame126("", 11158);
				c.getPA().sendFrame126("", 11160);
				c.getPA().sendFrame126("", 11162);
				c.getPA().sendFrame126("", 11164);
				c.getPA().sendFrame126("", 11168);
				if (saraFlagSafe) {
					c.getPA().sendFrame126("@gre@Safe", 11166);
				} else {
					c.getPA().sendFrame126("@red@Taken", 11166);
				}
				if (zammyFlagSafe) {
					c.getPA().sendFrame126("@gre@Safe", 11167);
				} else {
					c.getPA().sendFrame126("@red@Taken", 11167);
				}
			//update interface here
			} else {
				saradomin.remove(saradomin.indexOf(player));
			}
		
		}
	}
	if (zamorak.size() &gt; 0) {
		for (int player : zamorak) {
			if (Server.playerHandler.players[player] != null) {
				Client c = (Client) Server.playerHandler.players[player];
				c.getPA().walkableInterface(11146);
				c.getPA().sendFrame126(saradominScore + " = Saradomin", 11148);
				c.getPA().sendFrame126("Zamorak = " + zamorakScore, 11147);
				c.getPA().sendFrame126(gameStartTimer * 3 + " secs", 11155);
				c.getPA().sendFrame126("", 11158);
				c.getPA().sendFrame126("", 11160);
				c.getPA().sendFrame126("", 11162);
				c.getPA().sendFrame126("", 11164);
				c.getPA().sendFrame126("", 11168);
				if (saraFlagSafe) {
					c.getPA().sendFrame126("@gre@Safe", 11166);
				} else {
					c.getPA().sendFrame126("@red@Taken", 11166);
				}
				if (zammyFlagSafe) {
					c.getPA().sendFrame126("@gre@Safe", 11167);
				} else {
					c.getPA().sendFrame126("@red@Taken", 11167);
				}
			//update interface here
			} else {
				zamorak.remove(zamorak.indexOf(player));
			}
		
		}
	}	

}
public void startGame() {
	gameStartTimer = -1;
	System.out.println("Starting Castle Wars game.");
	timeRemaining = GAME_TIMER;
	for (int player : saradominWait) {
		if (Server.playerHandler.players[player] != null) {
			//put player @ coords
			Client c = (Client)Server.playerHandler.players[player];
			c.getPA().walkableInterface(-1);
			c.getPA().movePlayer(2426 + Misc.random(3), 3076 - Misc.random(3), 1);
			saradomin.add(player);
			c.inCwWait = false;
			c.inCwGame = true;
		}		
	}
	saradominWait.clear();
	
	for (int player : zamorakWait) {
		if (Server.playerHandler.players[player] != null) {
			//put player @ coords
			Client c = (Client)Server.playerHandler.players[player];
			c.getPA().walkableInterface(-1);
			c.getPA().movePlayer(2373 + Misc.random(3), 3131 - Misc.random(3), 1);
			zamorak.add(player);
			c.inCwWait = false;
			c.inCwGame = true;
		}		
	}
	saradominWait.clear();
}

public void endGame() {
	timeRemaining = -1;
	System.out.println("Ending Castle Wars game.");
	gameStartTimer = GAME_START_TIMER;
}

public void handleObjects(Client c, int objectId, int objectX, int objectY){
	cwo.handleObject(c, objectId, objectX, objectY);
}
</code></pre>
<p>}[/code]</p>
<p>Process being called in Server.java<br>
<span class="bbcode-b">Server.java:</span></p>
<pre><code class="lang-auto">package server;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.text.DecimalFormat;

import org.apache.mina.common.IoAcceptor;
import org.apache.mina.transport.socket.nio.SocketAcceptor;
import org.apache.mina.transport.socket.nio.SocketAcceptorConfig;

import server.event.EventManager;
import server.model.npcs.NPCHandler;
import server.model.npcs.NPCDrops;
import server.model.players.PlayerHandler;
import server.model.players.Player;
import server.model.players.Client;
import server.model.players.PlayerSave;
import server.model.minigames.*;
import server.net.ConnectionHandler;
import server.net.ConnectionThrottleFilter;
import server.util.ShutDownHook;
import server.util.SimpleTimer;
import server.util.log.Logger;
import server.event.Event; 
import server.event.EventContainer;
import server.world.ItemHandler;
import server.world.ObjectHandler;
import server.world.ObjectManager;
import server.world.ShopHandler;
import server.world.map.VirtualWorld;
import server.world.ClanChatHandler;
import server.world.WorldMap;
import server.world.WalkingHandler;

/**
 * Server.java
 *
 * @author Sanity
 * @author Graham
 * @author Blake
 * @author Ryan Lmctruck30
 *
 */

public class Server {
	
	
	public static boolean sleeping;
	public static int cycleRate;
	public static boolean UpdateServer = false;
	public static long lastMassSave = System.currentTimeMillis();
	private static IoAcceptor acceptor;
	private static ConnectionHandler connectionHandler;
	private static ConnectionThrottleFilter throttleFilter;
	private static SimpleTimer engineTimer, debugTimer;
	private static long cycleTime, cycles, totalCycleTime, sleepTime;
	private static DecimalFormat debugPercentFormat;
	public static boolean shutdownServer = false;		
	public static boolean shutdownClientHandler;			
	public static int serverlistenerPort; 
	public static ItemHandler itemHandler = new ItemHandler();
	public static PlayerHandler playerHandler = new PlayerHandler();
	public static NPCHandler npcHandler = new NPCHandler();
	public static ShopHandler shopHandler = new ShopHandler();
	public static ObjectHandler objectHandler = new ObjectHandler();
	public static ObjectManager objectManager = new ObjectManager();
	public static CastleWars castleWars = new CastleWars();
	public static FightPits fightPits = new FightPits();
	public static PestControl pestControl = new PestControl();
	public static NPCDrops npcDrops = new NPCDrops();
	public static ClanChatHandler clanChat = new ClanChatHandler();
	public static FightCaves fightCaves = new FightCaves();
	public static RFD rfd = new RFD();
	//public static WorldMap worldMap = new WorldMap();
	public static long[] TIMES = new long[5];
	//private static final WorkerThread engine = new WorkerThread();
	
	static {
		if(!Config.SERVER_DEBUG) {
			serverlistenerPort = 43594;
		} else {
			serverlistenerPort = 43595;
		}
		cycleRate = 575;
		shutdownServer = false;
		engineTimer = new SimpleTimer();
		debugTimer = new SimpleTimer();
		sleepTime = 0;
		debugPercentFormat = new DecimalFormat("0.0#%");
	}
	//height,absX,absY,toAbsX,toAbsY,type
    /*public static final boolean checkPos(int height,int absX,int absY,int toAbsX,int toAbsY,int type)
    {
        return I.I(height,absX,absY,toAbsX,toAbsY,type);
    }*/
	public static void main(java.lang.String args[]) throws NullPointerException, IOException {

		/**
		 * Starting Up Server
		 */
		 
		System.setOut(new Logger(System.out));
		System.setErr(new Logger(System.err));
		System.out.println("Launching BrokenX v2...");
		
		/**
		 * World Map Loader
		 */
		//if(!Config.SERVER_DEBUG)
			//VirtualWorld.init();
		//WorldMap.loadWorldMap();	

		/**
		 * Script Loader
		 */
		//ScriptManager.loadScripts();
		
		/**
		 * Accepting Connections
		 */
		acceptor = new SocketAcceptor();
		connectionHandler = new ConnectionHandler();
		
		SocketAcceptorConfig sac = new SocketAcceptorConfig();
		sac.getSessionConfig().setTcpNoDelay(false);
		sac.setReuseAddress(true);
		sac.setBacklog(100);
		
		throttleFilter = new ConnectionThrottleFilter(Config.CONNECTION_DELAY);
		sac.getFilterChain().addFirst("throttleFilter", throttleFilter);
		acceptor.bind(new InetSocketAddress(serverlistenerPort), connectionHandler, sac);

		/**
		 * Initialize Handlers
		 */
		//VoteForCash.createConnection();
		EventManager.initialize();
		Connection.initialize();
		//PlayerSaving.initialize();
		//MysqlManager.createConnection();
		
		/**
		 * Clipped Following (NPC)
		 */
		try {
		 WalkingHandler.getSingleton().initialize();
		} catch(Exception ex) {
		ex.printStackTrace();
		}
		/**
		 * Server Successfully Loaded 
		 */
		System.out.println("Server listening on port:" + serverlistenerPort);
		/**
		 * Main Server Tick
		 */
		try {
			while (!Server.shutdownServer) {
				if (sleepTime &gt; 0)
					Thread.sleep(sleepTime);
				engineTimer.reset();
				itemHandler.process();
				playerHandler.process();	
	                        npcHandler.process();
				shopHandler.process();
				objectManager.process();
				fightPits.process();
				pestControl.process();
                                castleWars.process();
				cycleTime = engineTimer.elapsed();
				if(cycleTime &lt; 575)
					sleepTime = cycleRate - cycleTime;
				else
					sleepTime = 0;
				totalCycleTime += cycleTime;
				cycles++;
				debug();
				if(Config.SERVER_DEBUG) //i see.... i used wrong symbol lol LOL !
					//System.out.println(cycleTime+"--"+sleepTime);
				if (System.currentTimeMillis() - lastMassSave &gt; 25000) {
					for(Player p : PlayerHandler.players) {
						if(p == null)
							continue;						
						PlayerSave.saveGame((Client)p);
						System.out.println("Saved game for " + p.playerName + ".");
						lastMassSave = System.currentTimeMillis();
					}
				
				}
			}
		} catch (Exception ex) {
			ex.printStackTrace();
			System.out.println("A fatal exception has been thrown!");
			for(Player p : PlayerHandler.players) {
				if(p == null)
					continue;						
				PlayerSave.saveGame((Client)p);
				System.out.println("Saved game for " + p.playerName + ".");
			}
		}
		acceptor = null;
		connectionHandler = null;
		sac = null;
		System.exit(0);
	}
	
	public static void processAllPackets() {
		for (int j = 0; j &lt; playerHandler.players.length; j++) {
			if (playerHandler.players[j] != null) {
				while(playerHandler.players[j].processQueuedPackets());			
			}	
		}
	}
	
	public static boolean playerExecuted = false;
	private static void debug() {
		if (debugTimer.elapsed() &gt; 360*1000 || playerExecuted) {
			long averageCycleTime = totalCycleTime / cycles;
			System.out.println("Average Cycle Time: " + averageCycleTime + "ms");
			double engineLoad = ((double) averageCycleTime / (double) cycleRate);
			System.out.println("Players online: " + PlayerHandler.playerCount+ ", engine load: "+ debugPercentFormat.format(engineLoad));
			totalCycleTime = 0;
			cycles = 0;
			System.gc();
			System.runFinalization();
			debugTimer.reset();
			playerExecuted = false;
		}
	}
	
	public static long getSleepTimer() {
		return sleepTime;
	}
	
}</code></pre>
<p>I have a much better way of doing this, but I have no idea how he got 200 = 15 minutes. It doesn’t work either, as when I join the game the time is -3 because the idiot that wrote this forgot that he didn’t define public int timeRemaining as anything else besides -1. :fp: was really a mess trying to understand what he was trying to do.</p>
<p>As a review of what I want to know, how do those numbers interact with each other? Like is 200 in milliseconds? How is it defined as milliseconds? And no, none of those are defined anywhere else.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/timers/407178/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/timers/407178/1</link>
        <pubDate>Sat, 30 Jul 2011 02:17:17 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-407178-1</guid>
        <source url="https://forum.moparisthebest.com/t/timers/407178.rss">Timers</source>
      </item>
  </channel>
</rss>
