<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>639 - Nex Base - 639</title>
    <link>https://forum.moparisthebest.com/t/639-nex-base-639/421871</link>
    <description>NOTE: THIS DOES NOT INCLUDE THE STAGES, THIS IS SIMPLY ALLOWING NEX TO USE ALL 3 COMBAT ATTACKS AND PROPER GFX AND ANIMS!!

Hey, Got bored last night so I wrote a really basic Nex and NexAction class.
The purpose of this is to allow Nex to switch combat styles and use the correct animations and graphics when using different attacks.

Nex.java
[CODE]package org.dementhium.model.npc.impl;

import java.util.List;
import java.util.Random;

import org.dementhium.model.Mob;
import org.dementhium.model.Projectile;
import org.dementhium.model.World;
import org.dementhium.model.combat.CombatAction;
import org.dementhium.model.combat.CombatType;
import org.dementhium.model.combat.CombatUtils;
import org.dementhium.model.combat.Damage;
import org.dementhium.model.combat.Interaction;
import org.dementhium.model.combat.impl.npc.NexAction;
import org.dementhium.model.map.Region;
import org.dementhium.model.mask.Animation;
import org.dementhium.model.mask.Graphic;
import org.dementhium.model.npc.NPC;
import org.dementhium.model.player.Player;
import org.dementhium.tickable.Tick;
import org.dementhium.util.Misc;

/**
 * Represents Nex.
 * @author Eclipse
 *
 */
public class Nex extends NPC {

	/**
	 * The combat action to use.
	 */
	private final NexAction combatAction = new NexAction();
	
	private static Random r = new Random();
	
	
	
	/**
	 * The projectile Nex uses.
	 */
	private final Projectile projectile = 
			Projectile.create(this, null, 2244, 43, 0, 56, 76, 3, size());
	
	/**
	 * The amount of damage received.
	 */
	private int damageReceived;
	
		
	/**
	 * Constructs a new {@code Nex} {@code Object}.
	 * @param id The npc id.
	 */
	public Nex(int id) {
		super(id);
	}
	
	@Override
	public int size() {
		return 4;
	}
	
	@Override
	public void tick() {
		super.tick();
		if (getAttribute(&quot;nextSwitch&quot;, -1) &lt; World.getTicks()) {
			setAttribute(&quot;nextSwitch&quot;, (Misc.random(15)) );
			World.getWorld().submit(new Tick(1) {
				@Override
				public void execute() {
					stop();
					NexAction.sendLocationAttack(Nex.this);
					combatAction.setType(CombatType.values()[getRandom().nextInt(3)]);
				}				
			});
		}
	}
	
	
	@Override
	public Damage updateHit(Mob source, int hit, CombatType type) {
		int currentHit = hit;
		if (CombatUtils.usingProtection(this, type)) {
			currentHit = (int) (hit * (source.isPlayer() ? 0.6 : 0));
		}
		damageReceived += currentHit &lt; 20 ? 20 : currentHit;
		if (damageReceived &gt;= 310) {
		}
		return new Damage(currentHit);
	}
	
	@Override
	public void postCombatTick(Interaction interaction) {
		super.postCombatTick(interaction);
	}
	
	
	@Override
	public CombatAction getCombatAction() {
		return combatAction;
	}

	/**
	 * @return the projectile
	 */
	public Projectile getProjectile() {
		return projectile;
	}

}[/CODE]


NexAction.java
[CODE]package org.dementhium.model.combat.impl.npc;

import java.util.ArrayList;
import java.util.List;

import org.dementhium.content.skills.Prayer;
import org.dementhium.model.Location;
import org.dementhium.model.Projectile;
import org.dementhium.model.World;
import org.dementhium.model.combat.CombatAction;
import org.dementhium.model.combat.CombatType;
import org.dementhium.model.combat.Damage;
import org.dementhium.model.combat.MagicFormulae;
import org.dementhium.model.combat.MeleeFormulae;
import org.dementhium.model.combat.RangeFormulae;
import org.dementhium.model.map.Region;
import org.dementhium.model.mask.Animation;
import org.dementhium.model.mask.Graphic;
import org.dementhium.model.misc.DamageManager.DamageType;
import org.dementhium.model.misc.ProjectileManager;
import org.dementhium.model.npc.impl.Nex;
import org.dementhium.model.player.Player;
import org.dementhium.net.ActionSender;
import org.dementhium.tickable.Tick;

/**
 * Handles nex&#39;s combat action.
 * @author Eclipse
 *
 */
public class NexAction extends CombatAction {
	
	/**
	 * The current combat type used.
	 */
	private CombatType type = CombatType.MAGIC;
	
	/**
	 *  nex&#39;s attacks.
	 * @author Eclipse
	 *
	 */
	private static enum Attack {
		MELEE(Animation.create(6354), Graphic.create(-1), null, null),
		RANGE(Animation.create(6986), Graphic.create(2244), null, null),
		MAGIC(Animation.create(6987), Graphic.create(2244), null, null);
		
		/**
		 * The attack animation.
		 */
		private final Animation anim;
		
		/**
		 * The start graphic.
		 */
		private final Graphic start;
		
		/**
		 * The projectile to send.
		 */
		private final Projectile projectile;
		
		/**
		 * The end graphic.
		 */
		private final Graphic end;
		
		/**
		 * Constructs a new {@code Attack} {@code Object}.
		 * @param anim The attack animation.
		 * @param start The start graphic.
		 * @param projectile The projectile.
		 * @param end The end graphic.
		 */
		private Attack(Animation anim, Graphic start, Projectile projectile, Graphic end) {
			this.anim = anim;
			this.start = start;
			this.projectile = projectile;
			this.end = end;
		}
	}
	
	/**
	 * The current attack.
	 */
	private Attack attack;
	
	/**
	 * Constructs a new {@code NexAction} {@code Object}.
	 * @param nex using this combat action.
	 */
	public NexAction() {
		super(false);
	}

	@Override
	public boolean commenceSession() {
		interaction.getSource().getCombatExecutor().setTicks(interaction.getSource().getAttackDelay());
		attack = Attack.values()[type.ordinal()];
		int currentHit = 0;
		int maximum = 200;
		if (attack == Attack.MELEE) {
			maximum = 200;
			currentHit = MeleeFormulae.getDamage(interaction.getSource(), interaction.getVictim());
		} else if (attack == Attack.RANGE) {
			currentHit = RangeFormulae.getDamage(interaction.getSource(), interaction.getVictim());
		} else {
			currentHit = MagicFormulae.getDamage(interaction.getSource().getNPC(), interaction.getVictim(), 1.0, 1.0, 1.0);
		}
		interaction.setDeflected(interaction.getVictim().getPlayer().getPrayer().usingPrayer(1, type.getDeflectCurse()));
		interaction.setDamage(Damage.getDamage(interaction.getSource(), 
				interaction.getVictim(), type, currentHit));
		interaction.getDamage().setMaximum(maximum);
		if (attack.projectile != null) {
			ProjectileManager.sendProjectile(attack.projectile.transform(interaction.getSource(), interaction.getVictim()));
		}
		interaction.getSource().animate(attack.anim);
		interaction.getSource().graphics(attack.start);
        int ticks = attack.projectile != null ? (int) Math.floor(attack.projectile.getSourceLocation().distance(interaction.getVictim().getLocation()) * 0.3)
        		: 1;
		interaction.setTicks(ticks);
		return true;
	}

	@Override
	public boolean executeSession() {
		if (interaction.getTicks() &lt; 2 || type == CombatType.MELEE) {
			if (interaction.isDeflected()) {
				interaction.getVictim().graphics(2230 - type.ordinal());
			}
			interaction.getVictim().animate(interaction.isDeflected() ? 12573 : interaction.getVictim().getDefenceAnimation());
		}
		interaction.setTicks(interaction.getTicks() - 1);
		return interaction.getTicks() &lt; 1;
	}

	@Override
	public boolean endSession() {
		if (attack != Attack.MELEE) {
			interaction.getVictim().graphics(attack.end);
		}
		if (interaction.getDamage().getHit() &gt; -1) {
			interaction.getVictim().getDamageManager().damage(
					interaction.getSource(), interaction.getDamage(), type.getDamageType());
		} else {
			interaction.getVictim().graphics(85, 96 &lt;&lt; 16);
		}
		if (interaction.getDamage().getVenged() &gt; 0) {
			interaction.getVictim().submitVengeance(interaction.getSource(), interaction.getDamage().getVenged());
		}
		if (interaction.getDamage().getDeflected() &gt; 0) {
			interaction.getSource().getDamageManager().damage(interaction.getVictim(), 
					interaction.getDamage().getDeflected(), 
					interaction.getDamage().getDeflected(), DamageType.DEFLECT);
		}
		if (interaction.getDamage().getRecoiled() &gt; 0) {
			interaction.getSource().getDamageManager().damage(interaction.getVictim(), 
					interaction.getDamage().getRecoiled(), 
					interaction.getDamage().getRecoiled(), DamageType.DEFLECT);
		}
		interaction.getVictim().retaliate(interaction.getSource());
		return true;
	}

	/**
	 * Sends the magic-based location attack.
	 * @param npc nex.
	 */
	public static void sendLocationAttack(final Nex nex) {
		List&lt;Player&gt; players = Region.getLocalPlayers(nex.getLocation(), 12);
		if (players.size() &lt; 1) {
			return;
		}
		Player player = players.get(nex.getRandom().nextInt(players.size()));
		List&lt;Location&gt; locations = new ArrayList&lt;Location&gt;();
		int clippingMask;
		for (int x = player.getLocation().getX() - 5; x &lt; player.getLocation().getX() + 6; x++) {
			for (int y = player.getLocation().getY() - 5; y &lt; player.getLocation().getY() + 6; y++) {
				clippingMask = Region.getClippingMask(x, y, 0);
		        if ((clippingMask &amp; 0x1280180) == 0 &amp;&amp; (clippingMask &amp; 0x1280108) == 0
		        		&amp;&amp; (clippingMask &amp; 0x1280120) == 0 &amp;&amp; (clippingMask &amp; 0x1280102) == 0) {
		        	locations.add(Location.locate(x, y, 0));
		        }
			}
		}
		if (locations.size() &lt; 1) {
			return;
		}
		final Location l = locations.get(nex.getRandom().nextInt(locations.size()));
		int ticks = (int) Math.floor(nex.getProjectile().getSourceLocation().distance(l) * 0.5);
		World.getWorld().submit(new Tick(ticks + 1) {
			@Override
			public void execute() {
				stop();
				List&lt;Player&gt; players = Region.getLocalPlayers(l, 5);
				for (Player p : players) {
					ActionSender.sendPositionedGraphic(p, l, 1883);
					int damage = 269;
					if (p.getPrayer().usingPrayer(0, Prayer.PROTECT_FROM_MAGIC)) {
						damage = 1;
						p.animate(p.getDefenceAnimation());
					} else if (p.getPrayer().usingPrayer(1, Prayer.DEFLECT_MAGIC)) {
						damage = 1;
						p.graphics(2228);
						p.animate(12573);
					}
					p.getDamageManager().damage(nex, p.getRandom().nextInt(damage), 269, DamageType.MAGE);
				}
			}			
		});
	}
	
	@Override
	public CombatType getCombatType() {
		return type;
	}

	/**
	 * Sets the current combat type.
	 * @param combatType The combat type.
	 */
	public void setType(CombatType combatType) {
		this.type = combatType;
	}

}[/CODE]</description>
    
    <lastBuildDate>Wed, 16 Nov 2011 21:57:41 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/639-nex-base-639/421871.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>639 - Nex Base - 639</title>
        <dc:creator><![CDATA[@deathschaos9 DeathsChaos9]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/deathschaos9">@deathschaos9</a> wrote:</p>
          <blockquote>
              <p>This is a snippet, not a tutorial.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/639-nex-base-639/421871/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/639-nex-base-639/421871/2</link>
        <pubDate>Wed, 16 Nov 2011 21:57:41 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421871-2</guid>
        <source url="https://forum.moparisthebest.com/t/639-nex-base-639/421871.rss">639 - Nex Base - 639</source>
      </item>
      <item>
        <title>639 - Nex Base - 639</title>
        <dc:creator><![CDATA[@Ecstacy_Pkz Ecstacy Pkz]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ecstacy_pkz">@Ecstacy_Pkz</a> wrote:</p>
          <blockquote>
              <p>NOTE: THIS DOES NOT INCLUDE THE STAGES, THIS IS SIMPLY ALLOWING NEX TO USE ALL 3 COMBAT ATTACKS AND PROPER GFX AND ANIMS!!</p>
<p>Hey, Got bored last night so I wrote a really basic Nex and NexAction class.<br>
The purpose of this is to allow Nex to switch combat styles and use the correct animations and graphics when using different attacks.</p>
<p>Nex.java</p>
<p>[CODE]package org.dementhium.model.npc.impl;</p>
<p>import java.util.List;<br>
import java.util.Random;</p>
<p>import org.dementhium.model.Mob;<br>
import org.dementhium.model.Projectile;<br>
import org.dementhium.model.World;<br>
import org.dementhium.model.combat.CombatAction;<br>
import org.dementhium.model.combat.CombatType;<br>
import org.dementhium.model.combat.CombatUtils;<br>
import org.dementhium.model.combat.Damage;<br>
import org.dementhium.model.combat.Interaction;<br>
import org.dementhium.model.combat.impl.npc.NexAction;<br>
import org.dementhium.model.map.Region;<br>
import org.dementhium.model.mask.Animation;<br>
import org.dementhium.model.mask.Graphic;<br>
import org.dementhium.model.npc.NPC;<br>
import org.dementhium.model.player.Player;<br>
import org.dementhium.tickable.Tick;<br>
import org.dementhium.util.Misc;</p>
<p>/**</p>
<ul>
<li>Represents Nex.</li>
<li>
<span class="mention">@author</span> Eclipse</li>
<li>
</li>
</ul>
<p>*/<br>
public class Nex extends NPC {</p>
<pre><code>/**
 * The combat action to use.
 */
private final NexAction combatAction = new NexAction();

private static Random r = new Random();



/**
 * The projectile Nex uses.
 */
private final Projectile projectile = 
		Projectile.create(this, null, 2244, 43, 0, 56, 76, 3, size());

/**
 * The amount of damage received.
 */
private int damageReceived;

	
/**
 * Constructs a new {@code Nex} {@code Object}.
 * @param id The npc id.
 */
public Nex(int id) {
	super(id);
}

@Override
public int size() {
	return 4;
}

@Override
public void tick() {
	super.tick();
	if (getAttribute("nextSwitch", -1) &lt; World.getTicks()) {
		setAttribute("nextSwitch", (Misc.random(15)) );
		World.getWorld().submit(new Tick(1) {
			@Override
			public void execute() {
				stop();
				NexAction.sendLocationAttack(Nex.this);
				combatAction.setType(CombatType.values()[getRandom().nextInt(3)]);
			}				
		});
	}
}


@Override
public Damage updateHit(Mob source, int hit, CombatType type) {
	int currentHit = hit;
	if (CombatUtils.usingProtection(this, type)) {
		currentHit = (int) (hit * (source.isPlayer() ? 0.6 : 0));
	}
	damageReceived += currentHit &lt; 20 ? 20 : currentHit;
	if (damageReceived &gt;= 310) {
	}
	return new Damage(currentHit);
}

@Override
public void postCombatTick(Interaction interaction) {
	super.postCombatTick(interaction);
}


@Override
public CombatAction getCombatAction() {
	return combatAction;
}

/**
 * @return the projectile
 */
public Projectile getProjectile() {
	return projectile;
}
</code></pre>
<p>}[/CODE]</p>
<p>NexAction.java</p>
<p>[CODE]package org.dementhium.model.combat.impl.npc;</p>
<p>import java.util.ArrayList;<br>
import java.util.List;</p>
<p>import org.dementhium.content.skills.Prayer;<br>
import org.dementhium.model.Location;<br>
import org.dementhium.model.Projectile;<br>
import org.dementhium.model.World;<br>
import org.dementhium.model.combat.CombatAction;<br>
import org.dementhium.model.combat.CombatType;<br>
import org.dementhium.model.combat.Damage;<br>
import org.dementhium.model.combat.MagicFormulae;<br>
import org.dementhium.model.combat.MeleeFormulae;<br>
import org.dementhium.model.combat.RangeFormulae;<br>
import org.dementhium.model.map.Region;<br>
import org.dementhium.model.mask.Animation;<br>
import org.dementhium.model.mask.Graphic;<br>
import org.dementhium.model.misc.DamageManager.DamageType;<br>
import org.dementhium.model.misc.ProjectileManager;<br>
import org.dementhium.model.npc.impl.Nex;<br>
import org.dementhium.model.player.Player;<br>
import org.dementhium.net.ActionSender;<br>
import org.dementhium.tickable.Tick;</p>
<p>/**</p>
<ul>
<li>Handles nex’s combat action.</li>
<li>
<span class="mention">@author</span> Eclipse</li>
<li>
</li>
</ul>
<p>*/<br>
public class NexAction extends CombatAction {</p>
<pre><code>/**
 * The current combat type used.
 */
private CombatType type = CombatType.MAGIC;

/**
 *  nex's attacks.
 * @author Eclipse
 *
 */
private static enum Attack {
	MELEE(Animation.create(6354), Graphic.create(-1), null, null),
	RANGE(Animation.create(6986), Graphic.create(2244), null, null),
	MAGIC(Animation.create(6987), Graphic.create(2244), null, null);
	
	/**
	 * The attack animation.
	 */
	private final Animation anim;
	
	/**
	 * The start graphic.
	 */
	private final Graphic start;
	
	/**
	 * The projectile to send.
	 */
	private final Projectile projectile;
	
	/**
	 * The end graphic.
	 */
	private final Graphic end;
	
	/**
	 * Constructs a new {@code Attack} {@code Object}.
	 * @param anim The attack animation.
	 * @param start The start graphic.
	 * @param projectile The projectile.
	 * @param end The end graphic.
	 */
	private Attack(Animation anim, Graphic start, Projectile projectile, Graphic end) {
		this.anim = anim;
		this.start = start;
		this.projectile = projectile;
		this.end = end;
	}
}

/**
 * The current attack.
 */
private Attack attack;

/**
 * Constructs a new {@code NexAction} {@code Object}.
 * @param nex using this combat action.
 */
public NexAction() {
	super(false);
}

@Override
public boolean commenceSession() {
	interaction.getSource().getCombatExecutor().setTicks(interaction.getSource().getAttackDelay());
	attack = Attack.values()[type.ordinal()];
	int currentHit = 0;
	int maximum = 200;
	if (attack == Attack.MELEE) {
		maximum = 200;
		currentHit = MeleeFormulae.getDamage(interaction.getSource(), interaction.getVictim());
	} else if (attack == Attack.RANGE) {
		currentHit = RangeFormulae.getDamage(interaction.getSource(), interaction.getVictim());
	} else {
		currentHit = MagicFormulae.getDamage(interaction.getSource().getNPC(), interaction.getVictim(), 1.0, 1.0, 1.0);
	}
	interaction.setDeflected(interaction.getVictim().getPlayer().getPrayer().usingPrayer(1, type.getDeflectCurse()));
	interaction.setDamage(Damage.getDamage(interaction.getSource(), 
			interaction.getVictim(), type, currentHit));
	interaction.getDamage().setMaximum(maximum);
	if (attack.projectile != null) {
		ProjectileManager.sendProjectile(attack.projectile.transform(interaction.getSource(), interaction.getVictim()));
	}
	interaction.getSource().animate(attack.anim);
	interaction.getSource().graphics(attack.start);
    int ticks = attack.projectile != null ? (int) Math.floor(attack.projectile.getSourceLocation().distance(interaction.getVictim().getLocation()) * 0.3)
    		: 1;
	interaction.setTicks(ticks);
	return true;
}

@Override
public boolean executeSession() {
	if (interaction.getTicks() &lt; 2 || type == CombatType.MELEE) {
		if (interaction.isDeflected()) {
			interaction.getVictim().graphics(2230 - type.ordinal());
		}
		interaction.getVictim().animate(interaction.isDeflected() ? 12573 : interaction.getVictim().getDefenceAnimation());
	}
	interaction.setTicks(interaction.getTicks() - 1);
	return interaction.getTicks() &lt; 1;
}

@Override
public boolean endSession() {
	if (attack != Attack.MELEE) {
		interaction.getVictim().graphics(attack.end);
	}
	if (interaction.getDamage().getHit() &gt; -1) {
		interaction.getVictim().getDamageManager().damage(
				interaction.getSource(), interaction.getDamage(), type.getDamageType());
	} else {
		interaction.getVictim().graphics(85, 96 &lt;&lt; 16);
	}
	if (interaction.getDamage().getVenged() &gt; 0) {
		interaction.getVictim().submitVengeance(interaction.getSource(), interaction.getDamage().getVenged());
	}
	if (interaction.getDamage().getDeflected() &gt; 0) {
		interaction.getSource().getDamageManager().damage(interaction.getVictim(), 
				interaction.getDamage().getDeflected(), 
				interaction.getDamage().getDeflected(), DamageType.DEFLECT);
	}
	if (interaction.getDamage().getRecoiled() &gt; 0) {
		interaction.getSource().getDamageManager().damage(interaction.getVictim(), 
				interaction.getDamage().getRecoiled(), 
				interaction.getDamage().getRecoiled(), DamageType.DEFLECT);
	}
	interaction.getVictim().retaliate(interaction.getSource());
	return true;
}

/**
 * Sends the magic-based location attack.
 * @param npc nex.
 */
public static void sendLocationAttack(final Nex nex) {
	List&lt;Player&gt; players = Region.getLocalPlayers(nex.getLocation(), 12);
	if (players.size() &lt; 1) {
		return;
	}
	Player player = players.get(nex.getRandom().nextInt(players.size()));
	List&lt;Location&gt; locations = new ArrayList&lt;Location&gt;();
	int clippingMask;
	for (int x = player.getLocation().getX() - 5; x &lt; player.getLocation().getX() + 6; x++) {
		for (int y = player.getLocation().getY() - 5; y &lt; player.getLocation().getY() + 6; y++) {
			clippingMask = Region.getClippingMask(x, y, 0);
	        if ((clippingMask &amp; 0x1280180) == 0 &amp;&amp; (clippingMask &amp; 0x1280108) == 0
	        		&amp;&amp; (clippingMask &amp; 0x1280120) == 0 &amp;&amp; (clippingMask &amp; 0x1280102) == 0) {
	        	locations.add(Location.locate(x, y, 0));
	        }
		}
	}
	if (locations.size() &lt; 1) {
		return;
	}
	final Location l = locations.get(nex.getRandom().nextInt(locations.size()));
	int ticks = (int) Math.floor(nex.getProjectile().getSourceLocation().distance(l) * 0.5);
	World.getWorld().submit(new Tick(ticks + 1) {
		@Override
		public void execute() {
			stop();
			List&lt;Player&gt; players = Region.getLocalPlayers(l, 5);
			for (Player p : players) {
				ActionSender.sendPositionedGraphic(p, l, 1883);
				int damage = 269;
				if (p.getPrayer().usingPrayer(0, Prayer.PROTECT_FROM_MAGIC)) {
					damage = 1;
					p.animate(p.getDefenceAnimation());
				} else if (p.getPrayer().usingPrayer(1, Prayer.DEFLECT_MAGIC)) {
					damage = 1;
					p.graphics(2228);
					p.animate(12573);
				}
				p.getDamageManager().damage(nex, p.getRandom().nextInt(damage), 269, DamageType.MAGE);
			}
		}			
	});
}

@Override
public CombatType getCombatType() {
	return type;
}

/**
 * Sets the current combat type.
 * @param combatType The combat type.
 */
public void setType(CombatType combatType) {
	this.type = combatType;
}
</code></pre>
<p>}[/CODE]</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/639-nex-base-639/421871/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/639-nex-base-639/421871/1</link>
        <pubDate>Wed, 16 Nov 2011 20:50:35 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-421871-1</guid>
        <source url="https://forum.moparisthebest.com/t/639-nex-base-639/421871.rss">639 - Nex Base - 639</source>
      </item>
  </channel>
</rss>
