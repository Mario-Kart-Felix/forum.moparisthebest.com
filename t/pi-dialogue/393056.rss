<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>[PI] Dialogue</title>
    <link>https://forum.moparisthebest.com/t/pi-dialogue/393056</link>
    <description>[B][FONT=&quot;System&quot;][SIZE=&quot;5&quot;]Application[/SIZE][/FONT][/B]

*Note: If there are errors please put in comments and i shall resolve it.
Assumed Knowledge: The basics of creating and using dialogue at. Plus the ability to understand methods and objects&lt;br&gt;
Classes Modified: DialogueHandler,actionHandler

Before we start we must first understand what we are utilizing.
Make sure you have the following import:

[CODE]import java.util.Random;[/CODE] I suggest reading the following paragraph. It does shed some useful information. If you think this is hard to read i had to read the whole class of methods out loud to my teacher.

[QUOTE]

public static double random()

    Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.

    When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression

        new java.util.Random

    This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.

    This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.

    Returns:
        a pseudorandom double greater than or equal to 0.0 and less than 1.0.[/QUOTE]&lt;br&gt;
Now in saying that lets begin:
First open up:
*When i say Class i do not mean dialogueHandler.class i mean Your Java File.&lt;br&gt;
[B]DialogueHandler class
[/B]
Before we start coding how about we look at the following method.&lt;br&gt;
&lt;br&gt;
[CODE]public void sendDialogues(int dialogue, int npcId)[/CODE]If we look at its parameters the sendDialogues takes the dialogue integer and the integer of the Npc or the ID&lt;br&gt;
Because of this the creator if this method has decided to be convenient for other users to use a switch statement.&lt;br&gt;
[CODE]switch(dialogue) {[/CODE]The switch statement is used so the user can simply type in an ID for the dialogue and the parameter Int Dialogue is meet.&lt;br&gt;
&lt;br&gt;
We will return to this later in the tutorial.&lt;br&gt;
&lt;br&gt;
But first make sure you have the following method &lt;b&gt;placed&lt;/b&gt; within the dialogueHandler Class&lt;br&gt;
&lt;br&gt;
[CODE]private void sendStatement(String s) { // 1 line click here to continue chat box interface&lt;br&gt;
c.getPA().sendFrame126(s, 357);&lt;br&gt;
c.getPA().sendFrame126(&quot;Click here to continue&quot;, 358);&lt;br&gt;
c.getPA().sendFrame164(356);&lt;br&gt;
}[/CODE]I would go into dept of this code however this is for later tutorials.

Once that is complete
Find the following Line of code:
[CODE]public void sendDialogues(int dialogue, int npcId) {[/CODE]When you arrive there you should see the following start of the switch statement
[CODE]switch(dialogue) {[/CODE]Under that you shall find many case ####: code.
I suggest just placing the following code under the switch dialogue code.

A switch statement syntax is

[CODE]Case ####:
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;Code
break;[/CODE]What is this????
Case is a reserved Java Word
the code is like a if statement. in our [B]case*[/B] the dialogue is called by the method to be used. When the Id of that case is called so say now 1 
it is called and the code is used. 
The break; is like END CASE HERE. meaning the code is ended and another case may be created which in our case* it is again made and repeated.
*Funny joke aye?

Okay lets start off by first putting our case id in
For this example I&#39;m going to use the following[B] Dialogue  Number[/B].

[CODE]case 90: [/CODE]

That is our starter. Start this under the switch statement start.
Once we have created this we have to create the code.
First we must start with :
[CODE]sendStatement[/CODE]
because we are calling this method for use. If you look at the parameters of the sendStatement method it takes one argument which happens to be a string.
I&#39;m using this method for simplicity. If i could i would have used the many other great methods that are already there for use.

However back on topic.
The sendStatement is followed by brackets.
In the brackets according to the parameters it takes a single string. 
We can use this method to pass a message to the user via a dialogue or chatbox interface.
so. for example.
the following code is for the user.

[QUOTE]case 90:
 sendStatement(&quot;Good Day to you &quot; +c.playerName);
break;[/QUOTE]
In Depth analysis:
We used the sendStatement method much like the sendMessage method however in our case the sendStatement uses a interface to displays it message.
as String method we passed the following text &quot;Good day to you&quot;. As an additional feature i used the C object or the Client object to call the playerName method. Which i used to displays the user&#39;s name. I ended the sendStatement method because as a boundary i can only have one String. the parameters only permitted that therefore if i was to say now want more strings and features i could use the other methods however for simplicity sake I&#39;ll stick with that.
After that in the method it sends 1 line of text and another line of already coded text which has an action already behind it. There is no need to add a close operation to this interface as it already has one.
we break the code to end it.

I&#39;ve already have some examples for your disposal i do recommend making some more. 
[CODE] case 90:
            sendStatement(&quot;Good Day to you &quot; +c.playerName);
        break;
        case 91:
            sendStatement(&quot;This isn&#39;t the right time&quot;);
        break;
        case 92:
            sendStatement(&quot;Did you hear that? it&#39;s me not caring&quot;);
        break;
        case 93:
            sendStatement(&quot;This is for a tutorial to test random Dialogue&quot;);
        break;
        case 94:
            sendStatement(&quot;Hopefully people are not retarted&quot;);
        break;[/CODE] 

Now lets move on:
Open ActionHandler class
Once inside find:
[CODE]public void firstClickNpc(int npcType) {[/CODE]
[ul]Okay the firstClickNpc method is when the user or client clicks a NPC and the following line of code is executed.
Because of it we use a switch statement again but this time to represent NPCID. So once the npc is clicked what happens.
In my example i use a man. Because my mouse is only right click however you can use second clickNPC method if you wish. It doesn&#39;t matter.
I will not go into detail however i can explain how to use the switch statement.
So the switch statement cases are all NPC ID. Once you click it the server will run through here and see if you have a case declared to send back a response or just for your character to attack. I can&#39;t explain it better. when you right click you are presents options such as &quot;Talk to +npcIDNAME&quot;
When the talk to is the first click or left click(click by default) we use this to insert dialogue                  (I&#39;m really bad at explaining this part)
Remember the method sendDialogue well we are sending the dialogue to the actionhandler to be handled

we needed two arguments. 

[LIST=1]
[*]Dialogue id
[*]NpcType or ID[/ul]

We have the dialogue id but we do not have the npcType as that is handled in here.
If the user clicks a certain object or npc a number is generated and sent. We use this number to determine what is going to happen next.
So lets say I click talk to man.
The man&#39;s npcId is equal to 1
i declared the following code
in the switch statement regarding what happens when the npc is clicked.
[CODE]case 1:
         c.getDH().sendDialogues(90, npcType);
break;[/CODE]

Case 1: being the man&#39;s npc id
c.getDH() is just he object and we want to use the class&#39;s method sendDialogue.
However we are sending information back to the user (Thank god for multi threads aye)
The information is not directly to the user but to sendDialogue which sends a frame which is like interface. 
The interface contains information which is our sendStatement. The user gets the following message &quot;good day bla bla&quot;
That is it in a nut shell. I will go into greater detail for this when in my next tutorial which will include random interface messages.

I know some of you are asking the following question:
Wait we created 4 sendstatements for the man. How do we use it all but in a random order????
Well :)
I guess its ownerjosh to the rescue.
I have not had the chance to put this into a method however you can still use it. ( I typing this all off my head i do not have the code i used all i have is memory)
Anyone can use this.

It uses an array and in the array are the dialogueId numbers. 
[CODE]int[] Man = {90,91,92,93,94};[/CODE]
 
so when we call the man array it will look something like this
Man[0] = 90
Man[1] = 91
and so on. 
now lets utilize the math class
                   int arrayLength = Man.length;
First we must get the length of the array for use of the math class later. So to find the length of an
array in java there is already a built in method which we can use. we use it by first stating the array in our case its 
Man followed by a dot. and then the length;
I have stored the length of the array in the integer arrayLength.

Next i have used the arrayLength and the Random Math class to create an integer which is the random number regarding index not the dialogue numbers themselves.
So say now the user clicks the npc once. the integer Num = integer (Math random class generator * the arrayLength. 
the math random class number could be from 0.0 to 1.0 and is multiplied to the arraylength to determine the index number that is used or the element which we use.
okay for example 
the math random class number is 0.5 it is * by 5 which is 2.5 it is then rounded up to 3 and element 3 is called. which is some random text(i forgot it.)
                    int Num = (int)(Math.random() * arrayLength);

To end the following code is used. We get the method sendDialogue which sends the user the dialogue. The Man[Num]  Man being the array and Num being the index that is used. and the npcType is 1. 
Okay so in example
                    c.getDH().sendDialogues(Man[1], npcType);
the Man[1] is 91. then the dialogue id which is called is 91.
Array index number does not start at 1 it starts at 0.

So in general here is the code.

[CODE]case 1:
                    int[] Man = {90,91,92,93,94};
                    int arrayLength = Man.length;
                    int Num = (int)(Math.random() * arrayLength);
                    c.getDH().sendDialogues(Man[Num], npcType);
            break;[/CODE]

How about that about 10 lines of code turned into a full tutorial.


If there any errors please post them.

Someone Posts

Josh you noob why don&#39;t you make a method which returns the code?
Well i don&#39;t have time its a lot easier for me this way.

Personal statement.
It might be random however it is not as random as you think. You might get the same number again twice or three times in a row. That is why I&#39;m working on an ArrayList which removes the dialogue number when it is used once almost like a checkoff box.

oh an please recommend more tutorials on other things. I like making tutorials and passing on my knowledge.


[B][FONT=&quot;Impact&quot;][SIZE=&quot;5&quot;]PLEASE ATLEAST POST SPAM LOL![/SIZE][/FONT][/B]

[IMG]http://i292.photobucket.com/albums/mm12/joshua28at/test5.png[/img]
[IMG]http://i292.photobucket.com/albums/mm12/joshua28at/test4.png[/img]
[IMG]http://i292.photobucket.com/albums/mm12/joshua28at/test3.png[/img]
[IMG]http://i292.photobucket.com/albums/mm12/joshua28at/Test2.png[/img]
[IMG]http://i292.photobucket.com/albums/mm12/joshua28at/Test1dialogue.png[/img]</description>
    
    <lastBuildDate>Sat, 21 May 2011 18:33:30 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@Mental_Piracy Mental Piracy]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/mental_piracy">@Mental_Piracy</a> wrote:</p>
          <blockquote>
              <p>looks like the same horrid dialogue code thats in delta, its really a bad way to go about doing it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/6">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/6</link>
        <pubDate>Sat, 21 May 2011 18:33:30 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-6</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@system system]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/system">@system</a> wrote:</p>
          <blockquote>
              <p>Thank you so much im new to PI’s and i really appreciate it.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/5">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/5</link>
        <pubDate>Fri, 20 May 2011 22:19:02 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-5</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@Loveandpower Loveandpower]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/loveandpower">@Loveandpower</a> wrote:</p>
          <blockquote>
              <p>thanks for reminding me I need to add some.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/4">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/4</link>
        <pubDate>Fri, 29 Apr 2011 12:37:29 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-4</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@James-RevolutionX James-RevolutionX]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/james-revolutionx">@James-RevolutionX</a> wrote:</p>
          <blockquote>
              <p>There’s a much more <span class="bbcode-i"><span class="bbcode-b">simplistic</span></span> way of doing this;</p>
<p>[code]	private static void getRandomMessage(Client c) {<br>
int message = Misc.random(22-1);<br>
String[][] messages = {<br>
{“It’s a rather beautiful day isn’t it?”},<br>
{“I’m just your average villager.”},<br>
{“Sorry do I know you?”},<br>
{“You can train throughout the world of RuneScape.”},<br>
{“I’m sorry sir I can’t help you today I’m extremley busy…”},</p>
<pre><code>		{"Sooo....."},
		{"Did you know RuneScape is very stable?."},
		{"Did you know you can do so much!?"},
		{"I Loved my son.... he was a good fella..."},
		{"Hi.."},

		{"It's a rather beautiful day isn't it?"},
		{"I'm just your average villager."},
		{"Sorry do I know you?"},
		{"You can train throughout the world of RuneScape."},
		{"I'm sorry sir I can't help you today I'm extremley busy.."},

		{"Best be off!"},
		{"RuneScape, the leading game."},
		{"Sorry do I know you?"},
		{"You can train throughout the world of RuneScape."},
		{"I'm sorry sir I can't help you today I'm extremley busy.."},

	};
	sendNpcChat(c, messages[message][0],  c.talkingNpc, ""+Server.npcHandler.getNpcListName(c.talkingNpc)+"");
}[/code]</code></pre>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/3</link>
        <pubDate>Fri, 29 Apr 2011 11:23:00 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-3</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@pot_up_pls pot up pls]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/pot_up_pls">@pot_up_pls</a> wrote:</p>
          <blockquote>
              <p>nothin good about this.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/2</link>
        <pubDate>Fri, 29 Apr 2011 10:53:43 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-2</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
      <item>
        <title>[PI] Dialogue</title>
        <dc:creator><![CDATA[@ownerjosh ownerjosh]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/ownerjosh">@ownerjosh</a> wrote:</p>
          <blockquote>
              <p><span class="bbcode-b">[FONT=“System”][SIZE=“5”]Application[/SIZE][/FONT]</span></p>
<p>*Note: If there are errors please put in comments and i shall resolve it.<br>
Assumed Knowledge: The basics of creating and using dialogue at. Plus the ability to understand methods and objects<br><br>
Classes Modified: DialogueHandler,actionHandler</p>
<p>Before we start we must first understand what we are utilizing.<br>
Make sure you have the following import:</p>
<p><code>import java.util.Random;</code> I suggest reading the following paragraph. It does shed some useful information. If you think this is hard to read i had to read the whole class of methods out loud to my teacher.</p>
<p>[QUOTE]</p>
<p>public static double random()</p>
<pre><code>Returns a double value with a positive sign, greater than or equal to 0.0 and less than 1.0. Returned values are chosen pseudorandomly with (approximately) uniform distribution from that range.

When this method is first called, it creates a single new pseudorandom-number generator, exactly as if by the expression

    new java.util.Random

This new pseudorandom-number generator is used thereafter for all calls to this method and is used nowhere else.

This method is properly synchronized to allow correct use by more than one thread. However, if many threads need to generate pseudorandom numbers at a great rate, it may reduce contention for each thread to have its own pseudorandom-number generator.

Returns:
    a pseudorandom double greater than or equal to 0.0 and less than 1.0.[/QUOTE]&lt;br&gt;
</code></pre>
<p>Now in saying that lets begin:<br>
First open up:<br>
*When i say Class i do not mean dialogueHandler.class i mean Your Java File.<br><br>
<span class="bbcode-b">DialogueHandler class<br>
</span><br>
Before we start coding how about we look at the following method.<br><br>
<br></p>
<p><code>public void sendDialogues(int dialogue, int npcId)</code>If we look at its parameters the sendDialogues takes the dialogue integer and the integer of the Npc or the ID<br><br>
Because of this the creator if this method has decided to be convenient for other users to use a switch statement.<br></p>
<p><code>switch(dialogue) {</code>The switch statement is used so the user can simply type in an ID for the dialogue and the parameter Int Dialogue is meet.<br><br>
<br><br>
We will return to this later in the tutorial.<br><br>
<br><br>
But first make sure you have the following method <b>placed</b> within the dialogueHandler Class<br><br>
<br></p>
<p><code>private void sendStatement(String s) { // 1 line click here to continue chat box interface&lt;br&gt;
c.getPA().sendFrame126(s, 357);&lt;br&gt;
c.getPA().sendFrame126("Click here to continue", 358);&lt;br&gt;
c.getPA().sendFrame164(356);&lt;br&gt;
}</code>I would go into dept of this code however this is for later tutorials.</p>
<p>Once that is complete<br>
Find the following Line of code:</p>
<p><code>public void sendDialogues(int dialogue, int npcId) {</code>When you arrive there you should see the following start of the switch statement</p>
<p><code>switch(dialogue) {</code>Under that you shall find many case ###<span class="hashtag">#:</span> code.<br>
I suggest just placing the following code under the switch dialogue code.</p>
<p>A switch statement syntax is</p>
<p><code>Case ####:
&amp;nbsp;&amp;nbsp; &amp;nbsp; &amp;nbsp;Code
break;</code>What is this???<br>
Case is a reserved Java Word<br>
the code is like a if statement. in our <span class="bbcode-b">case*</span> the dialogue is called by the method to be used. When the Id of that case is called so say now 1<br>
it is called and the code is used.<br>
The break; is like END CASE HERE. meaning the code is ended and another case may be created which in our case* it is again made and repeated.<br>
*Funny joke aye?</p>
<p>Okay lets start off by first putting our case id in<br>
For this example I’m going to use the following<span class="bbcode-b"> Dialogue  Number</span>.</p>
<pre><code class="lang-auto">case 90: </code></pre>
<p>That is our starter. Start this under the switch statement start.<br>
Once we have created this we have to create the code.<br>
First we must start with :</p>
<pre><code class="lang-auto">sendStatement</code></pre>
<p>because we are calling this method for use. If you look at the parameters of the sendStatement method it takes one argument which happens to be a string.<br>
I’m using this method for simplicity. If i could i would have used the many other great methods that are already there for use.</p>
<p>However back on topic.<br>
The sendStatement is followed by brackets.<br>
In the brackets according to the parameters it takes a single string.<br>
We can use this method to pass a message to the user via a dialogue or chatbox interface.<br>
so. for example.<br>
the following code is for the user.</p>
<p>[QUOTE]case 90:<br>
sendStatement("Good Day to you " +c.playerName);<br>
break;[/QUOTE]<br>
In Depth analysis:<br>
We used the sendStatement method much like the sendMessage method however in our case the sendStatement uses a interface to displays it message.<br>
as String method we passed the following text “Good day to you”. As an additional feature i used the C object or the Client object to call the playerName method. Which i used to displays the user’s name. I ended the sendStatement method because as a boundary i can only have one String. the parameters only permitted that therefore if i was to say now want more strings and features i could use the other methods however for simplicity sake I’ll stick with that.<br>
After that in the method it sends 1 line of text and another line of already coded text which has an action already behind it. There is no need to add a close operation to this interface as it already has one.<br>
we break the code to end it.</p>
<p>I’ve already have some examples for your disposal i do recommend making some more.</p>
<p><code> case 90:
            sendStatement("Good Day to you " +c.playerName);
        break;
        case 91:
            sendStatement("This isn't the right time");
        break;
        case 92:
            sendStatement("Did you hear that? it's me not caring");
        break;
        case 93:
            sendStatement("This is for a tutorial to test random Dialogue");
        break;
        case 94:
            sendStatement("Hopefully people are not retarted");
        break;</code></p>
<p>Now lets move on:<br>
Open ActionHandler class<br>
Once inside find:</p>
<pre><code class="lang-auto">public void firstClickNpc(int npcType) {</code></pre>
<p>[ul]Okay the firstClickNpc method is when the user or client clicks a NPC and the following line of code is executed.<br>
Because of it we use a switch statement again but this time to represent NPCID. So once the npc is clicked what happens.<br>
In my example i use a man. Because my mouse is only right click however you can use second clickNPC method if you wish. It doesn’t matter.<br>
I will not go into detail however i can explain how to use the switch statement.<br>
So the switch statement cases are all NPC ID. Once you click it the server will run through here and see if you have a case declared to send back a response or just for your character to attack. I can’t explain it better. when you right click you are presents options such as “Talk to +npcIDNAME”<br>
When the talk to is the first click or left click(click by default) we use this to insert dialogue                  (I’m really bad at explaining this part)<br>
Remember the method sendDialogue well we are sending the dialogue to the actionhandler to be handled</p>
<p>we needed two arguments.</p>
<p>[LIST=1]<br>
[<em>]Dialogue id<br>
[</em>]NpcType or ID[/ul]</p>
<p>We have the dialogue id but we do not have the npcType as that is handled in here.<br>
If the user clicks a certain object or npc a number is generated and sent. We use this number to determine what is going to happen next.<br>
So lets say I click talk to man.<br>
The man’s npcId is equal to 1<br>
i declared the following code<br>
in the switch statement regarding what happens when the npc is clicked.</p>
<p><code>case 1:
         c.getDH().sendDialogues(90, npcType);
break;</code></p>
<p>Case 1: being the man’s npc id<br>
c.getDH() is just he object and we want to use the class’s method sendDialogue.<br>
However we are sending information back to the user (Thank god for multi threads aye)<br>
The information is not directly to the user but to sendDialogue which sends a frame which is like interface.<br>
The interface contains information which is our sendStatement. The user gets the following message “good day bla bla”<br>
That is it in a nut shell. I will go into greater detail for this when in my next tutorial which will include random interface messages.</p>
<p>I know some of you are asking the following question:<br>
Wait we created 4 sendstatements for the man. How do we use it all but in a random order???<br>
Well <img src="https://forum.moparisthebest.com/images/emoji/twitter/slight_smile.png?v=9" title=":slight_smile:" class="emoji" alt=":slight_smile:"><br>
I guess its ownerjosh to the rescue.<br>
I have not had the chance to put this into a method however you can still use it. ( I typing this all off my head i do not have the code i used all i have is memory)<br>
Anyone can use this.</p>
<p>It uses an array and in the array are the dialogueId numbers.</p>
<pre><code class="lang-auto">int[] Man = {90,91,92,93,94};</code></pre>
<p>so when we call the man array it will look something like this<br>
Man[0] = 90<br>
Man[1] = 91<br>
and so on.<br>
now lets utilize the math class<br>
int arrayLength = Man.length;<br>
First we must get the length of the array for use of the math class later. So to find the length of an<br>
array in java there is already a built in method which we can use. we use it by first stating the array in our case its<br>
Man followed by a dot. and then the length;<br>
I have stored the length of the array in the integer arrayLength.</p>
<p>Next i have used the arrayLength and the Random Math class to create an integer which is the random number regarding index not the dialogue numbers themselves.<br>
So say now the user clicks the npc once. the integer Num = integer (Math random class generator * the arrayLength.<br>
the math random class number could be from 0.0 to 1.0 and is multiplied to the arraylength to determine the index number that is used or the element which we use.<br>
okay for example<br>
the math random class number is 0.5 it is * by 5 which is 2.5 it is then rounded up to 3 and element 3 is called. which is some random text(i forgot it.)<br>
int Num = (int)(Math.random() * arrayLength);</p>
<p>To end the following code is used. We get the method sendDialogue which sends the user the dialogue. The Man[Num]  Man being the array and Num being the index that is used. and the npcType is 1.<br>
Okay so in example<br>
c.getDH().sendDialogues(Man[1], npcType);<br>
the Man[1] is 91. then the dialogue id which is called is 91.<br>
Array index number does not start at 1 it starts at 0.</p>
<p>So in general here is the code.</p>
<p><code>case 1:
                    int[] Man = {90,91,92,93,94};
                    int arrayLength = Man.length;
                    int Num = (int)(Math.random() * arrayLength);
                    c.getDH().sendDialogues(Man[Num], npcType);
            break;</code></p>
<p>How about that about 10 lines of code turned into a full tutorial.</p>
<p>If there any errors please post them.</p>
<p>Someone Posts</p>
<p>Josh you noob why don’t you make a method which returns the code?<br>
Well i don’t have time its a lot easier for me this way.</p>
<p>Personal statement.<br>
It might be random however it is not as random as you think. You might get the same number again twice or three times in a row. That is why I’m working on an ArrayList which removes the dialogue number when it is used once almost like a checkoff box.</p>
<p>oh an please recommend more tutorials on other things. I like making tutorials and passing on my knowledge.</p>
<p><span class="bbcode-b">[FONT=“Impact”][SIZE=“5”]PLEASE ATLEAST POST SPAM LOL![/SIZE][/FONT]</span></p>
<p><div class="lightbox-wrapper"><a class="lightbox" href="http://i292.photobucket.com/albums/mm12/joshua28at/test5.png" title="test5.png" rel="nofollow noopener"><img src="http://i292.photobucket.com/albums/mm12/joshua28at/test5.png" alt width="690" height="498"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">test5.png</span><span class="informations">781×564</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i292.photobucket.com/albums/mm12/joshua28at/test4.png" title="test4.png" rel="nofollow noopener"><img src="http://i292.photobucket.com/albums/mm12/joshua28at/test4.png" alt width="690" height="498"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">test4.png</span><span class="informations">781×564</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i292.photobucket.com/albums/mm12/joshua28at/test3.png" title="test3.png" rel="nofollow noopener"><img src="http://i292.photobucket.com/albums/mm12/joshua28at/test3.png" alt width="690" height="498"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">test3.png</span><span class="informations">781×564</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i292.photobucket.com/albums/mm12/joshua28at/Test2.png" title="Test2.png" rel="nofollow noopener"><img src="http://i292.photobucket.com/albums/mm12/joshua28at/Test2.png" alt width="690" height="498"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">Test2.png</span><span class="informations">781×564</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div><br>
<div class="lightbox-wrapper"><a class="lightbox" href="http://i292.photobucket.com/albums/mm12/joshua28at/Test1dialogue.png" title="Test1dialogue.png" rel="nofollow noopener"><img src="http://i292.photobucket.com/albums/mm12/joshua28at/Test1dialogue.png" alt width="690" height="498"><div class="meta">
<svg class="fa d-icon d-icon-far-image svg-icon" aria-hidden="true"><use xlink:href="#far-image"></use></svg><span class="filename">Test1dialogue.png</span><span class="informations">781×564</span><svg class="fa d-icon d-icon-discourse-expand svg-icon" aria-hidden="true"><use xlink:href="#discourse-expand"></use></svg>
</div></a></div></p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/pi-dialogue/393056/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/pi-dialogue/393056/1</link>
        <pubDate>Fri, 29 Apr 2011 10:30:47 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-393056-1</guid>
        <source url="https://forum.moparisthebest.com/t/pi-dialogue/393056.rss">[PI] Dialogue</source>
      </item>
  </channel>
</rss>
