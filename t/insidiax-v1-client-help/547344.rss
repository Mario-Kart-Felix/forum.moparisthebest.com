<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/">
  <channel>
    <title>InsidiaX V1 Client Help</title>
    <link>https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344</link>
    <description>Hello guys,
I need some help with my Client Auto-Cache Downloader...
My cache was auto-downloading and everything was fine, until I changed some pics and stuff up in my cache then re-uploaded it to Dropbox and Changed the link in: Cachedownloader.java and Client.java...
Now it doesn&#39;t work anymore, it says (Error Please Report) Something like that.
I will list my Cachedownloader.java below. My cache name is correct, it works fine once manually placed in C:/drive, I have checked everything inside as well and it is perfectly in order.
[CODE]
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.FileWriter;
import java.io.BufferedWriter;
import java.io.BufferedOutputStream;
import java.io.BufferedInputStream;
import java.io.FileOutputStream;
import java.io.FileInputStream;
import java.io.InputStream;
import java.net.URLConnection;
import java.net.URL;
import java.util.zip.ZipFile;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.Enumeration;

import sign.signlink;

public class CacheDownloader {

	private client client;

	private final int BUFFER = 1024;

	private final int VERSION = 5; // Version of cache
	//private String cacheLink = &quot;https://dropbox.com/s/l27clyytlhfz5fk/VintageCache.zip&quot;; // Link to cache
	private String cacheLink = &quot;https://dropbox.com/s/l27clyytlhfz5fk/VintageCache.zip&quot;; // Link to cache
	
	private String fileToExtract = getCacheDir() + getArchivedName();

	public CacheDownloader(client client) {
		this.client = client;
	}

	private void drawLoadingText(String text) {
		client.drawLoadingText(35, text);
		//System.out.println(text);
	}


	private void drawLoadingText(int amount, String text) {
		client.drawLoadingText(amount, text);
		//System.out.println(text);
	}

	private String getCacheDir() {
		return signlink.findcachedir();
	}

	private String getCacheLink() {
		return cacheLink;
	}

	private int getCacheVersion() {
		return VERSION;
	}

	public CacheDownloader downloadCache() {
		try {
		File location = new File(getCacheDir());
		File version = new File(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;);
		
		if(!location.exists()) {
			//drawLoadingText(&quot;Loading new Updates....&quot;);
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println(&quot;UNZIP&quot;);

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
			versionFile.close();
			deleteZIP(getArchivedName());
		} else {
			if(!version.exists()) {
				//drawLoadingText(&quot;~ First Time Installation, Only Once! ~&quot;);
				downloadFile(getCacheLink(), getArchivedName());

				unZip();
				//System.out.println(&quot;UNZIP&quot;);

				BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + &quot;/cacheVersion&quot; + getCacheVersion() + &quot;.dat&quot;));
				versionFile.close();
				deleteZIP(getArchivedName());

			} else {
				return null;
			}
		}
		} catch(Exception e) {

		}
		return null;
	}
	
	private void downloadFile(String adress, String localFileName) {
		OutputStream out = null;
		URLConnection conn;
		InputStream in = null;
		
		try {

			URL url = new URL(adress);
			out = new BufferedOutputStream(
				new FileOutputStream(getCacheDir() + &quot;/&quot; +localFileName)); 

			conn = url.openConnection();
			in = conn.getInputStream(); 
		
			byte[] data = new byte[BUFFER]; 
	
			int numRead;
			long numWritten = 0;
			int length = conn.getContentLength();

	
			while((numRead = in.read(data)) != -1) {
				out.write(data, 0, numRead);
				numWritten += numRead;

            			int percentage = (int)(((double)numWritten / (double)length) * 100D);
				drawLoadingText(percentage, &quot;Downloading Cache &quot; + percentage + &quot;%...&quot;);

			}

			System.out.println(localFileName + &quot;\t&quot; + numWritten);
			drawLoadingText(&quot;Unpacking..&quot;);

		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			try {
				if (in != null) {
					in.close();
				}
				if (out != null) {
					out.close();
				}
			} catch (IOException ioe) {
			}
		}

	}

	private String getArchivedName() {
		int lastSlashIndex = getCacheLink().lastIndexOf(&#39;/&#39;);
		if (lastSlashIndex &gt;= 0 
			&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
			return getCacheLink().substring(lastSlashIndex + 1);
		} else {
			//System.err.println(&quot;error retreiving archivaed name.&quot;);
		}
		return &quot;&quot;;
	}




	private void unZip() {

		try {
    			InputStream in = 
				new BufferedInputStream(new FileInputStream(fileToExtract));
			ZipInputStream zin = new ZipInputStream(in);
			ZipEntry e;

			while((e=zin.getNextEntry()) != null) {

               			if(e.isDirectory()) {
					(new File(getCacheDir() + e.getName())).mkdir();
               			} else {

				if (e.getName().equals(fileToExtract)) {
					unzip(zin, fileToExtract);
					break;
				}
       					unzip(zin, getCacheDir() + e.getName());
				}
				//System.out.println(&quot;unzipping2 &quot; + e.getName());
			}
			zin.close();

		} catch(Exception e) {
			e.printStackTrace();
		}
	}

private void deleteZIP(String fileName){
    // A File object to represent the filename
    File f = new File(getCacheDir() + fileName);

    // Make sure the file or directory exists and isn&#39;t write protected
    if (!f.exists())
      throw new IllegalArgumentException(
          &quot;Delete: no such file or directory: &quot; + fileName);

    if (!f.canWrite())
      throw new IllegalArgumentException(&quot;Delete: write protected: &quot;
          + fileName);

    // If it is a directory, make sure it is empty
    if (f.isDirectory()) {
      String[] files = f.list();
      if (files.length &gt; 0)
        throw new IllegalArgumentException(
            &quot;Delete: directory not empty: &quot; + fileName);
    }

    // Attempt to delete it
    boolean success = f.delete();

    if (!success)
      throw new IllegalArgumentException(&quot;Delete: deletion failed&quot;);

	}

	private void unzip(ZipInputStream zin, String s) 
		throws IOException {

		FileOutputStream out = new FileOutputStream(s);
		//System.out.println(&quot;unzipping &quot; + s);
		byte [] b = new byte[BUFFER];
		int len = 0;

		while ((len = zin.read(b)) != -1) {
			out.write(b,0,len);
		}
		out.close();
	}
}
[/CODE]
That&#39;s my Cachedownloader.java.
Does anyone see anything wrong? Can anyone help in anyway please?
Any help would be greatly appreciated.
Thank you.</description>
    
    <lastBuildDate>Sun, 19 Oct 2014 17:05:33 +0000</lastBuildDate>
    <category>Runescape</category>
    <atom:link href="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344.rss" rel="self" type="application/rss+xml" />
      <item>
        <title>InsidiaX V1 Client Help</title>
        <dc:creator><![CDATA[@malimt malimt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malimt">@malimt</a> wrote:</p>
          <blockquote>
              <p>No,<br>
It has been solved you have to add ( dl.Dropboxusercontent )<br>
dl. and usercontent<br>
That’s it, boom it’s fixed</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/3">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/3</link>
        <pubDate>Sun, 19 Oct 2014 17:05:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547344-3</guid>
        <source url="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344.rss">InsidiaX V1 Client Help</source>
      </item>
      <item>
        <title>InsidiaX V1 Client Help</title>
        <dc:creator><![CDATA[@Lordabyssal Lordabyssal]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/lordabyssal">@Lordabyssal</a> wrote:</p>
          <blockquote>
              <p>Wrong section!</p>
<p>try:</p>
<pre><code class="lang-auto"></code></pre>
<p>Change the download link to:</p>
<p><a href="http://dl.dropbox.com" class="onebox" target="_blank" rel="nofollow noopener">dl.dropbox.com</a></p>
<p>(dl) will start download instantly</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/2">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/2</link>
        <pubDate>Sun, 19 Oct 2014 07:55:06 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547344-2</guid>
        <source url="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344.rss">InsidiaX V1 Client Help</source>
      </item>
      <item>
        <title>InsidiaX V1 Client Help</title>
        <dc:creator><![CDATA[@malimt malimt]]></dc:creator>
        <description><![CDATA[
          <p><a href="https://forum.moparisthebest.com/u/malimt">@malimt</a> wrote:</p>
          <blockquote>
              <p>Hello guys,<br>
I need some help with my Client Auto-Cache Downloader…<br>
My cache was auto-downloading and everything was fine, until I changed some pics and stuff up in my cache then re-uploaded it to Dropbox and Changed the link in: Cachedownloader.java and Client.java…<br>
Now it doesn’t work anymore, it says (Error Please Report) Something like that.<br>
I will list my Cachedownloader.java below. My cache name is correct, it works fine once manually placed in C:/drive, I have checked everything inside as well and it is perfectly in order.</p>
<p>[CODE]<br>
import java.io.File;<br>
import java.io.IOException;<br>
import java.io.OutputStream;<br>
import java.io.FileWriter;<br>
import java.io.BufferedWriter;<br>
import java.io.BufferedOutputStream;<br>
import java.io.BufferedInputStream;<br>
import java.io.FileOutputStream;<br>
import java.io.FileInputStream;<br>
import java.io.InputStream;<br>
import java.net.URLConnection;<br>
import java.net.URL;<br>
import java.util.zip.ZipFile;<br>
import java.util.zip.ZipEntry;<br>
import java.util.zip.ZipInputStream;<br>
import java.util.Enumeration;</p>
<p>import sign.signlink;</p>
<p>public class CacheDownloader {</p>
<pre><code>private client client;

private final int BUFFER = 1024;

private final int VERSION = 5; // Version of cache
//private String cacheLink = "https://dropbox.com/s/l27clyytlhfz5fk/VintageCache.zip"; // Link to cache
private String cacheLink = "https://dropbox.com/s/l27clyytlhfz5fk/VintageCache.zip"; // Link to cache

private String fileToExtract = getCacheDir() + getArchivedName();

public CacheDownloader(client client) {
	this.client = client;
}

private void drawLoadingText(String text) {
	client.drawLoadingText(35, text);
	//System.out.println(text);
}


private void drawLoadingText(int amount, String text) {
	client.drawLoadingText(amount, text);
	//System.out.println(text);
}

private String getCacheDir() {
	return signlink.findcachedir();
}

private String getCacheLink() {
	return cacheLink;
}

private int getCacheVersion() {
	return VERSION;
}

public CacheDownloader downloadCache() {
	try {
	File location = new File(getCacheDir());
	File version = new File(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat");
	
	if(!location.exists()) {
		//drawLoadingText("Loading new Updates....");
		downloadFile(getCacheLink(), getArchivedName());

		unZip();
		//System.out.println("UNZIP");

		BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
		versionFile.close();
		deleteZIP(getArchivedName());
	} else {
		if(!version.exists()) {
			//drawLoadingText("~ First Time Installation, Only Once! ~");
			downloadFile(getCacheLink(), getArchivedName());

			unZip();
			//System.out.println("UNZIP");

			BufferedWriter versionFile = new BufferedWriter(new FileWriter(getCacheDir() + "/cacheVersion" + getCacheVersion() + ".dat"));
			versionFile.close();
			deleteZIP(getArchivedName());

		} else {
			return null;
		}
	}
	} catch(Exception e) {

	}
	return null;
}

private void downloadFile(String adress, String localFileName) {
	OutputStream out = null;
	URLConnection conn;
	InputStream in = null;
	
	try {

		URL url = new URL(adress);
		out = new BufferedOutputStream(
			new FileOutputStream(getCacheDir() + "/" +localFileName)); 

		conn = url.openConnection();
		in = conn.getInputStream(); 
	
		byte[] data = new byte[BUFFER]; 

		int numRead;
		long numWritten = 0;
		int length = conn.getContentLength();


		while((numRead = in.read(data)) != -1) {
			out.write(data, 0, numRead);
			numWritten += numRead;

        			int percentage = (int)(((double)numWritten / (double)length) * 100D);
			drawLoadingText(percentage, "Downloading Cache " + percentage + "%...");

		}

		System.out.println(localFileName + "\t" + numWritten);
		drawLoadingText("Unpacking..");

	} catch (Exception exception) {
		exception.printStackTrace();
	} finally {
		try {
			if (in != null) {
				in.close();
			}
			if (out != null) {
				out.close();
			}
		} catch (IOException ioe) {
		}
	}

}

private String getArchivedName() {
	int lastSlashIndex = getCacheLink().lastIndexOf('/');
	if (lastSlashIndex &gt;= 0 
		&amp;&amp; lastSlashIndex &lt; getCacheLink().length() -1) { 
		return getCacheLink().substring(lastSlashIndex + 1);
	} else {
		//System.err.println("error retreiving archivaed name.");
	}
	return "";
}




private void unZip() {

	try {
			InputStream in = 
			new BufferedInputStream(new FileInputStream(fileToExtract));
		ZipInputStream zin = new ZipInputStream(in);
		ZipEntry e;

		while((e=zin.getNextEntry()) != null) {

           			if(e.isDirectory()) {
				(new File(getCacheDir() + e.getName())).mkdir();
           			} else {

			if (e.getName().equals(fileToExtract)) {
				unzip(zin, fileToExtract);
				break;
			}
   					unzip(zin, getCacheDir() + e.getName());
			}
			//System.out.println("unzipping2 " + e.getName());
		}
		zin.close();

	} catch(Exception e) {
		e.printStackTrace();
	}
}
</code></pre>
<p>private void deleteZIP(String fileName){<br>
// A File object to represent the filename<br>
File f = new File(getCacheDir() + fileName);</p>
<pre><code>// Make sure the file or directory exists and isn't write protected
if (!f.exists())
  throw new IllegalArgumentException(
      "Delete: no such file or directory: " + fileName);

if (!f.canWrite())
  throw new IllegalArgumentException("Delete: write protected: "
      + fileName);

// If it is a directory, make sure it is empty
if (f.isDirectory()) {
  String[] files = f.list();
  if (files.length &gt; 0)
    throw new IllegalArgumentException(
        "Delete: directory not empty: " + fileName);
}

// Attempt to delete it
boolean success = f.delete();

if (!success)
  throw new IllegalArgumentException("Delete: deletion failed");

}

private void unzip(ZipInputStream zin, String s) 
	throws IOException {

	FileOutputStream out = new FileOutputStream(s);
	//System.out.println("unzipping " + s);
	byte [] b = new byte[BUFFER];
	int len = 0;

	while ((len = zin.read(b)) != -1) {
		out.write(b,0,len);
	}
	out.close();
}
</code></pre>
<p>}<br>
[/CODE]<br>
That’s my Cachedownloader.java.<br>
Does anyone see anything wrong? Can anyone help in anyway please?<br>
Any help would be greatly appreciated.<br>
Thank you.</p>
          </blockquote>
          <p><a href="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/1">Read full topic</a></p>
        ]]></description>
        <link>https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344/1</link>
        <pubDate>Sun, 19 Oct 2014 07:40:33 +0000</pubDate>
        <guid isPermaLink="false">forum.moparisthebest.com-post-547344-1</guid>
        <source url="https://forum.moparisthebest.com/t/insidiax-v1-client-help/547344.rss">InsidiaX V1 Client Help</source>
      </item>
  </channel>
</rss>
